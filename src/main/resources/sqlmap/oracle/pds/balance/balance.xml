<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="balanceDAO">
	
	<sql id="sql_getMonthlyBalanceList">
		SELECT
			R.NA_ADJPL_C
			, FN_TRPL_CIF_NM(R.NA_ADJPL_C) CLIENT_NM
			, DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC) NA_BZPLC
			, FN_TRPL_CIF_NM(DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC)) BZPL_NM
			, R.BAS_YM
			, NVL(SUM(R.CROV_AM), 0) YY_CROV_AM
			, 0 YY_CROV_DLAY_INT
			, NVL(SUM(R.TXT_AM), 0) - NVL(SUM(R.TXT_VAT), 0) TXT_AM
			, NVL(SUM(R.TXT_VAT), 0) TXT_VAT
			, NVL(SUM(R.EXTX_AM), 0) EXTX_AM
			, NVL(SUM(R.SMA_AM), 0) SMA_AM
			, NVL(SUM(R.LIQ_SPY_AM), 0) - NVL(SUM(LIQ_SPY_VAT), 0) LIQ_SPY_AM
			, NVL(SUM(R.LIQ_SPY_VAT), 0) LIQ_SPY_VAT
			, NVL(SUM(R.VCBT_AM), 0) VCBT_AM
			, NVL(SUM(R.VCBX_AM), 0) VCBX_AM 
			, NVL(SUM(R.STOG_AM), 0) STOG_AM 
			, NVL(SUM(R.CBAM), 0) CBAM
			, NVL(SUM(R.ETC_STL_AM), 0) CSH_AM
			, 0 PPYAM 
			, NVL(SUM(R.PPY_AM), 0) PPY_AM
			, NVL(SUM(R.BYNG_DC_AM), 0) BYNG_DC_AM
			, NVL(SUM(R.MAD_AM), 0) MAD_AM
			, NVL(SUM(R.PY_AM), 0) PY_AM 
			, NVL(SUM(R.PY_CAN_AM), 0) PY_CAN_AM 
			, NVL(SUM(R.PY_AM), 0) + NVL(SUM(R.MAD_AM), 0) + NVL(SUM(R.PPY_AM), 0) + NVL(SUM(R.BYNG_DC_AM), 0) - NVL(SUM(R.PY_CAN_AM), 0) + NVL(SUM(R.ETC_STL_AM), 0)  ADJ_AM
			, NVL(SUM(R.BAC), 0) BAC 
			, NVL(SUM(R.DLAY_INT_OCU_AM), 0) DLAY_INT_OCU_AM 
			, NVL(SUM(R.DLAY_INT_PY_AM), 0) DLAY_INT_PY_AM
			, NVL(SUM(R.MRG_AM), 0) MRG_AM
			, NVL(SUM(R.MRG_DLAY_INT), 0) MRG_DLAY_INT
			, NVL(SUM(R.SPY_AM), 0) SUPL_AM 
			, NVL(SUM(R.TXT_VAT), 0) + NVL(SUM(R.LIQ_SPY_VAT), 0)  SUPL_VAT
			, NVL(SUM(R.DB_CRC_AM), 0) DB_CRC_AM 
			, NVL(SUM(R.CR_CRC_AM), 0) CR_CRC_AM
			, NVL(SUM(CASE WHEN R.BZ_METH_DSC = '01' THEN R.AMN_FEE ELSE 0 END), 0)  AMN_FEE_R1
			, NVL(SUM(CASE WHEN R.BZ_METH_DSC = '02' THEN R.AMN_FEE ELSE 0 END), 0)  AMN_FEE_R2
			, NVL(SUM(R.AMN_FEE_VAT), 0) AMN_FEE_VAT
			, NVL(SUM(R.PHD_FEE), 0) PHD_FEE
			, NVL(SUM(R.PHD_FEE_VAT), 0) PHD_FEE_VAT
			, NVL(SUM(R.BYNG_SSDY), 0) BYNG_SSDY
			, NVL(SUM(R.AFF_SSDY), 0) + NVL(SUM(R.PHD_AFF_SSDY), 0) AFF_SSDY
			, NVL(SUM(R.MCDBD_AM), 0) MCDBD_AM
			, NVL(SUM(R.SEL_SSDY), 0) SEL_SSDY
			, NVL(SUM(R.ETR_FEE_ARG_AM), 0) ETR_FEE_ARG_AM
			, NVL(SUM(R.DLAYPZ), 0) DLAYPZ
			, NVL(SUM(R.PY_ETC_AM), 0) PY_ETC_AM
			, NVL(SUM(R.VCBT_RTU_AM), 0) VCBT_RTU_AM
			, NVL(SUM(R.VCBX_RTU_AM), 0) VCBX_RTU_AM
			, NVL(SUM(R.VPLTT_RTU_AM), 0) VPLTT_RTU_AM
			, NVL(SUM(R.RTU_FEE), 0) RTU_FEE
			, NVL(SUM(R.RTU_FEE_VAT), 0) RTU_FEE_VAT             
		FROM TB_DE_BYNG_MON R
		WHERE R.NA_BLB_DFC_DSC = '*'
		AND R.BAS_YM = #{BAS_YM}
		<if test="ADJ_NA_BZPLC != null and  ADJ_NA_BZPLC != '' and  ADJ_NA_BZPLC != 'all'">
			AND DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
		</if>
		<if test="TRPL_C.length == 1"> 
			AND R.NA_ADJPL_C = #{TRPL_C[0]}
		</if>
		<if test="TRPL_C.length > 1"> 
			AND R.NA_ADJPL_C IN (SELECT NA_TRPL_C FROM TB_TR_TRPL_CIF WHERE UP_NA_TRPL_C= #{TRPL_C[0]} AND DEL_YN = '0')
		</if>
		GROUP BY R.NA_ADJPL_C, DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC), R.BAS_YM
		ORDER BY R.NA_ADJPL_C, DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC), R.BAS_YM
	</sql>
	
	<select id="getMonthlyBalanceList" parameterType="java.util.Map" resultType="java.util.Map">
		<include refid="sql_getMonthlyBalanceList" />
	</select>

	<select id="getMonthlyBalanceListSum" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			NVL(SUM(R.CROV_AM), 0 ) YY_CROV_AM
			, 0 YY_CROV_DLAY_INT
			, NVL(SUM(R.TXT_AM), 0 ) - NVL(SUM(TXT_VAT), 0 )TXT_AM
			, NVL(SUM(R.TXT_VAT), 0 ) TXT_VAT 
			, NVL(SUM(R.EXTX_AM), 0 ) EXTX_AM 
			, NVL(SUM(R.SMA_AM), 0 ) SMA_AM
			, NVL(SUM(R.LIQ_SPY_AM), 0 ) - NVL(SUM(LIQ_SPY_VAT), 0 ) LIQ_SPY_AM
			, NVL(SUM(R.LIQ_SPY_VAT), 0 ) LIQ_SPY_VAT 
			, NVL(SUM(R.VCBT_AM), 0 ) VCBT_AM 
			, NVL(SUM(R.VCBX_AM), 0 ) VCBX_AM 
			, NVL(SUM(R.STOG_AM), 0 ) STOG_AM 
			, NVL(SUM(R.CBAM), 0 ) CBAM
			, NVL(SUM(R.ETC_STL_AM), 0 ) CSH_AM
			, 0 PPYAM 
			, NVL(SUM(R.PPY_AM), 0 ) PPY_AM
			, NVL(SUM(R.BYNG_DC_AM), 0 ) BYNG_DC_AM
			, NVL(SUM(R.MAD_AM), 0 ) MAD_AM
			, NVL(SUM(R.PY_AM), 0 ) PY_AM 
			, NVL(SUM(R.PY_CAN_AM), 0 ) PY_CAN_AM 
			, NVL(SUM(R.PY_AM), 0 ) + NVL(SUM(R.MAD_AM), 0 ) + NVL(SUM(R.PPY_AM), 0 ) + NVL(SUM(R.BYNG_DC_AM), 0 ) - NVL(SUM(R.PY_CAN_AM), 0 ) + NVL(SUM(R.ETC_STL_AM), 0 ) ADJ_AM
			, NVL(SUM(R.BAC), 0 ) BAC 
			, NVL(SUM(R.DLAY_INT_OCU_AM), 0 ) DLAY_INT_OCU_AM 
			, NVL(SUM(R.DLAY_INT_PY_AM), 0 ) DLAY_INT_PY_AM
			, NVL(SUM(R.MRG_AM), 0 ) MRG_AM
			, NVL(SUM(R.MRG_DLAY_INT), 0 ) MRG_DLAY_INT
			, NVL(SUM(R.SPY_AM), 0 ) SUPL_AM 
			, NVL(SUM(R.TXT_VAT), 0 ) + NVL(SUM(R.LIQ_SPY_VAT), 0 ) SUPL_VAT
			, NVL(SUM(R.DB_CRC_AM), 0 ) DB_CRC_AM 
			, NVL(SUM(R.CR_CRC_AM), 0 ) CR_CRC_AM
			, NVL(SUM(CASE WHEN R.BZ_METH_DSC = '01' THEN R.AMN_FEE ELSE 0 END), 0 )  AMN_FEE_R1
			, NVL(SUM(CASE WHEN R.BZ_METH_DSC = '02' THEN R.AMN_FEE ELSE 0 END), 0 )  AMN_FEE_R2
			, NVL(SUM(R.AMN_FEE_VAT), 0 ) AMN_FEE_VAT
			, NVL(SUM(R.PHD_FEE), 0 ) PHD_FEE
			, NVL(SUM(R.PHD_FEE_VAT), 0 ) PHD_FEE_VAT
			, NVL(SUM(R.BYNG_SSDY), 0 ) BYNG_SSDY
			, NVL(SUM(R.AFF_SSDY), 0 )  + NVL(SUM(R.PHD_AFF_SSDY), 0 ) AFF_SSDY
			, NVL(SUM(R.MCDBD_AM), 0 ) MCDBD_AM
			, NVL(SUM(R.SEL_SSDY), 0 ) SEL_SSDY
			, NVL(SUM(R.ETR_FEE_ARG_AM), 0 ) ETR_FEE_ARG_AM
			, NVL(SUM(R.DLAYPZ), 0 ) DLAYPZ
			, NVL(SUM(R.PY_ETC_AM), 0 ) PY_ETC_AM
			, NVL(SUM(R.VCBT_RTU_AM), 0 ) VCBT_RTU_AM
			, NVL(SUM(R.VCBX_RTU_AM), 0 ) VCBX_RTU_AM
			, NVL(SUM(R.VPLTT_RTU_AM), 0 ) VPLTT_RTU_AM
			, NVL(SUM(R.RTU_FEE), 0 ) RTU_FEE
			, NVL(SUM(R.RTU_FEE_VAT)  ,0) RTU_FEE_VAT
		FROM TB_DE_BYNG_MON R
		WHERE R.NA_BLB_DFC_DSC = '*'
		AND R.BAS_YM = #{BAS_YM}
		<if test="ADJ_NA_BZPLC != null and  ADJ_NA_BZPLC != '' and  ADJ_NA_BZPLC != 'all'">
			AND DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
		</if>
		<if test="TRPL_C.length == 1"> 
			AND R.NA_ADJPL_C = #{TRPL_C[0]}
		</if>
		<if test="TRPL_C.length > 1"> 
			AND R.NA_ADJPL_C IN (SELECT NA_TRPL_C FROM TB_TR_TRPL_CIF WHERE UP_NA_TRPL_C= #{TRPL_C[0]})
		</if>
<!-- 		GROUP BY R.NA_ADJPL_C, DECODE(R.NA_BZPLC, '8808983000015', '8808983000015', R.ADJ_NA_BZPLC), R.BAS_YM -->
	</select>
		
	<select id="getMonthlyBalanceDetailList" parameterType="java.util.Map" resultType="java.util.Map">
	<![CDATA[
		SELECT
			ROWNUM SEQ,
			DECODE(GUBN_NM, NULL , 'Y', 'N') SUM_YN,
			GUBN1 ITEM1,
			GUBN2 ITEM2,
			GUBN_NM ITEM3,
			DB_A_VAL BLB_AM,
			CR_B_VAL DFC_AM,
			SUM_VAL SAM
		FROM (
			SELECT
				  CASE WHEN C.NO IN (1) THEN '전월말잔액' WHEN C.NO IN (2) THEN '전월말잔액' ELSE '' END AS GUBN1
				, CASE WHEN C.NO IN (1) THEN '전월말잔액' WHEN C.NO IN (2) THEN '' ELSE '' END AS GUBN2
				, CASE WHEN C.NO IN (1) THEN '' WHEN C.NO IN (2) THEN '' ELSE '' END AS GUBN_NM
				, DECODE(C.NO,1,B.DB_YY_CROV_AM ,0) AS DB_A_VAL
				, DECODE(C.NO,1,B.CR_YY_CROV_AM ,0) AS CR_B_VAL
				, DECODE(C.NO,1,B.SUM_YY_CROV_AM ,0) AS SUM_VAL
			FROM (
				SELECT A.DB_YY_CROV_AM, A.CR_YY_CROV_AM, A.SUM_YY_CROV_AM
				FROM (
					SELECT
						SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN CROV_AM ELSE 0 END) DB_YY_CROV_AM, /*차변전월말잔액*/
						SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN CROV_AM ELSE 0 END) CR_YY_CROV_AM, /*대변전월말잔액*/
						SUM(CASE WHEN NA_BLB_DFC_DSC = '*' THEN CROV_AM ELSE 0 END) SUM_YY_CROV_AM
					FROM TB_DE_BYNG_MON
					WHERE DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC) =#{ADJ_NA_BZPLC}
					AND NA_ADJPL_C = #{NA_ADJPL_C}
					AND BAS_YM = #{BAS_YM}
					/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
				) A
			) B, (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL < 1) C
			WHERE NO <= 1
			UNION ALL
			SELECT
				CASE
					WHEN C.NO IN (1) THEN '매입금액'
					WHEN C.NO IN (2) THEN '매입금액'
					WHEN C.NO IN (3) THEN '매입금액'
					WHEN C.NO IN (4) THEN '매입금액'
					WHEN C.NO IN (5) THEN '매입금액'
					WHEN C.NO IN (6) THEN '매입금액'
					WHEN C.NO IN (7) THEN '매입금액'
					WHEN C.NO IN (8) THEN '매입금액'
					WHEN C.NO IN (9) THEN '매입금액'
					WHEN C.NO IN (10) THEN '매입금액합계'
					WHEN C.NO IN (11) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (12) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (13) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (14) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (15) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (16) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (17) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (18) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (19) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (20) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (21) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (22) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (23) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (24) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (25) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (26) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (27) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (28) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (29) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (30) THEN '수수료 등(자동계산항목)합계'
					WHEN C.NO IN (31) THEN '외상매입금총액'
					ELSE ''
				END AS GUBN
				, CASE
					WHEN C.NO IN (1) THEN '매입금액'
					WHEN C.NO IN (2) THEN ''
					WHEN C.NO IN (3) THEN ''
					WHEN C.NO IN (4) THEN ''
					WHEN C.NO IN (5) THEN ''
					WHEN C.NO IN (6) THEN ''
					WHEN C.NO IN (7) THEN ''
					WHEN C.NO IN (8) THEN ''
					WHEN C.NO IN (9) THEN ''
					WHEN C.NO IN (10) THEN '매입금액합계'
					WHEN C.NO IN (11) THEN '수수료 등(자동계산항목)'
					WHEN C.NO IN (12) THEN ''
					WHEN C.NO IN (13) THEN ''
					WHEN C.NO IN (14) THEN ''
					WHEN C.NO IN (15) THEN ''
					WHEN C.NO IN (16) THEN ''
					WHEN C.NO IN (17) THEN ''
					WHEN C.NO IN (18) THEN ''
					WHEN C.NO IN (19) THEN ''
					WHEN C.NO IN (20) THEN ''
					WHEN C.NO IN (21) THEN ''
					WHEN C.NO IN (22) THEN ''
					WHEN C.NO IN (23) THEN ''
					WHEN C.NO IN (24) THEN ''
					WHEN C.NO IN (25) THEN ''
					WHEN C.NO IN (26) THEN ''
					WHEN C.NO IN (27) THEN ''
					WHEN C.NO IN (28) THEN ''
					WHEN C.NO IN (29) THEN ''
					WHEN C.NO IN (30) THEN '수수료 등(자동계산항목)합계'
					WHEN C.NO IN (31) THEN '외상매입금총액'
					ELSE ''
				END AS GUBN
				, CASE
					WHEN C.NO IN (1) THEN '과세공급금액'
					WHEN C.NO IN (2) THEN '과세부과세'
					WHEN C.NO IN (3) THEN '주류공급금액'
					WHEN C.NO IN (4) THEN '주류부과세'
					WHEN C.NO IN (5) THEN '면세공급금액'
					WHEN C.NO IN (6) THEN '영세공급금액'
					WHEN C.NO IN (7) THEN '공병금액'
					WHEN C.NO IN (8) THEN '공상자금액'
					WHEN C.NO IN (9) THEN '저장품금액'
					WHEN C.NO IN (10) THEN ''
					WHEN C.NO IN (11) THEN '하역비'
					WHEN C.NO IN (12) THEN '선별비'
					WHEN C.NO IN (13) THEN '도축비'
					WHEN C.NO IN (14) THEN '출하장려금'
					WHEN C.NO IN (15) THEN '사후장려금'
					WHEN C.NO IN (16) THEN '물류사후장려금'
					WHEN C.NO IN (17) THEN '물류수수료'
					WHEN C.NO IN (18) THEN '물류부가세'
					WHEN C.NO IN (19) THEN '업체총수수료'
					WHEN C.NO IN (20) THEN ' 매입장려금'
					WHEN C.NO IN (21) THEN ' 관리수수료'
					WHEN C.NO IN (22) THEN ' 관리수수료부가세'
					WHEN C.NO IN (23) THEN '운송용역비'
					WHEN C.NO IN (24) THEN '운송용역비부가세'
					WHEN C.NO IN (25) THEN '공병반환금액'
					WHEN C.NO IN (26) THEN '공상자반환금액'
					WHEN C.NO IN (27) THEN '공파렛트반환금액'
					WHEN C.NO IN (28) THEN '반환수수료'
					WHEN C.NO IN (29) THEN '반환수수료부가세'
					WHEN C.NO IN (30) THEN ''
					WHEN C.NO IN (31) THEN ''
					ELSE ''
				END AS GUBN_NM
				, DECODE(C.NO, 1, B.DB_TXT_AM
					, 2, B.DB_TXT_VAT
					, 3, B.DB_LIQ_SPY_AM
					, 4, B.DB_LIQ_SPY_VAT
					, 5, B.DB_EXTX_AM
					, 6, B.DB_SMA_AM
					, 7, B.DB_VCBT_AM
					, 8, B.DB_VCBX_AM
					, 9, B.DB_STOG_AM
					, 10, B.SUM_DB
					, 11, B.DB_BDOWN
					, 12, B.DB_BSORT
					, 13, B.DB_BKILL
					, 14, B.DB_BCHPRM
					, 15, B.DB_BAFPRM
					, 16, B.DB_BAFPRM_AM
					, 17, B.DB_BLOGI
					, 18, B.DB_BLOGI_AM
					, 19, B.DB_BTPRM
					, 20, B.DB_BBPRM
					, 21, B.DB_BMGNT
					, 22, B.DB_BMGNT_AM
					, 23, B.DB_BTRAN
					, 24, B.DB_BTRAN_AM
					, 25, B.DB_VCBT_RTU_AM
					, 26, B.DB_VCBX_RTU_AM
					, 27, B.DB_VPLTT_RTU_AM
					, 28, B.DB_RTU_FEE_AM
					, 29, B.DB_RTU_FEE_VAT_AM
					, 30, B.SUM_MAD_DB
					, 31, B.SUM_BCD_DB_AM
					, 0
				) AS DB_A_VAL
				, DECODE(C.NO, 1, B.CR_TXT_AM
					, 2, B.CR_TXT_VAT
					, 3, B.CR_LIQ_SPY_AM
					, 4, B.CR_LIQ_SPY_VAT
					, 5, B.CR_EXTX_AM
					, 6, B.CR_SMA_AM
					, 7, B.CR_VCBT_AM
					, 8, B.CR_VCBX_AM
					, 9, B.CR_STOG_AM
					, 10, B.SUM_CR
					, 11, B.CR_BDOWN
					, 12, B.CR_BSORT
					, 13, B.CR_BKILL
					, 14, B.CR_BCHPRM
					, 15, B.CR_BAFPRM
					, 16, B.CR_BAFPRM_AM
					, 17, B.CR_BLOGI
					, 18, B.CR_BLOGI_AM
					, 19, B.CR_BTPRM
					, 20, B.CR_BBPRM
					, 21, B.CR_BMGNT
					, 22, B.CR_BMGNT_AM
					, 23, B.CR_BTRAN
					, 24, B.CR_BTRAN_AM
					, 25, B.CR_VCBT_RTU_AM
					, 26, B.CR_VCBX_RTU_AM
					, 27, B.CR_VPLTT_RTU_AM
					, 28, B.CR_RTU_FEE_AM
					, 29, B.CR_RTU_FEE_VAT_AM
					, 30, B.SUM_MAD_CR
					, 31, B.SUM_BCD_CR_AM
					, 0
				) AS CR_B_VAL
				,  DECODE(C.NO, 1, B.SUM_TXT_AM
					, 2, B.SUM_VAT_AM
					, 3, B.SUM_LIQ_SPY_AM
					, 4, B.SUM_LIQ_SPY_VAT
					, 5, B.SUM_EXTX_AM
					, 6, B.SUM_SMA_AM
					, 7, B.SUM_VCBT_AM
					, 8, B.SUM_VCBX_AM
					, 9, B.SUM_STOG_AM
					, 10, B.SUM_DB_CR
					, 11, B.SUM_BDOWN
					, 12, B.SUM_BSORT
					, 13, B.SUM_BKILL
					, 14, B.SUM_BCHPRM
					, 15, B.SUM_BAFPRM
					, 16, B.SUM_BAFPRM_AM
					, 17, B.SUM_BLOGI
					, 18, B.SUM_BLOGI_AM
					, 19, B.SUM_BTPRM
					, 20, B.SUM_BBPRM
					, 21, B.SUM_BMGNT
					, 22, B.SUM_BMGNT_AM
					, 23, B.SUM_BTRAN
					, 24, B.SUM_BTRAN_AM
					, 25, B.SUM_VCBT_RTU_AM
					, 26, B.SUM_VCBX_RTU_AM
					, 27, B.SUM_VPLTT_RTU_AM
					, 28, B.SUM_RTU_FEE_AM
					, 29, B.SUM_RTU_FEE_VAT_AM
					, 30, B.SUM_MAD_DB_CR
					, 31, B.SUM_BCD_DB_CR_AM
					, 0
				) AS SUM_VAL
			FROM (
				SELECT /*매입금액*/
					A.DB_TXT_AM , A.CR_TXT_AM , A.SUM_TXT_AM ,
					A.DB_TXT_VAT , A.CR_TXT_VAT , A.SUM_VAT_AM ,
					A.DB_LIQ_SPY_AM , A.CR_LIQ_SPY_AM , A.SUM_LIQ_SPY_AM ,
					A.DB_LIQ_SPY_VAT, A.CR_LIQ_SPY_VAT , A.SUM_LIQ_SPY_VAT,
					A.DB_EXTX_AM , A.CR_EXTX_AM , A.SUM_EXTX_AM ,
					A.DB_SMA_AM , A.CR_SMA_AM , A.SUM_SMA_AM ,
					A.DB_VCBT_AM , A.CR_VCBT_AM , A.SUM_VCBT_AM ,
					A.DB_VCBX_AM , A.CR_VCBX_AM , A.SUM_VCBX_AM ,
					A.DB_STOG_AM , A.CR_STOG_AM , A.SUM_STOG_AM ,
					A.DB_TXT_AM + A.DB_TXT_VAT + A.DB_LIQ_SPY_AM + A.DB_LIQ_SPY_VAT + A.DB_EXTX_AM + A.DB_SMA_AM +
					A.DB_VCBT_AM + A.DB_VCBX_AM + A.DB_STOG_AM AS SUM_DB,
					A.CR_TXT_AM + A.CR_TXT_VAT + A.CR_LIQ_SPY_AM + A.CR_LIQ_SPY_VAT + A.CR_EXTX_AM + A.CR_SMA_AM +
					A.CR_VCBT_AM + A.CR_VCBX_AM + A.CR_STOG_AM AS SUM_CR,
					A.SUM_TXT_AM + A.SUM_VAT_AM + A.SUM_LIQ_SPY_AM + A.SUM_LIQ_SPY_VAT + A.SUM_EXTX_AM + A.SUM_SMA_AM +
					A.SUM_VCBT_AM + A.SUM_VCBX_AM + A.SUM_STOG_AM AS SUM_DB_CR,
					/*수수료 등(자동계산항목)*/
					A.DB_BDOWN , A.CR_BDOWN , A.SUM_BDOWN ,
					A.DB_BSORT , A.CR_BSORT , A.SUM_BSORT ,
					A.DB_BKILL , A.CR_BKILL , A.SUM_BKILL ,
					A.DB_BCHPRM , A.CR_BCHPRM , A.SUM_BCHPRM ,
					A.DB_BAFPRM , A.CR_BAFPRM , A.SUM_BAFPRM ,
					A.DB_BAFPRM_AM , A.CR_BAFPRM_AM , A.SUM_BAFPRM_AM ,
					A.DB_BLOGI , A.CR_BLOGI , A.SUM_BLOGI ,
					A.DB_BLOGI_AM , A.CR_BLOGI_AM , A.SUM_BLOGI_AM ,
					A.DB_BTPRM , A.CR_BTPRM , A.SUM_BTPRM ,
					A.DB_BBPRM , A.CR_BBPRM , A.SUM_BBPRM ,
					A.DB_BMGNT , A.CR_BMGNT , A.SUM_BMGNT ,
					A.DB_BMGNT_AM , A.CR_BMGNT_AM , A.SUM_BMGNT_AM ,
					A.DB_BTRAN , A.CR_BTRAN , A.SUM_BTRAN ,
					A.DB_BTRAN_AM , A.CR_BTRAN_AM , A.SUM_BTRAN_AM ,
					A.DB_VCBT_RTU_AM , A.CR_VCBT_RTU_AM , A.SUM_VCBT_RTU_AM ,
					A.DB_VCBX_RTU_AM , A.CR_VCBX_RTU_AM , A.SUM_VCBX_RTU_AM ,
					A.DB_VPLTT_RTU_AM , A.CR_VPLTT_RTU_AM , A.SUM_VPLTT_RTU_AM ,
					A.DB_RTU_FEE_AM , A.CR_RTU_FEE_AM , A.SUM_RTU_FEE_AM ,
					A.DB_RTU_FEE_VAT_AM, A.CR_RTU_FEE_VAT_AM, A.SUM_RTU_FEE_VAT_AM,
					A.DB_BDOWN + A.DB_BSORT + A.DB_BKILL + A.DB_BCHPRM + A.DB_BAFPRM + A.DB_BAFPRM_AM +
					A.DB_BLOGI + A.DB_BLOGI_AM + A.DB_BBPRM + A.DB_BMGNT + A.DB_BMGNT_AM +
					A.DB_BTRAN + A.DB_BTRAN_AM + A.DB_VCBT_RTU_AM + A.DB_VCBX_RTU_AM + A.DB_VPLTT_RTU_AM + A.DB_RTU_FEE_AM + A.DB_RTU_FEE_VAT_AM SUM_MAD_DB,
					A.CR_BDOWN + A.CR_BSORT + A.CR_BKILL + A.CR_BCHPRM + A.CR_BAFPRM + A.CR_BAFPRM_AM +
					A.CR_BLOGI + A.CR_BLOGI_AM + A.CR_BBPRM + A.CR_BMGNT + A.CR_BMGNT_AM +
					A.CR_BTRAN + A.CR_BTRAN_AM + A.CR_VCBT_RTU_AM + A.CR_VCBX_RTU_AM + A.CR_VPLTT_RTU_AM + A.CR_RTU_FEE_AM + A.CR_RTU_FEE_VAT_AM SUM_MAD_CR,
					A.SUM_BDOWN + A.SUM_BSORT + A.SUM_BKILL + A.SUM_BCHPRM + A.SUM_BAFPRM + A.SUM_BAFPRM_AM +
					A.SUM_BLOGI + A.SUM_BLOGI_AM + A.SUM_BBPRM + A.SUM_BMGNT + A.SUM_BMGNT_AM +
					A.SUM_BTRAN + A.SUM_BTRAN_AM + A.SUM_BTRAN_AM + A.SUM_VCBT_RTU_AM + A.SUM_VCBX_RTU_AM + A.SUM_VPLTT_RTU_AM + A.SUM_RTU_FEE_AM + A.SUM_RTU_FEE_VAT_AM SUM_MAD_DB_CR,
					/*외상매입금 총금액*/
					A.DB_TXT_AM + A.DB_TXT_VAT + A.DB_LIQ_SPY_AM + A.DB_LIQ_SPY_VAT + A.DB_EXTX_AM + A.DB_SMA_AM +
					A.DB_VCBT_AM + A.DB_VCBX_AM + A.DB_STOG_AM - A.DB_BDOWN - A.DB_BSORT - A.DB_BKILL - A.DB_BCHPRM -
					A.DB_BAFPRM - A.DB_BAFPRM_AM - A.DB_BLOGI - A.DB_BLOGI_AM - A.DB_BBPRM - A.DB_BMGNT -
					A.DB_BMGNT_AM - A.DB_BTRAN - A.DB_BTRAN_AM - A.DB_VCBT_RTU_AM - A.DB_VCBX_RTU_AM - A.DB_VPLTT_RTU_AM - A.DB_RTU_FEE_AM - A.DB_RTU_FEE_VAT_AM SUM_BCD_DB_AM,
					A.CR_TXT_AM + A.CR_TXT_VAT + A.CR_LIQ_SPY_AM + A.CR_LIQ_SPY_VAT + A.CR_EXTX_AM + A.CR_SMA_AM +
					A.CR_VCBT_AM + A.CR_VCBX_AM + A.CR_STOG_AM - A.CR_BDOWN - A.CR_BSORT - A.CR_BKILL - A.CR_BCHPRM -
					A.CR_BAFPRM - A.CR_BAFPRM_AM - A.CR_BLOGI - A.CR_BLOGI_AM - A.CR_BBPRM - A.CR_BMGNT -
					A.CR_BMGNT_AM - A.CR_BTRAN - A.CR_BTRAN_AM - A.CR_VCBT_RTU_AM - A.CR_VCBX_RTU_AM - A.CR_VPLTT_RTU_AM - A.CR_RTU_FEE_AM - A.CR_RTU_FEE_VAT_AM SUM_BCD_CR_AM,
					A.SUM_TXT_AM + A.SUM_VAT_AM + A.SUM_LIQ_SPY_AM + A.SUM_LIQ_SPY_VAT + A.SUM_EXTX_AM + A.SUM_SMA_AM +
					A.SUM_VCBT_AM + A.SUM_VCBX_AM + A.SUM_STOG_AM - A.SUM_BDOWN - A.SUM_BSORT - A.SUM_BKILL - A.SUM_BCHPRM -
					A.SUM_BAFPRM - A.SUM_BAFPRM_AM - A.SUM_BLOGI - A.SUM_BLOGI_AM - A.SUM_BBPRM - A.SUM_BMGNT -
					A.SUM_BMGNT_AM - A.SUM_BTRAN - A.SUM_BTRAN_AM - A.SUM_BTRAN_AM - A.SUM_VCBT_RTU_AM - A.SUM_VCBX_RTU_AM - A.SUM_VPLTT_RTU_AM - A.SUM_RTU_FEE_AM - A.SUM_RTU_FEE_VAT_AM SUM_BCD_DB_CR_AM
				FROM (
					SELECT
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN TXT_AM - TXT_VAT ELSE 0 END) DB_TXT_AM, /*차변과세금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN TXT_AM - TXT_VAT ELSE 0 END) CR_TXT_AM, /*대변과세금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN TXT_AM - TXT_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN TXT_AM - TXT_VAT ELSE 0 END) SUM_TXT_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN TXT_VAT ELSE 0 END) DB_TXT_VAT, /*차변과세부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN TXT_VAT ELSE 0 END) CR_TXT_VAT, /*대변과세부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN TXT_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN TXT_VAT ELSE 0 END) SUM_VAT_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN LIQ_SPY_AM - LIQ_SPY_VAT ELSE 0 END) DB_LIQ_SPY_AM, /*차변주류공급금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN LIQ_SPY_AM - LIQ_SPY_VAT ELSE 0 END) CR_LIQ_SPY_AM, /*대변주류공급금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN LIQ_SPY_AM - LIQ_SPY_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN LIQ_SPY_AM - LIQ_SPY_VAT ELSE 0 END) SUM_LIQ_SPY_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN LIQ_SPY_VAT ELSE 0 END) DB_LIQ_SPY_VAT, /*차변주류공급부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN LIQ_SPY_VAT ELSE 0 END) CR_LIQ_SPY_VAT, /*대변주류공급부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN LIQ_SPY_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN LIQ_SPY_VAT ELSE 0 END) SUM_LIQ_SPY_VAT,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN EXTX_AM ELSE 0 END) DB_EXTX_AM, /*차변면세금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN EXTX_AM ELSE 0 END) CR_EXTX_AM, /*대변면세금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN EXTX_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN EXTX_AM ELSE 0 END) SUM_EXTX_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN SMA_AM ELSE 0 END) DB_SMA_AM, /*차변영세금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN SMA_AM ELSE 0 END) CR_SMA_AM, /*대변영세금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN SMA_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN SMA_AM ELSE 0 END) SUM_SMA_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN VCBT_AM ELSE 0 END) DB_VCBT_AM, /*차변공병금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN VCBT_AM ELSE 0 END) CR_VCBT_AM, /*대변공병금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN VCBT_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN VCBT_AM ELSE 0 END) SUM_VCBT_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VCBX_AM + NVL(A.VPLTT_AM, 0) ELSE 0 END) DB_VCBX_AM,      /*차변공상자금액 + 공파렛트금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN A.VCBX_AM + NVL(A.VPLTT_AM, 0) ELSE 0 END) CR_VCBX_AM,      /*대변공상자금액 + 공파렛트금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VCBX_AM + NVL(A.VPLTT_AM, 0) ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN VCBX_AM + NVL(A.VPLTT_AM, 0) ELSE 0 END) SUM_VCBX_AM,

						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN STOG_AM ELSE 0 END) DB_STOG_AM, /*차변저장품금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN STOG_AM ELSE 0 END) CR_STOG_AM, /*대변저장품금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN STOG_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN STOG_AM ELSE 0 END) SUM_STOG_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BDOWN, /*차변하역비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BDOWN, /*대변하역비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BDOWN,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BSORT, /*차변선별비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BSORT, /*대변선별비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BSORT,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BKILL, /*차변도축비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BKILL, /*대변도축비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BKILL,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BCHPRM, /*차변출하장려급*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BCHPRM, /*대변출하장려금*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BCHPRM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' AND BZ_METH_DSC = '02' THEN AFF_SSDY ELSE 0 END) DB_BAFPRM, /*차변사후장려급*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' AND BZ_METH_DSC = '02' THEN AFF_SSDY ELSE 0 END) CR_BAFPRM, /*대변사후장려금*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' AND BZ_METH_DSC = '02' THEN AFF_SSDY ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' AND BZ_METH_DSC = '02' THEN AFF_SSDY ELSE 0 END) SUM_BAFPRM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN NVL(A.PHD_AFF_SSDY, 0) ELSE 0 END) DB_BAFPRM_AM, /*차변물류사후장려금*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN NVL(A.PHD_AFF_SSDY, 0) ELSE 0 END) CR_BAFPRM_AM, /*대변물류사후장력금*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN NVL(A.PHD_AFF_SSDY, 0) ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN NVL(A.PHD_AFF_SSDY, 0) ELSE 0 END) SUM_BAFPRM_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN PHD_FEE - PHD_FEE_VAT ELSE 0 END) DB_BLOGI, /*차변물류수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN PHD_FEE - PHD_FEE_VAT ELSE 0 END) CR_BLOGI, /*댜뵨물류수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN PHD_FEE - PHD_FEE_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PHD_FEE - PHD_FEE_VAT ELSE 0 END) SUM_BLOGI,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN PHD_FEE_VAT ELSE 0 END) DB_BLOGI_AM, /*차변물류부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN PHD_FEE_VAT ELSE 0 END) CR_BLOGI_AM, /*대변물류부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN PHD_FEE_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PHD_FEE_VAT ELSE 0 END) SUM_BLOGI_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN MAD_AM - AFF_SSDY ELSE 0 END) DB_BTPRM, /*차변업체총수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN MAD_AM - AFF_SSDY ELSE 0 END) CR_BTPRM, /*대변업체총수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN MAD_AM - AFF_SSDY ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN MAD_AM - AFF_SSDY ELSE 0 END) SUM_BTPRM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN BYNG_SSDY ELSE 0 END) DB_BBPRM, /*차변매입장려금*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN BYNG_SSDY ELSE 0 END) CR_BBPRM, /*대변매입장려금*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN BYNG_SSDY ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN BYNG_SSDY ELSE 0 END) SUM_BBPRM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BMGNT, /*차변관리수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BMGNT, /*대변관리수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BMGNT,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BMGNT_AM, /*차변관리수수료부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BMGNT_AM, /*대변관리수수료부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BMGNT_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BTRAN, /*차변운송용역비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BTRAN, /*대변운송용역비*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BTRAN,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BTRAN_AM, /*차변운송용역비부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BTRAN_AM, /*대변운송용역비부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BTRAN_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VCBT_RTU_AM ELSE 0 END) DB_VCBT_RTU_AM, /*차변공병반환금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN A.VCBT_RTU_AM ELSE 0 END) CR_VCBT_RTU_AM, /*대변공병반환금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VCBT_RTU_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN VCBT_RTU_AM ELSE 0 END) SUM_VCBT_RTU_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VCBX_RTU_AM ELSE 0 END) DB_VCBX_RTU_AM, /*차변공상자반환금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN A.VCBX_RTU_AM ELSE 0 END) CR_VCBX_RTU_AM, /*대변공상자반환금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VCBX_RTU_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN VCBX_RTU_AM ELSE 0 END) SUM_VCBX_RTU_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VPLTT_RTU_AM ELSE 0 END) DB_VPLTT_RTU_AM, /*차변공파렛트반환금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN A.VPLTT_RTU_AM ELSE 0 END) CR_VPLTT_RTU_AM, /*대변공파렛트반환금액*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.VPLTT_RTU_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN VPLTT_RTU_AM ELSE 0 END) SUM_VPLTT_RTU_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.RTU_FEE - RTU_FEE_VAT ELSE 0 END) DB_RTU_FEE_AM, /*차변반환수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN A.RTU_FEE - RTU_FEE_VAT ELSE 0 END) CR_RTU_FEE_AM, /*대변반환수수료*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.RTU_FEE - RTU_FEE_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN RTU_FEE - RTU_FEE_VAT ELSE 0 END) SUM_RTU_FEE_AM,
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.RTU_FEE_VAT ELSE 0 END) DB_RTU_FEE_VAT_AM, /*차변반환수수료부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '-' THEN A.RTU_FEE_VAT ELSE 0 END) CR_RTU_FEE_VAT_AM, /*대변반환수수료부가세*/
						SUM(CASE WHEN A.NA_BLB_DFC_DSC = '+' THEN A.RTU_FEE_VAT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN RTU_FEE_VAT ELSE 0 END) SUM_RTU_FEE_VAT_AM
					FROM TB_DE_BYNG_MON  A
					WHERE DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
					AND NA_ADJPL_C = #{NA_ADJPL_C}
					AND BAS_YM = #{BAS_YM}
					/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
				) A
			) B, (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL < 32) C
			WHERE NO <= 31
			UNION ALL
			SELECT
				CASE
					WHEN B.NO IN (1) THEN '수수료 등(수기계산항목)'
					WHEN B.NO IN (2) THEN '수수료 등(수기계산항목)'
					WHEN B.NO IN (3) THEN '수수료 등(수기계산항목)'
					WHEN B.NO IN (4) THEN '수수료 등(수기계산항목)'
					WHEN B.NO IN (5) THEN '수수료 등(수기계산항목)'
					WHEN B.NO IN (6) THEN '수수료 등(수기계산항목)'
					ELSE ''
				END AS GUBN
				, CASE
					WHEN B.NO IN (1) THEN '수수료 등(수기계산항목)'
					WHEN B.NO IN (2) THEN ''
					WHEN B.NO IN (3) THEN ''
					WHEN B.NO IN (4) THEN ''
					WHEN B.NO IN (5) THEN ''
					WHEN B.NO IN (6) THEN ''
					ELSE ''
				END AS GUBN
				, CASE
					WHEN B.NO IN (1) THEN '현금금액'
					WHEN B.NO IN (2) THEN '지급금액'
					WHEN B.NO IN (3) THEN '선지급금액'
					WHEN B.NO IN (4) THEN '지급취소금액'
					WHEN B.NO IN (5) THEN '할인금액'
					WHEN B.NO IN (6) THEN '정정금액'
					ELSE ''
				END AS GUBN_NM
				, DECODE(B.NO, 1, A.DB_CSH_AM, 2,A.DB_PY_AM, 3,A.DB_PPY_AM, 4,A.DB_PY_CAN_AM, 5,A.DB_BYNG_DC_AM, 6,A.DB_SMA_AM, 0) AS DB_A_VAL
				, DECODE(B.NO, 1, A.CR_CSH_AM, 2, A.CR_PY_AM, 3, A.CR_PPY_AM, 4, A.CR_PY_CAN_AM, 5, A.CR_BYNG_DC_AM, 6, A.CR_SMA_AM, 0) AS DB_B_VAL
				, DECODE(B.NO, 1, A.SUM_CSH_AM, 2, A.SUM_PY_AM, 3, A.SUM_PPY_AM, 4, A.SUM_PY_CAN_AM, 5, A.SUM_BYNG_DC_AM, 6, A.SUM_SMA_AM, 0) AS DB_B_VAL
			FROM (
				SELECT
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN ETC_STL_AM ELSE 0 END) DB_CSH_AM , /*차변현금금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN ETC_STL_AM ELSE 0 END) CR_CSH_AM , /*대변현금금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN ETC_STL_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN ETC_STL_AM ELSE 0 END) SUM_CSH_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN PY_AM ELSE 0 END) DB_PY_AM , /*차변지급금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PY_AM ELSE 0 END) CR_PY_AM , /*대변지급금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN PY_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PY_AM ELSE 0 END) SUM_PY_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN PPY_AM ELSE 0 END) DB_PPY_AM , /*차변선지급금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PPY_AM ELSE 0 END) CR_PPY_AM , /*대변선지급금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN PPY_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PPY_AM ELSE 0 END) SUM_PPY_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN PY_CAN_AM ELSE 0 END) DB_PY_CAN_AM , /*차변지급취소금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PY_CAN_AM ELSE 0 END) CR_PY_CAN_AM , /*대변지급취소금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN PY_CAN_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN PY_CAN_AM ELSE 0 END) SUM_PY_CAN_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN BYNG_DC_AM ELSE 0 END) DB_BYNG_DC_AM , /*차변할인금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN BYNG_DC_AM ELSE 0 END) CR_BYNG_DC_AM , /*대변할인금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN BYNG_DC_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN BYNG_DC_AM ELSE 0 END) SUM_BYNG_DC_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_SMA_AM , /*차변정정금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_SMA_AM , /*대변정정금액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_SMA_AM
				FROM TB_DE_BYNG_MON
				WHERE DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
				AND NA_ADJPL_C = #{NA_ADJPL_C}
				AND BAS_YM = #{BAS_YM}
				/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
			) A, (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL < 32) B
			WHERE NO <= 6
			UNION ALL
			SELECT
				  CASE WHEN B.NO IN (1) THEN '금월말잔액' WHEN B.NO IN (2) THEN '금월말잔액' ELSE '' END AS GUBN
				, CASE WHEN B.NO IN (1) THEN '금월말잔액' WHEN B.NO IN (2) THEN '' ELSE '' END AS GUBN
				, CASE WHEN B.NO IN (1) THEN '' WHEN B.NO IN (2) THEN ''ELSE '' END AS GUBN_NM
				, DECODE(B.NO, 1, A.DB_BAC, 0) AS DB_A_VAL
				, DECODE(B.NO, 1, A.CR_BAC, 0) AS DB_B_VAL
				, DECODE(B.NO, 1, A.SUM_BAC, 0) AS DB_B_VAL
			FROM (
				SELECT
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BAC , /*차변금월말잔액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BAC , /*대변금월말잔액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BAC
				FROM TB_DE_BYNG_MON
				WHERE DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
				AND NA_ADJPL_C = #{NA_ADJPL_C}
				AND BAS_YM = #{BAS_YM}
				/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
			) A, (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL < 32) B
			WHERE NO <= 1
			UNION ALL
			SELECT
				  CASE
				 	WHEN B.NO IN (1) THEN '지체이자'
				 	WHEN B.NO IN (2) THEN '지체이자'
					WHEN B.NO IN (3) THEN '지체이자'
					ELSE ''
				END AS GUBN
				, CASE WHEN B.NO IN (1) THEN '지체이자'
					WHEN B.NO IN (2) THEN ''
					WHEN B.NO IN (3) THEN ''
					ELSE ''
				END AS GUBN
				,CASE WHEN B.NO IN (1) THEN '지체이자'
					WHEN B.NO IN (2) THEN '지체이자지급'
					WHEN B.NO IN (3) THEN '잔액'
					ELSE ''
				END AS GUBN_NM
				, DECODE(B.NO,1,A.DB_DLAY_INT_OCU_AM, 2, A.DB_DLAY_INT_PY_AM, 3,A.DB_BAC_AM, 0) AS DB_A_VAL
				, DECODE(B.NO,1,A.CR_DLAY_INT_OCU_AM, 2, A.CR_DLAY_INT_PY_AM, 3, A.CR_BAC_AM, 0) AS DB_B_VAL
				, DECODE(B.NO,1,A.SUM_DLAY_INT_OCU_AM, 2, A.SUM_DLAY_INT_PY_AM, 3, A.SUM_BAC_AM, 0) AS DB_B_VAL
			FROM (
				SELECT
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN DLAY_INT_OCU_AM ELSE 0 END) DB_DLAY_INT_OCU_AM , /*차변지체이자*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN DLAY_INT_OCU_AM ELSE 0 END) CR_DLAY_INT_OCU_AM , /*대변지체이자*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN DLAY_INT_OCU_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN DLAY_INT_OCU_AM ELSE 0 END) SUM_DLAY_INT_OCU_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN DLAY_INT_PY_AM ELSE 0 END) DB_DLAY_INT_PY_AM , /*차변지체이자지급*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN DLAY_INT_PY_AM ELSE 0 END) CR_DLAY_INT_PY_AM , /*대변지체이자지급*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN DLAY_INT_PY_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN DLAY_INT_PY_AM ELSE 0 END) SUM_DLAY_INT_PY_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) DB_BAC_AM , /*차변잔액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) CR_BAC_AM , /*대변잔액*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN 0 ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN 0 ELSE 0 END) SUM_BAC_AM
				FROM TB_DE_BYNG_MON
				WHERE ADJ_NA_BZPLC = #{ADJ_NA_BZPLC}
				AND NA_ADJPL_C = #{NA_ADJPL_C}
				AND BAS_YM = #{BAS_YM}
				/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
			) A, (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL < 32) B
			WHERE NO <= 3
			UNION ALL
			SELECT
				CASE WHEN B.NO IN (1) THEN '합병금액' WHEN B.NO IN (2) THEN '합병금액' ELSE '' END AS GUBN
				, CASE WHEN B.NO IN (1) THEN '합병금액' WHEN B.NO IN (2) THEN '' ELSE '' END AS GUBN
				, CASE WHEN B.NO IN (1) THEN '합병금액' WHEN B.NO IN (2) THEN '합병지체이자' ELSE '' END AS GUBN_NM
				, DECODE(B.NO,1,A.DB_MRG_AM, 2, A.DB_MRG_DLAY_INT, 0) AS DB_A_VAL
				, DECODE(B.NO,1,A.CR_MRG_AM, 2, A.CR_MRG_DLAY_INT, 0) AS DB_B_VAL
				, DECODE(B.NO,1,A.SUM_MRG_AM, 2, A.SUM_MRG_DLAY_INT, 0) AS DB_B_VAL
			FROM (
				SELECT
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN MRG_AM ELSE 0 END) DB_MRG_AM , /*차변지체이자*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN MRG_AM ELSE 0 END) CR_MRG_AM , /*대변지체이자*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN MRG_AM ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN MRG_AM ELSE 0 END) SUM_MRG_AM,
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN MRG_DLAY_INT ELSE 0 END) DB_MRG_DLAY_INT , /*차변지체이자지급*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN MRG_DLAY_INT ELSE 0 END) CR_MRG_DLAY_INT , /*대변지체이자지급*/
					SUM(CASE WHEN NA_BLB_DFC_DSC = '+' THEN MRG_DLAY_INT ELSE 0 END) - SUM(CASE WHEN NA_BLB_DFC_DSC = '-' THEN MRG_DLAY_INT ELSE 0 END) SUM_MRG_DLAY_INT
				FROM TB_DE_BYNG_MON
				WHERE DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
				AND NA_ADJPL_C = #{NA_ADJPL_C}
				AND BAS_YM = #{BAS_YM}
				/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
			) A, (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL < 32) B
			WHERE NO <= 2
			UNION ALL
			SELECT
				  '외상매출금잔액' GUBN
				, '외상매출금잔액' GUBN_1
				, '' GUBN_NM
				, 0 DB_A_VAL
				, 0 CR_B_VAL
				, SUM(BAC) SUM_VAL
			FROM TB_DE_BYNG_MON
			WHERE DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC) = #{ADJ_NA_BZPLC}
			AND NA_ADJPL_C = #{NA_ADJPL_C}
			AND BAS_YM = #{BAS_YM}
			/*AND NOT ( BZ_METH_DSC = '01' AND BAC < 0 )*/
			AND NA_BLB_DFC_DSC = '*'
			GROUP BY NA_ADJPL_C, DECODE(NA_BZPLC, '8808983000015', '8808983000015', ADJ_NA_BZPLC), BAS_YM
		)
	]]>
	</select>

	<sql id="sql_getPrePayDayList">
		SELECT 
			A.NA_ADJPL_C,
			FN_TRPL_CIF_NM(A.NA_ADJPL_C) CLIENT_NM,
			A.NA_BZPLC,
			FN_TRPL_CIF_NM(A.NA_BZPLC) BZPL_NM,
			A.NA_TEAM_C||' '||FN_CM_TEAM_NM(A.NA_BZPLC,A.NA_TEAM_C) NA_TEAM_C,
			A.NA_BLB_DFC_DSC,
			A.REM, 
			A.DB_AM,
			A.CR_AM,
			A.BAC
		FROM ( 
        	SELECT <![CDATA[/*+ index_ss(a XPK_DE_PREPAYDAY) */]]> 
                NA_ADJPL_C
              , NA_BZPLC
              , NA_TEAM_C
              , NA_BLB_DFC_DSC
              , DECODE(NA_BLB_DFC_DSC, '-', '적자누계', '+', '흑자누계', '*', '누계잔액', 'ERROR') AS REM
              , SUM(DB_AM) AS DB_AM
              , SUM(CR_AM) AS CR_AM
              , SUM(BAC)   AS BAC
              , DECODE(NA_BLB_DFC_DSC, '-', 1, '+', 2, 3) AS SEQ             
        	FROM TB_DE_PREPAYDAY 
			WHERE TR_DT = '${TR_DT}'
			<if test="ROTS_CTR_DSC != null and  ROTS_CTR_DSC != '' and  ROTS_CTR_DSC != 'all'">
				AND ROTS_CTR_DSC = '${ROTS_CTR_DSC}'
			</if>
			<if test="NA_BZPLC != null and NA_BZPLC != '' and NA_BZPLC != 'all'">
				AND NA_BZPLC = '${NA_BZPLC}'
			</if>
				AND NA_ADJPL_C IN
			<foreach collection="TRPL_C" item="item" index="index" separator="," open="(" close=")">
			 	'${item}'
			</foreach>        	
            GROUP BY na_adjpl_c, na_bzplc, na_team_c, na_blb_dfc_dsc) A
            ORDER BY A.na_adjpl_c, A.na_bzplc, A.na_team_c, A.seq	
	</sql>
	
	<select id="getPrePayDayList" parameterType="java.util.Map" resultType="java.util.Map">
		<include refid="sql_getPrePayDayList" />
	</select>

	<select id="getPrePayDayListSum" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT B.*  FROM (
			SELECT <![CDATA[/*+ index_ss(a XPK_DE_PREPAYDAY) */]]>
                NA_BLB_DFC_DSC
              , DECODE(NA_BLB_DFC_DSC, '-', '적자누계', '+', '흑자누계', '*', '누계잔액', 'ERROR') AS REM
              , SUM(DB_AM) AS DB_AM
              , SUM(CR_AM) AS CR_AM
              , DECODE(NA_BLB_DFC_DSC, '*',SUM(CR_AM)-SUM(DB_AM) ,SUM(BAC))   AS BAC
        	FROM TB_DE_PREPAYDAY 
			WHERE TR_DT = '${TR_DT}'
			<if test="ROTS_CTR_DSC != null and  ROTS_CTR_DSC != '' and  ROTS_CTR_DSC != 'all'">
				AND ROTS_CTR_DSC = '${ROTS_CTR_DSC}'
			</if>
			<if test="NA_BZPLC != null and NA_BZPLC != '' and NA_BZPLC != 'all'">
				AND NA_BZPLC = '${NA_BZPLC}'
			</if>
				AND NA_ADJPL_C IN
			<foreach collection="TRPL_C" item="item" index="index" separator="," open="(" close=")">
			 	'${item}'
			</foreach>        	
            GROUP BY NA_BLB_DFC_DSC, REM) B
		ORDER BY B.NA_BLB_DFC_DSC DESC
	</select>
	
	<sql id="sql_getArcvOcuList">
		SELECT 
			A.NA_BZPLC,
			FN_TRPL_CIF_NM(A.NA_BZPLC) BZPL_NM,
			A.NA_ADJPL_C,
			FN_TRPL_CIF_NM(A.NA_ADJPL_C) CLIENT_NM,
			A.TR_DT,
			FN_CM_SIMP_CNM('ACRV_SBJC',A.ACRV_SBJC) ACRV_SBJC,
			A.OCU_AM,
			A.WDR_AM,
			A.BAC
		FROM TB_DE_ARCV_OCU A, TB_CM_BZPL B, TB_TR_TRNREL C
		WHERE A.TR_DT = '${TR_DT}'
		AND A.NA_ADJPL_C = C.SPLR_NA_TRPL_C
        AND B.NA_BZPLC = C.CSER_NA_TRPL_C
        <if test="ACRV_SBJC != '' and  ACRV_SBJC != 'all'">
			AND A.ACRV_SBJC = '${ACRV_SBJC}'
		</if>
		<if test="ACRV_SBJC != '' and  ACRV_SBJC == 'all'">
			AND A.ACRV_SBJC IN ('10','11','16')
		</if>
		AND B.BZPL_TPC IN ( '504' , '505')
		<if test="NA_BZPLC != '' and  NA_BZPLC != 'all'">
		AND A.NA_BZPLC = '${NA_BZPLC}'
		</if>
		AND A.NA_ADJPL_C IN
		<foreach collection="TRPL_C" item="item" index="index" separator="," open="(" close=")">
		 		'${item}'
		</foreach>		
	</sql>
	
	<select id="getArcvOcuList" parameterType="java.util.Map" resultType="java.util.Map">
		<include refid="sql_getArcvOcuList" />
	</select>

	<sql id="sql_getBcdDayList">
		SELECT 
			D.NA_ADJPL_C,
			B.TRPL_ABR_NM TRPL_NM,
			D.NA_BZPLC,
			C.TRPL_ABR_NM BZPL_NM,
			D.NA_TEAM_C||' '||FN_CM_TEAM_NM(D.NA_BZPLC,D.NA_TEAM_C) NA_TEAM_C,
			D.SNS_CNTN,
			D.DB_AM DB_AM,
			D.CR_AM CR_AM,
			D.BAC BAC,
            D.NA_BLB_DFC_DSC
		FROM (
        	SELECT <![CDATA[/*+ IDX_DE_BCDDAY_01 */]]>
              A.na_adjpl_c
              , A.na_bzplc
              , A.na_team_c
              , A.na_blb_dfc_dsc
              , DECODE(na_blb_dfc_dsc, '-', '적자누계', '+', '흑자누계', '*', '누계잔액', 'ERROR') AS SNS_CNTN
              , SUM(A.db_am)  AS db_am
              , SUM(A.cr_am)  AS cr_am
              , SUM(A.bac)    AS bac
              , DECODE(na_blb_dfc_dsc, '-', 1, '+', 2, 3) AS seq
        	FROM TB_DE_BCDDAY A
            WHERE A.TR_DT='${TR_DT}'
			<if test="ROTS_CTR_DSC != null and  ROTS_CTR_DSC != 'all'">
				AND A.ROTS_CTR_DSC='${ROTS_CTR_DSC}'
			</if>
			<if test="NA_BZPLC != null and  NA_BZPLC != 'all'">
				AND A.NA_BZPLC='${NA_BZPLC}'
			</if>
				AND A.na_adjpl_c IN
			<foreach collection="TRPL_C" item="item" index="index" separator="," open="(" close=")">
			 	'${item}'
			</foreach>	            
            GROUP BY A.na_adjpl_c, A.na_bzplc, A.na_team_c, A.na_blb_dfc_dsc
            ) D, TB_TR_TRPL_CIF B, TB_TR_TRPL_CIF C
		WHERE D.na_adjpl_c = B.NA_TRPL_C(+)
		AND D.NA_BZPLC = C.NA_TRPL_C(+)
		ORDER BY D.na_adjpl_c, D.na_bzplc, D.na_team_c, D.seq
	</sql>
	
	<select id="getBcdDayList" parameterType="java.util.Map" resultType="java.util.Map">
		<include refid="sql_getBcdDayList" />	
	</select>

	<select id="getBcdDayListSum" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT B.*  FROM (
			SELECT <![CDATA[/*+ IDX_DE_BCDDAY_01 */]]>
               A.na_blb_dfc_dsc
              , DECODE(na_blb_dfc_dsc, '-', '적자누계', '+', '흑자누계', '*', '누계잔액', 'ERROR') AS SNS_CNTN
              , SUM(A.db_am)  AS db_am
              , SUM(A.cr_am)  AS cr_am
              , SUM(A.bac)    AS bac
        	FROM TB_DE_BCDDAY A
            WHERE A.TR_DT='${TR_DT}'
			<if test="ROTS_CTR_DSC != null and  ROTS_CTR_DSC != 'all'">
				AND A.ROTS_CTR_DSC='${ROTS_CTR_DSC}'
			</if>
			<if test="NA_BZPLC != null and  NA_BZPLC != 'all'">
				AND A.NA_BZPLC='${NA_BZPLC}'
			</if>
				AND A.na_adjpl_c IN
			<foreach collection="TRPL_C" item="item" index="index" separator="," open="(" close=")">
			 	'${item}'
			</foreach>	            
            GROUP BY A.NA_BLB_DFC_DSC, A.SNS_CNTN) B
		ORDER BY B.NA_BLB_DFC_DSC DESC
	</select>
	
	<select id="getDDL_DT" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT MAX(LST_DT) LST_DT, MIN(BIZDT_YN) BIZDT_YN FROM (
		<if test="BAS_DT != null and  BAS_DT != ''">
			SELECT #{BAS_DT} LST_DT, '1' BIZDT_YN FROM DUAL
		</if>
		<if test="BAS_DT == null or  BAS_DT == ''">
			SELECT 
		      TO_CHAR(DECODE(MAX(PROC_DATE), NULL, sysdate, TO_DATE(MAX(PROC_DATE),'YYYYMMDD'))-1,'YYYYMMDD')
		      LST_DT, '1' BIZDT_YN 
		  FROM TB_IF_PROC_RESULT WHERE IF_ID = 'LD104'
		</if>
		  UNION ALL
		  SELECT 
	      '' LST_DT, A.BIZDT_YN
		  FROM TB_CM_DTHLDY_ORGZ A
		  WHERE A.NA_TRPL_C='8808983000015'
		<if test="BAS_DT != null and  BAS_DT != ''">			
			  AND A.BAS_DT= #{BAS_DT}
		</if>
		<if test="BAS_DT == null or  BAS_DT == ''">
			 AND A.BAS_DT=(SELECT 
		      TO_CHAR(DECODE(MAX(PROC_DATE), NULL, sysdate, TO_DATE(MAX(PROC_DATE),'YYYYMMDD'))-1,'YYYYMMDD')
		      LST_DT
		  FROM TB_IF_PROC_RESULT WHERE IF_ID = 'LD104')
		</if>
		)
	</select>
	
	<select id="getMonthlyBalanceListExcel" parameterType="java.util.Map" resultType="java.util.Map" fetchSize="1000">
		<include refid="sql_getMonthlyBalanceList" />
	</select>
	
	<select id="getPrePayDayListExcel" parameterType="java.util.Map" resultType="java.util.Map" fetchSize="1000">
		<include refid="sql_getPrePayDayList" />
	</select>
	
	<select id="getArcvOcuListExcel" parameterType="java.util.Map" resultType="java.util.Map" fetchSize="1000">
		<include refid="sql_getArcvOcuList" />
	</select>
	
	<select id="getBcdDayListExcel" parameterType="java.util.Map" resultType="java.util.Map" fetchSize="1000">
		<include refid="sql_getBcdDayList" />	
	</select>
</mapper>