//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.Browser != "Runtime") {
	if (!nexacro.Element) {
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__createCanvasElementHandle = function (element, _doc, left, top, width, height) {
				var _handle = _doc.createElement("div");
				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top);
				nexacro.__setDOMNodeSize(_handle, width, height);
				_handle._linked_element = element;
				_handle._element_type = 9;
				return _handle;
			};
			nexacro.__destroyCanvasElementHandle = nexacro._desyroyElementHandle;
		}
		else if (nexacro.BrowserType != "Edge" || nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9)) {
			nexacro.__createCanvasElementHandle = function (element, _doc, left, top, width, height) {
				var _handle = _doc.createElement("canvas");
				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top);
				nexacro.__setDOMNodeSize(_handle, width, height);

				_handle._linked_element = element;
				_handle._element_type = 9;
				_handle._draw_ctx = _handle.getContext("2d");
				return _handle;
			};
			nexacro.__destroyCanvasElementHandle = function (_parent_handle, _handle) {
				if (_parent_handle) {
					_parent_handle.removeChild(_handle);
				}
				_handle._draw_ctx = null;
				_handle._linked_element = null;
			};
		}

		nexacro.__setElementHandleBringToFront = nexacro.__bringDOMNodeToFront;
		nexacro.__setElementHandleSendToBack = nexacro.__sendDOMNodeToBack;
		nexacro.__setElementHandleMoveToPrev = nexacro.__moveDOMNodeToPrev;
		nexacro.__setElementHandleMoveToNext = nexacro.__moveDOMNodeToNext;


		nexacro.__setLastFocusedElement = function (elem) {
			if (elem) {
				var win = elem.linkedcontrol ? elem.linkedcontrol._getWindow() : (elem._parent_elem ? elem._parent_elem.linkedcontrol._getWindow() : null);
				if (win) {
					var root_win = win;
					while (true) {
						if (root_win instanceof nexacro.PopupWindow) {
							if (root_win == root_win.parent) {
								break;
							}
							root_win = root_win.parent;
						}
						else {
							break;
						}
					}
					if (!root_win) {
						root_win = win;
					}
					root_win._last_focused_elem = elem;
				}
			}
		};




		nexacro.Element = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pElement = nexacro._createPrototype(nexacro.Object, nexacro.Element);
		nexacro.Element.prototype = _pElement;

		_pElement._type_name = "Element";

		_pElement.left = 0;
		_pElement.top = 0;
		_pElement.width = 0;
		_pElement.height = 0;
		_pElement.visible = true;
		_pElement.mirror = false;
		_pElement._rtldirection = "inherit";
		_pElement.letterspace = 0;
		_pElement._handle = null;
		_pElement._dest_handle = null;
		_pElement._owner_elem = null;
		_pElement._is_nc_element = false;

		_pElement.clearContents = nexacro._emptyFn;

		_pElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 0;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}
				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.mirror) {
					var background = this.background;
					if (background && background.image) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
					}
				}

				if (this._rtldirection) {
					nexacro.__setDOMNodeStyleDirection(handle_style, this._rtldirection);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pElement._destroyElementHandle = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle && _owner_elem) {
				_handle._linked_element = null;
				nexacro.__removeDOMNode(_owner_elem._handle, _handle);
				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
		};

		_pElement._removeElementHandle = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle && _owner_elem) {
				_handle._linked_element = null;
				nexacro.__removeDOMNode(_owner_elem._handle, _handle);
				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
		};

		_pElement._appendToContainer = function (_owner_elem) {
			var _handle = this._handle;
			if (_handle && _owner_elem._handle && this._owner_elem == null) {
				this._owner_elem = _owner_elem;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pElement._removeFromContainer = function () {
			var _owner_elem = this._owner_elem;
			if (_owner_elem) {
				this._owner_elem = null;
				var _handle = this._handle;
				if (_handle && _owner_elem._handle) {
					nexacro.__unlinkDOMNode(_owner_elem._dest_handle, _handle);
				}
			}
		};

		_pElement.getContainerElement = function () {
			return this;
		};
		_pElement.getRootWindowHandle = function () {
			if (this._owner_elem) {
				return this._owner_elem.getRootWindowHandle();
			}
			return null;
		};
		_pElement._getElementBaseUrl = function () {
			var tmp = this;
			while (tmp && !tmp._is_form) {
				tmp = tmp.parent;
			}

			if (tmp && tmp._is_form) {
				return tmp._getFormBaseUrl();
			}
			return "";
		};

		_pElement.hasSetSelectionRange = function () {
			var _handle = this._input_handle;
			if (_handle) {
				if (_handle.setSelectionRange) {
					return true;
				}
			}
			return false;
		};

		_pElement._getParentFont = function () {
			var elem = this._parent_elem;
			while (elem) {
				if (elem.font) {
					return elem.font;
				}
				elem = elem._parent_elem;
			}
			return null;
		};

		_pElement._getParentLetterSpace = function () {
			var elem = this._parent_elem;
			while (elem) {
				if (elem.letterspace) {
					return elem.letterspace;
				}
				elem = elem._parent_elem;
			}
			return 0;
		};

		_pElement._isRtl = function (bSelf) {
			var elem = this._parent_elem;
			if (bSelf) {
				elem = this;
			}

			var rtldirection = this._rtldirection;
			while (elem) {
				if (elem._rtldirection && elem._rtldirection != "inherit") {
					rtldirection = elem._rtldirection;
					break;
				}
				elem = elem._parent_elem;
			}

			return rtldirection == "rtl";
		};

		_pElement.setElementPosition = function (left, top, bForce) {
			if (this.left != left || this.top != top || bForce) {
				this.left = left;
				this.top = top;
				var _handle = this._handle;
				if (_handle) {
					if (_handle._is_fixed) {
						left += this._parent_elem.left;
						top += this._parent_elem.top;
					}

					var owner_elem = this._owner_elem;
					var bMirror = false;
					if (owner_elem) {
						bMirror = owner_elem.mirror;
					}
					var bRtl = this._isRtl();

					if (nexacro.OS != "iOS" && this.parent._is_scrollable_comp && !(nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9)) {
						nexacro.__setDOMNodeStylePos(_handle.style, 0, 0, !bMirror && this._isRtl());

						if (bRtl) {
							nexacro.__setDOMNodeStyleTranslate(_handle.style, -left, top);
						}
						else {
							nexacro.__setDOMNodeStyleTranslate(_handle.style, left, top);
						}
					}
					else {
						nexacro.__setDOMNodeStylePos(_handle.style, left, top, !bMirror && bRtl);
						var _dest_handle = this._dest_handle;
						if (_dest_handle && _handle != _dest_handle) {
							nexacro.__setDOMNodeStylePos(_dest_handle.style, left, top, !bMirror && bRtl);
							this.setElementScrollPos(this._scroll_left, this._scroll_top, true);
						}
					}
				}
			}
		};

		_pElement.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;

				if (width < 0) {
					width = 0;
				}
				if (height < 0) {
					height = 0;
				}

				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
					nexacro.__setDOMNodeStyleSize(this._dest_handle.style, width, height);
				}
			}
		};

		_pElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleLetterSpace(_handle.style, letterspace);
				}
			}
		};

		_pElement.setElementVisible = function (visible) {
			if (this.visible != visible) {
				this.visible = visible;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleVisible(_handle.style, visible);

					if (nexacro.OS == "Android" || nexacro.OS == "iOS") {
						if (this.visible) {
							var v = this.zindex;
							if (!v || v < 0) {
								v = "";
							}
							nexacro.__setDOMNodeStyleZindex(_handle.style, v);
						}
						else {
							nexacro.__setDOMNodeStyleZindex(_handle.style, nexacro._zindex_hide);
						}
					}
				}
			}
		};

		_pElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;

				var background = this.background;
				var image = this.image;

				if (background && background.image) {
					var handle = this._handle;
					var bRtl = this._isRtl();
					if (handle) {
						this.setElementBorder(this.border, this.bordertype);
						this.setElementPadding(this.padding);
						nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
					}

					if (this._client_element) {
						handle = this._client_element._handle;
						if (handle) {
							nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
						}
					}
				}
			}
		};

		_pElement.setElementRtlDirection = function (rtldirection) {
			if (this._rtldirection != rtldirection) {
				this._bChangeRtl = true;
				this._rtldirection = rtldirection;

				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStyleDirection(handle.style, rtldirection);
				}
				if (this.shadow) {
					this.setElementShadow(this.shadow);
				}
				if (this.border) {
					this.setElementBorder(this.border, this.bordertype);
				}
				if (this.bordertype) {
					this.setElementBorder(this.border, this.bordertype);
				}
				if (this.padding) {
					this.setElementPadding(this.padding);
				}
				if (this.gradation) {
					this.setElementBackground(this.background, this.gradation);
				}
				if (this.align) {
					this.setElementAlign(this.align);
				}
				if (this.halign && this.valign) {
					this.setElementAlignXY(this.halign, this.valign);
				}

				var client_element = this._client_element;
				if (!client_element || this.client_width == 0 || this.client_height == 0) {
					return;
				}

				this._bChangeRtl = false;
			}
		};

		_pElement.setElementEnable = nexacro._emptyFn;
		_pElement.setElementTabIndex = nexacro._emptyFn;

		_pElement.setElementAlign = nexacro._emptyFn;
		_pElement.setElementAlignXY = nexacro._emptyFn;

		_pElement.setElementPadding = nexacro._emptyFn;
		_pElement.setElementPaddingXY = nexacro._emptyFn;

		_pElement.setElementFont = nexacro._emptyFn;
		_pElement.setElementColor = nexacro._emptyFn;

		_pElement.setElementCursor = nexacro._emptyFn;

		delete _pElement;


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._VMLContainerElement = function (parent_elem) {
				this.parent = parent_elem;
				this._parent_elem = parent_elem;
			};
			var __pVMLContainerElement = nexacro._createPrototype(nexacro.Element, nexacro._VMLContainerElement);
			nexacro._VMLContainerElement.prototype = __pVMLContainerElement;
			__pVMLContainerElement._type_name = "VMLContainerElement";

			__pVMLContainerElement.bordertype = null;
			__pVMLContainerElement.border = null;
			__pVMLContainerElement.background = null;
			__pVMLContainerElement._inner_left = 0;
			__pVMLContainerElement._inner_top = 0;
			__pVMLContainerElement._inner_width = 0;
			__pVMLContainerElement._inner_height = 0;
			__pVMLContainerElement._outer_path = "";
			__pVMLContainerElement._inner_path = "";
			__pVMLContainerElement._border_handle = null;
			__pVMLContainerElement._backgroundtype = 0;
			__pVMLContainerElement._applied_backgroundtype = 0;
			__pVMLContainerElement._background_handle = null;
			__pVMLContainerElement._background_fill_handle = null;
			__pVMLContainerElement._imagetype = 0;
			__pVMLContainerElement._applied_imagetype = 0;
			__pVMLContainerElement._image_handle = null;
			__pVMLContainerElement._image_fill_handle = null;
			__pVMLContainerElement._img_url = "";
			__pVMLContainerElement._img_repeat = "";
			__pVMLContainerElement._img_bkpos_x = 0;
			__pVMLContainerElement._img_bkpos_y = 0;
			__pVMLContainerElement._need_update = false;
			__pVMLContainerElement._need_update_border = false;
			__pVMLContainerElement._need_update_background = false;
			__pVMLContainerElement._need_update_image = false;
			__pVMLContainerElement._is_nc_element = true;

			__pVMLContainerElement.create = function (before_node) {
				var _owner_elem = this._parent_elem;
				if (_owner_elem._handle) {
					if (!this._handle) {
						this._owner_elem = _owner_elem;
						var _doc = _owner_elem.getRootWindowHandle();
						var _handle = _doc.createElement("div");
						_handle.id = this._parent_elem._handle.id + this._type_name;

						nexacro.__setDOMNodeSelectable(_handle, false);

						var handle_style = _handle.style;
						nexacro.__setDOMNodeStyleDirection(handle_style, "ltr");
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
						nexacro.__setDOMNodeStylePos(handle_style, 0, 0, this._isRtl());
						nexacro.__setDOMNodeStyleUnitSize(handle_style, "100%", "100%");

						this._handle = this._dest_handle = _handle;
					}

					if (before_node) {
						nexacro.__insertDOMNode(_owner_elem._dest_handle, this._handle, before_node);
					}
					else {
						nexacro.__appendDOMNode(_owner_elem._dest_handle, this._handle);
					}

					this.updateVMLInfo();
				}
			};

			__pVMLContainerElement.destroy = function () {
				var _handle = this._handle;
				if (_handle) {
					_handle._linked_element = null;
					if (this._owner_elem && this._owner_elem._dest_handle) {
						nexacro.__removeDOMNode(this._owner_elem._dest_handle, _handle);
					}
					this._owner_elem = null;
					this._handle = this._dest_handle = null;

					var _background_handle = this._background_handle;
					if (_background_handle) {
						nexacro.__removeDOMNode(_handle, _background_handle);
						var _background_fill_handle = this._background_fill_handle;
						if (_background_fill_handle) {
							nexacro.__removeDOMNode(_background_handle, _background_fill_handle);
						}
					}
					var _border_handle = this._border_handle;
					if (_border_handle) {
						nexacro.__removeDOMNode(_handle, _border_handle);
					}
					var _image_handle;
					if (_image_handle) {
						nexacro.__removeDOMNode(_handle, _image_handle);
						var _image_fill_handle = this._image_fill_handle;
						if (_image_fill_handle) {
							nexacro.__removeDOMNode(_image_handle, _image_fill_handle);
						}
					}

					this._background_fill_handle = null;
					this._border_handle = null;
					this._background_handle = null;
					this._image_handle = null;
					this._image_fill_handle = null;
				}
				this.parent = null;
				this._parent_elem = null;
			};

			__pVMLContainerElement.clearContents = function () {
				var _handle = this._handle;
				var _owner_elem = this._owner_elem;
				if (_handle) {
					if (_owner_elem) {
						nexacro.__removeDOMNode(_owner_elem._handle, _handle);
					}
					this._owner_elem = null;
				}
			};

			__pVMLContainerElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;

					if (this.bordertype) {
						this.setVMLBorder(this.bordertype, this.border);
						if (this._handle) {
							this.updateVMLInfo();
						}
					}
				}
			};

			__pVMLContainerElement._createVMLOuterPath = function (width, height, radius_x, radius_y, bordertype) {
				var x1 = 0, x2 = width * 10, y1 = 0, y2 = height * 10;

				var patharr = [];
				if (radius_x > 0 && radius_y > 0) {
					var rx = radius_x * 10, ry = radius_y * 10;

					if (bordertype._lefttop) {
						patharr.push('m' + x1 + ',' + (y1 + ry) + 'qy' + (x1 + rx) + ',' + y1);
					}
					else {
						patharr.push('m' + x1 + ',' + y1);
					}
					if (bordertype._righttop) {
						patharr.push('l' + (x2 - rx) + ',' + y1 + 'qx' + x2 + ',' + (y1 + ry));
					}
					else {
						patharr.push('l' + x2 + ',' + y1);
					}
					if (bordertype._rightbottom) {
						patharr.push('l' + x2 + ',' + (y2 - ry) + 'qy' + (x2 - rx) + ',' + y2);
					}
					else {
						patharr.push('l' + x2 + ',' + y2);
					}
					if (bordertype._leftbottom) {
						patharr.push('l' + (x1 + rx) + ',' + y2 + 'qx' + x1 + ',' + (y2 - ry));
					}
					else {
						patharr.push('l' + x1 + ',' + y2);
					}
					patharr.push('x');
				}
				else {
					patharr.push('m' + x1 + ',' + y1);
					patharr.push('l' + x2 + ',' + y1);
					patharr.push('l' + x2 + ',' + y2);
					patharr.push('l' + x1 + ',' + y2);
					patharr.push('x');
				}
				return patharr.join('');
			};
			__pVMLContainerElement._createVMLInnerPath = function (width, height, radius_x, radius_y, border, bordertype) {
				var top = border._top_width;
				var right = border._right_width;
				var bottom = border._bottom_width;
				var left = border._left_width;

				var x1 = 0, x2 = width * 10, y1 = 0, y2 = height * 10;
				if (border && !border._is_real_empty()) {
					x1 += left * 10;
					x2 -= right * 10;
					y1 += top * 10;
					y2 -= bottom * 10;
				}
				if (x1 >= x2 || y1 >= y2) {
					return "";
				}

				var patharr = [];
				var rx, ry;
				if (radius_x > 0 && radius_y > 0) {
					rx = (radius_x - left) * 10;
					ry = (radius_y - top) * 10;
					if (rx > 0 && ry > 0 && bordertype._lefttop) {
						patharr.push('m' + x1 + ',' + (y1 + ry) + 'qy' + (x1 + rx) + ',' + y1);
					}
					else {
						patharr.push('m' + x1 + ',' + y1);
					}
					rx = (radius_x - right) * 10;
					ry = (radius_y - top) * 10;
					if (rx > 0 && ry > 0 && bordertype._righttop) {
						patharr.push('l' + (x2 - rx) + ',' + y1 + 'qx' + x2 + "," + (y1 + ry));
					}
					else {
						patharr.push('l' + x2 + ',' + y1);
					}
					rx = (radius_x - right) * 10;
					ry = (radius_y - bottom) * 10;
					if ((rx > 0 && ry > 0) && bordertype._rightbottom) {
						patharr.push('l' + x2 + ',' + (y2 - ry) + 'qy' + (x2 - rx) + ',' + y2);
					}
					else {
						patharr.push('l' + x2 + ',' + y2);
					}
					rx = (radius_x - left) * 10;
					ry = (radius_y - bottom) * 10;
					if (rx > 0 && ry > 0 && bordertype._leftbottom) {
						patharr.push('l' + (x1 + rx) + ',' + y2 + 'qx' + x1 + ',' + (y2 - ry));
					}
					else {
						patharr.push('l' + x1 + ',' + y2);
					}
					patharr.push('x');
				}
				else {
					patharr.push('m' + x1 + ',' + y1);
					patharr.push('l' + x2 + ',' + y1);
					patharr.push('l' + x2 + ',' + y2);
					patharr.push('l' + x1 + ',' + y2);
					patharr.push('x');
				}
				return patharr.join('');
			};

			__pVMLContainerElement.setVMLBorder = function (bordertype, border) {
				if (this.bordertype != bordertype || this.border != border || this.prev_width != this.width || this.prev_height != this.height) {
					var width = this.width;
					var height = this.height;

					if (bordertype && border) {
						var _border = border._getStyleObject(this._isRtl());
						var _bordertype = bordertype._getStyleObject(this._isRtl());

						var _border_width = _border._getBorderWidth();
						var _border_height = _border._getBorderHeight();

						this._inner_left = _border._left_width;
						this._inner_top = _border._top_width;
						this._inner_width = width - _border_width;
						this._inner_height = height - _border_height;

						var color = _border._syscolor;
						if (!color || color == "") {
							color = _border._top_syscolor;
						}
						this._border_color = color;

						var radius_x = _bordertype._radiusx, radius_y = _bordertype._radiusy;
						var round_adjust = 0;
						if ((radius_x + radius_x) > width) {
							round_adjust = radius_x - Math.floor(width / 2);
						}
						if ((radius_y + radius_y) > height) {
							var round_adjust2 = radius_y - Math.floor(height / 2);
							if (round_adjust2 > round_adjust) {
								round_adjust = round_adjust2;
							}
						}
						if (round_adjust) {
							radius_x -= round_adjust;
							radius_y -= round_adjust;
						}

						var outer_path = this._createVMLOuterPath(width, height, radius_x, radius_y, _bordertype);
						var inner_path = this._createVMLInnerPath(width, height, radius_x, radius_y, _border, _bordertype);
						this._outer_path = outer_path;
						this._inner_path = inner_path;
					}
					else {
						this._inner_left = 0;
						this._inner_top = 0;
						this._inner_width = width;
						this._inner_height = height;

						this._outer_path = "";
						var inner_path = this._createVMLOuterPath(width, height, 0, 0, bordertype);
						this._inner_path = inner_path;
					}

					this.prev_width = width;
					this.prev_height = height;
					this.bordertype = bordertype;
					this.border = border;
					this._need_update = true;
					this._need_update_border = true;
				}
			};

			__pVMLContainerElement.setVMLBackground = function (background, gradation) {
				if ((background && (this.background != background || this.background._syscolor != background._syscolor)) || (background.color == "@gradation" && (gradation && (this.gradation != gradation || this.gradation._sysvalue2 != gradation._sysvalue2)))) {
					if (background) {
						if (background.color == "@gradation" && gradation && gradation._sysvalue2) {
							this._backgroundtype = 2;
						}
						else if (background._value == "transparent") {
							background._syscolor = "transparent";
							background._sysopacity = 0;
							this._backgroundtype = 1;
						}
						else if (background._syscolor) {
							this._backgroundtype = 1;
						}
						else if (nexacro.BrowserVersion == 8) {
							background._syscolor = "transparent";
							background._sysopacity = 0;
							this._backgroundtype = 1;
						}
						else {
							this._backgroundtype = 0;
						}

						this.background = background;
						this.gradation = gradation;
					}
					else {
						this.background = null;
						this.gradation = null;
						this._backgroundtype = 0;
					}
					this._need_update = true;
					this._need_update_background = true;
				}
			};

			__pVMLContainerElement.setVMLStretchImage = function (url) {
				if (this._imagetype != 2 || this.img_url != url) {
					this._imagetype = 2;
					this._img_url = url;
					this._img_repeat = "";
					this._img_bkpos_x = 0;
					this._img_bkpos_y = 0;
					this._need_update = true;
					this._need_update_image = true;
				}
			};

			__pVMLContainerElement.setVMLRepeatImage = function (_handle, url, repeat, posx, posy) {
				if (repeat == "") {
					repeat = "no-repeat";
				}
				if (this._imagetype != 1 || this.img_url != url || this._img_repeat != repeat || this._img_bkpos_x != posx || this._img_bkpos_y != posy) {
					this._imagetype = 1;
					this._img_url = url;
					this._img_repeat = repeat;
					this._img_bkpos_x = posx;
					this._img_bkpos_y = posy;
					this._need_update = true;
					this._need_update_image = true;
				}
			};

			__pVMLContainerElement.clearVMLImage = function () {
				if (this._imagetype != 0) {
					this._imagetype = 0;
					this._img_url = "";
					this._img_repeat = "";
					this._img_bkpos = "";
					this._need_update_image = true;
				}
			};

			__pVMLContainerElement.updateVMLInfo = function () {
				var _handle = this._handle;
				var _doc = this.getRootWindowHandle();
				if (_handle && _doc) {
					var _backgroundtype = this._backgroundtype;

					var _need_update_border = this._need_update_border;
					var _need_update_background = this._need_update_background;
					var _need_update_image = this._need_update_image;

					var _border_handle = this._border_handle;
					var _background_handle = this._background_handle;
					var _image_handle = this._image_handle;

					if (_need_update_background) {
						var _applied_backgroundtype = this._applied_backgroundtype;
						var _backgroundtype = this._backgroundtype;
						if (_backgroundtype == 0) {
							if (_background_handle) {
								nexacro.__removeDOMNode(_handle, _background_handle);
								var _background_fill_handle = this._background_fill_handle;
								if (_background_fill_handle) {
									nexacro.__removeDOMNode(_background_handle, _background_fill_handle);
								}
								this._background_handle = null;
								this._background_fill_handle = null;
							}
						}
						else if (_backgroundtype == 1) {
							var background = this.background;
							if (_applied_backgroundtype == 0) {
								_background_handle = _doc.createElement("<v:shape style='position:absolute;width:1px;height:1px;' stroked='f' coordorigin='5 5' coordsize='10 10'>");
								_background_handle.path = this._inner_path;
								if (_image_handle) {
									_handle.insertBefore(_background_handle, _image_handle);
								}
								else if (_border_handle) {
									_handle.insertBefore(_background_handle, _border_handle);
								}
								else {
									_handle.appendChild(_background_handle);
								}
								this._background_handle = _background_handle;
								if (background._syscolor == "transparent" && nexacro.BrowserVersion == 8) {
									_background_handle.fillcolor = "none";
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}
									_fill_handle = _doc.createElement("<v:fill color = 'red' opacity= '0' />");
									_background_handle.appendChild(_fill_handle);
									this._background_fill_handle = _fill_handle;
								}
								else if (background._syscolor == "transparent") {
									_background_handle.fillcolor = "none";
								}
								else {
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}
									var opacity = (background._sysopacity / 100);
									var bksyscolor = background._syscolor;
									_fill_handle = _doc.createElement("<v:fill type= 'gradient' color = '" + bksyscolor + "' opacity = '" + opacity + "' color2 = '" + bksyscolor + "'" + " o:opacity2 = '" + opacity + "' colors = '0 " + bksyscolor + " 1 " + bksyscolor + "' />");
									_background_handle.appendChild(_fill_handle);
									this._background_fill_handle = _fill_handle;
								}
							}
							else if (_applied_backgroundtype >= 1) {
								if (background._syscolor == "transparent" && nexacro.BrowserVersion == 8) {
									_background_handle.fillcolor = "none";
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}
									_fill_handle = _doc.createElement("<v:fill color = 'red' opacity= '0' />");
									_background_handle.appendChild(_fill_handle);
									this._background_fill_handle = _fill_handle;
								}
								else if (background._syscolor == "transparent") {
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}
									_background_handle.fillcolor = "none";
								}
								else {
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}
									var opacity = (background._sysopacity / 100);
									var bksyscolor = background._syscolor;
									_fill_handle = _doc.createElement("<v:fill type= 'gradient' color = '" + bksyscolor + "' opacity = '" + opacity + "' color2 = '" + bksyscolor + "'" + " o:opacity2 = '" + opacity + "' colors = '0 " + bksyscolor + " 1 " + bksyscolor + "' />");
									_background_handle.appendChild(_fill_handle);
									this._background_fill_handle = _fill_handle;
								}
							}
							else if (_applied_backgroundtype == 2) {
								var _fill_handle = this._background_fill_handle;
								if (_fill_handle) {
									nexacro.__removeDOMNode(_background_handle, _fill_handle);
									this._background_fill_handle = null;
								}
								_fill_handle = _doc.createElement("<v:fill color = '" + background._syscolor + "'" + " opacity= '" + (background._sysopacity / 100) + "' />");
								_background_handle.appendChild(_fill_handle);
								this._background_fill_handle = _fill_handle;
							}
						}
						else {
							var gradation = this.gradation;
							this._need_vmlrefresh = true;
							if (_applied_backgroundtype == 0) {
								_background_handle = _doc.createElement("<v:shape style='position:absolute;width:1px;height:1px' stroked='f' coordorigin='5 5' coordsize='10 10'>");
								_background_handle.path = this._inner_path;
								var _fill_handle = _doc.createElement("<v:fill " + gradation._sysvalue2 + ">");
								_background_handle.appendChild(_fill_handle);
								if (_image_handle) {
									_handle.insertBefore(_background_handle, _image_handle);
								}
								else if (_border_handle) {
									_handle.insertBefore(_background_handle, _border_handle);
								}
								else {
									_handle.appendChild(_background_handle);
								}
								this._background_handle = _background_handle;
								this._background_fill_handle = _fill_handle;
							}
							else if (_applied_backgroundtype == 1) {
								if (gradation._sysvalue2) {
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}

									_fill_handle = _doc.createElement("<v:fill " + gradation._sysvalue2 + ">");
									_background_handle.appendChild(_fill_handle);
									this._background_fill_handle = _fill_handle;
								}
							}
							else if (_applied_backgroundtype == 2) {
								if (gradation._sysvalue2) {
									var _fill_handle = this._background_fill_handle;
									if (_fill_handle) {
										nexacro.__removeDOMNode(_background_handle, _fill_handle);
										this._background_fill_handle = null;
									}
									_fill_handle = _doc.createElement("<v:fill " + gradation._sysvalue2 + ">");
									_background_handle.appendChild(_fill_handle);
									this._background_fill_handle = _fill_handle;
								}
							}
						}
						this._applied_backgroundtype = _backgroundtype;
					}
					else {
						if (_need_update_border && _background_handle) {
							_background_handle.path = this._inner_path;
						}
					}

					if (_need_update_image) {
						var _applied_imagetype = this._applied_imagetype;
						var _imagetype = this._imagetype;
						if (_imagetype == 0) {
							if (_image_handle) {
								nexacro.__removeDOMNode(_handle, _image_handle);
								var _image_fill_handle = this._image_fill_handle;
								if (_image_fill_handle) {
									nexacro.__removeDOMNode(_image_handle, _image_fill_handle);
								}
								this._image_handle = null;
								this._image_fill_handle = null;
							}
						}
						else if (_imagetype == 1) {
							if (_applied_imagetype == 0) {
								_image_handle = _doc.createElement("div");
								var handle_style = _image_handle.style;

								nexacro.__setDOMNodeStyleAbsolute(handle_style);
								nexacro.__setDOMNodeStylePos(handle_style, this._inner_left, this._inner_top);
								nexacro.__setDOMNodeStyleSize(handle_style, this._inner_width, this._inner_height);
								nexacro.__setDOMNodeStyleBackgroundImage(handle_style, this._img_url, this._img_repeat, (this._img_bkpos_x + "% " + this._img_bkpos_y + "%"));

								if (_border_handle && nexacro.BrowserVersion < 8) {
									_handle.insertBefore(_image_handle, _border_handle);
								}
								else {
									_handle.appendChild(_image_handle);
								}
								this._image_handle = _image_handle;
								this._image_fill_handle = null;
							}
							else if (_applied_imagetype == 1) {
								var handle_style = _image_handle.style;
								nexacro.__setDOMNodeStylePos(handle_style, this._inner_left, this._inner_top);
								nexacro.__setDOMNodeStyleSize(handle_style, this._inner_width, this._inner_height);
								nexacro.__setDOMNodeStyleBackgroundImage(handle_style, this._img_url, this._img_repeat, (this._img_bkpos_x + "% " + this._img_bkpos_y + "%"));
							}
							else {
								if (_image_handle) {
									nexacro.__removeDOMNode(_handle, _image_handle);
									var _image_fill_handle = this._image_fill_handle;
									if (_image_fill_handle) {
										nexacro.__removeDOMNode(_image_handle, _image_fill_handle);
									}
									this._image_handle = null;
									this._image_fill_handle = null;
								}
								_image_handle = _doc.createElement("div");
								var handle_style = _image_handle.style;

								nexacro.__setDOMNodeStyleAbsolute(handle_style);
								nexacro.__setDOMNodeStylePos(handle_style, this._inner_left, this._inner_top);
								nexacro.__setDOMNodeStyleSize(handle_style, this._inner_width, this._inner_height);
								nexacro.__setDOMNodeStyleBackgroundImage(handle_style, this._img_url, this._img_repeat, (this._img_bkpos_x + "% " + this._img_bkpos_y + "%"));
								if (_border_handle && nexacro.BrowserVersion < 8) {
									_handle.insertBefore(_image_handle, _border_handle);
								}
								else {
									_handle.appendChild(_image_handle);
								}
								this._image_handle = _image_handle;
								if (this._image_fill_handle) {
									nexacro.__removeDOMNode(_image_handle, this._image_fill_handle);
									this._image_fill_handle = null;
								}
							}
						}
						else {
							if (_applied_imagetype == 0) {
								_image_handle = _doc.createElement("<v:shape style='position:absolute;width:1px;height:1px;' stroked='f' coordorigin='5 5' coordsize='10 10'>");
								_image_handle.path = this._inner_path;
								var _fill_handle = _doc.createElement("<v:fill  type='frame' src='" + this._img_url + "'/>");
								_image_handle.appendChild(_fill_handle);
								if (_border_handle && nexacro.BrowserVersion < 8) {
									_handle.insertBefore(_image_handle, _border_handle);
								}
								else {
									_handle.appendChild(_image_handle);
								}
								this._image_handle = _image_handle;
								this._image_fill_handle = _fill_handle;
							}
							else if (_applied_imagetype == 1) {
								if (_image_handle) {
									nexacro.__removeDOMNode(_handle, _image_handle);
									var _image_fill_handle = this._image_fill_handle;
									if (_image_fill_handle) {
										nexacro.__removeDOMNode(_image_handle, _image_fill_handle);
									}
									this._image_handle = null;
									this._image_fill_handle = null;
								}
								_image_handle = _doc.createElement("<v:shape style='position:absolute;width:1px;height:1px;' stroked='f' coordorigin='5 5' coordsize='10 10'>");
								_image_handle.path = this._inner_path;
								var _fill_handle = _doc.createElement("<v:fill  type='frame' src='" + this._img_url + "'/>");
								_image_handle.appendChild(_fill_handle);
								if (_border_handle && nexacro.BrowserVersion < 8) {
									_handle.insertBefore(_image_handle, _border_handle);
								}
								else {
									_handle.appendChild(_image_handle);
								}
								this._image_handle = _image_handle;
								this._image_fill_handle = _fill_handle;
							}
							else if (_applied_imagetype == 2) {
								_image_handle.path = this._inner_path;
								var _fill_handle = this._image_fill_handle;
								if (_fill_handle) {
									_fill_handle.src = this._img_url;
								}
							}
						}
						this._applied_imagetype = _imagetype;
					}
					else {
						if (_need_update_border && _image_handle) {
							if (_imagetype == 1) {
								nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top);
								nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);
							}
							else if (_imagetype == 2) {
								_image_handle.path = this._inner_path;
							}
						}
					}

					if (_need_update_border) {
						var _outer_path = this._outer_path;
						if (_border_handle) {
							if (_outer_path) {
								_border_handle.path = _outer_path + " " + this._inner_path + " e";
								if (this._border_color == "transparent" || this._border_color == "") {
									_border_handle.fillcolor = "none";
								}
								else {
									_border_handle.fillcolor = this._border_color;
								}
								this._border_handle = _border_handle;
							}
							else {
								nexacro.__removeDOMNode(_handle, _border_handle);
								this._border_handle = null;
							}
						}
						else if (_outer_path) {
							_border_handle = _doc.createElement("<v:shape style='position:absolute;width:1px;height:1px' stroked='f' coordorigin='5 5' coordsize='10 10'>");
							if (_background_handle && nexacro.BrowserVersion == 8) {
								_handle.insertBefore(_border_handle, _background_handle);
							}
							else {
								_handle.appendChild(_border_handle);
							}
							_border_handle.path = this._outer_path + " " + this._inner_path + " e";
							if (this._border_color == "transparent" || this._border_color == "") {
								_border_handle.fillcolor = "none";
							}
							else {
								_border_handle.fillcolor = this._border_color;
							}
							this._border_handle = _border_handle;
						}
					}

					this._need_update = false;
					this._need_update_border = false;
					this._need_update_background = false;
					this._need_update_image = false;
				}
			};
			delete __pVMLContainerElement;


			nexacro._RepeatImageElement = function (parent_elem) {
				this.parent = parent_elem;
				this._parent_elem = parent_elem;
			};
			var __pRepeatImageElement = nexacro._createPrototype(nexacro.Element, nexacro._RepeatImageElement);
			nexacro._RepeatImageElement.prototype = __pRepeatImageElement;

			__pRepeatImageElement._type_name = "RepeatImageElement";

			__pRepeatImageElement._img_url = "";
			__pRepeatImageElement._repeat = "";
			__pRepeatImageElement._posx = 0;
			__pRepeatImageElement._posy = 0;
			__pRepeatImageElement._is_nc_element = true;

			__pRepeatImageElement.create = function (before_elem) {
				var _owner_elem = this._parent_elem;
				if (_owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("div");
					_handle.id = this._parent_elem._handle.id + this._type_name;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

					this._handle = this._dest_handle = _handle;
					if (before_elem) {
						nexacro.__insertDOMNode(_owner_elem._dest_handle, _handle, before_elem._handle);
					}
					else {
						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
					}

					if (this._img_url) {
						nexacro.__setDOMNodeStyleBackgroundImage(handle_style, this._img_url, this._repeat, (this._posx + "% " + this._posy + "%"));
					}

					if (this.mirror) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
					}
				}
			};

			__pRepeatImageElement.setElementInfo = function (url, repeat, posx, posy) {
				if (this._img_url != url || this._repeat != repeat || this._posx != posx || this._posy != posy) {
					this._img_url = url;
					this._repeat = repeat;
					this._posx = posx;
					this._posy = posy;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setDOMNodeStyleBackgroundImage(_handle.style, url, repeat, (posx + "% " + posy + "%"));
					}
				}
			};

			__pRepeatImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
				var v = this.mirror;

				if (rtlimagemirroring) {
					v = nexacro._toBoolean(rtlimagemirroring._value);
				}

				if (this.mirror != v || bChangeRtlDirection) {
					this.mirror = v;

					var handle = this._handle;
					if (handle) {
						nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
					}
				}
			};

			delete __pRepeatImageElement;


			nexacro._StretchImageElement = function (parent_elem) {
				this.parent = parent_elem;
				this._parent_elem = parent_elem;
			};
			var __pStretchImageElement = nexacro._createPrototype(nexacro.Element, nexacro._StretchImageElement);
			nexacro._StretchImageElement.prototype = __pStretchImageElement;

			__pStretchImageElement._type_name = "StretchImageElement";

			__pStretchImageElement._img_url = "";
			__pStretchImageElement._is_nc_element = true;

			__pStretchImageElement.create = function (before_elem) {
				var _owner_elem = this._parent_elem;
				if (_owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("img");
					_handle.id = this._parent_elem._handle.id + this._type_name;
					_handle._linked_element = this;

					nexacro.__setDOMNodeSelectable(_handle, false);
					nexacro.__setDOMNodeAlt(_handle, this._parent_elem.accessibility_label ? this._parent_elem.accessibility_label : this._parent_elem.linkedcontrol.id);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

					if (this._img_url) {
						nexacro.__setImageDOMNodeImageUrl(_handle, this._img_url);
					}

					if (this.mirror) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
					}

					this._handle = this._dest_handle = _handle;
					if (before_elem) {
						nexacro.__insertDOMNode(_owner_elem._dest_handle, _handle, before_elem._handle);
					}
					else {
						var _parent_handle = _owner_elem._dest_handle;
						var _lastchild_handle = nexacro.__getLastChildDOMNode(_parent_handle);
						nexacro.__insertDOMNode(_parent_handle, _handle, _lastchild_handle);
					}
				}
			};

			__pStretchImageElement.setElementInfo = function (url) {
				if (this._img_url != url) {
					this._img_url = url;
					var _handle = this._handle;
					if (_handle) {
						if (url == "") {
							nexacro.__setDOMNodeStyleVisible(_handle.style, visible);
						}
						else {
							nexacro.__setImageDOMNodeImageUrl(_handle, url);
						}
					}
				}
			};

			__pStretchImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
				var v = this.mirror;

				if (rtlimagemirroring) {
					v = nexacro._toBoolean(rtlimagemirroring._value);
				}

				if (this.mirror != v || bChangeRtlDirection) {
					this.mirror = v;

					var handle = this._handle;
					if (handle) {
						nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
					}
				}
			};

			delete __pStretchImageElement;
		}


		nexacro._QuadImageElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var __pQuadImageElement = nexacro._createPrototype(nexacro.Element, nexacro._QuadImageElement);
		nexacro._QuadImageElement.prototype = __pQuadImageElement;

		__pQuadImageElement._type_name = "QuadImageElement";

		__pQuadImageElement._img_url = "";
		__pQuadImageElement._lefttop_node = null;
		__pQuadImageElement._righttop_node = null;
		__pQuadImageElement._rightbottom_node = null;
		__pQuadImageElement._leftbottom_node = null;
		__pQuadImageElement._is_nc_element = true;

		__pQuadImageElement.create = function (before_elem) {
			var _owner_elem = this._parent_elem;
			if (_owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;

				nexacro.__setDOMNodeSelectable(_handle, false);

				if ((this.width % 2) == 1) {
					var _width = "51%";
				}
				else {
					var _width = "50%";
				}

				if ((this.height % 2) == 1) {
					var _height = "51%";
				}
				else {
					var _height = "50%";
				}

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

				var lefttop_node = _doc.createElement("div");
				lefttop_style = lefttop_node.style;

				nexacro.__setDOMNodeStylePosLeftTop(lefttop_style);
				nexacro.__setDOMNodeStyleUnitSize(lefttop_style, _width, _height);
				lefttop_style.backgroundRepeat = "no-repeat";
				lefttop_style.backgroundPosition = "left top";
				this._lefttop_node = lefttop_node;

				var righttop_node = _doc.createElement("div");
				righttop_style = righttop_node.style;

				nexacro.__setDOMNodeStylePosRightTop(righttop_style);
				nexacro.__setDOMNodeStyleUnitSize(righttop_style, "50%", _height);
				righttop_style.backgroundRepeat = "no-repeat";
				righttop_style.backgroundPosition = "right top";
				this._righttop_node = righttop_node;

				var rightbottom_node = _doc.createElement("div");
				rightbottom_style = rightbottom_node.style;

				nexacro.__setDOMNodeStylePosRightBottom(rightbottom_style);
				nexacro.__setDOMNodeStyleUnitSize(rightbottom_style, "50%", "50%");
				rightbottom_style.backgroundRepeat = "no-repeat";
				rightbottom_style.backgroundPosition = "right bottom";
				this._rightbottom_node = rightbottom_node;

				var leftbottom_node = _doc.createElement("div");
				leftbottom_style = leftbottom_node.style;

				nexacro.__setDOMNodeStylePosLeftBottom(leftbottom_style);
				nexacro.__setDOMNodeStyleUnitSize(leftbottom_style, _width, "50%");
				leftbottom_style.backgroundRepeat = "no-repeat";
				leftbottom_style.backgroundPosition = "left bottom";
				this._leftbottom_node = leftbottom_node;

				if (this._img_url) {
					var url2 = "url(\"" + this._img_url + "\")";
					lefttop_style.backgroundImage = url2;
					righttop_style.backgroundImage = url2;
					rightbottom_style.backgroundImage = url2;
					leftbottom_style.backgroundImage = url2;
				}

				_handle.appendChild(lefttop_node);
				_handle.appendChild(righttop_node);
				_handle.appendChild(rightbottom_node);
				_handle.appendChild(leftbottom_node);

				if (this.mirror) {
					nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
				}

				this._handle = this._dest_handle = _handle;
				if (before_elem) {
					nexacro.__insertDOMNode(_owner_elem._dest_handle, _handle, before_elem._handle);
				}
				else {
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				}
			}
		};

		__pQuadImageElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					nexacro.__removeDOMNode(this._owner_elem._dest_handle, _handle);
				}
				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._lefttop_node = null;
				this._righttop_node = null;
				this._rightbottom_node = null;
				this._leftbottom_node = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		__pQuadImageElement.setElementInfo = function (url) {
			if (this._img_url != url) {
				this._img_url = url;
				if (this._handle) {
					var url2 = "url(\"" + url + "\")";
					this._lefttop_node.style.backgroundImage = url2;
					this._righttop_node.style.backgroundImage = url2;
					this._rightbottom_node.style.backgroundImage = url2;
					this._leftbottom_node.style.backgroundImage = url2;
				}
			}
		};

		__pQuadImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;

				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
				}
			}
		};

		delete __pQuadImageElement;


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
			nexacro._EdgeImageElement = function (parent_elem) {
				this.parent = parent_elem;
				this._parent_elem = parent_elem;

				this._edge_type = 0;
				this._applied_edge_type = 0;
				this._img_url = "";
				this._applied_img_url = "";
				this._edgex = 0;
				this._edgey = 0;
				this._img_width = 0;
				this._img_height = 0;
				this._img_sizereq = false;
				this._image_cc_node = null;
				this._div_lt_node = null;
				this._div_rt_node = null;
				this._div_lb_node = null;
				this._div_rb_node = null;
				this._image_tt_node = null;
				this._image_rr_node = null;
				this._image_bb_node = null;
				this._image_ll_node = null;
				this._need_update_imagesize = false;
			};
			var __pEdgeImageElement = nexacro._createPrototype(nexacro.Element, nexacro._EdgeImageElement);
			nexacro._EdgeImageElement.prototype = __pEdgeImageElement;
			__pEdgeImageElement._type_name = "EdgeImageElement";
			__pEdgeImageElement._is_nc_element = true;

			__pEdgeImageElement.create = function (before_elem) {
				var _owner_elem = this._parent_elem;
				if (_owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					if (_doc) {
						var _handle = _doc.createElement("div");
						_handle.id = this._parent_elem._handle.id + this._type_name;

						nexacro.__setDOMNodeSelectable(_handle, false);

						this._applied_edge_type = 0;

						var width = this.width;
						var height = this.height;

						var handle_style = _handle.style;
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
						nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
						nexacro.__setDOMNodeStyleSize(handle_style, width, height);

						var image_cc = _doc.createElement("img");
						var node_style = image_cc.style;

						nexacro.__setDOMNodeAlt(image_cc, "");

						nexacro.__setDOMNodeStylePosLeftTop(node_style);
						nexacro.__setDOMNodeStyleUnitSize(node_style, "100%", "100%");

						_handle.appendChild(image_cc);
						this._image_cc_node = image_cc;

						if (!this._img_sizereq) {
							if (this._img_width > 0 && this._img_height > 0) {
								this._updateImgSize(_handle, this._edge_type, width, height, this._img_url, this._img_width, this._img_height, this._edgex, this._edgey);
							}
							else if (this._img_url) {
								var imgsize = nexacro._getImageSize(this._img_url, this._on_notify_imgsize, this);
								this._img_sizereq = true;
								if (imgsize) {
									this._img_width = imgsize.width;
									this._img_height = imgsize.height;
									this._updateImgSize(_handle, this._edge_type, width, height, this._img_url, imgsize.width, imgsize.height, this._edgex, this._edgey);
								}
							}
						}

						if (this.mirror) {
							nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
						}

						this._handle = this._dest_handle = _handle;
						if (before_elem) {
							nexacro.__insertDOMNode(_owner_elem._dest_handle, _handle, before_elem._handle);
						}
						else {
							nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
						}
					}
				}
			};

			__pEdgeImageElement.destroy = function () {
				var _handle = this._handle;
				if (_handle) {
					var _doc = this.getRootWindowHandle();
					if (_doc && _handle == _doc.activeElement) {
						nexacro.__setDOMNodeFocus(this._owner_elem._dest_handle);
					}
					_handle._linked_element = null;
					if (this._owner_elem && this._owner_elem._dest_handle) {
						nexacro.__removeDOMNode(this._owner_elem._dest_handle, _handle);
					}
					this._owner_elem = null;
					this._handle = this._dest_handle = null;

					this._div_lt_node = null;
					this._div_rt_node = null;
					this._div_lb_node = null;
					this._div_rb_node = null;
					this._image_tt_node = null;
					this._image_rr_node = null;
					this._image_bb_node = null;
					this._image_ll_node = null;
					this._image_cc_node = null;
				}
				this.parent = null;
				this._parent_elem = null;
			};

			__pEdgeImageElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
						if (this._img_width > 0 && this._img_height > 0) {
							this._updateLayout(_handle, this._edge_type, width, height, this._img_width, this._img_height, this._edgex, this._edgey);
						}
						else {
							this._updateLayout(_handle, 0, width, height, this._img_width, this._img_height, this._edgex, this._edgey);
						}
					}
				}
			};

			__pEdgeImageElement._updateURL = function (_hanlde, edge_type, url) {
				if (edge_type == 3) {
					var url2 = "url(\"" + url + "\")";
					this._div_lt_node.style.backgroundImage = url2;
					this._div_rt_node.style.backgroundImage = url2;
					this._div_lb_node.style.backgroundImage = url2;
					this._div_rb_node.style.backgroundImage = url2;
				}

				if (edge_type == 1 || edge_type == 3) {
					this._image_ll_node.src = url;
					this._image_rr_node.src = url;
				}
				if (edge_type == 2 || edge_type == 3) {
					this._image_tt_node.src = url;
					this._image_bb_node.src = url;
				}

				if (this._image_cc_node) {
					this._image_cc_node.src = url;
				}

				this._applied_img_src = url;
			};

			__pEdgeImageElement.setElementInfo = function (url, edgex, edgey) {
				var url_change = false;
				var layout_change = false;
				var edge_type = 0;

				if (edgex < 0) {
					edgex = 0;
				}
				if (edgey < 0) {
					edgey = 0;
				}

				if (edgex > 0 && edgey > 0) {
					edge_type = 3;
				}
				else if (edgey > 0) {
					edge_type = 2;
				}
				else if (edgex > 0) {
					edge_type = 1;
				}

				if (this._img_url != url) {
					this._img_url = url;
					url_change = true;
				}

				if (this._edge_type != edge_type || this._edgex != edgex || this._edgey != edgey) {
					this._edge_type = edge_type;
					this._edgex = edgex;
					this._edgey = edgey;
					layout_change = true;
				}

				var _handle = this._handle;
				if (_handle) {
					var width = this.width;
					var height = this.height;

					if (url_change) {
						var imgsize = nexacro._getImageSize(this._img_url, this._on_notify_imgsize, this);
						this._img_sizereq = true;
						if (imgsize) {
							this._img_sizereq = false;
							if (this._img_width != imgsize.width || this._img_height != imgsize.height) {
								this._img_width = imgsize.width;
								this._img_height = imgsize.height;
								this._updateLayout(_handle, edge_type, width, height, imgsize.width, imgsize.height, this._edgex, this._edgey);
								this._updateURL(_handle, edge_type, url);
							}
							else {
								this._updateURL(_handle, edge_type, url);
							}
						}
						else {
							this._img_sizereq = true;
							this._img_width = 0;
							this._img_height = 0;
							this._updateLayout(_handle, edge_type, width, height, 0, 0, 0, 0);
						}
					}
					else if (layout_change) {
						if (this._img_width > 0 && this._img_height > 0) {
							this._updateLayout(_handle, edge_type, width, height, this._img_width, this._img_height, this._edgex, this._edgey);
							this._updateURL(_handle, edge_type, this._img_url);
						}
					}
				}
				else if (url_change) {
					var imgsize = nexacro._getImageSize(this._img_url, this._on_notify_imgsize, this);
					this._img_sizereq = true;
					if (imgsize) {
						this._img_sizereq = false;
						this._img_width = imgsize.width;
						this._img_height = imgsize.height;
					}
				}
			};

			if (nexacro.BrowserVersion <= 7) {
				nexacro._makeImageClipInfo = function (top, right, bottom, left) {
					return "rect(" + top + " " + right + " " + bottom + " " + left + ")";
				};
			}
			else {
				nexacro._makeImageClipInfo = function (top, right, bottom, left) {
					return "rect(" + top + "px," + right + "px," + bottom + "px," + left + "px)";
				};
			}

			__pEdgeImageElement._createLeftRight = function (_doc, _handle, img_width, height, img_offset_y, edgex, edgey) {
				var _top = (-img_offset_y);
				var _height = height + img_offset_y + img_offset_y;
				var _clip_top = edgey + img_offset_y;
				var _clip_bottom = height - edgey + img_offset_y;

				var image_ll = _doc.createElement("img");
				node_style = image_ll.style;

				nexacro.__setDOMNodeAlt(image_ll, "");
				nexacro.__setDOMNodeStyleAbsolute(node_style);
				nexacro.__setDOMNodeStylePos(node_style, 0, _top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(node_style, img_width, _height);
				node_style.clip = nexacro._makeImageClipInfo(_clip_top, edgex, _clip_bottom, 0);
				_handle.appendChild(image_ll);

				var image_rr = _doc.createElement("img");
				node_style = image_rr.style;

				nexacro.__setDOMNodeAlt(image_rr, "");
				nexacro.__setDOMNodeStyleAbsolute(image_rr.style);
				node_style.right = "0px";
				node_style.top = _top + "px";
				nexacro.__setDOMNodeStyleSize(node_style, img_width, _height);
				node_style.clip = nexacro._makeImageClipInfo(_clip_top, img_width, _clip_bottom, -edgex + img_width);
				_handle.appendChild(image_rr);

				this._image_rr_node = image_rr;
				this._image_ll_node = image_ll;
			};

			__pEdgeImageElement._updateLeftRight = function (img_width, height, img_offset_y, edgex, edgey) {
				var _top = (-img_offset_y);
				var _height = height + img_offset_y + img_offset_y;
				var _clip_top = edgey + img_offset_y;
				var _clip_bottom = height - edgey + img_offset_y;

				var node_style = this._image_ll_node.style;
				node_style.top = _top + "px";
				nexacro.__setDOMNodeStyleSize(node_style, img_width, _height);
				node_style.clip = nexacro._makeImageClipInfo(_clip_top, edgex, _clip_bottom, 0);

				var node_style = this._image_rr_node.style;
				node_style.top = _top + "px";
				nexacro.__setDOMNodeStyleSize(node_style, img_width, _height);
				node_style.clip = nexacro._makeImageClipInfo(_clip_top, img_width, _clip_bottom, -edgex + img_width);
			};
			__pEdgeImageElement._destroyLeftRight = function (_handle) {
				if (this._image_ll_node) {
					nexacro.__removeDOMNode(_handle, this._image_ll_node);
				}
				if (this._image_rr_node) {
					nexacro.__removeDOMNode(_handle, this._image_rr_node);
				}
				this._image_ll_node = null;
				this._image_rr_node = null;
			};


			__pEdgeImageElement._createTopBottom = function (_doc, _handle, img_height, width, img_offset_x, edgex, edgey) {
				var _left = (-img_offset_x);
				var _width = width + img_offset_x + img_offset_x;
				var _clip_left = edgex + img_offset_x;
				var _clip_right = width - edgex + img_offset_x;

				var image_tt = _doc.createElement("img");
				var node_style = image_tt.style;

				nexacro.__setDOMNodeAlt(image_tt, "");

				nexacro.__setDOMNodeStyleAbsolute(node_style);
				nexacro.__setDOMNodeStylePos(node_style, _left, 0, this._isRtl());
				nexacro.__setDOMNodeStyleSize(node_style, _width, img_height);
				node_style.clip = nexacro._makeImageClipInfo(0, _clip_right, edgey, _clip_left);
				_handle.appendChild(image_tt);

				var image_bb = _doc.createElement("img");
				var node_style = image_bb.style;

				nexacro.__setDOMNodeAlt(image_bb, "");

				nexacro.__setDOMNodeStyleAbsolute(image_bb.style);
				node_style.left = _left + "px";
				node_style.bottom = "0px";
				nexacro.__setDOMNodeStyleSize(node_style, _width, img_height);
				node_style.clip = nexacro._makeImageClipInfo(-edgey + img_height, _clip_right, img_height, _clip_left);
				_handle.appendChild(image_bb);

				this._image_tt_node = image_tt;
				this._image_bb_node = image_bb;
			};

			__pEdgeImageElement._updateTopBottom = function (img_height, width, img_offset_x, edgex, edgey) {
				var _left = (-img_offset_x);
				var _width = width + img_offset_x + img_offset_x;
				var _clip_left = edgex + img_offset_x;
				var _clip_right = width - edgex + img_offset_x;

				var node_style = this._image_tt_node.style;
				node_style.left = _left + "px";
				nexacro.__setDOMNodeStyleSize(node_style, _width, img_height);
				node_style.clip = nexacro._makeImageClipInfo(0, _clip_right, edgey, _clip_left);

				var node_style = this._image_bb_node.style;
				node_style.left = _left + "px";
				nexacro.__setDOMNodeStyleSize(node_style, _width, img_height);
				node_style.clip = nexacro._makeImageClipInfo(-edgey + img_height, _clip_right, img_height, _clip_left);
			};

			__pEdgeImageElement._destroyTopBottom = function (_handle) {
				if (this._image_tt_node) {
					nexacro.__removeDOMNode(_handle, this._image_tt_node);
				}
				if (this._image_bb_node) {
					nexacro.__removeDOMNode(_handle, this._image_bb_node);
				}
				this._image_tt_node = null;
				this._image_bb_node = null;
			};

			__pEdgeImageElement._createCorners = function (_doc, _handle, edgex, edgey) {
				var div_lt = _doc.createElement("div");
				var node_style = div_lt.style;

				nexacro.__setDOMNodeStylePosLeftTop(node_style);
				nexacro.__setDOMNodeStyleSize(node_style, edgex, edgey);
				node_style.backgroundPosition = "left top";
				node_style.fontSize = "1px";
				_handle.appendChild(div_lt);

				var div_rt = _doc.createElement("div");
				node_style = div_rt.style;

				nexacro.__setDOMNodeStylePosRightTop(node_style);
				nexacro.__setDOMNodeStyleSize(node_style, edgex, edgey);
				node_style.fontSize = "1px";
				node_style.backgroundPosition = "right top";
				_handle.appendChild(div_rt);

				var div_lb = _doc.createElement("div");
				node_style = div_lb.style;

				nexacro.__setDOMNodeStylePosLeftBottom(node_style);
				nexacro.__setDOMNodeStyleSize(node_style, edgex, edgey);
				node_style.backgroundPosition = "left bottom";
				node_style.fontSize = "1px";
				_handle.appendChild(div_lb);

				var div_rb = _doc.createElement("div");
				node_style = div_rb.style;

				nexacro.__setDOMNodeStylePosRightBottom(node_style);
				nexacro.__setDOMNodeStyleSize(node_style, edgex, edgey);
				node_style.backgroundPosition = "right bottom";
				node_style.fontSize = "1px";
				_handle.appendChild(div_rb);

				this._div_lt_node = div_lt;
				this._div_rt_node = div_rt;
				this._div_lb_node = div_lb;
				this._div_rb_node = div_rb;
			};

			__pEdgeImageElement._updateCorners = function (edgex, edgey) {
				nexacro.__setDOMNodeStyleSize(this._div_lt_node.style, edgex, edgey);
				nexacro.__setDOMNodeStyleSize(this._div_rt_node.style, edgex, edgey);
				nexacro.__setDOMNodeStyleSize(this._div_lb_node.style, edgex, edgey);
				nexacro.__setDOMNodeStyleSize(this._div_rb_node.style, edgex, edgey);
			};

			__pEdgeImageElement._destroyCorners = function (_handle) {
				if (this._div_lt_node) {
					nexacro.__removeDOMNode(_handle, this._div_lt_node);
				}
				if (this._div_rt_node) {
					nexacro.__removeDOMNode(_handle, this._div_rt_node);
				}
				if (this._div_lb_node) {
					nexacro.__removeDOMNode(_handle, this._div_lb_node);
				}
				if (this._div_rb_node) {
					nexacro.__removeDOMNode(_handle, this._div_rb_node);
				}
				this._div_lt_node = null;
				this._div_rt_node = null;
				this._div_lb_node = null;
				this._div_rb_node = null;
			};

			__pEdgeImageElement._updateLayout = function (_handle, edge_type, width, height, img_width, img_height, edgex, edgey) {
				var _doc = this.getRootWindowHandle();
				var old_type = this._applied_edge_type;

				if (_handle) {
					if (edgex > img_width) {
						edgex = img_width;
					}
					if (edgey > img_height) {
						edgey = img_height;
					}
					var test_img_offset_x = img_width - edgex - edgex;
					var test_img_offset_y = img_height - edgey - edgey;
					var img_offset_x = 0;
					var img_offset_y = 0;

					var half_width = img_width / 2;
					var half_height = img_height / 2;

					if (edgex > half_width) {
						if (test_img_offset_x < 0) {
							test_img_offset_x = test_img_offset_x * -1;
						}
						img_offset_x = Math.round(edgex * ((width - edgex - edgex) / (test_img_offset_x)) - width + edgex);
					}
					else {
						if (test_img_offset_x == 0) {
							img_offset_x = Math.round(edgex * ((width - edgex - edgex + 1) / (img_width - edgex - edgex + 1)) - edgex);
						}
						else {
							img_offset_x = Math.round(edgex * ((width - edgex - edgex) / (img_width - edgex - edgex)) - edgex);
						}
					}

					if (edgey > half_height) {
						if (test_img_offset_y < 0) {
							test_img_offset_y = test_img_offset_y * -1;
						}
						img_offset_y = Math.round(edgey * ((height - edgey - edgey) / (test_img_offset_y)) - height + edgey);
					}
					else {
						if (test_img_offset_y == 0) {
							img_offset_y = Math.round(edgey * ((height - edgey - edgey + 1) / (img_height - edgey - edgey + 1)) - edgey);
						}
						else {
							img_offset_y = Math.round(edgey * ((height - edgey - edgey) / (img_height - edgey - edgey)) - edgey);
						}
					}

					if (edge_type == 0) {
						if (old_type == 1) {
							this._destroyLeftRight(_handle);
						}
						else if (old_type == 2) {
							this._destroyTopBottom(_handle);
						}
						else if (old_type == 3) {
							this._destroyLeftRight(_handle);
							this._destroyTopBottom(_handle);
							this._destroyCorners(_handle);
						}

						var node_style = this._image_cc_node.style;
						nexacro.__setDOMNodeStylePosLeftTop(node_style);
						nexacro.__setDOMNodeStyleUnitSize(node_style, "100%", "100%");
					}
					else if (edge_type == 1) {
						if (old_type == 1) {
							this._updateLeftRight(img_width, height, img_offset_y, edgex, edgey);
						}
						else if (old_type == 2) {
							this._destroyTopBottom(_handle);
							this._createLeftRight(_doc, _handle, img_width, height, img_offset_y, edgex, edgey);
						}
						else if (old_type == 3) {
							this._destroyTopBottom(_handle);
							this._destroyCorners(_handle);
							this._updateLeftRight(img_width, height, img_offset_y, edgex, edgey);
						}
						else {
							this._createLeftRight(_doc, _handle, img_width, height, img_offset_y, edgex, edgey);
						}
					}
					else if (edge_type == 2) {
						if (old_type == 1) {
							this._destroyLeftRight(_handle);
							this._createTopBottom(_doc, _handle, img_height, width, img_offset_x, edgex, edgey);
						}
						else if (old_type == 2) {
							this._updateTopBottom(img_height, width, img_offset_x, edgex, edgey);
						}
						else if (old_type == 3) {
							this._destroyLeftRight(_handle);
							this._destroyCorners(_handle);
							this._updateTopBottom(img_height, width, img_offset_x, edgex, edgey);
						}
						else {
							this._createTopBottom(_doc, _handle, img_height, width, img_offset_x, edgex, edgey);
						}
					}
					else {
						if (old_type == 0) {
							this._createCorners(_doc, _handle, edgex, edgey);
							this._createLeftRight(_doc, _handle, img_width, height, img_offset_y, edgex, edgey);
							this._createTopBottom(_doc, _handle, img_height, width, img_offset_x, edgex, edgey);
						}
						if (old_type == 1) {
							this._createCorners(_doc, _handle, edgex, edgey);
							this._updateLeftRight(img_width, height, img_offset_y, edgex, edgey);
							this._createTopBottom(_doc, _handle, img_height, width, img_offset_x, edgex, edgey);
						}
						else if (old_type == 2) {
							this._createCorners(_doc, _handle, edgex, edgey);
							this._createLeftRight(_doc, _handle, img_width, height, img_offset_y, edgex, edgey);
							this._updateTopBottom(img_height, width, img_offset_x, edgex, edgey);
						}
						else {
							this._updateCorners(edgex, edgey);
							this._updateLeftRight(img_width, height, img_offset_y, edgex, edgey);
							this._updateTopBottom(img_height, width, img_offset_x, edgex, edgey);
						}
					}

					if (edge_type != 0) {
						node_style = this._image_cc_node.style;
						nexacro.__setDOMNodeStylePos(node_style, (-img_offset_x), (-img_offset_y), this._isRtl());
						nexacro.__setDOMNodeStyleSize(node_style, (width + img_offset_x + img_offset_x), (height + img_offset_y + img_offset_y));
						node_style.clip = nexacro._makeImageClipInfo(edgey + img_offset_y, width - edgex + img_offset_x, height - edgey + img_offset_y, edgex + img_offset_x);
					}
					this._applied_edge_type = edge_type;
				}
			};
			__pEdgeImageElement._updateImgSize = function (_handle, edge_type, width, height, img_url, img_width, img_height, edgex, edgey) {
				if (_handle) {
					var layout_change = false, url_change = false;
					if (this._applied_edge_type != edge_type) {
						layout_change = true;
						url_change = true;
					}
					else if (this._applied_img_url != img_url) {
						url_change = true;
					}

					if (layout_change || url_change) {
						this._updateLayout(_handle, edge_type, width, height, img_width, img_height, edgex, edgey);
						this._updateURL(_handle, edge_type, img_url);
					}
				}
			};

			__pEdgeImageElement._on_notify_imgsize = function (img_url, img_width, img_height) {
				if (!(img_width && img_height)) {
					return;
				}
				if (img_url != this._img_url) {
					return;
				}

				var _handle = this._handle;
				var edge_type = this._edge_type;

				this._img_sizereq = false;
				this._img_width = img_width;
				this._img_height = img_height;

				if (_handle && edge_type) {
					this._updateImgSize(_handle, edge_type, this.width, this.height, img_url, img_width, img_height, this._edgex, this._edgey);
				}
			};

			__pEdgeImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
				var v = this.mirror;

				if (rtlimagemirroring) {
					v = nexacro._toBoolean(rtlimagemirroring._value);
				}

				if (this.mirror != v || bChangeRtlDirection) {
					this.mirror = v;

					var handle = this._handle;
					if (handle) {
						nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
					}
				}
			};

			delete __pEdgeImageElement;
		}
		else if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 10)) {
			nexacro._EdgeImageElement = function (parent_elem) {
				this.parent = parent_elem;
				this._parent_elem = parent_elem;

				__pEdgeImageElement._node_width = 0;
				__pEdgeImageElement._node_height = 0;
				__pEdgeImageElement._edgex = 0;
				__pEdgeImageElement._edgey = 0;
				__pEdgeImageElement._img_url = "";
			};
			var __pEdgeImageElement = nexacro._createPrototype(nexacro.Element, nexacro._EdgeImageElement);
			nexacro._EdgeImageElement.prototype = __pEdgeImageElement;
			__pEdgeImageElement._type_name = "_EdgeImageElement";
			__pEdgeImageElement._is_nc_element = true;


			__pEdgeImageElement.create = function (before_elem) {
				var _owner_elem = this._parent_elem;
				if (_owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					if (_doc) {
						var _handle = _doc.createElement("div");
						_handle.id = this._parent_elem._handle.id + this._type_name;

						nexacro.__setDOMNodeSelectable(_handle, false);

						var handle_style = _handle.style;
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
						nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
						nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

						if (this._img_url) {
							if (nexacro.Browser == "Gecko" || nexacro.Browser == "IE") {
								handle_style.borderColor = "transparent";
							}

							nexacro.__setDOMNodeStyleEdgeBorder(handle_style, this._img_url, this._edgex, this._edgey);
						}

						if (this.mirror) {
							nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
						}

						this._handle = this._dest_handle = _handle;
						if (before_elem) {
							nexacro.__insertDOMNode(_owner_elem._dest_handle, _handle, before_elem._handle);
						}
						else {
							nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
						}
					}
				}
			};

			__pEdgeImageElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var handle_width = (width - this._edgex - this._edgex);
					var handle_height = (height - this._edgey - this._edgey);
					if (this._node_width != handle_width || this._node_height != handle_height) {
						this._node_width = (handle_width < 0) ? 0 : handle_width;
						this._node_height = (handle_height < 0) ? 0 : handle_height;
						var _handle = this._handle;
						if (_handle) {
							var handle_style = _handle.style;
							nexacro.__setDOMNodeStyleSize(handle_style, handle_width, handle_height);
							nexacro.__setDOMNodeStyleEdgeBorder(handle_style, this._img_url, this._edgex, this._edgey);
						}
					}
				}
			};

			__pEdgeImageElement.setElementInfo = function (url, edgex, edgey) {
				if (this._img_url != url || this._edgex != edgex || this._edgey != edgey) {
					this._img_url = url;
					var _handle = this._handle;

					var handle_width = this.width - edgex - edgex;
					var handle_height = this.height - edgey - edgey;
					this._edgex = edgex;
					this._edgey = edgey;
					if (this._node_width != handle_width || this._node_height != handle_height) {
						this._node_width = (handle_width < 0) ? 0 : handle_width;
						this._node_height = (handle_height < 0) ? 0 : handle_height;
						var _handle = this._handle;
						if (_handle) {
							var handle_style = _handle.style;
							nexacro.__setDOMNodeStyleSize(handle_style, handle_width, handle_height);
							nexacro.__setDOMNodeStyleEdgeBorder(handle_style, this._img_url, edgex, edgey);
						}
					}
					else if (_handle) {
						nexacro.__setDOMNodeStyleEdgeBorder(this._handle.style, this._img_url, edgex, edgey);
					}
				}
			};

			__pEdgeImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
				var v = this.mirror;

				if (rtlimagemirroring) {
					v = nexacro._toBoolean(rtlimagemirroring._value);
				}

				if (this.mirror != v || bChangeRtlDirection) {
					this.mirror = v;

					var handle = this._handle;
					if (handle) {
						nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
					}
				}
			};

			delete __pEdgeImageElement;
		}


		nexacro.TextBoxElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pTextBoxElement = nexacro._createPrototype(nexacro.Element, nexacro.TextBoxElement);
		nexacro.TextBoxElement.prototype = _pTextBoxElement;

		_pTextBoxElement._type_name = "TextBoxElement";

		_pTextBoxElement.font = null;
		_pTextBoxElement.color = null;
		_pTextBoxElement.cursor = null;
		_pTextBoxElement.align = null;
		_pTextBoxElement.halign = "left";
		_pTextBoxElement.valign = "top";
		_pTextBoxElement.padding = null;
		_pTextBoxElement.padding_left = 0;
		_pTextBoxElement.padding_top = 0;
		_pTextBoxElement.padding_right = 0;
		_pTextBoxElement.padding_bottom = 0;
		_pTextBoxElement.text = "";
		_pTextBoxElement.linespace = 0;
		_pTextBoxElement.wordwrap = "none";
		_pTextBoxElement.decoration = "";
		_pTextBoxElement._cell_node = null;

		_pTextBoxElement._use_newline = true;
		_pTextBoxElement._default_textoverflow = "ellipsis";

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 7) {
			_pTextBoxElement._createTextElementHandle = function (_doc, left, top, width, height) {
				var _handle = _doc.createElement("table");
				var handle_style = _handle.style;

				_handle.cellSpacing = 0;
				_handle.cellPadding = 0;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, width, height);
				nexacro.__setTextDOMNodeStyleAlignXY(handle_style, this.halign, this.valign);

				var _tbody_node = _doc.createElement("tbody");
				var _tr_node = _doc.createElement("tr");
				var _cell_node = _doc.createElement("td");
				_cell_node.style.whiteSpace = "pre";
				_handle.appendChild(_tbody_node);
				_tbody_node.appendChild(_tr_node);
				_tr_node.appendChild(_cell_node);

				nexacro.__setDOMNodeStyleSize(_cell_node.style, width, height);

				this._cell_node = _cell_node;
				return _handle;
			};

			_pTextBoxElement._destroyTextElementHandle = function () {
			};

			_pTextBoxElement._appendTextElementHandle = function () {
			};

			_pTextBoxElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var _handle = this._handle;
					var _cell_node = this._cell_node;

					if (_handle) {
						nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
						nexacro.__setDOMNodeStyleSize(_cell_node.style, width, height);
					}
				}
			};
		}
		else if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8)) {
			_pTextBoxElement._createTextElementHandle = function (_doc, left, top, width, height) {
				var _handle = _doc.createElement("div");
				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, width, height);


				var _cell_node = _doc.createElement("div");
				var cell_style = _cell_node.style;
				cell_style.display = "table-cell";
				cell_style.whiteSpace = "pre";
				cell_style.textOverflow = this._default_textoverflow;

				nexacro.__setDOMNodeStyleSize(cell_style, width, height);

				this._cell_node = _cell_node;
				return _handle;
			};

			_pTextBoxElement._appendTextElementHandle = function (_handle, cell_node) {
				nexacro.__appendDOMNode(_handle, cell_node);
			};

			_pTextBoxElement._destroyTextElementHandle = function () {
				nexacro.__removeDOMNode(this._handle, this._cell_node);
			};

			_pTextBoxElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
					}
					_handle = this._cell_node;
					if (_handle) {
						_handle.style.textOverflow = "";
						nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
						_handle.style.textOverflow = this._default_textoverflow;
					}
				}
			};
		}

		_pTextBoxElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = this._createTextElementHandle(_doc, this.left, this.top, this.width, this.height);
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 4;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var handle_style = _handle.style;
				var cell_node = this._cell_node;
				var cell_style = cell_node.style;

				var bRtl = this._isRtl();

				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}
				if (this.font) {
					nexacro.__setDOMNodeStyleFont(cell_style, this.font);
				}

				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(cell_style, this.letterspace);
				}

				if (this.color) {
					nexacro.__setDOMNodeStyleColor(cell_style, this.color);
				}

				if (this.align) {
					var _align = this.align._getStyleObject(bRtl);
					nexacro.__setDOMNodeStyleAlign(cell_style, _align);
				}
				else if (this.halign && this.valign) {
					var _halign = this.halign;
					if (bRtl) {
						_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
					}
					nexacro.__setDOMNodeStyleAlignXY(cell_style, _halign, this.valign);
				}

				if (this.padding) {
					var _padding = this.padding._getStyleObject(bRtl);

					nexacro.__setDOMNodeStylePadding(cell_style, _padding);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					if (bRtl) {
						nexacro.__setDOMNodeStylePaddingXY(cell_style, this.padding_right, this.padding_top, this.padding_left, this.padding_bottom);
					}
					else {
						nexacro.__setDOMNodeStylePaddingXY(cell_style, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
					}
				}

				if (this.linespace > 0) {
					nexacro.__setDOMNodeStyleLineSpace(cell_style, this.linespace);
				}


				if (this.wordwrap != "none") {
					nexacro.__setDOMNodeWordWrap(cell_node, this.wordwrap);
				}

				if (this.decoration) {
					nexacro.__setDOMNodeStyleDecorateText(cell_node, this.decoration);
				}
				else {
					nexacro.__setDOMNodeText(cell_node, this.text, this._use_newline, this.wordwrap);
				}

				this._handle = this._dest_handle = _handle;

				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				this._appendTextElementHandle(_handle, cell_node);
			}
		};

		_pTextBoxElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				if (this._cell_node) {
					this._destroyTextElementHandle();
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._cell_node = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pTextBoxElement.setParentElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		_pTextBoxElement.setElementFont = function (font) {
			this.font = font;
			var _cell_node = this._cell_node;
			if (_cell_node) {
				nexacro.__setDOMNodeStyleFont(_cell_node.style, font);
			}
		};

		_pTextBoxElement.setElementColor = function (color) {
			this.color = color;
			var _cell_node = this._cell_node;
			if (_cell_node) {
				nexacro.__setDOMNodeStyleColor(_cell_node.style, color);
			}
		};

		_pTextBoxElement.setElementAlign = function (align) {
			var _align = align ? align._getStyleObject(this._isRtl()) : null;

			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var _cell_node = this._cell_node;
			if (_cell_node) {
				_cell_node.style.textOverflow = "";
				nexacro.__setTextDOMNodeStyleAlign(_cell_node.style, _align);
				_cell_node.style.textOverflow = this._default_textoverflow;
			}
		};

		_pTextBoxElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;
			if (this._isRtl()) {
				_halign = halign == "left" ? "right" : (halign == "right" ? "left" : halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var _cell_node = this._cell_node;
			if (_cell_node) {
				_cell_node.style.textOverflow = "";
				nexacro.__setTextDOMNodeStyleAlignXY(_cell_node.style, _halign, valign);
				_cell_node.style.textOverflow = this._default_textoverflow;
			}
		};

		_pTextBoxElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			var _cell_node = this._cell_node;
			if (_cell_node) {
				nexacro.__setDOMNodeStylePadding(_cell_node.style, padding);
			}
		};


		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8) {
			_pTextBoxElement.setElementPaddingXY = function (left, top, right, bottom) {
				this.padding = null;
				this.padding_left = left;
				this.padding_top = top;
				this.padding_right = right;
				this.padding_bottom = bottom;
				var _cell_node = this._cell_node;
				if (_cell_node) {
					var size_width = this.width - left - right;
					var size_height = this.height - top - bottom;
					if (this._isRtl()) {
						nexacro.__setDOMNodeStylePaddingXY(_cell_node.style, right, top, left, bottom);
					}
					else {
						nexacro.__setDOMNodeStylePaddingXY(_cell_node.style, left, top, right, bottom);
					}

					nexacro.__setDOMNodeStyleSize(_cell_node.style, size_width, size_height);
				}
			};
		}
		else {
			_pTextBoxElement.setElementPaddingXY = function (left, top, right, bottom) {
				this.padding = null;
				this.padding_left = left;
				this.padding_top = top;
				this.padding_right = right;
				this.padding_bottom = bottom;
				var _cell_node = this._cell_node;
				if (_cell_node) {
					var size_width = this.width - left - right;
					var size_height = this.height - top - bottom;
					if (this._isRtl()) {
						nexacro.__setDOMNodeStylePaddingXY(_cell_node.style, right, top, left, bottom);
					}
					else {
						nexacro.__setDOMNodeStylePaddingXY(_cell_node.style, left, top, right, bottom);
					}

					nexacro.__setDOMNodeStyleSize(_cell_node.style, size_width, size_height);
				}
			};
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Safari") {
			_pTextBoxElement.setElementText = function (text) {
				if (this.text !== text) {
					if (text == null) {
						this.text = "";
					}
					else {
						this.text = text.replace(/\r\n|\r/g, "\n");
					}

					var _cell_node = this._cell_node;
					if (_cell_node) {
						nexacro.__setDOMNodeText(_cell_node, this.text, this._use_newline, this.wordwrap);
					}
				}
			};
		}
		else {
			_pTextBoxElement.setElementText = function (text) {
				if (this.text !== text) {
					if (text == null) {
						this.text = "";
					}
					else {
						this.text = text.replace(/\r\n|\r|\n/g, "\r\n");
					}

					var _cell_node = this._cell_node;
					if (_cell_node) {
						nexacro.__setDOMNodeText(_cell_node, this.text, this._use_newline, this.wordwrap);
					}
				}
			};
		}

		_pTextBoxElement.setElementLineSpace = function (linespace) {
			if (this.linespace != linespace) {
				this.linespace = linespace;
				var _cell_node = this._cell_node;
				if (_cell_node) {
					var comp = this._parent_elem.linkedcontrol;
					if (comp) {
						var font_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
						linespace = font_size[1] + nexacro._toInt(linespace);
					}
					nexacro.__setDOMNodeStyleLineSpace(_cell_node.style, linespace);
				}
			}
		};

		_pTextBoxElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _cell_node = this._cell_node;
				if (_cell_node) {
					nexacro.__setDOMNodeStyleLetterSpace(_cell_node.style, letterspace);
				}
			}
		};

		_pTextBoxElement.setElementDecorateText = function (text) {
			if (this.decoration != text) {
				this.decoration = text;
				var _cell_node = this._cell_node;
				if (_cell_node) {
					nexacro.__setDOMNodeStyleDecorateText(_cell_node, this.decoration);
				}
			}
		};

		_pTextBoxElement.setElementUseNewLine = function (use_newline) {
			if (this._use_newline != use_newline) {
				this._use_newline = use_newline;

				var _cell_node = this._cell_node;
				if (_cell_node) {
					if (this.wordwrap != "none") {
						return;
					}
					nexacro.__setDOMNodeText(cell_node, this.text, this._use_newline, this.wordwrap);
				}
			}
		};

		_pTextBoxElement.setElementWordWrap = function (wordwrap) {
			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			if (this.wordwrap != wordwrap) {
				this.wordwrap = wordwrap;
				var _cell_node = this._cell_node;
				if (_cell_node) {
					if (wordwrap != "none") {
						nexacro.__setDOMNodeWordWrap(_cell_node, wordwrap);
					}
					else if (this._use_newline) {
						nexacro.__setDOMNodeWordWrap(_cell_node, "none");
					}
					else {
						_cell_node.innerHTML = "";
						nexacro.__setDOMNodeWordWrap(_cell_node, "none");
					}

					if (this.decoration) {
						nexacro.__setDOMNodeStyleDecorateText(_cell_node, this.decoration);
					}
					else {
						nexacro.__setDOMNodeText(_cell_node, this.text, this._use_newline, this.wordwrap);
					}
				}
			}
		};

		_pTextBoxElement.setElementTextOverFlow = function () {
			var _cell_node = this._cell_node;
			if (_cell_node) {
				nexacro.__setDOMNodeStyleTextOverFlow(_cell_node.style);
			}
		};


		_pTextBoxElement._setElementAccessibilityRole = function () {
			if (this._handle) {
				nexacro.__setDOMNodeAccessibilityRole(this._handle, "option");
			}
		};

		_pTextBoxElement._setElementAccessibilityLabel = function () {
			if (this._parent_elem && this._handle) {
				var label = this._parent_elem._makeAccessibilityLabelbyReadtype();
				nexacro.__setDOMNodeAccessibilityLabel(this._handle, label);
			}
		};

		_pTextBoxElement._getElementDisplayText = function () {
			var _cell_node = this._cell_node;
			if (_cell_node) {
				return _cell_node.innerText;
			}
			return "";
		};

		_pTextBoxElement._setElementTextRtlDirection = nexacro._emptyFn;

		delete _pTextBoxElement;

		nexacro.ImageElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pImageElement = nexacro._createPrototype(nexacro.Element, nexacro.ImageElement);
		nexacro.ImageElement.prototype = _pImageElement;

		_pImageElement._type_name = "ImageElement";

		_pImageElement.imageurl = "";
		_pImageElement.image_width = 0;
		_pImageElement.image_height = 0;


		_pImageElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 5;

				if (application._is_waitCursor) {
					nexacro.__setDOMNodeSelectable(_handle, true);
				}
				else {
					nexacro.__setDOMNodeSelectable(_handle, false);
				}

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);


				var _image_handle = _doc.createElement("img");
				var _image_handle_style = _image_handle.style;
				if (nexacro.Browser != "Android") {
				}
				{

					nexacro.__setDOMNodeStyleAbsolute(_image_handle_style);
				}
				nexacro.__setDOMNodeStyleSize(_image_handle_style, this.width, this.height);

				if (application._is_waitCursor) {
					nexacro.__setDOMNodeSelectable(_image_handle, true);
				}
				else {
					nexacro.__setDOMNodeSelectable(_image_handle, false);
				}
				nexacro.__setDOMNodeAlt(_image_handle, this._parent_elem.accessibility_label ? this._parent_elem.accessibility_label : this._parent_elem.linkedcontrol.id);

				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}

				if (this.imageurl) {
					nexacro.__setImageDOMNodeImageUrl(_image_handle, this.imageurl);
				}

				if (this.mirror) {
					nexacro.__setDOMNodeStyleTransformMirror(_image_handle_style, this.mirror && this._isRtl());
				}

				this._handle = this._dest_handle = _handle;
				this._image_handle = _image_handle;

				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				nexacro.__appendDOMNode(_handle, _image_handle);
			}
		};

		_pImageElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				if (this._image_handle) {
					nexacro.__removeDOMNode(_handle, this._image_handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._image_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pImageElement.setElementImageUrl = function (url) {
			var elem = this;
			while (!elem.linkedcontrol) {
				elem = elem.parent;
			}
			var last_imgurl = elem.linkedcontrol._lastest_imgurl;
			var flag = true;
			if (last_imgurl != undefined) {
				flag = (last_imgurl == url);
			}

			if (this.imageurl != url && flag) {
				url = nexacro._getURIValue(url);
				if (this.imageurl == url) {
					return;
				}

				if (url && !nexacro._isAbsolutePath(url)) {
					var base_url = this._getElementBaseUrl();
					url = nexacro._getImageLocation(url, base_url);
					if (this.imageurl == url) {
						return;
					}
				}

				this.imageurl = url;

				var image_handle = this._image_handle;
				if (image_handle) {
					nexacro.__setImageDOMNodeImageUrl(image_handle, url);
				}
			}
		};

		_pImageElement.setElementImageBase64 = function (base64) {
			if (this.imageurl != base64) {
				var image_handle = this._image_handle;

				this.imageurl = base64;

				if (image_handle) {
					nexacro.__setImageDOMNodeImageUrl(image_handle, base64);
				}
			}
		};

		_pImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;
				if (!rtlimagemirroring && bChangeRtlDirection) {
					this.mirror = bChangeRtlDirection;
				}

				var handle = this._image_handle;
				if (handle) {
					nexacro.__setDOMNodeStyleTransformMirror(this._image_handle.style, this.mirror && this._isRtl());
				}
			}
		};

		_pImageElement.setElementPosition = function (left, top, bForce) {
			if (this.left != left || this.top != top || bForce) {
				this.left = left;
				this.top = top;
				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStylePos(handle.style, left, top, this._isRtl());
				}
			}
		};

		_pImageElement.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;
				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStyleSize(handle.style, width, height);
				}

				var image_handle = this._image_handle;
				if (image_handle) {
					nexacro.__setDOMNodeStyleSize(image_handle.style, width, height);
				}
			}
		};

		_pImageElement.setElementHandleImageObject = nexacro._emptyFn;
		_pImageElement.getImageCount = nexacro._emptyFn;
		_pImageElement.setImageIndex = nexacro._emptyFn;

		delete _pImageElement;

		nexacro.AlignImageElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pAlignImageElement = nexacro._createPrototype(nexacro.Element, nexacro.AlignImageElement);
		nexacro.AlignImageElement.prototype = _pAlignImageElement;


		_pAlignImageElement._type_name = "AlignImageElement";

		_pAlignImageElement.align = null;
		_pAlignImageElement.halign = "";
		_pAlignImageElement.valign = "";
		_pAlignImageElement.imageurl = "";
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 7) {
			_pAlignImageElement._image_width = 0;
			_pAlignImageElement._image_height = 0;
			_pAlignImageElement.create = function () {
				var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
				if (_owner_elem && _owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("img");
					_handle.id = this._parent_elem._handle.id + this._type_name;
					_handle._linked_element = this;
					_handle._element_type = 5;

					nexacro.__setDOMNodeSelectable(_handle, false);
					nexacro.__setDOMNodeAlt(_handle, "");

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

					if (!this.visible) {
						nexacro.__setDOMNodeStyleVisible(handle_style, false);
					}

					if (this.imageurl) {
						nexacro.__setImageDOMNodeImageUrl(_handle, this.imageurl);
					}

					if (this.align) {
						var align = this.align;
						nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
					}
					else if (this.halign && this.valign) {
						this._setElementAlignXY(_handle);
					}

					if (this.mirror) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
					}


					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				}
			};

			_pAlignImageElement.setElementAlign = function (align) {
				this.align = align;
				this.halign = align._halign;
				this.valign = align._valign;
				var _handle = this._handle;
				if (_handle) {
					this._setElementAlignXY(_handle);
				}
			};

			_pAlignImageElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					if (this._handle) {
						this.setElementAlignXY(this.halign, this.valign);
					}
				}
			};

			_pAlignImageElement.setElementAlignXY = function (halign, valign) {
				this.align = null;
				this.halign = halign;
				this.valign = valign;
				var _handle = this._handle;
				if (_handle) {
					this._setElementAlignXY(_handle);
				}
			};

			_pAlignImageElement._setElementAlignXY = function (_handle) {
				var imgw = 0, imgh = 0, imgpos_x = 0, imgpos_y = 0;
				if (this.width > 0) {
					imgw = this.imageurl ? this._image_width : this.width;

					var _halign = this.halign;

					if (this._isRtl()) {
						_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
					}

					switch (_halign) {
						case "left":
							imgpos_x = 0;
							break;
						case "right":
							imgpos_x = this.width - imgw;
							break;
						default:
							imgpos_x = ((this.width - imgw) / 2) | 0;
							break;
					}
				}
				if (this.height > 0) {
					imgh = this.imageurl ? this._image_height : this.height;
					switch (this.valign) {
						case "top":
							imgpos_y = 0;
							break;
						case "bottom":
							imgpos_y = this.height - imgh;
							break;
						default:
							imgpos_y = ((this.height - imgh) / 2) | 0;
							break;
					}
				}

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStylePos(handle_style, imgpos_x, imgpos_y, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, imgw, imgh);
			};

			_pAlignImageElement.setElementImageUrl = function (url) {
				if (this.imageurl != url) {
					url = nexacro._getURIValue(url);
					if (this.imageurl == url) {
						return;
					}

					if (url && !nexacro._isAbsolutePath(url)) {
						var base_url = this._parent_elem._getElementBaseUrl();
						url = nexacro._getImageLocation(url, base_url);
						if (this.imageurl == url) {
							return;
						}
					}
					this.imageurl = url;

					var imagesize = nexacro._getImageSize(url, this._on_loadImg, this);
					if (imagesize) {
						this._image_width = imagesize.width;
						this._image_height = imagesize.height;
						var _handle = this._handle;
						if (_handle) {
							nexacro.__setImageDOMNodeImageUrl(_handle, url);
							this.setElementAlignXY(this.halign, this.valign);
						}
					}
				}
			};

			_pAlignImageElement._on_loadImg = function (imgurl, w, h) {
				var _handle = this._handle;
				this._image_width = w;
				this._image_height = h;
				if (_handle && this.imageurl == imgurl) {
					nexacro.__setImageDOMNodeImageUrl(_handle, imgurl);
					this.setElementAlignXY(this.halign, this.valign);
				}
			};
		}
		else {
			_pAlignImageElement.create = function () {
				var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
				if (_owner_elem && _owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("div");
					_handle.id = this._parent_elem._handle.id + this._type_name;
					_handle._linked_element = this;
					_handle._element_type = 6;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					handle_style.position = "absolute";
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);
					handle_style.backgroundRepeat = "no-repeat";

					if (!this.visible) {
						nexacro.__setDOMNodeStyleVisible(handle_style, false);
					}

					if (this.align) {
						nexacro.__setBKImageDOMNodeStyleAlign(handle_style, this.align);
					}
					else if (this.halign && this.valign) {
						nexacro.__setBKImageDOMNodeStyleAlignXY(handle_style, this.halign, this.valign);
					}

					if (this.imageurl) {
						nexacro.__setBKImageDOMNodeStyleImageUrl(handle_style, this.imageurl);
					}

					if (this._owner_elem.mirror) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this._owner_elem.mirror && this._isRtl());
					}

					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				}
			};

			_pAlignImageElement.setElementAlign = function (align) {
				this.align = align;
				this.halign = align._halign;
				this.valign = align._valign;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setBKImageDOMNodeStyleAlign(_handle.style, align);
				}
			};
			_pAlignImageElement.setElementAlignXY = function (halign, valign) {
				var _halign = halign;

				if (this._isRtl()) {
					_halign = halign == "left" ? "right" : (halign == "right" ? "left" : halign);
				}

				this.align = null;
				this.halign = halign;
				this.valign = valign;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setBKImageDOMNodeStyleAlignXY(_handle.style, _halign, valign);
				}
			};

			_pAlignImageElement.setElementImageUrl = function (url) {
				if (this.imageurl != url) {
					url = nexacro._getURIValue(url);
					if (this.imageurl == url) {
						return;
					}

					if (url && !nexacro._isAbsolutePath(url)) {
						var base_url = this._parent_elem._getElementBaseUrl();
						url = nexacro._getImageLocation(url, base_url);
						if (this.imageurl == url) {
							return;
						}
					}

					this.imageurl = url;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setBKImageDOMNodeStyleImageUrl(_handle.style, url);
					}
				}
			};
		}

		_pAlignImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;
				if (!this.mirror && bChangeRtlDirection) {
					this.mirror = bChangeRtlDirection;
				}

				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStyleTransformMirror(handle.style, this.mirror && this._isRtl());
				}
			}
		};

		delete _pAlignImageElement;

		nexacro.InputElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pInputElement = nexacro._createPrototype(nexacro.Element, nexacro.InputElement);
		nexacro.InputElement.prototype = _pInputElement;

		_pInputElement._type_name = "InputElement";

		_pInputElement.enable = true;
		_pInputElement.tabindex = -1;
		_pInputElement.font = null;
		_pInputElement.color = null;
		_pInputElement.cursor = null;
		_pInputElement.align = null;
		_pInputElement.halign = "";
		_pInputElement.valign = "";
		_pInputElement.padding = null;
		_pInputElement.padding_left = 0;
		_pInputElement.padding_top = 0;
		_pInputElement.padding_right = 0;
		_pInputElement.padding_bottom = 0;
		_pInputElement.useime = "global";
		_pInputElement.imemode = "auto";
		_pInputElement.readonly = false;
		_pInputElement.maxlength = -1;
		_pInputElement.password = false;
		_pInputElement.text = "";
		_pInputElement.value = "";
		_pInputElement.displaynulltext = "";
		_pInputElement.color = null;
		_pInputElement.caretcolor = null;
		_pInputElement.selectcolor = null;
		_pInputElement.selectbackground = null;
		_pInputElement.compositecolor = null;
		_pInputElement.tabindentsize = 4;
		_pInputElement.usesoftkeyboard = true;
		_pInputElement.usemultiline = false;
		_pInputElement.linespace = 0;
		_pInputElement.wordwrap = "none";
		_pInputElement.type = "normal";
		_pInputElement._keypad_type = "text";
		_pInputElement._orgtype = "text";
		_pInputElement._tap_blocked = false;
		_pInputElement._is_longpressed = false;
		_pInputElement._is_ios_composition = false;
		_pInputElement._is_ios_composition_returned = false;

		_pInputElement._handle = null;
		_pInputElement._input_handle = null;
		_pInputElement._display_elem = null;

		_pInputElement._type = "text";

		_pInputElement._prev_x = 0;

		_pInputElement._is_focused = false;
		_pInputElement._is_focusing = false;
		_pInputElement._blur_bloked = false;

		_pInputElement._accept_keyinput = false;
		_pInputElement._accept_blur_by_altkey = false;
		_pInputElement._is_mousedown = false;
		_pInputElement._is_input_touchstart = false;
		_pInputElement._isUseDelCaret = false;

		_pInputElement.setInputElementCompositeClear = nexacro._emptyFn;
		_pInputElement._setElementInputRtlDirection = nexacro._emptyFn;
		_pInputElement._isPreventDefault = function (comp, evtname) {
			comp = comp._getFromComponent(comp);
			return (comp[evtname] && comp[evtname].defaultprevented);
		};

		_pInputElement._setElementInputRole = function () {
			var role = this._parent_elem.accessibility_role;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeAccessibilityRole(input_handle, role);
			}
		};

		_pInputElement._setElementInputLabel = function () {
			var label = this._parent_elem._makeAccessibilityLabelbyReadtype();
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeAccessibilityLabel(input_handle, label);
			}
		};


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
			_pInputElement._wantAccessibilityAdditionalLabel = function () {
				var role = this._parent_elem.accessibility_role;

				switch (role) {
					case "document":
					case "spinbutton":
						return false;
						break;
					default:
						return true;
						break;
				}
			};
		}
		else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			_pInputElement._wantAccessibilityAdditionalLabel = function () {
				return true;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			_pInputElement._createInputHandle = function () {
				var elem_handle = this._handle;
				if (elem_handle) {
					var align_style_text = "";
					if (this.halign && this.valign) {
						var txt_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
						align_style_text = nexacro.__getInputHTMLStyleAlignXY(this.halign, this.valign, this.height, txt_size[1]);
					}

					var input_attr_str = nexacro.__getHTMLAttrEnable(this.enable) + 
						nexacro.__getHTMLAttrReadOnly(this.readonly) + 
						nexacro.__getHTMLAttrTabIndex(this.tabindex) + 
						nexacro.__getHTMLAttrTabIndentSize(this.tabindentsize);
					var input_style_str = nexacro.__getHTMLStyleAbsoluteTransparent() + 
						nexacro.__getHTMLStylePos(0, 0) + 
						nexacro.__getHTMLStyleSize(this.width, this.height) + 
						"border:none;outline:none;" + 
						nexacro.__getHTMLStyleFont(this.font) + 
						nexacro.__getHTMLStyleColor(this.color) + 
						align_style_text + 
						nexacro.__getHTMLStyleCursor(this.cursor, "text") + 
						nexacro.__getHTMLStylemeMode(this.imemode) + 
						nexacro.__getHTMLStyleBoxSizing("border-box");

					var maxlength_str = "";
					if (this.password && this.maxlength > 0) {
						var maxlength_str = nexacro.__getHTMLAttrMaxLength(this.maxlength);
					}

					var type_str = " type='" + this._type + "'";
					var value_str = " value='" + (this.text ? nexacro._encodeXml(this.text) : "") + "'";
					var id_str = " id='" + this.parent._handle.id + "_input'";
					var html = "<input" + maxlength_str + type_str + id_str + input_attr_str + value_str + " style='" + input_style_str + "'/>";
					if (nexacro._enableaccessibility) {
						html += nexacro.__getDOMNodeAccessibilityStrLabelfor(this.parent._handle.id, (this.text ? nexacro._encodeXml(this.text) : ""));
					}

					elem_handle.innerHTML = html;
					var input_handle = elem_handle.firstChild;
					input_handle._linked_element = this;

					if (nexacro._enableaccessibility) {
						nexacro.__setDOMNodeAccessibilityLabelBy(input_handle, "accessibility_notify_0");
						nexacro.__setDOMNodeAccessibilityRole(input_handle, this._parent_elem.accessibility_role);
					}

					return input_handle;
				}
			};
		}
		else {
			_pInputElement._createInputHandle = function () {
				var elem_handle = this._handle;
				if (elem_handle) {
					var input_element_name = "input";
					var _doc = this._owner_elem.getRootWindowHandle();
					var input_handle = _doc.createElement(input_element_name);
					input_handle._linked_element = this;
					nexacro.__setDOMNodeId(input_handle, this.parent._handle.id, "_" + input_element_name);
					elem_handle.style.webkitUserSelect = "initial";

					if (!this.enable) {
						if (nexacro.OS == "iOS") {
							input_handle.style.opacity = 1;
							input_handle.style.webkitTextFillColor = this.color ? this.color._syscolor : "";
						}
						nexacro.__setDOMNodeEnable(input_handle, false);
					}

					if (this.readonly) {
						nexacro.__setDOMNodeReadOnly(input_handle, true);
					}

					if (this.tabindex >= -1) {
						nexacro.__setDOMNodeTabIndex(input_handle, this.tabindex);
					}

					if (this._type) {
						nexacro.__changeInputDOMNodeType(input_handle, this._type);
					}

					if (this.password && this.maxlength > 0) {
						nexacro.__setDOMNodeMaxLength(input_handle, this.maxlength);
					}

					var input_style = input_handle.style;
					input_style.border = "none";
					input_style.outline = "none";

					nexacro.__setDOMNodeStyleAbsoluteTransparent(input_style);
					nexacro.__setDOMNodeStylePos(input_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(input_style, this.width, this.height);
					nexacro.__setDOMNodeStyleCursor(input_style, this.cursor, "text");

					if (this.font) {
						nexacro.__setDOMNodeStyleFont(input_style, this.font);
					}

					if (this.letterspace) {
						nexacro.__setDOMNodeStyleLetterSpace(input_handle, this.letterspace);
					}

					if (this.color) {
						nexacro.__setDOMNodeStyleColor(input_style, this.color);
					}

					if (this.halign && this.valign) {
						var txt_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
						nexacro.__setInputDOMNodeStyleAlignXY(input_style, this.halign, this.valign, this.height, this.width, txt_size[1]);
					}

					nexacro.__setDomNodeStyleBoxSizing(input_style, "border-box");

					if (this.tabindentsize > 4) {
						nexacro.__setDOMNodeTabIndentSize(input_handle, this.tabindentsize);
					}
					if (this.text) {
						nexacro.__setDOMNodeValue(input_handle, this.text);
					}
					if (this.imemode) {
						nexacro.__setDOMNodeImeMode(input_handle, this.imemode);
					}

					if ((nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11)) && nexacro.SystemLang == "ko-KR") {
						if (this.type) {
							if (this.type.indexOf("normal") == -1 && this.type.indexOf("full") == -1) {
								nexacro.__setDOMNodeImeMode(input_handle, "disabled");
							}
							else {
								nexacro.__setDOMNodeImeMode(input_handle, this.imemode);
							}
						}
					}

					nexacro.__appendDOMNode(elem_handle, input_handle);

					if (nexacro._enableaccessibility) {
						var label_handle = nexacro.__createLabelElementHandle(_doc, input_handle.id, null);
						nexacro.__appendDOMNode(elem_handle, label_handle);

						nexacro.__setDOMNodeAccessibilityLabelBy(input_handle, "accessibility_notify_0");
						nexacro.__setDOMNodeAccessibilityRole(input_handle, this._parent_elem.accessibility_role);
					}

					return input_handle;
				}
			};
		}
		;

		_pInputElement._destroyInputHandle = function () {
			if (this._input_handle) {
				this._input_handle._linked_element = null;

				nexacro.__removeDOMNode(this._dest_handle, this._input_handle);

				this._input_handle = null;
			}
		};

		_pInputElement._createPlaceHolderElement = function (visible) {
			var display_elem = this._display_elem;
			if (this._handle && !display_elem) {
				var display_elem = this._display_elem = new nexacro.TextBoxElement(this);
				display_elem.setElementSize(this.width, this.height);
				display_elem.setElementFont(this.font);
				display_elem.setElementLetterSpace(this.letterspace);
				display_elem.setElementColor(this.displaynulltextcolor);
				display_elem.setElementAlignXY(this.halign, this.valign);
				display_elem.setElementVisible(!!visible);
				display_elem.setElementText(this.displaynulltext);
				display_elem.create();

				nexacro.AccessibilityUtil.supportMobileApplicationAccessibility(display_elem._handle, true);

				if (nexacro.SupportTouch && nexacro.isTouchInteraction) {
					nexacro._observeSysEvent(display_elem._handle, "touchstart", "ontouchstart", this._inputhandler_displayelement_ontouchstart_forward);
				}

				return display_elem;
			}
		};

		_pInputElement._destroyPlaceHolderElement = function () {
			if (this._display_elem) {
				this._display_elem.destroy();
				this._display_elem = null;
			}
		};

		_pInputElement._createFakeFocusElement = function () {
			var fake_input_handle = this._fake_input_handle;
			if (this._handle && !fake_input_handle) {
				var input_handle = document.createElement("input");
				input_handle.type = "text";

				var input_style = input_handle.style;

				nexacro.__setDOMNodeTabIndex(input_handle, -1);
				nexacro.__setDOMNodeStyleAbsolute(input_style);
				nexacro.__setDOMNodeStylePos(input_style, 0, -10, this._isRtl());
				nexacro.__setDOMNodeStyleSize(input_style, 1, 1);
				input_style.opacity = 0;
				input_style.border = "0px solid #ffffff";

				this._fake_input_handle = input_handle;

				nexacro.__appendDOMNode(this._handle, input_handle);
			}
		};

		_pInputElement._destroyFakeFocusElement = function () {
			if (this._fake_input_handle) {
				nexacro.__removeDOMNode(this._handle, this._fake_input_handle);
				this._fake_input_handle = null;
			}
		};

		_pInputElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				var _handle = this._handle;
				var _doc = _owner_elem.getRootWindowHandle();

				if (!_handle) {
					this._owner_elem = _owner_elem;
					_handle = _doc.createElement("div");
					_handle.id = this._parent_elem._handle.id + this._type_name;
					_handle._linked_element = this;
					_handle._element_type = 7;

					var handle_style = _handle.style;

					nexacro.__setDOMNodeStyleAbsoluteTransparent(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

					if (!this.visible) {
						nexacro.__setDOMNodeStyleVisible(handle_style, false);
					}

					if (this.padding) {
						nexacro.__setDOMNodeStylePadding(handle_style, this.padding);
					}
					else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
						nexacro.__setDOMNodeStylePaddingXY(handle_style, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
					}


					nexacro.__setDOMNodeStyleCursor(handle_style, this.cursor);

					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

					this._input_handle = this._createInputHandle();
				}

				var display_elem = this._display_elem;
				if (this.displaynulltext && !display_elem) {
					this._createPlaceHolderElement(this.value ? false : true);
				}
			}
		};

		_pInputElement.destroy = function () {
			this._destroyPlaceHolderElement();
			this._destroyInputHandle();

			if (this._input_handle) {
				this._input_handle._linked_element = null;

				nexacro.__removeDOMNode(this._dest_handle, this._input_handle);

				this._input_handle = null;
			}

			this.color = null;
			this.cursor = null;
			this.font = null;
			this.padding = null;
			this.selectbackground = null;
			this.selectcolor = null;
			this.letterspace = null;

			return nexacro.Element.prototype.destroy.call(this);
		};

		_pInputElement.setElementPosition = function (left, top, bForce) {
			if (this.left != left || this.top != top || bForce) {
				this.left = left;
				this.top = top;
				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStylePos(handle.style, left, top, this._isRtl());
				}

				var input_handle = this._input_handle;
				if (input_handle) {
					nexacro.__setDOMNodeStylePos(input_handle.style, left, top, this._isRtl());
				}

				var display_elem = this._display_elem;
				if (display_elem) {
					display_elem.setElementPosition(left, top, this._isRtl());
				}
			}
		};

		_pInputElement.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;
				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeStyleSize(handle.style, width, height);
				}

				var input_handle = this._input_handle;
				if (input_handle) {
					var pos_before = this.getElementCaretPos();

					nexacro.__setDOMNodeStyleSize(input_handle.style, width, height);

					this.setElementAlignXY(this.halign, this.valign);

					var pos_after = this.getElementCaretPos();

					if ((pos_before != -1 && pos_after != -1) && (pos_before.begin != pos_after.begin || pos_before.end != pos_after.end)) {
						this.setElementSetSelect(0, 0);
						this.setElementSetSelect(pos_before.begin, pos_before.end);
					}
				}
				var display_elem = this._display_elem;
				if (display_elem) {
					display_elem.setElementSize(width, height);
				}
			}
		};

		_pInputElement.setElementEnable = function (enable) {
			if (this.enable != enable) {
				this.enable = enable;

				var comp = this._parent_elem.linkedcontrol;
				var input_handle = this._input_handle;
				if (input_handle) {
					nexacro.__setDOMNodeEnable(input_handle, enable);
					if (nexacro.OS == "iOS" && comp) {
						var color = comp.on_find_CurrentStyle_color(comp._pseudo);
						if (enable) {
							input_handle.style.opacity = "";
							input_handle.style.webkitTextFillColor = "";
						}
						else {
							input_handle.style.opacity = 1;
							input_handle.style.webkitTextFillColor = color._syscolor;
						}
					}
					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 9) {
						this._isUseDelCaret = enable ? false : true;
						this._deleteCaret();
					}
				}
			}
		};

		_pInputElement.setElementTabIndex = function (tabindex) {
			if (this.tabindex != tabindex) {
				this.tabindex = tabindex;
				var input_handle = this._input_handle;
				if (input_handle) {
					nexacro.__setDOMNodeTabIndex(input_handle, tabindex);
				}
			}
		};

		_pInputElement.setElementFont = function (font) {
			this.font = font;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeStyleFont(input_handle.style, font);
			}

			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementFont(font);
			}
		};

		_pInputElement.setElementColor = function (color) {
			this.color = color;

			var comp = this._parent_elem.linkedcontrol;
			var input_handle = this._input_handle;
			if (input_handle) {
				if (nexacro.OS == "iOS" && comp) {
					if (comp._isEnable()) {
						input_handle.style.opacity = "";
						input_handle.style.webkitTextFillColor = "";
						nexacro.__setDOMNodeStyleColor(input_handle.style, color);
					}
					else {
						input_handle.style.opacity = 1;
						input_handle.style.webkitTextFillColor = color._syscolor;
						nexacro.__setDOMNodeStyleColor(input_handle.style, color);
					}
				}
				else {
					nexacro.__setDOMNodeStyleColor(input_handle.style, color);
				}
			}
			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementColor(this.displaynulltextcolor);
			}
		};

		_pInputElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _input_handle = this._input_handle;
				if (_input_handle) {
					nexacro.__setDOMNodeStyleLetterSpace(_input_handle.style, letterspace);
				}
				var _elem = this._display_elem;
				if (_elem) {
					_elem.setElementLetterSpace(letterspace);
				}
			}
		};

		_pInputElement.setElementCursor = function (cursor) {
			this.cursor = cursor;
			var input_cursor = cursor;
			var handle = this._handle;
			var input_handle = this._input_handle;
			if (handle && input_handle) {
				if (!this.readonly && this.enable && input_cursor && input_cursor._value == "auto") {
					input_cursor = nexacro._getCachedStyleObj("cursor", "text");
				}

				nexacro.__setDOMNodeStyleCursor(handle.style, input_cursor);
				nexacro.__setDOMNodeStyleCursor(input_handle.style, input_cursor);
			}

			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementCursor(input_cursor);
			}
		};

		_pInputElement.setElementAlign = function (align) {
			var _align = align ? align._getStyleObject(this._isRtl()) : null;

			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;

			var input_handle = this._input_handle;
			if (input_handle) {
				var pad = this.padding;
				var width = pad ? this.width - pad.left - pad.right : this.width;

				var txt_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
				nexacro.__setInputDOMNodeStyleAlignXY(input_handle.style, _align._halign, _align._valign, this.height, width, txt_size[1]);
			}
			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementAlign(align);
			}
		};

		_pInputElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = halign == "left" ? "right" : (halign == "right" ? "left" : halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;

			var input_handle = this._input_handle;
			if (input_handle) {
				var pad = this.padding;
				var width = pad ? this.width - pad.left - pad.right : this.width;
				if (width < 0) {
					width = 0;
				}

				var txt_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
				nexacro.__setInputDOMNodeStyleAlignXY(input_handle.style, _halign, valign, this.height, width, txt_size[1]);
			}
			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementAlignXY(halign, valign);
			}
		};

		_pInputElement.setElementPadding = function (padding) {
			this.padding = padding;

			var bRtl = this._isRtl();
			var _padding = padding;

			_padding = padding ? padding._getStyleObject(bRtl ^ this.mirror) : null;

			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeStylePadding(input_handle.style, _padding);
			}
			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementPadding(_padding);
			}
		};

		_pInputElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;

			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;

			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeStylePaddingXY(input_handle.style, left, top, right, bottom);
			}
		};

		_pInputElement.setElementValue = function (value, bForce, bElementOnly) {
			var input_handle = this._input_handle;
			var comp = this._parent_elem.linkedcontrol;
			var editbase = comp._edit_base_api;

			if (!comp._is_alive) {
				return;
			}

			var bValChange = (this.value === value) ? false : true;
			var bEmpString = (value == "") ? true : false;

			if (editbase) {
				this.text = editbase._text;
			}
			else {
				this.text = value;
			}
			this.value = value;

			if (bElementOnly) {
				return;
			}

			if (input_handle) {
				var input_value = nexacro.__getDOMNodeValue(input_handle);
				var bTxtChange = (this.text == input_value) ? false : true;

				if (bValChange || bTxtChange || bEmpString || bForce) {
					this._updateInputValue();
				}
			}
		};

		_pInputElement._updateInputValue = function () {
			var input_handle = this._input_handle;
			var display_elem = this._display_elem;
			var comp = this._parent_elem.linkedcontrol;
			var editbase = comp._edit_base_api;
			var nulltext = this.displaynulltext;
			var active = nexacro._checkActiveElement(this);
			var node_text = nexacro.__getDOMNodeValue(input_handle);

			if (this.value !== undefined && this.value !== null) {
				this._setInputVisible(true);
				if (node_text != this.text) {
					var data = editbase._stat_composition.getData();
					if (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari" && editbase._is_composition() && !editbase._is_hangul(data)) {
						var pThis = this;
						nexacro.OnceCallbackTimer.callonce(comp, function () {
							if (editbase instanceof nexacro.EditMaskNumber || editbase instanceof nexacro.EditMaskString) {
								editbase._bStatChangeOnly = true;
							}
							nexacro.__setDOMNodeValue(input_handle, pThis.text);
							if (editbase._bStatChangeOnly) {
								editbase._stat_composition.init();
							}
							editbase._bStatChangeOnly = false;
						});
					}
					else {
						nexacro.__setDOMNodeValue(input_handle, this.text);
					}
				}
			}
			else if (!active && nulltext && nulltext.length > 0) {
				this._setInputVisible(false);
				if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8 && comp._is_subcontrol
					 && (comp._displaymode || comp.parent._displaymode)) {
					nexacro.__setDOMNodeValue(input_handle, nulltext);
				}
				else {
					if (node_text != this.text) {
						var data = editbase._stat_composition.getData();
						if (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari" && editbase._is_composition() && !editbase._is_hangul(data)) {
							var pThis = this;
							nexacro.OnceCallbackTimer.callonce(comp, function () {
								if (editbase instanceof nexacro.EditMaskNumber || editbase instanceof nexacro.EditMaskString) {
									editbase._bStatChangeOnly = true;
								}
								nexacro.__setDOMNodeValue(input_handle, pThis.text);
								if (editbase._bStatChangeOnly) {
									editbase._stat_composition.init();
								}
								editbase._bStatChangeOnly = false;
							});
						}
						else {
							nexacro.__setDOMNodeValue(input_handle, this.text);
						}
					}
					display_elem.setElementText(nulltext);
				}
			}
			else {
				this._setInputVisible(true);
				if (editbase && (editbase._type_name == "EditMaskString" || editbase._type_name == "EditMaskNumber" || editbase._type_name == "EditMaskDate")) {
					if (node_text != this.text) {
						var data = editbase._stat_composition.getData();
						if (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari" && editbase._is_composition() && !editbase._is_hangul(data)) {
							var pThis = this;
							nexacro.OnceCallbackTimer.callonce(comp, function () {
								if (editbase instanceof nexacro.EditMaskNumber || editbase instanceof nexacro.EditMaskString) {
									editbase._bStatChangeOnly = true;
								}
								nexacro.__setDOMNodeValue(input_handle, pThis.text);
								if (editbase._bStatChangeOnly) {
									editbase._stat_composition.init();
								}
								editbase._bStatChangeOnly = false;
							});
						}
						else {
							nexacro.__setDOMNodeValue(input_handle, this.text);
						}
					}
				}
				else {
					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8 && comp._is_subcontrol
						 && (comp._displaymode || comp.parent._displaymode)) {
						nexacro.__setDOMNodeValue(input_handle, " ");
					}
					else {
						var data = editbase._stat_composition.getData();
						if (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari" && editbase._is_composition() && !editbase._is_hangul(data)) {
							var pThis = this;
							nexacro.OnceCallbackTimer.callonce(comp, function () {
								if (editbase instanceof nexacro.EditMaskNumber || editbase instanceof nexacro.EditMaskString) {
									editbase._bStatChangeOnly = true;
								}
								nexacro.__setDOMNodeValue(input_handle, "");
								if (editbase._bStatChangeOnly) {
									editbase._stat_composition.init();
								}
								editbase._bStatChangeOnly = false;
							});
						}
						else {
							nexacro.__setDOMNodeValue(input_handle, "");
						}
					}
				}
			}
		};

		_pInputElement.setElementDisplayNullText = function (nulltext) {
			var handle = this._handle;
			var input_handle = this._input_handle;

			var nulltext_change = false;
			if (this.displaynulltext != nulltext) {
				nulltext_change = true;
				this.displaynulltext = nulltext;
			}

			if (handle && input_handle) {
				var display_elem = this._display_elem;
				if (nulltext) {
					if (!display_elem) {
						this._createPlaceHolderElement(false);
					}
				}
				else {
					if (display_elem) {
						this._destroyPlaceHolderElement();
					}
				}

				if (nulltext_change && nexacro._isNull(this.value)) {
					this._updateInputValue();
				}
			}
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) {
			_pInputElement._setInputVisible = function (visible) {
				if (this._input_visible != visible) {
					this._input_visible = visible;

					var input_handle = this._input_handle;
					if (input_handle) {
						nexacro.__setDOMNodeStyleVisible(input_handle.style, visible);
					}
					var display_elem = this._display_elem;
					if (display_elem) {
						display_elem.setElementVisible(!visible);
					}
				}
			};
		}
		else if (nexacro.Browser == "MobileSafari") {
			_pInputElement._setInputVisible = function (visible) {
				var input_handle = this._input_handle;
				if (input_handle) {
					if (!(nexacro._enableaccessibility && nexacro._accessibilitytype == 4)) {
						nexacro.__setDOMNodeStyleVisible(input_handle.style, visible);
					}
				}
				var display_elem = this._display_elem;
				if (display_elem) {
					if (!visible) {
						display_elem.setElementSize(this.width, this.height);

						if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
							nexacro.__setDOMNodeAccessibilityLabel(this._input_handle, this._parent_elem.accessibility_label + " " + this.displaynulltext);
						}
					}
					else {
						display_elem.setElementSize(0, 0);
						if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
							nexacro.__setDOMNodeAccessibilityLabel(this._input_handle, this._parent_elem.accessibility_label);
						}
					}
					display_elem.setElementVisible(!visible);
					if (visible) {
						this._is_input_touchstart = false;
					}
				}
			};
		}
		else {
			_pInputElement._setInputVisible = function (visible) {
				var input_handle = this._input_handle;
				if (input_handle) {
					if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion > 8)) {
						nexacro.__setDOMNodeStyleVisible(input_handle.style, visible);
					}
				}
				var display_elem = this._display_elem;
				if (display_elem) {
					if (!visible) {
						display_elem.setElementSize(this.width, this.height);
					}
					else {
						display_elem.setElementSize(0, 0);
					}
					display_elem.setElementVisible(!visible);
				}
			};
		}

		_pInputElement.setElementMaxLength = function (length) {
			if (this.maxlength != length) {
				this.maxlength = length;

				var input_handle = this._input_handle;
				if (input_handle) {
					if (this.password && length > 0) {
						nexacro.__setDOMNodeMaxLength(input_handle, length);
					}
					else {
						input_handle.removeAttribute("maxlength");
					}
				}
			}
		};

		_pInputElement.setElementReadonly = function (readonly) {
			if (this.readonly != readonly) {
				this.readonly = readonly;
				var input_handle = this._input_handle;
				if (input_handle) {
					nexacro.__setDOMNodeReadOnly(input_handle, readonly);
					if (readonly) {
						this._deleteCaret();
					}
				}
			}
		};

		_pInputElement.setElementCaretColor = function (color) {
			this.caretcolor = color;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeCaretColor(input_handle, color);
			}
		};

		_pInputElement.setElementSelectColor = function (color) {
			this.selectcolor = color;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeSelectColor(input_handle, color);
			}
		};

		_pInputElement.setElementDisplayNullTextColor = function (color) {
			this.displaynulltextcolor = color;
			var display_elem = this._display_elem;
			if (display_elem) {
				display_elem.setElementColor(color);
			}
		};
		_pInputElement.setElementSelectBackgroundColor = function (color) {
			this.selectbackground = color;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeSelectBackgroundColor(input_handle, color);
			}
		};

		_pInputElement.setElementCompositeColor = function (color) {
			this.compositecolor = color;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeCompositeColor(input_handle, color);
			}
		};

		_pInputElement.setElementTabindentSize = function (indent) {
			this.tabindentsize = indent;
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeTabIndentSize(input_handle, indent);
			}
		};

		_pInputElement.setElementLineSpace = function (linespace) {
		};

		_pInputElement.setElementWordWrap = function (wordwrap) {
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			_pInputElement.setElementPassword = function (bPassword) {
				if (this.password != bPassword) {
					this.password = bPassword;
					this._type = bPassword ? "password" : "text";

					var maxlength = this.maxlength;
					var input_handle = this._input_handle;
					if (input_handle) {
						var new_handle = nexacro.__changeInputDOMNodeType(input_handle, this._type);

						if (bPassword) {
							if (maxlength > 0) {
								nexacro.__setDOMNodeMaxLength(new_handle, maxlength);
							}
							else {
								new_handle.removeAttribute("maxlength");
							}
						}
						else {
							new_handle.removeAttribute("maxlength");
						}

						if (new_handle != input_handle) {
							this._unBindEvent();

							new_handle._linked_element = this;
							this._input_handle = new_handle;

							this._bindEvent();
							if (this._is_focused) {
								this.setElementFocus();
							}
						}
					}
				}
			};
		}
		else {
			_pInputElement.setElementPassword = function (bPassword) {
				if (this.password != bPassword) {
					this.password = bPassword;
					this._type = bPassword ? "password" : "text";

					var maxlength = this.maxlength;
					var input_handle = this._input_handle;
					if (input_handle) {
						nexacro.__changeInputDOMNodeType(input_handle, this._type);

						if (bPassword) {
							if (maxlength > 0) {
								nexacro.__setDOMNodeMaxLength(input_handle, maxlength);
							}
							else {
								input_handle.removeAttribute("maxlength");
							}
						}
						else {
							input_handle.removeAttribute("maxlength");
						}
					}
				}
			};
		}

		if (nexacro.SupportTouch && nexacro.isTouchInteraction) {
			_pInputElement.setElementInputType = function (type, bkeypad) {
				if (!bkeypad) {
					this._orgtype = type;
				}

				if (type == "number" || type == "digit") {
					if (nexacro.SystemType == "iphone") {
						type = "number";
					}
					else {
						type = "tel";
					}
				}
				else if (type == "tel") {
					type = "tel";
				}
				else if (type !== "date") {
					type = "text";
				}

				if (this._type != type) {
					this._type = type;

					var input_handle = this._input_handle;
					if (input_handle) {
						nexacro.__changeInputDOMNodeType(input_handle, this._type);
					}
				}
			};

			_pInputElement.setElementInputTypeKeypad = function (type) {
				var number_keypad_type = "number";
				if (nexacro.OS == "iOS") {
					if (nexacro.SystemType == "ipad") {
						number_keypad_type = "tel";
					}
				}

				if (type == "string") {
					var comp = this._parent_elem.linkedcontrol;

					var nch = 0;
					var maskArr = comp.mask;
					var len = maskArr.length;

					var maskreg = "@ * 9 A a Z z";
					for (var i = 0; i < len; i++) {
						var c = maskArr[i];
						nch = maskreg.indexOf(c);

						if (nch >= 0) {
							break;
						}
					}

					if (nch < 0) {
						this._keypad_type = number_keypad_type;
					}
					else {
						this._keypad_type = "text";
					}
				}

				else if (type == "tel") {
					this._keypad_type = type;
				}
				else if (type == "digit") {
					this._keypad_type = number_keypad_type;
				}
				else {
					var nch = 0;
					var valArr = type.split(",");
					var len = valArr.length;
					var text = [];
					var Testreg = "number dot comma digit sign";
					for (var i = 0; i < len; i++) {
						var c = valArr[i];
						nch = Testreg.search(c);

						if (nch < 0) {
							break;
						}
					}
					if (nch >= 0) {
						this._keypad_type = number_keypad_type;
					}
					else {
						this._keypad_type = "text";
					}
				}

				if (this._keypad_type == "number") {
					if (nexacro.OS == "Android" || nexacro.OS == "iOS") {
						if (nexacro.SystemType == "iphone") {
							this._type = "text";
						}
						else {
							this._type = "tel";
						}

						var input_handle = this._input_handle;
						if (input_handle) {
							nexacro.__changeInputDOMNodeType(input_handle, this._type);
						}
					}
				}

				if (this._keypad_type == "tel") {
					if (nexacro.OS == "Android" || nexacro.OS == "iOS" && nexacro.SystemType == "ipad") {
						this._type = "tel";

						var input_handle = this._input_handle;
						if (input_handle) {
							nexacro.__changeInputDOMNodeType(input_handle, this._type);
						}
					}
				}
			};
		}
		else {
			if ((nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11)) && nexacro.SystemLang == "ko-KR") {
				_pInputElement.setElementInputType = function (type) {
					var input_handle = this._input_handle;

					if (input_handle) {
						if (type.indexOf("normal") == -1 && type.indexOf("full") == -1) {
							nexacro.__setDOMNodeImeMode(input_handle, "disabled");
						}
						else {
							nexacro.__setDOMNodeImeMode(input_handle, this.imemode);
						}
					}
					this.type = type;

					if (nexacro.BrowserType == "Edge") {
						var comp = this._parent_elem.linkedcontrol;
						var editbase = comp._edit_base_api;
						if (editbase && (editbase._type_name == "EditMaskString" || editbase._type_name == "EditMaskNumber" || editbase._type_name == "EditMaskDate")) {
							this._type = "search";
						}
						else {
							this._type = "text";
						}
					}
					else {
						this._type = "text";
					}
				};
			}
			else {
				_pInputElement.setElementInputType = function (type) {
					if (nexacro.BrowserType == "Edge") {
						var comp = this._parent_elem.linkedcontrol;
						var editbase = comp._edit_base_api;
						if (editbase && (editbase._type_name == "EditMaskString" || editbase._type_name == "EditMaskNumber" || editbase._type_name == "EditMaskDate")) {
							this._type = "search";
						}
						else {
							this._type = "text";
						}
					}
					else {
						this._type = "text";
					}
				};
			}
			_pInputElement.setElementInputTypeKeypad = function (type) {
			};
		}
		;

		_pInputElement.setElementUseSoftKeyboard = function (usesoftkeyboard) {
			if (this.usesoftkeyboard != usesoftkeyboard) {
				this.usesoftkeyboard = usesoftkeyboard;
			}
		};
		_pInputElement.setElementUseIme = function (useime) {
			if (this.useime != useime) {
				this.useime = useime;
			}
		};

		_pInputElement.setElementImeMode = function (imemode) {
			if (this.imemode != imemode) {
				this.imemode = imemode;
				var input_handle = this._input_handle;
				if (input_handle) {
					nexacro.__setDOMNodeImeMode(input_handle, imemode);
				}
			}
		};

		_pInputElement.setElementFocus = function (selffocus) {
			var input_handle = this._input_handle;
			if (input_handle) {
				this._is_focusing = true;
				this._setInputVisible(true);

				if (nexacro.isTouchInteraction || ((nexacro.Browser == "IE") && nexacro.SupportTouch)) {
					if (!this._is_input_touchstart || selffocus) {
						nexacro.__setInputDOMNodeFocus(input_handle);
					}
					this._is_input_touchstart = false;
				}
				else {
					nexacro.__setInputDOMNodeFocus(input_handle);
				}

				nexacro.__setLastFocusedElement(this);
			}
		};

		_pInputElement.setElementBlur = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeBlur(input_handle);
			}
		};

		_pInputElement.setElementSetSelect = function (start, end) {
			var input_handle = this._input_handle;
			if (input_handle) {
				var _doc = this.getRootWindowHandle();
				var val = this.getElementValue();
				var len = val.length;


				if (nexacro.Browser != "IE") {
					if (!len) {
						return;
					}
				}

				end = (end == -1 ? len : end);
				var range = end - start;
				if (_doc) {
					if (range == len) {
						if (nexacro.isTouchInteraction && nexacro.OS == "iOS") {
							nexacro.__setDOMNodeSetSelect(_doc, input_handle, start, end);
						}
						else {
							nexacro.__setDOMNodeSelect(_doc, input_handle);
						}
					}
					else {
						nexacro.__setDOMNodeSetSelect(_doc, input_handle, start, end);
					}
				}
			}
		};


		_pInputElement.getElementId = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				return input_handle.id;
			}
			return -1;
		};

		_pInputElement.inputElementAttributefillter = function (v) {
			if (v == "accesskey") {
				return "accessKey";
			}
			else if (v == "contenteditable") {
				return "contentEditable";
			}
			else if (v == "tabindex") {
				return "tabIndex";
			}
			else {
				return v;
			}
		};

		_pInputElement.getInputElementAttribute = function (attribute) {
			var input_handle = this._input_handle;
			if (input_handle) {
				var rtn = input_handle[this.inputElementAttributefillter(attribute)];
				if (rtn) {
					return rtn;
				}
				else {
					return undefined;
				}
			}
			return undefined;
		};

		_pInputElement.setInputElementAttribute = function (attribute, attrvalue) {
			var input_handle = this._input_handle;
			if (input_handle) {
				attribute = this.inputElementAttributefillter(attribute);
				if (attribute) {
					input_handle.setAttribute(attribute, attrvalue);
					return true;
				}
				else {
					return false;
				}
			}
			return false;
		};

		_pInputElement.getElementCaretPos = function () {
			var input_handle = this._input_handle;
			var bActive = nexacro._checkActiveElement(this);

			if (input_handle && bActive) {
				var _doc = this.getRootWindowHandle();
				if (_doc) {
					return nexacro.__getDOMNodeCaretPos(_doc, input_handle);
				}
			}
			return -1;
		};

		_pInputElement.getElementSelectionRange = function () {
			var input_handle = this._input_handle;
			var _doc = this.getRootWindowHandle();

			if (input_handle && _doc) {
				var pos = nexacro.__getDOMNodeCaretPos(_doc, input_handle);
				return [pos.begin, pos.end];
			}

			return [0, 0];
		};

		_pInputElement.getCaretLine = function () {
			return 1;
		};

		_pInputElement.getScrollLeft = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				if (nexacro.BrowserType == "Edge") {
					var pos = input_handle.scrollLeft;
					var comp = this._parent_elem.linkedcontrol;
					var editbase = comp ? comp._edit_base_api : null;
					if (editbase && editbase._pasteAction) {
						return pos + 3;
					}
				}
				var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(input_handle);
				return scrollLeft;
			}
			return 0;
		};

		_pInputElement.setScrollLeft = function (v) {
			var input_handle = this._input_handle;
			if (input_handle) {
				var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(input_handle, v);
				input_handle.scrollLeft = scrollLeft;
			}
		};

		_pInputElement.getScrollTop = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				return input_handle.scrollTop;
			}
			return 0;
		};

		_pInputElement.setScrollTop = function (v) {
			var input_handle = this._input_handle;
			if (input_handle) {
				input_handle.scrollTop = v;
			}
		};

		_pInputElement.getScrollWidth = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				return input_handle.scrollWidth;
			}
			return 0;
		};

		_pInputElement.getScrollHeight = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				return (input_handle.clientHeight > input_handle.scrollHeight ? input_handle.clientHeight : input_handle.scrollHeight);
			}
			return 0;
		};

		_pInputElement.getElementValue = function () {
			var input_handle = this._input_handle;
			if (input_handle) {
				return nexacro.__getDOMNodeValue(input_handle);
			}
			return "";
		};

		_pInputElement.setElementAccessibilityRole = function (role) {
			var accrole = nexacro._roleList[role];
			var input_handle = this._input_handle;
			if (input_handle) {
				nexacro.__setDOMNodeAccessibilityRole(input_handle, accrole);
			}
		};

		_pInputElement._checkActiveElement = function () {
			var _handle = this._input_handle;
			var isActive = true;

			if (_handle) {
				isActive = nexacro._checkActiveElement(this);
			}

			return isActive;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pInputElement._bindEvent = function () {
				var input = this._input_handle;

				if (typeof input.onpropertychange !== "undefined") {
					input.attachEvent("onpropertychange", this._inputhandler_onkeyinput_forward);
				}
				else {
					nexacro._observeSysEvent(input, "input", "oninput", this._inputhandler_onkeyinput_forward);
					nexacro._observeSysEvent(input, "compositionstart", "oncompositionstart", this._inputhandler_oncompositionstart_forward);
					nexacro._observeSysEvent(input, "compositionupdate", "oncompositionupdate", this._inputhandler_oncompositionupdate_forward);
					nexacro._observeSysEvent(input, "compositionend", "oncompositionend", this._inputhandler_oncompositionend_forward);
				}

				nexacro._observeSysEvent(input, "focus", "onfocus", this._inputhandler_onfocus_forward);
				nexacro._observeSysEvent(input, "blur", "onblur", this._inputhandler_onblur_forward);
				nexacro._observeSysEvent(input, "mousedown", "onmousedown", this._inputhandler_onmousedown_forward);
				nexacro._observeSysEvent(input, "mouseup", "onmouseup", this._inputhandler_onmouseup_forward);
				nexacro._observeSysEvent(input, "mousemove", "onmousemove", this._inputhandler_onmousemove_forward);

				nexacro._observeSysEvent(input, "keydown", "onkeydown", this._inputhandler_onkeydown_forward);
				nexacro._observeSysEvent(input, "keypress", "onkeypress", this._inputhandler_onkeypress_forward);
				nexacro._observeSysEvent(input, "keyup", "onkeyup", this._inputhandler_onkeyup_forward);

				nexacro._observeSysEvent(input, "copy", "oncopy", this._inputhandler_oncopy_forward);
				nexacro._observeSysEvent(input, "cut", "oncut", this._inputhandler_oncut_forward);
				nexacro._observeSysEvent(input, "paste", "onpaste", this._inputhandler_onpaste_forward);

				nexacro._observeSysEvent(input, "select", "onselect", this._inputhandler_onselect_forward);
			};

			_pInputElement._unBindEvent = function () {
				var input = this._input_handle;
				if (input) {
					if (typeof input.onpropertychange !== "undefined") {
						input.detachEvent("onpropertychange", this._inputhandler_onkeyinput_forward);
						if (input.type != "password") {
							nexacro._stopSysObserving(input, "focus", "onfocus", this._inputhandler_onfocus_forward);
						}
					}
					else {
						nexacro._stopSysObserving(input, "input", "oninput", this._inputhandler_onkeyinput_forward);
						nexacro._stopSysObserving(input, "compositionstart", "oncompositionstart", this._inputhandler_oncompositionstart_forward);
						nexacro._stopSysObserving(input, "compositionupdate", "oncompositionupdate", this._inputhandler_oncompositionupdate_forward);
						nexacro._stopSysObserving(input, "compositionend", "oncompositionend", this._inputhandler_oncompositionend_forward);
						nexacro._stopSysObserving(input, "focus", "onfocus", this._inputhandler_onfocus_forward);
					}
					nexacro._stopSysObserving(input, "blur", "onblur", this._inputhandler_onblur_forward);
					nexacro._stopSysObserving(input, "mousedown", "onmousedown", this._inputhandler_onmousedown_forward);
					nexacro._stopSysObserving(input, "mouseup", "onmouseup", this._inputhandler_onmouseup_forward);
					nexacro._stopSysObserving(input, "mousemove", "onmousemove", this._inputhandler_onmousemove_forward);

					nexacro._stopSysObserving(input, "keydown", "onkeydown", this._inputhandler_onkeydown_forward);
					nexacro._stopSysObserving(input, "keypress", "onkeypress", this._inputhandler_onkeypress_forward);
					nexacro._stopSysObserving(input, "keyup", "onkeyup", this._inputhandler_onkeyup_forward);

					nexacro._stopSysObserving(input, "copy", "oncopy", this._inputhandler_oncopy_forward);
					nexacro._stopSysObserving(input, "cut", "oncut", this._inputhandler_oncut_forward);
					nexacro._stopSysObserving(input, "paste", "onpaste", this._inputhandler_onpaste_forward);

					nexacro._stopSysObserving(input, "select", "onselect", this._inputhandler_onselect_forward);
				}
			};

			_pInputElement._inputhandler_onkeyinput_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;

				if (evt.propertyName === undefined || evt.propertyName == "value") {
					return nexacro._inputhandler_onkeyinput(node, evt);
				}
			};

			_pInputElement._inputhandler_oncopy_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_oncopy(node, evt);
			};

			_pInputElement._inputhandler_oncut_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_oncut(node, evt);
			};

			_pInputElement._inputhandler_onpaste_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onpaste(node, evt);
			};

			_pInputElement._inputhandler_oncompositionstart_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_oncompositionstart(node, evt);
			};

			_pInputElement._inputhandler_oncompositionupdate_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_oncompositionupdate(node, evt);
			};

			_pInputElement._inputhandler_oncompositionend_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_oncompositionend(node, evt);
			};

			_pInputElement._inputhandler_onfocus_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onfocus(node, evt);
			};

			_pInputElement._inputhandler_onblur_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onblur(node, evt);
			};

			_pInputElement._inputhandler_onkeypress_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onkeypress(node, evt);
			};

			_pInputElement._inputhandler_onmousedown_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onmousedown(node, evt);
			};

			_pInputElement._inputhandler_onmouseup_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}

				var node = evt.srcElement;
				return nexacro._inputhandler_onmouseup(node, evt);
			};

			_pInputElement._inputhandler_lock_onmouseup_forward = nexacro._emptyFn;
			_pInputElement._inputhandler_onmousemove_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onmousemove(node, evt);
			};

			_pInputElement._inputhandler_lock_onmousemove_forward = nexacro._emptyFn;
			_pInputElement._inputhandler_ontouchstart_forward = function (evt) {
			};
			_pInputElement._inputhandler_ontouchend_forward = function (evt) {
			};
			_pInputElement._inputhandler_ontouchmove_forward = function (evt) {
			};

			_pInputElement._inputhandler_onkeydown_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				var elem = node._linked_element;
				var api = elem._parent_elem.linkedcontrol._edit_base_api;

				if (api && api._is_composition() && (evt.keyCode == 37 || evt.keyCode == 39)) {
					evt.preventDefault();
					return false;
				}

				return nexacro._inputhandler_onkeydown(node, evt);
			};

			_pInputElement._inputhandler_onkeyup_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}

				var node = evt.srcElement;
				return nexacro._inputhandler_onkeyup(node, evt);
			};

			_pInputElement._inputhandler_onselect_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				return nexacro._inputhandler_onselect(node, evt);
			};


			if (nexacro.OSVersion >= 6.0) {
				_pInputElement._on_sys_keyinput = function (keycode, altKey, ctrlKey, shiftKey, metaKey, data) {
					var comp = this._parent_elem.linkedcontrol;
					if (this._isPreventDefault(comp, "onkeydown")) {
						return;
					}

					if (nexacro.BrowserVersion == 8) {
						if (this._accept_keyinput || this._is_keydown) {
							var api = comp._edit_base_api;
							if ((api._ctrlkey && api._keycode == 86) || (api._shiftkey && api._keycode == 45)) {
								api._pasteAction = true;
							}
							comp._on_input_keyinput(this);
						}
						else {
							this._accept_keyinput = true;
						}
					}
					else {
						var api = comp._edit_base_api;
						if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) {
							var val = api.getInsertText(this);
							if (!val && !nexacro._isNull(data)) {
								val = data;
							}

							if (api && (!api._is_nipon(val) && api._keycode == 229 && !api._accept_hangul)) {
								if (api._keycode == 229 && !api._is_hangul(val)) {
									comp._on_input_keyinput(this);
									return true;
								}

								if (nexacro.Browser == "IE") {
									api._accept_focus_event = false;
									api._accept_blur_event = false;

									this.setElementBlur();
									this.setElementFocus();
								}

								this.setElementValue(api._value);
								api.setElementCaretPos(api._input_begin_pos, api._input_begin_pos, this);

								api._compositionstart_value = "";
								api._compositionend_value = "";
								api._stat_composition.init();

								return false;
							}

							if (nexacro.Browser == "IE" && api._keycode == 229) {
								if (api._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.None) {
									api._stat_composition.setStatus(nexacro.EditBase.Status.CompositionStart, val);
								}
							}
						}

						if ((api._ctrlkey && api._keycode == 86) || (api._shiftkey && api._keycode == 45)) {
							api._pasteAction = true;
							api._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
						}

						comp._on_input_keyinput(this);
					}
				};
			}
			else {
				_pInputElement._on_sys_keyinput = function (keycode, altKey, ctrlKey, shiftKey, metaKey, data) {
					var comp = this._parent_elem.linkedcontrol;
					if (this._isPreventDefault(comp, "onkeydown")) {
						return;
					}
					var accept_keyinput = false;

					if (this._accept_keyinput || this._is_keydown) {
						if (comp._edit_base_api._is_selected() && comp._edit_base_api._keycode != nexacro.KeyCode_ImeInput && comp._edit_base_api._keycode != 8 && comp._edit_base_api._keycode != 46) {
							accept_keyinput = true;
						}
						comp._on_input_keyinput(this);

						this._accept_keyinput = accept_keyinput;
					}
				};
			}

			_pInputElement._on_sys_copy = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_copy(this);
			};

			_pInputElement._on_sys_cut = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_cut(this);
			};

			_pInputElement._on_sys_paste = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_paste(this);
			};

			_pInputElement._on_sys_compositionstart = function (data) {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_compositionstart(data);
			};

			_pInputElement._on_sys_compositionupdate = function (data) {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				var api = comp ? comp._edit_base_api : null;
				if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) {
					var val = api.getCompositionData(this);
					if (!val) {
						val = data;
					}

					if (api && (!api._is_nipon(val) && api._keycode == 229 && !api._accept_hangul)) {
						return false;
					}
				}

				if (nexacro.BrowserType == "Edge") {
					data = comp._edit_base_api.getCompositionData(this);
				}

				var edit_base = comp._edit_base_api;
				if (edit_base._stat_composition.getCurrentStatus() != nexacro.EditBase.Status.None) {
					comp._on_input_compositionupdate(data);
				}
			};

			_pInputElement._on_sys_compositionend = function (data) {
				var comp = this._parent_elem.linkedcontrol;
				var pThis = this;

				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				var api = comp ? comp._edit_base_api : null;
				if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) {
					var val = api.getCompositionData(this);
					if (!val) {
						val = data;
					}

					if (api && (!api._is_nipon(val) && api._keycode == 229 && !api._accept_hangul)) {
						return false;
					}
				}

				if ((data == "" && comp._edit_base_api._is_hangul && !comp._edit_base_api._is_hangul(data)) || (nexacro.BrowserType == "Edge")) {
					data = api.getCompositionData(this);
				}

				comp._on_input_compositionend(data);

				if (!(data == "" || (comp._edit_base_api._is_hangul && comp._edit_base_api._is_hangul(data)))) {
					if ((nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11) || 
						nexacro.BrowserType == "Edge") {
						comp._edit_base_api._block_setcaret_mousemove = false;
						if (nexacro.Browser == "IE") {
							comp._edit_base_api._skip_set_caret = true;
						}
						this._on_sys_keyinput(this);
						var pos = this.getElementCaretPos();
						comp._edit_base_api._input_begin_pos = pos.begin;
						comp._edit_base_api._skip_set_caret = false;
					}
					else {
						comp._edit_base_api._block_setcaret_mousemove = true;
						nexacro.OnceCallbackTimer.callonce(comp, function () {
							comp._edit_base_api._block_setcaret_mousemove = false;
							pThis._on_sys_keyinput(this);
						});
					}
				}
			};
		}
		else {
			_pInputElement._bindEvent = function () {
				var input = this._input_handle;

				if (typeof input.onpropertychange !== "undefined") {
					input.attachEvent("onpropertychange", this._inputhandler_onkeyinput_forward);
				}
				else {
					nexacro._observeSysEvent(input, "input", "oninput", this._inputhandler_onkeyinput_forward);
					nexacro._observeSysEvent(input, "compositionstart", "oncompositionstart", this._inputhandler_oncompositionstart_forward);
					nexacro._observeSysEvent(input, "compositionupdate", "oncompositionupdate", this._inputhandler_oncompositionupdate_forward);
					nexacro._observeSysEvent(input, "compositionend", "oncompositionend", this._inputhandler_oncompositionend_forward);
				}

				nexacro._observeSysEvent(input, "focus", "onfocus", this._inputhandler_onfocus_forward);
				nexacro._observeSysEvent(input, "blur", "onblur", this._inputhandler_onblur_forward);
				nexacro._observeSysEvent(input, "mousedown", "onmousedown", this._inputhandler_onmousedown_forward);
				nexacro._observeSysEvent(input, "mouseup", "onmouseup", this._inputhandler_onmouseup_forward);
				nexacro._observeSysEvent(input, "mousemove", "onmousemove", this._inputhandler_onmousemove_forward);

				nexacro._observeSysEvent(input, "keydown", "onkeydown", this._inputhandler_onkeydown_forward);
				nexacro._observeSysEvent(input, "keypress", "onkeypress", this._inputhandler_onkeypress_forward);
				nexacro._observeSysEvent(input, "keyup", "onkeyup", this._inputhandler_onkeyup_forward);

				nexacro._observeSysEvent(input, "copy", "oncopy", this._inputhandler_oncopy_forward);
				nexacro._observeSysEvent(input, "cut", "oncut", this._inputhandler_oncut_forward);
				nexacro._observeSysEvent(input, "paste", "onpaste", this._inputhandler_onpaste_forward);

				nexacro._observeSysEvent(input, "select", "onselect", this._inputhandler_onselect_forward);
				if (nexacro.OS == "iOS") {
					var _doc = (input.ownerDocument || input.document);
					nexacro._observeSysEvent(_doc, "selectionchange", "onselectionchange", this._inputhandler_onselectionchange_forward);
				}
			};

			_pInputElement._unBindEvent = function () {
				var input = this._input_handle;

				if (input) {
					var _doc = (input.ownerDocument || input.document);

					if (typeof input.onpropertychange !== "undefined") {
						input.detachEvent("onpropertychange", this._inputhandler_onkeyinput_forward);
						if (input.type != "password") {
							nexacro._stopSysObserving(input, "focus", "onfocus", this._inputhandler_onfocus_forward);
						}
					}
					else {
						nexacro._stopSysObserving(input, "input", "oninput", this._inputhandler_onkeyinput_forward);
						nexacro._stopSysObserving(input, "compositionstart", "oncompositionstart", this._inputhandler_oncompositionstart_forward);
						nexacro._stopSysObserving(input, "compositionupdate", "oncompositionupdate", this._inputhandler_oncompositionupdate_forward);
						nexacro._stopSysObserving(input, "compositionend", "oncompositionend", this._inputhandler_oncompositionend_forward);
						nexacro._stopSysObserving(input, "focus", "onfocus", this._inputhandler_onfocus_forward);
					}
					nexacro._stopSysObserving(input, "blur", "onblur", this._inputhandler_onblur_forward);
					nexacro._stopSysObserving(input, "mousedown", "onmousedown", this._inputhandler_onmousedown_forward);
					nexacro._stopSysObserving(input, "mouseup", "onmouseup", this._inputhandler_onmouseup_forward);
					nexacro._stopSysObserving(input, "mousemove", "onmousemove", this._inputhandler_onmousemove_forward);

					nexacro._stopSysObserving(input, "keydown", "onkeydown", this._inputhandler_onkeydown_forward);
					nexacro._stopSysObserving(input, "keypress", "onkeypress", this._inputhandler_onkeypress_forward);
					nexacro._stopSysObserving(input, "keyup", "onkeyup", this._inputhandler_onkeyup_forward);

					nexacro._stopSysObserving(input, "copy", "oncopy", this._inputhandler_oncopy_forward);
					nexacro._stopSysObserving(input, "cut", "oncut", this._inputhandler_oncut_forward);
					nexacro._stopSysObserving(input, "paste", "onpaste", this._inputhandler_onpaste_forward);

					nexacro._stopSysObserving(input, "select", "onselect", this._inputhandler_onselect_forward);
					if (nexacro.OS == "iOS") {
						nexacro._stopSysObserving(_doc, "selectionchange", "onselectionchange", this._inputhandler_onselectionchange_forward);
					}
				}
			};

			_pInputElement._inputhandler_oncopy_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}

				var node = evt.target;
				return nexacro._inputhandler_oncopy(node, evt);
			};

			_pInputElement._inputhandler_oncut_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_oncut(node, evt);
			};

			_pInputElement._inputhandler_onpaste_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onpaste(node, evt);
			};

			_pInputElement._inputhandler_onkeyinput_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onkeyinput(node, evt);
			};

			_pInputElement._inputhandler_oncompositionstart_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_oncompositionstart(node, evt);
			};

			_pInputElement._inputhandler_oncompositionupdate_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_oncompositionupdate(node, evt);
			};

			_pInputElement._inputhandler_oncompositionend_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_oncompositionend(node, evt);
			};

			_pInputElement._inputhandler_onfocus_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onfocus(node, evt);
			};

			_pInputElement._inputhandler_onblur_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onblur(node, evt);
			};

			_pInputElement._inputhandler_onkeypress_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onkeypress(node, evt);
			};

			_pInputElement._inputhandler_onmousedown_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onmousedown(node, evt);
			};

			_pInputElement._inputhandler_onmouseup_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onmouseup(node, evt);
			};

			_pInputElement._inputhandler_lock_onmouseup_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_lock_onmouseup(node, evt);
			};

			_pInputElement._inputhandler_onmousemove_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onmousemove(node, evt);
			};

			_pInputElement._inputhandler_lock_onmousemove_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_lock_onmousemove(node, evt);
			};

			_pInputElement._inputhandler_onkeydown_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;

				return nexacro._inputhandler_onkeydown(node, evt);
			};

			_pInputElement._inputhandler_onkeyup_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;

				return nexacro._inputhandler_onkeyup(node, evt);
			};

			_pInputElement._inputhandler_onselect_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onselect(node, evt);
			};

			_pInputElement._inputhandler_onselectionchange_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				return nexacro._inputhandler_onselectionchange(node, evt);
			};

			_pInputElement._on_sys_keyinput = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_keyinput(this);
			};

			_pInputElement._on_sys_copy = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_copy(this);
			};

			_pInputElement._on_sys_cut = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_cut(this);
			};

			_pInputElement._on_sys_paste = function () {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_paste(this);
			};

			_pInputElement._on_sys_compositionstart = function (data) {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				if (nexacro.OS == "iOS") {
					this._is_ios_composition = true;
				}

				comp._on_input_compositionstart(data);
			};

			_pInputElement._on_sys_compositionupdate = function (data) {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_compositionupdate(data);
			};

			_pInputElement._on_sys_compositionend = function (data) {
				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_compositionend(data);
				if (nexacro.OS == "iOS") {
					this._is_ios_composition = false;
				}
			};
		}

		_pInputElement._inputhandler_displayelement_ontouchstart_forward = function (evt) {
			var input_elem = this._linked_element.parent;
			var comp = input_elem._parent_elem.linkedcontrol;
			var _win = comp._getWindow();
			var cur_focus_paths = _win.getCurrentFocusPaths();

			var pThis = comp;

			while (pThis && pThis._is_nc_control) {
				pThis = pThis.parent;
			}

			if (!pThis) {
				return;
			}

			if (cur_focus_paths) {
				focuspath_index = nexacro._indexOf(cur_focus_paths, pThis);
			}

			if (focuspath_index > -1) {
				input_elem._setInputVisible(true);
			}
		};

		_pInputElement._on_sys_focus = function (target) {
			var comp = this._parent_elem.linkedcontrol;
			var editbase = comp._edit_base_api;
			var _win = comp._getWindow();

			if (_win._is_active_window) {
				var cur_focus_paths = _win.getCurrentFocusPaths();

				var pThis = comp;

				while (pThis && pThis._is_nc_control) {
					pThis = pThis.parent;
				}

				if (!pThis) {
					return;
				}

				pThis = pThis._getRootComponent(pThis);

				var focuspath_index = -1;
				if (cur_focus_paths) {
					focuspath_index = nexacro._indexOf(cur_focus_paths, pThis);
				}

				if (focuspath_index == -1 || _win._click_cancel) {
					var old_focused_comp = cur_focus_paths ? cur_focus_paths[cur_focus_paths.length - 1] : null;
					if (old_focused_comp) {
						old_focused_comp._re_focus = true;
						if (nexacro.Browser == "Safari") {
							if (editbase._is_composition()) {
								nexacro.OnceCallbackTimer.callonce(old_focused_comp, function () {
									old_focused_comp.on_apply_custom_setfocus();
								});
							}
							else {
								old_focused_comp.on_apply_custom_setfocus();
							}
						}
						else {
							old_focused_comp.on_apply_custom_setfocus();
						}
						this._updateInputValue();
						old_focused_comp._re_focus = false;
						return;
					}
				}
			}

			if (this._isPreventDefault(comp, "onfocus")) {
				return;
			}
			if (!comp._is_alive) {
				return;
			}
			if (editbase._pasteAction && nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
				return;
			}

			comp._on_input_focus(this, target);

			var input_handle = this._input_handle;
			if (input_handle && !this._is_focused) {
				this._is_focused = true;
				this._setInputVisible(true);
			}

			nexacro.__setLastFocusedElement(this);
		};

		_pInputElement._on_sys_blur = function (target) {
			var comp = this._parent_elem.linkedcontrol;
			var _win = comp._getWindow();
			var focuspath_index = -1;
			var cur_focus_paths = _win.getCurrentFocusPaths();



			if (this._isPreventDefault(comp, "onkillfocus")) {
				return;
			}
			if (!comp._is_alive) {
				return;
			}
			var editbase = comp._edit_base_api;
			if (editbase._pasteAction && nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
				return;
			}

			if (nexacro.BrowserType == "Edge") {
				var _doc = this.getRootWindowHandle();
				if (_doc.activeElement._linked_element instanceof nexacro.WebBrowserPluginElement) {
					_doc.activeElement._linked_element._parent_elem.linkedcontrol.setFocus(false);
				}
			}

			if ((comp && comp._edit_base_api && comp._edit_base_api._accept_blur_event)) {
				if (_win._is_active_window && !_win._is_iframe_focus) {
					var pThis = comp;

					while (pThis && pThis._is_nc_control) {
						pThis = pThis.parent;
					}

					if (!pThis) {
						return;
					}

					if (cur_focus_paths) {
						focuspath_index = nexacro._indexOf(cur_focus_paths, pThis);
					}

					if (this._blur_bloked || nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) {
						if (focuspath_index > -1) {
							comp._set_editbase_focusstat("blur");
							comp._activate_flag = true;
							if (nexacro.BrowserType != "Edge") {
								this.setElementFocus();
							}
							return;
						}
					}
					else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
						if (focuspath_index > -1) {
							comp._activate_flag = true;
						}
					}
					else if (nexacro.Browser == "MobileSafari") {
						if (focuspath_index > -1) {
							comp._on_killfocus();
						}
					}
				}
			}

			if (nexacro.OS == "iOS") {
				var pThis = this;
				setTimeout(function () {
					comp._on_input_blur(pThis, target);

					var input_handle = pThis._input_handle;
					if (input_handle && pThis._is_focused) {
						pThis._is_focused = false;

						if (nexacro._isNull(pThis.value) && pThis.displaynulltext) {
							pThis._setInputVisible(false);
						}
						pThis._is_focusing = false;
					}
				}, 100);
			}
			else {
				var accept_blur_event = comp._edit_base_api._accept_blur_event;
				comp._on_input_blur(this, target);

				var input_handle = this._input_handle;

				if (input_handle && !accept_blur_event && comp._edit_base_api._do_focus) {
					comp._edit_base_api._do_focus = false;
					comp._edit_base_api._accept_focus_event = false;
					if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
						comp._edit_base_api._skip_setcaret = true;
					}
					input_handle.focus();
				}

				if (input_handle && this._is_focused && accept_blur_event) {
					this._is_focused = false;

					if (nexacro._isNull(this.value) && this.displaynulltext) {
						if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
							if (!this._is_focusing || input_handle.readOnly) {
								this._setInputVisible(false);
							}
						}
						else {
							this._setInputVisible(false);
						}
					}
					this._is_focusing = false;
				}
			}

			var win_handle = nexacro._getMainWindowHandle();
			if (win_handle != win_handle.parent) {
				var last_focus = cur_focus_paths[cur_focus_paths.length - 1];
				if (!nexacro._enableaccessibility && (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 9)) {
					if (!last_focus._has_inputElement) {
						this._createFakeFocusElement();
						this._fake_input_handle.focus();
						this._destroyFakeFocusElement();
					}
				}
			}
		};

		_pInputElement._on_sys_keypress = function (keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey, evt) {
			var comp = this._parent_elem.linkedcontrol;
			if (this._isPreventDefault(comp, "onkeydown")) {
				return;
			}
			if (!comp._is_alive) {
				return;
			}
			if (ctrlKey && charCode == 118) {
				return;
			}
			if (keyCode == nexacro.Event.KEY_TAB) {
				this._event_stop = true;
				return;
			}

			comp._on_input_keypress(this, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey);

			var c = String.fromCharCode(keyCode);
			c = comp._edit_base_api.applyInputmode(c);
			if (c.length == 1 && nexacro.isAlpha(c)) {
				keyCode = c.charCodeAt(0);
			}
			evt.keyCode = keyCode;
		};

		_pInputElement._on_sys_mousedown = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
			var comp = this._parent_elem.linkedcontrol;
			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4
				 && comp && comp._accessibility_role == "combobox") {
				this._event_stop = true;
				return;
			}

			if (this._isPreventDefault(comp, "onlbuttondown") || this._isPreventDefault(comp, "onrbuttondown")) {
				this._event_stop = true;
				return;
			}
			if (!comp._is_alive) {
				return;
			}

			if (comp._on_input_mousedown) {
				comp._on_input_mousedown(this, altKey, ctrlKey, shiftKey, metaKey);
			}
		};

		_pInputElement._on_sys_touchstart = function () {
			var comp = this._parent_elem.linkedcontrol;

			if (!comp._is_alive) {
				return;
			}

			if (comp._on_input_touchstart) {
				comp._on_input_touchstart(this);
			}
		};

		_pInputElement._on_sys_touchmove = function () {
			var comp = this._parent_elem.linkedcontrol;

			if (!comp._is_alive) {
				return;
			}

			if (comp._on_input_touchmove) {
				comp._on_input_touchmove(this);
			}
		};

		_pInputElement._on_sys_touchend = function () {
			if (nexacro.OS == "iOS") {
				if (this._tap_blocked) {
					this._tap_blocked = false;
				}
				if (this._is_longpressed) {
					this._is_longpressed = false;
				}
			}
			var comp = this._parent_elem.linkedcontrol;

			if (!comp._is_alive) {
				return;
			}

			if (comp._on_input_touchend) {
				comp._on_input_touchend(this);
			}
		};

		_pInputElement._on_sys_mouseup = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
			var comp = this._parent_elem.linkedcontrol;
			if (this._isPreventDefault(comp, "onlbuttonup") || this._isPreventDefault(comp, "onrbuttonup")) {
				this._event_stop = true;
				return;
			}
			if (!comp._is_alive) {
				return;
			}

			if (comp._on_input_mouseup) {
				if (this._is_mousedown == true) {
					this._is_mousedown = false;
				}
				comp._on_input_mouseup(this, altKey, ctrlKey, shiftKey, metaKey);
			}
		};

		_pInputElement._on_sys_mousemove = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
			var comp = this._parent_elem.linkedcontrol;
			if (this._isPreventDefault(comp, "onmousemove")) {
				return;
			}
			if (!comp._is_alive) {
				return;
			}

			comp._on_input_mousemove(this);
		};

		if (nexacro.Browser != "IE" || ((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") && nexacro.OSVersion >= 6.0)) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				_pInputElement._on_sys_keydown = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
					if (!this._parent_elem) {
						return;
					}

					var comp = this._parent_elem.linkedcontrol;

					if (this._isPreventDefault(comp, "onkeydown")) {
						this._event_stop = true;
						return;
					}
					if (!comp._is_alive) {
						return;
					}

					comp._on_input_keydown(this, keyCode, altKey, ctrlKey, shiftKey, metaKey);

					if (keyCode == nexacro.Event.KEY_DELETE || keyCode == nexacro.Event.KEY_BACKSPACE) {
						comp._on_input_keypress(this, keyCode, keyCode, altKey, ctrlKey, shiftKey, metaKey);
					}

					if (keyCode == nexacro.Event.KEY_TAB) {
						this._on_sys_keyinput(this);
					}

					this._is_keydown = true;
				};

				_pInputElement._on_sys_keyup = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
					this._is_keydown = false;
					if (!this._parent_elem) {
						return;
					}

					var comp = this._parent_elem.linkedcontrol;
					if (this._isPreventDefault(comp, "onkeyup")) {
						return;
					}
					if (!comp._is_alive) {
						return;
					}

					comp._on_input_keyup(this, keyCode, altKey, ctrlKey, shiftKey, metaKey);

					this._accept_keyinput = false;
				};
			}
			else {
				_pInputElement._on_sys_keydown = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
					if (!this._parent_elem) {
						return;
					}

					var comp = this._parent_elem.linkedcontrol;

					if (keyCode == nexacro.Event.KEY_TAB) {
						this._event_stop = true;
					}

					if (this._isPreventDefault(comp, "onkeydown")) {
						this._event_stop = true;
						return;
					}
					if (!comp._is_alive) {
						return;
					}

					comp._on_input_keydown(this, keyCode, altKey, ctrlKey, shiftKey, metaKey);

					if (keyCode == nexacro.Event.KEY_DELETE || keyCode == nexacro.Event.KEY_BACKSPACE) {
						comp._on_input_keypress(this, keyCode, keyCode, altKey, ctrlKey, shiftKey, metaKey);
					}
					this._is_keydown = true;
				};

				_pInputElement._on_sys_keyup = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
					this._is_keydown = false;

					if (!this._parent_elem) {
						return;
					}

					var comp = this._parent_elem.linkedcontrol;
					if (this._isPreventDefault(comp, "onkeyup")) {
						return;
					}
					if (!comp._is_alive) {
						return;
					}

					comp._on_input_keyup(this, keyCode, altKey, ctrlKey, shiftKey, metaKey);
				};
			}
		}
		else {
			_pInputElement._on_sys_keydown = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
				if (!this._parent_elem) {
					return;
				}

				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeydown")) {
					this._event_stop = true;
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				if (keyCode != 16) {
					this._accept_keyinput = true;
				}

				comp._on_input_keydown(this, keyCode, altKey, ctrlKey, shiftKey, metaKey);

				if (keyCode == nexacro.Event.KEY_DELETE || keyCode == nexacro.Event.KEY_BACKSPACE) {
					comp._on_input_keypress(this, keyCode, keyCode, altKey, ctrlKey, shiftKey, metaKey);
				}

				if (keyCode == nexacro.KeyCode_ImeInput || keyCode == nexacro.Event.KEY_BACKSPACE || keyCode == nexacro.Event.KEY_DELETE) {
					this._on_sys_keyinput(this);
				}
				if (keyCode == 18 && altKey == true) {
					this._accept_blur_by_altkey = true;
				}
				else if (keyCode != 18 && altKey == true) {
					this._accept_blur_by_altkey = false;
				}
				this._is_keydown = true;
			};

			_pInputElement._on_sys_keyup = function (keyCode, altKey, ctrlKey, shiftKey, metaKey) {
				this._is_keydown = false;

				if (!this._parent_elem) {
					return;
				}

				var comp = this._parent_elem.linkedcontrol;
				if (this._isPreventDefault(comp, "onkeyup")) {
					return;
				}
				if (!comp._is_alive) {
					return;
				}

				comp._on_input_keyup(this, keyCode, altKey, ctrlKey, shiftKey, metaKey);

				if (this._accept_blur_by_altkey == true && document.selection) {
					this._deleteCaret();
					this.setElementBlur();
				}

				this._accept_keyinput = false;
				this._accept_blur_by_altkey = false;
			};
		}

		_pInputElement._on_sys_select = function () {
			var comp = this._parent_elem.linkedcontrol;
			if (!comp._is_alive) {
				return;
			}

			comp._on_input_select(this);
		};

		_pInputElement._on_sys_selectionchange = function () {
			var comp = this._parent_elem.linkedcontrol;
			if (!comp._is_alive) {
				return;
			}

			comp._on_input_selectionchange(this);
		};

		if (nexacro.Browser == "Gecko") {
			_pInputElement._deleteCaret = function () {
				if (window.getSelection && this._isUseDelCaret && this._is_focused) {
					var selection = window.getSelection();
					var comp = this._parent_elem.linkedcontrol;
					var sel = comp.getSelect();

					if (sel[0] == sel[1]) {
						selection.removeAllRanges();
					}
				}
			};
		}
		else {
			_pInputElement._deleteCaret = function () {
				if (document.selection && this._isUseDelCaret && this._is_focused) {
					var range = document.selection.createRange();
					begin = 0 - range.duplicate().moveStart('character', -100000);
					end = begin + range.text.length;

					if (begin == end) {
						document.selection.empty();
					}
				}
			};
		}

		_pInputElement._checkInputAutoSelect = function () {
			var comp = this._parent_elem.linkedcontrol;
			if (comp) {
				if (comp.autoselect) {
					return true;
				}
			}
			return false;
		};

		_pInputElement._refreshElement = function () {
			var owner_elem = this._parent_elem.getContainerElement(this.position_step);
			var _doc = owner_elem.getRootWindowHandle();
			if (_doc && owner_elem && owner_elem._handle) {
				var tmp_handle = _doc.createElement("div");
				owner_elem._handle.appendChild(tmp_handle);
				setTimeout(function () {
					owner_elem._handle.removeChild(tmp_handle);
				}, 0);
			}
		};
		_pInputElement._refreshElement1 = function (is_focus) {
			var owner_elem = this._parent_elem.getContainerElement(this.position_step);
			var _doc = owner_elem.getRootWindowHandle();
			if (_doc && owner_elem && owner_elem._handle) {
				var pThis = this._handle;
				if (!is_focus) {
					pThis.style.zIndex = -100;
					setTimeout(function () {
						pThis.style.zIndex = 0;
					}, 100);
				}
				else {
					var tmp_handle = _doc.createElement("div");
					pThis.style.outlineColor = "transparent";
					pThis.style.outlineStyle = "dotted";
					pThis.style.outlineWidth = "0px";
					owner_elem._handle.appendChild(tmp_handle);
					setTimeout(function () {
						pThis.style.outlineColor = "";
						pThis.style.outlineStyle = "";
						pThis.style.outlineWidth = "";

						if (owner_elem && owner_elem._handle) {
							owner_elem._handle.removeChild(tmp_handle);
						}
						tmp_handle = null;
					}, 100);
				}
			}
		};
		delete _pInputElement;
		_pInputElement = null;

		nexacro.TextAreaElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pTextAreaElement = new nexacro._createPrototype(nexacro.InputElement, nexacro.TextAreaElement);
		nexacro.TextAreaElement.prototype = _pTextAreaElement;

		_pTextAreaElement._type_name = "TextAreaElement";

		_pTextAreaElement.usemultiline = true;

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			_pTextAreaElement._overflow_scroll_size = 0;
		}
		else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
			_pTextAreaElement._overflow_scroll_size = 0;
		}
		else {
			_pTextAreaElement._overflow_scroll_size = 17;
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pTextAreaElement._bindEvent = function () {
				var input = this._input_handle;

				nexacro.InputElement.prototype._bindEvent.call(this);

				nexacro._observeSysEvent(input, "scroll", "onscroll", this._inputhandler_onscroll_forward);
			};

			_pTextAreaElement._unBindEvent = function () {
				var input = this._input_handle;
				if (input) {
					nexacro.InputElement.prototype._unBindEvent.call(this);

					nexacro._stopSysObserving(input, "scroll", "onscroll", this._inputhandler_onscroll_forward);
				}
			};

			_pTextAreaElement._inputhandler_onscroll_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}

				var target = evt.srcElement;
				var container = target._linked_element;
				if (container) {
					var comp = container._parent_elem.linkedcontrol;
					var _win = comp._getWindow();

					if (_win && _win._cur_ldown_elem) {
						var elem_scroll_top = container.parent.scroll_top;
						var elem_scroll_left = container.parent.scroll_left;

						var hscrollbar = container.parent._hscroll_control;

						var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(target);
						if (hscrollbar && !hscrollbar._is_tracking) {
							hscrollbar.set_pos(scrollLeft);
						}

						var vscrollbar = container.parent._vscroll_control;
						if (vscrollbar && !vscrollbar._is_tracking) {
							vscrollbar.set_pos(target.scrollTop);
						}
					}
				}
			};

			if (nexacro.BrowserVersion <= 7) {
				_pTextAreaElement.setElementBlur = function () {
					var input_handle = this._input_handle;
					if (input_handle) {
						nexacro.__setDOMNodeBlur(input_handle);
						nexacro._setDOMNodeRemoveCaret();
					}
				};
			}
		}
		else {
			_pTextAreaElement._bindEvent = function () {
				var input = this._input_handle;

				nexacro.InputElement.prototype._bindEvent.call(this);

				nexacro._observeSysEvent(input, "scroll", "onscroll", this._inputhandler_onscroll_forward);
			};

			_pTextAreaElement._unBindEvent = function () {
				var input = this._input_handle;
				if (input) {
					nexacro.InputElement.prototype._unBindEvent.call(this);

					nexacro._stopSysObserving(input, "scroll", "onscroll", this._inputhandler_onscroll_forward);
				}
			};

			_pTextAreaElement._inputhandler_onscroll_forward = function (evt) {
				var target = evt.target;
				var container = target._linked_element;
				if (container) {
					var comp = container._parent_elem.linkedcontrol;
					var _win = comp._getWindow();

					var pos = container.getElementCaretPos();

					if ((_win && _win._cur_ldown_elem) || (nexacro.isTouchInteraction && (_win && _win._cur_touch_elem || ((pos && pos != -1) && pos.begin != pos.end)))) {
						var elem_scroll_top = container.parent.scroll_top;
						var elem_scroll_left = container.parent.scroll_left;

						var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(target);

						if (elem_scroll_left != target.scrollLeft) {
							var hscrollbar = container.parent._hscroll_control;
							if (hscrollbar && !hscrollbar._is_tracking) {
								hscrollbar.set_pos(scrollLeft);
							}
						}
						if (elem_scroll_top != target.scrollTop) {
							var vscrollbar = container.parent._vscroll_control;
							if (vscrollbar && !vscrollbar._is_tracking) {
								vscrollbar.set_pos(target.scrollTop);
							}
						}
					}
				}
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			_pTextAreaElement._createInputHandle = function () {
				var elem_handle = this._handle;
				if (elem_handle) {
					var align_style_text = "";
					if (this.halign && this.valign) {
						var text_height = this.getScrollHeight();
						var blank_height = Math.max(0, this.height - text_height);
						align_style_text = nexacro.__getTextAreaHTMLStyleAlignXY(this.halign, this.valign, blank_height);
					}

					var input_attr_str = nexacro.__getTextAreaHTMLAttrEnable(this.enable) + 
						nexacro.__getHTMLAttrReadOnly(this.readonly) + 
						nexacro.__getHTMLAttrTabIndex(this.tabindex) + 
						nexacro.__getHTMLAttrWordWrap(this.wordwrap);
					var input_style_str = nexacro.__getTextAreaHTMLStyleAbsoluteTransparent() + 
						nexacro.__getHTMLStylePos(0, 0) + 
						nexacro.__getHTMLStyleSize(this.width + this._overflow_scroll_size, this.height + this._overflow_scroll_size) + 
						"border:none;outline:none;resize:none;" + 
						nexacro.__getHTMLStyleFont(this.font) + 
						nexacro.__getHTMLStyleColor(this.color) + 
						align_style_text + 
						nexacro.__getHTMLStyleCursor(this.cursor, "text") + 
						nexacro.__getHTMLStyleLineSpace(this.linespace) + 
						nexacro.__getHTMLStyleWordWrap(this.wordwrap) + 
						nexacro.__getHTMLStylemeMode(this.imemode);

					var text = this.text ? nexacro._encodeXml(this.text) : "";
					var id_str = " id='" + this.parent._handle.id + "_textarea'";
					var html = "<textarea " + input_attr_str + id_str + " style='" + input_style_str + "'/>" + text + "</textarea>";
					if (nexacro._enableaccessibility) {
						html += nexacro.__getDOMNodeAccessibilityStrLabelfor(this.parent._handle.id, (this.text ? nexacro._encodeXml(this.text) : ""));
					}

					elem_handle.innerHTML = html;
					var input_handle = elem_handle.firstChild;
					input_handle._linked_element = this;

					if (nexacro._enableaccessibility) {
						nexacro.__setDOMNodeAccessibilityLabelBy(input_handle, "accessibility_notify_0");
						nexacro.__setDOMNodeAccessibilityRole(input_handle, this._parent_elem.accessibility_role);
					}
					;

					return input_handle;
				}
			};

			_pTextAreaElement.setElementSetSelect = function (start, end) {
				var _handle = this._input_handle;
				if (_handle) {
					var _doc = this.getRootWindowHandle();
					end = (typeof end == 'number') ? end : start;
					var value = this.getElementValue();
					if (end == -1) {
						end = _handle.value.length;
						var front_val = value.slice(0, start);
						var rear_val = value.slice(0, end);
						start -= front_val.split('\r\n').length - 1;
						end -= rear_val.split('\r\n').length - 1;
					}

					nexacro.__setTextAreaDOMNodeSetSelect(_doc, _handle, start, end);
				}
			};
		}
		else {
			_pTextAreaElement._createInputHandle = function () {
				var elem_handle = this._handle;
				if (elem_handle) {
					var input_element_name = "textarea";
					var _doc = this._owner_elem.getRootWindowHandle();
					var input_handle = _doc.createElement(input_element_name);
					input_handle._linked_element = this;
					nexacro.__setDOMNodeId(input_handle, this.parent._handle.id, "_" + input_element_name);
					elem_handle.style.webkitUserSelect = "initial";

					if (!this.enable) {
						if (nexacro.OS == "iOS") {
							input_handle.style.opacity = 1;
							input_handle.style.webkitTextFillColor = this.color ? this.color._syscolor : "";
						}
						nexacro.__setTextAreaDOMNodeEnable(input_handle, false);
					}

					if (this.readonly) {
						nexacro.__setDOMNodeReadOnly(input_handle, true);
					}

					if (this.tabindex >= -1) {
						nexacro.__setDOMNodeTabIndex(input_handle, this.tabindex);
					}

					var input_style = input_handle.style;
					input_style.border = "none";
					input_style.outline = "none";
					input_style.resize = "none";

					if (nexacro.Browser == "Gecko") {
						input_style["scrollbar-width"] = "none";
					}

					nexacro.__setTextAreaDOMNodeStyleAbsoluteTransparent(input_style);

					nexacro.__setDOMNodeStylePos(input_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(input_style, this.width + this._overflow_scroll_size, this.height + this._overflow_scroll_size);
					nexacro.__setDOMNodeStyleCursor(input_style, this.cursor, "text");

					if (this.font) {
						nexacro.__setDOMNodeStyleFont(input_style, this.font);
					}

					if (this.letterspace) {
						nexacro.__setDOMNodeStyleLetterSpace(input_style, this.letterspace);
					}

					if (this.color) {
						nexacro.__setDOMNodeStyleColor(input_style, this.color);
					}

					if (this.halign && this.valign) {
						var txt_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
						nexacro.__setInputDOMNodeStyleAlignXY(input_style, this.halign, this.valign, this.height, this.width, txt_size[1]);
					}

					if (this.tabindentsize > 4) {
						nexacro.__setDOMNodeTabIndentSize(input_handle, this.tabindentsize);
					}
					if (this.linespace > 0) {
						nexacro.__setDOMNodeStyleLineSpace(input_style, this.linespace);
					}
					nexacro.__setTextAreaDOMNodeWordWrap(input_handle, this.wordwrap);

					if (this.text) {
						nexacro.__setDOMNodeValue(input_handle, this.text);
					}
					if (this.imemode) {
						nexacro.__setDOMNodeImeMode(input_handle, this.imemode);
					}

					nexacro.__appendDOMNode(elem_handle, input_handle);

					if (nexacro._enableaccessibility) {
						var label_handle = nexacro.__createLabelElementHandle(_doc, input_handle.id, null);
						nexacro.__appendDOMNode(elem_handle, label_handle);

						nexacro.__setDOMNodeAccessibilityLabelBy(input_handle, "accessibility_notify_0");
						nexacro.__setDOMNodeAccessibilityRole(input_handle, this._parent_elem.accessibility_role);
					}

					return input_handle;
				}
			};

			_pTextAreaElement.setElementSetSelect = function (start, end, no_focus) {
				var _handle = this._input_handle;
				if (_handle) {
					var _doc = this.getRootWindowHandle();
					end = (typeof end == 'number') ? (end == -1 ? _handle.value.length : end) : start;
					nexacro.__setTextAreaDOMNodeSetSelect(_doc, _handle, start, end, no_focus);
				}
			};
		}

		_pTextAreaElement.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				var comp = this._parent_elem.linkedcontrol;
				var target_arr = nexacro._get_invisible_obj(comp);
				nexacro._reset_invisible_obj(target_arr, true);

				this.width = width;
				this.height = height;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
				}

				_handle = this._input_handle;
				if (_handle) {
					var pos_before = this.getElementCaretPos();

					var offsetwidth = width + this._overflow_scroll_size;
					var offsetheight = height + this._overflow_scroll_size;
					nexacro.__setDOMNodeStyleSize(_handle.style, offsetwidth, offsetheight);

					if (_handle.clientWidth > width || _handle.clientHeight > height) {
						offsetwidth += (width - _handle.clientWidth);
						offsetheight += (height - _handle.clientHeight);
						nexacro.__setDOMNodeStyleSize(_handle.style, offsetwidth, offsetheight);
					}

					var pos_after = this.getElementCaretPos();

					if ((pos_before != -1 && pos_after != -1) && (pos_before.begin != pos_after.begin || pos_before.end != pos_after.end)) {
						this.setElementSetSelect(0, 0);
						this.setElementSetSelect(pos_before.begin, pos_before.end);
					}
				}
				var elem = this._display_elem;
				if (elem) {
					elem.setElementSize(width, height);
				}
				nexacro._reset_invisible_obj(target_arr, false);
			}
		};

		_pTextAreaElement.setElementEnable = function (enable) {
			if (this.enable != enable) {
				this.enable = enable;

				var comp = this._parent_elem.linkedcontrol;
				var input_handle = this._input_handle;
				if (input_handle) {
					nexacro.__setTextAreaDOMNodeEnable(input_handle, enable);

					if (nexacro.OS == "iOS" && comp) {
						var color = comp.on_find_CurrentStyle_color(comp._pseudo);
						if (enable) {
							input_handle.style.opacity = "";
						}
						else {
							input_handle.style.opacity = 1;
						}
					}

					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 9) {
						this._isUseDelCaret = enable ? false : true;
						this._deleteCaret();
					}
				}
			}
		};

		_pTextAreaElement.setElementAlign = function (align) {
			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;

			var input_handle = this._input_handle;
			if (input_handle) {
				var text_height = this.getScrollHeight();
				var blank_height = Math.max(0, this.height - text_height);
				nexacro.__setTextAreaDOMNodeStyleAlignXY(input_handle.style, this.halign, this.valign, blank_height);
			}
			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementAlign(align);
			}
		};

		_pTextAreaElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;
			var padding = this.padding;

			if (this._isRtl()) {
				_halign = halign == "left" ? "right" : (halign == "right" ? "left" : halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;

			var input_handle = this._input_handle;
			if (input_handle) {
				var text_height = this.getScrollHeight();
				var blank_height = Math.max(0, this.height - text_height);
				nexacro.__setTextAreaDOMNodeStyleAlignXY(input_handle.style, _halign, valign, blank_height, padding);
			}
			var _elem = this._display_elem;
			if (_elem) {
				_elem.setElementAlignXY(_halign, valign);
			}
		};

		_pTextAreaElement.setElementLineSpace = function (linespace) {
			this.linespace = linespace;

			var input_handle = this._input_handle;
			if (input_handle) {
				var comp = this._parent_elem.linkedcontrol;
				if (comp) {
					var font_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
					linespace = font_size[1] + nexacro._toInt(linespace);
				}

				nexacro.__setDOMNodeStyleLineSpace(input_handle.style, linespace);
			}
		};

		_pTextAreaElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _input_handle = this._input_handle;
				if (_input_handle) {
					nexacro.__setDOMNodeStyleLetterSpace(_input_handle.style, letterspace);
				}
			}
		};

		_pTextAreaElement.setElementWordWrap = function (wordwrap) {
			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			if (this.wordwrap != wordwrap) {
				this.wordwrap = wordwrap;
				var handle = this._handle;
				var input_handle = this._input_handle;

				if (handle && input_handle) {
					nexacro.__setTextAreaDOMNodeWordWrap(input_handle, this.wordwrap);
					this._updateInputValue();
				}
			}
		};

		_pTextAreaElement.setElementPassword = function (is_password_type) {
		};

		_pTextAreaElement.getElementCaretPos = function () {
			var _handle = this._input_handle;
			var bActive = nexacro._checkActiveElement(this);

			if (_handle && bActive) {
				var _doc = this.getRootWindowHandle();
				return nexacro.__getTextAreaDOMNodeCaretPos(_doc, _handle);
			}
			return -1;
		};

		_pTextAreaElement.getElementSelectionRange = function () {
			var input_handle = this._input_handle;
			var _doc = this.getRootWindowHandle();

			if (input_handle && _doc) {
				var pos = nexacro.__getTextAreaDOMNodeCaretPos(_doc, input_handle);
				return [pos.begin, pos.end];
			}

			return [0, 0];
		};

		_pTextAreaElement.getCaretLine = function () {
			var _handle = this._input_handle;
			if (_handle) {
				var _doc = this.getRootWindowHandle();
				return nexacro.__getDOMNodeCaretLine(_doc, _handle);
			}
			return 0;
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			_pTextAreaElement.getElementValue = function () {
				var input_handle = this._input_handle;
				if (input_handle) {
					var value = nexacro.__getDOMNodeValue(input_handle);
					if (value) {
						value = value.replace(/\r\n/g, "\n");
					}
					return value;
				}
				return "";
			};

			_pTextAreaElement.setElementValue = function (value, bForce, bElementOnly) {
				var input_handle = this._input_handle;
				var comp = this._parent_elem.linkedcontrol;
				var editbase = comp._edit_base_api;

				if (!comp._is_alive) {
					return;
				}

				var bValChange = (this.value === value) ? false : true;
				var bEmpString = (value == "") ? true : false;

				if (value) {
					value = value.replace(/\r\n/g, "\n");
				}

				if (editbase) {
					this.text = editbase._text;
				}
				else {
					this.text = value;
				}

				this.value = value;

				if (bElementOnly) {
					return;
				}

				if (input_handle) {
					var input_value = nexacro.__getDOMNodeValue(input_handle);
					var bTxtChange = (this.text == input_value) ? false : true;

					if (bValChange || bTxtChange || bEmpString || bForce) {
						this._updateInputValue();
					}
				}
			};
		}
		else {
			_pTextAreaElement.getElementValue = function () {
				var input_handle = this._input_handle;
				if (input_handle) {
					return nexacro.__getDOMNodeValue(input_handle);
				}
				return "";
			};

			_pTextAreaElement.setElementValue = function (value, bForce, bElementOnly) {
				var input_handle = this._input_handle;
				var comp = this._parent_elem.linkedcontrol;
				var editbase = comp._edit_base_api;

				if (!comp._is_alive) {
					return;
				}

				var bValChange = (this.value === value) ? false : true;
				var bEmpString = (value == "") ? true : false;

				if (value) {
					if (typeof value == "object") {
						value = value.toString().replace(/\r\n/g, "\n");
					}
					else {
						value = value.replace(/\r\n/g, "\n");
					}
				}

				if (editbase) {
					this.text = editbase._text;
				}
				else {
					this.text = value;
				}
				this.value = value;

				if (bElementOnly) {
					return;
				}

				if (input_handle) {
					var input_value = nexacro.__getDOMNodeValue(input_handle);
					var bTxtChange = (this.text == input_value) ? false : true;

					if (bValChange || bTxtChange || bEmpString || bForce) {
						this._updateInputValue();
					}
				}
			};
		}

		_pTextAreaElement._is_prevent_enter = false;
		_pTextAreaElement._inputhandler_onkeydown_forward = function (evt) {
			if (nexacro._getLocalStorage("_com_waiting", false)) {
				nexacro._stopSysEvent(evt);
			}
			var node = evt.target || evt.srcElement;

			if (this._is_prevent_enter) {
				if (evt.keyCode == 13 && (evt.altKey || evt.ctrlKey)) {
					evt.preventDefault();
				}
			}

			return nexacro._inputhandler_onkeydown(node, evt);
		};

		delete _pTextAreaElement;
		_pTextAreaElement = null;

		nexacro._inputhandler_oncopy = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				elem._on_sys_copy();
				return true;
			}
			return false;
		};

		nexacro._inputhandler_oncut = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				elem._on_sys_cut();
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onpaste = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				var data;
				if (evt.clipboardData && evt.clipboardData.getData) {
					data = evt.clipboardData.getData('text/plain');
				}
				else if (window.clipboardData && window.clipboardData.getData) {
					data = window.clipboardData.getData('text');
				}

				var comp = elem._parent_elem.linkedcontrol;
				comp._edit_base_api._clipdata = data;

				if (nexacro.OS == "iOS" && nexacro.OSVersion.split(".")[0] >= 13 && comp._edit_base_api._is_composition()) {
					nexacro._stopSysEvent(evt);
					return false;
				}

				elem._on_sys_paste();
				return true;
			}
			return false;
		};

		nexacro._inputhandler_oncompositionstart = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				if (elem._is_lange2) {
					return nexacro._stopSysEvent(evt);
				}
				elem._on_sys_compositionstart(evt.data);
				return true;
			}
			return false;
		};

		nexacro._inputhandler_oncompositionupdate = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				if (elem._is_lange2) {
					return nexacro._stopSysEvent(evt);
				}
				elem._on_sys_compositionupdate(evt.data);
				return true;
			}
			return false;
		};

		nexacro._inputhandler_oncompositionend = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				if (elem._is_lange2) {
					return nexacro._stopSysEvent(evt);
				}
				elem._on_sys_compositionend(evt.data);
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onkeyinput = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				if (elem._is_lange2) {
					return nexacro._stopSysEvent(evt);
				}
				elem._on_sys_keyinput(nexacro._getSysEventKey(evt), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.data);
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onkeypress = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				elem._on_sys_keypress(evt.keyCode, evt.charCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt);
				elem._accept_keyinput = true;

				if (elem._event_stop) {
					elem._event_stop = false;
					nexacro._stopSysEvent(evt);
				}

				return true;
			}
			return false;
		};

		nexacro._inputhandler_onfocus = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				if (nexacro.isTouchInteraction && nexacro.OS == "Android") {
					if (!elem.readonly && node.readOnly) {
						nexacro.__setDOMNodeReadOnly(elem._input_handle, false);
					}
				}

				if (nexacro.OS == "iOS" && nexacro.OSVersion.split(".")[0] >= 13 && elem._is_ios_composition_returned) {
					return false;
				}

				elem._on_sys_focus();
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onblur = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				if (nexacro.OS == "iOS" && nexacro.OSVersion.split(".")[0] >= 13 && elem._is_ios_composition_returned) {
					return false;
				}

				elem._on_sys_blur(node);
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onmousedown = function (node, evt) {
			var elem = node._linked_element;
			if (elem && elem._on_sys_mousedown) {
				nexacro._stopPropagation(evt);
				elem._is_mousedown = true;
				var comp = elem._parent_elem.linkedcontrol;
				var _win = comp._getWindow();
				if (_win instanceof nexacro.PopupWindow) {
					_win = _win.parent;
				}
				var __win = _win._handle;
				var id = _win._custom_node_id;
				var sysEvent = nexacro._is_attach_childframe ? __win.nexacro_HTMLSysEvent[id] : __win.nexacro_HTMLSysEvent;

				if (nexacro.isTouchInteraction && nexacro.OS == "Android") {
					if (!elem.readonly && node.readOnly) {
						nexacro.__setDOMNodeReadOnly(elem._input_handle, false);
					}
				}
				evt.id = id;

				if (nexacro.BrowserType == "Edge" && !elem._checkActiveElement() && comp.autoselect) {
					nexacro._stopSysEvent(evt);
					elem._event_stop = false;
				}

				sysEvent._syshandler_onmousedown_forward(evt);

				if (!elem._parent_elem) {
					return true;
				}

				var is_seleted = (elem._parent_elem) ? elem._parent_elem.linkedcontrol._edit_base_api._is_selected() : false;

				if (elem._is_mousedown == true) {
					elem._on_sys_mousedown(evt.keyCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
				}

				if (elem._event_stop || (evt.ctrlKey && !is_seleted)) {
					nexacro._stopSysEvent(evt);
					elem._event_stop = false;
				}
				elem._is_mousedown = false;

				if (!nexacro.SupportTouch && !_win._cur_ldown_elem) {
					elem._inputhandler_onmouseup_forward(evt);
				}
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onmouseup = function (node, evt) {
			var elem = node._linked_element;
			if (elem && elem._on_sys_mouseup) {
				nexacro._stopPropagation(evt);

				var comp = elem._parent_elem.linkedcontrol;
				var _win = comp._getWindow();
				if (_win instanceof nexacro.PopupWindow) {
					_win = _win.parent;
				}

				var __win = _win._handle;
				var id = _win._custom_node_id;
				var sysEvent = nexacro._is_attach_childframe ? __win.nexacro_HTMLSysEvent[id] : __win.nexacro_HTMLSysEvent;
				elem._useTimer = false;
				elem._on_sys_mouseup(evt.keyCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);

				if (evt.button != 2 && elem._useTimer) {
					var copyEvt = {
					};
					if (nexacro.Browser == "IE") {
						for (var attr in evt) {
							copyEvt[attr] = evt[attr];
						}
					}
					else {
						copyEvt = evt;
					}

					nexacro.OnceCallbackTimer.callonce(comp, function () {
						if ((nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") && nexacro._getSysEventBtnCode(evt) == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
							evt.id = id;
							sysEvent._syshandler_lock_onmouseup_forward(copyEvt);
						}
						else {
							sysEvent._syshandler_onmouseup_forward(copyEvt);
						}
					});
					elem._useTimer = false;
				}
				else {
					if ((nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") && nexacro._getSysEventBtnCode(evt) == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
						evt.id = id;
						sysEvent._syshandler_lock_onmouseup_forward(evt);
					}
					else {
						sysEvent._syshandler_onmouseup_forward(evt);
					}
				}

				if (elem._event_stop) {
					if (nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") {
						evt.preventDefault();
						evt.stopped = true;
						elem._event_stop = false;
					}
				}

				return true;
			}
			return false;
		};

		nexacro._inputhandler_onmousemove = function (node, evt) {
			var elem = node._linked_element;
			if (elem && elem._on_sys_mousemove) {
				if ((nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") && nexacro._getSysEventBtnCode(evt) == nexacro_HTMLSysEvent.MOUSE_LBUTTON) {
					nexacro._stopPropagation(evt);
				}

				var comp = elem._parent_elem.linkedcontrol;
				var _win = comp._getWindow();
				if (_win instanceof nexacro.PopupWindow) {
					_win = _win.parent;
				}

				if (_win._cur_screen_pos.x == evt.screenX && _win._cur_screen_pos.y == evt.screenY) {
					return false;
				}

				var __win = _win._handle;
				var id = _win._custom_node_id;
				var sysEvent = nexacro._is_attach_childframe ? __win.nexacro_HTMLSysEvent[id] : __win.nexacro_HTMLSysEvent;
				if ((nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") && nexacro._getSysEventBtnCode(evt) == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
					evt.id = id;
					sysEvent._syshandler_lock_onmousemove_forward(evt);
				}

				elem._on_sys_mousemove();

				if (elem._isPreventDefault(comp, "ondrag")) {
					var pos = elem.getElementCaretPos();
					var p = (pos && pos != -1) ? pos.begin : 0;
					if (evt.screenX > elem._prev_x) {
						p = (pos && pos != -1) ? pos.end : 0;
					}
					elem.setElementSetSelect(p, p);
				}
				elem._prev_x = evt.screenX;
				return true;
			}
			return false;
		};


		nexacro._inputhandler_onkeydown = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				nexacro._stopPropagation(evt);
				var comp = elem._parent_elem.linkedcontrol;
				if (comp._is_subcontrol) {
					while (comp) {
						if (!comp._is_subcontrol) {
							break;
						}
						comp = comp.parent;
					}
				}

				if ((nexacro.isTouchInteraction && nexacro.SupportTouch) || nexacro._isMobile()) {
					var _form = comp.parent, stepcontrol = null;
					while (_form) {
						if (_form.stepcontrol) {
							stepcontrol = _form.stepcontrol;
							break;
						}
						else if (_form._is_form) {
							comp = _form;
						}
						_form = _form.parent;
					}

					if (stepcontrol) {
						var steppos = comp.positionstep;
						if (stepcontrol.stepindex != steppos) {
							stepcontrol.set_stepindex(steppos);
						}
					}
				}

				var _win = comp._getWindow();
				if (_win instanceof nexacro.PopupWindow) {
					_win = _win.parent;
				}

				var __win = _win._handle;
				var id = _win._custom_node_id;
				var sysEvent = nexacro._is_attach_childframe ? __win.nexacro_HTMLSysEvent[id] : __win.nexacro_HTMLSysEvent;
				evt.id = id;
				sysEvent._syshandler_onkeydown_forward(evt);

				var keyCode = nexacro._getSysEventKey(evt);
				if (keyCode == 229) {
					if (nexacro.Browser == "Chrome" && nexacro._isDesktop() && elem._is_maskedit) {
						if (evt.code == "Backspace") {
							keyCode = nexacro.Event.KEY_BACKSPACE;
						}
						else if (evt.code == "Delete") {
							keyCode = nexacro.Event.KEY_DELETE;
						}
					}
					else if (nexacro.OS == "iOS") {
						if (evt.key == "Backspace") {
							keyCode = nexacro.Event.KEY_BACKSPACE;
						}
					}
					else if (nexacro.Browser == "Gecko") {
						if (evt.code == "Lang2") {
							elem._is_lange2 = true;
						}
						else if (elem._is_lange2) {
							elem._is_lange2 = false;
						}
					}
				}

				elem._on_sys_keydown(keyCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);

				if (elem._event_stop) {
					nexacro._stopSysEvent(evt);
					elem._event_stop = false;
				}
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onkeyup = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				nexacro._stopPropagation(evt);

				var comp = elem._parent_elem.linkedcontrol;
				var _win = comp._getWindow();
				if (_win instanceof nexacro.PopupWindow) {
					_win = _win.parent;
				}

				elem._on_sys_keyup(nexacro._getSysEventKey(evt), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);

				var __win = _win._handle;
				var id = _win._custom_node_id;
				var sysEvent = nexacro._is_attach_childframe ? __win.nexacro_HTMLSysEvent[id] : __win.nexacro_HTMLSysEvent;
				evt.id = id;
				sysEvent._syshandler_onkeyup_forward(evt);

				if (elem._event_stop) {
					nexacro._stopSysEvent(evt);
					elem._event_stop = false;
				}

				return true;
			}
			return false;
		};

		nexacro._inputhandler_onselect = function (node, evt) {
			var elem = node._linked_element;
			if (elem) {
				elem._on_sys_select();
				return true;
			}
			return false;
		};

		nexacro._inputhandler_onselectionchange = function (node, evt) {
			var elem = node.activeElement._linked_element;
			if (elem && elem._on_sys_selectionchange) {
				elem._on_sys_selectionchange();
				return true;
			}
			return false;
		};

		nexacro.ControlElementBase = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pControlElementBase = nexacro._createPrototype(nexacro.Element, nexacro.ControlElementBase);
		nexacro.ControlElementBase.prototype = _pControlElementBase;

		_pControlElementBase._type_name = "ControlElementBase";

		_pControlElementBase.enable = true;
		_pControlElementBase.tabindex = -1;
		_pControlElementBase.zindex = -1;
		_pControlElementBase.font = null;
		_pControlElementBase.color = null;
		_pControlElementBase.cursor = null;
		_pControlElementBase.client_left = 0;
		_pControlElementBase.client_top = 0;
		_pControlElementBase.client_width = 0;
		_pControlElementBase.client_height = 0;
		_pControlElementBase.border = null;
		_pControlElementBase.bordertype = null;
		_pControlElementBase.background = null;
		_pControlElementBase.gradation = null;
		_pControlElementBase.opacity = 100;
		_pControlElementBase.padding = null;
		_pControlElementBase.padding_left = 0;
		_pControlElementBase.padding_top = 0;
		_pControlElementBase.padding_right = 0;
		_pControlElementBase.padding_bottom = 0;
		_pControlElementBase.position_step = undefined;
		_pControlElementBase.linkedcontrol = null;

		_pControlElementBase.accessibility_role = "";
		_pControlElementBase.accessibility_enable = false;
		_pControlElementBase.accessibility_label = "";
		_pControlElementBase.accessibility_desclevel = "";
		_pControlElementBase.accessibility_description = "";
		_pControlElementBase.accessibility_action = "";
		_pControlElementBase._accessibility_value = undefined;
		_pControlElementBase._accessibility_stat_disabled = undefined;
		_pControlElementBase._accessibility_stat_hidden = undefined;
		_pControlElementBase._accessibility_stat_checked = undefined;
		_pControlElementBase._accessibility_stat_pressed = undefined;
		_pControlElementBase._accessibility_stat_selected = undefined;
		_pControlElementBase._accessibility_stat_expanded = undefined;
		_pControlElementBase._accessibility_stat_autocomplete = undefined;
		_pControlElementBase._accessibility_flag_haspopup = undefined;
		_pControlElementBase._accessibility_flag_focusable = undefined;
		_pControlElementBase._accessibility_flag_readonly = undefined;
		_pControlElementBase._accessibility_flag_password = undefined;
		_pControlElementBase._accessibility_flag_multiselectable = undefined;
		_pControlElementBase._accessibility_flag_selectable = undefined;
		_pControlElementBase._accessibility_flag_defaultbutton = undefined;
		_pControlElementBase._accessibility_prop_itemcount = undefined;
		_pControlElementBase._accessibility_prop_itemindex = undefined;
		_pControlElementBase._accessibility_prop_valuemax = undefined;
		_pControlElementBase._accessibility_prop_valuemin = undefined;

		_pControlElementBase._dom_border = null;
		_pControlElementBase._inner_left = 0;
		_pControlElementBase._inner_top = 0;
		_pControlElementBase._inner_width = 0;
		_pControlElementBase._inner_height = 0;
		_pControlElementBase._node_width = 0;
		_pControlElementBase._node_height = 0;
		_pControlElementBase._background_style = 0;
		_pControlElementBase._node_opacity_str = "";
		_pControlElementBase._node_opacity = 100;
		_pControlElementBase._node_bkcolor = "";
		_pControlElementBase._node_gradation = "";
		_pControlElementBase._node_bkurl = "";
		_pControlElementBase._node_bkrepeat = "";
		_pControlElementBase._node_bkpos = "";

		_pControlElementBase._client_element = null;
		_pControlElementBase._vml_elem = null;
		_pControlElementBase._bkimg_elem = null;

		_pControlElementBase.create = nexacro._emptyFn;
		_pControlElementBase.destroy = nexacro._emptyFn;
		_pControlElementBase.clearContents = nexacro._emptyFn;

		_pControlElementBase.setElementStepCount = nexacro._emptyFn;
		_pControlElementBase.setElementStepIndex = nexacro._emptyFn;

		_pControlElementBase.setLinkedControl = function (control) {
			if (!this.linkedcontrol && control) {
				this.parent = control;
				this.linkedcontrol = control;
			}
		};

		_pControlElementBase.setElementPositionBasis = function (position) {
			if (this.position != position) {
				this.position = position;

				if (this._handle) {
					if (!nexacro._allow_default_pinchzoom && nexacro._isDesktop()) {
						if (position.toLowerCase() == "fixed") {
							nexacro.__setDOMNodeStyleFixed(this._handle.style);
						}
						else {
							nexacro.__setDOMNodeStyleAbsolute(this._handle.style);
						}
					}
				}
			}
		};

		_pControlElementBase.setElementPositionStep = function (position_step) {
			if (this.position_step != position_step || position_step == -1) {
				this.position_step = position_step;

				var _handle = this._handle;
				if (_handle && this._parent_elem) {
					var old_owner_elem = this._owner_elem;
					var _owner_elem = this._parent_elem.getContainerElement(position_step);
					if (old_owner_elem && old_owner_elem._dest_handle && _owner_elem && _owner_elem._dest_handle) {
						nexacro.__unlinkDOMNode(old_owner_elem._dest_handle, this._handle);
						nexacro.__appendDOMNode(_owner_elem._dest_handle, this._handle);
						this._owner_elem = _owner_elem;
					}
				}
			}
		};

		_pControlElementBase.setElementEnable = function (enable) {
			if (this.enable != enable) {
				this.enable = enable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeEnable(_handle, enable);
				}
			}
		};

		_pControlElementBase.setElementTabIndex = function (tabindex) {
			if (this.tabindex != tabindex) {
				this.tabindex = tabindex;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeTabIndex(_handle, tabindex);
				}
			}
		};

		_pControlElementBase.setElementZIndex = function (zindex) {
			if (this.zindex != zindex) {
				this.zindex = zindex;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleZindex(_handle.style, zindex);
				}
			}
		};

		_pControlElementBase.setElementFont = nexacro._emptyFn;

		_pControlElementBase.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (this._client_element) {
				this._client_element.setElementColor(color);
			}
		};

		_pControlElementBase.setElementCursor = function (cursor) {
			if (this.cursor != cursor) {
				this.cursor = cursor;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleCursor(_handle.style, cursor);
				}
			}
		};

		_pControlElementBase.setElementToolTip = function (tooltiptext, tooltiptype) {
			if (tooltiptext === undefined) {
				tooltiptext = "";
			}
			if (this.tooltiptext != tooltiptext || this.tooltiptype != tooltiptype) {
				this.tooltiptext = tooltiptext;
				this.tooltiptype = tooltiptype;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeToolTip(_handle, tooltiptext, tooltiptype);
				}
			}
		};

		_pControlElementBase.setElementShadow = function (shadow) {
			this.shadow = shadow;
			var _handle = this._handle;
			if (_handle) {
				var _shadow = shadow ? shadow._getStyleObject(this._isRtl()) : null;

				nexacro.__setDOMNodeStyleShadow(_handle.style, _shadow);
			}
		};

		_pControlElementBase.setElementFocus = function (selffocus) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setDOMNodeFocus(_handle, selffocus);
				nexacro.__setLastFocusedElement(this);
			}
		};

		_pControlElementBase.setElementOpacity = function (opacity) {
			this.opacity = opacity;
			var _handle = this._handle;
			if (_handle) {
				this._setControlOpacity(this, _handle, (parseInt(opacity.value)));
			}
		};

		_pControlElementBase.setElementAlign = nexacro._emptyFn;
		_pControlElementBase.setElementAlignXY = nexacro._emptyFn;

		_pControlElementBase.setElementPadding = nexacro._emptyFn;
		_pControlElementBase.setElementPaddingXY = nexacro._emptyFn;

		_pControlElementBase.setElementHittestType = nexacro._emptyFn;

		_pControlElementBase.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;
				this._setControlSize(this, this._handle, width, height);
				this._updateClientSize();
			}
		};

		_pControlElementBase.setElementBorder = function (border, bordertype) {
			this.border = border;
			this.bordertype = bordertype;
			this._setControlBorder(this, this._handle, border, bordertype);
			this._updateClientSize();
		};

		_pControlElementBase.setElementBackground = function (background, gradation) {
			this.background = background;
			this.gradation = gradation;

			var bRtl = this._isRtl();
			var _gradation = gradation;
			var _background = background;

			_gradation = gradation ? gradation._getStyleObject(bRtl) : null;
			_background = (background && background != "none") ? background._getStyleObject(bRtl) : null;

			this._setControlBackground(this, this._handle, _background, _gradation);
		};

		_pControlElementBase.setElementAccessibilityRole = function (role) {
			var accrole = nexacro._roleList[role];
			if (this.accessibility_role != accrole) {
				this.accessibility_role = accrole;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityRole(_handle, accrole);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityLabel = function (label) {
			if (this.accessibility_label != label) {
				this.accessibility_label = label;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityLabel(_handle, label);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityEnable = function (enable) {
			if (this.accessibility_enable != enable) {
				this.accessibility_enable = enable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityEnable(_handle, enable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityDescription = function (desc) {
			if (this.accessibility_description != desc) {
				this.accessibility_description = desc;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityDescription(_handle, desc);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityDescLevel = function (desclevel) {
		};

		_pControlElementBase.setElementAccessibilityAction = function (action) {
			this.accessibility_action = action;
		};

		_pControlElementBase.setElementAccessibilityValue = function (value, input, bfocus) {
			if (this._accessibility_value != value) {
				this._accessibility_value = value;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityValue(_handle, value, input, bfocus);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatDisabled = function (disabled) {
			if (this._accessibility_stat_disabled != disabled) {
				this._accessibility_stat_disabled = disabled;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatDisabled(_handle, disabled);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatHidden = function (hidden) {
			if (this._accessibility_stat_hidden != hidden) {
				this._accessibility_stat_hidden = hidden;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatHidden(_handle, hidden);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityHidden = function (hidden) {
			if (this._client_element) {
				var _handle = this._client_element._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityHidden(_handle, hidden);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatChecked = function (checked) {
			if (this._accessibility_stat_checked != checked) {
				this._accessibility_stat_checked = checked;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatChecked(_handle, checked);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatPressed = function (pressed) {
			if (this._accessibility_stat_pressed != pressed) {
				this._accessibility_stat_pressed = pressed;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatPressed(_handle, pressed);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatSelected = function (selected) {
			if (this._accessibility_stat_selected != selected) {
				this._accessibility_stat_selected = selected;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatSelected(_handle, selected);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatExpanded = function (expanded) {
			if (this._accessibility_stat_expanded != expanded) {
				this._accessibility_stat_expanded = expanded;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatExpanded(_handle, expanded);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatAutoComplete = function (autocomplete) {
			if (this._accessibility_stat_autocomplete != autocomplete) {
				this._accessibility_stat_autocomplete = autocomplete;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatAutoComplete(_handle, autocomplete);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagHasPopup = function (haspopup) {
			if (this._accessibility_flag_haspopup != haspopup) {
				this._accessibility_flag_haspopup = haspopup;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityStatHasPopup(_handle, haspopup);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagFocusable = function (focusable) {
			if (this._accessibility_flag_focusable != focusable) {
				this._accessibility_flag_focusable = focusable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagFocusable(_handle, focusable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagReadOnly = function (readonly) {
			if (this._accessibility_flag_readonly != readonly) {
				this._accessibility_flag_readonly = readonly;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagReadOnly(_handle, readonly);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagPassword = function (password) {
			if (this._accessibility_flag_password != password) {
				this._accessibility_flag_password = password;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagPassword(_handle, password);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagMultiSelectable = function (multiselectable) {
			if (this._accessibility_flag_multiselectable != multiselectable) {
				this._accessibility_flag_multiselectable = multiselectable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagMultiSelectable(_handle, multiselectable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagSelectable = function (selectable) {
			if (this._accessibility_flag_selectable != selectable) {
				this._accessibility_flag_selectable = selectable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagSelectable(_handle, selectable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagDefaultButton = function (defaultbutton) {
			if (this._accessibility_flag_defaultbutton != defaultbutton) {
				this._accessibility_flag_defaultbutton = defaultbutton;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagDefaultButton(_handle, defaultbutton);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagMultiLine = function (multiline) {
			if (this._accessibility_flag_multiline != multiline) {
				this._accessibility_flag_multiline = multiline;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityFlagMultiLine(_handle, multiline);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoCount = function (count) {
			if (this._accessibility_prop_infocount != count) {
				this._accessibility_prop_infocount = count;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityInfoCount(_handle, count);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoIndex = function (index) {
			if (this._accessibility_prop_infoindex != index) {
				this._accessibility_prop_infoindex = index;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityInfoIndex(_handle, index);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoValueMax = function (valuemax) {
			if (this._accessibility_prop_infovaluemax != valuemax) {
				this._accessibility_prop_infovaluemax = valuemax;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityInfoValueMax(_handle, valuemax);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoValueMin = function (valuemin) {
			if (this._accessibility_prop_infovaluemin != valuemin) {
				this._accessibility_prop_infovaluemin = valuemin;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityInfoValueMin(_handle, valuemin);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoValueCur = function (valuecur) {
			if (this._accessibility_prop_infovaluecur != valuecur) {
				this._accessibility_prop_infovaluecur = valuecur;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityInfoValueCur(_handle, valuecur);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoLevel = function (level) {
			if (this._accessibility_prop_infolevel != level) {
				this._accessibility_prop_infolevel = level;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityInfoLevel(_handle, level);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityHotKey = function (hotkey) {
			if (this._accessibility_prop_hotkey != hotkey) {
				this._accessibility_prop_hotkey = hotkey;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeAccessibilityHotKey(_handle, hotkey);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityActiveDescendant = function (activedescendant_elem) {
			this._accessibility_prop_activedescendant = activedescendant_elem.linkedcontrol._unique_id;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setDOMNodeAccessibilityActiveDescendant(_handle, activedescendant_elem.linkedcontrol._unique_id);
			}
		};

		_pControlElementBase.setElementAccessibilityStatFocus = function (label) {
			var notifyvalue;
			if (label) {
				notifyvalue = label;
			}
			else {
				var readlabel = this._makeAccessibilityLabelbyReadtype(this);
				this.accessibility_readlabel = readlabel;
				notifyvalue = readlabel;
			}

			var _handle = this._handle;
			if (_handle) {
				nexacro.__notifyAccessibility(_handle, notifyvalue, "focus");
			}
		};

		_pControlElementBase.setElementAccessibilityNotifyEvent = nexacro._emptyFn;





		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.OS == "iOS") {
			_pControlElementBase._setDomStyleVisible = function (_handle_style, bvisible) {
				var val = bvisible ? "" : "none";
				nexacro.__setDOMNodeStyleDisplay(_handle_style, val);
			};
			_pControlElementBase.setElementVisible = function (visible) {
				var _handle = this._handle;

				if (this.visible != visible) {
					this.visible = visible;
					if (_handle) {
						nexacro.__setDOMNodeStyleDisplay(_handle.style, visible ? "" : "none");

						if (nexacro.OS == "Android" || nexacro.OS == "iOS") {
							if (this.visible) {
								var v = this.zindex;
								if (!v || v < 0) {
									v = "";
								}
								nexacro.__setDOMNodeStyleZindex(_handle.style, v);
							}
							else {
								nexacro.__setDOMNodeStyleZindex(_handle.style, nexacro._zindex_hide);
							}
						}
					}
				}
			};
		}
		else {
			_pControlElementBase._setDomStyleVisible = function (_handle_style, bvisible) {
				nexacro.__setDOMNodeStyleVisible(_handle_style, bvisible);
			};
		}

		_pControlElementBase._refreshForeground = function (_handle, handle_style) {
			var bRtl = this._isRtl();

			if (!this.visible) {
				this._setDomStyleVisible(handle_style, false);
			}
			if (!this.enable) {
				nexacro.__setDOMNodeEnable(_handle, false);
			}
			if (this.tabindex >= -1) {
				nexacro.__setDOMNodeTabIndex(_handle, this.tabindex);
			}
			if (this.zindex >= 0) {
				nexacro.__setDOMNodeStyleZindex(handle_style, this.zindex);
			}
			if (this.cursor) {
				nexacro.__setDOMNodeStyleCursor(handle_style, this.cursor);
			}
			if (this.tooltiptext) {
				nexacro.__setDOMNodeToolTip(_handle, this.tooltiptext, this.tooltiptype);
			}
			if (this.shadow) {
				var _shadow = this.shadow._getStyleObject(bRtl);
				nexacro.__setDOMNodeStyleShadow(handle_style, _shadow);
			}
			if (this.opacity) {
				this._setControlOpacity(this, this._handle, (parseInt(this.opacity.value)));
			}


			if (nexacro._enableaccessibility) {
				if (this.accessibility_role) {
					nexacro.__setDOMNodeAccessibilityRole(_handle, this.accessibility_role);
				}

				if (this.accessibility_enable) {
					if (this.accessibility_enable) {
						nexacro.__setDOMNodeAccessibilityEnable(_handle, this.accessibility_enable);
					}
					if (this.accessibility_desclevel) {
						nexacro.__setDOMNodeAccessibilityDescLevel(_handle, this.accessibility_desclevel);
					}
					if (this.accessibility_description) {
						nexacro.__setDOMNodeAccessibilityDescription(_handle, this.accessibility_description);
					}
					var readlabel = this._makeAccessibilityLabelbyReadtype(this);
					if (readlabel != this.accessibility_readlabel) {
						this.accessibility_readlabel = readlabel;
						nexacro.__setDOMNodeAccessibilityLabel(_handle, this.accessibility_readlabel);
					}
				}
				else {
					nexacro.__setDOMNodeAccessibilityEnable(_handle, this.accessibility_enable);
				}

				if (this._accessibility_value) {
					nexacro.__setDOMNodeAccessibilityValue(_handle, this._accessibility_value);
				}

				if (this._accessibility_stat_disabled) {
					nexacro.__setDOMNodeAccessibilityStatDisabled(_handle, this._accessibility_stat_disabled);
				}
				if (this._accessibility_stat_hidden) {
					nexacro.__setDOMNodeAccessibilityStatHidden(_handle, this._accessibility_stat_hidden);
				}
				if (this._accessibility_stat_checked) {
					nexacro.__setDOMNodeAccessibilityStatChecked(_handle, this._accessibility_stat_checked);
				}

				if (this._accessibility_stat_pressed) {
					nexacro.__setDOMNodeAccessibilityStatPressed(_handle, this._accessibility_stat_pressed);
				}
				if (this._accessibility_stat_selected) {
					nexacro.__setDOMNodeAccessibilityStatSelected(_handle, this._accessibility_stat_selected);
				}
				if (this._accessibility_stat_expanded) {
					nexacro.__setDOMNodeAccessibilityStatExpanded(_handle, this._accessibility_stat_expanded);
				}
				if (this._accessibility_stat_autocomplete) {
					nexacro.__setDOMNodeAccessibilityStatAutoComplete(_handle, this._accessibility_stat_autocomplete);
				}

				if (this._accessibility_flag_haspopup) {
					nexacro.__setDOMNodeAccessibilityStatHasPopup(_handle, this._accessibility_flag_haspopup);
				}
				if (this._accessibility_flag_focusable) {
					nexacro.__setDOMNodeAccessibilityFlagFocusable(_handle, this._accessibility_flag_focusable);
				}
				if (this._accessibility_flag_readonly) {
					nexacro.__setDOMNodeAccessibilityFlagReadOnly(_handle, this._accessibility_flag_readonly);
				}

				if (this._accessibility_flag_password) {
					nexacro.__setDOMNodeAccessibilityFlagPassword(_handle, this._accessibility_flag_password);
				}
				if (this._accessibility_flag_multiselectable) {
					nexacro.__setDOMNodeAccessibilityFlagMultiSelectable(_handle, this._accessibility_flag_multiselectable);
				}
				if (this._accessibility_flag_selectable) {
					nexacro.__setDOMNodeAccessibilityFlagSelectable(_handle, this._accessibility_flag_selectable);
				}
				if (this._accessibility_flag_defaultbutton) {
					nexacro.__setDOMNodeAccessibilityFlagDefaultButton(_handle, this._accessibility_flag_defaultbutton);
				}
				if (this._accessibility_flag_multiline) {
					nexacro.__setDOMNodeAccessibilityFlagMultiLine(_handle, this._accessibility_flag_multiline);
				}

				if (this._accessibility_prop_itemcount) {
					nexacro.__setDOMNodeAccessibilityInfoCount(_handle, this._accessibility_prop_itemcount);
				}
				if (this._accessibility_prop_itemindex) {
					nexacro.__setDOMNodeAccessibilityInfoIndex(_handle, this._accessibility_prop_itemindex);
				}

				if (this._accessibility_prop_valuemax) {
					nexacro.__setDOMNodeAccessibilityInfoValueMax(_handle, this._accessibility_prop_valuemax);
				}
				if (this._accessibility_prop_valuemin) {
					nexacro.__setDOMNodeAccessibilityInfoValueMin(_handle, this._accessibility_prop_valuemin);
				}
			}
		};

		_pControlElementBase._convertContainerLeftForRtlLayout = function (left, width) {
			if (this._isRtl()) {
				left = this._inner_width - width - left;
			}
			return left;
		};


		_pControlElementBase._changeTransform3dMode = function () {
			if (nexacro.Browser_Transform3d === 0) {
				nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y, bRtl) {
					nexacro.__setDOMNodeStylePos(node_style, offset_x, offset_y, bRtl);
				};
				nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos, bRtl) {
					if (bRtl) {
						node_style.right = (pos | 0) + "px";
						node_style.left = "";
					}
					else {
						node_style.left = (pos | 0) + "px";
						node_style.right = "";
					}
				};
				nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
					node_style.top = pos + "px";
				};
			}
			else if (nexacro.Browser_Transform3d == 1) {
				nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
					node_style.transform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
				};
				nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
					node_style.transform = "translateX(" + pos + "px)";
				};
				nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
					node_style.transform = "translateY(" + pos + "px)";
				};
			}
			else if (nexacro.Browser_Transform3d == 2) {
				if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
					nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
						node_style.msTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
					};
					nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
						node_style.msTransform = "translateX(" + pos + "px)";
					};
					nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
						node_style.msTransform = "translateY(" + pos + "px)";
					};
				}
				else if (nexacro.BrowserType == "WebKit") {
					nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
						node_style.WebkitTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
					};
					nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
						node_style.WebkitTransform = "translateX(" + pos + "px)";
					};
					nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
						node_style.WebkitTransform = "translateY(" + pos + "px)";
					};
				}
				else if (nexacro.Browser == "Gecko") {
					nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
						node_style.MozTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
					};
					nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
						node_style.MozTransform = "translateX(" + pos + "px)";
					};
					nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
						node_style.MozTransform = "translateY(" + pos + "px)";
					};
				}
				else if (nexacro.Browser == "Opera") {
					nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
						node_style.OTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
					};
					nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
						node_style.OTransform = "translateX(" + pos + "px)";
					};
					nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
						node_style.OTransform = "translateY(" + pos + "px)";
					};
				}
			}
		};
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			_pControlElementBase._refreshVMLContainerElement = function (control_elem, target_elem) {
				if (control_elem && target_elem && control_elem._dest_handle && target_elem._dest_handle && control_elem._client_element && control_elem._client_element._handle) {
					var target_owner_elem = target_elem._owner_elem;
					nexacro.__unlinkDOMNode(control_elem._handle, target_elem._dest_handle);
					nexacro.__insertDOMNode(control_elem._dest_handle, target_elem._dest_handle, control_elem._client_element._handle);
					target_elem._owner_elem = target_owner_elem;
					return true;
				}
				return false;
			};


			_pControlElementBase._setControlOpacity = function (element, _handle, sysopacity) {
				var filter_str = "";
				if (sysopacity < 0) {
					sysopacity = 0;
				}
				if (sysopacity < 100) {
					filter_str = "progid:DXImageTransform.Microsoft.Alpha(opacity=" + sysopacity + ")";
				}

				if (this._node_opacity_str != filter_str) {
					this._node_opacity_str = filter_str;
					if (_handle) {
						var handle_style = _handle.style;
						nexacro.__setDOMNodeStyleForceVisibility(handle_style, true);
						if (filter_str) {
							if (this._node_gradation) {
								handle_style.filter = this._node_gradation + ' ' + filter_str;
							}
							else {
								handle_style.filter = filter_str;
							}
						}
						else {
							if (this._node_gradation) {
								handle_style.filter = this._node_gradation;
							}
							else {
								handle_style.filter = "";
							}
						}
						nexacro.__setDOMNodeStyleVisible(handle_style, this.visible);
					}
				}
			};

			if ((nexacro.BrowserVersion <= 6 || nexacro.checkDocument.quirksMode)) {
				_pControlElementBase._setControlSize = function (element, _handle, width, height) {
					var inner_width = width;
					var inner_height = height;

					var border = this.border;
					if (border && !border._is_real_empty()) {
						inner_width = width - border._getBorderWidth();
						inner_height = height - border._getBorderHeight();
						if (inner_width < 0) {
							inner_width = 0;
						}
						if (inner_height < 0) {
							inner_height = 0;
						}
					}

					if (this._node_width != width || this._node_height != height) {
						this._node_width = width;
						this._node_height = height;
						if (_handle) {
							nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
						}
					}
					if (this._inner_width != inner_width || this._inner_height != inner_height) {
						this._inner_width = inner_width;
						this._inner_height = inner_height;

						var background_elem = this._bkimage_elem;
						if (background_elem) {
							background_elem.setElementSize(inner_width, inner_height);
						}
					}
				};
			}
			else {
				_pControlElementBase._setControlSize = function (element, _handle, width, height) {
					var inner_width = width;
					var inner_height = height;

					var border = this.border;
					if (border && !border._is_real_empty()) {
						inner_width = width - border._getBorderWidth();
						inner_height = height - border._getBorderHeight();

						if (inner_width < 0) {
							inner_width = 0;
						}
						if (inner_height < 0) {
							inner_height = 0;
						}
					}

					if (this._inner_width != inner_width || this._inner_height != inner_height) {
						this._node_width = this._inner_width = inner_width;
						this._node_height = this._inner_height = inner_height;

						if (_handle) {
							nexacro.__setDOMNodeStyleSize(_handle.style, inner_width, inner_height);
						}

						var background_elem = this._bkimage_elem;
						if (background_elem) {
							background_elem.setElementSize(inner_width, inner_height);
						}
					}
				};
			}

			if ((nexacro.BrowserVersion <= 6 || nexacro.checkDocument.quirksMode)) {
				_pControlElementBase._isVML = function () {
					if (this._vml_elem) {
						return true;
					}
					return false;
				};

				_pControlElementBase._setControlBorder = function (element, _handle, border, bordertype) {
					var width = element.width;
					var height = element.height;

					var inner_left = 0;
					var inner_top = 0;
					var inner_width = width;
					var inner_height = height;

					var usevml = application.usevml;

					var round = false;
					if (bordertype && bordertype._isRound()) {
						round = true;
					}

					if (border && !border._is_real_empty()) {
						if (usevml && round) {
							inner_left = border._left_width;
							inner_top = border._top_width;
						}
						inner_width = width - border._getBorderWidth();
						inner_height = height - border._getBorderHeight();
						if (inner_width < 0) {
							inner_width = 0;
						}
						if (inner_height < 0) {
							inner_height = 0;
						}
					}

					var handle_style = (_handle ? _handle.style : null);
					var vml_elem = this._vml_elem;
					if (usevml && round) {
						if (this._dom_border) {
							this._dom_border = null;
							if (_handle) {
								nexacro.__setDOMNodeStyleBorder(_handle.style, null);
							}
						}
						this._clearDOMBackgroundOnly(_handle);

						if (vml_elem) {
							vml_elem.setElementSize(element.width, element.height);
							vml_elem.setVMLBorder(bordertype, border);
							this._vml_elem = vml_elem;
							if (this.background) {
								this._setControlBackground(element, _handle, this.background, this.gradation);
							}
						}
						else {
							vml_elem = new nexacro._VMLContainerElement(element);
							vml_elem.setElementSize(element.width, element.height);
							vml_elem.setVMLBorder(bordertype, border);
							this._vml_elem = vml_elem;
							this._setControlBackground(element, _handle, this.background, this.gradation);
							if (_handle) {
								var before_node = _handle.firstChild;
								vml_elem.create(before_node);
							}
						}
					}
					else {
						if (this._dom_border != border) {
							this._dom_border = border;
							if (_handle) {
								nexacro.__setDOMNodeStyleBorder(_handle.style, border);
							}
						}
						if (vml_elem) {
							vml_elem.destroy();
							vml_elem = null;
							this._vml_elem = vml_elem;
							this._setControlBackground(element, _handle, this.background, this.gradation);
						}
					}

					var ischangedpos = this._inner_left != inner_left || this._inner_top != inner_top;
					var ischangedsize = this._inner_width != inner_width || this._inner_height != inner_height;
					var background_elem = this._bkimage_elem;

					if (ischangedpos) {
						this._inner_left = inner_left;
						this._inner_top = inner_top;
						if (background_elem) {
							background_elem.setElementPosition(inner_left, inner_top);
						}
					}
					if (ischangedsize) {
						this._inner_width = inner_width;
						this._inner_height = inner_height;
						if (background_elem) {
							background_elem.setElementSize(inner_width, inner_height);
						}
					}
				};
			}
			else {
				_pControlElementBase._isVML = function () {
					if (this._vml_elem) {
						return true;
					}
					return false;
				};

				_pControlElementBase._setControlBorder = function (element, _handle, border, bordertype) {
					var width = element.width;
					var height = element.height;

					var inner_left = 0;
					var inner_top = 0;
					var inner_width = width;
					var inner_height = height;

					var usevml = application.usevml;

					var round = false;
					if (bordertype && bordertype._isRound()) {
						round = true;
					}

					if (border && !border._is_real_empty()) {
						if (usevml && round) {
							inner_left = border._left_width;
							inner_top = border._top_width;
						}
						inner_width = width - border._getBorderWidth();
						inner_height = height - border._getBorderHeight();
						if (inner_width < 0) {
							inner_width = 0;
						}
						if (inner_height < 0) {
							inner_height = 0;
						}
					}

					var vml_elem = this._vml_elem;
					if (usevml && round) {
						if (this._node_width != width || this._node_height != height) {
							this._node_width = width;
							this._node_height = height;
							if (_handle) {
								nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
							}
						}

						if (this._dom_border) {
							this._dom_border = null;
							if (_handle) {
								nexacro.__setDOMNodeStyleBorder(_handle.style, null);
							}
						}
						this._clearDOMBackgroundOnly(_handle);

						if (vml_elem) {
							vml_elem.setElementSize(element.width, element.height);
							vml_elem.setVMLBorder(bordertype, border);
							this._vml_elem = vml_elem;
							if (this.background) {
								this._setControlBackground(element, _handle, this.background, this.gradation);
							}
						}
						else {
							vml_elem = new nexacro._VMLContainerElement(element);
							vml_elem.setElementSize(element.width, element.height);
							vml_elem.setVMLBorder(bordertype, border);
							this._vml_elem = vml_elem;
							this._setControlBackground(element, _handle, this.background, this.gradation);
							if (_handle) {
								var before_node = _handle.firstChild;
								vml_elem.create(before_node);
							}
						}
					}
					else {
						if (this._node_width != inner_width || this._node_height != inner_height) {
							this._node_width = inner_width;
							this._node_height = inner_height;
							if (_handle) {
								nexacro.__setDOMNodeStyleSize(_handle.style, inner_width, inner_height);
							}
						}

						if (this._dom_border != border) {
							this._dom_border = border;
							if (_handle) {
								nexacro.__setDOMNodeStyleBorder(_handle.style, border);
							}
						}

						if (vml_elem) {
							vml_elem.destroy();
							vml_elem = null;
							this._vml_elem = vml_elem;
							this._setControlBackground(element, _handle, this.background, this.gradation);
						}
					}

					var ischangedpos = this._inner_left != inner_left || this._inner_top != inner_top;
					var ischangedsize = this._inner_width != inner_width || this._inner_height != inner_height;
					var background_elem = this._bkimage_elem;

					if (ischangedpos) {
						this._inner_left = inner_left;
						this._inner_top = inner_top;
						if (background_elem) {
							background_elem.setElementPosition(inner_left, inner_top);
						}
					}
					if (ischangedsize) {
						this._inner_width = inner_width;
						this._inner_height = inner_height;
						if (background_elem) {
							background_elem.setElementSize(inner_width, inner_height);
						}
					}
				};
			}

			_pControlElementBase._setDOMBackgroundOnly = function (_handle, syscolor, sysgradation) {
				if (_handle) {
					var handle_style = _handle ? _handle.style : null;

					if (this._node_bkcolor != syscolor) {
						this._node_bkcolor = syscolor;
						handle_style.backgroundColor = (syscolor ? syscolor : "transparent");
					}
					if (this._node_gradation != sysgradation) {
						this._node_gradation = sysgradation;
						nexacro.__setDOMNodeStyleForceVisibility(handle_style, true);
						if (sysgradation) {
							if (this._node_opacity_str) {
								handle_style.filter = sysgradation + ' ' + this._node_opacity_str;
							}
							else {
								handle_style.filter = sysgradation;
							}
						}
						else {
							if (this._node_opacity_str) {
								handle_style.filter = this._node_opacity_str;
							}
							else {
								handle_style.filter = "";
							}
						}
						nexacro.__setDOMNodeStyleVisible(handle_style, this.visible);
					}
					if (this._node_bkurl) {
						this._node_bkurl = "";
						this._node_bkrepeat = "";
						this._node_bkpos = "";
						handle_style.backgroundImage = "";
					}
				}
				else {
					this._node_bkcolor = syscolor;
					this._node_gradation = sysgradation;
					this._node_bkurl = "";
					this._node_bkrepeat = "";
					this._node_bkpos = "";
				}
			};

			_pControlElementBase._setDOMBackground = function (_handle, syscolor, sysgradation, url, repeat, posx, posy) {
				var bkpos = posx + "% " + posy + "%";
				if (repeat == "") {
					repeat = "no-repeat";
				}
				syscolor = (syscolor ? syscolor : "transparent");

				if (_handle) {
					var handle_style = _handle.style;
					if (this._node_bkcolor != syscolor) {
						this._node_bkcolor = syscolor;
						handle_style.backgroundColor = syscolor;
					}
					if (this._node_gradation != sysgradation) {
						this._node_gradation = sysgradation;
						nexacro.__setDOMNodeStyleForceVisibility(handle_style, true);
						if (sysgradation) {
							if (this._node_opacity_str) {
								handle_style.filter = sysgradation + ' ' + this._node_opacity_str;
							}
							else {
								handle_style.filter = sysgradation;
							}
						}
						else {
							if (this._node_opacity_str) {
								handle_style.filter = this._node_opacity_str;
							}
							else {
								handle_style.filter = "";
							}
						}
						nexacro.__setDOMNodeStyleVisible(handle_style, this.visible);
					}

					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
						if (this.linkedcontrol._is_subcontrol == true && syscolor == "transparent" && url == "") {
							url = null;
						}
					}

					if (this._background_style != 0 || this._node_bkurl != url || this._node_bkrepeat != repeat || this._node_bkpos != bkpos) {
						this._node_bkurl = url;
						this._node_bkrepeat = repeat;
						this._node_bkpos = bkpos;

						if (this._bkimage_elem) {
							this._bkimage_elem.destroy();
							this._bkimage_elem = null;
							this._background_style = 0;
						}

						if (url) {
							var url2 = "url(\"" + url + "\")";
							handle_style.backgroundImage = url2;
							handle_style.backgroundRepeat = repeat;
							handle_style.backgroundPosition = bkpos;
						}
						else {
							handle_style.backgroundImage = "";
						}
					}
				}
				else {
					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
						if (this.linkedcontrol._is_subcontrol == true && syscolor == "transparent" && url == "") {
							url = null;
						}
					}

					this._node_bkcolor = syscolor;
					this._node_gradation = sysgradation;
					this._node_bkurl = url;
					this._node_bkrepeat = repeat;
					this._node_bkpos = bkpos;

					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
						this._bkimage_elem = null;
						this._background_style = 0;
					}
				}
			};

			_pControlElementBase._clearDOMBackgroundOnly = function (_handle) {
				if (_handle) {
					var handle_style = _handle.style;
					if (this._node_bkcolor) {
						this._node_bkcolor = "";
						handle_style.backgroundColor = "transparent";
					}
					if (this._node_gradation) {
						this._node_gradation = "";
						nexacro.__setDOMNodeStyleForceVisibility(handle_style, true);
						if (this._node_opacity_str) {
							handle_style.filter = this._node_opacity_str;
						}
						else {
							handle_style.filter = "";
						}
						nexacro.__setDOMNodeStyleVisible(handle_style, this.visible);
					}
					if (this._node_bkurl) {
						this._node_bkurl = "";
						this._node_bkrepeat = "";
						this._node_bkpos = "";
						handle_style.backgroundImage = "";
					}
				}
				else {
					this._node_bkcolor = "";
					this._node_gradation = "";
					this._node_bkurl = "";
					this._node_bkrepeat = "";
					this._node_bkpos = "";
				}
			};

			_pControlElementBase._clearDOMBackground = function (_handle) {
				if (_handle) {
					var handle_style = _handle.style;
					if (this._node_bkcolor) {
						this._node_bkcolor = "";
						handle_style.backgroundColor = "transparent";
					}
					if (this._node_gradation) {
						this._node_gradation = "";
						nexacro.__setDOMNodeStyleForceVisibility(handle_style, true);
						if (this._node_opacity_str) {
							handle_style.filter = this._node_opacity_str;
						}
						else {
							handle_style.filter = "";
						}
						nexacro.__setDOMNodeStyleVisible(handle_style, this.visible);
					}

					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
						this._bkimage_elem = null;
						this._background_style = 0;
					}

					if (this._node_bkurl) {
						this._node_bkurl = "";
						this._node_bkrepeat = "";
						this._node_bkpos = "";
						this._background_style = 0;
						handle_style.backgroundImage = "";
					}
				}
				else {
					this._node_bkcolor = "";
					this._node_gradation = "";

					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
						this._bkimage_elem = null;
						this._background_style = 0;
					}

					this._node_bkurl = "";
					this._node_bkrepeat = "";
					this._node_bkpos = "";
					this._background_style = 0;
				}
			};

			_pControlElementBase._setControlBackground = function (element, _handle, background, gradation, notusevml) {
				if (background) {
					var bkgradation = "";
					var bkcolor = background._syscolor;
					var bkimgurl = background.image;
					var bkrepeat = background.repeat;
					var pos_x = background.position_x;
					var pos_y = background.position_y;
					var edge_x = background.imageedge_x;
					var edge_y = background.imageedge_y;
					var vml_elem = this._vml_elem;
					var usevml = application.usevml;

					if (notusevml) {
						usevml = false;
					}

					bkimgurl = nexacro._getURIValue(bkimgurl);

					if (bkimgurl && !nexacro._isAbsolutePath(bkimgurl)) {
						var base_url = this._getElementBaseUrl();
						bkimgurl = nexacro._getImageLocation(bkimgurl, base_url);
					}

					if (background.color == "@gradation" && gradation) {
						bkcolor = "";
						bkgradation = gradation._sysvalue;
					}

					if (usevml && background._sysopacity < 100) {
						var bordertype = this.bordertype;
						if (!vml_elem && bordertype && bordertype._isRound()) {
							this._clearDOMBackgroundOnly(_handle);
							vml_elem = new nexacro._VMLContainerElement(element);
							vml_elem.setElementSize(element.width, element.height);
							vml_elem.setVMLBorder(bordertype, this.border);
							this._vml_elem = vml_elem;
							if (_handle) {
								var before_node = _handle.firstChild;
								vml_elem.create(before_node);
							}
						}
					}

					if (vml_elem) {
						if (bkimgurl) {
							if (bkrepeat == "quad") {
								this._clearDOMBackgroundOnly(_handle);
								vml_elem.setVMLBackground(background, gradation);
								vml_elem.clearVMLImage();
								this._setDOMQuadImage(element, _handle, bkimgurl);
							}
							else if (bkrepeat == "stretch") {
								if (edge_x == 0 && edge_y == 0) {
									this._clearDOMBackground(_handle);
									vml_elem.setVMLBackground(background, gradation);
									vml_elem.setVMLStretchImage(bkimgurl);
								}
								else {
									this._clearDOMBackgroundOnly(_handle);
									vml_elem.setVMLBackground(background, gradation);
									vml_elem.clearVMLImage();
									this._setDOMEdgeImage(element, _handle, bkimgurl, edge_x, edge_y);
								}
							}
							else {
								this._clearDOMBackground(_handle);
								vml_elem.setVMLBackground(background, gradation);
								vml_elem.setVMLRepeatImage(_handle, bkimgurl, bkrepeat, pos_x, pos_y);
							}
						}
						else {
							this._clearDOMBackground(_handle);
							vml_elem.clearVMLImage();
							vml_elem.setVMLBackground(background, gradation);
						}
						vml_elem.updateVMLInfo();
					}
					else {
						if (bkimgurl) {
							if (bkrepeat == "quad") {
								this._setDOMBackgroundOnly(_handle, bkcolor, bkgradation);
								this._setDOMQuadImage(element, _handle, bkimgurl);
							}
							else if (bkrepeat == "stretch") {
								if (edge_x == 0 && edge_y == 0) {
									this._setDOMBackgroundOnly(_handle, bkcolor, bkgradation);
									this._setDOMStretchImage(element, _handle, bkimgurl, pos_x, pos_y);
								}
								else {
									this._setDOMBackgroundOnly(_handle, bkcolor, bkgradation);
									this._setDOMEdgeImage(element, _handle, bkimgurl, edge_x, edge_y);
								}
							}
							else {
								if (!bkrepeat) {
									bkrepeat = "no-repeat";
								}
								if (bkgradation) {
									this._setDOMBackgroundOnly(_handle, bkcolor, bkgradation);
									this._setDOMRepeatImage(element, _handle, bkimgurl, bkrepeat, pos_x, pos_y);
								}
								else {
									this._setDOMBackground(_handle, bkcolor, bkgradation, bkimgurl, bkrepeat, pos_x, pos_y);
								}
							}
						}
						else {
							this._setDOMBackground(_handle, bkcolor, bkgradation, "", "", 0, 0);
						}
					}
				}
			};

			_pControlElementBase._createControlSubElements = function (element, _handle) {
				if (_handle) {
					var handle_style = _handle.style;

					var border = this._dom_border;
					if (border && !border._is_real_empty()) {
						if (border._linecnt == 1) {
							handle_style.border = border._systop;
						}
						else {
							var _border = border._getStyleObject(this._isRtl());

							handle_style.borderTop = _border._systop;
							handle_style.borderRight = _border._sysright;
							handle_style.borderBottom = _border._sysbottom;
							handle_style.borderLeft = _border._sysleft;
						}
					}

					var syscolor = this._node_bkcolor;
					if (syscolor) {
						handle_style.backgroundColor = syscolor;
					}

					var sysgradation = this._node_gradation;
					nexacro.__setDOMNodeStyleForceVisibility(handle_style, true);
					if (sysgradation) {
						if (this._node_opacity_str) {
							handle_style.filter = sysgradation + ' ' + this._node_opacity_str;
						}
						else {
							handle_style.filter = sysgradation;
						}
					}
					else if (this._node_opacity_str) {
						handle_style.filter = this._node_opacity_str;
					}
					nexacro.__setDOMNodeStyleVisible(handle_style, this.visible);

					var url = this._node_bkurl;
					if (url) {
						var url2 = "url(\"" + url + "\")";
						var repeat = this._node_bkrepeat;
						var bkpos = this._node_bkpos;
						handle_style.backgroundImage = url2;
						handle_style.backgroundRepeat = repeat;
						handle_style.backgroundPosition = bkpos;
					}

					var vml_elem = this._vml_elem;
					if (vml_elem) {
						var before_elem = null;
						vml_elem.create(null);
					}

					var bkimg_elem = this._bkimage_elem;
					if (bkimg_elem) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						bkimg_elem.create(before_elem);
					}
				}
			};

			_pControlElementBase._destroyControlSubElements = function () {
				if (this._bkimage_elem) {
					this._bkimage_elem.destroy();
					this._bkimage_elem = null;
					this._background_style = 0;
				}
				if (this._vml_elem) {
					this._vml_elem.destroy();
					this._vml_elem = null;
				}
			};

			_pControlElementBase._setDOMRepeatImage = function (element, _handle, url, bkrepeat, posx, posy) {
				if (this._background_style == 1) {
					this._bkimage_elem.setElementInfo(url, bkrepeat, posx, posy);
				}
				else {
					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
					}

					var repeat_elem = new nexacro._RepeatImageElement(element);
					repeat_elem.setElementPosition(this._inner_left, this._inner_top);
					repeat_elem.setElementSize(this._inner_width, this._inner_height);
					repeat_elem.setElementInfo(url, bkrepeat, posx, posy);
					this._bkimage_elem = repeat_elem;
					this._background_style = 1;

					if (_handle) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						repeat_elem.create(before_elem);
					}
				}
			};

			_pControlElementBase._setDOMStretchImage = function (element, _handle, url) {
				if (this._background_style == 2) {
					this._bkimage_elem.setElementInfo(url);
				}
				else {
					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
					}

					var stretch_elem = new nexacro._StretchImageElement(element);
					stretch_elem.setElementPosition(this._inner_left, this._inner_top);
					stretch_elem.setElementSize(this._inner_width, this._inner_height);
					stretch_elem.setElementInfo(url);
					this._bkimage_elem = stretch_elem;
					this._background_style = 2;

					if (_handle) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						stretch_elem.create(before_elem);
					}
				}
			};

			_pControlElementBase._setDOMQuadImage = function (element, _handle, url) {
				if (this._background_style == 3) {
					this._bkimage_elem.setElementInfo(url);
				}
				else {
					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
					}

					var quad_elem = new nexacro._QuadImageElement(element);
					quad_elem.setElementPosition(this._inner_left, this._inner_top);
					quad_elem.setElementSize(this._inner_width, this._inner_height, (this._vml_elem != null));
					quad_elem.setElementInfo(url);
					this._bkimage_elem = quad_elem;
					this._background_style = 3;

					if (_handle) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						quad_elem.create(before_elem);
					}
				}
			};

			_pControlElementBase._setDOMEdgeImage = function (element, _handle, url, edgex, edgey) {
				if (this._background_style == 4) {
					this._bkimage_elem.setElementInfo(url, edgex, edgey);
				}
				else {
					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
					}

					var edge_elem = new nexacro._EdgeImageElement(element);
					edge_elem.setElementPosition(this._inner_left, this._inner_top);
					edge_elem.setElementSize(this._inner_width, this._inner_height, (this._vml_elem != null));
					edge_elem.setElementInfo(url, edgex, edgey);
					this._bkimage_elem = edge_elem;
					this._background_style = 4;

					if (_handle) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						edge_elem.create(before_elem);
					}
				}
			};
		}
		else {
			_pControlElementBase._isVML = function () {
				return false;
			};

			_pControlElementBase._setControlOpacity = function (element, _handle, sysopacity) {
				if (this._node_opacity != sysopacity) {
					this._node_opacity = sysopacity;
					if (_handle) {
						if (sysopacity >= 100) {
							_handle.style.opacity = 1;
						}
						else if (sysopacity <= 0) {
							_handle.style.opacity = 0;
						}
						else {
							_handle.style.opacity = sysopacity / 100;
						}
					}
				}
			};

			_pControlElementBase._setControlSize = function (element, _handle, width, height) {
				var inner_width = width;
				var inner_height = height;

				var border = this.border;
				if (border && !border._is_real_empty()) {
					inner_width = width - border._getBorderWidth();
					inner_height = height - border._getBorderHeight();
					if (inner_width < 0) {
						inner_width = 0;
					}
					if (inner_height < 0) {
						inner_height = 0;
					}
				}

				if (this._inner_width != inner_width || this._inner_height != inner_height) {
					this._node_width = this._inner_width = inner_width;
					this._node_height = this._inner_height = inner_height;

					if (_handle) {
						nexacro.__setDOMNodeStyleSize(_handle.style, inner_width, inner_height);
					}

					var background_elem = this._bkimage_elem;
					if (background_elem) {
						background_elem.setElementSize(inner_width, inner_height);
					}
				}
			};

			_pControlElementBase._setControlBorder = function (element, _handle, border, bordertype) {
				var bRtl = this._isRtl(true);

				var _border = border;
				var _bordertype = bordertype;

				_border = border ? border._getStyleObject(bRtl ^ this.mirror) : null;
				_bordertype = bordertype ? bordertype._getStyleObject(bRtl) : null;

				if (_handle) {
					if (bordertype) {
						nexacro.__setDOMNodeStyleBorderType(_handle.style, _bordertype);
					}
					else {
						nexacro.__clearDOMNodeStyleBorderType(_handle.style);
					}
				}



				this.border = border;

				var width = element.width;
				var height = element.height;

				var inner_width = width;
				var inner_height = height;

				if (_border && !_border._is_real_empty()) {
					if (_handle) {
						var handle_style = _handle.style;
						if (_border._linecnt == 1) {
							handle_style.border = _border._systop;
						}
						else {
							handle_style.borderTop = _border._systop;
							handle_style.borderRight = _border._sysright;
							handle_style.borderBottom = _border._sysbottom;
							handle_style.borderLeft = _border._sysleft;
						}
					}

					inner_width = width - _border._getBorderWidth();
					inner_height = height - _border._getBorderHeight();
					if (inner_width < 0) {
						inner_width = 0;
					}
					if (inner_height < 0) {
						inner_height = 0;
					}
				}
				else {
					if (_handle) {
						_handle.style.border = "none";
					}
				}

				if (this._inner_width != inner_width || this._inner_height != inner_height) {
					this._node_width = this._inner_width = inner_width;
					this._node_height = this._inner_height = inner_height;

					if (_handle) {
						var handle_style = _handle.style;
						handle_style.width = inner_width + "px";
						handle_style.height = inner_height + "px";
					}

					var background_elem = this._bkimage_elem;
					if (background_elem) {
						background_elem.setElementSize(inner_width, inner_height);
					}
				}
			};

			_pControlElementBase._setDOMBackgroundOnly = function (_handle, syscolor, sysgradation) {
				syscolor = (syscolor ? syscolor : "transparent");
				if (_handle) {
					var handle_style = _handle.style;
					if (this._node_bkcolor != syscolor) {
						this._node_bkcolor = syscolor;
						handle_style.backgroundColor = syscolor;
					}

					if (this._node_gradation != sysgradation) {
						this._node_gradation = sysgradation;
						nexacro.__setDOMNodeStyleBackgroundGradation(handle_style, sysgradation);
					}

					if (this._node_bkurl) {
						this._node_bkurl = "";
						this._node_bkrepeat = "";
						this._node_bkpos = "";

						handle_style.backgroundImage = "";
					}
				}
				else {
					this._node_bkcolor = syscolor;
					this._node_gradation = sysgradation;
					this._node_bkurl = "";
					this._node_bkrepeat = "";
					this._node_bkpos = "";
				}
			};

			_pControlElementBase._setDOMBackground = function (_handle, syscolor, sysgradation, url, repeat, posx, posy) {
				var bkpos = posx + "% " + posy + "%";
				if (repeat == "") {
					repeat = "no-repeat";
				}
				syscolor = (syscolor ? syscolor : "transparent");

				if (_handle) {
					var handle_style = _handle.style;
					if (this._node_bkcolor != syscolor) {
						this._node_bkcolor = syscolor;
						handle_style.backgroundColor = syscolor;
					}

					if (this._background_style != 0 || this._node_gradation != sysgradation || 
						this._node_bkurl != url || this._node_bkrepeat != repeat || 
						this._node_bkpos != bkpos) {
						this._node_gradation = sysgradation;
						this._node_bkurl = url;
						this._node_bkrepeat = repeat;
						this._node_bkpos = bkpos;

						if (this._bkimage_elem) {
							this._bkimage_elem.destroy();
							this._bkimage_elem = null;
							this._background_style = 0;
						}

						if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
							if (url && url.substring(0, 17) == "data:image;base64") {
								var frontStr = url.substr(0, 10);
								var rearStr = url.substr(10, url.length - 1);

								url = frontStr + "/*" + rearStr;
							}
						}

						nexacro.__setDOMNodeStyleBackgroundImageGradation(handle_style, url, sysgradation, repeat, bkpos);
					}
				}
				else {
					if (nexacro.Browser == "IE" && (nexacro.BrowserVersion == 9 || nexacro.BrowserVersion == 10)) {
						if (this.linkedcontrol._is_subcontrol == true && syscolor == "transparent" && url == "") {
							url = null;
						}
					}

					this._node_bkcolor = syscolor;

					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
						this._bkimage_elem = null;
						this._background_style = 0;
					}

					this._node_gradation = sysgradation;
					this._node_bkurl = url;
					this._node_bkrepeat = repeat;
					this._node_bkpos = bkpos;
				}
			};

			_pControlElementBase._setControlBackground = function (element, _handle, background, gradation) {
				if (background) {
					var bkgradation = "";
					var bkcolor = background._syscolor;
					var bkimgurl = background.image;
					var bkrepeat = background.repeat;
					var pos_x = background.position_x;
					var pos_y = background.position_y;
					var edge_x = background.imageedge_x;
					var edge_y = background.imageedge_y;
					var bkgradation = "";

					bkimgurl = nexacro._getURIValue(bkimgurl);
					if (bkimgurl && !nexacro._isAbsolutePath(bkimgurl)) {
						var base_url = this._getElementBaseUrl();
						bkimgurl = nexacro._getImageLocation(bkimgurl, base_url);
					}

					if (background.color == "@gradation" && gradation) {
						bkcolor = "";
						bkgradation = gradation._sysvalue;
					}

					if (bkimgurl) {
						if (bkrepeat == "quad") {
							this._setDOMBackgroundOnly(_handle, bkcolor, bkgradation);
							this._setDOMQuadImage(element, _handle, bkimgurl);
						}
						else if (bkrepeat == "stretch" && (edge_x != 0 || edge_y != 0)) {
							this._setDOMBackgroundOnly(_handle, bkcolor, bkgradation);
							this._setDOMEdgeImage(element, _handle, bkimgurl, edge_x, edge_y);
						}
						else {
							this._setDOMBackground(_handle, bkcolor, bkgradation, bkimgurl, bkrepeat, pos_x, pos_y);
						}
					}
					else {
						this._setDOMBackground(_handle, bkcolor, bkgradation, "", "", 0, 0);
					}
				}
			};

			_pControlElementBase._createControlSubElements = function (element, _handle) {
				if (_handle) {
					var handle_style = _handle.style;

					var bordertype = this.bordertype;
					if (bordertype) {
						var _bordertype = bordertype._getStyleObject(this._isRtl());
						nexacro.__setDOMNodeStyleBorderType(_handle.style, _bordertype);
					}

					var border = this.border;
					if (border && !border._is_real_empty()) {
						if (border._linecnt == 1) {
							handle_style.border = border._systop;
						}
						else {
							var _border = border._getStyleObject(this._isRtl());

							handle_style.borderTop = _border._systop;
							handle_style.borderRight = _border._sysright;
							handle_style.borderBottom = _border._sysbottom;
							handle_style.borderLeft = _border._sysleft;
						}
					}

					var syscolor = this._node_bkcolor;
					if (syscolor) {
						handle_style.backgroundColor = syscolor;
					}

					var sysgradation = this._node_gradation;
					var url = this._node_bkurl;
					var repeat = this._node_bkrepeat;
					var bkpos = this._node_bkpos;

					nexacro.__setDOMNodeStyleBackgroundImageGradation(handle_style, url, sysgradation, repeat, bkpos);

					var bkimg_elem = this._bkimage_elem;
					if (bkimg_elem) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						bkimg_elem.create(before_elem);
					}
				}
			};

			_pControlElementBase._destroyControlSubElements = function () {
				if (this._bkimage_elem) {
					this._bkimage_elem.destroy();
					this._bkimage_elem = null;
					this._background_style = 0;
				}
			};


			_pControlElementBase._setDOMQuadImage = function (element, _handle, url) {
				if (this._background_style == 3) {
					this._bkimage_elem.setElementInfo(url);
				}
				else {
					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
					}

					var quad_elem = new nexacro._QuadImageElement(element);
					quad_elem.setElementPosition(this._inner_left, this._inner_top);
					quad_elem.setElementSize(this._inner_width, this._inner_height, (this._vml_elem != null));
					quad_elem.setElementInfo(url);
					this._bkimage_elem = quad_elem;
					this._background_style = 3;

					if (_handle) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						quad_elem.create(before_elem);
					}
				}
			};

			_pControlElementBase._setDOMEdgeImage = function (element, _handle, url, edgex, edgey) {
				if (this._background_style == 4) {
					this._bkimage_elem.setElementInfo(url, edgex, edgey);
				}
				else {
					if (this._bkimage_elem) {
						this._bkimage_elem.destroy();
					}

					var edge_elem = new nexacro._EdgeImageElement(element);
					edge_elem.setElementPosition(this._inner_left, this._inner_top);
					edge_elem.setElementSize(this._inner_width, this._inner_height, (this._vml_elem != null));
					edge_elem.setElementInfo(url, edgex, edgey);
					this._bkimage_elem = edge_elem;
					this._background_style = 4;

					if (_handle) {
						var before_elem = null;
						if (element._client_element) {
							before_elem = element._client_element;
						}
						edge_elem.create(before_elem);
					}
				}
			};
		}
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			_pControlElementBase.setAccessibility = nexacro._emptyFn;
			_pControlElementBase.notifyAccessibility = nexacro._emptyFn;
			_pControlElementBase._makeAccessibilityLabelbyReadtype = nexacro._emptyFn;
		}
		else {
			_pControlElementBase.setAccessibility = function (accessibility) {
				var role = accessibility._role;
				var enable = accessibility.enable;
				var desclevel = accessibility._desclevel ? accessibility._desclevel : accessibility.desclevel;
				var label = (accessibility._label ? accessibility._label : accessibility.label);
				var description = accessibility._description ? accessibility._description : accessibility.description;
				var action = accessibility._action ? accessibility._action : accessibility.action;

				var handle = this._handle;
				if (handle) {
					if (role != this.accessibility_role && role != "none") {
						this.accessibility_role = role;
						nexacro.__setDOMNodeAccessibilityRole(handle, role);
					}

					if (desclevel != this.accessibility_desclevel) {
						this.accessibility_desclevel = desclevel;
						nexacro.__setDOMNodeAccessibilityDescLevel(handle, desclevel);
					}

					if (label != this.accessibility_label) {
						this.accessibility_label = label;
					}
					if (description != this.accessibility_description) {
						this.accessibility_description = description;
						nexacro.__setDOMNodeAccessibilityDescription(handle, description);
					}
					if (action != this.accessibility_action) {
						this.accessibility_action = action;
					}
					var readlabel = this._makeAccessibilityLabelbyReadtype();
					if (readlabel != this.accessibility_readlabel) {
						this.accessibility_readlabel = readlabel;
						nexacro.__setDOMNodeAccessibilityLabel(handle, readlabel);
					}

					this.accessibility_enable = enable;
				}
				else {
					this.accessibility_role = role;
					this.accessibility_desclevel = desclevel;
					this.accessibility_label = label;
					this.accessibility_description = description;
					this.accessibility_action = action;
					this.accessibility_enable = enable;
				}
			};

			_pControlElementBase.notifyAccessibility = function (label, notifyevent, bfocus) {
				var readlabel = this._makeAccessibilityLabelbyReadtype(this);
				this.accessibility_readlabel = readlabel;
				nexacro.__notifyAccessibility(this._handle, label ? label : this.accessibility_readlabel, notifyevent ? notifyevent : "notify", this, bfocus);
			};

			_pControlElementBase._makeAccessibilityLabelbyReadtype = function () {
				var label = " ";
				if (this.accessibility_desclevel != "none" && this.accessibility_desclevel != "child") {
					if ((nexacro._accessibilitydescreadtype & 0x01) == 0x01) {
						label = nexacro.AccessibilityUtil.getAccessibilityLabel(this);
					}
					if ((nexacro._accessibilitydescreadtype & 0x02) == 0x02 && this.accessibility_action) {
						label += " " + nexacro.AccessibilityUtil.getAccessibilityAction(this);
					}
					if ((nexacro._accessibilitydescreadtype & 0x04) == 0x04 && this.accessibility_description) {
						label += " " + nexacro.AccessibilityUtil.getAccessibilityDescription(this);
					}
					if (nexacro.AccessibilityUtil.getAccessibilityAdditionalLabel) {
						label += " " + nexacro.AccessibilityUtil.getAccessibilityAdditionalLabel(this);
					}
				}
				return label;
			};
		}

		nexacro.SimpleControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pSimpleControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.SimpleControlElement);
		nexacro.SimpleControlElement.prototype = _pSimpleControlElement;

		_pSimpleControlElement._type_name = "SimpleControlElement";

		_pSimpleControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
				_handle.id = this.linkedcontrol._unique_id;
				_handle._linked_element = this;
				_handle._element_type = 1;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var handle_style = _handle.style;
				if (!nexacro._allow_default_pinchzoom && nexacro._isDesktop()) {
					if (this.linkedcontrol.parent._type_name == "Form" && this.linkedcontrol.position.toLowerCase() == "fixed") {
						nexacro.__setDOMNodeStyleFixed(handle_style);
					}
					else {
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
					}
				}
				else {
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
				}
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

				if (this.mirror) {
					var background = this.background;
					if (background && background.image) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
						if (this._client_element && this._client_element._handle) {
							nexacro.__setDOMNodeStyleTransformMirror(this._client_element._handle.style, this.mirror && this._isRtl());
						}
					}
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

				this._createControlSubElements(this, _handle);
				this._refreshForeground(_handle, handle_style);
			}
		};

		_pSimpleControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();

				this._client_element = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pSimpleControlElement._updateClientSize = function () {
			this.client_left = this._inner_left;
			this.client_top = this._inner_top;
			this.client_width = this._inner_width;
			this.client_height = this._inner_height;
		};

		_pSimpleControlElement.getContainerElement = function () {
			return this;
		};

		_pSimpleControlElement.setElementPadding = function (padding) {
		};
		_pSimpleControlElement.setElementPaddingXY = function (left, top, right, bottom) {
		};

		_pSimpleControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this);
				}
			}
		};
		_pSimpleControlElement.removeChildElement = function (child_elem) {
			if (child_elem._owner_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pSimpleControlElement.moveToNextElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToNext(cur_elem._handle, target_elem._handle);
			}
		};
		_pSimpleControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToPrev(cur_elem._handle, target_elem._handle);
			}
		};
		_pSimpleControlElement.sendToBackElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleSendToBack(cur_elem._handle);
			}
		};
		_pSimpleControlElement.bringToFrontElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleBringToFront(cur_elem._handle);
			}
		};

		_pControlElementBase.saveToImage = nexacro._emptyFn;
		_pControlElementBase.saveToImageFile = nexacro._emptyFn;
		_pControlElementBase.saveToImageObject = nexacro._emptyFn;

		_pSimpleControlElement.setElementHScrollPos = function (hpos) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (this.scroll_left != hpos || this._reset_scrollpos) {
				this.scroll_left = hpos;
				var _handle = this._handle;
				if (_handle) {
					hpos = nexacro.__convertScrollLeftFromDOMNode(_handle, hpos);
					nexacro.__setDOMNodeHScrollPos(_handle, hpos);
				}
			}
		};
		_pSimpleControlElement.setElementVScrollPos = function (vpos) {
			if (vpos < 0) {
				vpos = 0;
			}
			if (this.scroll_top != vpos || this._reset_scrollpos) {
				this.scroll_top = vpos;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeVScrollPos(_handle, vpos);
				}
			}
		};
		_pSimpleControlElement.setElementScrollPos = function (hpos, vpos) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (vpos < 0) {
				vpos = 0;
			}
			if (this.scroll_left != hpos || this.scroll_top != vpos) {
				this.scroll_left = hpos;
				this.scroll_top = vpos;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeOffset(_handle, hpos, vpos);
				}
			}
		};

		_pSimpleControlElement._refreshVMLContainerElement = function (control_elem, target_elem) {
			if (control_elem && target_elem && control_elem._dest_handle && target_elem._dest_handle) {
				var _parent_handle = target_elem._dest_handle.parentNode;
				var _first_handle = nexacro.__getLastChildDOMNode(_parent_handle);

				if (_first_handle && target_elem._dest_handle != _first_handle) {
					nexacro.__unlinkDOMNode(_parent_handle, target_elem._dest_handle);
					_parent_handle.insertBefore(target_elem._dest_handle, _first_handle);
					return true;
				}
			}
			return false;
		};

		nexacro.ControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
		};

		var _pControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.ControlElement);
		nexacro.ControlElement.prototype = _pControlElement;
		_pControlElement._type_name = "ControlElement";

		_pControlElement.create = function (_window, _before_elem) {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					if (!_doc) {
						return;
					}

					var _handle = _doc.createElement("div");
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					_handle.id = this.linkedcontrol._unique_id;
					_handle._linked_element = this;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var adjust_left = 0, adjust_top = 0;
					var handle_style = _handle.style;
					if (!nexacro._allow_default_pinchzoom && nexacro._isDesktop()) {
						var comp = this.linkedcontrol;
						if (comp && comp.position.toLowerCase() == "fixed") {
							var p_comp = comp.parent;
							if (p_comp && p_comp._is_form && p_comp._is_scrollable) {
								nexacro.__setDOMNodeStyleFixed(handle_style);

								adjust_left = this._parent_elem.left;
								adjust_top = this._parent_elem.top;

								_handle._is_fixed = true;


								if (nexacro.Browser != "IE") {
									nexacro.Browser_Transform3d = 0;
									this._changeTransform3dMode();
								}
							}
							else {
								nexacro.__setDOMNodeStyleAbsolute(handle_style);
							}
						}
						else {
							nexacro.__setDOMNodeStyleAbsolute(handle_style);
						}
					}
					else {
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
					}
					nexacro.__setDOMNodeStylePos(handle_style, this.left + adjust_left, this.top + adjust_top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;

					if (_before_elem) {
						nexacro.__insertDOMNode(_owner_elem._dest_handle, _handle, _before_elem._handle);
					}
					else {
						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
					}

					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);

					if (this._rtldirection) {
						nexacro.__setDOMNodeStyleDirection(handle_style, this._rtldirection);
					}
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}

				if (handle_style) {
					var background = this.background;
					if (background && background.image) {
						nexacro.__setDOMNodeStyleTransformMirror(handle_style, this.mirror && this._isRtl());
						nexacro.__setDOMNodeStyleTransformMirror(this._client_element._handle.style, this.mirror && this._isRtl());
					}
				}
			}
		};

		_pControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}



				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();

				this._client_element.destroy();
				this._client_element = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};

		_pControlElement.getContainerElement = function () {
			return this._client_element;
		};

		_pControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			if (this.padding) {
				var padding = this.padding;


				client_left += padding.left;
				client_top += padding.top;
				client_width -= (padding.left + padding.right);
				client_height -= (padding.top + padding.bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				client_left += this.padding_left;
				client_top += this.padding_top;
				client_width -= (this.padding_left + this.padding_right);
				client_height -= (this.padding_top + this.padding_bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
			else {
				this.client_left = client_left;
				this.client_top = client_top;
				this.client_width = client_width;
				this.client_height = client_height;
			}
		};

		_pControlElement._changeDOMObjectVisibility = function (owner_element) {
			var _doc = this.getRootWindowHandle();
			var objs = document.getElementsByTagName("OBJECT");

			var id = this._handle.id;
			var owner_element_id = owner_element._handle.id;

			if (objs.length > 0) {
				for (var i = 0; i < objs.length; i++) {
					var plugin_element = objs[i].parentElement._linked_element;
					if (plugin_element instanceof nexacro.PluginElement) {
						var obj_id = plugin_element._parent_elem._handle.id;

						if (obj_id.indexOf(id) > -1) {
							if (obj_id.indexOf(owner_element_id) > -1) {
								plugin_element.setElementVisible(true);
							}
							else {
								plugin_element.setElementVisible(false);
							}
						}
					}
				}
			}

			objs = document.getElementsByTagName("IFRAME");
			if (objs.length > 0) {
				for (var i = 0; i < objs.length; i++) {
					var plugin_element = objs[i]._linked_element;
					if (plugin_element instanceof nexacro.PluginElement) {
						var obj_id = plugin_element._parent_elem._handle.id;

						if (obj_id.indexOf(id) > -1) {
							if (obj_id.indexOf(owner_element_id) > -1) {
								plugin_element.setElementVisible(true);
							}
							else {
								plugin_element.setElementVisible(false);
							}
						}
					}
				}
			}
			return;
		};


		_pControlElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			this._updateClientSize();
		};
		_pControlElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			this._updateClientSize();
		};

		_pControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this._client_element.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this._client_element);
				}
			}
		};

		_pControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pControlElement.sendToBackElement = function (cur_elem) {
			this._client_element.sendToBackElement(cur_elem);
		};
		_pControlElement.bringToFrontElement = function (cur_elem) {
			this._client_element.bringToFrontElement(cur_elem);
		};
		_pControlElement.moveToNextElement = function (cur_elem, target_elem) {
			this._client_element.moveToNextElement(cur_elem, target_elem);
		};
		_pControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			this._client_element.moveToPrevElement(cur_elem, target_elem);
		};

		nexacro.FrameControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;

			this._border_elems = new nexacro.Collection();
			this._frame_node = null;
		};
		var _pFrameControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.FrameControlElement);
		nexacro.FrameControlElement.prototype = _pFrameControlElement;
		_pFrameControlElement._type_name = "FrameControlElement";

		_pFrameControlElement._title_control = null;
		_pFrameControlElement._menubar_control = null;
		_pFrameControlElement._status_control = null;
		_pFrameControlElement._title_height = 0;
		_pFrameControlElement._menu_height = 0;
		_pFrameControlElement._status_height = 0;
		_pFrameControlElement._title_top = 0;
		_pFrameControlElement._title_width = 0;
		_pFrameControlElement._menu_top = 0;
		_pFrameControlElement._menu_width = 0;
		_pFrameControlElement._status_top = 0;
		_pFrameControlElement._status_width = 0;
		_pFrameControlElement._max_child_zindex = 0;
		_pFrameControlElement._is_window_element = false;
		_pFrameControlElement._resizable = false;

		_pFrameControlElement._doc = null;

		_pFrameControlElement.create = function () {
			if (!this._handle) {
				if (this._parent_elem == null) {
					var _win = this.linkedcontrol._getWindow();
					var _doc = this._doc = _win._doc;
					this._owner_elem = _win;
					this._is_window_element = true;
					this.left = 0;
					this.top = 0;
					this.width = this._node_width = _win.clientWidth;
					this.height = this._node_height = _win.clientHeight;
					var _handle;
					if (_win._custom_node_id) {
						_handle = this._handle = this._dest_handle = _win._dest_handle = _doc.createElement("DIV");
					}
					else {
						_handle = this._handle = this._dest_handle = _win._dest_handle;
					}
					this.linkedcontrol._unique_id = this.linkedcontrol.id;
					_handle.id = this.linkedcontrol.id;
					_handle._linked_element = this;
					_handle._element_type = 1;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;


					if (nexacro.OS != "Android") {
						nexacro.__setDOMNodeStyleFixed(handle_style);
					}

					nexacro.__setDOMNodeStyleMargin(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);



					this._createControlSubElements(this, _handle);

					this._refreshForeground(_handle, handle_style);

					this._client_element.create();
				}
				else {
					var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement();
					if (_owner_elem && _owner_elem._handle && !this._handle) {
						this._owner_elem = _owner_elem;
						var _doc = _owner_elem.getRootWindowHandle();
						var _handle = _doc.createElement("div");
						this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
						_handle.id = this.linkedcontrol._unique_id;
						_handle._linked_element = this;
						_handle._element_type = 1;

						var handle_style = _handle.style;

						if (_owner_elem instanceof nexacro.ModalOverlayElement) {
							if (!nexacro._allow_default_pinchzoom && nexacro._isDesktop()) {
								nexacro.__setDOMNodeStyleFixed(handle_style);
							}
							else {
								nexacro.__setDOMNodeStyleAbsolute(handle_style);
							}
						}
						else {
							nexacro.__setDOMNodeStyleAbsolute(handle_style);
						}

						nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
						nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);


						this._handle = this._dest_handle = _handle;
						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

						this._createControlSubElements(this, _handle);
						this._refreshForeground(_handle, handle_style);

						if (this._client_element) {
							this._client_element.create();
						}

						this._frame_node = nexacro._createFrameNode(_handle, this.left, this.top, _doc);
					}
				}

				if (this._resizable) {
					this._createBorderElements();
					this._updateBorderElementsPosition();
				}
			}
			else {
				if (this._parent_elem == null) {
					var _win = this.linkedcontrol._getWindow();
					if (this._handle != _win._dest_handle) {
						var old_handle = this._handle;

						var _doc = this._doc = _win._doc;
						this._owner_elem = _win;
						this._is_window_element = true;
						this.left = 0;
						this.top = 0;
						this.width = this._node_width = _win.clientWidth;
						this.height = this._node_height = _win.clientHeight;
						var _handle = this._handle = this._dest_handle = _win._dest_handle;
						this.linkedcontrol._unique_id = this.linkedcontrol.id;
						_handle.id = this.linkedcontrol.id;
						_handle._linked_element = this;
						_handle._element_type = 1;

						var handle_style = _handle.style;

						if (this.border) {
							this.border = null;
						}

						this._title_height = 0;
						this._status_height = 0;

						nexacro.__setDOMNodeStyleAbsolute(handle_style);
						nexacro.__setDOMNodeStyleMargin(handle_style);
						nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
						nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

						if (old_handle.hasChildNodes()) {
							var childs = old_handle.childNodes;
							for (var i = 0, n = childs.length; i < n; i++) {
								var child = childs[i];
								nexacro.__appendDOMNode(_handle, child);
							}
						}

						this._refreshForeground(_handle, handle_style);
					}

					if (this._handle && !this._client_element._handle) {
						this._client_element.create();
					}
				}
			}
		};

		_pFrameControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._is_window_element && (!this._owner_elem || _owner_handle)) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				nexacro._destroyFrameNode(_handle, this._frame_node);
				this._frame_node = null;

				this._owner_elem = null;
				this._doc = null;
				if (!this._is_window_element) {
					this._dest_handle = null;
				}

				this._handle = null;

				this._destroyBorderElements();
				this._destroyControlSubElements();

				if (this._client_element) {
					this._client_element.destroy();
				}
				this._client_element = null;

				this._dest_handle = null;
				this._title_control = null;
				this._menubar_control = null;
				this._status_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pFrameControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};

		_pFrameControlElement._appendToContainer = function (_owner_elem) {
			var _handle = this._handle;
			if (_handle && _owner_elem._handle && this._owner_elem == null) {
				this._owner_elem = _owner_elem;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pFrameControlElement._appendToContainer = function (_owner_elem) {
			var _handle = this._handle;
			if (_handle && _owner_elem._handle && this._owner_elem == null) {
				this._owner_elem = _owner_elem;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pFrameControlElement._appendToContainer = function (_owner_elem) {
			var _handle = this._handle;
			if (_handle && _owner_elem._handle && this._owner_elem == null) {
				this._owner_elem = _owner_elem;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pFrameControlElement._appendToContainer = function (_owner_elem) {
			var _handle = this._handle;
			if (_handle && _owner_elem._handle && this._owner_elem == null) {
				this._owner_elem = _owner_elem;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pFrameControlElement._removeFromContainer = function () {
			var _owner_elem = this._owner_elem;
			if (_owner_elem) {
				this._owner_elem = null;
				var _handle = this._handle;
				if (_handle && _owner_elem._handle) {
					if (_owner_elem._dest_handle != _handle) {
						nexacro.__unlinkDOMNode(_owner_elem._dest_handle, _handle);
					}
				}
			}
		};

		_pFrameControlElement.getContainerElement = function () {
			return this._client_element;
		};
		_pFrameControlElement.getRootWindowHandle = function () {
			if (this._is_window_element) {
				return this._doc;
			}
			else if (this._owner_elem) {
				return this._owner_elem.getRootWindowHandle();
			}
			else if (this._parent && this._parent.getRootWindowHandle) {
				return this._parent.getRootWindowHandle();
			}
			return null;
		};

		_pFrameControlElement.setElementBorder = function (border, bordertype) {
			if (this.linkedcontrol && this.linkedcontrol._is_window) {
				return;
			}

			nexacro.ControlElementBase.prototype.setElementBorder.call(this, border, bordertype);
		};

		_pFrameControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var title_control = this._title_control;
			if (title_control) {
				if (!this._is_verticalmin && (this.client_left != client_left || this._title_top != client_top || this._title_width != client_width)) {
					this._title_top = client_top;
					this._title_width = client_width;
					title_control.move(client_left, client_top, client_width, this._title_height);
				}
				else if (this._is_verticalmin && (this.client_top != client_top || this._title_top != client_top || this._title_height != client_height)) {
					this._title_top = client_top;
					this._title_width = client_width;
					title_control.move(client_left, client_top, client_width, client_height);
				}
				if (this._is_verticalmin != true) {
					client_top += this._title_height;
					client_height -= this._title_height;
					if (client_height < 0) {
						client_height = 0;
					}
				}
				else {
					client_left += this._title_width;
					client_width -= this._title_width;
					if (client_width < 0) {
						client_width = 0;
					}
				}
			}
			else {
				this._title_top = client_top;
			}

			var menubar_control = this._menubar_control;
			if (menubar_control) {
				var menu_top = client_top;
				if (this.client_left != client_left || this._menu_top != client_top || this._menu_width != client_width) {
					this._menu_top = client_top;
					this._menu_width = client_width;
					menubar_control.move(client_left, client_top, client_width, this._menu_height);
				}
				client_top += this._menu_height;
				client_height -= this._menu_height;
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else {
				this._menu_top = client_top;
			}


			var status_control = this._status_control;
			if (status_control) {
				if (this._status_height > 0) {
					client_height -= this._status_height;
					if (client_height < 0) {
						client_height = 0;
					}
				}
				var status_top = client_top + client_height;
				if (this.client_left != client_left || this._status_top != status_top || this._status_width != client_width) {
					this._status_top = status_top;
					this._status_width = client_width;
					status_control.move(client_left, status_top, client_width, this._status_height);
				}
			}
			else {
				this._status_top = client_top + client_height;
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}

			this.client_left = client_left;
			this.client_top = client_top;
			this.client_width = client_width;
			this.client_height = client_height;

			this._updateBorderElementsPosition();
		};

		_pFrameControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (!this._client_element) {
					return;
				}

				if (child_elem._parent_elem == this._client_element) {
					child_elem._is_nc_element = true;
				}
				else {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this._client_element;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this._client_element;
						}
					}
					else {
						child_elem._parent_elem = this._client_element;
					}
				}

				child_elem._is_nc_element = true;

				child_elem.setElementPosition(0, 0);
				child_elem.setElementSize(this.client_width, this.client_height);
				if (this.font) {
					child_elem.setElementFont(this.font);
				}
				if (this.color) {
					child_elem.setElementColor(this.color);
				}
				if (this.align) {
					child_elem.setElementAlign(this.align);
				}
				else if (this.halign || this.valign) {
					child_elem.setElementAlignXY(this.halign, this.valign);
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this._client_element);
				}
			}
		};
		_pFrameControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pFrameControlElement.sendToBackElement = function (target_elem) {
			if (target_elem && target_elem._owner_elem && 
				target_elem._owner_elem._owner_elem == this && target_elem._handle) {
				nexacro.__setElementHandleSendToBack(target_elem._handle);
				var target_border_elems = target_elem._border_elems;
				if (target_border_elems) {
					for (var i = 0, n = target_border_elems.length; i < n; i++) {
						nexacro.__setElementHandleSendToBack(target_border_elems[i]._handle);
					}
				}
			}
		};

		_pFrameControlElement.bringToFrontElement = function (cur_elem) {
			if (this._client_element && this._client_element._handle) {
				this._max_child_zindex++;

				var new_zindex = (this._max_child_zindex * 10);

				cur_elem.setElementZIndex(new_zindex);
				var cur_border_elems = cur_elem._border_elems;
				if (cur_border_elems) {
					for (var i = 0, n = cur_border_elems.length; i < n; i++) {
						cur_border_elems[i].setElementZIndex(new_zindex + (i + 1));
					}
				}
			}
		};

		_pFrameControlElement.moveToNextElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToNextElement(cur_elem, target_elem);
		};

		_pFrameControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToPrevElement(cur_elem, target_elem);
		};

		_pFrameControlElement.setTitleBarControl = function (title_control, title_height) {
			if (this._title_control != title_control) {
				if (title_control) {
					title_control._is_nc_control = true;
					this._title_control = title_control;
					this._title_height = parseInt(title_height) | 0;
					this._title_width = 0;
				}
				else {
					this._title_control = null;
					this._title_height = 0;
					this._title_width = 0;
				}
				this._updateClientSize();
			}
			else if (title_control) {
				this._title_height = parseInt(title_height) | 0;
				this._title_width = 0;
				this._updateClientSize();
			}
		};
		_pFrameControlElement.setStatusBarControl = function (status_control, status_height) {
			if (this._status_control != status_control) {
				if (status_control) {
					status_control._is_nc_control = true;
					this._status_control = status_control;
					this._status_height = parseInt(status_height) | 0;
					this._status_width = 0;
				}
				else {
					this._status_control = null;
					this._status_height = 0;
					this._status_width = 0;
				}
				this._updateClientSize();
			}
			else if (status_control) {
				this._status_height = parseInt(menu_height) | 0;
				this._status_width = 0;
				this._updateClientSize();
			}
		};
		_pFrameControlElement.setMenuBarControl = function (menu_control, menu_height) {
			if (this._menu_control != menu_control) {
				if (menu_control) {
					menu_control._is_nc_control = true;
					this._menu_control = menu_control;
					this._menu_height = parseInt(menu_height) | 0;
					this._menu_width = 0;
					menu_control.set_visible(this._menu_height > 0);
				}
				else {
					this._menu_control = null;
					this._menu_height = 0;
					this._menu_width = 0;
				}
				this._updateClientSize();
			}
			else if (menu_control) {
				this._menu_height = parseInt(menu_height) | 0;
				this._menu_width = 0;
				menu_control.set_visible(this._menu_height > 0);
			}
		};

		_pFrameControlElement._createBorderElements = function () {
			if (this.parent == null || this._parent_elem == null) {
				return;
			}

			if (this._border_elems.length > 0) {
				return;
			}

			var name_table = Array("lt", "t", "rt", "l", "r", "lb", "b", "rb");
			for (var i = 0; i < 8; i++) {
				var border_elem = new nexacro.FrameResizeBorderElement(this._parent_elem);

				border_elem.parent = this;

				this._border_elems.add_item(name_table[i], border_elem);
			}

			this._setResizable(this._resizable);

			for (var i = 0; i < 8; i++) {
				var border_elem = this._border_elems[i];
				border_elem.linkedcontrol = this.linkedcontrol;
				border_elem.create();
			}
		};

		_pFrameControlElement._destroyBorderElements = function () {
			for (var i = 0, n = this._border_elems.length; i < n; i++) {
				this._border_elems[i].destroy();
				this._border_elems[i] = null;
			}
		};

		_pFrameControlElement.setElementPosition = function (x, y) {
			nexacro.ControlElementBase.prototype.setElementPosition.call(this, x, y);
			this._updateBorderElementsPosition();
		};
		_pFrameControlElement.setElementSize = function (w, h) {
			nexacro.ControlElementBase.prototype.setElementSize.call(this, w, h);
			this._updateBorderElementsPosition();
		};

		_pFrameControlElement._updateBorderElementsPosition = function () {
			if (this._border_elems.length == 0) {
				return;
			}

			var border = this.border;
			if (!border) {
				return;
			}

			var lw, tw, rw, bw;
			if (border._linecnt == 1) {
				lw = tw = rw = bw = border._getBorderLeftWidth();
			}
			else {
				lw = border._getBorderLeftWidth();
				tw = border._getBorderTopWidth();
				rw = border._getBorderRightWidth();
				bw = border._getBorderBottomWidth();
			}

			var inner_width = this._inner_width;
			var inner_height = this._inner_height;

			if (lw < 5) {
				var lx = 5 - lw;
				lw += lx;
				inner_width -= lx;
			}
			if (tw < 5) {
				var tx = 5 - tw;
				tw += tx;
				inner_height -= tx;
			}
			if (rw < 5) {
				var rx = 5 - rw;
				rw += rx;
				inner_width -= rx;
			}
			if (bw < 5) {
				var bx = 5 - bw;
				bw += bx;
				inner_height -= bx;
			}

			var left = this.left;
			var top = this.top;
			var right = left + this.width;
			var bottom = top + this.height;

			var x = left;
			var y = top;
			for (var i = 0; i < 8; i++) {
				this._border_elems[i].setElementPosition(x, y);
				switch (i) {
					case 0:
						x += lw;
						break;
					case 1:
						x += inner_width;
						break;
					case 2:
						x = left;
						y += tw;
						break;
					case 3:
						x += (lw + inner_width);
						break;
					case 4:
						x = left;
						y += inner_height;
						break;
					case 5:
						x += lw;
						break;
					case 6:
						x += inner_width;
						break;
					case 7:
						break;
				}
			}

			for (var i = 0; i < 8; i++) {
				if (i == 0 || i == 3 || i == 5) {
					x = lw;
				}
				if (i == 1 || i == 6) {
					x = inner_width;
				}
				if (i == 2 || i == 4 || i == 7) {
					x = rw;
				}
				if (i < 3) {
					y = tw;
				}
				else if (i < 5) {
					y = inner_height;
				}
				else {
					y = bw;
				}

				this._border_elems[i].setElementSize(x, y);
			}
		};

		_pFrameControlElement._setResizable = function (resizable) {
			this._resizable = resizable;
			if (this._handle) {
				if (this._border_elems.length == 0) {
					if (resizable) {
						this._createBorderElements();
						this._updateBorderElementsPosition();
					}
					else {
						return;
					}
				}

				var cursor_table = Array("nw", "n", "ne", "w", "e", "sw", "s", "se");
				for (var i = 0; i < 8; i++) {
					var border_elem = this._border_elems[i];
					border_elem._is_track = resizable;

					var cursor;
					if (resizable) {
						cursor = new nexacro.Style_value(cursor_table[i] + "-resize");
					}
					else {
						cursor = new nexacro.Style_value("arrow");
					}
					border_elem.setElementCursor(cursor);
				}
			}

			if (this._status_control) {
				this._status_control._setResizable(resizable);
			}
		};

		nexacro.FrameResizeBorderElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pFrameResizeBorderElement = nexacro._createPrototype(nexacro.SimpleControlElement, nexacro.FrameResizeBorderElement);
		nexacro.FrameResizeBorderElement.prototype = _pFrameResizeBorderElement;

		_pFrameResizeBorderElement._type_name = "FrameResizeBorderElement";

		_pFrameResizeBorderElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement();
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle._linked_element = this;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);
				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

				this._createControlSubElements(this, _handle);
				this._refreshForeground(_handle, handle_style);

				if (this._client_element) {
					this._client_element.create();
				}
			}
		};

		_pFrameResizeBorderElement._on_starttrack = function () {
			this.linkedcontrol._on_border_starttrack(this.cursor);
		};
		_pFrameResizeBorderElement._on_endtrack = function (x, y, dragdata) {
			this.linkedcontrol._on_border_endtrack(x, y, dragdata);
		};
		_pFrameResizeBorderElement._on_movetrack = function (x, y, dragdata) {
			this.linkedcontrol._on_border_movetrack(x, y, dragdata);
		};

		delete _pFrameResizeBorderElement;

		nexacro.ModalOverlayElement = function (parent_elem) {
			this._parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
		};

		var _pModalOverlayElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.ModalOverlayElement);
		nexacro.ModalOverlayElement.prototype = _pModalOverlayElement;
		_pModalOverlayElement._type_name = "ModalOverlayElement";

		_pModalOverlayElement.create = function (zindex, color, ref_dest_handle) {
			if (this._parent_elem && !this._handle) {
				var _win = this.linkedcontrol._getWindow();
				var _doc = this._doc = this._parent.getRootWindowHandle();
				var _handle = this._handle = this._dest_handle = _doc.createElement("div");
				_handle._linked_element = this;

				var _win_handle = _win._handle;

				if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
					this.width = nexacro._getWindowHandleClientWidth(_win_handle) || _win.clientWidth;
					this.height = nexacro._getWindowHandleClientHeight(_win_handle) || _win.clientHeight;
				}
				else {
					this.width = _win.clientWidth;
					this.height = _win.clientHeight;
				}

				this.zindex = zindex;

				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, 0, 0, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);
				nexacro.__setDOMNodeStyleZindex(handle_style, zindex);
				this.setElementColor(color);

				var _owner_elem = _win;

				if (ref_dest_handle) {
					_owner_elem._dest_handle.insertBefore(_handle, ref_dest_handle);
				}
				else {
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				}

				if (this._client_element) {
					this._client_element.setElementSize(this.width, this.height);
					this._client_element.create();
				}

				this._refreshForeground(_owner_elem._dest_handle, _owner_elem._dest_handle.style);
				this._frame_node = nexacro._createFrameNode(_handle, this.left, this.top, _doc);
			}
		};

		_pModalOverlayElement.destroy = function () {
			if (!this._handle) {
				return;
			}

			var _win = this.linkedcontrol._getWindow();
			var _owner_elem = _win;

			nexacro.__removeDOMNode(_owner_elem._dest_handle, this._handle);
			this._handle = null;

			this._client_element.destroy();
			this._client_element = null;

			nexacro._destroyFrameNode(this._handle, this._frame_node);
			this._frame_node = null;

			this._refreshForeground(_owner_elem._dest_handle, _owner_elem._dest_handle.style);
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			_pModalOverlayElement.setElementColor = function (color) {
				color = this._preventTransparentHittest(color);

				this.color = color;
				this._createVMLNode();
			};
		}
		else {
			_pModalOverlayElement.setElementColor = function (color) {
				color = this._preventTransparentHittest(color);

				this.color = color;
				this._setDOMBackgroundOnly(this._handle, color ? color._syscolor : 0, null);
			};
		}

		_pModalOverlayElement._preventTransparentHittest = function (color) {
			if (!color) {
				return;
			}
			if (color._value == "transparent" || color._syscolor == "transparent") {
				color._setValue("#ffffff01");
			}
			else if (color._sysalpha == 0) {
				color._sysalpha = 1;
				var _value = color._value;
				if (_value.length == 9 && _value[7] == '0' && _value[8] == '0') {
					color._value = _value.slice(0, 8) + "1";
				}
				_value = color.value;
				if (_value.length == 9 && _value[7] == '0' && _value[8] == '0') {
					color.value = _value.slice(0, 8) + "1";
				}
			}

			return color;
		};

		_pModalOverlayElement.setElementSize = function (width, height) {
			var ret = nexacro.ControlElement.prototype.setElementSize.call(this, width, height);

			if (this._vml_node) {
				var w = width;
				var h = height;
				this._vml_node.path = "m 0,0 l " + w + ",0, " + w + "," + h + ", 0," + h + " x e";
				if (this._vml_fillnode) {
					this._vml_node.removeChild(this._vml_fillnode);
				}

				var _doc = this._doc;
				var color = this.color;
				var _syscolor = color ? color._syscolor : 0;
				var _opacity = color ? color._sysalpha * 100 / 255 : 100;
				var _v2 = _doc.createElement("<v:fill color='" + _syscolor + "' opacity='" + _opacity + "%'/>");
				this._vml_node.appendChild(_v2);
				this._vml_fillnode = _v2;
			}

			return ret;
		};

		_pModalOverlayElement._createVMLNode = function () {
			if (!this._handle) {
				return;
			}

			if (this._vml_node) {
				this._destroyVMLNode();
			}

			var w = this.width;
			var h = this.height;
			var _doc = this._doc;

			var _v = _doc.createElement("<v:shape stroked='f' style='position:absolute;width:" + w + "px;height:" + h + "px' coordorigin='0 0' coordsize='" + w + " " + h + "'/>");
			w = parseInt(w | 1);
			h = parseInt(h | 1);
			_v.path = "m 0,0 l " + w + ",0, " + w + "," + h + ", 0," + h + " x e";

			this._handle.appendChild(_v);
			this._vml_node = _v;

			var color = this.color;
			var _syscolor = color ? color._syscolor : 0;
			var _opacity = color ? color._sysalpha * 100 / 255 : 100;
			var _v2 = _doc.createElement("<v:fill color='" + _syscolor + "' opacity='" + _opacity + "%'/>");
			_v.appendChild(_v2);

			this._vml_fillnode = _v2;
		};

		_pModalOverlayElement._destroyVMLNode = function () {
			if (this._handle && this._vml_node) {
				var _v = this._vml_node;

				nexacro.__removeDOMNode(this._handle, this._vml_node);

				this._vml_node = null;
				this._vml_fillnode = null;
			}
		};

		_pModalOverlayElement.getContainerElement = function () {
			return this._client_element;
		};

		_pModalOverlayElement.getRootWindowHandle = function () {
			return this._doc;
		};

		delete _pModalOverlayElement;

		nexacro.ScrollableControlElement = function (parent_elem, hasInner) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			if (hasInner) {
				var client_element = new nexacro.ScrollableInnerContainerElement(this);
			}
			else {
				var client_element = new nexacro.ScrollableContainerElement(this);
			}


			this._client_element = client_element;
		};
		var _pScrollableControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.ScrollableControlElement);
		nexacro.ScrollableControlElement.prototype = _pScrollableControlElement;
		_pScrollableControlElement._type_name = "ScrollableControlElement";

		_pScrollableControlElement._zoomFactor = 100;
		_pScrollableControlElement.scroll_left = 0;
		_pScrollableControlElement.scroll_top = 0;
		_pScrollableControlElement.container_maxwidth = 0;
		_pScrollableControlElement.container_maxheight = 0;
		_pScrollableControlElement._hscroll_visible = false;
		_pScrollableControlElement._vscroll_visible = false;
		_pScrollableControlElement._hscroll_height = 0;
		_pScrollableControlElement._vscroll_width = 0;
		_pScrollableControlElement._hscroll_left = 0;
		_pScrollableControlElement._hscroll_top = 0;
		_pScrollableControlElement._hscroll_width = 0;
		_pScrollableControlElement._vscroll_left = 0;
		_pScrollableControlElement._vscroll_top = 0;
		_pScrollableControlElement._vscroll_height = 0;
		_pScrollableControlElement.hscroll_limit = 0;
		_pScrollableControlElement.vscroll_limit = 0;
		_pScrollableControlElement._scroll_showtype = -1;
		_pScrollableControlElement._scrollview_width_top = 0;
		_pScrollableControlElement._step_count = 0;
		_pScrollableControlElement._step_index = -1;
		_pScrollableControlElement._hscroll_control = null;
		_pScrollableControlElement._vscroll_control = null;
		_pScrollableControlElement._resizebutton_element = null;
		_pScrollableControlElement._step_containers = null;
		_pScrollableControlElement._scroll_overlap = false;

		_pScrollableControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("div");
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					_handle.id = this.linkedcontrol._unique_id;
					_handle._linked_element = this;
					_handle._element_type = 1;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var adjust_left = 0, adjust_top = 0;
					var handle_style = _handle.style;
					if (!nexacro._allow_default_pinchzoom && nexacro._isDesktop()) {
						var comp = this.linkedcontrol;
						if (comp && comp.position.toLowerCase() == "fixed") {
							var p_comp = comp.parent;
							if (p_comp && p_comp._is_form && p_comp._is_scrollable) {
								nexacro.__setDOMNodeStyleFixed(handle_style);

								adjust_left = this._parent_elem.left;
								adjust_top = this._parent_elem.top;

								_handle._is_fixed = true;


								if (nexacro.Browser != "IE") {
									nexacro.Browser_Transform3d = 0;
									this._changeTransform3dMode();
								}
							}
							else {
								nexacro.__setDOMNodeStyleAbsolute(handle_style);
							}
						}
						else {
							nexacro.__setDOMNodeStyleAbsolute(handle_style);
						}
					}
					else {
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
					}
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}

				if (this._handle) {
					var step_count = this._step_count;
					if (step_count > 0) {
						this._step_containers = [];
						for (var i = 0; i < step_count; i++) {
							var step_client = new nexacro.ContainerElement(this._client_element);
							step_client.setElementPosition(i * this.client_width, 0);
							step_client.setElementSize(this.client_width, this.client_height);
							step_client.create();
							step_client.setElementOverFlow("");
							this._step_containers.push(step_client);
						}

						if (this._scroll_showtype >= 0) {
							this._updateClientSize();
						}
					}
				}
			}
		};

		_pScrollableControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();

				this._client_element.destroy();
				this._client_element = null;

				var step_containers = this._step_containers;
				if (step_containers) {
					var step_count = step_containers.length;
					for (var i = 0; i < step_count; i++) {
						var step_client = step_containers[i];
						step_client.destroy();
					}
					this._step_containers = null;
				}

				this._hscroll_control = null;
				this._vscroll_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pScrollableControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();

				var step_containers = this._step_containers;
				if (step_containers) {
					var step_count = step_containers.length;
					for (var i = 0; i < step_count; i++) {
						var step_client = step_containers[i];
						step_client.destroy();
					}
					this._step_containers = null;
				}
			}
		};

		_pScrollableControlElement.getContainerElement = function (position_step) {
			var step_count = this._step_count;
			var step_index = this._step_index;
			var step_containers = this._step_containers;
			if (step_count > 0 && step_containers && step_count > position_step) {
				if (position_step < 0 || position_step == null) {
					position_step = (step_index > -1 ? step_index : 0);
				}

				return step_containers[position_step];
			}
			else {
				return this._client_element;
			}
		};
		_pScrollableControlElement.setElementStepCount = function (count) {
			if (this._step_count != count) {
				var step_count = this._step_count;
				var step_containers = this._step_containers;
				if (step_containers && this._step_count) {
					for (var i = 0; i < step_count; i++) {
						var step_client = step_containers[i];
						step_client.destroy();
					}
					this._step_containers = null;
				}

				this._step_count = count;

				if (this._handle && count > 0) {
					this._step_containers = [];
					for (var i = 0; i < count; i++) {
						var step_client = new nexacro.ContainerElement(this._client_element);
						step_client.setElementPosition(i * this.client_width, 0);
						step_client.setElementSize(this.client_width, this.client_height);
						step_client.create();
						step_client.setElementOverFlow("");
						this._step_containers.push(step_client);
					}
				}

				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}
			}
		};

		_pScrollableControlElement.setElementStepIndex = function (index) {
			if (this._step_index != index) {
				if (this._step_count > 0) {
					if (index > -1 && this._step_count > index) {
						this._step_index = index;
					}
				}
				else {
					this._step_index = index;
				}
			}
		};


		_pScrollableControlElement.getZoom = function () {
			return this._zoomFactor;
		};
		_pScrollableControlElement.setZoom = function (zoomFactor) {
			var _handle = this._handle;
			if (_handle) {
				if (zoomFactor < 0) {
					zoomFactor = 0;
				}
				this._zoomFactor = zoomFactor;
				var client = this.getContainerElement(this._step_index);
				if (client) {
					this._client_element.setZoom(zoomFactor);
				}
				this._updateClientSize();
			}
		};

		_pScrollableControlElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			this._updateClientSize();
		};

		_pScrollableControlElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			this._updateClientSize();
		};

		_pScrollableControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var padding = this.padding;
			if (this.padding) {
				client_left += padding.left;
				client_top += padding.top;
				client_width -= (padding.left + padding.right);
				client_height -= (padding.top + padding.bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				client_left += this.padding_left;
				client_top += this.padding_top;
				client_width -= (this.padding_left + this.padding_right);
				client_height -= (this.padding_top + this.padding_bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}

			var client_element = this._client_element;
			if (!client_element || client_width == 0 || client_height == 0) {
				return;
			}

			var zoomFactor = this._zoomFactor / 100;
			var zclient_width = client_width / zoomFactor;
			var zclient_height = client_height / zoomFactor;
			var scroll_showtype = this._scroll_showtype;
			var hscroll_hidden = false;
			var container_maxwidth = this.container_maxwidth;
			var container_maxheight = this.container_maxheight;

			if (zoomFactor != 1) {
				var factor = 4;
				zclient_width = nexacro.floor(zclient_width, factor);
				zclient_height = nexacro.floor(zclient_height, factor);
				container_maxwidth = nexacro.floor(container_maxwidth, factor);
				container_maxheight = nexacro.floor(container_maxheight, factor);
			}

			var step_count = this._step_count;
			var step_index = this._step_index;
			var step_containers = this._step_containers;
			if (step_count > 0 && step_containers) {
				hscroll_hidden = true;
			}

			if (scroll_showtype > 0) {
				var hscroll_visible = false;
				var vscroll_visible = false;
				var hscroll_limit = 0;
				var vscroll_limit = 0;

				if (scroll_showtype == 1) {
					if (this._vscroll_control && container_maxheight > zclient_height) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = container_maxheight - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (this._hscroll_control && container_maxwidth > zclient_width) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						if (this._vscroll_control && container_maxheight > zclient_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= this._vscroll_width;
								zclient_width = client_width / zoomFactor;
							}
							vscroll_limit = container_maxheight - zclient_height;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				else if (scroll_showtype == 2) {
					if (this._vscroll_control) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = container_maxheight + this._hscroll_height - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (this._hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				else if (scroll_showtype == 31) {
					if (this._vscroll_control) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = container_maxheight - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (this._hscroll_control && container_maxwidth > zclient_width) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						if (this._vscroll_control && container_maxheight > zclient_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= this._vscroll_width;
								zclient_width = client_width / zoomFactor;
							}
							vscroll_limit = container_maxheight - zclient_height;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				else if (scroll_showtype == 32) {
					if (this._vscroll_control && container_maxheight > zclient_height) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = container_maxheight + this._hscroll_height - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (this._hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}

				var reset_vlimit = false;
				var reset_hlimit = false;
				if (this.hscroll_limit != hscroll_limit) {
					reset_hlimit = true;
					this.hscroll_limit = hscroll_limit;
				}
				if (this.vscroll_limit != vscroll_limit) {
					reset_vlimit = true;
					this.vscroll_limit = vscroll_limit;
				}

				var reset_vscroll = false;
				var reset_hscroll = false;
				var reset_vscroll_enable = false;
				var reset_hscroll_enable = false;

				if (this.scroll_top > vscroll_limit) {
					reset_vscroll = true;
					this.scroll_top = (vscroll_limit > 0) ? vscroll_limit : 0;
				}
				if (this.scroll_left > hscroll_limit) {
					reset_hscroll = true;
					this.scroll_left = (hscroll_limit > 0) ? hscroll_limit : 0;
				}

				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}

				if (this.client_width != zclient_width || this.client_height != zclient_height || 
					client_element.width != zclient_width || client_element.height != zclient_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(zclient_width, zclient_height);

					if (step_count > 0 && step_containers) {
						for (var i = 0; i < step_count; i++) {
							var step_client_element = step_containers[i];
							step_client_element.setElementPosition(zclient_width * i, 0);
							step_client_element.setElementSize(zclient_width, client_height);
						}

						step_index = this._step_index;
						var step_scroll_left = zclient_width * step_index;
						if (this.scroll_left != step_scroll_left) {
							reset_hscroll = true;
							this.scroll_left = step_scroll_left;
						}
					}
				}

				if (reset_hscroll) {
					client_element.setElementHScrollPos(this.scroll_left);
				}
				if (reset_vscroll) {
					client_element.setElementVScrollPos(this.scroll_top);
				}

				if (this._vscroll_control) {
					if (this._vscroll_control.parent.enable != this._vscroll_control.enable) {
						reset_vscroll_enable = true;
					}

					if (vscroll_visible) {
						if (!this._vscroll_visible) {
							this._vscroll_visible = true;
							this._vscroll_control.set_visible(true);
						}

						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, zclient_height, zclient_height, this.vscroll_limit > 0 ? true : false, this.scroll_top);
						}
						else if (reset_vscroll) {
							this._vscroll_control._setScrollPos(this.scroll_top);
						}

						if (reset_vscroll_enable) {
							this._vscroll_control._setEnable(this._vscroll_control.parent.enable);
						}
					}
					else {
						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;

							this._vscroll_control._setScrollInfo(this._vscroll_left - this._vscroll_width, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, zclient_height, zclient_height, false, this.scroll_top);
						}
						else if (reset_vscroll) {
							this._vscroll_control._setScrollPos(this.scroll_top);
						}

						if (reset_vscroll_enable) {
							this._vscroll_control._setEnable(this._vscroll_control.parent.enable);
						}
						if (this._vscroll_visible) {
							this._vscroll_visible = false;
							this._vscroll_control.set_visible(false);
						}
					}
				}
				if (this._hscroll_control) {
					if (this._hscroll_control.parent.enable != this._hscroll_control.enable) {
						reset_hscroll_enable = true;
					}

					if (hscroll_visible) {
						if (!this._hscroll_visible) {
							this._hscroll_visible = true;
							this._hscroll_control.set_visible(true);
						}

						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;
							this._hscroll_control._setScrollInfo(client_left, this._hscroll_top, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, zclient_width, zclient_width, this.hscroll_limit > 0 ? true : false, this.scroll_left);
						}
						else if (reset_hscroll) {
							this._hscroll_control._setScrollPos(this.scroll_left);
						}

						if (reset_hscroll_enable) {
							this._hscroll_control._setEnable(this._hscroll_control.parent.enable);
						}
					}
					else {
						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;

							this._hscroll_control._setScrollInfo(client_left, this._hscroll_top - this._hscroll_height, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, zclient_width, zclient_width, false, this.scroll_left);
						}
						else if (reset_hscroll) {
							this._hscroll_control._setScrollPos(this.scroll_left);
						}

						if (reset_hscroll_enable) {
							this._hscroll_control._setEnable(this._hscroll_control.parent.enable);
						}
						if (this._hscroll_visible) {
							this._hscroll_visible = false;
							this._hscroll_control.set_visible(false);
						}
					}
				}
			}
			else {
				if (step_count > 0 && step_containers) {
					container_maxwidth = step_count * zclient_width;

					var hscroll_limit = 0;
					if (container_maxwidth > zclient_width) {
						hscroll_limit = container_maxwidth - zclient_width;
					}

					if (this.hscroll_limit != hscroll_limit) {
						this.hscroll_limit = hscroll_limit;
					}
				}

				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}

				if (this.client_width != zclient_width || this.client_height != zclient_height || 
					client_element.width != zclient_width || client_element.height != zclient_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(zclient_width, zclient_height);

					if (step_count > 0 && step_containers && step_count > step_index) {
						for (var i = 0; i < step_count; i++) {
							var step_client_element = step_containers[i];
							step_client_element.setElementPosition(zclient_width * i, 0);
							step_client_element.setElementSize(zclient_width, client_height);
						}
					}
				}
			}
		};


		_pScrollableControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this._client_element.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					var client_element = this.getContainerElement(child_elem.position_step);
					child_elem._appendToContainer(client_element);
				}
			}
		};
		_pScrollableControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pScrollableControlElement.sendToBackElement = function (cur_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.sendToBackElement(cur_elem);
		};
		_pScrollableControlElement.bringToFrontElement = function (cur_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.bringToFrontElement(cur_elem);
		};
		_pScrollableControlElement.moveToNextElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToNextElement(cur_elem, target_elem);
		};
		_pScrollableControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToPrevElement(cur_elem, target_elem);
		};
		_pScrollableControlElement.bringToFrontUseZIndex = function () {
			var comp = this.linkedcontrol;
			if (comp) {
				if (!((nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") || (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari"))) {
					this.setElementZIndex(0);
				}
				if (!this.visible) {
					this.setElementVisible(true);
				}
				comp.parent._control_element._changeDOMObjectVisibility(this);
			}
		};

		_pScrollableControlElement.sendToBackUseZIndex = function () {
			var comp = this.linkedcontrol;
			if (comp) {
				if (!((nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") || (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari"))) {
					this.setElementZIndex(-2);
					if (!this.visible) {
						this.setElementVisible(true);
					}
				}
				else {
					this.setElementVisible(false);
				}
				comp.parent._control_element._changeDOMObjectVisibility(this);
			}
		};


		_pScrollableControlElement.setScrollControls = function (hscroll_control, vscroll_control, hscroll_height, vscroll_width, scroll_showtype) {
			var recalc = false;

			if (this._scroll_showtype != scroll_showtype) {
				this._scroll_showtype = scroll_showtype;
				recalc = true;
			}

			if (this._hscroll_control != hscroll_control) {
				if (hscroll_control) {
					this._hscroll_visible = true;
					hscroll_control._is_nc_control = true;
					this._hscroll_control = hscroll_control;
					if (this._hscroll_height != hscroll_height) {
						this._hscroll_height = hscroll_height;
						recalc = true;
					}
				}
				else {
					this._hscroll_control = null;
					if (this._hscroll_height) {
						this._hscroll_height = 0;
						recalc = true;
					}
					this._hscroll_left = 0;
					this._hscroll_top = 0;
					this._hscroll_width = 0;
				}
			}

			if (this._vscroll_control != vscroll_control) {
				if (vscroll_control) {
					this._vscroll_visible = true;
					vscroll_control._is_nc_control = true;
					this._vscroll_control = vscroll_control;
					if (this._vscroll_width != vscroll_width) {
						this._vscroll_width = vscroll_width;
						recalc = true;
					}
				}
				else {
					this._vscroll_control = null;
					if (this._vscroll_width) {
						this._vscroll_width = 0;
						recalc = true;
					}
					this._vscroll_left = 0;
					this._vscroll_top = 0;
					this._vscroll_height = 0;
				}
			}

			if (recalc) {
				this._updateClientSize();
			}
		};

		_pScrollableControlElement.setElementHScrollPos = function (hpos) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (hpos > this.hscroll_limit) {
				hpos = this.hscroll_limit;
			}

			if (this.scroll_left != hpos || this._reset_scrollpos) {
				this.scroll_left = hpos;
				if (this._client_element) {
					this._client_element.setElementHScrollPos(hpos);
				}
				if (this._hscroll_control) {
					this._hscroll_control._setScrollPos(this.scroll_left);
				}
			}
		};
		_pScrollableControlElement.setElementVScrollPos = function (vpos) {
			if (vpos < 0) {
				vpos = 0;
			}
			if (vpos > this.vscroll_limit) {
				vpos = this.vscroll_limit;
			}
			if (this.scroll_top != vpos || this._reset_scrollpos) {
				this.scroll_top = vpos;
				if (this._client_element) {
					this._client_element.setElementVScrollPos(vpos);
				}
				if (this._vscroll_control) {
					this._vscroll_control._setScrollPos(this.scroll_top);
				}
			}
		};
		_pScrollableControlElement.setElementScrollPos = function (hpos, vpos) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (vpos < 0) {
				vpos = 0;
			}
			if (hpos > this.hscroll_limit) {
				hpos = this.hscroll_limit;
			}
			if (vpos > this.vscroll_limit) {
				vpos = this.vscroll_limit;
			}

			if (this.scroll_left != hpos || this.scroll_top != vpos) {
				this.scroll_left = hpos;
				this.scroll_top = vpos;
				if (this._client_element) {
					this._client_element.setElementScrollPos(hpos, vpos);
				}
				if (this._hscroll_control) {
					this._hscroll_control._setScrollPos(this.scroll_left);
				}
				if (this._vscroll_control) {
					this._vscroll_control._setScrollPos(this.scroll_top);
				}
			}
		};

		_pScrollableControlElement.setElementScrollMaxSize = function (width, height) {
			if (this.container_maxwidth != width || this.container_maxheight != height) {
				this.container_maxwidth = width;
				this.container_maxheight = height;
				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}
				return true;
			}
			return false;
		};

		_pScrollableControlElement.setElementScrollbarSize = function (width, height) {
			if (this._vscroll_width != width || this._hscroll_height != height) {
				this._vscroll_width = width;
				this._hscroll_height = height;
				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}
				return true;
			}
			return false;
		};

		_pScrollableControlElement.setElementInitPosSize = function (left, top, width, height) {
		};

		_pScrollableControlElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;

				var background = this.background;
				var image = this.image;

				if (background && background.image) {
					var handle = this._handle;
					var bRtl = this._isRtl(true);
					if (handle) {
						this.setElementBorder(this.border, this.bordertype);
						this.setElementPadding(this.padding);
						nexacro.__setDOMNodeStyleTransformMirror(handle.style, v && bRtl);
					}

					if (this._client_element) {
						handle = this._client_element._handle;
						if (handle) {
							nexacro.__setDOMNodeStyleTransformMirror(handle.style, v && bRtl);
							nexacro.__setDOMNodeStylePos(handle.style, this._client_element.left, this._client_element.top, !v && bRtl);
						}
					}

					if (this._vscroll_control) {
						var vscrollbar = this._vscroll_control;
						handle = vscrollbar._control_element._handle;

						if (handle) {
							nexacro.__setDOMNodeStyleTransformMirror(handle.style, v && bRtl);
							nexacro.__setDOMNodeStylePos(handle.style, vscrollbar.left, vscrollbar.top, !v && bRtl);
						}
					}
					if (this._hscroll_control) {
						var hscrollbar = this._hscroll_control;
						handle = hscrollbar._control_element._handle;
						if (handle) {
							nexacro.__setDOMNodeStyleTransformMirror(handle.style, v && bRtl);
							nexacro.__setDOMNodeStylePos(handle.style, hscrollbar.left, hscrollbar.top, !v && bRtl);
						}
					}
				}
			}
		};

		_pScrollableControlElement.setElementRtlDirection = function (rtldirection) {
			nexacro.Element.prototype.setElementRtlDirection.call(this, rtldirection);

			var step_count = this._step_count;
			var step_containers = this._step_containers;
			if (step_containers && this._step_count) {
				for (var i = 0; i < step_count; i++) {
					var step_client = step_containers[i];
					step_client.setElementPosition(i * this.client_width, 0, true);
				}
			}
		};

		delete _pControlElementBase;
		delete _pSimpleControlElement;
		delete _pControlElement;
		delete _pFrameControlElement;
		delete _pScrollableControlElement;


		nexacro.ContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pContainerElement = nexacro._createPrototype(nexacro.Element, nexacro.ContainerElement);
		nexacro.ContainerElement.prototype = _pContainerElement;
		_pContainerElement._type_name = "ContainerElement";

		_pContainerElement.font = null;
		_pContainerElement.color = null;
		_pContainerElement._is_nc_element = true;

		_pContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle._linked_element = this;
				_handle._element_type = 2;

				if (application._is_waitCursor) {
					nexacro.__setDOMNodeSelectable(_handle, true);
				}
				else {
					nexacro.__setDOMNodeSelectable(_handle, false);
				}

				nexacro.AccessibilityUtil.supportMobileApplicationAccessibility(_handle);

				var handle_style = _handle.style;

				if (nexacro.Browser == "IE" && (nexacro.BrowserVersion >= 8 && nexacro.BrowserVersion <= 9)) {
					nexacro.__setDOMNodeStyleFilterTransparent(handle_style);
				}
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pContainerElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;



				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pContainerElement.clearContents = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle) {
				_handle._linked_element = null;
				if (_owner_elem) {
					nexacro.__removeDOMNode(_owner_elem._handle, _handle);
				}
				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
		};

		_pContainerElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this.parent_elem) {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this.parent_elem;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this.parent_elem;
						}
					}
					else {
						child_elem._parent_elem = this.parent_elem;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this);
				}
			}
		};
		_pContainerElement.removeChildElement = function (child_elem) {
			if (child_elem._owner_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pContainerElement.moveToNextElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToNext(cur_elem._handle, target_elem._handle);
			}
		};
		_pContainerElement.moveToPrevElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToPrev(cur_elem._handle, target_elem._handle);
			}
		};
		_pContainerElement.sendToBackElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleSendToBack(cur_elem._handle);
			}
		};
		_pContainerElement.bringToFrontElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleBringToFront(cur_elem._handle);
			}
		};

		_pContainerElement.setElementFont = nexacro._emptyFn;
		_pContainerElement.setElementColor = function (color) {
			this.color = color;
			if (this._handle) {
				nexacro.__setDOMNodeStyleColor(this._handle.style, color);
			}
		};

		_pContainerElement.setElementOverFlow = function (overflow) {
			if (this._handle) {
				nexacro.__setDOMNodeStyleOverFlow(this._handle.style, overflow);
			}
		};

		delete _pContainerElement;


		nexacro.ScrollableContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pScrollableContainerElement = nexacro._createPrototype(nexacro.ContainerElement, nexacro.ScrollableContainerElement);
		nexacro.ScrollableContainerElement.prototype = _pScrollableContainerElement;
		_pScrollableContainerElement._type_name = "ScrollableContainerElement";

		_pScrollableContainerElement._scroll_left = 0;
		_pScrollableContainerElement._scroll_top = 0;

		_pScrollableContainerElement._cached_scrollTop = 0;
		_pScrollableContainerElement._cached_scrollLeft = 0;
		_pScrollableContainerElement._first_focus = false;

		_pScrollableContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 3;

				nexacro.__setDOMNodeSelectable(_handle, false);
				nexacro.AccessibilityUtil.supportMobileApplicationAccessibility(_handle);
				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsoluteTransparent(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

				if (this._scroll_left != 0 || this._scroll_top != 0) {
					nexacro.__setDOMNodeOffset(_handle, this._scroll_left, this._scroll_top);
				}

				nexacro._observeSysEvent(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);


				if (nexacro.OS == "iOS" && parseFloat(nexacro.OSVersion) >= 13) {
					this._first_focus = true;
				}
			}
		};

		_pScrollableContainerElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro._stopSysObserving(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);

				_handle._linked_element = null;
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				if (nexacro._scrolled_elem_list) {
					nexacro._scrolled_elem_list.delete_item(_handle.id);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pScrollableContainerElement.clearContents = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle) {
				nexacro._stopSysObserving(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);

				_handle._linked_element = null;
				if (_owner_elem && _owner_elem._handle) {
					nexacro.__removeDOMNode(_owner_elem._handle, _handle);
				}
				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion <= 8) {
				_pScrollableContainerElement._syshandler_onscroll_forward = function (evt) {
					if ((!evt || evt.type != "scroll") && window.event) {
						evt = window.event;
					}
					if (evt.type != "scroll") {
						return;
					}

					var target = evt.srcElement;
					if (!target) {
						return;
					}

					var container = target._linked_element;
					if (container) {
						var parent_elem = container.parent;
						var retn = false;

						if (parent_elem._recover_vpos != undefined) {
							target.scrollTop = parent_elem._recover_vpos;
							retn = true;
						}
						if (parent_elem._recover_hpos != undefined) {
							target.scrollLeft = parent_elem._recover_hpos;
							retn = true;
						}

						if (retn) {
							return;
						}

						var elem_scroll_top = container._scroll_top | 0;
						var elem_scroll_left = container._scroll_left | 0;
						var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(target);

						container._cached_scrollLeft = scrollLeft;
						container._cached_scrollTop = target.scrollTop;

						if (elem_scroll_left != container._cached_scrollLeft) {
							var linkedcontrol = container._findScrollbarLinkedControl(container, false);
							if (linkedcontrol) {
								linkedcontrol.hscrollbar.set_pos(container._cached_scrollLeft);
							}
						}

						if (elem_scroll_top != container._cached_scrollTop) {
							var linkedcontrol = container._findScrollbarLinkedControl(container, true);
							if (linkedcontrol) {
								linkedcontrol.vscrollbar.set_pos(container._cached_scrollTop);
							}
						}
					}
				};
			}
			else {
				_pScrollableContainerElement._syshandler_onscroll_forward = function (evt) {
					if ((!evt || evt.type != "scroll") && window.event) {
						evt = window.event;
					}
					if (evt.type != "scroll") {
						return;
					}

					var target = evt.srcElement;
					if (!target) {
						return;
					}

					var container = target._linked_element;
					if (container) {
						var parent_elem = container.parent;
						var retn = false;

						if (parent_elem._recover_vpos != undefined) {
							target.scrollTop = parent_elem._recover_vpos;
							parent_elem._recover_vpos = undefined;
							retn = true;
						}
						if (parent_elem._recover_hpos != undefined) {
							target.scrollLeft = parent_elem._recover_hpos;
							parent_elem._recover_hpos = undefined;
							retn = true;
						}

						if (retn) {
							return;
						}

						var elem_scroll_top = container._scroll_top | 0;
						var elem_scroll_left = container._scroll_left | 0;

						var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(target);
						container._cached_scrollLeft = scrollLeft;
						container._cached_scrollTop = target.scrollTop;

						if (elem_scroll_left != container._cached_scrollLeft) {
							var linkedcontrol = container._findScrollbarLinkedControl(container, false);
							if (linkedcontrol) {
								linkedcontrol.hscrollbar.set_pos(container._cached_scrollLeft);
							}
						}

						if (elem_scroll_top != container._cached_scrollTop) {
							var linkedcontrol = container._findScrollbarLinkedControl(container, true);
							if (linkedcontrol) {
								linkedcontrol.vscrollbar.set_pos(container._cached_scrollTop);
							}
						}
					}
				};
			}
		}
		else {
			_pScrollableContainerElement._syshandler_onscroll_forward = function (evt) {
				var target = evt.target;
				var container = target._linked_element;
				if (container) {
					var parent_elem = container.parent;

					if (container._first_focus) {
						target.scrollTop = 0;
						container._first_focus = false;
						return;
					}

					if (parent_elem._recover_vpos != undefined) {
						target.scrollTop = parent_elem._recover_vpos;
						parent_elem._recover_vpos = undefined;
						return;
					}
					if (parent_elem._recover_hpos != undefined) {
						target.scrollLeft = parent_elem._recover_hpos;
						parent_elem._recover_hpos = undefined;
						return;
					}

					var elem_scroll_top = container._scroll_top | 0;
					var elem_scroll_left = container._scroll_left | 0;

					var scrollLeft = nexacro.__convertScrollLeftFromDOMNode(target);

					container._cached_scrollLeft = scrollLeft;
					container._cached_scrollTop = target.scrollTop;

					if (elem_scroll_left != container._cached_scrollLeft) {
						var linkedcontrol = container._findScrollbarLinkedControl(container, false);
						if (linkedcontrol) {
							linkedcontrol.hscrollbar.set_pos(container._cached_scrollLeft);
						}
					}

					if (elem_scroll_top != container._cached_scrollTop) {
						var linkedcontrol = container._findScrollbarLinkedControl(container, true);
						if (linkedcontrol) {
							linkedcontrol.vscrollbar.set_pos(container._cached_scrollTop);
						}
					}
				}
			};
		}

		_pScrollableContainerElement._findScrollbarLinkedControl = function (elem, is_vert) {
			while (elem) {
				var linkedcontrol = elem.linkedcontrol;
				if (linkedcontrol) {
					if (is_vert) {
						if (linkedcontrol.vscrollbar && linkedcontrol.vscrollbar._isVisible()) {
							return linkedcontrol;
						}
					}
					else {
						if (linkedcontrol.hscrollbar && linkedcontrol.hscrollbar._isVisible()) {
							return linkedcontrol;
						}
					}
				}

				elem = elem.parent;
			}
		};

		_pScrollableContainerElement.setElementVScrollPos = function (vpos) {
			if (this._scroll_top != vpos || this.parent._reset_scrollpos) {
				this._scroll_top = vpos;
				var _handle = this._handle;
				if (_handle) {
					this._first_focus = false;
					if (this._cached_scrollTop != vpos) {
						nexacro.__setDOMNodeVScrollPos(_handle, vpos);
					}

					if (!nexacro._scrolled_elem_list) {
						nexacro._scrolled_elem_list = new nexacro.Collection();
					}
					;
					nexacro._scrolled_elem_list.add_item(this._handle.id, {
						hpos : _handle.scrollLeft, 
						vpos : _handle.scrollTop
					});
				}
			}
		};

		_pScrollableContainerElement.setElementHScrollPos = function (hpos) {
			if (this._scroll_left != hpos || this.parent._reset_scrollpos) {
				this._scroll_left = hpos;
				var _handle = this._handle;
				if (_handle) {
					hpos = nexacro.__convertScrollLeftFromDOMNode(_handle, hpos);
					if (this._cached_scrollLeft != hpos) {
						nexacro.__setDOMNodeHScrollPos(_handle, hpos);
					}

					if (!nexacro._scrolled_elem_list) {
						nexacro._scrolled_elem_list = new nexacro.Collection();
					}
					;
					nexacro._scrolled_elem_list.add_item(this._handle.id, {
						hpos : _handle.scrollLeft, 
						vpos : _handle.scrollTop
					});
				}
			}
		};

		_pScrollableContainerElement.setElementScrollPos = function (hpos, vpos) {
			if (this._scroll_left != hpos || this._scroll_top != vpos || this.parent._reset_scrollpos) {
				this._scroll_left = hpos;
				this._scroll_top = vpos;
				var _handle = this._handle;
				if (_handle) {
					this._first_focus = false;
					if (this._cached_scrollTop != vpos) {
						nexacro.__setDOMNodeVScrollPos(_handle, vpos);
					}

					hpos = nexacro.__convertScrollLeftFromDOMNode(_handle, hpos);
					if (this._cached_scrollLeft != hpos) {
						nexacro.__setDOMNodeHScrollPos(_handle, hpos);
					}

					if (!nexacro._scrolled_elem_list) {
						nexacro._scrolled_elem_list = new nexacro.Collection();
					}
					;
					nexacro._scrolled_elem_list.add_item(this._handle.id, {
						hpos : _handle.scrollLeft, 
						vpos : _handle.scrollTop
					});
				}
			}
		};

		_pScrollableContainerElement.getZoom = function () {
			if (this._handle) {
				var scalevalue = nexacro.__getDOMNodeStyleTransformcale(this._handle.style);
				if (scalevalue) {
					return parseInt(scalevalue * 100.0);
				}

				return 100;
			}
			return 100;
		};
		_pScrollableContainerElement.setZoom = function (zoomFactor) {
			if (this._handle) {
				nexacro.__setDOMNodeStyleTransformScale(this._handle.style, zoomFactor / 100);
			}
		};
		delete _pScrollableContainerElement;

		nexacro.ScrollableInnerContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pScrollableInnerContainerElement = nexacro._createPrototype(nexacro.ScrollableContainerElement, nexacro.ScrollableInnerContainerElement);
		nexacro.ScrollableInnerContainerElement.prototype = _pScrollableInnerContainerElement;
		_pScrollableInnerContainerElement._type_name = "ScrollableInnerContainerElement";


		_pScrollableInnerContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.linkedcontrol._getWindow()._doc;
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 3;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var _dest_handle = _doc.createElement("div");
				_dest_handle.id = _handle.id + "_inner";

				nexacro.__setDOMNodeSelectable(_dest_handle, false);

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsoluteTransparent(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

				var inner_style = _dest_handle.style;
				inner_style.position = "absolute";
				nexacro.__setDOMNodeStylePos(inner_style, 0, 0, this._isRtl());
				nexacro.__setDOMNodeStyleSize(inner_style, this.width, this.height);

				if (this.font) {
					nexacro.__setDOMNodeStyleFont(inner_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(inner_style, this.color);
				}

				this._handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

				nexacro.__appendDOMNode(_handle, _dest_handle);
				this._dest_handle = _dest_handle;

				if (this._scroll_left != 0 || this._scroll_top != 0) {
					nexacro.__setDOMNodeStyleTranslate(inner_style, -this._scroll_left, -this._scroll_top);
				}
				nexacro._observeSysEvent(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
			}
		};

		_pScrollableInnerContainerElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro._stopSysObserving(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
				_handle._linked_element = null;
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pScrollableInnerContainerElement._noEventScroll = false;

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pScrollableInnerContainerElement._syshandler_onscroll_forward = function (evt) {
				if ((!evt || evt.type != "scroll") && window.event) {
					evt = window.event;
				}
				if (evt.type != "scroll") {
					return;
				}

				var target = evt.srcElement;
				if (!target) {
					return;
				}

				var container = target._linked_element;

				if (container) {
					if (target.scrollLeft > 0) {
						target.scrollLeft = 0;
					}
					if (target.scrollTop > 0) {
						target.scrollTop = 0;
					}
				}
			};
		}
		else {
			_pScrollableInnerContainerElement._syshandler_onscroll_forward = function (evt) {
				var target = evt.target;
				var container = target._linked_element;
				if (container) {
					if (target.scrollLeft > 0) {
						target.scrollLeft = 0;
					}
					if (target.scrollTop > 0) {
						target.scrollTop = 0;
					}
				}
			};
		}

		_pScrollableInnerContainerElement.setElementVScrollPos = function (vpos) {
			if (vpos < 0) {
				vpos = 0;
			}
			this.setElementScrollPos(this._scroll_left, vpos);
			return;
		};

		_pScrollableInnerContainerElement.setElementHScrollPos = function (hpos, bForce) {
			if (hpos < 0) {
				hpos = 0;
			}
			this.setElementScrollPos(hpos, this._scroll_top, bForce);
			return;
		};

		_pScrollableInnerContainerElement.setElementScrollPos = function (hpos, vpos, bForce) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (vpos < 0) {
				vpos = 0;
			}

			if (this._scroll_left != hpos || this._scroll_top != vpos || bForce) {
				this._scroll_left = hpos;
				this._scroll_top = vpos;
				var _inner_handle = this._dest_handle;
				if (_inner_handle) {
					if (this._isRtl()) {
						if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
							nexacro.__setDOMNodeStyleTranslate(_inner_handle.style, -hpos, -vpos, this._isRtl());
						}
						else {
							nexacro.__setDOMNodeStyleTranslate(_inner_handle.style, hpos, -vpos);
						}
					}
					else {
						nexacro.__setDOMNodeStyleTranslate(_inner_handle.style, -hpos, -vpos);
					}

					this.setElementAdjustFixedPosition(_inner_handle, hpos, vpos);
				}
			}
		};

		_pScrollableInnerContainerElement.setElementAdjustFixedPosition = function (node, hpos, vpos, bset) {
			if (node) {
				var child_node = node.firstElementChild;
				while (child_node) {
					if (child_node._linked_element instanceof nexacro.ScrollableControlElement) {
						if (!child_node._is_fixed) {
							this.setElementAdjustFixedPosition(child_node, hpos, vpos);
						}
					}
					else if (child_node._linked_element instanceof nexacro.ScrollableInnerContainerElement) {
						var inner_handle = child_node = child_node._linked_element._dest_handle;
						this.setElementAdjustFixedPosition(inner_handle, hpos, vpos, true);
					}
					else if (child_node._is_fixed && bset) {
						var elem = child_node._linked_element;
						if (elem) {
							var left = (elem.left + elem._parent_elem.left) - hpos;
							var top = (elem.top + elem._parent_elem.top) - vpos;

							nexacro.__setDOMNodeStylePos(child_node.style, left, top, this._isRtl());
						}
					}

					child_node = child_node.nextElementSibling;
				}
			}
		};

		_pScrollableInnerContainerElement.setElementScrollMaxSize = function (width, height) {
			var _inner_handle = this._dest_handle;
			if (_inner_handle) {
				nexacro.__setDOMNodeStyleSize(_inner_handle.style, width, height);
			}
		};

		_pScrollableInnerContainerElement.setZoom = function (zoomFactor) {
			if (this._handle) {
				nexacro.__setDOMNodeStyleTransformScale(this._handle.style, zoomFactor / 100);
			}
		};
		delete _pScrollableInnerContainerElement;

		nexacro.PopupControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
			this._frame_node = null;
		};

		var _pPopupControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.PopupControlElement);
		nexacro.PopupControlElement.prototype = _pPopupControlElement;

		_pPopupControlElement._type_name = "PopupControlElement";

		_pPopupControlElement._doc = null;
		_pPopupControlElement._is_window_element = false;

		_pPopupControlElement.create = function () {
			if (this._parent_elem == null) {
				if (!this._handle) {
					var linkedcontrol = this.linkedcontrol;

					var _win = this.linkedcontrol._getWindow();
					var _doc = this._doc = _win._doc;
					var _owner_elem = _win;
					this._is_window_element = true;

					var _handle = _doc.createElement("div");
					linkedcontrol._unique_id = linkedcontrol.parent._unique_id + '_' + linkedcontrol.id;
					_handle.id = linkedcontrol._unique_id;
					_handle._linked_element = this;
					_handle._element_type = 1;

					if (application._is_waitCursor) {
						nexacro.__setDOMNodeSelectable(_handle, true);
					}
					else {
						nexacro.__setDOMNodeSelectable(_handle, false);
					}

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;

					if (linkedcontrol._findOwnerElementHandle) {
						var owner_elem_info = linkedcontrol._findOwnerElementHandle();
						if (owner_elem_info.is_append) {
							nexacro.__appendDOMNode(owner_elem_info.owner_handle, _handle);
						}
						else {
							owner_elem_info.owner_handle.insertBefore(_handle, owner_elem_info.ref_handle);
						}
						this._owner_elem = owner_elem_info.owner_handle._linked_element;
					}
					else {
						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
						this._owner_elem = _owner_elem;
					}


					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);

					this._frame_node = nexacro._createFrameNode(_handle, this.left, this.top, _doc);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};

		_pPopupControlElement.getRootWindowHandle = function () {
			return this._doc;
		};

		_pPopupControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				nexacro._destroyFrameNode(_handle, this._frame_node);
				this._frame_node = null;

				this._owner_elem = null;
				this._doc = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();
				this._client_element.destroy();
				this._client_element = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pPopupControlElement._isRtl = function (bSelf) {
			var comp = this.parent._getRootComponent(this.parent);

			var elem = comp.getElement();

			if (bSelf) {
				elem = this;
			}

			var rtldirection = this._rtldirection;
			while (elem) {
				if (elem._rtldirection && elem._rtldirection != "inherit") {
					rtldirection = elem._rtldirection;
					break;
				}
				elem = elem._parent_elem;
			}

			return rtldirection == "rtl";
		};
		delete _pPopupControlElement;


		nexacro.PopupScrollableControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ScrollableContainerElement(this);
			this._client_element = client_element;
			this._frame_node = null;
		};
		var _pPopupScrollableControlElement = nexacro._createPrototype(nexacro.ScrollableControlElement, nexacro.PopupScrollableControlElement);
		nexacro.PopupScrollableControlElement.prototype = _pPopupScrollableControlElement;
		_pPopupScrollableControlElement._type_name = "PopupScrollableControlElement";

		_pPopupScrollableControlElement._doc = null;
		_pPopupScrollableControlElement._is_window_element = true;

		_pPopupScrollableControlElement.create = function (_window) {
			if (this._parent_elem == null) {
				if (!this._handle) {
					var _win = this.linkedcontrol._getWindow();
					var _doc = this._doc = _win._doc;
					var _owner_elem = _win;

					this._is_window_element = true;

					var _handle = _doc.createElement("div");
					var linkedcontrol = this.linkedcontrol;
					linkedcontrol._unique_id = linkedcontrol.parent._unique_id + '_' + linkedcontrol.id;
					_handle.id = linkedcontrol._unique_id;
					_handle._linked_element = this;
					_handle._element_type = 1;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;
					if (linkedcontrol._findOwnerElementHandle) {
						var owner_elem_info = linkedcontrol._findOwnerElementHandle();
						if (owner_elem_info.is_append) {
							nexacro.__appendDOMNode(owner_elem_info.owner_handle, _handle);
						}
						else {
							owner_elem_info.owner_handle.insertBefore(_handle, owner_elem_info.ref_handle);
						}
						this._owner_elem = owner_elem_info.owner_handle._linked_element;
					}
					else {
						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
						this._owner_elem = _owner_elem;
					}

					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);

					this._frame_node = nexacro._createFrameNode(_handle, this.left, this.top, _doc);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};

		_pPopupScrollableControlElement.getRootWindowHandle = function () {
			return this._doc;
		};

		_pPopupScrollableControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				nexacro._destroyFrameNode(_handle, this._frame_node);
				this._frame_node = null;

				this._owner_elem = null;
				this._doc = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();

				this._client_element.destroy();
				this._client_element = null;

				this._hscroll_control = null;
				this._vscroll_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pPopupScrollableControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};

		delete _pPopupScrollableControlElement;

		nexacro.TextElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pTextElement = nexacro._createPrototype(nexacro.Element, nexacro.TextElement);
		nexacro.TextElement.prototype = _pTextElement;
		_pTextElement._type_name = "TextElement";

		_pTextElement.font = null;
		_pTextElement.color = null;
		_pTextElement.align = null;
		_pTextElement.halign = "";
		_pTextElement.valign = "";
		_pTextElement.padding = null;
		_pTextElement.padding_left = 0;
		_pTextElement.padding_top = 0;
		_pTextElement.padding_right = 0;
		_pTextElement.padding_bottom = 0;
		_pTextElement.text = "";
		_pTextElement.linespace = 0;
		_pTextElement.letterspace = 0;
		_pTextElement.wordwrap = "none";
		_pTextElement.decoration = "";

		_pTextElement._use_newline = true;

		_pTextElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;

				_handle._linked_element = this;
				_handle._element_type = 4;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleTextSize(handle_style, this.height);
				handle_style.position = "absolute";
				nexacro.__setDOMNodeStyleTextOverFlow(handle_style);
				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}
				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}

				if (this.align) {
					nexacro.__setDOMNodeStyleAlign(_owner_elem._handle.style, this.align);
				}
				else if (this.halign && this.valign) {
					nexacro.__setDOMNodeStyleAlignXY(_owner_elem._handle.style, this.halign, this.valign);
				}

				if (this.padding) {
					nexacro.__setDOMNodeStylePadding(handle_style, this.padding);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					nexacro.__setDOMNodeStylePaddingXY(handle_style, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
				}

				if (this.linespace > 0) {
					nexacro.__setDOMNodeStyleLineSpace(handle_style, this.linespace);
				}

				if (this.wordwrap != "none") {
					nexacro.__setDOMNodeWordWrap(_handle, this.wordwrap);
				}

				if (this.decoration) {
					nexacro.__setDOMNodeStyleDecorateText(_handle, this.decoration);
				}
				else {
					nexacro.__setDOMNodeText(_handle, this.text, this._use_newline, this.wordwrap);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		_pTextElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pTextElement.setElementFont = function (font) {
			this.font = font;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setDOMNodeStyleFont(_handle.style, font);
			}
		};

		_pTextElement.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setDOMNodeStyleColor(_handle.style, color);
			}
		};

		_pTextElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setDOMNodeStylePadding(_handle.style, padding);
			}
		};
		_pTextElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setDOMNodeStylePaddingXY(_handle.style, left, top, right, bottom);
			}
		};

		_pTextElement.setElementAlign = function (align) {
			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var owner_elem = this._owner_elem;
			if (owner_elem) {
				var _handle = owner_elem._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleAlign(_handle.style, align);
				}
			}
		};
		_pTextElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = halign == "left" ? "right" : (halign == "right" ? "left" : halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var owner_elem = this._owner_elem;
			if (owner_elem) {
				var _handle = owner_elem._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleAlignXY(_handle.style, _halign, valign);
				}
			}
		};

		_pTextElement.setElementText = function (text) {
			if (this.text != text) {
				if (text == null) {
					this.text = "";
				}
				else {
					this.text = text;
				}

				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeText(_handle, this.text, this._use_newline, this.wordwrap);
				}
			}
		};

		_pTextElement.setElementLineSpace = function (linespace) {
			if (this.linespace != linespace) {
				this.linespace = linespace;
				var _handle = this._handle;
				if (_handle) {
					var comp = this._parent_elem.linkedcontrol;
					if (comp) {
						var font_size = nexacro._getTextSize2(this.letterspace || this._getParentLetterSpace(), "Wj", this.font || this._getParentFont());
						linespace = font_size[1] + nexacro._toInt(linespace);
					}

					nexacro.__setDOMNodeStyleLineSpace(_handle.style, linespace);
				}
			}
		};

		_pTextElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleLetterSpace(_handle.style, letterspace);
				}
			}
		};

		_pTextElement.setElementDecorateText = function (text) {
			if (this.decoration != text) {
				this.decoration = text;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleDecorateText(_handle, this.decoration);
				}
			}
		};

		_pTextElement.setElementUseNewLine = function (use_newline) {
			if (this._use_newline != use_newline) {
				this._use_newline = use_newline;

				var _handle = this._handle;
				if (_handle) {
					if (this.wordwrap != "none") {
						return;
					}

					nexacro.__setDOMNodeText(_handle, this.text, use_newline, this.wordwrap);
				}
			}
		};

		_pTextElement.setElementWordWrap = function (wordwrap) {
			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			if (this.wordwrap != wordwrap) {
				var handle = this._handle;
				if (handle) {
					nexacro.__setDOMNodeText(handle, this.text, this._use_newline, this.wordwrap);
				}
			}
		};

		_pTextElement.setElementPosition = function (left, top) {
			if (this.left != left || this.top != top) {
				this.left = left;
				this.top = top;

				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStylePos(_handle.style, left, top, this._isRtl());
				}
			}
		};
		_pTextElement.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
				}
				_handle = this._cell_node;
				if (_handle) {
					_handle.style.textOverflow = "";
					nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
					_handle.style.textOverflow = this._default_textoverflow;
				}
			}
		};

		delete _pTextElement;


		nexacro.PluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();
		};

		var _pPluginElement = nexacro._createPrototype(nexacro.Element, nexacro.PluginElement);
		nexacro.PluginElement.prototype = _pPluginElement;
		_pPluginElement._type_name = "PluginElement";

		_pPluginElement.license = "";
		_pPluginElement.lpkpath = "";
		_pPluginElement.classid = "";
		_pPluginElement.codebase = "";
		_pPluginElement.code = "";
		_pPluginElement.archive = "";
		_pPluginElement.mimetype = "";

		_pPluginElement.pluginsrc = "";
		_pPluginElement.plugintype = "";
		_pPluginElement.pluginpage = "";

		_pPluginElement.windowed = false;
		_pPluginElement.popupstyle = false;

		_pPluginElement.enable = true;
		_pPluginElement.font = null;
		_pPluginElement.color = null;
		_pPluginElement.cursor = null;
		_pPluginElement.align = null;
		_pPluginElement.padding = null;
		_pPluginElement.color = null;

		_pPluginElement._object_node = null;
		_pPluginElement._embed_node = null;
		_pPluginElement._params = null;
		_pPluginElement._events = null;
		_pPluginElement._object_id = null;
		_pPluginElement._after_append = false;

		_pPluginElement.create = function () {
			var _owner_elem;
			var _doc;
			if (!this._parent_elem) {
				_doc = nexacro._managerFrameDoc;
				_owner_elem = _doc.body;
				this._owner_elem = _doc.body;
				this._owner_elem._dest_handle = _doc.body;
			}
			else {
				_owner_elem = this._parent_elem.getContainerElement(this.position_step);
				if (_owner_elem && _owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					_doc = _owner_elem.getRootWindowHandle();
				}
			}


			if (_owner_elem && !this._handle) {
				var _handle = this._createObjectElementHandle(_doc, this.left, this.top, this.width, this.height, this._params);
				nexacro.__setDOMNodeSelectable(_handle, false);
				var handle_style = _handle.style;
				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}

				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}

				if (this.align) {
					nexacro.__setDOMNodeStyleAlign(handle_style, this.align);
				}

				if (this.padding) {
					nexacro.__setDOMNodeStylePadding(handle_style, this.padding);
				}

				this._handle = this._dest_handle = _handle;

				var events = this._events;
				var event_cnt = events.length;
				for (var i = 0; i < event_cnt; i++) {
					this.addEventHandler(events.get_id(i), events.get_item(i), null);
				}

				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				this.initEvent();
			}
		};

		_pPluginElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;
				this._object_node = null;
				this._embed_node = null;
			}
			this.parent = null;
			this._parent_elem = null;

			var params = this._params;
			if (params) {
				params.destroy();
				this._params = null;
			}

			var events = this._events;
			if (events) {
				events.destroy();
				this._events = null;
			}
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Safari") {
			_pPluginElement._createObjectElementHandle = function (_doc, left, top, width, height, params) {
				var _handle = _doc.createElement("div");

				_handle._linked_element = this;
				_handle._element_type = 8;

				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, width, height);

				var innerHtml = "";
				if (this.lpkpath) {
					innerHtml += '<object classid = "clsid:5220cb21-c88d-11cf-b347-00aa00a28331">';
					innerHtml += '<param name="LPKPath" value="' + this.lpkpath + '">';
					innerHtml += '</object>';
				}

				if (this._parent_elem && this.component) {
					this._object_id = this._parent_elem._handle.id + '_' + this.component._type_name;
					innerHtml += '<object id=' + this._object_id + ' style="position: absolute; overflow: hidden; width: ' + width + 'px; height: ' + height + 'px;" ';
				}
				else {
					innerHtml += '<object style="position: absolute; overflow: hidden; width: ' + width + 'px; height: ' + height + 'px;" ';
				}

				var classid = this.classid;
				if (classid) {
					innerHtml += 'classid="' + classid + '" ';
				}

				var codebase = this.codebase;
				if (codebase) {
					innerHtml += 'codebase="' + codebase + '" ';
				}

				var code = this.code;
				if (code) {
					innerHtml += 'code="' + code + '" ';
				}

				var archive = this.archive;
				if (archive) {
					innerHtml += 'archive="' + archive + '" ';
				}

				var mimetype = this.mimetype;
				if (mimetype) {
					innerHtml += 'type="' + mimetype + '" ';
				}

				var data = this.data;
				if (data) {
					innerHtml += 'data="' + data + '" ';
				}
				innerHtml += '>';

				var param_cnt = (params ? params.length : 0);
				for (var i = 0; i < param_cnt; i++) {
					innerHtml += '<param name="' + params.get_id(i) + '" value="' + params.get_item(i) + '" />';
				}




				innerHtml += "</object>";

				_handle.innerHTML = innerHtml;

				var _object_node = null;
				var _child_node = _handle.firstChild;
				while (_child_node) {
					if (_child_node.nodeType == 1 && _child_node.tagName.toLowerCase() == "object") {
						_object_node = _child_node;
					}
					_child_node = _child_node.nextSibling;
				}

				this._object_node = _object_node;

				return _handle;
			};
		}
		else {
			_pPluginElement._createObjectElementHandle = function (_doc, left, top, width, height, params) {
				var _handle = _doc.createElement("object");

				_handle._linked_element = this;
				_handle._element_type = 8;

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, width, height);

				var codebase = this.codebase;
				if (codebase) {
					_handle.setAttribute('codebase', codebase);
				}

				var code = this.code;
				if (code) {
					_handle.setAttribute('code', code);
				}

				var archive = this.archive;
				if (archive) {
					_handle.setAttribute('archive', archive);
				}

				if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
					var mimetype = this.mimetype;
					if (mimetype) {
						_handle.setAttribute('type', mimetype);
					}
				}


				if (this.pluginsrc || this.pluginpage) {
					var _embed_node = _doc.createElement("embed");

					var node_style = _embed_node.style;
					nexacro.__setDOMNodeStyleAbsolute(node_style);
					nexacro.__setDOMNodeStyleSize(node_style, width, height);

					var pluginsrc = this.pluginsrc;
					if (pluginsrc) {
						_embed_node.setAttribute('src', pluginsrc);
					}

					var pluginpage = this.pluginpage;
					if (pluginpage) {
						_embed_node.setAttribute('pluginspage', pluginpage);
					}

					var plugintype = this.plugintype;
					if (plugintype) {
						_embed_node.setAttribute('type', plugintype);
					}

					var param_cnt = (params ? params.length : 0);
					for (var i = 0; i < param_cnt; i++) {
						_embed_node.setAttribute(params.get_id(i), params.get_item(i));
					}

					this._embed_node = _embed_node;
					_handle.appendChild(_embed_node);
				}

				this._object_node = _handle;
				return _handle;
			};
		}

		_pPluginElement._setObjectDOMParam = function (_doc, target_handle, name, value) {
			var param_node = _doc.createElement("param");
			param_node.setAttribute("name", name);
			param_node.setAttribute("value", value);
			target_handle.appendChild(param_node);
		};

		_pPluginElement.on_update_position = function (resize_flag, move_flag, newleft, newtop) {
			var _handle = this._object_node;
			if (_handle) {
				var handle_style = _handle.style;

				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				if (move_flag) {
					nexacro.__setDOMNodeStylePos(handle_style, newleft, newtop, this._isRtl());
				}
				if (resize_flag) {
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);
				}
			}
		};

		_pPluginElement.setElementFocus = function (selffocus) {
			var _handle = this._object_node;
			if (_handle) {
				nexacro.__setDOMNodeFocus(_handle, true);
				nexacro.__setLastFocusedElement(this);
			}
		};

		_pPluginElement.setElementLicense = function (license) {
			if (this.license != license) {
				this.license = license;
			}
		};

		_pPluginElement.setElementLicenseFile = function (lpkpath) {
			if (!this._handle && this.lpkpath != lpkpath) {
				this.lpkpath = lpkpath;
			}
		};

		_pPluginElement.setElementMIMEType = function (mimetype) {
			if (this.mimetype != mimetype) {
				this.mimetype = mimetype;
				var _object_node = this._object_node;
				if (this._handle && this._object_node) {
					_object_node.setAttribute('type', mimetype);
				}
			}

			this.setElementPluginMIMEType(mimetype);
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pPluginElement.setElementClassId = function (classid) {
				if (classid) {
					if (classid.charAt(0) == '{') {
					}
					{

						var clsid = classid.replace(/\{|\}/g, "");
						classid = "clsid:" + clsid;
					}
				}

				if (this.classid != classid) {
					this.classid = classid;

					var _object_node = this._object_node;
					if (this._handle && this._object_node) {
						_object_node.setAttribute('classid', classid);
					}
				}
			};
		}
		else {
			_pPluginElement.setElementClassId = nexacro._emptyFn;
		}

		_pPluginElement.setElementCodebase = function (codebase) {
			if (this.codebase != codebase) {
				this.codebase = codebase;

				var _object_node = this._object_node;
				if (this._handle && this._object_node) {
					_object_node.setAttribute('codebase', codebase);
				}
			}
		};

		_pPluginElement.setElementCode = function (code) {
			if (this.code != code) {
				this.code = code;

				var _object_node = this._object_node;
				if (this._handle && this._object_node) {
					_object_node.setAttribute('code', code);
				}
			}
		};

		_pPluginElement.setElementArchive = function (archive) {
			if (this.archive != archive) {
				this.archive = archive;

				var _object_node = this._object_node;
				if (this._handle && this._object_node) {
					_object_node.setAttribute('archive', archive);
				}
			}
		};

		_pPluginElement.getElementData = function () {
			return this.data;
		};

		_pPluginElement.setElementData = function (value) {
			if (this.data != value) {
				this.data = value;

				if (this._handle && this._object_node) {
					this._object_node.setAttribute('data', value);
				}
			}
		};

		_pPluginElement.getElementParam = function (name) {
			if (this._handle && this._object_node) {
				var obj_node = this._object_node;
				var param = obj_node.getElementsByTagName("param");
				for (var i in param) {
					if (param[i].name == name) {
						return param[i].value;
					}
				}
				if (this._object_node[name]) {
					return this._object_node[name];
				}
			}
			else {
				var params = this._params;
				return params.get_item(name);
			}
		};

		_pPluginElement.setElementParam = function (name, value) {
			var obj_node = this._object_node;
			if (this._handle && obj_node) {
				var _doc = this.getRootWindowHandle();
				var param = obj_node.getElementsByTagName("param");
				for (var i in param) {
					if (param[i].name == name) {
						param[i].value = value;
						this._object_node[name] = value;
						return;
					}
				}
				this._setObjectDOMParam(_doc, obj_node, name, value);
				this._object_node[name] = value;
			}
			else {
				var params = this._params;
				if (params.get_item(name)) {
					params.set_item(name, value);
				}
				else {
					params.add_item(name, value);
				}
			}
		};

		_pPluginElement.setElementPluginSrc = function (src) {
			if (this.pluginsrc != src) {
				this.pluginsrc = src;

				if (nexacro.Browser != "Safari" && nexacro.Browser != "IE") {
					var _object_node = this._object_node;
					if (this._handle && this._object_node) {
						var _embed_node = this._embed_node;
						if (_embed_node == null) {
							var _doc = this.getRootWindowHandle();
							this._embed_node = _embed_node = _doc.createElement("embed");

							var embed_node_style = _embed_node.style;
							nexacro.__setDOMNodeStyleAbsolute(embed_node_style);
							nexacro.__setDOMNodeStylePos(embed_node_style, this.left, this.top, this._isRtl());
							nexacro.__setDOMNodeStyleSize(embed_node_style, this.width, this.height);

							_object_node.appendChild(_embed_node);
						}
						_embed_node.setAttribute('src', src);
					}
				}
				else {
					this.setElementParam('src', src);
				}
			}
		};

		_pPluginElement.setElementPluginMIMEType = function (type) {
			if (this.plugintype != type) {
				this.plugintype = type;

				if (nexacro.Browser != "Safari" && nexacro.Browser != "IE") {
					var _object_node = this._object_node;
					if (this._handle && this._object_node) {
						var _embed_node = this._embed_node;
						if (_embed_node == null) {
							var _doc = this.getRootWindowHandle();
							this._embed_node = _embed_node = _doc.createElement("embed");

							var embed_node_style = _embed_node.style;
							nexacro.__setDOMNodeStyleAbsolute(embed_node_style);
							nexacro.__setDOMNodeStylePos(embed_node_style, this.left, this.top);
							nexacro.__setDOMNodeStyleSize(embed_node_style, this.width, this.height);

							_object_node.appendChild(_embed_node);
						}
						_embed_node.setAttribute('type', type);
					}
				}
				else {
					this.setElementParam('type', type);
				}
			}
		};

		_pPluginElement.setElementPluginPage = function (pluginpage) {
			if (this.pluginpage != pluginpage) {
				this.pluginpage = pluginpage;

				if (nexacro.Browser != "Safari" && nexacro.Browser != "IE") {
					var _object_node = this._object_node;
					if (this._handle && this._object_node) {
						var _embed_node = this._embed_node;
						if (_embed_node == null) {
							var _doc = this.getRootWindowHandle();
							this._embed_node = _embed_node = _doc.createElement("embed");

							var embed_node_style = _embed_node.style;
							nexacro.__setDOMNodeStyleAbsolute(embed_node_style);
							nexacro.__setDOMNodeStylePos(embed_node_style, this.left, this.top);
							nexacro.__setDOMNodeStyleSize(embed_node_style, this.width, this.height);

							_object_node.appendChild(_embed_node);
						}
						_embed_node.setAttribute('pluginspage', pluginpage);
					}
				}
				else {
					this.setElementParam('pluginpage', pluginpage);
				}
			}
		};

		_pPluginElement.setElementWmode = function (wmode) {
			if (this.wmode != wmode) {
				this.wmode = wmode;

				if (nexacro.Browser != "Safari" && nexacro.Browser != "IE") {
					var _object_node = this._object_node;
					if (this._handle && this._object_node) {
						var _embed_node = this._embed_node;
						if (_embed_node == null) {
							var _doc = this.getRootWindowHandle();
							this._embed_node = _embed_node = _doc.createElement("embed");

							var embed_node_style = _embed_node.style;
							nexacro.__setDOMNodeStyleAbsolute(embed_node_style);
							nexacro.__setDOMNodeStylePos(embed_node_style, this.left, this.top);
							nexacro.__setDOMNodeStyleSize(embed_node_style, this.width, this.height);

							_object_node.appendChild(_embed_node);
						}
						_embed_node.setAttribute('wmode', wmode);
					}
				}
				else {
					this.setElementParam('wmode', wmode);
				}
			}
		};

		_pPluginElement.callMethod = function () {
			if (arguments.length < 1) {
				return;
			}

			if (this._handle && this._object_node) {
				var fn_name = Array.prototype.shift.call(arguments);
				var str;

				if (this._object_id) {
					str = this._object_id + '.' + fn_name;
				}
				else if (this._embed_node) {
					str = 'this._embed_node.' + fn_name;
				}
				else {
					str = 'this._object_node.' + fn_name;
				}

				if (nexacro.Browser != "Chrome" && nexacro.BrowserType != "Edg" && this.plugintype == "application/x-shockwave-flash") {
					if (this._embed_node) {
						var node = this._embed_node;
						if (this._after_append) {
							this._object_node.removeChild(node);
						}

						this._object_node.appendChild(node);
						this._after_append = true;
					}
					else {
						var node = this._object_node;
						if (this._after_append) {
							nexacro.__removeDOMNode(this._owner_elem._dest_handle, node);
						}

						nexacro.__appendDOMNode(this._owner_elem._dest_handle, node);
						this._after_append = true;
					}
				}

				str += '(';
				var len = arguments.length;
				if (len > 0) {
					str += 'arguments[0]';
					for (var i = 1; i < len; i++) {
						str += ', arguments[' + i + ']';
					}
				}
				str += ');';

				return eval(str);
			}
		};

		_pPluginElement.getPluginObject = function () {
			if (this._handle && this._object_node) {
				var obj = new nexacro.PluginObject;
				obj._handle = this._object_node;
				obj._doc = this.getRootWindowHandle();
				return obj;
			}
		};


		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pPluginElement.addEventHandler = function (name, callback, target) {
				if (this._handle && this._object_node && this._object_id) {
					var _doc = this.getRootWindowHandle();
					var _script_node = _doc.createElement("script");

					_script_node.setAttribute('for', this._object_id);

					var nameFromToStringRegex = /^function\s?([^\s(]*)/;
					var paramsFromToStringRegex = /\(.*?\)/;
					var params = callback.toString().match(paramsFromToStringRegex)[0];
					var eventValue = name + params;
					var callfunc;

					_script_node.setAttribute('event', eventValue);
					_script_node.setAttribute('language', 'javascript');

					var parentFrame, parentFrame2, childFrame;
					parentFrame = this.component.parent;
					if (parentFrame) {
						callfunc = "." + this.component.id + '["' + name + '"]; \n';
						callfunc += 'if (eventFn) eventFn._firePluginEvent' + params + ';';

						do {
							if (parentFrame instanceof nexacro.MainFrame) {
								callfunc = 'var eventFn = application.mainframe' + callfunc;
								break;
							}

							if (parentFrame instanceof nexacro.ChildFrame) {
								parentFrame2 = parentFrame.parent;
								if (parentFrame2) {
									if (parentFrame2._is_frameset || parentFrame2._frames) {
										var frmidx;
										var frmlen = parentFrame2._frames.length;
										for (frmidx = 0; frmidx < frmlen; frmidx++) {
											if (parentFrame2._frames[frmidx] == parentFrame) {
												if (parentFrame._is_popup_frame === false) {
													callfunc = '._frames[' + frmidx + ']' + callfunc;
												}
												break;
											}
										}

										if (parentFrame._is_popup_frame) {
											callfunc = 'var eventFn = application.popupframes["' + parentFrame.name + '"]' + callfunc;
											break;
										}
										else if (parentFrame instanceof nexacro.MainFrame) {
											callfunc = 'var eventFn = application.mainframe' + callfunc;
											break;
										}
									}
									else if (parentFrame2 instanceof nexacro.MainFrame) {
										callfunc = '.frame' + callfunc;
									}
									else if (parentFrame2 instanceof nexacro.Form) {
										callfunc = '.' + parentFrame.id + callfunc;
									}
								}
							}
							else if (parentFrame._is_frameset) {
								parentFrame2 = parentFrame.parent;
								if (parentFrame2 && parentFrame2._frames) {
									var frmidx;
									var frmlen = parentFrame2._frames.length;
									for (frmidx = 0; frmidx < frmlen; frmidx++) {
										if (parentFrame2._frames[frmidx] == parentFrame) {
											callfunc = '._frames[' + frmidx + ']' + callfunc;
											break;
										}
									}
								}
							}
							else if (parentFrame instanceof nexacro.Div) {
								callfunc = '.' + parentFrame.id + callfunc;
							}
							else if (parentFrame instanceof nexacro.Form) {
								callfunc = '.form' + callfunc;
							}
							parentFrame = parentFrame.parent;
						} while (parentFrame);
					}

					_script_node.text = callfunc;
					var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
					_owner_elem._dest_handle.appendChild(_script_node);
					return true;
				}
				else {
					this._events.add_item(name, callback);
				}
				return false;
			};

			_pPluginElement.removeEventHandler = function (name, callback, target) {
				if (this._handle) {
					var _doc = this.getRootWindowHandle();
					var nameFromToStringRegex = /^function\s?([^\s(]*)/;
					var paramsFromToStringRegex = /\(.*?\)/;
					var params = callback.toString().match(paramsFromToStringRegex)[0];
					var eventValue = name + params;

					var i;
					var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
					var _scripts = _owner_elem._dest_handle.getElementsByTagName("script");
					var length = _scripts.length;
					for (i = 0; i < length; i++) {
						var _script = _scripts[i];
						if (_script) {
							var eventAttribute = _script.getAttribute('event');
							if (eventAttribute === eventValue) {
								var parentNode = _script.parentNode;
								parentNode.removeChild(_script);
								break;
							}
						}
					}
				}
			};
		}
		else {
			_pPluginElement.addEventHandler = function (name, callback, target) {
				if (this._handle && this._object_node) {
					var object_node = this._object_node;
					object_node.setAttribute(name, name);

					var _doc = this.getRootWindowHandle();
					var _script_node = _doc.createElement("script");

					var nameFromToStringRegex = /^function\s?([^\s(]*)/;
					var paramsFromToStringRegex = /\(.*?\)/;
					var params = callback.toString().match(paramsFromToStringRegex)[0];
					var eventValue = name + params;

					_script_node.setAttribute('event', eventValue);

					var parentFrame, parentFrame2;
					parentFrame = this.component.parent;
					if (parentFrame) {
						callfunc = "." + this.component.id + '["' + name + '"]; \n';
						callfunc += '\tif (eventFn) eventFn._firePluginEvent' + params + ';' + "\n};";
						do {
							if (parentFrame instanceof nexacro.MainFrame) {
								callfunc = '\tvar eventFn = application.mainframe' + callfunc;
								break;
							}

							if (parentFrame instanceof nexacro.ChildFrame) {
								parentFrame2 = parentFrame.parent;
								if (parentFrame2) {
									if (parentFrame2._is_frameset || parentFrame2._frames) {
										var frmidx;
										var frmlen = parentFrame2._frames.length;
										for (frmidx = 0; frmidx < frmlen; frmidx++) {
											if (parentFrame2._frames[frmidx] == parentFrame) {
												if (parentFrame._is_popup_frame === false) {
													callfunc = '._frames[' + frmidx + ']' + callfunc;
												}
												break;
											}
										}

										if (parentFrame._is_popup_frame) {
											callfunc = 'var eventFn = application.popupframes["' + parentFrame.name + '"]' + callfunc;
											break;
										}
										else {
											callfunc = '\tvar eventFn = application.mainframe.childframe' + callfunc;
											break;
										}
									}
									else if (parentFrame2 instanceof nexacro.MainFrame) {
										callfunc = '.frame' + callfunc;
									}
									else if (parentFrame2 instanceof nexacro.Form) {
										callfunc = '.' + parentFrame.id + callfunc;
									}
								}
							}
							else if (parentFrame._is_frameset) {
								parentFrame2 = parentFrame.parent;
								if (parentFrame2 && parentFrame2._frames) {
									var frmidx;
									var frmlen = parentFrame2._frames.length;
									for (frmidx = 0; frmidx < frmlen; frmidx++) {
										if (parentFrame2._frames[frmidx] == parentFrame) {
											callfunc = '._frames[' + frmidx + ']' + callfunc;
											break;
										}
									}
								}
							}
							else if (parentFrame instanceof nexacro.Div) {
								callfunc = '.' + parentFrame.id + callfunc;
							}
							else if (parentFrame instanceof nexacro.Form) {
								callfunc = '.form' + callfunc;
							}
							parentFrame = parentFrame.parent;
						} while (parentFrame);
					}
					callfunc = 'function ' + eventValue + '\n{\n' + callfunc;
					_script_node.text = callfunc;
					this._handle.appendChild(_script_node);
					return true;
				}
				else {
					this._events.add_item(name, callback);
				}
				return false;
			};

			_pPluginElement.removeEventHandler = function (name, callback, target) {
				if (this._handle && this._object_node) {
					var object_node = this._object_node;
					object_node.removeAttribute(name);

					var _doc = this.getRootWindowHandle();
					var nameFromToStringRegex = /^function\s?([^\s(]*)/;
					var paramsFromToStringRegex = /\(.*?\)/;
					var params = callback.toString().match(paramsFromToStringRegex)[0];
					var eventValue = name + params;

					var i;
					var _scripts = this._handle.getElementsByTagName("script");
					var length = _scripts.length;
					for (i = 0; i < length; i++) {
						var _script = _scripts[i];
						if (_script) {
							var eventAttribute = _script.getAttribute('event');
							if (eventAttribute === eventValue) {
								var parentNode = _script.parentNode;
								parentNode.removeChild(_script);
								break;
							}
						}
					}
				}
			};
		}
		;

		_pPluginElement.getProperty = _pPluginElement.getElementParam;
		_pPluginElement.setProperty = _pPluginElement.setElementParam;

		_pPluginElement.install = nexacro._emptyFn;
		_pPluginElement.isInstalled = nexacro._emptyFn;
		_pPluginElement.isLoaded = nexacro._emptyFn;
		_pPluginElement.setElementPluginVisible = nexacro._emptyFn;
		_pPluginElement.setElementAdjustAlpha = nexacro._emptyFn;
		_pPluginElement.setElementWindowed = nexacro._emptyFn;
		_pPluginElement.setElementPopupStyle = nexacro._emptyFn;
		_pPluginElement.initEvent = nexacro._emptyFn;
		_pPluginElement.updateWindow = nexacro._emptyFn;

		delete _pPluginElement;


		nexacro.PluginObject = function () {
		};

		var _pPluginObject = nexacro._createPrototype(nexacro.Object, nexacro.PluginObject);
		nexacro.PluginObject.prototype = _pPluginObject;
		_pPluginObject._type_name = "PluginObject";
		_pPluginObject._handle = null;
		_pPluginObject._doc = null;
		_pPluginObject._window = null;

		_pPluginObject.getProperty = function (name) {
			var handle = this._handle;
			if (handle !== undefined) {
				if (name) {
					var property = handle[name];
					if (property !== undefined) {
						if (property === null || (typeof property != "object" && property != undefined)) {
							return property;
						}
						var pobject = new nexacro.PluginObject;
						pobject._handle = property;
						pobject._window = this._window;
						return pobject;
					}
					var param = this._handle.getElementsByTagName("param");
					for (var i in param) {
						if (param[i].name == name) {
							return param[i].value;
						}
					}
				}
			}
		};

		_pPluginObject.setProperty = function (name, value) {
			if (this._handle && name && value) {
				if (this._handle[name] !== undefined) {
					this._handle[name] = value;
					return;
				}
				var param = this._handle.getElementsByTagName("param");
				for (var i in param) {
					if (param[i].name == name) {
						param[i].value = value;
						return;
					}
				}
				var param_node = this._doc.createElement("param");
				param_node.setAttribute("name", name);
				param_node.setAttribute("value", value);
				this._handle.appendChild(param_node);
			}
		};

		_pPluginObject._delete_property = function (name) {
			if (this._handle && name) {
				if (this._handle[name]) {
					this._handle[name] = "";
					return;
				}
				var param = this._handle.getElementsByTagName("param");
				for (var i in param) {
					if (param[i].name == name) {
						this._handle.removeChild(param[i]);
						return;
					}
				}
			}
		};

		_pPluginObject.callMethod = function () {
			var fn_name, len, str, value;
			if (arguments.length < 1) {
				return;
			}

			if (this._handle) {
				fn_name = Array.prototype.shift.call(arguments);
				str = 'this._handle.' + fn_name;

				str += '(';
				len = arguments.length;
				if (len > 0) {
					str += 'arguments[0]';
					for (var i = 1; i < len; i++) {
						str += ', arguments[' + i + ']';
					}
				}
				str += ');';

				value = eval(str);

				if (value != null && typeof (value) == "object") {
					var pobject = new nexacro.PluginObject;
					pobject._handle = value;
					return pobject;
				}
				return value;
			}
		};

		_pPluginObject.destroy = nexacro._emptyFn;
		delete _pPluginObject;



		nexacro.WebBrowserPluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._parent_elem.windowed = true;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();
		};

		var _pWebBrowserPluginElement = nexacro._createPrototype(nexacro.PluginElement, nexacro.WebBrowserPluginElement);
		nexacro.WebBrowserPluginElement.prototype = _pWebBrowserPluginElement;

		_pWebBrowserPluginElement._type_name = "WebBrowserPluginElement";
		_pWebBrowserPluginElement.initEvent = nexacro._emptyFn;

		_pWebBrowserPluginElement._object_node = null;
		_pWebBrowserPluginElement._embed_node = null;
		_pWebBrowserPluginElement._params = null;
		_pWebBrowserPluginElement._events = null;
		_pWebBrowserPluginElement._window = null;
		_pWebBrowserPluginElement._document = null;
		_pWebBrowserPluginElement._block_node = null;
		_pWebBrowserPluginElement._prev_outfocus_message_elem = null;
		_pWebBrowserPluginElement._next_outfocus_message_elem = null;
		_pWebBrowserPluginElement._parent_dest_handle = null;


		var _iframe_eventhandler_ontouchmove = function (evt) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				var target = evt.srcElement;
			}
			else {
				var target = evt.target;
			}

			if (target) {
				var _doc = target.ownerDocument;
				var _body = _doc.body;
				var ct = _doc._nexacro_iframe_contaniner;

				if (nexacro.OS == "iOS") {
					var scroll_target = _doc._nexacro_iframe_contaniner;
				}
				else {
					var scroll_target = _body;
				}

				if (_doc._nexacro_preTouchInfo) {
					var pre_info = _doc._nexacro_preTouchInfo;
					var touchlen = evt.changedTouches ? evt.changedTouches.length : 1;
					for (var i = 0; i < touchlen; i++) {
						var touch = evt.changedTouches ? evt.changedTouches[i] : (evt.touches ? evt.touches[0] : evt);
					}

					var clientX = touch.pageX || touch.clientX;
					var clientY = touch.pageY || touch.clientY;
					var screenX = touch.screenX || clientX;
					var screenY = touch.screenY || clientY;

					var touchInfo = [clientX, clientY, screenX, screenY];

					function getDirection (tInfo1, tInfo2) {
						var gap_x = tInfo2[2] - tInfo1[2];
						var gap_y = tInfo2[3] - tInfo1[3];

						if (Math.abs(gap_y) >= Math.abs(gap_x)) {
							return ["y", gap_y];
						}
						else {
							return ["x", gap_x];
						}
					}

					var dir = getDirection(pre_info, touchInfo);

					var bScroll = false;

					if (dir[0] == "y") {
						var _win = _doc.defaultView || _doc.parentWindow;

						if (nexacro.OS == "iOS") {
							var clientHeight = parseInt(scroll_target.style.height);
						}
						else {
							var clientHeight = nexacro._getWindowHandleClientHeight(_win);
							var w_innerHeight = _win.innerHeight;

							clientHeight = (clientHeight > w_innerHeight) ? clientHeight : w_innerHeight;
						}

						var scrollHeight = scroll_target.scrollHeight || _doc.documentElement.scrollHeight;
						var scrollTop = scroll_target.scrollTop || _doc.documentElement.scrollTop;

						if ((scrollTop == 0 && dir[1] > 0) || (((scrollHeight - clientHeight) <= scrollTop) && dir[1] < 0)) {
							if (!(target instanceof _win.HTMLCanvasElement)) {
								bScroll = true;
							}
						}

						if (bScroll) {
							_doc._nexacro_bScroll = true;


							if (target == pre_info[4].target && !pre_info[5]) {
								nexacro._syshandler_ontouchstart(window.nexacro_HTMLSysEvent, ct, pre_info[4]);
								pre_info[5] = true;
							}

							var preClientY = _doc._nexacro_preTouchInfo[1];

							if ((dir[1] < 0 && clientY > preClientY) || (dir[1] > 0 && clientY < preClientY)) {
								return;
							}

							_doc._nexacro_preTouchInfo[0] = clientX;
							_doc._nexacro_preTouchInfo[1] = clientY;
							_doc._nexacro_preTouchInfo[2] = screenX;
							_doc._nexacro_preTouchInfo[3] = screenY;

							nexacro._syshandler_ontouchmove(window.nexacro_HTMLSysEvent, ct, evt);
						}
						else {
							_doc._nexacro_bScroll = false;
						}
					}
				}
			}
		};

		var _iframe_eventhandler_ontouchstart = function (evt) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				var target = evt.srcElement;
			}
			else {
				var target = evt.target;
			}

			if (target) {
				var _doc = target.ownerDocument;
				var _body = _doc.body;
				var ct = _doc._nexacro_iframe_contaniner;

				if (nexacro.OS == "iOS") {
					var scroll_target = _doc._nexacro_iframe_contaniner;
				}
				else {
					var scroll_target = _body;
				}


				_doc._nexacro_bScroll = false;

				var _win = _doc.defaultView || _doc.parentWindow;

				if (nexacro.OS == "iOS") {
					var clientHeight = parseInt(scroll_target.style.height);
				}
				else {
					var clientHeight = nexacro._getWindowHandleClientHeight(_win);
					var w_innerHeight = _win.innerHeight;

					clientHeight = (clientHeight > w_innerHeight) ? clientHeight : w_innerHeight;
				}

				var scrollHeight = scroll_target.scrollHeight || _doc.documentElement.scrollHeight;
				var scrollTop = scroll_target.scrollTop || _doc.documentElement.scrollTop;

				if (scrollTop == 0 || (scrollHeight - clientHeight) <= scrollTop) {
					var touchlen = evt.changedTouches ? evt.changedTouches.length : 1;
					for (var i = 0; i < touchlen; i++) {
						var touch = evt.changedTouches ? evt.changedTouches[i] : (evt.touches ? evt.touches[0] : evt);
					}

					var clientX = touch.pageX || touch.clientX;
					var clientY = touch.pageY || touch.clientY;
					var screenX = touch.screenX || clientX;
					var screenY = touch.screenY || clientY;

					_doc._nexacro_preTouchInfo = [clientX, clientY, screenX, screenY, evt, false];
				}
			}
		};

		var _iframe_eventhandler_ontouchend = function (evt) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				var target = evt.srcElement;
			}
			else {
				var target = evt.target;
			}

			if (target) {
				var _doc = target.ownerDocument;
				var _body = _doc.body;
				var ct = _doc._nexacro_iframe_contaniner;


				if (_doc._nexacro_bScroll) {
					nexacro._syshandler_ontouchend(window.nexacro_HTMLSysEvent, ct, evt);
				}
			}
		};

		var _iframe_eventhandler_onmousewheel = function (evt) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				var target = evt.srcElement;
			}
			else {
				var target = evt.target;
			}

			if (target) {
				var _doc = target.ownerDocument;
				var _body = _doc.body;
				var ct = _doc._nexacro_iframe_contaniner;
				var evt_target = evt.target;
				var clientHeight = 0;


				if (nexacro.OS == "iOS") {
					var scroll_target = _doc._nexacro_iframe_contaniner;
					clientHeight = parseInt(scroll_target.style.height);
				}
				else {
					var scroll_target = _body;

					if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
						clientHeight = _doc.documentElement.offsetHeight;
					}
					else {
						if (scroll_target != evt_target) {
							scroll_target = evt_target;
							clientHeight = scroll_target.clientHeight;
						}
						else {
							var _win = _doc.defaultView || _doc.parentWindow;
							clientHeight = _win.innerHeight;
						}
					}
				}

				var scrollHeight = scroll_target.scrollHeight || _doc.documentElement.scrollHeight;
				var scrollTop = scroll_target.scrollTop || _doc.documentElement.scrollTop;
				var delta_y = nexacro.__getWheelDeltaY(evt);

				if ((scrollTop == 0 && delta_y > 0) || (scrollHeight - clientHeight <= scrollTop && delta_y < 0)) {
					nexacro._syshandler_onmousewheel(window.nexacro_HTMLSysEvent, ct, evt);
				}
			}
		};

		var _iframe_eventhandler_onmousedown = function (evt) {
			nexacro._syshandler_ondeactivate(window.nexacro_HTMLSysEvent, evt);
		};


		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			var _iframe_eventhandler_onload = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				var node = evt.srcElement;
				if (!node) {
					return;
				}

				try {
					var _doc = node.contentDocument || node.contentWindow.document;

					_doc._nexacro_iframe_contaniner = node._contaniner._handle;

					if (nexacro.SupportTouch && nexacro.isTouchInteraction) {
						if (nexacro.BrowserType == "Edge") {
							nexacro._observeSysEvent(_cur_win, "pointermove", "ontouchmove", _iframe_eventhandler_ontouchmove);
							nexacro._observeSysEvent(_cur_win, "pointerdown", "ontouchstart", _iframe_eventhandler_ontouchstart);
							nexacro._observeSysEvent(_cur_win, "pointerup", "ontouchend", _iframe_eventhandler_ontouchend);
						}
						else {
							nexacro._observeSysEvent(_doc, "MSPointerMove", "ontouchmove", _iframe_eventhandler_ontouchmove);
							nexacro._observeSysEvent(_doc, "MSPointerDown", "ontouchstart", _iframe_eventhandler_ontouchstart);
							nexacro._observeSysEvent(_doc, "MSPointerUp", "ontouchend", _iframe_eventhandler_ontouchend);
						}
					}

					nexacro._observeSysEvent(_doc, "mousewheel", "onmousewheel", _iframe_eventhandler_onmousewheel);
					nexacro._observeSysEvent(_doc, "mousedown", "onmousedown", _iframe_eventhandler_onmousedown);
				}
				catch (e) {
					;
				}
				finally {
					var elem = node._linked_element;
					if (elem) {
						elem._on_frame_load(node.contentWindow);
					}
				}
			};
		}
		else {
			var _iframe_eventhandler_onload = function (evt) {
				var node = evt.target;
				if (!node) {
					return;
				}

				try {
					var _doc = node.contentDocument || node.contentWindow.document;

					_doc._nexacro_iframe_contaniner = node._contaniner._handle;


					if (nexacro.SupportTouch && nexacro.isTouchInteraction) {
						nexacro._observeSysEvent(_doc, "touchmove", "ontouchmove", _iframe_eventhandler_ontouchmove);
						nexacro._observeSysEvent(_doc, "touchstart", "ontouchstart", _iframe_eventhandler_ontouchstart);
						nexacro._observeSysEvent(_doc, "touchend", "ontouchend", _iframe_eventhandler_ontouchend);
					}

					nexacro._observeSysEvent(_doc, "mousewheel", "onmousewheel", _iframe_eventhandler_onmousewheel);
					nexacro._observeSysEvent(_doc, "DOMMouseScroll", "onmousewheel", _iframe_eventhandler_onmousewheel);
					nexacro._observeSysEvent(_doc, "mousedown", "onmousedown", _iframe_eventhandler_onmousedown);
				}
				catch (e) {
					;
				}
				finally {
					var elem = node._linked_element;
					if (elem) {
						elem._on_frame_load(node.contentWindow);
					}
				}
			};
		}

		_pWebBrowserPluginElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = this._createInternalFrameElementHandle(_doc, this.left, this.top, this.width, this.height, this._params);
				_handle._contaniner = _owner_elem;

				if (nexacro._enableaccessibility) {
					nexacro.__setDOMNodeAccessibilityActiveDescendant(_handle, this._parent_elem.linkedcontrol._unique_id);
				}

				nexacro.__setDOMNodeSelectable(_handle, true);

				if (nexacro.OS == "iOS") {
					nexacro.__setMobileIframeDOMNodeStyleScroll(_owner_elem._handle.style);
				}

				if (nexacro.OS == "Android" && (nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") && this.visible) {
					this._need_hide = true;
				}

				var handle_style = _handle.style;
				if (!this.visible || this._need_hide) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}

				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}

				if (this.align) {
					nexacro.__setDOMNodeStyleAlign(handle_style, this.align);
				}

				if (this.padding) {
					nexacro.__setDOMNodeStylePadding(handle_style, this.padding);
				}


				var _focus_input = _doc.createElement("div");
				var f_input_style = _focus_input.style;
				nexacro.__setDOMNodeTabIndex(_focus_input, 0);
				nexacro.__setDOMNodeStyleAbsolute(f_input_style);
				nexacro.__setDOMNodeStylePos(f_input_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(f_input_style, 1, 1);
				f_input_style.opacity = 0;
				_focus_input.parent_elem = this.parent;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _focus_input);
				nexacro._observeSysEvent(_focus_input, "focus", "onfocus", this._go_prev_focus);

				if (nexacro._enableaccessibility) {
					var message_elem = this._prev_outfocus_message_elem = new nexacro.TextBoxElement(_owner_elem);
					message_elem.create();
					nexacro.__setDOMNodeTabIndex(message_elem._handle, 0);
					nexacro._observeSysEvent(message_elem._handle, "focus", "onfocus", this._iframe_onfocus_forward);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

				this._parent_dest_handle = _owner_elem._dest_handle;

				if (nexacro._enableaccessibility) {
					message_elem = this._next_outfocus_message_elem = new nexacro.TextBoxElement(_owner_elem);
					message_elem.create();
					nexacro.__setDOMNodeTabIndex(message_elem._handle, 0);
					nexacro._observeSysEvent(message_elem._handle, "focus", "onfocus", this._iframe_onfocus_forward);
				}

				_focus_input = _doc.createElement("div");
				f_input_style = _focus_input.style;
				nexacro.__setDOMNodeTabIndex(_focus_input, 0);
				nexacro.__setDOMNodeStyleAbsolute(f_input_style);
				nexacro.__setDOMNodeStylePos(f_input_style, 0, +this.height - 5, this._isRtl());
				nexacro.__setDOMNodeStyleSize(f_input_style, 1, 1);

				f_input_style.opacity = 0;
				f_input_style.border = "0px solid #ffffff";
				_focus_input.parent_elem = this.parent;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _focus_input);
				nexacro._observeSysEvent(_focus_input, "focus", "onfocus", this._go_next_focus);

				nexacro._observeSysEvent(_handle, "load", "onload", _iframe_eventhandler_onload);
				if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) || (nexacro.isTouchInteraction && nexacro.SupportTouch)) {
					nexacro._observeSysEvent(_handle, "focusin", "onfocusin", this._iframe_onfocusin_forward);
					nexacro._observeSysEvent(_handle, "focusout", "onfocusout", this._iframe_onfocusout_forward);
				}
			}
		};
		_pWebBrowserPluginElement._go_prev_focus = function (evt) {
			var node = evt.target ? evt.target : evt.srcElement;
			var form = node.parent_elem.linkedcontrol._getForm();

			var newfocus_comp = form._searchPrevTabFocus(form._last_focused, undefined, undefined, false);

			if (newfocus_comp && newfocus_comp[0]) {
				if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
					var win = form._getWindow();
					win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
				}

				newfocus_comp[0]._setFocus(true, 1, true);
			}
		};

		_pWebBrowserPluginElement._go_next_focus = function (evt) {
			var node = evt.target ? evt.target : evt.srcElement;
			var form = node.parent_elem.linkedcontrol._getForm();

			var newfocus_comp = form._searchNextTabFocus(form._last_focused, undefined, undefined, false);

			if (newfocus_comp && newfocus_comp[0]) {
				if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
					var win = form._getWindow();
					win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
				}

				newfocus_comp[0]._setFocus(true, 0, true);
			}
		};

		_pWebBrowserPluginElement._on_frame_load = function (_win) {
			try {
				var docurl = "";
				var comp = this._parent_elem.linkedcontrol;
				if (_win) {
					if (this._need_hide) {
						nexacro.__setDOMNodeStyleVisible(this._handle.style, true);
						this._need_hide = false;
					}

					this._window = _win;

					this._document = _win.document;
					if (_win.NEXACROWEBBROWSER == undefined) {
						_win.NEXACROWEBBROWSER = comp;
					}
				}

				if (this._document) {
					docurl = this._document.location.href;
				}
			}
			catch (e) {
				this._window = null;
				this._document = null;
			}

			var _win = comp._getWindow();
			var cur_focus_paths = _win.getCurrentFocusPaths();
			var pThis = comp;

			while (pThis && pThis._is_nc_control) {
				pThis = pThis.parent;
			}

			if (!pThis) {
				return;
			}

			var focuspath_index = -1;
			var len = 0;
			if (cur_focus_paths) {
				focuspath_index = nexacro._indexOf(cur_focus_paths, pThis);
				len = cur_focus_paths.length;
			}

			if (focuspath_index < 0 && len > 0) {
				cur_focus_paths[len - 1].on_apply_custom_setfocus();
			}
			comp.on_load_handler(docurl);
		};

		_pWebBrowserPluginElement.destroy = function () {
			if (this._prev_outfocus_message_elem) {
				nexacro._stopSysObserving(this._prev_outfocus_message_elem._handle, "focus", "onfocus", this._iframe_onfocus_forward);
				this._prev_outfocus_message_elem.destroy();
				this._prev_outfocus_message_elem = null;
			}

			if (this._next_outfocus_message_elem) {
				this._next_outfocus_message_elem.destroy();
				this._next_outfocus_message_elem = null;
			}

			var _handle = this._handle;
			if (_handle) {
				nexacro._stopSysObserving(_handle, "load", "onload", _iframe_eventhandler_onload);
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				if (this._parent_dest_handle) {
					var node_child = null;
					node_child = this._document ? (this._document.childNodes ? this._document : null) : null;
					if (node_child) {
						nexacro.__removeAllDOMNode(node_child);
						node_child = null;
					}

					nexacro.__removeDOMNode(this._parent_dest_handle, _handle);
				}

				var _block_node = this._block_node;
				if (_block_node && _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _block_node);
				}

				this._block_node = null;

				this._document = null;
				this._parent_dest_handle = null;
				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;

			var params = this._params;
			if (params) {
				params.destroy();
				this._params = null;
			}

			var events = this._events;
			if (events) {
				events.destroy();
				this.events = null;
			}
		};

		_pWebBrowserPluginElement._createInternalFrameElementHandle = function (_doc, left, top, width, height, params) {
			var _handle = _doc.createElement("iframe");

			_handle._linked_element = this;
			_handle._element_type = 8;
			_handle.frameBorder = 0;

			this._object_id = this._parent_elem._handle.id + '_' + this.component._type_name;
			if (this._object_id) {
				_handle.setAttribute('id', this._object_id);
			}

			var handle_style = _handle.style;
			handle_style.position = "absolute";

			nexacro.__setDOMNodeTitle(_handle, this._parent_elem.tooltiptext ? this._parent_elem.tooltiptext : (this._parent_elem.accessibility_label ? this._parent_elem.accessibility_label : this._parent_elem.linkedcontrol.id));

			nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
			nexacro.__setDOMNodeStyleSize(handle_style, width, height);

			var param_cnt = (params ? params.length : 0);
			for (var i = 0; i < param_cnt; i++) {
				this._setInternalFrameDOMParam(_doc, _handle, params.get_id(i), params.get_item(i));
			}

			return _handle;
		};

		_pWebBrowserPluginElement._setInternalFrameDOMParam = function (_doc, target_handle, name, value) {
			target_handle.setAttribute(name, value);
		};

		_pWebBrowserPluginElement.setElementFocus = nexacro._emptyFn;

		_pWebBrowserPluginElement._setElementFocus = function (selffocus) {
			var handle = this._handle;
			if (handle) {
				nexacro.__setDOMNodeFocus(handle, true);
				nexacro.__setLastFocusedElement(this);
			}
		};

		_pWebBrowserPluginElement.setElementCodebase = function (codebaseurl) {
			if (this.codebase != codebaseurl) {
				this.codebase = codebaseurl;

				if (this._handle) {
					this._handle.setAttribute('codebase', codebaseurl);
				}
			}
		};

		_pWebBrowserPluginElement.getElementParam = function (name) {
			var handle = this._handle;
			if (handle) {
				var value = null;
				if (name) {
					if (name === "document") {
						var _doc = this._document;
						if (!_doc) {
							_doc = this._document = handle.contentDocument || handle.contentWindow.document;
						}
						var pobject = new nexacro.PluginObject;
						pobject._handle = _doc;
						return pobject;
					}
					else if (name == "window") {
						var _win = this._window;
						if (!_win) {
							_win = this._window = handle.contentWindow;
						}
						var pobject = new nexacro.PluginObject;
						pobject._handle = _win;
						return pobject;
					}

					value = handle[name];
					if (value != null && typeof (value) == "object") {
						var pobject = new nexacro.PluginObject;
						pobject._handle = value;
						return pobject;
					}
					return value;
				}
			}
			else {
				var params = this._params;
				return params.get_item(name);
			}
		};

		_pWebBrowserPluginElement.setElementParam = function (name, value) {
			if (this._handle) {
				var _doc = this.getRootWindowHandle();
				this._setInternalFrameDOMParam(_doc, this._handle, name, value);
			}
			else {
				var params = this._params;
				params.add_item(name, value);
			}
		};

		_pWebBrowserPluginElement.setElementEnable = function (value) {
			if (this.enable != value) {
				this.enable = value;
				var _handle = this._handle;
				if (_handle) {
					var _block_node = this._block_node;
					if (value) {
						if (_block_node) {
							nexacro.__removeDOMNode(_block_node.parentNode, _block_node);
							this._block_node = null;
							this.parent._node_opacity = 100;
						}
					}
					else {
						var _doc = this.getRootWindowHandle();
						this._block_node = _block_node = _doc.createElement("DIV");
						var _block_style = _block_node.style;
						_block_style.cssText = _handle.style.cssText;
						_block_node.visible = this.visible;

						this.parent._setControlOpacity(this, _block_node, 1);
						_block_style.backgroundColor = "#ffffff";
						_block_style.zIndex = 100000;

						var pNode = _handle.parentNode;
						pNode.appendChild(_block_node);
						pNode.insertBefore(_block_node, _handle);
					}
				}
			}
		};

		_pWebBrowserPluginElement.setElementVisible = function (v) {
			nexacro.PluginElement.prototype.setElementVisible.call(this, v);
			var _block_node = this._block_node;

			if (_block_node) {
				if (v != _block_node.visible) {
					nexacro.__setDOMNodeStyleVisible(_block_node.style, v);
					_block_node.visible = v;
				}
			}
		};

		_pWebBrowserPluginElement._getDoc = function () {
			return this._document;
		};

		_pWebBrowserPluginElement._setUrl = function (url) {
			if (this._handle) {
				if (nexacro.OS == "iOS" && nexacro._enableaccessibility) {
					if (url == "about:blank") {
						nexacro.__setDOMNodeStyleDisplay(this._handle.style, "none");
					}
					else {
						nexacro.__setDOMNodeStyleDisplay(this._handle.style, "initial");
					}
				}

				this.setElementParam("src", url);
			}
		};

		_pWebBrowserPluginElement._setGo = function () {
			if (this._handle && this._handle.contentWindow) {
				try {
					this._handle.contentWindow.history.go(0);
				}
				catch (e) {
				}
			}
		};

		_pWebBrowserPluginElement._setBack = function () {
			if (this._handle && this._handle.contentWindow) {
				try {
					this._handle.contentWindow.history.back();
				}
				catch (e) {
				}
			}
		};

		_pWebBrowserPluginElement._setForward = function () {
			if (this._handle && this._handle.contentWindow) {
				try {
					this._handle.contentWindow.history.forward();
				}
				catch (e) {
				}
			}
		};

		_pWebBrowserPluginElement.callMethod = function () {
			if (arguments.length < 1) {
				return;
			}

			var name = arguments[0];

			var fn_name = Array.prototype.shift.call(arguments);
			return this._window[fn_name].apply(this._window, arguments);
		};

		if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) || (nexacro.isTouchInteraction && nexacro.SupportTouch)) {
			_pWebBrowserPluginElement._iframe_onfocusout_forward = function (evt) {
				var win = this._linked_element._parent_elem.linkedcontrol._getWindow();
				win._is_iframe_focus = false;
			};

			_pWebBrowserPluginElement._iframe_onfocusin_forward = function (evt) {
				var elem = this._linked_element;
				if (elem) {
					elem = elem._parent_elem;
					if (elem) {
						var comp = elem.linkedcontrol;
						if (comp) {
							var win = comp._getWindow();
							win._is_iframe_focus = true;
						}
						comp = null;
					}
				}
				elem = null;
			};
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pWebBrowserPluginElement._iframe_onfocus_forward = function (evt) {
				if (window.event) {
					evt = window.event;
				}
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					if (evt.preventDefault) {
						evt.preventDefault();
					}
				}
				var node = evt.srcElement;
				var elem = node._linked_element;
				if (elem) {
					elem._killfocus_flag = true;
				}
			};
		}
		else {
			_pWebBrowserPluginElement._iframe_onfocus_forward = function (evt) {
				if (nexacro._getLocalStorage("_com_waiting", false)) {
					nexacro._stopSysEvent(evt);
				}
				var node = evt.target;
				var elem = node._linked_element;
				if (elem) {
					elem._killfocus_flag = true;
				}
			};
		}

		_pWebBrowserPluginElement.getProperty = _pWebBrowserPluginElement.getElementParam;
		_pWebBrowserPluginElement.setProperty = _pWebBrowserPluginElement.setElementParam;

		_pWebBrowserPluginElement.getNativeProperty = nexacro._emptyFn;

		delete _pWebBrowserPluginElement;
		nexacro.MediaPlayerPluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._parent_elem.windowed = true;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();

			this._node_type = null;
		};

		var _pMediaPlayerPluginElement = nexacro._createPrototype(nexacro.PluginElement, nexacro.MediaPlayerPluginElement);
		nexacro.MediaPlayerPluginElement.prototype = _pMediaPlayerPluginElement;

		_pMediaPlayerPluginElement._type_name = "MediaPlayerPluginElement";

		_pMediaPlayerPluginElement.classid = "{6bf52a52-394a-11d3-b153-00c04f79faa6}";

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			_pMediaPlayerPluginElement._createObjectElementHandle = function (_doc, left, top, width, height, params) {
				var _handle = _doc.createElement("object");

				_handle._linked_element = this;
				_handle._element_type = 8;

				this._object_id = this._parent_elem._handle.id + '_' + this._type_name;
				if (this._object_id) {
					_handle.setAttribute('id', this._object_id);
				}
				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, width, height);

				_handle.setAttribute('classid', "clsid:6bf52a52-394a-11d3-b153-00c04f79faa6");
				_handle.setAttribute('type', "video/x-ms-wmv");
				this._setObjectDOMParam(_doc, _handle, "wmode", "transparent");

				var param_cnt = (params ? params.length : 0);
				for (var i = 0; i < param_cnt; i++) {
					this._setObjectDOMParam(_doc, _handle, params.get_id(i), params.get_item(i));
				}
				this._object_node = _handle;
				return _handle;
			};

			_pMediaPlayerPluginElement.initEvent = function () {
				if (!this._handle) {
					return;
				}
				var comp = this._parent_elem.linkedcontrol;
				var mediaobj = this.getPluginObject();
				function media_eventhandler_playstatechange (evt) {
					var state = null;
					if (evt == 3) {
						state = "play";
					}
					else if (evt == 2) {
						state = "pause";
					}
					else if (evt == 1) {
						state = "stop";
					}
					if (state && comp) {
						comp._on_statuschanged(state);
					}
				}
				function media_eventhandler_openstatechange (evt) {
					if (mediaobj && comp) {
						var getpro = mediaobj.getProperty("controls");
						if (getpro) {
							var getitem = getpro.getProperty("currentItem");
							if (getitem) {
								var width = getitem.getProperty("imagesourcewidth");
								var height = getitem.getProperty("imagesourceheight");
								var duration = getitem.getProperty("duration");
								if (width > 0 && height > 0) {
									comp.size = width + " * " + height;
								}
								else {
									comp.size = "0 * 0";
								}
								comp.duration = duration > 0 ? duration : 0;
							}
						}
					}
				}
				function media_eventhandler_positionchange (evt1, evt2) {
					if (comp) {
						comp._on_statuschanged(evt2);
					}
				}
				function media_eventhandler_mediaerror (evt) {
					var errormsg = evt.Error ? evt.Error.errorDescription : "";
					var statuscode = evt.Error ? evt.Error.errorCode : "";
					if (comp) {
						comp.size = evt.imageSourceWidth + " * " + evt.imageSourceHeight;
						comp.duration = evt.duration;
						comp._on_error("NativeError", errormsg, statuscode);
					}
				}
				this._handle.attachEvent("PlayStateChange", media_eventhandler_playstatechange);
				this._handle.attachEvent("OpenStateChange", media_eventhandler_openstatechange);
				this._handle.attachEvent("PositionChange", media_eventhandler_positionchange);
				this._handle.attachEvent("MediaError", media_eventhandler_mediaerror);
			};
			_pMediaPlayerPluginElement._setMediaMute = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					var getpro = object.getProperty("settings");
					if (getpro) {
						getpro.setProperty("mute", value);
					}
				}
			};
			_pMediaPlayerPluginElement._setMediaControl = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					var varset = "none";
					if (value == true) {
						varset = "full";
					}
					object.setProperty("uiMode", varset);
				}
			};
			_pMediaPlayerPluginElement._setMediaUrl = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					object.setProperty("url", value);
				}
			};
			_pMediaPlayerPluginElement._setMediaCurrentTime = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					var getpro = object.getProperty("controls");
					if (getpro) {
						getpro.setProperty("currentPosition", value);
					}
				}
			};
			_pMediaPlayerPluginElement._setMediaLoop = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					var getpro = object.getProperty("settings");
					if (getpro) {
						getpro.callMethod("setMode", "loop", value);
					}
				}
			};
			_pMediaPlayerPluginElement._setMediaAutoPlay = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					var getpro = object.getProperty("settings");
					if (getpro) {
						getpro.setProperty("autostart", value);
					}
				}
			};
			_pMediaPlayerPluginElement._setMediaVolume = function (name, value) {
				var object = this.getPluginObject();
				if (object) {
					var getpro = object.getProperty("settings");
					if (getpro) {
						getpro.setProperty("volume", value);
					}
				}
			};
			_pMediaPlayerPluginElement._play = function () {
				var object = this.getPluginObject();
				if (object) {
					var controls = object.getProperty("controls");
					if (controls) {
						controls.callMethod("play");
					}
				}
			};

			_pMediaPlayerPluginElement._pause = function () {
				var object = this.getPluginObject();
				if (object) {
					var controls = object.getProperty("controls");
					if (controls) {
						controls.callMethod("pause");
					}
				}
			};

			_pMediaPlayerPluginElement._rewind = function () {
				var object = this.getPluginObject();
				if (object) {
					var controls = object.getProperty("controls");
					if (controls) {
						controls.callMethod("fastReverse");
					}
				}
			};

			_pMediaPlayerPluginElement._stop = function () {
				var object = this.getPluginObject();
				if (object) {
					var controls = object.getProperty("controls");
					if (controls) {
						controls.callMethod("stop");
						controls.destroy();
					}
					object.destroy();
				}
			};
		}
		else {
			_pMediaPlayerPluginElement.initEvent = nexacro._emptyFn;
			_pMediaPlayerPluginElement._getNodeType = function (file_type) {
				var ret = "video";

				switch (file_type) {
					case "mp3":
					case "wav":
						ret = "audio";
						break;
				}
				return ret;
			};

			_pMediaPlayerPluginElement._getType = function (file_type) {
				var ret = "video/" + file_type;

				switch (file_type) {
					case "mp3":
					case "wav":
						ret = "audio/" + file_type;
						break;
				}
				return ret;
			};

			_pMediaPlayerPluginElement._createObjectElementHandle = function (_doc, left, top, width, height, params) {
				var source = this.source;
				if (source) {
					var file_type = (source + "").substring(source.lastIndexOf(".") + 1).toLowerCase();
				}
				var type = this._getType(file_type);
				var node_name = this._getNodeType(file_type);
				var _handle = _doc.createElement(node_name);

				this._node_type = node_name;

				_handle._linked_element = this;
				_handle._element_type = 8;

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, left, top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, width, height);


				if (source) {
					var source_node = this._source_node = _doc.createElement("source");
					source_node.setAttribute('src', this.source);
					source_node.setAttribute('type', this._getType(file_type));
					_handle.appendChild(source_node);
				}

				nexacro._observeSysEvent(_handle, "canplaythrough", "oncanplaythrough", this._media_eventhandler_canplaythrough);

				nexacro._observeSysEvent(_handle, "ended", "onended", this._media_eventhandler_changedstatus);
				nexacro._observeSysEvent(_handle, "error", "onerror", this._media_eventhandler_error);


				nexacro._observeSysEvent(_handle, "pause", "onpause", this._media_eventhandler_changedstatus);
				nexacro._observeSysEvent(_handle, "play", "onplay", this._media_eventhandler_changedstatus);
				nexacro._observeSysEvent(_handle, "progress", "onprogress", this._media_eventhandler_progress);


				nexacro._observeSysEvent(_handle, "timeupdate", "ontimeupdate", this._media_eventhandler_timeupdate);

				this._object_node = _handle;
				return _handle;
			};

			_pMediaPlayerPluginElement._media_eventhandler_changedstatus = function (evt) {
				var comp = evt.target._linked_element._parent_elem.linkedcontrol;
				comp && comp._on_statuschanged(evt.type);
			};

			_pMediaPlayerPluginElement._media_eventhandler_timeupdate = function (evt) {
				var node = evt.target;
				var comp = node._linked_element._parent_elem.linkedcontrol;
				comp && comp._on_currenttimechanged(node.currentTime);
			};

			_pMediaPlayerPluginElement._media_eventhandler_error = function (evt) {
				var node = evt.target;
				var comp = node._linked_element._parent_elem.linkedcontrol;
				if (comp) {
					var errormsg = "";
					var statuscode = node.error.code;
					switch (statuscode) {
						case 1:
							errormsg = "fetching process aborted by user";
							break;
						case 2:
							errormsg = "error occurred when downloading";
							break;
						case 3:
							errormsg = "error occurred when decoding";
							break;
						case 4:
							errormsg = "video not supported";
							break;
					}
					comp._on_error("NativeError", errormsg, statuscode);
				}
			};

			_pMediaPlayerPluginElement._media_eventhandler_canplaythrough = function (evt) {
				var node = evt.target;
				var comp = node._linked_element._parent_elem.linkedcontrol;
				comp.size = node.videoWidth + " * " + node.videoHeight;
				comp.duration = node.duration;
			};

			_pMediaPlayerPluginElement.setElementSource = function (v) {
				this.source = v;
				if (this._object_node) {
					var source_node = this._source_node;
					if (source_node) {
						this._object_node.removeChild(source_node);
					}
					if (!this.source) {
						return;
					}
					var _doc = nexacro._managerFrameDoc;
					source_node = this._source_node = _doc.createElement("source");
					source_node.setAttribute('src', v);
					var file_type = "mp4";
					if (this.source) {
						file_type = (v + "").substring(v.lastIndexOf(".") + 1).toLowerCase();
					}
					var type = this._getType(file_type);
					source_node.setAttribute('type', type);
					this._object_node.appendChild(source_node);
				}
			};

			_pMediaPlayerPluginElement.setElementAttribute = function (attribute_name, v) {
				this[attribute_name] = v;
				if (this._object_node) {
					this._object_node.setAttribute(attribute_name, v);
				}
			};

			_pMediaPlayerPluginElement.setElementProperty = function (property_name, v) {
				this[property_name] = v;
				if (this._object_node) {
					this._object_node[property_name] = v;
				}
			};


			_pMediaPlayerPluginElement._play = function () {
				if (this._object_node) {
					this._object_node.play();
				}
			};

			_pMediaPlayerPluginElement._pause = function () {
				if (this._object_node) {
					this._object_node.pause();
				}
			};

			_pMediaPlayerPluginElement._rewind = function () {
				if (this._object_node) {
					this._object_node.currentTime = 0;
					this._object_node.play();
				}
			};

			_pMediaPlayerPluginElement._stop = function () {
				if (this._object_node) {
					this._object_node.pause();
					this._object_node.currentTime = 0;
				}
			};

			_pMediaPlayerPluginElement._setMediaMute = function (name, v) {
				if (this._object_node) {
					this._object_node.muted = v;
				}
			};
			_pMediaPlayerPluginElement._setMediaControl = function (name, v) {
				if (this._object_node) {
					this._object_node.controls = v;
				}
			};

			_pMediaPlayerPluginElement._setMediaUrl = function (name, v) {
				this.source = v;
				if (this._object_node) {
					this._object_node.src = v;
				}
			};

			_pMediaPlayerPluginElement._setMediaCurrentTime = function (name, v) {
				if (this._object_node) {
					this._object_node.currentTime = v;
				}
			};

			_pMediaPlayerPluginElement._setMediaLoop = function (name, v) {
				if (this._object_node) {
					this._object_node.loop = v;
				}
			};

			_pMediaPlayerPluginElement._setMediaAutoPlay = function (name, v) {
				if (this._object_node) {
					this._object_node.autoplay = v;
				}
			};

			_pMediaPlayerPluginElement._setMediaVolume = function (name, v) {
				v = v / 100;
				if (this._object_node) {
					this._object_node.volume = v;
				}
			};
		}

		_pMediaPlayerPluginElement.destroy = function () {
			nexacro.PluginElement.prototype.destroy.call();
		};

		_pMediaPlayerPluginElement._setMediaEnable = function (name, v) {
			this.enable = v;
		};
		_pMediaPlayerPluginElement._setMediaAdjustAlpha = nexacro._emptyFn;

		delete _pMediaPlayerPluginElement;

		nexacro.CanvasElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pCanvasElement = nexacro._createPrototype(nexacro.Element, nexacro.CanvasElement);
		nexacro.CanvasElement.prototype = _pCanvasElement;

		_pCanvasElement._type_name = "CanvasElement";

		_pCanvasElement.lineOffset = 0.5;
		_pCanvasElement.scale = 10;
		_pCanvasElement.scalex = 0;
		_pCanvasElement.scaley = 0;


		_pCanvasElement.fillStyle = "#000000";
		_pCanvasElement.strokeStyle = "#000000";
		_pCanvasElement.lineCap = "butt";
		_pCanvasElement.lineJoin = "miter";
		_pCanvasElement.lineWidth = 1;
		_pCanvasElement.miterLimit = 10;
		_pCanvasElement.shadowColor = "#000000";
		_pCanvasElement._shadowColor = "#000000";
		_pCanvasElement.shadowOffsetX = 0;
		_pCanvasElement.shadowOffsetY = 0;
		_pCanvasElement.shadowBlur = 0;

		_pCanvasElement.font = null;
		_pCanvasElement._font = null;

		_pCanvasElement.textAlign = "start";
		_pCanvasElement.textBaseline = 0;
		_pCanvasElement.globalAlpha = 1;
		_pCanvasElement.globalCompositeOperation = 1;

		_pCanvasElement._status_stack = [];
		_pCanvasElement._matrix_stack = [];

		_pCanvasElement.createPattern = function () {
			return null;
		};

		_pCanvasElement.createLinearGradient = function (aX0, aY0, aX1, aY1) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__createCanvasLinearGradient(_handle, aX0, aY0, aX1, aY1);
			}
			return null;
		};

		_pCanvasElement.createRadialGradient = function (aX0, aY0, aR0, aX1, aY1, aR1) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__createCanvasRadialGradient(_handle, aX0, aY0, aR0, aX1, aY1, aR1);
			}
			return null;
		};

		_pCanvasElement.setElementFillStyle = function (fillstyle) {
			var _handle = this._handle;
			if (_handle && fillstyle) {
				this.fillStyle = fillstyle;
				if (fillstyle instanceof nexacro.Style_color) {
					nexacro.__setCanvasFillColor(_handle, fillstyle);
				}
				else {
					nexacro.__setCanvasFillGradation(_handle, fillstyle);
				}
			}
		};

		_pCanvasElement.setElementFont = function (font) {
			var _handle = this._handle;
			if (!font || !_handle) {
				return;
			}

			var sysvalue = font._sysvalue;
			if (!this.font || this.font._sysvalue != sysvalue) {
				this.font = font;
				this._font = sysvalue;
				nexacro.__setCanvasFont(_handle, font, sysvalue);
			}
			else {
				nexacro.__setCanvasFont(_handle, font, sysvalue);
			}
		};

		_pCanvasElement.clearRect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasClearRect(_handle, x, y, dx, dy);
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			_pCanvasElement.setElementPosition = function (left, top) {
				if (this.left != left || this.top != top) {
					this.left = left;
					this.top = top;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setCanvasNodeStylePos(_handle.style, left, top);
					}
				}
			};
		}
		else {
			_pCanvasElement.setElementPosition = function (left, top) {
				if (this.left != left || this.top != top) {
					this.left = left;
					this.top = top;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setCanvasNodeStylePos(_handle._draw_node.style, left, top);
					}
				}
			};
		}

		_pCanvasElement.setElementGlobalAlpha = function (alpha) {
			var _handle = this._handle;
			if (alpha < 0) {
				alpha = 0;
			}
			if (alpha > 1) {
				alpha = 1;
			}

			if (_handle) {
				this.globalAlpha = alpha;
				nexacro.__setCanvasGlobalAlpha(_handle, alpha);
			}
		};

		_pCanvasElement.setElementGlobalCompositeOperation = function (strOperation) {
			var _handle = this._handle;
			if (_handle && strOperation) {
				this.globalCompositeOperation = strOperation;
				nexacro.__setCanvasGlobalCompositeOperation(_handle, strOperation);
			}
		};

		_pCanvasElement.setElementLineCap = function (linecap) {
			var _handle = this._handle;
			if (_handle) {
				this.lineCap = linecap;
				nexacro.__setCanvasLineCap(_handle, linecap);
			}
		};

		_pCanvasElement.setElementLineJoin = function (linejoin) {
			var _handle = this._handle;
			if (_handle) {
				this.lineJoin = linejoin;
				nexacro.__setCanvasLineJoin(_handle, linejoin);
			}
		};

		_pCanvasElement.setElementLineWidth = function (width) {
			var _handle = this._handle;
			if (_handle && isFinite(width)) {
				this.lineWidth = width;
				this.lineOffset = width / 2;
				nexacro.__setCanvasLineWidth(_handle, width);
			}
		};

		_pCanvasElement.setElementStrokeStyle = function (strokestyle) {
			var _handle = this._handle;
			if (_handle && strokestyle) {
				this.strokeStyle = strokestyle;
				nexacro.__setCanvasStrokeStyle(_handle, strokestyle);
			}
		};

		_pCanvasElement.setElementMiterLimit = function (limit) {
			var _handle = this._handle;
			if (_handle && limit) {
				this.miterLimit = limit;
				nexacro.__setCanvasMiterLimit(_handle, limit);
			}
		};

		_pCanvasElement.setElementShadowBlur = function (blur) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowBlur = blur;
				nexacro.__setCanvasShadowBlur(_handle, blur);
			}
		};

		_pCanvasElement.setElementShadowColor = function (color) {
			var _handle = this._handle;
			if (color && _handle) {
				this.shadowColor = color;
				_handle._shadowColor = nexacro._getWebColorFromXreColor(color.value);
				nexacro.__setCanvasShadowColor(_handle, _handle._shadowColor);
			}
		};

		_pCanvasElement.setElementShadowOffsetX = function (offsetx) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowOffsetX = offsetx;
				nexacro.__setCanvasShadowOffsetX(_handle, offsetx);
			}
		};

		_pCanvasElement.setElementShadowOffsetY = function (offsety) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowOffsetY = offsety;
				nexacro.__setCanvasShadowOffsetY(_handle, offsety);
			}
		};

		_pCanvasElement.setElementTextAlign = function (align) {
			var _handle = this._handle;
			if (_handle) {
				this.textAlign = align;
				nexacro.__setCanvasTextAlign(_handle, align);
			}
		};

		_pCanvasElement.setElementTextBaseline = function (value) {
			var _handle = this._handle;
			if (_handle) {
				this.textBaseline = value;
				nexacro.__setCanvasTextBaseline(_handle, value);
			}
		};

		_pCanvasElement.arc = function (x, y, r, start_rad, end_rad, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__darwCanvasArc(_handle, x, y, r, start_rad, end_rad, counterclockwise);
			}
		};

		_pCanvasElement.arc2 = function (x, y, r, start_deg, end_deg, counterclockwise) {
			var start_rad = nexacro._degreesToRadians(start_deg);
			var end_rad = nexacro._degreesToRadians(end_deg);
			var _handle = this._handle;
			if (_handle) {
				nexacro.__darwCanvasArc(_handle, x, y, r, start_rad, end_rad, counterclockwise);
			}
		};

		_pCanvasElement.arcTo = function (x, y, x2, y2, r) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasArcTo(_handle, x, y, x2, y2, r);
			}
		};

		_pCanvasElement.beginPath = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasBeginPath(_handle);
			}
		};

		_pCanvasElement.bezierCurveTo = function (p1x, p1y, p2x, p2y, x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasBezierCurveTo(_handle, p1x, p1y, p2x, p2y, x, y);
			}
		};

		_pCanvasElement.clip = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__clipCanvas(_handle);
			}
		};

		_pCanvasElement.closePath = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasClosePath(_handle);
			}
		};

		_pCanvasElement.drawImage = function (objimage, x, y, imgWidth, imgHeight) {
			var _handle = this._handle;
			var img = objimage._handle;
			if (img && _handle) {
				nexacro.__drawCanvasImage(_handle, img, x, y, imgWidth, imgHeight);
			}
		};

		_pCanvasElement.fill = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__fillCanvas(_handle);
			}
		};

		_pCanvasElement.fillRect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__fillCanvasRect(_handle, x, y, dx, dy);
			}
		};

		_pCanvasElement.fillText = function (text, x, y, maxWidth) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasFillText(_handle, text, x, y, maxWidth);
			}
		};

		_pCanvasElement.isPointInPath = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__isPointInCanvasPath(_handle, x, y);
			}
			return false;
		};

		_pCanvasElement.lineTo = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvaslineTo(_handle, x, y);
			}
		};

		_pCanvasElement.moveTo = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasmoveTo(_handle, x, y);
			}
		};


		_pCanvasElement.quadraticCurveTo = function (px, py, x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasQuadraticCurveTo(_handle, px, py, x, y);
			}
		};

		_pCanvasElement.rect = function (x, y, w, h) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__rectCanvas(_handle, x, y, w, h);
			}
		};

		_pCanvasElement.rotate = function (angle_rad) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__rotateCanvas(_handle, angle_rad);
			}
		};

		_pCanvasElement.rotate2 = function (angle) {
			var radians = nexacro._degreesToRadians(angle);
			this.rotate(radians);
		};

		_pCanvasElement.scale = function (dx, dy) {
			var _handle = this._handle;
			this.scalex = dx;
			this.scaley = dy;
			if (_handle) {
				nexacro.__scaleCanvas(_handle, dx, dy);
			}
		};

		_pCanvasElement.setTransform = function (a, b, c, d, e, f) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setCanvasTransform(_handle, a, b, c, d, e, f);
			}
		};

		_pCanvasElement.stroke = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__strokeCanvas(_handle);
			}
		};

		_pCanvasElement.strokeRect = function (x, y, width, height) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasStrokeRect(_handle, x, y, width, height);
			}
		};

		_pCanvasElement.strokeText = function (text, x, y, maxWidth) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__drawCanvasStrokeText(_handle, text, x, y, maxWidth);
			}
		};

		_pCanvasElement.transform = function (a, b, c, d, e, f) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__transformCanvas(_handle, a, b, c, d, e, f);
			}
		};

		_pCanvasElement.translate = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__translateCanvas(_handle, x, y);
			}
		};

		_pCanvasElement.save = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__saveCanvas(_handle);
			}
		};

		_pCanvasElement.toDataURL = function () {
			var _handle = this._handle;
			try {
				if (_handle) {
					return nexacro.__toDataURLCanvas(_handle);
				}
			}
			catch (e) {
				try {
					if (_handle) {
						return nexacro.__toDataURLCanvas(_handle);
					}
				}
				catch (e) {
					return "";
				}
			}
		};


		_pCanvasElement.restore = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__restoreCanvas(_handle);
			}
		};

		_pCanvasElement.drawArc = function (x, y, r, start_deg, end_deg, bClockwise, bNormal) {
			if (!bNormal) {
				start_deg = start_deg * (Math.PI / 180);
				end_deg = end_deg * (Math.PI / 180);
			}
			this.arc(x, y, r, start_deg, end_deg, bClockwise);
		};

		_pCanvasElement.drawFill = function () {
			this.fill();
			this.beginPath();
		};

		_pCanvasElement._setPenStyle = function (pen) {
			if (pen && pen._isValid()) {
				this.setElementStrokeStyle(pen.color);
				this.setElementLineWidth(pen.width);
			}
		};

		_pCanvasElement.drawStrokeLine = function (x1, y1, x2, y2) {
			this.moveTo(x1, y1);
			this.lineTo(x2, y2);
			this.drawStroke();
		};

		_pCanvasElement.drawStrokeVLine = function (x, y1, y2) {
			this.moveTo(x, y1);
			this.lineTo(x, y2);
			this.drawStroke();
		};

		_pCanvasElement.drawStrokeHLine = function (y, x1, x2) {
			this.moveTo(x1, y);
			this.lineTo(x2, y);
			this.drawStroke();
		};

		_pCanvasElement.drawFillArc = function (x, y, r, start_rad, end_rad, bClockwise) {
			this.drawArc(x, y, r, start_rad, end_rad, bClockwise, true);
			this.closePath();
			this.fill();
			this.beginPath();
		};

		_pCanvasElement.drawFillArc2 = function (x, y, r, start_deg, end_deg, bClockwise) {
			var start_rad = nexacro._degreesToRadians(start_deg);
			var end_rad = nexacro._degreesToRadians(end_deg);
			this.arc(x, y, r, start_rad, end_rad, bClockwise);
			this.closePath();
			this.fill();
			this.beginPath();
		};

		_pCanvasElement.halfRect = function (x, y, w, h) {
			var gap = this.lineWidth;
			var gap2 = (h > 0) ? gap : -gap;
			this.moveTo(x, y);
			this.lineTo(x, y + h);
			this.lineTo(x + w, y + h);
			this.lineTo(x + w, y);
			this.lineTo(x + w - gap, y);
			this.lineTo(x + w - gap, y + h - gap2);
			this.lineTo(x + gap, y + h - gap2);
			this.lineTo(x + gap, y);
			this.closePath();
		};

		_pCanvasElement.drawStrokeHalfRect = function (x, y, w, h) {
			this.halfRect(x, y, w, h);
			this.drawStroke();
		};

		_pCanvasElement.drawStrokeRect = function (x, y, w, h) {
			this.rect(x, y, w, h, true);
			this.drawStroke();
		};

		_pCanvasElement.drawStrokeArc = function (x, y, r, start_rad, end_rad, bClockwise) {
			this.arc(x, y, r, start_rad, end_rad, bClockwise);
			this.drawStroke();
		};

		_pCanvasElement.drawStrokeArc2 = function (x, y, r, start_deg, end_deg, bClockwise) {
			this.arc2(x, y, r, start_deg, end_deg, bClockwise);
			this.drawStroke();
		};

		_pCanvasElement.drawStrokeInsetRect = function (x, y, w, h) {
			this.insetRect(x, y, w, h);
			this.drawStroke();
		};

		_pCanvasElement.hline = function (y, x1, x2) {
			this.moveTo(x1, y);
			this.lineTo(x2, y);
		};

		_pCanvasElement.vline = function (x, y1, y2) {
			this.moveTo(x, y1);
			this.lineTo(x, y2);
		};


		if (!(nexacro.Browser == "IE" && nexacro.BrowserVersion < 9)) {
			_pCanvasElement.create = function () {
				var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
				if (_owner_elem && _owner_elem._handle) {
					var _handle = this._handle;
					if (!_handle) {
						this._owner_elem = _owner_elem;
						var _doc = _owner_elem.getRootWindowHandle();
						_handle = _doc.createElement("div");
						_handle._linked_element = this;
						_handle._element_type = 7;

						nexacro.__setDOMNodeSelectable(_handle, false);

						this._handle = this._dest_handle = _handle;
						var _draw_node = _doc.createElement("canvas");
						_handle._draw_node = _draw_node;
						_handle._draw_ctx = _draw_node.getContext("2d");
						var node_style = _draw_node.style;
						node_style.border = "none";
						nexacro.__setDOMNodeStyleAbsoluteTransparent(node_style);
						nexacro.__setDOMNodeStylePos(node_style, this.left, this.top, this._isRtl());
						nexacro.__setCanvasNodeSize(_draw_node, this.width, this.height);
						nexacro.__setCanvasTextAlign(_handle, this.textAlign);

						nexacro.__appendDOMNode(_handle, _draw_node);

						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
					}
				}
			};

			_pCanvasElement.destroy = function () {
				var _handle = this._handle;
				if (_handle) {
					_handle._linked_element = null;

					var _owner_handle = null;
					if (this._owner_elem && this._owner_elem._dest_handle) {
						_owner_handle = this._owner_elem._dest_handle;
					}

					if (!this._owner_elem || _owner_handle) {
						nexacro.__removeDOMNode(_owner_handle, _handle);
					}

					this._owner_elem = null;
					this._handle = this._dest_handle = null;

					_handle._draw_node = null;
					_handle._draw_ctx = null;
				}
				this.parent = null;
				this._parent_elem = null;
			};

			_pCanvasElement._drawRotate = function (angle_deg) {
				var _handle = this._handle;
				if (!_handle) {
					return;
				}

				var angle_rad = angle_deg * Math.PI / 180;
				this._handle._draw_ctx.rotate(angle_rad);
			};

			_pCanvasElement.circle = function (x, y, r) {
				this.arc(x, y, r, 0, 2 * Math.PI, true);
			};

			_pCanvasElement.drawStrokeCircle = function (x, y, r) {
				this.arc(x, y, r, 0, 2 * Math.PI, true);
				this.drawStroke();
			};

			_pCanvasElement.drawStrokeInsetArc = function (x, y, r, start_deg, end_deg) {
				var gap = this.lineWidth / 2;
				this.drawArc(x, y, r - gap, start_deg, end_deg);
				this.drawStroke();
			};

			_pCanvasElement.drawStrokeInsetCircle = function (x, y, r) {
				var gap = this.lineOffset;
				this.arc(x, y, r - gap, 0, 2 * Math.PI, true);
				this.drawStroke();
			};

			_pCanvasElement.drawFillRect = function (x, y, dx, dy) {
				this.rect(x, y, dx, dy);
				this.fill();
				this.beginPath();
			};

			_pCanvasElement.endDraw = function () {
				this.beginPath();
				this.closePath();
			};

			_pCanvasElement.drawStroke = function () {
				this.stroke();
				this.beginPath();
			};

			_pCanvasElement.drawFillCircle = function (x, y, r) {
				this.arc(x, y, r, 0, 2 * Math.PI, true);
				this.fill();
				this.beginPath();
			};

			_pCanvasElement.insetRect = function (x, y, w, h) {
				if (w == 0 || h == 0) {
					return;
				}
				var gap = this.lineOffset;
				var wgap = (w > 0) ? gap : -gap;
				var hgap = (h > 0) ? gap : -gap;
				this.moveTo(x + wgap, y + hgap);
				this.lineTo(x + wgap, y + h - hgap);
				this.lineTo(x + w - wgap, y + h - hgap);
				this.lineTo(x + w - wgap, y + hgap);
				this.closePath();
			};

			_pCanvasElement._setLineStyle = function (line) {
				if (line && line._isValid()) {
					this.setElementStrokeStyle(line.color);
					this.setElementLineWidth(line.width);
				}
			};

			_pCanvasElement._moveCanvas = function (left, top, width, height) {
				this.left = left || 0;
				this.top = top || 0;
				this.width = width || 0;
				this.height = height || 0;
				if (this._handle) {
					var _draw_node = this._handle._draw_node;
					if (_draw_node) {
						_draw_node.width = this.width;
						_draw_node.height = this.height;
						var nodeStyle = _draw_node.style;
						nodeStyle.left = this.left + "px";
						nodeStyle.top = this.top + "px";
						nodeStyle.width = this.width + "px";
						nodeStyle.height = this.height + "px";
					}
				}
			};

			_pCanvasElement.measureText = function (text, font) {
				var _handle = this._handle;
				if (_handle) {
					if (!font) {
						font = new nexacro.Style_font(_handle._draw_ctx.font);
					}
					var obj = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), text, font);
					return {
						width : obj[0], 
						height : obj[1]
					};
				}
			};

			_pCanvasElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setCanvasNodeSize(_handle._draw_node, width, height);
					}
				}
			};
		}
		else {
			_pCanvasElement._image_data = null;
			_pCanvasElement.create = function () {
				var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
				if (_owner_elem && _owner_elem._handle) {
					var _handle = this._handle;
					if (!_handle) {
						this._owner_elem = _owner_elem;
						var _doc = _owner_elem.getRootWindowHandle();
						_handle = _doc.createElement("div");
						_handle._linked_element = this;
						_handle._element_type = 7;

						_handle._scale = 10;
						_handle._half_scale = 5;
						_handle._path_str = "";
						_handle._vml_str = "";
						_handle._line_scale = 1;
						_handle._matrix = nexacro._createMatrixIdentity();
						_handle._pathArray = [];
						_handle._image = null;
						_handle._textBaseline = 3;

						this._handle = this._dest_handle = _handle;
						var _draw_node = _doc.createElement("div");
						_handle._draw_node = _draw_node;
						var node_style = _draw_node.style;
						node_style.border = "none";

						nexacro.__setDOMNodeStyleDirection(node_style, "ltr");
						nexacro.__setDOMNodeStyleAbsoluteTransparent(node_style);
						nexacro.__setDOMNodeStylePos(node_style, this.left, this.top, this._isRtl());
						nexacro.__setDOMNodeSize(node_style, this.width, this.height);
						if (!this.font) {
							this.font = new nexacro.Style_font("8px Arial");
						}
						nexacro.__appendDOMNode(_handle, _draw_node);
						nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
					}
				}
			};

			_pCanvasElement.destroy = function () {
				var _handle = this._handle;
				if (_handle) {
					_handle._linked_element = null;

					var _owner_handle = null;
					if (this._owner_elem && this._owner_elem._dest_handle) {
						_owner_handle = this._owner_elem._dest_handle;
					}

					if (!this._owner_elem || _owner_handle) {
						nexacro.__removeDOMNode(_owner_handle, _handle);
					}

					this._owner_elem = null;
					this._handle = this._dest_handle = null;

					_handle._linked_element = null;
					_handle._pathArray = null;
					_handle._matrix = null;
					_handle._draw_node = null;
				}
				this.parent = null;
				this._parent_elem = null;
			};

			_pCanvasElement._getCoordSize = function (x, y) {
				var m = this._handle._matrix;
				var scale = this._handle._scale;
				var _half_scale = this._handle._half_scale;
				return {
					x : Math.round(scale * (x * m[0][0] + y * m[1][0] + m[2][0]) - _half_scale), 
					y : Math.round(scale * (x * m[0][1] + y * m[1][1] + m[2][1]) - _half_scale)
				};
			};

			_pCanvasElement._getCoordPos = function (x, y) {
				var m = this._handle._matrix;
				return {
					x : (x * m[0][0] + y * m[1][0] + m[2][0]), 
					y : (x * m[0][1] + y * m[1][1] + m[2][1])
				};
			};

			_pCanvasElement._getLineCapStr = function () {
				return (this.lineCap == "butt") ? "flat" : this.lineCap;
			};

			_pCanvasElement._moveCanvas = function (left, top, width, height) {
				this.left = left || 0;
				this.top = top || 0;
				this.width = width || 0;
				this.height = height || 0;
				if (this._handle && this._handle._draw_node) {
					var _draw_node = this._handle._draw_node;
					if (_draw_node) {
						var nodestyle = _draw_node.style;
						nodestyle.left = this.left + "px";
						nodestyle.top = this.top + "px";
						nodestyle.width = this.width + "px";
						nodestyle.height = this.height + "px";
					}
				}
			};

			_pCanvasElement._setLineStyle = function (line) {
				if (line && line._isValid()) {
					this.setElementStrokeStyle(line.color);
					this.setElementLineWidth(line.width);
				}
			};

			_pCanvasElement._setPenStyle = function (pen) {
				if (pen && pen._isValid()) {
					this.setElementStrokeStyle(pen.color);
					this.setElementLineWidth(pen.width);
				}
			};

			_pCanvasElement._circle = function (x, y, r) {
				var _handle = this._handle;
				if (_handle) {
					var scale = _handle._scale;
					var hscale = _handle._half_scale;
					var _r = r * scale;
					var xStart = x + _r - hscale;
					var yStart = y - hscale;

					var p = this._getCoordSize(x, y);
					var sp = this._getCoordSize(xStart, yStart);
					var sub = ' at' + (p.x - _r) + ',' + (p.y - _r) + ' ' + (p.x + _r) + ',' + (p.y + _r) + ' ' + 
						sp.x + ',' + sp.y + ' ' + sp.x + ',' + sp.y + ' ';

					_handle._pathArray.push({
						x : p.x - _r, 
						y : p.y - _r
					});
					_handle._pathArray.push({
						x : p.x + _r, 
						y : p.y + _r
					});
					_handle._pathArray.push({
						x : sp.x, 
						y : sp.y
					});

					_handle._path_str += sub;
				}
			};

			_pCanvasElement.circle = function (x, y, r, bstroke) {
				if (bstroke) {
					var gap = this.lineOffset;
					this._circle(x, y, r - gap);
				}
				else {
					this._circle(x, y, r);
				}
			};

			_pCanvasElement.insetRect = function (x, y, w, h) {
				if (w == 0 || h == 0) {
					return;
				}
				var wgap = (w > 0) ? gap : -gap;
				var hgap = (h > 0) ? gap : -gap;
				this.moveTo(x + wgap, y + hgap);
				this.lineTo(x + wgap, y + h - hgap);
				this.lineTo(x + w - wgap, y + h - hgap);
				this.lineTo(x + w - wgap, y + hgap);
				this.closePath();
			};

			_pCanvasElement.drawHalfRect = function (x, y, w, h) {
				this.halfRect(x, y, w, h);
				this.drawStroke();
			};

			_pCanvasElement.drawFillRect = function (x, y, dx, dy) {
				this.moveTo(x, y);
				this.lineTo(x + dx, y);
				this.lineTo(x + dx, y + dy);
				this.lineTo(x, y + dy);
				this.closePath();
				this.fill();
				this.beginPath();
			};

			_pCanvasElement.strokeRect = function (x, y, dx, dy) {
				this.rect(x, y, dx, dy, true);
				this.drawStroke();
			};

			_pCanvasElement.drawStrokeInsetArc = function (x, y, r, start_deg, end_deg) {
				var gap = this.lineWidth;
				this.drawArc(x, y, r - gap, start_deg, end_deg);
				this.drawStroke();
				this.closePath();
			};

			_pCanvasElement.drawFillCircle = function (x, y, r) {
				this.circle(x, y, r);
				this.fill();
				this.beginPath();
			};

			_pCanvasElement.drawStrokeCircle = function (x, y, r) {
				var gap = this.lineOffset;
				this.circle(x, y, r + gap);
				this.circle(x, y, r - gap);
				this.drawStroke();
			};

			_pCanvasElement.drawStrokeInsetCircle = function (x, y, r) {
				var gap = this.lineWidth;
				this.circle(x, y, r);
				this.circle(x, y, r - gap);
				this.drawStroke();
			};

			_pCanvasElement.drawStroke = function () {
				var _handle = this._handle;
				var elem = _handle._linked_element;
				if (_handle && _handle._path_str) {
					var vml_str = "";
					vml_str += "<v:shape filled='f' stroked='t' style='position:absolute;width:10px;height:10px;' ";
					vml_str += "coordorigin='0 0' coordsize='" + _handle._scale * 10 + ' ' + _handle._scale * 10 + "' ";
					vml_str += "color='" + _handle._stroke_color + "' ";
					vml_str += "strokecolor='" + _handle._stroke_color + "' ";
					if (_handle._stroke_alpha != 1) {
						vml_str += "opacity='" + _handle._stroke_alpha + "' ";
					}

					var lineWidth = elem.lineWidth * _handle._line_scale;
					vml_str += "joinstyle='" + elem.lineJoin + "' endcap='" + elem._getLineCapStr() + "' strokeweight='" + lineWidth + "px' ";
					vml_str += "path='" + _handle._path_str + "' />";

					_handle._vml_str += vml_str;
					_handle._draw_node.innerHTML = _handle._vml_str;
					_handle._path_str = "";
				}
			};
			_pCanvasElement.endDraw = function () {
				this.beginPath();
			};

			_pCanvasElement.measureText = function (text, font) {
				var _handle = this._handle;
				if (_handle) {
					if (!font) {
						return;
					}
					var obj = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), text, font);
					return {
						width : obj[0], 
						height : obj[1]
					};
				}
			};

			_pCanvasElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setCanvasNodeSize(_handle._draw_node.style, width, height);
						_handle._draw_node.innerHTML = "";
						_handle._vml_str = "";
						_handle._path_str = "";
					}
				}
			};
		}

		_pCanvasElement.drawFillText = function (text, x, y, maxwidth) {
			this.fillText(text, x, y, maxwidth);
			this.beginPath();
		};

		_pCanvasElement.drawBorder = function (x, y, width, height, border, bordertype) {
			if (false && bordertype && bordertype.type == "round") {
				if (border.width && border.color != "" && border.color != "transparent") {
					var color = new nexacro.Style_color(border.color);
					this.setElementStrokeStyle(color);
					this.setElementLineWidth(parseInt(border.width));
					var radius_x = bordertype._radiusx, radius_y = bordertype._radiusy;
					if (radius_x > 0 && radius_y > 0) {
						var round_adjust = 0;
						if ((radius_x + radius_x) > width) {
							round_adjust = radius_x - Math.floor(width / 2);
						}
						if ((radius_y + radius_y) > height) {
							var round_adjust2 = radius_y - Math.floor(height / 2);
							if (round_adjust2 > round_adjust) {
								round_adjust = round_adjust2;
							}
						}
						if (round_adjust) {
							radius_x -= round_adjust;
							radius_y -= round_adjust;
						}

						this.moveTo(x + radius_x + 1000, y);
						this.arcTo(x + width, y, x, y + radius_y, radius_y);
						this.lineTo(bottomright.x, bottomright.y - rounding.w);
						this.arcTo(bottomright.x, bottomright.y, bottomright.x - rounding.w, bottomright.y, rounding.w);
						this.lineTo(bottomleft.x + rounding.h, bottomleft.y);
						this.arcTo(bottomleft.x, bottomleft.y, bottomleft.x, bottomleft.y - rounding.h, rounding.h);
						this.lineTo(topleft.x, topleft.y + rounding.x);
						this.arcTo(topleft.x, topleft.y, topleft.x + rounding.x, topleft.y, rounding.x);

						this.drawStroke();
					}
					else {
						this.drawStrokeInsetRect(x, y, width, height);
					}
				}
			}
			else if (border && !border._is_empty) {
				if (border._linecnt == 1) {
					if (border.width && border.color != "" && border.color != "transparent") {
						var color = new nexacro.Style_color(border.color);
						this.setElementStrokeStyle(color);
						this.setElementLineWidth(parseInt(border.width));
						this.drawStrokeInsetRect(x, y, width, height);
					}
				}
				else if (border._linecnt == 2) {
					if (border.top._isValid()) {
						this._setLineStyle(border.top);
						var offset = border.top._width / 2;
						this.moveTo(x, y + offset);
						this.lineTo(x + width, y + offset);
						this.moveTo(x, y + height - offset);
						this.lineTo(x + width, y + height - offset);
						this.stroke();
					}
					if (border.right._isValid()) {
						this._setLineStyle(border.right);
						var offset = border.right._width / 2;
						this.moveTo(x + width - offset, y);
						this.lineTo(x + width - offset, y + height);
						this.moveTo(x + offset, y);
						this.lineTo(x + offset, y + height);
						this.stroke();
					}
				}
				else if (border._linecnt == 3) {
					if (border.top._isValid()) {
						this._setLineStyle(border.top);
						var offset = border.top._width / 2;
						this.moveTo(x, y + offset);
						this.lineTo(x + width, y + offset);
						this.stroke();
					}
					if (border.right._isValid()) {
						this._setLineStyle(border.right);
						var offset = border.right._width / 2;
						this.moveTo(x + width - offset, y);
						this.lineTo(x + width - offset, y + height);
						this.moveTo(x + offset, y);
						this.lineTo(x + offset, y + height);
						this.stroke();
					}
					if (border.bottom._isValid()) {
						this._setLineStyle(border.bottom);
						var offset = border.bottom._width / 2;
						this.moveTo(x, y + width - offset);
						this.lineTo(x + width, y + width - offset);
						this.stroke();
					}
				}
				else {
					if (border.top._isValid()) {
						this._setLineStyle(border.top);
						var offset = border.top._width / 2;
						this.moveTo(x, y + offset);
						this.lineTo(x + width, y + offset);
						this.stroke();
					}
					if (border.right._isValid()) {
						this._setLineStyle(border.right);
						var offset = border.right._width / 2;
						this.moveTo(x + width - offset, y);
						this.lineTo(x + width - offset, y + height);
						this.stroke();
					}
					if (border.bottom._isValid()) {
						this._setLineStyle(border.bottom);
						var offset = border.bottom._width / 2;
						this.moveTo(x, y + width - offset);
						this.lineTo(x + width, y + width - offset);
						this.stroke();
					}
					if (border.left._isValid()) {
						this._setLineStyle(border.left);
						var offset = border.left._width / 2;
						this.moveTo(x + offset, y);
						this.lineTo(x + offset, y + height);
						this.stroke();
					}
				}
			}
		};

		_pCanvasElement = null;

		nexacro.CanvasGradient = function (type) {
			this.type_ = type;
			this.x0 = 0;
			this.y0 = 0;
			this.r0 = 0;
			this.x1 = 0;
			this.y1 = 0;
			this.r1 = 0;
			this.colors = [];
		};

		var _pCanvasGradient = nexacro.CanvasGradient.prototype;

		_pCanvasGradient.addColorStop = function (aOffset, aColor) {
			var color = nexacro._getWebColorFromXreColor(aColor);
			var alpha = nexacro._getXreColorAlpha(aColor) / 255;
			this.colors.push({
				offset : aOffset, 
				color : color, 
				alpha : alpha
			});
		};

		delete _pCanvasGradient;

		nexacro.GridScrollableControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			this._target_vscroll_elements = null;
			this._target_hscroll_elements = null;
			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
		};
		var _pGridScrollableControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.GridScrollableControlElement);
		nexacro.GridScrollableControlElement.prototype = _pGridScrollableControlElement;
		_pGridScrollableControlElement._type_name = "GridScrollableControlElement";

		_pGridScrollableControlElement.scroll_left = 0;
		_pGridScrollableControlElement.scroll_top = 0;
		_pGridScrollableControlElement.container_maxwidth = 0;
		_pGridScrollableControlElement.container_maxheight = 0;
		_pGridScrollableControlElement._hscroll_visible = false;
		_pGridScrollableControlElement._vscroll_visible = false;
		_pGridScrollableControlElement._hscroll_height = 0;
		_pGridScrollableControlElement._vscroll_width = 0;
		_pGridScrollableControlElement._hscroll_left = 0;
		_pGridScrollableControlElement._hscroll_top = 0;
		_pGridScrollableControlElement._hscroll_width = 0;
		_pGridScrollableControlElement._vscroll_left = 0;
		_pGridScrollableControlElement._vscroll_top = 0;
		_pGridScrollableControlElement._vscroll_height = 0;
		_pGridScrollableControlElement.hscroll_limit = 0;
		_pGridScrollableControlElement.vscroll_limit = 0;
		_pGridScrollableControlElement._scroll_showtype = -1;
		_pGridScrollableControlElement._scrollview_width_top = 0;
		_pGridScrollableControlElement._hscroll_control = null;
		_pGridScrollableControlElement._vscroll_control = null;
		_pGridScrollableControlElement._resizebutton_element = null;
		_pGridScrollableControlElement._scroll_overlap = false;

		_pGridScrollableControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("div");
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					_handle.id = this.linkedcontrol._unique_id;
					_handle._linked_element = this;
					_handle._element_type = 1;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					if (!nexacro._allow_default_pinchzoom && nexacro._isDesktop()) {
						if (this.linkedcontrol.parent._type_name == "Form" && this.linkedcontrol.position.toLowerCase() == "fixed") {
							nexacro.__setDOMNodeStyleFixed(handle_style);
						}
						else {
							nexacro.__setDOMNodeStyleAbsolute(handle_style);
						}
					}
					else {
						nexacro.__setDOMNodeStyleAbsolute(handle_style);
					}
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
				nexacro._observeSysEvent(this._client_element._handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
				nexacro._observeSysEvent(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
			}
		};

		_pGridScrollableControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro._stopSysObserving(this._client_element._handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
				nexacro._stopSysObserving(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();

				this._client_element.destroy();
				this._client_element = null;

				if (this._target_vscroll_elements) {
					if (nexacro._isArray(this._target_vscroll_elements)) {
						for (var i = 0, n = this._target_vscroll_elements.length; i < n; i++) {
							this._target_vscroll_elements[i] = null;
						}
					}

					this._target_vscroll_elements = null;
				}

				if (this._target_hscroll_elements) {
					if (nexacro._isArray(this._target_hscroll_elements)) {
						for (var i = 0, n = this._target_hscroll_elements.length; i < n; i++) {
							this._target_hscroll_elements[i] = null;
						}
					}

					this._target_hscroll_elements = null;
				}


				this._hscroll_control = null;
				this._vscroll_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pGridScrollableControlElement.clearContents = function () {
			if (this._handle) {
				nexacro._stopSysObserving(this._client_element._handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
				nexacro._stopSysObserving(this._handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
				this._client_element.clearContents();
			}
		};

		_pGridScrollableControlElement._syshandler_onscroll_forward = function (evt) {
			if (window.event) {
				evt = window.event;
			}
			var target = evt.srcElement || evt.target;
			target.scrollLeft = 0;
			target.scrollTop = 0;
		};

		_pGridScrollableControlElement.getContainerElement = function (position_step) {
			return this._client_element;
		};

		_pGridScrollableControlElement.setVertScrollElements = function (elems) {
			this._target_vscroll_elements = elems;
		};

		_pGridScrollableControlElement.setHorzScrollElements = function (elems) {
			this._target_hscroll_elements = elems;
		};

		_pGridScrollableControlElement.setContainerVScrollPos = function (pos) {
			var vert_elems = this._target_vscroll_elements;
			if (vert_elems) {
				if (nexacro._isArray(vert_elems)) {
					var elem;
					for (var i = 0, n = vert_elems.length; i < n; i++) {
						elem = vert_elems[i];
						elem.setElementVScrollPos(pos);
					}
				}
				else {
					vert_elems.setElementVScrollPos(pos);
				}
			}
		};

		_pGridScrollableControlElement.setContainerHScrollPos = function (pos) {
			var horz_elems = this._target_hscroll_elements;
			if (horz_elems) {
				if (nexacro._isArray(horz_elems)) {
					var elem;
					for (var i = 0, n = horz_elems.length; i < n; i++) {
						elem = horz_elems[i];
						elem.setElementHScrollPos(pos);
					}
				}
				else {
					horz_elems.setElementHScrollPos(pos);
				}
			}
		};

		_pGridScrollableControlElement.setContainerMaxHeight = function (height) {
			var vert_elems = this._target_vscroll_elements;
			if (vert_elems) {
				this.container_maxheight = height;
				if (nexacro._isArray(vert_elems)) {
					var elem;
					for (var i = 0, n = vert_elems.length; i < n; i++) {
						elem = vert_elems[i];
						elem._setContainerMaxHeight(height);
					}
				}
				else {
					vert_elems._setContainerMaxHeight(height);
				}
			}
		};

		_pGridScrollableControlElement.setContainerMaxWidth = function (width) {
			var horz_elems = this._target_hscroll_elements;
			if (horz_elems) {
				this.container_maxwidth = width;
				if (nexacro._isArray(horz_elems)) {
					var elem;
					for (var i = 0, n = horz_elems.length; i < n; i++) {
						elem = horz_elems[i];
						elem._setContainerMaxWidth(width);
					}
				}
				else {
					horz_elems._setContainerMaxWidth(width);
				}
			}
		};

		_pGridScrollableControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var client_element = this._client_element;
			if (this._scroll_showtype > 0) {
				var v_elements = this._target_vscroll_elements, v_element = v_elements, h_elements = this._target_hscroll_elements, h_element = h_elements;
				if (nexacro._isArray(v_elements)) {
					v_element = v_elements[0];
				}
				if (nexacro._isArray(h_elements)) {
					h_element = h_elements[0];
				}

				var v_client_height = (v_element) ? v_element._calculateClientHeight(client_height - this.client_height) : client_height - this.client_height;
				var h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
				var maxheight = (v_element) ? v_element._getContainerMaxHeight() : 0;
				var maxwidth = (h_element) ? h_element._getContainerMaxWidth() : 0;
				var scrollLeft = (h_element) ? h_element._getScrollLeft() : 0;
				var scrollTop = (v_element) ? v_element._getScrollTop() : 0;
				var hscroll_visible = false;
				var vscroll_visible = false;
				var hscroll_limit = 0;
				var vscroll_limit = 0;

				var step_count = this._step_count;
				var hscroll_hidden = false;
				var scroll_showtype = this._scroll_showtype;

				if (scroll_showtype == 1) {
					if (this._vscroll_control && maxheight > v_client_height) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight - v_client_height;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control && maxwidth > h_client_width) {
						hscroll_visible = true;
						client_height -= this._hscroll_height;
						v_client_height = (v_element) ? v_element._calculateClientHeight(client_height - this.client_height) : client_height - this.client_height;
						if (this._vscroll_control && maxheight > v_client_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= this._vscroll_width;
								h_client_width -= this._vscroll_width;
							}
							vscroll_limit = maxheight - v_client_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}
				else if (scroll_showtype == 2) {
					if (this._vscroll_control) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight + this._hscroll_height - v_client_height;
					}
					if (step_count > 0 && step_containers) {
						maxwidth = step_count * this.client_width;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}
				else if (scroll_showtype == 31) {
					if (this._vscroll_control) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight - v_client_height;
					}
					if (step_count > 0 && step_containers) {
						maxwidth = step_count * this.client_width;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control && maxwidth > h_client_width) {
						hscroll_visible = true;
						client_height -= this._hscroll_height;
						v_client_height = (v_element) ? v_element._calculateClientHeight(client_height - this.client_height) : client_height - this.client_height;
						if (this._vscroll_control && maxheight > v_client_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= this._vscroll_width;
								h_client_width -= this._vscroll_width;
							}
							vscroll_limit = maxheight - v_client_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}
				else if (scroll_showtype == 32) {
					if (this._vscroll_control && maxheight > v_client_height) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight + this._hscroll_height - v_client_height;
					}
					if (step_count > 0 && step_containers) {
						maxwidth = step_count * this.client_width;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}

				if (hscroll_limit < 0) {
					hscroll_limit = 0;
				}

				if (vscroll_limit < 0) {
					vscroll_limit = 0;
				}

				var reset_vlimit = false;
				var reset_hlimit = false;
				if (this.hscroll_limit != hscroll_limit) {
					reset_hlimit = true;
					this.hscroll_limit = hscroll_limit;
				}
				if (this.vscroll_limit != vscroll_limit) {
					reset_vlimit = true;
					this.vscroll_limit = vscroll_limit;
				}

				var reset_vscroll = false;
				var reset_hscroll = false;
				var reset_vscroll_enable = false;
				var reset_hscroll_enable = false;

				if (scrollTop > vscroll_limit) {
					reset_vscroll = true;
					scrollTop = vscroll_limit;
				}
				if (scrollLeft > hscroll_limit) {
					reset_hscroll = true;
					scrollLeft = hscroll_limit;
				}

				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}

				if (reset_hscroll) {
					this.setElementHScrollPos(scrollLeft);
				}
				if (reset_vscroll) {
					this.setElementVScrollPos(scrollTop);
				}

				if (this._vscroll_control) {
					if (this._vscroll_control.parent.enable != this._vscroll_control.enable) {
						reset_vscroll_enable = true;
					}

					if (vscroll_visible) {
						if (!this._vscroll_visible) {
							this._vscroll_visible = true;
							this._vscroll_control.set_visible(true);
						}
						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, v_client_height, v_client_height, true, scrollTop);
						}
						else {
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, v_client_height, v_client_height, true, scrollTop);
							if (reset_vscroll) {
								this._vscroll_control._setScrollPos(scrollTop);
							}
						}

						if (reset_vscroll_enable) {
							this._vscroll_control._setEnable(this._vscroll_control.parent.enable);
						}
					}
					else {
						if (this._vscroll_visible) {
							this._vscroll_visible = false;
							this._vscroll_control.set_visible(false);
						}

						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, v_client_height, v_client_height, false, scrollTop);
						}
						else if (reset_vscroll) {
							this._vscroll_control._setScrollPos(scrollTop);
						}

						if (reset_vscroll_enable) {
							this._vscroll_control._setEnable(this._vscroll_control.parent.enable);
						}
					}
				}
				if (this._hscroll_control) {
					if (this._hscroll_control.parent.enable != this._hscroll_control.enable) {
						reset_hscroll_enable = true;
					}

					if (hscroll_visible) {
						if (!this._hscroll_visible) {
							this._hscroll_visible = true;
							this._hscroll_control.set_visible(true);
						}
						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;
							this._hscroll_control._setScrollInfo(client_left, this._hscroll_top, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, h_client_width, h_client_width, true, scrollLeft);
						}
						else if (reset_hscroll) {
							this._hscroll_control._setScrollPos(scrollLeft);
						}

						if (reset_hscroll_enable) {
							this._hscroll_control._setEnable(this._hscroll_control.parent.enable);
						}
					}
					else {
						if (this._hscroll_visible) {
							this._hscroll_visible = false;
							this._hscroll_control.set_visible(false);
						}

						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;
							this._hscroll_control._setScrollInfo(client_left, this._hscroll_top, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, h_client_width, h_client_width, false, scrollLeft);
						}
						else if (reset_hscroll) {
							this._hscroll_control._setScrollPos(scrollLeft);
						}

						if (reset_hscroll_enable) {
							this._hscroll_control._setEnable(this._hscroll_control.parent.enable);
						}
					}
				}
			}
			else {
				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
		};
		_pGridScrollableControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_doc = child.elem.getRootWindowHandle();
						var new_doc = this._client_element.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this._client_element);
				}
			}
		};
		_pGridScrollableControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pGridScrollableControlElement.sendToBackElement = function (cur_elem) {
			this._client_element.sendToBackElement(cur_elem);
		};
		_pGridScrollableControlElement.bringToFrontElement = function (cur_elem) {
			this._client_element.bringToFrontElement(cur_elem);
		};
		_pGridScrollableControlElement.moveToNextElement = function (cur_elem, target_elem) {
			this._client_element.moveToNextElement(cur_elem, target_elem);
		};
		_pGridScrollableControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			this._client_element.moveToPrevElement(cur_elem, target_elem);
		};


		_pGridScrollableControlElement.setScrollControls = function (hscroll_control, vscroll_control, hscroll_height, vscroll_width, scroll_showtype) {
			var recalc = false;
			if (this._scroll_showtype != scroll_showtype) {
				this._scroll_showtype = scroll_showtype;
				recalc = true;
			}

			if (this._hscroll_control != hscroll_control) {
				if (hscroll_control) {
					this._hscroll_visible = true;
					hscroll_control._is_nc_control = true;
					this._hscroll_control = hscroll_control;
					if (this._hscroll_height != hscroll_height) {
						this._hscroll_height = hscroll_height;
						recalc = true;
					}
				}
				else {
					this._hscroll_control = null;
					if (this._hscroll_height) {
						this._hscroll_height = 0;
						recalc = true;
					}
					this._hscroll_left = 0;
					this._hscroll_top = 0;
					this._hscroll_width = 0;
				}
			}

			if (this._vscroll_control != vscroll_control) {
				if (vscroll_control) {
					this._vscroll_visible = true;
					vscroll_control._is_nc_control = true;
					this._vscroll_control = vscroll_control;
					if (this._vscroll_width != vscroll_width) {
						this._vscroll_width = vscroll_width;
						recalc = true;
					}
				}
				else {
					this._vscroll_control = null;
					if (this._vscroll_width) {
						this._vscroll_width = 0;
						recalc = true;
					}
					this._vscroll_left = 0;
					this._vscroll_top = 0;
					this._vscroll_height = 0;
				}
			}

			if (recalc) {
				this._updateClientSize();
			}
		};

		_pGridScrollableControlElement._arrangeBandOrder = function () {
			var comp = this.linkedcontrol;
			if (comp) {
				var client_element = this._client_element;
				var control_element = null;

				if (client_element._handle) {
					if (comp._headBand) {
						control_element = comp._headBand._control_element;
						nexacro.__removeDOMNode(client_element._dest_handle, control_element._handle);
					}
					if (comp._bodyBand) {
						control_element = comp._bodyBand._control_element;
						nexacro.__removeDOMNode(client_element._dest_handle, control_element._handle);
					}
					if (comp._summBand) {
						control_element = comp._summBand._control_element;
						nexacro.__removeDOMNode(client_element._dest_handle, control_element._handle);
					}

					if (comp._headBand) {
						control_element = comp._headBand._control_element;
						nexacro.__appendDOMNode(client_element._dest_handle, control_element._handle);
					}
					if (comp._bodyBand) {
						control_element = comp._bodyBand._control_element;
						nexacro.__appendDOMNode(client_element._dest_handle, control_element._handle);
					}
					if (comp._summBand) {
						control_element = comp._summBand._control_element;
						nexacro.__appendDOMNode(client_element._dest_handle, control_element._handle);
					}
				}
				delete control_element;
			}
		};

		if (nexacro.OS == "Android" && (nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari")) {
			_pGridScrollableControlElement.setElementHScrollPos = function (hpos) {
				var h_element = this._target_hscroll_elements;

				if (h_element) {
					if (nexacro._isArray(h_element)) {
						h_element = h_element[0];
					}
					if (hpos < 0) {
						hpos = 0;
					}
					if (hpos > this.hscroll_limit) {
						hpos = this.hscroll_limit;
					}
					var scrollLeft = h_element._getScrollLeft();
					if (scrollLeft != hpos || this._reset_scrollpos) {
						this.scroll_left = hpos;
						this.linkedcontrol._scroll_left = hpos;
						this.setContainerHScrollPos(hpos);
						if (this._hscroll_control) {
							this._hscroll_control._setScrollPos(hpos);
						}
					}

					if (this.parent._procRefreshDOM == true) {
						var areacontents;
						if (nexacro._isArray(h_element)) {
							areacontents = h_element[0]._client_body_element;
						}
						else {
							areacontents = h_element._client_body_element;
						}

						if (areacontents) {
							areacontents._refreshDOM();
						}
					}
				}
			};

			_pGridScrollableControlElement.setElementVScrollPos = function (vpos) {
				var v_element = this._target_vscroll_elements;

				if (v_element) {
					if (nexacro._isArray(v_element)) {
						v_element = v_element[0];
					}
					if (vpos < 0) {
						vpos = 0;
					}
					if (vpos > this.vscroll_limit) {
						vpos = this.vscroll_limit;
					}
					var scrollTop = v_element._getScrollTop();
					if (scrollTop != vpos || this._reset_scrollpos) {
						this.scroll_top = vpos;
						this.linkedcontrol._scroll_top = vpos;
						this.setContainerVScrollPos(vpos);
						if (this._vscroll_control && !this._vscroll_control._no_set_scrollinfo) {
							this._vscroll_control._setScrollPos(vpos);
						}
					}

					if (this.parent._procRefreshDOM == true) {
						var bandcontents;
						if (nexacro._isArray(v_element)) {
							bandcontents = v_element[0]._client_element;
						}
						else {
							bandcontents = v_element._client_element;
						}

						if (bandcontents) {
							bandcontents._refreshDOM();
						}
					}
				}
			};
		}
		else {
			_pGridScrollableControlElement.setElementHScrollPos = function (hpos) {
				var h_element = this._target_hscroll_elements;

				if (h_element) {
					if (nexacro._isArray(h_element)) {
						h_element = h_element[0];
					}
					if (hpos < 0) {
						hpos = 0;
					}
					if (hpos > this.hscroll_limit) {
						hpos = this.hscroll_limit;
					}
					var scrollLeft = h_element._getScrollLeft();
					if (scrollLeft != hpos || this._reset_scrollpos) {
						this.scroll_left = hpos;
						this.linkedcontrol._scroll_left = hpos;
						this.setContainerHScrollPos(hpos);
						if (this._hscroll_control && !this._hscroll_control._no_set_scrollinfo) {
							this._hscroll_control._setScrollPos(hpos);
						}
					}
				}
			};

			_pGridScrollableControlElement.setElementVScrollPos = function (vpos) {
				var v_element = this._target_vscroll_elements;

				if (v_element) {
					if (nexacro._isArray(v_element)) {
						v_element = v_element[0];
					}
					if (vpos < 0) {
						vpos = 0;
					}
					if (vpos > this.vscroll_limit) {
						vpos = this.vscroll_limit;
					}
					var scrollTop = v_element._getScrollTop();
					this.scroll_top = vpos;

					if (scrollTop != vpos || this._reset_scrollpos) {
						this.linkedcontrol._scroll_top = vpos;
						this.setContainerVScrollPos(vpos);
						if (this._vscroll_control && !this._vscroll_control._no_set_scrollinfo) {
							this._vscroll_control._setScrollPos(vpos);
						}
					}
				}
			};
		}
		;

		_pGridScrollableControlElement.setElementScrollPos = function (hpos, vpos) {
			var v_element = this._target_vscroll_elements;
			var h_element = this._target_hscroll_elements;

			if (v_element) {
				if (nexacro._isArray(v_element)) {
					v_element = v_element[0];
				}
				if (vpos < 0) {
					vpos = 0;
				}
				if (vpos > this.vscroll_limit) {
					vpos = this.vscroll_limit;
				}

				var scrollTop = v_element._getScrollTop();
				if (scrollTop != vpos) {
					this.scroll_top = vpos;
					this.linkedcontrol._scroll_top = vpos;
					this.setContainerVScrollPos(vpos);
					if (this._vscroll_control) {
						this._vscroll_control._setScrollPos(vpos);
					}
				}
			}
			if (h_element) {
				if (nexacro._isArray(h_element)) {
					h_element = h_element[0];
				}
				if (hpos < 0) {
					hpos = 0;
				}
				if (hpos > this.hscroll_limit) {
					hpos = this.hscroll_limit;
				}

				var scrollLeft = h_element._getScrollLeft();
				if (scrollLeft != hpos) {
					this.scroll_left = hpos;
					this.linkedcontrol._scroll_left = hpos;
					this.setContainerHScrollPos(hpos);
					if (this._hscroll_control) {
						this._hscroll_control._setScrollPos(hpos);
					}
				}
			}
		};

		_pGridScrollableControlElement._setInnerElementScrollMaxSize = function (sizes) {
			var v_element = this._target_vscroll_elements;
			if (v_element && sizes) {
				v_element._client_element._scroll_max_arr = sizes;
			}
		};

		_pGridScrollableControlElement.setElementScrollMaxSize = function (width, height) {
			var v_element = this._target_vscroll_elements;
			if (nexacro._isArray(v_element)) {
				v_element = v_element[0];
			}
			var h_element = this._target_hscroll_elements;
			if (nexacro._isArray(h_element)) {
				h_element = h_element[0];
			}
			var maxheight = (v_element) ? v_element._getContainerMaxHeight() : 0;
			var maxwidth = (h_element) ? h_element._getContainerMaxWidth() : 0;
			var retn = false;

			if (maxwidth != width || maxheight != height) {
				if (maxheight != height) {
					this.setContainerMaxHeight(height);
				}
				if (maxwidth != width) {
					this.setContainerMaxWidth(width);
				}
				retn = true;
			}

			if (v_element && this._scroll_showtype >= 0) {
				this._updateClientSize();
			}

			return retn;
		};

		_pGridScrollableControlElement.setElementScrollMaxWidth = function (width, update) {
			var h_element = this._target_hscroll_elements;
			if (h_element) {
				if (nexacro._isArray(h_element)) {
					h_element = h_element[0];
				}
				var maxwidth = h_element._getContainerMaxWidth();
				if (maxwidth != width) {
					if (maxwidth != width) {
						this.setContainerMaxWidth(width);
					}
					if (update && this._scroll_showtype >= 0) {
						this._updateClientSize();
					}

					return true;
				}
			}
			return false;
		};

		_pGridScrollableControlElement.setElementScrollMaxHeight = function (height, update) {
			var v_element = this._target_vscroll_elements;
			if (v_element) {
				if (nexacro._isArray(v_element)) {
					v_element = v_element[0];
				}
				var maxheight = v_element._getContainerMaxHeight();
				if (maxheight != height) {
					if (maxheight != height) {
						this.setContainerMaxHeight(height);
					}
					if (update && this._scroll_showtype >= 0) {
						this._updateClientSize();
					}

					return true;
				}
			}
			return false;
		};

		_pGridScrollableControlElement.setElementScrollbarSize = function (width, height) {
			if (this._vscroll_width != width || this._hscroll_height != height) {
				this._vscroll_width = width;
				this._hscroll_height = height;
				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}

				return true;
			}
			return false;
		};
		delete _pGridScrollableControlElement;

		nexacro.GridBandControlElement = function (parent_elem, type) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._type = type;
			this._client_element = new nexacro.GridBandContainerElement(this);
			this._client_element_fix = null;
			this._fix_height = 0;
			this.container_maxwidth = 0;
			this.container_maxheight = 0;
		};

		var _pGridBandControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.GridBandControlElement);
		nexacro.GridBandControlElement.prototype = _pGridBandControlElement;

		_pGridBandControlElement._type_name = "GridBandControlElement";

		_pGridBandControlElement.scroll_left = 0;
		_pGridBandControlElement.scroll_top = 0;

		_pGridBandControlElement.create = function () {
			nexacro.ControlElement.prototype.create.call(this);

			if (this._client_element_fix) {
				this._client_element_fix.create();
			}
		};

		_pGridBandControlElement.destroy = function () {
			if (this._client_element_fix) {
				this._client_element_fix.destroy();
				this._client_element_fix = null;
			}
			return nexacro.ControlElement.prototype.destroy.call(this);
		};

		_pGridBandControlElement._setFixArea = function (height) {
			this._fix_height = height;

			if (!this._client_element_fix) {
				this._client_element_fix = new nexacro.GridBandContainerElement(this, true);
			}

			if (this._handle && !this._client_element_fix._handle) {
				this._client_element_fix.create();
			}

			this._updateClientSize();
		};

		_pGridBandControlElement.getContainerElement = function (is_fixed) {
			if (is_fixed) {
				return this._client_element_fix;
			}

			return this._client_element;
		};

		_pGridBandControlElement._setContainerMaxHeight = function (height) {
			if (this._type == "body") {
				if (this.container_maxheight != height) {
					this.container_maxheight = height;
					this._client_element._setScrollHeight(height);
				}
			}
		};

		_pGridBandControlElement._resetExtendContainer = function () {
			this._client_element._setScrollHeight(this.container_maxheight);
		};

		_pGridBandControlElement._calculateClientHeight = function (change_height) {
			var c_height = this.client_height + change_height + ((this.border) ? this.border._getBorderHeight() : 0);
			return c_height;
		};

		_pGridBandControlElement.setElementBorder = function (border, bordertype) {
			this.border = border;
			this.bordertype = bordertype;
			this._setControlBorder(this, this._handle, border, bordertype, true);
			this._updateClientSize();
			this._client_element._adjustPos();
		};

		_pGridBandControlElement._getContainerMaxHeight = function () {
			if (this._type == "body") {
				return this.container_maxheight;
			}
			else {
				return this.client_height;
			}
		};

		_pGridBandControlElement._getScrollLeft = function () {
			return this.scroll_left;
		};

		_pGridBandControlElement._getScrollTop = function () {
			if (this._type == "body") {
				return this.scroll_top;
			}
			else {
				return 0;
			}
		};

		_pGridBandControlElement._updateClientSize = function () {
			var client_left = 0;
			var client_top = 0;
			var client_width = this._inner_width;
			var client_height = this._inner_height;
			var border = this.border;

			if (border && !border._is_real_empty()) {
				client_width += border._getBorderWidth();
				client_height += border._getBorderHeight();
			}

			var fix_height = this._fix_height;

			client_top += fix_height;
			client_height -= fix_height;

			var client_element_fix = this._client_element_fix;
			if (client_element_fix) {
				client_element_fix.setElementPosition(client_left, 0, this._bChangeRtl);
				client_element_fix.setElementSize(client_width, fix_height);
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
			else {
				this.client_left = client_left;
				this.client_top = client_top;
				this.client_width = client_width;
				this.client_height = client_height;
			}
		};

		_pGridBandControlElement.setElementVScrollPos = function (vpos) {
			if (this._type == "body") {
				this._client_element._try_user_setvpos = true;
				this._client_element.setElementVScrollPos(vpos);
				this._client_element._try_user_setvpos = null;
				this.scroll_top = vpos;
			}
		};

		_pGridBandControlElement._setOnScrollCallbackTarget = function (target) {
			if (this._type == "body") {
				this._client_element._grid = target;
			}
		};

		_pGridBandControlElement._getExtendContainerCount = function () {
			if (this._client_element) {
				return this._client_element._ext_inners.length;
			}

			return 0;
		};

		_pGridBandControlElement.setElementCursor = nexacro._emptyFn;
		_pGridBandControlElement.setElementShadow = nexacro._emptyFn;

		delete _pGridBandControlElement;


		nexacro.GridBandContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._scroll_max_arr = [];
			this._ext_inners = [];
		};



		var _pGridBandContainerElement;
		var _gridScrollMode = 1;

		if (nexacro.BrowserType == "Edge" || (nexacro.OS == "Android" && (nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari"))) {
			_gridScrollMode = 0;
		}

		if (_gridScrollMode) {
			_pGridBandContainerElement = nexacro._createPrototype(nexacro.ScrollableInnerContainerElement, nexacro.GridBandContainerElement);
		}
		else {
			_pGridBandContainerElement = nexacro._createPrototype(nexacro.ScrollableContainerElement, nexacro.GridBandContainerElement);
		}

		nexacro.GridBandContainerElement.prototype = _pGridBandContainerElement;
		_pGridBandContainerElement._type_name = "GridBandContainerElement";

		_pGridBandContainerElement._findScrollbarLinkedControl = function (elem, is_vert) {
			while (elem) {
				var linkedcontrol = elem.linkedcontrol;
				if (linkedcontrol) {
					linkedcontrol = linkedcontrol.parent;
					if (is_vert) {
						if (linkedcontrol.vscrollbar && linkedcontrol.vscrollbar._isVisible()) {
							return linkedcontrol;
						}
					}
					else {
						if (linkedcontrol.hscrollbar && linkedcontrol.hscrollbar._isVisible()) {
							return linkedcontrol;
						}
					}
				}

				elem = elem.parent;
			}
		};

		_pGridBandContainerElement._adjustPos = function () {
			this.setElementPosition(this.left, this.top);
			if (this._dest_handle && this._handle != this._dest_handle) {
				var inner_style = this._dest_handle.style;
				var left = parseInt(inner_style.left);
				var top = parseInt(inner_style.top);
				nexacro.__setDOMNodeStylePos(inner_style, left, top, this._isRtl());
			}
		};

		_pGridBandContainerElement.setElementPosition = function (left, top) {
			var border = this.parent.border;
			this.left = left;
			this.top = top;
			var _handle = this._handle;
			if (_handle) {
				if (border) {
					left = left - border._left_width;
					top = top - border._top_width;
				}
				nexacro.__setDOMNodeStylePos(_handle.style, left, top, this._isRtl());
			}
		};

		if (_gridScrollMode) {
			_pGridBandContainerElement.create = function () {
				var _owner_elem = this._parent_elem;
				if (_owner_elem && _owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("div");
					_handle.id = this._parent_elem._handle.id + this._type_name;
					_handle._linked_element = this;
					_handle._element_type = 3;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var _dest_handle = _doc.createElement("div");
					_dest_handle.id = _handle.id + "_inner";

					nexacro.__setDOMNodeSelectable(_dest_handle, false);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsoluteTransparent(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

					var inner_style = _dest_handle.style;
					inner_style.position = "absolute";
					nexacro.__setDOMNodeStylePos(inner_style, 0, 0, this._isRtl());
					nexacro.__setDOMNodeStyleSize(inner_style, this.width, this.height);

					if (this.font) {
						nexacro.__setDOMNodeStyleFont(inner_style, this.font);
					}
					if (this.letterspace) {
						nexacro.__setDOMNodeStyleLetterSpace(inner_style, this.letterspace);
					}
					if (this.color) {
						nexacro.__setDOMNodeStyleColor(inner_style, this.color);
					}

					nexacro.__appendDOMNode(_handle, _dest_handle);
					this._dest_handle = _dest_handle;

					this._handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
					this._setScrollHeight(_owner_elem.container_maxheight);
					if (this._scroll_left != 0 || this._scroll_top != 0) {
						nexacro.__setDOMNodeStyleTranslate(inner_style, -this._scroll_left, -this._scroll_top);
					}
					nexacro._observeSysEvent(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
					this._adjustPos();
				}
			};

			_pGridBandContainerElement._syshandler_onscroll_forward = function (evt) {
				var target = evt.target;
				if (!target) {
					target = evt.srcElement;
				}

				if (!target) {
					return;
				}

				var container = target._linked_element;
				if (container) {
					if (container._noEventScroll == true) {
						container._noEventScroll = false;
						return;
					}

					var elem_scroll_top = container._scroll_top | 0;

					if (target.scrollLeft > 0) {
						container._noEventScroll = true;
						target.scrollLeft = 0;
					}
					if (target.scrollTop > 0) {
						container._noEventScroll = true;
						target.scrollTop = 0;
					}
				}
			};

			_pGridBandContainerElement._setInnerElementExtend = function () {
				var _handle = this._handle;
				var _dest_handle = this._dest_handle;
				var _scroll_max = this._scroll_max_arr;
				var _doc = this._owner_elem.getRootWindowHandle();

				this._removeExtinners();
				this._ext_inners = [];

				var scroll_max_len = _scroll_max.length;

				if (scroll_max_len > 0) {
					for (var i = 1; i < scroll_max_len; i++) {
						var _ext_inner = _doc.createElement("div");
						_ext_inner.id = _dest_handle.id + "_ext_" + (i - 1);

						nexacro.__setDOMNodeSelectable(_ext_inner, false);

						var inner_style = _ext_inner.style;
						inner_style.position = "absolute";
						nexacro.__setDOMNodeStylePos(inner_style, 0, this.height, this._isRtl());
						nexacro.__setDOMNodeStyleSize(_ext_inner.style, this.width, _scroll_max[i] - _scroll_max[i - 1]);

						nexacro.__appendDOMNode(_handle, _ext_inner);

						this._ext_inners.push(_ext_inner);
					}
				}
			};

			_pGridBandContainerElement._setScrollHeight = function (height) {
				var _handle = this._dest_handle;
				if (_handle) {
					if (this._scroll_max_arr && this._scroll_max_arr.length > 0) {
						height = this._scroll_max_arr[0];
						if (height < this.height) {
							height = this.height;
						}

						nexacro.__setDOMNodeStyleSize(_handle.style, this.width, height);
						this._setInnerElementExtend();
					}
					else {
						if (height < this.height) {
							height = this.height;
						}

						nexacro.__setDOMNodeStyleSize(_handle.style, this.width, height);
					}
				}
			};

			if (_gridScrollMode == 2) {
				_pGridBandContainerElement.setElementVScrollPos = function (vpos) {
					if (this._scroll_top != vpos || this.parent._reset_scrollpos) {
						this._scroll_top = vpos;
						var _inner_handle = this._dest_handle;
						if (_inner_handle) {
							nexacro.__setDOMNodeStylePos(_inner_handle.style, 0, -vpos, this._isRtl());

							if (this._grid) {
								this._grid._callback_onscroll(vpos);
							}
						}
					}
				};

				_pGridBandContainerElement._getDestHandle = function (top) {
					return this._dest_handle;
				};
			}
			else {
				_pGridBandContainerElement._getDestHandle = function (top, idx) {
					if (idx == undefined) {
						idx = this._getExtInnerIdx(top);
					}

					return (idx < 0) ? this._dest_handle : this._ext_inners[idx];
				};

				_pGridBandContainerElement._getExtInnerIdx = function (top) {
					var _ext_inners = this._ext_inners;
					var _scroll_max = this._scroll_max_arr;
					var idx = -1;

					for (var i = 0, n = _scroll_max.length; i < n; i++) {
						if (top < _scroll_max[i]) {
							idx = i - 1;
							break;
						}
					}
					return idx;
				};

				_pGridBandContainerElement._changeInnerElement = function (top, row_handle) {
					var idx = this._getExtInnerIdx(top);
					var next_handle = this._getDestHandle(top, idx);
					var prev_handle = row_handle.parentElement;

					if (idx != null && idx > -1) {
						top = top - this._scroll_max_arr[idx];
					}

					if (prev_handle && (prev_handle != next_handle)) {
						nexacro.__removeDOMNode(prev_handle, row_handle);
						nexacro.__appendDOMNode(next_handle, row_handle);
					}

					return top;
				};

				_pGridBandContainerElement._setInnerElementVScrollPos = function (vpos) {
					var ext_vpos = 0;
					var _ext_inners = this._ext_inners;
					var scroll_max_arr = this._scroll_max_arr;
					var adjust_vpos = nexacro.Browser_Transform3d ? this.height : 0;

					for (var i = 0; i < _ext_inners.length; i++) {
						if (vpos + adjust_vpos > scroll_max_arr[i] && vpos < scroll_max_arr[i + 1]) {
							ext_vpos = vpos - (scroll_max_arr[i] - adjust_vpos);
						}
						else {
							ext_vpos = -adjust_vpos;
						}
						nexacro.__setDOMNodeStyleTranslate(_ext_inners[i].style, 0, -ext_vpos);
					}
				};

				_pGridBandContainerElement.setElementVScrollPos = function (vpos) {
					if (this._scroll_top != vpos || this.parent._reset_scrollpos) {
						this._scroll_top = vpos;
						var _inner_handle = this._dest_handle;
						if (_inner_handle) {
							nexacro.__setDOMNodeStyleTranslateY(_inner_handle.style, -vpos);
							this._setInnerElementVScrollPos(vpos);

							if (this._grid) {
								this._grid._callback_onscroll(vpos);
							}
						}
					}
				};
			}
			_pGridBandContainerElement._refreshDOM = function () {
				if (this._handle) {
					nexacro.__setDOMNodeVScrollPos(this._handle, 1);
				}
			};
			_pGridBandContainerElement._removeExtinners = function () {
				var handle = this._handle;
				var ext_inners = this._ext_inners;

				for (var i = 0; i < ext_inners.length; i++) {
					nexacro.__removeDOMNode(handle, ext_inners[i]);
				}
				this._ext_inners = null;
			};
		}
		else {
			_pGridBandContainerElement.create = function () {
				var _owner_elem = this._parent_elem;
				if (_owner_elem && _owner_elem._handle && !this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = _owner_elem.getRootWindowHandle();
					var _handle = _doc.createElement("div");
					_handle.id = this._parent_elem._handle.id + this._type_name;
					_handle._linked_element = this;
					_handle._element_type = 3;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsoluteTransparent(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

					if (this.font) {
						nexacro.__setDOMNodeStyleFont(handle_style, this.font);
					}
					if (this.letterspace) {
						nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
					}
					if (this.color) {
						nexacro.__setDOMNodeStyleColor(handle_style, this.color);
					}

					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

					if (this._scroll_left != 0 || this._scroll_top != 0) {
						nexacro.__setDOMNodeOffset(_handle, this._scroll_left, this._scroll_top);
					}

					var tempdiv = this._tempdiv = _doc.createElement("div");
					tempdiv._element_type = 3;

					nexacro.__setDOMNodeStyleAbsoluteTransparent(tempdiv.style);
					nexacro.__setDOMNodeStylePos(tempdiv.style, 0, 0, this._isRtl());
					nexacro.__setDOMNodeStyleSize(tempdiv.style, 1, 1);
					nexacro.__setDOMNodeStyleVisible(tempdiv.style, false);
					nexacro.__appendDOMNode(_handle, tempdiv);

					this._setScrollHeight(_owner_elem.container_maxheight);

					nexacro._observeSysEvent(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);
					this._adjustPos();
				}
			};

			_pGridBandContainerElement.destroy = function () {
				var _handle = this._handle;
				if (_handle) {
					this._removeExtinners();
					nexacro._stopSysObserving(_handle, "scroll", "onscroll", this._syshandler_onscroll_forward);

					_handle._linked_element = null;
					var _owner_handle = null;
					if (this._owner_elem && this._owner_elem._dest_handle) {
						_owner_handle = this._owner_elem._dest_handle;
					}

					if (!this._owner_elem || _owner_handle) {
						nexacro.__removeDOMNode(_owner_handle, _handle);
					}

					nexacro.__removeDOMNode(_handle, this._tempdiv);
					this._tempdiv = null;
					this._owner_elem = null;
					this._handle = this._dest_handle = null;
				}
				this.parent = null;
				this._parent_elem = null;
			};

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (nexacro.BrowserVersion <= 8) {
					_pGridBandContainerElement._syshandler_onscroll_forward = function (evt) {
						if ((!evt || evt.type != "scroll") && window.event) {
							evt = window.event;
						}
						if (evt.type != "scroll") {
							return;
						}

						var target = evt.srcElement;
						if (!target) {
							return;
						}

						var container = target._linked_element;
						if (container) {
							if (container._noEventScroll == true) {
								container._noEventScroll = false;

								if (container._grid) {
									container._grid._callback_onscroll(target.scrollTop);
								}

								return;
							}

							var elem_scroll_top = container._scroll_top | 0;

							if (!container._try_user_setvpos) {
								if (elem_scroll_top != target.scrollTop) {
									var linkedcontrol = container._findScrollbarLinkedControl(container, true);
									if (linkedcontrol) {
										if (linkedcontrol._scrollpixel == "all") {
											linkedcontrol.vscrollbar.set_pos(target.scrollTop);
										}
										else {
											linkedcontrol.vscrollbar._set_pixelpos(target.scrollTop);
										}
									}
									else {
										target.scrollTop = elem_scroll_top;
									}
								}
							}
						}
					};
				}
				else {
					_pGridBandContainerElement._syshandler_onscroll_forward = function (evt) {
						if ((!evt || evt.type != "scroll") && window.event) {
							evt = window.event;
						}
						if (evt.type != "scroll") {
							return;
						}

						var target = evt.srcElement;
						if (!target) {
							return;
						}

						var container = target._linked_element;
						if (container) {
							if (container._noEventScroll == true) {
								container._noEventScroll = false;

								if (container._grid) {
									container._grid._callback_onscroll(target.scrollTop);
								}

								return;
							}

							var elem_scroll_top = container._scroll_top | 0;

							if (elem_scroll_top != target.scrollTop) {
								var linkedcontrol = container._findScrollbarLinkedControl(container, true);
								if (linkedcontrol) {
									if (linkedcontrol._scrollpixel == "all") {
										linkedcontrol.vscrollbar.set_pos(target.scrollTop);
									}
									else {
										linkedcontrol.vscrollbar._set_pixelpos(target.scrollTop);
									}
								}
								else {
									target.scrollTop = elem_scroll_top;
								}
							}
						}
					};
				}
			}
			else {
				_pGridBandContainerElement._syshandler_onscroll_forward = function (evt) {
					var target = evt.target;
					if (!target) {
						return;
					}
					var container = target._linked_element;
					if (container) {
						if (container._noEventScroll == true) {
							container._noEventScroll = false;

							if (container._grid) {
								container._grid._callback_onscroll(target.scrollTop);
							}

							return;
						}

						var elem_scroll_top = container._scroll_top | 0;

						if (elem_scroll_top != target.scrollTop) {
							var linkedcontrol = container._findScrollbarLinkedControl(container, true);
							if (linkedcontrol) {
								if (linkedcontrol._scrollpixel == "all") {
									linkedcontrol.vscrollbar.set_pos(target.scrollTop);
								}
								else {
									linkedcontrol.vscrollbar._set_pixelpos(target.scrollTop);
								}
							}
							else {
								target.scrollTop = elem_scroll_top;
							}
						}
					}
				};
			}

			_pGridBandContainerElement._setScrollHeight = function (height) {
				if (this._tempdiv) {
					nexacro.__setDOMNodeStylePos(this._tempdiv.style, 0, height - 1, this._isRtl());
				}
			};

			_pGridBandContainerElement.setElementVScrollPos = function (vpos) {
				if (this._scroll_top != vpos || this.parent._reset_scrollpos) {
					this._scroll_top = vpos;

					var _handle = this._handle;
					if (_handle) {
						this._noEventScroll = true;
						nexacro.__setDOMNodeVScrollPos(_handle, vpos);
					}
				}
			};

			_pGridBandContainerElement._getDestHandle = function (top) {
				return this._dest_handle;
			};

			_pGridBandContainerElement._removeExtinners = function () {
			};
		}
		;

		delete _pGridBandContainerElement;


		nexacro.GridRowControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			this._client_left_element = null;
			this._client_body_element = new nexacro.GridAreaContainerElement(this, "body");
			this._client_right_element = null;

			this._left_width = 0;
			this._right_width = 0;
			this._body_width = 0;
			this._body_scroll_maxwidth = 0;
			this.scroll_left = 0;
			this._top = 0;
		};

		var _pGridRowControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.GridRowControlElement);

		nexacro.GridRowControlElement.prototype = _pGridRowControlElement;

		_pGridRowControlElement._type_name = "GridRowControlElement";

		_pGridRowControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.linkedcontrol._fixed);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = this.linkedcontrol._getWindow()._doc;
					var _handle = _doc.createElement("div");
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					_handle.id = this.linkedcontrol._unique_id;
					_handle._linked_element = this;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;
					var _owner_dest_handle = _owner_elem._getDestHandle(this.top);
					this.setElementPosition(this.left, this.top, true);

					nexacro.__appendDOMNode(_owner_dest_handle, _handle);

					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);
				}

				if (this._handle) {
					if (!this._client_body_element._handle) {
						this._client_body_element.create();
					}
					if (this._client_left_element && !this._client_left_element._handle) {
						this._client_left_element.create();
					}
					if (this._client_right_element && !this._client_right_element._handle) {
						this._client_right_element.create();
					}

					this._client_element = this._client_body_element;
				}
			}
		};

		_pGridRowControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_handle.parentNode, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._destroyControlSubElements();

				this._client_body_element.destroy();

				if (this._client_left_element) {
					this._client_left_element.destroy();
				}

				if (this._client_right_element) {
					this._client_right_element.destroy();
				}

				this._client_body_element = null;
				this._client_left_element = null;
				this._client_right_element = null;
				this._client_element = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pGridRowControlElement.clearContents = function () {
			if (this._handle) {
				this._client_body_element.clearContents();
				if (this._client_left_element) {
					this._client_left_element.clearContents();
				}
				if (this._client_right_element) {
					this._client_right_element.clearContents();
				}
			}
		};

		_pGridRowControlElement.getContainerElement = function (area) {
			if (area == "left") {
				return this._client_left_element;
			}
			else if (area == "right") {
				return this._client_right_element;
			}

			return this._client_body_element;
		};

		_pGridRowControlElement.setArea = function (leftwidth, rightwidth) {
			if (leftwidth > 0 && !this._client_left_element) {
				this._client_left_element = new nexacro.GridAreaContainerElement(this, "left");
			}

			if (rightwidth > 0 && !this._client_right_element) {
				this._client_right_element = new nexacro.GridAreaContainerElement(this, "right");
			}

			this._left_width = leftwidth;
			if (this._client_left_element) {
				this._client_left_element.setElementPosition(this.client_left, this.client_top, this._bChangeRtl);
				this._client_left_element.setElementSize(leftwidth, this.client_height);
			}

			this._right_width = rightwidth;
			if (this._client_right_element) {
				this._client_right_element.setElementPosition(this.client_width - rightwidth, this.client_top, this._bChangeRtl);
				this._client_right_element.setElementSize(rightwidth, this.client_height);
			}

			this._body_width = this.client_width - leftwidth - rightwidth;
			this._client_body_element.setElementPosition(leftwidth, this.client_top, this._bChangeRtl);
			this._client_body_element.setElementSize(this._body_width, this.height);
		};

		_pGridRowControlElement._updateClientSize = function () {
			this.client_left = this._inner_left;
			this.client_top = this._inner_top;
			this.client_width = this._inner_width;
			this.client_height = this._inner_height;

			this.setArea(this._left_width, this._right_width);
		};

		_pGridRowControlElement._setContainerMaxWidth = function (width) {
			if (this._body_scroll_maxwidth != width) {
				this._body_scroll_maxwidth = width;
			}
		};

		_pGridRowControlElement._calculateClientWidth = function (change_width) {
			var c_width = this._body_width + change_width;
			return c_width;
		};

		_pGridRowControlElement._getContainerMaxWidth = function () {
			return this._body_scroll_maxwidth;
		};

		_pGridRowControlElement._getScrollLeft = function () {
			return this.scroll_left;
		};

		_pGridRowControlElement.setElementHScrollPos = function (hpos) {
			this._client_body_element.setElementHScrollPos(hpos);
			this.scroll_left = hpos;
		};

		if (_gridScrollMode == 1) {
			_pGridRowControlElement.setElementPosition = function (left, top, bForce) {
				var _owner_elem = this._owner_elem;
				if (this.left != left || this.top != top || bForce) {
					if (_owner_elem && (this.top != top || bForce)) {
						this._top = _owner_elem._changeInnerElement(top, this._handle);
					}

					this.left = left;
					this.top = top;

					var _handle = this._handle;
					if (_handle) {
						nexacro.__setDOMNodeStylePos(_handle.style, left, this._top, this._isRtl());
					}
				}
			};
		}

		_pGridRowControlElement.setElementRtlDirection = function (rtldirection) {
			nexacro.Element.prototype.setElementRtlDirection.call(this, rtldirection);
			this._bChangeRtl = true;
			this._updateClientSize();
			this._bChangeRtl = false;
		};

		_pGridRowControlElement.setElementCursor = nexacro._emptyFn;
		_pGridRowControlElement.setElementShadow = nexacro._emptyFn;

		delete _pGridRowControlElement;


		nexacro.GridAreaContainerElement = function (parent_elem, areatype) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._areatype = areatype;
		};

		var _pGridAreaContainerElement;
		if (nexacro.BrowserType == "Edge") {
			_pGridAreaContainerElement = nexacro._createPrototype(nexacro.ScrollableContainerElement, nexacro.GridAreaContainerElement);
		}
		else {
			_pGridAreaContainerElement = nexacro._createPrototype(nexacro.ScrollableInnerContainerElement, nexacro.GridAreaContainerElement);
		}

		nexacro.GridAreaContainerElement.prototype = _pGridAreaContainerElement;
		_pGridAreaContainerElement._type_name = "GridAreaContainerElement";

		_pGridAreaContainerElement._findScrollbarLinkedControl = function (elem, is_vert) {
			while (elem) {
				var linkedcontrol = elem.linkedcontrol;
				if (linkedcontrol) {
					linkedcontrol = linkedcontrol.parent.parent;
					if (is_vert) {
						if (linkedcontrol.vscrollbar && linkedcontrol.vscrollbar._isVisible()) {
							return linkedcontrol;
						}
					}
					else {
						if (linkedcontrol.hscrollbar && linkedcontrol.hscrollbar._isVisible()) {
							return linkedcontrol;
						}
					}
				}

				elem = elem.parent;
			}
		};

		if (nexacro.BrowserType == "Edge") {
			_pGridAreaContainerElement.setElementHScrollPos = function (hpos) {
				this._scroll_left = hpos;
				var _handle = this._dest_handle;
				if (this._handle) {
					hpos = nexacro.__convertScrollLeftFromDOMNode(this._handle, hpos);
					nexacro.__setDOMNodeHScrollPos(this._handle, hpos);
				}
			};

			_pScrollableContainerElement._syshandler_onscroll_forward = function (evt) {
				if ((!evt || evt.type != "scroll") && window.event) {
					evt = window.event;
				}
				if (evt.type != "scroll") {
					return;
				}

				var target = evt.srcElement;
				if (!target) {
					return;
				}

				var container = target._linked_element;
				if (container) {
					var parent_elem = container.parent;
					var retn = false;

					if (parent_elem._recover_vpos != undefined) {
						target.scrollTop = parent_elem._recover_vpos;
						parent_elem._recover_vpos = undefined;
						retn = true;
					}
					if (parent_elem._recover_hpos != undefined) {
						target.scrollLeft = parent_elem._recover_hpos;
						parent_elem._recover_hpos = undefined;
						retn = true;
					}

					if (retn) {
						return;
					}

					var elem_scroll_top = container._scroll_top | 0;
					var elem_scroll_left = container._scroll_left | 0;

					var scroll_left = nexacro.__convertScrollLeftFromDOMNode(target);
					var scroll_top = target.scrollTop;

					container._cached_scrollLeft = scroll_left;
					container._cached_scrollTop = scroll_top;


					if (elem_scroll_left != scroll_left) {
						target.scrollLeft = elem_scroll_left;
					}

					if (elem_scroll_top != scroll_top) {
						target.scrollTop = elem_scroll_top;
					}
				}
			};
		}
		else {
			_pGridAreaContainerElement.setElementHScrollPos = function (hpos) {
				this._scroll_left = hpos;
				var _handle = this._dest_handle;
				if (this._handle) {
					var bRtl = this._isRtl();
					if (bRtl) {
						if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
							nexacro.__setDOMNodeStyleTranslateX(_handle.style, -hpos, bRtl);
						}
						else {
							nexacro.__setDOMNodeStyleTranslateX(_handle.style, hpos);
						}
					}
					else {
						nexacro.__setDOMNodeStyleTranslateX(_handle.style, -hpos);
					}
				}
			};
		}


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
			_pGridAreaContainerElement.setElementPosition = function (left, top, bForce) {
				nexacro.Element.prototype.setElementPosition.call(this, left, top, bForce);

				var _dest_handle = this._dest_handle;
				if (_dest_handle && this._handle != _dest_handle) {
					var _is_rtl = this._isRtl();
					if (_is_rtl) {
						nexacro.__setDOMNodeStylePos(_dest_handle.style, -_dest_handle.offsetLeft, -_dest_handle.offsetTop, _is_rtl);
					}
					else {
						nexacro.__setDOMNodeStylePos(_dest_handle.style, _dest_handle.offsetLeft, _dest_handle.offsetTop, _is_rtl);
					}
				}
			};
		}
		else {
			_pGridAreaContainerElement.setElementPosition = function (left, top, bForce) {
				nexacro.Element.prototype.setElementPosition.call(this, left, top, bForce);

				var _dest_handle = this._dest_handle;
				if (_dest_handle && this._handle != _dest_handle) {
					nexacro.__setDOMNodeStylePos(this._dest_handle.style, 0, 0, this._isRtl());
				}
			};
		}

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			_pGridAreaContainerElement.setElementScrollPos = function (hpos, vpos, bForce) {
				if (this._areatype == "body") {
					nexacro.ScrollableInnerContainerElement.prototype.setElementScrollPos.call(this, hpos, vpos, bForce);
				}
				else {
					this.setElementHScrollPos(hpos);
				}
			};
		}

		_pGridAreaContainerElement._refreshDOM = function () {
			if (this._handle) {
				this._noRecovery = true;
				hpos = nexacro.__convertScrollLeftFromDOMNode(this._handle, 1);
				nexacro.__setDOMNodeHScrollPos(this._handle, hpos);
			}
		};
		_pGridAreaContainerElement.setElementCursor = nexacro._emptyFn;
		_pGridAreaContainerElement.setElementShadow = nexacro._emptyFn;

		delete _pGridAreaContainerElement;

		nexacro.GridCellControlElement = function (parent_elem, area, mode, padding) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._area = area;
			this._expand_width = 0;
			this._expand_ctrl = null;
			this._mode = "";
			this._changeMode(mode, padding);
		};

		var _pGridCellControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.GridCellControlElement);
		nexacro.GridCellControlElement.prototype = _pGridCellControlElement;

		_pGridCellControlElement._type_name = "GridCellControlElement";

		_pGridCellControlElement._changeMode = function (mode, padding) {
			mode = (mode) ? mode : "text";

			if (this._mode !== mode) {
				var prev = this._client_element;
				var textchange = false;

				if (this._mode.indexOf("text") >= 0 && mode.indexOf("text") >= 0) {
					textchange = true;
				}

				if (mode == "text") {
					this._client_element = new nexacro.GridCellTextSimpleContainerElement(this);

					if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8)) {
						this._client_element.padding = (padding) ? padding : null;
					}
				}
				else if (mode == "expandtext") {
					this._client_element = new nexacro.GridCellTextContainerElement(this);
				}
				else {
					this._client_element = new nexacro.GridCellContainerElement(this);
				}

				var client_element = this._client_element;

				if (prev) {
					if (textchange) {
						client_element.font = prev.font;
						client_element.letterspace = prev.letterspace;
						client_element.color = prev.color;
						client_element.cursor = prev.cursor;
						client_element.align = prev.align;
						client_element.halign = prev.halign;
						client_element.valign = prev.valign;
						client_element.text = prev.text;
						client_element.linespace = prev.linespace;
						client_element.wordwrap = prev.wordwrap;
						client_element.decoration = prev.decoration;
						client_element._cell_node = prev._cell_node;
						client_element._use_newline = prev._use_newline;
					}
					if (this.linkedcontrol._subComp) {
						this.linkedcontrol._subComp.destroy();
						this.linkedcontrol._subComp = null;
					}
					prev.destroy();
				}

				if (this._handle && !client_element._handle) {
					client_element.create();
				}
				client_element.setElementSize(this.client_width, this.client_height);
				client_element.setElementPosition(this.client_left, this.client_top);

				this._mode = mode;
			}
			else {
				if (this._mode == "text") {
					if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8)) {
						this._client_element.padding = (padding) ? padding : null;
					}
				}
			}

			return this._client_element;
		};

		_pGridCellControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this._area);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _doc = this.linkedcontrol._getWindow()._doc;
					var _handle = _doc.createElement("div");
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					_handle.id = this.linkedcontrol._unique_id;
					_handle._linked_element = this;

					nexacro.__setDOMNodeSelectable(_handle, false);

					var handle_style = _handle.style;
					nexacro.__setDOMNodeStyleAbsolute(handle_style);
					nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
					nexacro.__setDOMNodeStyleSize(handle_style, this._node_width, this._node_height);

					this._handle = this._dest_handle = _handle;
					nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);

					this._createControlSubElements(this, _handle);
					this._refreshForeground(_handle, handle_style);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};

		_pGridCellControlElement._setExpandControl = function (expand_ctrl, expand_width) {
			this._expand_ctrl = expand_ctrl;
			this._expand_width = expand_width;
			this._updateClientSize();
		};

		_pGridCellControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var padding = this.padding;
			if (this.padding) {
				client_left += padding.left;
				client_top += padding.top;
				client_width -= (padding.left + padding.right);
				client_height -= (padding.top + padding.bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}

				if (this._mode == "text" && (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8))) {
					this._client_element.setElementPadding(this.padding);
				}
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				client_left += this.padding_left;
				client_top += this.padding_top;
				client_width -= (this.padding_left + this.padding_right);
				client_height -= (this.padding_top + this.padding_bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}

				if (this._mode == "text" && (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8))) {
					this._client_element.setElementPaddingXY(this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
				}
			}

			if (this._expand_ctrl && this._expand_ctrl.visible == true) {
				client_width -= this._expand_width;
				if (client_width < 0) {
					client_width = 0;
				}
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
			else {
				this.client_left = client_left;
				this.client_top = client_top;
				this.client_width = client_width;
				this.client_height = client_height;
			}
		};

		_pGridCellControlElement._setDisplay = function (v) {
			var handle;
			if (handle = this._handle) {
				var handle_style = handle.style;

				if (v) {
					nexacro.__setDOMNodeStyleDisplay(handle_style, "");
				}
				else {
					nexacro.__setDOMNodeStyleDisplay(handle_style, "none");
				}
			}
		};

		_pGridCellControlElement.setContainerVisible = function (v) {
			if (this._client_element) {
				this._client_element.setElementVisible(v);
			}
		};
		_pGridCellControlElement._setControlBackground = function (element, _handle, background, gradation, notusevml) {
			return nexacro.ControlElement.prototype._setControlBackground.call(this, element, _handle, background, gradation, true);
		};

		delete _pGridCellControlElement;


		nexacro.GridCellContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pGridCellContainerElement = nexacro._createPrototype(nexacro.ContainerElement, nexacro.GridCellContainerElement);
		nexacro.GridCellContainerElement.prototype = _pGridCellContainerElement;

		_pGridCellContainerElement._type_name = "GridCellContainerElement";

		_pGridCellContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.linkedcontrol._getWindow()._doc;
				var _handle = _doc.createElement("div");
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 2;

				nexacro.__setDOMNodeSelectable(_handle, false);
				nexacro.AccessibilityUtil.supportMobileApplicationAccessibility(_handle);

				var handle_style = _handle.style;
				nexacro.__setDOMNodeStyleAbsolute(handle_style);
				nexacro.__setDOMNodeStylePos(handle_style, this.left, this.top, this._isRtl());
				nexacro.__setDOMNodeStyleSize(handle_style, this.width, this.height);

				if (this.font) {
					nexacro.__setDOMNodeStyleFont(handle_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(handle_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(handle_style, this.color);
				}
				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
			}
		};

		delete _pGridCellContainerElement;


		nexacro.GridCellTextContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pGridCellTextContainerElement = nexacro._createPrototype(nexacro.TextBoxElement, nexacro.GridCellTextContainerElement);
		nexacro.GridCellTextContainerElement.prototype = _pGridCellTextContainerElement;

		_pGridCellTextContainerElement._type_name = "GridCellTextContainerElement";

		_pGridCellTextContainerElement._is_nc_element = true;

		_pGridCellTextContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.linkedcontrol._getWindow()._doc;
				var _handle = this._createTextElementHandle(_doc, this.left, this.top, this.width, this.height);
				_handle.id = this._parent_elem._handle.id + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 4;

				nexacro.__setDOMNodeSelectable(_handle, false);
				nexacro.AccessibilityUtil.supportMobileApplicationAccessibility(_handle);

				var handle_style = _handle.style;
				var cell_node = this._cell_node;
				var cell_style = cell_node.style;

				var bRtl = this._isRtl(true);

				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}
				if (this.font) {
					nexacro.__setDOMNodeStyleFont(cell_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(cell_style, this.letterspace);
				}
				if (this.color) {
					nexacro.__setDOMNodeStyleColor(cell_style, this.color);
				}

				if (this.align) {
					nexacro.__setDOMNodeStyleAlign(cell_style, this.align);
				}
				else if (this.halign && this.valign) {
					var _halign = this.halign;
					if (bRtl) {
						_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
					}
					nexacro.__setDOMNodeStyleAlignXY(cell_style, _halign, this.valign);
				}

				if (this.padding) {
					nexacro.__setDOMNodeStylePadding(cell_style, this.padding);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					nexacro.__setDOMNodeStylePaddingXY(cell_style, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
				}

				if (this.linespace > 0) {
					nexacro.__setDOMNodeStyleLineSpace(cell_style, this.linespace);
				}


				if (this.wordwrap != "none") {
					nexacro.__setDOMNodeWordWrap(cell_node, this.wordwrap);
				}

				if (this.decoration) {
					nexacro.__setDOMNodeStyleDecorateText(cell_node, this.decoration);
				}
				else {
					nexacro.__setDOMNodeText(cell_node, this.text, this._use_newline, this.wordwrap);
				}

				this._handle = this._dest_handle = _handle;
				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				this._appendTextElementHandle(_handle, cell_node);
			}
		};

		_pGridCellTextContainerElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = this._dest_handle = null;

				this._cell_node = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pGridCellTextContainerElement.clearContents = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle) {
				_handle._linked_element = null;
				if (_owner_elem) {
					nexacro.__removeDOMNode(_owner_elem._handle, _handle);
				}
				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
		};

		_pGridCellTextContainerElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this.parent_elem) {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this.parent_elem;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this.parent_elem;
						}
					}
					else {
						child_elem._parent_elem = this.parent_elem;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this);
				}
			}
		};
		_pGridCellTextContainerElement.removeChildElement = function (child_elem) {
			if (child_elem._owner_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pGridCellTextContainerElement.moveToNextElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToNext(cur_elem._handle, target_elem._handle);
			}
		};
		_pGridCellTextContainerElement.moveToPrevElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToPrev(cur_elem._handle, target_elem._handle);
			}
		};
		_pGridCellTextContainerElement.sendToBackElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleSendToBack(cur_elem._handle);
			}
		};
		_pGridCellTextContainerElement.bringToFrontElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleBringToFront(cur_elem._handle);
			}
		};

		_pGridCellTextContainerElement.setElementTextVisible = function (visible, is_force) {
			var _handle = this._cell_node;

			if (!is_force) {
				visible = visible && this.visible;
			}

			if (_handle) {
				nexacro.__setDOMNodeStyleVisible(_handle.style, visible);
			}
		};

		_pGridCellTextContainerElement.setElementLineSpace = nexacro._emptyFn;

		delete _pGridCellTextContainerElement;


		nexacro.GridCellTextSimpleContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pGridCellTextSimpleContainerElement = nexacro._createPrototype(nexacro.GridCellTextContainerElement, nexacro.GridCellTextSimpleContainerElement);
		nexacro.GridCellTextSimpleContainerElement.prototype = _pGridCellTextSimpleContainerElement;

		_pGridCellTextSimpleContainerElement._type_name = "GridCellTextSimpleContainerElement";

		if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8)) {
			_pGridCellTextSimpleContainerElement._createTextElementHandle = function (_doc, left, top, width, height) {
				var _handle = _doc.createElement("div");
				var handle_style = _handle.style;

				nexacro.__setDOMNodeStylePos(handle_style, 0, 0, this._isRtl());

				width = this.parent._inner_width;
				height = this.parent._inner_height;

				nexacro.__setDOMNodeStyleSize(handle_style, width, height);
				handle_style.display = "table-cell";
				handle_style.whiteSpace = "pre";
				handle_style.textOverflow = this._default_textoverflow;
				this._cell_node = _handle;
				return _handle;
			};

			_pGridCellTextSimpleContainerElement._appendTextElementHandle = nexacro._emptyFn;

			_pGridCellTextSimpleContainerElement.setElementSize = function (width, height) {
				if (this.width != width || this.height != height) {
					this.width = width;
					this.height = height;
					var _handle = this._handle;
					if (_handle) {
						_handle.style.textOverflow = "";

						width = this.parent._inner_width;
						height = this.parent._inner_height;

						nexacro.__setDOMNodeStyleSize(_handle.style, width, height);
						_handle.style.textOverflow = this._default_textoverflow;
					}
				}
			};
		}

		delete _pGridCellTextSimpleContainerElement;

		nexacro.EventPassOverlayElement = function (parent_elem, elements) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;


			this.width = parent_elem.width;
			this.height = parent_elem.height;


			this.pointer_events = "none";
			this._target_elements = elements;


			this.image_url = "";
			this._image_width = 0;
			this._image_height = 0;


			this.border = null;
		};

		var _pEventPassOverlayElement = nexacro._createPrototype(nexacro.TextBoxElement, nexacro.EventPassOverlayElement);
		nexacro.EventPassOverlayElement.prototype = _pEventPassOverlayElement;

		_pEventPassOverlayElement._type_name = "EventPassOverlayElement";
		_pEventPassOverlayElement._default_textoverflow = "";

		_pEventPassOverlayElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _doc = _owner_elem.getRootWindowHandle();
				var _handle = this._createTextElementHandle(_doc, this.left, this.top, this.width, this.height);
				_handle.id = this._parent_elem._handle.id + '_' + this._type_name;
				_handle._linked_element = this;
				_handle._element_type = 4;

				nexacro.__setDOMNodeSelectable(_handle, false);

				var handle_style = _handle.style;
				var cell_node = this._cell_node;
				var cell_style = cell_node.style;

				nexacro.__setDOMNodeStyleAbsolute(cell_style);

				if (!this.visible) {
					nexacro.__setDOMNodeStyleVisible(handle_style, false);
				}
				if (this.pointer_events) {
					nexacro.__setDOMNodeStylePointerEvents(handle_style, this.pointer_events);
				}
				if (this.font) {
					nexacro.__setDOMNodeStyleFont(cell_style, this.font);
				}
				if (this.letterspace) {
					nexacro.__setDOMNodeStyleLetterSpace(cell_style, this.letterspace);
				}

				if (this.color) {
					nexacro.__setDOMNodeStyleColor(cell_style, this.color);
				}

				if (this.align) {
					nexacro.__setDOMNodeStyleAlign(cell_style, this.align);
				}
				else if (this.halign && this.valign) {
					nexacro.__setDOMNodeStyleAlignXY(cell_style, this.halign, this.valign);
				}

				if (this.padding) {
					nexacro.__setDOMNodeStylePadding(cell_style, this.padding);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					nexacro.__setDOMNodeStylePaddingXY(cell_style, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
				}

				if (this.linespace > 0) {
					nexacro.__setDOMNodeStyleLineSpace(cell_style, this.linespace);
				}

				if (this.wordwrap != "none") {
					nexacro.__setDOMNodeWordWrap(cell_node, this.wordwrap);
				}

				if (this.decoration) {
					nexacro.__setDOMNodeStyleDecorateText(cell_node, this.decoration);
				}
				else {
					nexacro.__setDOMNodeText(cell_node, this.text, this._use_newline, this.wordwrap);
				}

				if (this.image_url) {
					var _image_node = this._image_node = _doc.createElement("img");

					nexacro.__setDOMNodeSelectable(_image_node, false);

					var image_style = _image_node.style;
					nexacro.__setDOMNodeStyleAbsolute(image_style);
					nexacro.__setDOMNodeStylePos(image_style, this.left, this.top);

					nexacro.__setImageDOMNodeImageUrl(_image_node, this.image_url);
					nexacro.__appendDOMNode(_handle, _image_node);

					var image_size = nexacro._getImageSize(image_url, this._on_loadImg, this);
					if (image_size) {
						this._image_width = image_size.width;
						this._image_height = image_size.height;
					}
				}

				this._handle = this._dest_handle = _handle;

				nexacro.__appendDOMNode(_owner_elem._dest_handle, _handle);
				this._appendTextElementHandle(_handle, cell_node);
			}
		};

		_pEventPassOverlayElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;

				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._dest_handle) {
					_owner_handle = this._owner_elem._dest_handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__removeDOMNode(_owner_handle, _handle);
				}

				this._destroyElementHandle();

				this._owner_elem = null;
				this._handle = this._dest_handle = null;
			}
			this.parent = null;
			this._parent_elem = null;


			this.width = null;
			this.height = null;
			this._target_elements = [];
			this.image_url = "";
			this._image_width = 0;
			this._image_height = 0;
			this.border = null;
		};

		_pEventPassOverlayElement._destroyElementHandle = function () {
			var _handle = this._handle;
			if (_handle) {
				if (this._cell_node) {
					nexacro.__removeDOMNode(_handle, this._cell_node);
					this._cell_node = null;
				}

				if (this._image_node) {
					nexacro.__removeDOMNode(_handle, this._image_node);
					this._image_node = null;
				}

				this._handle = null;
				this._dest_handle = null;
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
			_pEventPassOverlayElement.setSelectEventPassElement = function (clientX, clientY) {
				var elements = this._target_elements, len = elements.length, elem = elements[0];
				if (len > 1) {
					var comp = null, over_comp = null;
					var elem_pos = null;
					var left = 0, top = 0, right = 0, bottom = 0;
					for (var i = 0; i < len; i++) {
						elem_pos = nexacro._getElementXYInWindow(elements[i]._handle);
						left = elem_pos[0];
						top = elem_pos[1];
						right = left + elements[i].width;
						bottom = top + elements[i].height;

						comp = this._findLinkedControl(elements[i]);

						if (!over_comp && left <= clientX && clientX <= right
							 && top <= clientY && clientY <= bottom) {
							elem = elements[i];
							over_comp = comp;
						}


						comp._applyMouseLeaveEvent();
					}
				}

				if (over_comp) {
					over_comp._applyMouseOverEvent();
				}

				return elem;
			};
		}

		_pEventPassOverlayElement.setElementToolTip = function (tooltiptext, tooltiptype) {
			if (tooltiptext === undefined) {
				tooltiptext = "";
			}
			if (this.tooltiptext != tooltiptext || this.tooltiptype != tooltiptype) {
				this.tooltiptext = tooltiptext;
				this.tooltiptype = tooltiptype;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setDOMNodeToolTip(_handle, tooltiptext, tooltiptype);
				}
			}
		};

		_pEventPassOverlayElement.setTargetElements = function (elements) {
			this._target_elements = elements;
		};

		_pEventPassOverlayElement.updateCellNodeClient = function (left, top, width, height, cell_hpos, adjust_pos) {
			var _cell_node = this._cell_node;
			var _image_node = this._image_node;

			var comp = this.parent.linkedcontrol;
			if (cell_hpos >= 0 && adjust_pos.left >= 0) {
				left = 0;
				if (cell_hpos >= adjust_pos.left) {
					cell_hpos = cell_hpos - adjust_pos.left;
					if (left + width < comp._client_width) {
						left -= cell_hpos;
					}
					width += cell_hpos;
				}
			}

			if (_cell_node) {
				var cell_pos = this._getNodeAlignPos();
				nexacro.__setDOMNodeStylePos(_cell_node.style, left, cell_pos[1], this._isRtl());
				nexacro.__setDOMNodeStyleSize(_cell_node.style, width, height);
			}

			if (_image_node && this.image_url) {
				var image_pos = this._getNodeAlignPos(true);
				nexacro.__setDOMNodeStylePos(_image_node.style, image_pos[0] + left, image_pos[1], this._isRtl());
			}
		};

		_pEventPassOverlayElement.updateElementLineHeight = function (height) {
			var _cell_node = this._cell_node;
			if (_cell_node && height != this.linespace) {
				nexacro.__setDOMNodeStyleLineSpace(_cell_node.style, height);
			}
		};

		_pEventPassOverlayElement.setElementAlign = function (align) {
			this.setElementAlignXY(align.halign, align.valign);
			this.align = align;
		};

		_pEventPassOverlayElement.setElementAlignXY = function (halign, valign) {
			this.align = null;
			this.halign = halign;
			this.valign = valign;

			var _cell_node = this._cell_node;
			var _image_node = this._image_node;

			if (_cell_node) {
				var cell_pos = this._getNodeAlignPos();
				nexacro.__setDOMNodeStylePos(_cell_node.style, cell_pos[0], cell_pos[1]);
			}

			if (_image_node && this.image_url) {
				var image_pos = this._getNodeAlignPos(true);
				nexacro.__setDOMNodeStylePos(_image_node.style, image_pos[0], image_pos[1]);
			}
		};

		_pEventPassOverlayElement._getNodeAlignPos = function (_is_imagealign) {
			var _cell_node = this._cell_node;
			var _image_node = this._image_node;

			var halign = (this.align) ? this.align.halign : this.halign;
			var valign = (this.align) ? this.align.valign : this.valign;

			if (_cell_node && !_is_imagealign) {
				var cell_top = 0, cell_left = 0;
				var _text = this.decoration ? this.decoration : this.text;
				var tx_size = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), _text, this.font, true, this.width, this.wordwrap);

				if (this.height > 0 && this.height > tx_size[1]) {
					if (valign == "bottom") {
						tx_size = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), _text, this.font, true);
						cell_top = (tx_size) ? this.height - tx_size[1] : 0;
					}
					else if (valign == "middle") {
						cell_top = (tx_size) ? (this.height / 2) - (tx_size[1] / 2) : 0;
					}
				}

				nexacro.__setDOMNodeStyleAlignXY(_cell_node.style, halign, "top");
				return [cell_left, cell_top];
			}

			if (_image_node && this.image_url && _is_imagealign) {
				var image_top = 0, image_left = 0;
				if (this.height > 0 && this._image_height > 0 && this.height > this._image_height) {
					if (valign == "bottom") {
						image_top = this.height - this._image_height;
					}
					else if (valign == "middle") {
						image_top = (this.height / 2) - (this._image_height / 2);
					}
				}

				if (this.width > 0 && this._image_width > 0 && this.width > this._image_width) {
					if (halign == "right") {
						image_left = this.width - this._image_width;
					}
					else if (halign == "center") {
						image_left = (this.width / 2) - (this._image_width / 2);
					}
				}

				nexacro.__setDOMNodeStyleAlignXY(_image_node.style, "left", "top");
				return [image_left, image_top];
			}
			return [0, 0];
		};

		_pEventPassOverlayElement.setElementImageUrl = function (image_url) {
			if (image_url) {
				var image_url = nexacro._getURIValue(image_url);

				if (image_url && !nexacro._isAbsolutePath(image_url)) {
					var base_url = this._getElementBaseUrl();
					image_url = nexacro._getImageLocation(image_url, base_url);
				}

				if (this.image_url != image_url) {
					var _image_node = this._image_node;

					if (!_image_node) {
						var _doc = this._owner_elem.getRootWindowHandle();
						var _image_node = this._image_node = _doc.createElement("img");

						nexacro.__setDOMNodeSelectable(_image_node, false);

						var image_style = _image_node.style;
						nexacro.__setDOMNodeStyleAbsolute(image_style);
						nexacro.__setDOMNodeStylePos(image_style, this.left, this.top);
						nexacro.__appendDOMNode(this._handle, _image_node);
					}

					var image_size = nexacro._getImageSize(image_url, this._on_loadImg, this);
					if (image_size) {
						this._image_width = image_size.width;
						this._image_height = image_size.height;
					}

					this.image_url = image_url;
					nexacro.__setImageDOMNodeImageUrl(_image_node, image_url);
				}
			}
			else {
				if (this._image_node) {
					nexacro.__removeDOMNode(this._handle, this._image_node);
					this._image_node = null;
				}
				this.image_url = "";
			}
		};

		_pEventPassOverlayElement._on_loadImg = function (image_url, width, height) {
			this._image_width = width;
			this._image_height = height;
		};
		_pEventPassOverlayElement._setElementBorder = function (border, left_hidden, top_hidden, right_hidden) {
			if (border) {
				if (border._linecnt == 1) {
					border._linecnt = 4;
				}

				this.border = border;

				var left_width = (!left_hidden && border.left_style) ? border._left_width : 0;
				var top_width = (!top_hidden && border.top_style) ? border._top_width : 0;
				var right_width = (!right_hidden && border.right_style) ? border._right_width : 0;
				var bottom_width = border.bottom_style ? border._bottom_width : 0;


				var inner_width = this.width - (left_width + right_width);
				var inner_height = this.height - (top_width + bottom_width);

				inner_width = inner_width > 0 ? inner_width : 0;
				inner_height = inner_height > 0 ? inner_height : 0;


				border._sysleft = (left_width) ? (left_width + "px " + ((border._left_syscolor) ? (border.left_style + " " + border._left_syscolor) : border.left_style + " " + "transparent")) : "";
				border._systop = (top_width) ? (top_width + "px " + ((border._top_syscolor) ? (border.top_style + " " + border._top_syscolor) : border.top_style + " " + "transparent")) : "";


				var _cell_node = this._cell_node;
				if (_cell_node) {
					nexacro.__setDOMNodeStyleBorder(_cell_node.style, border);
					nexacro.__setDOMNodeSize(_cell_node.style, inner_width, inner_height);
				}

				var _image_node = this._image_node;
				if (_image_node) {
					nexacro.__setDOMNodeStyleBorder(_image_node.style, border);
					nexacro.__setDOMNodeSize(_image_node.style, inner_width, inner_height);
				}
			}
			else if (this.border) {
				this.border = null;
			}
		};

		_pEventPassOverlayElement._findLinkedControl = function (elem) {
			var comp = null;
			while (!comp) {
				comp = elem.linkedcontrol;

				elem = elem.parent;

				if (!elem) {
					break;
				}
			}

			return comp;
		};

		delete _pEventPassOverlayElement;
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.Browser == "Runtime") {
	if (!nexacro.Element) {
		nexacro.__setLastFocusedElement = function (elem) {
			if (elem) {
				var win = elem.linkedcontrol ? elem.linkedcontrol._getWindow() : (elem._parent_elem ? elem._parent_elem.linkedcontrol._getWindow() : null);
				if (win) {
					var root_win = win;
					while (true) {
						if (root_win instanceof nexacro.PopupWindow) {
							if (root_win == root_win.parent) {
								break;
							}
							root_win = root_win.parent;
						}
						else {
							break;
						}
					}
					if (!root_win) {
						root_win = win;
					}
					root_win._last_focused_elem = elem;
				}
			}
		};

		nexacro.Element = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pElement = nexacro._createPrototype(nexacro.Object, nexacro.Element);
		nexacro.Element.prototype = _pElement;


		_pElement._type_name = "Element";

		_pElement.left = 0;
		_pElement.top = 0;
		_pElement.width = 0;
		_pElement.height = 0;
		_pElement.visible = true;
		_pElement.mirror = false;
		_pElement._rtldirection = "inherit";
		_pElement.letterspace = 0;
		_pElement._handle = null;
		_pElement._owner_elem = null;
		_pElement._is_nc_element = false;

		_pElement.clearContents = nexacro._emptyFn;

		_pElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}
				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}
				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}
				if (this.mirror) {
					nexacro.__setElementHandleMirror(_handle, this.mirror);
				}

				if (this._rtldirection) {
					nexacro.__setElementHandleRtlDirection(_handle, this._rtldirection);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pElement._destroyElementHandle = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle) {
				var _owner_handle = null;
				if (_owner_elem && _owner_elem._handle) {
					_owner_handle = _owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}
			}
			this._owner_elem = null;
			this._handle = null;
		};

		_pElement._appendToContainer = function (_owner_elem) {
			var _handle = this._handle;
			if (_handle && _owner_elem._handle && this._owner_elem == null) {
				this._owner_elem = _owner_elem;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pElement._removeFromContainer = function () {
			var _owner_elem = this._owner_elem;
			if (_owner_elem) {
				this._owner_elem = null;
				var _handle = this._handle;
				if (_handle && _owner_elem._handle) {
					nexacro.__unlinkElementHandle(_owner_elem._handle, _handle);
				}
			}
		};

		_pElement.getContainerElement = function () {
			return this;
		};
		_pElement.getRootWindowHandle = function () {
			if (this._owner_elem) {
				return this._owner_elem.getRootWindowHandle();
			}
			return null;
		};
		_pElement._getWindowHandle = function () {
			return this.getRootWindowHandle();
		};
		_pElement._getElementBaseUrl = function () {
			var tmp = this;
			while (tmp && !tmp._is_form) {
				tmp = tmp.parent;
			}

			if (tmp && tmp._is_form) {
				return tmp._getFormBaseUrl();
			}
			return "";
		};

		_pElement._getElementRtlDirection = function () {
			var elem = this._parent_elem;
			var rtldirection = this._rtldirection;
			while (elem) {
				if (elem._rtldirection && elem._rtldirection != "inherit") {
					rtldirection = elem._rtldirection;
					break;
				}
				elem = elem._parent_elem;
			}

			return rtldirection;
		};

		_pElement._getParentLetterSpace = function () {
			var elem = this._parent_elem;
			while (elem) {
				if (elem.letterspace) {
					return elem.letterspace;
				}
				elem = elem._parent_elem;
			}
			return 0;
		};

		_pElement.hasSetSelectionRange = nexacro._emptyFn;

		_pElement.setElementPosition = function (left, top, bForce) {
			if (this.left != left || this.top != top || bForce) {
				this.left = left;
				this.top = top;
				var _handle = this._handle;
				if (_handle) {
					var owner_elem = this._owner_elem;
					var bMirror = false;
					if (owner_elem) {
						left = this._adjustRtlLayoutLeft(left, this.width);
					}

					nexacro.__setElementHandlePosition(_handle, left, top);
				}
			}
		};

		_pElement._adjustRtlLayoutLeft = function (left, width) {
			var newLeft = left;
			var owner_elem = this._owner_elem;

			var parent_width = owner_elem._inner_width ? owner_elem._inner_width : owner_elem.width;

			if (this._isRtl()) {
				if (this instanceof nexacro.ControlElementBase && owner_elem instanceof nexacro.ScrollableContainerElement) {
					parent_width = Math.max(parent_width, this._parent_elem.container_maxwidth);
				}
				else if (this instanceof nexacro.ContainerElement && owner_elem instanceof nexacro.ScrollableContainerElement) {
					parent_width = owner_elem.parent.container_maxwidth;
				}
				else if (this instanceof nexacro.ScrollableContainerElement) {
					if (this._parent_elem.parent instanceof nexacro.TextArea) {
					}
					else {
						this.setElementHScrollPos(this._scroll_left, true);
					}
				}

				newLeft = parent_width - width - left;
			}
			delete owner_elem;
			owner_elem = null;

			return newLeft;
		};

		_pElement.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleSize(_handle, width, height);
				}

				if (this._isRtl()) {
					this.setElementPosition(this.left, this.top, true);
				}
			}
		};

		_pElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pElement.setElementVisible = function (visible) {
			if (this.visible != visible) {
				this.visible = visible;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleVisible(_handle, visible);
				}
			}
		};

		_pElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;

				var background = this.background;
				var image = this.image;

				if (background && background.image) {
					var handle = this._handle;
					if (handle) {
						nexacro.__setElementHandleMirror(handle, this.mirror && this._isRtl());
					}

					if (this._client_element) {
						handle = this._client_element._handle;
						if (handle) {
							nexacro.__setElementHandleMirror(handle, this.mirror && this._isRtl());
						}
					}
				}
			}
		};

		_pElement.setElementRtlDirection = function (rtldirection) {
			if (this._rtldirection != rtldirection) {
				this._rtldirection = rtldirection;

				this._bChangeRtl = true;

				if (rtldirection == "rtl") {
					if (this.align) {
						this.align._createRtlValue();
					}

					if (this.shadow) {
						this.shadow._createRtlValue();
					}

					if (this.border) {
						this.border._createRtlValue();
					}

					if (this.bordertype) {
						this.bordertype._createRtlValue();
					}

					if (this.padding) {
						this.padding._createRtlValue();
					}

					if (this.gradation) {
						this.gradation._createRtlValue();
					}
				}

				var handle = this._handle;
				if (handle) {
					nexacro.__setElementHandleRtlDirection(handle, rtldirection);
				}

				if (this.align) {
					this.setElementAlign(this.align);
				}
				if (this.halign && this.valign) {
					this.setElementAlignXY(this.halign, this.valign);
				}
				if (this.shadow) {
					this.setElementShadow(this.shadow);
				}
				if (this.border) {
					this.setElementBorder(this.border, this.bordertype);
				}
				if (this.bordertype) {
					this.setElementBorder(this.border, this.bordertype);
				}
				if (this.padding) {
					this.setElementPadding(this.padding);
				}
				if (this.gradation) {
					this.setElementBackground(this.background, this.gradation);
				}

				this._bChangeRtl = false;
			}
		};

		_pElement._isRtl = function (bSelf) {
			var elem = this._parent_elem;

			if (bSelf) {
				elem = this;
			}

			var rtldirection = this._rtldirection;
			while (elem) {
				if (elem._rtldirection && elem._rtldirection != "inherit") {
					rtldirection = elem._rtldirection;
					break;
				}
				elem = elem._parent_elem;
			}

			return rtldirection == "rtl";
		};

		_pElement.setElementEnable = nexacro._emptyFn;
		_pElement.setElementTabIndex = nexacro._emptyFn;

		_pElement.setElementAlign = nexacro._emptyFn;
		_pElement.setElementAlignXY = nexacro._emptyFn;

		_pElement.setElementPadding = nexacro._emptyFn;
		_pElement.setElementPaddingXY = nexacro._emptyFn;

		_pElement.setElementFont = nexacro._emptyFn;
		_pElement.setElementColor = nexacro._emptyFn;

		_pElement.setElementCursor = nexacro._emptyFn;


		delete _pElement;


		nexacro.TextBoxElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pTextBoxElement = nexacro._createPrototype(nexacro.Element, nexacro.TextBoxElement);
		nexacro.TextBoxElement.prototype = _pTextBoxElement;

		_pTextBoxElement._type_name = "TextBoxElement";

		_pTextBoxElement.font = null;
		_pTextBoxElement.color = null;
		_pTextBoxElement.cursor = null;
		_pTextBoxElement.align = null;
		_pTextBoxElement.halign = "left";
		_pTextBoxElement.valign = "top";
		_pTextBoxElement.padding = null;
		_pTextBoxElement.padding_left = 0;
		_pTextBoxElement.padding_top = 0;
		_pTextBoxElement.padding_right = 0;
		_pTextBoxElement.padding_bottom = 0;
		_pTextBoxElement.text = "";
		_pTextBoxElement.linespace = 0;
		_pTextBoxElement.letterspace = 0;
		_pTextBoxElement.wordwrap = "none";
		_pTextBoxElement.decoration = "";
		_pTextBoxElement._use_newline = true;
		_pTextBoxElement._cell_node = null;


		_pTextBoxElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createTextElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);

				var bRtl = this._isRtl();

				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}
				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}
				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}

				if (this.align) {
					var _align = this.align._getStyleObject(bRtl);
					nexacro.__setElementHandleAlign(_handle, _align.halign, _align.valign);
				}
				else if (this.halign && this.valign) {
					var _halign = this.halign;
					if (bRtl) {
						_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
					}
					nexacro.__setElementHandleAlign(_handle, _halign, this.valign);
				}

				if (this.padding) {
					var _padding = this.padding._getStyleObject(bRtl);
					nexacro.__setElementHandlePadding(_handle, _padding.left, _padding.top, _padding.right, _padding.bottom);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					if (bRtl) {
						nexacro.__setElementHandlePadding(_handle, this.padding_right, this.padding_top, this.padding_left, this.padding_bottom);
					}
					else {
						nexacro.__setElementHandlePadding(_handle, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
					}
				}

				if (this.decoration) {
					nexacro.__setElementHandleDecorateText(_handle, this.decoration);
				}
				if (this.linespace > 0) {
					nexacro.__setElementHandleLineSpace(_handle, this.linespace);
				}

				if (this.wordwrap != "none") {
					nexacro.__setElementHandleWordWrap(_handle, this.wordwrap);
				}

				if (this.text) {
					nexacro.__setElementHandleText(_handle, this.text, this._use_newline, this.wordwrap);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pTextBoxElement.setParentElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		_pTextBoxElement.setElementFont = function (font) {
			this.font = font;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
			}
		};
		_pTextBoxElement.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleColor(_handle, color._syscolor);
			}
		};

		_pTextBoxElement.setElementAlign = function (align) {
			var _align = align ? align._getStyleObject(this._isRtl()) : null;

			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var _handle = this._handle;
			if (_handle && _align) {
				nexacro.__setElementHandleAlign(_handle, _align._halign, _align._valign);
			}
		};
		_pTextBoxElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = halign == "left" ? "right" : (halign == "right" ? "left" : halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, _halign, valign);
			}
		};

		_pTextBoxElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandlePadding(_handle, padding.left, padding.top, padding.right, padding.bottom);
			}
		};
		_pTextBoxElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			var _handle = this._handle;
			if (_handle) {
				var size_width = this.width - left - right;
				var size_height = this.height - top - bottom;
				if (this._isRtl()) {
					nexacro.__setElementHandlePadding(_handle, right, top, left, bottom);
				}
				else {
					nexacro.__setElementHandlePadding(_handle, left, top, right, bottom);
				}
			}
		};

		_pTextBoxElement.setElementText = function (text) {
			if (this.text != text) {
				if (text == null) {
					this.text = "";
				}
				else {
					this.text = text.replace(/\r\n|\r|\n/g, "\r\n");
				}

				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleText(_handle, this.text, this._use_newline, this.wordwrap);
				}
			}
		};

		_pTextBoxElement.setElementLineSpace = function (linespace) {
			if (this.linespace != linespace) {
				this.linespace = linespace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLineSpace(_handle, linespace);
				}
			}
		};

		_pTextBoxElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pTextBoxElement.setElementDecorateText = function (text) {
			if (this.decoration != text) {
				if (text == null) {
					this.decoration = "";
				}
				else {
					this.decoration = text.replace(/\r\n|\r|\n/g, "\r\n");
				}

				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleDecorateText(_handle, this.decoration);
				}
			}
		};

		_pTextBoxElement.setElementUseNewLine = function (use_newline) {
			if (this._use_newline != use_newline) {
				this._use_newline = use_newline;

				var _cell_node = this._cell_node;
				if (_cell_node) {
					if (this.wordwrap != "none") {
						return;
					}
					this.__setElementHandleText(_cell_node, this.text, this._use_newline, this.wordwrap);
				}
			}
		};

		_pTextBoxElement.setElementWordWrap = function (wordwrap) {
			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			if (this.wordwrap != wordwrap) {
				this.wordwrap = wordwrap;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleWordWrap(_handle, wordwrap);
				}
			}
		};

		_pTextBoxElement._setElementTextRtlDirection = function (rtldirection) {
			var handle = this._handle;
			if (handle) {
				nexacro.__setElementHandleRtlDirection(handle, rtldirection);
			}
		};

		_pTextBoxElement._getElementDisplayText = function () {
			if (this.decoration) {
				return nexacro._unDecorateString(this.decoration);
			}
			return "";
		};

		_pTextBoxElement.setElementTextOverFlow = nexacro._emptyFn;

		delete _pTextBoxElement;

		nexacro.ImageElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pImageElement = nexacro._createPrototype(nexacro.Element, nexacro.ImageElement);
		nexacro.ImageElement.prototype = _pImageElement;

		_pImageElement._type_name = "ImageElement";

		_pImageElement.imageurl = "";
		_pImageElement.image_width = 0;
		_pImageElement.image_height = 0;
		_pImageElement._img_sizereq = false;

		_pImageElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createImageElementHandle(this, _win_handle, this.left, this.top, this.width, this.height, true);
				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}

				if (this.align) {
					var align = this.align;
					nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
				}
				else if (this.halign && this.valign) {
					nexacro.__setElementHandleAlign(_handle, this.halign, this.valign);
				}

				if (this.imageurl && !this._img_sizereq) {
					nexacro.__setElementHandleImageUrl(_handle, this.imageurl);
				}

				if (this.mirror) {
					nexacro.__setElementHandleMirror(_handle, this.mirror && this._isRtl());
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};


		_pImageElement.setElementAlign = function (align) {
			var _align = align ? align._getStyleObject(this._isRtl()) : null;

			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, _align._halign, _align._valign);
			}
		};
		_pImageElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, _halign, valign);
			}
		};

		_pImageElement.setElementImageUrl = function (url) {
			if (this.imageurl != url) {
				if (url && url.substring(0, 4).toLowerCase() == "url(") {
					url = url.substring(5, url.length - 2);
					if (this.imageurl == url) {
						return;
					}
				}

				var temp_url = url;

				if (url) {
					if ((!nexacro._isAbsolutePath(url)) || (application && application.checkversion)) {
						var base_url = this._parent_elem._getElementBaseUrl();
						url = nexacro._getImageLocation(url, base_url);
						if (this.imageurl == url) {
							return;
						}
					}
				}

				this.imageurl = url;

				if (url) {
					var size = nexacro._getImageSize(url, this._on_loadImg, this, undefined, temp_url);
					this._img_sizereq = true;
					if (size) {
						this._img_sizereq = false;
						var _handle = this._handle;
						if (_handle) {
							nexacro.__setElementHandleImageUrl(_handle, url);
						}
					}
				}
				else {
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setElementHandleImageUrl(_handle, url);
					}
				}
			}
		};

		_pImageElement.setElementImageBase64 = function (url) {
			if (this.imageurl != url) {
				this.imageurl = url;

				var _handle = this._handle;
				if (_handle) {
					var comma_idx = url.indexOf(",");
					if (comma_idx > -1) {
						var tmp = url.slice(comma_idx + 1, url.legnth);
						url = "data:image;base64," + tmp;
					}

					nexacro.__setElementHandleImageUrl(_handle, url);
				}
			}
		};

		_pImageElement._on_loadImg = function (imgurl, w, h) {
			var _handle = this._handle;
			if (this.imageurl == imgurl) {
				this._img_sizereq = false;
				if (_handle) {
					nexacro.__setElementHandleImageUrl(_handle, imgurl);
				}
			}
		};

		_pImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;
				if (!this.mirror && bChangeRtlDirection) {
					this.mirror = bChangeRtlDirection;
				}

				var handle = this._handle;
				if (handle) {
					nexacro.__setElementHandleMirror(handle, this.mirror && this._isRtl());
				}
			}
		};
		_pImageElement.setElementHandleImageObject = function (_unique_id) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleImageObject(_handle, _unique_id);
			}
		};

		_pImageElement.destroy = function (_owner_handle, _unique_id) {
			if (arguments.length == 0) {
				nexacro.Element.prototype.destroy.call(this);
			}
			else {
				var _handle = this._handle;
				if (_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _unique_id);
					this._owner_elem = null;
					this._handle = null;
				}
			}
		};

		_pImageElement.getImageCount = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getImageElementHandleImageCount(_handle);
			}
		};

		_pImageElement.setImageIndex = function (nIndex) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setImageElementHandleImageIndex(_handle, nIndex);
			}
		};

		delete _pImageElement;

		nexacro.AlignImageElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pAlignImageElement = nexacro._createPrototype(nexacro.Element, nexacro.AlignImageElement);
		nexacro.AlignImageElement.prototype = _pAlignImageElement;


		_pAlignImageElement._type_name = "AlignImageElement";

		_pAlignImageElement.align = null;
		_pAlignImageElement.halign = "";
		_pAlignImageElement.valign = "";
		_pAlignImageElement.imageurl = "";
		_pAlignImageElement._img_sizereq = false;

		_pAlignImageElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createImageElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);

				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}

				if (this.align) {
					var align = this.align;
					nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
				}
				else if (this.halign && this.valign) {
					nexacro.__setElementHandleAlign(_handle, this.halign, this.valign);
				}

				if (this.imageurl && !this._img_sizereq) {
					nexacro.__setElementHandleImageUrl(_handle, this.imageurl);
				}

				if (this.mirror) {
					nexacro.__setElementHandleMirror(_handle, this.mirror);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};


		_pAlignImageElement.setElementAlign = function (align) {
			var _align = align ? align._getStyleObject(this._isRtl()) : null;

			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var _handle = this._handle;
			if (_handle && _align) {
				nexacro.__setElementHandleAlign(_handle, _align._halign, _align._valign);
			}
		};


		_pAlignImageElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, _halign, valign);
			}
		};

		_pAlignImageElement.setElementImageUrl = function (url) {
			if (this.imageurl != url) {
				if (url && url.substring(0, 4).toLowerCase() == "url(") {
					url = url.substring(5, url.length - 2);
					if (this.imageurl == url) {
						return;
					}
				}

				var _temp_url = url;

				if (url && !nexacro._isAbsolutePath(url)) {
					var base_url = this._parent_elem._getElementBaseUrl();
					url = nexacro._getImageLocation(url, base_url);
					if (this.imageurl == url) {
						return;
					}
				}

				this.imageurl = url;

				if (url) {
					var size = nexacro._getImageSize(url, this._on_loadImg, this, undefined, _temp_url);
					this._img_sizereq = true;
					if (size) {
						this._img_sizereq = false;
						var _handle = this._handle;
						if (_handle) {
							nexacro.__setElementHandleImageUrl(_handle, url);
						}
					}
				}
				else {
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setElementHandleImageUrl(_handle, url);
					}
				}
			}
		};
		_pAlignImageElement._on_loadImg = function (imgurl, w, h) {
			var _handle = this._handle;
			if (this.imageurl == imgurl) {
				this._img_sizereq = false;
				if (_handle) {
					nexacro.__setElementHandleImageUrl(_handle, imgurl);
				}
			}
		};

		_pAlignImageElement.setElementImageMirror = function (rtlimagemirroring, bChangeRtlDirection) {
			var v = this.mirror;

			if (rtlimagemirroring) {
				v = nexacro._toBoolean(rtlimagemirroring._value);
			}

			if (this.mirror != v || bChangeRtlDirection) {
				this.mirror = v;
				if (!this.mirror && bChangeRtlDirection) {
					this.mirror = bChangeRtlDirection;
				}

				var handle = this._handle;
				if (handle) {
					nexacro.__setElementHandleMirror(handle, this.mirror && this._isRtl());
				}
			}
		};

		delete _pAlignImageElement;

		nexacro.InputElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pInputElement = nexacro._createPrototype(nexacro.Element, nexacro.InputElement);
		nexacro.InputElement.prototype = _pInputElement;


		_pInputElement._type_name = "InputElement";

		_pInputElement.enable = true;
		_pInputElement.tabindex = -1;
		_pInputElement.font = null;
		_pInputElement.color = null;
		_pInputElement.cursor = null;
		_pInputElement.align = null;
		_pInputElement.halign = "";
		_pInputElement.valign = "";
		_pInputElement.padding = null;
		_pInputElement.padding_left = 0;
		_pInputElement.padding_top = 0;
		_pInputElement.padding_right = 0;
		_pInputElement.padding_bottom = 0;
		_pInputElement.useime = "global";
		_pInputElement.imemode = "auto";
		_pInputElement.inputtype = "normal";
		_pInputElement.readonly = false;
		_pInputElement.maxlength = -1;
		_pInputElement.password = false;
		_pInputElement.text = "";
		_pInputElement.value = "";
		_pInputElement.displaynulltext = "";
		_pInputElement.color = null;
		_pInputElement.caretcolor = null;
		_pInputElement.selectcolor = null;
		_pInputElement.selectbackground = null;
		_pInputElement.compositecolor = null;
		_pInputElement.tabindentsize = 4;
		_pInputElement.usesoftkeyboard = true;

		_pInputElement.usemultiline = false;
		_pInputElement.linespace = 0;
		_pInputElement.letterspace = 0;

		_pInputElement.wordwrap = "none";
		_pInputElement._is_focused = false;
		_pInputElement.autoselect = false;
		_pInputElement._is_maskedit = false;

		_pInputElement._isPreventDefault = function (comp, evtname) {
			comp = comp._getFromComponent(comp);

			if (comp) {
				return (comp[evtname] && comp[evtname].defaultprevented);
			}

			return false;
		};

		_pInputElement._wantAccessibilityAdditionalLabel = function () {
			return true;
		};

		_pInputElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createInputElementHandle(this, _win_handle, this.left, this.top, this.width, this.height, this.usemultiline, this._is_maskedit);

				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}
				if (!this.enable) {
					nexacro.__setElementHandleEnable(_handle, false);
				}

				if (this.readonly) {
					nexacro.__setElementHandleReadOnly(_handle, true);
				}

				if (this.tabindex >= 0) {
					nexacro.__setElementHandleTabIndex(_handle, this.tabindex);
				}

				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}

				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}

				if (this.cursor) {
					nexacro.__setElementHandleCursor(_handle, this.cursor.value);
				}

				if (this.align) {
					var align = this.align;
					nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
				}
				else if (this.halign && this.valign) {
					nexacro.__setElementHandleAlign(_handle, this.halign, this.valign);
				}

				if (this.padding) {
					var padding = this.padding;
					nexacro.__setElementHandlePadding(_handle, padding.left, padding.top, padding.right, padding.bottom);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					nexacro.__setElementHandlePadding(_handle, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
				}

				if (this.caretcolor) {
					nexacro.__setInputElementHandleCaretColor(_handle, this.caretcolor._syscolor);
				}
				if (this.selectcolor) {
					nexacro.__setInputElementHandleSelectColor(_handle, this.selectcolor._syscolor);
				}
				if (this.selectbackground) {
					nexacro.__setInputElementHandleSelectBackgroundColor(_handle, this.selectbackground._syscolor);
				}
				if (this.compositecolor) {
					nexacro.__setInputElementHandleCompositeColor(_handle, this.compositecolor._syscolor);
				}

				if (!this.usemultiline && this.password) {
					nexacro.__setInputElementHandleUsePassword(_handle, true);
				}
				if (this.usemultiline) {
					if (this.linespace > 0) {
						nexacro.__setElementHandleLineSpace(_handle, this.linespace);
					}
					if (this.wordwrap != "none") {
						nexacro.__setElementHandleWordWrap(_handle, this.wordwrap);
					}
				}

				if (this.tabindentsize > 4) {
					nexacro.__setElementHandleTabIndentSize(_handle, this.tabindentsize);
				}

				if (this.imemode) {
					nexacro.__setInputElementHandleImeMode(_handle, this.imemode);
				}

				if (this.inputtype) {
					nexacro.__setInputElementHandleInputType(_handle, this.inputtype);
				}

				if (this.maxlength) {
					nexacro.__setInputElementHandleMaxLength(_handle, this.maxlength);
				}

				if (this.text) {
					nexacro.__setElementHandleValue(_handle, this.text);
				}
				else if (this.displaynulltext) {
					nexacro.__setElementHandleNullTextColor(_handle, this.displaynulltextcolor._syscolor);
					nexacro.__setElementHandleValue(_handle, this.displaynulltext, true);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pInputElement.setElementEnable = function (enable) {
			if (this.enable != enable) {
				this.enable = enable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleEnable(_handle, enable);
				}
			}
		};
		_pInputElement.setElementTabIndex = function (tabindex) {
			if (this.tabindex != tabindex) {
				this.tabindex = tabindex;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleTabIndex(_handle, tabindex);
				}
			}
		};

		_pInputElement.setElementFont = function (font) {
			this.font = font;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
			}
		};
		_pInputElement.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleColor(_handle, color._syscolor);
			}
		};
		_pInputElement.setElementCursor = function (cursor) {
			this.cursor = cursor;
			var _handle = this._handle;
			var _parent_handle = this._parent_elem ? this._parent_elem._handle : null;
			if (_handle && _parent_handle) {
				if (cursor && !cursor._is_empty) {
					nexacro.__setElementHandleCursor(_parent_handle, cursor.value);
					nexacro.__setElementHandleCursor(_handle, cursor.value);
				}
				else {
					nexacro.__setElementHandleCursor(_parent_handle, cursor);
					nexacro.__setElementHandleCursor(_handle, cursor);
				}
			}
		};

		_pInputElement.setElementAlign = function (align) {
			var _align = align ? align._getStyleObject(this._isRtl()) : null;

			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var _handle = this._handle;
			if (_handle && _align) {
				nexacro.__setElementHandleAlign(_handle, _align._halign, _align._valign);
			}
		};
		_pInputElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, _halign, valign);
			}
		};

		_pInputElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			var _handle = this._handle;
			if (_handle && padding) {
				var bRtl = this._isRtl();
				var _padding = padding;
				_padding = padding ? padding._getStyleObject(bRtl ^ this.mirror) : null;

				nexacro.__setElementHandlePadding(_handle, _padding.left, padding.top, _padding.right, padding.bottom);
			}
		};

		_pInputElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandlePadding(_handle, left, top, right, bottom);
			}
		};

		_pInputElement.setElementValue = function (value) {
			var _handle = this._handle;
			var comp = this._parent_elem.linkedcontrol;
			var api = comp._edit_base_api;

			var bValChange = (this.value === value) ? false : true;
			var bEmpString = (value == "") ? true : false;

			this.value = value;
			if (api) {
				this.text = api._text;
			}
			else {
				this.text = value;
			}

			if (_handle) {
				var input_value = nexacro.__getElementHandleValue(_handle);
				var bTxtChange = (this.text == input_value) ? false : true;

				if (bValChange || bTxtChange || bEmpString) {
					this._updateInputValue();
				}
			}
		};

		_pInputElement._updateInputValue = function () {
			var _handle = this._handle;
			var comp = this._parent_elem.linkedcontrol;
			var api = comp._edit_base_api;

			if (this.value !== undefined && this.value !== null) {
				nexacro.__setElementHandleValue(_handle, this.text);
			}
			else if (!this._is_focused && this.displaynulltext && this.displaynulltext.length > 0) {
				nexacro.__setElementHandleValue(_handle, this.displaynulltext, true);
			}
			else {
				if (api && (api._type_name == "EditMaskString" || api._type_name == "EditMaskNumber" || api._type_name == "EditMaskDate")) {
					nexacro.__setElementHandleValue(_handle, this.text);
				}
				else {
					nexacro.__setElementHandleValue(_handle, "");
				}
			}
		};

		_pInputElement._setElementInputRtlDirection = function (rtldirection) {
			var handle = this._handle;
			if (handle) {
				nexacro.__setElementHandleRtlDirection(handle, rtldirection);
			}
		};

		_pInputElement.setElementDisplayNullText = function (text) {
			var nulltext_change = false;
			if (this.displaynulltext != text) {
				nulltext_change = true;
				this.displaynulltext = text;
			}

			var _handle = this._handle;
			if (_handle && nulltext_change && nexacro._isNull(this.value) && !this._is_focused) {
				nexacro.__setElementHandleNullTextColor(_handle, this.displaynulltextcolor._syscolor);
				nexacro.__setElementHandleValue(_handle, this.displaynulltext, true);
			}
		};

		_pInputElement.setElementMaxLength = function (length) {
			if (this.maxlength != length) {
				this.maxlength = length;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setInputElementHandleMaxLength(_handle, length);
				}
			}
		};

		_pInputElement.setElementReadonly = function (readonly) {
			if (this.readonly != readonly) {
				this.readonly = readonly;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleReadOnly(_handle, readonly);
				}
			}
		};

		_pInputElement.setElementCaretColor = function (color) {
			this.caretcolor = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setInputElementHandleCaretColor(_handle, color._syscolor);
			}
		};

		_pInputElement.setElementSelectColor = function (color) {
			this.selectcolor = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setInputElementHandleSelectColor(_handle, color._syscolor);
			}
		};

		_pInputElement.setElementDisplayNullTextColor = function (color) {
			this.displaynulltextcolor = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleNullTextColor(_handle, color._syscolor);
			}
		};

		_pInputElement.setElementSelectBackgroundColor = function (color) {
			this.selectbackground = color;
			var _handle = this._handle;

			if (_handle) {
				nexacro.__setInputElementHandleSelectBackgroundColor(_handle, color._syscolor);
			}
		};

		_pInputElement.setElementCompositeColor = function (color) {
			this.compositecolor = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setInputElementHandleCompositeColor(_handle, color._syscolor);
			}
		};

		_pInputElement.setElementTabindentSize = function (indent) {
			this.tabindentsize = indent;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleTabIndentSize(_handle, indent);
			}
		};

		_pInputElement.setElementLineSpace = function (linespace) {
		};

		_pInputElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pInputElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pInputElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pInputElement.setElementWordWrap = function (wordwrap) {
		};

		_pInputElement.setElementPassword = function (password) {
			if (this.password != password) {
				this.password = password;
				var _handle = this._handle;
				if (_handle && !this.usemultiline) {
					if (password == true) {
						nexacro.__setInputElementHandleSetIme(_handle, "none", "none");
					}
					else {
						nexacro.__setInputElementHandleSetIme(_handle, this.useime, this.imemode);
					}

					nexacro.__setInputElementHandleUsePassword(_handle, password);
				}
			}
		};

		_pInputElement.setElementUseSoftKeyboard = function (usesoftkeyboard) {
			if (this.usesoftkeyboard != usesoftkeyboard) {
				this.usesoftkeyboard = usesoftkeyboard;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setInputElementUseSoftKeyboard(_handle, usesoftkeyboard);
				}
			}
		};
		_pInputElement.setElementUseIme = function (useime) {
			if (this.useime != useime) {
				this.useime = useime;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setInputElementHandleUseIme(_handle, useime);
				}
			}
		};

		_pInputElement.setElementImeMode = function (imemode) {
			if (this.imemode != imemode) {
				this.imemode = imemode;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setInputElementHandleImeMode(_handle, imemode);
				}
			}
		};

		_pInputElement.setElementInputType = function (inputtype, usedatepicker, target) {
			if (this.inputtype != inputtype) {
				this.inputtype = inputtype;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setInputElementHandleInputType(_handle, inputtype);
				}
			}

			if (target) {
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setInputElementHandleUseDatePicker(_handle, usedatepicker, target);
				}
			}
		};
		_pInputElement.setElementInputTypeKeypad = function (type) {
		};

		_pInputElement.setInputElementCompositeClear = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setInputElementCompositeClear(_handle);
			}
		};

		_pInputElement.setElementFocus = function () {
			var _handle = this._handle;
			if (_handle) {
				if (!this._is_focused) {
					this._is_focused = true;
					if (!this.value) {
						var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
						var api = comp._edit_base_api;
						if (api && (api._type_name == "EditMaskString" || api._type_name == "EditMaskNumber" || api._type_name == "EditMaskDate")) {
							nexacro.__setElementHandleValue(_handle, this.text);
						}
						else {
							nexacro.__setElementHandleValue(_handle, "");
						}
					}

					nexacro.__setLastFocusedElement(this);
					nexacro.__setElementHandleFocus(_handle);
				}
				else {
				}
			}
		};

		_pInputElement.setElementBlur = function () {
			var _handle = this._handle;
			if (_handle && this._is_focused) {
				this._is_focused = false;
				if (!this.value) {
					nexacro.__setElementHandleValue(_handle, this.displaynulltext, true);
				}
				nexacro.__setInputElementHandleBlur(_handle);
			}
		};

		_pInputElement.setElementSetSelect = function (start, end) {
			var _handle = this._handle;
			if (_handle) {
				var val = this.getElementValue();
				var len = val.length;

				end = (end == -1 ? len : end);
				var range = end - start;
				if (range == len && len > 0) {
					nexacro.__setInputElementHandleSetSelect(_handle, start, end, true);
				}
				else {
					nexacro.__setInputElementHandleSetSelect(_handle, start, end, false);
				}
			}
		};

		_pInputElement.getElementCaretPos = function () {
			var _handle = this._handle;
			var bActive = nexacro._checkActiveElement(this);
			if (_handle && bActive) {
				var pos = nexacro.__getInputElementHandleCaretPos(_handle);
				if (pos) {
					return {
						begin : pos[0], 
						end : pos[1]
					};
				}
			}
			return -1;
		};

		_pInputElement.getElementSelectionRange = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getInputElementHandleSelectionRange(_handle);
			}
			return [0, 0];
		};

		_pInputElement.getCaretLine = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getInputElementHandleCaretLine(_handle);
			}
			return 0;
		};

		_pInputElement.getScrollLeft = function () {
			var _handle = this._handle;
			var scrollLeft = 0;
			if (_handle) {
				scrollLeft = nexacro.__getInputElementHandleScrollLeft(_handle);
				scrollLeft = nexacro.__convertScrollLeftByRtl(this, scrollLeft);
			}
			return scrollLeft;
		};

		_pInputElement.setScrollLeft = function (v) {
			var _handle = this._handle;
			if (_handle) {
				var scrollLeft = nexacro.__convertScrollLeftByRtl(this, v);
				nexacro.__setInputElementHandleScrollLeft(_handle, scrollLeft);
			}
		};

		_pInputElement.getScrollTop = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getInputElementHandleScrollTop(_handle);
			}
			return 0;
		};

		_pInputElement.setScrollTop = function (v) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setInputElementHandleScrollTop(_handle, v);
			}
		};

		_pInputElement.getScrollWidth = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getInputElementHandleScrollWidth(_handle);
			}
			return 0;
		};

		_pInputElement.getScrollHeight = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getInputElementHandleScrollHeight(_handle);
			}
			return 0;
		};

		_pInputElement.getElementValue = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getElementHandleValue(_handle);
			}
			return "";
		};

		_pInputElement.setElementAccessibilityRole = function (role) {
		};

		_pInputElement._checkActiveElement = function (role) {
			var _handle = this._handle;
			var isActive = true;

			if (_handle) {
				isActive = nexacro._checkActiveElement(this);
			}

			return isActive;
		};

		_pInputElement._setCutAction = nexacro._emptyFn;
		_pInputElement._deleteCaret = nexacro._emptyFn;
		_pInputElement._setElementInputRole = nexacro._emptyFn;
		_pInputElement._setElementInputLabel = nexacro._emptyFn;

		_pInputElement._on_sys_keyinput = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				if (nexacro.OS == "Android" && nexacro.Browser == "Runtime") {
					var _form = comp.parent, stepcontrol = null;
					while (_form) {
						if (_form.stepcontrol) {
							stepcontrol = _form.stepcontrol;
							break;
						}
						_form = _form.parent;
					}

					if (stepcontrol) {
						var steppos = comp.positionstep;
						if (stepcontrol.stepindex != steppos) {
							stepcontrol.set_stepindex(steppos);
						}
					}
				}

				comp._on_input_keyinput(this);
				return true;
			}
			return false;
		};

		_pInputElement._on_sys_keypress = function (keyCode, charCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				if (this._event_stop) {
					this._event_stop = false;
					return false;
				}

				var _win = comp._getWindow();
				if (_win._keydown_element == null || _win._keydown_element._handle == null) {
					return false;
				}

				var bRet = comp._on_input_keypress(this, keyCode, charCode, altKey, ctrlKey, shiftKey);

				if (bRet != false) {
					return true;
				}
			}
			return false;
		};

		_pInputElement._on_sys_keydown = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				var _win = comp._getWindow();

				nexacro._syshandler_onkeydown_forward(_win, this, keyCode, altKey, ctrlKey, shiftKey);

				if (this._isPreventDefault(comp, "onkeydown") || this._event_stop) {
					this._event_stop = false;
					return false;
				}

				var bRet = comp._on_input_keydown(this, keyCode, altKey, ctrlKey, shiftKey);



				if (bRet != false) {
					return true;
				}
			}
			return false;
		};

		_pInputElement._on_sys_keyup = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				var _win = comp._getWindow();

				if (this._isPreventDefault(comp, "onkeyup")) {
					return false;
				}

				comp._on_input_keyup(this, keyCode, altKey, ctrlKey, shiftKey);

				nexacro._syshandler_onkeyup_forward(_win, this, keyCode, altKey, ctrlKey, shiftKey);

				if (this._isPreventDefault(comp, "onkeyup")) {
					return false;
				}
			}
			return false;
		};

		_pInputElement._on_sys_compositionstart = function (data) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_compositionstart(data);
			}
			return false;
		};
		_pInputElement._on_sys_compositionupdate = function (data) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_compositionupdate(data);
			}
			return false;
		};
		_pInputElement._on_sys_compositionend = function (data) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			var pThis = this;

			if (comp) {
				comp._on_input_compositionend(data);
			}
			return false;
		};

		_pInputElement._on_sys_focus = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				if (comp._on_input_focus) {
					comp._on_input_focus(this);
				}

				var _handle = this._handle;
				if (_handle && !this._is_focused) {
					this._is_focused = true;
				}
			}
			return false;
		};
		_pInputElement._on_sys_blur = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				if (comp._on_input_blur) {
					comp._on_input_blur(this, this._handle);
				}

				var _handle = this._handle;
				if (_handle && this._is_focused) {
					this._is_focused = false;

					if (nexacro._isNull(this.value) && this.displaynulltext) {
						nexacro.__setElementHandleValue(_handle, this.displaynulltext, true);
					}
				}
			}
			return false;
		};

		_pInputElement._on_sys_lbuttondown = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_mousedown(this, altKey, ctrlKey, shiftKey);

				if (this._event_stop) {
					this._event_stop = false;
				}
			}
			return false;
		};

		_pInputElement._on_sys_lbuttonup = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_mouseup(this, altKey, ctrlKey, shiftKey);

				if (this._event_stop) {
					this._event_stop = false;
				}
			}
			return false;
		};

		_pInputElement._on_sys_rbuttondown = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_mousedown(this);
			}
			return false;
		};

		_pInputElement._on_sys_rbuttonup = function (button, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);

			if (comp) {
				var _win = comp._getWindow();

				nexacro._syshandler_onrbuttonup_forward(_win, this, button, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY);

				comp._on_input_mouseup(this);
				return true;
			}
			return false;
		};
		_pInputElement._on_sys_mousemove = function (keyCode, altKey, ctrlKey, shiftKey) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_mousemove(this);
			}
			return false;
		};

		_pInputElement._on_sys_cut = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_cut(this);
			}
			return false;
		};
		_pInputElement._on_sys_copy = nexacro._emptyFn;
		_pInputElement._on_sys_paste = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				comp._on_input_paste(this);
			}
			return false;
		};

		_pInputElement._on_sys_contextmenu = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				var _win = comp._getWindow();

				nexacro._syshandler_oncontextmenu_forward(_win, this);

				return comp._on_contextmenu(this);
			}
			return false;
		};

		_pInputElement._on_sys_select = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				return comp._on_input_select(this);
			}
			return false;
		};

		_pInputElement._setElementInputRole = nexacro._emptyFn;

		_pInputElement._bindEvent = function () {
			var input = this._handle;

			nexacro._observeInputEvent(input, "input", "oninput", this._on_sys_keyinput);
			nexacro._observeInputEvent(input, "keydown", "onkeydown", this._on_sys_keydown);
			nexacro._observeInputEvent(input, "keyup", "onkeyup", this._on_sys_keyup);
			nexacro._observeInputEvent(input, "keypress", "onkeypress", this._on_sys_keypress);

			nexacro._observeInputEvent(input, "compositionstart", "oncompositionstart", this._on_sys_compositionstart);
			nexacro._observeInputEvent(input, "compositionupdate", "oncompositionupdate", this._on_sys_compositionupdate);
			nexacro._observeInputEvent(input, "compositionend", "oncompositionend", this._on_sys_compositionend);

			nexacro._observeInputEvent(input, "focus", "onfocus", this._on_sys_focus);
			nexacro._observeInputEvent(input, "blur", "onblur", this._on_sys_blur);

			nexacro._observeInputEvent(input, "lbuttondown", "onlbuttondown", this._on_sys_lbuttondown);
			nexacro._observeInputEvent(input, "lbuttonup", "onlbuttonup", this._on_sys_lbuttonup);
			nexacro._observeInputEvent(input, "rbuttondown", "onrbuttondown", this._on_sys_rbuttondown);
			nexacro._observeInputEvent(input, "rbuttonup", "onrbuttonup", this._on_sys_rbuttonup);
			nexacro._observeInputEvent(input, "mousemove", "onmousemove", this._on_sys_mousemove);

			if (nexacro.SupportTouch) {
				nexacro._observeInputEvent(input, "touchstart", "ontouchstart", this._on_sys_lbuttondown);
				nexacro._observeInputEvent(input, "touchend", "ontouchend", this._on_sys_lbuttonup);
				nexacro._observeInputEvent(input, "touchmove", "ontouchmove", this._on_sys_mousemove);
			}

			nexacro._observeInputEvent(input, "cut", "oncut", this._on_sys_cut);
			nexacro._observeInputEvent(input, "paste", "onpaste", this._on_sys_paste);
			nexacro._observeInputEvent(input, "contextmenu", "oncontextmenu", this._on_sys_contextmenu);

			nexacro._observeInputEvent(input, "select", "onselect", this._on_sys_select);
		};

		_pInputElement._unBindEvent = function () {
			var input = this._handle;

			nexacro._stopInputObserving(input, "input", "oninput", this._on_sys_keyinput);
			nexacro._stopInputObserving(input, "keydown", "onkeydown", this._on_sys_keydown);
			nexacro._stopInputObserving(input, "keyup", "onkeyup", this._on_sys_keyup);
			nexacro._stopInputObserving(input, "keypress", "onkeypress", this._on_sys_keypress);

			nexacro._stopInputObserving(input, "compositionstart", "oncompositionstart", this._on_sys_compositionstart);
			nexacro._stopInputObserving(input, "compositionupdate", "oncompositionupdate", this._on_sys_compositionupdate);
			nexacro._stopInputObserving(input, "compositionend", "oncompositionend", this._on_sys_compositionend);

			nexacro._stopInputObserving(input, "focus", "onfocus", this._on_sys_focus);
			nexacro._stopInputObserving(input, "blur", "onblur", this._on_sys_blur);

			nexacro._stopInputObserving(input, "lbuttondown", "onlbuttondown", this._on_sys_lbuttondown);
			nexacro._stopInputObserving(input, "lbuttonup", "onlbuttonup", this._on_sys_lbuttonup);
			nexacro._stopInputObserving(input, "rbuttondown", "onrbuttondown", this._on_sys_rbuttondown);
			nexacro._stopInputObserving(input, "rbuttonup", "onrbuttonup", this._on_sys_rbuttonup);
			nexacro._stopInputObserving(input, "mousemove", "onmousemove", this._on_sys_mousemove);

			if (nexacro.SupportTouch) {
				nexacro._stopInputObserving(input, "touchstart", "ontouchstart", this._on_sys_lbuttondown);
				nexacro._stopInputObserving(input, "touchend", "ontouchend", this._on_sys_lbuttonup);
				nexacro._stopInputObserving(input, "touchmove", "ontouchmove", this._on_sys_mousemove);
			}

			nexacro._stopInputObserving(input, "cut", "oncut", this._on_sys_cut);
			nexacro._stopInputObserving(input, "paste", "onpaste", this._on_sys_paste);
			nexacro._stopInputObserving(input, "contextmenu", "oncontextmenu", this._on_sys_contextmenu);

			nexacro._stopInputObserving(input, "select", "onselect", this._on_sys_select);
		};

		delete _pInputElement;

		nexacro.TextAreaElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pTextAreaElement = new nexacro._createPrototype(nexacro.InputElement, nexacro.TextAreaElement);
		nexacro.TextAreaElement.prototype = _pTextAreaElement;


		_pTextAreaElement._type_name = "TextAreaElement";

		_pTextAreaElement.usemultiline = true;

		_pTextAreaElement.setElementLineSpace = function (linespace) {
			if (this.linespace != linespace) {
				this.linespace = linespace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLineSpace(_handle, linespace);
				}
			}
		};

		_pTextAreaElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pTextAreaElement.setElementWordWrap = function (wordwrap) {
			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			if (this.wordwrap != wordwrap) {
				this.wordwrap = wordwrap;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleWordWrap(_handle, wordwrap);
				}
			}
		};

		_pTextAreaElement._on_sys_scroll = function (posTop, posLeft) {
			var container = this._parent_elem.getContainerElement(this.position_step);
			if (container) {
				var comp = container._parent_elem.linkedcontrol;
				var _win = comp._getWindow();
				if (_win && _win._cur_ldown_elem) {
					var hscrollbar = container.parent._hscroll_control;
					if (hscrollbar && !hscrollbar._is_tracking) {
						hscrollbar.set_pos(posLeft);
					}

					var vscrollbar = container.parent._vscroll_control;
					if (vscrollbar && !vscrollbar._is_tracking) {
						vscrollbar.set_pos(posTop);
					}
				}
			}
		};

		_pTextAreaElement._bindEvent = function () {
			var input = this._handle;

			nexacro.InputElement.prototype._bindEvent.call(this);

			nexacro._observeInputEvent(input, "scroll", "onscroll", this._on_sys_scroll);
		};

		_pTextAreaElement._unbindEvent = function () {
			var input = this._handle;

			nexacro.InputElement.prototype._unBindEvent.call(this);

			nexacro._stopInputObserving(input, "scroll", "onscroll", this._on_sys_scroll);
		};

		delete _pTextAreaElement;

		nexacro.ControlElementBase = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pControlElementBase = nexacro._createPrototype(nexacro.Element, nexacro.ControlElementBase);
		nexacro.ControlElementBase.prototype = _pControlElementBase;

		_pControlElementBase._type_name = "ControlElementBase";

		_pControlElementBase.enable = true;
		_pControlElementBase.tabindex = -1;
		_pControlElementBase.zindex = -1;
		_pControlElementBase.font = null;
		_pControlElementBase.color = null;
		_pControlElementBase.cursor = null;
		_pControlElementBase.client_left = 0;
		_pControlElementBase.client_top = 0;
		_pControlElementBase.client_width = 0;
		_pControlElementBase.client_height = 0;
		_pControlElementBase.border = null;
		_pControlElementBase.bordertype = null;
		_pControlElementBase.background = null;
		_pControlElementBase.gradation = null;
		_pControlElementBase.opacity = 0;
		_pControlElementBase.padding = null;
		_pControlElementBase.padding_left = 0;
		_pControlElementBase.padding_top = 0;
		_pControlElementBase.padding_right = 0;
		_pControlElementBase.padding_bottom = 0;
		_pControlElementBase.position_step = undefined;

		_pControlElementBase.accessibility_role = "";
		_pControlElementBase.accessibility_enable = false;
		_pControlElementBase.accessibility_label = "";
		_pControlElementBase.accessibility_desclevel = "";
		_pControlElementBase.accessibility_description = "";
		_pControlElementBase.accessibility_action = "";

		_pControlElementBase._accessibility_value = undefined;
		_pControlElementBase._accessibility_stat_disabled = undefined;
		_pControlElementBase._accessibility_stat_hidden = undefined;
		_pControlElementBase._accessibility_stat_checked = undefined;
		_pControlElementBase._accessibility_stat_pressed = undefined;
		_pControlElementBase._accessibility_stat_selected = undefined;
		_pControlElementBase._accessibility_stat_expanded = undefined;
		_pControlElementBase._accessibility_stat_autocomplete = undefined;
		_pControlElementBase._accessibility_flag_haspopup = undefined;
		_pControlElementBase._accessibility_flag_focusable = undefined;
		_pControlElementBase._accessibility_flag_readonly = undefined;
		_pControlElementBase._accessibility_flag_password = undefined;
		_pControlElementBase._accessibility_flag_multiselectable = undefined;
		_pControlElementBase._accessibility_flag_selectable = undefined;
		_pControlElementBase._accessibility_flag_defaultbutton = undefined;
		_pControlElementBase._accessibility_flag_multiline = undefined;
		_pControlElementBase._accessibility_prop_itemcount = undefined;
		_pControlElementBase._accessibility_prop_itemindex = undefined;
		_pControlElementBase._accessibility_prop_valuemax = undefined;
		_pControlElementBase._accessibility_prop_valuemin = undefined;
		_pControlElementBase._accessibility_prop_hotkey = undefined;


		_pControlElementBase._dom_border = null;
		_pControlElementBase._inner_left = 0;
		_pControlElementBase._inner_top = 0;
		_pControlElementBase._inner_width = 0;
		_pControlElementBase._inner_height = 0;
		_pControlElementBase._node_width = 0;
		_pControlElementBase._node_height = 0;
		_pControlElementBase._background_style = 0;
		_pControlElementBase._node_opacity_str = "";
		_pControlElementBase._node_opacity = 100;
		_pControlElementBase._node_bkcolor = "";
		_pControlElementBase._node_gradation = "";
		_pControlElementBase._node_bkurl = "";
		_pControlElementBase._node_bkrepeat = "";
		_pControlElementBase._node_bkpos = "";
		_pControlElementBase.linkedcontrol = null;
		_pControlElementBase._client_element = null;
		_pControlElementBase._vml_elem = null;
		_pControlElementBase._bkimg_elem = null;
		_pControlElementBase._append_flag = false;
		_pControlElementBase._is_window_element = false;
		_pControlElementBase._img_sizereq = false;
		_pControlElementBase._img_url = "";
		_pControlElementBase._hittest_type = "";

		_pControlElementBase.create = nexacro._emptyFn;
		_pControlElementBase.destroy = nexacro._emptyFn;
		_pControlElementBase.clearContents = nexacro._emptyFn;

		_pControlElementBase.setElementStepCount = nexacro._emptyFn;
		_pControlElementBase.setElementStepIndex = nexacro._emptyFn;

		_pControlElementBase.setLinkedControl = function (control) {
			if (!this.linkedcontrol && control) {
				this.parent = control;
				this.linkedcontrol = control;
			}
		};

		_pControlElementBase.setElementPositionStep = function (position_step) {
			if (this.position_step != position_step || position_step == -1) {
				this.position_step = position_step;

				var _handle = this._handle;
				if (_handle && this._parent_elem) {
					var old_owner_elem = this._owner_elem;
					var _owner_elem = this._parent_elem.getContainerElement(position_step);
					if (old_owner_elem && old_owner_elem._handle && _owner_elem && _owner_elem._handle) {
						nexacro.__unlinkElementHandle(old_owner_elem._handle, _handle);
						nexacro.__appendElementHandle(_owner_elem._handle, _handle);
						this._owner_elem = _owner_elem;
					}
				}
			}
		};

		_pControlElementBase.setElementEnable = function (enable) {
			if (this.enable != enable) {
				this.enable = enable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleEnable(_handle, enable);
				}
			}
		};
		_pControlElementBase.setElementTabIndex = function (tabindex) {
			if (this.tabindex != tabindex) {
				this.tabindex = tabindex;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleTabIndex(_handle, tabindex);
				}
			}
		};
		_pControlElementBase.setElementZIndex = function (zindex) {
			if (this.zindex != zindex) {
				this.zindex = zindex;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleZindex(_handle, zindex);
				}
			}
		};

		_pControlElementBase.setElementFont = function (font) {
			this.font = font;
			if (this._client_element) {
				this._client_element.setElementFont(font);
			}
		};
		_pControlElementBase.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (this._client_element) {
				this._client_element.setElementColor(color);
			}
		};
		_pControlElementBase.setElementCursor = function (cursor) {
			this.cursor = cursor;
			var _handle = this._handle;
			if (_handle) {
				if (cursor && !cursor._is_empty) {
					nexacro.__setElementHandleCursor(_handle, cursor.value);
				}
				else {
					nexacro.__setElementHandleCursor(_handle, cursor);
				}
			}
		};

		_pControlElementBase.setElementToolTip = function (tooltiptext, tooltiptype) {
			if (tooltiptext === undefined) {
				tooltiptext = "";
			}
			if (this.tooltiptext != tooltiptext || this.tooltiptype != tooltiptype) {
				this.tooltiptext = tooltiptext;
				this.tooltiptype = tooltiptype;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleToolTip(_handle, tooltiptext, tooltiptype);
				}
			}
		};

		_pControlElementBase.setElementShadow = function (shadow) {
			this.shadow = shadow;
			var _handle = this._handle;
			if (_handle) {
				var _shadow = shadow ? shadow._getStyleObject(this._isRtl()) : null;

				nexacro.__setElementHandleShadow(_handle, _shadow.type, _shadow._syscolor, _shadow.factor, _shadow._offset_x, _shadow._offset_y);
			}
		};

		_pControlElementBase.setElementFocus = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleFocus(_handle);
				nexacro.__setLastFocusedElement(this);
			}
		};

		_pControlElementBase._isVML = function () {
			return false;
		};

		_pControlElementBase.setElementOpacity = function (opacity) {
			var _handle = this._handle;
			this.opacity = parseInt(opacity.value);
			if (_handle) {
				var val = (this.opacity >= 100) ? 100 : (this.opacity <= 0) ? 0 : this.opacity;
				nexacro.__setElementHandleOpacity(_handle, val);
			}
		};

		_pControlElementBase.setElementAlign = nexacro._emptyFn;
		_pControlElementBase.setElementAlignXY = nexacro._emptyFn;

		_pControlElementBase.setElementPadding = nexacro._emptyFn;
		_pControlElementBase.setElementPaddingXY = nexacro._emptyFn;

		_pControlElementBase.setElementHittestType = function (httype) {
			if (this._hittest_type != httype) {
				this._hittest_type = httype;
				if (this._handle) {
					nexacro.__setElementHittestValue(this._handle, httype);
				}
			}
		};

		_pControlElementBase.setElementSize = function (width, height) {
			if (this.width != width || this.height != height) {
				this.width = width;
				this.height = height;
				var _handle = this._handle;
				this._setControlSize(_handle, width, height);
				this._updateClientSize();

				if (this._isRtl()) {
					this.setElementPosition(this.left, this.top, true);
				}
			}
		};

		_pControlElementBase.setElementBorder = function (border, bordertype) {
			this.border = border;
			this.bordertype = bordertype;
			var _handle = this._handle;
			this._setControlBorder(_handle, border, bordertype);
			this._updateClientSize();
		};

		_pControlElementBase.setElementBackground = function (background, gradation) {
			this.background = background;
			this.gradation = gradation;

			var bRtl = this._isRtl();
			var _gradation = gradation;
			var _background = background;

			_gradation = gradation ? gradation._getStyleObject(bRtl) : null;
			_background = (background && background != "none") ? background._getStyleObject(bRtl) : null;

			if (background && background.image) {
				var bkimgurl = background.image;

				if (bkimgurl && bkimgurl.substring(0, 4).toLowerCase() == "url(") {
					bkimgurl = bkimgurl.substring(5, bkimgurl.length - 2);
				}
				if (bkimgurl && !nexacro._isAbsolutePath(bkimgurl)) {
					var base_url = this._getElementBaseUrl();
					bkimgurl = nexacro._getImageLocation(bkimgurl, base_url);
				}

				if (this._img_url != bkimgurl) {
					this._img_url = bkimgurl;
					var imgsize = nexacro._getImageSize(bkimgurl, this._on_notify_imgsize, this, undefined, background.image);

					if (bkimgurl.substring(0, 10).toLowerCase() == "data:image") {
						this._img_sizereq = false;
					}
					else {
						this._img_sizereq = true;
					}

					if (imgsize && this._img_sizereq) {
						this._img_sizereq = false;
					}
				}
			}

			var _handle = this._handle;
			if (_handle) {
				this._setControlBackground(_handle, _background, _gradation);
			}
		};

		_pControlElementBase.setElementAccessibilityRole = function (role) {
			var accrole = nexacro._roleList[role];
			if (this.accessibility_role != accrole) {
				this.accessibility_role = accrole;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityRole(_handle, accrole);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityLabel = function (label) {
			if (this.accessibility_label != label) {
				this.accessibility_label = label;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityLabel(_handle, label);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityEnable = function (enable) {
			if (this.accessibility_enable != enable) {
				this.accessibility_enable = enable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityEnable(_handle, enable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityDescription = function (desc) {
			if (this.accessibility_description != desc) {
				this.accessibility_description = desc;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityDescription(_handle, desc);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityAction = function (action) {
			if (this.accessibility_action != action) {
				this.accessibility_action = action;
			}
		};

		_pControlElementBase.setElementAccessibilityDescLevel = function (desclevel) {
			if (this.accessibility_desclevel != desclevel) {
				this.accessibility_desclevel = desclevel;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityDescLevel(_handle, desclevel);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityValue = function (value) {
		};

		_pControlElementBase.setElementAccessibilityStatDisabled = function (disabled) {
			if (this._accessibility_stat_disabled != disabled) {
				this._accessibility_stat_disabled = disabled;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatDisabled(_handle, disabled);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatHidden = function (hidden) {
			if (this._accessibility_stat_hidden != hidden) {
				this._accessibility_stat_hidden = hidden;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatHidden(_handle, hidden);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityHidden = function (hidden) {
		};

		_pControlElementBase.setElementAccessibilityStatChecked = function (checked) {
			if (this._accessibility_stat_checked != checked) {
				this._accessibility_stat_checked = checked;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatChecked(_handle, checked);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatPressed = function (pressed) {
			if (this._accessibility_stat_pressed != pressed) {
				this._accessibility_stat_pressed = pressed;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatPressed(_handle, pressed);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatSelected = function (selected) {
			if (this._accessibility_stat_selected != selected) {
				this._accessibility_stat_selected = selected;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatSelected(_handle, selected);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatExpanded = function (expanded) {
			if (this._accessibility_stat_expanded != expanded) {
				this._accessibility_stat_expanded = expanded;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatExpanded(_handle, expanded);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityStatAutoComplete = function (autocomplete) {
		};

		_pControlElementBase.setElementAccessibilityFlagHasPopup = function (haspopup) {
			if (this._accessibility_flag_haspopup != haspopup) {
				this._accessibility_flag_haspopup = haspopup;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatHasPopup(_handle, haspopup);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagFocusable = function (focusable) {
			if (this._accessibility_flag_focusable != focusable) {
				this._accessibility_flag_focusable = focusable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityFlagFocusable(_handle, focusable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagReadOnly = function (readonly) {
			if (this._accessibility_flag_readonly != readonly) {
				this._accessibility_flag_readonly = readonly;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityFlagReadOnly(_handle, readonly);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagPassword = function (password) {
			if (this._accessibility_flag_password != password) {
				this._accessibility_flag_password = password;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityFlagPassword(_handle, password);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagMultiSelectable = function (multiselectable) {
			if (this._accessibility_flag_multiselectable != multiselectable) {
				this._accessibility_flag_multiselectable = multiselectable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityFlagMultiSelectable(_handle, multiselectable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagSelectable = function (selectable) {
			if (this._accessibility_flag_selectable != selectable) {
				this._accessibility_flag_selectable = selectable;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityFlagSelectable(_handle, selectable);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagDefaultButton = function (defaultbutton) {
			if (this._accessibility_flag_defaultbutton != defaultbutton) {
				this._accessibility_flag_defaultbutton = defaultbutton;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityStatDefaultButton(_handle, defaultbutton);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityFlagMultiLine = function (multiline) {
			if (this._accessibility_flag_multiline != multiline) {
				this._accessibility_flag_multiline = multiline;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityFlagMultiLine(_handle, multiline);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoCount = function (count) {
			if (this._accessibility_prop_infocount != count) {
				this._accessibility_prop_infocount = count;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityInfoCount(_handle, count);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoIndex = function (index) {
			if (this._accessibility_prop_infoindex != index) {
				this._accessibility_prop_infoindex = index;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityInfoIndex(_handle, index);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoValueMax = function (valuemax) {
			if (this._accessibility_prop_infovaluemax != valuemax) {
				this._accessibility_prop_infovaluemax = valuemax;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityInfoValueMax(_handle, valuemax);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoValueMin = function (valuemin) {
			if (this._accessibility_prop_infovaluemin != valuemin) {
				this._accessibility_prop_infovaluemin = valuemin;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityInfoValueMin(_handle, valuemin);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoValueCur = function (valuecur) {
			if (this._accessibility_prop_infovaluecur != valuecur) {
				this._accessibility_prop_infovaluecur = valuecur;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityInfoValueCur(_handle, valuecur);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityInfoLevel = function (level) {
			if (this._accessibility_prop_infolevel != level) {
				this._accessibility_prop_infolevel = level;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityInfoLevel(_handle, level);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityHotKey = function (hotkey) {
			if (this._accessibility_prop_hotkey != hotkey) {
				this._accessibility_prop_hotkey = hotkey;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleAccessibilityHotKey(_handle, hotkey);
				}
			}
		};

		_pControlElementBase.setElementAccessibilityActiveDescendant = function (activedescendant_elem) {
			this._accessibility_prop_activedescendant = activedescendant_elem.linkedcontrol._unique_id;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAccessibilityActiveDescendant(_handle, activedescendant_elem.linkedcontrol._unique_id);
			}
		};

		_pControlElementBase.setElementAccessibilityStatFocus = function (label) {
			var notifyvalue;
			if (label) {
				notifyvalue = label;
			}
			else {
				var readlabel = this._makeAccessibilityLabelbyReadtype(this);
				this.accessibility_readlabel = readlabel;
				notifyvalue = readlabel;
			}

			var _handle = this._handle;
			if (_handle) {
				nexacro.__notifyAccessibility(_handle, notifyvalue, "focus");
			}
		};

		_pControlElementBase.setElementAccessibilityNotifyEvent = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAccessibilityNotifyEvent(_handle);
			}
			return true;
		};

		_pControlElementBase._refreshForeground = function (_handle) {
			if (!this.visible) {
				nexacro.__setElementHandleVisible(_handle, false);
			}
			if (!this.enable) {
				nexacro.__setElementHandleEnable(_handle, false);
			}
			if (this.tabindex >= -1) {
				nexacro.__setElementHandleTabIndex(_handle, this.tabindex);
			}
			if (this.zindex >= 0) {
				nexacro.__setElementHandleZindex(_handle, this.zindex);
			}
			if (this.cursor) {
				nexacro.__setElementHandleCursor(_handle, this.cursor.value);
			}
			if (this.tooltiptext) {
				nexacro.__setElementHandleToolTip(_handle, this.tooltiptext, this.tooltiptype);
			}
			if (this.shadow) {
				var shadow = this.shadow;
				nexacro.__setElementHandleShadow(_handle, shadow.type, shadow._syscolor, shadow.factor, shadow._offset_x, shadow._offset_y);
			}

			if (nexacro._enableaccessibility) {
				if (this.accessibility_role) {
					nexacro.__setElementHandleAccessibilityRole(_handle, this.accessibility_role);
				}

				if (this.accessibility_enable) {
					if (this.accessibility_enable) {
						nexacro.__setElementHandleAccessibilityEnable(_handle, this.accessibility_enable);
					}
					if (this.accessibility_desclevel) {
						nexacro.__setElementHandleAccessibilityDescLevel(_handle, this.accessibility_desclevel);
					}
					if (this.accessibility_description) {
						nexacro.__setElementHandleAccessibilityDescription(_handle, this.accessibility_description);
					}
					var readlabel = this._makeAccessibilityLabelbyReadtype(this);
					if (readlabel != this.accessibility_readlabel) {
						this.accessibility_readlabel = readlabel;
						nexacro.__setElementHandleAccessibilityLabel(_handle, this.accessibility_readlabel);
					}
				}
				else {
					nexacro.__setElementHandleAccessibilityEnable(_handle, this.accessibility_enable);
				}


				if (this._accessibility_stat_disabled) {
					nexacro.__setElementHandleAccessibilityStatDisabled(_handle, this._accessibility_stat_disabled);
				}
				if (this._accessibility_stat_hidden) {
					nexacro.__setElementHandleAccessibilityStatHidden(_handle, this._accessibility_stat_hidden);
				}
				if (this._accessibility_stat_checked) {
					nexacro.__setElementHandleAccessibilityStatChecked(_handle, this._accessibility_stat_checked);
				}

				if (this._accessibility_stat_pressed) {
					nexacro.__setElementHandleAccessibilityStatPressed(_handle, this._accessibility_stat_pressed);
				}
				if (this._accessibility_stat_selected) {
					nexacro.__setElementHandleAccessibilityStatSelected(_handle, this._accessibility_stat_selected);
				}
				if (this._accessibility_stat_expanded) {
					nexacro.__setElementHandleAccessibilityStatExpanded(_handle, this._accessibility_stat_expanded);
				}

				if (this._accessibility_flag_haspopup) {
					nexacro.__setElementHandleAccessibilityStatHasPopup(_handle, this._accessibility_flag_haspopup);
				}
				if (this._accessibility_flag_focusable) {
					nexacro.__setElementHandleAccessibilityFlagFocusable(_handle, this._accessibility_flag_focusable);
				}
				if (this._accessibility_flag_readonly) {
					nexacro.__setElementHandleAccessibilityFlagReadOnly(_handle, this._accessibility_flag_readonly);
				}

				if (this._accessibility_flag_password) {
					nexacro.__setElementHandleAccessibilityFlagPassword(_handle, this._accessibility_flag_password);
				}
				if (this._accessibility_flag_multiselectable) {
					nexacro.__setElementHandleAccessibilityFlagMultiSelectable(_handle, this._accessibility_flag_multiselectable);
				}
				if (this._accessibility_flag_selectable) {
					nexacro.__setElementHandleAccessibilityFlagSelectable(_handle, this._accessibility_flag_selectable);
				}
				if (this._accessibility_flag_defaultbutton) {
					nexacro.__setElementHandleAccessibilityStatDefaultButton(_handle, this._accessibility_flag_defaultbutton);
				}

				if (this._accessibility_flag_multiline) {
					nexacro.__setElementHandleAccessibilityFlagMultiLine(_handle, this._accessibility_flag_multiline);
				}

				if (this._accessibility_prop_hotkey) {
					nexacro.__setElementHandleAccessibilityHotKey(_handle, this._accessibility_prop_hotkey);
				}

				if (this._accessibility_prop_itemcount) {
					nexacro.__setElementHandleAccessibilityInfoCount(_handle, this._accessibility_prop_itemcount);
				}
				if (this._accessibility_prop_itemindex) {
					nexacro.__setElementHandleAccessibilityInfoIndex(_handle, this._accessibility_prop_itemindex);
				}

				if (this._accessibility_prop_valuemax) {
					nexacro.__setElementHandleAccessibilityInfoValueMax(_handle, this._accessibility_prop_valuemax);
				}
				if (this._accessibility_prop_valuemin) {
					nexacro.__setElementHandleAccessibilityInfoValueMin(_handle, this._accessibility_prop_valuemin);
				}
			}

			nexacro.AccessibilityUtil.supportMobileApplicationAccessibility(this);
		};

		_pControlElementBase._setControlSize = function (_handle, width, height) {
			var inner_width = width;
			var inner_height = height;

			var border = this.border;
			if (border && !border._is_real_empty()) {
				inner_width = width - border._getBorderWidth();
				inner_height = height - border._getBorderHeight();
				if (inner_width < 0) {
					inner_width = 0;
				}
				if (inner_height < 0) {
					inner_height = 0;
				}
			}

			if (this._inner_width != inner_width || this._inner_height != inner_height) {
				this._inner_width = inner_width;
				this._inner_height = inner_height;

				if (_handle) {
					nexacro.__setElementHandleSize(_handle, width, height);
				}
			}

			if (this._is_window_element) {
				var _win_handle = this.getRootWindowHandle();
				nexacro._setWindowHandleBorder(_win_handle, this.border, this.bordertype);
			}
		};

		_pControlElementBase._setControlBorder = function (_handle, border, bordertype) {
			var bRtl = this._isRtl(true);

			var _border = border;
			var _bordertype = bordertype;

			_border = border ? border._getStyleObject(bRtl ^ this.mirror) : null;
			_bordertype = bordertype ? bordertype._getStyleObject(bRtl) : null;

			if (_handle) {
				if (_bordertype) {
					var radiusx = (_bordertype._radiusx < 0) ? 0 : _bordertype._radiusx;
					var radiusy = (_bordertype._radiusy < 0) ? 0 : _bordertype._radiusy;

					nexacro.__setElementHandleBordertype(_handle, _bordertype.type, radiusx, radiusy, _bordertype._lefttop, _bordertype._righttop, _bordertype._leftbottom, _bordertype._rightbottom);
				}
				else {
					nexacro.__setElementHandleBordertype(_handle, "", 0, 0, 0, 0, 0, 0);
				}
			}

			var inner_width = this.width;
			var inner_height = this.height;

			if (_border && !_border._is_real_empty()) {
				if (_handle) {
					if (_border._linecnt == 1) {
						var top_width = _border.top_style ? _border._top_width : 0;
						top_width = top_width < 0 ? 0 : top_width;
						nexacro.__setElementHandleBorder(_handle, _border.top_style, top_width, _border._top_syscolor);
					}
					else {
						var left_width, top_width, right_width, bottom_width;
						if (_border._linecnt == 2) {
							top_width = _border.top_style ? _border._top_width : 0;
							right_width = _border.right_style ? _border._right_width : 0;
							left_width = right_width;
							bottom_width = top_width;
						}
						else if (_border._linecnt == 3) {
							top_width = _border.top_style ? _border._top_width : 0;
							bottom_width = _border.bottom_style ? _border._bottom_width : 0;
							right_width = _border.right_style ? _border._right_width : 0;
							left_width = right_width;
						}
						else {
							top_width = _border.top_style ? _border._top_width : 0;
							bottom_width = _border.bottom_style ? _border._bottom_width : 0;
							left_width = _border.left_style ? _border._left_width : 0;
							right_width = _border.right_style ? _border._right_width : 0;
						}

						top_width = top_width < 0 ? 0 : top_width;
						bottom_width = bottom_width < 0 ? 0 : bottom_width;
						left_width = left_width < 0 ? 0 : left_width;
						right_width = right_width < 0 ? 0 : right_width;

						nexacro.__setElementHandleBorderTop(_handle, _border.top_style, top_width, _border._top_syscolor);
						nexacro.__setElementHandleBorderBottom(_handle, _border.bottom_style, bottom_width, _border._bottom_syscolor);
						nexacro.__setElementHandleBorderLeft(_handle, _border.left_style, left_width, _border._left_syscolor);
						nexacro.__setElementHandleBorderRight(_handle, _border.right_style, right_width, _border._right_syscolor);
					}
				}

				inner_width = this.width - _border._getBorderWidth();
				inner_height = this.height - _border._getBorderHeight();
				if (inner_width < 0) {
					inner_width = 0;
				}
				if (inner_height < 0) {
					inner_height = 0;
				}
			}
			else {
				nexacro.__setElementHandleBorder(_handle, "none", 0, 0);
			}

			if (this._inner_width != inner_width || this._inner_height != inner_height) {
				this._inner_width = inner_width;
				this._inner_height = inner_height;
			}

			if (this._is_window_element) {
				var _win_handle = this.getRootWindowHandle();
				nexacro._setWindowHandleBorder(_win_handle, _border, _bordertype);
			}
		};

		_pControlElementBase._on_notify_imgsize = function (img_url, img_width, img_height) {
			if (!(img_width && img_height)) {
				return;
			}
			if (img_url != this._img_url) {
				return;
			}

			this._img_sizereq = false;
			var _handle = this._handle;
			if (_handle) {
				var bRtl = this._isRtl();

				var _gradation = this.gradation;
				var _background = this.background;

				_gradation = this.gradation ? this.gradation._getStyleObject(bRtl) : null;
				_background = (this.background && this.background != "none") ? this.background._getStyleObject(bRtl) : null;

				this._setControlBackground(_handle, _background, _gradation);
			}
		};

		_pControlElementBase._setControlBackground = function (_handle, background, gradation) {
			if (background) {
				if (background.color == "@gradation" && gradation) {
					nexacro.__setElementHandleBackgroundColor(_handle, 0);
					nexacro.__setElementHandleBackgroundGradation(_handle, gradation.style, gradation._start_x, gradation._start_y, gradation._start_syscolor, gradation._end_x, gradation._end_y, gradation._end_syscolor, gradation._sysvalue);
				}
				else {
					nexacro.__setElementHandleBackgroundColor(_handle, background._syscolor);
					nexacro.__setElementHandleBackgroundGradation(_handle, "", 0, 0, 0, 0, 0, 0, 0, "");
				}

				var bkimgurl = background.image;
				if (bkimgurl && !this._img_sizereq) {
					if (bkimgurl && bkimgurl.substring(0, 4).toLowerCase() == "url(") {
						bkimgurl = bkimgurl.substring(5, bkimgurl.length - 2);
					}
					if (bkimgurl && !nexacro._isAbsolutePath(bkimgurl)) {
						var base_url = this._getElementBaseUrl();
						bkimgurl = nexacro._getImageLocation(bkimgurl, base_url);
					}

					var bkrepeat = background.repeat;
					var pos_x = background.position_x;
					var pos_y = background.position_y;
					var edge_x = background.imageedge_x;
					var edge_y = background.imageedge_y;
					nexacro.__setElementHandleBackgroundImage(_handle, bkimgurl, bkrepeat, pos_x, pos_y, edge_x, edge_y);
				}
				else {
					nexacro.__setElementHandleBackgroundImage(_handle, "", false, 0, 0, 0, 0);
				}
			}
		};

		_pControlElementBase._isVML = function () {
			return false;
		};

		_pControlElementBase._setDOMQuadImage = nexacro._emptyFn;
		_pControlElementBase._setDOMEdgeImage = nexacro._emptyFn;

		_pControlElementBase.setAccessibility = function (accessibility) {
			var role = accessibility._role;
			var enable = accessibility.enable;
			var desclevel = accessibility._desclevel ? accessibility._desclevel : accessibility.desclevel;
			var label = (accessibility._label ? accessibility._label : accessibility.label);
			var description = accessibility._description ? accessibility._description : accessibility.description;
			var action = accessibility._action ? accessibility._action : accessibility.action;

			var handle = this._handle;
			if (handle) {
				if (role != this.accessibility_role && role != "none") {
					this.accessibility_role = role;
					nexacro.__setElementHandleAccessibilityRole(handle, role);
				}

				if (desclevel != this.accessibility_desclevel) {
					this.accessibility_desclevel = desclevel;
					var nLevel = {
						"none" : 0, 
						"self" : 1, 
						"child" : 2, 
						"all" : 3
					};
					nexacro.__setElementHandleAccessibilityDescLevel(handle, nLevel[desclevel]);
				}

				if (enable == true && (desclevel != "none" && desclevel != "child")) {
					if (label != this.accessibility_label) {
						this.accessibility_label = label;
					}
					if (description != this.accessibility_description) {
						this.accessibility_description = description;
						nexacro.__setElementHandleAccessibilityDescription(handle, description);
					}
					if (action != this.accessibility_action) {
						this.accessibility_action = action;
					}
					var readlabel = this._makeAccessibilityLabelbyReadtype();
					if (readlabel != this.accessibility_readlabel) {
						this.accessibility_readlabel = readlabel;
						nexacro.__setElementHandleAccessibilityLabel(handle, readlabel);
					}
				}
				else {
					this.accessibility_label = label;
					this.accessibility_description = description;
					nexacro.__setElementHandleAccessibilityEnable(handle, enable);
				}
				this.accessibility_enable = enable;
			}
			else {
				this.accessibility_role = role;
				this.accessibility_desclevel = desclevel;
				this.accessibility_label = label;
				this.accessibility_action = action;
				this.accessibility_description = description;
				this.accessibility_enable = enable;
			}
		};

		_pControlElementBase.notifyAccessibility = function (label, notifyevent) {
			var handle = this._handle;
			if (handle) {
				var readlabel = this._makeAccessibilityLabelbyReadtype(this);
				this.accessibility_readlabel = readlabel;
				nexacro.__notifyAccessibility(handle, label ? label : this.accessibility_readlabel, notifyevent ? notifyevent : "notify");
			}
		};

		_pControlElementBase._makeAccessibilityLabelbyReadtype = function () {
			var label = "";
			if (this.accessibility_desclevel != "none" && this.accessibility_desclevel != "child") {
				if ((nexacro._accessibilitydescreadtype & 0x01) == 0x01) {
					label = nexacro.AccessibilityUtil.getAccessibilityLabel(this);
				}
				if ((nexacro._accessibilitydescreadtype & 0x02) == 0x02 && this.accessibility_action) {
					label += " " + nexacro.AccessibilityUtil.getAccessibilityAction(this);
				}
				if ((nexacro._accessibilitydescreadtype & 0x04) == 0x04 && this.accessibility_description) {
					label += " " + nexacro.AccessibilityUtil.getAccessibilityDescription(this);
				}
				if (nexacro.AccessibilityUtil.getAccessibilityAdditionalLabel) {
					label += " " + nexacro.AccessibilityUtil.getAccessibilityAdditionalLabel(this);
				}
			}
			return label;
		};
		nexacro.SimpleControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pSimpleControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.SimpleControlElement);
		nexacro.SimpleControlElement.prototype = _pSimpleControlElement;

		_pSimpleControlElement._type_name = "SimpleControlElement";

		_pSimpleControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
				this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
				nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);
				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);

				if (this.border || this.bordertype) {
					this._setControlBorder(_handle, this.border, this.bordertype);
				}
				if (this.background) {
					this._setControlBackground(_handle, this.background, this.gradation);
				}

				if (this.opacity) {
					nexacro.__setElementHandleOpacity(_handle, this.opacity);
				}

				if (this._hittest_type) {
					nexacro.__setElementHittestValue(_handle, this._hittest_type);
				}

				if (this.mirror) {
					nexacro.__setElementHandleMirror(_handle, this.mirror);
				}

				this._refreshForeground(_handle);
			}
		};
		_pSimpleControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pSimpleControlElement._updateClientSize = function () {
			this.client_left = this._inner_left;
			this.client_top = this._inner_top;
			this.client_width = this._inner_width;
			this.client_height = this._inner_height;
		};

		_pSimpleControlElement.setElementPadding = function (padding) {
		};
		_pSimpleControlElement.setElementPaddingXY = function (left, top, right, bottom) {
		};

		_pSimpleControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_win_handle = child_elem.getRootWindowHandle();
						var new_win_handle = this.getRootWindowHandle();
						if (old_win_handle != new_win_handle) {
							child_elem._parent_elem = this;
							child_elem._destroyElementHandle();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}
				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this);
				}
			}
		};
		_pSimpleControlElement.removeChildElement = function (child_elem) {
			if (child_elem._owner_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pSimpleControlElement.moveToNextElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToNext(cur_elem._handle, target_elem._handle);
			}
		};
		_pSimpleControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToPrev(cur_elem._handle, target_elem._handle);
			}
		};
		_pSimpleControlElement.sendToBackElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleSendToBack(cur_elem._handle);
			}
		};
		_pSimpleControlElement.bringToFrontElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleBringToFront(cur_elem._handle);
			}
		};

		nexacro.ControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
		};

		var _pControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.ControlElement);
		nexacro.ControlElement.prototype = _pControlElement;
		_pControlElement._type_name = "ControlElement";

		_pControlElement.create = function (_window, _before_elem) {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _win_handle = _owner_elem.getRootWindowHandle();
					var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);
					this._handle = _handle;

					if (_before_elem) {
						nexacro.__insertElementHandle(_owner_elem._handle, _handle, _before_elem._handle);
					}
					else {
						nexacro.__appendElementHandle(_owner_elem._handle, _handle);
					}

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}

					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}

					if (this._rtldirection) {
						nexacro.__setElementHandleRtlDirection(_handle, this._rtldirection);
					}

					this._refreshForeground(_handle);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}

				if (_handle) {
					nexacro.__setElementHandleMirror(_handle, this.mirror);
				}
			}
		};
		_pControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.AccessibilityUtil.unsupportMobileApplicationAccessibility(this);
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;

				this._client_element.destroy();
				this._client_element = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};

		_pControlElement.getContainerElement = function () {
			return this._client_element;
		};
		_pControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var padding = this.padding;
			if (this.padding) {
				client_left += padding.left;
				client_top += padding.top;
				client_width -= (padding.left + padding.right);
				client_height -= (padding.top + padding.bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				client_left += this.padding_left;
				client_top += this.padding_top;
				client_width -= (this.padding_left + this.padding_right);
				client_height -= (this.padding_top + this.padding_bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;

					client_element.setElementSize(client_width, client_height);
				}
			}
			else {
				this.client_left = client_left;
				this.client_top = client_top;
				this.client_width = client_width;
				this.client_height = client_height;
			}
		};

		_pControlElement.getZoom = function () {
			if (this._zoomFactor) {
				return this._zoomFactor;
			}
			return 100;
		};

		_pControlElement.setZoom = function (zoomFactor) {
			var _handle = this._handle;
			if (_handle) {
				if (zoomFactor < 0) {
					zoomFactor = 0;
				}
				this._zoomFactor = zoomFactor;
				nexacro.__setElementHandleScale(_handle, zoomFactor);
			}
		};

		_pControlElement._changeDOMObjectVisibility = nexacro._emptyFn;

		_pControlElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			this._updateClientSize();
		};
		_pControlElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			this._updateClientSize();
		};

		_pControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_win_handle = child_elem.getRootWindowHandle();
						var new_win_handle = this._client_element.getRootWindowHandle();
						if (old_win_handle != new_win_handle) {
							child_elem._parent_elem = this;
							child_elem._destroyElementHandle();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this._client_element);
				}
			}
		};
		_pControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pControlElement.sendToBackElement = function (cur_elem) {
			this._client_element.sendToBackElement(cur_elem);
		};
		_pControlElement.bringToFrontElement = function (cur_elem) {
			this._client_element.bringToFrontElement(cur_elem);
		};
		_pControlElement.moveToNextElement = function (cur_elem, target_elem) {
			this._client_element.moveToNextElement(cur_elem, target_elem);
		};
		_pControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			this._client_element.moveToPrevElement(cur_elem, target_elem);
		};

		_pControlElementBase.saveToImage = function (fileName, fileType, compressOption) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__saveToImageFile(_handle, fileName, fileType, compressOption);
			}
		};
		_pControlElementBase.saveToImageFile = function (fileName, fileType, compressOption) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__saveToImageFile(_handle, fileName, fileType, compressOption);
			}
		};
		_pControlElementBase.saveToImageObject = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__saveToImageObject(_handle);
			}
		};

		nexacro.FrameControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;

			this._border_elems = new nexacro.Collection();
		};
		var _pFrameControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.FrameControlElement);
		nexacro.FrameControlElement.prototype = _pFrameControlElement;
		_pFrameControlElement._type_name = "FrameControlElement";

		_pFrameControlElement._title_control = null;
		_pFrameControlElement._menubar_control = null;
		_pFrameControlElement._status_control = null;
		_pFrameControlElement._title_height = 0;
		_pFrameControlElement._menu_height = 0;
		_pFrameControlElement._status_height = 0;
		_pFrameControlElement._title_top = 0;
		_pFrameControlElement._title_width = 0;
		_pFrameControlElement._menu_top = 0;
		_pFrameControlElement._menu_width = 0;
		_pFrameControlElement._status_top = 0;
		_pFrameControlElement._status_width = 0;

		_pFrameControlElement._resizable = false;

		_pFrameControlElement._win_handle = null;

		_pFrameControlElement.create = function () {
			if (!this._handle) {
				if (this._parent_elem == null) {
					var _win = this.linkedcontrol._getWindow();
					var _win_handle = this._win_handle = _win._handle;
					this._owner_elem = _win;
					this._is_window_element = true;
					this.left = 0;
					this.top = 0;
					this.width = _win.clientWidth;
					this.height = _win.clientHeight;

					var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					this.linkedcontrol._unique_id = this.linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);

					if (this.parent) {
						var left = this._adjustRtlLayoutLeft(this.left, this.width);
					}
					nexacro.__setElementHandlePosition(_handle, left, this.top);

					this._handle = _handle;
					nexacro.__appendElementHandle(this._owner_elem._handle, _handle);

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}

					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}

					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);

					this._client_element.create();
				}
				else {
					var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement();
					if (_owner_elem && _owner_elem._handle && !this._handle) {
						this._owner_elem = _owner_elem;
						var _win_handle = _owner_elem.getRootWindowHandle();
						var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
						this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
						nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);

						if (this.parent) {
							var left = this._adjustRtlLayoutLeft(this.left, this.width);
						}
						nexacro.__setElementHandlePosition(_handle, left, this.top);

						this._handle = _handle;
						nexacro.__appendElementHandle(_owner_elem._handle, _handle);

						if (this.border || this.bordertype) {
							this._setControlBorder(_handle, this.border, this.bordertype);
						}
						if (this.background) {
							this._setControlBackground(_handle, this.background, this.gradation);
						}

						if (this.opacity) {
							nexacro.__setElementHandleOpacity(_handle, this.opacity);
						}

						if (this._hittest_type) {
							nexacro.__setElementHittestValue(_handle, this._hittest_type);
						}
						this._refreshForeground(_handle);

						if (this._client_element) {
							this._client_element.create();
						}
					}
				}

				if (this._resizable) {
					this._createBorderElements();
					this._updateBorderElementsPosition();
				}
			}
			else {
			}
		};

		_pFrameControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._win_handle = null;
				this._handle = null;

				this._destroyBorderElements();

				if (this._client_element) {
					this._client_element.destroy();
				}
				this._client_element = null;
				this._title_control = null;
				this._menubar_control = null;
				this._status_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pFrameControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};



		_pFrameControlElement.getContainerElement = function () {
			return this._client_element;
		};

		_pFrameControlElement.getRootWindowHandle = function () {
			if (this._is_window_element) {
				return this._win_handle;
			}
			else if (this._owner_elem) {
				return this._owner_elem.getRootWindowHandle();
			}
			else if (this._parent && this._parent.getRootWindowHandle) {
				return this._parent.getRootWindowHandle();
			}
			return null;
		};

		_pFrameControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var title_control = this._title_control;
			if (title_control) {
				if (!this._is_verticalmin && (this.client_left != client_left || this._title_top != client_top || this._title_width != client_width)) {
					this._title_top = client_top;
					this._title_width = client_width;
					title_control.move(client_left, client_top, client_width, this._title_height);
				}
				else if (this._is_verticalmin && (this.client_left != client_left || this._title_top != client_top || this._title_width != client_width)) {
					this._title_top = client_top;
					this._title_width = client_width;
					title_control.move(client_left, client_top, client_width, client_height);
				}
				if (this._is_verticalmin != true) {
					client_top += this._title_height;
					client_height -= this._title_height;
					if (client_height < 0) {
						client_height = 0;
					}
				}
				else {
					client_left += this._title_width;
					client_width -= this._title_width;
					if (client_width < 0) {
						client_width = 0;
					}
				}
			}
			else {
				this._title_top = client_top;
			}

			var menubar_control = this._menubar_control;
			if (menubar_control) {
				var menu_top = client_top;
				if (this.client_left != client_left || this._menu_top != client_top || this._menu_width != client_width) {
					this._menu_top = client_top;
					this._menu_width = client_width;
					menubar_control.move(client_left, client_top, client_width, this._menu_height);
				}
				client_top += this._menu_height;
				client_height -= this._menu_height;
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else {
				this._menu_top = client_top;
			}


			var status_control = this._status_control;
			if (status_control) {
				if (this._status_height > 0) {
					client_height -= this._status_height;
					if (client_height < 0) {
						client_height = 0;
					}
				}
				var status_top = client_top + client_height;
				if (this.client_left != client_left || this._status_top != status_top || this._status_width != client_width) {
					this._status_top = status_top;
					this._status_width = client_width;
					status_control.move(client_left, status_top, client_width, this._status_height);
				}
			}
			else {
				this._status_top = client_top + client_height;
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}

			this.client_left = client_left;
			this.client_top = client_top;
			this.client_width = client_width;
			this.client_height = client_height;

			this._updateBorderElementsPosition();
		};


		_pFrameControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (!this._client_element) {
					return;
				}

				if (child_elem._parent_elem == this._client_element) {
					child_elem._is_nc_element = true;
				}
				else {
					if (child_elem._handle) {
						if (child_elem._doc != this._doc) {
							child_elem._parent_elem = this._client_element;
							child_elem._destroyDOMHandle();
						}
						else {
							child_elem._parent_elem = this._client_element;
						}
					}
					else {
						child_elem._parent_elem = this._client_element;
					}
				}

				child_elem._is_nc_element = true;

				child_elem.setElementPosition(0, 0);
				child_elem.setElementSize(this.client_width, this.client_height);
				if (this.font) {
					child_elem.setElementFont(this.font);
				}
				if (this.color) {
					child_elem.setElementColor(this.color);
				}
				if (this.align) {
					child_elem.setElementAlign(this.align);
				}
				else if (this.halign || this.valign) {
					child_elem.setElementAlignXY(this.halign, this.valign);
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this._client_element);
				}
			}
		};
		_pFrameControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pFrameControlElement.sendToBackElement = function (target_elem) {
			if (target_elem && target_elem._owner_elem && 
				target_elem._owner_elem._owner_elem == this && target_elem._handle) {
				nexacro.__setElementHandleSendToBack(target_elem._handle);
				if (target_elem._border_elems) {
					for (var i = 0; i < target_elem._border_elems.length; i++) {
						nexacro.__setElementHandleSendToBack(target_elem._border_elems[i]._handle);
					}
				}
			}
		};
		_pFrameControlElement.bringToFrontElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem && 
				cur_elem._owner_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleBringToFront(cur_elem._handle);
				if (cur_elem._border_elems) {
					for (var i = 0; i < cur_elem._border_elems.length; i++) {
						nexacro.__setElementHandleBringToFront(cur_elem._border_elems[i]._handle);
					}
				}
			}
		};

		_pFrameControlElement.moveToNextElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToNextElement(cur_elem, target_elem);
		};

		_pFrameControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToPrevElement(cur_elem, target_elem);
		};

		_pFrameControlElement.setTitleBarControl = function (title_control, title_height) {
			if (this._title_control != title_control) {
				if (title_control) {
					title_control._is_nc_control = true;
					this._title_control = title_control;
					this._title_height = parseInt(title_height) | 0;
					this._title_width = 0;
				}
				else {
					this._title_control = null;
					this._title_height = 0;
					this._title_width = 0;
				}
				this._updateClientSize();
			}
			else if (title_control) {
				this._title_height = parseInt(title_height) | 0;
				this._title_width = 0;
				this._updateClientSize();
			}
		};
		_pFrameControlElement.setStatusBarControl = function (status_control, status_height) {
			if (this._status_control != status_control) {
				if (status_control) {
					status_control._is_nc_control = true;
					this._status_control = status_control;
					this._status_height = parseInt(status_height) | 0;
					this._status_width = 0;
				}
				else {
					this._status_control = null;
					this._status_height = 0;
					this._status_width = 0;
				}
				this._updateClientSize();
			}
			else if (status_control) {
				this._status_height = parseInt(menu_height) | 0;
				this._status_width = 0;
				this._updateClientSize();
			}
		};

		_pFrameControlElement._createBorderElements = function () {
			var parent_elem = this._parent_elem;
			if (this._border_elems.length > 0) {
				return;
			}

			var name_table = Array("lt", "t", "rt", "l", "r", "lb", "b", "rb");
			for (var i = 0; i < 8; i++) {
				var border_elem = new nexacro.FrameResizeBorderElement(parent_elem);
				this._border_elems.add_item(name_table[i], border_elem);
			}

			for (var i = 0; i < 8; i++) {
				var border_elem = this._border_elems[i];
				border_elem.linkedcontrol = this.linkedcontrol;
				border_elem.create();
			}

			this._setResizable(this._resizable);
		};

		_pFrameControlElement._destroyBorderElements = function () {
			for (var i = 0; i < this._border_elems.length; i++) {
				this._border_elems[i].destroy();
				this._border_elems[i] = null;
			}
		};

		_pFrameControlElement.setElementPosition = function (x, y) {
			nexacro.ControlElementBase.prototype.setElementPosition.call(this, x, y);
			this._updateBorderElementsPosition();
		};
		_pFrameControlElement.setElementSize = function (w, h) {
			nexacro.ControlElementBase.prototype.setElementSize.call(this, w, h);
			this._updateBorderElementsPosition();

			if (this._is_window_element) {
				var border = this.border;
				var bordertype = this.bordertype;
				var win = this.linkedcontrol._getWindow();
				var win_handle = win._handle;

				nexacro.__updateWindowHandleRegion(win_handle, border ? border._getBorderLeftWidth() : 0, border ? border._getBorderTopWidth() : 0, border ? border._getBorderRightWidth() : 0, border ? border._getBorderBottomWidth() : 0, bordertype ? bordertype.type : "normal", bordertype ? bordertype.radiusx : 0, bordertype ? bordertype.radiusy : 0, bordertype ? bordertype.lefttop : true, bordertype ? bordertype.righttop : true, bordertype ? bordertype.leftbottom : true, bordertype ? bordertype.rightbottom : true, w, h);
			}
		};

		_pFrameControlElement._updateBorderElementsPosition = function () {
			if (this._border_elems.length == 0) {
				return;
			}

			var border = this.border;
			var lw, tw, rw, bw;
			if (border) {
				if (border._linecnt == 1) {
					lw = tw = rw = bw = border._getBorderLeftWidth();
				}
				else {
					lw = border._getBorderLeftWidth();
					tw = border._getBorderTopWidth();
					rw = border._getBorderRightWidth();
					bw = border._getBorderBottomWidth();
				}
			}
			else {
				lw = tw = rw = bw = 0;
			}

			var inner_width = this._inner_width;
			var inner_height = this._inner_height;

			if (lw < 5) {
				var lx = 5 - lw;
				lw += lx;
				inner_width -= lx;
			}
			if (tw < 5) {
				var tx = 5 - tw;
				tw += tx;
				inner_height -= tx;
			}
			if (rw < 5) {
				var rx = 5 - rw;
				rw += rx;
				inner_width -= rx;
			}
			if (bw < 5) {
				var bx = 5 - bw;
				bw += bx;
				inner_height -= bx;
			}

			var left = this.left;
			var top = this.top;
			var right = left + this.width;
			var bottom = top + this.height;

			var x = left;
			var y = top;
			for (var i = 0; i < 8; i++) {
				this._border_elems[i].setElementPosition(x, y);
				switch (i) {
					case 0:
						x += lw;
						break;
					case 1:
						x += inner_width;
						break;
					case 2:
						x = left;
						y += tw;
						break;
					case 3:
						x += (lw + inner_width);
						break;
					case 4:
						x = left;
						y += inner_height;
						break;
					case 5:
						x += lw;
						break;
					case 6:
						x += inner_width;
						break;
					case 7:
						break;
				}
			}

			for (var i = 0; i < 8; i++) {
				if (i == 0 || i == 3 || i == 5) {
					x = lw;
				}
				if (i == 1 || i == 6) {
					x = inner_width;
				}
				if (i == 2 || i == 4 || i == 7) {
					x = rw;
				}
				if (i < 3) {
					y = tw;
				}
				else if (i < 5) {
					y = inner_height;
				}
				else {
					y = bw;
				}

				this._border_elems[i].setElementSize(x, y);
			}
		};

		_pFrameControlElement._setResizable = function (resizable) {
			this._resizable = resizable;
			if (this._handle) {
				if (this._border_elems.length == 0) {
					if (resizable) {
						this._createBorderElements();
						this._updateBorderElementsPosition();
					}
					else {
						return;
					}
				}

				var is_apply;
				if (nexacro.System.navigatorname == "nexacro") {
					is_apply = (this._is_window_element && resizable);
				}
				else {
					is_apply = (this._is_window_element && resizable);
					if (this._getWindowHandle() == nexacro._getMainWindowHandle()) {
						is_apply = false;
					}
				}

				var cursor_table = Array("nw", "n", "ne", "w", "e", "sw", "s", "se");
				var hittest_table = Array("topleft", "top", "topright", "left", "right", "bottomleft", "bottom", "bottomright");
				for (var i = 0; i < 8; i++) {
					var border_elem = this._border_elems[i];
					border_elem._is_track = resizable;

					var cursor;
					if (resizable) {
						cursor = new nexacro.Style_value(cursor_table[i] + "-resize");
					}
					else {
						cursor = new nexacro.Style_value("arrow");
					}

					if (is_apply) {
						border_elem.setElementHittestType("resizingborder_" + hittest_table[i]);
					}
					else {
						border_elem.setElementHittestType("fixedborder");
					}

					border_elem.setElementCursor(cursor);
				}
			}

			if (this._status_control) {
				this._status_control._setResizable(resizable);
			}
		};

		nexacro.FrameResizeBorderElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pFrameResizeBorderElement = nexacro._createPrototype(nexacro.SimpleControlElement, nexacro.FrameResizeBorderElement);
		nexacro.FrameResizeBorderElement.prototype = _pFrameResizeBorderElement;

		_pFrameResizeBorderElement._type_name = "FrameResizeBorderElement";

		_pFrameResizeBorderElement._win_handle = null;

		_pFrameResizeBorderElement.create = function () {
			var _owner_elem;
			var _win_handle;
			if (this._parent_elem == null) {
				var _win = this.linkedcontrol._getWindow();
				_owner_elem = _win;
				_win_handle = this._win_handle = _win._handle;
				this.left = 0;
				this.top = 0;
				this.width = 0;
				this.height = 0;
			}
			else {
				_owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement();
				_win_handle = _owner_elem.getRootWindowHandle();
			}

			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
				_handle._linked_element = this;

				var handle_style = _handle.style;

				this._handle = this._dest_handle = _handle;
				nexacro.__appendElementHandle(this._owner_elem._handle, _handle);

				if (this.border || this.bordertype) {
					this._setControlBorder(_handle, this.border, this.bordertype);
				}
				if (this.background) {
					this._setControlBackground(_handle, this.background, this.gradation);
				}
				if (this.opacity) {
					nexacro.__setElementHandleOpacity(_handle, this.opacity);
				}
				if (this._hittest_type) {
					nexacro.__setElementHittestValue(_handle, this._hittest_type);
				}

				this._refreshForeground(_handle);

				if (this._client_element) {
					this._client_element.create();
				}
			}
		};

		_pFrameResizeBorderElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._win_handle = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pFrameResizeBorderElement.getRootWindowHandle = function () {
			if (this._is_window_element) {
				return this._win_handle;
			}
			else if (this._owner_elem) {
				return this._owner_elem.getRootWindowHandle();
			}
			return null;
		};

		_pFrameResizeBorderElement._on_starttrack = function () {
			this.linkedcontrol._on_border_starttrack(this.cursor);
		};
		_pFrameResizeBorderElement._on_endtrack = function (x, y, dragdata) {
			this.linkedcontrol._on_border_endtrack(x, y, dragdata);
		};
		_pFrameResizeBorderElement._on_movetrack = function (x, y, dragdata) {
			this.linkedcontrol._on_border_movetrack(x, y, dragdata);
		};

		delete _pFrameResizeBorderElement;

		nexacro.ModalOverlayElement = function (parent_elem) {
			this._parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pModalOverlayElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.ModalOverlayElement);
		nexacro.ModalOverlayElement.prototype = _pModalOverlayElement;
		_pModalOverlayElement._type_name = "ModalOverlayElement";

		_pModalOverlayElement.create = function (zindex, color, ref_dest_handle) {
			if (this._parent_elem && !this._handle) {
				var _win = this.linkedcontrol._getWindow();
				this._win_handle = _win._handle;

				this.left = 0;
				this.top = 0;
				this.width = _win.clientWidth;
				this.height = _win.clientHeight;

				var _handle = this._handle = this._dest_handle = nexacro.__createControlElementHandle(this, this._win_handle, this.left, this.top, this.width, this.height);
				_handle._linked_element = this;

				var handle_style = _handle.style;
				nexacro.__setElementHandleZindex(_handle, zindex);
				this.setElementColor(color);

				var _win = this.linkedcontrol._getWindow();
				var _owner_elem = _win;

				if (ref_dest_handle) {
					nexacro.__insertElementHandle(_owner_elem._handle, _handle, ref_dest_handle);
				}
				else {
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);
				}

				this._refreshForeground(_handle);
			}
		};

		_pModalOverlayElement.destroy = function () {
			if (!this._handle) {
				return;
			}

			var _win = this.linkedcontrol._getWindow();
			var _owner_elem = _win;

			nexacro.__destroyElementHandle(_owner_elem._handle, this._handle);
			this._handle = null;
		};

		_pModalOverlayElement.setElementColor = function (color) {
			nexacro.__setElementHandleBackgroundColor(this._handle, color ? color._syscolor : 0);
		};

		_pModalOverlayElement.getContainerElement = function () {
			return this;
		};

		_pModalOverlayElement.getRootWindowHandle = function () {
			return this._win_handle;
		};

		delete _pModalOverlayElement;

		nexacro.ScrollableControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ScrollableContainerElement(this);
			this._client_element = client_element;
		};
		var _pScrollableControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.ScrollableControlElement);
		nexacro.ScrollableControlElement.prototype = _pScrollableControlElement;
		_pScrollableControlElement._type_name = "ScrollableControlElement";

		_pScrollableControlElement._zoomFactor = 100;
		_pScrollableControlElement.scroll_left = 0;
		_pScrollableControlElement.scroll_top = 0;
		_pScrollableControlElement.container_maxwidth = 0;
		_pScrollableControlElement.container_maxheight = 0;
		_pScrollableControlElement._hscroll_visible = false;
		_pScrollableControlElement._vscroll_visible = false;
		_pScrollableControlElement._hscroll_height = 0;
		_pScrollableControlElement._vscroll_width = 0;
		_pScrollableControlElement._hscroll_left = 0;
		_pScrollableControlElement._hscroll_top = 0;
		_pScrollableControlElement._hscroll_width = 0;
		_pScrollableControlElement._vscroll_left = 0;
		_pScrollableControlElement._vscroll_top = 0;
		_pScrollableControlElement._vscroll_height = 0;
		_pScrollableControlElement.hscroll_limit = 0;
		_pScrollableControlElement.vscroll_limit = 0;
		_pScrollableControlElement._scroll_showtype = -1;
		_pScrollableControlElement._scrollview_width_top = 0;
		_pScrollableControlElement._step_count = 0;
		_pScrollableControlElement._step_index = -1;

		_pScrollableControlElement._init_left = 0;
		_pScrollableControlElement._init_top = 0;
		_pScrollableControlElement._init_width = 0;
		_pScrollableControlElement._init_height = 0;

		_pScrollableControlElement._hscroll_control = null;
		_pScrollableControlElement._vscroll_control = null;
		_pScrollableControlElement._resizebutton_element = null;
		_pScrollableControlElement._step_containers = null;
		_pScrollableControlElement._scroll_overlap = false;

		_pScrollableControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _win_handle = _owner_elem.getRootWindowHandle();
					var _handle = nexacro.__createScrollableControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);
					this._handle = _handle;
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);

					if (this._init_width > 0 || this._init_height > 0) {
						nexacro.__setElementHandleInitPosSize(_handle, this._init_left, this._init_top, this._init_width, this._init_height);
					}

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}
					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}

				if (this._handle) {
					var step_count = this._step_count;
					if (step_count > 0) {
						this._step_containers = [];
						for (var i = 0; i < step_count; i++) {
							var step_client = new nexacro.ContainerElement(this._client_element);
							step_client.setElementPosition(i * this.client_width, 0);
							step_client.setElementSize(this.client_width, this.client_height);
							step_client.create();
							this._step_containers.push(step_client);
						}

						if (this._scroll_showtype >= 0) {
							this._updateClientSize();
						}
					}
				}
			}
		};
		_pScrollableControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;

				this._client_element.destroy();

				var step_containers = this._step_containers;
				if (step_containers) {
					var step_count = step_containers.length;
					for (var i = 0; i < step_count; i++) {
						var step_client = step_containers[i];
						step_client.destroy();
					}
					this._step_containers = null;
				}

				this._hscroll_control = null;
				this._vscroll_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pScrollableControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();

				var step_containers = this._step_containers;
				if (step_containers) {
					var step_count = step_containers.length;
					for (var i = 0; i < step_count; i++) {
						var step_client = step_containers[i];
						step_client.destroy();
					}
					this._step_containers = null;
				}
			}
		};

		_pScrollableControlElement.getContainerElement = function (position_step) {
			var step_count = this._step_count;
			var step_index = this._step_index;
			var step_containers = this._step_containers;
			if (step_count > 0 && step_containers && step_count > position_step) {
				if (position_step < 0 || position_step == null) {
					position_step = (step_index > -1 ? step_index : 0);
				}

				return step_containers[position_step];
			}
			else {
				return this._client_element;
			}
		};
		_pScrollableControlElement.setElementStepCount = function (count) {
			if (this._step_count != count) {
				var step_count = this._step_count;
				var step_containers = this._step_containers;
				if (step_containers && this._step_count) {
					for (var i = 0; i < step_count; i++) {
						var step_client = step_containers[i];
						step_client.destroy(true);
					}
					this._step_containers = null;
				}

				this._step_count = count;

				if (this._handle && count > 0) {
					this._step_containers = [];
					for (var i = 0; i < count; i++) {
						var step_client = new nexacro.ContainerElement(this._client_element);
						step_client.setElementPosition(i * this.client_width, 0);
						step_client.setElementSize(this.client_width, this.client_height);
						step_client.create();
						this._step_containers.push(step_client);
					}
				}

				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}
			}
		};

		_pScrollableControlElement.setElementStepIndex = function (index) {
			if (this._step_index != index) {
				if (this._step_count > 0) {
					if (index > -1 && this._step_count > index) {
						this._step_index = index;
					}
				}
				else {
					this._step_index = index;
				}
			}
		};

		_pScrollableControlElement.getZoom = function () {
			return this._zoomFactor;
		};
		_pScrollableControlElement.setZoom = function (zoomFactor) {
			var _handle = this._handle;
			if (_handle) {
				if (zoomFactor < 0) {
					zoomFactor = 0;
				}
				this._zoomFactor = zoomFactor;
				var client = this.getContainerElement();
				nexacro.__setElementHandleScale(client._handle, this._zoomFactor);
				this._updateClientSize();
			}
		};

		_pScrollableControlElement.setElementRtlDirection = function (rtldirection) {
			nexacro.Element.prototype.setElementRtlDirection.call(this, rtldirection);

			var step_count = this._step_count;
			var step_containers = this._step_containers;
			if (step_containers && this._step_count) {
				this.container_maxwidth = step_count * this.client_width;
				for (var i = 0; i < step_count; i++) {
					var step_client = step_containers[i];
					step_client.setElementPosition(i * this.client_width, 0, true);
				}

				this._client_element.setElementHScrollPos(this.client_width * this._step_index, true);
			}
			else if (this.parent instanceof nexacro.TextArea) {
			}
			else {
				this._client_element.setElementHScrollPos(this._client_element._scroll_left, true);
			}
		};


		_pScrollableControlElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			this._updateClientSize();
		};

		_pScrollableControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var padding = this.padding;
			if (padding) {
				client_left += padding.left;
				client_top += padding.top;
				client_width -= (padding.left + padding.right);
				client_height -= (padding.top + padding.bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				client_left += this.padding_left;
				client_top += this.padding_top;
				client_width -= (this.padding_left + this.padding_right);
				client_height -= (this.padding_top + this.padding_bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}

			var client_element = this._client_element;
			if (!client_element || client_width == 0 || client_height == 0) {
				return;
			}

			var zoomFactor = this._zoomFactor / 100;
			var scroll_showtype = this._scroll_showtype;
			var hscroll_hidden = false;

			var zclient_width = client_width / zoomFactor;
			var zclient_height = client_height / zoomFactor;

			var container_maxwidth = this.container_maxwidth;
			var container_maxheight = this.container_maxheight;

			var vscroll_control = this._vscroll_control;
			var hscroll_control = this._hscroll_control;
			var vscroll_width = this._vscroll_width;

			var step_count = this._step_count;
			var step_index = this._step_index;
			var step_containers = this._step_containers;
			if (step_count > 0 && step_containers) {
				hscroll_hidden = true;
			}

			if (scroll_showtype > 0) {
				var hscroll_visible = false;
				var vscroll_visible = false;
				var hscroll_limit = 0;
				var vscroll_limit = 0;

				if (scroll_showtype == 1) {
					if (vscroll_control && container_maxheight > zclient_height) {
						vscroll_visible = true;
						client_width -= vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = container_maxheight - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (hscroll_control && container_maxwidth > zclient_width) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						if (vscroll_control && container_maxheight > zclient_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= vscroll_width;
								zclient_width = client_width / zoomFactor;
							}
							vscroll_limit = container_maxheight - zclient_height;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				else if (scroll_showtype == 2) {
					if (vscroll_control) {
						vscroll_visible = true;
						client_width -= vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = this.container_maxheight + this._hscroll_height - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				else if (scroll_showtype == 31) {
					if (vscroll_control) {
						vscroll_visible = true;
						client_width -= vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = this.container_maxheight - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (hscroll_control && container_maxwidth > zclient_width) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						if (vscroll_control && this.container_maxheight > zclient_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= vscroll_width;
								zclient_width = client_width / zoomFactor;
							}
							vscroll_limit = this.container_maxheight - zclient_height;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				else if (scroll_showtype == 32) {
					if (vscroll_control && this.container_maxheight > zclient_height) {
						vscroll_visible = true;
						client_width -= vscroll_width;
						zclient_width = client_width / zoomFactor;
						vscroll_limit = this.container_maxheight + this._hscroll_height - zclient_height;
					}
					if (step_count > 0 && step_containers) {
						container_maxwidth = step_count * zclient_width;
					}
					if (hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
							zclient_height = client_height / zoomFactor;
						}
						hscroll_limit = container_maxwidth - zclient_width;
					}
				}
				this.container_maxwidth = container_maxwidth;

				var reset_vlimit = false;
				var reset_hlimit = false;
				if (this.hscroll_limit != hscroll_limit) {
					reset_hlimit = true;
					this.hscroll_limit = hscroll_limit;
				}
				if (this.vscroll_limit != vscroll_limit) {
					reset_vlimit = true;
					this.vscroll_limit = vscroll_limit;
				}

				var reset_vscroll = false;
				var reset_hscroll = false;
				var reset_vscroll_enable = false;
				var reset_hscroll_enable = false;

				if (this.scroll_top > vscroll_limit) {
					reset_vscroll = true;
					this.scroll_top = (vscroll_limit > 0) ? vscroll_limit : 0;
				}
				if (this.scroll_left > hscroll_limit) {
					reset_hscroll = true;
					this.scroll_left = (hscroll_limit > 0) ? hscroll_limit : 0;
				}

				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}

				if (this.client_width != zclient_width || this.client_height != zclient_height || 
					client_element.width != zclient_width || client_element.height != zclient_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);

					if (step_count > 0 && step_containers) {
						for (var i = 0; i < step_count; i++) {
							var step_client_element = step_containers[i];
							step_client_element.setElementPosition(zclient_width * i, 0);
							step_client_element.setElementSize(client_width, client_height);
						}

						var step_scroll_left = client_width * step_index;
						if (this.scroll_left != step_scroll_left) {
							reset_hscroll = true;
							this.scroll_left = step_scroll_left;
						}
					}
				}
				if (reset_hscroll) {
					client_element.setElementHScrollPos(this.scroll_left, true);
				}
				if (reset_vscroll) {
					client_element.setElementVScrollPos(this.scroll_top);
				}

				if (vscroll_control) {
					if (vscroll_control.parent.enable != vscroll_control.enable) {
						reset_vscroll_enable = true;
					}

					if (vscroll_visible) {
						if (!this._vscroll_visible) {
							this._vscroll_visible = true;
							vscroll_control.set_visible(true);
						}

						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;
							vscroll_control._setScrollInfo(this._vscroll_left, client_top, vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, client_height, client_height, this.vscroll_limit > 0 ? true : false, this.scroll_top);
						}
						else if (reset_vscroll) {
							vscroll_control._setScrollPos(this.scroll_top);
						}

						if (reset_vscroll_enable) {
							vscroll_control._setEnable(vscroll_control.parent.enable);
						}
					}
					else {
						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;

							vscroll_control._setScrollInfo(this._vscroll_left - this._vscroll_width, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, zclient_height, zclient_height, false, this.scroll_top);
						}
						else if (reset_vscroll) {
							vscroll_control._setScrollPos(this.scroll_top);
						}

						if (reset_vscroll_enable) {
							vscroll_control._setEnable(vscroll_control.parent.enable);
						}

						if (this._vscroll_visible) {
							this._vscroll_visible = false;
							vscroll_control.set_visible(false);
						}
					}
				}
				if (hscroll_control) {
					if (hscroll_control.parent.enable != hscroll_control.enable) {
						reset_hscroll_enable = true;
					}

					if (hscroll_visible) {
						if (!this._hscroll_visible) {
							this._hscroll_visible = true;
							hscroll_control.set_visible(true);
						}

						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;
							hscroll_control._setScrollInfo(client_left, this._hscroll_top, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, zclient_width, zclient_width, this.hscroll_limit > 0 ? true : false, this.scroll_left);
						}
						else if (reset_hscroll) {
							hscroll_control._setScrollPos(this.scroll_left);
						}

						if (reset_hscroll_enable) {
							hscroll_control._setEnable(hscroll_control.parent.enable);
						}
					}
					else {
						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;

							hscroll_control._setScrollInfo(client_left, this._hscroll_top - this._hscroll_height, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, zclient_width, zclient_width, false, this.scroll_left);
						}
						else if (reset_hscroll) {
							hscroll_control._setScrollPos(this.scroll_left);
						}

						if (reset_hscroll_enable) {
							hscroll_control._setEnable(hscroll_control.parent.enable);
						}

						if (this._hscroll_visible) {
							this._hscroll_visible = false;
							hscroll_control.set_visible(false);
						}
					}
				}
			}
			else {
				if (step_count > 0 && step_containers) {
					container_maxwidth = step_count * this.client_width * zoomFactor / 100;

					var hscroll_limit = 0;
					if (container_maxwidth > client_width) {
						hscroll_limit = container_maxwidth - client_width;
					}

					if (this.hscroll_limit != hscroll_limit) {
						this.hscroll_limit = hscroll_limit;
					}
				}

				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}

				if (this.client_width != zclient_width || this.client_height != zclient_height || 
					client_element.width != zclient_width || client_element.height != zclient_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);

					if (step_count > 0 && step_containers && step_count > step_index) {
						for (var i = 0; i < step_count; i++) {
							var step_client_element = step_containers[i];
							step_client_element.setElementPosition(zclient_width * i, 0);
							step_client_element.setElementSize(client_width, client_height);
						}
					}
				}
			}
		};


		_pScrollableControlElement.appendChildElement = function (child_elem, set_ref) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_win_handle = child_elem.getRootWindowHandle();
						var new_win_handle = this._client_element.getRootWindowHandle();
						if (old_win_handle != new_win_handle) {
							child_elem._parent_elem = this;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					var client_element = this.getContainerElement(child_elem.position_step);
					if (set_ref === true) {
						if (child_elem._handle && client_element._handle && child_elem._owner_elem == null) {
							child_elem._owner_elem = client_element;
							nexacro.__appendElementHandle(client_element._handle, child_elem._handle, child_elem);
						}
					}
					else {
						child_elem._appendToContainer(client_element);
					}
				}
			}
		};
		_pScrollableControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pScrollableControlElement.sendToBackElement = function (cur_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.sendToBackElement(cur_elem);
		};
		_pScrollableControlElement.bringToFrontElement = function (cur_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.bringToFrontElement(cur_elem);
		};
		_pScrollableControlElement.moveToNextElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToNextElement(cur_elem, target_elem);
		};
		_pScrollableControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			var client_element = this.getContainerElement(cur_elem.position_step);
			client_element.moveToPrevElement(cur_elem, target_elem);
		};
		_pScrollableControlElement.bringToFrontUseZIndex = function () {
			var parent = this._parent_elem;
			if (parent) {
				if (!this.visible) {
					this.setElementVisible(true);
				}
				parent.bringToFrontElement(this);
			}
		};
		_pScrollableControlElement.sendToBackUseZIndex = function () {
			var parent = this._parent_elem;
			if (parent) {
				if (!this.visible) {
					this.setElementVisible(true);
				}
				parent.sendToBackElement(this);
			}
		};

		_pScrollableControlElement.setScrollControls = function (hscroll_control, vscroll_control, hscroll_height, vscroll_width, scroll_showtype) {
			var recalc = false;
			if (this._scroll_showtype != scroll_showtype) {
				this._scroll_showtype = scroll_showtype;
				recalc = true;
			}

			if (this._hscroll_control != hscroll_control) {
				if (hscroll_control) {
					this._hscroll_visible = true;
					hscroll_control._is_nc_control = true;
					this._hscroll_control = hscroll_control;
					if (this._hscroll_height != hscroll_height) {
						this._hscroll_height = hscroll_height;
						recalc = true;
					}
				}
				else {
					this._hscroll_control = null;
					if (this._hscroll_height) {
						this._hscroll_height = 0;
						recalc = true;
					}
					this._hscroll_left = 0;
					this._hscroll_top = 0;
					this._hscroll_width = 0;
				}
			}

			if (this._vscroll_control != vscroll_control) {
				if (vscroll_control) {
					this._vscroll_visible = true;
					vscroll_control._is_nc_control = true;
					this._vscroll_control = vscroll_control;
					if (this._vscroll_width != vscroll_width) {
						this._vscroll_width = vscroll_width;
						recalc = true;
					}
				}
				else {
					this._vscroll_control = null;
					if (this._vscroll_width) {
						this._vscroll_width = 0;
						recalc = true;
					}
					this._vscroll_left = 0;
					this._vscroll_top = 0;
					this._vscroll_height = 0;
				}
			}

			if (recalc) {
				this._updateClientSize();
			}
		};

		_pScrollableControlElement.setElementHScrollPos = function (hpos, bForce) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (hpos > this.hscroll_limit) {
				hpos = this.hscroll_limit;
			}

			if (this.scroll_left != hpos || bForce) {
				this.scroll_left = hpos;
				if (this._client_element) {
					this._client_element.setElementHScrollPos(hpos, bForce);
				}
				if (this._hscroll_control) {
					this._hscroll_control._setScrollPos(this.scroll_left);
				}
				if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
					this._refreshForeground(this._handle);
				}
			}
		};

		_pScrollableControlElement.setElementVScrollPos = function (vpos) {
			if (vpos < 0) {
				vpos = 0;
			}
			if (vpos > this.vscroll_limit) {
				vpos = this.vscroll_limit;
			}
			if (this.scroll_top != vpos) {
				this.scroll_top = vpos;
				if (this._client_element) {
					this._client_element.setElementVScrollPos(vpos);
				}
				if (this._vscroll_control) {
					this._vscroll_control._setScrollPos(this.scroll_top);
				}
				if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
					this._refreshForeground(this._handle);
				}
			}
		};

		_pScrollableControlElement.setElementScrollPos = function (hpos, vpos) {
			if (hpos < 0) {
				hpos = 0;
			}
			if (vpos < 0) {
				vpos = 0;
			}
			if (hpos > this.hscroll_limit) {
				hpos = this.hscroll_limit;
			}
			if (vpos > this.vscroll_limit) {
				vpos = this.vscroll_limit;
			}

			if (this.scroll_left != hpos || this.scroll_top != vpos) {
				this.scroll_left = hpos;
				this.scroll_top = vpos;
				if (this._client_element) {
					this._client_element.setElementScrollPos(hpos, vpos);
				}
				if (this._hscroll_control) {
					this._hscroll_control._setScrollPos(this.scroll_left);
				}
				if (this._vscroll_control) {
					this._vscroll_control._setScrollPos(this.scroll_top);
				}
				if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
					this._refreshForeground(this._handle);
				}
			}
		};

		_pScrollableControlElement.setElementScrollMaxSize = function (width, height) {
			if (this.container_maxwidth != width || this.container_maxheight != height) {
				this.container_maxwidth = width;
				this.container_maxheight = height;
				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}

				var client_element = this._client_element;
				if (client_element && client_element._handle) {
					nexacro.__setElementHandleMaxSize(client_element._handle, width, height);
				}

				return true;
			}
			return false;
		};

		_pScrollableControlElement.setElementScrollbarSize = function (width, height) {
			if (this._vscroll_width != width || this._hscroll_height != height) {
				this._vscroll_width = width;
				this._hscroll_height = height;
				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}

				return true;
			}
			return false;
		};

		_pScrollableControlElement.setElementInitPosSize = function (init_left, init_top, init_width, init_height) {
			this._init_left = init_left;
			this._init_top = init_top;
			this._init_width = init_width;
			this._init_height = init_height;

			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleInitPosSize(_handle, left, top, init_width, init_height);
			}
		};

		delete _pControlElementBase;
		delete _pSimpleControlElement;
		delete _pControlElement;
		delete _pFrameControlElement;
		delete _pScrollableControlElement;


		nexacro.ContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pContainerElement = nexacro._createPrototype(nexacro.Element, nexacro.ContainerElement);
		nexacro.ContainerElement.prototype = _pContainerElement;
		_pContainerElement._type_name = "ContainerElement";

		_pContainerElement.font = null;
		_pContainerElement.color = null;
		_pContainerElement._is_nc_element = true;

		_pContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createContainerElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);

				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}
				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pContainerElement.destroy = function (is_step) {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle, is_step);
				}

				this._owner_elem = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pContainerElement.clearContents = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle) {
				_handle._linked_element = null;
				if (_owner_elem && _owner_elem._handle) {
					nexacro.__destroyElementHandle(_owner_elem._handle, _handle);
				}
				this._owner_elem = null;
				this._handle = null;
			}
		};


		_pContainerElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this.parent_elem) {
					if (child_elem._handle) {
						var old_doc = child_elem.getRootWindowHandle();
						var new_doc = this.getRootWindowHandle();
						if (old_doc != new_doc) {
							child_elem._parent_elem = this.parent_elem;
							child_elem._removeFromContainer();
						}
						else {
							child_elem._parent_elem = this.parent_elem;
						}
					}
					else {
						child_elem._parent_elem = this.parent_elem;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this);
				}
			}
		};
		_pContainerElement.removeChildElement = function (child_elem) {
			if (child_elem._owner_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pContainerElement.moveToNextElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToNext(cur_elem._handle, target_elem._handle);
			}
		};
		_pContainerElement.moveToPrevElement = function (cur_elem, target_elem) {
			if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
				nexacro.__setElementHandleMoveToPrev(cur_elem._handle, target_elem._handle);
			}
		};
		_pContainerElement.sendToBackElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleSendToBack(cur_elem._handle);
			}
		};
		_pContainerElement.bringToFrontElement = function (cur_elem) {
			if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
				nexacro.__setElementHandleBringToFront(cur_elem._handle);
			}
		};

		_pContainerElement.setElementFont = function (font) {
			this.font = font;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
			}
		};
		_pContainerElement.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleColor(_handle, color._syscolor);
			}
		};

		delete _pContainerElement;


		nexacro.ScrollableContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pScrollableContainerElement = nexacro._createPrototype(nexacro.ContainerElement, nexacro.ScrollableContainerElement);
		nexacro.ScrollableContainerElement.prototype = _pScrollableContainerElement;
		_pScrollableContainerElement._type_name = "ScrollableContainerElement";

		_pScrollableContainerElement._scroll_left = 0;
		_pScrollableContainerElement._scroll_top = 0;

		_pScrollableContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createScrollableContainerElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}
				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}

				if (this._scroll_left != 0 || this._scroll_top != 0) {
					nexacro.__setElementHandleOffset(_handle, this._scroll_left, this._scroll_top);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pScrollableContainerElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				_handle._linked_element = null;
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};

		_pScrollableContainerElement.clearContents = function () {
			var _handle = this._handle;
			var _owner_elem = this._owner_elem;
			if (_handle) {
				_handle._linked_element = null;
				if (_owner_elem && _owner_elem._handle) {
					nexacro.__destroyElementHandle(_owner_elem._handle, _handle);
				}
				this._owner_elem = null;
				this._handle = null;
			}
		};

		_pScrollableContainerElement.setElementVScrollPos = function (vpos) {
			if (this._scroll_top != vpos || this.parent._reset_scrollpos) {
				this._scroll_top = vpos;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleVScrollPos(_handle, vpos);
				}
			}
		};

		_pScrollableContainerElement.setElementHScrollPos = function (hpos, bForce) {
			if (this._scroll_left != hpos || this.parent._reset_scrollpos || this.parent._bChangeRtl || bForce) {
				this._scroll_left = hpos;
				var _handle = this._handle;
				if (_handle) {
					hpos = nexacro.__convertScrollLeftByRtl(this, hpos);
					nexacro.__setElementHandleHScrollPos(_handle, hpos);
				}
			}
		};

		_pScrollableContainerElement.setElementScrollPos = function (hpos, vpos) {
			if (this._scroll_left != hpos || this._scroll_top != vpos || this.parent._reset_scrollpos) {
				this._scroll_left = hpos;
				this._scroll_top = vpos;
				var _handle = this._handle;
				if (_handle) {
					hpos = nexacro.__convertScrollLeftByRtl(this, hpos);
					nexacro.__setElementHandleOffset(_handle, hpos, vpos);
				}
			}
		};

		_pScrollableContainerElement.getZoom = function () {
			return this._zoomFactor;
		};

		_pScrollableContainerElement.setZoom = function (zoomFactor) {
			if (this._handle) {
				this._zoomFactor = zoomFactor;
				nexacro.__setElementHandleScale(this._handle, zoomFactor);
			}
		};

		delete _pScrollableContainerElement;

		nexacro.PopupControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
		};

		var _pPopupControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.PopupControlElement);
		nexacro.PopupControlElement.prototype = _pPopupControlElement;

		_pPopupControlElement._type_name = "PopupControlElement";

		_pPopupControlElement._win_handle = null;


		_pPopupControlElement.create = function (_window) {
			if (this._parent_elem == null) {
				if (!this._handle) {
					var linkedcontrol = this.linkedcontrol;

					var _win = linkedcontrol._getWindow();
					var _win_handle = this._win_handle = _win._handle;
					var _owner_elem = _win;

					var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					linkedcontrol._unique_id = linkedcontrol.parent._unique_id + '_' + linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, linkedcontrol._unique_id);

					this._handle = _handle;

					if (linkedcontrol._findOwnerElementHandle) {
						var owner_elem_info = linkedcontrol._findOwnerElementHandle();
						if (owner_elem_info.is_append) {
							nexacro.__appendElementHandle(owner_elem_info.owner_handle, _handle);
						}
						else {
							nexacro.__insertElementHandle(owner_elem_info.owner_handle, _handle, owner_elem_info.ref_handle);
						}
					}
					else {
						nexacro.__appendElementHandle(_win_handle, _handle);
					}

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}
					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};
		_pPopupControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._win_handle = null;
				this._handle = null;

				this._client_element.destroy();
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pPopupControlElement.getRootWindowHandle = function () {
			return this._win_handle;
		};

		_pPopupControlElement.setElementPosition = function (left, top, bForce) {
			if (this.left != left || this.top != top || bForce) {
				this.left = left;
				this.top = top;
				var _handle = this._handle;
				if (_handle) {
					var parent = this.parent;
					var bMirror = false;
					if (parent) {
						left = this._adjustRtlLayoutLeft(left, this.width);
					}

					nexacro.__setElementHandlePosition(_handle, left, top);
				}
			}
		};

		_pPopupControlElement._adjustRtlLayoutLeft = function (left, width) {
			var newLeft = left;
			var frame = this.parent.getMainframe();

			var parent_width = frame._control_element.client_width;

			if (this._isRtl()) {
				newLeft = parent_width - width - left;
			}
			return newLeft;
		};

		_pPopupControlElement._isRtl = function (bSelf) {
			var comp = this.parent._getRootComponent(this.parent);

			var elem = comp.getElement();

			if (bSelf) {
				elem = this;
			}

			var rtldirection = this._rtldirection;
			while (elem) {
				if (elem._rtldirection && elem._rtldirection != "inherit") {
					rtldirection = elem._rtldirection;
					break;
				}
				elem = elem._parent_elem;
			}

			return rtldirection == "rtl";
		};

		delete _pPopupControlElement;

		nexacro.PopupScrollableControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			var client_element = new nexacro.ScrollableContainerElement(this);
			this._client_element = client_element;
		};
		var _pPopupScrollableControlElement = nexacro._createPrototype(nexacro.ScrollableControlElement, nexacro.PopupScrollableControlElement);
		nexacro.PopupScrollableControlElement.prototype = _pPopupScrollableControlElement;
		_pPopupScrollableControlElement._type_name = "PopupScrollableControlElement";

		_pPopupScrollableControlElement._win_handle = null;


		_pPopupScrollableControlElement.create = function (_window) {
			if (this._parent_elem == null) {
				if (!this._handle) {
					var linkedcontrol = this.linkedcontrol;
					var _win = linkedcontrol._getWindow();
					var _win_handle = this._win_handle = _win._handle;
					var _owner_elem = _win;

					var _handle = nexacro.__createScrollableControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					linkedcontrol._unique_id = linkedcontrol.parent._unique_id + '_' + linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, linkedcontrol._unique_id);
					this._handle = _handle;

					if (linkedcontrol._findOwnerElementHandle) {
						var owner_elem_info = linkedcontrol._findOwnerElementHandle();
						if (owner_elem_info.is_append) {
							nexacro.__appendElementHandle(owner_elem_info.owner_handle, _handle);
						}
						else {
							nexacro.__insertElementHandle(owner_elem_info.owner_handle, _handle, owner_elem_info.ref_handle);
						}
					}
					else {
						nexacro.__appendElementHandle(_win_handle, _handle);
					}

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}
					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};

		_pPopupScrollableControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._win_handle = null;
				this._handle = null;

				this._client_element.destroy();

				this._hscroll_control = null;
				this._vscroll_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pPopupScrollableControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};

		_pPopupScrollableControlElement.getRootWindowHandle = function () {
			return this._win_handle;
		};

		_pPopupScrollableControlElement.setElementPosition = function (left, top, bForce) {
			if (this.left != left || this.top != top || bForce) {
				this.left = left;
				this.top = top;
				var _handle = this._handle;
				if (_handle) {
					var parent = this.parent;
					var bMirror = false;
					if (parent) {
						left = this._adjustRtlLayoutLeft(left, this.width);
					}

					nexacro.__setElementHandlePosition(_handle, left, top);
				}
			}
		};

		_pPopupScrollableControlElement._adjustRtlLayoutLeft = function (left, width) {
			var newLeft = left;
			var frame = this.parent.getMainframe();

			var parent_width = frame._control_element.width;

			if (this._isRtl()) {
				newLeft = parent_width - width - left;
			}
			return newLeft;
		};

		delete _pPopupScrollableControlElement;

		nexacro.TextElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pTextElement = nexacro._createPrototype(nexacro.Element, nexacro.TextElement);
		nexacro.TextElement.prototype = _pTextElement;
		_pTextElement._type_name = "TextElement";

		_pTextElement.font = null;
		_pTextElement.color = null;
		_pTextElement.align = null;
		_pTextElement.halign = "";
		_pTextElement.valign = "";
		_pTextElement.padding = null;
		_pTextElement.padding_left = 0;
		_pTextElement.padding_top = 0;
		_pTextElement.padding_right = 0;
		_pTextElement.padding_bottom = 0;
		_pTextElement.text = "";
		_pTextElement.linespace = 0;
		_pTextElement.letterspace = 0;
		_pTextElement.wordwrap = "none";
		_pTextElement.decoration = "";
		_pTextElement._use_newline = true;


		_pTextElement.create = function () {
			var _owner_elem = this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createTextElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}

				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}

				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}

				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}

				if (this.align) {
					var align = this.align;
					nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
				}
				else if (this.halign && this.valign) {
					nexacro.__setElementHandleAlign(_handle, this.halign, this.valign);
				}

				if (this.padding) {
					var padding = this.padding;
					nexacro.__setElementHandlePadding(_handle, padding.left, padding.top, padding.right, padding.bottom);
				}
				else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
					nexacro.__setElementHandlePadding(_handle, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
				}

				if (this.decoration) {
					nexacro.__setElementHandleDecorateText(_handle, this.decoration);
				}

				if (this.linespace > 0) {
					nexacro.__setElementHandleLineSpace(_handle, this.linespace);
				}

				if (this.wordwrap != "none") {
					nexacro.__setElementHandleWordWrap(_handle, this.wordwrap);
				}

				if (this.text) {
					nexacro.__setElementHandleText(_handle, this.text, this._use_newline, this.wordwrap);
				}

				var size = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), this.text, this.font, this._use_newline);
				nexacro.__setElementHandleSize(_handle, size[0], size[1]);

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		_pTextElement.setElementFont = function (font) {
			this.font = font;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				var size = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), this.text, this.font, this._use_newline);
				nexacro.__setElementHandleSize(_handle, size[0], size[1]);
			}
		};

		_pTextElement.setElementColor = function (color) {
			this.color = color;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleColor(_handle, color._syscolor);
			}
		};

		_pTextElement.setElementPadding = function (padding) {
			this.padding = padding;
			this.padding_left = 0;
			this.padding_top = 0;
			this.padding_right = 0;
			this.padding_bottom = 0;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandlePadding(_handle, padding.left, padding.top, padding.right, padding.bottom);
			}
		};

		_pTextElement.setElementPaddingXY = function (left, top, right, bottom) {
			this.padding = null;
			this.padding_left = left;
			this.padding_top = top;
			this.padding_right = right;
			this.padding_bottom = bottom;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandlePadding(_handle, left, top, right, bottom);
			}
		};

		_pTextElement.setElementAlign = function (align) {
			this.align = align;
			this.halign = align._halign;
			this.valign = align._valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, align._halign, align._valign);
			}
		};

		_pTextElement.setElementAlignXY = function (halign, valign) {
			var _halign = halign;

			if (this._isRtl()) {
				_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
			}

			this.align = null;
			this.halign = halign;
			this.valign = valign;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleAlign(_handle, _halign, valign);
			}
		};

		_pTextElement.setElementText = function (text) {
			if (this.text != text) {
				if (text == null) {
					this.text = "";
				}
				else {
					this.text = text.replace(/\r\n|\r|\n/g, "\r\n");
				}

				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleText(_handle, this.text, this._use_newline, this.wordwrap);

					var size = nexacro._getTextSize(this.letterspace || this._getParentLetterSpace(), this.text, this.font, this._use_newline);
					nexacro.__setElementHandleSize(_handle, size[0], size[1]);
				}
			}
		};

		_pTextElement.setElementLetterSpace = function (letterspace) {
			if (this.letterspace != letterspace) {
				this.letterspace = letterspace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLetterSpace(_handle, letterspace);
				}
			}
		};

		_pTextElement.setElementLineSpace = function (linespace) {
			if (this.linespace != linespace) {
				this.linespace = linespace;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleLineSpace(_handle, linespace);
				}
			}
		};

		_pTextElement.setElementDecorateText = function (text) {
			if (this.decoration != text) {
				this.decoration = text;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleDecorateText(_handle, this.decoration);
				}
			}
		};

		_pTextElement.setElementUseNewLine = function (use_newline) {
			if (this._use_newline != use_newline) {
				this._use_newline = use_newline;

				var _cell_node = this._cell_node;
				if (_cell_node) {
					if (this.wordwrap != "none") {
						return;
					}
					this.__setElementHandleText(cell_node, this.text, this._use_newline, this.wordwrap);
				}
			}
		};

		_pTextElement.setElementWordWrap = function (wordwrap) {
			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			if (this.wordwrap != wordwrap) {
				this.wordwrap = wordwrap;
				var _handle = this._handle;
				if (_handle) {
					nexacro.__setElementHandleWordWrap(_handle, this.wordwrap);
				}
			}
		};

		_pTextElement.setElementPosition = function (left, top) {
			if (this.left != left || this.top != top) {
				this.left = left;
				this.top = top;

				var _handle = this._handle;
				if (_handle) {
					var owner_elem = this._owner_elem;
					var bMirror = false;
					if (owner_elem) {
						left = this._adjustRtlLayoutLeft(left, this.width);
					}
					nexacro.__setElementHandlePosition(_handle, left, top);
				}
			}
		};



		delete _pTextElement;

		nexacro.PluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();
		};

		var _pPluginElement = nexacro._createPrototype(nexacro.Element, nexacro.PluginElement);
		nexacro.PluginElement.prototype = _pPluginElement;
		_pPluginElement._type_name = "PluginElement";

		_pPluginElement._plugin_object = null;

		_pPluginElement.license = "";
		_pPluginElement.lpkpath = "";
		_pPluginElement.classid = "";
		_pPluginElement.codebase = "";
		_pPluginElement.code = "";
		_pPluginElement.archive = "";
		_pPluginElement.mimetype = "";

		_pPluginElement.pluginsrc = "";
		_pPluginElement.plugintype = "";
		_pPluginElement.pluginpage = "";
		_pPluginElement.pluginname = "";

		_pPluginElement.windowed = false;
		_pPluginElement.popupstyle = false;
		_pPluginElement.adjustalpha = false;
		_pPluginElement.usepersistdata = false;

		_pPluginElement.enable = true;
		_pPluginElement.font = null;
		_pPluginElement.color = null;
		_pPluginElement.cursor = null;
		_pPluginElement.align = null;
		_pPluginElement.padding = null;
		_pPluginElement.color = null;
		_pPluginElement.component = null;

		_pPluginElement._params = null;
		_pPluginElement._events = null;

		_pPluginElement.create = function () {
			if (!this._handle) {
				var _win_handle = null;
				var _owner_elem = null;
				var _linked_comp = null;
				if (this._parent_elem) {
					_owner_elem = this._parent_elem.getContainerElement(this.position_step);
					if (_owner_elem && _owner_elem._handle) {
						this._owner_elem = _owner_elem;
						_win_handle = _owner_elem.getRootWindowHandle();
					}
					_linked_comp = this._parent_elem.linkedcontrol;
				}

				var _handle = nexacro.__createPluginElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);

				if (this.classid) {
					nexacro.__setPluginElementHandleClassId(_handle, this.classid);
				}
				if (this.adjustalpha) {
					nexacro.__setPluginElementHandleAdjustAlpha(_handle, this.adjustalpha);
				}

				if (this.pluginname) {
					nexacro.__setPluginElementHandlePluginName(_handle, this.pluginname);
				}

				if (this.mimetype) {
					nexacro.__setPluginElementHandleMIMEType(_handle, this.mimetype);
				}
				if (this.pluginsrc) {
					nexacro.__setPluginElementHandlePluginSrc(_handle, this.pluginsrc);
				}
				if (this.pluginpage) {
					nexacro.__setPluginElementHandlePluginPage(_handle, this.pluginpage);
				}
				if (this.code) {
					nexacro.__setPluginElementHandleCode(_handle, this.code);
				}

				if (this.codebase) {
					nexacro.__setPluginElementHandleCodebase(_handle, this.codebase);
				}

				var params = this._params;
				var param_cnt = (params ? params.length : 0);
				for (var i = 0; i < param_cnt; i++) {
					nexacro.__setPluginElementHandleAttribute(_handle, params.get_id(i), params.get_item(i));
				}

				if (this.mimetype && this.classid == "") {
					var events = this._events;
					var event_cnt = events.length;
					for (var i = 0; i < event_cnt; i++) {
						this.addEventHandler(events.get_id(i), events.get_item(i));
					}
				}

				if (this.license || this.lpkpath) {
					nexacro.__setPluginElementHandleLicense(_handle, this.license, this.lpkpath);
				}

				if (!this.visible || (_linked_comp && _linked_comp.visible == false)) {
					nexacro.__setElementHandleVisible(_handle, false);
					if (this.visible) {
						this.visible = false;
					}
				}

				if (!this.enable || (_linked_comp && _linked_comp.enable == false)) {
					nexacro.__setElementHandleEnable(_handle, false);
					if (this.enable) {
						this.enable = false;
					}
				}

				if (this.windowed) {
					nexacro.__setPluginElementHandleWindowed(_handle, this.windowed);
					if (this.popupstyle) {
						nexacro.__setPluginElementHandlePopupstyle(_handle, this.popupstyle);
					}
				}

				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}
				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}

				if (this.align) {
					var align = this.align;
					nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
				}

				if (this.padding) {
					var padding = this.padding;
					nexacro.__setElementHandlePadding(_handle, padding.left, padding.top, padding.right, padding.bottom);
				}

				this._handle = _handle;

				this.initEvent();

				if (_owner_elem && _owner_elem._handle) {
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);
				}
				nexacro.__createdPluginElementHandle(_handle);

				this._plugin_object = new nexacro.PluginObject;
				if (this._plugin_object) {
					this._plugin_object._handle = nexacro.__getPluginElementHandleObject(this._handle);
				}
			}
		};

		_pPluginElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, this._handle);
				}

				this._owner_elem = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;

			var params = this._params;
			if (params) {
				params.destroy();
				this._params = null;
			}

			var events = this._events;
			if (events) {
				events.destroy();
				this._events = null;
			}

			var plugin_object = this._plugin_object;
			if (plugin_object) {
				plugin_object.destroy();
				this._plugin_object = null;
			}
		};

		_pPluginElement.initEvent = function () {
			if (this._handle) {
				nexacro._observeWrapperEvent(this._handle, null, "on_plugin_event", this.on_plugin_event, -1, null);
			}
		};

		_pPluginElement.on_plugin_event = function () {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				var length = arguments.length;
				if (length > 0) {
					var evt_id = arguments[0];
					if (comp[evt_id]) {
						var listener = comp[evt_id];
						if (listener) {
							var j;
							var params = [];
							for (var i = 1, j = 0; i < length; i++, j++) {
								params[j] = arguments[i];
							}
							if (listener._firePluginEvent) {
								listener._firePluginEvent.apply(listener, params);
							}
						}
					}
				}
			}
		};


		_pPluginElement.on_update_position = function () {
			if (this._handle) {
				nexacro.__updatePluginElementHandlePosition(this._handle);
			}
		};

		_pPluginElement.setElementFocus = function () {
			if (this._handle) {
				nexacro.__setElementHandleFocus(this._handle);
				nexacro.__setLastFocusedElement(this);
			}
		};

		_pPluginElement.setElementPluginPosition = function (left, top) {
			if (this._handle) {
				this.setElementPosition(left, top);
			}
		};

		_pPluginElement.setElementLicense = function (license) {
			if (this.license != license) {
				this.license = license;
			}
		};

		_pPluginElement.setElementLicenseFile = function (lpkpath) {
			if (!this._handle && this.lpkpath != lpkpath) {
				this.lpkpath = lpkpath;
			}
		};

		_pPluginElement.setElementMIMEType = function (_type) {
			if (this.mimetype != _type) {
				this.mimetype = _type;
			}
		};

		_pPluginElement.setElementClassId = function (classid) {
			if (this.classid != classid) {
				this.classid = classid;

				if (this._handle) {
					nexacro.__setPluginElementHandleClassId(this._handle, this.classid);
				}
			}
		};

		_pPluginElement.setElementCodebase = function (codebase) {
			if (this.codebase != codebase) {
				this.codebase = codebase;

				if (this._handle) {
					nexacro.__setPluginElementHandleCodebase(this._handle, this.codebase);
				}
			}
		};

		_pPluginElement.setElementCode = function (code) {
			if (this.code != code) {
				this.code = code;
			}
		};

		_pPluginElement.setElementArchive = function (archive) {
			if (this.archive != archive) {
				this.archive = archive;
			}
		};

		_pPluginElement.setElementAdjustAlpha = function (adjustalpha) {
			if (this.adjustalpha != adjustalpha) {
				this.adjustalpha = adjustalpha;
			}
		};

		_pPluginElement.setElementUsePersistData = function (usepersistdata) {
			if (this.usepersistdata != usepersistdata) {
				this.usepersistdata = usepersistdata;
			}
		};

		_pPluginElement.getElementData = function () {
			return this.data;
		};

		_pPluginElement.setElementData = function (value) {
			if (this.data != value) {
				this.data = value;
			}
		};

		_pPluginElement.getElementParam = function (name) {
			if (this._plugin_object) {
				return this._plugin_object.getProperty(name);
			}
			else {
				var params = this._params;
				return params.get_item(name);
			}
		};

		_pPluginElement.setElementParam = function (name, value) {
			if (this._plugin_object) {
				if (name && value) {
					this._plugin_object.setProperty(name, value);
				}
			}
			else {
				var params = this._params;
				if (params.get_item(name)) {
					params.set_item(name, value);
				}
				else {
					params.add_item(name, value);
				}
			}
		};

		_pPluginElement.setElementPluginSrc = function (src) {
			if (this.pluginsrc != src) {
				this.pluginsrc = src;
			}
		};

		_pPluginElement.setElementPluginPage = function (pluginpage) {
			if (this.pluginpage != pluginpage) {
				this.pluginpage = pluginpage;
			}
		};

		_pPluginElement.setElementWindowed = function (windowed) {
			if (this.windowed != windowed) {
				this.windowed = windowed;
				if (this._handle) {
				}
			}
		};

		_pPluginElement.setElementEnable = function (enable) {
			if (this.enable != enable) {
				this.enable = enable;
				if (this._handle) {
					nexacro.__setElementHandleEnable(this._handle, enable);
				}
			}
		};

		_pPluginElement.setElementPluginVisible = function (visible) {
			if (this._handle) {
				nexacro.__setElementHandleVisible(this._handle, visible);
			}
		};

		_pPluginElement.setElementPopupStyle = function (popupstyle) {
			if (this.popupstyle != popupstyle) {
				this.popupstyle = popupstyle;
			}
		};
		_pPluginElement.setElementpluginname = function (pluginname) {
			if (this.pluginname != pluginname) {
				this.pluginname = pluginname;
			}
		};

		_pPluginElement.callMethod = function () {
			if (arguments.length < 1) {
				return;
			}

			if (this._plugin_object) {
				return this._plugin_object.callMethod.apply(this._plugin_object, arguments);
			}
		};

		_pPluginElement.getPluginObject = function () {
			if (this._plugin_object) {
				return this._plugin_object;
			}
			return null;
		};

		_pPluginElement.install = function () {
			if (this._handle && this.codebase) {
				nexacro.__callPluginElementHandleInstall(this._handle);
			}
		};

		_pPluginElement.isInstalled = function () {
			if (this._handle) {
				return nexacro.__getPluginElementHandleIsInstalled(this._handle);
			}
			return false;
		};

		_pPluginElement.isLoaded = function () {
			if (this._handle) {
				return nexacro.__isPluginElementHandleLoaded(this._handle);
			}
			return false;
		};

		_pPluginElement.addEventHandler = function (name, callback) {
			if (this._handle && this.classid == "" && this.mimetype) {
				var nameFromToStringRegex = /^function\s?([^\s(]*)/;
				var paramsFromToStringRegex = /\(\)|\(.+\)/;
				var params = callback.toString().match(paramsFromToStringRegex)[0];
				var eventValue = name + params;
				var callfunc;

				var parentFrame, parentFrame2;
				parentFrame = this.component.parent;
				if (parentFrame) {
					callfunc = "." + this.component.id + '["' + name + '"]; \n';
					callfunc += 'if (eventFn) eventFn._firePluginEvent' + params + ';';
					do {
						if (parentFrame instanceof nexacro.MainFrame) {
							callfunc = 'var eventFn = application.mainframe' + callfunc;
							break;
						}

						if (parentFrame instanceof nexacro.ChildFrame) {
							parentFrame2 = parentFrame.parent;
							if (parentFrame2) {
								if (parentFrame2._is_frameset || parentFrame2._frames) {
									var frmidx;
									var frmlen = parentFrame2._frames.length;
									for (frmidx = 0; frmidx < frmlen; frmidx++) {
										if (parentFrame2._frames[frmidx] == parentFrame) {
											callfunc = '._frames[' + frmidx + ']' + callfunc;
											break;
										}
									}

									if (parentFrame._is_popup_frame) {
										callfunc = 'var eventFn = application.mainframe' + callfunc;
										break;
									}
								}
								else if (parentFrame2 instanceof nexacro.MainFrame) {
									callfunc = '.frame' + callfunc;
								}
								else if (parentFrame2 instanceof nexacro.Form) {
									callfunc = '.' + parentFrame.id + callfunc;
								}
							}
						}
						if (parentFrame2._is_frameset) {
							parentFrame2 = parentFrame.parent;
							if (parentFrame2 && parentFrame2._frames) {
								var frmidx;
								var frmlen = parentFrame2._frames.length;
								for (frmidx = 0; frmidx < frmlen; frmidx++) {
									if (parentFrame2._frames[frmidx] == parentFrame) {
										callfunc = '._frames[' + frmidx + ']' + callfunc;
										break;
									}
								}
							}
						}
						else if (parentFrame instanceof nexacro.Div) {
							callfunc = '.' + parentFrame.id + callfunc;
						}
						else if (parentFrame instanceof nexacro.Form) {
							callfunc = '.form' + callfunc;
						}
						parentFrame = parentFrame.parent;
					} while (parentFrame);
				}
				callfunc = 'callback = function' + params + '\n{\n' + callfunc + "\n}";
				nexacro.__appendGlobalScript(name, eval(callfunc));
			}
			else {
				this._events.add_item(name, callback);
			}
		};

		_pPluginElement.removeEventHandler = function (name, callback) {
			if (this._handle && this.classid == "" && this.mimetype) {
				nexacro.__removeGlobalScript(name);
			}
			else {
				this._events.delete_item(name);
			}
		};

		_pPluginElement.updateWindow = function () {
			if (this.windowed == true) {
				nexacro.__updatePluginElementHandleWindow(this._handle);
			}
		};

		_pPluginElement.getProperty = _pPluginElement.getElementParam;
		_pPluginElement.setProperty = _pPluginElement.setElementParam;
		_pPluginElement.setElementPluginMIMEType = nexacro._emptyFn;
		_pPluginElement._setElementFocus = _pPluginElement.setElementFocus;

		delete _pPluginElement;









		nexacro.PluginObject = function () {
		};

		var _pPluginObject = nexacro._createPrototype(nexacro.Object, nexacro.PluginObject);
		nexacro.PluginObject.prototype = _pPluginObject;
		_pPluginObject._type_name = "PluginObject";
		_pPluginObject._handle = null;

		_pPluginObject.getProperty = function (name) {
			if (this._handle) {
				if (name) {
					var value = nexacro.__getPluginObjectHandleAttribute(this._handle, name);
					if (value != null && typeof (value) == "object") {
						var pobject = new nexacro.PluginObject;
						pobject._handle = value;
						return pobject;
					}
					return value;
				}
			}
		};

		_pPluginObject.setProperty = function (name, value) {
			if (this._handle) {
				if (name) {
					nexacro.__setPluginObjectHandleAttribute(this._handle, name, value);
				}
			}
		};

		_pPluginObject.callMethod = function () {
			if (arguments.length < 1) {
				return;
			}

			if (this._handle) {
				Array.prototype.unshift.call(arguments, this._handle);
				var value = nexacro.__callPluginObjectHandleMethod.apply(nexacro, arguments);
				if (value != null && typeof (value) == "object") {
					var pobject = new nexacro.PluginObject;
					pobject._handle = value;

					return pobject;
				}
				return value;
			}
		};


		_pPluginObject.callScriptMethod = function () {
			if (arguments.length < 1) {
				return;
			}

			if (this._handle) {
				Array.prototype.unshift.call(arguments, this._handle);
				var value = nexacro.__callPluginObjectHandleScriptMethod.apply(nexacro, arguments);
				if (value != null && typeof (value) == "object") {
					var pobject = new nexacro.PluginObject;
					pobject._handle = value;

					return pobject;
				}
				return value;
			}
		};


		_pPluginObject.destroy = function () {
			if (this._handle) {
				nexacro.__destroyPluginObjectHandle(this._handle);
				this._handle = null;
			}
		};

		delete _pPluginObject;

		nexacro.WebBrowserPluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._parent_elem.windowed = true;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();
		};

		var _pWebBrowserPluginElement = nexacro._createPrototype(nexacro.PluginElement, nexacro.WebBrowserPluginElement);
		nexacro.WebBrowserPluginElement.prototype = _pWebBrowserPluginElement;

		_pWebBrowserPluginElement._type_name = "WebBrowserPluginElement";

		_pWebBrowserPluginElement.windowed = true;
		_pWebBrowserPluginElement.classid = "{8856F961-340A-11D0-A96B-00C04FD705A2}";
		_pWebBrowserPluginElement.pluginname = "WebBrowser";
		_pWebBrowserPluginElement.src = "";

		_pWebBrowserPluginElement.initEvent = function () {
			if (this._handle) {
				nexacro._observeWrapperEvent(this._handle, null, "on_plugin_event", this.on_plugin_event);
			}
		};

		_pWebBrowserPluginElement.on_plugin_event = function (evt_id, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg8, arg9) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				if (evt_id == "DocumentComplete") {
					var locationURL = this.getElementParam("LocationURL");
					if (locationURL == arg1) {
						evt_id = "onloadcompleted";
						if (comp.on_load_handler) {
							var _win = comp._getWindow();
							var cur_focus_paths = _win.getCurrentFocusPaths();
							var pThis = comp;

							while (pThis && pThis._is_nc_control) {
								pThis = pThis.parent;
							}

							if (!pThis) {
								return;
							}

							var focuspath_index = -1;
							var len = 0;
							if (cur_focus_paths) {
								focuspath_index = nexacro._indexOf(cur_focus_paths, pThis);
								len = cur_focus_paths.length;
							}

							if (focuspath_index < 0 && len > 0) {
								cur_focus_paths[len - 1].on_apply_custom_setfocus();
							}
							nexacro.__restorePluginElementHandleWindowFocus(this._handle);
							return comp.on_load_handler(arg1);
						}
					}
				}
				else if (evt_id == "TitleChange") {
					comp.on_fire_onusernotify(comp, arg0);
				}

				if (comp[evt_id]) {
					var listener = comp[evt_id];
					if (listener) {
						return listener._fireEvent(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg8, arg9);
					}
				}
			}
		};

		_pWebBrowserPluginElement._getDoc = function () {
			return null;
		};

		_pWebBrowserPluginElement._setUrl = function (url) {
			if (this._plugin_object) {
				this._setSharedVariablesToCookie(url);
				this._plugin_object.callMethod("Navigate", url);
			}
		};

		_pWebBrowserPluginElement._setGo = function () {
			if (this._plugin_object) {
				this._plugin_object.callMethod("Refresh");
			}
		};

		_pWebBrowserPluginElement._setBack = function () {
			if (this._plugin_object) {
				var state = this._plugin_object.callMethod("GoBack");
				if (state) {
					return state.toLowerCase() == "true" ? true : false;
				}
			}
		};


		_pWebBrowserPluginElement._setForward = function () {
			if (this._plugin_object) {
				var state = this._plugin_object.callMethod("GoForward");
				if (state) {
					return state.toLowerCase() == "true" ? true : false;
				}
			}
		};

		_pWebBrowserPluginElement.getNativeProperty = function (name) {
			if (this._plugin_object) {
				return this._plugin_object.getProperty(name);
			}
			return;
		};

		_pWebBrowserPluginElement.getProperty = function (name) {
			if (this._plugin_object) {
				if (name == "window") {
					var doc = this._plugin_object.getProperty("document");
					if (doc) {
						return doc.getProperty("parentWindow");
					}
				}
				return this._plugin_object.getProperty(name);
			}
			else {
				var params = this._params;
				return params.get_item(name);
			}
		};

		_pWebBrowserPluginElement.callMethod = function () {
			if (arguments.length < 1) {
				return;
			}

			if (this._plugin_object) {
				return nexacro._pluginCallMethod(this, arguments);
			}
		};

		_pWebBrowserPluginElement._setSharedVariablesToCookie = function (url) {
			var cookievar = application._cookie_variables;
			var cookievarCnt = 0;
			if (cookievar) {
				cookievarCnt = cookievar.length;
			}

			var cookies = "";
			for (var i = 0; i < cookievarCnt; i++) {
				var cookieid = cookievar[i];
				var curCookie = nexacro._getCookie(cookieid);
				cookies += (cookieid + '=' + curCookie + ';');
			}

			if (cookievarCnt) {
				nexacro._setSharedVariablesToCookie(url, cookies);
			}
		};

		delete _pWebBrowserPluginElement;


		nexacro.MediaPlayerPluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._parent_elem.windowed = true;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();
		};

		var _pMediaPlayerPluginElement = nexacro._createPrototype(nexacro.PluginElement, nexacro.MediaPlayerPluginElement);
		nexacro.MediaPlayerPluginElement.prototype = _pMediaPlayerPluginElement;
		_pMediaPlayerPluginElement._type_name = "MediaPlayerPluginElement";
		_pMediaPlayerPluginElement.windowed = true;
		_pMediaPlayerPluginElement.classid = "{6bf52a52-394a-11d3-b153-00c04f79faa6}";

		_pMediaPlayerPluginElement.initEvent = function () {
			if (this._handle) {
				nexacro._observeWrapperEvent(this._handle, null, "on_plugin_event", this.on_plugin_event);
			}
		};
		_pMediaPlayerPluginElement.on_plugin_event = function (evt_id, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg8, arg9) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);
			if (comp) {
				if (evt_id == "PlayStateChange") {
					var state = null;
					if (arg0 == 3) {
						state = "play";
					}
					else if (arg0 == 2) {
						state = "pause";
					}
					else if (arg0 == 1) {
						state = "stop";
					}
					if (state) {
						comp._on_statuschanged(state);
					}
				}
				else if (evt_id == "OpenStateChange") {
					var getpro = this._plugin_object.getProperty("controls");
					if (getpro) {
						var getitem = getpro.getProperty("currentItem");
						if (getitem) {
							var width = getitem.getProperty("imagesourcewidth");
							var height = getitem.getProperty("imagesourceheight");
							var duration = getitem.getProperty("duration");
							if (width > 0 && height > 0) {
								comp.size = width + " * " + height;
							}
							else {
								comp.size = "0 * 0";
							}
							comp.duration = duration > 0 ? duration : 0;
							getitem.destroy();
						}
						getpro.destroy();
					}
				}
				else if (evt_id == "PositionChange") {
					comp._on_currenttimechanged(arg1);
				}
				else if (evt_id == "MediaError") {
					var getpro = this._plugin_object.getProperty("error");
					if (getpro) {
						var getitem = getpro.getProperty("Item");
						var errormsg = "error";
						var statuscode = arg0;
						if (getitem) {
							errormsg = getitem.getProperty("errorDescription");
							statuscode = getitem.getProperty("errorCode");
							getitem.destroy();
						}
						getpro.destroy();
						comp._on_error("NativeError", errormsg, statuscode);
					}
				}
				if (comp[evt_id]) {
					var listener = comp[evt_id];
					if (listener) {
						return listener._fireEvent(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg8, arg9);
					}
				}
			}
		};
		_pMediaPlayerPluginElement._setMediaMute = function (name, value) {
			if (this._plugin_object) {
				var getpro = this._plugin_object.getProperty("settings");
				if (getpro) {
					getpro.setProperty("mute", value);
					getpro.destroy();
				}
			}
		};
		_pMediaPlayerPluginElement._setMediaControl = function (name, value) {
			if (this._plugin_object) {
				var varset = "none";
				if (value == true) {
					varset = "full";
				}
				this._plugin_object.setProperty("uiMode", varset);
			}
		};
		_pMediaPlayerPluginElement._setMediaUrl = function (name, value) {
			if (this._plugin_object) {
				this._plugin_object.setProperty("url", value);
			}
		};
		_pMediaPlayerPluginElement._setMediaCurrentTime = function (name, value) {
			if (this._plugin_object) {
				var getpro = this._plugin_object.getProperty("controls");
				if (getpro) {
					getpro.setProperty("currentPosition", value);
					getpro.destroy();
				}
			}
		};
		_pMediaPlayerPluginElement._setMediaLoop = function (name, value) {
			if (this._plugin_object) {
				var getpro = this._plugin_object.getProperty("settings");
				if (getpro) {
					getpro.callMethod("setMode", "loop", value);
					getpro.destroy();
				}
			}
		};

		_pMediaPlayerPluginElement._setMediaAutoPlay = function (name, value) {
			if (this._plugin_object) {
				var getpro = this._plugin_object.getProperty("settings");
				if (getpro) {
					getpro.setProperty("autostart", value);
					getpro.destroy();
				}
			}
		};
		_pMediaPlayerPluginElement._setMediaVolume = function (name, value) {
			if (this._plugin_object) {
				var getpro = this._plugin_object.getProperty("settings");
				if (getpro) {
					getpro.setProperty("volume", value);
					getpro.destroy();
				}
			}
		};
		_pMediaPlayerPluginElement._setMediaEnable = function (name, value) {
			if (this.enable != value) {
				this.enable = value;
				if (this._handle) {
					nexacro.__setElementHandleEnable(this._handle, value);
				}
			}
		};
		_pMediaPlayerPluginElement._setMediaAdjustAlpha = function (value) {
			this.adjustalpha = value;
			if (this._handle) {
				nexacro.__setPluginElementHandleAdjustAlpha(this._handle, this.adjustalpha);
			}
		};
		_pMediaPlayerPluginElement._play = function () {
			if (this._plugin_object) {
				var controls = this._plugin_object.getProperty("controls");
				if (controls) {
					controls.callMethod("play");
					controls.destroy();
				}
			}
		};

		_pMediaPlayerPluginElement._pause = function () {
			if (this._plugin_object) {
				var controls = this._plugin_object.getProperty("controls");
				if (controls) {
					controls.callMethod("pause");
					controls.destroy();
				}
			}
		};

		_pMediaPlayerPluginElement._rewind = function () {
			if (this._plugin_object) {
				var controls = this._plugin_object.getProperty("controls");
				if (controls) {
					controls.callMethod("fastReverse");
					controls.destroy();
				}
			}
		};

		_pMediaPlayerPluginElement._stop = function () {
			if (this._plugin_object) {
				var controls = this._plugin_object.getProperty("controls");
				if (controls) {
					controls.callMethod("stop");
					controls.destroy();
				}
			}
		};

		_pMediaPlayerPluginElement.destroy = function () {
			nexacro.PluginElement.prototype.destroy.call(this);
		};



		delete _pMediaPlayerPluginElement;

		nexacro.GoogleMapPluginElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._parent_elem.windowed = true;

			this._params = new nexacro.Collection();
			this._events = new nexacro.Collection();
		};

		var _pGoogleMapPluginElement = nexacro._createPrototype(nexacro.PluginElement, nexacro.GoogleMapPluginElement);
		nexacro.GoogleMapPluginElement.prototype = _pGoogleMapPluginElement;
		_pGoogleMapPluginElement._type_name = "GoogleMapElement";

		_pGoogleMapPluginElement.pluginname = "GoogleMap";


		_pGoogleMapPluginElement.destroy = function () {
			nexacro.PluginElement.prototype.destroy.call(this);
		};



		_pGoogleMapPluginElement._setLoad = function (params) {
			if (this._plugin_object) {
				this.callMethod("load", params);
			}
		};

		_pGoogleMapPluginElement._setDestroy = function (params) {
			if (this._plugin_object) {
				this.callMethod("destroy", params);
			}
		};

		_pGoogleMapPluginElement._getAddress = function (params) {
			if (this._plugin_object) {
				this.callMethod("getAddress", params);
			}
		};

		_pGoogleMapPluginElement._getCoordinates = function (params) {
			if (this._plugin_object) {
				this.callMethod("getCoordinates", params);
			}
		};

		_pGoogleMapPluginElement._setRemove = function (params) {
			if (this._plugin_object) {
				this.callMethod("removeItem", params);
			}
		};

		_pGoogleMapPluginElement._setMarker = function (params) {
			if (this._plugin_object) {
				this.callMethod("Marker", params);
			}
		};

		_pGoogleMapPluginElement._setPolyline = function (params) {
			if (this._plugin_object) {
				this.callMethod("Polyline", params);
			}
		};

		_pGoogleMapPluginElement._setPolygon = function (params) {
			if (this._plugin_object) {
				this.callMethod("Polygon", params);
			}
		};

		_pGoogleMapPluginElement.initEvent = function () {
			if (this._handle) {
				nexacro._observeWrapperEvent(this._handle, null, "on_plugin_event", this.on_plugin_event, -1, null);
			}
		};

		_pGoogleMapPluginElement.on_plugin_event = function (evt_id, args) {
			var comp = (this._parent_elem ? this._parent_elem.linkedcontrol : null);

			if (comp) {
				var objArgs = eval("(" + args + ")");
				if (evt_id == "GoogleMap") {
					if (objArgs.eventid == "onload") {
						if (comp.on_load_handler) {
							return comp.on_load_handler(objArgs.eventid, objArgs.centerlocation, objArgs.coordinates, objArgs.viewmode, objArgs.zoomlevel, objArgs.addresses);
						}
					}
					else if (objArgs.eventid == "onerror") {
						if (comp.on_error_handler) {
							return comp.on_error_handler(objArgs.eventid, objArgs.errorcode, objArgs.errormsg);
						}
					}
					else if (objArgs.eventid == "onrecvsuccess") {
						if (comp.on_recvsuccess_handler) {
							return comp.on_recvsuccess_handler(objArgs.eventid, objArgs.centerlocation, objArgs.coordinates, objArgs.viewmode, objArgs.zoomlevel, objArgs.addresses);
						}
					}
					else if (objArgs.eventid == "onclick") {
						if (comp.on_click_handler) {
							return comp.on_click_handler(objArgs.eventid, objArgs.location);
						}
					}
					else if (objArgs.eventid == "ondrag") {
						if (comp.on_drag_handler) {
							return comp.on_drag_handler(objArgs.eventid, objArgs.location);
						}
					}
					else if (objArgs.eventid == "onmapdragstart") {
						if (comp.on_mapdragstart_handler) {
							return comp.on_mapdragstart_handler(objArgs.eventid, objArgs.location);
						}
					}
					else if (objArgs.eventid == "onmapdrag") {
						if (comp.on_mapdrag_handler) {
							return comp.on_mapdrag_handler(objArgs.eventid, objArgs.location);
						}
					}
					else if (objArgs.eventid == "onmapdragend") {
						if (comp.on_mapdragend_handler) {
							return comp.on_mapdragend_handler(objArgs.eventid, objArgs.location);
						}
					}
				}
			}
		};

		delete _pGoogleMapPluginElement;

		nexacro.CanvasElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};

		var _pCanvasElement = nexacro._createPrototype(nexacro.Element, nexacro.CanvasElement);
		nexacro.CanvasElement.prototype = _pCanvasElement;

		_pCanvasElement._type_name = "CanvasElement";

		_pCanvasElement.lineOffset = 0.5;

		_pCanvasElement.scale = 10;
		_pCanvasElement.half_scale = 5;
		_pCanvasElement.scalex = 0;
		_pCanvasElement.scaley = 0;

		_pCanvasElement.fillStyle = null;
		_pCanvasElement.strokeColor = "#000000";
		_pCanvasElement.lineCap = 'butt';
		_pCanvasElement.lineJoin = 'miter';
		_pCanvasElement.lineWidth = 1;
		_pCanvasElement.miterLimit = 10;
		_pCanvasElement.shadowColor = null;
		_pCanvasElement.shadowOffsetX = 0;
		_pCanvasElement.shadowOffsetY = 0;
		_pCanvasElement.shadowBlur = 0;
		_pCanvasElement.font = null;
		_pCanvasElement.textAlign = "left";
		_pCanvasElement.textBaseline = 0;
		_pCanvasElement.globalAlpha = 1;
		_pCanvasElement.globalCompositeOperation = 1;

		_pCanvasElement._fillStyle_rgb = "#000000";
		_pCanvasElement.strokeStyle_rgb = "#000000";
		_pCanvasElement.shadowColor_rgb = "#000000";

		_pCanvasElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				var _handle = this._handle;
				if (!_handle) {
					this._owner_elem = _owner_elem;
					var _win_handle = _owner_elem.getRootWindowHandle();
					_handle = nexacro.__createCanvasElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);

					if (!this.font) {
						this.font = new nexacro.Style_font("8px Arial");
						nexacro.__setCanvasElementHandleFont(_handle, this.font.face, this.font.size, this.font._bold, this.font._italic, this.font._underline, this.font._strikeout, this.font._antialias);
					}

					if (!this.visible) {
						nexacro.__setElementHandleVisible(_handle, false);
					}

					this._handle = _handle;
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);
				}
			}
		};

		_pCanvasElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;
			}
			this.parent = null;
			this._parent_elem = null;
		};


		_pCanvasElement.setElementFillStyle = function (fillstyle) {
			var _handle = this._handle;
			if (_handle && fillstyle) {
				this.fillStyle = fillstyle;
				if (fillstyle instanceof nexacro.Style_color) {
					nexacro.__setCanvasElementHandleFillColor(_handle, nexacro._getWebColorFromXreColor(fillstyle.value));
				}
				else {
					nexacro.__setCanvasFillGradation(_handle, fillstyle.style, fillstyle._start_x, fillstyle._start_y, nexacro._getWebColorFromXreColor(fillstyle.start_color), fillstyle._end_x, fillstyle._end_y, nexacro._getWebColorFromXreColor(fillstyle.end_color), fillstyle._sysvalue);
				}
			}
		};

		_pCanvasElement.setElementFont = function (font) {
			if (!font) {
				return;
			}
			this.font = font;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setCanvasElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
			}
		};

		_pCanvasElement.setElementGlobalAlpha = function (alpha) {
			if (alpha < 0) {
				alpha = 0;
			}
			if (alpha > 1) {
				alpha = 1;
			}

			this.globalAlpha = alpha;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setCanvasElementHandleGlobalAlpha(_handle, alpha);
			}
		};

		_pCanvasElement.setElementGlobalCompositeOperation = function (operation) {
			this.globalCompositeOperation = operation;
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setCanvasElementHandleGlobalCompositoperation(_handle, operation);
			}
		};

		_pCanvasElement.setElementLineCap = function (captype) {
			var _handle = this._handle;
			if (_handle) {
				this.lineCap = captype;
				nexacro.__setCanvasElementHandleLineCap(_handle, captype);
			}
		};

		_pCanvasElement.setElementLineJoin = function (jointype) {
			var _handle = this._handle;
			if (_handle) {
				this.lineJoin = jointype;
				nexacro.__setCanvasElementHandleLineJoin(_handle, jointype);
			}
		};

		_pCanvasElement.setElementLineWidth = function (size) {
			var _handle = this._handle;
			if (_handle && isFinite(size)) {
				this.lineWidth = size;
				this.lineOffset = Math.round(size / 2);
				nexacro.__setCanvasElementHandleLineWidth(_handle, size);
			}
		};

		_pCanvasElement.setElementMiterLimit = function (size) {
			var _handle = this._handle;
			if (_handle) {
				this.miterLimit = size;
				nexacro.__setCanvasElementHandleMiterLimit(_handle, size);
			}
		};

		_pCanvasElement.setElementShadowBlur = function (fact) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowBlur = fact;
				nexacro.__setCanvasElementHandleShadowBlur(_handle, fact);
			}
		};

		_pCanvasElement.setElementShadowColor = function (color) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowColor = color;
				nexacro.__setCanvasElementHandleShadowColor(_handle, nexacro._getWebColorFromXreColor(color.value));
			}
		};

		_pCanvasElement.setElementShadowOffsetX = function (sx) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowOffsetX = sx;
				nexacro.__setCanvasElementHandleShadowOffsetx(_handle, sx);
			}
		};

		_pCanvasElement.setElementShadowOffsetY = function (sy) {
			var _handle = this._handle;
			if (_handle) {
				this.shadowOffsetY = sy;
				nexacro.__setCanvasElementHandleShadowOffsety(_handle, sy);
			}
		};

		_pCanvasElement.setElementStrokeStyle = function (color) {
			var _handle = this._handle;
			if (_handle && color) {
				this.strokeStyle = color;
				nexacro.__setCanvasElementHandleStrokeColor(_handle, nexacro._getWebColorFromXreColor(color.value));
			}
		};

		_pCanvasElement.setElementTextAlign = function (textalign) {
			var _handle = this._handle;
			if (_handle) {
				this.textAlign = textalign;
				nexacro.__setCanvasElementHandleTextAlign(_handle, textalign);
			}
		};

		_pCanvasElement.setElementTextBaseline = function (basealign) {
			var _handle = this._handle;
			if (_handle) {
				this.textBaseline = basealign;
				nexacro.__setCanvasElementHandleTextBaseline(_handle, basealign);
			}
		};


		_pCanvasElement.arc = function (x, y, r, start_rad, end_rad, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r, start_rad, end_rad, counterclockwise);
			}
		};

		_pCanvasElement.arcTo = function (x, y, x2, y2, r) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleArcToPath(_handle, x, y, x2, y2, r);
			}
		};

		_pCanvasElement.beginPath = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.bezierCurveTo = function (p1x, p1y, p2x, p2y, x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleBezierCurveToPath(_handle, p1x, p1y, p2x, p2y, x, y);
			}
		};

		_pCanvasElement.clearRect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__clearCanvasElementHandleRect(_handle, x, y, dx, dy);
			}
		};

		_pCanvasElement.clip = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__clipCanvasElementHandle(_handle);
			}
		};

		_pCanvasElement.closePath = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleClosePath(_handle);
			}
		};

		_pCanvasElement.createImageData = function (iWidth, iHeight) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__createCanvasElementHandleImageData(_handle, iWidth, iHeight);
			}
		};

		_pCanvasElement.drawImage = function (_image_handle, x, y, imgwidth, imgheight) {
			var _handle = this._handle;
			if (_handle) {
				var absoluteUrl = _image_handle.src;
				if (absoluteUrl && absoluteUrl.substring(0, 4).toLowerCase() == "url(") {
					absoluteUrl = absoluteUrl.substring(5, absoluteUrl.length - 2);
				}
				if (absoluteUrl && !nexacro._isAbsolutePath(absoluteUrl)) {
					var base_url = this._parent_elem._getElementBaseUrl();
					absoluteUrl = nexacro._getImageLocation(absoluteUrl);
				}
				nexacro.__drawCanvasElementHandleImage(_handle, absoluteUrl, x, y, imgwidth, imgheight);
			}
		};

		_pCanvasElement.fill = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__fillCanvasElementHandlePath(_handle);
			}
		};

		_pCanvasElement.fillRect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__fillCanvasElementHandleRect(_handle, x, y, dx, dy);
			}
		};

		_pCanvasElement.fillText = function (text, x, y, maxwidth) {
			var _handle = this._handle;
			if (_handle) {
				var font = this.font;
				if (font) {
					nexacro.__setCanvasElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}

				var color = this.fillStyle;
				if (color) {
					nexacro.__setCanvasElementHandleFillColor(_handle, nexacro._getWebColorFromXreColor(color.value));
				}

				nexacro.__fillCanvasElementHandleText(_handle, text, x, y, maxwidth);
			}
		};

		_pCanvasElement.getImageData = function (sx, sy, width, height) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__getCanvasElementHandleImageData(_handle, sx, sy, width, height);
			}
		};

		_pCanvasElement.isPointInPath = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__isPointInCanvasElementHandlePath(_handle, x, y);
			}
		};

		_pCanvasElement.lineTo = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x, y);
			}
		};

		_pCanvasElement.moveTo = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleMoveToPath(_handle, x, y);
			}
		};

		_pCanvasElement.putImageData = function (_image_handle, sx, sy, ix, iy, iwidth, iheight) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__putCanvasElementHandleImageData(_handle, _image_handle, sx, sy, ix, iy, iwidth, iheight);
			}
		};

		_pCanvasElement.quadraticCurveTo = function (cp1x, cp1y, cp2x, cp2y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleQuadraticCurveToPath(_handle, cp1x, cp1y, cp2x, cp2y);
			}
		};

		_pCanvasElement.rect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleRectPath(_handle, x, y, dx, dy);
			}
		};

		_pCanvasElement.rotate = function (angle) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__rotateCanvasElementHandle(_handle, angle);
			}
		};

		_pCanvasElement.rotate2 = function (radian) {
			var _handle = this._handle;
			if (_handle) {
				var angle = radian * Math.PI / 180;
				nexacro.__rotateCanvasElementHandle(_handle, angle);
			}
		};

		_pCanvasElement.scale = function (dx, dy) {
			var _handle = this._handle;
			this.scalex = dx;
			this.scaley = dy;
			if (_handle) {
				nexacro.__scaleCanvasElementHandle(_handle, dx, dy);
			}
		};

		_pCanvasElement.setTransform = function (a, b, c, d, e, f) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__setCanvasElementHandleTransform(_handle, a, b, c, d, e, f);
			}
		};

		_pCanvasElement.stroke = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__strokeCanvasElementHandlePath(_handle);
			}
		};

		_pCanvasElement.strokeRect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__strokeCanvasElementHandleRect(_handle, x, y, dx, dy);
			}
		};

		_pCanvasElement.strokeText = function (text, tx, ty, maxwidth) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__strokeCanvasElementHandleText(_handle, text, tx, ty, maxwidth);
			}
		};

		_pCanvasElement.transform = function (a, b, c, d, e, f) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__transformCanvasElementHandle(_handle, a, b, c, d, e, f);
			}
		};

		_pCanvasElement.translate = function (x, y) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__translateCanvasElementHandle(_handle, x, y);
			}
		};


		_pCanvasElement.arc2 = function (x, y, r, start_deg, end_deg, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				var start_rad = start_deg * Math.PI / 180;
				var end_rad = end_deg * Math.PI / 180;
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r, start_rad, end_rad, counterclockwise);
			}
		};

		_pCanvasElement.circle = function (x, y, r) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r, 0, 2 * Math.PI, true);
			}
		};

		_pCanvasElement.drawStrokeArc = function (x, y, r, start_deg, end_deg, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				this.arc(x, y, r, start_deg, end_deg, counterclockwise);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeArc2 = function (x, y, r, start_deg, end_deg, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				this.arc2(x, y, r, start_deg, end_deg, counterclockwise);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeCircle = function (x, y, r) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r, 0, 2 * Math.PI, true);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeHalfRect = function (x, y, w, h) {
			var _handle = this._handle;
			if (_handle) {
				this.halfRect(x, y, w, h);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeLine = function (x1, y1, x2, y2) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleMoveToPath(_handle, x1, y1);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x2, y2);
				this.drawStroke();
			}
		};

		_pCanvasElement.drawStrokeVLine = function (x, y1, y2) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleMoveToPath(_handle, x, y1);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x, y2);
				this.drawStroke();
			}
		};

		_pCanvasElement.drawStrokeHLine = function (y, x1, x2) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleMoveToPath(_handle, x1, y);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x2, y);
				this.drawStroke();
			}
		};

		_pCanvasElement.drawStrokeInsetArc = function (x, y, r, start_deg, end_deg, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				var gap = this.lineOffset;
				start_deg = start_deg * (Math.PI / 180);
				end_deg = end_deg * (Math.PI / 180);
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r - gap, start_deg, end_deg, counterclockwise);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeInsetCircle = function (x, y, r) {
			var _handle = this._handle;
			if (_handle) {
				var gap = this.lineOffset;
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r - gap, 0, 2 * Math.PI, true);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeInsetRect = function (x, y, w, h) {
			var _handle = this._handle;
			if (_handle) {
				this.insetRect(x, y, w, h);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStrokeRect = function (x, y, w, h) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleRectPath(_handle, x, y, w, h);
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawFillRect = function (x, y, dx, dy) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleRectPath(_handle, x, y, dx, dy);
				nexacro.__fillCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawFillText = function (text, x, y, maxwidth) {
			var _handle = this._handle;
			if (_handle) {
				var font = this.font;
				if (font) {
					nexacro.__setCanvasElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}

				var color = this.fillStyle;
				if (color) {
					nexacro.__setCanvasElementHandleFillColor(_handle, nexacro._getWebColorFromXreColor(color.value));
				}

				nexacro.__fillCanvasElementHandleText(_handle, text, x, y, maxwidth);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.endDraw = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
				nexacro.__plotCanvasElementHandleClosePath(_handle);
			}
		};

		_pCanvasElement.drawFill = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__fillCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawStroke = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__strokeCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawFillArc = function (x, y, r, start_rad, end_rad, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				this.arc(x, y, r, start_rad, end_rad, counterclockwise);
				nexacro.__plotCanvasElementHandleClosePath(_handle);
				nexacro.__fillCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawFillArc2 = function (x, y, r, start_deg, end_deg, counterclockwise) {
			var _handle = this._handle;
			if (_handle) {
				this.arc2(x, y, r, start_deg, end_deg, counterclockwise);
				nexacro.__plotCanvasElementHandleClosePath(_handle);
				nexacro.__fillCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.drawFillCircle = function (x, y, r) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleArcPath(_handle, x, y, r, 0, 2 * Math.PI, true);
				nexacro.__fillCanvasElementHandlePath(_handle);
				nexacro.__plotCanvasElementHandleBeginPath(_handle);
			}
		};

		_pCanvasElement.halfRect = function (x, y, w, h) {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__plotCanvasElementHandleMoveToPath(_handle, x, y);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x, y + h);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x + w, y + h);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x + w, y);
			}
		};

		_pCanvasElement.hline = function (y, x1, x2) {
			this.moveTo(x1, y);
			this.lineTo(x2, y);
		};

		_pCanvasElement.vline = function (x, y1, y2) {
			this.moveTo(x, y1);
			this.lineTo(x, y2);
		};

		_pCanvasElement.insetRect = function (x, y, w, h) {
			var _handle = this._handle;
			if (_handle) {
				if (w == 0 || h == 0) {
					return;
				}
				var gap = this.lineOffset;
				var wgap = (w > 0) ? gap : -gap;
				var hgap = (h > 0) ? gap : -gap;
				nexacro.__plotCanvasElementHandleMoveToPath(_handle, x + wgap, y + hgap);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x + wgap, y + h - hgap);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x + w - wgap, y + h - hgap);
				nexacro.__plotCanvasElementHandleLineToPath(_handle, x + w - wgap, y + hgap);
				nexacro.__plotCanvasElementHandleClosePath(_handle);
			}
		};

		_pCanvasElement.save = function () {
			var _handle = this._handle;
			if (_handle) {
				nexacro.__saveCanvasElementHandle(_handle);
			}
		};
		_pCanvasElement.restore = function () {
			var _handle = this._handle;
			if (_handle) {
				return nexacro.__restoreCanvasElementHandle(_handle);
			}
		};

		_pCanvasElement.drawBorder = function (x, y, width, height, border, bordertype) {
			if (border && !border._is_empty) {
				if (border._linecnt == 1) {
					if (border.width && border.color != "" && border.color != "transparent") {
						var color = new nexacro.Style_color(border.color);
						this.setElementStrokeStyle(color);
						this.setElementLineWidth(border.width);
						this.drawStrokeInsetRect(x, y, width, height);
					}
				}
				else if (border._linecnt == 2) {
					if (border.top._isValid()) {
						this._setLineStyle(border.top);
						var offset = border.top._width / 2;
						this.moveTo(x, y + offset);
						this.lineTo(x + width, y + offset);
						this.moveTo(x, y + height - offset);
						this.lineTo(x + width, y + height - offset);
						this.stroke();
					}
					if (border.right._isValid()) {
						this._setLineStyle(border.right);
						var offset = border.right._width / 2;
						this.moveTo(x + width - offset, y);
						this.lineTo(x + width - offset, y + height);
						this.moveTo(x + offset, y);
						this.lineTo(x + offset, y + height);
						this.stroke();
					}
				}
				else if (border._linecnt == 3) {
					if (border.top._isValid()) {
						this._setLineStyle(border.top);
						var offset = border.top._width / 2;
						this.moveTo(x, y + offset);
						this.lineTo(x + width, y + offset);
						this.stroke();
					}
					if (border.right._isValid()) {
						this._setLineStyle(border.right);
						var offset = border.right._width / 2;
						this.moveTo(x + width - offset, y);
						this.lineTo(x + width - offset, y + height);
						this.moveTo(x + offset, y);
						this.lineTo(x + offset, y + height);
						this.stroke();
					}
					if (border.bottom._isValid()) {
						this._setLineStyle(border.bottom);
						var offset = border.bottom._width / 2;
						this.moveTo(x, y + width - offset);
						this.lineTo(x + width, y + width - offset);
						this.stroke();
					}
				}
				else {
					if (border.top._isValid()) {
						this._setLineStyle(border.top);
						var offset = border.top._width / 2;
						this.moveTo(x, y + offset);
						this.lineTo(x + width, y + offset);
						this.stroke();
					}
					if (border.right._isValid()) {
						this._setLineStyle(border.right);
						var offset = border.right._width / 2;
						this.moveTo(x + width - offset, y);
						this.lineTo(x + width - offset, y + height);
						this.stroke();
					}
					if (border.bottom._isValid()) {
						this._setLineStyle(border.bottom);
						var offset = border.bottom._width / 2;
						this.moveTo(x, y + width - offset);
						this.lineTo(x + width, y + width - offset);
						this.stroke();
					}
					if (border.left._isValid()) {
						this._setLineStyle(border.left);
						var offset = border.left._width / 2;
						this.moveTo(x + offset, y);
						this.lineTo(x + offset, y + height);
						this.stroke();
					}
				}
			}
		};

		_pCanvasElement.toDataURL = function () {
		};

		_pCanvasElement._setLineStyle = function (line) {
			if (line && line._isValid()) {
				this.setElementStrokeStyle(line.color);
				this.setElementLineWidth(line.width);
			}
		};

		_pCanvasElement._setPenStyle = function (pen) {
			if (pen && pen._isValid()) {
				this.setElementStrokeStyle(pen.color);
				this.setElementLineWidth(pen.width);
			}
		};

		_pCanvasElement._moveCanvas = function (left, top, width, height) {
			this.left = left || 0;
			this.top = top || 0;
			this.width = width || 0;
			this.height = height || 0;

			var _handle = this._handle;
			if (_handle) {
				nexacro.__setElementHandleSize(_handle, width, height);
				nexacro.__setElementHandlePosition(_handle, left, top);
			}
		};

		_pCanvasElement = null;

		nexacro.GridScrollableControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			this._target_vscroll_elements = null;
			this._target_hscroll_elements = null;
			var client_element = new nexacro.ContainerElement(this);
			this._client_element = client_element;
		};
		var _pGridScrollableControlElement = nexacro._createPrototype(nexacro.ControlElementBase, nexacro.GridScrollableControlElement);
		nexacro.GridScrollableControlElement.prototype = _pGridScrollableControlElement;
		_pGridScrollableControlElement._type_name = "GridScrollableControlElement";

		_pGridScrollableControlElement.scroll_left = 0;
		_pGridScrollableControlElement.scroll_top = 0;
		_pGridScrollableControlElement.container_maxwidth = 0;
		_pGridScrollableControlElement.container_maxheight = 0;
		_pGridScrollableControlElement._hscroll_visible = false;
		_pGridScrollableControlElement._vscroll_visible = false;
		_pGridScrollableControlElement._hscroll_height = 0;
		_pGridScrollableControlElement._vscroll_width = 0;
		_pGridScrollableControlElement._hscroll_left = 0;
		_pGridScrollableControlElement._hscroll_top = 0;
		_pGridScrollableControlElement._hscroll_width = 0;
		_pGridScrollableControlElement._vscroll_left = 0;
		_pGridScrollableControlElement._vscroll_top = 0;
		_pGridScrollableControlElement._vscroll_height = 0;
		_pGridScrollableControlElement.hscroll_limit = 0;
		_pGridScrollableControlElement.vscroll_limit = 0;
		_pGridScrollableControlElement._scroll_showtype = -1;
		_pGridScrollableControlElement._scrollview_width_top = 0;
		_pGridScrollableControlElement._hscroll_control = null;
		_pGridScrollableControlElement._vscroll_control = null;
		_pGridScrollableControlElement._resizebutton_element = null;
		_pGridScrollableControlElement._scroll_overlap = false;

		_pGridScrollableControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.position_step);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _win_handle = _owner_elem.getRootWindowHandle();
					var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);

					this._handle = _handle;
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}
					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};

		_pGridScrollableControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;

				this._client_element.destroy();
				this.linkedcontrol = null;

				this._target_vscroll_elements = null;
				this._target_hscroll_elements = null;
				this._hscroll_control = null;
				this._vscroll_control = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pGridScrollableControlElement.clearContents = function () {
			if (this._handle) {
				this._client_element.clearContents();
			}
		};

		_pGridScrollableControlElement.getContainerElement = function () {
			return this._client_element;
		};

		_pGridScrollableControlElement.setVertScrollElements = function (elems) {
			this._target_vscroll_elements = elems;
		};

		_pGridScrollableControlElement.setHorzScrollElements = function (elems) {
			this._target_hscroll_elements = elems;
		};

		_pGridScrollableControlElement.setContainerVScrollPos = function (pos) {
			var vert_elems = this._target_vscroll_elements;
			if (vert_elems) {
				if (nexacro._isArray(vert_elems)) {
					var elem;
					for (var i = 0, n = vert_elems.length; i < n; i++) {
						elem = vert_elems[i];
						elem.setElementVScrollPos(pos);
					}
				}
				else {
					vert_elems.setElementVScrollPos(pos);
				}
				if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
					this._refreshForeground(this._handle);
				}
			}
		};

		_pGridScrollableControlElement.setContainerHScrollPos = function (pos) {
			var horz_elems = this._target_hscroll_elements;
			if (horz_elems) {
				if (nexacro._isArray(horz_elems)) {
					var elem;
					for (var i = 0, n = horz_elems.length; i < n; i++) {
						elem = horz_elems[i];
						elem.setElementHScrollPos(pos);
					}
				}
				else {
					horz_elems.setElementHScrollPos(pos);
				}
				if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
					this._refreshForeground(this._handle);
				}
			}
		};

		_pGridScrollableControlElement.setContainerMaxHeight = function (height) {
			var vert_elems = this._target_vscroll_elements;
			if (vert_elems) {
				this.container_maxheight = height;
				if (nexacro._isArray(vert_elems)) {
					var elem;
					for (var i = 0, n = vert_elems.length; i < n; i++) {
						elem = vert_elems[i];
						elem._setContainerMaxHeight(height);
					}
				}
				else {
					vert_elems._setContainerMaxHeight(height);
				}
			}
		};

		_pGridScrollableControlElement.setContainerMaxWidth = function (width) {
			var horz_elems = this._target_hscroll_elements;
			if (horz_elems) {
				this.container_maxwidth = width;
				if (nexacro._isArray(horz_elems)) {
					var elem;
					for (var i = 0, n = horz_elems.length; i < n; i++) {
						elem = horz_elems[i];
						elem._setContainerMaxWidth(width);
					}
				}
				else {
					horz_elems._setContainerMaxWidth(width);
				}
			}
		};

		_pGridScrollableControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var client_element = this._client_element;
			if (this._scroll_showtype > 0) {
				var v_elements = this._target_vscroll_elements, v_element = v_elements, h_elements = this._target_hscroll_elements, h_element = h_elements;
				if (nexacro._isArray(v_elements)) {
					v_element = v_elements[0];
				}
				if (nexacro._isArray(h_elements)) {
					h_element = h_elements[0];
				}

				var v_client_height = (v_element) ? v_element._calculateClientHeight(client_height - this.client_height) : client_height - this.client_height;
				var h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
				var maxheight = (v_element) ? v_element._getContainerMaxHeight() : 0;
				var maxwidth = (h_element) ? h_element._getContainerMaxWidth() : 0;
				var scrollLeft = (h_element) ? h_element._getScrollLeft() : 0;
				var scrollTop = (v_element) ? v_element._getScrollTop() : 0;
				var hscroll_visible = false;
				var vscroll_visible = false;
				var hscroll_limit = 0;
				var vscroll_limit = 0;

				var step_count = this._step_count;
				var hscroll_hidden = false;
				var scroll_showtype = this._scroll_showtype;

				if (scroll_showtype == 1) {
					if (this._vscroll_control && maxheight > v_client_height) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight - v_client_height;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control && maxwidth > h_client_width) {
						hscroll_visible = true;
						client_height -= this._hscroll_height;

						v_client_height = (v_element) ? v_element._calculateClientHeight(client_height - this.client_height) : client_height - this.client_height;
						if (this._vscroll_control && maxheight > v_client_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= this._vscroll_width;
								h_client_width -= this._vscroll_width;
							}
							vscroll_limit = maxheight - v_client_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}
				else if (scroll_showtype == 2) {
					if (this._vscroll_control) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight + this._hscroll_height - v_client_height;
					}
					if (step_count > 0 && step_containers) {
						maxwidth = step_count * this.client_width;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}
				else if (scroll_showtype == 31) {
					if (this._vscroll_control) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;
						vscroll_limit = maxheight - v_client_height;
					}
					if (step_count > 0 && step_containers) {
						maxwidth = step_count * this.client_width;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control && maxwidth > h_client_width) {
						hscroll_visible = true;
						client_height -= this._hscroll_height;
						v_client_height = (v_element) ? v_element._calculateClientHeight(client_height - this.client_height) : client_height - this.client_height;
						if (this._vscroll_control && maxheight > v_client_height) {
							if (!vscroll_visible) {
								vscroll_visible = true;
								client_width -= this._vscroll_width;
								h_client_width = (h_element) ? h_element._calculateClientWidth(-this._vscroll_width) : -this._vscroll_width;
							}
							vscroll_limit = maxheight - v_client_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}
				else if (scroll_showtype == 32) {
					if (this._vscroll_control && maxheight > v_client_height) {
						vscroll_visible = true;
						client_width -= this._vscroll_width;

						vscroll_limit = maxheight + this._hscroll_height - v_client_height;
					}
					if (step_count > 0 && step_containers) {
						maxwidth = step_count * this.client_width;
					}
					h_client_width = (h_element) ? h_element._calculateClientWidth(client_width - this.client_width) : client_width - this.client_width;
					if (this._hscroll_control) {
						if (!hscroll_hidden) {
							hscroll_visible = true;
							client_height -= this._hscroll_height;
						}
						hscroll_limit = maxwidth - h_client_width;
					}
				}

				if (hscroll_limit < 0) {
					hscroll_limit = 0;
				}
				if (vscroll_limit < 0) {
					vscroll_limit = 0;
				}

				var reset_vlimit = false;
				var reset_hlimit = false;
				if (this.hscroll_limit != hscroll_limit) {
					reset_hlimit = true;
					this.hscroll_limit = hscroll_limit;
				}
				if (this.vscroll_limit != vscroll_limit) {
					reset_vlimit = true;
					this.vscroll_limit = vscroll_limit;
				}

				var reset_vscroll = false;
				var reset_hscroll = false;
				var reset_vscroll_enable = false;
				var reset_hscroll_enable = false;

				if (scrollTop > vscroll_limit) {
					reset_vscroll = true;
					scrollTop = vscroll_limit;
				}
				if (scrollLeft > hscroll_limit) {
					reset_hscroll = true;
					scrollLeft = hscroll_limit;
				}

				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}

				if (reset_hscroll) {
					this.setElementHScrollPos(scrollLeft);
				}
				if (reset_vscroll) {
					this.setElementVScrollPos(scrollTop);
				}

				if (this._vscroll_control) {
					if (this._vscroll_control.parent.enable != this._vscroll_control.enable) {
						reset_vscroll_enable = true;
					}

					if (vscroll_visible) {
						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, v_client_height, v_client_height, true, scrollTop);
						}
						else {
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, v_client_height, v_client_height, true, scrollTop);
							if (reset_vscroll) {
								this._vscroll_control._setScrollPos(scrollTop);
							}
						}

						if (reset_vscroll_enable) {
							this._vscroll_control._setEnable(this._vscroll_control.parent.enable);
						}

						if (!this._vscroll_visible) {
							this._vscroll_visible = true;
							this._vscroll_control.set_visible(true);
						}
					}
					else {
						if (this._vscroll_visible) {
							this._vscroll_visible = false;
							this._vscroll_control.set_visible(false);
						}

						if (this._vscroll_left != (client_left + client_width) || this._vscroll_top != client_top || this._vscroll_height != client_height || reset_vlimit) {
							this._vscroll_left = (client_left + client_width);
							this._vscroll_top = client_top;
							this._vscroll_height = client_height;
							this._vscroll_control._setScrollInfo(this._vscroll_left, client_top, this._vscroll_width, this._vscroll_height, 0, this.vscroll_limit, 30, v_client_height, v_client_height, false, scrollTop);
						}
						else if (reset_vscroll) {
							this._vscroll_control._setScrollPos(scrollTop);
						}

						if (reset_vscroll_enable) {
							this._vscroll_control._setEnable(this._vscroll_control.parent.enable);
						}
					}
				}
				if (this._hscroll_control) {
					if (this._hscroll_control.parent.enable != this._hscroll_control.enable) {
						reset_hscroll_enable = true;
					}

					if (hscroll_visible) {
						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;
							this._hscroll_control._setScrollInfo(client_left, this._hscroll_top, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, h_client_width, h_client_width, true, scrollLeft);
						}
						else if (reset_hscroll) {
							this._hscroll_control._setScrollPos(scrollLeft);
						}

						if (reset_hscroll_enable) {
							this._hscroll_control._setEnable(this._hscroll_control.parent.enable);
						}

						if (!this._hscroll_visible) {
							this._hscroll_visible = true;
							this._hscroll_control.set_visible(true);
						}
					}
					else {
						if (this._hscroll_visible) {
							this._hscroll_visible = false;
							this._hscroll_control.set_visible(false);
						}

						if (this._hscroll_left != client_left || this._hscroll_top != (client_top + client_height) || this._hscroll_width != client_width || reset_hlimit) {
							this._hscroll_left = client_left;
							this._hscroll_top = (client_top + client_height);
							this._hscroll_width = client_width;
							this._hscroll_control._setScrollInfo(client_left, this._hscroll_top, this._hscroll_width, this._hscroll_height, 0, this.hscroll_limit, 30, h_client_width, h_client_width, false, scrollLeft);
						}
						else if (reset_hscroll) {
							this._hscroll_control._setScrollPos(scrollLeft);
						}

						if (reset_hscroll_enable) {
							this._hscroll_control._setEnable(this._hscroll_control.parent.enable);
						}
					}
				}
			}
			else {
				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
		};
		_pGridScrollableControlElement.appendChildElement = function (child_elem) {
			if (this._handle) {
				if (child_elem._parent_elem != this) {
					if (child_elem._handle) {
						var old_win_handle = child_elem.getRootWindowHandle();
						var new_win_handle = this._client_element.getRootWindowHandle();
						if (old_win_handle != new_win_handle) {
							child_elem._parent_elem = this;
							child_elem._destroyElementHandle();
						}
						else {
							child_elem._parent_elem = this;
						}
					}
					else {
						child_elem._parent_elem = this;
					}
				}

				if (!child_elem._handle) {
					child_elem.create();
				}
				else {
					child_elem._appendToContainer(this._client_element);
				}
			}
		};
		_pGridScrollableControlElement.removeChildElement = function (child_elem) {
			if (child_elem._parent_elem == this) {
				child_elem._removeFromContainer();
			}
		};

		_pGridScrollableControlElement.sendToBackElement = function (cur_elem) {
			this._client_element.sendToBackElement(cur_elem);
		};
		_pGridScrollableControlElement.bringToFrontElement = function (cur_elem) {
			this._client_element.bringToFrontElement(cur_elem);
		};
		_pGridScrollableControlElement.moveToNextElement = function (cur_elem, target_elem) {
			this._client_element.moveToNextElement(cur_elem, target_elem);
		};
		_pGridScrollableControlElement.moveToPrevElement = function (cur_elem, target_elem) {
			this._client_element.moveToPrevElement(cur_elem, target_elem);
		};


		_pGridScrollableControlElement.setScrollControls = function (hscroll_control, vscroll_control, hscroll_height, vscroll_width, scroll_showtype) {
			var recalc = false;
			if (this._scroll_showtype != scroll_showtype) {
				this._scroll_showtype = scroll_showtype;
				recalc = true;
			}

			if (this._hscroll_control != hscroll_control) {
				if (hscroll_control) {
					this._hscroll_visible = true;
					hscroll_control._is_nc_control = true;
					this._hscroll_control = hscroll_control;
					if (this._hscroll_height != hscroll_height) {
						this._hscroll_height = hscroll_height;
						recalc = true;
					}
				}
				else {
					this._hscroll_control = null;
					if (this._hscroll_height) {
						this._hscroll_height = 0;
						recalc = true;
					}
					this._hscroll_left = 0;
					this._hscroll_top = 0;
					this._hscroll_width = 0;
				}
			}

			if (this._vscroll_control != vscroll_control) {
				if (vscroll_control) {
					this._vscroll_visible = true;
					vscroll_control._is_nc_control = true;
					this._vscroll_control = vscroll_control;
					if (this._vscroll_width != vscroll_width) {
						this._vscroll_width = vscroll_width;
						recalc = true;
					}
				}
				else {
					this._vscroll_control = null;
					if (this._vscroll_width) {
						this._vscroll_width = 0;
						recalc = true;
					}
					this._vscroll_left = 0;
					this._vscroll_top = 0;
					this._vscroll_height = 0;
				}
			}

			if (recalc) {
				this._updateClientSize();
			}
		};

		_pGridScrollableControlElement._arrangeBandOrder = nexacro._emptyFn;

		_pGridScrollableControlElement.setElementHScrollPos = function (hpos) {
			var h_element = this._target_hscroll_elements;

			if (h_element) {
				if (nexacro._isArray(h_element)) {
					h_element = h_element[0];
				}
				if (hpos < 0) {
					hpos = 0;
				}
				if (hpos > this.hscroll_limit) {
					hpos = this.hscroll_limit;
				}
				var scrollLeft = h_element._getScrollLeft();
				if (scrollLeft != hpos || this._reset_scrollpos) {
					this.scroll_left = hpos;
					this.linkedcontrol._scroll_left = hpos;
					this.setContainerHScrollPos(hpos);
					if (this._hscroll_control) {
						this._hscroll_control._setScrollPos(hpos);
					}
				}
			}
		};

		_pGridScrollableControlElement.setElementVScrollPos = function (vpos) {
			var v_element = this._target_vscroll_elements;

			if (v_element) {
				if (nexacro._isArray(v_element)) {
					v_element = v_element[0];
				}
				if (vpos < 0) {
					vpos = 0;
				}
				if (vpos > this.vscroll_limit) {
					vpos = this.vscroll_limit;
				}
				var scrollTop = v_element._getScrollTop();
				this.scroll_top = vpos;

				if (scrollTop != vpos || this._reset_scrollpos) {
					this.linkedcontrol._scroll_top = vpos;
					this.setContainerVScrollPos(vpos);
					if (this._vscroll_control && !this._vscroll_control._no_set_scrollinfo) {
						this._vscroll_control._setScrollPos(vpos);
					}
				}
			}
		};

		_pGridScrollableControlElement.setElementScrollPos = function (hpos, vpos) {
			var v_element = this._target_vscroll_element;
			var h_element = this._target_hscroll_element;

			if (h_element) {
				if (nexacro._isArray(h_element)) {
					h_element = h_element[0];
				}
				if (hpos < 0) {
					hpos = 0;
				}
				if (hpos > this.hscroll_limit) {
					hpos = this.hscroll_limit;
				}

				var scrollLeft = h_element._getScrollLeft();
				if (scrollLeft != hpos) {
					this.scroll_left = hpos;
					this.linkedcontrol._scroll_left = hpos;
					this.setContainerHScrollPos(hpos);
					if (this._hscroll_control && !this._hscroll_control._no_set_scrollinfo) {
						this._hscroll_control._setScrollPos(hpos);
					}
				}
			}
			if (v_element) {
				if (nexacro._isArray(v_element)) {
					v_element = v_element[0];
				}
				if (vpos < 0) {
					vpos = 0;
				}
				if (vpos > this.vscroll_limit) {
					vpos = this.vscroll_limit;
				}

				var scrollTop = v_element._getScrollTop();
				if (scrollTop != vpos) {
					this.scroll_top = vpos;
					this.linkedcontrol._scroll_top = vpos;
					this.setContainerVScrollPos(vpos);
					if (this._vscroll_control && !this._vscroll_control._no_set_scrollinfo) {
						this._vscroll_control._setScrollPos(vpos);
					}
				}
			}
		};

		_pGridScrollableControlElement._setInnerElementScrollMaxSize = nexacro._emptyFn;

		_pGridScrollableControlElement.setElementScrollMaxSize = function (width, height) {
			var v_element = this._target_vscroll_elements;
			if (nexacro._isArray(v_element)) {
				v_element = v_element[0];
			}
			var h_element = this._target_hscroll_elements;
			if (nexacro._isArray(h_element)) {
				h_element = h_element[0];
			}
			var maxheight = (v_element) ? v_element._getContainerMaxHeight() : 0;
			var maxwidth = (h_element) ? h_element._getContainerMaxWidth() : 0;
			var retn = false;

			if (maxwidth != width || maxheight != height) {
				if (maxheight != height) {
					this.setContainerMaxHeight(height);
				}
				if (maxwidth != width) {
					this.setContainerMaxWidth(width);
				}
				retn = true;
			}

			if (v_element && this._scroll_showtype >= 0) {
				this._updateClientSize();
			}

			return retn;
		};

		_pGridScrollableControlElement.setElementScrollMaxHeight = function (width, update) {
			var h_element = this._target_hscroll_elements;
			if (h_element) {
				if (nexacro._isArray(h_element)) {
					h_element = h_element[0];
				}
				var maxwidth = h_element._getContainerMaxWidth();
				if (maxwidth != width) {
					if (maxwidth != width) {
						this.setContainerMaxWidth(width);
					}
					if (update && this._scroll_showtype >= 0) {
						this._updateClientSize();
					}

					return true;
				}
			}
			return false;
		};

		_pGridScrollableControlElement._setScrollMaxHeight = function (height, update) {
			var v_element = this._target_vscroll_elements;
			if (v_element) {
				if (nexacro._isArray(v_element)) {
					v_element = v_element[0];
				}
				var maxheight = v_element._getContainerMaxHeight();
				if (maxheight != height) {
					if (maxheight != height) {
						this.setContainerMaxHeight(height);
					}
					if (update && this._scroll_showtype >= 0) {
						this._updateClientSize();
					}

					return true;
				}
			}
			return false;
		};

		_pGridScrollableControlElement.setElementScrollbarSize = function (width, height) {
			if (this._vscroll_width != width || this._hscroll_height != height) {
				this._vscroll_width = width;
				this._hscroll_height = height;
				if (this._scroll_showtype >= 0) {
					this._updateClientSize();
				}

				return true;
			}
			return false;
		};
		delete _pGridScrollableControlElement;

		nexacro.GridBandControlElement = function (parent_elem, type) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._type = type;
			this._client_element = new nexacro.GridBandContainerElement(this);
			this._client_element_fix = null;
			this._fix_height = 0;
			this.container_maxwidth = 0;
			this.container_maxheight = 0;
		};

		var _pGridBandControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.GridBandControlElement);
		nexacro.GridBandControlElement.prototype = _pGridBandControlElement;

		_pGridBandControlElement._type_name = "GridBandControlElement";

		_pGridBandControlElement.scroll_left = 0;
		_pGridBandControlElement.scroll_top = 0;

		_pGridBandControlElement.create = function () {
			nexacro.ControlElement.prototype.create.call(this);

			if (this._client_element_fix) {
				this._client_element_fix.create();
			}
		};

		_pGridBandControlElement.destroy = function () {
			if (this._client_element_fix) {
				this._client_element_fix.destroy();
				this._client_element_fix = null;
			}
			return nexacro.ControlElement.prototype.destroy.call(this);
		};

		_pGridBandControlElement._setFixArea = function (height) {
			this._fix_height = height;

			if (!this._client_element_fix) {
				this._client_element_fix = new nexacro.GridBandContainerElement(this, true);
			}

			if (this._handle && !this._client_element_fix._handle) {
				this._client_element_fix.create();
			}

			this._updateClientSize();
		};

		_pGridBandControlElement.getContainerElement = function (is_fixed) {
			if (is_fixed) {
				return this._client_element_fix;
			}

			return this._client_element;
		};

		_pGridBandControlElement._setContainerMaxHeight = function (height) {
			if (this._type == "body") {
				if (this.container_maxheight != height) {
					this.container_maxheight = height;
				}
			}
		};

		_pGridBandControlElement._resetExtendContainer = function () {
		};

		_pGridBandControlElement._calculateClientHeight = function (change_height) {
			var c_height = this.client_height + change_height + ((this.border) ? this.border._getBorderHeight() : 0);
			return c_height;
		};

		_pGridBandControlElement.setElementBorder = function (border, bordertype) {
			this.border = border;
			this.bordertype = bordertype;
			this._setControlBorder(this._handle, border, bordertype, true);
			this._updateClientSize();
			this._client_element._adjustPos();
		};

		_pGridBandControlElement._getContainerMaxHeight = function () {
			if (this._type == "body") {
				return this.container_maxheight;
			}
			else {
				return this.client_height;
			}
		};

		_pGridBandControlElement._getScrollLeft = function () {
			return this.scroll_left;
		};

		_pGridBandControlElement._getScrollTop = function () {
			if (this._type == "body") {
				return this.scroll_top;
			}
			else {
				return 0;
			}
		};

		_pGridBandControlElement._updateClientSize = function () {
			var client_left = 0;
			var client_top = 0;
			var client_width = this._inner_width;
			var client_height = this._inner_height;
			var border = this.border;

			if (border && !border._is_real_empty()) {
				client_width += border._getBorderWidth();
				client_height += border._getBorderHeight();
			}

			var fix_height = this._fix_height;

			client_top += fix_height;
			client_height -= fix_height;

			var client_element_fix = this._client_element_fix;
			if (client_element_fix) {
				client_element_fix.setElementPosition(client_left, 0, this._bChangeRtl);
				client_element_fix.setElementSize(client_width, fix_height);
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top || this._bChangeRtl) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top, this._bChangeRtl);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
			else {
				this.client_left = client_left;
				this.client_top = client_top;
				this.client_width = client_width;
				this.client_height = client_height;
			}
		};

		_pGridBandControlElement.setElementVScrollPos = function (vpos) {
			if (this._type == "body") {
				this._client_element.setElementVScrollPos(vpos);
				this.scroll_top = vpos;
			}
		};

		_pGridBandControlElement._setOnScrollCallbackFunc = function (target, func) {
			if (this._type == "body") {
				this._client_element._callback_onscroll = func;
				this._client_element._grid = target;
			}
		};

		_pGridBandControlElement._getExtendContainerCount = function () {
			return 0;
		};

		delete _pGridBandControlElement;

		nexacro.GridBandContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._callback_onscroll = null;
		};

		var _pGridBandContainerElement = nexacro._createPrototype(nexacro.ScrollableContainerElement, nexacro.GridBandContainerElement);
		nexacro.GridBandContainerElement.prototype = _pGridBandContainerElement;
		_pGridBandContainerElement._type_name = "GridBandContainerElement";

		_pGridBandContainerElement._container_maxwidth = 0;
		_pGridBandContainerElement._container_maxheight = 0;

		_pGridBandContainerElement.setElementVScrollPos = function (vpos) {
			if (this._scroll_top != vpos || this.parent._reset_scrollpos) {
				this._scroll_top = vpos;

				if (!this.parent._no_setscroll) {
					var _handle = this._handle;
					if (_handle) {
						nexacro.__setElementHandleVScrollPos(_handle, vpos);
						if (this._callback_onscroll) {
							this._callback_onscroll.call(this._grid);
						}
					}
				}
			}
		};

		_pGridBandContainerElement._adjustPos = function () {
			nexacro.__setElementHandleBackgroundColor(this._handle, 0);
			this.setElementPosition(this.left, this.top);
		};

		_pGridBandContainerElement.setElementPosition = function (left, top) {
			var border = this.parent.border;
			this.left = left;
			this.top = top;
			var _handle = this._handle;
			if (_handle) {
				if (border) {
					left = left - border._left_width;
					top = top - border._top_width;
				}
				var owner_elem = this._owner_elem;
				var bMirror = false;
				if (owner_elem) {
					left = this._adjustRtlLayoutLeft(left, this.width);
				}
				nexacro.__setElementHandlePosition(_handle, left, top);
			}
		};

		_pGridBandContainerElement.create = function () {
			var retn = nexacro.ScrollableContainerElement.prototype.create.call(this);
			this._adjustPos();
			return retn;
		};

		delete _pGridBandContainerElement;


		nexacro.GridRowControlElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;

			this._client_left_element = null;
			this._client_body_element = new nexacro.GridAreaContainerElement(this, "body");
			this._client_right_element = null;

			this._left_width = 0;
			this._right_width = 0;
			this._body_width = 0;
			this._body_scroll_maxwidth = 0;
			this.scroll_left = 0;
		};

		var _pGridRowControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.GridRowControlElement);

		nexacro.GridRowControlElement.prototype = _pGridRowControlElement;

		_pGridRowControlElement._type_name = "GridRowControlElement";

		_pGridRowControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this.linkedcontrol._fixed);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _win_handle = _owner_elem.getRootWindowHandle();
					var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);

					this._handle = _handle;
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}

					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);
				}

				if (this._handle) {
					if (!this._client_body_element._handle) {
						this._client_body_element.create();
					}
					if (this._client_left_element && !this._client_left_element._handle) {
						this._client_left_element.create();
					}
					if (this._client_right_element && !this._client_right_element._handle) {
						this._client_right_element.create();
					}

					this._client_element = this._client_body_element;
				}
			}
		};

		_pGridRowControlElement.destroy = function () {
			var _handle = this._handle;
			if (_handle) {
				var _owner_handle = null;
				if (this._owner_elem && this._owner_elem._handle) {
					_owner_handle = this._owner_elem._handle;
				}

				if (!this._owner_elem || _owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _handle);
				}

				this._owner_elem = null;
				this._handle = null;

				this._client_body_element.destroy();

				if (this._client_left_element) {
					this._client_left_element.destroy();
				}

				if (this._client_right_element) {
					this._client_right_element.destroy();
				}

				this._client_body_element = null;
				this._client_left_element = null;
				this._client_right_element = null;
				this._client_element = null;
			}
			this.parent = null;
			this._parent_elem = null;
			this.linkedcontrol = null;
		};

		_pGridRowControlElement.clearContents = function () {
			if (this._handle) {
				this._client_body_element.clearContents();
				if (this._client_left_element) {
					this._client_left_element.clearContents();
				}
				if (this._client_right_element) {
					this._client_right_element.clearContents();
				}
			}
		};

		_pGridRowControlElement.getContainerElement = function (area) {
			if (area == "left") {
				return this._client_left_element;
			}
			else if (area == "right") {
				return this._client_right_element;
			}

			return this._client_body_element;
		};

		_pGridRowControlElement.setArea = function (leftwidth, rightwidth) {
			if (leftwidth > 0 && !this._client_left_element) {
				this._client_left_element = new nexacro.GridAreaContainerElement(this, "left");
			}

			if (rightwidth > 0 && !this._client_right_element) {
				this._client_right_element = new nexacro.GridAreaContainerElement(this, "right");
			}

			this._left_width = leftwidth;
			if (this._client_left_element) {
				this._client_left_element.setElementPosition(this.client_left, this.client_top, this._bChangeRtl || this._isRtl());
				this._client_left_element.setElementSize(leftwidth, this.client_height);
			}

			this._right_width = rightwidth;
			if (this._client_right_element) {
				this._client_right_element.setElementPosition(this.client_width - rightwidth, this.client_top, this._bChangeRtl || this._isRtl());
				this._client_right_element.setElementSize(rightwidth, this.client_height);
			}

			this._body_width = this.client_width - leftwidth - rightwidth;

			this._client_body_element.setElementPosition(leftwidth, this.client_top, this._bChangeRtl || this._isRtl());
			this._client_body_element.setElementSize(this._body_width, this.height);
		};

		_pGridRowControlElement._updateClientSize = function () {
			this.client_left = this._inner_left;
			this.client_top = this._inner_top;
			this.client_width = this._inner_width;
			this.client_height = this._inner_height;

			this.setArea(this._left_width, this._right_width);
		};

		_pGridRowControlElement._setContainerMaxWidth = function (width) {
			if (this._body_scroll_maxwidth != width) {
				this._body_scroll_maxwidth = width;
			}
		};

		_pGridRowControlElement._calculateClientWidth = function (change_width) {
			var c_width = this._body_width + change_width;
			return c_width;
		};

		_pGridRowControlElement._getContainerMaxWidth = function () {
			return this._body_scroll_maxwidth;
		};

		_pGridRowControlElement._getScrollLeft = function () {
			return this.scroll_left;
		};

		_pGridRowControlElement.setElementHScrollPos = function (hpos) {
			this._client_body_element.setElementHScrollPos(hpos);
			this.scroll_left = hpos;
		};


		_pGridRowControlElement.setElementRtlDirection = function (rtldirection) {
			nexacro.Element.prototype.setElementRtlDirection.call(this, rtldirection);
			this._bChangeRtl = true;
			this._updateClientSize();
			this._bChangeRtl = false;
		};

		delete _pGridRowControlElement;


		nexacro.GridAreaContainerElement = function (parent_elem, areatype) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._areatype = areatype;
		};

		var _pGridAreaContainerElement = nexacro._createPrototype(nexacro.ScrollableContainerElement, nexacro.GridAreaContainerElement);
		nexacro.GridAreaContainerElement.prototype = _pGridAreaContainerElement;
		_pGridAreaContainerElement._type_name = "GridAreaContainerElement";

		_pGridAreaContainerElement._container_maxwidth = 0;
		_pGridAreaContainerElement._container_maxheight = 0;

		_pGridAreaContainerElement.setElementHScrollPos = function (hpos, bForce) {
			if (this._scroll_left != hpos || this.parent._reset_scrollpos || this.parent._bChangeRtl || bForce) {
				this._scroll_left = hpos;
				var _handle = this._handle;
				if (_handle) {
					hpos = nexacro.__convertScrollLeftByRtl(this._parent_elem._parent_elem, hpos);
					nexacro.__setElementHandleHScrollPos(_handle, hpos);
				}
			}
		};

		delete _pGridAreaContainerElement;

		nexacro.GridCellControlElement = function (parent_elem, area, mode, padding) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
			this._area = area;
			this._expand_width = 0;
			this._expand_ctrl = null;
			this._mode = "";
			this._changeMode(mode, padding);
		};

		var _pGridCellControlElement = nexacro._createPrototype(nexacro.ControlElement, nexacro.GridCellControlElement);
		nexacro.GridCellControlElement.prototype = _pGridCellControlElement;
		_pGridCellControlElement._type_name = "GridCellControlElement";

		_pGridCellControlElement._changeMode = function (mode, padding) {
			mode = (mode) ? mode : "text";

			if (this._mode !== mode) {
				var prev = this._client_element;
				var textchange = false;

				if (this._mode.indexOf("text") >= 0 && mode.indexOf("text") >= 0) {
					textchange = true;
				}

				if (mode == "text") {
					this._client_element = new nexacro.GridCellTextSimpleContainerElement(this);
				}
				else if (mode == "expandtext") {
					this._client_element = new nexacro.GridCellTextContainerElement(this);
				}
				else {
					this._client_element = new nexacro.GridCellContainerElement(this);
				}

				var client_element = this._client_element;

				if (prev) {
					if (textchange) {
						client_element.font = prev.font;
						client_element.letterspace = prev.letterspace;
						client_element.color = prev.color;
						client_element.cursor = prev.cursor;
						client_element.align = prev.align;
						client_element.halign = prev.halign;
						client_element.valign = prev.valign;
						client_element.text = prev.text;
						client_element.linespace = prev.linespace;
						client_element.wordwrap = prev.wordwrap;
						client_element.decoration = prev.decoration;
						client_element._cell_node = prev._cell_node;
						client_element._use_newline = prev._use_newline;
					}
					if (this.linkedcontrol._subComp) {
						this.linkedcontrol._subComp.destroy();
						this.linkedcontrol._subComp = null;
					}
					prev.destroy();
				}

				if (this._handle && !client_element._handle) {
					client_element.create();
				}
				client_element.setElementSize(this.client_width, this.client_height);
				client_element.setElementPosition(this.client_left, this.client_top, true);

				this._mode = mode;
			}
			else {
			}

			return this._client_element;
		};

		_pGridCellControlElement.create = function () {
			var _owner_elem = (this._is_nc_element) ? this._parent_elem : this._parent_elem.getContainerElement(this._area);
			if (_owner_elem && _owner_elem._handle) {
				if (!this._handle) {
					this._owner_elem = _owner_elem;
					var _win_handle = _owner_elem.getRootWindowHandle();
					var _handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
					this.linkedcontrol._unique_id = this.linkedcontrol.parent._unique_id + '_' + this.linkedcontrol.id;
					nexacro.__setElementHandleId(_handle, this.linkedcontrol._unique_id);

					this._handle = _handle;
					nexacro.__appendElementHandle(_owner_elem._handle, _handle);

					if (this.border || this.bordertype) {
						this._setControlBorder(_handle, this.border, this.bordertype);
					}
					if (this.background) {
						this._setControlBackground(_handle, this.background, this.gradation);
					}

					if (this.opacity) {
						nexacro.__setElementHandleOpacity(_handle, this.opacity);
					}
					if (this._hittest_type) {
						nexacro.__setElementHittestValue(_handle, this._hittest_type);
					}
					this._refreshForeground(_handle);
				}

				if (this._handle && !this._client_element._handle) {
					this._client_element.create();
				}
			}
		};

		_pGridCellControlElement._setExpandControl = function (expand_ctrl, expand_width) {
			this._expand_ctrl = expand_ctrl;
			this._expand_width = expand_width;
			this._updateClientSize();
		};

		_pGridCellControlElement._updateClientSize = function () {
			var client_left = this._inner_left;
			var client_top = this._inner_top;
			var client_width = this._inner_width;
			var client_height = this._inner_height;

			var padding = this.padding;
			if (this.padding) {
				client_left += padding.left;
				client_top += padding.top;
				client_width -= (padding.left + padding.right);
				client_height -= (padding.top + padding.bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				client_left += this.padding_left;
				client_top += this.padding_top;
				client_width -= (this.padding_left + this.padding_right);
				client_height -= (this.padding_top + this.padding_bottom);
				if (client_width < 0) {
					client_width = 0;
				}
				if (client_height < 0) {
					client_height = 0;
				}
			}

			if (this._expand_ctrl && this._expand_ctrl.visible == true) {
				client_width -= this._expand_width;
				if (client_width < 0) {
					client_width = 0;
				}
			}

			var client_element = this._client_element;
			if (client_element) {
				if (this.client_left != client_left || this.client_top != client_top) {
					this.client_left = client_left;
					this.client_top = client_top;
					client_element.setElementPosition(client_left, client_top);
				}
				if (this.client_width != client_width || this.client_height != client_height) {
					this.client_width = client_width;
					this.client_height = client_height;
					client_element.setElementSize(client_width, client_height);
				}
			}
			else {
				this.client_left = client_left;
				this.client_top = client_top;
				this.client_width = client_width;
				this.client_height = client_height;
			}
		};

		_pGridCellControlElement._setDisplay = nexacro._emptyFn;

		_pGridCellControlElement.setContainerVisible = function (v) {
			if (this._client_element) {
				this._client_element.setElementVisible(v);
			}
		};
		_pGridCellControlElement._adjustRtlLayoutLeft = function (left, width) {
			var newLeft = left;

			if (this._isRtl()) {
				var parent_width = Math.max(this._parent_elem.width, this._parent_elem._body_scroll_maxwidth);
				newLeft = parent_width - width - left;
			}
			return newLeft;
		};
		delete _pGridCellControlElement;


		nexacro.GridCellContainerElement = function (parent_elem) {
			this.parent = parent_elem;
			this._parent_elem = parent_elem;
		};
		var _pGridCellContainerElement = nexacro._createPrototype(nexacro.ContainerElement, nexacro.GridCellContainerElement);
		nexacro.GridCellContainerElement.prototype = _pGridCellContainerElement;
		_pGridCellContainerElement._type_name = "GridCellContainerElement";

		_pGridCellContainerElement.create = function () {
			var _owner_elem = this._parent_elem;
			if (_owner_elem && _owner_elem._handle && !this._handle) {
				this._owner_elem = _owner_elem;
				var _win_handle = _owner_elem.getRootWindowHandle();
				var _handle = nexacro.__createContainerElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);

				if (this.letterspace) {
					nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
				}
				if (this.font) {
					var font = this.font;
					nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
				}
				if (this.color) {
					nexacro.__setElementHandleColor(_handle, this.color._syscolor);
				}
				if (!this.visible) {
					nexacro.__setElementHandleVisible(_handle, false);
				}

				this._handle = _handle;
				nexacro.__appendElementHandle(_owner_elem._handle, _handle);
			}
		};

		delete _pGridCellContainerElement;
	}


	nexacro.GridCellTextContainerElement = function (parent_elem) {
		this.parent = parent_elem;
		this._parent_elem = parent_elem;
	};
	var _pGridCellTextContainerElement = nexacro._createPrototype(nexacro.TextBoxElement, nexacro.GridCellTextContainerElement);
	nexacro.GridCellTextContainerElement.prototype = _pGridCellTextContainerElement;

	_pGridCellTextContainerElement._type_name = "GridCellTextContainerElement";

	_pGridCellTextContainerElement._is_nc_element = true;

	_pGridCellTextContainerElement.create = function () {
		var _owner_elem = this._parent_elem;
		if (_owner_elem && _owner_elem._handle && !this._handle) {
			this._owner_elem = _owner_elem;
			var _win_handle = _owner_elem.getRootWindowHandle();
			var _handle = nexacro.__createTextElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
			var bRtl = this._isRtl(true);
			if (!this.visible) {
				nexacro.__setElementHandleVisible(_handle, false);
			}
			if (this.letterspace) {
				nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
			}
			if (this.font) {
				var font = this.font;
				nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
			}
			if (this.color) {
				nexacro.__setElementHandleColor(_handle, this.color._syscolor);
			}

			if (this.align) {
				var align = this.align;
				nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
			}
			else if (this.halign && this.valign) {
				var _halign = this.halign;

				if (bRtl) {
					_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
				}
				nexacro.__setElementHandleAlign(_handle, _halign, this.valign);
			}

			if (this.padding) {
				var padding = this.padding;
				nexacro.__setElementHandlePadding(_handle, padding.left, padding.top, padding.right, padding.bottom);
			}
			else if (this.padding_left || this.padding_top || this.padding_right || this.padding_bottom) {
				nexacro.__setElementHandlePadding(_handle, this.padding_left, this.padding_top, this.padding_right, this.padding_bottom);
			}

			if (this.decoration) {
				nexacro.__setElementHandleDecorateText(_handle, this.decoration);
			}
			if (this.linespace > 0) {
				nexacro.__setElementHandleLineSpace(_handle, this.linespace);
			}
			if (this.wordwrap != "none") {
				nexacro.__setElementHandleWordWrap(_handle, this.wordwrap);
			}

			if (this.text) {
				nexacro.__setElementHandleText(_handle, this.text);
			}

			this._handle = _handle;
			nexacro.__appendElementHandle(_owner_elem._handle, _handle);
		}
	};

	_pGridCellTextContainerElement.clearContents = function () {
		var _handle = this._handle;
		var _owner_elem = this._owner_elem;
		if (_handle) {
			_handle._linked_element = null;
			if (_owner_elem && _owner_elem._handle) {
				nexacro.__destroyElementHandle(_owner_elem._handle, _handle);
			}
			this._owner_elem = null;
			this._handle = null;
		}
	};

	_pGridCellTextContainerElement.appendChildElement = function (child_elem) {
		if (this._handle) {
			if (child_elem._parent_elem != this.parent_elem) {
				if (child_elem._handle) {
					var old_doc = child_elem.getRootWindowHandle();
					var new_doc = this.getRootWindowHandle();
					if (old_doc != new_doc) {
						child_elem._parent_elem = this.parent_elem;
						child_elem._removeFromContainer();
					}
					else {
						child_elem._parent_elem = this.parent_elem;
					}
				}
				else {
					child_elem._parent_elem = this.parent_elem;
				}
			}

			if (!child_elem._handle) {
				child_elem.create();
			}
			else {
				child_elem._appendToContainer(this);
			}
		}
	};
	_pGridCellTextContainerElement.removeChildElement = function (child_elem) {
		if (child_elem._owner_elem == this) {
			child_elem._removeFromContainer();
		}
	};
	_pGridCellTextContainerElement.moveToNextElement = function (cur_elem, target_elem) {
		if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
			nexacro.__setElementHandleMoveToNext(cur_elem._handle, target_elem._handle);
		}
	};
	_pGridCellTextContainerElement.moveToPrevElement = function (cur_elem, target_elem) {
		if (cur_elem && target_elem && cur_elem._owner_elem == this && target_elem._owner_elem == this && cur_elem._handle && target_elem._handle) {
			nexacro.__setElementHandleMoveToPrev(cur_elem._handle, target_elem._handle);
		}
	};
	_pGridCellTextContainerElement.sendToBackElement = function (cur_elem) {
		if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
			nexacro.__setElementHandleSendToBack(cur_elem._handle);
		}
	};
	_pGridCellTextContainerElement.bringToFrontElement = function (cur_elem) {
		if (cur_elem && cur_elem._owner_elem == this && cur_elem._handle) {
			nexacro.__setElementHandleBringToFront(cur_elem._handle);
		}
	};
	_pGridCellTextContainerElement.setElementTextVisible = function (visible, is_force) {
		var _handle = this._handle;

		if (!is_force) {
			visible = visible && this.visible;
		}

		if (_handle) {
			nexacro.__setElementHandleVisible(_handle, visible);
		}
	};
	delete _pGridCellTextContainerElement;


	nexacro.GridCellTextSimpleContainerElement = function (parent_elem) {
		this.parent = parent_elem;
		this._parent_elem = parent_elem;
	};
	var _pGridCellTextSimpleContainerElement = nexacro._createPrototype(nexacro.GridCellTextContainerElement, nexacro.GridCellTextSimpleContainerElement);
	nexacro.GridCellTextSimpleContainerElement.prototype = _pGridCellTextSimpleContainerElement;

	_pGridCellTextSimpleContainerElement._type_name = "GridCellTextSimpleContainerElement";
	delete _pGridCellTextSimpleContainerElement;

	nexacro.EventPassOverlayElement = function (parent_elem, elements) {
		this.parent = parent_elem;
		this._parent_elem = parent_elem;


		this.width = parent_elem.width;
		this.height = parent_elem.height;


		this.pointer_events = "none";
		this._target_elements = elements;


		this.image_url = "";
		this._image_width = 0;
		this._image_height = 0;


		this.border = null;
	};

	var _pEventPassOverlayElement = nexacro._createPrototype(nexacro.TextBoxElement, nexacro.EventPassOverlayElement);
	nexacro.EventPassOverlayElement.prototype = _pEventPassOverlayElement;

	_pEventPassOverlayElement._type_name = "EventPassOverlayElement";

	_pEventPassOverlayElement.create = function () {
		var _owner_elem = this._parent_elem;
		if (_owner_elem && _owner_elem._handle && !this._handle) {
			this._owner_elem = _owner_elem;
			var _win_handle = _owner_elem.getRootWindowHandle();
			var _control_handle = nexacro.__createControlElementHandle(this, _win_handle, this.left, this.top, this.width, this.height);
			var _handle = nexacro.__createTextElementHandle(this, _win_handle, 0, 0, this.width, this.height);

			if (!this.visible) {
				nexacro.__setElementHandleVisible(_control_handle, false);
			}

			if (this.letterspace) {
				nexacro.__setElementHandleLetterSpace(_handle, this.letterspace);
			}

			if (this.font) {
				var font = this.font;
				nexacro.__setElementHandleFont(_handle, font.face, font.size, font._bold, font._italic, font._underline, font._strikeout, font._antialias);
			}
			if (this.color) {
				nexacro.__setElementHandleColor(_handle, this.color._syscolor);
			}

			if (this.align) {
				var align = this.align;
				nexacro.__setElementHandleAlign(_handle, align.halign, align.valign);
			}
			else if (this.halign && this.valign) {
				nexacro.__setElementHandleAlign(_handle, this.halign, this.valign);
			}

			if (this.decoration) {
				nexacro.__setElementHandleDecorateText(_handle, this.decoration);
			}
			if (this.linespace > 0) {
				nexacro.__setElementHandleLineSpace(_handle, this.linespace);
			}

			if (this.wordwrap != "none") {
				nexacro.__setElementHandleWordWrap(_handle, this.wordwrap);
			}

			if (this.text) {
				nexacro.__setElementHandleText(_handle, this.text, this._use_newline, this.wordwrap);
			}

			if (this.image_url) {
				var _image_handle = this._image_handle = nexacro.__createImageElementHandle(this, _win_handle, 0, 0, this._image_width, this._image_height, true);
				nexacro.__setElementHandleImageUrl(_image_handle, this.image_url);
				nexacro.__appendElementHandle(_control_handle, _image_handle);
			}

			this._handle = _handle;
			this._control_handle = _control_handle;

			nexacro.__appendElementHandle(_control_handle, _handle);
			nexacro.__appendElementHandle(_owner_elem._handle, _control_handle);
		}
	};

	_pEventPassOverlayElement.destroy = function () {
		this._destroyElementHandle();
		this.parent = null;
		this._parent_elem = null;


		this.width = null;
		this.height = null;
		this._target_elements = [];
		this.image_url = "";
		this._image_width = 0;
		this._image_height = 0;
		this.border = null;
	};

	_pEventPassOverlayElement._destroyElementHandle = function () {
		var _control_handle = this._control_handle;
		if (_control_handle) {
			if (this._handle) {
				nexacro.__destroyElementHandle(_control_handle, this._handle);
				this._handle = null;
			}

			if (this._image_handle) {
				nexacro.__destroyElementHandle(_control_handle, this._image_handle);
				this._image_handle = null;
			}

			if (this._owner_elem) {
				var _owner_handle = this._owner_elem._handle;
				if (_owner_handle) {
					nexacro.__destroyElementHandle(_owner_handle, _control_handle);
				}
				_owner_handle = null;
				this._owner_elem = null;
			}

			_control_handle = null;
			this._control_handle = null;
		}
	};

	_pEventPassOverlayElement.setElementVisible = function (visible) {
		if (this.visible != visible) {
			this.visible = visible;
			var _control_handle = this._control_handle;
			if (_control_handle) {
				nexacro.__setElementHandleVisible(_control_handle, visible);
			}
		}
	};

	_pEventPassOverlayElement.setElementPosition = function (left, top) {
		if (this.left != left || this.top != top) {
			this.left = left;
			this.top = top;
			var _control_handle = this._control_handle;
			if (_control_handle) {
				var owner_elem = this._owner_elem;
				var bMirror = false;
				if (owner_elem) {
					left = this._adjustRtlLayoutLeft(left, this.width);
				}
				nexacro.__setElementHandlePosition(_control_handle, left, top);
			}
		}
	};

	_pEventPassOverlayElement.setElementSize = function (width, height) {
		if (this.width != width || this.height != height) {
			this.width = width;
			this.height = height;
			var _control_handle = this._control_handle;
			if (_control_handle) {
				nexacro.__setElementHandleSize(_control_handle, width, height);
				nexacro.__setElementHandleSize(this._handle, width, height);
			}
		}
	};

	_pEventPassOverlayElement.setElementCursor = function (cursor) {
		var _control_handle = this._control_handle;
		if (_control_handle) {
			if (cursor && !cursor._is_empty) {
				nexacro.__setElementHandleCursor(_control_handle, cursor.value);
			}
			else {
				nexacro.__setElementHandleCursor(_control_handle, cursor);
			}
		}
	};


	_pEventPassOverlayElement.setSelectEventPassElement = function (clientX, clientY) {
		var elements = this._target_elements, len = elements.length, elem = elements[0];
		if (len > 1) {
			var scrollX = 0, scrollY = 0;

			var _win_handle = this._owner_elem.getRootWindowHandle();
			if (_win_handle) {
				scrollX = nexacro.__getWindowHandleBaseScrollPositionX(_win_handle);
				scrollY = nexacro.__getWindowHandleBaseScrollPositionY(_win_handle);
			}

			var comp = null, over_comp = null;
			var elem_pos = null;
			var left = 0, top = 0, right = 0, bottom = 0;
			for (var i = 0; i < len; i++) {
				elem_pos = nexacro._getElementXYInWindow(elements[i]._handle);
				left = elem_pos[0] - scrollX;
				top = elem_pos[1] - scrollY;
				right = left + elements[i].width;
				bottom = top + elements[i].height;

				comp = this._findLinkedControl(elements[i]);

				if (!over_comp && left <= clientX && clientX <= right
					 && top <= clientY && clientY <= bottom) {
					elem = elements[i];
					over_comp = comp;

					if (elem && elem instanceof nexacro.GridCellControlElement) {
						if (elem._expand_ctrl != null) {
							if ((left + elem._expand_ctrl.left) <= clientX && clientX <= (left + elem._expand_ctrl.left + elem._expand_ctrl.width) && (top + elem._expand_ctrl.top) <= clientY && clientY <= (top + elem._expand_ctrl.top + elem._expand_ctrl.height)) {
								elem = (elem._expand_ctrl._text_elem != null) ? elem._expand_ctrl._text_elem
									 : (elem._expand_ctrl._img_elem != null) ? elem._expand_ctrl._img_elem : elem._expand_ctrl;
							}
						}
					}
				}

				if (comp) {
					comp._applyMouseLeaveEvent();
				}
			}
		}

		if (over_comp) {
			over_comp._applyMouseOverEvent();
		}

		return elem;
	};

	_pEventPassOverlayElement.setElementToolTip = function (tooltiptext, tooltiptype) {
		if (tooltiptext === undefined) {
			tooltiptext = "";
		}
		if (this.tooltiptext != tooltiptext || this.tooltiptype != tooltiptype) {
			this.tooltiptext = tooltiptext;
			this.tooltiptype = tooltiptype;
			var _control_handle = this._control_handle;
			if (_control_handle) {
				nexacro.__setElementHandleToolTip(_control_handle, tooltiptext, tooltiptype);
			}
		}
	};

	_pEventPassOverlayElement.setTargetElements = function (elements) {
		this._target_elements = elements;
	};

	_pEventPassOverlayElement._setNodeAlignPos = function (node, width, height) {
		if (node) {
			var top = 0;
			var left = (width - this._image_width) / 2;

			var valign = this.valign ? this.valign : this.align.valign;
			if (valign == "bottom") {
				top = height - this._image_height;
			}
			else if (valign == "middle") {
				top = (height - this._image_height) / 2;
			}

			nexacro.__setElementHandlePosition(node, left, top);
		}
	};

	_pEventPassOverlayElement.updateCellNodeClient = function (left, top, width, height, cell_hpos, adjust_pos) {
		var _control_handle = this._control_handle;
		if (_control_handle) {
			left = 0;
			adjust_left = (adjust_pos.left > 0) ? adjust_pos.left : 0;

			if (cell_hpos > adjust_left) {
				cell_hpos = cell_hpos - adjust_left;

				left -= cell_hpos;
				width += cell_hpos;
			}

			var owner_elem = this._owner_elem;
			var bMirror = false;
			if (owner_elem) {
				left = this._adjustRtlLayoutLeft(left, this.width);
			}


			nexacro.__setElementHandlePosition(this._handle, left, 0);
			nexacro.__setElementHandleSize(this._handle, width, height);

			this._setNodeAlignPos(this._image_handle, width, height);
		}
	};

	_pEventPassOverlayElement.setElementAlignXY = function (halign, valign) {
		var _halign = halign;

		if (this._isRtl()) {
			_halign = this.halign == "left" ? "right" : (this.halign == "right" ? "left" : this.halign);
		}

		this.align = null;
		this.halign = halign;
		this.valign = valign;

		var _handle = this._handle;
		if (_handle) {
			nexacro.__setElementHandleAlign(_handle, _halign, valign);
		}

		this._setNodeAlignPos(this._image_handle, this.width, this.height);
	};

	_pEventPassOverlayElement.setElementImageUrl = function (image_url) {
		if (this.image_url != image_url) {
			var image_url = nexacro._getURIValue(image_url);

			var temp_url = image_url;
			if (image_url && !nexacro._isAbsolutePath(image_url)) {
				var base_url = this._getElementBaseUrl();
				image_url = nexacro._getImageLocation(image_url, base_url);
			}

			var _image_handle = this._image_handle;

			if (!_image_handle) {
				var _win_handle = this._owner_elem.getRootWindowHandle();
				_image_handle = this._image_handle = nexacro.__createImageElementHandle(this, _win_handle, 0, 0, this._image_width, this._image_height, true);
				nexacro.__appendElementHandle(this._control_handle, _image_handle);
			}

			this.image_url = image_url;
			if (image_url) {
				var size = nexacro._getImageSize(image_url, this._on_loadImg, this, undefined, temp_url);
				this._img_sizereq = true;
				if (size) {
					this._img_sizereq = false;
					this._image_width = size.width;
					this._image_height = size.height;

					nexacro.__setElementHandleImageUrl(_image_handle, image_url);
					nexacro.__setElementHandleSize(_image_handle, size.width, size.height);
				}
			}
			else {
				nexacro.__setElementHandleImageUrl(_image_handle, image_url);
			}
		}
	};

	_pEventPassOverlayElement._setElementBorder = function (border, left_hidden, top_hidden, right_hidden) {
		if (border) {
			this.border = border;

			var _control_handle = this._control_handle;
			if (_control_handle) {
				if (border._linecnt == 1) {
					border._linecnt = 4;
				}

				var left_width = (!left_hidden && border.left_style) ? border._left_width : 0;
				var top_width = (!top_hidden && border.top_style) ? border._top_width : 0;
				var right_width = (!right_hidden && border.right_style) ? border._right_width : 0;
				var bottom_width = border.bottom_style ? border._bottom_width : 0;

				left_width = left_width < 0 ? 0 : (!left_hidden && this.width <= left_width) ? left_width - (left_width - this.width) : left_width;
				top_width = top_width < 0 ? 0 : top_width;
				right_width = right_width < 0 ? 0 : (!right_hidden && this.width <= right_width) ? right_width - (right_width - this.width) : right_width;
				bottom_width = bottom_width < 0 ? 0 : this.height <= bottom_width ? bottom_width - (bottom_width - this.height) : bottom_width;

				nexacro.__setElementHandleBorderTop(_control_handle, border.top_style, top_width, border._top_syscolor);
				nexacro.__setElementHandleBorderBottom(_control_handle, border.bottom_style, bottom_width, border._bottom_syscolor);
				nexacro.__setElementHandleBorderLeft(_control_handle, border.left_style, left_width, border._left_syscolor);
				nexacro.__setElementHandleBorderRight(_control_handle, border.right_style, right_width, border._right_syscolor);
			}
		}
		else if (this.border) {
			this.border = null;
		}
	};

	_pEventPassOverlayElement._findLinkedControl = function (elem) {
		var comp = null;
		while (!comp) {
			comp = elem.linkedcontrol;

			elem = elem.parent;

			if (!elem) {
				break;
			}
		}

		return comp;
	};

	_pEventPassOverlayElement._on_loadImg = nexacro._emptyFn;
	_pEventPassOverlayElement.updateElementLineHeight = nexacro._emptyFn;


	_pEventPassOverlayElement.setElementPadding = nexacro._emptyFn;
	_pEventPassOverlayElement.setElementPaddingXY = nexacro._emptyFn;

	delete _pEventPassOverlayElement;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Component) {
	nexacro.__position9xObj = function (target) {
		if (target) {
			this._target = target;
		}

		this.left = 0;
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
		this.width = 0;
		this.height = 0;
		this.x = 0;
		this.y = 0;

		this._value = "absolute 0 0 0 0";
	};

	__pPosition9xObj = nexacro._createPrototype(nexacro.Object, nexacro.__position9xObj);
	nexacro.__position9xObj.prototype = __pPosition9xObj;

	__pPosition9xObj.style = "absolute";
	__pPosition9xObj.x = 0;
	__pPosition9xObj.y = 0;

	__pPosition9xObj._bsize = false;
	__pPosition9xObj._bmove = false;

	__pPosition9xObj.toString = function () {
		return this._value;
	};

	__pPosition9xObj._emptyObject = function () {
		this._value = "absolute 0 0 0 0";
		this.style = "absolute";
		this.left = 0;
		this.right = 0;
		this.top = 0;
		this.bottom = 0;
		this.x = 0;
		this.y = 0;
		this.width = 0;
		this.height = 0;
	};

	__pPosition9xObj._updateValue = function () {
		this.width = this.right - this.left;
		this.height = this.bottom - this.top;

		this.x = this.left;
		this.y = this.top;

		this._value = "absolute " + this.left + ' ' + this.top + ' ' + this.right + ' ' + this.bottom;
	};

	__pPosition9xObj._update = function () {
		this.width = this.right - this.left;
		this.height = this.bottom - this.top;

		this.x = this.left;
		this.y = this.top;

		var str = "absolute " + this.left + ' ' + this.top + ' ' + this.right + ' ' + this.bottom;

		if (str != this._value) {
			this._value = str;
			if (this._target != null) {
				this._target._adjustPosition(this.left, this.top, null, null, this.width, this.height, this._target.parent._client_width, this._target.parent._client_height);
				this._target.on_update_position(this._bsize, this._bmove);
				this._bsize = false;
				this._bmove = false;
			}
		}
	};

	__pPosition9xObj._set = function (v) {
		var val = (v == null) ? "" : v.toString().trim();
		if (val != this._value) {
			if (val == "") {
				this._emptyObject();
			}
			else {
				var valarr = val.split(/\s+/);
				switch (valarr.length) {
					case 4:
						this.left = parseInt(valarr[0]) | 0;
						this.top = parseInt(valarr[1]) | 0;
						this.right = parseInt(valarr[2]) | 0;
						this.bottom = parseInt(valarr[3]) | 0;
						break;
					case 5:
						this.left = parseInt(valarr[1]) | 0;
						this.top = parseInt(valarr[2]) | 0;
						this.right = parseInt(valarr[3]) | 0;
						this.bottom = parseInt(valarr[4]) | 0;
						break;
					default:
						this._emptyObject();
						break;
				}
				this._update();
			}
		}
	};

	__pPosition9xObj.set_style = function (v) {
		if (v != this.style) {
			if (v == "absolute") {
				this.style = "absolute";
			}
		}
	};

	__pPosition9xObj.set_left = function (v) {
		var val = parseInt(v) | 0;

		if (val > this.right) {
			this.right = val;
		}

		if (val != this.left) {
			this.left = val;
			this._bmove = true;
			this._bsize = true;
			this._update();
		}
	};

	__pPosition9xObj.set_top = function (v) {
		var val = parseInt(v) | 0;

		if (val > this.bottom) {
			this.bottom = val;
		}

		if (val != this.top) {
			this.top = val;
			this._bmove = true;
			this._bsize = true;
			this._update();
		}
	};

	__pPosition9xObj.set_right = function (v) {
		var val = parseInt(v) | 0;

		if (this.left > val) {
			this.left = val;
		}
		if (val != this.right) {
			this.right = val;
			this._bsize = true;
			this._update();
		}
	};

	__pPosition9xObj.set_bottom = function (v) {
		var val = parseInt(v) | 0;

		if (this.top > val) {
			this.top = val;
		}

		if (val != this.bottom) {
			this.bottom = val;
			this._bsize = true;
			this._update();
		}
	};
	__pPosition9xObj.set_x = function (v) {
		var val = parseInt(v) | 0;
		if (val != this.left) {
			this.left = val;
			this.right = this.left + this.width;
			this._bsize = true;
			this._bmove = true;
			this._update();
		}
	};

	__pPosition9xObj.set_y = function (v) {
		var val = parseInt(v) | 0;
		if (val != this.top) {
			this.top = val;
			this.bottom = this.top + this.height;
			this._bsize = true;
			this._bmove = true;
			this._update();
		}
	};

	__pPosition9xObj.set_width = function (v) {
		if (v < 0) {
			v = 0;
		}
		var val = this.left + (parseInt(v) | 0);
		if (val != this.right) {
			this.right = val;
			this._bsize = true;
			this._update();
		}
	};
	__pPosition9xObj.set_height = function (v) {
		if (v < 0) {
			v = 0;
		}
		var val = this.top + (parseInt(v) | 0);
		if (val != this.bottom) {
			this.bottom = val;
			this._bsize = true;
			this._update();
		}
	};

	delete __pPosition9xObj;



	nexacro.__position29xObj = function (target) {
		if (target) {
			this._target = target;
		}

		this._value = "absolute l:0 w:0 t:0 h:0";
	};

	__pPosition29xObj = nexacro._createPrototype(nexacro.Object, nexacro.__position29xObj);
	nexacro.__position29xObj.prototype = __pPosition29xObj;

	__pPosition29xObj.style = "absolute";
	__pPosition29xObj.left = null;
	__pPosition29xObj.right = null;
	__pPosition29xObj.top = null;
	__pPosition29xObj.bottom = null;
	__pPosition29xObj.width = null;
	__pPosition29xObj.height = null;

	__pPosition29xObj._bsize = false;
	__pPosition29xObj._bmove = false;

	__pPosition29xObj.toString = function () {
		return this._value;
	};

	__pPosition29xObj._emptyObject = function () {
		this._value = "absolute l:0 t:0 w:0 h:0";
		this.style = "absolute";
		this.left = null;
		this.right = null;
		this.top = null;
		this.bottom = null;
		this.width = null;
		this.height = null;
	};

	__pPosition29xObj._updateValue = function () {
		var l = this.left, r = this.right, t = this.top, b = this.bottom, w = this.width, h = this.height;
		var valarr = [];
		var idx = 0;

		if (l != undefined) {
			valarr[idx++] = "l:" + l;
		}
		if (r != undefined) {
			valarr[idx++] = "r:" + r;
		}
		if (w != undefined) {
			valarr[idx++] = "w:" + w;
		}
		if (t != undefined) {
			valarr[idx++] = "t:" + t;
		}
		if (b != undefined) {
			valarr[idx++] = "b:" + b;
		}
		if (h != undefined) {
			valarr[idx++] = "h:" + h;
		}

		this._value = "absolute " + valarr[0] + ' ' + valarr[1] + ' ' + valarr[2] + ' ' + valarr[3];
	};

	__pPosition29xObj.set_left = function (v) {
		if (this.left != v) {
			this.left = v;
			this._target.set_left(v);
		}
	};

	__pPosition29xObj.set_top = function (v) {
		if (this.top != v) {
			this.top = v;
			this._target.set_top(v);
		}
	};

	__pPosition29xObj.set_right = function (v) {
		if (this.right != v) {
			this.right = v;
			this._target.set_right(v);
		}
	};

	__pPosition29xObj.set_bottom = function (v) {
		if (this.bottom != v) {
			this.bottom = v;
			this._target.set_bottom(v);
		}
	};

	__pPosition29xObj.set_width = function (v) {
		if (this.width != v) {
			this.width = v;
			this._target.set_width(v);
		}
	};

	__pPosition29xObj.set_height = function (v) {
		if (this.height != v) {
			this.height = v;
			this._target.set_height(v);
		}
	};

	delete __pPosition29xObj;



	nexacro.Component = function (id, position, left, top, width, height, right, bottom, parent) {
		this.id = this.name = id || null;

		if (parent) {
			this.parent = parent;
			this._refform = this._findForm(parent);
		}
		else {
			this.parent = null;
			this._refform = null;
		}

		this.position = position ? position : "absolute";

		var parent_width = parent ? this.parent._adjust_width : null;
		var parent_height = parent ? this.parent._adjust_height : null;

		this._adjustPosition(left, top, right, bottom, width, height, parent_width, parent_height);

		this.style = this.on_create_custom_style();
		this.currentstyle = this.on_create_custom_currentStyle();
		this._styles = {
		};
		this._enable_redraw_history = {
		};
	};

	var _pComponent = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.Component);
	nexacro.Component.prototype = _pComponent;
	_pComponent._type_name = "Component";

	_pComponent.expr = "";
	_pComponent.cssclass = "";
	_pComponent.visible = true;
	_pComponent.enable = true;
	_pComponent.taborder = "";
	_pComponent.tabstop = true;
	_pComponent.hotkey = "";
	_pComponent.transparenthittest = false;
	_pComponent.enableredraw = true;
	_pComponent.enableevent = true;
	_pComponent.tooltiptype = "default";
	_pComponent.tooltiptext = "";
	_pComponent.scrollbars = "none";
	_pComponent.hotkey = null;
	_pComponent.rtldirection = null;
	_pComponent.positionstep = 0;
	_pComponent._css_finder = null;
	_pComponent._ref_css_finder = null;
	_pComponent._refcssobj = null;
	_pComponent._refcssid = "";

	_pComponent._client_left = 0;
	_pComponent._client_top = 0;
	_pComponent._client_width = 0;
	_pComponent._client_height = 0;

	_pComponent._adjust_left = -1;
	_pComponent._adjust_top = -1;
	_pComponent._adjust_width = -1;
	_pComponent._adjust_height = -1;

	_pComponent._client_left_ltr = 0;
	_pComponent._adjust_left_ltr = -1;

	_pComponent._is_loading = false;
	_pComponent._is_created = false;
	_pComponent._is_alive = true;
	_pComponent._status = "enable";
	_pComponent._selected = false;
	_pComponent._pushed = false;
	_pComponent._readonly = false;
	_pComponent._is_created_contents = false;
	_pComponent._has_dirty_pos = false;
	_pComponent._has_dirty_rect = false;
	_pComponent._pseudo = "normal";
	_pComponent._control_pseudo = "";
	_pComponent._contents_pseudo = "";
	_pComponent._apply_pushed_pseudo = false;
	_pComponent._apply_client_padding = true;
	_pComponent._apply_client_border = false;

	_pComponent._is_component = true;
	_pComponent._is_subcontrol = false;
	_pComponent._is_reference_control = true;
	_pComponent._is_form = false;
	_pComponent._is_frame = false;
	_pComponent._is_window = false;
	_pComponent._is_nc_control = false;
	_pComponent._is_simple_control = false;
	_pComponent._is_scrollable = false;
	_pComponent._is_popup_control = false;
	_pComponent._is_band_control = false;
	_pComponent._is_band_vert_paging = false;
	_pComponent._is_area_scroll = false;
	_pComponent._is_focus_accept = true;
	_pComponent._is_comp_focus = false;
	_pComponent._is_drag = false;
	_pComponent._is_resetscroll = false;
	_pComponent._control_element = null;
	_pComponent._zindex = null;
	_pComponent._bind_event = null;
	_pComponent._taborder = -1;
	_pComponent._display_text = "";
	_pComponent._real_enable = null;
	_pComponent._real_visible = false;
	_pComponent._vml_visible = true;
	_pComponent._last_focused = null;
	_pComponent._hotkey = null;
	_pComponent._track_capture = true;
	_pComponent._focus_direction = -1;
	_pComponent._rtldirection = undefined;
	_pComponent._re_focus = false;

	_pComponent._scrollbars = 0;
	_pComponent._scroll_showtype = -1;
	_pComponent._scroll_top = 0;
	_pComponent._scroll_left = 0;
	_pComponent._scroll_height = 0;
	_pComponent.hscrollbar = null;
	_pComponent.vscrollbar = null;
	_pComponent._event_list = {
		"onclick" : 1, 
		"ondblclick" : 1, 
		"onkillfocus" : 1, 
		"onsetfocus" : 1, 
		"onkeypress" : 1, 
		"onkeydown" : 1, 
		"onkeyup" : 1, 
		"onlbuttondown" : 1, 
		"onlbuttonup" : 1, 
		"onrbuttondown" : 1, 
		"onrbuttonup" : 1, 
		"onmouseenter" : 1, 
		"onmouseleave" : 1, 
		"onmousemove" : 1, 
		"onmousewheel" : 1, 
		"ondrag" : 1, 
		"ondragenter" : 1, 
		"ondragleave" : 1, 
		"ondragmove" : 1, 
		"ondrop" : 1, 
		"onmove" : 1, 
		"onsize" : 1, 
		"ontouchstart" : 1, 
		"ontouchmove" : 1, 
		"ontouchend" : 1, 
		"ontap" : 1, 
		"ondbltap" : 1, 
		"onpinchstart" : 1, 
		"onpinch" : 1, 
		"onpinchend" : 1, 
		"onflingstart" : 1, 
		"onfling" : 1, 
		"onflingend" : 1, 
		"onlongpress" : 1, 
		"onslidestart" : 1, 
		"onslide" : 1, 
		"onslideend" : 1
	};

	_pComponent.initProperties = function () {
	};
	_pComponent.initEvents = function () {
	};
	_pComponent._resizePopupInbound = nexacro._emptyFn;

	nexacro.Component._default_color = nexacro._getCachedStyleObj("color", "red");
	nexacro.Component._default_margin = nexacro._getCachedStyleObj("margin", "0 0 0 0");
	nexacro.Component._default_padding = nexacro._getCachedStyleObj("padding", "0 0 0 0");
	nexacro.Component._default_font = nexacro._getCachedStyleObj("font", "Dotum,9");
	nexacro.Component._default_center_align = nexacro._getCachedStyleObj("align", "center middle");
	nexacro.Component._default_left_align = nexacro._getCachedStyleObj("align", "left middle");
	nexacro.Component._default_right_align = nexacro._getCachedStyleObj("align", "right middle");
	nexacro.Component._default_step_align = nexacro._getCachedStyleObj("align", "center bottom");
	nexacro.Component._default_textarea_align = nexacro._getCachedStyleObj("align", "left top");
	nexacro.Component._default_align = nexacro.Component._default_center_align;
	nexacro.Component._default_buttonimg_align = nexacro._getCachedStyleObj("align", "lefttext middle");
	nexacro.Component._default_opacity = nexacro._getCachedStyleObj("opacity", "100");
	nexacro.Component._default_cursor = nexacro._getCachedStyleObj("cursor", "auto");
	nexacro.Component._wait_cursor = nexacro._getCachedStyleObj("cursor", "wait");
	nexacro.Component._default_accessibility = nexacro._getCachedStyleObj("accessibility", "");
	nexacro.Component._default_shadow = nexacro._getCachedStyleObj("shadow", "");
	nexacro.Component._default_rtlimagemirroring = nexacro._getCachedStyleObj("rtlimagemirroring", "false");
	nexacro.Component._default_letterspace = nexacro._getCachedStyleObj("letterspace", "0");
	nexacro.Component._default_border = nexacro._getCachedStyleObj("border", "1px solid red");
	nexacro.Component._default_bordertype = nexacro._getCachedStyleObj("bordertype", "normal");

	nexacro.Component.SCROLLBAR_DEFAULT_SIZE = 17;

	nexacro.Component._status_table = {
		"enable_normal" : "normal", 
		"enable_disabled" : "normal", 
		"enable_focused" : "focused", 
		"enable_mouseover" : "mouseover", 
		"enable_selected" : "selected", 
		"enable_pushed" : "pushed", 
		"enable_readonly" : "readonly", 
		"enable_deactivate" : "deactivate", 
		"disable_normal" : "disabled", 
		"disable_disabled" : "disabled", 
		"disable_focused" : "disabled", 
		"disable_mouseover" : "disabled", 
		"disable_selected" : "disabled", 
		"disable_pushed" : "disabled", 
		"disable_readonly" : "disabled", 
		"focus_normal" : "focused", 
		"focus_disabled" : "disabled", 
		"focus_focused" : "focused", 
		"focus_mouseover" : "mouseover", 
		"focus_selected" : "selected", 
		"focus_pushed" : "pushed", 
		"focus_readonly" : "focused", 
		"readonly_normal" : "readonly", 
		"readonly_disabled" : "disabled", 
		"readonly_focused" : "focused", 
		"readonly_mouseover" : "mouseover", 
		"readonly_selected" : "selected", 
		"readonly_pushed" : "pushed", 
		"readonly_readonly" : "readonly"
	};

	_pComponent._width = null;
	_pComponent._height = null;
	_pComponent._left = null;
	_pComponent._top = null;
	_pComponent._right = null;
	_pComponent._bottom = null;

	_pComponent.left = null;
	_pComponent.top = null;
	_pComponent.right = null;
	_pComponent.bottom = null;
	_pComponent.width = null;
	_pComponent.height = null;

	_pComponent._overedobj = null;

	_pComponent._dragging_cursor = null;
	_pComponent.__setPosition9x = function (val) {
		if (val.indexOf(":") >= 0) {
			var valarr = val.split(/\s+/);
			var i = 0;
			var v = "", prestr = "";
			var idx = 0;

			var pos = {
				left : null, 
				top : null, 
				right : null, 
				bottom : null, 
				width : null, 
				height : null
			};

			var old_left = this._adjust_left;
			var old_top = this._adjust_top;
			var old_width = this._adjust_width;
			var old_height = this._adjust_height;
			var bsize = false, bmove = false;

			this.position = "absolute";

			if (valarr.length == 5) {
				this.position = valarr[0];
				i = 1;
			}
			var valarr_len = valarr.length;
			for (i; i < valarr_len; i++) {
				v = valarr[i].toString();

				idx = v.indexOf(":");
				prestr = v.substring(0, idx);
				v = v.substring(idx + 1);

				switch (prestr) {
					case "l":
						pos.left = v;
						break;
					case "t":
						pos.top = v;
						break;
					case "r":
						pos.right = v;
						break;
					case "b":
						pos.bottom = v;
						break;
					case "w":
						pos.width = v;
						break;
					case "h":
						pos.height = v;
						break;
				}
			}
			this._adjustPosition(pos.left, pos.top, pos.right, pos.bottom, pos.width, pos.height, this.parent._client_width, this.parent._client_height);
		}
		else {
			var valarr = val.split(/\s+/);

			var pos = {
				left : 0, 
				top : 0, 
				right : 0, 
				bottom : 0
			};
			var old_left = this._adjust_left;
			var old_top = this._adjust_top;
			var old_width = this._adjust_width;
			var old_height = this._adjust_height;
			var bsize = false, bmove = false;

			switch (valarr.length) {
				case 4:
					this.position = "absolute";
					pos.left = (parseInt(valarr[0]) | 0);
					pos.top = (parseInt(valarr[1]) | 0);
					pos.right = (parseInt(valarr[2]) | 0);
					pos.bottom = (parseInt(valarr[3]) | 0);
					break;
				case 5:
					this.position = (parseInt(valarr[0]) || "absolute");
					pos.left = (parseInt(valarr[1]) | 0);
					pos.top = (parseInt(valarr[2]) | 0);
					pos.right = (parseInt(valarr[3]) | 0);
					pos.bottom = (parseInt(valarr[4]) | 0);
					break;
				default:
					this.position = "absolute";
					pos.left = 0;
					pos.top = 0;
					pos.right = 0;
					pos.bottom = 0;
					break;
			}
			var w = pos.right - pos.left;
			var h = pos.bottom - pos.top;
			this._adjustPosition(pos.left, pos.top, null, null, w, h, this.parent._client_width, this.parent._client_height);
		}

		if (this._adjust_width != old_width || this._adjust_height != old_height) {
			bsize = true;
		}
		if (this._adjust_left != old_left || this._adjust_top != old_top) {
			bmove = true;
		}

		this.on_update_position(bsize, bmove);
	};

	_pComponent.__getPosition9x = function (target) {
		var obj = new nexacro.__position9xObj(target);

		obj.left = this._adjust_left;
		obj.top = this._adjust_top;
		obj.right = this._adjust_left + this._adjust_width;
		obj.bottom = this._adjust_top + this._adjust_height;
		obj._updateValue();

		return obj;
	};

	_pComponent.__getPosition29x = function (target) {
		var obj = new nexacro.__position29xObj(target);

		obj.left = this.left;
		obj.top = this.top;
		obj.right = this.right;
		obj.bottom = this.bottom;
		obj.width = this.width;
		obj.height = this.height;
		obj._updateValue();

		return obj;
	};

	_pComponent.set_position = function (v) {
		if (this.position != v) {
			this.position = v;
			this.on_apply_position(v);
		}
	};

	_pComponent.on_apply_position = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			control_elem.setElementPositionBasis(v);
		}
	};

	_pComponent._adjustPosition = function (left, top, right, bottom, width, height, parentWidth, parentHeight) {
		var val = null;

		var _left = left;
		var _right = right;

		var bRtl = this._isRtl(this.parent);
		if (bRtl) {
		}

		if (this.parent && this.parent._is_form && this.parent.parent && this.parent.parent._is_frame) {
			var form = this.parent;
			var zoom_factor = form.getZoom();
			if (zoom_factor != 100) {
				parentWidth = (parentWidth * 100) / zoom_factor;
				parentHeight = (parentHeight * 100) / zoom_factor;
			}
		}

		for (var i = 0; i < 6; i++) {
			switch (i) {
				case 0:
					val = _left;
					if (val != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(val, parentWidth);
						}
						else {
							val = this._convToPixel(val, parentHeight);
						}
					}
					if (isNumber(val) || val == null) {
						this.left = left;
						this._left = val;
					}
					break;
				case 1:
					val = top;
					if (val != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(val, parentWidth);
						}
						else {
							val = this._convToPixel(val, parentHeight);
						}
					}
					if (isNumber(val) || val == null) {
						this.top = top;
						this._top = val;
					}
					break;
				case 2:
					val = _right;
					if (val != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(val, parentWidth);
						}
						else {
							val = this._convToPixel(val, parentHeight);
						}
					}
					if (isNumber(val) || val == null) {
						this.right = right;
						this._right = val;
					}
					break;
				case 3:
					val = bottom;
					if (val != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(val, parentWidth);
						}
						else {
							val = this._convToPixel(val, parentHeight);
						}
					}
					if (isNumber(val) || val == null) {
						this.bottom = bottom;
						this._bottom = val;
					}
					break;
				case 4:
					val = width;
					if (val != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(val, parentWidth);
						}
						else {
							val = this._convToPixel(val, parentHeight);
						}
					}
					if (isNumber(val) || val == null) {
						this.width = width;
						this._width = val;
					}
					break;
				case 5:
					val = height;
					if (val != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(val, parentWidth);
						}
						else {
							val = this._convToPixel(val, parentHeight);
						}
					}
					if (isNumber(val) || val == null) {
						this.height = height;
						this._height = val;
					}
					break;
			}
		}

		if (this._width != null || (this._right != null && this._left != null)) {
			this._adjust_width = this._width != null ? this._width : parentWidth - this._left - this._right;
		}

		if (this._height != null || this._bottom != null) {
			this._adjust_height = this._height != null ? this._height : parentHeight - this._top - this._bottom;
		}

		if (this._left != null || this._right != null) {
			this._adjust_left_ltr = this._adjust_left = this._left != null ? this._left : parentWidth - this._right - this._adjust_width;
			if (bRtl) {
				this._adjust_left_ltr = this._right != null ? this._right : parentWidth - this._left - this._adjust_width;
			}
		}

		if (this.top != null || this._bottom != null) {
			this._adjust_top = this._top != null ? this._top : parentHeight - this._bottom - this._adjust_height;
		}

		if (this.left && this.width && this.right) {
			this._right = 0;
			this.right = null;
		}

		if (this.top && this.height && this.bottom) {
			this._bottom = 0;
			this.bottom = null;
		}
	};

	_pComponent._convToPixel = function (val, parentsize) {
		if (typeof (val) == "string" && val.indexOf("%") >= 0) {
			return parseInt(parentsize * (parseFloat(val) / 100));
		}

		return (parseInt(val) | 0);
	};

	_pComponent._setAllZeroPixel = function () {
		var bmove = false, bsize = false;

		if (this._adjust_left != 0 || this._adjust_top != 0) {
			this.left = 0;
			this.top = 0;
			bmove = true;
		}
		if (this._adjust_width != 0 || this._adjust_height != 0) {
			this.width = 0;
			this.height = 0;
			bsize = true;
		}

		this._update_position(bsize, bmove);
	};

	_pComponent.set_left = function (propVal) {
		if (propVal !== null && propVal !== undefined && isNaN(parseInt(propVal))) {
			return;
		}

		if (this.left != propVal) {
			this.left = propVal;
			if (propVal === null || propVal === undefined) {
				this._left = null;
				if (this._right && !this._width) {
					this.set_width(this._adjust_width);
				}
				else if (!this._right && this._width) {
					var right = this._adjust_left + this._adjust_width;
					this.set_right(this.parent._client_width - right);
				}

				return;
			}

			if (this.right && this.width) {
				this.width = null;
				this._width = null;
			}

			this._update_position(false, true);
		}
	};

	_pComponent.set_top = function (propVal) {
		if (propVal !== null && propVal !== undefined && isNaN(parseInt(propVal))) {
			return;
		}

		if (this.top != propVal) {
			this.top = propVal;
			if (propVal === null || propVal === undefined) {
				this._top = null;
				if (this._bottom && !this._height) {
					this.set_height(this._adjust_height);
				}
				else if (!this._bottom && this._height) {
					var bottom = this._adjust_top + this._adjust_height;

					this.set_bottom(this.parent._client_height - bottom);
				}

				return;
			}

			if (this.bottom && this.height) {
				this.height = null;
				this._height = null;
			}

			this._update_position(false, true);
		}
	};

	_pComponent.set_right = function (propVal) {
		if (propVal !== null && propVal !== undefined && isNaN(parseInt(propVal))) {
			return;
		}

		if (this.right != propVal) {
			this.right = propVal;
			if (propVal === null || propVal === undefined) {
				this._right = null;
				if (this._left && !this._width) {
					this.set_width(this._adjust_width);
				}
				else if (!this._left && this._width) {
					this.set_left(this._adjust_left);
				}

				return;
			}


			if (!nexacro._isNull(this.left) && !nexacro._isNull(this.width)) {
				this.width = null;
				this._width = null;
			}

			this._update_position(true, true);
		}
	};

	_pComponent.set_bottom = function (propVal) {
		if (propVal !== null && propVal !== undefined && isNaN(parseInt(propVal))) {
			return;
		}

		if (this.bottom != propVal) {
			this.bottom = propVal;
			if (propVal === null || propVal === undefined) {
				this._bottom = null;
				if (this._top && !this._height) {
					this.set_height(this._adjust_height);
				}
				else if (!this._top && this._height) {
					this.set_top(this._adjust_top);
				}

				return;
			}

			if (!nexacro._isNull(this.top) && !nexacro._isNull(this.height)) {
				this.height = null;
				this._height = null;
			}

			this._update_position(true, true);
		}
	};

	_pComponent.set_width = function (propVal) {
		if (propVal !== null && propVal !== undefined && isNaN(parseInt(propVal))) {
			return;
		}

		if (this.width != propVal) {
			var pre_width = this.width;
			this.width = propVal;

			if (propVal === null || propVal === undefined) {
				this._width = null;

				if (this._left > -1 && !this._right) {
					var right = this._adjust_left + this._adjust_width;
					this.set_right(this.parent._client_width - right);
				}
				else if (!this._left && this._right > -1) {
					this.set_left(this._adjust_left);
				}

				return;
			}

			if (!nexacro._isNull(this.left) && !nexacro._isNull(this.right)) {
				this.right = null;
				this._right = null;
			}
			this._update_position(true, false);

			if (pre_width == 0 && this.cssclass) {
				this.on_apply_prop_class();
			}
		}
	};

	_pComponent.set_height = function (propVal) {
		if (propVal !== null && propVal !== undefined && isNaN(parseInt(propVal))) {
			return;
		}

		if (this.height != propVal) {
			var pre_height = this.height;

			this.height = propVal;
			if (propVal === null || propVal === undefined) {
				this._height = null;

				if (this._top && !this._bottom) {
					var bottom = this._adjust_top + this._adjust_height;
					this.set_bottom(this.parent._client_height - bottom);
				}
				else if (!this._top && this._bottom) {
					this.set_top(this._adjust_top);
				}

				return;
			}

			if (!nexacro._isNull(this.top) && !nexacro._isNull(this.bottom)) {
				this.bottom = null;
				this._bottom = null;
			}

			this._update_position(true, false);

			if (pre_height == 0 && this.cssclass) {
				this.on_apply_prop_class();
			}
		}
	};

	_pComponent.getPixelLeft = function () {
		return this._left;
	};
	_pComponent.getPixelTop = function () {
		return this._top;
	};
	_pComponent.getPixelRight = function () {
		return this._right;
	};
	_pComponent.getPixelBottom = function () {
		return this._bottom;
	};
	_pComponent.getPixelWidth = function () {
		return this._width;
	};
	_pComponent.getPixelHeight = function () {
		return this._height;
	};

	_pComponent.getOffsetLeft = function () {
		return this._adjust_left;
	};
	_pComponent.getOffsetTop = function () {
		return this._adjust_top;
	};
	_pComponent.getOffsetRight = function () {
		return this._adjust_left + this._adjust_width;
	};
	_pComponent.getOffsetBottom = function () {
		return this._adjust_top + this._adjust_height;
	};
	_pComponent.getOffsetWidth = function () {
		return this._adjust_width;
	};
	_pComponent.getOffsetHeight = function () {
		return this._adjust_height;
	};

	_pComponent.setOffsetLeft = function (v) {
		return this.set_left(v);
	};
	_pComponent.setOffsetTop = function (v) {
		this.set_top(v);
	};
	_pComponent.setOffsetRight = function (v) {
		this.set_width((v | 0) - this._adjust_left);
	};
	_pComponent.setOffsetBottom = function (v) {
		this.set_height((v | 0) - this._adjust_top);
	};
	_pComponent.setOffsetWidth = function (v) {
		this.set_width(v);
	};
	_pComponent.setOffsetHeight = function (v) {
		this.set_height(v);
	};

	_pComponent._getAccessibilityRole = function (accessibility) {
		return accessibility.role ? accessibility.role : this._accessibility_role;
	};

	_pComponent._getAccessibilityLabel = function (accessibility) {
		var label = "";
		return (label = this._getLinkedLabel(accessibility.label)) ? label : this.on_get_style_accessibility_label();
	};

	_pComponent._on_getAccessibilityAdditionalLabel = function () {
		return "";
	};

	_pComponent._on_getAccessibilityAdditionalRole = function () {
		if (this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo)) == "heading") {
			return " heading";
		}
		return "";
	};

	_pComponent._getAccessibilityDescLevel = function (desclevel) {
		if (desclevel == "none" || desclevel == "child") {
			return desclevel;
		}
		var comp = this.parent;
		if (comp && comp._getDescLevel) {
			return comp._getDescLevel();
		}
		else {
			return desclevel;
		}
	};

	_pComponent._getAccessibilityDescription = function (accessibility) {
		var description = "";
		return (description = this._getLinkedDescription(accessibility.description)) ? description : this.on_get_style_accessibility_description();
	};
	_pComponent._getAccessibilityAction = function (accessibility) {
		var action = this._getLinkedAction(accessibility.action);
		return action ? action : (action = this.on_get_style_accessibility_action()) ? action : "";
	};
	_pComponent._getAccessibilityReadLabel = function () {
		var control = this.getElement();
		if (control && control.accessibility_readlabel) {
			return control.accessibility_readlabel;
		}
		return "";
	};

	_pComponent.on_get_style_accessibility_label = function () {
		var label = "";
		label = this.text ? this.text : this.value;
		return label;
	};

	_pComponent.on_get_style_accessibility_description = function () {
		return this.tooltiptext;
	};
	_pComponent.on_get_style_accessibility_action = function () {
		return "";
	};
	_pComponent._getLinkedLabel = function (label) {
		if (label) {
			if (label.match("@")) {
				var linkedId = label.substr(label.search("@") + 1, label.length);
				var linkedComp = this._getFormChildById(linkedId);
				if (linkedComp) {
					var linkedaccessibility = linkedComp.on_find_CurrentStyle_accessibility(linkedComp._pseudo);
					return linkedComp._getAccessibilityLabel(linkedaccessibility);
				}
				else {
					return;
				}
			}
		}
		return label;
	};

	_pComponent._getLinkedDescription = function (description) {
		if (description) {
			if (description.match("@")) {
				var linkedId = description.substr(description.search("@") + 1, description.length);
				var linkedComp = this._getFormChildById(linkedId);
				if (linkedComp) {
					var linkedaccessibility = linkedComp.on_find_CurrentStyle_accessibility(linkedComp._pseudo);
					return linkedComp._getAccessibilityDescription(linkedaccessibility);
				}
				else {
					return;
				}
			}
		}
		return description;
	};

	_pComponent._getDescLevel = function () {
		if (this != application) {
			var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
			if (accessibility) {
				var desclevel = accessibility.desclevel;
				var comp = this.parent;
				if (desclevel == "none" || desclevel == "self") {
					return "none";
				}
				else if (comp && comp._getDescLevel && comp._is_alive) {
					return comp._getDescLevel();
				}
			}
		}
		return "all";
	};

	_pComponent._getLinkedAction = function (action) {
		if (action) {
			if (action.match("@")) {
				var linkedId = action.substr(action.search("@") + 1, action.length);
				var linkedComp = this._getFormChildById(linkedId);
				if (linkedComp) {
					var linkedaccessibility = linkedComp.on_find_CurrentStyle_accessibility(linkedComp._pseudo);
					return linkedComp._getAccessibilityAction(linkedaccessibility);
				}
				else {
					return;
				}
			}
		}
		return action;
	};

	_pComponent._getFormChildById = function (id) {
		return this.parent[id];
	};

	_pComponent._getAccessibilityParentValue = function (accessibility) {
		var label = "";
		var type = nexacro._accessibilitydescreadtype;
		if ((type & 0x01) == 0x01) {
			var _label = this._getAccessibilityLabel(accessibility);
			if (_label) {
				label = _label;
			}
		}
		if ((type & 0x02) == 0x02 && this.accessibility_action) {
			var _action = " " + this._getAccessibilityAction(accessibility);
			if (_action) {
				label += _action;
			}
		}
		if ((type & 0x04) == 0x04 && this.accessibility_description) {
			var _description = " " + this._getAccessibilityDescription(accessibility);
			if (_description) {
				label += _description;
			}
		}
		return label;
	};

	_pComponent._make_accessibility_value = function (accessibility) {
		var desclevel = this._getAccessibilityDescLevel(accessibility.desclevel);
		var role = "none";
		var label = " ";
		var description = "";
		var action = "";

		if (accessibility.enable && (desclevel != "none" && desclevel != "child")) {
			role = this._getAccessibilityRole(accessibility);
			label = this._getAccessibilityLabel(accessibility);

			description = this._getAccessibilityDescription(accessibility);
			action = this._getAccessibilityAction(accessibility);
		}
		else if (nexacro._accessibilitytype == 4) {
			role = this._getAccessibilityRole(accessibility);
		}

		var enable = accessibility.enable ? "enable" : "disable";
		if (!role) {
			role = "none";
		}
		if (!label) {
			label = " ";
		}

		var val = role + " " + enable + " " + desclevel + " '" + label + "' '" + description + "' '" + action + "'";

		var realrole = nexacro._roleList[role];
		var cachedAccessibility = nexacro._getCachedStyleObj("accessibility", val);
		if (!cachedAccessibility._role || 
			cachedAccessibility.desclevel != accessibility.desclevel || 
			cachedAccessibility._role != realrole || 
			cachedAccessibility._label != label || 
			cachedAccessibility._description != description || 
			cachedAccessibility._action != action) {
			cachedAccessibility._role = nexacro._roleList[role];
			cachedAccessibility._label = label;
			cachedAccessibility._description = description;
			cachedAccessibility._action = action;
			cachedAccessibility._desclevel = desclevel;
			return cachedAccessibility;
		}
		else {
			return cachedAccessibility;
		}

		return accessibility;
	};

	_pComponent._refreshAccessibilityValue = function () {
		if (nexacro._enableaccessibility && (nexacro._accessibilitytype == 4 || nexacro._accessibilitytype == 5)) {
			var control_elem = this.getElement();
			var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
			if (accessibility && control_elem) {
				accessibility = this._make_accessibility_value(accessibility);
				control_elem.setAccessibility(accessibility);
			}
		}
	};

	_pComponent._setAccessibilityRole = nexacro._emptyFn;
	_pComponent._setAccessibilityLabel = nexacro._emptyFn;
	_pComponent._setAccessibilityEnable = nexacro._emptyFn;
	_pComponent._setAccessibilityDescription = nexacro._emptyFn;
	_pComponent._setAccessibilityDescLevel = nexacro._emptyFn;
	_pComponent._setAccessibilityStatDisabled = nexacro._emptyFn;
	_pComponent._setAccessibilityStatHidden = nexacro._emptyFn;
	_pComponent._setAccessibilityStatChecked = nexacro._emptyFn;
	_pComponent._setAccessibilityStatPressed = nexacro._emptyFn;
	_pComponent._setAccessibilityStatSelected = nexacro._emptyFn;
	_pComponent._setAccessibilityStatExpanded = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagHasPopup = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagFocusable = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagReadOnly = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagPassword = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagMultiSelectable = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagSelectable = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagDefaultButton = nexacro._emptyFn;
	_pComponent._setAccessibilityFlagMultiLine = nexacro._emptyFn;
	_pComponent._setAccessibilityInfoCount = nexacro._emptyFn;
	_pComponent._setAccessibilityInfoIndex = nexacro._emptyFn;
	_pComponent._setAccessibilityInfoValueMax = nexacro._emptyFn;
	_pComponent._setAccessibilityInfoValueMin = nexacro._emptyFn;
	_pComponent._setAccessibilityInfoValueCur = nexacro._emptyFn;
	_pComponent._setAccessibilityInfoLevel = nexacro._emptyFn;
	_pComponent._setAccessibilityHotKey = nexacro._emptyFn;
	_pComponent._setAccessibilityActiveDescendant = nexacro._emptyFn;
	_pComponent._notifyAccessibility = nexacro._emptyFn;
	_pComponent._setAccessibilityStatFlag = nexacro._emptyFn;
	_pComponent._isAccessibilityEnable = nexacro._echoFn;
	_pComponent._isItemAccessibilityEnable = nexacro._echoFn;
	_pComponent._setAccessibilityValue = nexacro._emptyFn;
	_pComponent._setAccessibilityStatFocus = nexacro._emptyFn;
	_pComponent._getNextAccessibilityOrderIndex = nexacro._emptyFn;


	_pComponent._get_css_typename = function () {
		return this._type_name;
	};
	_pComponent._get_css_assumedtypename = function () {
		return this._type_name;
	};
	_pComponent._make_css_finder = function () {
		var _f;

		if (this._is_popup_frame) {
			_f = this;
		}
		else {
			_f = this._refform;
		}

		if (!_f) {
			return null;
		}
		else {
			if (_f._is_frame) {
				if (_f._getWindow().frame._is_popup_frame || _f._is_popup_frame) {
					_f = this;
				}
				else {
					_f = application;
				}
			}
			else {
				while (_f && !_f._is_form) {
					if (_f._is_application) {
						break;
					}
					_f = _f.parent;
					if (!_f) {
						return null;
					}
				}
			}
		}

		var ref_finder = this._ref_css_finder;
		if (!ref_finder) {
			this._makeCssRefInfo();
		}

		var finder = this._css_finder;
		if (!finder) {
			var selectors = [];
			var flist = _f._find_csslist;
			if (!flist) {
				flist = _f._make_find_csslist();
			}
			var cnt = flist.length;

			var cls_name = "";
			var type_name = this._get_css_typename();
			var assumed_name = this._get_css_assumedtypename();

			var type_name2 = "";
			if (type_name != assumed_name) {
				type_name2 = assumed_name;
			}

			var cls_flag = false, id_flag = false;
			var type_flag = false, type_flag2 = false;

			var css;
			var css_id;
			var css_type;
			var css_cls;
			var css_typecls;

			var refid = this._refcssid;
			if (this._refcssid) {
				for (var i = 0; i < cnt; i++) {
					css = flist[i];
					css_id = css[refid];
					if (css_id) {
						selectors.push(css_id);
						id_flag = true;
					}
				}
			}

			cls_name = this.cssclass;
			if (cls_name) {
				cls_name = "." + cls_name;

				if (type_name2) {
					var typecls_name2 = type_name2 + cls_name;
					for (var i = 0; i < cnt; i++) {
						css = flist[i];
						css_typecls = css[typecls_name2];
						if (css_typecls) {
							selectors.push(css_typecls);
							type_flag2 = true;
							cls_flag = true;
						}
					}
				}

				if (type_name) {
					var typecls_name = type_name + cls_name;
					for (var i = 0; i < cnt; i++) {
						css = flist[i];
						css_typecls = css[typecls_name];
						if (css_typecls) {
							selectors.push(css_typecls);
							type_flag = true;
							cls_flag = true;
						}
					}
				}

				for (var i = 0; i < cnt; i++) {
					css = flist[i];
					css_cls = css[cls_name];
					if (css_cls) {
						selectors.push(css_cls);
						cls_flag = true;
					}
				}
			}

			if (type_name2) {
				for (var i = 0; i < cnt; i++) {
					css = flist[i];
					css_type = css[type_name2];
					if (css_type) {
						selectors.push(css_type);
						type_flag2 = true;
					}
				}
			}

			if (type_name) {
				for (var i = 0; i < cnt; i++) {
					css = flist[i];
					css_type = css[type_name];
					if (css_type) {
						selectors.push(css_type);
						type_flag = true;
					}
				}
			}

			var finder_name = "";
			if (cls_flag || id_flag || type_flag || type_flag2) {
				if (type_name2) {
					finder_name += type_name2;
				}
				else {
					finder_name += type_name;
				}
				if (id_flag) {
					finder_name += "_" + refid;
					this._cssfind_useid = true;
				}
				if (cls_flag) {
					finder_name += "_" + this.cssclass;
				}
			}

			if (!finder_name) {
				finder = {
				};
				finder._finder_name = type_name;
			}
			else {
				finder = _f._cssfinder_cache[finder_name];
				if (!finder) {
					finder = {
					};

					var pseudo, pitem;
					var len = selectors.length;
					for (var i = len - 1; i >= 0; i--) {
						var sel = selectors[i];
						for (var attr in sel) {
							if (!sel.hasOwnProperty(attr)) {
								continue;
							}
							var item = sel[attr];
							if (item._is_selector) {
								continue;
							}

							for (pseudo in item) {
								if (!item.hasOwnProperty(pseudo)) {
									continue;
								}
								pitem = item[pseudo];

								if (!finder[pseudo]) {
									finder[pseudo] = {
									};
								}
								finder[pseudo][attr] = pitem;
							}
						}
					}
					finder._finder_name = finder_name;
					finder._find_selectors = selectors;

					_f._cssfinder_cache[finder_name] = finder;
				}
			}
			this._css_finder = finder;
		}

		if (!ref_finder) {
			var parent = this._refcssobj;
			var id_name = this._refcssid;

			if (parent && parent._is_component && id_name) {
				if (!this._is_frame || (this._is_frame && !this._is_popup_frame)) {
					this._ref_css_finder = parent._make_refcss_finder(id_name, 4);
				}
			}
		}
		return finder;
	};


	_pComponent._make_refcss_finder = function (refid, recursive) {
		var _f;
		if (this._is_popup_frame) {
			_f = this;
		}
		else {
			_f = this._refform;
		}
		if (!_f) {
			return null;
		}

		this._makeCssRefInfo();
		var id_name = this._refcssid;
		var _refid = refid;
		var prefid = id_name ? (id_name + refid) : refid;
		var pref_finder = null;

		var parent = this._refcssobj;
		if (recursive-- > 0 && parent && parent._is_component && id_name) {
			if (!this._is_frame || (this._is_frame && !this._is_popup_frame)) {
				pref_finder = parent._make_refcss_finder(prefid, recursive);
			}
		}

		var finder = this._css_finder ? this._css_finder : this._make_css_finder();
		var ref_name;

		if (!pref_finder) {
			if (this._cssfind_useid) {
				ref_name = finder._finder_name + "_" + prefid;
			}
			else {
				ref_name = finder._finder_name + "_" + _refid;
			}
		}
		else {
			if (this._cssfind_useid) {
				ref_name = pref_finder._finder_name + "_" + prefid;
			}
			else {
				ref_name = pref_finder._finder_name + "_" + _refid;
			}
		}

		var ref_finder = _f._cssfinder_cache[ref_name];
		if (!ref_finder) {
			var sub_selectors = [];

			if (pref_finder) {
				var pref_selectors = pref_finder._find_selectors;
				if (pref_selectors) {
					var css;
					var cnt = pref_selectors.length;
					for (var i = 0; i < cnt; i++) {
						css = pref_selectors[i];
						sub_selectors.push(css);
					}
				}
			}

			if (id_name) {
				var flist = _f._find_csslist;
				if (!flist) {
					flist = _f._make_find_csslist();
				}

				var css;
				var css_pid;
				var cnt = flist.length;
				for (var i = 0; i < cnt; i++) {
					css = flist[i];
					if (css_pid = css[prefid]) {
						sub_selectors.push(css_pid);
					}
				}
			}

			var selectors = finder._find_selectors;
			if (selectors) {
				var css, css2;
				var cnt = selectors.length;
				for (var i = 0; i < cnt; i++) {
					css = selectors[i];
					if (css2 = css[refid]) {
						sub_selectors.push(css2);
					}
				}
			}

			var pseudo, pitem;
			var len = sub_selectors.length;
			if (len > 0) {
				ref_finder = {
				};
				for (var i = len - 1; i >= 0; i--) {
					var sel = sub_selectors[i];
					for (var attr in sel) {
						if (attr.charAt(0) == '$') {
							continue;
						}
						var item = sel[attr];
						if (item._is_selector) {
							continue;
						}

						for (pseudo in item) {
							if (!item.hasOwnProperty(pseudo)) {
								continue;
							}
							pitem = item[pseudo];

							if (!ref_finder[pseudo]) {
								ref_finder[pseudo] = {
								};
							}
							ref_finder[pseudo][attr] = pitem;
						}
					}
				}
				if (this._cssfind_useid && this._is_component && this._is_subcontrol) {
					ref_name = finder._finder_name + "_" + "#" + this.parent.id + prefid;
				}
				ref_finder._finder_name = ref_name;
				ref_finder._find_selectors = sub_selectors;

				_f._cssfinder_cache[ref_name] = ref_finder;
			}
		}

		return ref_finder;
	};


	_pComponent._find_comp_pseudo_obj = function (styleProp, pseudo, returnType) {
		var r;
		var finder = this._css_finder;

		do {
			if (pseudo != "normal") {
				var po = this._styles[pseudo];
				if (po && (r = po[styleProp]) && (!r._is_empty)) {
					break;
				}

				var find_readonly = (this._readonly && pseudo != "readonly");
				if (find_readonly) {
					var ro = this._styles["readonly"];
					if (ro && (r = ro[styleProp]) && (!r._is_empty)) {
						break;
					}
				}

				var no = this.style;
				if ((r = no[styleProp]) && (!r._is_empty)) {
					break;
				}

				if (!finder) {
					finder = this._make_css_finder();
				}

				var ref_finder = this._ref_css_finder;

				var ref_finder_pseudo = (ref_finder ? ref_finder[pseudo] : null);
				if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				var finder_pseudo = (finder ? finder[pseudo] : null);
				if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				if (find_readonly) {
					ref_finder_pseudo = (ref_finder ? ref_finder["readonly"] : null);
					if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}

					finder_pseudo = (finder ? finder["readonly"] : null);
					if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}
				}

				ref_finder_pseudo = (ref_finder ? ref_finder["normal"] : null);
				if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				finder_pseudo = (finder ? finder["normal"] : null);
				if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}
			}
			else {
				if (this._readonly) {
					var ro = this._styles["readonly"];
					if (ro && (r = ro[styleProp]) && (!r._is_empty)) {
						break;
					}
				}

				var no = this.style;
				if ((r = no[styleProp]) && (!r._is_empty)) {
					break;
				}


				if (!finder) {
					finder = this._make_css_finder();
				}

				var ref_finder = this._ref_css_finder;
				var ref_finder_pseudo, finder_pseudo;

				if (this._readonly) {
					ref_finder_pseudo = (ref_finder ? ref_finder["readonly"] : null);
					if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}

					finder_pseudo = (finder ? finder["readonly"] : null);
					if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}
				}

				ref_finder_pseudo = (ref_finder ? ref_finder["normal"] : null);
				if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				finder_pseudo = (finder ? finder["normal"] : null);
				if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}
			}
		} while (false);

		if (r && !r._is_empty) {
			var foundType = r._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				r = nexacro._getCachedStyleObj(returnType, r._value);
			}
			return r;
		}
		return null;
	};
	_pComponent._find_comp_pseudo_obj_from_finder = function (styleProp, pseudo, returnType) {
		var r;
		var finder = this._css_finder;

		do {
			if (pseudo != "normal") {
				if (!finder) {
					finder = this._make_css_finder();
				}

				var ref_finder = this._ref_css_finder;

				var ref_finder_pseudo = (ref_finder ? ref_finder[pseudo] : null);
				if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				var finder_pseudo = (finder ? finder[pseudo] : null);
				if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				if (this._readonly && pseudo != "readonly") {
					ref_finder_pseudo = (ref_finder ? ref_finder["readonly"] : null);
					if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}

					finder_pseudo = (finder ? finder["readonly"] : null);
					if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}
				}

				ref_finder_pseudo = (ref_finder ? ref_finder["normal"] : null);
				if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				finder_pseudo = (finder ? finder["normal"] : null);
				if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}
			}
			else {
				if (!finder) {
					finder = this._make_css_finder();
				}

				var ref_finder = this._ref_css_finder;
				var ref_finder_pseudo, finder_pseudo;

				if (this._readonly) {
					ref_finder_pseudo = (ref_finder ? ref_finder["readonly"] : null);
					if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}

					finder_pseudo = (finder ? finder["readonly"] : null);
					if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
						break;
					}
				}

				ref_finder_pseudo = (ref_finder ? ref_finder["normal"] : null);
				if (ref_finder_pseudo && (r = ref_finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}

				finder_pseudo = (finder ? finder["normal"] : null);
				if (finder_pseudo && (r = finder_pseudo[styleProp]) && (!r._is_empty)) {
					break;
				}
			}
		} while (false);

		if (r && !r._is_empty) {
			var foundType = r._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				r = nexacro._getCachedStyleObj(returnType, r._value);
			}
			return r;
		}
		return null;
	};
	_pComponent._makeCssRefInfo = function () {
		if (!this._refcssobj) {
			var comp = this.parent;
			if (comp && comp._is_component) {
				this._refcssobj = comp;
			}
		}

		if (!this._refcssid && this.id) {
			this._refcssid = "#" + this.id;
		}

		return this._refcssobj;
	};

	_pComponent._find_ctrl_pseudo_obj = _pComponent._find_comp_pseudo_obj;
	_pComponent._find_typedctrl_pseudo_obj = _pComponent._find_comp_pseudo_obj;

	_pComponent._contains = function (oDescendant) {
		while (oDescendant) {
			if (oDescendant == this) {
				return true;
			}
			if (oDescendant._is_popup_frame && oDescendant._is_window) {
				break;
			}
			oDescendant = oDescendant.parent;
		}
		return false;
	};

	_pComponent._getRootComponent = function (component) {
		var comp = component;
		while (comp && (comp._is_subcontrol || !comp._is_component)) {
			if (comp == comp.parent) {
				return null;
			}
			comp = comp.parent;
		}
		return comp;
	};

	_pComponent._getPopupRootComponent = function (component) {
		var comp = component;
		while (comp && (comp._is_subcontrol || !comp._is_component) && !comp.popupwindow) {
			if (comp == comp.parent) {
				return null;
			}
			comp = comp.parent;
		}
		return comp;
	};

	_pComponent._getElementRootControl = function (element) {
		var control_elem = element;

		while (control_elem && !control_elem.linkedcontrol) {
			control_elem = control_elem.parent;
		}

		var comp = control_elem.linkedcontrol;

		while (comp && !comp._is_subcontrol) {
			if (comp == comp.parent) {
				break;
			}
			comp = comp.parent;
		}
		return comp;
	};

	_pComponent._getMainForm = function () {
		var comp = this;
		while (comp) {
			if (comp._is_frame) {
				return comp.form;
			}
			if (!comp._is_form && comp._refform) {
				comp = comp._refform;
			}
			else if (comp.parent) {
				comp = comp.parent;
			}
			else {
				if (comp._is_form) {
					return comp;
				}
				return null;
			}
		}

		return null;
	};

	_pComponent._getRootWindowComponent = function (component) {
		var comp = component ? component : this;
		while (comp) {
			if (comp._is_window) {
				return comp;
			}
			if (comp._isPopupVisible()) {
				return comp;
			}
			if (comp == comp.parent) {
				break;
			}
			comp = comp.parent;
		}
		return null;
	};

	_pComponent._isPopupVisible = function () {
		return false;
	};

	_pComponent._closePopup = function () {
		var popup = this.popupwindow;
		if (popup) {
			popup._closePopup();
		}
	};

	_pComponent._getReferenceComponent = function (component) {
		var comp = component;
		while (comp && !comp._is_reference_control) {
			if (comp == comp.parent) {
				return null;
			}
			comp = comp.parent;
		}
		return comp;
	};
	_pComponent._getReferenceContext = function () {
		return this._refform;
	};

	_pComponent._centerPopup = function (win, w, h) {
		var rootframe = this._getOwnerFrame();
		if (!rootframe) {
			return;
		}

		var rootwindow = rootframe._getWindow();
		rootframe = rootwindow ? rootwindow.frame : null;
		if (!rootframe) {
			return;
		}

		var pos = nexacro._getElementPositionInFrame(rootframe.getElement());
		var l = ((rootframe.width / 2) - (w / 2));
		var t = ((rootframe.height / 2) - (h / 2));
		t = t < 0 ? 0 : t;

		h = h > rootframe.height ? rootframe.height : h;
		win._popup((l + pos.x), (t + pos.y), w, h);
	};

	_pComponent._getPopupType = function () {
		var popuptype = this.on_find_CurrentStyle_popuptype(this._pseudo);
		if (!popuptype) {
			return nexacro._getLocalStorage("popuptype", "normal");
		}
		return popuptype._value;
	};

	_pComponent._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		return {
			want_tab : false, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : false, 
			want_touchstart : false, 
			want_touchmove : false
		};
	};

	_pComponent.set_scrollbars = function (v) {
		if (v != this.scrollbars || !this._is_created) {
			switch (v) {
				case "none":
					this._scrollbars = 0;
					break;
				case "autovert":
					this._scrollbars = 1;
					break;
				case "autohorz":
					this._scrollbars = 2;
					break;
				case "autoboth":
					this._scrollbars = 3;
					break;
				case "fixedvert":
					this._scrollbars = 4;
					break;
				case "fixedhorz":
					this._scrollbars = 8;
					break;
				case "fixedboth":
					this._scrollbars = 12;
					break;
				case "alwaysvert":
					this._scrollbars = 16;
					break;
				case "alwayshorz":
					this._scrollbars = 32;
					break;
				default:
					this._scrollbars = 3;
					v = "autoboth";
			}
			this.scrollbars = v;
			if (this._control_element && this._is_created) {
				this._onResetScrollBar();
			}
		}
		return v;
	};

	_pComponent.on_vscroll = function (obj, e) {
		if (this.onvscroll && this.onvscroll._has_handlers) {
			e.fromobject = this;
			this.onvscroll._fireEvent(this, e);
		}
		return true;
	};
	_pComponent.on_hscroll = function (obj, e) {
		if (this.onhscroll && this.onhscroll._has_handlers) {
			e.fromobject = this;
			this.onhscroll._fireEvent(this, e);
		}
		return true;
	};

	_pComponent._onRecalcScrollSize = nexacro._emptyFn;

	_pComponent._onResetScrollBar = function () {
		if (!this._is_scrollable) {
			return;
		}

		var control_elem = this._control_element;
		if (control_elem) {
			var new_hbar = false;
			var new_vbar = false;

			var scroll_default_size = nexacro.Component.SCROLLBAR_DEFAULT_SIZE;
			var hscroll_size = scroll_default_size;
			var vscroll_size = scroll_default_size;

			var show_type = 0;
			var bShowVScroll = false;
			var bShowHScroll = false;
			switch (this._scrollbars) {
				case 0:
					break;
				case 1:
					bShowVScroll = true;
					show_type = 1;
					break;
				case 2:
					bShowHScroll = true;
					show_type = 1;
					break;
				case 3:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 1;
					break;
				case 4:
					bShowVScroll = true;
					show_type = 2;
					break;
				case 8:
					bShowHScroll = true;
					show_type = 2;
					break;
				case 12:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 2;
					break;
				case 16:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 31;
					break;
				case 32:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 32;
					break;
			}

			if (bShowHScroll && !this.hscrollbar) {
				this.hscrollbar = this._createHScrollBar(scroll_default_size);
				if (this.hscrollbar.scrollbarsize > 0) {
					hscroll_size = this.hscrollbar.scrollbarsize;
					this.hscrollbar.resize(this._client_width, hscroll_size);
				}
				new_hbar = true;
			}
			else if (bShowHScroll && this.hscrollbar) {
				if (this.hscrollbar.scrollbarsize > 0) {
					hscroll_size = this.hscrollbar.scrollbarsize;
					this.hscrollbar.resize(this._client_width, hscroll_size);
					control_elem._hscroll_height = hscroll_size;
				}
			}
			else if (!bShowHScroll && this.hscrollbar) {
				this.hscrollbar.destroy();
				this.hscrollbar = null;
			}

			if (bShowVScroll && !this.vscrollbar) {
				this.vscrollbar = this._createVScrollBar(scroll_default_size);
				if (this.vscrollbar.scrollbarsize > 0) {
					vscroll_size = this.vscrollbar.scrollbarsize;
					this.vscrollbar.resize(vscroll_size, this._client_height);
				}
				new_vbar = true;
			}
			else if (bShowVScroll && this.vscrollbar) {
				if (this.vscrollbar.scrollbarsize > 0) {
					vscroll_size = this.vscrollbar.scrollbarsize;
					this.vscrollbar.resize(vscroll_size, this._client_height);
					control_elem._vscroll_width = vscroll_size;
				}
			}
			else if (!bShowVScroll && this.vscrollbar) {
				this.vscrollbar.destroy();
				this.vscrollbar = null;
			}

			control_elem.setScrollControls(this.hscrollbar, this.vscrollbar, hscroll_size, vscroll_size, show_type);

			if (new_hbar) {
				this.hscrollbar.createComponent();
			}
			if (new_vbar) {
				this.vscrollbar.createComponent();
			}

			if (control_elem._handle) {
				if (this.hscrollbar && !this.hscrollbar._is_created) {
					this.hscrollbar.on_created();
				}
				if (this.vscrollbar && !this.vscrollbar._is_created) {
					this.vscrollbar.on_created();
				}
			}

			this._updateClientSize(control_elem);
		}
	};

	_pComponent._cancelEvent = function (target_comp) {
	};

	_pComponent._createVScrollBar = function (scroll_size) {
		var vscrollbar = new nexacro.ScrollBarCtrl("vscrollbar", "absolute", 0, 0, scroll_size, this._client_width, null, null, this);
		vscrollbar._setDirection("vert");
		vscrollbar._setEventHandler("onscroll", this.on_vscroll, this);
		vscrollbar.on_update_style_scrollbarsize();
		return vscrollbar;
	};

	_pComponent._createHScrollBar = function (scroll_size) {
		var hscrollbar = new nexacro.ScrollBarCtrl("hscrollbar", "absolute", 0, 0, this._client_width, scroll_size, null, null, this);
		hscrollbar._setDirection("horz");
		hscrollbar._setEventHandler("onscroll", this.on_hscroll, this);
		hscrollbar.on_update_style_scrollbarsize();
		return hscrollbar;
	};

	_pComponent._isWheelScrollable = function (delta) {
		var control_elem = this._control_element;
		if (!control_elem) {
			return false;
		}

		var st = control_elem.scroll_top;
		var sh = control_elem.container_maxheight;
		var ch = this._client_height;

		if ((st + ch >= sh && delta < 0) || (st == 0 && delta > 0)) {
			return false;
		}
		return true;
	};

	_pComponent._getResultPseudo = function (status, pseudo) {
		if (pseudo == "" || pseudo == "enabled") {
			pseudo = "normal";
		}
		return nexacro.Component._status_table[status + "_" + pseudo];
	};

	_pComponent.getCurrentPseudo = function () {
		return this._pseudo;
	};

	_pComponent.setCurrentPseudo = function (pseudo) {
		var prevPseudo = this._getResultPseudo(this._status, pseudo);
		if (prevPseudo) {
			this._stat_change(this.status, pseudo);
		}
		return prevPseudo;
	};

	_pComponent._stat_change = function (status, pseudo) {
		this.on_change_status(status, pseudo);
	};
	_pComponent.on_change_status = function (status, pseudo) {
		var ps;
		switch (status) {
			case "enable":
				if (this._status != "focus") {
					if (this._readonly) {
						this._status = "readonly";
					}
					else {
						this._status = "enable";
					}
				}
				break;
			case "disable":
				this._status = "disable";
				break;
			case "focus":
				if (this._status != "disable") {
					this._status = "focus";
				}
				break;
			case "notfocus":
				if (this._status != "disable") {
					if (this._readonly) {
						this._status = "readonly";
					}
					else {
						this._status = "enable";
					}
				}
				break;
			case "select":
				this._selected = true;
				break;
			case "notselect":
				this._selected = false;
				break;
			case "push":
				this._pushed = true;
				break;
			case "notpush":
				this._pushed = false;
				if (this._selected && pseudo == "normal") {
					pseudo = "selected";
				}
				break;
			case "readonly":
				if (!this._readonly) {
					this._readonly = true;
					this._control_pseudo = "";
					this._contents_pseudo = "";
				}
				if (this._status == "enable") {
					this._status = "readonly";
				}
				break;
			case "writable":
				if (this._readonly) {
					this._readonly = false;
					this._control_pseudo = "";
					this._contents_pseudo = "";
				}
				if (this._status == "readonly") {
					this._status = "enable";
				}
				break;
		}

		this.on_apply_pseudo(pseudo);

		this._setAccessibilityStatFlag(this._status, pseudo);
	};



	_pComponent.on_apply_custom_pseudo = function (pseudo) {
	};
	_pComponent.on_apply_pseudo = function (pseudo, is_only_contents) {
		var form = this;

		var enable = (nexacro._is_enable_setting) ? this.enable : this.enable && this._real_enable;

		while (form) {
			form = form.parent;

			if (!form || (form && form._is_application) || (form && form._is_popup_frame)) {
				break;
			}

			if (!form._is_frame) {
				if (form._is_subcontrol == false) {
					if (form._real_enable == false || form.enable == false) {
						enable = false;
						break;
					}
				}
			}
		}

		if (this._setEnable(enable)) {
			return;
		}

		this._pseudo = pseudo = this._getResultPseudo(this._status, pseudo);
		var control_elem = this._control_element;
		if (this.visible && control_elem) {
			if (!is_only_contents) {
				this._updateControl(control_elem, pseudo);
			}

			this._updateContents(control_elem, pseudo);
		}
	};

	_pComponent._find_pseudo_obj = _pComponent._find_comp_pseudo_obj;

	_pComponent.on_create_custom_style = function () {
		return new nexacro.Style(this);
	};
	_pComponent.on_create_custom_currentStyle = function () {
		return new nexacro.CurrentStyle(this);
	};

	_pComponent._updateCurrentStyle = function (styleProp) {
		var cur = this._find_pseudo_obj(styleProp, this._pseudo);
		if (cur) {
			if (cur != this.currentstyle[styleProp]) {
				this.currentstyle[styleProp] = cur;
				return true;
			}
		}
		return false;
	};


	_pComponent.on_find_CurrentStyle_background = function (pseudo) {
		return this._find_pseudo_obj("background", pseudo, "background");
	};
	_pComponent.on_find_CurrentStyle_border = function (pseudo) {
		return this._find_pseudo_obj("border", pseudo, "border");
	};
	_pComponent.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this._find_pseudo_obj("bordertype", pseudo, "bordertype");
	};
	_pComponent.on_find_CurrentStyle_gradation = function (pseudo) {
		return this._find_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pComponent.on_find_CurrentStyle_opacity = function (pseudo) {
		var opacity = this._find_pseudo_obj("opacity", pseudo, "opacity");
		return (opacity) ? opacity : nexacro.Component._default_opacity;
	};

	_pComponent.on_find_CurrentStyle_shadow = function (pseudo) {
		return this._find_pseudo_obj("shadow", pseudo, "shadow");
	};

	_pComponent.on_find_CurrentStyle_cursor = function (pseudo) {
		var cursor = "";
		if (!this._isEnable() && this.parent && !this.parent._is_application) {
			if (!this._is_subcontrol) {
				cursor = this.parent._find_pseudo_obj("cursor", pseudo, "cursor");
			}
			else {
				var p = this.parent;
				while (p && p._is_form) {
					p = p.parent;
				}

				if (p) {
					cursor = p._find_pseudo_obj("cursor", pseudo, "cursor");
				}
				else {
					cursor = null;
				}
			}
		}
		else {
			cursor = this._find_pseudo_obj("cursor", pseudo, "cursor");
		}

		return (cursor) ? cursor : nexacro.Component._default_cursor;
	};

	_pComponent.on_find_CurrentStyle_margin = function (pseudo) {
		var margin = this._find_pseudo_obj("margin", pseudo, "margin");
		return (margin) ? margin : nexacro.Component._default_margin;
	};

	_pComponent.on_find_CurrentStyle_padding = function (pseudo) {
		var padding = this._find_pseudo_obj("padding", pseudo, "padding");
		return (padding) ? padding : nexacro.Component._default_padding;
	};
	_pComponent.on_find_CurrentStyle_align = function (pseudo) {
		var align = this._find_pseudo_obj("align", pseudo, "align");
		return (align) ? align : nexacro.Component._default_align;
	};

	_pComponent.on_find_CurrentStyle_font = function (pseudo) {
		var font = this._find_pseudo_obj("font", pseudo, "font");
		if (!font) {
			font = this._find_inherit_pseudo_obj("font", pseudo, "font");
		}
		return (font) ? font : nexacro.Component._default_font;
	};
	_pComponent.on_find_CurrentStyle_color = function (pseudo) {
		var color = this._find_pseudo_obj("color", pseudo, "color");
		if (!color) {
			color = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}
		return (color) ? color : nexacro.Component._default_color;
	};

	_pComponent.on_find_CurrentStyle_accessibility = function (pseudo) {
		var accessibility = this._find_pseudo_obj("accessibility", pseudo, "accessibility");
		return accessibility ? accessibility : nexacro.Component._default_accessibility;
	};

	_pComponent.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pComponent.on_find_CurrentStyle_letterspace = function (pseudo) {
		var letterspace = this._find_pseudo_obj("letterspace", pseudo, "letterspace");

		return letterspace ? letterspace : nexacro.Component._default_letterspace;
	};

	_pComponent._find_inherit_pseudo_obj = function (styleProp, pseudo, returnType) {
		var obj = this._find_pseudo_obj(styleProp, pseudo, returnType);
		if (!obj) {
			var refcssobj = this._refcssobj;
			if (!refcssobj) {
				refcssobj = this._makeCssRefInfo();
			}
			if (refcssobj && refcssobj._is_component) {
				obj = refcssobj._find_inherit_pseudo_obj(styleProp, pseudo, returnType);
			}
		}

		if (obj && !obj._is_empty) {
			var foundType = obj._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				obj = nexacro._getCachedStyleObj(returnType, obj._value);
			}
		}
		return obj;
	};

	_pComponent.on_find_CurrentStyle_glow = function () {
	};
	_pComponent.on_find_CurrentStyle_blur = function () {
	};

	_pComponent.on_update_style_margin = function () {
		this.on_apply_style_margin(this.currentstyle.margin = this.on_find_CurrentStyle_margin(this._pseudo));
	};

	_pComponent.on_update_style_border = function () {
		this.on_apply_style_border(this.currentstyle.border = this.on_find_CurrentStyle_border(this._pseudo));
	};
	_pComponent.on_update_style_bordertype = function () {
		this.on_apply_style_bordertype(this.currentstyle.bordertype = this.on_find_CurrentStyle_bordertype(this._pseudo));
	};
	_pComponent.on_update_style_background = function () {
		this.on_apply_style_background(this.currentstyle.background = this.on_find_CurrentStyle_background(this._pseudo));
	};
	_pComponent.on_update_style_gradation = function () {
		this.on_apply_style_gradation(this.currentstyle.gradation = this.on_find_CurrentStyle_gradation(this._pseudo));
	};

	_pComponent.on_update_style_opacity = function () {
		this.on_apply_style_opacity(this.currentstyle.opacity = this.on_find_CurrentStyle_opacity(this._pseudo));
	};
	_pComponent.on_update_style_shadow = function () {
		this.on_apply_style_shadow(this.currentstyle.shadow = this.on_find_CurrentStyle_shadow(this._pseudo));
	};
	_pComponent.on_update_style_cursor = function () {
		this.on_apply_style_cursor(this.currentstyle.cursor = this.on_find_CurrentStyle_cursor(this._pseudo));
	};

	_pComponent.on_update_style_padding = function () {
		var padding = this.currentstyle.padding = this.on_find_CurrentStyle_padding(this._pseudo);

		if (this._apply_client_padding) {
			var control_elem = this._control_element;
			control_elem.setElementPadding(padding);
			this._updateClientSize(control_elem);
		}
		else {
			this.on_apply_style_padding(padding);
		}
	};

	_pComponent.on_update_style_align = function () {
		this.on_apply_style_align(this.currentstyle.align = this.on_find_CurrentStyle_align(this._pseudo));
	};

	_pComponent.on_update_style_font = function () {
		this.on_apply_style_font(this.currentstyle.font = this.on_find_CurrentStyle_font(this._pseudo));
	};
	_pComponent.on_update_style_color = function () {
		this.on_apply_style_color(this.currentstyle.color = this.on_find_CurrentStyle_color(this._pseudo));
	};

	_pComponent.on_update_style_accessibility = function () {
		var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
		this.on_apply_style_accessibility(this.currentstyle.accessibility = this._make_accessibility_value(accessibility));
	};

	_pComponent.on_update_style_rtlimagemirroring = function () {
		return;
	};

	_pComponent.on_update_style_letterspace = function () {
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
		this.on_apply_style_letterspace(this.currentstyle.letterspace = letterspace);
	};

	_pComponent.on_update_style_glow = function () {
	};
	_pComponent.on_update_style_blur = function () {
	};

	_pComponent.on_apply_style_margin = function (margin) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem && this._margin != margin) {
			this._margin = margin;
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width, this.parent._client_height);
			control_elem.setElementVisible(this.visible);
			control_elem.setElementPosition(this._adjust_left, this._adjust_top);
			control_elem.setElementSize(this._adjust_width, this._adjust_height);
		}
	};

	_pComponent.on_apply_style_border = function (border) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			control_elem.setElementBorder(border, curstyle.bordertype);
			control_elem.setElementBackground(curstyle.background, curstyle.gradation);
			this._updateClientSize(control_elem);
			if (this._is_form) {
				this._onResetScrollBar();
			}
		}
	};

	_pComponent.on_apply_style_bordertype = function (bordertype) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			control_elem.setElementBorder(curstyle.border, bordertype);
			control_elem.setElementBackground(curstyle.background, curstyle.gradation);
			this._updateClientSize(control_elem);
			if (this._is_form) {
				this._onResetScrollBar();
			}
		}
	};

	_pComponent.on_apply_style_background = function (background) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementBackground(background, this.currentstyle.gradation);
		}
	};

	_pComponent.on_apply_style_gradation = function (gradation) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementBackground(this.currentstyle.background, gradation);
		}
	};

	_pComponent.on_apply_style_opacity = function (opacity) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementOpacity(opacity);
		}
	};

	_pComponent.on_apply_style_shadow = function (shadow) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem) {
			shadow = (shadow == undefined) ? nexacro.Component._default_shadow : shadow;
			control_elem.setElementShadow(shadow);
		}
	};

	_pComponent.on_apply_style_cursor = function (cursor) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementCursor(cursor);
		}
	};

	_pComponent.on_apply_style_control_padding = function (padding) {
		if (!this._isEnableRedraw()) {
			return;
		}
		var control_elem = this._control_element;
		if (control_elem && padding) {
			control_elem.setElementPadding(padding);
		}
	};

	_pComponent.on_apply_style_accessibility = function (accessibility) {
		var control_elem = this._control_element;
		if (control_elem && accessibility) {
			control_elem.setAccessibility(accessibility);
		}
	};

	_pComponent.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pComponent.on_apply_style_letterspace = function (letterspace) {
		var elem = this._text_elem;
		if (elem && letterspace) {
			elem.setElementLetterSpace(letterspace);
		}
	};

	_pComponent.on_apply_style_padding = function (padding) {
	};
	_pComponent.on_apply_style_align = function (align) {
	};
	_pComponent.on_apply_style_font = function (font) {
	};
	_pComponent.on_apply_style_color = function (color) {
	};

	_pComponent.on_apply_style_glow = function (glow) {
	};
	_pComponent.on_apply_style_blur = function (blur) {
	};
	_pComponent.on_apply_custom_class = function () {
	};

	_pComponent.on_apply_text = function () {
	};
	_pComponent.on_apply_expr = function () {
	};
	_pComponent.on_apply_prop_enable = function (v) {
		if (this._is_scrollable == true) {
			if (this.vscrollbar) {
				this.vscrollbar._setEnable(v);
			}
			if (this.hscrollbar) {
				this.hscrollbar._setEnable(v);
			}
		}
	};

	_pComponent.on_apply_prop_class = function () {
		this.currentstyle._empty();
		this._css_finder = null;
		this._ref_css_finder = null;

		this._control_pseudo = "";
		this._contents_pseudo = "";
		this._cssfinder_cache = {
		};

		var pseudo = (!this._pseudo) ? "normal" : this._pseudo;

		if (this.vscrollbar) {
			this.vscrollbar.on_apply_prop_class();
		}
		if (this.hscrollbar) {
			this.hscrollbar.on_apply_prop_class();
		}

		this._onResetScrollBar();


		this.on_apply_pseudo(pseudo);

		this.on_apply_custom_class(pseudo);
	};

	_pComponent.on_apply_prop_taborder = function () {
		if (this.tabstop) {
			this._setAccessibilityFlagFocusable(this._taborder >= 0 ? true : false);
		}
	};

	_pComponent.on_apply_custom_setfocus = function (evt_name) {
		var control_elem = this._control_element;
		if (control_elem) {
			var selffocus = ((evt_name == "lbutton") ? false : nexacro._enableaccessibility);


			if (!selffocus) {
				selffocus = this._is_resetscroll;
			}

			control_elem.setElementFocus(selffocus);
		}
	};

	_pComponent.on_apply_prop_tooltip = function () {
		var control_elem = this._control_element;
		if (control_elem && !this._is_subcontrol) {
			control_elem.setElementToolTip(this.tooltiptext, this.tooltiptype);
		}
	};

	_pComponent.on_apply_prop_rtldirection = function () {
		var control_elem = this._control_element;
		var _rtldirection = this._rtldirection;

		if (control_elem) {
			control_elem.setElementRtlDirection(_rtldirection);
			control_elem.setElementPosition(control_elem.left, control_elem.top, true);
		}

		if (this.vscrollbar) {
			this.vscrollbar._setRtlDirection(this._rtldirection);
		}
		if (this.hscrollbar) {
			this.hscrollbar._setRtlDirection(this._rtldirection);
		}
	};

	_pComponent.on_apply_locale = nexacro._emptyFn;


	_pComponent.on_create_contents = function () {
	};

	_pComponent.on_created_contents = function () {
	};
	_pComponent.on_destroy_contents = function () {
	};
	_pComponent.on_created = function (_window) {
		if (!this._is_loading) {
			var parent_elem = null;
			if (!this._is_window) {
				parent_elem = this.parent ? this.parent._control_element : null;
				if (!parent_elem) {
					return false;
				}
			}

			if (!_window) {
				_window = this._getWindow();
			}

			var control_elem = this._control_element;
			var enable = this._isEnable();


			if ((this._real_enable == null && enable == false) || (this._real_enable && this._real_enable != enable)) {
				this._real_enable = enable;
				this._stat_change(enable ? "enable" : "disable", this._pseudo);
				this.on_apply_prop_enable(enable);
			}
			else {
				this._real_enable = enable;
			}

			if (control_elem) {
				control_elem.create(_window);
				if (!control_elem._handle) {
					return;
				}
			}

			if (!this._is_subcontrol) {
				this._registerHotkey();
			}

			if (this._is_created != true) {
				this.on_created_contents();
			}

			this._is_created = true;

			if (this._is_subcontrol) {
				nexacro._addSubComponent(this);
			}
			this._orientation = nexacro._getMobileOrientation();
		}
	};

	_pComponent.on_change_containerPos = function (left, top) {
	};
	_pComponent.on_change_containerRect = function (width, height) {
	};

	_pComponent.on_create_normal_control_element = function (parent_elem) {
		var control_elem = new nexacro.ControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_scrollable_control_element = function (parent_elem) {
		var is_form = this._is_form;
		if (nexacro.OS == "iOS" && (nexacro._isHybrid() || parseFloat(nexacro.OSVersion) >= 13)) {
			is_form = false;
		}
		var control_elem = new nexacro.ScrollableControlElement(parent_elem, is_form);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_frame_control_element = function (parent_elem) {
		var control_elem = new nexacro.FrameControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_tablecell_control_element = function (parent_elem) {
		var control_elem = new nexacro.CellControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_simple_control_element = function (parent_elem) {
		var control_elem = new nexacro.SimpleControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_popup_control_element = function (parent_elem) {
		var control_elem = new nexacro.PopupControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_popupscrollable_control_element = function (parent_elem) {
		var control_elem = new nexacro.PopupScrollableControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_band_control_element = function (parent_elem) {
		var control_elem = new nexacro.BandControlElement(parent_elem, this._is_band_vert_paging);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};
	_pComponent.on_create_area_scroll_control_element = function (parent_elem) {
		var control_elem = new nexacro.ScrollableAreaControlElement(parent_elem);
		control_elem.setLinkedControl(this);
		this._control_element = control_elem;
		return control_elem;
	};

	_pComponent.on_create_control_element = function (parent_elem) {
		var control_elem = null;
		if (this._is_simple_control) {
			control_elem = this.on_create_simple_control_element(parent_elem);
		}
		else if (this._is_tablecell) {
			control_elem = this.on_create_tablecell_control_element(parent_elem);
		}
		else if (this._is_frame) {
			control_elem = this.on_create_frame_control_element(parent_elem);
		}
		else if (this._is_scrollable) {
			control_elem = this.on_create_scrollable_control_element(parent_elem);
		}
		else if (this._is_band_control) {
			control_elem = this.on_create_band_control_element(parent_elem);
		}
		else if (this._is_area_scroll) {
			this._is_scrollable = true;
			control_elem = this.on_create_area_scroll_control_element(parent_elem);
		}
		else if (this._is_popup_control) {
			control_elem = this.on_create_popup_control_element(parent_elem);
		}
		else {
			control_elem = this.on_create_normal_control_element(parent_elem);
		}

		return control_elem;
	};


	_pComponent.createComponent = function (bCreateOnly) {
		var parent_elem = null;
		if (!this._is_window) {
			parent_elem = this.parent ? this.parent._control_element : null;
			if (!parent_elem) {
				return false;
			}
		}

		var control_elem = this._control_element;
		if (!control_elem) {
			control_elem = this.on_create_control_element(parent_elem);
			if (this._is_nc_control) {
				control_elem._is_nc_element = true;
			}

			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this._initControl(control_elem, pseudo);
			this._initContents(control_elem, pseudo);

			if (this.text || this.expr) {
				this.on_apply_text();
			}
			if (this._taborder >= 0) {
				this.on_apply_prop_taborder();
			}
			if (this.tooltiptext) {
				this.on_apply_prop_tooltip();
			}

			this.on_apply_positionstep(this.positionstep);

			if (!bCreateOnly && parent_elem && parent_elem._handle) {
				var window = this._getWindow();
				this.on_created(window);
			}
		}

		return true;
	};

	_pComponent.destroyComponent = function () {
		if (!this._is_alive) {
			return;
		}

		this._is_alive = false;
		if (!this._is_subcontrol) {
			this._unregisterHotkey();
		}

		if (nexacro._enableaccessibility) {
			if (application._accessibilityHistoryList) {
				application._remove_accessibility_history(this);
			}
		}

		this._clearEventListeners();

		if (this.parent && this.parent._overedobj && this.parent._overedobj == this) {
			this.parent._overedobj = null;
		}

		if (this.parent && this.parent.removeChild) {
			this.parent.removeChild(this.id);
		}
		else {
			var win = this._getWindow();
			if (win) {
				win._removeFromCurrentFocusPath(this);
			}
		}

		if (this._control_element) {
			this._control_element.destroy();
			this._control_element = null;
		}

		if (this.vscrollbar) {
			this.vscrollbar.destroy();
			this.vscrollbar = null;
		}
		if (this.hscrollbar) {
			this.hscrollbar.destroy();
			this.hscrollbar = null;
		}

		this.on_destroy_contents();

		if (this._subctrlitems) {
			nexacro._deleteAllSubComponent(this);
		}

		if (this._is_subcontrol && this.parent && this.parent._subctrlitems) {
			nexacro._deleteSubComponent(this, this.parent);
		}

		this._is_created = false;

		if (this._refform) {
			this._refform = null;
		}
		if (this.parent) {
			this.parent = null;
		}
		if (this._refobj) {
			this._refobj = null;
		}


		if (this.hotkey) {
			this.hotkey = null;
		}
		if (this.rtldirection) {
			this.rtldirection = null;
		}
		if (this._refcssobj) {
			this._refcssobj = null;
		}
		if (this._overedobj) {
			this._overedobj = null;
		}
		if (this._event_list) {
			this._event_list = null;
		}
		if (this._last_focused) {
			this._last_focused = null;
		}

		this._delete_style();

		if (this.currentstyle) {
			this.currentstyle._empty();
			this.currentstyle = null;
		}
		this._css_finder = null;
		this._ref_css_finder = null;

		this._enable_redraw_history = null;

		return true;
	};

	_pComponent._delete_style = function () {
		if (this.style) {
			this.style.destroy();
			this.style = null;
		}

		if (this._styles) {
			var styles = this._styles;
			for (var pseudo in styles) {
				var style = styles[pseudo];
				if (style.destroy) {
					style.destroy();
					style = null;
				}
			}
			this._styles = null;
		}
	};

	_pComponent._initControl = function (control_elem, pseudo) {
		var visible = this.visible;
		if (!this.visible) {
			control_elem.setElementVisible(false);
		}
		else {
			control_elem.setElementVisible(true);
		}

		var margin = this.on_find_CurrentStyle_margin(pseudo);
		var curstyle = this.currentstyle;
		if (margin && margin != curstyle.margin) {
			curstyle.margin = margin;
			this._margin = margin;
		}

		if (this.parent) {
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width || this.parent._init_width, this.parent._client_height || this.parent._init_height);
		}
		else {
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, 0, 0);
		}

		control_elem.setElementPosition(this._adjust_left, this._adjust_top);
		control_elem.setElementSize(this._adjust_width, this._adjust_height);

		this._updateControl(control_elem, pseudo);
	};

	_pComponent._isEnableRedraw = function () {
		var comp = this._getFromComponent(this);

		if (!comp.enableredraw) {
			if (!comp._enable_redraw_history["common_updatestyle"]) {
				comp._enable_redraw_history["common_updatestyle"] = [];
			}

			this._is_applyenableredraw = false;
			comp._enable_redraw_history["common_updatestyle"].push(this);
		}
		return comp.enableredraw;
	};

	_pComponent._updateCursor = function (cursor) {
		if (nexacro._cur_track_info || nexacro._cur_extra_track_info) {
			return;
		}

		var curstyle = this.currentstyle;

		if (!cursor) {
			cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
		}

		curstyle.cursor = cursor;
		this._control_element.setElementCursor(cursor);

		cursor = null;
	};

	_pComponent._updateControl = function (control_elem, pseudo) {
		if (!this._isEnableRedraw()) {
			return;
		}
		if (nexacro._cur_track_info && pseudo == "mouseover") {
			return;
		}

		var apply_element = false;
		if (this._adjust_width != 0 && this._adjust_height != 0) {
			apply_element = true;
		}

		if (control_elem && this._control_pseudo != pseudo) {
			this._control_pseudo = pseudo;
			var curstyle = this.currentstyle;

			var border = this.on_find_CurrentStyle_border(pseudo);
			var bordertype = this.on_find_CurrentStyle_bordertype(pseudo);
			var background = this.on_find_CurrentStyle_background(pseudo);
			var gradation = this.on_find_CurrentStyle_gradation(pseudo);

			var background_flag = (background != curstyle.background);
			var bordertype_flag = (bordertype != curstyle.bordertype);
			var border_flag = (border != curstyle.border);
			var gradation_flag = (gradation != curstyle.gradation);

			if (border_flag || bordertype_flag || background_flag || gradation_flag) {
				this._apply_client_border = border_flag;
				curstyle.bordertype = bordertype;
				curstyle.border = border;
				curstyle.background = background;
				curstyle.gradation = gradation;

				if (apply_element) {
					control_elem.setElementBorder(border, bordertype);
					control_elem.setElementBackground(background, gradation);
				}
			}

			border = bordertype = background = gradation = null;
			background_flag = bordertype_flag = border_flag = gradation_flag = null;

			var opacity = this.on_find_CurrentStyle_opacity(pseudo);
			if (opacity && opacity != curstyle.opacity) {
				curstyle.opacity = opacity;
				if (apply_element) {
					control_elem.setElementOpacity(opacity);
				}
			}
			opacity = null;

			var shadow = this.on_find_CurrentStyle_shadow(pseudo);
			if (shadow && shadow != curstyle.shadow) {
				curstyle.shadow = shadow;
				if (apply_element) {
					control_elem.setElementShadow(shadow);
				}
			}
			shadow = null;

			if (!nexacro._cur_track_info && !nexacro._cur_extra_track_info) {
				var cursor = this.on_find_CurrentStyle_cursor(pseudo);
				if (cursor && cursor != curstyle.cursor) {
					curstyle.cursor = cursor;
					if (apply_element) {
						control_elem.setElementCursor(cursor);
					}
				}
				cursor = null;
			}

			if (nexacro._enableaccessibility) {
				var accessibility = this.on_find_CurrentStyle_accessibility(pseudo);
				if (accessibility && accessibility != curstyle.accessibility) {
					curstyle.accessibility = this._make_accessibility_value(accessibility);
					if (apply_element) {
						control_elem.setAccessibility(curstyle.accessibility);
					}
				}
				accessibility = null;
			}

			if (this._apply_client_padding) {
				var padding = this.on_find_CurrentStyle_padding(pseudo);
				if (padding && padding != curstyle.padding) {
					curstyle.padding = padding;
					if (apply_element) {
						control_elem.setElementPadding(padding);
					}
				}
				padding = null;
			}
			if (apply_element) {
				this._updateClientSize(control_elem);
			}

			curstyle = null;
			return true;
		}
		return false;
	};

	_pComponent._initContents = function (control_elem, pseudo) {
		if (this._contents_pseudo != pseudo) {
			this._contents_pseudo = pseudo;
			var curstyle = this.currentstyle;


			this.on_apply_custom_pseudo(pseudo);

			this.on_create_contents();
			this._is_created_contents = true;

			if (this._has_dirty_pos) {
				this.on_change_containerPos(this._adjust_left, this._adjust_top);
				this._has_dirty_pos = false;
			}
			if (this._has_dirty_rect) {
				this.on_change_containerRect(this._client_width, this._client_height);
				this._has_dirty_rect = false;
			}
		}
		this._is_loading = false;
	};

	_pComponent._updateContents = function (control_elem, pseudo) {
		if (!this._isEnableRedraw()) {
			return;
		}
		if (nexacro._cur_track_info && pseudo == "mouseover") {
			return;
		}

		if (this._contents_pseudo != pseudo && this._adjust_width != 0 && this._adjust_height != 0) {
			this._contents_pseudo = pseudo;

			this.on_apply_custom_pseudo(pseudo);
		}
	};

	_pComponent._updateClientSize = function (control_elem) {
		var client_left = control_elem.client_left;
		var client_top = control_elem.client_top;
		var client_width = control_elem.client_width;
		var client_height = control_elem.client_height;

		if (this._client_left != client_left || this._client_top != client_top) {
			this._client_left = client_left;
			this._client_top = client_top;

			if (this._is_created_contents) {
				this.on_change_containerPos(client_left, client_top);
			}
			else {
				this._has_dirty_pos = true;
			}
		}

		if (this._client_width != client_width || this._client_height != client_height) {
			this._client_width = client_width;
			this._client_height = client_height;

			if (this._is_created_contents) {
				this.on_change_containerRect(client_width, client_height);
				nexacro._redrawVMLBorder(this);
			}
			else {
				this._has_dirty_rect = true;
			}
		}
	};

	_pComponent._applyZoomPopup = nexacro._emptyFn;

	_pComponent.on_update_position = function (resize_flag, move_flag) {
		var control_elem = this._control_element;
		if (control_elem) {
			var bForce = this._bChangeRtl;

			if (control_elem._isRtl()) {
				if (resize_flag || move_flag) {
					bForce = true;
				}
			}

			control_elem.setElementPosition(this._adjust_left, this._adjust_top, bForce);
			if (!isNaN(this._adjust_width) || !isNaN(this._adjust_height)) {
				control_elem.setElementSize(this._adjust_width, this._adjust_height);
			}

			this._updateClientSize(control_elem);
			if (move_flag) {
				this.on_fire_onmove(this._adjust_left, this._adjust_top);
			}
			if (resize_flag) {
				this.on_fire_onsize(this._adjust_width, this._adjust_height);
			}
		}
	};

	_pComponent._applysetPosition = function (left, top, width, height) {
		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;

		this._adjustPosition(left, top, null, null, width, height, this.parent._client_width, this.parent._client_height);

		var control_elem = this._control_element;

		if (control_elem) {
			control_elem.setElementPosition(this._adjust_left, this._adjust_top);
			control_elem.setElementSize(this._adjust_width, this._adjust_height);
			this._updateClientSize(control_elem);

			if (old_left != this._adjust_left || old_top != this._adjust_top) {
				this.on_fire_onmove(this._adjust_left, this._adjust_top);
			}
			if (old_width != this._adjust_width || old_height != this._adjust_height) {
				this.on_fire_onsize(this._adjust_width, this._adjust_height);
			}
		}
	};

	_pComponent.set_positionstep = function (v) {
		if (v === "" || v === null || v === undefined) {
			v = 0;
		}
		else {
			v = parseInt(v) | 0;
		}

		if (this.positionstep !== v) {
			this._beforepositionstep = this.positionstep;
			this.positionstep = v;
			this.on_apply_positionstep(v);
		}
	};

	_pComponent.on_apply_positionstep = function (index) {
		var control_elem = this.getElement();
		if (control_elem) {
			if (index == null) {
				index = 0;
			}
			control_elem.setElementPositionStep(index);
		}
	};

	_pComponent.set_style = function (v) {
		v = nexacro._decodeXml(v);

		var blocks = v.split("}");
		var s = blocks[0].trim();

		var _styles = this._styles = {
		};

		blocks.pop();

		var i, len = blocks.length;
		var definition_block, pseudo, normal_style;

		definition_block = s.split("{");
		normal_style = definition_block[0].substring(0, definition_block[0].lastIndexOf(";") + 1).trim();

		if (normal_style.length == 0) {
			normal_style = definition_block[0].substring(0, definition_block[0].length).trim();
		}

		var change = (this.style._value != normal_style);
		if (change) {
			this.style._setValue(normal_style);
		}

		if (len > 0) {
			for (i = 0; i < len; i++) {
				definition_block = blocks[i].split("{");
				pseudo = definition_block[0].substring(definition_block[0].lastIndexOf(":") + 1).trim();
				var style2 = this.on_create_custom_style();
				style2._setValue(definition_block[1]);
				_styles[pseudo] = style2;
			}
		}
		if (change) {
			this.currentstyle._empty();
			this._control_pseudo = "";
			this._contents_pseudo = "";
			this.on_apply_pseudo(this._pseudo);
		}
		return this.style._value;
	};


	_pComponent.set_name = function (v) {
		this.name = v;
	};

	_pComponent.set_text = function (v) {
		var val = nexacro._toString(v);
		if (val != this.text) {
			this.text = val;
			this._display_text = val;
			this.on_apply_text();
		}
	};

	_pComponent.set_expr = function (v) {
		var val = nexacro._toString(v);
		if (val != this.expr) {
			this.expr = val;
			this.on_apply_expr();
		}
	};



	_pComponent.set_cssclass = function (cssname) {
		if (cssname != this.cssclass) {
			this.cssclass = cssname;
			if (this.parent) {
				if (this._is_created) {
					this.on_apply_prop_class();
				}
			}
		}
	};



	_pComponent.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}

		var control_elem = this._control_element;
		v = nexacro._toBoolean(v);
		if (this.visible != v) {
			var _window = this._getWindow();
			var newfocus_comp;
			if (!v && this._is_created && this.parent) {
				if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
					var _form = this._getForm();
					var cur_tabstop = this.tabstop;
					this.tabstop = false;
					newfocus_comp = _form._searchNextTabFocus();
					this.tabstop = cur_tabstop;
				}
			}

			this.visible = v;
			if (control_elem) {
				control_elem.setElementVisible(v);
				this._setAccessibilityStatHidden(!v);


				if (this.visible) {
					nexacro._resetVML(this);



					var parent = this.parent;
					if (!this._is_subcontrol && this._is_created && parent && parent._is_created) {
						if (_window && _window._focus_list && _window._indexOfCurrentFocusPaths(parent) == _window._getCurrentFocusPathsLength() - 1) {
							this._on_focus(true);
						}
					}
					this.on_apply_pseudo(this._pseudo);
				}
				else {
					var parent = this.parent;

					if (!this._is_subcontrol && parent) {
						if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
							_window._removeFromCurrentFocusPath(this, false);
							if (newfocus_comp && newfocus_comp[0]) {
								newfocus_comp[0]._on_focus(true);
							}
						}
					}
				}
			}
		}
	};

	nexacro._is_enable_setting = false;
	_pComponent.set_enable = function (v) {
		var _form = this._getForm();
		var next_comp = _form ? _form._searchNextTabFocus(this) : null;

		v = nexacro._toBoolean(v);
		if (this.enable != v) {
			var _window = this._getWindow();
			var newfocus_comp;
			if (!this._is_subcontrol && !v && this._is_created && this.parent) {
				if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
					var _form = this._getForm();
					var cur_tabstop = this.tabstop;
					this.tabstop = false;
					newfocus_comp = _form._searchNextTabFocus(this);
					this.tabstop = cur_tabstop;
				}
			}

			var control_elem = this._control_element;
			this.enable = v;

			if (this._is_created) {
				var enable_flag = v;

				if (!(this instanceof nexacro.MainFrame || this._is_window)) {
					enable_flag = (this.parent._real_enable && v);
				}

				if (this._real_enable != enable_flag) {
					nexacro._is_enable_setting = true;
					this._setEnable(enable_flag);
					nexacro._is_enable_setting = false;
					var parent = this.parent;
					if (!this._is_subcontrol && this._is_created && parent && parent._is_created) {
						if (enable_flag) {
							if (_window && _window._indexOfCurrentFocusPaths(parent) == _window._getCurrentFocusPathsLength() - 1
								 && !parent._last_focused) {
								this._on_focus(true);
							}
						}
						else {
							if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
								_window._removeFromCurrentFocusPath(this, false);
								if (newfocus_comp && newfocus_comp[0]) {
									newfocus_comp[0]._on_focus(true);
								}
							}
							else if (_window) {
								var cur_tabstop = this.tabstop;
								this.tabstop = false;
								var _skip = false;
								var __form = _form;
								while (__form && __form instanceof nexacro.FormBase) {
									var parent = __form.parent;
									if (parent && parent._last_focused == __form) {
										__form = parent;
									}
									else {
										_skip = true;
										break;
									}
								}

								this.tabstop = cur_tabstop;

								if (next_comp && next_comp[0] && !_skip && this == _form._last_focused) {
									next_comp[0]._on_focus(true);
								}
							}
						}
					}
				}
			}
			else {
				if (this._real_enable != null && this._real_enable != undefined && this.parent) {
					nexacro._is_enable_setting = true;
					this._setEnable(this.parent._isEnable() && this.enable);
					nexacro._is_enable_setting = false;
				}
			}
		}
	};
	_pComponent._is_enable_changing = false;
	_pComponent._setEnable = function (v) {
		if (this._is_enable_changing) {
			return false;
		}

		var enable_flag = (v && this.enable);
		if (this._real_enable != enable_flag) {
			var control_elem = this._control_element;
			this._real_enable = enable_flag;

			if (enable_flag) {
				this._status = "enable";
				this._pseudo = "normal";
			}
			else {
				this._status = "disable";
				this._pseudo = "disabled";
			}

			this._is_enable_changing = true;
			this._stat_change(this._status, this._pseudo);
			this._is_enable_changing = false;

			this.on_apply_prop_enable(this._real_enable);

			return true;
		}
		return false;
	};

	_pComponent.set_taborder = function (v) {
		if (v >= 0 && v !== this.taborder) {
			this.taborder = v;
			this._taborder = ((+v) != (+v)) ? -1 : parseInt(v);
			this.on_apply_prop_taborder();
		}
		return v;
	};

	_pComponent.set_tabstop = function (v) {
		v = nexacro._toBoolean(v);
		if (this.tabstop) {
			if (!v) {
				this.tabstop = v;
				this.on_apply_prop_taborder();
			}
		}
		else {
			if (v) {
				this.tabstop = v;
				this.on_apply_prop_taborder();
			}
		}
		return v;
	};

	_pComponent.on_get_prop_tabstop = function () {
		return this.tabstop;
	};

	_pComponent._isFocusAcceptable = function () {
		return this._is_focus_accept;
	};

	_pComponent.set_tooltiptext = function (v) {
		if (v != this.tooltiptext) {
			if (!v) {
				v = "";
			}
			this.tooltiptext = v;
			this.on_apply_prop_tooltip();
		}
		return v;
	};

	_pComponent.set_tooltiptype = function (v) {
		if (v != this.tooltiptype) {
			this.tooltiptype = v;
			this.on_apply_prop_tooltip();
		}
		return v;
	};

	_pComponent.set_enableevent = function (v) {
		this.enableevent = nexacro._toBoolean(v);
		return v;
	};

	_pComponent.set_enableredraw = function (v) {
		this.enableredraw = nexacro._toBoolean(v);

		if (this.enableredraw) {
			this.on_apply_enableredraw();
		}

		return v;
	};

	_pComponent.on_apply_enableredraw = function () {
		if (this._enable_redraw_history["common_updatestyle"]) {
			var comps = this._enable_redraw_history["common_updatestyle"];
			var comps_len = comps.length;

			for (var i = 0; i < comps_len; i++) {
				var comp = comps[i];

				if (!comp._is_alive || comp._is_applyenableredraw) {
					continue;
				}

				comp._control_pseudo = "";
				comp._contents_pseudo = "";
				comp.on_apply_pseudo(comp._pseudo);
				comp._is_applyenableredraw = true;
			}

			this._enable_redraw_history["common_updatestyle"] = [];
		}
		this._enable_redraw_history = {
		};
	};
	_pComponent.set_transparenthittest = function (v) {
	};

	_pComponent._on_last_lbuttonup = nexacro._emptyFn;
	_pComponent._on_last_keyup = nexacro._emptyFn;

	_pComponent.set_hotkey = function (v) {
		var cur_hotkey = this._hotkey;
		if (cur_hotkey) {
			this._unregisterHotkey();
		}

		var hotkey = new nexacro.HotKey(v);
		if (hotkey._isEmpty()) {
			this.hotkey = null;
			this._hotkey = null;
			delete hotkey;
		}
		else {
			this.hotkey = hotkey._toString();
			this._hotkey = hotkey;

			if (this._is_created) {
				this._registerHotkey();
			}
		}
	};

	_pComponent.set_rtldirection = function (v) {
		var rtldirection = this.rtldirection;

		if (rtldirection != v) {
			this.rtldirection = v;

			this._setRtlDirection(v);
		}
		return v;
	};

	_pComponent.set_locale = nexacro._emptyFn;

	_pComponent._registerHotkey = function () {
		var hotkey = this._hotkey;
		if (!hotkey || hotkey._is_registered) {
			return;
		}

		this._setAccessibilityHotKey(this.hotkey);

		var _form = this._getMainForm();
		if (this._is_frame || this == _form) {
			var owner_frame = this.getOwnerFrame();
			if (owner_frame) {
				nexacro._registerHotkeyComp(owner_frame, this, hotkey);
			}
		}
		else {
			if (_form) {
				nexacro._registerHotkeyComp(_form, this, hotkey);
			}
		}
	};

	_pComponent._unregisterHotkey = function () {
		var hotkey = this._hotkey;
		if (!hotkey || !hotkey._is_registered) {
			return;
		}
		var _form = this._getMainForm();
		if (this._is_frame || this == _form) {
			var owner_frame = this.getOwnerFrame();
			if (owner_frame) {
				nexacro._unregisterHotkeyComp(owner_frame, this, hotkey);
			}
		}
		else {
			if (_form) {
				nexacro._unregisterHotkeyComp(_form, this, hotkey);
			}
			else {
				delete this._hotkey;
				this._hotkey = null;
			}
		}
	};

	_pComponent._processHotkey = function (keycode, altKey, ctrlKey, shiftKey) {
		var _form = this._getMainForm();
		if (!this._is_frame && this != _form) {
			if (_form) {
				var _flag = _form._processHotkey(keycode, altKey, ctrlKey, shiftKey, this);
				if (_flag && this._grid && this._grid._after_recreate_contents_all) {
					this._grid._on_last_keyup();
				}
				return _flag;
			}
		}
	};

	_pComponent._on_hotkey = function (keycode, altKey, ctrlKey, shiftKey) {
		this.setFocus();
	};

	_pComponent._saveScrollPos = function () {
	};
	_pComponent._applyScrollPos = function () {
	};

	_pComponent.bringToFront = function () {
		if (this.parent) {
			var parent = this.parent;
			var parent_child_list = parent._child_list;
			var child_list = this._child_list;
			var len = parent_child_list.length;
			var last_Idx = len - 1;

			var cur_Index = nexacro._indexOf(parent_child_list, this);

			if (cur_Index >= 0 && cur_Index < last_Idx) {
				parent_child_list.splice(cur_Index, 1);
				parent_child_list.splice(last_Idx, 0, this);

				var parent_elem = parent.getElement();
				var cur_elem = this._control_element;

				if (child_list != null || child_list != undefined) {
					for (var i = 0, n = child_list.length; i < n; i++) {
						var comp = child_list[i];
						comp._saveScrollPos();
					}
				}

				parent_elem.bringToFrontElement(cur_elem);

				if (child_list != null || child_list != undefined) {
					for (var i = 0, n = child_list.length; i < n; i++) {
						var comp = child_list[i];
						comp._applyScrollPos();
					}
				}
			}
		}
	};

	_pComponent.bringToPrev = function () {
		if (this.parent) {
			var parent = this.parent;
			var parent_child_list = parent._child_list;
			var child_list = this._child_list;
			var len = parent_child_list.length;
			var last_Idx = len - 1;

			var cur_Index = nexacro._indexOf(parent_child_list, this);

			if (cur_Index >= 0 && cur_Index < last_Idx) {
				if (child_list != null || child_list != undefined) {
					for (var i = 0, n = child_list.length; i < n; i++) {
						var comp = child_list[i];
						comp._saveScrollPos();
					}
				}

				this.moveToPrev(parent_child_list[cur_Index + 1]);

				if (child_list != null || child_list != undefined) {
					for (var i = 0, n = child_list.length; i < n; i++) {
						var comp = child_list[i];
						comp._applyScrollPos();
					}
				}
			}
		}
	};

	_pComponent.moveToNext = function (objOrId) {
		if (this.parent) {
			var parent = this.parent;
			var target = (nexacro._isString(objOrId)) ? parent[objOrId] : objOrId;

			if (target == null) {
				return;
			}

			var child_list = parent._child_list;
			var cur_idx = nexacro._indexOf(child_list, this);
			var target_idx = nexacro._indexOf(child_list, target);

			if (cur_idx < 0 || target_idx < 0) {
				return;
			}

			if (cur_idx > -1 && target_idx > -1 && cur_idx != target_idx - 1) {
				child_list.splice(cur_idx, 1);
				var idx = nexacro._indexOf(child_list, target);

				child_list.splice(idx, 0, this);

				var parent_elem = parent.getElement();
				parent_elem.moveToNextElement(this._control_element, target.getElement());
			}
		}
	};
	_pComponent.moveToPrev = function (objOrId) {
		if (this.parent) {
			var parent = this.parent;
			var target = (nexacro._isString(objOrId)) ? parent[objOrId] : objOrId;

			if (target == null) {
				return;
			}

			var child_list = parent._child_list;
			var cur_idx = nexacro._indexOf(child_list, this);
			var target_idx = nexacro._indexOf(child_list, target);

			if (cur_idx < 0 || target_idx < 0) {
				return;
			}

			if (cur_idx > -1 && target_idx > -1 && cur_idx != target_idx + 1) {
				child_list.splice(cur_idx, 1);

				var index = nexacro._indexOf(child_list, target);
				child_list.splice(index + 1, 0, this);

				var parent_elem = parent.getElement();
				parent_elem.moveToPrevElement(this._control_element, target.getElement());
			}
		}
	};

	_pComponent.sendToBack = function () {
		if (this.parent) {
			var parent = this.parent;
			var child_list = parent._child_list;

			var cur_idx = nexacro._indexOf(child_list, this);
			if (cur_idx > 0) {
				child_list.splice(cur_idx, 1);
				child_list.splice(0, 0, this);

				var parent_elem = parent.getElement();
				parent_elem.sendToBackElement(this._control_element);
			}
		}
	};
	_pComponent.sendToNext = function () {
		if (this.parent) {
			var p = this.parent;
			var child_list = p._child_list;
			var cur_idx = nexacro._indexOf(child_list, this);
			if (cur_idx > 0) {
				this.moveToNext(child_list[cur_idx - 1]);
			}
		}
	};


	_pComponent.create = function () {
		this.initProperties();
		this.initEvents();
	};

	_pComponent._destroy = function () {
		return this.destroy();
	};

	_pComponent.destroy = function () {
		if (!this._is_alive) {
			return;
		}

		return this.destroyComponent();
	};

	_pComponent.init = function (id, position, left, top, width, height, right, bottom) {
		if (id) {
			this.id = this.name = id;
		}

		this.position = position ? position : "absolute";

		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var bsize = false, bmove = false;

		if (arguments.length >= 6) {
			this._adjustPosition(left, top, right, bottom, width, height, this.parent ? this.parent._client_width : 0, this.parent ? this.parent._client_height : 0);

			if (this._adjust_width != old_width || this._adjust_height != old_height) {
				bsize = true;
			}
			if (this._adjust_left != old_left || this._adjust_top != old_top) {
				bmove = true;
			}
			this.on_update_position(bsize, bmove);
		}
	};

	_pComponent._getPosRight = function () {
		return this._adjust_left + this._adjust_width;
	};

	_pComponent._getPosBottom = function () {
		return this._adjust_top + this._adjust_height;
	};

	_pComponent.move = function (left, top, width, height, right, bottom) {
		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var bsize = false, bmove = false;
		var update = false;

		if (width == null && right == null) {
			width = this.width;
			right = this.right;
		}
		if (height == null && bottom == null) {
			height = this.height;
			bottom = this.bottom;
		}

		this._adjustPosition(left, top, right, bottom, width, height, this.parent._client_width, this.parent._client_height);
		if (this._adjust_width != old_width || this._adjust_height != old_height) {
			bsize = true;
			if (old_width == 0 || old_height == 0) {
				update = true;
			}
		}
		if (this._adjust_left != old_left || this._adjust_top != old_top || (this._isRtl(this.parent) && this._left != null)) {
			bmove = true;
		}

		if (this._isPopupVisible && this._isPopupVisible()) {
			var orientation = nexacro._getMobileOrientation();
			if (this._orientation != orientation) {
				this._orientation = orientation;
				bsize = true;
			}
		}
		this.on_update_position(bsize, bmove);

		if (this._control_element) {
			if (update) {
				this.currentstyle._empty();
				this._control_pseudo = "";
				this._contents_pseudo = "";
			}
			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this._updateControl(this._control_element, pseudo);
			this._updateContents(this._control_element, pseudo);
		}
	};

	_pComponent.move_default = null;

	_pComponent._popup_frame_focus = function () {
		if (nexacro.Browser == "Runtime") {
			if (this._is_popup_frame) {
				this._getWindowHandle().focus();
			}
		}
		else {
			var obj = this;
			while (obj) {
				if (obj._is_frame && obj._is_popup_frame) {
					break;
				}

				obj = obj.parent;
			}

			if (obj) {
				if (obj._activate) {
					return;
				}

				var _win = obj._getWindow();
				var _win_handle = _win._handle;

				if (_win && _win_handle) {
					if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
						var _parent_win = _win.parent;
						_parent_win._setChildWindowFocus(_win_handle);
					}
					else {
						_win_handle.focus();
					}
				}
			}
		}
	};

	_pComponent._setFocus = function (bResetScroll, calledby, block_inner_focus) {
		if (calledby > -1 || calledby < 4) {
			this._focus_direction = calledby;
		}
		else {
			this._focus_direction = -1;
		}
		if (block_inner_focus == true) {
			this._block_inner_focus = true;
			this.setFocus(bResetScroll);
			this._block_inner_focus = false;
		}
		else {
			return this.setFocus(bResetScroll);
		}
	};

	_pComponent.setFocus = function (bResetScroll, bInnerFocus) {
		var win = this._getRootWindow();
		if (!this.getElement()) {
			return;
		}

		var is_active_layer = win._isActiveLayerComponent(this);
		if (!is_active_layer) {
			return;
		}

		if (!this._isVisible() || !this._isEnable() || !this._isFocusAcceptable()) {
			return;
		}

		this._popup_frame_focus();


		if (bResetScroll === undefined) {
			bResetScroll = true;
		}

		var bContainerFocus;
		if (bInnerFocus === undefined) {
			bContainerFocus = nexacro._enableaccessibility;
		}
		else {
			bContainerFocus = !bInnerFocus;
		}

		var block_inner, from_child = false;
		if (bContainerFocus) {
			if (this instanceof nexacro.Form) {
				if (this._block_inner_focus) {
					block_inner = true;
				}
				this._block_inner_focus = true;

				if (this._last_focused) {
					if (win._indexOfCurrentFocusPaths(this._last_focused) >= 0) {
						from_child = true;
						win._removeFromCurrentFocusPath(this._last_focused);
					}
					else {
						this._last_focused = null;
					}
				}
			}
		}

		var focus_direction = this._focus_direction;
		if (bResetScroll) {
			var c = this, c_temp, target_comp = this;
			if (!this._block_inner_focus) {
				while (c) {
					c_temp = c._getLastFocused();
					if (!c_temp) {
						c_temp = c._getTabOrderFirst();
					}
					if (c_temp) {
						target_comp = c_temp;
					}
					c = c_temp;
				}

				target_comp._resetScrollPos(target_comp, target_comp._adjust_left, target_comp._adjust_top, target_comp._adjust_left + target_comp._adjust_width, target_comp._adjust_top + target_comp._adjust_height, focus_direction);
			}
			else {
				nexacro.Component.prototype._resetScrollPos.call(this, this, this._adjust_left, this._adjust_top, this._adjust_left + this._adjust_width, this._adjust_top + this._adjust_height, focus_direction);
			}
		}

		var last_focused = this._find_lastFocused(this);
		var evt_name = "focus";

		if (focus_direction == 0) {
			evt_name = "tabkey";
		}
		else if (focus_direction == 1) {
			evt_name = "shifttabkey";
		}
		else if (focus_direction == 2) {
			evt_name = "downkey";
		}
		else if (focus_direction == 3) {
			evt_name = "upkey";
		}
		this._focus_direction = -1;

		var form = this._getRootForm();
		form._is_comp_focus = true;

		this._is_resetscroll = bResetScroll;

		this._on_focus(true, evt_name);

		this._is_resetscroll = false;

		form._is_comp_focus = false;
		if (from_child) {
			this.on_apply_custom_setfocus();
		}

		if (this._block_inner_focus && !block_inner) {
			this._block_inner_focus = false;
		}

		return last_focused;
	};

	_pComponent.redraw = function () {
	};
	_pComponent.resize = function (w, h) {
		if (w < 0 || h < 0) {
			return;
		}

		if (w == this._adjust_width && h == this._adjust_height) {
			var control_elem = this.getElement();
			if (control_elem && control_elem._handle && control_elem._vml_elem) {
				control_elem._refreshVMLContainerElement(control_elem, control_elem._vml_elem);
			}
			return;
		}
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;

		var bsize = false;
		if (old_width != this._adjust_left + w || old_height != this._adjust_top + h) {
			this.width = w;
			this.height = h;
			bsize = true;
		}

		this._update_position(bsize, false);
	};

	_pComponent._update_position = function (bsize, bmove) {
		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var update = false;

		if (this.parent) {
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width, this.parent._client_height);
		}
		else {
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, 0, 0);
		}

		if (this._adjust_width != old_width || this._adjust_height != old_height) {
			bsize = true;

			if (old_width == 0 || old_height == 0) {
				update = true;
			}
		}
		if (this._adjust_left != old_left || this._adjust_top != old_top) {
			bmove = true;
		}
		this.on_update_position(bsize, bmove);

		if (update) {
			this.currentstyle._empty();
			this.on_apply_pseudo(this._pseudo);
		}
	};

	_pComponent._on_afterHideWaitComp = function (pseudo) {
		if (this._pseudo != pseudo) {
			this._stat_change(this._status, pseudo);
		}
	};

	_pComponent.saveToImage = function (fileName, fileType, compressOption) {
		if (this._control_element) {
			return this._control_element.saveToImageFile(fileName, fileType, compressOption);
		}
	};

	_pComponent.saveToImageFile = function (fileName, fileType, compressOption) {
		if (this._control_element) {
			return this._control_element.saveToImageFile(fileName, fileType, compressOption);
		}
	};

	_pComponent.saveToImageObject = function () {
		if (this._control_element) {
			return this._control_element.saveToImageObject();
		}
	};


	_pComponent.applyto_bindSource = function (propid, Val) {
		if (!this._bind_event) {
			return true;
		}

		var evt = {
			propid : propid, 
			val : Val
		};
		var ret = this._bind_event._fireEvent(this, evt);
		return ret;
	};

	_pComponent.on_getBindableProperties = function () {
	};



	_pComponent.show = function () {
		var parent = this.parent;
		if (parent) {
			var control_element = this._control_element;
			if (!control_element) {
				if (this.createComponent(true)) {
					this.on_created();
				}
			}
			else {
			}

			var form = this._getRootForm();
			if (form && form._bind_manager) {
				form._bind_manager._delayBinds();
			}
		}
	};


	_pComponent._resizeBorder = function () {
		var width = this._adust_width;
		var height = this._adjust_height;
		var cur_border = this.on_find_CurrentStyle_border(this._pseudo);

		if (cur_border) {
			var new_border = nexacro._cloneStyleObject(cur_border);

			var update_flag = false;
			if (width < (new_border.left_width + new_border.right_width)) {
				new_border.left_width = width;
				new_border.right_width = 0;
				update_flag = true;
			}
			if (height < (new_border.top_width + new_border.bottom_width)) {
				new_border.top_width = height;
				new_border.bottom_width = 0;
				update_flag = true;
			}

			if (update_flag) {
				this._control_element.setElementBorder(new_border, this.currentstyle.bordertype);
			}
		}
	};

	_pComponent._isVisible = function () {
		var form = this;
		while (form != null) {
			if (form._is_frame && form._is_popup_frame) {
				break;
			}

			if (form.visible == false) {
				return false;
			}

			form = form.parent;
		}
		return true;
	};

	_pComponent._isEnable = function () {
		var form = this;
		while (form != null) {
			if (form._is_frame && form._is_popup_frame) {
				break;
			}

			if (form._real_enable == false || form.enable == false) {
				return false;
			}

			form = form.parent;
		}
		return true;
	};

	_pComponent._isPropEnable = function () {
		var form = this;
		while (form != null) {
			if (form._is_frame && form._is_popup_frame) {
				break;
			}

			if (form.enable == false) {
				return false;
			}

			form = form.parent;
		}
		return true;
	};

	_pComponent._isAccessibilityRoleHeading = function () {
		if (this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo)) == "heading") {
			return true;
		}
		else {
			return false;
		}
	};


	_pComponent._isEditableComponent = function (edittype) {
		if (this.readonly !== undefined) {
			if (edittype && edittype.match(this._type_name)) {
				if (this._type_name == "Edit") {
					var obj = edittype.split(",");
					for (var i = 0, n = obj.length; i < n; i++) {
						if (obj[i].trim() == this._type_name) {
							return true;
						}
					}
				}
				else {
					return true;
				}
			}
			else if (edittype == "All" || edittype == "") {
				return true;
			}
			else {
				return false;
			}
		}
		return false;
	};

	_pComponent._getForm = function () {
		return this._refform;
	};

	_pComponent._getRootForm = function () {
		var form = this._refform;
		while ((form && form._is_form == false) || (form && form._is_form && (form instanceof nexacro.Div || form instanceof nexacro.Tabpage || form instanceof nexacro.Tab))) {
			form = form.parent;
		}

		return form;
	};

	_pComponent._findDataset = function (id) {
		if (id && id.length > 0) {
			var ds = this[id];

			if (ds && (ds._type_name == "Dataset")) {
				return ds;
			}

			if (this._refform) {
				var ds = this._refform.lookup(id);
				if (ds && (ds._type_name == "Dataset")) {
					return ds;
				}
			}
		}

		return undefined;
	};
	_pComponent._findForm = function (comp) {
		var form = comp;
		while (form && form._is_form == false) {
			form = form.parent;
		}
		return form;
	};

	_pComponent._getOwnerFrame = function () {
		var form = this;
		while (form && !form._is_frame) {
			form = form.parent;
		}
		return form;
	};

	_pComponent._getWindow = function () {
		var parent = this.parent;
		if (parent || (parent && parent._is_popup_frame && !parent._is_window)) {
			return parent._getWindow();
		}

		var form = this._refform;
		if (form && form != this) {
			return form._getWindow();
		}

		return nexacro._findWindow(nexacro._getMainWindowHandle());
	};

	_pComponent._getRootWindow = function () {
		var _window = this._getWindow();
		while (_window) {
			if (_window.frame) {
				return _window;
			}

			_window = _window.parent;
		}

		return this._getWindow();
	};

	_pComponent._getWindowHandle = function () {
		var _window = this._getWindow();
		if (_window) {
			return _window._handle;
		}
		return null;
	};

	_pComponent._getLastFocused = function () {
		return this._last_focused;
	};
	_pComponent._find_lastFocused = function () {
		var form = this._getMainForm();
		if (!form) {
			return null;
		}

		var last_focus = form._last_focused;
		while (last_focus && last_focus._is_form) {
			var child_last_focus = last_focus._getLastFocused();
			if (!child_last_focus) {
				break;
			}
			last_focus = child_last_focus;
		}

		return last_focus;
	};

	_pComponent._getDragData = function () {
		if (this.text) {
			return this.text;
		}
		return null;
	};

	_pComponent.getElement = function () {
		return this._control_element;
	};

	_pComponent.getMainframe = function () {
		if (nexacro._is_attach_childframe) {
			return this._getWindow().frame;
		}
		return application.mainframe;
	};
	_pComponent._getScrollable = function (hscroll, vscroll, x, y) {
		if (!this._is_scrollable) {
			return false;
		}

		var ret, pos, v = this.vscrollbar;

		if (vscroll && v && v.enable) {
			pos = v.pos + y;
			if (pos < v._max && pos >= v._min) {
				ret = {
					y : true
				};
			}
		}
		var h = this.hscrollbar;

		if (hscroll && h && h.enable) {
			pos = h.pos + x;
			if (pos < h._max && pos > h._min) {
				if (ret) {
					ret.x = true;
				}
				else {
					ret = {
						x : true
					};
				}
			}
		}
		return ret;
	};


	_pComponent._getRefFormBaseUrl = function () {
		if (this._refform) {
			return this._refform._getFormBaseUrl();
		}
	};


	_pComponent._getScreenPosition = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var border = this.on_find_CurrentStyle_border(this._pseudo);
			var elem_pos = nexacro._getElementScreenPosition(control_elem);

			var screenLeft = elem_pos.x;
			var screenTop = elem_pos.y;
			return {
				x : screenLeft, 
				y : screenTop
			};
		}
		return {
			x : 0, 
			y : 0
		};
	};
	_pComponent._getWindowPosition = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var border = this.on_find_CurrentStyle_border(this._pseudo);
			var elem_pos = nexacro._getElementXYInWindow(control_elem._handle);
			var windowLeft = elem_pos[0] - (border ? border._getBorderLeftWidth() : 0);
			var windowTop = elem_pos[1] - (border ? border._getBorderTopWidth() : 0);
			return {
				x : windowLeft, 
				y : windowTop
			};
		}
		return {
			x : 0, 
			y : 0
		};
	};
	_pComponent._isRtl = function (comp) {
		if (!comp) {
			comp = this;
		}


		return comp._rtldirection == "rtl";
	};

	_pComponent._setRtlDirection = function (v) {
		var rtldirection = this.rtldirection;
		var _rtldirection = this._rtldirection;

		if (v == "inherit") {
			var _parent_rtldirection = this.parent._rtldirection;
			if (_rtldirection != _parent_rtldirection) {
				_rtldirection = _parent_rtldirection;
			}
		}
		else if (_rtldirection != v) {
			if (rtldirection == v) {
				_rtldirection = v;
			}
			else if (!rtldirection || rtldirection == "inherit") {
				_rtldirection = v;
			}
		}

		if (_rtldirection != this._rtldirection) {
			this._rtldirection = _rtldirection;
			this.on_apply_prop_rtldirection();
		}
	};


	_pComponent._convertLeftForRtlLayout = function (left, width) {
		return left;
	};

	_pComponent._setLocale = function (v) {
		if (!this.locale) {
			this._locale = v;
			this.on_apply_locale();
		}
	};

	_pComponent._getLocale = function () {
		if (this._locale === undefined) {
			return undefined;
		}

		var locale = nexacro.System.locale;
		var _parent = this;

		while (_parent) {
			if (_parent._locale) {
				locale = _parent._locale;
				break;
			}
			if (_parent._is_popup_frame && _parent._is_window) {
				break;
			}
			_parent = _parent.parent;
		}

		return locale;
	};

	_pComponent._getCumulativeZoomFactor = function () {
		var comp = this;
		var zoomfactor = 100;
		while (comp && !(comp instanceof nexacro.Frame)) {
			if (comp.getZoom) {
				var value = comp.getZoom();
				if (value != 100) {
					zoomfactor *= (value / 100.0);
				}
			}
			comp = comp.parent;
		}

		return zoomfactor;
	};

	_pComponent._getFixedOffsetValue = function () {
		var r = 0, b = 0;

		if (this.right != null) {
			r = 0;
		}
		else if (this.width != null) {
			var val = this.width;
			if (typeof (val) == "string" && val.indexOf("%") >= 0) {
				if (parseFloat(val) <= 100) {
					r = 0;
				}
				else {
					r = this.getOffsetRight();
				}
			}
			else {
				r = this.getOffsetRight();
			}
		}

		if (this.bottom != null) {
			b = 0;
		}
		else if (this.height != null) {
			var val = this.height;
			if (typeof (val) == "string" && val.indexOf("%") >= 0) {
				if (parseFloat(val) <= 100) {
					b = 0;
				}
				else {
					b = this.getOffsetBottom();
				}
			}
			else {
				b = this.getOffsetBottom();
			}
		}

		return {
			right : r, 
			bottom : b
		};
	};

	_pComponent._setAccessibilityNotifyEvent = function (direction) {
		var control_element = this.getElement();

		if (control_element && control_element.accessibility_enable) {
			if (direction !== undefined) {
				this._resetScrollPos(this, this._adjust_left, this._adjust_top, this._adjust_left + this._adjust_width, this._adjust_top + this._adjust_height, (direction > 0) ? 0 : 1);
			}

			control_element.setElementAccessibilityNotifyEvent();
			var form = this._getForm();
			if (form) {
				var _window = form._getWindow();
				_window._accessibility_last_focused_comp = this._getRootComponent(this);
			}
			return true;
		}
		return false;
	};

	_pComponent._setAccessibilityInfoByHover = function () {
		return this._setAccessibilityNotifyEvent();
	};

	_pComponent._clearAccessibilityInfoByHover = nexacro._emptyFn;

	_pComponent._applyMouseLeaveEvent = nexacro._emptyFn;
	_pComponent._applyMouseOverEvent = nexacro._emptyFn;
	delete _pComponent;
}


if (!nexacro.PopupComponent) {
	nexacro.PopupComponent = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		this.visible = false;

		this._is_window = true;
		this._attached_comp = null;
		this._is_subcontrol = true;
		this._call_comp = null;
	};

	var _pPopupComponent = nexacro.PopupComponent.prototype = nexacro._createPrototype(nexacro.Component, nexacro.PopupComponent);
	_pPopupComponent._type_name = "PopupComponent";

	_pPopupComponent._is_popup_control = true;
	_pPopupComponent._is_selfclose = true;
	_pPopupComponent._default_zindex = nexacro._zindex_popup;
	_pPopupComponent._track_capture = true;


	_pPopupComponent.on_create_control_element = function (parent_elem) {
		var control_elem = this.on_create_popup_control_element(parent_elem);
		if (control_elem && this._default_zindex > 0) {
			var popup_zindex = this._default_zindex;
			var _win = this._getWindow();
			if (_win) {
				var layer_info = _win._getComponentLayerInfo(this);
				if (layer_info) {
					popup_zindex = Math.max(layer_info.popup_zindex, this._default_zindex);
				}
				layer_info = null;
			}
			control_elem.setElementZIndex(popup_zindex);
		}
		return control_elem;
	};

	_pPopupComponent.on_created = function (_window) {
		if (!this._is_created) {
			nexacro.Component.prototype.on_created.call(this, _window);
		}

		var control_elem = this._control_element;
		if (!this.visible && control_elem) {
			control_elem.setElementPosition(0, 0);
			control_elem.setElementSize(1, 1);
		}
	};

	_pPopupComponent.destroyComponent = function () {
		this._is_alive = false;

		if (this.visible) {
			nexacro._removePopupComponent(this);
			this.visible = false;
		}

		if (nexacro._enableaccessibility) {
			if (application._accessibilityHistoryList && !this._is_subcontrol) {
				application._remove_accessibility_history(this);
			}
		}

		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
			_window._releaseCaptureLock(this._attached_comp);
			this._track_capture = false;
		}

		if (this._subctrlitems) {
			nexacro._deleteAllSubComponent(this);
		}

		if (this._is_subcontrol && this.parent && this.parent._subctrlitems) {
			nexacro._deleteSubComponent(this, this.parent);
		}

		if (this.parent && this.parent.removeChild) {
			this.parent.removeChild(this.id);
		}

		if (this._control_element) {
			this._control_element.destroy();
			this._control_element = null;
		}
		this._clearEventListeners();
		this.on_destroy_contents();

		this._is_created = false;

		return true;
	};

	_pPopupComponent.on_change_containerRect = function (container_width, container_height) {
		var comp = this._attached_comp;
		if (comp) {
			var old_left = comp._adjust_left;
			var old_top = comp._adjust_top;
			var old_width = comp._adjust_width;
			var old_height = comp._adjust_height;
			var bsize = false, bmove = false;
			var update = false;

			comp._adjustPosition(0, 0, null, null, container_width, container_height, this._client_width, this._client_height);
			if (comp._adjust_width != old_width || comp._adjust_height != old_height) {
				bsize = true;
				if (old_width == 0 || old_height == 0) {
					update = true;
				}
			}

			if (comp._adjust_left != old_left || comp._adjust_top != old_top) {
				bmove = true;
			}

			if (comp._isPopupVisible && comp._isPopupVisible()) {
				bsize = true;
			}

			comp.on_update_position(bsize, bmove);

			if (comp._control_element) {
				if (update) {
					comp.currentstyle._empty();
					comp._control_pseudo = "";
					comp._contents_pseudo = "";
				}
				var pseudo = comp._getResultPseudo(comp._status, comp._pseudo);
				comp._updateControl(comp._control_element, pseudo);
				comp._updateContents(comp._control_element, pseudo);
			}
		}
	};

	_pPopupComponent._contains = function (oDescendant) {
		while (oDescendant) {
			if (oDescendant == this._attached_comp) {
				return true;
			}
			oDescendant = oDescendant.parent;
		}
		return false;
	};

	_pPopupComponent.set_visible = function (v) {
		if (this.visible != v) {
			this.visible = v;
			var control_elem = this._control_element;

			if (control_elem) {
				control_elem.setElementVisible(v);

				if (this.visible) {
					if (!this._is_subcontrol) {
						if (this.parent._last_focused) {
							this._call_comp = this.parent._last_focused;
						}
						else {
							this._call_comp = this.parent;
						}
					}

					var pseudo = this._getResultPseudo(this._status, this._pseudo);
					this._updateControl(control_elem, pseudo);
					this._updateContents(control_elem, pseudo);
				}
				else {
					if (this instanceof nexacro.WaitComponent) {
						var pseudo = this._getResultPseudo(this._status, this._pseudo);
						this._updateControl(control_elem, pseudo);
					}

					control_elem.setElementPosition(0, 0);
					control_elem.setElementSize(1, 1);
				}

				if (nexacro._enableaccessibility && this._attached_comp) {
					this._attached_comp._setAccessibilityStatExpanded(v);
					this._attached_comp._setAccessibilityStatHidden(v);
				}

				if (this.visible) {
					nexacro._resetVML(this);
				}

				if (this._is_selfclose) {
					if (!v) {
						var _attached_comp = this._attached_comp;
						if (_attached_comp && _attached_comp.on_fire_oncloseup) {
							_attached_comp.on_fire_oncloseup(_attached_comp);
						}

						nexacro._removePopupComponent(this);
						var _window = this._getWindow();
						_window._removeFromCurrentFocusPath(this, false);
						if (!this._is_subcontrol) {
							var call_comp = this.parent._last_focused;
							if (!call_comp) {
								this._call_comp._on_focus(true);
							}
							else {
								if (call_comp._caller_comp) {
									call_comp._caller_comp._on_focus(this);
									call_comp._caller_comp = null;
								}
								else {
									call_comp._on_focus(this);
								}
							}
						}
					}
					else {
						nexacro._appendPopupComponent(this);
					}
				}
			}
		}
	};


	_pPopupComponent._attach = function (comp) {
		this._attached_comp = comp;
		nexacro._addSubComponent(this, comp);
		var contrl_element = this._control_element;
		if (comp && comp != this && comp._control_element && contrl_element) {
			var sub_control_element = comp._control_element;
			if (sub_control_element) {
				var sub_parent = sub_control_element._parent_elem;
				if (comp._is_created && sub_parent != contrl_element) {
					sub_control_element._removeFromContainer();
				}

				sub_control_element._parent_elem = contrl_element;
			}

			if (comp._is_created) {
				sub_control_element._appendToContainer(contrl_element);
			}
		}
	};
	_pPopupComponent._detach = function (comp) {
		if (this._attached_comp == comp && comp != this) {
			this._attached_comp = null;

			var contrl_element = this._control_element;
			var sub_control_element = comp._control_element;
			if (sub_control_element && contrl_element) {
				if (comp._is_created) {
					sub_control_element._removeFromContainer();
				}
				sub_control_element._parent_elem = null;
			}
		}
	};

	_pPopupComponent._is_popup = function (comp) {
		return this.visible;
	};


	_pPopupComponent._popup = function (left, top, width, height) {
		if (!this._attached_comp) {
			return;
		}

		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._setCaptureLock(this._attached_comp, true, false);
		}

		var control_elem = this._control_element;
		if (control_elem) {
			var mainframe = this.getMainframe();
			if (mainframe) {
				left = mainframe._convertLeftForRtlLayout(left, width);
			}
			control_elem.setElementPosition(left, top);
			control_elem.setElementSize(width, height);
			this._updateClientSize(control_elem);
		}

		this.set_visible(true);
	};

	_pPopupComponent._popupBy = function (from_comp, left, top, width, height) {
		if (!this._attached_comp || !from_comp) {
			return;
		}

		var _window = this._getWindow();
		if (_window) {
			nexacro._flushCommand(_window);
		}

		var win_left, win_top;


		var p = nexacro._getElementPositionInFrame(from_comp.getElement());
		var mainframe = this.getMainframe();
		if (mainframe) {
			var control_elem = mainframe._control_element;

			if (this._attached_comp._isRtl()) {
				p.x = control_elem.client_width - from_comp._adjust_width - p.x;
			}
		}

		var border = from_comp.on_find_CurrentStyle_border(from_comp._pseudo);
		var elem_pos = {
			x : p.x, 
			y : p.y
		};

		win_left = elem_pos.x + left - (_window ? _window._custom_node_left : 0);
		win_top = elem_pos.y + top - (_window ? _window._custom_node_top : 0);

		var m_c_width = _window ? _window.clientWidth : 0;
		var m_c_height = _window ? (_window.clientHeight || _window._doc.documentElement.clientHeight) : 0;

		if (win_left + width > m_c_width) {
			var left_width = win_left - width;
			if (left_width < 0) {
				win_left = 0;
				if (width > m_c_width) {
					width = m_c_width;
				}
			}
			else {
				win_left = left_width;
			}
		}

		if (win_top + height > m_c_height) {
			var t_temp = m_c_height - height;
			if (t_temp < 0) {
				win_top = 0;
				height = m_c_height;
			}
			else {
				win_top = t_temp;
			}
		}

		if (_window && this._track_capture) {
			_window._setCaptureLock(this._attached_comp, true, false);
		}


		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementPosition(win_left, win_top);
			control_elem.setElementSize(width, height);
			this._updateClientSize(control_elem);
		}

		this.set_visible(true);
	};

	_pPopupComponent._closePopup = function () {
		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this._attached_comp);
		}
		this.set_visible(false);
	};


	_pPopupComponent._findOwnerElementHandle = function () {
		var ret = {
		};
		ret.owner_handle = null;
		ret.is_append = true;
		ret.ref_handle = null;

		var win = this._getWindow();
		if (win) {
			var layer_info;
			if (this instanceof nexacro.WaitComponent) {
				layer_info = {
				};
				layer_info.popup_zindex = nexacro._zindex_waitcursor;
			}
			else {
				layer_info = win._getComponentLayerInfo(this);
			}

			if (layer_info.is_modal) {
				var frame = layer_info.frame;
				var overlay_elem = frame._modal_overlay_elem;
				ret.owner_handle = overlay_elem._handle;
				ret.is_append = true;
			}
			else {
				if (layer_info.ref_first_modal_frame) {
					var frame = layer_info.ref_first_modal_frame;
					ret.owner_handle = win._dest_handle;
					ret.is_append = false;
					ret.ref_handle = frame._modal_overlay_elem._handle;
				}
				else {
					ret.owner_handle = win._dest_handle;
					ret._is_append = true;
				}
			}
		}

		return ret;
	};

	delete _pPopupComponent;
}

if (!nexacro.WaitComponent) {
	nexacro.WaitComponent = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.PopupComponent.call(this, id, position, left, top, width, height, right, bottom, parent);
		this.visible = false;

		this._img_elem = null;
		this._image_width = 0;
		this._image_height = 0;
		this._context_list = [];
		this._is_subcontrol = false;
		this._is_focus_accept = false;
	};

	var _pWaitComponent = nexacro.WaitComponent.prototype = nexacro._createPrototype(nexacro.PopupComponent, nexacro.WaitComponent);
	_pWaitComponent._type_name = "WaitComponent";

	_pWaitComponent._is_popup_control = true;
	_pWaitComponent._is_selfclose = false;
	_pWaitComponent._default_zindex = nexacro._zindex_waitcursor;

	_pWaitComponent.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._img_elem = new nexacro.ImageElement(control_elem);
		}
	};

	_pWaitComponent.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var img_elem = this._img_elem;
			if (img_elem) {
				img_elem.setElementVisible(true);
				img_elem.create();
			}
		}

		if (nexacro._enableaccessibility) {
			var curstyle = this.currentstyle;
			var accessibility = nexacro.Component._default_accessibility;
			if (accessibility && accessibility != curstyle.accessibility) {
				curstyle.accessibility = this._make_accessibility_value(accessibility);
				control_elem.setAccessibility(curstyle.accessibility);
			}

			if (nexacro._accessibilitytype == 4) {
				if (control_elem && control_elem._handle) {
					nexacro.__setDOMNodeAccessibilityHidden(control_elem._handle, true);
				}
			}
		}
	};

	_pWaitComponent.on_change_containerRect = function (container_width, container_height) {
		var img_elem = this._img_elem;
		if (img_elem) {
			var left = Math.round((container_width - this._image_width) / 2);
			var top = Math.round((container_height - this._image_height) / 2);

			img_elem.setElementPosition(left, top);
			img_elem.setElementSize(this._image_width, this._image_height);
		}
	};

	_pWaitComponent._getAccessibilityLabel = function (accessibility) {
		return "Wait Cursor";
	};

	_pWaitComponent._on_loadimage = function (imgurl, w, h) {
		if (!this._is_alive) {
			return;
		}

		var img_elem = this._img_elem;
		if (img_elem && w > 0 && h > 0) {
			this._image_width = w;
			this._image_height = h;

			var bw = this._adjust_width;
			var bh = this._adjust_height;
			var left = Math.round((bw - w) / 2);
			var top = Math.round((bh - h) / 2);

			img_elem.setElementPosition(left, top);
			img_elem.setElementSize(w, h);
			img_elem.setElementImageUrl(imgurl);
		}
	};

	_pWaitComponent.setImage = function (imageurl) {
		var img_elem = this._img_elem;
		if (img_elem) {
			var imagesize = nexacro._getImageSize(imageurl, this._on_loadimage, this);
			if (imagesize) {
				this._image_width = imagesize.width;
				this._image_height = imagesize.height;

				var bw = this._adjust_width;
				var bh = this._adjust_height;

				var left = Math.round((bw - imagesize.width) / 2);
				var top = Math.round((bh - imagesize.height) / 2);

				img_elem.setElementPosition(left, top);
				img_elem.setElementSize(imagesize.width, imagesize.height);

				img_elem.setElementImageUrl(imageurl);
			}
		}
	};

	_pWaitComponent._updateControl = function (control_elem, pseudo) {
		if (control_elem) {
			this._control_pseudo = pseudo;
			if (this._control_pseudo != pseudo) {
				if (nexacro.Browser == "Runtime") {
					var background = nexacro._getCachedStyleObj("background", "#ffffff01");
					control_elem.setElementBackground(background, null);
				}
			}
			return true;
		}
		return false;
	};

	_pWaitComponent.on_destroy_contents = function () {
		if (this._img_elem) {
			this._img_elem.destroy();
			this._img_elem = null;
		}
	};

	_pWaitComponent.show = function () {
		if (!this._is_created || !this.parent) {
			return;
		}

		var _window = this._getWindow();
		if (_window) {
			var left, top, width, height;

			left = _window.getLeft();
			top = _window.getTop();

			if (_window.frame) {
				var frame = _window.frame;
				width = frame.getOffsetWidth();
				height = frame.getOffsetHeight();
			}
			else {
				width = _window.getClientWidth();
				height = _window.getClientHeight();
			}

			_window._setCaptureLock(this, true, true);

			this._adjustPosition(0, 0, null, null, width, height, width, height);
			this.on_update_position(true, true);

			var control_elem = this._control_element;
			if (control_elem) {
				control_elem.setElementPosition(0, 0);
				control_elem.setElementSize(width, height);
				this._updateClientSize(control_elem);

				var cursor = nexacro.Component._wait_cursor;
				var curstyle = this.currentstyle;
				if (cursor && curstyle.cursor != cursor) {
					curstyle.cursor = cursor;
					control_elem.setElementCursor(cursor);
				}
			}

			this.set_visible(true);
		}
	};
	_pWaitComponent.hide = function () {
		var _window = this._getWindow();
		if (_window) {
			_window._updateWrapper(false);
			_window._releaseCaptureLock(this);

			var control_elem = this._control_element;
			if (control_elem) {
				control_elem.setElementSize(1, 1);
				this._updateClientSize(control_elem);
			}
		}

		if (this._is_created && this._is_alive) {
			var form = this.parent;

			while (form) {
				if (form._is_form) {
					break;
				}

				form = form._last_focused;
			}


			this.set_visible(false);


			var hover_elem = nexacro._getHoverElement(_window);
			if (!hover_elem) {
				return;
			}

			var hover_comp = _window.findComponent(hover_elem, 0, 0)[0];
			if (form) {
				var last_focus = form._last_focused;
				var cursor;
				if (last_focus) {
					if (form._obj_mousemove && (form._obj_mousemove != last_focus)) {
						last_focus._on_afterHideWaitComp("normal");

						if (form._obj_mousemove instanceof nexacro.WaitComponent) {
							cursor = nexacro._getCachedStyleObj("cursor", "arrow");
						}
						else {
							cursor = form._obj_mousemove.currentstyle.cursor;
						}
					}
					else {
						var is_contain = false;
						var temp = hover_comp;
						while (temp) {
							if (temp == last_focus) {
								is_contain = true;
								break;
							}
							temp = temp.parent;
						}

						if (is_contain) {
							last_focus._on_afterHideWaitComp(last_focus._pseudo);
							cursor = last_focus.currentstyle ? last_focus.currentstyle.cursor : null;
						}
						else {
							last_focus._on_afterHideWaitComp("normal");

							if (hover_comp) {
								hover_comp._on_afterHideWaitComp("mouseover");
								cursor = hover_comp ? hover_comp.currentstyle ? hover_comp.currentstyle.cursor : null : null;
							}
						}
					}

					var curstyle = this.currentstyle;
					if (cursor != curstyle.cursor) {
						curstyle.cursor = cursor;
						this._control_element.setElementCursor(cursor);
					}
				}
				else {
					cursor = hover_comp ? hover_comp.currentstyle ? hover_comp.currentstyle.cursor : null : null;
					var curstyle = this.currentstyle;
					if (cursor != curstyle.cursor) {
						curstyle.cursor = cursor;
						this._control_element.setElementCursor(cursor);
					}
				}
			}
		}
	};

	_pWaitComponent._addContext = function (context) {
		if (context) {
			this._context_list.push(context);
		}
	};

	_pWaitComponent._removeContext = function (context) {
		if (!context) {
			return;
		}
		var idx = nexacro._indexOf(this._context_list, context);
		if (idx >= 0) {
			this._context_list[idx] = null;
			delete this._context_list[idx];
			this._context_list.shift();
		}
	};

	_pWaitComponent.on_fire_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return true;
	};

	_pWaitComponent._on_keydown = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		if (keycode == nexacro.Event.KEY_TAB) {
			elem._event_stop = true;
		}
		else if (keycode == nexacro.Event.KEY_ESC) {
			elem._event_stop = true;
			var context_list = this._context_list;
			var len = context_list.length;
			for (var i = 0; i < len; i++) {
				var context = context_list[i];
				if (context instanceof nexacro.Form) {
					context._stopTransaction();
				}
			}
		}

		return true;
	};

	delete _pWaitComponent;
}

if (!nexacro.CanvasComponent) {
	nexacro.CanvasComponent = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.id = this.name = id || null;

		this.enableevent = false;

		this._apply_client_padding = false;
		this._canvas = null;
		this._drawn = false;

		this._control_element = null;
		this._inner_elem = null;
	};
	var _pCanvasComponent = nexacro._createPrototype(nexacro.Component, nexacro.CanvasComponent);
	nexacro.CanvasComponent.prototype = _pCanvasComponent;
	_pCanvasComponent._type_name = "CanvasComp";

	_pCanvasComponent.on_create_contents = function () {
		var control = this.getElement();
		var tcanvas = new nexacro.CanvasElement(control);
		if (tcanvas) {
			tcanvas.setElementPosition(0, 0);
			tcanvas.setElementSize(this._client_width, this._client_height);
		}
		this._canvas = tcanvas;
	};

	if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
		_pCanvasComponent.on_created_contents = function () {
			var pCanvas = this._canvas;
			if (pCanvas) {
				pCanvas.create();
			}
			this.ondraw(pCanvas);
		};
	}
	else {
		_pCanvasComponent.on_created_contents = function () {
			var pCanvas = this._canvas;
			if (pCanvas) {
				pCanvas.create();
			}
			this.ondraw(pCanvas);
		};
	}

	_pCanvasComponent._initInner = function () {
		this.on_apply_pseudo();
		this.on_apply_custom_pseudo();
	};


	_pCanvasComponent.on_destroy_contents = function () {
		if (this._canvas) {
			this._canvas.destroy();
			this._canvas = null;
		}
	};


	_pCanvasComponent.on_change_containerRect = function (width, height) {
		if (this._canvas) {
			this._canvas._moveCanvas(0, 0, width, height);
			this._drawn = false;
			this.ondraw(this._canvas);
		}
	};

	_pCanvasComponent.ondraw = function (canvas) {
	};

	_pCanvasComponent.redraw = function () {
		this.ondraw(this._canvas);
	};

	delete _pCanvasComponent;
	nexacro.CanvasCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.CanvasComponent.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pCanvasCtrl = nexacro.CanvasCtrl.prototype = nexacro._createPrototype(nexacro.CanvasComponent, nexacro.CanvasCtrl);
	nexacro._setForControlStyleFinder(_pCanvasCtrl);

	delete _pCanvasCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (nexacro.Component) {
	var _pComponent = nexacro.Component.prototype;


	_pComponent._resetScrollPos = function (target_comp, left, top, right, bottom, focus_direction) {
		if (this._is_frame) {
			return;
		}

		if (!this._is_popup_control && this.parent && this.parent != this) {
			this.parent._resetScrollPos(this, left, top, right, bottom, focus_direction);
		}
	};

	_pComponent._getSameParent = function (paths) {
		if (!paths) {
			return;
		}

		var p = this.parent;
		var idx = 0;
		var self_parent_paths = [];
		while (p) {
			idx = nexacro._indexOf(paths, p);
			self_parent_paths.push(p);
			if (idx > -1 || p._is_window || (p._is_frame && (p._window_type == 1 || p._window_type == 4))) {
				return [self_parent_paths, idx];
			}
			p = p.parent;
		}
	};

	_pComponent._setLastFocus = function (comp) {
		if (comp && !comp._is_popup_control) {
			if (comp && nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
				comp._setAccessibilityNotifyEvent(1);
			}

			if (this == comp) {
				this._last_focused = null;
				return;
			}

			var p = this;
			while (p && p._is_form) {
				p._last_focused = comp;

				comp = p;
				p = p.parent;
			}
		}
	};

	_pComponent._getTabOrderFirst = function () {
		return null;
	};

	_pComponent._setCurFocusPathsByCurPos = function (cur, root_window) {
		var _win = root_window ? root_window : this._getRootWindow();
		var parent_path = [];
		var p = cur.parent;

		_win.clearCurrentFocusPaths();

		if (_win.frame == cur) {
			return;
		}

		while (p) {
			parent_path.push(p);
			if (p == _win.frame || (p._is_frame && (p._window_type == 1 || p._window_type == 4))) {
				break;
			}
			p = p.parent;
		}
		for (var i = parent_path.length; i > 0; i--) {
			_win.addCurrentFocusPaths(parent_path[i - 1]);
		}
	};

	_pComponent._getRecalcCanvasXY = function (elem, canvasX, canvasY) {
		var scroll_left = 0, scroll_top = 0;
		var border_left = 0, border_top = 0;
		var root_form = this._getRootForm();
		var root_comp = this._getRootComponent(this);

		if (this.parent && !(this instanceof nexacro.ScrollBarCtrl)) {
			var control_elem = this.parent._control_element;
			if (control_elem && control_elem instanceof nexacro.ScrollableControlElement) {
				scroll_left = control_elem.scroll_left;
				scroll_top = control_elem.scroll_top;
				control_elem = null;
			}

			if (root_form && root_form != this && !this._is_subcontrol && root_form == root_comp.parent) {
				var control_elem = root_form._control_element;
				if (control_elem) {
					border_left = control_elem.border ? control_elem.border._left_width : 0;
					border_top = control_elem.border ? control_elem.border._top_width : 0;
				}
			}
		}

		if (this.isPopup && this.isPopup()) {
			var control_elem = this.getElement();
			if (control_elem) {
				canvasX += control_elem.left - scroll_left || 0;
				canvasY += control_elem.top - scroll_top || 0;
			}
		}
		else {
			canvasX += this._adjust_left + border_left - scroll_left || 0;
			canvasY += this._adjust_top + border_top - scroll_top || 0;
		}


		var window = this._getWindow();
		var curstyle = this.currentstyle;
		var comp = window.findComponent(elem);

		if (comp != this) {
			if (curstyle && curstyle.padding) {
				canvasX += curstyle.padding.left;
				canvasY += curstyle.padding.top;
			}

			if (curstyle && curstyle.border) {
				canvasX += curstyle.border._left_width;
				canvasY += curstyle.border._top_width;
			}
		}
		return [canvasX, canvasY];
	};

	_pComponent._getClientXY = function (canvasX, canvasY) {
		var border_left = 0, border_top = 0, padding_left = 0, padding_top = 0, curstyle = this.currentstyle;

		var scroll_left = 0, scroll_top = 0;

		if (this._is_form && !(this instanceof nexacro.ScrollBarCtrl)) {
			var control_elem = this._control_element;
			if (control_elem && control_elem instanceof nexacro.ScrollableControlElement) {
				scroll_left = control_elem.scroll_left;
				scroll_top = control_elem.scroll_top;
				control_elem = null;
			}
		}

		if (curstyle) {
			if (curstyle.border) {
				border_top = curstyle.border._top_width;
				border_left = curstyle.border._left_width || curstyle.border._top_width;
			}
		}

		var clientX = canvasX - border_left + scroll_left || 0;
		var clientY = canvasY - border_top + scroll_top || 0;
		return [clientX, clientY];
	};

	_pComponent._isParentdefaultprevented = function (comp, event_name) {
		var p_comp = comp.parent;
		while (p_comp) {
			if (!p_comp._getFromComponent) {
				return false;
			}
			var root_comp = p_comp._getFromComponent(p_comp);
			var listener = root_comp["on" + event_name];
			if (!listener || (listener && !listener.defaultprevented)) {
				p_comp = p_comp.parent;
				if (root_comp instanceof nexacro.MainFrame) {
					return false;
				}
			}
			else {
				return true;
			}
		}

		return false;
	};

	_pComponent._setfocusing_comp = null;
	_pComponent._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		if (!this._is_alive || !this.visible || !this._isEnable() || this._is_loading) {
			return;
		}

		var _win = this._getRootWindow();



		if (self_flag) {
			var cur_focus_paths = _win.getCurrentFocusPaths();

			var pThis = this;

			if (pThis._isFocusAcceptable() == false) {
				if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8 && cur_focus_paths) {
					var len = cur_focus_paths.length;
					var _c = cur_focus_paths[len - 1];
					if (_c._has_inputElement && _c._edit_base_api) {
						_c._edit_base_api._accept_blur_event = false;
						_c._edit_base_api._do_focus = true;
					}
				}

				return;
			}

			while (pThis && pThis._is_nc_control) {
				pThis = pThis.parent;
			}

			if (!pThis) {
				return;
			}

			var focuspath_index = -1;
			if (cur_focus_paths) {
				focuspath_index = nexacro._indexOf(cur_focus_paths, pThis);
			}

			if (focuspath_index > -1) {
				if (focuspath_index == cur_focus_paths.length - 1) {
					if (this._getTabOrderFirst(nexacro._enableaccessibility) == null) {
						if (_win._is_active_window == false) {
							_win._on_sys_activate();
						}

						return;
					}
				}
				else {
					if (!(this instanceof nexacro.PopupDiv)) {
						if (_win._is_active_window == false) {
							_win._on_sys_activate();
						}
						return;
					}
				}
			}

			var new_refer_focus = this;
			var new_focus = this._getRootComponent(pThis);
			var focus_Info = null;
			if (cur_focus_paths && cur_focus_paths.length) {
				focus_Info = pThis._getSameParent(cur_focus_paths);
			}

			if (focus_Info) {
				var start_kill_focus_idx = focus_Info[1];
				var old_refer_focus = cur_focus_paths[cur_focus_paths.length - 1];
				var old_focus = this._getRootComponent(old_refer_focus);
				var kill_focus_arrs = cur_focus_paths.slice(start_kill_focus_idx + 1);
				kill_focus_arrs = kill_focus_arrs.reverse();
				var focus_arrs = focus_Info[0];
				if (focus_arrs && (focus_arrs.length > 0)) {
					var focus_path;
					for (var i = 0, n = focus_arrs.length; i < n; i++) {
						focus_path = focus_arrs[i];
						if (focus_path && focus_path._isFocusAcceptable() == false) {
							return;
						}
					}
				}

				var _lose_focus;

				if (focus_arrs && (focus_arrs.length > 1)) {
					var focus_path, prev_focus_path;
					for (var i = 0, n = focus_arrs.length; i < n; i++) {
						focus_path = focus_arrs[i];
						if (focus_path && focus_path.components) {
							focus_path._last_focused = (prev_focus_path ? prev_focus_path : pThis);
						}
						prev_focus_path = focus_path;
					}
				}
				else {
					if (pThis.parent && pThis.parent.components) {
						if (pThis.parent._last_focused && !pThis.parent._last_focused.selectStatus) {
							pThis.parent._last_focused._stat_change("notfocus", "normal");
						}
						pThis.parent._last_focused = pThis;
					}
				}

				if (kill_focus_arrs && kill_focus_arrs.length > 0) {
					for (var i = 0, n = kill_focus_arrs.length; i < n; i++) {
						_lose_focus = kill_focus_arrs[i];
						if (_lose_focus && _lose_focus._is_alive && !_lose_focus._is_killfocusing) {
							_lose_focus._is_killfocusing = true;

							var focus_path_cur = _win.getCurrentFocusPaths().slice(0);
							_win._removeFromCurrentFocusPath(_lose_focus, false, new_focus, new_refer_focus);
							if (_lose_focus.enableevent) {
								_win._setfocusing_comp = new_focus;

								var focus_path_before = _win.getCurrentFocusPaths().slice(0);
								_lose_focus.on_fire_onkillfocus(new_focus, new_refer_focus);

								var focus_path_after = _win.getCurrentFocusPaths();
								var is_focus_changed = (focus_path_before.length != focus_path_after.length);
								if (!is_focus_changed) {
									for (var j = 0, k = focus_path_before.length; j < k; j++) {
										if (focus_path_before[j] != focus_path_after[j] || (focus_path_cur.length == focus_path_before.length && focus_path_cur[j] == focus_path_before[j]) || (focus_path_cur.length != focus_path_before.length && focus_path_cur[j] != focus_path_before[j])) {
											is_focus_changed = true;
											break;
										}
									}
								}
								if (is_focus_changed) {
									if (_lose_focus._input_element) {
										_lose_focus._lose_focus_comp = _lose_focus;
									}
									_lose_focus._is_killfocusing = false;
									return;
								}
							}
							_lose_focus._is_killfocusing = false;
						}
					}
				}

				if (focus_arrs && (focus_arrs.length > 1)) {
					var focus_start = focus_arrs[focus_arrs.length - 2];
					pThis._setCurFocusPathsByCurPos(focus_start, _win);
					focus_start._on_focus(false, evt_name, old_focus, old_refer_focus, new_focus, new_refer_focus);
				}
				else {
					pThis._setCurFocusPathsByCurPos(pThis, _win);
					pThis._on_focus(false, evt_name, old_focus, old_refer_focus, new_focus, new_refer_focus);
				}
			}
			else {
				pThis._setCurFocusPathsByCurPos(pThis, _win);
				pThis._on_focus(false, evt_name, lose_focus, refer_lose_focus);
			}
		}
		else {
			var c = this._getLastFocused();
			if (!c || (c && (!c.visible || !c.enable))) {
				var baccessibility = nexacro._enableaccessibility;
				c = this._getTabOrderFirst(baccessibility);
			}

			if (c && c.visible && !this._block_inner_focus) {
				if (_win._is_active_window !== false) {
					if (this._pseudo == "pushed") {
						this._stat_change("focus", "pushed");
					}
					else {
						this._stat_change("focus", "focused");
					}
				}
				else {
					if (this._pseudo != "pushed") {
						if (this instanceof nexacro.Frame) {
							this._change_state_activate(true);
						}
					}
				}
				{

					var focus_paths = _win.getCurrentFocusPaths();
					var focus_path_before = null;

					if (focus_paths) {
						focus_path_before = focus_paths.slice(0);
					}

					if (!this._is_comp_focus) {
						this.on_fire_onsetfocus(lose_focus, refer_lose_focus);
					}

					if (focus_paths) {
						var focus_path_after = _win.getCurrentFocusPaths();
						var is_focus_changed = (focus_path_before.length != focus_path_after.length);
						if (!is_focus_changed) {
							for (var j = 0, n = focus_path_before.length; j < n; j++) {
								if (focus_path_before[j] != focus_path_after[j]) {
									is_focus_changed = true;
									break;
								}
							}
						}
						if (is_focus_changed) {
							return;
						}
					}
				}
				this._setLastFocus(c);
				_win._removeFromCurrentFocusPath(this);
				_win.addCurrentFocusPaths(this);
				c._on_focus(false, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
			}
			else {
				var is_refer_new_focus_mychild;
				if (refer_new_focus && this != refer_new_focus) {
					var p = refer_new_focus;
					while (p && !(p._is_window)) {
						if (p == this) {
							is_refer_new_focus_mychild = true;
							break;
						}
						p = p.parent;
					}
				}

				if (evt_name == "lbuttondown" && is_refer_new_focus_mychild == true) {
					this._stat_change("focus", "mouseover");
				}
				else {
					if (_win._is_active_window !== false) {
						if (this._pseudo == "pushed") {
							this._stat_change("focus", "pushed");
						}
						else {
							this._stat_change("focus", "focused");
						}
					}
				}
				{

					var focus_paths = _win.getCurrentFocusPaths();
					var focus_path_before = null;

					if (focus_paths) {
						focus_path_before = focus_paths.slice(0);
					}

					if (!this._is_comp_focus) {
						this.on_fire_onsetfocus(lose_focus, refer_lose_focus);
					}

					if (focus_paths) {
						var focus_path_after = _win.getCurrentFocusPaths();
						var is_focus_changed = (focus_path_before.length != focus_path_after.length);
						if (!is_focus_changed) {
							for (var j = 0, n = focus_path_before.length; j < n; j++) {
								if (focus_path_before[j] != focus_path_after[j]) {
									is_focus_changed = true;
									break;
								}
							}
						}
						if (is_focus_changed) {
							return;
						}
					}
				}
				if (nexacro._enableaccessibility) {
					this._setAccessibilityStatFocus(evt_name);
				}
				this._setLastFocus(this);
				_win.addCurrentFocusPaths(this);

				if (nexacro.Browser == "IE" && (nexacro.BrowserVersion == 9 || nexacro.BrowserVersion == 10) && this._control_element && this._has_inputElement && (this.value == "" || nexacro._isNull(this.value))) {
					this._control_element.setElementFocus(true);
				}
				this.on_apply_custom_setfocus(evt_name, self_flag);

				if (is_refer_new_focus_mychild) {
					var fireComp = null;
					p = refer_new_focus;
					while (p && this != p) {
						if (p instanceof nexacro.Form) {
							break;
						}
						fireComp = p;
						p = p.parent;
					}
					if (fireComp && !fireComp._is_application) {
						fireComp._on_focus(false, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
					}
				}
			}
		}
	};

	_pComponent._on_activate = function () {
		if (!this._is_alive) {
			return;
		}

		if (!this._isSelected()) {
			this._stat_change("focus", "normal");
		}
	};

	_pComponent._on_deactivate = function () {
		if (!this._is_alive) {
			return;
		}

		if (!this._isSelected()) {
			this._stat_change("notfocus", "normal");
		}

		if (this._on_killfocus) {
			this._on_killfocus(null, null);
		}
	};

	_pComponent._on_click = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		if (this.visible && this._isEnable() && this.enableevent) {
			var clientXY = this._getClientXY(canvasX, canvasY);
			this.on_fire_onclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, this);
			this.on_click_basic_action(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY);
		}
	};

	_pComponent.on_click_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		return;
	};

	_pComponent._on_dblclick = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttonup || (pThis.onlbuttonup && !pThis.onlbuttonup.defaultprevented)) {
			if (this.visible && this._isEnable() && this.enableevent) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				this.on_fire_ondblclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, this);
				this.on_dblclick_basic_action(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY);
			}
		}
	};

	_pComponent.on_dblclick_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (nexacro._isMobile && nexacro._isMobile()) {
			if (elem instanceof nexacro.InputElement) {
				elem.setElementFocus(true);
			}
		}
		return;
	};

	_pComponent._focus_refer_comp = null;

	_pComponent._getFromComponent = function (from_comp) {
		var comp = from_comp;
		if (from_comp._is_subcontrol) {
			comp = this._getRootComponent(from_comp);
		}
		return comp;
	};

	_pComponent._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		nexacro._skipDragEventAfterMsgBox = false;

		var ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttondown || (pThis.onlbuttondown && !pThis.onlbuttondown.defaultprevented)) {
			this.on_lbuttondown_default_action(elem, this._focus_refer_comp, canvasX, canvasY);
			ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_touch_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, isTap) {
		nexacro._skipDragEventAfterMsgBox = false;

		var ret;
		if (isTap) {
			ret = this._on_bubble_touch_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true, isTap);
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttondown || (pThis.onlbuttondown && !pThis.onlbuttondown.defaultprevented)) {
			if (isTap) {
				this.on_lbuttondown_default_action(elem, this._focus_refer_comp, canvasX, canvasY);
			}
			ret = this._on_bubble_touch_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false, isTap);
		}
		return ret;
	};

	_pComponent._on_bubble_touch_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope, isTap) {
		if (!this._is_alive) {
			return;
		}

		var win = this._getWindow();

		if (event_bubbles === undefined) {
			var first_comp;

			if (!refer_comp) {
				first_comp = this;
				refer_comp = this._focus_refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._focus_refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				if (isTap) {
					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}

				var bubble;
				if (isTap) {
					if (this._is_track) {
						bubble = false;
					}
					if (this._is_repeat) {
						bubble = true;
					}
				}
				else {
					bubble = this.on_lbuttondown_basic_action(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope);
				}

				if (bubble) {
					return;
				}
				else if (bubble === false) {
					event_bubbles = bubble;
				}
			}

			if ((!this.onlbuttondown || (this.onlbuttondown && !this.onlbuttondown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_touch_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope, isTap);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					if (!isTap) {
						nexacro._setDragInfo(win, elem, win._curWindowX, win._curWindowY, null, null);
					}
					return this.parent._on_bubble_touch_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope, isTap);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && isTap) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onlbuttondown || (this.onlbuttondown && !this.onlbuttondown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_touch_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope, isTap);
			}
		}
	};

	_pComponent._on_bubble_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		var win = this._getWindow();

		if (event_bubbles === undefined) {
			var first_comp;

			if (!refer_comp) {
				first_comp = this;
				refer_comp = this._focus_refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._focus_refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}

				if (bubble_scope) {
					var bubble = this.on_lbuttondown_basic_action(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope);
					if (bubble) {
						return;
					}
				}
			}

			if ((!this.onlbuttondown || (this.onlbuttondown && !this.onlbuttondown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					nexacro._setDragInfo(win, elem, win._curWindowX, win._curWindowY, null, null);
					return this.parent._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onlbuttondown || (this.onlbuttondown && !this.onlbuttondown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_lbuttondown_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		var win = this._getWindow();
		if (refer_comp === this) {
			if (this._apply_pushed_pseudo) {
				this._stat_change("push", "pushed");
				this._is_pushed_area = true;
				this._is_push = true;
			}
		}

		if (this._is_track) {
			if (!nexacro._cur_repeat_info) {
				nexacro._setTrackInfo(win, this, win._curWindowX, win._curWindowY);
			}
			return false;
		}
		else {
			if (this.getOwnerFrame) {
				if (this instanceof nexacro.ChildFrame) {
					return false;
				}

				var ownerframe = this.getOwnerFrame();
				if (ownerframe && ownerframe.form) {
					var frameform = ownerframe.form;
					if (frameform && frameform._is_track) {
						if (!nexacro._cur_repeat_info) {
							nexacro._setTrackInfo(win, this, win._curWindowX, win._curWindowY);
						}
						return false;
					}
				}
			}
		}

		if (this._is_repeat) {
			nexacro._setRepeatInfo(this, win, refer_comp, win._curWindowX, win._curWindowY, canvasX, canvasY);
		}
	};

	_pComponent.on_lbuttondown_default_action = function (elem, refer_comp, canvasX, canvasY) {
		var win = this._getWindow();
		if (this.visible && this._isEnable() && refer_comp) {
			if (nexacro.OS == "iOS") {
				var cur_focus_paths = this._getRootWindow().getCurrentFocusPaths();
				var len = cur_focus_paths.length;
				var old_comp = cur_focus_paths[len - 1];

				if (old_comp) {
					if (!old_comp._input_element || old_comp._input_element && !old_comp._input_element._is_ios_composition) {
						refer_comp._on_focus(true, "lbuttondown");
					}
					else if (old_comp._input_element && old_comp._input_element._is_ios_composition) {
						var ver_arr = nexacro.OSVersion.split(".");
						var major_ver = ver_arr[0];
						if (major_ver >= 13 && !(old_comp instanceof nexacro.MaskEdit)) {
							old_comp._input_element._is_ios_composition_returned = true;
						}
						else {
							if (old_comp._input_element._input_handle && refer_comp != old_comp && old_comp instanceof nexacro.MaskEdit) {
								old_comp._input_element._input_handle.blur();

								refer_comp._on_focus(true, "lbuttondown");
							}
							else {
								old_comp._input_element._is_ios_composition_returned = true;
								old_comp._input_element._input_handle.blur();
							}
						}
					}
				}
			}
			else {
				refer_comp._on_focus(true, "lbuttondown");
			}
		}
		else {
			var comp = win._findComponentForEvent(elem, 0, 0);
			if (comp && comp[0]) {
				comp[0]._on_focus(true, "lbuttondown");
			}
		}
	};

	_pComponent._on_rbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var ret = this._on_bubble_rbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);
		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onrbuttondown || (pThis.onrbuttondown && !pThis.onrbuttondown.defaultprevented))) {
			this.on_rbuttondown_default_action(elem, this._focus_refer_comp, canvasX, canvasY);
			ret = this._on_bubble_rbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_rbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this._focus_refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._focus_refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onrbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onrbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onrbuttondown || (this.onrbuttondown && !this.onrbuttondown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_rbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_rbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onrbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onrbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onrbuttondown || (this.onrbuttondown && !this.onrbuttondown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_rbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_rbuttondown_default_action = function (elem, refer_comp, canvasX, canvasY) {
		var win = this._getWindow();
		if (this.visible && this._isEnable() && refer_comp) {
			if (nexacro.OS == "iOS") {
				var cur_focus_paths = this._getRootWindow().getCurrentFocusPaths();
				var len = cur_focus_paths.length;
				var old_comp = cur_focus_paths[len - 1];

				if (!old_comp._input_element || old_comp._input_element && !old_comp._input_element._is_ios_composition) {
					refer_comp._on_focus(true, "rbuttondown");
				}
				else if (old_comp._input_element && old_comp._input_element._is_ios_composition) {
					if (old_comp._input_element._input_handle && refer_comp != old_comp && old_comp instanceof nexacro.MaskEdit) {
						old_comp._input_element._input_handle.blur();

						refer_comp._on_focus(true, "rbuttondown");
					}
					else if (!(old_comp instanceof nexacro.MaskEdit)) {
						old_comp._input_element._input_handle.blur();
					}
				}
			}
			else {
				refer_comp._on_focus(true, "rbuttondown");
			}
		}
		else {
			var comp = win._findComponentForEvent(elem, 0, 0);
			if (comp && comp[0]) {
				comp[0]._on_focus(true, "rbuttondown");
			}
		}
	};

	_pComponent._lbuttonup_first_comp = null;
	_pComponent._lbuttonup_event_bubbles = undefined;

	_pComponent._on_lbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem) {
		var ret = this._on_bubble_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, true);
		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onlbuttonup || (pThis.onlbuttonup && !pThis.onlbuttonup.defaultprevented))) {
			this.on_lbuttonup_default_action();
			ret = this._on_bubble_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, false);
		}
		return ret;
	};

	_pComponent._on_touch_lbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem) {
		var ret;
		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onlbuttonup || (pThis.onlbuttonup && !pThis.onlbuttonup.defaultprevented))) {
			ret = this._on_bubble_touch_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, false);
		}
		return ret;
	};

	_pComponent._on_bubble_touch_lbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			this._lbuttonup_event_bubbles = undefined;
			if (!refer_comp) {
				this._lbuttonup_first_comp = this;
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (bubble_scope) {
				if (this.on_lbuttonup_basic_action()) {
					return;
				}
			}

			if ((!this.onlbuttonup || (this.onlbuttonup && !this.onlbuttonup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_touch_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, from_elem, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_touch_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, from_elem, bubble_scope);
				}
			}
		}
		else {
			this._lbuttonup_event_bubbles = event_bubbles;
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onlbuttonup || (this.onlbuttonup && !this.onlbuttonup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_touch_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, from_elem, bubble_scope);
			}
		}
	};

	_pComponent._on_bubble_lbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		this._is_drag = false;

		if (event_bubbles === undefined) {
			this._lbuttonup_event_bubbles = undefined;
			if (!refer_comp) {
				this._lbuttonup_first_comp = this;
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (bubble_scope) {
				this.on_lbuttonup_basic_action();
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onlbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, from_elem);
				}
				else {
					event_bubbles = this.on_fire_sys_onlbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, from_elem);
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onlbuttonup || (this.onlbuttonup && !this.onlbuttonup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, from_elem, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, from_elem, bubble_scope);
				}
			}
		}
		else {
			this._lbuttonup_event_bubbles = event_bubbles;
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onlbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, from_elem);
				}
				else {
					event_bubbles = this.on_fire_sys_onlbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, from_elem);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onlbuttonup || (this.onlbuttonup && !this.onlbuttonup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, from_elem, bubble_scope);
			}
		}
	};
	_pComponent.on_lbuttonup_basic_action = function () {
		if (this._apply_pushed_pseudo) {
			this._is_push = false;
			if (this._is_pushed_area) {
				if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
					this._stat_change("notpush", "normal");
				}
				else {
					this._stat_change("notpush", "mouseover");
				}
				this._is_pushed_area = false;
			}
		}
	};

	_pComponent.on_lbuttonup_default_action = function () {
	};


	_pComponent._on_rbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem) {
		var ret = this._on_bubble_rbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, true);
		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onrbuttonup || (pThis.onrbuttonup && !pThis.onrbuttonup.defaultprevented))) {
			this.on_rbuttonup_default_action();
			ret = this._on_bubble_rbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, false);
		}
		return ret;
	};

	_pComponent._on_bubble_rbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (bubble_scope) {
				if (this.on_rbuttonup_basic_action()) {
					return;
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onrbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, from_elem);
				}
				else {
					event_bubbles = this.on_fire_sys_onrbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, from_elem);
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			if ((!this.onrbuttonup || (this.onrbuttonup && !this.onrbuttonup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_rbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, from_elem, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_rbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, from_elem, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onrbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, from_elem);
				}
				else {
					event_bubbles = this.on_fire_sys_onrbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, from_elem);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onrbuttonup || (this.onrbuttonup && !this.onrbuttonup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_rbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, from_elem, bubble_scope);
			}
		}
	};

	_pComponent.on_rbuttonup_basic_action = function () {
		if (this._apply_pushed_pseudo) {
			this._is_push = false;
			if (this._is_pushed_area) {
				if (nexacro.isTouchInteraction) {
					this._stat_change("notpush", "normal");
				}
				else {
					this._stat_change("notpush", "mouseover");
				}
				this._is_pushed_area = false;
			}
		}
	};

	_pComponent.on_rbuttonup_default_action = function () {
	};


	_pComponent._on_mouseup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem) {
		var ret = this._on_bubble_mouseup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onmouseup || (pThis.onmouseup && !pThis.onmouseup.defaultprevented))) {
			this.on_mouseup_default_action();
			ret = this._on_bubble_mouseup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, false);
		}
		return ret;
	};

	_pComponent._on_bubble_mouseup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmouseup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, from_elem);
				}
				else {
					event_bubbles = this.on_fire_sys_onmouseup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, from_elem);
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onmouseup || (this.onmouseup && !this.onmouseup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_mouseup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, from_elem, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_mouseup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, from_elem, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmouseup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, from_elem);
				}
				else {
					event_bubbles = this.on_fire_sys_onmouseup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, from_elem);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onmouseup || (this.onmouseup && !this.onmouseup.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_mouseup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, false, fire_comp, refer_comp, from_elem, bubble_scope);
			}
		}
	};

	_pComponent.on_mouseup_default_action = function () {
	};

	_pComponent._on_mousedown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var ret = this._on_bubble_mousedown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.onmousedown || (pThis.onmousedown && !pThis.onmousedown.defaultprevented)) {
			this.on_mousedown_default_action();
			ret = this._on_bubble_mousedown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_mousedown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmousedown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onmousedown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onmousedown || (this.onmousedown && !this.onmousedown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_mousedown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_mousedown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmousedown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onmousedown(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onmousedown || (this.onmousedown && !this.onmousedown.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_mousedown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_mousedown_default_action = function () {
	};


	_pComponent._on_mousemove = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (nexacro._current_popups.length > 0) {
			var win = this._getWindow();
			var elem_comp = win.findComponent(elem, 0, 0);
			if (elem_comp && elem_comp[0]) {
				var cur_popup = nexacro._current_popups[0];
				var root_comp1 = this._getRootWindowComponent(this);
				var root_comp2 = cur_popup.parent;
				if (cur_popup._track_capture && (!cur_popup._contains(elem_comp[0]) && root_comp1 != root_comp2)) {
					return;
				}
			}
		}

		if (!this._is_created) {
			return;
		}

		var ret = this._on_bubble_mousemove(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.onmousemove || (pThis.onmousemove && !pThis.onmousemove.defaultprevented)) {
			this.on_mousemove_default_action();
			ret = this._on_bubble_mousemove(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_mousemove = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble = this._is_subcontrol ? true : false;
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					if (this.on_mousemove_basic_action(is_subcontrol_bubble)) {
						return;
					}
				}

				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmousemove(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onmousemove(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			if (this.parent) {
				this.parent._overedobj = this;
			}

			if ((!this.onmousemove || (this.onmousemove && !this.onmousemove.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_mousemove(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_mousemove(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					this.on_mousemove_basic_action();
				}

				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmousemove(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onmousemove(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}

			if (this.parent) {
				this.parent._overedobj = this;
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onmousemove || (this.onmousemove && !this.onmousemove.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_mousemove(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};
	_pComponent.on_mousemove_basic_action = function (is_subcontrol_bubble) {
		if (this._apply_pushed_pseudo && this._is_push) {
			this._stat_change("push", "pushed");
			this._is_pushed_area = true;
		}
		else if (!is_subcontrol_bubble || !this._isSelected()) {
			if (!nexacro.isTouchInteraction) {
				this._stat_change("", "mouseover");
				if (this._dragging_cursor) {
					this._dragging_cursor = null;
					var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
					this._updateCursor(cursor);
				}
			}
		}
	};

	_pComponent.on_mousemove_default_action = function () {
	};

	_pComponent._mouseenter_event_bubbles = undefined;
	_pComponent._on_mouseenter = function (elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (nexacro._current_popups.length > 0) {
			var win = this._getWindow();
			var elem_comp = win.findComponent(elem, 0, 0);
			if (elem_comp && elem_comp[0]) {
				var cur_popup = nexacro._current_popups[0];
				var root_comp1 = this._getRootWindowComponent(this);
				var root_comp2 = cur_popup.parent;
				if (cur_popup._track_capture && (!cur_popup._contains(elem_comp[0]) && root_comp1 != root_comp2)) {
					return;
				}
			}
		}

		if (!this._is_created) {
			return;
		}

		var ret = this._on_bubble_mouseenter(elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.onmouseenter || (pThis.onmouseenter && !pThis.onmouseenter.defaultprevented)) {
			this.on_mouseenter_default_action();
			ret = this._on_bubble_mouseenter(elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_mouseenter = function (elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var first_comp;
			var is_subcontrol_bubble = this._is_subcontrol ? true : false;

			if (!refer_comp) {
				first_comp = this;
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					if (this.on_mouseenter_basic_action(is_subcontrol_bubble)) {
						return;
					}
				}

				if (is_subcontrol_bubble) {
					if (from_comp && this._contains(from_comp)) {
						return true;
					}
					if (first_comp == this) {
						var clientXY = this._getClientXY(canvasX, canvasY);
						if (bubble_scope) {
							event_bubbles = this.on_fire_user_onmouseenter(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
						}
						else {
							event_bubbles = this.on_fire_sys_onmouseenter(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
						}
						if (event_bubbles === false) {
							event_bubbles = undefined;
						}
					}
				}
				else {
					from_comp = this._getRootComponent(from_comp);
					if (from_comp && this._contains(from_comp)) {
						return true;
					}

					var clientXY = this._getClientXY(canvasX, canvasY);

					if (bubble_scope) {
						event_bubbles = this.on_fire_user_onmouseenter(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_onmouseenter(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
			}
			if ((!this.onmouseenter || (this.onmouseenter && !this.onmouseenter.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_mouseenter(elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_mouseenter(elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onmouseenter(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onmouseenter(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onmouseenter || (this.onmouseenter && !this.onmouseenter.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_mouseenter(elem, from_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, false, screenX, screenY, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_mouseenter_basic_action = function (is_subcontrol_bubble) {
		if (this._apply_pushed_pseudo && this._is_push) {
			this._stat_change("push", "pushed");
			this._is_pushed_area = true;
		}
		else if (!is_subcontrol_bubble || !this._isSelected()) {
			if (!nexacro.isTouchInteraction) {
				this._stat_change("", "mouseover");
				if (this._dragging_cursor) {
					this._dragging_cursor = null;
					var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
					this._updateCursor(cursor);
				}
			}
		}
	};

	_pComponent.on_mouseenter_default_action = function () {
	};

	_pComponent._on_mouseleave = function (elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (nexacro.Browser == "Runtime") {
			if (to_comp && this == to_comp && this.parent && this.parent instanceof nexacro.Radio) {
				return;
			}
		}

		if (nexacro._current_popups.length > 0) {
			var win = this._getWindow();
			var elem_comp = win.findComponent(elem, 0, 0);
			if (elem_comp && elem_comp[0]) {
				var cur_popup = nexacro._current_popups[0];
				var root_comp1 = this._getRootWindowComponent(this);
				var root_comp2 = cur_popup.parent;
				if (cur_popup._track_capture && (!cur_popup._contains(elem_comp[0]) && root_comp1 != root_comp2)) {
					return;
				}
			}
		}

		var ret = this._on_bubble_mouseleave(elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.onmouseleave || (pThis.onmouseleave && !pThis.onmouseleave.defaultprevented)) {
			this.on_mouseleave_default_action(to_comp);
			ret = this._on_bubble_mouseleave(elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_mouseleave = function (elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (nexacro.Browser == "Runtime") {
			if (to_comp && this == to_comp && this.parent && this.parent instanceof nexacro.Radio) {
				return;
			}
		}

		if (event_bubbles === undefined) {
			var first_comp;
			var is_subcontrol_bubble = this._is_subcontrol ? true : false;

			if (!refer_comp) {
				first_comp = this;
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					if (this.on_mouseleave_basic_action(is_subcontrol_bubble)) {
						return;
					}
				}

				if (is_subcontrol_bubble) {
					if (to_comp && this._contains(to_comp)) {
						return true;
					}
					if (first_comp == this) {
						var clientXY = this._getClientXY(canvasX, canvasY);
						if (bubble_scope) {
							event_bubbles = this.on_fire_user_onmouseleave(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
						}
						else {
							event_bubbles = this.on_fire_sys_onmouseleave(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
						}
						if (event_bubbles === false) {
							event_bubbles = undefined;
						}
					}
				}
				else {
					to_comp = this._getRootComponent(to_comp);
					if (to_comp && this._contains(to_comp)) {
						return true;
					}
					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_onmouseleave(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_onmouseleave(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
			}
			if ((!this.onmouseleave || (this.onmouseleave && !this.onmouseleave.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_mouseleave(elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_mouseleave(elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					this.on_mouseleave_basic_action(is_subcontrol_bubble);
					event_bubbles = this.on_fire_user_onmouseleave(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onmouseleave(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onmouseleave || (this.onmouseleave && !this.onmouseleave.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_mouseleave(elem, to_comp, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent._isSelected = function () {
		return this._selected;
	};

	_pComponent.on_mouseleave_basic_action = function (is_subcontrol_bubble) {
		if (is_subcontrol_bubble) {
			if (this._apply_pushed_pseudo && this._is_push) {
				this._stat_change("notpush", "normal");
				this._is_pushed_area = false;
			}
			else if (!this._isSelected()) {
				var tmp_comp = this;
				var alive = true;

				while (tmp_comp) {
					if (tmp_comp._is_alive == false) {
						alive = false;
						break;
					}
					if (tmp_comp._is_popup_frame) {
						break;
					}
					tmp_comp = tmp_comp.parent;
				}

				if (alive) {
					this._stat_change("", "normal");
				}
			}
		}
		else {
			if (this._apply_pushed_pseudo && this._is_push) {
				this._stat_change("notpush", "normal");
				this._is_pushed_area = false;
			}
			else if (this._isSelected()) {
				this._stat_change("select", "selected");
			}
			else {
				if (this._is_form) {
					this._stat_change("", "normal");
				}
				else {
					if (this._find_lastFocused(this) == this) {
						this._stat_change("", "normal");
					}
					else {
						this._stat_change("notfocus", "normal");
					}
				}
			}
		}
	};

	_pComponent.on_mouseleave_default_action = function (to_comp) {
	};

	_pComponent._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		return this._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll);
	};

	_pComponent._on_bubble_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				event_bubbles = this.on_fire_user_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);

				var pThis = this._getFromComponent(this);

				if (event_bubbles !== true) {
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.defaultprevented)) {
						var ret = this.on_fire_sys_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);

						if (ret) {
							return false;
						}

						if (this.vscrollbar && this.vscrollbar.enable && this.vscrollbar.visible) {
							var vscrollbar = this.vscrollbar;
							var old_vpos = vscrollbar._pos;
							this._setVScrollDefaultAction(vscrollbar, wheelDeltaY);
							var new_vpos = vscrollbar._pos;
							if (old_vpos != new_vpos) {
								return false;
							}
						}

						if (nexacro.isTouchInteraction && nexacro.SupportTouch) {
							if (this.hscrollbar && this.hscrollbar.enable && this.hscrollbar.visible) {
								var hscrollbar = this.hscrollbar;
								var old_hpos = hscrollbar._pos;
								this._setHScrollDefaultAction(hscrollbar, wheelDeltaX);
								var new_hpos = hscrollbar._pos;
								if (old_hpos != new_hpos) {
									return false;
								}
							}
						}
					}

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}

					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.stoppropagation)) {
						if (this.parent && !this.parent._is_application) {
							var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

							canvasX = canvas[0];
							canvasY = canvas[1];

							if (this._is_subcontrol) {
								return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bScroll);
							}
							else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
								return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bScroll);
							}
						}
					}
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				event_bubbles = this.on_fire_user_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], fire_comp, refer_comp);

				var pThis = this._getFromComponent(this);

				if (event_bubbles !== true) {
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.defaultprevented)) {
						var ret = this.on_fire_sys_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], fire_comp, refer_comp);

						if (ret) {
							return false;
						}

						if (this.vscrollbar && this.vscrollbar.enable && this.vscrollbar.visible) {
							var vscrollbar = this.vscrollbar;
							var old_vpos = vscrollbar._pos;
							this._setVScrollDefaultAction(vscrollbar, wheelDeltaY);
							var new_vpos = vscrollbar._pos;
							if (old_vpos != new_vpos) {
								return false;
							}
						}

						if (nexacro.OS == "Mac OS") {
							if (this.hscrollbar && this.hscrollbar.enable) {
								var hscrollbar = this.hscrollbar;
								var old_hpos = hscrollbar._pos;
								this._setHScrollDefaultAction(hscrollbar, wheelDeltaX);
								var new_hpos = hscrollbar._pos;
								if (old_hpos != new_hpos) {
									return false;
								}
							}
						}
					}
					if (this._is_popup_frame) {
						return;
					}
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.stoppropagation)) {
						if (this.parent && !this.parent._is_application) {
							var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

							canvasX = canvas[0];
							canvasY = canvas[1];

							return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bScroll);
						}
					}
				}
			}
		}
	};

	_pComponent._setVScrollDefaultAction = function (vscrollbar, wheelDelta) {
		vscrollbar._setPos(vscrollbar.pos - wheelDelta, "mousewheel");
	};

	_pComponent._setHScrollDefaultAction = function (hscrollbar, wheelDelta) {
		hscrollbar._setPos(hscrollbar.pos - wheelDelta, "mousewheel");
	};

	_pComponent.on_mousewheel_default_action = function () {
	};



	_pComponent._init_drag_info = function () {
		nexacro._cur_drag_info = null;
	};
	_pComponent._on_drag = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (nexacro._skipDragEventAfterMsgBox) {
			this._init_drag_info();
			return false;
		}

		var ret = this._on_bubble_drag(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
		var pThis = this._getFromComponent(this);
		if (pThis && (pThis.ondrag && pThis.ondrag.defaultprevented)) {
			this._init_drag_info();
		}

		return ret;
	};

	_pComponent._on_bubble_drag = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._is_drag = true;

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			var pThis = this._getFromComponent(this);

			if (this._is_subcontrol) {
				is_subcontrol_bubble = true;
			}
			else {
				if (this.visible && this._isEnable()) {
					is_subcontrol_bubble = false;
					var clientXY = this._getClientXY(canvasX, canvasY);

					event_bubbles = this.on_fire_user_ondrag(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, refer_comp);
					if (!event_bubbles || event_bubbles[0] !== true) {
						if (!this.ondrag || (pThis.ondrag && !pThis.ondrag.defaultprevented)) {
							this.on_fire_sys_ondrag(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, refer_comp);
						}
					}
				}
			}

			if ((!event_bubbles || event_bubbles[0] !== true)) {
				if ((!pThis.ondrag || (pThis.ondrag && !pThis.ondrag.stoppropagation)) && this.parent && !this.parent._is_application) {
					var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

					canvasX = canvas[0];
					canvasY = canvas[1];

					if (is_subcontrol_bubble) {
						return this.parent._on_bubble_drag(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, this, refer_comp);
					}
					else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
						return this.parent._on_bubble_drag(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp);
					}
				}
			}
			return event_bubbles;
		}
		else {
			if ((!event_bubbles || event_bubbles[0] !== true) && this.parent && !this.parent._is_application) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (this.visible && this._isEnable()) {
					event_bubbles = this.on_fire_user_ondrag(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, this);
				}
				if (!event_bubbles || event_bubbles[0] !== true) {
					var pThis = this._getFromComponent(this);

					if (this.visible && this._isEnable()) {
						if (!pThis.ondrag || (pThis.ondrag && !pThis.ondrag.defaultprevented)) {
							this.on_fire_sys_ondrag(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, this);
						}
					}

					if (this._is_popup_frame) {
						return;
					}
					if ((!pThis.ondrag || (pThis.ondrag && !pThis.ondrag.stoppropagation)) && this.parent && !this.parent._is_application) {
						var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

						canvasX = canvas[0];
						canvasY = canvas[1];

						return this.parent._on_bubble_drag(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp);
					}
				}
			}
			return event_bubbles;
		}
	};

	_pComponent.on_drag_default_action = function () {
	};

	_pComponent._on_drop = function (elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var src_input_element = src_comp ? src_comp._input_element : null;
		if (src_input_element && src_input_element.enable) {
			var is_selected = src_input_element._parent_elem.linkedcontrol._edit_base_api._is_selected();
			if (src_refer_comp == this && (!is_selected || dragdata == null || dragdata == undefined || dragdata == "")) {
				return;
			}
		}

		var ret = this._on_bubble_drop(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return;
		}

		var pThis = this._getFromComponent(this);
		if (!pThis.ondrop || (pThis.ondrop && !pThis.ondrop.defaultprevented)) {
			this.on_drop_default_action();
			ret = this._on_bubble_drop(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_drop = function (elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}
		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				this.on_drop_basic_action();
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondrop(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondrop(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
				}
			}

			if ((!this.ondrop || (this.ondrop && !this.ondrop.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					var root_comp = this._getRootComponent(this);
					return this.parent._on_bubble_drop(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, root_comp, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_drop(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondrop(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondrop(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.ondrop || (this.ondrop && !this.ondrop.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_drop(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_drop_basic_action = function () {
		if (this._dragging_cursor) {
			this._dragging_cursor = null;
			var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
			this._updateCursor(cursor);
		}
	};
	_pComponent.on_drop_default_action = function () {
	};

	_pComponent._on_dragmove = function (elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, xdeltavalue, ydeltavalue) {
		var src_input_element = src_comp ? src_comp._input_element : null;
		if (src_input_element && src_input_element.enable) {
			var is_selected = src_input_element._parent_elem.linkedcontrol._edit_base_api._is_selected();
			if (!is_selected || dragdata == null || dragdata == undefined || dragdata == "") {
				return;
			}
		}

		var ret = this._on_bubble_dragmove(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);
		var pThis = this._getFromComponent(this);
		if (!pThis.ondragmove || (pThis.ondragmove && !pThis.ondragmove.defaultprevented)) {
			this.on_dragmove_default_action();
			ret = this._on_bubble_dragmove(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false, xdeltavalue, ydeltavalue);
		}
		else if (pThis.ondragmove && pThis.ondragmove.defaultprevented) {
			this._init_drag_info();
		}
		return ret;
	};

	_pComponent._on_bubble_dragmove = function (elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope, xdeltavalue, ydeltavalue) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this._is_subcontrol) {
				is_subcontrol_bubble = true;
				this.on_dragmove_basic_action();
			}
			else {
				is_subcontrol_bubble = false;
				if (this.visible && this._isEnable()) {
					this.on_dragmove_basic_action();
					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_ondragmove(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_ondragmove(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp, xdeltavalue, ydeltavalue);
					}
				}
			}

			if ((!this.ondragmove || (this.ondragmove && !this.ondragmove.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];



				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_dragmove(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope, xdeltavalue, ydeltavalue);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_dragmove(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope, xdeltavalue, ydeltavalue);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondragmove(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondragmove(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp, xdeltavalue, ydeltavalue);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.ondragmove || (this.ondragmove && !this.ondragmove.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_dragmove(elem, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope, xdeltavalue, ydeltavalue);
			}
		}
	};

	_pComponent.on_dragmove_basic_action = function () {
		var dragInfo = nexacro._cur_drag_info;
		var win = this._getWindow();
		if (dragInfo && dragInfo.targetwin == win) {
			var target = dragInfo.target;
			if (target && target != this) {
				var cursor = target.on_find_CurrentStyle_cursor(target._pseudo);
				this._updateCursor(cursor);
				this._dragging_cursor = cursor;
			}
		}
	};

	_pComponent.on_dragmove_default_action = function () {
	};



	_pComponent._on_dragenter = function (elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var src_input_element = src_comp ? src_comp._input_element : null;
		if (src_input_element && src_input_element.enable) {
			var is_selected = src_input_element._parent_elem.linkedcontrol._edit_base_api._is_selected();
			if (!is_selected || dragdata == null || dragdata == undefined || dragdata == "") {
				return;
			}
		}

		var ret = this._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);
		var pThis = this._getFromComponent(this);
		if (!pThis.ondragenter || (pThis.ondragenter && !pThis.ondragenter.defaultprevented)) {
			this.on_dragenter_default_action();
			ret = this._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		else if (pThis.ondragenter && pThis.ondragenter.defaultprevented) {
			this._init_drag_info();
		}
		return ret;
	};

	_pComponent._on_bubble_dragenter = function (elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				this._dragenter_first_comp = this;
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this._is_subcontrol) {
				is_subcontrol_bubble = true;
				if (from_comp && this._contains(from_comp)) {
					return;
				}
				if (from_comp == this) {
					this.on_dragenter_basic_action();
				}
			}
			else {
				is_subcontrol_bubble = false;
				from_comp = this._getRootComponent(from_comp);
				if (from_comp && this._contains(from_comp)) {
					return;
				}

				if (this.visible && this._isEnable()) {
					this.on_dragenter_basic_action();

					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
			}
			if ((!this.ondragenter || (this.ondragenter && !this.ondragenter.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}

				this._stat_change("", "mouseover");
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.ondragenter || (this.ondragenter && !this.ondragenter.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_dragenter_basic_action = function () {
		if (this._apply_pushed_pseudo && this._is_push) {
			this._stat_change("push", "pushed");
			this._is_pushed_area = true;
		}
		else {
			this._stat_change("", "mouseover");
		}
	};

	_pComponent.on_dragenter_default_action = function (first) {
	};


	_pComponent._on_dragleave = function (elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var src_input_element = src_comp ? src_comp._input_element : null;
		if (src_input_element && src_input_element.enable) {
			var is_selected = src_input_element._parent_elem.linkedcontrol._edit_base_api._is_selected();
			if (!is_selected || dragdata == null || dragdata == undefined || dragdata == "") {
				return;
			}
		}

		var ret = this._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);
		var pThis = this._getFromComponent(this);
		if (!pThis.ondragleave || (pThis.ondragleave && !pThis.ondragleave.defaultprevented)) {
			this.on_dragleave_default_action();
			ret = this._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_dragleave = function (elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this._is_subcontrol) {
				is_subcontrol_bubble = true;
				if (to_comp && this._contains(to_comp)) {
					return;
				}
				if (fire_comp == this) {
					this.on_dragleave_basic_action();
				}
			}
			else {
				is_subcontrol_bubble = false;
				to_comp = this._getRootComponent(to_comp);
				if (to_comp && this._contains(to_comp)) {
					return;
				}

				if (this.visible && this._isEnable()) {
					this.on_dragleave_basic_action();

					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
			}

			if ((!this.ondragleave || (this.ondragleave && !this.ondragleave.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else {
					return this.parent._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				if (!to_comp || !this._contains(to_comp)) {
					this._stat_change("", "normal");
				}
			}
			if ((!this.ondragleave || (this.ondragleave && !this.ondragleave.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_dragleave_basic_action = function () {
		if (this._apply_pushed_pseudo && this._is_push) {
			this._stat_change("notpush", "normal");
			this._is_pushed_area = false;
		}
		else {
			this._stat_change("", "normal");
		}
	};

	_pComponent.on_dragleave_default_action = function () {
	};



	_pComponent._on_keydown = function (elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp) {
		var ret = this._on_bubble_keydown(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);

		if (!pThis.onkeydown || (pThis.onkeydown && !pThis.onkeydown.defaultprevented)) {
			this.on_keydown_default_action();
			ret = this._on_bubble_keydown(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_keydown = function (elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				if (bubble_scope && !this._is_hotkey) {
					event_bubbles = this.on_fire_user_onkeydown(keycode, alt_key, ctrl_key, shift_key, meta_key, this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onkeydown(keycode, alt_key, ctrl_key, shift_key, meta_key, this, refer_comp);
					this._is_hotkey = false;
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onkeydown || (this.onkeydown && !this.onkeydown.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_keydown(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, null, refer_comp, bubble_scope);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					return this.parent._on_bubble_keydown(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onkeydown(keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onkeydown(keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onkeydown || (this.onkeydown && !this.onkeydown.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_keydown(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};
	_pComponent.on_keydown_default_action = function () {
	};



	_pComponent._on_keyup = function (elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp) {
		if (keycode == nexacro.Event.KEY_TAB) {
			var _win = this._getWindow();
			var comp1 = _win.findComponent(elem);
			if (comp1._is_subcontrol) {
				comp1 = comp1._getRootComponent(comp1);
			}
			var comp2 = _win.findComponent(_win._keydown_element);
			if (comp2 && comp2._is_subcontrol) {
				comp2 = comp2._getRootComponent(comp2);
			}
			if (!this.acceptstab && comp1 != comp2) {
				return;
			}
		}

		var ret = this._on_bubble_keyup(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp, true);
		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onkeyup || (pThis.onkeyup && !pThis.onkeyup.defaultprevented))) {
			this.on_keyup_default_action();
			ret = this._on_bubble_keyup(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_keyup = function (elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onkeyup(keycode, alt_key, ctrl_key, shift_key, meta_key, this, refer_comp);
				}
				else if (!this._is_popup_frame || (this._is_popup_frame && !this._is_window)) {
					event_bubbles = this.on_fire_sys_onkeyup(keycode, alt_key, ctrl_key, shift_key, meta_key, this, refer_comp);
				}

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onkeyup || (this.onkeyup && !this.onkeyup.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_keyup(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, null, refer_comp, bubble_scope);
				}
				else {
					return this.parent._on_bubble_keyup(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onkeyup(keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onkeyup(keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
				}
			}
			if (this._is_popup_frame) {
				return;
			}
			if ((!this.onkeyup || (this.onkeyup && !this.onkeyup.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_keyup(elem, keycode, alt_key, ctrl_key, shift_key, meta_key, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pComponent.on_keyup_default_action = function () {
	};


	_pComponent._on_keypress = function (elem, keycode, alt_key, ctrl_key, shift_key) {
	};

	_pComponent._on_contextmenu = function (elem, event_bubbles, from_comp, from_refer_comp) {
		var is_enable = this._isEnable();
		var ret = is_enable;

		if (!this._is_alive) {
			return ret;
		}

		if (is_enable) {
			if (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") {
				var win = this._getWindow();
				var comp = win.findComponent(win._last_focused_elem, 0, 0);
				if (comp[0] && (comp[0]._edit_base_api || comp[0]._input_element)) {
					if (elem instanceof nexacro.InputElement && this !== comp[0]) {
						var last_elem = comp[0]._input_element;
						var pos = last_elem.getElementSelectionRange();
						var edit_base_api = comp[0]._edit_base_api;
						edit_base_api.setElementCaretPos(pos[0], pos[1], last_elem);
					}
				}
			}

			var root_comp = this._getFromComponent(this);
			var listener = nexacro.Browser == "Safari" ? root_comp.onrbuttondown : root_comp.onrbuttonup;
			if (listener && listener.defaultprevented) {
				ret = false;
			}
			else {
				ret = this._on_bubble_contextmenu(event_bubbles, from_comp, from_refer_comp, true);
				listener = root_comp.oncontextmenu;
				if (!listener || (listener && !listener.defaultprevented)) {
					ret = this._on_bubble_contextmenu(event_bubbles, from_comp, from_refer_comp, false);
				}
				else {
					ret = false;
				}
			}
		}
		return ret;
	};

	_pComponent._on_bubble_contextmenu = function (event_bubbles, from_comp, from_refer_comp, bubble_scope) {
		var ret = true;

		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!from_refer_comp) {
				from_refer_comp = this;
				if (!from_refer_comp._is_reference_control) {
					from_refer_comp = this._getReferenceComponent(from_refer_comp);
				}
			}

			if (bubble_scope) {
				this._on_contextmenu_basic_action();
			}
			else {
				ret = this._on_contextmenu_default_action();
			}

			if (this.visible && this._isEnable()) {
				var fire_event_func = bubble_scope ? this.on_fire_user_oncontextmenu : this.on_fire_sys_oncontextmenu;
				event_bubbles = fire_event_func.call(this, this, from_refer_comp);
			}
			if ((!this.oncontextmenu || (this.oncontextmenu && !this.oncontextmenu.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_contextmenu(event_bubbles, null, from_refer_comp, bubble_scope);
				}
				else {
					return this.parent._on_bubble_contextmenu(false, null, from_refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var fire_event_func = bubble_scope ? this.on_fire_user_oncontextmenu : this.on_fire_sys_oncontextmenu;
				event_bubbles = fire_event_func.call(this, this, from_refer_comp);
			}
			if ((!this.oncontextmenu || (this.oncontextmenu && !this.oncontextmenu.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_contextmenu(false, from_comp, from_refer_comp, bubble_scope);
			}
		}
		return ret;
	};

	_pComponent._on_contextmenu_basic_action = function () {
		return;
	};

	_pComponent._on_contextmenu_default_action = function () {
		var comp = this;
		var type = comp._type;
		var use_context_menu = application ? application.usecontextmenu : "all";
		var comp_use_context_menu = (comp.usecontextmenu !== undefined) ? comp.usecontextmenu : true;

		if (use_context_menu == "all") {
			if (comp instanceof nexacro.Form || comp instanceof nexacro.Edit || comp instanceof nexacro.MaskEdit || comp instanceof nexacro.TextArea) {
				if (comp_use_context_menu) {
					return true;
				}
			}

			return false;
		}
		else if (use_context_menu == "form") {
			if (comp instanceof nexacro.Form) {
				return true;
			}

			return false;
		}
		else if (use_context_menu == "edit") {
			if (comp instanceof nexacro.Edit || comp instanceof nexacro.MaskEdit || comp instanceof nexacro.TextArea) {
				if (comp_use_context_menu) {
					return true;
				}
			}

			return false;
		}
		else {
			return false;
		}
	};

	_pComponent._on_touchstart = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		this._on_bubble_touchstart(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.ontouchstart;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_touchstart(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, false);
		}
	};

	_pComponent._on_bubble_touchstart = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_touchstart_basic_action(touch_manager, changedtouchinfos, refer_comp);
			}
			else {
				this.on_touchstart_default_action();
			}

			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchstart : this.on_fire_sys_ontouchstart;
				event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			var listener = this.ontouchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));

				if (this._is_subcontrol) {
					return this.parent._on_bubble_touchstart(touch_manager, touchinfos, changedtouchinfos, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					var select_mode = "select";

					if (this.selectscrollmode) {
						if (this.selectscrollmode == "default") {
							select_mode = (nexacro.isTouchInteraction) ? "scroll" : "select";
						}
						else {
							select_mode = this.selectscrollmode;
						}
					}

					if (touchinfos.length == 1 && select_mode == "select") {
						var win = touch_manager._start_win;
						var elem = touch_manager._start_elem;

						nexacro._setDragInfo(win, elem, win._curWindowX, win._curWindowY, null, null);
					}
					return this.parent._on_bubble_touchstart(touch_manager, touchinfos, changedtouchinfos, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				touch_manager.updateTouchInputInfosClientXY(touchinfos, this);

				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchstart : this.on_fire_sys_ontouchstart;
				event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, fire_comp, refer_comp);
			}

			var listener = this.ontouchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				return this.parent._on_bubble_touchstart(touch_manager, touchinfos, changedtouchinfos, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_touchstart_basic_action = function (touch_manager, changedtouchinfos, refer_comp) {
		var firsttouchinput = touch_manager.getFirstTouchInputInfo(changedtouchinfos);
		if (firsttouchinput) {
			if (this._apply_pushed_pseudo) {
				this._stat_change("push", "pushed");
				this._is_pushed_area = true;
				this._is_push = true;
			}

			var elem = firsttouchinput._elem;
			if (nexacro._current_popups.length > 0) {
				nexacro._checkClosePopupComponent(this, true);
			}

			var win = this._getWindow();
			if (this._is_track) {
				nexacro._setTrackInfo(win, this, win._curWindowX, win._curWindowY);
				return false;
			}

			if (this._is_repeat) {
				nexacro._setRepeatInfo(this, win, refer_comp, win._curWindowX, win._curWindowY, changedtouchinfos[0].canvasX, changedtouchinfos[0].canvasY);
			}
		}
	};

	_pComponent.on_touchstart_default_action = function () {
	};

	_pComponent._on_touchmove = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		this._on_bubble_touchmove(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.ontouchmove;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_touchmove(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, false);
		}
	};

	_pComponent._on_bubble_touchmove = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_touchmove_basic_action();
			}
			else {
				this.on_touchmove_default_action();
			}

			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchmove : this.on_fire_sys_ontouchmove;
				event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			var listener = this.ontouchmove;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				if (this._is_subcontrol) {
					return this.parent._on_bubble_touchmove(touch_manager, touchinfos, changedtouchinfos, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_touchmove(touch_manager, touchinfos, changedtouchinfos, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				touch_manager.updateTouchInputInfosClientXY(touchinfos, this);

				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchmove : this.on_fire_sys_ontouchmove;
				event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);
			}

			var listener = this.ontouchmove;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				return this.parent._on_bubble_touchmove(touch_manager, touchinfos, changedtouchinfos, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_touchmove_basic_action = function () {
	};
	_pComponent.on_touchmove_default_action = function () {
	};

	_pComponent._on_touchend = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		this._on_bubble_touchend(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		if (root_comp) {
			var listener = root_comp.ontouchend;
			if (!listener || (listener && !listener.defaultprevented)) {
				this._on_bubble_touchend(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, false);
			}
			if (listener && listener.defaultprevented) {
				return true;
			}
		}
	};

	_pComponent._on_bubble_touchend = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_touchend_basic_action(touch_manager, changedtouchinfos);
			}
			else {
				this.on_touchend_default_action();
			}

			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchend : this.on_fire_sys_ontouchend;
				event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			var listener = this.ontouchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				if (this._is_subcontrol) {
					return this.parent._on_bubble_touchend(touch_manager, touchinfos, changedtouchinfos, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_touchend(touch_manager, touchinfos, changedtouchinfos, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				touch_manager.updateTouchInputInfosClientXY(touchinfos, this);

				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchend : this.on_fire_sys_ontouchend;
				event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);
			}

			var listener = this.ontouchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				return this.parent._on_bubble_touchend(touch_manager, touchinfos, changedtouchinfos, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_touchend_basic_action = function (touch_manager, changedtouchinfos) {
		var firsttouchinput = touch_manager.getFirstTouchInputInfo(changedtouchinfos);
		if (firsttouchinput) {
			if (this._apply_pushed_pseudo) {
				this._is_push = false;
				if (this._is_pushed_area) {
					if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
						this._stat_change("notpush", "normal");
					}
					else {
						this._stat_change("notpush", "mouseover");
					}
					this._is_pushed_area = false;
				}
			}
		}
	};

	_pComponent.on_touchend_default_action = function () {
	};

	_pComponent._on_touchcancel = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		this._on_bubble_touchcancel(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		if (root_comp) {
			var listener = root_comp.ontouchcancel;
			if (!listener || (listener && !listener.defaultprevented)) {
				this._on_bubble_touchcancel(touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, false);
			}
			if (listener && listener.defaultprevented) {
				return true;
			}
		}
	};

	_pComponent._on_bubble_touchcancel = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_touchcancel_basic_action(touch_manager, changedtouchinfos);
			}
			else {
				this.on_touchcancel_default_action();
			}

			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchcancel : this.on_fire_sys_ontouchcancel;
				if (fire_event_func) {
					event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);
				}

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			var listener = this.ontouchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				if (this._is_subcontrol) {
					return this.parent._on_bubble_touchcancel(touch_manager, touchinfos, changedtouchinfos, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_touchcancel(touch_manager, touchinfos, changedtouchinfos, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && ((is_userbubble && this.enableevent) || !is_userbubble)) {
				touch_manager.updateTouchInputInfosClientXY(touchinfos, this);

				var fire_event_func = is_userbubble ? this.on_fire_user_ontouchcancel : this.on_fire_sys_ontouchcancel;
				if (fire_event_func) {
					event_bubbles = fire_event_func.call(this, touchinfos, changedtouchinfos, this, refer_comp);
				}
			}

			var listener = this.ontouchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				touch_manager.updateTouchInputInfosCanvasXY(touchinfos, (this._adjust_left - this._scroll_left || 0), (this._adjust_top - this._scroll_top || 0));
				return this.parent._on_bubble_touchcancel(touch_manager, touchinfos, changedtouchinfos, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_touchcancel_basic_action = function (touch_manager, changedtouchinfos) {
		var firsttouchinput = touch_manager.getFirstTouchInputInfo(changedtouchinfos);
		if (nexacro.Browser != "Runtime" || (nexacro.Browser == "Runtime" && firsttouchinput)) {
			if (this._apply_pushed_pseudo) {
				this._is_push = false;
				if (this._is_pushed_area) {
					if (nexacro.isTouchInteraction) {
						this._stat_change("notpush", "normal");
					}
					else {
						this._stat_change("notpush", "mouseover");
					}
					this._is_pushed_area = false;
				}
			}
		}
	};

	_pComponent.on_touchcancel_default_action = function () {
	};

	_pComponent._on_tap = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._on_bubble_tap(elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);


		var root_comp = this._getFromComponent(this);
		var listener = root_comp ? root_comp.ontap : null;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_tap(elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
	};

	_pComponent._on_bubble_tap = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_first = false;
			if (!refer_comp) {
				refer_comp = this._focus_refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._focus_refer_comp = this._getReferenceComponent(refer_comp);
				}
				is_first = true;
			}

			if (is_userbubble) {
				if (is_first) {
					this.on_tap_basic_action(elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
				}
			}
			else {
				this.on_tap_default_action(elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_ontap : this.on_fire_sys_ontap;
					event_bubbles = fire_event_func.call(this, elem, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.ontap;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_tap(elem, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_tap(elem, canvasX, canvasY, screenX, screenY, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && application.enabletouchevent && this.enableevent) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				var fire_event_func = is_userbubble ? this.on_fire_user_ontap : this.on_fire_sys_ontap;
				event_bubbles = fire_event_func.call(this, elem, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
			}

			var listener = this.ontap;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_tap(elem, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_tap_basic_action = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var win = this._getWindow();
		if (this.visible && this._isEnable() && refer_comp) {
			if (nexacro.OS == "iOS") {
				var cur_focus_paths = this._getRootWindow().getCurrentFocusPaths();
				var len = cur_focus_paths.length;
				var old_comp = cur_focus_paths[len - 1];

				if (old_comp) {
					if (!old_comp._input_element || old_comp._input_element && !old_comp._input_element._is_ios_composition) {
						refer_comp._on_focus(true, "tap");
					}
					else if (old_comp._input_element && old_comp._input_element._is_ios_composition) {
						var ver_arr = nexacro.OSVersion.split(".");
						var major_ver = ver_arr[0];
						if (major_ver >= 13 && !(old_comp instanceof nexacro.MaskEdit)) {
							old_comp._input_element._is_ios_composition_returned = true;
						}
						else {
							if (old_comp._input_element._input_handle && refer_comp != old_comp && old_comp instanceof nexacro.MaskEdit) {
								old_comp._input_element._input_handle.blur();

								refer_comp._on_focus(true, "tap");
							}
							else {
								old_comp._input_element._is_ios_composition_returned = true;
								old_comp._input_element._input_handle.blur();
							}
						}
					}
				}
			}
			else {
				refer_comp._on_focus(true, "tap");
			}
		}
		else {
			var comp = win._findComponentForEvent(elem, 0, 0);
			if (comp && comp[0]) {
				comp[0]._on_focus(true, "tap");
			}
		}

		if (nexacro.OS != "Windows" || nexacro.Browser != "Runtime") {
			this._on_click(elem, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY);
		}
	};

	_pComponent.on_tap_default_action = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
	};

	_pComponent._on_dbltap = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._on_bubble_dbltap(elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp ? root_comp.ondbltap : null;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_dbltap(elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
	};

	_pComponent._on_bubble_dbltap = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_dbltap_basic_action(elem, canvasX, canvasY, screenX, screenY, fire_comp, refer_comp);
			}
			else {
				this.on_dbltap_default_action(elem, canvasX, canvasY, screenX, screenY, fire_comp, refer_comp);
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_ondbltap : this.on_fire_sys_ondbltap;
					event_bubbles = fire_event_func.call(this, elem, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.ondbltap;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (this._is_subcontrol) {
					return this.parent._on_bubble_dbltap(elem, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_dbltap(elem, canvasX, canvasY, screenX, screenY, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && application.enabletouchevent && this.enableevent) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				var fire_event_func = is_userbubble ? this.on_fire_user_ondbltap : this.on_fire_sys_ondbltap;
				event_bubbles = fire_event_func.call(this, elem, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
			}

			var listener = this.ondbltap;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				return this.parent._on_bubble_dbltap(elem, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_dbltap_basic_action = function () {
	};
	_pComponent.on_dbltap_default_action = function () {
	};

	_pComponent._on_pinchstart = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom) {
		this._on_bubble_pinchstart(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onpinchstart;
		if (!listener || (listener && !listener.defaultprevented)) {
			if (this._isParentdefaultprevented(root_comp, "pinchstart")) {
				return true;
			}
			this._on_bubble_pinchstart(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, false);
		}
		if (listener && listener.defaultprevented) {
			return true;
		}
	};

	_pComponent._on_bubble_pinchstart = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_pinchstart_basic_action();
			}
			else {
				this.on_pinchstart_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (application.enabletouchevent && (!is_userbubble || (is_userbubble && this.enableevent))) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onpinchstart : this.on_fire_sys_onpinchstart;
					event_bubbles = fire_event_func.call(this, elem, touchinfos, accvalue, deltavalue, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onpinchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_pinchstart(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, null, refer_comp, bZoom, is_userbubble);
				}
				else {
					return this.parent._on_bubble_pinchstart(elem, touchinfos, accvalue, deltavalue, firstrange, currange, false, this, refer_comp, bZoom, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (application.enabletouchevent && (!is_userbubble || (is_userbubble && this.enableevent))) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onpinchstart : this.on_fire_sys_onpinchstart;
					event_bubbles = fire_event_func.call(this, elem, touchinfos, accvalue, deltavalue, fire_comp, refer_comp);
				}
			}

			var listener = this.onpinchstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_pinchstart(elem, touchinfos, accvalue, deltavalue, firstrange, currange, false, fire_comp, refer_comp, bZoom, is_userbubble);
			}
		}
	};

	_pComponent.on_pinchstart_basic_action = function () {
	};
	_pComponent.on_pinchstart_default_action = function () {
	};

	_pComponent._on_pinch = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom) {
		this._on_bubble_pinch(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onpinch;
		if (!listener || (listener && !listener.defaultprevented)) {
			if (this._isParentdefaultprevented(root_comp, "pinch")) {
				return true;
			}
			this._on_bubble_pinch(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, false);
		}
		if (listener && listener.defaultprevented) {
			return true;
		}
	};

	_pComponent._on_bubble_pinch = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_pinch_basic_action();
			}
			else {
				this.on_pinch_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (application.enabletouchevent && (!is_userbubble || (is_userbubble && this.enableevent))) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onpinch : this.on_fire_sys_onpinch;
					event_bubbles = fire_event_func.call(this, elem, touchinfos, accvalue, deltavalue, firstrange, currange, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onpinch;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_pinch(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, null, refer_comp, bZoom, is_userbubble);
				}
				else {
					return this.parent._on_bubble_pinch(elem, touchinfos, accvalue, deltavalue, firstrange, currange, false, this, refer_comp, bZoom, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (application.enabletouchevent && (!is_userbubble || (is_userbubble && this.enableevent))) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onpinch : this.on_fire_sys_onpinch;
					event_bubbles = fire_event_func.call(this, elem, touchinfos, accvalue, deltavalue, firstrange, currange, fire_comp, refer_comp);
				}
			}

			var listener = this.onpinch;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_pinch(elem, touchinfos, accvalue, deltavalue, firstrange, currange, false, fire_comp, refer_comp, bZoom, is_userbubble);
			}
		}
	};

	_pComponent.on_pinch_basic_action = function () {
	};
	_pComponent.on_pinch_default_action = function () {
	};

	_pComponent._on_pinchend = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom) {
		this._on_bubble_pinchend(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onpinchend;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_pinchend(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, false);
		}
	};

	_pComponent._on_bubble_pinchend = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, fire_comp, refer_comp, bZoom, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_pinchend_basic_action();
			}
			else {
				this.on_pinchend_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (application.enabletouchevent && (!is_userbubble || (is_userbubble && this.enableevent))) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onpinchend : this.on_fire_sys_onpinchend;
					event_bubbles = fire_event_func.call(this, elem, touchinfos, accvalue, deltavalue, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onpinchend;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_pinchend(elem, touchinfos, accvalue, deltavalue, firstrange, currange, event_bubbles, null, refer_comp, bZoom, is_userbubble);
				}
				else {
					return this.parent._on_bubble_pinchend(elem, touchinfos, accvalue, deltavalue, firstrange, currange, false, this, refer_comp, bZoom, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (application.enabletouchevent && (!is_userbubble || (is_userbubble && this.enableevent))) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onpinchend : this.on_fire_sys_onpinchend;
					event_bubbles = fire_event_func.call(this, elem, touchinfos, accvalue, deltavalue, fire_comp, refer_comp);
				}
			}

			var listener = this.onpinchend;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_pinchend(elem, touchinfos, accvalue, deltavalue, firstrange, currange, false, fire_comp, refer_comp, bZoom, is_userbubble);
			}
		}
	};

	_pComponent.on_pinchend_basic_action = function () {
	};
	_pComponent.on_pinchend_default_action = function () {
	};

	_pComponent._on_flingstart = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._on_bubble_flingstart(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onflingstart;
		if (!listener || (listener && !listener.defaultprevented)) {
			if (this._isParentdefaultprevented(root_comp, "flingstart")) {
				return true;
			}
			this._on_bubble_flingstart(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, false);
		}
		if (listener && listener.defaultprevented) {
			return true;
		}
	};

	_pComponent._on_bubble_flingstart = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_flingstart_basic_action();
			}
			else {
				this.on_flingstart_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onflingstart : this.on_fire_sys_onflingstart;
					event_bubbles = fire_event_func.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onflingstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_flingstart(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_flingstart(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onflingstart : this.on_fire_sys_onflingstart;
					event_bubbles = fire_event_func.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, fire_comp, refer_comp);
				}
			}

			var listener = this.onflingstart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_flingstart(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_flingstart_basic_action = function () {
	};
	_pComponent.on_flingstart_default_action = function () {
	};

	_pComponent._on_fling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._on_bubble_fling(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onfling;
		if (!listener || (listener && !listener.defaultprevented)) {
			if (this._isParentdefaultprevented(root_comp, "fling")) {
				return true;
			}
			this._on_bubble_fling(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, false);
		}
		if (listener && listener.defaultprevented) {
			return true;
		}
	};

	_pComponent._on_bubble_fling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		var pThis = this._getFromComponent(this);
		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_fling_basic_action();
			}
			else {
				this.on_fling_default_action();
			}

			if (this.visible && this._isEnable()) {
				if ((!is_userbubble && (!pThis.onfling || (pThis.onfling && !pThis.onfling.defaultprevented)))
					 || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onfling : this.on_fire_sys_onfling;
					event_bubbles = fire_event_func.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onfling;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_fling(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_fling(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if ((!is_userbubble && (!pThis.onfling || (pThis.onfling && !pThis.onfling.defaultprevented)))
					 || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onfling : this.on_fire_sys_onfling;
					event_bubbles = fire_event_func.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, fire_comp, refer_comp);
				}
			}

			var listener = this.onfling;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_fling(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_fling_basic_action = function () {
	};
	_pComponent.on_fling_default_action = function () {
	};

	_pComponent._on_flingend = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._on_bubble_flingend(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onflingend;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_flingend(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, false);
		}

		if (this instanceof nexacro.Form) {
			if (nexacro.OS == "iOS") {
				var _win = this._getWindow();
				var cur_focus_paths = _win.getCurrentFocusPaths();
				var focused_comp = cur_focus_paths[cur_focus_paths.length - 1];
				var input_elem = focused_comp._input_element;

				if (input_elem) {
					nexacro._deleteRefreshNode();
					nexacro._refreshCaret(focused_comp);
				}
			}
		}
	};

	_pComponent._on_bubble_flingend = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_flingend_basic_action();
			}
			else {
				this.on_flingend_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onflingend : this.on_fire_sys_onflingend;
					event_bubbles = fire_event_func.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onflingend;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_flingend(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_flingend(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onflingend : this.on_fire_sys_onflingend;
					event_bubbles = fire_event_func.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, fire_comp, refer_comp);
				}
			}

			var listener = this.onflingend;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_flingend(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_flingend_basic_action = function () {
	};
	_pComponent.on_flingend_default_action = function () {
	};

	_pComponent._on_longpress = function (elem, touchinfos, event_bubbles, fire_comp, refer_comp) {
		this._on_bubble_longpress(elem, touchinfos, event_bubbles, fire_comp, refer_comp, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onlongpress;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_longpress(elem, touchinfos, event_bubbles, fire_comp, refer_comp, false);
		}
	};

	_pComponent._on_bubble_longpress = function (elem, touchinfos, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_longpress_basic_action();
			}
			else {
				this.on_longpress_default_action();
			}

			if (this.visible && this._isEnable() && (!is_userbubble || (is_userbubble && this.enableevent))) {
				var fire_event_func = is_userbubble ? this.on_fire_user_onlongpress : this.on_fire_sys_onlongpress;
				event_bubbles = fire_event_func.call(this, elem, touchinfos, this, refer_comp);

				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}

			var listener = this.onlongpress;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_longpress(elem, touchinfos, event_bubbles, null, refer_comp, is_userbubble);
				}
				else {
					return this.parent._on_bubble_longpress(elem, touchinfos, false, this, refer_comp, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable() && (!is_userbubble || (is_userbubble && this.enableevent))) {
				var fire_event_func = is_userbubble ? this.on_fire_user_onlongpress : this.on_fire_sys_onlongpress;
				event_bubbles = fire_event_func.call(this, elem, touchinfos, fire_comp, refer_comp);
			}

			var listener = this.onlongpress;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_longpress(elem, touchinfos, false, fire_comp, refer_comp, is_userbubble);
			}
		}
	};

	_pComponent.on_longpress_basic_action = function () {
	};
	_pComponent.on_longpress_default_action = function () {
	};

	_pComponent._on_slidestart = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll) {
		this._on_bubble_slidestart(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onslidestart;
		if (!listener || (listener && !listener.defaultprevented)) {
			if (this._isParentdefaultprevented(root_comp, "slidestart")) {
				return true;
			}

			this._on_bubble_slidestart(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, false);
		}
		if (listener && listener.defaultprevented) {
			return true;
		}
	};

	_pComponent._on_bubble_slidestart = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_slidestart_basic_action();
			}
			else {
				this.on_slidestart_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onslidestart : this.on_fire_sys_onslidestart;
					event_bubbles = fire_event_func.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onslidestart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_slidestart(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, null, refer_comp, bScroll, is_userbubble);
				}
				else {
					return this.parent._on_bubble_slidestart(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, false, this, refer_comp, bScroll, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onslidestart : this.on_fire_sys_onslidestart;
					event_bubbles = fire_event_func.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, fire_comp, refer_comp);
				}
			}

			var listener = this.onslidestart;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_slidestart(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, false, fire_comp, refer_comp, bScroll, is_userbubble);
			}
		}
	};

	_pComponent.on_slidestart_basic_action = function () {
	};
	_pComponent.on_slidestart_default_action = function () {
	};

	_pComponent._on_slide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll) {
		if (nexacro._current_popups.length > 0) {
			var win = this._getWindow();
			var elem_comp = win.findComponent(elem, 0, 0);
			if (elem_comp && elem_comp[0]) {
				var cur_popup = nexacro._current_popups[0];
				var attached_comp = cur_popup._attached_comp;

				if (cur_popup._track_capture && cur_popup._contains(elem_comp[0]) && 
					!(attached_comp && attached_comp._is_scrollable)) {
					return;
				}
			}
		}

		this._on_bubble_slide(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onslide;
		if (!listener || (listener && !listener.defaultprevented)) {
			if (this._isParentdefaultprevented(root_comp, "slide")) {
				return true;
			}
			this._on_bubble_slide(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, false);
		}
		if (listener && listener.defaultprevented) {
			return true;
		}
	};

	_pComponent._on_bubble_slide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		var pThis = this._getFromComponent(this);
		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_slide_basic_action();
			}
			else {
				this.on_slide_default_action();
			}

			if (this.visible && this._isEnable()) {
				if ((!is_userbubble && (!pThis.onslide || (pThis.onslide && !pThis.onslide.defaultprevented)))
					 || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onslide : this.on_fire_sys_onslide;
					event_bubbles = fire_event_func.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onslide;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent) {
				if (this.parent._is_application) {
					if (!is_userbubble && touch_manager._scroll_comp == null && !application._cur_track_info) {
						if (nexacro._allow_default_pinchzoom && xdeltavalue != 0 && Math.abs(xdeltavalue) > Math.abs(ydeltavalue)) {
							touch_manager._scroll_end = true;
							touch_manager._scroll_direction = (xdeltavalue > 0) ? -10 : 10;
						}
						else if (ydeltavalue != 0) {
							touch_manager._scroll_end = true;
							touch_manager._scroll_direction = (ydeltavalue > 0) ? -1 : 1;
						}
					}
					return;
				}

				if (this._is_subcontrol) {
					return this.parent._on_bubble_slide(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, null, refer_comp, bScroll, is_userbubble);
				}
				else {
					return this.parent._on_bubble_slide(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, false, this, refer_comp, bScroll, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if ((!is_userbubble && (!pThis.onslide || (pThis.onslide && !pThis.onslide.defaultprevented)))
					 || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onslide : this.on_fire_sys_onslide;
					event_bubbles = fire_event_func.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, fire_comp, refer_comp);
				}
			}

			var listener = this.onslide;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent) {
				if (this.parent._is_application) {
					if (!is_userbubble && touch_manager._scroll_comp == null && !application._cur_track_info) {
						if (nexacro._allow_default_pinchzoom && xdeltavalue != 0 && Math.abs(xdeltavalue) > Math.abs(ydeltavalue)) {
							touch_manager._scroll_end = true;
							touch_manager._scroll_direction = (xdeltavalue > 0) ? -10 : 10;
						}
						else if (ydeltavalue != 0) {
							touch_manager._scroll_end = true;
							touch_manager._scroll_direction = (ydeltavalue > 0) ? -1 : 1;
						}
					}
					return;
				}

				return this.parent._on_bubble_slide(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, false, fire_comp, refer_comp, bScroll, is_userbubble);
			}
		}
	};

	_pComponent.on_slide_basic_action = function () {
	};
	_pComponent.on_slide_default_action = function () {
	};

	_pComponent._on_slideend = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll) {
		this._on_bubble_slideend(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, true);

		var root_comp = this._getFromComponent(this);
		var listener = root_comp.onslideend;
		if (!listener || (listener && !listener.defaultprevented)) {
			this._on_bubble_slideend(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, false);
		}
	};

	_pComponent._on_bubble_slideend = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, fire_comp, refer_comp, bScroll, is_userbubble) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (is_userbubble) {
				this.on_slideend_basic_action();
			}
			else {
				this.on_slideend_default_action();
			}

			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onslideend : this.on_fire_sys_onslideend;
					event_bubbles = fire_event_func.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, this, refer_comp);

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}
				}
			}

			var listener = this.onslideend;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_slideend(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, event_bubbles, null, refer_comp, bScroll, is_userbubble);
				}
				else {
					return this.parent._on_bubble_slideend(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, false, this, refer_comp, bScroll, is_userbubble);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (!is_userbubble || (is_userbubble && application.enabletouchevent && this.enableevent)) {
					var fire_event_func = is_userbubble ? this.on_fire_user_onslideend : this.on_fire_sys_onslideend;
					event_bubbles = fire_event_func.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, fire_comp, refer_comp);
				}
			}

			var listener = this.onslideend;
			if ((!listener || (listener && !listener.stoppropagation)) && (event_bubbles !== true) && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_slideend(elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, false, fire_comp, refer_comp, bScroll, is_userbubble);
			}
		}
	};

	_pComponent.on_slideend_basic_action = function () {
	};
	_pComponent.on_slideend_default_action = function () {
	};

	_pComponent._on_zoom = function (zoomfactor, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		if (this.visible && this._isEnable()) {
			this.setZoom(zoomfactor);

			if (this.enableevent) {
				this.on_fire_onzoom(zoomfactor, this, refer_comp);
			}
		}
	};



	_pComponent._on_accessibilitygesture = function (direction, event_bubbles, fire_comp, refer_comp) {
		var ret = this._on_bubble_accessibilitygesture(direction, event_bubbles, fire_comp, refer_comp, true);

		if (!this._is_alive) {
			return ret;
		}

		var pThis = this._getFromComponent(this);

		if (!pThis.onaccessibilitygesture || (pThis.onaccessibilitygesture && !pThis.onaccessibilitygesture.defaultprevented)) {
			this.on_accessibilitygesture_default_action();
			ret = this._on_bubble_accessibilitygesture(direction, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pComponent._on_bubble_accessibilitygesture = function (direction, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if ((this.visible && this._isEnable()) || (this.visible && nexacro._enableaccessibility && nexacro._accessibilitytype == 5)) {
				if (bubble_scope && !this._is_hotkey) {
					event_bubbles = this.on_fire_user_onaccessibilitygesture(direction, this, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onaccessibilitygesture(direction, this, refer_comp);
					this._is_hotkey = false;
				}
				if (event_bubbles === false) {
					event_bubbles = undefined;
				}
			}
			if ((!this.onaccessibilitygesture || (this.onaccessibilitygesture && !this.onaccessibilitygesture.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				if (this._is_subcontrol) {
					return this.parent._on_bubble_accessibilitygesture(direction, event_bubbles, null, refer_comp, bubble_scope);
				}
				else {
					return this.parent._on_bubble_accessibilitygesture(direction, false, this, refer_comp, bubble_scope);
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_onaccessibilitygesture(direction, fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_onaccessibilitygesture(direction, fire_comp, refer_comp);
				}
			}
			if ((!this.accessibilitygesture || (this.accessibilitygesture && !this.accessibilitygesture.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				return this.parent._on_bubble_accessibilitygesture(direction, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};
	_pComponent.on_accessibilitygesture_default_action = function () {
	};




	_pComponent._on_orientationchange = function (orientation) {
		if (!this._is_alive) {
			return;
		}
		if (this.visible && this._isEnable()) {
			if (this.enableevent) {
				this.on_fire_onorientationchange(orientation);
			}
		}
	};


	_pComponent._on_starttrack = nexacro._emptyFn;
	_pComponent._on_movetrack = nexacro._emptyFn;
	_pComponent._on_endtrack = nexacro._emptyFn;

	_pComponent._on_startrepeat = nexacro._emptyFn;
	_pComponent._on_repeat = nexacro._emptyFn;
	_pComponent._on_endrepeat = nexacro._emptyFn;

	_pComponent.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onclick && this.onclick._has_handlers) {
			var evt = new nexacro.ClickEventInfo(this, "onclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			var ret = this.onclick._fireEvent(this, evt);
			evt.destroy();
			evt = null;

			return ret;
		}
		return false;
	};

	_pComponent.on_fire_ondblclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		nexacro._fireBeforeDblclick(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);

		if (this.ondblclick && this.ondblclick._has_handlers) {
			var evt = new nexacro.ClickEventInfo(this, "ondblclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.ondblclick._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onkillfocus = function (newobj, newreferobj) {
		if (this.onkillfocus && this.onkillfocus._has_handlers) {
			var evt = new nexacro.KillFocusEventInfo(this, "onkillfocus", newobj, newreferobj);
			return this.onkillfocus._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onsetfocus = function (oldobj, oldreferobj) {
		if (this._is_precessing_setfocus) {
			return false;
		}

		if (this.onsetfocus && this.onsetfocus._has_handlers) {
			var evt = new nexacro.SetFocusEventInfo(this, "onsetfocus", oldobj, oldreferobj);

			this._is_precessing_setfocus = true;
			var ret = this.onsetfocus._fireEvent(this, evt);
			this._is_precessing_setfocus = false;

			return ret;
		}
		return false;
	};

	_pComponent.on_fire_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeydown && this.onkeydown._has_handlers) {
			var evt = new nexacro.KeyEventInfo(this, "onkeydown", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeydown._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeydown && this.onkeydown._has_handlers) {
			var evt = new nexacro.KeyEventInfo(this, "onkeydown", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeydown._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeydown && this.onkeydown._has_handlers) {
			var evt = new nexacro.KeyEventInfo(this, "onkeydown", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeydown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeyup && this.onkeyup._has_handlers) {
			var evt = new nexacro.KeyEventInfo(this, "onkeyup", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeyup._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeyup && this.onkeyup._has_handlers) {
			var evt = new nexacro.KeyEventInfo(this, "onkeyup", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeyup._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeyup && this.onkeyup._has_handlers) {
			var evt = new nexacro.KeyEventInfo(this, "onkeyup", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeyup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttondown._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttondown._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttondown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttonup._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttonup._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onrbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttondown && this.onrbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttondown._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onrbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttondown && this.onrbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttondown._fireSysEvent(this, evt);
		}
		return false;
	};
	_pComponent.on_fire_user_onrbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttondown && this.onrbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttondown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttonup && this.onrbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttonup._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onrbuttonup && this.onrbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttonup._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onrbuttonup && this.onrbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseup._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseup._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onmousedown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmousedown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousedown._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onmousedown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmousedown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousedown._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onmousedown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmousedown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousedown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onmouseenter = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseenter && this.onmouseenter._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseenter", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseenter._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onmouseenter = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseenter && this.onmouseenter._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseenter", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseenter._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onmouseenter = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseenter && this.onmouseenter._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseenter", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseenter._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onmouseleave = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseleave && this.onmouseleave._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseleave", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseleave._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onmouseleave = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseleave && this.onmouseleave._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseleave", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseleave._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onmouseleave = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseleave && this.onmouseleave._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmouseleave", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseleave._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousemove && this.onmousemove._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmousemove", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousemove._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousemove && this.onmousemove._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmousemove", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousemove._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousemove && this.onmousemove._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onmousemove", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousemove._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onmousewheel = function (wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousewheel && this.onmousewheel._has_handlers) {
			var evt = new nexacro.MouseWheelEventInfo(this, "onmousewheel", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, wheelDeltaY, from_comp, from_refer_comp);
			return this.onmousewheel._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onmousewheel = function (wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousewheel && this.onmousewheel._has_handlers) {
			var evt = new nexacro.MouseWheelEventInfo(this, "onmousewheel", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, wheelDeltaY, from_comp, from_refer_comp);
			return this.onmousewheel._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onmousewheel = function (wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousewheel && this.onmousewheel._has_handlers) {
			var evt = new nexacro.MouseWheelEventInfo(this, "onmousewheel", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, wheelDeltaY, from_comp, from_refer_comp);
			return this.onmousewheel._fireUserEvent(this, evt);
		}
		return false;
	};


	_pComponent.on_fire_ondrag = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, refer_comp, self_refer_comp) {
		if (this.ondrag && this.ondrag._has_handlers) {
			var dragData = this._getDragData();
			var evt = new nexacro.DragEventInfo(this, "ondrag", dragData, null, this, self_refer_comp, from_comp, refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return [this.ondrag._fireEvent(this, evt), this, self_refer_comp, dragData, evt.userdata];
		}
		return [false];
	};

	_pComponent.on_fire_sys_ondrag = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, refer_comp, self_refer_comp) {
		if (this.ondrag && this.ondrag._has_handlers) {
			var dragData = this._getDragData();
			var evt = new nexacro.DragEventInfo(this, "ondrag", dragData, null, this, self_refer_comp, from_comp, refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return [this.ondrag._fireSysEvent(this, evt), this, self_refer_comp, dragData, evt.userdata];
		}
		return [false];
	};

	_pComponent.on_fire_user_ondrag = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, refer_comp, self_refer_comp) {
		if (this.selectscrollmode && (this.selectscrollmode == "scroll" || (nexacro._isMobile && nexacro._isMobile() && this.selectscrollmode == "default"))) {
			var dragdata = nexacro._cur_drag_info;
			return [false, this, refer_comp, dragdata.data, dragdata.userdata];
		}

		if (this.ondrag && this.ondrag._has_handlers) {
			var dragData = this._getDragData();
			var evt = new nexacro.DragEventInfo(this, "ondrag", dragData, null, this, self_refer_comp, from_comp, refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return [this.ondrag._fireUserEvent(this, evt), this, self_refer_comp, dragData, evt.userdata];
		}
		return [false];
	};

	_pComponent.on_fire_ondrop = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondrop && this.ondrop._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondrop", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondrop._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_ondrop = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondrop && this.ondrop._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondrop", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondrop._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ondrop = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this == src_comp && this._is_drag) {
			return false;
		}

		if (src_comp && (!src_comp.selectscrollmode || src_comp.selectscrollmode == "select" || (nexacro._isDesktop() && src_comp.selectscrollmode == "default"))) {
			if (this.ondrop && this.ondrop._has_handlers) {
				var evt = new nexacro.DragEventInfo(this, "ondrop", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
				return this.ondrop._fireUserEvent(this, evt);
			}
		}
		return false;
	};

	_pComponent.on_fire_ondragenter = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragenter && this.ondragenter._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondragenter", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondragenter._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_ondragenter = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragenter && this.ondragenter._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondragenter", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondragenter._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ondragenter = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (!src_comp.selectscrollmode || src_comp.selectscrollmode == "select" || (nexacro._isDesktop() && src_comp.selectscrollmode == "default")) {
			if (this.ondragenter && this.ondragenter._has_handlers) {
				var evt = new nexacro.DragEventInfo(this, "ondragenter", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
				return this.ondragenter._fireUserEvent(this, evt);
			}
		}
		return false;
	};

	_pComponent.on_fire_ondragleave = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragleave && this.ondragleave._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondragleave", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondragleave._fireEvent(this, evt);
		}
		return false;
	};
	_pComponent.on_fire_sys_ondragleave = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragleave && this.ondragleave._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondragleave", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondragleave._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ondragleave = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (!src_comp.selectscrollmode || src_comp.selectscrollmode == "select" || (nexacro._isDesktop() && src_comp.selectscrollmode == "default")) {
			if (this.ondragleave && this.ondragleave._has_handlers) {
				var evt = new nexacro.DragEventInfo(this, "ondragleave", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
				return this.ondragleave._fireUserEvent(this, evt);
			}
		}
		return false;
	};

	_pComponent.on_fire_ondragmove = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragmove && this.ondragmove._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondragmove", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondragmove._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_ondragmove = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, xdeltavalue, ydeltavalue) {
		if (src_comp && src_comp.selectscrollmode && (src_comp.selectscrollmode == "scroll" || (nexacro._isMobile && nexacro._isMobile() && src_comp.selectscrollmode == "default"))) {
			var scroll_mode = 0;

			var can_hscroll = false;
			var can_vscroll = false;

			if (xdeltavalue != 0 && src_comp.hscrollbar && src_comp.hscrollbar.enable && (src_comp.dragscrolltype != "none" && src_comp.dragscrolltype != "vert")) {
				if (xdeltavalue < 0) {
					if (src_comp.hscrollbar.pos < src_comp.hscrollbar.max) {
						can_hscroll = true;
					}
				}
				else {
					if (src_comp.hscrollbar.pos > 0) {
						can_hscroll = true;
					}
				}
			}

			if (ydeltavalue != 0 && src_comp.vscrollbar && src_comp.vscrollbar.enable && (src_comp.dragscrolltype != "none" && src_comp.dragscrolltype != "horz")) {
				if (ydeltavalue < 0) {
					if (src_comp.vscrollbar.pos < src_comp.vscrollbar.max) {
						can_vscroll = true;
					}
				}
				else {
					if (src_comp.vscrollbar.pos > 0) {
						can_vscroll = true;
					}
				}
			}

			if (src_comp.dragscrolltype == "all" && (can_hscroll || can_vscroll)) {
				scroll_mode = 3;
			}
			else if (can_hscroll && can_vscroll) {
				if (Math.abs(ydeltavalue) < Math.abs(xdeltavalue)) {
					scroll_mode = 2;
				}
				else {
					scroll_mode = 1;
				}
			}
			else if (can_hscroll) {
				scroll_mode = 2;
			}
			else if (can_vscroll) {
				scroll_mode = 1;
			}

			if ((scroll_mode == 3 || scroll_mode == 2) && xdeltavalue != 0 && src_comp.hscrollbar && src_comp.hscrollbar.enable) {
				src_comp.hscrollbar._setPos(src_comp.hscrollbar.pos - xdeltavalue);
			}

			if ((scroll_mode == 3 || scroll_mode == 1) && ydeltavalue != 0 && src_comp.vscrollbar && src_comp.vscrollbar.enable) {
				src_comp.vscrollbar._setPos(src_comp.vscrollbar.pos - ydeltavalue);
			}
		}

		if (this.ondragmove && this.ondragmove._has_handlers) {
			var evt = new nexacro.DragEventInfo(this, "ondragmove", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			return this.ondragmove._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ondragmove = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (src_comp && (!src_comp.selectscrollmode || src_comp.selectscrollmode == "select" || (nexacro._isDesktop() && src_comp.selectscrollmode == "default"))) {
			if (this.ondragmove && this.ondragmove._has_handlers) {
				var evt = new nexacro.DragEventInfo(this, "ondragmove", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
				return this.ondragmove._fireUserEvent(this, evt);
			}
		}
		return false;
	};


	_pComponent.on_fire_onmove = function (left, top) {
		if (this.onmove && this.onmove._has_handlers) {
			var evt = new nexacro.MoveEventInfo(this, "onmove", left, top);
			return this.onmove._fireEvent(this, evt);
		}
		return false;
	};
	_pComponent.on_fire_onsize = function (width, height) {
		if (this.onsize && this.onsize._has_handlers) {
			var evt = new nexacro.SizeEventInfo(this, "onsize", width, height);
			return this.onsize._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_oncontextmenu = function (from_comp, from_refer_comp) {
		if (this.oncontextmenu && this.oncontextmenu._has_handlers) {
			var evt = new nexacro.ContextMenuEventInfo(this, "oncontextmenu", from_comp, from_refer_comp);
			return this.ontouchstart._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_oncontextmenu = function (from_comp, from_refer_comp) {
		if (this.oncontextmenu && this.oncontextmenu._has_handlers) {
			var evt = new nexacro.ContextMenuEventInfo(this, "oncontextmenu", from_comp, from_refer_comp);
			return this.oncontextmenu._fireUserEvent(this, evt);
		}
		return false;
	};
	_pComponent.on_fire_sys_oncontextmenu = function (from_comp, from_refer_comp) {
		if (this.oncontextmenu && this.oncontextmenu._has_handlers) {
			var evt = new nexacro.ContextMenuEventInfo(this, "oncontextmenu", from_comp, from_refer_comp);
			return this.oncontextmenu._fireSysEvent(this, evt);
		}
		return true;
	};

	_pComponent.on_fire_ontouchstart = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchstart && this.ontouchstart._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchstart", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchstart._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ontouchstart = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchstart && this.ontouchstart._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchstart", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchstart._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_ontouchstart = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchstart && this.ontouchstart._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchstart", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchstart._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_ontouchmove = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchmove && this.ontouchmove._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchmove", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchmove._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ontouchmove = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchmove && this.ontouchmove._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchmove", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchmove._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_ontouchmove = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchmove && this.ontouchmove._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchmove", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchmove._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_ontouchend = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchend && this.ontouchend._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchend", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchend._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ontouchend = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchend && this.ontouchend._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchend", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchend._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_ontouchend = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this.ontouchend && this.ontouchend._has_handlers) {
			var evt = new nexacro.TouchEventInfo(this, "ontouchend", touchinfos, changedtouchinfos, from_comp, from_refer_comp);
			return this.ontouchend._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_ontap = function () {
		if (this.ontap && this.ontap._has_handlers) {
			var evt = new nexacro.TapEventInfo(this, "ontap");
			return this.ontap._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ontap = _pComponent.on_fire_ontap;

	_pComponent.on_fire_sys_ontap = function (elem, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return true;
	};

	_pComponent.on_fire_ondbltap = function () {
		if (this.ondbltap && this.ondbltap._has_handlers) {
			var evt = new nexacro.TapEventInfo(this, "ondbltap");
			return this.ondbltap._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_ondbltap = _pComponent.on_fire_ondbltap;

	_pComponent.on_fire_sys_ondbltap = function (elem, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this._on_dblclick(elem, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY);
		return true;
	};

	_pComponent.on_fire_onpinchstart = function (elem, touchinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		if (this.onpinchstart && this.onpinchstart._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinchstart", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinchstart._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onpinchstart = function (elem, touchinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		if (this.onpinchstart && this.onpinchstart._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinchstart", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinchstart._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onpinchstart = function (elem, touchinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		if (this.onpinchstart && this.onpinchstart._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinchstart", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinchstart._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onpinch = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, from_comp, from_refer_comp) {
		if (this.onpinch && this.onpinch._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinch", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinch._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onpinch = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, from_comp, from_refer_comp) {
		if (this.onpinch && this.onpinch._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinch", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinch._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onpinch = function (elem, touchinfos, accvalue, deltavalue, firstrange, currange, from_comp, from_refer_comp) {
		if (this instanceof nexacro.Form) {
			if (this._is_popup_control) {
				return true;
			}

			if (this.parent && this.parent instanceof nexacro.ChildFrame) {
				var zoom_amount = Math.abs(deltavalue) / firstrange;
				var zoom_dir = deltavalue > 0 ? 1 : -1;
				var zoom_delta = (1.0 + (zoom_dir * zoom_amount));
				var zoom_factor = this.getZoom() || 100;
				zoom_factor = zoom_factor * zoom_delta;

				if (!nexacro._allow_default_pinchzoom) {
					var current_screen = application._curscreen;
					if (current_screen) {
						var min = current_screen._zoommin * 100;
						var max = current_screen._zoommax * 100;

						if (min !== undefined && max !== undefined && min >= max) {
							return true;
						}

						if (min != undefined && min >= 0 && zoom_factor < min) {
							zoom_factor = min;
						}

						if (max != undefined && max >= 0 && zoom_factor > max) {
							zoom_factor = max;
						}
					}
				}

				this._on_zoom(zoom_factor, this, from_refer_comp);
				return true;
			}
		}

		return false;
	};

	_pComponent.on_fire_onpinchend = function (elem, touchinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		if (this.onpinchend && this.onpinchend._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinchend", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinchend._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onpinchend = function (elem, touchinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		if (this.onpinchend && this.onpinchend._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinchend", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinchend._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onpinchend = function (elem, touchinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		if (this.onpinchend && this.onpinchend._has_handlers) {
			var evt = new nexacro.PinchEventInfo(this, "onpinchend", touchinfos, accvalue, deltavalue, from_comp, from_refer_comp);
			return this.onpinchend._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onflingstart = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (this.onflingstart && this.onflingstart._has_handlers) {
			var evt = new nexacro.FlingEventInfo(this, "onflingstart", null, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);
			return this.onflingstart._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onflingstart = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (this.onflingstart && this.onflingstart._has_handlers) {
			var evt = new nexacro.FlingEventInfo(this, "onflingstart", null, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);
			return this.onflingstart._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onflingstart = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		return true;
	};

	_pComponent.on_fire_onfling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (this.onfling && this.onfling._has_handlers) {
			var evt = new nexacro.FlingEventInfo(this, "onfling", null, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);
			return this.onfling._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onfling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (this.onfling && this.onfling._has_handlers) {
			var evt = new nexacro.FlingEventInfo(this, "onfling", null, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);
			return this.onfling._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onfling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (fling_handler._scroll_comp == this) {
			fling_handler._proc_scroll = true;
			return true;
		}

		return false;
	};

	_pComponent.on_fire_onflingend = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (this.onflingend && this.onflingend._has_handlers) {
			var evt = new nexacro.FlingEventInfo(this, "onflingend", null, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);
			return this.onflingend._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onflingend = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		if (this.onflingend && this.onflingend._has_handlers) {
			var evt = new nexacro.FlingEventInfo(this, "onflingend", null, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);
			return this.onflingend._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onflingend = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		return false;
	};

	_pComponent.on_fire_onlongpress = function (elem, touchinfos, from_comp, from_refer_comp) {
		if (this.onlongpress && this.onlongpress._has_handlers) {
			var evt = new nexacro.LongPressEventInfo(this, "onlongpress", touchinfos, from_comp, from_refer_comp);
			return this.onlongpress._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onlongpress = function (elem, touchinfos, from_comp, from_refer_comp) {
		if (this.onlongpress && this.onlongpress._has_handlers) {
			var evt = new nexacro.LongPressEventInfo(this, "onlongpress", touchinfos, from_comp, from_refer_comp);
			return this.onlongpress._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onlongpress = function (elem, touchinfos, from_comp, from_refer_comp) {
		if (this.onlongpress && this.onlongpress._has_handlers) {
			var evt = new nexacro.LongPressEventInfo(this, "onlongpress", touchinfos, from_comp, from_refer_comp);
			return this.onlongpress._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onslidestart = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslidestart && this.onslidestart._has_handlers) {
			var evt = new nexacro.SlideEventInfo(this, "onslidestart", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslidestart._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onslidestart = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslidestart && this.onslidestart._has_handlers) {
			if (touch_manager) {
				if (touch_manager._slide_event_blocked) {
					return false;
				}

				touch_manager._fired_slidestart = true;
			}

			var evt = new nexacro.SlideEventInfo(this, "onslidestart", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslidestart._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onslidestart = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslidestart && this.onslidestart._has_handlers) {
			var evt = new nexacro.SlideEventInfo(this, "onslidestart", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslidestart._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslide && this.onslide._has_handlers) {
			var evt = new nexacro.SlideEventInfo(this, "onslide", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslide._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslide && this.onslide._has_handlers) {
			var scroll_comp = touch_manager._scroll_comp;

			if (scroll_comp) {
				if (scroll_comp != this) {
					return false;
				}
			}
			else {
				var can_hscroll = false;
				var can_vscroll = false;

				if (xdeltavalue != 0 && this.hscrollbar && this.hscrollbar.enable && (this.dragscrolltype != "none" && this.dragscrolltype != "vert")) {
					if (xdeltavalue < 0) {
						if (this.hscrollbar.pos < this.hscrollbar.max) {
							can_hscroll = true;
						}
					}
					else {
						if (this.hscrollbar.pos > 0) {
							can_hscroll = true;
						}
					}
				}

				if (ydeltavalue != 0 && this.vscrollbar && this.vscrollbar.enable && (this.dragscrolltype != "none" && this.dragscrolltype != "horz")) {
					if (ydeltavalue < 0) {
						if (this.vscrollbar.pos < this.vscrollbar.max) {
							can_vscroll = true;
						}
					}
					else {
						if (this.vscrollbar.pos > 0) {
							can_vscroll = true;
						}
					}
				}

				if (!can_hscroll && !can_vscroll) {
					return false;
				}
			}

			var evt = new nexacro.SlideEventInfo(this, "onslide", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslide._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (nexacro._cur_track_info) {
			if (nexacro._cur_track_info.target._no_slide_scroll == true) {
				return true;
			}
		}

		if (!this.hscrollbar && !this.vscrollbar) {
			return false;
		}

		var scroll_comp = touch_manager._scroll_comp;
		var scroll_mode = touch_manager._scroll_mode;

		if (scroll_comp) {
			if (scroll_comp != this) {
				return false;
			}
		}
		else {
			var can_hscroll = false;
			var can_vscroll = false;

			if (xdeltavalue != 0 && this.hscrollbar && this.hscrollbar.enable && (this.dragscrolltype != "none" && this.dragscrolltype != "vert")) {
				if (xdeltavalue < 0) {
					if (this.hscrollbar.pos < this.hscrollbar.max) {
						can_hscroll = true;
					}
				}
				else {
					if (this.hscrollbar.pos > 0) {
						can_hscroll = true;
					}
				}
			}

			if (ydeltavalue != 0 && this.vscrollbar && this.vscrollbar.enable && (this.dragscrolltype != "none" && this.dragscrolltype != "horz")) {
				if (ydeltavalue < 0) {
					if (this.vscrollbar.pos < this.vscrollbar.max) {
						can_vscroll = true;
					}
				}
				else {
					if (this.vscrollbar.pos > 0) {
						can_vscroll = true;
					}
				}
			}

			if (this.dragscrolltype == "all" && (can_hscroll || can_vscroll)) {
				scroll_mode = 3;
			}
			else if (can_hscroll && can_vscroll) {
				if (Math.abs(ydeltavalue) < Math.abs(xdeltavalue)) {
					scroll_mode = 2;
				}
				else {
					scroll_mode = 1;
				}
			}
			else if (can_hscroll) {
				scroll_mode = 2;
			}
			else if (can_vscroll) {
				scroll_mode = 1;
			}

			if (this.selectscrollmode != undefined) {
				var select_mode;

				if (this.selectscrollmode == "default") {
					select_mode = (nexacro.SupportTouch || nexacro.isTouchInteraction) ? "scroll" : "select";
				}
				else {
					select_mode = this.selectscrollmode;
				}

				if (select_mode == "select") {
					scroll_mode = 0;
				}
			}

			if (scroll_mode > 0) {
				scroll_comp = this;
				touch_manager._scroll_end = false;
				touch_manager._scroll_comp = this;
				touch_manager._scroll_mode = scroll_mode;
			}
			else {
				return false;
			}
		}

		if (this.getZoom) {
			var zoom_factor = this.getZoom();
			if (zoom_factor != 100) {
				xdeltavalue /= (zoom_factor / 100.0);
				ydeltavalue /= (zoom_factor / 100.0);
			}
		}

		if ((scroll_mode == 3 || scroll_mode == 2) && xdeltavalue != 0 && this.hscrollbar && this.hscrollbar.enable) {
			this.hscrollbar._setPos(this.hscrollbar.pos - xdeltavalue, "slide");
		}

		if ((scroll_mode == 3 || scroll_mode == 1) && ydeltavalue != 0 && this.vscrollbar && this.vscrollbar.enable) {
			this.vscrollbar._setPos(this.vscrollbar.pos - ydeltavalue, "slide");
		}

		return true;
	};

	_pComponent.on_fire_onslideend = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslideend && this.onslideend._has_handlers) {
			var evt = new nexacro.SlideEventInfo(this, "onslideend", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslideend._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onslideend = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslideend && this.onslideend._has_handlers) {
			if (!touch_manager._fired_slidestart) {
				return false;
			}

			var evt = new nexacro.SlideEventInfo(this, "onslideend", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslideend._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onslideend = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.onslideend && this.onslideend._has_handlers) {
			var evt = new nexacro.SlideEventInfo(this, "onslideend", touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
			return this.onslideend._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onzoom = function (zoomfactor, from_comp, from_refer_comp) {
		if (this.onzoom && this.onzoom._has_handlers) {
			var evt = new nexacro.ZoomEventInfo(this, "onzoom", zoomfactor, from_comp, from_refer_comp);
			return this.onzoom._fireEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_user_onzoom = function (zoomfactor, from_comp, from_refer_comp) {
		if (this.onzoom && this.onzoom._has_handlers) {
			var evt = new nexacro.ZoomEventInfo(this, "onzoom", zoomfactor, from_comp, from_refer_comp);
			return this.onzoom._fireUserEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_sys_onzoom = function (zoomfactor, from_comp, from_refer_comp) {
		if (this.onzoom && this.onzoom._has_handlers) {
			var evt = new nexacro.ZoomEventInfo(this, "onzoom", zoomfactor, from_comp, from_refer_comp);
			return this.onzoom._fireSysEvent(this, evt);
		}
		return false;
	};

	_pComponent.on_fire_onorientationchange = function (orientation) {
		if (this.onorientationchange && this.onorientationchange._has_handlers) {
			var evt = new nexacro.OrientationChangeEventInfo(this, "onorientationchange", orientation);
			return this.onorientationchange._fireEvent(this, evt);
		}
		return false;
	};


	_pComponent.on_fire_user_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
	};

	_pComponent.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
	};

	delete _pComponent;
}


//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Dataset) {
	nexacro._getXMLTagData = function (xmlStr, parse_pos, startTag, endTag) {
		var start_pos = xmlStr.indexOf(startTag, parse_pos);
		if (start_pos > -1) {
			var data_pos = start_pos + startTag.length;
			var end_pos = xmlStr.indexOf(endTag, data_pos);
			if (end_pos > -1) {
				var str = xmlStr.substring(data_pos, end_pos);
				return [str, "", start_pos, end_pos + endTag.length];
			}
			else {
				var str = xmlStr.substring(data_pos);
				return [str, "", start_pos, xmlStr.length];
			}
		}
		return null;
	};

	nexacro._getXMLTagData2 = function (xmlStr, parse_pos, startTag, endTag) {
		var start_pos = xmlStr.indexOf(startTag, parse_pos);
		if (start_pos > -1) {
			var attr;
			var attr_pos = start_pos + startTag.length;
			var data_pos = xmlStr.indexOf(">", attr_pos);
			if (data_pos < 0) {
				return null;
			}
			else if (data_pos > 0 && xmlStr.charAt(data_pos - 1) == '/') {
				attr = xmlStr.substring(attr_pos, data_pos - 1).trim();
				return ["", attr, start_pos, data_pos];
			}
			else {
				attr = xmlStr.substring(attr_pos, data_pos).trim();
			}

			data_pos++;
			var end_pos = xmlStr.indexOf(endTag, data_pos);
			if (end_pos > -1) {
				var str = xmlStr.substring(data_pos, end_pos);
				return [str, attr, start_pos, end_pos + endTag.length];
			}
			else {
				var str = xmlStr.substring(data_pos);
				return [str, attr, start_pos, xmlStr.length];
			}
		}
		return null;
	};

	nexacro._getXMLTagData3 = function (xmlStr, parse_pos, startTag, endTag) {
		var start_pos = xmlStr.indexOf(startTag, parse_pos);
		if (start_pos > -1) {
			var start_pos2 = start_pos + startTag.length;
			if (xmlStr.charAt(start_pos2) == " ") {
				var attr;
				var attr_pos = start_pos2 + 1;
				var data_pos = xmlStr.indexOf(">", attr_pos);
				if (data_pos < 0) {
					return null;
				}
				else if (data_pos > 0 && xmlStr.charAt(data_pos - 1) == '/') {
					attr = xmlStr.substring(attr_pos, data_pos - 1).trim();
					return ["", attr, start_pos, data_pos];
				}
				else {
					attr = xmlStr.substring(attr_pos, data_pos).trim();
				}

				data_pos++;
				var end_pos = xmlStr.indexOf(endTag, data_pos);
				if (end_pos > -1) {
					var str = xmlStr.substring(data_pos, end_pos);
					return [str, attr, start_pos, end_pos + endTag.length];
				}
				else {
					var str = xmlStr.substring(data_pos);
					return [str, attr, start_pos, xmlStr.length];
				}
			}
			else if (xmlStr.charAt(start_pos2) == "/") {
				start_pos2 = start_pos2 + 1;
				if (xmlStr.charAt(start_pos2) == ">") {
					return ["", "", start_pos, start_pos2];
				}
			}
			else {
				if (xmlStr.charAt(start_pos + 1) == ">") {
					start_pos = start_pos + 1;
				}

				var data_pos = start_pos + startTag.length;
				var end_pos = xmlStr.indexOf(endTag, data_pos);
				if (end_pos > -1) {
					var str = xmlStr.substring(data_pos, end_pos);
					return [str, "", start_pos, end_pos + endTag.length];
				}
				else {
					var str = xmlStr.substring(data_pos);
					return [str, "", start_pos, xmlStr.length];
				}
			}
		}
		return null;
	};

	nexacro._getXMLTagData4 = function (xmlStr, parse_pos, startTag) {
		var start_pos = xmlStr.indexOf(startTag, parse_pos);
		if (start_pos > -1) {
			var attr_pos = start_pos + startTag.length;
			var end_pos = xmlStr.indexOf("/>", attr_pos);
			if (end_pos > -1) {
				var attr = xmlStr.substring(attr_pos, end_pos).trim();
				return ["", attr, attr_pos, end_pos + 2];
			}
			else {
				var attr = xmlStr.substring(attr_pos).trim();
				return ["", attr, attr_pos, xmlStr.length];
			}
		}
		return null;
	};

	nexacro._getXMLAttributeID = function (attrStr) {
		var attr_pos = attrStr.indexOf("id=\"");
		if (attr_pos > -1) {
			var data_pos = attr_pos + 4;
			var end_pos = attrStr.indexOf("\"", data_pos);
			if (end_pos > -1) {
				return attrStr.substring(data_pos, end_pos);
			}
			return "";
		}
		return null;
	};

	nexacro._getXMLAttributeType = function (attrStr) {
		var attr_pos = attrStr.indexOf("type=\"");
		if (attr_pos > -1) {
			var data_pos = attr_pos + 6;
			var end_pos = attrStr.indexOf("\"", data_pos);
			if (end_pos > -1) {
				return attrStr.substring(data_pos, end_pos);
			}
			return "";
		}
		return null;
	};

	nexacro._getXMLAttributeData = function (attrStr, attrid) {
		var attr_pos = attrStr.indexOf(attrid + "=\"");
		if (attr_pos > -1) {
			var data_pos = attr_pos + attrid.length + 2;
			var end_pos = attrStr.indexOf("\"", data_pos);
			if (end_pos > -1) {
				return attrStr.substring(data_pos, end_pos);
			}
			return "";
		}
		return null;
	};

	nexacro.Date = function (year, month, day, hours, minutes, seconds, milliseconds) {
		if (year == null) {
			this._timecheck = true;
			this.date = new Date();
		}
		else if (month == null && typeof year == "string") {
			this._timecheck = true;
			this.date = new Date(year);
		}
		else if (day == null) {
			year = (parseInt(year, 10) | 0);
			month = (parseInt(month, 10) | 0);
			this.date = new Date(year, month);
			if (year <= 99 && year >= 0) {
				this.date.setFullYear(year);
			}
		}
		else if (hours == null) {
			year = (parseInt(year, 10) | 0);
			month = (parseInt(month, 10) | 0);
			day = (parseInt(day, 10) | 0);
			this.date = new Date(year, month, day);
			if (year <= 99 && year >= 0) {
				this.date.setFullYear(year);
			}
		}
		else if (minutes == null) {
			this._timecheck = true;
			year = (parseInt(year, 10) | 0);
			month = (parseInt(month, 10) | 0);
			day = (parseInt(day, 10) | 0);
			hours = (parseInt(hours, 10) | 0);
			this.date = new Date(year, month, day, hours);
			if (year <= 99 && year >= 0) {
				this.date.setFullYear(year);
			}
		}
		else if (seconds == null) {
			this._timecheck = true;
			year = (parseInt(year, 10) | 0);
			month = (parseInt(month, 10) | 0);
			day = (parseInt(day, 10) | 0);
			hours = (parseInt(hours, 10) | 0);
			minutes = (parseInt(minutes, 10) | 0);
			this.date = new Date(year, month, day, hours, minutes);
			if (year <= 99 && year >= 0) {
				this.date.setFullYear(year);
			}
		}
		else if (milliseconds == null) {
			this._timecheck = true;
			year = (parseInt(year, 10) | 0);
			month = (parseInt(month, 10) | 0);
			day = (parseInt(day, 10) | 0);
			hours = (parseInt(hours, 10) | 0);
			minutes = (parseInt(minutes, 10) | 0);
			seconds = (parseInt(seconds, 10) | 0);
			this.date = new Date(year, month, day, hours, minutes, seconds);
			if (year <= 99 && year >= 0) {
				this.date.setFullYear(year);
			}
		}
		else {
			this._timecheck = true;
			year = (parseInt(year, 10) | 0);
			month = (parseInt(month, 10) | 0);
			day = (parseInt(day, 10) | 0);
			hours = (parseInt(hours, 10) | 0);
			minutes = (parseInt(minutes, 10) | 0);
			seconds = (parseInt(seconds, 10) | 0);
			milliseconds = (parseInt(milliseconds, 10) | 0);
			this.date = new Date(year, month, day, hours, minutes, seconds, milliseconds);
			if (year <= 99 && year >= 0) {
				this.date.setFullYear(year);
			}
		}
		return;
	};

	var _pDate = nexacro._createPrototype(nexacro.Object, nexacro.Date);
	nexacro.Date.prototype = _pDate;

	_pDate._type_name = "Date";

	_pDate.getFullYear = function () {
		return this.date.getFullYear();
	};

	_pDate.setFullYear = function (year, month, day) {
		if (day != null) {
			this.date.setFullYear(year, month, day);
		}
		else if (month != null) {
			this.date.setFullYear(year, month);
		}
		else {
			this.date.setFullYear(year);
		}
	};

	_pDate.getYear = function () {
		return this.date.getYear();
	};

	_pDate.setYear = function (year, month, day) {
		if (day != null) {
			this.date.setYear(year, month, day);
		}
		else if (month != null) {
			this.date.setYear(year, month);
		}
		else {
			this.date.setYear(year);
		}
	};

	_pDate.getMonth = function () {
		return this.date.getMonth();
	};

	_pDate.setMonth = function (month, day) {
		if (day == null) {
			this.date.setMonth(month);
		}
		else {
			this.date.setMonth(month, day);
		}
	};

	_pDate.getDate = function () {
		return this.date.getDate();
	};

	_pDate.setDate = function (day) {
		this.date.setDate(day);
	};

	_pDate.getDay = function () {
		return this.date.getDay();
	};

	_pDate.getHours = function () {
		return this.date.getHours();
	};

	_pDate.setHours = function (hour, min, sec, millisec) {
		if (millisec != null) {
			this.date.setHours(hour, min, sec, millisec);
		}
		else if (sec != null) {
			this.date.setHours(hour, min, sec);
		}
		else if (min != null) {
			this.date.setHours(hour, min);
		}
		else {
			this.date.setHours(hour);
		}
	};

	_pDate.getMinutes = function () {
		return this.date.getMinutes();
	};

	_pDate.setMinutes = function (min, sec, millisec) {
		if (millisec != null) {
			this.date.setMinutes(min, sec, millisec);
		}
		else if (sec != null) {
			this.date.setMinutes(min, sec);
		}
		else {
			this.date.setMinutes(min);
		}
	};

	_pDate.getSeconds = function () {
		return this.date.getSeconds();
	};

	_pDate.setSeconds = function (sec, millisec) {
		if (millisec != null) {
			this.date.setSeconds(sec, millisec);
		}
		else {
			this.date.setSeconds(sec);
		}
	};

	_pDate.getMilliseconds = function () {
		return this.date.getMilliseconds();
	};

	_pDate.setMilliseconds = function (millisec) {
		this.date.setMilliseconds(millisec);
	};

	_pDate.getTime = function () {
		return this.date.getTime();
	};

	_pDate.setTime = function (millisec) {
		this.date.setTime(millisec);
	};

	_pDate.getTimezoneOffset = function () {
		return this.date.getTimezoneOffset();
	};

	_pDate.getUTCFullYear = function () {
		return this.date.getUTCFullYear();
	};

	_pDate.setUTCFullYear = function (year, month, day) {
		if (day != null) {
			this.date.setUTCFullYear(year, month, day);
		}
		else if (month != null) {
			this.date.setUTCFullYear(year, month);
		}
		else {
			this.date.setUTCFullYear(year);
		}
	};

	_pDate.getUTCMonth = function () {
		return this.date.getUTCMonth();
	};

	_pDate.setUTCMonth = function (month, day) {
		if (day == null) {
			this.date.setUTCMonth(month);
		}
		else {
			this.date.setUTCMonth(month, day);
		}
	};

	_pDate.getUTCDate = function () {
		return this.date.getUTCDate();
	};

	_pDate.setUTCDate = function (day) {
		this.date.setUTCDate(day);
	};

	_pDate.getUTCDay = function () {
		return this.date.getUTCDay();
	};

	_pDate.getUTCHours = function () {
		return this.date.getUTCHours();
	};

	_pDate.setUTCHours = function (hour, min, sec, millisec) {
		if (millisec != null) {
			this.date.setUTCHours(hour, min, sec, millisec);
		}
		else if (sec != null) {
			this.date.setUTCHours(hour, min, sec);
		}
		else if (min != null) {
			this.date.setUTCHours(hour, min);
		}
		else {
			this.date.setUTCHours(hour);
		}
	};

	_pDate.getUTCMinutes = function () {
		return this.date.getUTCMinutes();
	};

	_pDate.setUTCMinutes = function (min, sec, millisec) {
		if (millisec != null) {
			this.date.setUTCMinutes(min, sec, millisec);
		}
		else if (sec != null) {
			this.date.setUTCMinutes(min, sec);
		}
		else {
			this.date.setUTCMinutes(min);
		}
	};

	_pDate.getUTCSeconds = function () {
		return this.date.getUTCSeconds();
	};

	_pDate.setUTCSeconds = function (sec, millisec) {
		if (millisec == null) {
			this.date.setUTCSeconds(sec);
		}
		else {
			this.date.setUTCSeconds(sec, millisec);
		}
	};

	_pDate.getUTCMilliseconds = function () {
		return this.date.getUTCMilliseconds();
	};

	_pDate.setUTCMilliseconds = function (millisec) {
		this.date.setUTCMilliseconds(millisec);
	};

	_pDate.parse = function (datestring) {
		return this.date.parse(datestring);
	};

	_pDate.UTC = function (year, month, day, hours, minutes, seconds, ms) {
		return this.date.UTC(year, month, day, hours, minutes, seconds, ms);
	};

	_pDate.valueOf = function () {
		return this.toString();
	};

	_pDate.toGMTString = function () {
		return this.date.toGMTString();
	};

	_pDate.toDateString = function () {
		return this.date.toDateString();
	};

	_pDate.toTimeString = function () {
		return this.date.toTimeString();
	};

	_pDate.toLocaleDateString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var format_string = this.getLocaleFormatString(locale, locale_info.date_format);



		return format_string;
	};

	_pDate.toLocaleTimeString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var format_string = this.getLocaleFormatString(locale, locale_info.time_format);

		return format_string;
	};

	_pDate.toString = function () {
		var y = this.getFullYear();
		var m = this.getMonth() + 1;
		var d = this.getDate();
		var h = this.getHours();
		var min = this.getMinutes();
		var sec = this.getSeconds();
		var millisec = this.getMilliseconds();

		y = y !== null ? this.toZeroDigitString(y, 4) : "0000";
		m = m !== null ? this.toZeroDigitString(m, 2) : m;
		d = d !== null ? this.toZeroDigitString(d, 2) : d;
		h = h !== null ? this.toZeroDigitString(h, 2) : h;
		min = min !== null ? this.toZeroDigitString(min, 2) : min;
		sec = sec !== null ? this.toZeroDigitString(sec, 2) : sec;
		millisec = millisec !== null ? this.toZeroDigitString(millisec, 3) : millisec;

		if (this._timecheck) {
			if (this._timeonly) {
				return "" + h + min + sec + millisec;
			}
			else {
				return "" + y + m + d + h + min + sec + millisec;
			}
		}
		else {
			return "" + y + m + d;
		}
	};

	_pDate.toLocaleString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);

		var format_string = this.getLocaleFormatString(locale, locale_info.date_time_format);

		return format_string;
	};

	_pDate.toUTCString = function () {
		return this.date.toUTCString();
	};

	_pDate.toZeroDigitString = function (v, d) {
		var zero = "";
		v = v.toString();
		var n = v.length;
		if (n < d) {
			for (var i = 0; i < d - n; i++) {
				zero += "0";
			}
		}
		return zero + v;
	};

	_pDate.getLocaleFormatString = function (locale, format, bLTRMark) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var format_string = format;

		format_string = format_string.replace(/%r/g, locale_info.time_format_ampm);
		format_string = format_string.replace(/%x/g, locale_info.date_format);
		format_string = format_string.replace(/%X/g, locale_info.time_format);
		format_string = format_string.replace(/%T/g, "%H:%M:%S");

		if (bLTRMark === true) {
			format_string = format_string.replace(/%Y/g, "\u200E%Y");
			format_string = format_string.replace(/%y/g, "\u200E%y");
			format_string = format_string.replace(/%d/g, "\u200E%d");
			format_string = format_string.replace(/%e/g, "\u200E%e");
		}

		format_string = format_string.replace(/%a/g, this.toLocaleWeekDayString(locale, "short"));
		format_string = format_string.replace(/%A/g, this.toLocaleWeekDayString(locale, "long"));
		format_string = format_string.replace(/%b/g, this.toLocaleMonthString(locale, "short"));
		format_string = format_string.replace(/%B/g, this.toLocaleMonthString(locale, "long"));
		format_string = format_string.replace(/%p/g, this.toLocaleAMPMString(locale));

		format_string = format_string.replace(/%y/g, this.getYear());
		format_string = format_string.replace(/%Y/g, this.getFullYear());
		format_string = format_string.replace(/%n/g, this.getMonth() + 1);
		format_string = format_string.replace(/%m/g, nexacro._toString(this.getMonth() + 1).padLeft(2, "0"));
		format_string = format_string.replace(/%d/g, nexacro._toString(this.getDate()).padLeft(2, "0"));
		format_string = format_string.replace(/%e/g, this.getDate());

		format_string = format_string.replace(/%H/g, this.getHours());
		format_string = format_string.replace(/%l/g, this.getHours());
		format_string = format_string.replace(/%I/g, this.getHours());
		format_string = format_string.replace(/%M/g, this.getMinutes());
		format_string = format_string.replace(/%S/g, this.getSeconds());

		format_string = format_string.replace(/\\a/g, "a");
		format_string = format_string.replace(/\\m/g, "m");
		format_string = format_string.replace(/\\d/g, "d");
		return format_string;
	};

	_pDate.toLocaleWeekDayString = function (locale, option) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var day = this.getDay();
		var weekday_string = "";

		switch (option) {
			case "short":
				{

					weekday_string = locale_info.weekday_names_short[day];
				}
				break;
			case "narrow":
				{

					weekday_string = locale_info.weekday_names_narrow[day];
				}
				break;
			case "long":
			default:
				{

					weekday_string = locale_info.weekday_names_long[day];
				}
				break;
		}
		return weekday_string;
	};

	_pDate.toLocaleMonthString = function (locale, option) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var month = this.getMonth();
		var month_string = "";

		switch (option) {
			case "short":
				{

					month_string = locale_info.month_names_short[month];
				}
				break;
			case "narrow":
				{

					month_string = locale_info.month_names_narrow[month];
				}
				break;
			case "long":
			default:
				{

					month_string = locale_info.month_names_long[month];
				}
				break;
		}
		return month_string;
	};

	_pDate.toLocaleAMPMString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var hours = this.getHours();
		var ampm_string = "";

		if ((hours % 12) % 2) {
			ampm_string = locale_info.ampm[1];
			if (!ampm_string) {
				ampm_string = "PM";
			}
		}
		else {
			ampm_string = locale_info.ampm[0];
			if (!ampm_string) {
				ampm_string = "AM";
			}
		}

		return ampm_string;
	};

	delete _pDate;

	nexacro.DataUtils = 
		{
		_undefined_type : 0, 
		_string_type : 1, 
		_int_type : 2, 
		_float_type : 3, 
		_bicdecimal_type : 4, 
		_dete_type : 5, 
		_time_type : 6, 
		_datetime_type : 7, 
		_bolb_type : 8, 
		_variant_type : 9, 

		_typecodes : 
			{
			"1" : 1, 
			"2" : 2, 
			"3" : 3, 
			"4" : 4, 
			"5" : 5, 
			"6" : 6, 
			"7" : 7, 
			"8" : 8, 
			"9" : 9, 
			"string" : 1, 
			"int" : 2, 
			"float" : 3, 
			"double" : 3, 
			"decimal" : 3, 
			"bigdecimal" : 4, 
			"date" : 5, 
			"time" : 6, 
			"datetime" : 7, 
			"blob" : 8, 
			"variant" : 9
		}, 
		_typeint : 
			{
			"string" : 1, 
			"int" : 2, 
			"float" : 3, 
			"double" : 3, 
			"decimal" : 4, 
			"bigdecimal" : 4, 
			"date" : 5, 
			"time" : 6, 
			"datetime" : 7, 
			"blob" : 8, 
			"variant" : 9
		}, 

		_typenames : ["undefined", "STRING", "INT", "DOUBLE", "BIGDECIMAL", "DATE", "TIME", "DATETIME", "BLOB", "VARIANT"
		], 
		_default_sizes : [8, 32, 4, 8, 16, 6, 9, 17, 256, 0
		], 
		_default_values : [undefined, "", 0, 0.0, 0.0, null, null, null, null, null
		], 

		_boolean_values : 
			{
			"false" : false, 
			"False" : false, 
			"FALSE" : false, 
			"no" : false, 
			"No" : false, 
			"NO" : false, 
			"n" : false, 
			"N" : false, 
			"off" : false, 
			"Off" : false, 
			"OFF" : false, 
			"0" : false, 
			"true" : true, 
			"True" : true, 
			"TRUE" : true, 
			"yes" : true, 
			"Yes" : true, 
			"YES" : true, 
			"y" : true, 
			"Y" : true, 
			"on" : true, 
			"On" : true, 
			"ON" : true, 
			"1" : true
		}, 

		_init_date : new Date(0), 
		_max_milliseconds : 100000000 * 24 * 60 * 60 * 1000, 
		_min_milliseconds : -100000000 * 24 * 60 * 60 * 1000, 

		getDefaultValue : function (type) {
			return nexacro.DataUtils._default_values[type.toLowerCase()];
		}, 

		getDefaultSize : function (type) {
			return nexacro.DataUtils._default_sizes[type.toLowerCase()];
		}, 

		toTypeCode : function (type) {
			var n = nexacro.DataUtils._typeint[type.toLowerCase()];
			return (n == null) ? 0 : n;
		}, 

		toTypeName : function (type) {
			var n = nexacro.DataUtils._typenames[type];
			return (n == null) ? "undefined" : n;
		}, 

		findDataType : function (value) {
			if ((typeof value) == "object") {
				return (value instanceof Date) ? 7 : 0;
			}
			var n = nexacro.DataUtils._typenames[value];
			return (n == null) ? 0 : n;
		}, 

		isBinary : function (type) {
			return (type == 12);
		}, 

		toString : function (value) {
			if (value == null) {
				return value;
			}
			if (value instanceof Date) {
				return nexacro.DataUtils._formatDateTime(value);
			}
			return value.toString();
		}, 

		toStringFromText : function (value) {
			return value;
		}, 

		toStringFromXMLText : function (value) {
			return nexacro._decodeXml(value);
		}, 

		toTextFromString : function (value) {
			return value;
		}, 

		toXMLTextFromString : function (value) {
			return nexacro._encodeXml(value);
		}, 

		toInt : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return (value | 0);
			}
		}, 

		toIntFromText : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return (value | 0);
			}
		}, 
		toTextFromInt : function (value) {
			return (value == null) ? undefined : value + "";
		}, 

		toBoolean : function (value) {
			if (typeof value == "string") {
				value = this._boolean_values[value];
			}
			return (value ? true : false);
		}, 
		toBooleanFromText : function (value) {
			value = this._boolean_values[value];
			return (value ? true : false);
		}, 
		toTextFromBoolean : function (value) {
			return (value == null) ? value : value + "";
		}, 

		toFloat : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return (+value);
			}
		}, 
		toFloatFromText : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return (+value);
			}
		}, 
		toTextFromFloat : function (value) {
			return (value == null) ? undefined : (value + "");
		}, 

		toNumber : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return (+value);
			}
		}, 
		toNumberFromText : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return (+value);
			}
		}, 
		toTextFromNumber : function (value) {
			return (value == null) ? undefined : (value + "");
		}, 

		toDecimal : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else if (value instanceof Date) {
				return new nexacro.Decimal(value.getTime());
			}
			return (isFinite(value)) ? new nexacro.Decimal(value) : "";
		}, 
		toDecimalFromText : function (value) {
			if (value == null) {
				return undefined;
			}
			else if (value === "" || isNaN(+value)) {
				return "";
			}
			else {
				return new nexacro.Decimal(value);
			}
		}, 
		toTextFromDecimal : function (value) {
			return (value == null) ? undefined : value.toString();
		}, 

		toDate : function (value) {
			if (value == null || value === undefined) {
				return undefined;
			}
			else if (value === "") {
				return "";
			}

			if ((typeof value) == "string") {
				return nexacro.DataUtils._parseDateTime(value, "DATE");
			}
			if (value instanceof Date) {
				return nexacro.DataUtils._datetimeToDate(value);
			}
			if ((typeof value) == "number") {
				var v = value.toString();
				return nexacro.DataUtils._parseDateTime(v, "DATE");
			}
			if (value instanceof nexacro.Date) {
				return value;
			}
			return null;
		}, 
		toDateFromText : function (value) {
			if (value === undefined) {
				return undefined;
			}

			return (value == "") ? null : nexacro.DataUtils._parseDateTime(value, "DATE");
		}, 
		toTextFromDate : function (value) {
			return (value == null) ? null : nexacro.DataUtils._formatDate(value);
		}, 

		toTime : function (value) {
			if (value == null || value === undefined) {
				return undefined;
			}
			else if (value === "") {
				return "";
			}

			if ((typeof value) == "string") {
				return nexacro.DataUtils._parseDateTime(value, "TIME");
			}
			if (value instanceof Date) {
				return nexacro.DataUtils._datetimeToTime(value);
			}
			if ((typeof value) == "number") {
				var v = value.toString();
				return nexacro.DataUtils._parseDateTime(v, "TIME");
			}
			if (value instanceof nexacro.Date) {
				return value;
			}
			return null;
		}, 
		toTimeFromText : function (value) {
			if (value === undefined) {
				return undefined;
			}

			return (value == "") ? null : nexacro.DataUtils._parseDateTime(value, "TIME");
		}, 
		toTextFromTime : function (value) {
			if (value === null) {
				return null;
			}
			if (value === undefined) {
				return undefined;
			}
			if (value == "") {
				return "";
			}
			return nexacro.DataUtils._formatTime(value);
		}, 

		toDateTime : function (value) {
			if (value == null || value === undefined) {
				return undefined;
			}
			else if (value === "") {
				return "";
			}

			if ((typeof value) == "string") {
				return nexacro.DataUtils._parseDateTime(value, "DATETIME");
			}
			if (value instanceof Date) {
				return nexacro.DataUtils._datetimeToDateTime(value);
			}
			if ((typeof value) == "number") {
				var v = value.toString();
				return nexacro.DataUtils._parseDateTime(v, "DATETIME");
			}
			if (value instanceof nexacro.Date) {
				return value;
			}
			return null;
		}, 
		toDateTimeFromText : function (value) {
			if (value === undefined) {
				return undefined;
			}

			return (value == "") ? null : nexacro.DataUtils._parseDateTime(value, "DATETIME");
		}, 
		toTextFromDateTime : function (value) {
			if (value === null) {
				return null;
			}
			if (value === undefined) {
				return undefined;
			}
			if (value == "") {
				return "";
			}
			return nexacro.DataUtils._formatDateTime(value);
		}, 

		toBlob : function (value) {
			return value;
		}, 
		toBlobFromText : function (value) {
			return value;
		}, 
		toTextFromBlob : function (value) {
			return value;
		}, 

		toVariant : function (value) {
			return value;
		}, 
		toVariantFromText : function (value) {
			return value;
		}, 
		toTextFromVariant : function (value) {
			return (value == null) ? value : (value + "");
		}, 

		convert : function (value, type) {
			switch (type) {
				case 1:
					return this.toString(value);
				case 2:
					return this.toInt(value);
				case 3:
					return this.toFloat(value);
				case 4:
					return this.toDecimal(value);
				case 5:
					return this.toDate(value);
				case 6:
					return this.toTime(value);
				case 7:
					return this.toDateTime(value);
				case 8:
					return this.toBlob(value);
				default:
					return this.toVariant(value);
			}
			return "";
		}, 

		_datetimeToDate : function (datetime) {
			if (datetime instanceof Date) {
				var val = new nexacro.Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate());
				return val;
			}
			else {
				datetime.setHours(0);
				datetime.setMinutes(0);
				datetime.setSeconds(0);
				datetime.setMilliseconds(0);
			}
			return datetime;
		}, 

		_datetimeToDateTime : function (datetime) {
			if (datetime instanceof Date) {
				var val = new nexacro.Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate(), datetime.getHours(), datetime.getMinutes(), datetime.getSeconds(), datetime.getMilliseconds());
				return val;
			}
			else {
				return datetime;
			}
		}, 

		_datetimeToTime : function (datetime) {
			if (datetime instanceof Date) {
				var val = nexacro.DataUtils._toTime(datetime.getHours(), datetime.getMinutes(), datetime.getSeconds(), datetime.getMilliseconds());
				val._timeonly = true;
				return val;
			}
			else {
				datetime.setFullYear(0);
				datetime.setMonth(0);
				datetime.setDate(1);
				return datetime;
			}
		}, 

		_parseDateTime : function (str, cType) {
			str = str.trim();
			cType = cType.toUpperCase();
			switch (cType) {
				case "DATETIME":
					var year = str.substring(0, 4);
					var month = str.substring(4, 6);
					var date = str.substring(6, 8);
					var hour = str.substring(8, 10);
					var minute = str.substring(10, 12);
					var second = str.substring(12, 14);
					var millisecond = str.substring(14, 17);
					if (isNaN(parseInt(year)) || isNaN(parseInt(month)) || isNaN(parseInt(date)) || isNaN(parseInt(hour)) || isNaN(parseInt(minute)) || isNaN(parseInt(second))) {
						return null;
					}
					else if (year && month && date && hour && minute && second) {
						return nexacro.DataUtils._toDateTime(year, month, date, hour, minute, second, millisecond);
					}
					else {
						return null;
					}
				case "DATE":
					var year = str.substring(0, 4);
					var month = str.substring(4, 6);
					var date = str.substring(6, 8);
					if (isNaN(parseInt(year)) || isNaN(parseInt(month)) || isNaN(parseInt(date))) {
						return null;
					}
					else if (year && month && date) {
						return nexacro.DataUtils._toDate(year, month, date);
					}
					else {
						return null;
					}
				case "TIME":
					var hour = str.substring(0, 2);
					var minute = str.substring(2, 4);
					var second = str.substring(4, 6);
					var millisecond = str.substring(6, 9);
					if (isNaN(parseInt(hour)) || isNaN(parseInt(minute)) || isNaN(parseInt(second))) {
						return null;
					}
					else if (hour && minute && second) {
						var date_obj = nexacro.DataUtils._toTime(hour, minute, second, millisecond);
						date_obj._timeonly = true;
						return date_obj;
					}
					else {
						return null;
					}
			}
			return "";
		}, 

		_formatDate : function (datetime) {
			if (!datetime) {
				return undefined;
			}
			return this._leftPad(datetime.getFullYear() * 10000 + (datetime.getMonth() + 1) * 100 + datetime.getDate(), 8);
		}, 
		_formatTime : function (datetime) {
			if (!datetime) {
				return undefined;
			}
			var millsecond = "";
			var ms = datetime.getMilliseconds();
			millsecond = this._leftPad(ms, 3);
			return this._leftPad(datetime.getHours() * 10000 + datetime.getMinutes() * 100 + datetime.getSeconds(), 6) + millsecond;
		}, 
		_formatDateTime : function (datetime) {
			if (isNaN(datetime)) {
				return undefined;
			}
			var yyyymmdd = this._leftPad(datetime.getFullYear() * 10000 + (datetime.getMonth() + 1) * 100 + datetime.getDate(), 8);
			var millsecond = "";
			var ms = datetime.getMilliseconds();
			millsecond = this._leftPad(ms, 3);
			var hhmiss = this._leftPad(datetime.getHours() * 10000 + datetime.getMinutes() * 100 + datetime.getSeconds(), 6) + millsecond;
			return yyyymmdd + hhmiss;
		}, 

		_toDate : function (year, month, date) {
			var val = new nexacro.Date(year, month - 1, date);
			return ((+val) != (+val)) ? undefined : val;
		}, 

		_toTime : function (hour, minute, second, millisecond) {
			var val = new nexacro.Date(0, 0, 1, hour, minute, second, millisecond);
			return ((+val) != (+val)) ? undefined : val;
		}, 

		_toDateTime : function (year, month, date, hour, minute, second, millisecond) {
			var val = new nexacro.Date(year, month - 1, date, hour, minute, second, millisecond);
			return ((+val) != (+val)) ? undefined : val;
		}, 

		_isValidTime : function (time) {
			return (time <= this._max_milliseconds && time >= this._min_milliseconds);
		}, 

		_leftPad : function (value, count) {
			value = value + "";
			var padcnt = count - value.length;
			switch (padcnt) {
				case 0:
					return value;
				case 1:
					return "0" + value;
				case 2:
					return "00" + value;
				case 3:
					return "000" + value;
				case 4:
					return "0000" + value;
				case 5:
					return "00000" + value;
			}
			return value;
		}
	};

	nexacro.ExprParser = function () {
		this.output = [];
		this._itemidx = -1;
		this._itempos = 0;
		this._prevtype = -1;
	};
	_pExprParser = nexacro._createPrototype(nexacro.Object, nexacro.ExprParser);
	nexacro.ExprParser.prototype = _pExprParser;

	_pExprParser.whitespace = nexacro._gen_arrmap("\n\r\t ".split(''));
	_pExprParser.wordchars = nexacro._gen_arrmap("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$".split(''));
	_pExprParser.punct = nexacro._gen_arrmap("+ - * / % & ++ -- = += -= *= /= %= == === != <> !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! !! , : ? ^ ^= |= ::".split(' '));
	_pExprParser.line_starters = nexacro._gen_arrmap("continue,try,throw,return,var,if,switch,case,default,for,while,break,function".split(','));

	_pExprParser.regexp_hanja = /[\u2E80-\u2EFF]|[\u31C0-\u31EF]|[\u3200-\u32FF]|[\u3400-\u4DBF]|[\u4E00-\u9FBF]|[\uF900-\uFAFF]/;
	_pExprParser.regexp_nipon = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u31F0-\u31FF]|[\uFF01-\uFFEF]|[\u3000-\u3002]|[\u300C]|[\u300D]|[\u309B]|[\u309C]|[\u2010-\u201F]/;
	_pExprParser.regexp_greek = /[\u0370-\u03FF]/;
	_pExprParser.regexp_hangul = /[ㄱ-ㅎ]|[ㅏ-ㅣ]|[가-힣]/;
	_pExprParser.regexp_greek = /[\u0370-\u03FF]/;
	_pExprParser.regexp_num = /^[0-9]+[Ee]$/;


	_pExprParser.is_ternary_op = function () {
		var level = 0, colon_count = 0;
		var output = this.output;
		var i = output.length - 1;
		function is_ternary_op_loop () {
			if (i >= 0) {
				switch (output[i]) {
					case ':':
						if (level === 0) {
							colon_count++;
						}
						break;
					case '?':
						if (level === 0) {
							if (colon_count === 0) {
								return true;
							}
							else {
								colon_count--;
							}
						}
						break;
					case '{':
						if (level === 0) {
							return false;
						}
						level--;
						break;
					case '(':
					case '[':
						level--;
						break;
					case ')':
					case ']':
					case '}':
						level++;
						break;
				}
				i--;
				return false;
			}
			return true;
		}
		while (true) {
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
			if (is_ternary_op_loop()) {
				break;
			}
		}
	};

	_pExprParser.append = function (text, type) {
		var output = this.output;
		var cnt = output.length;
		if (type == 2 && this._prevtype == 2) {
			output[cnt - 1].tok += text;
			return;
		}
		if (type == 10) {
			if (this._prevtype == 2) {
				output[cnt - 1].tok += text;
				return;
			}
			else if (cnt == 0) {
				output[cnt] = {
					type : 2, 
					tok : text, 
					pos : -1
				};
				this._prevtype = 1;
				return;
			}
		}
		else if (type == 4) {
			this._itempos = 0;
		}
		else if (type == 5 && this._prevtype == 0) {
			output[cnt - 1].type = 1;
			this._itempos = 0;
		}

		var tok_item = {
			type : type, 
			tok : text, 
			pos : this._itempos
		};

		output[cnt] = tok_item;

		if (type == 10 && this._prevtype == 0) {
			if (this._itempos >= 0) {
				this._itempos++;
			}
		}
		else if (type == 5 || type == 7 || type == 9) {
			this._itempos = 0;
		}
		else if (type == 6 || type == 8) {
			this._itempos = -1;
		}
		this._prevtype = type;
	};

	_pExprParser.tokenizeExpr = function (expr_str) {
		this.input = expr_str;
		var output = this.output;

		var skip_whitespace = true;
		if (expr_str && expr_str.indexOf("(/") > -1) {
			skip_whitespace = false;
		}

		var last_word = "";
		var last_text = "";
		var prev_last_text = "";
		var last_type = -1;

		var src = expr_str + "";
		var src_len = src.length;
		var cur_pos = 0;
		if (cur_pos >= src_len) {
			return 0;
		}

		while (true) {
			if (cur_pos >= src_len) {
				return output.length;
			}

			var c;
			var tok = src.charAt(cur_pos);
			cur_pos++;

			if (skip_whitespace) {
				while (tok in this.whitespace) {
					if (cur_pos >= src_len) {
						return output.length;
					}
					tok = src.charAt(cur_pos);
					cur_pos++;
				}
			}


			var test_whitespace = skip_whitespace ? false : c in this.whitespace;
			if (tok in this.wordchars || test_whitespace || this.regexp_hangul.test(tok) || this.regexp_hanja.test(tok) || this.regexp_nipon.test(tok) || this.regexp_greek.test(tok)) {
				if (cur_pos < src_len) {
					c = src.charAt(cur_pos);
					while (c in this.wordchars || test_whitespace || this.regexp_hangul.test(c) || this.regexp_hanja.test(c) || this.regexp_nipon.test(c) || this.regexp_greek.test(c)) {
						tok += c;
						cur_pos++;
						if (cur_pos >= src_len) {
							break;
						}
						c = src.charAt(cur_pos);
					}
				}

				if (cur_pos < src_len && this.regexp_num.test(tok) && (c === '-' || c === '+')) {
					var sign = src.charAt(cur_pos);
					cur_pos += 1;
					this.parse_pos = cur_pos;
					c = src.charAt(cur_pos);

					while (c in this.wordchars || test_whitespace || this.regexp_hangul.test(c) || this.regexp_hanja.test(c) || this.regexp_nipon.test(c) || this.regexp_greek.test(c)) {
						tok += c;
						cur_pos++;
						if (cur_pos >= src_len) {
							break;
						}
						c = src.charAt(cur_pos);
					}
					this.append(tok, 3);
					continue;
				}

				if (tok == 'in') {
					this.append(tok, 4);
				}
				else {
					var fval = parseFloat(tok);
					if (isFinite(fval)) {
						this.append(tok, 2);
					}
					else {
						this.append(tok, 0);
					}
				}
				continue;
			}
			if (tok == '(') {
				this.append(tok, 5);
				continue;
			}
			if (tok == ')') {
				this.append(tok, 6);
				continue;
			}
			if (tok == '[') {
				this.append(tok, 7);
				continue;
			}
			if (tok == ']') {
				this.append(tok, 8);
				continue;
			}
			if (tok == ',') {
				this.append(tok, 9);
				continue;
			}
			if (tok == '{') {
				this.append(tok, 10);
				continue;
			}
			if (tok == '}') {
				this.append(tok, 11);
				continue;
			}
			if (tok == ';') {
				this.append(tok, 12);
				continue;
			}

			if (tok == "\\") {
				tok += src.charAt(cur_pos);
				cur_pos++;
				this.append(tok, 4);
				continue;
			}


			if (tok == "'" || tok == '"') {
				while (cur_pos < src_len) {
					var sep = tok;
					var esc = false;
					c = src.charAt(cur_pos);
					tok += c;
					cur_pos++;
					while (esc || c != sep) {
						if (!esc) {
							esc = (c == '\\');
						}
						else {
							esc = false;
						}
						c = src.charAt(cur_pos);
						tok += c;
						cur_pos++;
						if (cur_pos >= src_len) {
							break;
						}
					}
					if (c == sep) {
						this.append(tok, 3);
						break;
					}
					return -1;
				}

				continue;
			}

			if (tok == '/') {
				c = src.charAt(cur_pos);
				if (c == '*') {
					tok += c;
					cur_pos++;
					while (cur_pos < src_len) {
						c = src.charAt(cur_pos);
						tok += c;
						cur_pos++;
						if (c == '*') {
							if (cur_pos >= src_len) {
								break;
							}
							c = src.charAt(cur_pos);
							tok += c;
							cur_pos++;
							if (c == '/') {
								continue;
							}
						}
					}
					return -1;
				}

				if (c == '/') {
					tok += c;
					cur_pos++;
					c = src.charAt(cur_pos);
					while (cur_pos < src_len) {
						c = src.charAt(cur_pos);
						if (c == "\r" || c == "\n") {
							cur_pos += 1;
							continue;
						}
						tok += c;
						cur_pos++;
					}
					continue;
				}
				if (nexacro._indexOf([-1, 4, 5, 7, 9], output._prevtype) >= 0) {
					while (cur_pos < src_len) {
						var esc = false;
						var in_char_class = false;
						c = src.charAt(cur_pos);
						tok += c;
						cur_pos++;
						while (esc || in_char_class || c != '/') {
							if (!esc) {
								esc = (c == '\\');
								if (c == '[') {
									in_char_class = true;
								}
								else if (c == ']') {
									in_char_class = false;
								}
							}
							else {
								esc = false;
							}
							c = src.charAt(cur_pos);
							tok += c;
							cur_pos++;
						}
						if (c != '/') {
							return -1;
						}
						c = src.charAt(cur_pos);

						while (cur_pos < src_len && (c in this.wordchars || this.regexp_hangul.test(tok) || this.regexp_hanja.test(tok) || this.regexp_nipon.test(tok) || this.regexp_greek.test(tok))) {
							tok += c;
							cur_pos++;
							c = src.charAt(cur_pos);
						}
						this.append(tok, 3);
						break;
					}
					continue;
				}
			}

			if (tok in this.punct) {
				while (cur_pos < src_len) {
					c = src.charAt(cur_pos);
					if ((tok + c) in this.punct) {
						tok += c;
						cur_pos++;
					}
					else {
						break;
					}
				}
				if (tok.charAt(0) == '=') {
					if (tok != '==' && tok != '===') {
						if (cur_pos >= src_len) {
							return -1;
						}
					}
				}
				this.append(tok, 4);
				continue;
			}

			if (tok == '.') {
				this.append(tok, 10);
				continue;
			}

			if (tok == ' ') {
				this.append(tok, 11);
				continue;
			}

			this.append(tok, 3);

			continue;
		}
	};

	_pExprParser.makeSubExpr = function (ds, from, to) {
		var str = "";
		var output = this.output;
		var len = output.length;
		var colinfos = ds.colinfos;
		var constinfos = ds._constVars;

		var id;
		var i = from;
		function makeSubExpr_loop (pthis) {
			if (i < to) {
				var item = output[i];
				if (i != 0 && item.type == 4) {
					str += item.tok;
				}
				else {
					var new_name = "";
					if (item.type == 0 && item.pos == 0) {
						var id = item.tok;

						if ((colinfos != undefined && id in colinfos) || (constinfos != undefined && id in constinfos)) {
							if (i < (to - 1) && output[i + 1].type == 7) {
								var bcnt = 0;
								var j;
								for (j = i + 2; j < to; j++) {
									if (output[j].type == 7) {
										bcbt++;
									}
									if (output[j].type == 8) {
										if (bcnt == 0) {
											break;
										}
										else {
											bcnt--;
										}
									}
								}
								if (j < to && j > (i + 2)) {
									var substr = pthis.makeSubExpr(ds, i + 2, j);
									if (substr != null) {
										str += "dataset.getColumn(" + substr + ", '" + id + "')";
										i = j;
									}
									else {
										return undefined;
									}
								}
								else {
									return undefined;
								}
							}
							else {
								str += "dataset.getColumn(rowidx, '" + id + "')";
							}
						}
						else if (id == "new") {
							str += id + " ";
						}
						else {
							str += id;
						}
					}
					else {
						str += item.tok;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
			if (makeSubExpr_loop(this)) {
				break;
			}
		}
		return str;
	};


	_pExprParser.makeExpr = function (ds, expr_str) {
		var ret = this.tokenizeExpr(expr_str);
		var str = this.makeSubExpr(ds, 0, this.output.length);
		return str;
	};

	_pExprParser.makeSubEval = function (ds, from, to) {
		var str = "";
		var output = this.output;
		var len = output.length;
		var id;
		var i = from;

		function makeSubEval_loop () {
			if (i < to) {
				var item = output[i];
				if (i != 0 && item.type == 4) {
					str += ' ';
					str += item.tok;
					str += ' ';
				}
				else {
					var new_name = "";
					if (item.type == 0 && item.pos == 0) {
						var id = item.tok;

						if (id == "var") {
						}
						else {
							str += id;
						}
					}
					else if (item.type == 1 && item.pos == 0) {
						var id = item.tok;
						str += id;
					}
					else {
						str += item.tok;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
			if (makeSubEval_loop()) {
				break;
			}
		}

		return str;
	};

	_pExprParser.makeEval = function (ds, expr_str) {
		var ret = this.tokenizeExpr(expr_str);
		var str = this.makeSubEval(ds, 0, this.output.length);
		return str;
	};
	delete _pExprParser;


	nexacro.VariableList = function () {
		nexacro.Collection.call(this);
	};
	var _pVariableList = nexacro._createPrototype(nexacro.Collection, nexacro.VariableList);
	nexacro.VariableList.prototype = _pVariableList;
	_pVariableList._type_name = "VariableList";

	_pVariableList._updateID = function (idx, newID) {
		var colinfo = this[idx];
		if (colinfo != newID) {
			colinfo = newID;
			this[idx] = colinfo;
		}
		return this.update_id(idx, newID);
	};

	_pVariableList.deleteItem = function (id) {
		return this.delete_item(id);
	};

	delete _pVariableList;

	nexacro.DSColumnInfo = function (id, strtype, type, size, prop, sumtext, idx) {
		this.id = id;
		this.name = id;
		this.type = strtype;
		this.ntype = type;
		this.size = size;
		this.prop = prop;
		this.sumtext = sumtext;
		this._index = idx;

		switch (type) {
			case 1:
				this._toText = nexacro.DataUtils.toTextFromString;
				this._fromText = nexacro.DataUtils.toStringFromText;
				this._fromVal = nexacro.DataUtils.toString;
				this._toXMLText = nexacro.DataUtils.toXMLTextFromString;
				this._fromXMLText = nexacro.DataUtils.toStringFromXMLText;
				break;
			case 2:
				this._toText = nexacro.DataUtils.toTextFromInt;
				this._fromText = nexacro.DataUtils.toIntFromText;
				this._fromVal = nexacro.DataUtils.toInt;
				this._toXMLText = nexacro.DataUtils.toTextFromInt;
				this._fromXMLText = nexacro.DataUtils.toIntFromText;
				break;
			case 3:
				this._toText = nexacro.DataUtils.toTextFromFloat;
				this._fromText = nexacro.DataUtils.toFloatFromText;
				this._fromVal = nexacro.DataUtils.toFloat;
				this._toXMLText = nexacro.DataUtils.toTextFromFloat;
				this._fromXMLText = nexacro.DataUtils.toFloatFromText;
				break;
			case 4:
				this._toText = nexacro.DataUtils.toTextFromDecimal;
				this._fromText = nexacro.DataUtils.toDecimalFromText;
				this._fromVal = nexacro.DataUtils.toDecimal;
				this._toXMLText = nexacro.DataUtils.toTextFromDecimal;
				this._fromXMLText = nexacro.DataUtils.toDecimalFromText;
				break;
			case 5:
				this._toText = nexacro.DataUtils.toTextFromDate;
				this._fromText = nexacro.DataUtils.toDateFromText;
				this._fromVal = nexacro.DataUtils.toDate;
				this._toXMLText = nexacro.DataUtils.toTextFromDate;
				this._fromXMLText = nexacro.DataUtils.toDateFromText;
				break;
			case 6:
				this._toText = nexacro.DataUtils.toTextFromTime;
				this._fromText = nexacro.DataUtils.toTimeFromText;
				this._fromVal = nexacro.DataUtils.toTime;
				this._toXMLText = nexacro.DataUtils.toTextFromTime;
				this._fromXMLText = nexacro.DataUtils.toTimeFromText;
				break;
			case 7:
				this._toText = nexacro.DataUtils.toTextFromDateTime;
				this._fromText = nexacro.DataUtils.toDateTimeFromText;
				this._fromVal = nexacro.DataUtils.toDateTime;
				this._toXMLText = nexacro.DataUtils.toTextFromDateTime;
				this._fromXMLText = nexacro.DataUtils.toDateTimeFromText;
				break;
			case 8:
				this._toText = nexacro.DataUtils.toTextFromBlob;
				this._fromText = nexacro.DataUtils.toBlobFromText;
				this._fromVal = nexacro.DataUtils.toBlob;
				this._toXMLText = nexacro.DataUtils.toTextFromBlob;
				this._fromXMLText = nexacro.DataUtils.toBlobFromText;
				break;
			default:
				this._toText = nexacro.DataUtils.toTextFromvariant;
				this._fromText = nexacro.DataUtils.toVariantFromText;
				this._fromVal = nexacro.DataUtils.toVariant;
				this._toXMLText = nexacro.DataUtils.toTextFromvariant;
				this._fromXMLText = nexacro.DataUtils.toVariantFromText;
				break;
		}
	};

	var _pDSColumnInfo = nexacro._createPrototype(nexacro.Object, nexacro.DSColumnInfo);
	nexacro.DSColumnInfo.prototype = _pDSColumnInfo;
	_pDSColumnInfo._type_name = "DSColumnInfo";

	_pDSColumnInfo.set_size = function (v) {
		v = parseInt(v) | 0;
		if (this.size != v) {
			if (!((+v) != (+v))) {
				this.size = v;
			}
		}
	};

	_pDSColumnInfo.set_type = function (v) {
		v = nexacro._toString(v);
		if (this.type != v) {
			this.type = v;
			this.ntype = nexacro.DataUtils._typeint[v.toLowerCase()];
		}
	};

	_pDSColumnInfo.set_prop = function (v) {
		v = nexacro._toString(v);
		if (this.prop != v) {
			this.prop = v;
		}
	};

	_pDSColumnInfo.set_sumtext = function (v) {
		v = nexacro._toString(v);
		if (this.sumtext != v) {
			this.sumtext = v;
		}
	};

	delete _pDSColumnInfo;

	nexacro.DSColumnInfoList = function () {
		nexacro.Collection.apply(this);
	};
	var _pDSColumnInfoList = nexacro._createPrototype(nexacro.Collection, nexacro.DSColumnInfoList);
	nexacro.DSColumnInfoList.prototype = _pDSColumnInfoList;
	_pDSColumnInfoList._type_name = "DSColumnInfoList";

	_pDSColumnInfoList._updateID = function (idx, newID) {
		var colinfo = this[idx];
		if (colinfo.id != newID) {
			colinfo.set_id(newID);
			this[idx] = colinfo;
		}
		return this.update_id(idx, newID);
	};

	_pDSColumnInfoList.deleteItem = function (id) {
		return this.delete_item(id);
	};
	delete _pDSColumnInfoList;

	nexacro.DSColChangeEventInfo = function (obj, id, row, col, colidx, columnid, oldvalue, newvalue) {
		this.id = this.eventid = id || "oncolumnchanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.row = row;
		this.col = col;
		this.colidx = colidx;
		this.columnid = columnid;
		this.oldvalue = oldvalue;
		this.newvalue = newvalue;
	};
	var _pDSColChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DSColChangeEventInfo);
	nexacro.DSColChangeEventInfo.prototype = _pDSColChangeEventInfo;
	_pDSColChangeEventInfo._type_name = "DSColChangeEventInfo";

	delete _pDSColChangeEventInfo;


	nexacro.DSLoadEventInfo = function (obj, id, errorcode, errormsg, reason) {
		this.id = this.eventid = id || "onload";
		this.fromobject = this.fromreferenceobject = obj;

		this.errorcode = errorcode;
		this.errormsg = errormsg;
		this.reason = reason;
	};
	var _pDSLoadEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DSLoadEventInfo);
	nexacro.DSLoadEventInfo.prototype = _pDSLoadEventInfo;
	_pDSLoadEventInfo._type_name = "DSLoadEventInfo";

	delete _pDSLoadEventInfo;

	nexacro.DSRowPosChangeEventInfo = function (obj, id, oldRow, newRow, reason) {
		this.id = this.eventid = id || "onrowposchanged";
		this.fromobject = this.fromreferenceobject = obj;
		this.newrow = newRow;
		this.oldrow = oldRow;
		this.reason = reason;
	};
	var _pDSRowPosChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DSRowPosChangeEventInfo);
	nexacro.DSRowPosChangeEventInfo.prototype = _pDSRowPosChangeEventInfo;
	_pDSRowPosChangeEventInfo._type_name = "DSRowPosChangeEventInfo";

	delete _pDSRowPosChangeEventInfo;

	nexacro.DSRowsetChangeEventInfo = function (obj, id, row, count, reason) {
		this.id = this.eventid = id || "onrowsetchanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.row = row;
		this.count = count;
		this.reason = reason;
	};
	var _pDSRowsetChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DSRowsetChangeEventInfo);
	nexacro.DSRowsetChangeEventInfo.prototype = _pDSRowsetChangeEventInfo;
	_pDSRowsetChangeEventInfo._type_name = "DSRowsetChangeEventInfo";

	delete _pDSRowsetChangeEventInfo;

	nexacro.Dataset = function (id, parent) {
		this.id = this.name = id;
		if (parent) {
			this.parent = parent;
		}

		this.colinfos = new nexacro.DSColumnInfoList();
		this.colcount = 0;
		this.constcount = 0;
		this.rowcount = 0;
		this.rowposition = -1;

		this.loadstatus = false;
		this.enableevent = true;

		this.updatecontrol = true;
		this.keystring = "";

		this.filterstr = "";

		this.loadkeymode = "keep";
		this.loadfiltermode = "keep";
		this.reversesubsum = false;
		this.arguments = "";

		this.firefirstcount = 0;
		this.firenextcount = 0;
		this.useclientlayout = false;

		this._event_list = {
			"onload" : 1, 
			"cancolumnchange" : 1, 
			"oncolumnchanged" : 1, 
			"onvaluechanged" : 1, 
			"canrowposchange" : 1, 
			"onrowposchanged" : 1, 
			"onrowsetchanged" : 1
		};


		this._constVars = new nexacro.VariableList();
		this._constVars2 = new nexacro.VariableList();
		this._rawRecords = [];
		this._viewRecords = this._rawRecords;
		this._deletedRecords = [];
		this._onworkcompleted = new nexacro.EventListener("onworkcompleted");
		this._is_loaded = false;

		this._keycols = [];
		this._keycols.max_keylevel = 0;

		this._exprFuncs = {
		};

		this._defaultKeyStr = "";
		this._defaultFilterStr = "";
		this._eventstat = true;
		this._deleteRows = [];
	};

	var _pDataset = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.Dataset);
	nexacro.Dataset.prototype = _pDataset;
	_pDataset._type_name = "Dataset";
	_pDataset._isData = true;

	nexacro.Dataset.LOADMODE_KEEP = 0;
	nexacro.Dataset.LOADMODE_RESET = 1;

	nexacro.Dataset._LOADMODE_ENUM = 
		{
		"keep" : 0, 
		"reset" : 1
	};

	_pDataset.on_created = function () {
	};

	_pDataset.destroy = function () {
		if (this.colinfos) {
			this.colinfos.clear();
			delete this.colinfos;
			this.colinfos = null;
		}

		if (this._constVars) {
			this._constVars.clear();
			delete this._constVars;
			this._constVars = null;
		}

		if (this._constVars2) {
			this._constVars2.clear();
			delete this._constVars2;
			this._constVars2 = null;
		}

		if (this._onworkcompleted) {
			this._onworkcompleted._clearAll();
			delete this._onworkcompleted;
			this._onworkcompleted = null;
		}

		this._rawRecords = null;
		this._viewRecords = null;
		this._deletedRecords = null;
		this._keycols = null;
		this._deleteRows = null;

		this._event_list = null;
		this._exprFuncs = null;

		nexacro.EventSinkObject.prototype.destroy.call(this);
	};

	_pDataset.set_name = function (v) {
		this.id = this.name = v;
	};

	_pDataset.set_enableevent = function (v) {
		v = nexacro._toBoolean(v);
		if (this.enableevent != v) {
			this.enableevent = v;
			this._eventstat = (v && !this.loadstatus);
			if (v) {
				this.on_fire_onrowsetchanged(-1, -1, 41);
				if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
					var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
					this.on_fire_onvaluechanged(evt);
				}
			}
		}
	};

	_pDataset.set_updatecontrol = function (v) {
		this.updatecontrol = nexacro._toBoolean(v);
	};

	_pDataset.set_rowposition = function (v) {
		v = parseInt(v, 10) | 0;
		if (isFinite(v)) {
			this._setRowPosition(v, undefined, 51);
		}
		return this.rowposition;
	};

	_pDataset.colinfos = null;

	_pDataset.set_keystring = function (v) {
		v = v ? v.toString() : "";

		if (v != this.keystring) {
			this.keystring = v;
			this.on_apply_keystring();
		}
		return this.keystring;
	};

	_pDataset.on_apply_keystring = function () {
		this.updateSortGroup(this.keystring, true);
	};

	_pDataset.set_filterstr = function (v) {
		var str = v.toString();

		if (str != this.filterstr) {
			this.filter(str);
		}
		return this.filterstr;
	};

	_pDataset.set_loadkeymode = function (v) {
		if (this.loadkeymode != v) {
			this.loadkeymode = v;
		}
	};

	_pDataset.set_loadfiltermode = function (v) {
		if (this.loadfiltermode != v) {
			this.loadfiltermode = v;
		}
	};

	_pDataset.set_reversesubsum = function (v) {
		v = nexacro._toBoolean(v);
		if (this.reversesubsum != v) {
			this.reversesubsum = v;
			this.on_apply_reversesubsum();
		}
	};

	_pDataset.on_apply_reversesubsum = function () {
		if (this.keystring) {
			this.updateSortGroup(this.keystring);
		}
	};

	_pDataset.set_useclientlayout = function (v) {
		if (v == false || v == 0 || v == "false") {
			this.useclientlayout = false;
		}
		else {
			this.useclientlayout = true;
		}
	};

	_pDataset.on_fire_onload = function (errcode, errmsg, reason) {
		var event = this.onload;
		if (event && event._has_handlers) {
			var evt = new nexacro.DSLoadEventInfo(this, "onload", errcode, errmsg, reason);
			event._fireEvent(this, evt);
		}
	};

	_pDataset.on_fire_onrowsetchanged = function (row, count, reason) {
		var event = this.onrowsetchanged;
		if (event && event._has_handlers) {
			var evt = new nexacro.DSRowsetChangeEventInfo(this, "onrowsetchanged", row, count, reason);
			event._fireEvent(this, evt);
		}
	};

	_pDataset.on_fire_canrowposchange = function (evt) {
		var event = this.canrowposchange;
		if (event && event._has_handlers) {
			evt.eventid = "canrowposchange";
			var ret = event._fireCheckEvent(this, evt);
			if (ret === undefined) {
				ret = true;
			}

			ret = nexacro._toBoolean(ret);

			if (ret) {
				this.rowposition = evt.newrow;
			}
			return ret;
		}
		return true;
	};

	_pDataset.on_fire_onrowposchanged = function (evt) {
		var event = this.onrowposchanged;
		if (event && event._has_handlers) {
			evt.eventid = "onrowposchanged";
			event._fireEvent(this, evt);
		}
	};

	_pDataset.on_fire_cancolumnchange = function (evt) {
		var event = this.cancolumnchange;
		if (event && event._has_handlers) {
			if (!event._firestat) {
				evt.eventid = "cancolumnchange";
				event._firestat = true;
				var ret = event._fireCheckEvent(this, evt);
				event._firestat = false;
				return (ret == undefined) ? true : ret;
			}
			else if (event._firestat) {
			}
			else {
				return false;
			}
		}
		return true;
	};

	_pDataset.on_fire_oncolumnchanged = function (evt) {
		var event = this.oncolumnchanged;
		if (event && event._has_handlers) {
			if (!event._firestat) {
				event._firestat = true;
				evt.eventid = "oncolumnchanged";
				event._fireEvent(this, evt);
				event._firestat = false;
			}
			else {
				evt.eventid = "oncolumnchanged";
				event._fireEvent(this, evt, true);
			}
		}
	};

	_pDataset.on_fire_onvaluechanged = function (evt) {
		var event = this.onvaluechanged;
		if (event && event._has_handlers) {
			evt.eventid = "onvaluechanged";
			event._fireEvent(this, evt);
		}
	};

	_pDataset.clear = function () {
		var oldpos = this.rowposition;
		var _count = this.rowcount;
		this._clearAll();

		if (this._eventstat) {
			this.on_fire_onrowsetchanged(-1, -1, 24);
			if (oldpos >= 0 && oldpos == this.rowposition) {
				this._forcesetRowPosition(-1, 51);
			}
		}
		else {
			this.rowposition = -1;
		}
		return _count;
	};

	_pDataset.getColCount = function () {
		return this.colcount;
	};

	_pDataset.getConstCount = function () {
		return this._constVars.length;
	};

	_pDataset.getRowCount = function () {
		return this._viewRecords.length;
	};

	_pDataset.getDeletedRowCount = function () {
		return this._deletedRecords.length;
	};

	_pDataset.getDeletedRowset = function () {
		return this._deletedRecords;
	};

	_pDataset.addConstColumn = function (id, value) {
		var idx = this._addConstColumn(id, value);
		if (idx >= 0 && this._eventstat) {
			this.on_fire_onrowsetchanged(-1, -1, 34);
		}
		return idx;
	};

	_pDataset.addColumn = function (id, type, size) {
		var idx = this._addColumn(id, type, size);
		if (idx >= 0) {
			this._clearAllExprs();
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(-1, -1, 34);
			}
		}
		return idx;
	};

	_pDataset.addColumnInfo = function (id, colinfo) {
		var idx = this._addColumnInfo(id, colinfo);
		if (idx >= 0) {
			this._clearAllExprs();
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(-1, -1, 34);
			}
		}
		return idx;
	};

	_pDataset.appendColList = function (collist) {
		var cnt = this._appendColList(collist);
		if (cnt > 0) {
			this._clearAllExprs();
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(-1, -1, 34);
			}
		}
		return cnt;
	};

	_pDataset.deleteColumn = function (id) {
		var _colinfos = this.colinfos;
		var idx = _colinfos ? _colinfos.indexOf(id) : -1;
		if (idx === undefined) {
			if (typeof (id) == "number") {
				idx = id;
			}
			else {
				idx = -1;
			}
		}
		var _index = idx != -1 ? _colinfos[idx]._index : -1;
		var deleted = this._deleteColumn(id);
		if (deleted) {
			if (idx >= 0) {
				var len = _colinfos.length;
				var _preIndex = -1;
				for (var i = idx; i < len; i++) {
					_preIndex = _colinfos[i]._index;
					_colinfos[i]._index = _index;
					_index = _preIndex;
				}

				len = this._rawRecords ? this._rawRecords.length : 0;
				for (var i = 0; i < len; i++) {
					this._rawRecords[i].splice(idx, 1);
					this._rawRecords[i]._orgcolstrings.splice(idx, 1);
				}
			}

			this._clearAllExprs();
			var ColCnt = this._constVars.length + _colinfos.length;
			var oldRowPos = this.rowposition;
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(-1, -1, 34);
				if (ColCnt == 0 && oldRowPos >= 0) {
					this._forcesetRowPosition(-1, 51);
				}
			}
			else if (ColCnt == 0 && oldRowPos >= 0) {
				this.rowposition = -1;
			}
		}
		return deleted;
	};

	_pDataset.getColID = function (idx) {
		if ((+idx) != (+idx)) {
			idx = 0;
		}

		if (idx >= this.colinfos.length) {
			return this._constVars.get_id(idx - this.colinfos.length);
		}
		else {
			return this.colinfos.get_id(idx);
		}
	};

	_pDataset.getConstColID = function (idx) {
		if ((+idx) != (+idx)) {
			idx = 0;
		}
		return this._constVars.get_id(idx);
	};

	_pDataset.getColumnInfo = function (idx) {
		if (typeof (idx) == "string") {
			if (this.colinfos.indexOf(idx) > -1) {
				return this.colinfos[idx];
			}
		}
		else {
			if ((+idx) != (+idx) || idx == undefined) {
				idx = 0;
			}
			return (this.colinfos[idx] == undefined) ? null : this.colinfos[idx];
		}
		return null;
	};

	_pDataset.updateColID = function (idx, newID) {
		if (typeof (idx) == "string") {
			if (this.colinfos.indexOf(idx) > -1) {
				idx = this.colinfos.indexOf(idx);
			}
			else if (this._constVars.indexOf(idx) > -1) {
				return this.updateConstColID(idx, newID);
			}
			else {
				return -1;
			}
		}
		else {
			if ((+idx) != (+idx) || idx == undefined) {
				idx = 0;
			}
			if (!this.colinfos[idx]) {
				var constCol = idx - this.colinfos.length;
				if (this._constVars[constCol]) {
					return this.updateConstColID(constCol, newID);
				}
				else {
					return -1;
				}
			}
		}

		var updated = this.colinfos._updateID(idx, newID);
		if (updated && this._eventstat) {
			this.on_fire_onrowsetchanged(-1, -1, 34);
			var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
			this.on_fire_onvaluechanged(evt);
			return idx;
		}
		return -1;
	};

	_pDataset.updateConstColID = function (idx, newID) {
		if (typeof (idx) == "string") {
			if (this._constVars.indexOf(idx) > -1) {
				idx = this._constVars.indexOf(idx);
			}
			else {
				return -1;
			}
		}
		else {
			if ((+idx) != (+idx) || idx == undefined) {
				idx = 0;
			}
			if (!this._constVars[idx]) {
				return -1;
			}
		}

		var updated = this._constVars._updateID(idx, newID);
		if (updated && this._eventstat) {
			this.on_fire_onrowsetchanged(-1, -1, 34);
			var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
			this.on_fire_onvaluechanged(evt);
			return idx;
		}
		return -1;
	};

	_pDataset.addRow = function () {
		if (this.colinfos.length <= 0) {
			return -1;
		}
		var rtype = this.updatecontrol ? 2 : 1;
		var idx = this._appendRow(rtype);
		if (idx >= 0) {
			var oldpos = this.rowposition;
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(idx, 1, 12);
			}

			if (oldpos == this.rowposition) {
				this._setRowPosition(idx, undefined, 51);
			}
		}
		return idx;
	};

	_pDataset.insertRow = function (row) {
		if (row < 0) {
			return row;
		}

		if (isNaN(row)) {
			row = 0;
		}

		var rtype = this.updatecontrol ? 2 : 1;
		var idx = this._insertRow(row, rtype);
		if (idx >= 0) {
			var oldpos = this.rowposition;
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(idx, 1, 12);
			}

			if (oldpos == this.rowposition) {
				this._setRowPosition(idx, undefined, 51, true);
			}
		}
		return idx;
	};

	_pDataset.deleteRow = function (row) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			if (row < 0 || row >= this.rowcount) {
				return false;
			}
		}

		var idx = this._deleteRow(row);
		if (idx >= 0) {
			if (this._eventstat) {
				var oldpos = this.rowposition;

				this.on_fire_onrowsetchanged(idx, 1, 20);
				var setpos = this.rowposition;

				if (oldpos == setpos) {
					if (setpos > idx) {
						this._setRowPosition(setpos - 1, undefined, 52);
					}
					else if (setpos == idx) {
						if (this.rowcount == 0) {
							this._forcesetRowPosition(-1, 51);
						}
						else {
							if (setpos == this.rowcount) {
								this._forcesetRowPosition(this.rowcount - 1, 51);
							}
							else {
								this._setRowPosition(setpos, undefined, 53, true);
							}
						}
					}
				}
			}
			else {
				var oldpos = this.rowposition;
				var setpos = this.rowposition;

				if (setpos > idx) {
					this.rowposition = setpos - 1;
				}
				else if (setpos == idx) {
					if (this.rowcount == 0) {
						this.rowposition = -1;
					}
					else {
						if (setpos == this.rowcount) {
							this.rowposition = this.rowcount - 1;
						}
					}
				}
			}
		}

		return idx >= 0 ? true : false;
	};

	_pDataset.moveRow = function (oldrow, newrow) {
		if ((+oldrow) != (+oldrow)) {
			oldrow = 0;
		}
		else {
			if (oldrow < 0 || oldrow >= this.rowcount) {
				return -1;
			}
		}

		if ((+newrow) != (+newrow)) {
			newrow = 0;
		}
		else {
			if (newrow < 0) {
				return -1;
			}
		}

		var idx = this._moveRow(oldrow, newrow);
		if (idx >= 0 && this._eventstat) {
			var oldpos = this.rowposition;
			var from, cnt;
			if (oldrow > newrow) {
				from = newrow;
				cnt = (oldrow - newrow + 1);
			}
			else {
				from = oldrow;
				cnt = (newrow - oldrow + 1);
			}
			this.on_fire_onrowsetchanged(from, cnt, 32);

			if (oldpos == this.rowposition) {
				if (oldpos == oldrow) {
					this._setRowPosition(newrow, undefined, 52);
				}
				else if (oldrow > newrow && oldpos >= newrow && oldpos < oldrow) {
					this._setRowPosition(oldpos + 1, undefined, 52);
				}
				else if (oldrow < newrow && oldpos > oldrow && oldpos < newrow) {
					this._setRowPosition(oldpos - 1, undefined, 52);
				}
			}
		}
		return idx;
	};

	_pDataset.exchangeRow = function (row1, row2) {
		if ((+row1) != (+row1)) {
			row1 = 0;
		}
		else {
			if (row1 < 0 || row1 >= this.rowcount) {
				return false;
			}
		}

		if ((+row2) != (+row2)) {
			row2 = 0;
		}
		else {
			if (row2 < 0 || row2 >= this.rowcount) {
				return false;
			}
		}

		if (this._exchangeRow(row1, row2) && this._eventstat) {
			var oldpos = this.rowposition;
			this.on_fire_onrowsetchanged(row1, 1, 33);
			this.on_fire_onrowsetchanged(row2, 1, 33);

			if (oldpos == this.rowposition) {
				if (oldpos == row1) {
					this._setRowPosition(row2, undefined, 52);
				}
				else if (oldpos == row2) {
					this._setRowPosition(row1, undefined, 52);
				}
			}
			return true;
		}
		return false;
	};

	_pDataset.deleteAll = function () {
		var oldpos = this.rowposition;
		var cnt = this._deleteAll();
		if (cnt > 0 && this._eventstat) {
			this.on_fire_onrowsetchanged(-1, -1, 22);

			if (oldpos == this.rowposition) {
				this._forcesetRowPosition(-1, 51);
			}
		}
		return cnt;
	};

	_pDataset.clearData = function () {
		var oldpos = this.rowposition;
		var cnt = this._clearData();
		if (cnt > 0 && this._eventstat) {
			this.on_fire_onrowsetchanged(-1, -1, 23);

			if (oldpos >= 0 && oldpos == this.rowposition) {
				this._forcesetRowPosition(-1, 51);
			}
		}
		else {
			this.rowposition = -1;
		}
		return cnt;
	};

	_pDataset.deleteMultiRows = function (del_rows) {
		if (typeof (del_rows) != "object") {
			return 0;
		}

		var oldpos = this.rowposition;
		var newrowData = this._viewRecords[oldpos];
		del_rows.sort(function (l, r) {
			return l - r;
		});

		var cnt = this._deleteMultiRows(del_rows);
		if (cnt > 0) {
			this.rowcount -= cnt;
			var oldIdx = -1;
			if (newrowData != null) {
				oldIdx = nexacro._indexOf(this._viewRecords, newrowData);
			}
			if (this._eventstat) {
				this._deleteRows = del_rows;
				this.on_fire_onrowsetchanged(-1, cnt, 20);

				if (oldpos == this.rowposition) {
					if (oldpos > oldIdx) {
						if (this.rowcount <= 0) {
							this._forcesetRowPosition(-1, 51);
						}
						else if (oldIdx == -1) {
							if (oldpos < this.rowcount) {
								this._setRowPosition(oldpos, undefined, 53);
								if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
									var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
									this.on_fire_onvaluechanged(evt);
								}
							}
							else {
								this._forcesetRowPosition(this.rowcount - 1, 51);
							}
						}
						else {
							this._setRowPosition(oldIdx, undefined, 52);
						}
					}
				}
			}
			else {
				this.rowposition = oldIdx;
			}
		}
		return cnt;
	};

	_pDataset.filterRow = function (row) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			if (row < 0 || row >= this.rowcount) {
				return;
			}
		}
		var oldpos = this.rowposition;
		var flag = this._filterRow(row);
		if (flag) {
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(row, 1, 31);

				if (oldpos == this.rowposition) {
					if (oldpos > row) {
						this._setRowPosition(oldpos - 1, undefined, 52);
					}
					else if (oldpos == row) {
						if (this.rowcount == 0) {
							this._forcesetRowPosition(-1, 51);
						}
						else {
							if (oldpos == this.rowcount) {
								this._forcesetRowPosition(this.rowcount - 1, 51);
							}
							else {
								this._setRowPosition(oldpos, undefined, 53);
							}
						}
					}
				}
			}
			else {
				if (oldpos > row) {
					this.rowposition = (oldpos - 1);
				}
				else if (oldpos == row) {
					if (oldpos > this.rowcount) {
						oldpos = this.rowcount - 1;
					}
					this.rowposition = oldpos;
				}
			}
		}
	};

	_pDataset.getRowType = function (row) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			row = (+row) | 0;
			if (row < 0 || row >= this.rowcount) {
				return 0;
			}
		}

		var view = this._viewRecords;
		return view[row]._rtype;
	};

	_pDataset.getRowLevel = function (row) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			if (row < 0 || row >= this.rowcount) {
				return 0;
			}
		}
		var view = this._viewRecords;
		return view[row]._level;
	};

	_pDataset.getGroupRangeStart = function (row) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			if (row < 0 || row >= this.rowcount) {
				return -1;
			}
		}
		var view = this._viewRecords;
		if (view[row]._rtype == 16) {
			return view[row]._grpstart;
		}
		else {
			return row;
		}
	};

	_pDataset.getGroupRangeCount = function (row) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			if (row < 0 || row >= this.rowcount) {
				return 0;
			}
		}
		var view = this._viewRecords;
		if (view[row]._rtype == 16) {
			return view[row]._grpend - view[row]._grpstart;
		}
		else {
			return 1;
		}
	};

	_pDataset.setRowType = function (row, type) {
		if ((+row) != (+row)) {
			row = 0;
		}
		else {
			if (row < 0 || row >= this.rowcount) {
				return false;
			}
		}

		var view = this._viewRecords;
		if (type == null || this.updatecontrol == true) {
			return false;
		}

		var newtype = -1;
		switch (type) {
			case 0:
			case 1:
			case 2:
			case 4:
			case 8:
			case 16:
				newtype = type;
				break;
			default:
				switch (type.toString().toUpperCase()) {
					case 'E':
						newtype = 0;
						break;
					case 'I':
						newtype = 2;
						break;
					case 'U':
						newtype = 4;
						break;
					case 'D':
						newtype = 8;
						break;
					case 'G':
						newtype = 16;
						break;
					default:
						newtype = 1;
						break;
				}
		}

		if (newtype == -1) {
			return false;
		}

		if (view[row]._rtype != newtype) {
			if (view[row]._rtype == 4) {
				if (view[row]._orgrow) {
					delete view[row]["_orgrow"];
				}
			}

			if (newtype == 4) {
				var orgrowData = [];
				var cnt = view[row].length;
				for (var i = 0; i < cnt; i++) {
					orgrowData[i] = view[row][i];
				}
				view[row]._orgrow = orgrowData;
			}
		}

		view[row]._rtype = newtype;
		if (this.enableevent) {
			this.on_fire_onrowsetchanged(row, 1, 40);
		}
		return true;
	};

	_pDataset.getConstColumn = function (id) {
		if (typeof (id) == "string") {
			if (this._constVars.indexOf(id) > -1) {
				return this._constVars.get_item(id);
			}
		}
		else {
			if ((+id) != (+id) || id == undefined) {
				id = 0;
			}
			return this._constVars.get_item(id);
		}
	};

	_pDataset.getColumn = function (row, col) {
		if ((+row) != (+row)) {
			row = 0;
		}

		var nrow = row;
		var colinfo;

		if (typeof (col) != "string") {
			if ((+col) != (+col) || col == undefined) {
				col = 0;
			}
			colinfo = this.colinfos[col];
			if (colinfo == null) {
				if (typeof (col) == "number") {
					col -= this.colinfos.length;
				}
				return this._constVars[col];
			}
		}
		else {
			if (this.colinfos.indexOf(col) > -1) {
				colinfo = this.colinfos[col];
			}
			else if (this._constVars.indexOf(col) > -1) {
				return this._constVars[col];
			}
			else {
				return;
			}
		}

		var rowData = this._viewRecords[nrow];
		if (rowData == null) {
			return undefined;
		}

		var rtnVal = rowData[colinfo._index];
		if ((colinfo.type == "datetime" || colinfo.type == "DATETIME") && rtnVal) {
			return rtnVal;
		}

		return rowData[colinfo._index];
	};

	_pDataset.getColumnSet = function (row, col, pivotidx) {
		return null;
	};

	_pDataset.getOrgColumn = function (row, col) {
		if ((+row) != (+row)) {
			row = 0;
		}

		if (typeof (col) == "string") {
			if (this.colinfos.indexOf(col) > -1) {
			}
			else if (this._constVars.indexOf(col) > -1) {
				return this._constVars[col];
			}
			else {
				return;
			}
		}
		else {
			if ((+col) != (+col) || col == undefined) {
				col = 0;
			}
		}
		var colinfo = this.colinfos[col];

		if (colinfo == undefined) {
			return;
		}

		var rowData = this._viewRecords[row];
		if (rowData == null) {
			return undefined;
		}
		return rowData._orgrow ? rowData._orgrow[colinfo._index] : rowData[colinfo._index];
	};

	_pDataset.getDeletedColumn = function (row, col) {
		row = parseInt(row, 10) | 0;
		if ((+row) != (+row)) {
			row = 0;
		}

		if (row < 0 || row >= this._deletedRecords.length) {
			return undefined;
		}

		row += 1;
		var i;
		var len = this._rawRecords.length;
		var rowData;
		for (i = 0; i < len && row > 0; i++) {
			if (this._rawRecords[i]._rtype == 8) {
				rowData = this._rawRecords[i];
				row--;
			}
		}

		if (typeof (col) == "string") {
			if (this.colinfos.indexOf(col) > -1) {
				col = this.colinfos.indexOf(col);
			}
			else {
				return;
			}
		}
		else {
			if ((+col) != (+col) || col == undefined) {
				col = 0;
			}
		}

		if (rowData == null) {
			return undefined;
		}
		return rowData[col];
	};

	_pDataset.setConstColumn = function (id, value) {
		var varList = this._constVars;
		var idx;
		var conidx = varList.indexOf(id);
		if (typeof (id) == "string") {
			if (conidx < 0 || conidx == undefined) {
				return false;
			}
			else {
				idx = conidx;
			}
		}
		else {
			if ((+id) != (+id) || id == undefined) {
				id = 0;
			}
			if (id < 0 || id >= varList.length) {
				return false;
			}
			else {
				idx = id;
			}
		}

		if (this._eventstat && ((this.cancolumnchange && this.cancolumnchange._has_handlers) || (this.oncolumnchanged && this.oncolumnchanged._has_handlers) || (this.onvaluechanged && this.onvaluechanged._has_handlers))) {
			var oldVal = varList[idx];
			if (value == oldVal) {
				return false;
			}
			var colid = varList.get_id(idx);
			var evt = new nexacro.DSColChangeEventInfo(this, "cancolumnchange", -1, idx + this.colinfos.length, -1, colid, oldVal, value);

			if (this.on_fire_cancolumnchange(evt)) {
				value = evt.newvalue;
				if (value != oldVal) {
					varList.set_item(idx, value);
					this.on_fire_oncolumnchanged(evt);
					this.on_fire_onvaluechanged(evt);
					return true;
				}
			}
			return false;
		}
		else {
			varList.set_item(idx, value);
			return true;
		}
	};

	_pDataset.setColumn = function (row, col, value) {
		return this._setColumn(row, col, value, null);
	};

	_pDataset._setColumn = function (row, col, value, fail) {
		var _in_val = value;

		var nrow = row;
		if ((+nrow) != (+nrow)) {
			nrow = 0;
		}
		else {
			if (nrow < 0 || nrow >= this.rowcount) {
				return false;
			}
		}

		if (typeof (col) == "string") {
			if (this.colinfos.indexOf(col) > -1) {
				col = this.colinfos.indexOf(col);
			}
			else if (this._constVars.indexOf(col) > -1) {
				return this.setConstColumn(col, value);
			}
			else {
				return false;
			}
		}
		else {
			if ((+col) != (+col) || col == undefined) {
				col = 0;
			}
			if (!this.colinfos[col]) {
				var constCol = col - this.colinfos.length;
				if (this._constVars[constCol]) {
					return this.setConstColumn(constCol, value);
				}
				else {
					return false;
				}
			}
		}
		var colinfo = this.colinfos[col];
		var rowData = this._viewRecords[nrow];
		if (rowData != null) {
			var oldVal = rowData[colinfo._index];
			var coltype = this._getColumnType(col);
			if (this._eventstat && ((this.cancolumnchange && this.cancolumnchange._has_handlers) || (this.oncolumnchanged && this.oncolumnchanged._has_handlers) || (this.onvaluechanged && this.onvaluechanged._has_handlers))) {
				var fromval = colinfo._fromVal(value);
				if (oldVal === fromval) {
					return false;
				}

				if (coltype >= 4 && coltype <= 7) {
					if (coltype == 4) {
						if (fromval && oldVal && oldVal.hi == fromval.hi && oldVal.lo == fromval.lo) {
							return false;
						}
					}
					else {
						if (fromval && oldVal && oldVal.getTime() == fromval.getTime()) {
							return false;
						}
					}
				}

				var evt = new nexacro.DSColChangeEventInfo(this, "cancolumnchange", nrow, colinfo._index, -1, colinfo.id, oldVal, fromval);

				if (this.on_fire_cancolumnchange(evt)) {
					fromval = colinfo._fromVal(evt.newvalue);
					if (fromval === null && _in_val !== null) {
						return false;
					}
					if (this._updateColumn(nrow, rowData, colinfo._index, fromval)) {
						evt.newvalue = fromval;
						this.on_fire_oncolumnchanged(evt);
						this.on_fire_onvaluechanged(evt);
						return true;
					}
				}
				else {
					if (fail) {
						fail.status = "cancolumnchange";
					}
				}
			}
			else {
				var flag = true;
				fromval = colinfo._fromVal(value);
				if (oldVal === fromval || (fromval === null && _in_val !== null)) {
					return false;
				}

				if (coltype >= 4 && coltype <= 7) {
					if (coltype == 4) {
						if (fromval && oldVal && oldVal.hi == fromval.hi && oldVal.lo == fromval.lo) {
							return false;
						}
					}
					else {
						if (fromval && oldVal && oldVal.getTime() == fromval.getTime()) {
							return false;
						}
					}
				}

				this._updateColumn(nrow, rowData, colinfo._index, fromval);
				return flag;
			}
		}
		return false;
	};

	_pDataset.copyRow = function (torow, srcds, fromrow, strcolinfo) {
		if (srcds == null) {
			return false;
		}

		if ((+torow) != (+torow)) {
			torow = 0;
		}
		if ((+fromrow) != (+fromrow)) {
			fromrow = 0;
		}

		if (torow < 0 || torow >= this.rowcount) {
			return false;
		}
		if (srcds._type_name != "Dataset") {
			return false;
		}
		if (fromrow < 0 || fromrow >= srcds.rowcount) {
			return false;
		}

		var srcinfos = srcds.colinfos;
		var destinfos = this.colinfos;
		var destData = this._viewRecords[torow];
		if (strcolinfo != null && strcolinfo.length > 0) {
			var cols = strcolinfo == "" ? destinfos : strcolinfo.split(',');
			var len = cols.length;
			var i = 0;
			function copyRow_loop (pthis) {
				if (i < len) {
					var colids = cols[i].split('=');
					var cLen = colids.length;
					for (var j = 0; j < cLen; j++) {
						colids[j] = colids[j].trim();
					}

					var src_colId, dst_colId;
					if (cLen == 2) {
						src_colId = colids[1];
						dst_colId = colids[0];

						var src_idx = srcinfos.indexOf(src_colId);
						var dst_idx = destinfos.indexOf(dst_colId);
						if (src_idx >= 0 && dst_idx >= 0) {
							var value = destinfos[dst_idx]._fromVal(srcds.getColumn(fromrow, src_idx));
							pthis._updateColumn(torow, destData, dst_idx, value);
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
				if (copyRow_loop(this)) {
					break;
				}
			}
		}
		else {
			var srcData = srcds._viewRecords[fromrow];
			var len = srcinfos.length;
			var i = 0;
			function copyRow_loop2 (pthis) {
				if (i < len) {
					var srcinfo = srcinfos[i];
					var idx = destinfos.indexOf(srcinfo.id);
					if (idx != null) {
						var value = destinfos[idx]._fromVal(srcData[srcinfo._index]);
						pthis._updateColumn(torow, destData, idx, value);
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
				if (copyRow_loop2(this)) {
					break;
				}
			}
		}

		if (this._eventstat && ((this.oncolumnchanged && this.oncolumnchanged._has_handlers) || (this.onvaluechanged && this.onvaluechanged._has_handlers))) {
			var evt = new nexacro.DSColChangeEventInfo(this, "oncolumnchanged", torow, -1, -1, "", undefined, "");
			this.on_fire_oncolumnchanged(evt);
			this.on_fire_onvaluechanged(evt);
		}
		return true;
	};

	_pDataset.filter = function (strkey) {
		if (strkey != null) {
			var str = strkey.toString();
			this.filterstr = str;
			this._filterFn = null;
			if (!this.loadstatus && this._rawRecords.length > 0) {
				var view = this._viewRecords;
				var oldpos = this.rowposition;
				var oldrowdata = view[oldpos];

				this._reFilter();
				this._resetSortGroup();
				var newpos = nexacro._indexOf(this._viewRecords, oldrowdata);

				if (this._eventstat) {
					this.on_fire_onrowsetchanged(-1, -1, 31);
					if (oldpos == this.rowposition) {
						if (this.rowcount) {
							if (oldpos >= 0 && oldpos != newpos) {
								this._setRowPosition(newpos, undefined, 52);
							}
							else {
								this._forcesetRowPosition(newpos, 51);
							}
						}
						else {
							this._forcesetRowPosition(-1, 51);
						}
					}
				}
				else {
					this.rowposition = newpos;
				}
			}
			else if (!this.loadstatus) {
				this._defaultFilterStr = str;
			}
			return true;
		}
		return false;
	};

	_pDataset.updateSortGroup = function (strkey, apply_method) {
		var retn = true;
		if (arguments.length < 2) {
			if (strkey) {
				strkey = strkey.toString();
				this.keystring = strkey;
			}
			else {
				if (!this.keystring) {
					retn = false;
				}
			}
		}
		else {
			if (!apply_method) {
				retn = false;
			}
		}

		if (retn) {
			var isReset = false;
			if (this.keystring == "" || this.keystring == "S:" || this.keystring == "G:") {
				isReset = true;
			}

			if (this.keystring && !isReset) {
				var view = this._viewRecords;
				var oldpos = this.rowposition;
				var oldrowdata = view[oldpos];

				this._clearKeyCols();

				if (!this.loadstatus && this._rawRecords.length > 0) {
					this._resetSortGroup();
				}
			}
			else {
				this._deleteAllGroupData();

				var view = this._viewRecords;
				var oldpos = this.rowposition;
				var oldrowdata = view[oldpos];

				this._clearKeyCols();
				if (!this.loadstatus && this._rawRecords.length > 0) {
					this._viewRecords = this._rawRecords;
					this._reFilter();
				}
			}

			var newpos = nexacro._indexOf(this._viewRecords, oldrowdata);
			if (this.enableevent) {
				this.on_fire_onrowsetchanged(-1, -1, 30);
				if (oldpos == this.rowposition) {
					if (oldpos >= 0 && oldpos != newpos) {
						this._setRowPosition(newpos, undefined, 52);
					}
				}
			}
			else {
				this.rowposition = newpos;
			}
		}
		return retn;
	};

	_pDataset.copyData = function (srcds, isFiltered) {
		if (!srcds || srcds._type_name != "Dataset") {
			return -1;
		}

		isFiltered = nexacro._toBoolean(isFiltered);

		var oldpos = this.rowposition;

		var bFilter = (this.filterstr != null && this.filterstr != "") ? true : false;
		var bResetSort = (this.keystring == "" || this.keystring == "S:" || this.keystring == "G:") ? true : false;


		this._clearAll();

		var _form = this;
		var _is_popup = false;

		while (_form && !_form._is_frame) {
			_form = _form.parent;
		}

		if (_form) {
			_is_popup = nexacro._isPopupFrame(_form.id);
		}

		if (_is_popup) {
			var strssv = srcds._saveSSV("", "", isFiltered);
			var _rs_ = String.fromCharCode(30);
			if (strssv) {
				var ssvLine = strssv.split(_rs_);
				if (ssvLine.length) {
					var curIdx = 0;
					var bClear = true;

					if (ssvLine) {
						this._bWorkingstatus = true;

						while (ssvLine[curIdx].substring(0, 7) != "Dataset") {
							curIdx++;
						}

						if (curIdx < ssvLine.length) {
							curIdx++;
							var ssvColLines = this._getColLinesFromSSVLines(ssvLine, curIdx);
							curIdx += ssvColLines.length;
							if (bClear && this.firefirstcount > 0) {
								curIdx = this._loadFromSSVArray(ssvColLines, ssvLine, curIdx, this.firefirstcount, false, bClear);
								if (this.firefirstcount == this.rowcount) {
									this._reFilter();
									this._resetSortGroup();
									this.on_fire_onload(0, "", 1);
									this._forcesetRowPosition(0, 51);
									this.rowposition = 0;

									curIdx = this._loadFromSSVArray(ssvColLines, ssvLine, curIdx, -1, false, false);
								}
							}
							else {
								curIdx = this._loadFromSSVArray(ssvColLines, ssvLine, curIdx, -1, false, bClear);
							}

							if (this.colinfos) {
								this._reFilter();
								this._resetSortGroup();
							}

							if (this._eventstat) {
								this.on_fire_onload(0, "", bClear ? 0 : 12);
								if (this._viewRecords && this._viewRecords.length > 0) {
									this._forcesetRowPosition(0, 51);
								}
							}
							else if (this._viewRecords && this._viewRecords.length > 0) {
								this.rowposition = 0;
							}
						}

						this._bWorkingstatus = false;
					}
				}
			}
		}
		else {
			this._copyData(srcds, isFiltered);
		}

		var bFireSort = !this.loadstatus && this._rawRecords.length > 0;
		var bFireFilter = !this.loadstatus && this._rawRecords.length > 0;
		this._eventstat = !this.loadstatus && this.enableevent;

		if (bFilter) {
			var str = this.filterstr.toString();
			this.filterstr = str;
			this._filterFn = null;
		}

		if (bResetSort) {
			this._deleteAllGroupData();
			this._clearKeyCols();

			if (bFireFilter && bFireSort) {
				this._viewRecords = this._rawRecords;
			}
		}

		if (bFireFilter && bFireSort) {
			this._reFilter();
			this._resetSortGroup();
		}

		if (this._eventstat) {
			this.on_fire_onrowsetchanged(-1, this.rowcount, 11);
		}

		if (oldpos == this.rowposition) {
			if (this.rowcount > 0) {
				if (oldpos != 0) {
					this._setRowPosition(0, undefined, 51);
				}
				else if (this.id != srcds.id) {
					this.rowposition = -1;
					this._setRowPosition(oldpos, undefined, 53);
				}
				else {
					if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
						var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", 0, -1, -1, "", undefined, undefined);
						this.on_fire_onvaluechanged(evt);
					}
				}
			}
			else if (oldpos > -1) {
				this._forcesetRowPosition(-1, 51);
			}
		}
		this.loadstatus = false;
		this._eventstat = this.enableevent;

		return this.rowcount;
	};

	_pDataset.mergeData = function (srcds) {
		if (!srcds || srcds._type_name != "Dataset") {
			return -1;
		}

		var cnt = 0;

		if (srcds._rawRecords.length > 0) {
			var oldloadstatus = this.loadstatus;
			this.loadstatus = true;
			this._eventstat = !this.loadstatus && this.enableevent;

			cnt = this._mergeData(srcds);

			this.loadstatus = oldloadstatus;
			this._eventstat = !this.loadstatus && this.enableevent;
			var oldpos = this.rowposition;
			if (this._eventstat) {
				this.on_fire_onrowsetchanged(-1, cnt, 13);
			}

			if (oldpos == this.rowposition && oldpos == -1 && cnt > 0) {
				this._setRowPosition(0, undefined, 51);
			}
			this.loadstatus = false;
			this._eventstat = this.enableevent;
		}

		return this.rowcount;
	};

	_pDataset.appendData = function (srcds, chkcol, bupdateconst) {
		if (!srcds || srcds._type_name != "Dataset") {
			return -1;
		}

		if (srcds._viewRecords.length > 0) {
			var oldloadstatus = this.loadstatus;
			this.loadstatus = true;
			this._eventstat = !this.loadstatus && this.enableevent;

			this._appendData(srcds, chkcol, bupdateconst);

			this.loadstatus = oldloadstatus;
			this._eventstat = !this.loadstatus && this.enableevent;
			var oldpos = this.rowposition;
			if (this._eventstat) {
				if (this.keystring && this._keycols.length > 0) {
					this._resetSortGroup();
				}
				this.on_fire_onrowsetchanged(-1, this.rowcount, 12);
			}

			if (oldpos == this.rowposition && oldpos == -1 && this.rowcount > 0) {
				this._setRowPosition(0, undefined, 51);
			}

			this.loadstatus = false;
			this._eventstat = this.enableevent;

			return this.rowcount;
		}

		return 0;
	};

	_pDataset.loadFromDOM = function (doc, bClear) {
		if (bClear == null) {
			bClear = true;
		}
		bClear = nexacro._toBoolean(bClear);

		if (doc != null) {
			this._bWorkingstatus = true;

			var dsDOM;
			if (doc.nodeName == "Dataset") {
				dsDOM = doc;
			}
			else {
				var datasets = doc.getElementsByTagName("Dataset");
				dsDOM = datasets[0];
			}

			var curIdx = 0;
			if (bClear && this.firefirstcount > 0) {
				curIdx = this._loadFromDOM(dsDOM, curIdx, this.firefirstcount, this.useclientlayout, bClear);
				if (this.firefirstcount == this.rowcount) {
					this._reFilter();
					this._resetSortGroup();
					this.on_fire_onload(0, "", 1);
					this._forcesetRowPosition(0, 51);
					this.rowposition = 0;

					curIdx = this._loadFromDOM(dsDOM, curIdx, -1, this.useclientlayout, false);
				}
			}
			else {
				curIdx = this._loadFromDOM(dsDOM, curIdx, -1, this.useclientlayout, bClear);
			}

			if (this.colinfos) {
				this._reFilter();
				this._resetSortGroup();
			}

			if (this._eventstat) {
				this.on_fire_onload(0, "", bClear ? 0 : 12);
				if (this._viewRecords && this._viewRecords.length > 0) {
					this._forcesetRowPosition(0, 51);
				}
				else {
					this._forcesetRowPosition(-1, 51);
				}
			}
			else if (this._viewRecords && this._viewRecords.length > 0) {
				this.rowposition = 0;
			}

			this._bWorkingstatus = false;

			return this.rowcount;
		}
	};

	_pDataset.loadFromXMLStr = function (xmlStr, bClear) {
		if (bClear == null) {
			bClear = true;
		}
		bClear = nexacro._toBoolean(bClear);
		this._bWorkingstatus = true;

		if (xmlStr) {
			this._bWorkingstatus = true;

			if (bClear && this.firefirstcount > 0) {
				var xml_parse_pos = this._loadFromXMLStr(xmlStr, 0, this.firefirstcount, this.useclientlayout, bClear);
				if (this.firefirstcount == this.rowcount) {
					this._reFilter();
					this._resetSortGroup();
					this.on_fire_onload(0, "", 1);
					this._forcesetRowPosition(0, 51);
					this.rowposition = 0;

					xml_parse_pos = this._loadFromXMLStr(xmlStr, xml_parse_pos, -1, this.useclientlayout, false);
				}
			}
			else {
				xml_parse_pos = this._loadFromXMLStr(xmlStr, 0, -1, this.useclientlayout, bClear);
			}

			if (this.colinfos) {
				this._reFilter();
				this._resetSortGroup();
			}

			if (this._eventstat) {
				this.on_fire_onload(0, "", bClear ? 0 : 12);
				if (this._viewRecords && this._viewRecords.length > 0) {
					this._forcesetRowPosition(0, 51);
				}
				else {
					this._forcesetRowPosition(-1, 51);
				}
			}
			else if (this._viewRecords && this._viewRecords.length > 0) {
				this.rowposition = 0;
			}

			this._bWorkingstatus = false;

			return this.rowcount;
		}
	};

	_pDataset.loadXML = function (strxml, bClear) {
		return this.loadFromXMLStr(strxml, bClear);
	};

	_pDataset.loadFromPPXArray = function (ppxLine, lineCnt, curIdx, bClear) {
		if (bClear == null) {
			bClear = true;
		}
		bClear = nexacro._toBoolean(bClear);

		if (ppxLine) {
			this._bWorkingstatus = true;

			while (ppxLine[curIdx].charAt(0) != "D") {
				curIdx++;
			}

			if (curIdx < lineCnt) {
				curIdx++;
				var ppxColLines = this._getColLinesFromPPXLines(ppxLine, curIdx);
				curIdx += ppxColLines.length;
				if (bClear && this.firefirstcount > 0) {
					curIdx = this._loadFromPPXArray(ppxColLines, ppxLine, curIdx, this.firefirstcount, this.useclientlayout, bClear);
					if (this.firefirstcount == this.rowcount) {
						this._reFilter();
						this._resetSortGroup();
						this.on_fire_onload(0, "", 1);
						this._forcesetRowPosition(0, 51);
						this.rowposition = 0;

						curIdx = this._loadFromPPXArray(ppxColLines, ppxLine, curIdx, -1, this.useclientlayout, false);
					}
				}
				else {
					curIdx = this._loadFromPPXArray(ppxColLines, ppxLine, curIdx, -1, this.useclientlayout, bClear);
				}

				if (this.colinfos) {
					this._reFilter();
					this._resetSortGroup();
				}

				if (this._eventstat) {
					this.on_fire_onload(0, "", bClear ? 0 : 12);
					if (this._viewRecords && this._viewRecords.length > 0) {
						this._forcesetRowPosition(0, 51);
					}
					else {
						this._forcesetRowPosition(-1, 51);
					}
				}
				else if (this._viewRecords && this._viewRecords.length > 0) {
					this.rowposition = 0;
				}
			}

			this._bWorkingstatus = false;

			return curIdx;
		}
	};


	_pDataset._saveXML = function (id, type, depth, bUseOrgColStrings) {
		if (!depth) {
			depth = 0;
		}
		var saveId = (id ? id : this.id);

		var saveType = "N";
		switch (type) {
			case "A":
			case "a":
			case "all":
			case "All":
				saveType = "A";
				break;
			case "U":
			case "u":
			case "update":
			case "Update":
				saveType = "U";
				break;
			case "N":
			case "n":
			case "normal":
			case "Normal":
				saveType = "N";
				break;
			case "V":
			case "v":
			case "view":
			case "View":
				saveType = "V";
				break;
		}

		var i;
		var n;
		var list = [];

		this.__writeXMLData(list, "<Dataset id=\"" + saveId + "\">", depth++);

		if (this._constVars.length + this.colinfos.length) {
			this.__writeXMLData(list, "<ColumnInfo>", depth++);
			n = this._constVars.length;
			i = 0;
			function saveXML_constcol_loop (pthis) {
				if (i < n) {
					var colId = pthis._constVars.get_id(i);
					var colVal = pthis._constVars[i];
					var tempVal = pthis._constVars2[i];
					if (colVal) {
						pthis.__writeXMLData(list, "<ConstColumn id=\"" + colId + "\"" + (tempVal ? tempVal : "") + " value=\"" + colVal + "\" />", depth);
					}
					else {
						pthis.__writeXMLData(list, "<ConstColumn id=\"" + colId + "\"" + (tempVal ? tempVal : "") + " />", depth);
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
				if (saveXML_constcol_loop(this)) {
					break;
				}
			}

			n = this.colinfos.length;
			i = 0;
			function saveXML_colinfo_loop (pthis) {
				if (i < n) {
					var colinfo = pthis.colinfos[i];
					var colId = colinfo.id;
					var colType = colinfo.type ? colinfo.type : nexacro.DataUtils.toTypeName(colinfo.ntype);
					var colSize = colinfo.size;
					var colProp = colinfo.prop;

					if (colProp == "NONE" || colProp == null || (typeof colProp) == "number" || colProp == "") {
						pthis.__writeXMLData(list, "<Column id=\"" + colId + "\" type=\"" + colType + "\" size=\"" + colSize + "\"  />", depth);
					}
					else {
						pthis.__writeXMLData(list, "<Column id=\"" + colId + "\" type=\"" + colType + "\" size=\"" + colSize + "\" prop=\"" + colProp.toLowerCase() + "\" />", depth);
					}

					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
				if (saveXML_colinfo_loop(this)) {
					break;
				}
			}
			this.__writeXMLData(list, "</ColumnInfo>", --depth);
		}
		else {
			this.__writeXMLData(list, "<ColumnInfo />", depth);
		}

		n = 0;
		var rawRecords = this._rawRecords;
		if (rawRecords) {
			n = rawRecords.length;
		}
		var viewRec = this._viewRecords;
		var viewcount = viewRec ? viewRec.length : 0;
		if (n) {
			this.__writeXMLData(list, "<Rows>", depth++);
			var rowData;
			if (saveType == "A") {
				i = 0;
				function saveXML_row_loop1 (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 1 || rowData._rtype == 2 || rowData._rtype == 4 || rowData._rtype == 8) {
							pthis.__writeXMLCrudRow(list, rowData, depth, bUseOrgColStrings);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
					if (saveXML_row_loop1(this)) {
						break;
					}
				}
			}
			else if (saveType == "U") {
				i = 0;
				function saveXML_row_loop2 (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 2 || rowData._rtype == 4 || rowData._rtype == 8) {
							pthis.__writeXMLCrudRow(list, rowData, depth, bUseOrgColStrings);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
					if (saveXML_row_loop2(this)) {
						break;
					}
				}
			}
			else if (saveType == "V") {
				i = 0;
				function saveXML_row_loop4 (pthis) {
					if (i < viewcount) {
						rowData = viewRec[i];
						pthis.__writeXMLNormalRow(list, rowData, depth, bUseOrgColStrings);
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
					if (saveXML_row_loop4(this)) {
						break;
					}
				}
			}
			else {
				i = 0;
				function saveXML_row_loop3 (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 1 || rowData._rtype == 2 || rowData._rtype == 4) {
							pthis.__writeXMLNormalRow(list, rowData, depth, bUseOrgColStrings);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
					if (saveXML_row_loop3(this)) {
						break;
					}
				}
			}
			this.__writeXMLData(list, "</Rows>", --depth);
		}
		else {
			this.__writeXMLData(list, "<Rows>", depth);
			this.__writeXMLData(list, "</Rows>", depth);
		}

		this.__writeXMLData(list, "</Dataset>", --depth);

		return list.join("\n");
	};

	_pDataset.saveXML = function (id, type, depth) {
		return this._saveXML(id, type, depth, true);
	};

	_pDataset.loadFromSSVArray = function (ssvLine, lineCnt, curIdx, bClear, isbulk) {
		if (bClear == null) {
			bClear = true;
		}
		bClear = nexacro._toBoolean(bClear);

		if (ssvLine) {
			this._bWorkingstatus = true;

			while (ssvLine[curIdx].substring(0, 7) != "Dataset") {
				curIdx++;
			}

			if (curIdx < lineCnt) {
				curIdx++;
				var ssvColLines = this._getColLinesFromSSVLines(ssvLine, curIdx);
				curIdx += ssvColLines.length;
				if (bClear && this.firefirstcount > 0) {
					curIdx = this._loadFromSSVArray(ssvColLines, ssvLine, curIdx, this.firefirstcount, this.useclientlayout, bClear, isbulk);
					if (this.firefirstcount == this.rowcount) {
						this._reFilter();
						this._resetSortGroup();
						this.on_fire_onload(0, "", 1);
						this._forcesetRowPosition(0, 51);
						this.rowposition = 0;

						curIdx = this._loadFromSSVArray(ssvColLines, ssvLine, curIdx, -1, this.useclientlayout, false, isbulk);
					}
				}
				else {
					curIdx = this._loadFromSSVArray(ssvColLines, ssvLine, curIdx, -1, this.useclientlayout, bClear, isbulk);
				}

				if (this.colinfos) {
					this._reFilter();
					this._resetSortGroup();
				}

				if (this._eventstat) {
					this.on_fire_onload(0, "", bClear ? 0 : 12);
					if (this._viewRecords && this._viewRecords.length > 0) {
						this._forcesetRowPosition(0, 51);
					}
				}
				else if (this._viewRecords && this._viewRecords.length > 0) {
					this.rowposition = 0;
				}
			}

			this._bWorkingstatus = false;

			return curIdx;
		}
	};

	_pDataset._loadSSV = function (strssv, bClear) {
		var _rs_ = String.fromCharCode(30);
		if (strssv) {
			var ssvLine = strssv.split(_rs_);
			if (ssvLine.length) {
				this.loadFromSSVArray(ssvLine, ssvLine.length, 0, bClear);
			}
		}
		return this.rowcount;
	};

	_pDataset.loadSSV = function (strssv, bClear) {
		return this._loadSSV(strssv, bClear);
	};

	_pDataset._saveSSV = function (id, type, isFiltered) {
		var _rs_ = String.fromCharCode(30);
		var _cs_ = String.fromCharCode(31);

		var saveId = this.id;
		if (id && id.length > 0) {
			saveId = id;
		}

		var saveType = "N";
		switch (type) {
			case "A":
			case "a":
			case "all":
			case "All":
				saveType = "A";
				break;
			case "U":
			case "u":
			case "update":
			case "Update":
				saveType = "U";
				break;
		}

		var i;
		var n;
		var list = [];

		this.__writeData(list, "Dataset:" + saveId + _rs_);

		n = this._constVars.length;
		if (n > 0) {
			i = 0;
			this.__writeData(list, "_Const_" + _cs_);
			function saveSSV_constcol_loop (pthis) {
				if (i < n) {
					var colId = pthis._constVars.get_id(i);
					var colVal = pthis._constVars[i];
					if (colVal) {
						if (i == (n - 1)) {
							pthis.__writeData(list, _cs_ + colId + "=" + colVal + _rs_);
						}
						else {
							pthis.__writeData(list, _cs_ + colId + "=" + colVal + _cs_);
						}
					}
					else {
						if (i == (n - 1)) {
							pthis.__writeData(list, _cs_ + colId + "=" + _rs_);
						}
						else {
							pthis.__writeData(list, _cs_ + colId + "=" + _cs_);
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
				if (saveSSV_constcol_loop(this)) {
					break;
				}
			}
		}

		n = this.colinfos.length;
		if (n > 0) {
			this.__writeData(list, "_RowType_" + _cs_);
			i = 0;
			function saveSSV_colinfo_loop (pthis) {
				if (i < n) {
					var colinfo = pthis.colinfos[i];
					var colId = colinfo.id;
					var colType = colinfo.type ? colinfo.type : nexacro.DataUtils.toTypeName(colinfo.ntype);
					var colSize = colinfo.size;

					if (colSize) {
						if (i == (n - 1)) {
							pthis.__writeData(list, colId + ":" + colType + "(" + colSize + ")" + _rs_);
						}
						else {
							pthis.__writeData(list, colId + ":" + colType + "(" + colSize + ")" + _cs_);
						}
					}
					else {
						if (i == (n - 1)) {
							pthis.__writeData(list, colId + ":" + colType + _rs_);
						}
						else {
							pthis.__writeData(list, colId + ":" + colType + _cs_);
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
				if (saveSSV_colinfo_loop(this)) {
					break;
				}
			}
		}
		else {
			this.__writeData(list, "_RowType_" + _rs_);
		}

		n = 0;
		var rawRecords = isFiltered ? this._viewRecords : this._rawRecords;
		if (rawRecords) {
			n = rawRecords.length;
		}

		if (n) {
			var rowData;
			if (saveType == "A") {
				i = 0;
				function saveSSV_row_loop1 (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 1 || rowData._rtype == 2 || rowData._rtype == 4 || rowData._rtype == 8) {
							pthis.__writeSSVCrudRow(list, rowData);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
					if (saveSSV_row_loop1(this)) {
						break;
					}
				}
			}
			else if (saveType == "U") {
				i = 0;
				function saveSSV_row_loop2 (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 2 || rowData._rtype == 4 || rowData._rtype == 8) {
							pthis.__writeSSVCrudRow(list, rowData);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
					if (saveSSV_row_loop2(this)) {
						break;
					}
				}
			}
			else {
				i = 0;
				function saveSSV_row_loop3 (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 1 || rowData._rtype == 2 || rowData._rtype == 4) {
							pthis.__writeSSVNormalRow(list, rowData);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
					if (saveSSV_row_loop3(this)) {
						break;
					}
				}
			}
		}
		list.push(_rs_);
		return list.join("");
	};

	_pDataset.saveSSV = function (id, type) {
		return this._saveSSV(id, type);
	};

	_pDataset.loadFromCSVArray = function (csvLine, lineCnt, curIdx, bClear) {
		if (bClear == null) {
			bClear = true;
		}
		bClear = nexacro._toBoolean(bClear);

		if (csvLine) {
			this._bWorkingstatus = true;

			while (csvLine[curIdx].substring(0, 7) != "Dataset") {
				curIdx++;
			}

			if (curIdx < lineCnt) {
				curIdx++;
				var csvColLine = csvLine[curIdx++];
				if (bClear && this.firefirstcount > 0) {
					curIdx = this._loadFromCSVArray(csvColLine, csvLine, curIdx, this.firefirstcount, this.useclientlayout, bClear);

					if (this.firefirstcount == this.rowcount) {
						this._reFilter();
						this._resetSortGroup();
						this.on_fire_onload(0, "", 1);
						this._forcesetRowPosition(0, 51);
						this.rowposition = 0;

						curIdx = this._loadFromCSVArray(csvColLine, csvLine, curIdx, -1, this.useclientlayout, false);
					}
				}
				else {
					curIdx = this._loadFromCSVArray(csvColLine, csvLine, curIdx, -1, this.useclientlayout, bClear);
				}

				if (this.colinfos) {
					this._reFilter();
					this._resetSortGroup();
				}

				if (this._eventstat) {
					this.on_fire_onload(0, "", bClear ? 0 : 12);
					if (this._viewRecords && this._viewRecords.length > 0) {
						this._forcesetRowPosition(0, 51);
					}
				}
				else if (this._viewRecords && this._viewRecords.length > 0) {
					this.rowposition = 0;
				}
			}

			this._bWorkingstatus = false;

			return curIdx;
		}
	};

	_pDataset.loadCSV = function (strcsv, bClear) {
		if (strcsv) {
			var csvLine = strcsv.split(/\r\n|\n/);
			if (csvLine.length) {
				this.loadFromCSVArray(csvLine, csvLine.length, 0, bClear);
			}
		}
		return this.rowcount;
	};

	_pDataset._saveCSV = function (id, type) {
		var saveId = this.id;
		if (id && id.length > 0) {
			saveId = id;
		}

		if (type) {
			var save_type = "N";

			switch (type) {
				case "A":
				case "a":
				case "all":
				case "All":
					var save_type = "A";
					break;
				case "U":
				case "u":
				case "update":
				case "Update":
					var save_type = "U";
					break;
			}
		}

		var i;
		var n;
		var list = [];

		this.__writeData(list, "Dataset:" + saveId + "\r\n");

		n = this.colinfos.length;
		if (n > 0) {
			i = 0;
			function saveCSV_colinfo_loop (pthis) {
				if (i < n) {
					var colinfo = pthis.colinfos[i];
					var colId = colinfo.id;
					var colType = colinfo.type ? colinfo.type : nexacro.DataUtils.toTypeName(colinfo.ntype);
					var colSize = colinfo.size;

					if (colSize) {
						if (i == (n - 1)) {
							pthis.__writeData(list, colId + ":" + colType + "(" + colSize + ")\r\n");
						}
						else {
							pthis.__writeData(list, colId + ":" + colType + "(" + colSize + "),");
						}
					}
					else {
						if (i == (n - 1)) {
							pthis.__writeData(list, colId + ":" + colType + "\r\n");
						}
						else {
							pthis.__writeData(list, colId + ":" + colType + ",");
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
				if (saveCSV_colinfo_loop(this)) {
					break;
				}
			}
		}
		else {
			this.__writeData(list, "\r\n");
		}

		n = 0;
		var rawRecords = this._rawRecords;
		if (rawRecords) {
			n = rawRecords.length;
		}

		if (n) {
			var rowData;
			if (save_type == "A") {
				i = 0;
				function saveCSV_row_loop_all (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 1 || rowData._rtype == 2 || rowData._rtype == 4 || rowData._rtype == 8) {
							pthis.__writeCSVCrudRow(list, rowData);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
					if (saveCSV_row_loop_all(this)) {
						break;
					}
				}
			}
			else if (save_type == "U") {
				i = 0;
				function saveCSV_row_loop_update (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 2 || rowData._rtype == 4 || rowData._rtype == 8) {
							pthis.__writeCSVCrudRow(list, rowData);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
					if (saveCSV_row_loop_update(this)) {
						break;
					}
				}
			}
			else {
				i = 0;
				function saveCSV_row_loop (pthis) {
					if (i < n) {
						rowData = rawRecords[i];
						if (rowData._rtype == 1 || rowData._rtype == 2 || rowData._rtype == 4) {
							pthis.__writeCSVRowData(list, rowData, save_type);
						}
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
					if (saveCSV_row_loop(this)) {
						break;
					}
				}
			}
		}
		list.push("\r\n");
		return list.join("");
	};

	_pDataset.saveCSV = function (id) {
		return this._saveCSV(id);
	};

	_pDataset.loadBIN = function (binData) {
		if (binData) {
			var ssvdata = nexacro._convertDatasetBINToSSV(binData);
			if (ssvdata) {
				return this.loadSSV(ssvdata);
			}
		}
		return this.rowcount;
	};

	_pDataset.saveBIN = function (id, strSaveType) {
		var ssvdata = this.saveSSV(id, strSaveType);
		if (ssvdata) {
			return nexacro._convertDatasetSSVToBIN(ssvdata);
		}
		return ssvdata;
	};

	_pDataset.applyChange = function () {
		var rawDatas = this._rawRecords;
		var len = rawDatas.length;
		var i = len - 1;
		function applyChange_loop () {
			if (i >= 0) {
				var rowData = rawDatas[i];
				if (rowData._rtype == 0 || rowData._rtype == 8) {
					rawDatas.splice(i, 1);
				}
				else {
					rowData._rtype = 1;
					if (rowData._orgrow) {
						delete rowData["_orgrow"];
					}
				}
				i--;
				return false;
			}
			return true;
		}
		while (true) {
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
			if (applyChange_loop()) {
				break;
			}
		}
		this._deletedRecords = [];

		if (this.enableevent) {
			this.on_fire_onrowsetchanged(-1, len, 40);
		}
	};

	_pDataset.reset = function () {
		this.loadstatus = true;
		this._eventstat = !this.loadstatus && this.enableevent;

		var oldpos = this.rowposition;

		var rawDatas = this._rawRecords;
		var len = rawDatas.length;
		var i = len - 1;
		function reset_loop () {
			if (i >= 0) {
				var rowData = rawDatas[i];
				if (rowData._rtype == 0 || rowData._rtype == 2) {
					rawDatas.splice(i, 1);
				}
				else if (rowData._rtype == 4) {
					rowData._rtype = 1;
					if (rowData._orgrow) {
						var cnt = rowData.length;
						for (var j = 0; j < cnt; j++) {
							rowData[j] = rowData._orgrow[j];
						}
						delete rowData["_orgrow"];
					}
				}
				else if (rowData._rtype == 8) {
					rowData._rtype = 1;
				}
				i--;
				return false;
			}
			return true;
		}
		while (true) {
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
			if (reset_loop()) {
				break;
			}
		}

		if (this._viewRecords != this._rawRecords) {
			this._viewRecords.splice(0, this._viewRecords.length);
		}
		this._viewRecords = this._rawRecords;
		this._reFilter();

		this._deletedRecords.splice(0, this._deletedRecords.length);

		this.loadstatus = false;
		this._eventstat = this.enableevent;

		this.rowcount = this._viewRecords.length;
		if (this._eventstat) {
			this._bWorkingstatus = true;
			this.on_fire_onload(0, "", 2);

			if (this.rowposition >= this.rowcount && this.rowcount > 0) {
				this._forcesetRowPosition(0, 51);
			}
			else {
				this._forcesetRowPosition(this.rowposition, 51);
			}
			this._bWorkingstatus = false;
		}
	};

	_pDataset.assign = function (srcds) {
		if (!srcds || srcds._type_name != "Dataset") {
			return -1;
		}

		this._eventstat = this.enableevent;
		var oldpos = this.rowposition;

		this._clearAll();
		this._assign(srcds);

		if (this.filterstr) {
			this.filter(this.filterstr);
		}
		if (this.keystring) {
			this.on_apply_keystring();
		}

		if (this._eventstat) {
			this.on_fire_onrowsetchanged(-1, this.rowcount, 10);
		}

		if (oldpos == this.rowposition) {
			if (this.rowcount > 0) {
				if (oldpos != 0) {
					this._setRowPosition(0, undefined, 51);
				}
				else if (this.id != srcds.id) {
					this.rowposition = -1;
					this._setRowPosition(oldpos, undefined, 53);
				}
				else {
					if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
						var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", 0, -1, -1, "", undefined, undefined);
						this.on_fire_onvaluechanged(evt);
					}
				}
			}
			else if (oldpos > -1) {
				this._forcesetRowPosition(-1, 51);
			}
		}
		return this.rowcount;
	};

	_pDataset.identifyExpr = function (expr) {
		if (typeof (expr) != "string") {
			return expr;
		}
		expr = expr + "";
		var ex = expr.substr(0, 4).toUpperCase();
		if (ex == "EXPR" || ex == "BIND") {
			var exp = expr.substr(4).trim();
			if (/^expr(\s*):|^bind(\s*):/.test(expr)) {
				expr = exp.substr(1);
			}
			else {
				expr = exp.substring(1, exp.length - 1);
			}
			var parser = new nexacro.ExprParser();
			var conv_expr = parser.makeExpr(this, expr);
			var exprfn = nexacro._createInlineFunc(conv_expr, ["currow", "rowidx", "comp", "dataset"]);
			if (exprfn) {
				expr = exprfn.call(null, this.rowposition, this.rowposition, this, this);
			}
		}
		return expr;
	};

	_pDataset.lookup = function (expr, cmpval, outcol) {
		var view = this._viewRecords;
		var start = 0;
		var end = view.length;
		expr = this.identifyExpr(expr);

		var row = this.findRow(expr, cmpval, start, end);

		return (row == -1) ? undefined : this.getColumn(row, outcol);
	};

	_pDataset._lookupRaw = function (expr, cmpval, outcol) {
		var currentView = this._viewRecords;
		this._viewRecords = this._rawRecords;
		this._checkRowData = this._checkRawRowData;

		var start = 0;
		var end = this._viewRecords.length;

		expr = this.identifyExpr(expr);

		var row = this.findRow(expr, cmpval, start, end);
		var rtn = (row == -1) ? undefined : this.getColumn(row, outcol);
		this._checkRowData = this._checkViewRowData;
		this._viewRecords = currentView;
		return rtn;
	};

	_pDataset.lookupAs = function (expr, cmpval, outcol) {
		var saveRec = this._viewRecords.slice(0, this._viewRecords.length);
		var view = this._viewRecords = this._rawRecords.slice(0, this._rawRecords.length);
		var start = 0;
		var end = view.length;

		expr = this.identifyExpr(expr);

		var row = this.findRowAs(expr, cmpval, start, end);
		var rtn = (row == -1) ? undefined : this.getColumn(row, outcol);
		this._viewRecords = saveRec.slice(0, this._rawRecords.length);
		return rtn;
	};

	_pDataset.findRow = function (expr, cmpval, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}

		end = this._endIdx(arguments.length, end, 4);

		var v;
		var constIdx = -1;
		var idx = -1;
		if (typeof (expr) == "string") {
			idx = this.colinfos.indexOf(expr);
			if (idx == undefined) {
				constIdx = this._constVars.indexOf(expr);
			}
			if (!((+expr) != (+expr))) {
				return -1;
			}
		}
		else {
			if ((+expr) != (+expr) || expr == undefined) {
				expr = 0;
			}
			if (expr > -1 && expr < this.colcount) {
				var infosLen = this.colinfos.length;
				if (expr < infosLen) {
					idx = expr;
				}
				else {
					constIdx = expr - infosLen;
				}
			}
			else {
				return -1;
			}
		}

		if (idx >= 0) {
			return this._findRow(idx, cmpval, start, end);
		}

		if (constIdx >= 0) {
			v = this._constVars[constIdx];

			if (v == cmpval && end > 0) {
				return start;
			}
			else {
				return -1;
			}
		}


		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return -1;
		}

		var i = start;
		function findRow_loop (pthis) {
			if (i < end) {
				var rowData = view[i];

				if (pthis._checkRowData(rowData)) {
					v = fn.call(this, i, i, null, pthis);

					if (v == cmpval) {
						return true;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
			if (findRow_loop(this)) {
				break;
			}
		}
		return (i < end) ? i : -1;
	};

	_pDataset.findRowExpr = function (expr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}

		end = this._endIdx(arguments.length, end);


		if (start >= end) {
			return -1;
		}

		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return -1;
		}

		var i = start;
		function findRowExpr_loop (pthis) {
			if (i < end) {
				var rowData = view[i];

				if (pthis._checkRowData(rowData)) {
					var v = fn.call(pthis, i, i, null, pthis);
					if (v) {
						return true;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
			if (findRowExpr_loop(this)) {
				break;
			}
		}
		return (i < end) ? i : -1;
	};

	_pDataset.findRowAs = function (expr, cmpval, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}

		end = this._endIdx(arguments.length, end, 4);

		var v;
		var constIdx = -1;
		var idx = -1;

		if (typeof (expr) == "string") {
			idx = this.colinfos.indexOf(expr);
			if (idx == undefined || idx < 0) {
				constIdx = this._constVars.indexOf(expr);
			}
			if (!((+expr) != (+expr))) {
				return -1;
			}
		}
		else {
			if ((+expr) != (+expr) || expr == undefined) {
				expr = 0;
			}
			if (expr > -1 && expr < this.colcount) {
				var infosLen = this.colinfos.length;
				if (expr < infosLen) {
					idx = expr;
				}
				else {
					constIdx = expr - infosLen;
				}
			}
			else {
				return -1;
			}
		}

		if (idx >= 0) {
			return this._findRowAs(idx, cmpval, start, end);
		}

		if (constIdx >= 0) {
			v = this._constVars[constIdx];


			if (this._isLike(v, cmpval) && end > 0) {
				return 0;
			}
			else {
				return -1;
			}
		}

		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return -1;
		}

		var i = start;
		function findRowAs_loop (pthis) {
			if (i < end) {
				var rowData = view[i];

				if (pthis._checkRowData(rowData)) {
					v = fn.call(pthis, i, i, null, pthis);

					if (pthis._isLike(v, cmpval)) {
						return true;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
			if (findRowAs_loop(this)) {
				break;
			}
		}
		return (i < end) ? i : -1;
	};

	_pDataset.getSum = function (expr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}

		end = this._endIdx(arguments.length, end);
		var v = parseFloat(expr);
		if (isFinite(v)) {
			return v * this._getCount(start, end, -1);
		}

		var idx = this._constVars.indexOf(expr);
		if (idx >= 0) {
			v = this._constVars[idx];

			if ((typeof v) == "number") {
				return v * this._getCount(start, end, -1);
			}
			else if (v instanceof nexacro.Decimal) {
				var sum = new nexacro.Decimal(this._getCount(start, end, -1));
				sum.mulDecimal(v);
				return sum.isNaN() ? 0 : sum;
			}
			else {
				return 0;
			}
		}

		var idx = this.colinfos.indexOf(expr);
		if (idx >= 0) {
			return this._getSum(idx, start, end, -1, this._getColumnType(idx));
		}

		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return 0;
		}

		var sum = 0;
		var addsum;
		var i = start;

		function getSum_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					addsum = fn.call(pthis, i, i, null, pthis);
					if ((sum instanceof nexacro.Decimal) == false) {
						if ((addsum instanceof nexacro.Decimal) == false) {
							sum += (+addsum);
						}
						else {
							sum = new nexacro.Decimal(sum);
							sum.addDecimal(addsum);
						}
					}
					else {
						if ((addsum instanceof nexacro.Decimal) == false) {
							sum.addDouble(addsum);
						}
						else {
							sum.addDecimal(addsum);
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
			if (getSum_loop(this)) {
				break;
			}
		}

		if (sum instanceof nexacro.Decimal) {
			return sum.isNaN() ? 0 : sum;
		}
		return (+sum) != (+sum) ? 0 : sum;
	};

	_pDataset.getMin = function (expr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}

		if (!start || start < 0) {
			start = 0;
		}

		end = this._endIdx(arguments.length, end);
		var v = parseFloat(expr);
		if (isFinite(v)) {
			return v;
		}

		var idx = this._constVars.indexOf(expr);
		if (idx >= 0) {
			return this._constVars[idx];
		}

		var idx = this.colinfos.indexOf(expr);
		if (idx >= 0) {
			return this._getMin(idx, start, end, -1, this._getColumnType(idx));
		}

		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return undefined;
		}

		var min = undefined;
		var i = start;
		function getMin_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					v = fn.call(pthis, i, i, null, pthis);

					if (min == null) {
						min = v;
					}
					else if ((v instanceof nexacro.Decimal) == false) {
						if (v != null && v < min) {
							min = v;
						}
					}
					else if (v != null) {
						var minDec = new nexacro.Decimal(min);
						if ((v.hi < minDec.hi) || (v.hi == minDec.hi && v.lo < minDec.lo)) {
							min = v;
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
			if (getMin_loop(this)) {
				break;
			}
		}

		if (min instanceof nexacro.Decimal) {
			return min.isNaN() ? undefined : min;
		}
		return (+min) != (+min) ? undefined : min;
	};

	_pDataset.getMax = function (expr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		end = this._endIdx(arguments.length, end);

		var v = parseFloat(expr);
		if (isFinite(v)) {
			return v;
		}

		var idx = this._constVars.indexOf(expr);
		if (idx >= 0) {
			return this._constVars[idx];
		}

		var idx = this.colinfos.indexOf(expr);
		if (idx >= 0) {
			return this._getMax(idx, start, end, -1, this._getColumnType(idx));
		}

		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return undefined;
		}

		var max = undefined;
		var i = start;
		function getMax_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					v = fn.call(pthis, i, i, null, pthis);
					if (max == null) {
						max = v;
					}
					else if ((v instanceof nexacro.Decimal) == false) {
						if (v != null && v > max) {
							max = v;
						}
					}
					else if (v != null) {
						var maxDec = new nexacro.Decimal(max);
						if ((v.hi > maxDec.hi) || (v.hi == maxDec.hi && v.lo > maxDec.lo)) {
							max = v;
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
			if (getMax_loop(this)) {
				break;
			}
		}

		if (max instanceof nexacro.Decimal) {
			return max.isNaN() ? undefined : max;
		}
		return (+max) != (+max) ? undefined : max;
	};

	_pDataset.getAvg = function (expr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		end = this._endIdx(arguments.length, end);

		var v = parseFloat(expr);
		if (isFinite(v)) {
			return v;
		}

		var idx = this._constVars.indexOf(expr);
		if (idx >= 0) {
			v = this._constVars[idx];
			if (((typeof v) == "number") || (v instanceof nexacro.Decimal)) {
				return v;
			}
			else {
				return Infinity;
			}
		}

		var idx = this.colinfos.indexOf(expr);
		if (idx >= 0) {
			return this._getAvg(idx, start, end, -1, this._getColumnType(idx));
		}

		var fn = this._exprFuncs[expr];
		if (fn == null) {
			fn = this._exprFuncs[expr] = this._createExprFunc(expr);
		}
		if (typeof fn != "function") {
			return Infinity;
		}

		var cnt = 0;
		var sum = 0;
		var i = start;
		function getAvg_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					v = fn.call(pthis, i, i, null, pthis);
					if (v != null) {
						cnt++;
						if ((sum instanceof nexacro.Decimal) == false) {
							if ((v instanceof nexacro.Decimal) == false) {
								sum += (+v);
							}
							else {
								sum = new nexacro.Decimal(sum);
								sum.addDecimal(v);
							}
						}
						else {
							if ((v instanceof nexacro.Decimal) == false) {
								sum.addDouble(v);
							}
							else {
								sum.addDecimal(v);
							}
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
			if (getAvg_loop(this)) {
				break;
			}
		}

		if (cnt == 0) {
			return Infinity;
		}

		if (sum instanceof nexacro.Decimal) {
			sum.divDouble(cnt);
		}
		else {
			sum = sum / cnt;
		}
		return sum;
	};

	_pDataset.getCaseCount = function (cmpExpr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		if (!end || end < 0 || end > view.length) {
			end = view.length;
		}

		var v = parseFloat(cmpExpr);
		if (isFinite(v)) {
			return this._getCount(start, end, -1);
		}

		var idx = this._constVars.indexOf(cmpExpr);
		if (idx >= 0) {
			return this._getCount(start, end, -1);
		}

		var idx = this.colinfos.indexOf(cmpExpr);
		if (idx >= 0) {
			return this._getCount(start, end, -1);
		}

		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return 0;
		}

		var cnt = 0;
		var cmp = null;
		for (var i = start; i < end; i++) {
			if (this._checkRowData(view[i])) {
				cmp = cmpFn.call(this, i, i, null, this);
				if (cmp === true) {
					cnt++;
				}
			}
		}
		return cnt;
	};

	_pDataset.getCaseSum = function (cmpExpr, valExpr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		end = this._endIdx(arguments.length, end, 4);

		var v = parseFloat(valExpr);
		if (isFinite(v)) {
			return v * this.getCaseCount(cmpExpr, start, end);
		}

		var idx = this._constVars.indexOf(valExpr);
		if (idx >= 0) {
			v = this._constVars[idx];
			if ((typeof v) == "number") {
				return v * this.getCaseCount(cmpExpr, start, end);
			}
			else if (v instanceof nexacro.Decimal) {
				var sum = new nexacro.Decimal(this.getCaseCount(cmpExpr, start, end));
				sum.mulDecimal(v);
				return sum.isNaN() ? 0 : sum;
			}
			else {
				return 0;
			}
		}

		var idx = this.colinfos.indexOf(valExpr);
		if (idx >= 0) {
			return this._getCaseSum(cmpExpr, idx, start, end, -1, this._getColumnType(idx));
		}

		var valFn = this._exprFuncs[valExpr];
		if (valFn == null) {
			valFn = this._exprFuncs[valExpr] = this._createExprFunc(valExpr);
		}
		if (typeof valFn != "function") {
			return 0;
		}

		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return 0;
		}

		var sum = 0;
		var addsum;
		var cmp = null;
		var i = start;
		function getCaseSum_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					cmp = cmpFn.call(pthis, i, i, null, pthis);

					if (cmp === true) {
						addsum = valFn.call(pthis, i, i, null, pthis);
						if ((sum instanceof nexacro.Decimal) == false) {
							if ((addsum instanceof nexacro.Decimal) == false) {
								sum += (+addsum);
							}
							else {
								sum = new nexacro.Decimal(sum);
								sum.addDecimal(addsum);
							}
						}
						else {
							if ((addsum instanceof nexacro.Decimal) == false) {
								sum.addDouble(addsum);
							}
							else {
								sum.addDecimal(addsum);
							}
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
			if (getCaseSum_loop(this)) {
				break;
			}
		}

		if (sum instanceof nexacro.Decimal) {
			return sum.isNaN() ? 0 : sum;
		}
		return (+sum) != (+sum) ? 0 : sum;
	};

	_pDataset.getCaseMin = function (cmpExpr, valExpr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		end = this._endIdx(arguments.length, end, 4);

		var v = parseFloat(valExpr);
		if (isFinite(v)) {
			return v;
		}

		var idx = this._constVars.indexOf(valExpr);
		if (idx >= 0) {
			return this._constVars[idx];
		}

		var idx = this.colinfos.indexOf(valExpr);
		if (idx >= 0) {
			return this._getCaseMin(cmpExpr, idx, start, end, -1, this._getColumnType(idx));
		}

		var valFn = this._exprFuncs[valExpr];
		if (valFn == null) {
			valFn = this._exprFuncs[valExpr] = this._createExprFunc(valExpr);
		}
		if (typeof valFn != "function") {
			return undefined;
		}

		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return undefined;
		}

		var min = undefined;
		var cmp = null;
		var i = start;
		function getCaseMin_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					cmp = cmpFn.call(pthis, i, i, null, pthis);
					if (cmp === true) {
						v = valFn.call(pthis, i, i, null, pthis);
						if (min == null) {
							min = v;
						}
						else if ((v instanceof nexacro.Decimal) == false) {
							if (v != null && v < min) {
								min = v;
							}
						}
						else if (v != null) {
							var minDec = new nexacro.Decimal(min);
							if ((v.hi < minDec.hi) || (v.hi == minDec.hi && v.lo < minDec.lo)) {
								min = v;
							}
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
			if (getCaseMin_loop(this)) {
				break;
			}
		}

		if (min instanceof nexacro.Decimal) {
			return min.isNaN() ? undefined : min;
		}
		return (+min) != (+min) ? undefined : min;
	};

	_pDataset.getCaseMax = function (cmpExpr, valExpr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		end = this._endIdx(arguments.length, end, 4);

		var v = parseFloat(valExpr);
		if (isFinite(v)) {
			return v;
		}

		var idx = this._constVars.indexOf(valExpr);
		if (idx >= 0) {
			return this._constVars[idx];
		}

		var idx = this.colinfos.indexOf(valExpr);
		if (idx >= 0) {
			return this._getCaseMax(cmpExpr, idx, start, end, -1, this._getColumnType(idx));
		}

		var valFn = this._exprFuncs[valExpr];
		if (valFn == null) {
			valFn = this._exprFuncs[valExpr] = this._createExprFunc(valExpr);
		}
		if (typeof valFn != "function") {
			return undefined;
		}

		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return undefined;
		}

		var max = undefined;
		var cmp = null;
		var i = start;
		function getCaseMax_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					cmp = cmpFn.call(pthis, i, i, null, pthis);
					if (cmp === true) {
						v = valFn.call(pthis, i, i, null, pthis);

						if (max == null) {
							max = v;
						}
						else if ((v instanceof nexacro.Decimal) == false) {
							if (v != null && v > max) {
								max = v;
							}
						}
						else if (v != null) {
							var maxDec = new nexacro.Decimal(max);
							if ((v.hi > maxDec.hi) || (v.hi == maxDec.hi && v.lo > maxDec.lo)) {
								max = v;
							}
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
			if (getCaseMax_loop(this)) {
				break;
			}
		}

		if (max instanceof nexacro.Decimal) {
			return max.isNaN() ? undefined : max;
		}
		return (+max) != (+max) ? undefined : max;
	};

	_pDataset.getCaseAvg = function (cmpExpr, valExpr, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		end = this._endIdx(arguments.length, end, 4);

		var v = parseFloat(valExpr);
		if (isFinite(v)) {
			return v;
		}

		var idx = this._constVars.indexOf(valExpr);
		if (idx >= 0) {
			v = this._constVars[idx];
			if (((typeof v) == "number") || (v instanceof nexacro.Decimal)) {
				return v;
			}
			else {
				return Infinity;
			}
		}

		var idx = this.colinfos.indexOf(valExpr);
		if (idx >= 0) {
			return this._getCaseAvg(cmpExpr, idx, start, end, -1, this._getColumnType(idx));
		}

		var valFn = this._exprFuncs[valExpr];
		if (valFn == null) {
			valFn = this._exprFuncs[valExpr] = this._createExprFunc(valExpr);
		}
		if (typeof valFn != "function") {
			return Infinity;
		}

		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return Infinity;
		}

		var cnt = 0;
		var sum = 0;
		var cmp = null;

		var i = start;
		function getCaseAvg_loop (pthis) {
			if (i < end) {
				if (pthis._checkRowData(view[i])) {
					cmp = cmpFn.call(pthis, i, i, null, pthis);
					if (cmp === true) {
						v = valFn.call(pthis, i, i, null, pthis);
						if (v != null) {
							cnt++;

							if ((sum instanceof nexacro.Decimal) == false) {
								if ((v instanceof nexacro.Decimal) == false) {
									sum += (+v);
								}
								else {
									sum = new nexacro.Decimal(sum);
									sum.addDecimal(v);
								}
							}
							else {
								if ((v instanceof nexacro.Decimal) == false) {
									sum.addDouble(v);
								}
								else {
									sum.addDecimal(v);
								}
							}
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
			if (getCaseAvg_loop(this)) {
				break;
			}
		}

		if (cnt == 0) {
			return Infinity;
		}

		if (sum instanceof nexacro.Decimal) {
			sum.divDouble(cnt);
		}
		else {
			sum = sum / cnt;
		}
		return sum;
	};

	_pDataset.getCountNF = function (v) {
		var noDelRec = this._getNotDelRec();
		var colIdx = -1;
		var colId = "";

		if (v) {
			if (typeof (v) == "string") {
				colIdx = this.colinfos.indexOf(v);

				if (!(colIdx >= 0)) {
					return 0;
				}
			}
			else if (typeof (v) == "number") {
				colIdx = v;
				colId = this.colinfos.get_id(colIdx);
				if (!colId) {
					return 0;
				}
			}
			else {
				return 0;
			}

			var currentView = this._viewRecords;
			this._viewRecords = noDelRec;
			this._checkRowData = this._checkRawRowData;

			var start = 0;
			var end = this._rawRecords.length;

			var value = this._getCount(start, end, -1, colIdx, true);

			this._checkRowData = this._checkViewRowData;
			this._viewRecords = currentView;

			return value;
		}

		return noDelRec.length;
	};

	_pDataset.getSumNF = function (expr, start, end) {
		return this._calcNFData(this.getSum, expr, start, end);
	};

	_pDataset.getMinNF = function (expr, start, end) {
		return this._calcNFData(this.getMin, expr, start, end);
	};

	_pDataset.getMaxNF = function (expr, start, end) {
		return this._calcNFData(this.getMax, expr, start, end);
	};

	_pDataset.getAvgNF = function (expr, start, end) {
		return this._calcNFData(this.getAvg, expr, start, end);
	};

	_pDataset.findMaxLengthRow = function (colid, start, end) {
		var view = this._viewRecords;
		if ((+start) != (+start)) {
			start = 0;
		}
		if (!start || start < 0) {
			start = 0;
		}
		if (!end || end > view.length) {
			end = view.length;
		}

		var v = parseInt(colid) | 0;
		if (isFinite(v)) {
			if (v >= 0) {
				return this._findMaxLengthRow(v, start, end);
			}
			else {
				return -1;
			}
		}
		var idx = this._constVars.indexOf(colid);
		if (idx >= 0) {
			return (this._constVars[idx]) ? this._constVars[idx].toString().length : 0;
		}

		var idx = this.colinfos.indexOf(colid);
		if (idx >= 0) {
			return this._findMaxLengthRow(idx, start, end);
		}

		return -1;
	};
	_pDataset.findMaxLengthRowNF = function (colid, start, end) {
		return this._calcNFData(this.findMaxLengthRow, colid, start, end);
	};

	_pDataset._endIdx = function (arguLen, end, mode) {
		var len = this._viewRecords.length;

		if (mode) {
			switch (arguLen) {
				case 1:
					return 0;
				case 4:
					if (end < 0 || end >= len) {
						return len;
					}
					if ((+end) != (+end)) {
						return 0;
					}
					return end;
				default:
					return len;
			}
		}
		else {
			if (arguLen == 3) {
				if (end < 0 || end > len) {
					return len;
				}
				if ((+end) != (+end)) {
					return 0;
				}
				return end;
			}
			return len;
		}
	};

	_pDataset._clearAllExprs = function () {
		this._exprFuncs = null;
		this._exprFuncs = {
		};
	};

	_pDataset._clearAll = function () {
		this.colinfos = null;

		var cnt = this.rowcount;
		this.colinfos = new nexacro.DSColumnInfoList();
		this._constVars = new nexacro.VariableList();

		this._rawRecords.splice(0, this._rawRecords.length);
		if (this._viewRecords != this._rawRecords) {
			this._viewRecords.splice(0, this._viewRecords.length);
		}
		this._deletedRecords.splice(0, this._deletedRecords.length);

		this._viewRecords = null;
		this._rawRecords = null;
		this._deletedRecords = null;

		this._rawRecords = [];
		this._deletedRecords = [];

		this._viewRecords = this._rawRecords;

		this.colcount = 0;
		this.constcount = 0;
		this.rowcount = 0;

		this._keycols.splice(0, this._keycols.length);
		this._keycols.max_keylevel = 0;

		if (this.loadkeymode.toLowerCase() == "reset") {
			this.keystring = this._defaultKeyStr;
		}
		if (this.loadfiltermode.toLowerCase() == "reset") {
			this.filterstr = this._defaultFilterStr;
		}
		this._filterFn = null;

		this._clearAllExprs();

		return cnt;
	};

	_pDataset._clearData = function () {
		var cnt = this.rowcount;
		this._rawRecords.splice(0, this._rawRecords.length);
		if (this._viewRecords != this._rawRecords) {
			this._viewRecords.splice(0, this._viewRecords.length);
		}
		this._viewRecords = this._rawRecords;

		this._deletedRecords.splice(0, this._deletedRecords.length);
		this._deletedRecords = null;
		this._deletedRecords = [];

		this.rowcount = 0;
		return cnt;
	};

	_pDataset._forcesetRowPosition = function (newpos, reason) {
		if (newpos < 0 || newpos >= this.rowcount) {
			newpos = -1;
		}

		var oldpos = this.rowposition;
		if (newpos != oldpos && newpos < this.rowcount) {
			if (this.canrowposchange && this.canrowposchange._has_handlers && oldpos != -1) {
				var evt = new nexacro.DSRowPosChangeEventInfo(this, "canrowposchange", oldpos, newpos, reason);
				var ret = this.on_fire_canrowposchange(evt);
				if (ret == false) {
					return;
				}
			}
			if (this.onrowposchanged && this.onrowposchanged._has_handlers) {
				var evt = new nexacro.DSRowPosChangeEventInfo(this, "onrowposchanged", oldpos, newpos, reason);
				this.rowposition = newpos;
				this.on_fire_onrowposchanged(evt);
			}
			else {
				this.rowposition = newpos;
			}
		}
		if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
			var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", newpos, -1, -1, "", undefined, undefined);
			this.on_fire_onvaluechanged(evt);
		}
	};

	_pDataset._setRowPosition = function (newpos, v, reason, value_update) {
		if (newpos < 0 || newpos >= this.rowcount) {
			newpos = -1;
		}

		var oldpos = this.rowposition;
		if (newpos != oldpos || (reason == 53 && newpos == oldpos)) {
			if ((this.canrowposchange && this.canrowposchange._has_handlers) || (this.onrowposchanged && this.onrowposchanged._has_handlers)) {
				var evt = new nexacro.DSRowPosChangeEventInfo(this, "canrowposchange", oldpos, newpos, reason);

				if (this.canrowposchange && this.canrowposchange._has_handlers && this._eventstat && v === undefined
					 && (oldpos >= -1 && oldpos < this.rowcount)) {
					var ret = this.on_fire_canrowposchange(evt);
					if (ret == false) {
						return;
					}

					if (newpos != evt.newrow) {
						newpos = evt.newrow;
					}
					if (newpos >= 0 || newpos < this.rowcount) {
						this.rowposition = newpos;
						if (!this._is_loaded) {
							return;
						}
						if (this.onrowposchanged && this.onrowposchanged._has_handlers) {
							this.on_fire_onrowposchanged(evt);
						}
						if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
							var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
							this.on_fire_onvaluechanged(evt);
						}
					}
				}
				else {
					if (newpos >= 0 || newpos < this.rowcount) {
						this.rowposition = newpos;
						if (!this._is_loaded) {
							return;
						}
						if (this._eventstat) {
							if (this.onrowposchanged && this.onrowposchanged._has_handlers) {
								this.on_fire_onrowposchanged(evt);
							}
							if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
								var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
								this.on_fire_onvaluechanged(evt);
							}
						}
					}
				}
			}
			else {
				this.rowposition = newpos;
				if (!this._is_loaded) {
					return;
				}

				if (this._eventstat && this.onvaluechanged && this.onvaluechanged._has_handlers) {
					var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
					this.on_fire_onvaluechanged(evt);
				}
			}
		}
		else if (value_update) {
			if (!this._is_loaded) {
				return;
			}

			if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
				var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
				this.on_fire_onvaluechanged(evt);
			}
		}
		return this.rowposition;
	};

	_pDataset._splitKeyCols = function (str) {
		var arr = [];
		var plus, minus;
		if (str.charAt(0) != '+' && str.charAt(0) != '-') {
			str = '+' + str;
		}
		plus = str.indexOf('+');
		minus = str.indexOf('-');
		var pos = (plus >= 0 && minus >= 0) ? (minus < plus ? minus : plus) : (plus > minus ? plus : minus);
		var arrLength = 0;
		while (pos >= 0) {
			plus = str.indexOf('+', pos + 1);
			minus = str.indexOf('-', pos + 1);
			var nextpos = (plus >= 0 && minus >= 0) ? (minus < plus ? minus : plus) : (plus > minus ? plus : minus);
			if (nextpos < 0) {
				arr[arrLength] = str.substr(pos);
				arrLength++;
			}
			else {
				arr[arrLength] = str.substr(pos, nextpos - pos);
				arrLength++;
			}
			pos = nextpos;
		}
		delete arrLength;
		return arr;
	};

	_pDataset._clearKeyCols = function () {
		this._keycols.splice(0, this._keycols.length);
		this._keycols.max_keylevel = 0;
	};

	_pDataset._parseKeyCols = function () {
		var keyColLength = this._keycols.length;

		if (keyColLength > 0) {
			return keyColLength;
		}

		var str = this.keystring;
		if (str.length > 0) {
			var level = 0;
			var keys = str.split(',');
			var i = keys.length - 1;
			function _parseKeyCols_loop (pthis) {
				if (i >= 0) {
					var key = keys[i].trim();
					if (key.length == 0) {
						i--;
						return false;
					}
					var colonpos = key.indexOf(':');
					if (colonpos <= 0 || (key.charAt(0) != 'S' && key.charAt(0) != 's')) {
						level++;
					}

					var keys2;
					if (colonpos >= 0) {
						keys2 = pthis._splitKeyCols(key.substr(colonpos + 1));
					}
					else {
						keys2 = pthis._splitKeyCols(key);
					}

					var j = keys2.length - 1;
					function _parseKeyCols_loop2 () {
						if (j >= 0) {
							var key2 = keys2[j].trim();
							if (key2.length == 0) {
								j--;
								return false;
							}
							var colid;
							var colidx = -1;
							var descending = false;
							if (key2.charAt(0) == '-') {
								colid = key2.substr(1);
								colidx = pthis.colinfos.indexOf(colid);
								descending = true;
							}
							else if (key2.charAt(0) == '+') {
								colid = key2.substr(1);
								colidx = pthis.colinfos.indexOf(colid);
								descending = false;
							}
							else {
								colid = key2;
								colidx = pthis.colinfos.indexOf(colid);
								descending = false;
							}

							if (colidx >= 0) {
								pthis._keycols[keyColLength] = 
									{
									level : level, 
									colid : colid, 
									colidx : colidx, 
									descending : descending
								};
								keyColLength++;
							}
							j--;
							return false;
						}
						return true;
					}
					while (true) {
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
						if (_parseKeyCols_loop2()) {
							break;
						}
					}
					i--;
					return false;
				}
				return true;
			}
			while (true) {
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
				if (_parseKeyCols_loop(this)) {
					break;
				}
			}
		}
		this._keycols.max_keylevel = level;
		return keyColLength;
	};

	_pDataset._getLocale = function () {
		var locale = nexacro.System.locale;
		var _parent = this;

		while (_parent) {
			if (_parent._locale) {
				locale = _parent._locale;
				break;
			}
			_parent = _parent.parent;
		}

		if (locale.indexOf("_") > -1) {
			locale = locale.substr(0, 2);
		}

		return locale;
	};

	_pDataset._createSortFunc = function () {
		var _keys = this._keycols;
		var _keycnt = _keys.length;
		var _locale = this._getLocale();
		var pThis = this;

		return function (a, b) {
			for (var i = _keycnt - 1; i >= 0; i--) {
				var key = _keys[i];
				var value1 = a[key.colidx];
				var value2 = b[key.colidx];
				var cmp = 0;

				var _type = pThis.colinfos[key.colidx].type.toLowerCase();

				if (!nexacro._isDecimal(value1)) {
					if (value1 != null) {
						if (value1 != value2) {
							if (value2 != null) {
								if ((value2 instanceof nexacro.Decimal) == false) {
									if (_type == "string") {
										if (nexacro.BrowserLang.indexOf(_locale) >= 0) {
											cmp = value1.localeCompare(value2);
										}
										else {
											cmp = value1.localeCompare(value2, _locale);
										}
									}
									else {
										if (value1.valueOf() == value2.valueOf()) {
											cmp = 0;
										}
										else {
											cmp = (value1 > value2 ? 1 : -1);
										}
									}
								}
								else {
									cmp = ((value1.hi > value2.hi || (value1.hi >= value2.hi && value1.lo > value2.lo)) ? 1 : -1);
								}
							}
							else {
								cmp = 1;
							}
						}
						else {
							cmp = 0;
						}
					}
					else if (value1 != value2) {
						cmp = -1;
					}
					else {
						cmp = 0;
					}
				}
				else {
					if (nexacro._isDecimal(value2)) {
						cmp = (value1.hi == value2.hi && value1.lo == value2.lo) ? 0 : ((value1.hi > value2.hi || (value1.hi >= value2.hi && value1.lo > value2.lo)) ? 1 : -1);
					}
					else {
						cmp = 1;
					}
				}

				if (cmp != 0) {
					return (key.descending) ? -cmp : cmp;
				}
			}

			return (a._rawidx > b._rawidx) ? 1 : -1;
		};
	};

	_pDataset._sortData = function () {
		var view = this._viewRecords;
		if (view.length > 0) {
			if (this._viewRecords === this._rawRecords) {
				view = this._viewRecords = this._rawRecords.slice(0, this._rawRecords.length);
			}
			var cmpfn = this._createSortFunc();
			view.sort(cmpfn);
		}
	};
	_pDataset._deleteAllGroupData = function () {
		var view = this._viewRecords;
		var cnt = view.length;
		var i = cnt - 1;
		function _deleteAllGroupData_loop () {
			if (i >= 0) {
				if (view[i]._level > 0) {
					view.splice(i, 1);
				}
				i--;
				return false;
			}
			return true;
		}
		while (true) {
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
			if (_deleteAllGroupData_loop()) {
				break;
			}
		}
	};

	_pDataset._calcGroupData = function (grpData, col_levels) {
		var cols = this.colinfos;
		var colcnt = cols.length;
		var grpStart = grpData._grpstart;
		var grpEnd = grpData._grpend;
		var lvl = grpData._level;
		var keyData = this._viewRecords[grpStart];
		var col = 0;
		function _calcGroupData_loop (pthis) {
			if (col < colcnt) {
				var colprop = cols[col].prop;
				var ntype = cols[col].ntype;

				if (colprop && colprop.length > 0) {
					colprop = colprop.toLowerCase();
				}

				switch (colprop) {
					case "count":
						grpData[col] = pthis._getCount(grpStart, grpEnd, -1);
						break;
					case "sum":
						grpData[col] = pthis._getSum(col, grpStart, grpEnd, -1, ntype);
						break;
					case "max":
						grpData[col] = pthis._getMax(col, grpStart, grpEnd, -1, ntype);
						break;
					case "min":
						grpData[col] = pthis._getMin(col, grpStart, grpEnd, -1, ntype);
						break;
					case "avg":
						grpData[col] = pthis._getAvg(col, grpStart, grpEnd, -1, ntype);
						break;
					case "text":
						grpData[col] = cols[col].sumtext;
						break;
					case "key":
						grpData[col] = keyData[col];
						break;
					default:
						if (col_levels[col] >= lvl) {
							grpData[col] = keyData[col];
						}
						else {
							switch (ntype) {
								case 2:
								case 3:
								case 4:
									grpData[col] = pthis._getSum(col, grpStart, grpEnd, -1, ntype);
									break;
								default:
									grpData[col] = cols[col].sumtext;
									break;
							}
						}
						break;
				}
				col++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
			if (_calcGroupData_loop(this)) {
				break;
			}
		}
	};
	_pDataset._createGroupData = function () {
		var keys = this._keycols;
		var maxlevel = keys.max_keylevel;
		var view = this._viewRecords;
		if (maxlevel == 0 || this._viewRecords.length == 0) {
			return;
		}
		var level_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

		var keycnt = keys.length;
		var col_levels = [];
		var j = 0;
		function _createGroupData_init_loop () {
			if (j < keycnt) {
				col_levels[keys[j].colidx] = keys[j].level;
				j++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
			if (_createGroupData_init_loop()) {
				break;
			}
		}

		var grpstart, grpend;

		var cnt = this._viewRecords.length;
		var prevData = this._viewRecords[0];
		var curData, grpData;
		var chklvl, iskey;

		var idx = 1;
		function _createGroupData_loop (pthis) {
			if (idx < cnt) {
				curData = pthis._viewRecords[idx];
				chklvl = 0;
				var k = keycnt - 1;
				function _createGroupData_chk_loop () {
					if (k >= 0) {
						if (keys[k].level == 0) {
							k--;
							return false;
						}
						if (curData[keys[k].colidx] instanceof nexacro.Decimal && prevData[keys[k].colidx] instanceof nexacro.Decimal) {
							if (!curData[keys[k].colidx].isEqual(prevData[keys[k].colidx])) {
								chklvl = keys[k].level;
								return true;
							}
						}
						else if (curData[keys[k].colidx] != prevData[keys[k].colidx]) {
							chklvl = keys[k].level;
							return true;
						}
						k--;
						return false;
					}
					return true;
				}
				while (true) {
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
					if (_createGroupData_chk_loop()) {
						break;
					}
				}

				if (chklvl != 0) {
					var lvl = 1;
					function _createGroupData_grp_loop () {
						if (lvl <= chklvl) {
							grpData = [];
							grpData._level = lvl;
							grpstart = level_idx[lvl];
							grpend = idx;
							grpData._grpstart = grpstart;
							grpData._grpend = grpend;
							grpData._rtype = 16;
							pthis._calcGroupData(grpData, col_levels);

							if (pthis.reversesubsum) {
								grpData._grpend++;
								view.splice(grpstart, 0, grpData);
							}
							else {
								view.splice(grpend, 0, grpData);
							}

							grpData = null;
							cnt++;
							idx++;
							lvl++;
							return false;
						}
						return true;
					}
					while (true) {
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
						if (_createGroupData_grp_loop()) {
							break;
						}
					}

					prevData = curData;
					lvl = 1;
					function _createGroupData_lastgrp_loop () {
						if (lvl <= chklvl) {
							level_idx[lvl] = idx;
							lvl++;
							return false;
						}
						return true;
					}
					while (true) {
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
						if (_createGroupData_lastgrp_loop()) {
							break;
						}
					}
				}
				idx++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
			if (_createGroupData_loop(this)) {
				break;
			}
		}

		var lvl = 1;
		var viewLength = view.length;
		function _createGroupData_last_loop (pthis) {
			if (lvl <= maxlevel) {
				grpData = [];
				grpData._level = lvl;
				grpstart = level_idx[lvl];
				grpend = viewLength;
				grpData._grpstart = grpstart;
				grpData._grpend = grpend;
				grpData._rtype = 16;
				pthis._calcGroupData(grpData, col_levels);

				if (pthis.reversesubsum) {
					grpData._grpend++;
					view.splice(grpstart, 0, grpData);
				}
				else {
					view[viewLength] = grpData;
				}

				viewLength++;
				lvl++;

				grpData = null;
				return false;
			}
			return true;
		}
		while (true) {
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
			if (_createGroupData_last_loop(this)) {
				break;
			}
		}
		delete viewLength;
	};

	_pDataset._resetSortGroup = function () {
		var oldpos = this.rowposition;
		if (this.rowposition == -1) {
			var oldpos = 0;
		}

		var oldrowdata = this._viewRecords[oldpos];
		if (this._parseKeyCols() > 0 && this._rawRecords.length > 0) {
			if (this._rawRecords != this._viewRecords) {
				if (this._viewRecords.length == 0) {
					oldrowdata = null;
					return false;
				}
				this._deleteAllGroupData();
			}
			else {
				this._viewRecords = null;
				this._viewRecords = this._rawRecords.slice(0, this._rawRecords.length);
			}

			this._sortData();
			this._createGroupData();
			this.rowcount = this._viewRecords.length;
		}

		oldrowdata = null;
		return false;
	};

	_pDataset._adjustGroupRowData = function (row) {
		var keys = this._keycols;
		if (keys.max_keylevel == 0) {
			return false;
		}

		var keycnt = keys.length;
		var col_levels = [];
		var j = 0;
		function _adjustGroupRowData_init_loop () {
			if (j < keycnt) {
				col_levels[keys[j].colidx] = keys[j].level;
				j++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
			if (_adjustGroupRowData_init_loop()) {
				break;
			}
		}

		var view = this._viewRecords;
		var cnt = view.length;
		var grpData;
		var i = row;
		function _adjustGroupRowData_loop (pthis) {
			if (i < cnt) {
				grpData = view[i];
				if (grpData && grpData._rtype == 16 && grpData._grpend >= row) {
					grpData._grpend--;
					if (grpData._grpstart <= row) {
						if (grpData._grpend <= grpData._grpstart) {
							view.splice(i, 1);
							i--;
						}
						else {
							pthis._calcGroupData(grpData, col_levels);
						}
					}
					else {
						grpData._grpstart--;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
			if (_adjustGroupRowData_loop(this)) {
				break;
			}
		}

		col_levels = null;

		return true;
	};

	_pDataset._updateGroupRowData = function (row) {
		var keys = this._keycols;
		if (keys.max_keylevel == 0) {
			return false;
		}
		var keycnt = keys.length;

		if (keycnt == 0) {
			return false;
		}

		var col_levels = [];
		var j = 0;
		function _updateGroupRowData_init_loop () {
			if (j < keycnt) {
				col_levels[keys[j].colidx] = keys[j].level;
				j++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
			if (_updateGroupRowData_init_loop()) {
				break;
			}
		}


		var view = this._viewRecords;
		var cnt = view.length;
		var grpData;
		var i = this.reversesubsum ? cnt - 1 : row;
		function _updateGroupRowData_loop (pthis) {
			if (pthis.reversesubsum) {
				if (i >= 0) {
					grpData = view[i];
					if (grpData._rtype == 16 && grpData._grpstart <= row && grpData._grpend > row) {
						pthis._calcGroupData(grpData, col_levels);
					}
					i--;
					return false;
				}
			}
			else {
				if (i < cnt) {
					grpData = view[i];
					if (grpData._rtype == 16 && grpData._grpstart <= row && grpData._grpend >= row) {
						pthis._calcGroupData(grpData, col_levels);
					}
					i++;
					return false;
				}
			}
			return true;
		}
		while (true) {
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
			if (_updateGroupRowData_loop(this)) {
				break;
			}
		}
		col_levels = null;
		return true;
	};

	_pDataset._removeEmptyRows = function () {
		var raw = this._rawRecords;
		var cnt = raw.length;

		var i = cnt - 1;
		function _removeEmptyRows_rm_loop () {
			if (i >= 0) {
				if (raw[i]._rtype == 0) {
					raw.splice(i, 1);
				}
				i--;
				return false;
			}
			return true;
		}
		while (true) {
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
			if (_removeEmptyRows_rm_loop()) {
				break;
			}
		}

		cnt = raw.length;
		var i = 0;
		function _removeEmptyRows_adj_loop () {
			if (i < cnt) {
				raw[i]._rawidx = i;
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
			if (_removeEmptyRows_adj_loop()) {
				break;
			}
		}
	};

	_pDataset._reFilter = function () {
		var view;

		if (this.filterstr.length > 0) {
			view = this._viewRecords;
			if (view != this._rawRecords) {
				view.splice(0, view.length);
			}

			view = this._viewRecords = this._getNotDelRec();

			if (this._filterFn == null) {
				var filterFn = this._createExprFunc(this.filterstr);
				if (typeof filterFn == "function") {
					this._filterFn = filterFn;
				}
			}

			if (this._filterFn) {
				var exprfn = this._filterFn;
				var cnt = view.length;
				var flag;
				var i = cnt - 1;
				function _reFilter_loop (pthis) {
					if (i >= 0) {
						flag = exprfn.call(pthis, i, i, null, pthis);

						if (!flag) {
							view.splice(i, 1);
						}
						i--;
						return false;
					}
					return true;
				}
				while (true) {
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
					if (_reFilter_loop(this)) {
						break;
					}
				}
			}
		}
		else {
			view = this._viewRecords;
			if (view != this._rawRecords) {
				view.splice(0, view.length);
			}


			if (this._rawRecords.length > 0) {
				this._viewRecords = this._getNotDelRec();
			}
		}

		view = null;
		this.rowcount = this._viewRecords.length;
	};

	_pDataset._getConstColIndex = function (id) {
		return this._constVars.indexOf(id);
	};

	_pDataset._getDataColIndex = function (id) {
		return this.colinfos.indexOf(id);
	};

	_pDataset._addConstColumn = function (id, value, type, size) {
		if (id in this.colinfos) {
			return -1;
		}

		if (id in this._constVars) {
			var preval = this._constVars.get_item(id);
			if (value != preval) {
				this._constVars.set_item(id, value);
				return this._constVars.indexOf(id);
			}
			else {
				return -1;
			}
		}

		if (type) {
			type = nexacro.DataUtils._typecodes[type.toLowerCase()];
			value = nexacro.DataUtils.convert(value, type);
		}

		var tempStr = "";
		if (type) {
			tempStr += " type=\"" + nexacro.DataUtils._typenames[type] + "\"";
		}
		if (size) {
			tempStr += " size=\"" + size + "\"";
		}

		if (tempStr) {
			this._constVars2.add(id, tempStr);
		}

		this.constcount++;
		this.colcount++;
		return this._constVars.add(id, value);
	};

	_pDataset._addColumn = function (id, strtype, size, prop, text) {
		if (this.colinfos) {
			if (this.colinfos[id] && this.colinfos[id].name != "") {
				if (nexacro.Browser == "IE" && this.colinfos[id].name === undefined) {
				}
				else {
					return -1;
				}
			}
		}
		if (this._constVars) {
			if (this._constVars[id] && this._constVars[id].name != "") {
				if (nexacro.Browser == "IE" && this._constVars[id].name === undefined) {
				}
				else {
					return -1;
				}
			}
		}


		var type;
		if (strtype == undefined) {
			type = 1;
			strtype = "STRING";
		}
		else {
			type = nexacro.DataUtils._typeint[strtype.toLowerCase()];
		}

		if (type == null) {
			type = 1;
		}
		if ((+size) != (+size)) {
			size = 256;
		}

		var idx = this.colinfos.length;
		var newcolinfo = new nexacro.DSColumnInfo(id, strtype, type, size, prop, text, idx);
		this.colcount++;
		return this.colinfos.add(id, newcolinfo);
	};

	_pDataset._addColumnInfo = function (id, colinfo) {
		if ((id in this.colinfos) || (id in this._constVars)) {
			return -1;
		}

		var idx = this.colinfos.length;
		var newcolinfo = new nexacro.DSColumnInfo(id, colinfo.type, colinfo.ntype, colinfo.size, colinfo.prop, colinfo.sumtext, idx);
		this.colcount++;
		return this.colinfos.add(id, newcolinfo);
	};
	_pDataset._appendColList = function (collist) {
		if (collist._type_name == "DSColumnInfoList") {
			var len = collist.length;
			var cnt = 0;
			var idx = this.colinfos.length;
			if (len > 0) {
				var i = 0;
				function _appendColList_loop (pthis) {
					if (i < len) {
						var colinfo = collist[i];
						var id = colinfo.id;
						if ((id in pthis.colinfos) || (id in pthis._constVars)) {
							i++;
							return false;
						}

						var newcolinfo = new nexacro.DSColumnInfo(id, colinfo.type, colinfo.ntype, colinfo.size, colinfo.prop, colinfo.sumtext, idx);
						pthis.colinfos.add(id, newcolinfo);
						idx++;
						cnt++;
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
					if (_appendColList_loop(this)) {
						break;
					}
				}

				if (cnt > 0) {
					this.colcount += cnt;
				}
			}
			return cnt;
		}
		return 0;
	};

	_pDataset._deleteColumn = function (id) {
		if (this.updatecontrol) {
			return false;
		}

		var varList = this._constVars;
		var colList = this.colinfos;

		if (typeof (id) == "string") {
			var vv = varList.indexOf(id);

			if (colList.indexOf(id) > -1) {
				id = colList.indexOf(id);
			}
			else if (varList.indexOf(id) > -1) {
				id = varList.indexOf(id) + colList.length;
			}
			else {
				return false;
			}
		}
		else {
			if ((+id) != (+id) || id == undefined) {
				id = 0;
			}
		}

		if (this.colinfos.deleteItem(id) > -1) {
			this.colcount--;
			return true;
		}
		else {
			if (varList.deleteItem(id - this.colinfos.length) > -1) {
				this.constcount--;
				this.colcount--;
				return true;
			}
		}

		return false;
	};

	_pDataset._appendRow = function (rtype) {
		var view = this._viewRecords;
		var raw = this._rawRecords;

		var rowData = [];
		rowData._rawidx = raw.length;
		rowData._level = 0;
		rowData._rtype = rtype;
		rowData._orgcolstrings = [];

		raw[rowData._rawidx] = rowData;

		var viewRecLength = view.length;
		if (raw != view) {
			view[viewRecLength] = rowData;
			viewRecLength++;
		}
		this.rowcount = viewRecLength;

		rowData = null;
		delete viewRecLength;
		return this.rowcount - 1;
	};

	_pDataset._insertRow = function (row, rtype) {
		if (row >= this._viewRecords.length) {
			return this._appendRow(rtype);
		}

		var viewRecords = this._viewRecords;
		var rawRecords = this._rawRecords;
		var rawRecords_len = rawRecords.length;

		var rowData = [];
		rowData._rawidx = rawRecords.length;
		rowData._rtype = rtype;
		rowData._level = 0;

		var deleted = 0;
		for (var i = 0; i < rawRecords_len; i++) {
			if (rawRecords[i]._rtype == 8) {
				deleted++;
			}

			if (i == row + deleted) {
				break;
			}
		}

		rawRecords.splice(row + deleted, 0, rowData);
		if (rawRecords != viewRecords) {
			viewRecords.splice(row, 0, rowData);
		}
		this._removeEmptyRows();

		this.rowcount = viewRecords.length;
		rowData = null;
		return row;
	};

	_pDataset._deleteRow = function (row) {
		if (!((+row) != (+row))) {
			row = parseInt(row) | 0;
		}

		var view = this._viewRecords;
		if (row < 0 || row >= view.length) {
			return -1;
		}


		if (this._rawRecords == view) {
			view = this._viewRecords = this._rawRecords.slice(0, this._rawRecords.length);
		}

		var rowData = view[row];
		if (rowData) {
			var delRecLength = this._deletedRecords.length;

			if (this.updatecontrol) {
				if (rowData._rtype == 1) {
					rowData._rtype = 8;

					this._deletedRecords[delRecLength] = rowData;
					delRecLength++;
					view.splice(row, 1);
				}
				else if (rowData._rtype == 2 || rowData._rtype == 16) {
					rowData._rtype = 0;
					this._removeEmptyRows();
					if (this._rawRecords != view) {
						view.splice(row, 1);
					}
				}
				else if (rowData._rtype == 4) {
					var orgData = rowData._orgrow;
					var colcnt = this.colinfos.length;
					for (var col = 0; col < colcnt; col++) {
						rowData[col] = orgData[col];
					}
					delete rowData._orgrow;
					this._deletedRecords[delRecLength] = rowData;
					delRecLength++;
					view.splice(row, 1);
					rowData._rtype = 8;
				}
				else {
					return -1;
				}
			}
			else {
				rowData._rtype = 0;
				this._removeEmptyRows();
				if (this._rawRecords != view) {
					view.splice(row, 1);
				}
			}

			this.rowcount = view.length;
		}
		return row;
	};

	_pDataset._moveRow = function (oldrow, newrow) {
		var raw = this._rawRecords;
		var view = this._viewRecords;

		if (raw.length <= 0 || oldrow >= view.length || newrow >= view.length || oldrow == newrow) {
			return -1;
		}


		var rowTmp = raw[oldrow];
		var oldrawrow = oldrow, newrawrow = newrow, is_compare = true;

		if (raw != view) {
			oldrawrow = this._findrawRecords(oldrow);
			newrawrow = this._findrawRecords(newrow);

			rowTmp = raw[oldrawrow];
			is_compare = false;
		}


		if (rowTmp && newrawrow >= 0) {
			raw.splice(oldrawrow, 1);
			raw.splice(newrawrow, 0, rowTmp);
		}


		if (!is_compare) {
			rowTmp = view[oldrow];
			view.splice(oldrow, 1);
			view.splice(newrow, 0, rowTmp);
		}
		rowTmp = null;
		return newrow;
	};


	_pDataset._findrawRecords = function (row) {
		var raw = this._rawRecords;
		var row_idx = this._viewRecords[row]._rawidx;

		for (var i = 0; i < raw.length; i++) {
			if (raw[i]._rtype == 8) {
				continue;
			}

			if (row_idx == raw[i]._rawidx) {
				return i;
			}
		}
		return -1;
	};


	_pDataset._findDeletedRecords = function (row) {
		var del = this._deletedRecords;
		var row_idx = this._rawRecords[row]._rawidx;

		for (var i = 0; i < del.length; i++) {
			if (row_idx == del[i]._rawidx) {
				return i;
			}
		}
		return -1;
	};

	_pDataset._exchangeRow = function (row1, row2) {
		var raw = this._rawRecords;
		var view = this._viewRecords;

		if (raw.length <= 0 || row1 >= view.length || row2 >= view.length || row1 == row2) {
			return false;
		}


		var rowTmp = raw[row1];
		var rawrow1 = row1, rawrow2 = row2, is_compare = true;

		if (raw != view) {
			rawrow1 = this._findrawRecords(row1);
			rawrow2 = this._findrawRecords(row2);

			rowTmp = raw[rawrow1];
			is_compare = false;
		}


		if (rowTmp && rawrow2 >= 0) {
			raw[rawrow1] = raw[rawrow2];
			raw[rawrow2] = rowTmp;
		}


		if (!is_compare) {
			rowTmp = view[row1];
			view[row1] = view[row2];
			view[row2] = rowTmp;
		}
		rowTmp = null;
		return true;
	};

	_pDataset._deleteAll = function () {
		var view = this._viewRecords;
		var cnt = view.length;
		var emptycnt = 0;
		var row = 0;
		var delRecLength = this._deletedRecords.length;
		var updateCon = this.updatecontrol;
		var delRecords = this._deletedRecords;
		function _deleteAll_loop (pthis) {
			if (row < cnt) {
				var rowData = view[row];
				if (updateCon) {
					if (rowData._rtype == 1) {
						rowData._rtype = 8;
						delRecords[delRecLength] = rowData;
						delRecLength++;
					}
					else if (rowData._rtype == 2) {
						rowData._rtype = 0;
						emptycnt++;
					}
					else if (rowData._rtype == 4) {
						var orgData = rowData._orgrow;
						var colcnt = pthis.colinfos.length;
						for (var col = 0; col < colcnt; col++) {
							rowData[col] = orgData[col];
						}
						delete rowData._orgrow;
						rowData._rtype = 8;
						delRecords[delRecLength] = rowData;
						delRecLength++;
					}
				}
				else {
					rowData._rtype = 0;
					emptycnt++;
				}
				row++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
			if (_deleteAll_loop(this)) {
				break;
			}
		}

		this._viewRecords.splice(0, this._viewRecords.length);

		if (emptycnt > 0) {
			this._removeEmptyRows();
		}
		this.rowcount = 0;

		if (this.loadkeymode.toLowerCase() == "reset") {
			this.keystring = this._defaultKeyStr;
			this.on_apply_keystring();
		}

		return cnt;
	};

	_pDataset._deleteMultiRows = function (del_rows) {
		var view = this._viewRecords;
		if (this._rawRecords == view) {
			view = this._viewRecords = this._rawRecords.slice(0, this._rawRecords.length);
		}
		var deleted = this._deletedRecords;
		var cnt = view.length;
		var newView = [];
		var delcnt = 0;
		var rowData;
		var delRowData;
		var row = 0;
		var delRow = -1;
		var delRecLength = deleted.length;
		var nViewLength = 0;
		var delcnt_noupdate = 0;

		function _deleteMultiRows_loop (pthis) {
			if (row < cnt) {
				delRow = del_rows[delcnt];
				rowData = view[row];
				delRowData = view[delRow - delcnt_noupdate];
				if (rowData == delRowData) {
					if (pthis.updatecontrol) {
						if (rowData._rtype == 1) {
							rowData._rtype = 8;
							deleted[delRecLength] = rowData;
							delRecLength++;
							delcnt++;
						}
						else if (rowData._rtype == 2) {
							rowData._rtype = 0;
							pthis._removeEmptyRows();
							delcnt++;
						}
						else if (rowData._rtype == 4) {
							var orgData = rowData._orgrow;
							var colcnt = pthis.colinfos.length;
							for (var col = 0; col < colcnt; col++) {
								rowData[col] = orgData[col];
							}
							delete rowData._orgrow;
							rowData._rtype = 8;
							deleted[delRecLength] = rowData;
							delRecLength++;
							delcnt++;
						}
					}
					else {
						rowData._rtype = 0;
						pthis._removeEmptyRows();
						view.splice(row, 1);
						cnt--;
						row--;
						delcnt++;
						delcnt_noupdate++;
					}
				}
				else {
					newView[nViewLength] = rowData;
					nViewLength++;
				}
				row++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
			if (_deleteMultiRows_loop(this)) {
				break;
			}
		}
		delete delRecLength;
		delete nViewLength;

		if (delcnt > 0) {
			if (this._rawRecords != this._viewRecords) {
				this._viewRecords.splice(0, this._viewRecords.length);
			}
			this._viewRecords = newView;
		}

		newView = null;
		return delcnt;
	};

	_pDataset._filterRow = function (row) {
		var view = this._viewRecords;
		if (row >= view.length) {
			return false;
		}

		view.splice(row, 1);
		this._adjustGroupRowData(row);
		this.rowcount = view.length;
		return true;
	};

	_pDataset._updateColumn = function (row, rowData, idx, value) {
		var oldVal = rowData[idx];
		if (oldVal === value || rowData._rtype == 16) {
			return false;
		}

		if (rowData._rtype == 1 && this.updatecontrol) {
			var orgrowData = [];
			var len = rowData.length;
			var i = 0;
			function _updateColumn_loop () {
				if (i < len) {
					orgrowData[i] = rowData[i];
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
				if (_updateColumn_loop()) {
					break;
				}
			}
			rowData._orgrow = orgrowData;
			rowData._rtype = 4;

			orgrowData = null;
		}
		else if (rowData._rtype == 4 && this.updatecontrol) {
			if (rowData._orgrow) {
				var cnt = this.colinfos.length;
				rowData[idx] = value;

				if (rowData._orgcolstrings) {
					rowData._orgcolstrings[idx] = value;
				}

				var _rtypechange = true;
				for (var j = 0; j < cnt; j++) {
					if (rowData[j] instanceof nexacro.Decimal) {
						if (rowData._orgrow[j] instanceof nexacro.Decimal) {
							if (rowData[j].isEqual(rowData._orgrow[j]) == false) {
								_rtypechange = false;
								break;
							}
						}
						else if (rowData[j] != rowData._orgrow[j]) {
							_rtypechange = false;
							break;
						}
					}
					else if (rowData[j] instanceof nexacro.Date) {
						if (rowData._orgrow[j] instanceof nexacro.Date) {
							if (rowData[j].valueOf() != rowData._orgrow[j].valueOf()) {
								_rtypechange = false;
								break;
							}
						}
						else if (rowData[j] != rowData._orgrow[j]) {
							_rtypechange = false;
							break;
						}
					}
					else if (!(rowData[j] == "" && rowData._orgrow[j] == undefined) && rowData[j] !== rowData._orgrow[j]) {
						_rtypechange = false;
						break;
					}
				}

				if (_rtypechange == true) {
					delete rowData["_orgrow"];
					rowData._rtype = 1;
				}
			}
		}

		rowData[idx] = value;

		if (rowData._orgcolstrings) {
			rowData._orgcolstrings[idx] = value;
		}

		this._updateGroupRowData(row);
		return true;
	};

	_pDataset._setLayout = function (ds) {
		this.colinfos = ds.colinfos;
		this._constVars = ds._constVars;
	};

	_pDataset._setRawData = function (rawData, deletedData) {
		this._rawRecords = rawData;
		this._viewRecords = this._rawRecords;
		this._deletedRecords = deletedData;
	};

	_pDataset._createExprFunc = function (expr_str) {
		var parser = new nexacro.ExprParser();
		var conv_expr = parser.makeExpr(this, expr_str);
		var exprfn = nexacro._createInlineFunc(conv_expr, ["currow", "rowidx", "comp", "dataset"]);
		return exprfn;
	};

	_pDataset._getColumnSize = function (col) {
		if ((+col) != (+col)) {
			if (this.colinfos[col]) {
				return this.colinfos[col].size;
			}
			else if (this._conVars[col]) {
				return this._colVars[col].size;
			}
			else {
				return undefined;
			}
		}
		else {
			if (col < 0 || col >= this.colcount) {
				return undefined;
			}

			var cLen = this.colinfos.length;
			if (this.colinfos[col]) {
				return this.colinfos[col].size;
			}
			else {
				return this._colVars[col - cLen].size;
			}
		}
	};

	_pDataset._getColumnType = function (idx) {
		if (idx in this.colinfos) {
			return this.colinfos[idx].ntype;
		}

		if (idx in this._constVars) {
			var val = this._constVars[idx];
			var type = (typeof val);
			if (type == "number") {
				return 2;
			}
			return nexacro.DataUtils._typecodes[type];
		}
	};

	_pDataset._isConstColumn = function (col) {
		if ((+col) != (+col)) {
			if (this._constVars[col]) {
				return true;
			}
			else {
				return false;
			}
		}
		else {
			var cLen = this.colinfos.length;
			if (col < this.colcount && col >= cLen) {
				return true;
			}
			else {
				return false;
			}
		}
	};

	_pDataset._copyConstColList = function (constVars) {
		if (constVars._type_name == "VariableList") {
			var len = constVars.length;
			var cnt = 0;
			var idx = this._constVars.length;
			if (len > 0) {
				var i = 0;
				function _copyConstColList_loop (pthis) {
					if (i < len) {
						var id = constVars.get_id(i);
						if ((id in pthis.colinfos) || (id in pthis._constVars)) {
							i++;
							return false;
						}

						pthis._constVars.add(id, constVars[i]);

						idx++;
						cnt++;
						i++;
						return false;
					}
					return true;
				}
				while (true) {
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
					if (_copyConstColList_loop(this)) {
						break;
					}
				}
				if (cnt > 0) {
					this.count += cnt;
					this.constcount += cnt;
				}
			}
			return cnt;
		}
		return 0;
	};
	_pDataset._copyRowList = function (srcRecords) {
		var len = srcRecords.length;
		var cnt = 0;
		var idx = this._rawRecords.length;

		var viewRecLength = this._viewRecords.length;
		var rawRecLength = this._rawRecords.length;
		var i = 0;
		function _copyRowList_loop (pthis) {
			if (i < len) {
				var srcData = srcRecords[i];
				var level = srcData._level;
				var rtype = srcData._rtype;

				if ((level == 0) && (rtype == 1 || rtype == 2 || rtype == 4)) {
					var rowData = [];
					rowData._level = 0;
					rowData._rawidx = idx;
					rowData._rtype = 1;
					rowData._orgcolstrings = [];

					var count = srcData.length;
					for (var j = 0; j < count; j++) {
						rowData[j] = srcData[j];
						if (srcData._orgcolstrings) {
							rowData._orgcolstrings[j] = srcData._orgcolstrings[j];
						}
					}

					if (pthis._rawRecords != pthis._viewRecords) {
						pthis._viewRecords[viewRecLength] = rowData;
						viewRecLength++;
					}

					pthis._rawRecords[rawRecLength] = rowData;
					rawRecLength++;
					rowData = null;
				}

				srcData = null;
				idx++;
				cnt++;
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
			if (_copyRowList_loop(this)) {
				break;
			}
		}
		delete rawRecLength;
		delete viewRecLength;

		return cnt;
	};

	_pDataset._copyData = function (srcds, isFiltered) {
		if (this.name == undefined) {
			this.id = this.name = srcds.id;
		}

		this._copyConstColList(srcds._constVars);
		this._appendColList(srcds.colinfos);

		if (isFiltered == true) {
			if (srcds._viewRecords.length > 0) {
				this._copyRowList(srcds._viewRecords);
			}
		}
		else {
			if (srcds._rawRecords.length > 0) {
				this._copyRowList(srcds._rawRecords);
			}
		}

		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = this._viewRecords.length;
	};

	_pDataset._mergeData = function (srcds) {
		var len = srcds._rawRecords.length;
		var cnt = 0;
		var start = this._rawRecords.length;
		var idx = start;
		var count = this.colinfos.length;

		var viewRecLength = this._viewRecords.length;
		var rawRecLength = this._rawRecords.length;

		var i = 0;
		function _mergeData_loop (pthis) {
			if (i < len) {
				var srcData = srcds._rawRecords[i];
				var level = srcData._level;
				var rtype = srcData._rtype;

				if ((level == 0) && (rtype == 1 || rtype == 2 || rtype == 4)) {
					var rowData = [];
					rowData._level = 0;
					rowData._rawidx = idx;
					rowData._rtype = 1;

					if (pthis._rawRecords != pthis._viewRecords) {
						pthis._viewRecords[viewRecLength] = rowData;
						viewRecLength++;
					}

					pthis._rawRecords[rawRecLength] = rowData;
					rawRecLength++;

					for (var j = 0; j < count; j++) {
						var id = pthis.colinfos.get_id(j);
						var srcidx = srcds.colinfos.indexOf(id);

						if (srcidx != null) {
							rowData[j] = pthis.colinfos[j]._fromVal(srcData[srcidx]);
						}
					}
					idx++;
					cnt++;
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
			if (_mergeData_loop(this)) {
				break;
			}
		}
		delete viewRecLength;
		delete rawRecLength;

		if (cnt > 0) {
			this.rowcount += cnt;
		}

		return cnt;
	};

	_pDataset._appendConstColList = function (constVars, chkcol) {
		if (constVars._type_name == "VariableList") {
			var len = this._constVars.length;
			var cnt = 0;
			var mincount = Math.min(len, constVars.length);

			if (len > 0) {
				if (chkcol) {
					var i = 0;
					function _appendConstColList_loop (pthis) {
						if (i < len) {
							var id = pthis._constVars.get_id(i);
							var srcidx = constVars.indexOf(id);

							if (srcidx != null) {
								pthis._constVars.set_item(i, constVars[srcidx]);
								cnt++;
							}
							i++;
							return false;
						}
						return true;
					}
					while (true) {
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
						if (_appendConstColList_loop(this)) {
							break;
						}
					}
				}
				else {
					var i = 0;
					function _appendConstColList_loop2 (pthis) {
						if (i < mincount) {
							pthis._constVars.set_item(i, constVars[i]);
							cnt++;
							i++;
							return false;
						}
						return true;
					}
					while (true) {
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
						if (_appendConstColList_loop2(this)) {
							break;
						}
					}
				}
			}
			return cnt;
		}
		return 0;
	};
	_pDataset._appendRowList = function (srcds, chkcol) {
		var len = srcds._viewRecords.length;

		var cnt = 0;
		var idx = this._rawRecords.length;
		var count = this.colinfos.length;
		var mincount = Math.min(count, srcds._rawRecords[0].length);

		var viewRecLength = this._viewRecords.length;
		var rawRecLength = this._rawRecords.length;

		var i = 0;
		function _appendRowList_loop (pthis) {
			if (i < len) {
				var srcData = srcds._viewRecords[i];
				var level = srcData._level;
				var rtype = srcData._rtype;

				if ((level == 0) && (rtype == 1 || rtype == 2 || rtype == 4)) {
					var rowData = [];
					rowData._level = 0;
					rowData._rawidx = idx;
					rowData._rtype = 1;

					if (chkcol == true || chkcol == "true") {
						var j = 0;
						function _appendRowList_loop2 () {
							if (j < count) {
								var id = pthis.colinfos.get_id(j);
								var srcidx = srcds.colinfos.indexOf(id);

								if (srcidx != null) {
									rowData[j] = nexacro.DataUtils.convert(srcData[srcidx], pthis.colinfos[j].ntype);
								}
								j++;
								return false;
							}
							return true;
						}
						while (true) {
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
							if (_appendRowList_loop2()) {
								break;
							}
						}
					}
					else {
						var j = 0;
						function _appendRowList_loop3 () {
							if (j < mincount) {
								rowData[j] = nexacro.DataUtils.convert(srcData[j], pthis.colinfos[j].ntype);
								j++;
								return false;
							}
							return true;
						}
						while (true) {
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
							if (_appendRowList_loop3()) {
								break;
							}
						}
					}

					if (pthis._rawRecords != pthis._viewRecords) {
						pthis._viewRecords[viewRecLength] = rowData;
						viewRecLength++;
					}

					pthis._rawRecords[rawRecLength] = rowData;
					var rawRecord = pthis._rawRecords[rawRecLength];
					if (!rawRecord._orgcolstrings) {
						rawRecord._orgcolstrings = [];
					}
					for (var j = 0, n = rawRecord ? rawRecord.length : 0; j < n; j++) {
						rawRecord._orgcolstrings[rawRecord._orgcolstrings.length] = rawRecord[j];
					}
					rawRecLength++;
				}

				idx++;
				cnt++;
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
			if (_appendRowList_loop(this)) {
				break;
			}
		}
		delete viewRecLength;
		delete rawRecLength;

		return cnt;
	};
	_pDataset._appendData = function (srcds, chkcol, bupdateconst) {
		if (this.colcount == 0) {
			this._appendColList(srcds.colinfos);

			if (bupdateconst == true) {
				this._copyConstColList(srcds._constVars);
			}
		}
		else {
			if (bupdateconst == true && srcds._constVars.length > 0) {
				this._appendConstColList(srcds._constVars, chkcol);
			}
		}

		if (srcds._viewRecords.length > 0) {
			this._appendRowList(srcds, chkcol);
		}

		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = this._viewRecords.length;
	};

	_pDataset._bWorkingstatus = false;
	_pDataset._endLoad = function (errorcode, errormsg, reason) {
		this._is_loaded = true;
		this._bWorkingstatus = true;
		this._reFilter();
		this._resetSortGroup();
		if (this._eventstat) {
			this.on_fire_onload(errorcode, errormsg, reason);

			if (this._viewRecords && this._viewRecords.length > 0) {
				var newpos = this.rowposition == -1 ? 0 : this.rowposition;
				if (newpos >= this.rowcount) {
					newpos = -1;
				}
				var oldpos = this.rowposition;
				if (newpos != oldpos || (reason == 3 && errormsg == "SUCCESS" && newpos > 0)) {
					if (this.onrowposchanged && this.onrowposchanged._has_handlers) {
						var evt = new nexacro.DSRowPosChangeEventInfo(this, "onrowposchanged", oldpos, newpos, 51);
						if (newpos >= 0 || newpos < this.rowcount) {
							this.rowposition = newpos;
							this.on_fire_onrowposchanged(evt);
						}
					}
					else {
						this.rowposition = newpos;
					}
				}
				if (this.onvaluechanged && this.onvaluechanged._has_handlers) {
					var evt = new nexacro.DSColChangeEventInfo(this, "onvaluechanged", this.rowposition, -1, -1, "", undefined, undefined);
					this.on_fire_onvaluechanged(evt);
				}
			}
		}
		else if (this._viewRecords.length > 0) {
			this.rowposition = 0;
		}

		this._bWorkingstatus = false;
	};

	if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
		_pDataset._setContents = function (contents) {
			var strxml = "<Dataset id=\"" + this.id + "\">" + contents + "</Dataset>";
			if (strxml.length) {
				var doc = nexacro._parseXMLDocument(strxml);
				if (doc) {
					if (doc.nodeName == "Dataset") {
						this._loadFromDOM(doc);
					}
					else {
						var datasets = doc.getElementsByTagName("Dataset");
						this._loadFromDOM(datasets[0]);
					}
					this.rowposition = -1;
				}
				doc = null;
			}

			this.updateSortGroup();

			if (this.parent && (this.parent != application && this.parent._is_form == false)) {
				this.on_created();
			}
		};
	}
	else {
		_pDataset._setContents = function (contents) {
			if (contents.length) {
				this._loadFromXMLStr(contents);
				this.rowposition = -1;
			}

			this.updateSortGroup();

			if (this.parent && (this.parent != application && this.parent._is_form == false)) {
				this.on_created();
			}
		};
	}

	_pDataset._loadFromDOM = function (dsDOM, curIdx, loadCnt, bOrgLayout, bClear) {
		this.loadstatus = true;
		this._eventstat = !this.loadstatus && this.enableevent;

		if (bClear) {
			if (bOrgLayout) {
				this._clearData();
			}
			else {
				this._clearAll();
			}
		}

		if (dsDOM == null) {
			this.loadstatus = false;
			this._eventstat = this.enableevent;

			return 0;
		}
		if (!curIdx) {
			curIdx = 0;
		}
		if (!loadCnt) {
			loadCnt = -1;
		}

		this._setColInfoFromDOM(dsDOM, bOrgLayout);

		curIdx = this._loadRecordFromDOM(dsDOM, curIdx, loadCnt);

		var viewRecords = this._viewRecords;
		var delRecords = this._deletedRecords;
		var rawRecords = this._rawRecords;

		if (delRecords.length > 0) {
			viewRecords = this._viewRecords = [];
			var len = rawRecords.length;
			var viewRecLength = viewRecords.length;
			var i = 0;

			function _loadFromDOM_delrow_loop () {
				if (i < len) {
					_currowData = rawRecords[i];
					if (_currowData._rtype != 8) {
						viewRecords[viewRecLength] = _currowData;
						viewRecLength++;
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
				if (_loadFromDOM_delrow_loop()) {
					break;
				}
			}
		}
		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = viewRecords.length;

		this.loadstatus = false;
		this._eventstat = this.enableevent;

		viewRecords = null;
		delRecords = null;
		rawRecords = null;

		return curIdx;
	};

	_pDataset._setColInfoFromDOM = function (dsDOM, bOrgLayout) {
		var i, col, colIdx, len, cnt, orgcnt, _rowElems, _colElems, _rowElem, _orgrowElems, _orgrowElem, _colElem, _colMap, id, type;

		if (bOrgLayout) {
			;
		}
		else {
			_colElems = dsDOM.getElementsByTagName("ConstColumn");
			len = (_colElems ? _colElems.length : 0);
			i = 0;
			function _loadFromDOM_const_loop (pthis) {
				if (i < len) {
					_colElem = _colElems[i];
					id = _colElem.getAttribute("id");
					if (id.length) {
						pthis._addConstColumn(id, _colElem.getAttribute("value"), _colElem.getAttribute("type"));
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
				if (_loadFromDOM_const_loop(this)) {
					break;
				}
			}

			_colElems = dsDOM.getElementsByTagName("Column");
			len = (_colElems ? _colElems.length : 0);
			i = 0;
			function _loadFromDOM_col_loop (pthis) {
				if (i < len) {
					_colElem = _colElems[i];
					id = _colElem.getAttribute("id");
					if (id.length) {
						pthis._addColumn(id, _colElem.getAttribute("type"), _colElem.getAttribute("size"), _colElem.getAttribute("prop"), _colElem.getAttribute("sumtext"));
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
				if (_loadFromDOM_col_loop(this)) {
					break;
				}
			}
			_colElems = null;
		}
	};

	_pDataset._loadRecordFromDOM = function (dsDOM, curIdx, loadCnt) {
		var colList = this.colinfos;
		var curCol;

		var _rowElems, _colElems;

		_rowElems = dsDOM.getElementsByTagName("Row");
		var cnt = (_rowElems ? _rowElems.length : 0);

		var rawRecords = this._rawRecords;
		var delRecords = this._deletedRecords;
		var rawRecLength = rawRecords.length;
		var delRecLength = delRecords.length;
		var colCnt = colList.length;

		function _loadFromDOM_row_loop () {
			if (curIdx < cnt) {
				var _currowData = new Array(colCnt);
				_currowData._rawidx = curIdx;
				_currowData._level = 0;

				var _colInfo;
				for (var icheck = 0; icheck < colCnt; icheck++) {
					_colInfo = colList[icheck];
					if (_colInfo.ntype >= 4 && _colInfo.ntype <= 7) {
						_currowData[_colInfo._index] = null;
					}
				}

				_rowElem = _rowElems[curIdx];
				type = _rowElem.getAttribute("type");

				if (type == null) {
					_currowData._rtype = 1;
				}
				else if (type.charAt(0) == 'I' || type.charAt(0) == 'i') {
					_currowData._rtype = 2;
				}
				else if (type.charAt(0) == 'U' || type.charAt(0) == 'u') {
					_currowData._rtype = 4;
				}
				else if (type.charAt(0) == 'D' || type.charAt(0) == 'd') {
					_currowData._rtype = 8;
				}
				else {
					_currowData._rtype = 1;
				}
				_colElems = _rowElem.getElementsByTagName("Col");
				len = (_colElems ? _colElems.length : 0);

				var _textElem;
				for (var j = 0; j < len; j++) {
					_colElem = _colElems[j];
					id = _colElem.getAttribute("id");

					curCol = colList[id];
					if (curCol) {
						_textElem = _colElem.firstChild;
						if (_textElem) {
							_currowData[curCol._index] = curCol._fromText(_textElem.nodeValue);
						}
						else {
							_currowData[curCol._index] = "";
						}
					}
				}
				_colElems = null;

				if (_currowData._rtype == 4) {
					_orgrowElems = _rowElem.getElementsByTagName("OrgRow");
					orgcnt = (_orgrowElems ? _orgrowElems.length : 0);
					if (orgcnt) {
						var _orgrowData = new Array(colCnt);
						for (var iicheck = 0; iicheck < colCnt; iicheck++) {
							if (colList[iicheck].ntype >= 4 && colList[iicheck].ntype <= 7) {
								_orgrowData[colList[iicheck]._index] = null;
							}
						}

						_colElems = _orgrowElems[0].getElementsByTagName("Col");
						len = (_colElems ? _colElems.length : 0);

						for (var j = 0; j < len; j++) {
							_colElem = _colElems[j];
							id = _colElem.getAttribute("id");
							curCol = colList[id];
							if (curCol) {
								_textElem = _colElem.firstChild;
								if (_textElem) {
									_orgrowData[curCol._index] = curCol._fromText(_textElem.nodeValue);
								}
							}
						}
						_currowData._orgrow = _orgrowData;
					}
				}

				if (_currowData._rtype == 8) {
					delRecords[delRecLength] = _currowData;
					delRecLength++;
				}

				rawRecords[rawRecLength] = _currowData;
				rawRecords[rawRecLength]._orgcolstrings = _currowData.slice(0);

				rawRecLength++;
				curIdx++;
				_currowData = null;

				if (loadCnt > 0 && (rawRecLength - delRecLength) == loadCnt) {
					return true;
				}

				return false;
			}
			return true;
		}
		while (true) {
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
			if (_loadFromDOM_row_loop()) {
				break;
			}
		}
		_rowElems = null;
		_colElems = null;
		rawRecords = null;
		delRecords = null;

		delete rawRecLength;
		delete delRecLength;

		return curIdx;
	};


	_pDataset._setColInfoFromXMLStr = function (xmlStr) {
		var xml_parse_pos = 0;
		var colInfo = nexacro._getXMLTagData(xmlStr, xml_parse_pos, "<ColumnInfo>", "</ColumnInfo>");
		if (colInfo) {
			xml_parse_pos = colInfo[3];
			var colinfoData = colInfo[0];

			var const_parse_pos = 0;
			function _loadFromXMLStr_const_loop (pthis) {
				var constVar = nexacro._getXMLTagData2(colinfoData, const_parse_pos, "<ConstColumn ", "</ConstColumn>");
				if (constVar == null) {
					return true;
				}
				const_parse_pos = constVar[3];
				var attrStr = constVar[1];
				var id = nexacro._getXMLAttributeID(attrStr);
				var value = nexacro._getXMLAttributeData(attrStr, "value");
				if (id.length) {
					var type = nexacro._getXMLAttributeType(attrStr);
					var size = nexacro._getXMLAttributeData(attrStr, "size");
					pthis._addConstColumn(id, nexacro._decodeXml(value), type, size);
				}
				return false;
			}
			while (true) {
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_const_loop(this)) {
					break;
				}
			}

			var colinfo_parse_pos = 0;
			function _loadFromXMLStr_col_loop (pthis) {
				var colInfo = nexacro._getXMLTagData4(colinfoData, colinfo_parse_pos, "<Column ");
				if (colInfo == null) {
					return true;
				}
				colinfo_parse_pos = colInfo[3];
				var attrStr = colInfo[1];
				var id = nexacro._getXMLAttributeID(attrStr);
				if (id && id.length) {
					var type = nexacro._getXMLAttributeType(attrStr);
					var size = nexacro._getXMLAttributeData(attrStr, "size");
					var prop = nexacro._getXMLAttributeData(attrStr, "prop");
					var sumtext = nexacro._getXMLAttributeData(attrStr, "sumtext");
					pthis._addColumn(id, type, size, prop, sumtext);
				}
				return false;
			}
			while (true) {
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
				if (_loadFromXMLStr_col_loop(this)) {
					break;
				}
			}
		}

		return xml_parse_pos;
	};

	_pDataset._loadRecordFromXMLStr = function (xmlStr, xml_parse_pos, loadCnt) {
		var colList = this.colinfos;
		var rawRecords = this._rawRecords;
		var delRecords = this._deletedRecords;
		var rawRecLength = rawRecords.length;
		var delRecLength = delRecords.length;
		var colCnt = colList.length;

		var rowidx = 0;

		if (xml_parse_pos > -1) {
			function _loadFromXMLStr_row_loop () {
				var rowData;
				var attrStr;
				var rowInfo = nexacro._getXMLTagData3(xmlStr, xml_parse_pos, "<Row", "</Row>");
				if (rowInfo == null) {
					return true;
				}
				xml_parse_pos = rowInfo[3];
				rowData = rowInfo[0];
				attrStr = rowInfo[1];

				var _currowData = new Array(colCnt);
				_currowData._rawidx = rowidx;
				_currowData._level = 0;
				_currowData._orgcolstrings = [];

				for (var i = 0; i < colCnt; i++) {
					if (colList[i].ntype >= 4 && colList[i].ntype <= 7) {
						_currowData[colList[i]._index] = undefined;
					}
				}

				rowidx++;

				if (attrStr) {
					var type = nexacro._getXMLAttributeType(attrStr);
					if (!type) {
						_currowData._rtype = 1;
					}
					else {
						var typeChar = type.charAt(0);
						if (typeChar == 'I' || typeChar == 'i') {
							_currowData._rtype = 2;
						}
						else if (typeChar == 'U' || typeChar == 'u') {
							_currowData._rtype = 4;
						}
						else if (typeChar == 'D' || typeChar == 'd') {
							_currowData._rtype = 8;
						}
						else {
							_currowData._rtype = 1;
						}
					}
				}
				else {
					_currowData._rtype = 1;
				}

				if (_currowData._rtype == 4) {
					var orgRowInfo = nexacro._getXMLTagData(rowData, 0, "<OrgRow>", "</OrgRow>");
					if (orgRowInfo) {
						rowData = rowData.substring(0, orgRowInfo[2]) + rowData.substring(orgRowInfo[3]);

						var orgData = orgRowInfo[0];

						var _orgrowData = new Array(colCnt);

						for (var ii = 0; ii < colCnt; ii++) {
							if (colList[ii].ntype >= 4 && colList[ii].ntype <= 7) {
								_orgrowData[colList[ii]._index] = null;
							}
						}

						var org_parse_pos = 0;
						function _loadFromXMLStr_colvalue_loop2 () {
							var colInfo = nexacro._getXMLTagData2(orgData, org_parse_pos, "<Col ", "</Col>");
							if (colInfo == null) {
								return true;
							}
							org_parse_pos = colInfo[3];
							var attrStr = colInfo[1];

							var id = nexacro._getXMLAttributeID(attrStr);
							var curCol = colList[id];
							if (curCol) {
								_orgrowData[curCol._index] = curCol._fromXMLText(colInfo[0]);
							}
							return false;
						}

						while (true) {
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
							if (_loadFromXMLStr_colvalue_loop2()) {
								break;
							}
						}
						_currowData._orgrow = _orgrowData;
					}
				}

				var row_parse_pos = 0;
				function _loadFromXMLStr_colvalue_loop () {
					if (rowData) {
						var colInfo = nexacro._getXMLTagData2(rowData, row_parse_pos, "<Col ", "</Col>");
						if (colInfo == null) {
							return true;
						}

						row_parse_pos = colInfo[3];
						var attrStr = colInfo[1];

						var id = nexacro._getXMLAttributeID(attrStr);
						var curCol = colList[id];
						if (curCol) {
							_currowData[curCol._index] = curCol._fromXMLText(colInfo[0]);
							if (!_currowData._orgcolstrings) {
								_currowData._orgcolstrings = [];
							}
							_currowData._orgcolstrings[curCol._index] = _currowData[curCol._index];
						}
						return false;
					}
					return true;
				}

				while (true) {
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
					if (_loadFromXMLStr_colvalue_loop()) {
						break;
					}
				}

				if (_currowData._rtype == 8) {
					delRecords[delRecLength] = _currowData;
					delRecLength++;
				}
				rawRecords[rawRecLength] = _currowData;
				rawRecLength++;

				rowData = null;
				attrStr = null;
				rowInfo = null;
				_currowData = null;

				if (loadCnt > 0 && (rawRecLength - delRecLength) == loadCnt) {
					return true;
				}

				return false;
			}

			while (true) {
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
				if (_loadFromXMLStr_row_loop()) {
					break;
				}
			}
		}

		rawRecords = null;
		delRecords = null;

		return xml_parse_pos;
	};

	_pDataset._loadFromXMLStr = function (xmlStr, xml_parse_pos, loadCnt, bOrgLayout, bClear) {
		this.loadstatus = true;
		this._eventstat = !this.loadstatus && this.enableevent;

		if (!xml_parse_pos) {
			xml_parse_pos = 0;
		}

		if (!loadCnt) {
			loadCnt = -1;
		}

		if (bClear) {
			if (bOrgLayout) {
				this._clearData();
			}
			else {
				this._clearAll();
			}
		}

		if (!xmlStr) {
			this.loadstatus = false;
			this._eventstat = this.enableevent;

			return 0;
		}

		if (bOrgLayout) {
			if (xml_parse_pos <= 0) {
				xml_parse_pos = xmlStr.indexOf("<Rows>");
				if (xml_parse_pos > -1) {
					xml_parse_pos += 6;
				}
			}
		}
		else {
			if (xml_parse_pos <= 0) {
				xml_parse_pos = this._setColInfoFromXMLStr(xmlStr);
				xml_parse_pos = xmlStr.indexOf("<Rows>", xml_parse_pos);
				if (xml_parse_pos > -1) {
					xml_parse_pos += 6;
				}
			}
		}

		if (xml_parse_pos > -1) {
			xml_parse_pos = this._loadRecordFromXMLStr(xmlStr, xml_parse_pos, loadCnt);
		}

		var viewRecords = this._viewRecords;
		var rawRecords = this._rawRecords;
		var delRecords = this._deletedRecords;
		var colList = this.colinfos;

		if (delRecords.length > 0) {
			viewRecords = this._viewRecords = [];
			var rowCnt = rawRecords.length;
			var viewRecLength = viewRecords.length;
			var i = 0;

			function _loadFromXMLStr_delrow_loop () {
				if (i < rowCnt) {
					var _currowData = rawRecords[i];
					if (_currowData._rtype != 8) {
						viewRecords[viewRecLength] = _currowData;
						viewRecLength++;
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
				if (_loadFromXMLStr_delrow_loop()) {
					break;
				}
			}
		}
		else {
			this._viewRecords = this._rawRecords;
		}

		this.constcount = this._constVars.length;
		this.colcount = colList.length + this.constcount;
		this.rowcount = viewRecords.length;
		this.loadstatus = false;
		this._eventstat = this.enableevent;


		viewRecords = null;
		rawRecords = null;
		delRecords = null;
		colList = null;

		return xml_parse_pos;
	};


	_pDataset._loadFromPPXArray = function (ppxColLines, ppxLines, curIdx, loadCnt, bOrgLayout, bClear) {
		var _cs_ = String.fromCharCode(31);

		this.loadstatus = true;
		this._eventstat = !this.loadstatus && this.enableevent;

		if (bClear) {
			if (bOrgLayout) {
				this._clearData();
			}
			else {
				this._clearAll();
			}
		}

		if (!ppxColLines || ppxColLines.length == 0) {
			this.loadstatus = false;
			this._eventstat = this.enableevent;

			return curIdx;
		}
		this._setColInfoFromPPXLines(ppxColLines, bOrgLayout);

		curIdx = this._loadRecordFromPPXLines(ppxLines, curIdx, loadCnt);
		var delRecords_len = this._deletedRecords.length;

		if (delRecords_len) {
			var viewRecords = this._viewRecords = [];
			var rawRecords = this._rawRecords;
			len = rawRecords.length;
			var viewRecLength = viewRecords.length;
			var i = 0;
			function _loadFromPPXArray_delrow_loop () {
				if (i < len) {
					var _currowData = rawRecords[i];
					if (_currowData._rtype != 8) {
						viewRecords[viewRecLength] = _currowData;
						viewRecLength++;
					}

					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
				if (_loadFromPPXArray_delrow_loop()) {
					break;
				}
			}
		}
		else {
			this._viewRecords = this._rawRecords;
		}


		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = this._viewRecords.length;

		this.loadstatus = false;
		this._eventstat = this.enableevent;

		return curIdx;
	};

	_pDataset._getColLinesFromPPXLines = function (ppxLines, curIdx) {
		var lineCnt = ppxLines.length;
		var idx = curIdx;

		while (true) {
			var type = ppxLines[idx].charAt(0);
			if (idx < lineCnt && (type == "C" || type == "V")) {
				idx++;
			}
			else {
				break;
			}
		}

		return ppxLines.slice(curIdx, idx);
	};

	_pDataset._setColInfoFromPPXLines = function (colLines, bOrgLayout) {
		var _cs_ = String.fromCharCode(31);

		var _convertFn = null;
		var lineCnt = colLines.length;
		var idx = 0;

		if (!bOrgLayout) {
			function _setColInfoFromPPXLines_loop (pthis) {
				if (idx < lineCnt) {
					var curStr = colLines[idx];
					var curType = curStr.charAt(0);
					if (curType == 'V') {
						var valArr = curStr.split(_cs_);
						pthis._addConstColumn(valArr[1], valArr[3], valArr[2]);
						idx++;
						return false;
					}
					else if (curType == 'C') {
						var valArr = curStr.split(_cs_);
						pthis._addColumn(valArr[1], valArr[2], valArr[3], valArr[4], valArr[5]);
						idx++;
						return false;
					}
					return true;
				}
				return true;
			}
			while (true) {
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_loop(this)) {
					break;
				}
			}
		}
		else {
			function _setColInfoFromPPXLines_const_loop (pthis) {
				if (idx < lineCnt) {
					var curStr = colLines[idx];
					var curType = curStr.charAt(0);
					if (curType == 'V') {
						var valArr = curStr.split(_cs_);
						if (valArr[1] in pthis._constVars) {
							pthis._addConstColumn(valArr[1], valArr[3], valArr[2]);
						}
						idx++;
						return false;
					}
					else if (curType == 'C') {
						idx++;
						return false;
					}
					return true;
				}
				return true;
			}
			while (true) {
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
				if (_setColInfoFromPPXLines_const_loop(this)) {
					break;
				}
			}
		}
	};

	_pDataset._loadRecordFromPPXLines = function (ppxLines, curIdx, loadCnt) {
		var _cs_ = String.fromCharCode(31);

		var colList = this.colinfos;
		var rawRecords = this._rawRecords;
		var delRecords = this._deletedRecords;
		var rawRecLength = rawRecords.length;
		var delRecLength = delRecords.length;
		var colCnt = colList.length;

		var lineCnt = ppxLines.length;

		if (curIdx < lineCnt) {
			function _loadRecordFromPPXLines_row_loop () {
				if (curIdx < lineCnt) {
					var curStr = ppxLines[curIdx];
					var curType = curStr.charAt(0);

					if (curType == 'n' || curType == 'i' || curType == 'u' || curType == 'd') {
						var _currowData = new Array(colCnt);
						_currowData._rawidx = rawRecLength;
						_currowData._level = 0;

						if (curType == 'i') {
							_currowData._rtype = 2;
						}
						else if (curType == 'u') {
							_currowData._rtype = 4;
						}
						else if (curType == 'd') {
							_currowData._rtype = 8;
						}
						else {
							_currowData._rtype = 1;
						}
					}
					else if (curType == 'o') {
						curIdx++;
						return false;
					}
					else {
						return true;
					}

					var valArr = curStr.split(_cs_);
					var valCnt = valArr.length;
					var j = 1;

					for (var i = 0; i < valCnt; i++) {
						if (valArr[i] == String.fromCharCode(3)) {
							valArr[i] = undefined;
						}
					}

					function _loadRecordFromPPXLines_colvalue_loop () {
						if (j < valCnt) {
							var id = valArr[j];
							var curCol = colList[id];
							if (curCol) {
								_currowData[curCol._index] = curCol._fromText(valArr[j + 1]);
							}
							j += 2;
							return false;
						}
						return true;
					}
					while (true) {
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
						if (_loadRecordFromPPXLines_colvalue_loop()) {
							break;
						}
					}

					if (_currowData._rtype == 8) {
						delRecords[delRecLength] = _currowData;
						delRecLength++;
					}

					rawRecords[rawRecLength] = _currowData;
					rawRecords[rawRecLength]._orgcolstrings = _currowData.slice(0);
					rawRecLength++;
					curIdx++;

					if (loadCnt > 0 && (rawRecLength - delRecLength) == loadCnt) {
						return true;
					}
					return false;
				}

				return true;
			}
			while (true) {
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
				if (_loadRecordFromPPXLines_row_loop()) {
					break;
				}
			}
		}

		colList = null;
		rawRecords = null;
		delRecords = null;

		return curIdx;
	};

	_pDataset._TABS = ["", "\t", "\t\t", "\t\t\t", "\t\t\t\t", "\t\t\t\t\t", "\t\t\t\t\t\t", "\t\t\t\t\t\t\t"];
	_pDataset.__writeXMLData = function (list, str, depth) {
		list.push(this._TABS[depth] + str);
	};

	_pDataset.__writeXMLNormalRow = function (list, rowData, depth, bUseOrgColStrings) {
		this.__writeXMLData(list, "<Row>", depth++);
		this.__writeXMLRowData(list, rowData, depth, bUseOrgColStrings);
		this.__writeXMLData(list, "</Row>", --depth);
	};

	_pDataset.__writeXMLCrudRow = function (list, rowData, depth, bUseOrgColStrings) {
		var buffer = "<Row";
		switch (rowData._rtype) {
			case 1:
				break;
			case 2:
				buffer += " type=\"insert\"";
				break;
			case 4:
				buffer += " type=\"update\"";
				break;
			case 8:
				buffer += " type=\"delete\"";
				break;
		}
		buffer += ">";
		this.__writeXMLData(list, buffer, depth++);

		this.__writeXMLRowData(list, rowData, depth);

		if (rowData._rtype == 4 && rowData._orgrow) {
			this.__writeXMLData(list, "<OrgRow>", depth++);
			this.__writeXMLRowData(list, rowData._orgrow, depth, bUseOrgColStrings);
			this.__writeXMLData(list, "</OrgRow>", --depth);
		}

		this.__writeXMLData(list, "</Row>", --depth);
	};

	_pDataset.__writeXMLRowData = function (list, rowData, depth, bUseOrgColStrings) {
		var n = this.colinfos.length;
		var id;
		var value;
		var i = 0;
		function __writeColData_loop (pthis) {
			if (i < n) {
				id = pthis.colinfos[i].id;
				idx = pthis.colinfos[i]._index;

				if (rowData._orgcolstrings && !!bUseOrgColStrings) {
					value = rowData._orgcolstrings[idx];
				}
				else {
					value = pthis.colinfos[i]._toXMLText(rowData[idx]);
				}

				if (value != null) {
					if (value.length == 0) {
						pthis.__writeXMLData(list, "<Col id=\"" + id + "\" />", depth);
					}
					else {
						pthis.__writeXMLData(list, "<Col id=\"" + id + "\">" + value.toString() + "</Col>", depth);
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
			if (__writeColData_loop(this)) {
				break;
			}
		}
	};

	_pDataset.__MakeDataConvertFunc = function () {
		var colinfos = this.colinfos;
		var colLen = colinfos.length;
		var expr = "(function () { return function (arr) { ";
		for (var idx = 0; idx < colLen; idx++) {
			var colinfo = colinfos[idx];
			switch (colinfo.ntype) {
				case 1:
					break;
				case 2:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toIntFromText(arr[" + idx + "]); ";
					break;
				case 3:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toFloatFromText(arr[" + idx + "]); ";
					break;
				case 4:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toDecimalFromText(arr[" + idx + "]); ";
					break;
				case 5:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toDateFromText(arr[" + idx + "]); ";
					break;
				case 6:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toTimeFromText(arr[" + idx + "]); ";
					break;
				case 7:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toDateTimeFromText(arr[" + idx + "]); ";
					break;
				case 8:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toBlobFromText(arr[" + idx + "]); ";
					break;
				default:
					expr += "arr[" + idx + "] = nexacro.DataUtils.toTextFromvariant(arr[" + idx + "]); ";
					break;
			}
		}
		expr += "return arr; }; })();";
		return nexacro._executeEvalStr(expr);
	};

	_pDataset.__ssvMakeDataMappingFunc = function (strColInfo) {
		var _cs_ = String.fromCharCode(31);

		var idMap = {
		};
		var colArr = strColInfo.split(_cs_);
		var colCnt = colArr.length;
		for (var i = 1; i < colCnt; i++) {
			var colItem = colArr[i].split(":");
			var id = colItem[0];
			idMap[id] = i - 1;
		}

		var colinfos = this.colinfos;
		var colLen = colinfos.length;
		var expr = "(function () { return function (arr) { return [";
		for (var i = 0; i < colLen; i++) {
			var colinfo = colinfos[i];
			var idx = idMap[colinfo.id];
			if (idx != null) {
				switch (colinfo.ntype) {
					case 1:
						expr += "arr[" + idx + "]";
						break;
					case 2:
						expr += "nexacro.DataUtils.toIntFromText(arr[" + idx + "])";
						break;
					case 3:
						expr += "nexacro.DataUtils.toFloatFromText(arr[" + idx + "])";
						break;
					case 4:
						expr += "nexacro.DataUtils.toDecimalFromText(arr[" + idx + "])";
						break;
					case 5:
						expr += "nexacro.DataUtils.toDateFromText(arr[" + idx + "])";
						break;
					case 6:
						expr += "nexacro.DataUtils.toTimeFromText(arr[" + idx + "])";
						break;
					case 7:
						expr += "nexacro.DataUtils.toDateTimeFromText(arr[" + idx + "])";
						break;
					case 8:
						expr += "nexacro.DataUtils.toBlobFromText(arr[" + idx + "])";
						break;
					default:
						expr += "nexacro.DataUtils.toTextFromvariant(arr[" + idx + "])";
						break;
				}
			}
			if (i != (colLen - 1)) {
				expr += ",";
			}
		}
		idMap = null;
		expr += "]; }; })();";
		return nexacro._executeEvalStr(expr);
	};

	_pDataset.__ssvSetConstColInfo = function (strColInfo) {
		var _cs_ = String.fromCharCode(31);

		var colArr = strColInfo.split(_cs_);
		var colCnt = colArr.length;
		var i = 0;
		function __ssvSetConstColInfo_loop (pthis) {
			if (i < colCnt) {
				var colItem = colArr[i].split("=");
				var colInfo = colItem[0];
				if (colInfo && colInfo != "_Const_") {
					var value = colItem[1];
					var colInfoArr = colInfo.split(":");
					var id = colInfoArr[0];
					var type = colInfoArr[1];
					if (type) {
						var bSIdx = type.indexOf("(");
						if (bSIdx > -1) {
							type = type.substring(0, bSIdx);
						}
					}
					pthis._addConstColumn(id, value, type);
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
			if (__ssvSetConstColInfo_loop(this)) {
				break;
			}
		}
	};

	_pDataset.__ssvSetColInfo = function (strColInfo) {
		var _cs_ = String.fromCharCode(31);

		var colCnt = 0;
		var colArr = strColInfo.split(_cs_);
		var colCnt = colArr.length;
		var i = 0;
		function __ssvSetColInfo_loop (pthis) {
			if (i < colCnt) {
				var colItem = colArr[i].split(":");
				var id = colItem[0];
				var type, size;
				if (id && id != "_RowType_") {
					var colInfo = colItem[1];
					if (colInfo) {
						var sidx = colInfo.indexOf("(");
						if (sidx > -1) {
							type = colInfo.substring(0, sidx).toUpperCase();
							size = colInfo.substring(sidx + 1, colInfo.indexOf(")", sidx + 1)) | 0;
						}
						else {
							type = colInfo;
						}
					}
					else {
						type = "STRING";
						size = 256;
					}
					pthis._addColumn(id, type, size, colItem[2], colItem[3]);
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
			if (__ssvSetColInfo_loop(this)) {
				break;
			}
		}
		return colCnt;
	};

	_pDataset._loadFromSSVArray = function (ssvColLines, ssvLines, curIdx, loadCnt, bOrgLayout, bClear, isbulk) {
		var _cs_ = String.fromCharCode(31);

		this.loadstatus = true;
		this._eventstat = !this.loadstatus && this.enableevent;

		if (bClear) {
			if (bOrgLayout) {
				this._clearData();
			}
			else {
				this._clearAll();
			}
		}

		var _convertFn = this._setColInfoFromSSVLines(ssvColLines, bOrgLayout);

		if (!_convertFn) {
			this.loadstatus = false;
			this._eventstat = this.enableevent;

			return curIdx;
		}

		curIdx = this._loadRecordFromSSVLines(ssvLines, curIdx, loadCnt, _convertFn, isbulk);
		var delRecords_len = this._deletedRecords.length;

		if (delRecords_len) {
			var viewRecords = this._viewRecords = [];
			var rawRecords = this._rawRecords;
			len = rawRecords.length;
			var viewRecLength = viewRecords.length;
			var i = 0;
			function _loadFromSSVArray_viewRecords_loop () {
				if (i < len) {
					var _currowData = rawRecords[i];
					if (_currowData._rtype != 8) {
						viewRecords[viewRecLength] = _currowData;
						viewRecLength++;
					}

					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
				if (_loadFromSSVArray_viewRecords_loop()) {
					break;
				}
			}
		}
		else {
			this._viewRecords = this._rawRecords;
		}


		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = this._viewRecords.length;

		this.loadstatus = false;
		this._eventstat = this.enableevent;

		return curIdx;
	};

	_pDataset._getColLinesFromSSVLines = function (ssvLines, curIdx) {
		var lineCnt = ssvLines.length;
		var idx = curIdx;

		if (idx < lineCnt && ssvLines[idx].substring(0, 7) == "_Const_") {
			idx++;
		}
		if (idx < lineCnt && ssvLines[idx].substring(0, 9) == "_RowType_") {
			idx++;
		}

		return ssvLines.slice(curIdx, idx);
	};

	_pDataset._setColInfoFromSSVLines = function (colLines, bOrgLayout) {
		if (!colLines || colLines.length == 0) {
			return null;
		}

		var _convertFn = null;
		var lineCnt = colLines.length;
		var idx = 0;
		if (bOrgLayout) {
			while (idx < lineCnt && colLines[idx].substring(0, 9) != "_RowType_") {
				idx++;
			}
			if (idx >= lineCnt) {
				return null;
			}
			_convertFn = this.__ssvMakeDataMappingFunc(colLines[idx]);
		}
		else {
			if (idx < lineCnt && colLines[idx].substring(0, 7) == "_Const_") {
				this.__ssvSetConstColInfo(colLines[idx]);
				idx++;
			}
			if (idx > lineCnt) {
				return null;
			}
			if (idx < lineCnt && colLines[idx].substring(0, 9) == "_RowType_") {
				this.__ssvSetColInfo(colLines[idx]);
				idx++;
			}
			if (idx > lineCnt) {
				return null;
			}
			_convertFn = this.__MakeDataConvertFunc();
		}

		return _convertFn;
	};

	_pDataset._loadRecordFromSSVLines = function (ssvLines, curIdx, loadCnt, convertFn, isbulk) {
		var _cs_ = String.fromCharCode(31);
		var _ud_ = String.fromCharCode(3);

		var rawRecords = this._rawRecords;
		var delRecords = this._deletedRecords;
		var rawRecLength = rawRecords.length;
		var delRecLength = delRecords.length;

		var lineCnt = ssvLines.length;

		function _loadRecordFromSSVLines_loop (_isbulk) {
			if (curIdx < lineCnt) {
				var curLine = ssvLines[curIdx];
				if (curLine == "") {
					curIdx++;
					return true;
				}
				var _currowData = curLine.split(_cs_);
				type = _currowData[0];
				_currowData.shift();

				for (var i = 0, n = _currowData.length; i < n; i++) {
					if (_currowData[i] == _ud_) {
						_currowData[i] = undefined;
					}
				}

				_currowData = convertFn(_currowData);



				_currowData._rawidx = rawRecLength;
				_currowData._level = 0;

				if (_isbulk) {
					_currowData._rtype = 1;
					rawRecords[rawRecLength] = _currowData;
				}
				else {
					if (type == null) {
						_currowData._rtype = 1;
					}
					else {
						var typeChar = type.charAt(0);
						if (typeChar == 'I' || typeChar == 'i') {
							_currowData._rtype = 2;
						}
						else if (typeChar == 'U' || typeChar == 'u') {
							_currowData._rtype = 4;
						}
						else if (typeChar == 'D' || typeChar == 'd') {
							_currowData._rtype = 8;
						}
						else {
							_currowData._rtype = 1;
						}
					}

					if (_currowData._rtype == 4) {
						if (curIdx < (lineCnt - 1) && (ssvLines[curIdx + 1].charAt(0) == 'O' || ssvLines[curIdx + 1].charAt(0) == 'o')) {
							var _orgrowData = ssvLines[curIdx + 1].split(_cs_);
							_orgrowData.shift();
							_orgrowData = convertFn(_orgrowData);
							_currowData._orgrow = _orgrowData;
						}
					}
					else if (_currowData._rtype == 8) {
						delRecords[delRecLength] = _currowData;
						delRecLength++;
					}

					rawRecords[rawRecLength] = _currowData;
					rawRecords[rawRecLength]._orgcolstrings = _currowData.slice(0);
				}
				rawRecLength++;
				curIdx++;

				if (loadCnt > 0 && (rawRecLength - delRecLength) == loadCnt) {
					return true;
				}

				return false;
			}
			return true;
		}
		while (true) {
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
			if (_loadRecordFromSSVLines_loop(isbulk)) {
				break;
			}
		}

		return curIdx;
	};

	_pDataset.__writeData = function (list, str) {
		list.push(str);
	};

	_pDataset.__getRowTypeChar = function (_rtype) {
		var rtnVal = null;
		switch (_rtype) {
			case 1:
				rtnVal = "N";
				break;
			case 2:
				rtnVal = "I";
				break;
			case 4:
				rtnVal = "U";
				break;
			case 8:
				rtnVal = "D";
				break;
			case -1:
				rtnVal = "O";
				break;
		}

		return rtnVal;
	};

	_pDataset.__writeSSVNormalRow = function (list, rowData) {
		this.__writeSSVRowData(list, "N", rowData);
	};

	_pDataset.__writeSSVCrudRow = function (list, rowData) {
		this.__writeSSVRowData(list, this.__getRowTypeChar(rowData._rtype), rowData);
		if (rowData._rtype == 4 && rowData._orgrow) {
			this.__writeSSVRowData(list, this.__getRowTypeChar(-1), rowData._orgrow);
		}
	};

	_pDataset.__writeSSVRowData = function (list, type, rowData) {
		var _rs_ = String.fromCharCode(30);
		var _cs_ = String.fromCharCode(31);

		this.__writeData(list, type + _cs_);

		var n = this.colinfos.length;
		var i = 0;
		function __writeSSVColData_loop (pthis) {
			if (i < n) {
				idx = pthis.colinfos[i]._index;
				var value = pthis.colinfos[i]._toText(rowData[idx]);

				if (value === undefined) {
					value = String.fromCharCode(3);
				}

				if (value != null) {
					if (i == (n - 1)) {
						pthis.__writeData(list, value + _rs_);
					}
					else {
						pthis.__writeData(list, value + _cs_);
					}
				}
				else {
					if (i == (n - 1)) {
						pthis.__writeData(list, _rs_);
					}
					else {
						pthis.__writeData(list, _cs_);
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
			if (__writeSSVColData_loop(this)) {
				break;
			}
		}
	};

	nexacro.__splitCSVRowData = function (strRow, base_colCnt) {
		var colArr = strRow.split(",");
		var colCnt = colArr.length;
		var i = 0;
		function __splitCSVRowData_loop1 () {
			if (i < colCnt) {
				var colStr = colArr[i];
				var ch = colStr.charAt(0);
				if (ch == "\"" || ch == "\'") {
					while (colStr.length > 0
						 && (colStr[colStr.length - 1] == "\r" || colStr[colStr.length - 1] == "\n")) {
						colStr = colStr.substring(0, colStr.length - 1);
					}


					while ((colStr.length > 0 && colStr[colStr.length - 1] != ch)
						 || colStr.length < 2) {
						if (i <= colCnt) {
							colStr += "," + colArr.splice(i + 1, 1);
							colCnt--;
						}
						else {
							break;
						}
					}
					colArr[i] = nexacro._unQuoteStr(colStr);
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
			if (__splitCSVRowData_loop1()) {
				break;
			}
		}
		return colArr;
	};

	_pDataset.__csvMakeDataMappingFunc = function (colArr, colCnt) {
		var idMap = {
		};
		for (var i = 0; i < colCnt; i++) {
			var colItem = colArr[i].split(":");
			var id = colItem[0];
			idMap[id] = i;
		}

		var colinfos = this.colinfos;
		var colLen = colinfos.length;
		var expr = "(function () { return function (arr) { return [";
		for (var i = 0; i < colLen; i++) {
			var colinfo = colinfos[i];
			var idx = idMap[colinfo.id];
			if (idx != null) {
				switch (colinfo.ntype) {
					case 1:
						expr += "arr[" + idx + "]";
						break;
					case 2:
						expr += "nexacro.DataUtils.toIntFromText(arr[" + idx + "])";
						break;
					case 3:
						expr += "nexacro.DataUtils.toFloatFromText(arr[" + idx + "])";
						break;
					case 4:
						expr += "nexacro.DataUtils.toDecimalFromText(arr[" + idx + "])";
						break;
					case 5:
						expr += "nexacro.DataUtils.toDateFromText(arr[" + idx + "])";
						break;
					case 6:
						expr += "nexacro.DataUtils.toTimeFromText(arr[" + idx + "])";
						break;
					case 7:
						expr += "nexacro.DataUtils.toDateTimeFromText(arr[" + idx + "])";
						break;
					case 8:
						expr += "nexacro.DataUtils.toBlobFromText(arr[" + idx + "])";
						break;
					default:
						expr += "nexacro.DataUtils.toTextFromvariant(arr[" + idx + "])";
						break;
				}
			}
			if (i != (colLen - 1)) {
				expr += ",";
			}
		}
		expr += "]; }; })();";
		idMap = null;
		return nexacro._executeEvalStr(expr);
	};

	_pDataset.__csvSetColInfo = function (strColInfo) {
		var _cs_ = String.fromCharCode(31);

		var colArr = strColInfo.split(",");
		var colCnt = colArr.length;
		var i = 0;
		function __csvSetColInfo_loop (pthis) {
			if (i < colCnt) {
				var colItem = colArr[i].split(":");
				var id = colItem[0];
				var type, size;
				if (id) {
					var colInfo = colItem[1];
					if (colInfo) {
						var sidx = colInfo.indexOf("(");
						if (sidx > -1) {
							type = colInfo.substring(0, sidx).toUpperCase();
							size = colInfo.substring(sidx + 1, colInfo.indexOf(")", sidx + 1)) | 0;
						}
						else {
							type = colInfo.toUpperCase();
						}
					}
					else {
						type = "STRING";
						size = 256;
					}
					pthis._addColumn(id, type, size, colItem[2], colItem[3]);
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
			if (__csvSetColInfo_loop(this)) {
				break;
			}
		}
		return colCnt;
	};

	_pDataset._loadFromCSVArray = function (csvColLine, csvLines, curIdx, loadCnt, bOrgLayout, bClear) {
		this.loadstatus = true;
		this._eventstat = !this.loadstatus && this.enableevent;

		if (bClear) {
			if (bOrgLayout) {
				this._clearData();
			}
			else {
				this._clearAll();
			}
		}

		var _convertFn = this._setColInfoFromCSVLine(csvColLine, bOrgLayout);

		if (!_convertFn) {
			this.loadstatus = false;
			this._eventstat = this.enableevent;

			return curIdx;
		}

		var curIdx = this._loadRecordFromCSVLines(csvLines, curIdx, loadCnt, _convertFn);
		var delRecords_len = this._deletedRecords.length;

		if (delRecords_len) {
			var viewRecords = this._viewRecords = [];
			var rawRecords = this._rawRecords;
			len = rawRecords.length;
			var viewRecLength = viewRecords.length;
			var i = 0;
			function _loadFromCSVArray_delrow_loop () {
				if (i < len) {
					var _currowData = rawRecords[i];
					if (_currowData._rtype != 8) {
						viewRecords[viewRecLength] = _currowData;
						viewRecLength++;
					}

					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
				if (_loadFromCSVArray_delrow_loop()) {
					break;
				}
			}
		}
		else {
			this._viewRecords = this._rawRecords;
		}

		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = this._viewRecords.length;

		this.loadstatus = false;
		this._eventstat = this.enableevent;

		return curIdx;
	};

	_pDataset._setColInfoFromCSVLine = function (csvColLine, bOrgLayout) {
		if (!csvColLine || csvColLine.length == 0) {
			return null;
		}

		var _convertFn = null;
		if (bOrgLayout) {
			var colArr = csvColLine.split(",");
			csvColCnt = colArr.length;
			_convertFn = this.__csvMakeDataMappingFunc(colArr, csvColCnt);
		}
		else {
			csvColCnt = this.__csvSetColInfo(csvColLine);
			_convertFn = this.__MakeDataConvertFunc();
		}

		return _convertFn;
	};

	_pDataset._loadRecordFromCSVLines = function (csvLines, curIdx, loadCnt, convertFn) {
		var rawRecords = this._rawRecords;
		var delRecords = this._deletedRecords;
		var rawRecLength = rawRecords.length;
		var delRecLength = delRecords.length;

		var lineCnt = csvLines.length;

		function _loadRecordFromCSVLines_loop () {
			if (curIdx < lineCnt) {
				var curLine = csvLines[curIdx];
				if (curLine == "") {
					curIdx++;
					return true;
				}
				var _currowData = nexacro.__splitCSVRowData(curLine, csvColCnt);

				_currowData = convertFn(_currowData);

				_currowData._rawidx = rawRecLength;
				_currowData._level = 0;
				_currowData._rtype = 1;

				rawRecords[rawRecLength] = _currowData;
				rawRecords[rawRecLength]._orgcolstrings = _currowData.slice(0);
				rawRecLength++;
				curIdx++;

				if (loadCnt > 0 && rawRecLength == loadCnt) {
					return true;
				}

				return false;
			}
			return true;
		}

		while (true) {
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
			if (_loadRecordFromCSVLines_loop()) {
				break;
			}
		}

		return curIdx;
	};

	_pDataset.__writeCSVCrudRow = function (list, rowData) {
		this.__writeCSVRowData(list, rowData, this.__getRowTypeChar(rowData._rtype));
		if (rowData._rtype == 4 && rowData._orgrow) {
			this.__writeCSVRowData(list, rowData._orgrow, this.__getRowTypeChar(-1));
		}
	};

	_pDataset.__writeCSVRowData = function (list, rowData, type) {
		var n = this.colinfos.length;
		var i = 0;

		var _rs_ = "\r\n";
		var _cs_ = ",";


		if (type) {
			this.__writeData(list, type + _cs_);
		}

		function __writeCSVColData_loop (pthis) {
			if (i < n) {
				var colinfo = pthis.colinfos[i];
				var idx = colinfo._index;
				var value = colinfo._toText(rowData[idx]);

				if (value != null) {
					if (colinfo.ntype == 1) {
						if (i == (n - 1)) {
							pthis.__writeData(list, nexacro._quoteStr(value) + _rs_);
						}
						else {
							pthis.__writeData(list, nexacro._quoteStr(value) + _cs_);
						}
					}
					else {
						if (i == (n - 1)) {
							pthis.__writeData(list, value + _rs_);
						}
						else {
							pthis.__writeData(list, value + _cs_);
						}
					}
				}
				else {
					if (i == (n - 1)) {
						pthis.__writeData(list, _rs_);
					}
					else {
						pthis.__writeData(list, _cs_);
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
			if (__writeCSVColData_loop(this)) {
				break;
			}
		}
	};

	_pDataset._assignRowList = function (srcRecords) {
		var len = srcRecords.length;
		var idx = this._rawRecords.length;
		var cnt = 0;

		var delRecLength = this._deletedRecords.length;
		var viewRecLength = this._viewRecords.length;
		var rawRecLength = this._rawRecords.length;

		var i = 0;
		function _assignRowList_loop (pthis) {
			if (i < len) {
				var srcData = srcRecords[i];
				var level = srcData._level;
				var rtype = srcData._rtype;

				if (level == 0) {
					var rowData = [];
					rowData._level = level;
					rowData._rawidx = idx;
					rowData._rtype = rtype;

					var count = srcData.length;
					var j = 0;
					function _assignRowList_loop2 () {
						if (j < count) {
							rowData[j] = srcData[j];
							j++;
							return false;
						}
						return true;
					}
					while (true) {
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
						if (_assignRowList_loop2()) {
							break;
						}
					}

					if (srcData._orgrow) {
						var srcOrgData = srcData._orgrow;
						var rowOrgData = [];
						rowOrgData._level = srcOrgData._level;
						rowOrgData._rawidx = idx;
						rowOrgData._rtype = srcOrgData._rtype;

						var count = srcOrgData.length;
						var j = 0;
						function _assignRowList_loop3 () {
							if (j < count) {
								rowOrgData[j] = srcOrgData[j];
								j++;
								return false;
							}
							return true;
						}
						while (true) {
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
							if (_assignRowList_loop3()) {
								break;
							}
						}

						rowData._orgrow = rowOrgData;
					}

					if (rtype == 8) {
						pthis._deletedRecords[delRecLength] = rowData;
						delRecLength++;
					}

					if (rtype == 1 || rtype == 2 || rtype == 4) {
						if (pthis._rawRecords != pthis._viewRecords) {
							pthis._viewRecords[viewRecLength] = rowData;
							viewRecLength++;
						}
					}
					else {
						if (pthis._rawRecords == pthis._viewRecords) {
							pthis._viewRecords = pthis._rawRecords.slice(0, pthis._rawRecords.length);
							viewRecLength = pthis._viewRecords.length;
						}
					}
					pthis._rawRecords[rawRecLength] = rowData;
					rawRecLength++;

					idx++;
					cnt++;
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
			if (_assignRowList_loop(this)) {
				break;
			}
		}
		delete delRecLength;
		delete viewRecLength;
		delete rawRecLength;

		return cnt;
	};

	_pDataset._assign = function (srcds) {
		this._copyConstColList(srcds._constVars);
		this._appendColList(srcds.colinfos);
		this._assignRowList(srcds._rawRecords);

		this.constcount = this._constVars.length;
		this.colcount = this.colinfos.length + this.constcount;
		this.rowcount = this._viewRecords.length;
	};

	_pDataset._isLike = function (value, cmpval) {
		var pdata = value;
		var cdata = cmpval;

		if (pdata instanceof nexacro.Decimal && cdata instanceof nexacro.Decimal) {
			if (pdata.isEqual(cdata)) {
				return true;
			}
		}
		else if (pdata instanceof nexacro.Decimal) {
			pdata = pdata.toString();
		}
		else if (cdata instanceof nexacro.Decimal) {
			cdata = cdata.toString();
		}

		if (pdata == cdata) {
			if (pdata === 0) {
				pdata = pdata + "";
			}
			if (cdata === 0) {
				cdata = cdata + "";
			}

			if (pdata == cdata) {
				return true;
			}
		}

		if (value && nexacro._isString(cmpval)) {
			if (cmpval.length == 0) {
				return false;
			}

			if (!nexacro._isString(value)) {
				value = value + "";
			}

			if (value.slice(0, cmpval.length) == cmpval) {
				return true;
			}
		}

		return false;
	};

	_pDataset._findRow = function (colidx, cmpval, start, end) {
		var view = this._viewRecords;
		var rowData;

		var i = start;
		function _findRow_loop (pthis) {
			if (i < end) {
				rowData = view[i];

				if (pthis._checkRowData(rowData)) {
					var pdata = rowData[colidx];
					var cdata = cmpval;

					if (pdata instanceof nexacro.Decimal && cdata instanceof nexacro.Decimal) {
						if (pdata.isEqual(cdata)) {
							return true;
						}
					}
					else if (pdata instanceof nexacro.Decimal) {
						pdata = pdata.toString();
					}
					else if (cdata instanceof nexacro.Decimal) {
						cdata = cdata.toString();
					}

					if (pdata == cdata) {
						if (pdata === 0) {
							pdata = pdata + "";
						}
						if (cdata === 0) {
							cdata = cdata + "";
						}

						if (pdata == cdata) {
							return true;
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
			if (_findRow_loop(this)) {
				break;
			}
		}
		return (i < end) ? i : -1;
	};

	_pDataset._findRowAs = function (colidx, cmpval, start, end) {
		var view = this._viewRecords;
		var rowData;

		var i = start;
		function _findRowAs_loop (pthis) {
			if (i < end) {
				rowData = view[i];

				if (pthis._checkRowData(rowData)) {
					if (pthis._isLike(rowData[colidx], cmpval)) {
						return true;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
			if (_findRowAs_loop(this)) {
				break;
			}
		}
		return (i < end) ? i : -1;
	};

	_pDataset._checkViewRowData = function (rowData) {
		return (rowData._level == 0);
	};

	_pDataset._checkRawRowData = function (rowData) {
		var level = rowData._level;
		var rtype = rowData._rtype;

		return ((level == 0) && (rtype == 1 || rtype == 2 || rtype == 4));
	};

	_pDataset._getNotDelRec = function () {
		var noDelRec = this._rawRecords.slice(0, this._rawRecords.length);
		var tLen = noDelRec.length - 1;
		for (var i = tLen; i > -1; i--) {
			if (noDelRec[i]._rtype == 8 && this._findDeletedRecords(i) > -1) {
				noDelRec.splice(i, 1);
			}
		}
		return noDelRec;
	};

	_pDataset._checkRowData = _pDataset._checkViewRowData;

	_pDataset._getCount = function (start, end, pivotidx, colIdx, bExcludeNull) {
		var view = this._viewRecords;
		var rowData, colData;
		var cnt = 0;

		var i = start;
		function _getCount_loop (pthis) {
			if (i < end) {
				if (i == view.length) {
					return true;
				}

				rowData = view[i];
				if (pthis._checkRowData(rowData)) {
					if (bExcludeNull == true) {
						colData = rowData[colIdx];
						if (colData) {
							cnt++;
						}
					}
					else {
						cnt++;
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
			if (_getCount_loop(this)) {
				break;
			}
		}

		return cnt;
	};

	_pDataset._getSum = function (colidx, start, end, pivotidx, coltype) {
		var view = this._viewRecords;
		var rowData;
		var sum = 0;
		var i = start;

		if (coltype == 1 || coltype == 8) {
			return 0;
		}

		if (coltype != 4) {
			function _getSum_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (rowData._rtype == 16) {
						i++;
						return false;
					}

					var v = rowData[colidx];
					if (!nexacro._isNumber(v)) {
						if (!v) {
							v = 0;
						}
						else {
							if (coltype == 3) {
								v = parseFloat(v);
							}
							else {
								v = parseInt(v, 10);
							}
						}
					}

					if (pthis._checkRowData(rowData)) {
						sum += (+v);
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
				if (_getSum_loop(this)) {
					break;
				}
			}
		}
		else {
			sum = new nexacro.Decimal;

			function _getSumDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if ((rowData[colidx] != null) && (rowData[colidx] != "") && (rowData[colidx] != undefined) && pthis._checkRowData(rowData)) {
						if (rowData[colidx] instanceof nexacro.Decimal) {
							sum.addDecimal(rowData[colidx]);
						}
						else {
							sum.addDouble(+rowData[colidx]);
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
				if (_getSumDecimal_loop(this)) {
					break;
				}
			}
		}
		if (sum instanceof nexacro.Decimal) {
			return sum.isNaN() ? 0 : sum;
		}

		return (+sum) != (+sum) ? 0 : sum;
	};

	_pDataset._getMin = function (colidx, start, end, pivotidx, coltype) {
		var view = this._viewRecords;
		var rowData;
		var min = undefined, value = undefined;

		var i = start;
		if (coltype != 4) {
			function _getMin_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						value = rowData[colidx];
						if (value !== "" && (min === "" || min == null || value < min)) {
							min = value;
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
				if (_getMin_loop(this)) {
					break;
				}
			}
		}
		else {
			var v;
			function _getMinDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData) && rowData[colidx] != null) {
						v = rowData[colidx];
						if (min === "" || min == null || v.hi < min.hi || (v.hi == min.hi && v.lo < min.lo)) {
							min = v;
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
				if (_getMinDecimal_loop(this)) {
					break;
				}
			}
		}
		if (min instanceof nexacro.Decimal) {
			return min.isNaN() ? undefined : min;
		}
		else if (coltype == 1) {
			return min;
		}

		return (+min) != (+min) ? undefined : min;
	};

	_pDataset._getMax = function (colidx, start, end, pivotidx, coltype) {
		var view = this._viewRecords;
		var rowData;
		var max = undefined, value = undefined;

		var i = start;
		if (coltype != 4) {
			function _getMax_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						value = rowData[colidx];
						if (value !== "" && (max == null || value > max)) {
							max = value;
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
				if (_getMax_loop(this)) {
					break;
				}
			}
		}
		else {
			function _getMaxDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData) && rowData[colidx] != null) {
						var v = rowData[colidx];
						if (max == "" || max == null || v.hi > max.hi || (v.hi == max.hi && v.lo > max.lo)) {
							max = v;
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
				if (_getMaxDecimal_loop(this)) {
					break;
				}
			}
		}
		if (max instanceof nexacro.Decimal) {
			return max.isNaN() ? undefined : max;
		}
		else if (coltype == 1) {
			return max;
		}
		return (+max) != (+max) ? undefined : max;
	};

	_pDataset._getAvg = function (colidx, start, end, pivotidx, coltype) {
		var view = this._viewRecords;
		var rowData;
		var cnt = 0;
		var sum = 0;

		var i = start;
		if (coltype != 4) {
			function _getAvg_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (nexacro._isNumber(rowData[colidx]) && pthis._checkRowData(rowData)) {
						cnt++;
						sum += (+rowData[colidx]);
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
				if (_getAvg_loop(this)) {
					break;
				}
			}
		}
		else {
			sum = new nexacro.Decimal;
			function _getAvgDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						if ((rowData[colidx] instanceof nexacro.Decimal)) {
							cnt++;
							sum.addDecimal(rowData[colidx]);
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
				if (_getAvgDecimal_loop(this)) {
					break;
				}
			}
		}

		if (cnt == 0) {
			return Infinity;
		}

		if (sum instanceof nexacro.Decimal) {
			sum.divDouble(cnt);
		}
		else {
			sum = sum / cnt;
		}
		return sum;
	};

	_pDataset._getCaseSum = function (cmpExpr, colidx, start, end, pivotidx, coltype) {
		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return 0;
		}

		var view = this._viewRecords;
		var rowData;
		var sum = 0;
		var cmp = null;

		var i = start;

		if (coltype != 4) {
			function _getCaseSum_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						if ((rowData[colidx] != null) && (rowData[colidx] != "") && (rowData[colidx] != undefined)) {
							cmp = cmpFn.call(pthis, i, i, null, pthis);
							if (cmp === true) {
								if (rowData._rtype == 16) {
									i++;
									return false;
								}

								var v = rowData[colidx];
								if (!nexacro._isNumber(v)) {
									if (!v) {
										v = 0;
									}
									else {
										if (coltype == 3) {
											v = parseFloat(v);
										}
										else {
											v = parseInt(v, 10);
										}
									}
								}
								sum += (+v);
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
				if (_getCaseSum_loop(this)) {
					break;
				}
			}
		}
		else {
			sum = new nexacro.Decimal;

			function _getCaseSumDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						if ((rowData[colidx] != null) && (rowData[colidx] != "") && (rowData[colidx] != undefined)) {
							if (rowData[colidx] != null) {
								cmp = cmpFn.call(pthis, i, i, null, pthis);
								if (cmp === true) {
									if (rowData[colidx] instanceof nexacro.Decimal) {
										sum.addDecimal(rowData[colidx]);
									}
									else {
										sum.addDouble(+rowData[colidx]);
									}
								}
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
				if (_getCaseSumDecimal_loop(this)) {
					break;
				}
			}
		}
		if (sum instanceof nexacro.Decimal) {
			return sum.isNaN() ? 0 : sum;
		}
		return (+sum) != (+sum) ? 0 : sum;
	};

	_pDataset._getCaseMin = function (cmpExpr, colidx, start, end, pivotidx, coltype) {
		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return undefined;
		}

		var view = this._viewRecords;
		var rowData;
		var min = undefined;
		var cmp = null;

		var i = start;
		if (coltype != 4) {
			function _getCaseMin_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						cmp = cmpFn.call(pthis, i, i, null, pthis);
						if (cmp === true) {
							if (min == null || rowData[colidx] < min) {
								min = rowData[colidx];
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
				if (_getCaseMin_loop(this)) {
					break;
				}
			}
		}
		else {
			function _getCaseMinDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						cmp = cmpFn.call(pthis, i, i, null, pthis);
						if (cmp === true) {
							if (rowData[colidx] != null) {
								var v = rowData[colidx];
								if (min == null || v.hi < min.hi || (v.hi == min.hi && v.lo < min.lo)) {
									min = v;
								}
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
				if (_getCaseMinDecimal_loop(this)) {
					break;
				}
			}
		}

		if (min instanceof nexacro.Decimal) {
			return min.isNaN() ? undefined : min;
		}
		else if (coltype == 1) {
			return min;
		}
		return (+min) != (+min) ? undefined : min;
	};

	_pDataset._getCaseMax = function (cmpExpr, colidx, start, end, pivotidx, coltype) {
		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return undefined;
		}

		var view = this._viewRecords;
		var rowData;
		var max = undefined;
		var cmp = null;

		var i = start;
		if (coltype != 4) {
			function _getCaseMax_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						cmp = cmpFn.call(pthis, i, i, null, pthis);
						if (cmp === true) {
							if (max == null || rowData[colidx] > max) {
								max = rowData[colidx];
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
				if (_getCaseMax_loop(this)) {
					break;
				}
			}
		}
		else {
			function _getCaseMaxDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						cmp = cmpFn.call(pthis, i, i, null, pthis);
						if (cmp === true) {
							if (rowData[colidx] != null) {
								var v = rowData[colidx];
								if (max == null || v.hi > max.hi || (v.hi == max.hi && v.lo > max.lo)) {
									max = v;
								}
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
				if (_getCaseMaxDecimal_loop(this)) {
					break;
				}
			}
		}

		if (max instanceof nexacro.Decimal) {
			return max.isNaN() ? undefined : max;
		}
		else if (coltype == 1) {
			return max;
		}

		return (+max) != (+max) ? undefined : max;
	};

	_pDataset._getCaseAvg = function (cmpExpr, colidx, start, end, pivotidx, coltype) {
		var cmpFn = this._exprFuncs[cmpExpr];
		if (cmpFn == null) {
			cmpFn = this._exprFuncs[cmpExpr] = this._createExprFunc(cmpExpr);
		}
		if (typeof cmpFn != "function") {
			return Number.NaN;
		}

		var view = this._viewRecords;
		var rowData;
		var cnt = 0;
		var sum = 0;
		var addsum;
		var cmp = null;

		var i = start;
		if (coltype != 4) {
			function _getCaseAvg_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						cmp = cmpFn.call(pthis, i, i, null, pthis);
						if (cmp === true) {
							cnt++;
							if (rowData[colidx]) {
								sum += +rowData[colidx];
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
				if (_getCaseAvg_loop(this)) {
					break;
				}
			}
		}
		else {
			function _getCaseAvgDecimal_loop (pthis) {
				if (i < end) {
					rowData = view[i];
					if (pthis._checkRowData(rowData)) {
						cmp = cmpFn.call(pthis, i, i, null, pthis);
						if (cmp === true) {
							cnt++;
							if (rowData[colidx]) {
								addsum = rowData[colidx];
								if ((sum instanceof nexacro.Decimal) == false) {
									if ((addsum instanceof nexacro.Decimal) == false) {
										sum += (+addsum);
									}
									else {
										sum = new nexacro.Decimal(sum);
										sum.addDecimal(addsum);
									}
								}
								else {
									if ((addsum instanceof nexacro.Decimal) == false) {
										sum.addDouble(addsum);
									}
									else {
										sum.addDecimal(addsum);
									}
								}
							}
						}
					}
					i++;
					return false;
				}
				return true;
			}
			while (true) {
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
				if (_getCaseAvgDecimal_loop(this)) {
					break;
				}
			}
		}

		if (cnt == 0) {
			return Infinity;
		}

		if (sum instanceof nexacro.Decimal) {
			sum.divDouble(cnt);
		}
		else {
			sum = sum / cnt;
		}

		return sum;
	};

	_pDataset._calcNFData = function (fn, expr, start, end) {
		var currentView = this._viewRecords;
		this._viewRecords = this._rawRecords;
		this._checkRowData = this._checkRawRowData;

		var value = "";
		if (end === undefined) {
			if (start === undefined) {
				value = fn.call(this, expr);
			}
			else {
				value = fn.call(this, expr, start);
			}
		}
		else {
			value = fn.call(this, expr, start, end);
		}

		this._checkRowData = this._checkViewRowData;
		this._viewRecords = currentView;

		return value;
	};

	_pDataset._findMaxLengthRow = function (colidx, start, end) {
		var view = this._viewRecords;
		var rowData;
		var maxLen = undefined;
		var maxRow = -1;

		var i = start;
		function _findMaxLengthRow_loop (pthis) {
			if (i < end) {
				rowData = view[i];
				if (pthis._checkRowData(rowData)) {
					if (rowData[colidx]) {
						var len = rowData[colidx].toString().length;

						if (maxLen == null || len > maxLen) {
							maxLen = len;
							maxRow = i;
						}
					}
				}
				i++;
				return false;
			}
			return true;
		}
		while (true) {
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
			if (_findMaxLengthRow_loop(this)) {
				break;
			}
		}

		return maxRow;
	};

	delete _pDataset;

	nexacro.TransactionItem = function (path, context, svcid, inDatasetsParam, outDatasetsParam, argsParam, datatype, async, last_modified, version, isbulk) {
		nexacro.CommunicationItem.call(this, path, "data", false, last_modified, version);

		this.context = context;
		this.svcid = svcid;
		this.inDatasetsParam = inDatasetsParam;
		this.outDatasetsParam = outDatasetsParam;
		this.inputDatasets = this._parseDSParam(inDatasetsParam);
		this.outputDatasets = this._parseDSParam(outDatasetsParam);
		this.argsParam = argsParam;
		this.parameters = this._parseVarParam(argsParam);
		this.datatype = (!datatype ? 0 : datatype);

		this._sendData = this._serializeData();

		this._usewaitcursor = async && application.usewaitcursor;
		this._remain_data = null;

		this._progress_data = null;
		this._progress_cnt = 0;
		this._is_unknowntype_data = false;
		this._responseData = null;

		this._has_firstcount_dataset = this._hasFirstCountDs();

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			this._check_responseXML = true;
		}
		else {
			this._check_responseXML = false;
		}

		var _cookie_variables = nexacro._getLocalStorage("_cookie_variables", []);
		var _secure_cookie_varibales = nexacro._getLocalStorage("_secure_cookie_variables", []);

		if ((!_cookie_variables || _cookie_variables.length == 0) && (!_secure_cookie_varibales || _secure_cookie_varibales.length == 0) && !this.parameters && !this.inputDatasets) {
			this._http_method = "GET";
		}
		else {
			this._http_method = "POST";
		}

		this._is_bulk = isbulk;
	};

	var _pTransactionItem = nexacro._createPrototype(nexacro.CommunicationItem, nexacro.TransactionItem);
	nexacro.TransactionItem.prototype = _pTransactionItem;

	_pTransactionItem._handle = null;
	_pTransactionItem.callbackList = [];
	_pTransactionItem.type = "data";
	_pTransactionItem.bcache = false;

	_pTransactionItem._type_name = "TransactionItem";

	_pTransactionItem.on_start = function () {
		if (this._usewaitcursor) {
			this._showWaitCursor(this.context);
		}

		application._appendCommContext(this.context);
		application.on_fire_oncommunication(application, 0);
	};

	_pTransactionItem.on_load_data = function (data, cookie, last_modified) {
		var datasets = null;
		var parameters = null;
		var errorinfo;
		var bcache = this.bcache;
		var ret = null;

		this._addCookieToGlobalVariable(cookie);

		if (data && data._type_name == "DataCache") {
			bcache = false;
			errorinfo = data._loadData(this);
		}
		else {
			if (data && this._protocol < 0) {
				data = this.on_decrypt(data);
			}

			if (this._progress_data) {
				this.on_progress_data(data, true);
				errorinfo = this._progress_data._error_info;

				if (bcache) {
					var target_ds = null;

					datasets = new nexacro.Collection();
					for (var buff_ds in this._progress_data._datasets) {
						if (this._progress_data._datasets[buff_ds]._isEnable) {
							target_ds = this._progress_data._datasets[buff_ds]._target_ds;
							datasets.add_item(target_ds.id, new nexacro._DataSetCache(target_ds.id, target_ds.colinfos, target_ds._constVars, target_ds._rawRecords));
						}
					}

					this._progress_data._datasets = null;

					parameters = this._progress_data._parameters;
				}
			}
			else {
				ret = this._deserializeData(data, 0);
				if (bcache) {
					parameters = ret[1];
					datasets = ret[2];
				}

				errorinfo = ret[0];
			}
		}

		if (!this._is_bulk) {
			if (bcache) {
				var d_cache = nexacro._DataCacheList[this.path];
				if (!d_cache) {
					nexacro._DataCacheList[this.path] = new nexacro._DataCache(parameters, datasets, last_modified, this.version);
				}
				else {
					d_cache.parameters = parameters;
					d_cache.datasets = datasets;
					d_cache.last_modified = last_modified ? last_modified : "";
					d_cache.version = this.version;
				}
				d_cache = null;
			}
		}

		parameters = null;
		datasets = null;
		data = null;
		ret = null;

		var errorcode = 0;
		var errormsg = "SUCCESS";
		if (errorinfo) {
			errorcode = errorinfo[0];
			errormsg = errorinfo[1];
			errorinfo = null;
		}

		if (this._usewaitcursor) {
			this._hideWaitCursor(this.context);
		}

		application._removeCommContext(this.context);
		application.on_fire_oncommunication(application, 1);

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			var loadmanager = this.context._load_manager;
			var dataitem = loadmanager ? loadmanager.getDataItem(this.svcid) : null;
			if (dataitem) {
				dataitem._is_cancel = undefined;
			}

			dataitem = null;
			loadmanager = null;

			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					if (this._is_unknowntype_data) {
						item.callback.call(target, this.svcid, errorcode, errormsg, "comm_invalid_communication_format", 499, this.path, this.path, nexacro.Communication_Error.INVALIDFORMAT, data);
					}
					else {
						item.callback.call(target, this.svcid, errorcode, errormsg);
					}
				}
				target = null;
				item = null;
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};

	_pTransactionItem.on_load_xmldom = function (xmldom, cookie, last_modified) {
		this._addCookieToGlobalVariable(cookie);


		var ret = this.__deserializeXML("", xmldom);
		var errorcode = 0;
		var errormsg = "SUCCESS";
		var errorinfo = ret[0];

		if (this.bcache) {
			var d_cache = nexacro._DataCacheList[this.path];
			if (!d_cache) {
				nexacro._DataCacheList[this.path] = new nexacro._DataCache(ret[1], ret[2], last_modified, this.version);
			}
			else {
				d_cache.parameters = ret[1];
				d_cache.datasets = ret[2];
				d_cache.last_modified = last_modified;
				d_cache.version = this.version;
			}
		}

		if (errorinfo) {
			errorcode = errorinfo[0];
			errormsg = errorinfo[1];
		}

		if (this._usewaitcursor) {
			this._hideWaitCursor(this.context);
		}

		application._removeCommContext(this.context);
		application.on_fire_oncommunication(application, 1);

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					if (this._is_unknowntype_data) {
						item.callback.call(target, this.svcid, errorcode, errormsg, "comm_invalid_communication_format", 499, this.path, this.path, nexacro.Communication_Error.INVALIDFORMAT, xmldom);
					}
					else {
						item.callback.call(target, this.svcid, errorcode, errormsg);
					}
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};

	_pTransactionItem.on_progress = nexacro._emptyFn;
	_pTransactionItem.on_progress_data = function (data, bFinal) {
		if (!this._progress_data) {
			data = nexacro.trimLeft(data);
			var data_type = this._getStreamType(data);

			switch (data_type) {
				case "CSV":
					this._progress_data = new nexacro._ProgressDataCSV(this);
					break;
				case "SSV":
					this._progress_data = new nexacro._ProgressDataSSV(this);
					break;
				case "PPX":
					this._progress_data = new nexacro._ProgressDataPPX(this);
					break;
				case "XML":
					this._progress_data = new nexacro._ProgressDataXML(this);
					break;
				case "UNKNOWN":
					this._is_unknowntype_data = true;
					return;
				default:
					return;
			}
		}

		this._progress_data._on_progress(data, bFinal);
	};

	_pTransactionItem.on_error = function (errstatus, fireerrorcode, returncode, locationurl, reason) {
		var callbackList = this.callbackList;
		var n = callbackList.length;
		var ret = false;

		if (this._usewaitcursor) {
			this._hideWaitCursor(this.context);
		}

		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					ret = item.callback.call(target, this.svcid, -1, "FAILED", fireerrorcode, returncode, this.path, locationurl, reason);
					if (ret) {
						if (this._usewaitcursor) {
							this._showWaitCursor(this.context);
						}
						continue;
					}
				}
			}
			if (ret) {
				return true;
			}
		}

		var loadmanager = this.context._load_manager;
		var dataitem = loadmanager ? loadmanager.getDataItem(this.svcid) : null;
		var dataitem_handle = dataitem ? dataitem._handle : null;


		if (dataitem && !dataitem._is_cancel) {
			return;
		}

		callbackList.splice(0, n);

		application._removeCommContext(this.context);
		application.on_fire_oncommunication(application, 1);

		this._handle = null;
	};

	_pTransactionItem._loadFromData = function (data) {
		var ret = this._deserializeData(data, 0);
		var errorcode = 0;
		var errormsg = "SUCCESS";
		var bcache = this.bcache;

		errorinfo = ret[0];
		if (errorinfo) {
			errorcode = errorinfo[0];
			errormsg = errorinfo[1];
		}

		if (bcache) {
			var parameters = ret[1];
			var datasets = ret[2];

			var d_cache = nexacro._DataCacheList[this.path];
			if (!d_cache) {
				nexacro._DataCacheList[this.path] = new nexacro._DataCache(parameters, datasets, last_modified, this.version);
			}
			else {
				d_cache.parameters = parameters;
				d_cache.datasets = datasets;
				d_cache.last_modified = last_modified ? last_modified : "";
				d_cache.version = this.version;
			}
		}

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.svcid, errorcode, errormsg);
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};

	_pTransactionItem._showWaitCursor = function (context) {
		if (context) {
			context._waitCursor(true, context);

			if (application._refcommuni && application._refcommuni >= 0) {
				application._refcommuni++;
			}
			else {
				application._refcommuni = 0;
			}
		}
	};

	_pTransactionItem._hideWaitCursor = function (context) {
		if (context) {
			context._waitCursor(false, context);

			if (application._refcommuni > 0) {
				application._refcommuni--;
			}
		}
	};

	_pTransactionItem._parseDSParam = function (paramStr) {
		if (!paramStr) {
			return undefined;
		}

		var list = [];
		var expr = /([a-zA-Z가-힣_$][a-zA-Z가-힣0-9_$]*)\s*=\s*([a-zA-Z가-힣_$][a-zA-Z가-힣0-9_$]*(?:\:[aAuUnN])?)/g;
		var splitedParams = paramStr.match(expr);

		if (!splitedParams || splitedParams.length == 0) {
			return undefined;
		}
		var splitedParamCnt = splitedParams.length;

		var listLength = 0;

		for (var i = 0; i < splitedParamCnt; i++) {
			var param = splitedParams[i].split("=");
			var key = param[0].trim();
			var value = param[1].trim();

			var bduplicate = false;
			for (var j = 0; j < i; j++) {
				var checkparam = splitedParams[j].split("=");
				var checkkey = checkparam[0].trim();
				if (key == checkkey) {
					bduplicate = true;
				}
			}
			if (bduplicate) {
				i++;
				return false;
			}

			var type = "N";

			var index = value.indexOf(":");
			if (index > -1) {
				type = value.substring(index + 1);
				value = value.substring(0, index);
			}

			var paramObj = {
				lval : key, 
				rval : value, 
				saveType : type
			};
			list.push(paramObj);
		}
		return list;
	};

	_pTransactionItem._parseVarParam = function (paramStr) {
		if (!paramStr) {
			return;
		}

		paramStr = paramStr.replace(/^\s*|\s*$/g, '');
		if (paramStr.length == 0) {
			return undefined;
		}

		var list = [];
		var expr = /([a-zA-Z_][a-zA-Z0-9_]*)\s*="((\\\")+|[^\"])*"|([a-zA-Z_][a-zA-Z0-9_]*)\s*='((\\\')+|[^\'])*'|([a-zA-Z_][a-zA-Z0-9_]*)\s*=([^ ]*)/g;

		var splitedParams = paramStr.match(expr);
		var splitedParamCnt = splitedParams.length;

		for (var i = 0; i < splitedParamCnt; i++) {
			var param = splitedParams[i].split("=");
			var len = param.length;
			var key = param[0].trim();
			var value = param[1].trim();

			for (var j = 2; j < len; j++) {
				value = value + "=" + param[j].trim();
			}

			var type = "N";

			var len = value.length;
			if (len > 0) {
				value = nexacro.stripQuote(value);
			}

			var paramObj = {
				lval : key, 
				rval : value, 
				saveType : type
			};

			list.push(paramObj);
		}
		return list;
	};

	_pTransactionItem._serializeData = function () {
		if (this.datatype == 1) {
			return this.__serializeBIN();
		}
		else if (this.datatype == 2) {
			return this.__serializeSSV();
		}
		else if (this.datatype == 3) {
			return this.__serializeCSV();
		}
		else {
			return this.__serializeXML();
		}
	};

	_pTransactionItem._setParamterXML = function (list, id, val, depth) {
		if (val && val.length) {
			val = nexacro._encodeXml(val);
			this._writeData(list, "<Parameter id=\"" + id + "\">" + val + "</Parameter>", depth);
		}
		else {
			this._writeData(list, "<Parameter id=\"" + id + "\" />", depth);
		}
	};

	_pTransactionItem._setParamterStr = function (list, id, val, rs) {
		if (val && val.length) {
			val = val;
			list.push(id + "=" + val + rs);
		}
		else {
			list.push(id + "=" + rs);
		}
	};
	_pTransactionItem.__serializeCSV = function () {
		var _rs_ = "\r\n";
		var _cs_ = ",";

		var list = [];
		var cookievar = nexacro._getLocalStorage("_cookie_variables", []);
		var scookievar = nexacro._getLocalStorage("_secure_cookie_variables", []);
		var id, val, ds, i;

		var listLength = 0;
		list.push("CSV:utf-8" + _rs_);

		var argParamsCnt = 0;
		var cookievarCnt = 0, scookievarCnt = 0;

		var argParams = this.parameters;
		if (argParams) {
			argParamsCnt = argParams.length;
		}
		if (cookievar) {
			cookievarCnt = cookievar.length;
		}

		if (cookievarCnt > 0) {
			for (i = 0; i < cookievarCnt; i++) {
				id = cookievar[i];
				val = application[id];

				this._setParamterStr(list, id, val, _rs_);
			}
		}

		if (scookievar) {
			scookievarCnt = scookievar.length;
		}

		if (scookievarCnt > 0) {
			for (i = 0; i < scookievarCnt; i++) {
				id = scookievar[i];
				val = application[id];

				this._setParamterStr(list, id, val, _rs_);
			}
		}

		if (argParamsCnt > 0) {
			for (i = 0; i < argParamsCnt; i++) {
				id = argParams[i].lval;
				val = argParams[i].rval;

				this._setParamterStr(list, id, val, _rs_);
			}
		}

		var datasetParams = this.inputDatasets;
		if (datasetParams && datasetParams.length) {
			var datasetCnt = datasetParams.length;
			for (i = 0; i < datasetCnt; i++) {
				var id = datasetParams[i].rval;
				var ds = this.context._getDatasetObject(id);
				if (ds) {
					list.push(ds._saveCSV(datasetParams[i].lval, datasetParams[i].saveType));
				}
			}
		}

		var rtnVal = list.join("");
		return rtnVal;
	};

	_pTransactionItem.__serializeXML = function () {
		var depth = 0;
		var list = [];
		var cookievar = nexacro._getLocalStorage("_cookie_variables", []);
		var scookievar = nexacro._getLocalStorage("_secure_cookie_variables", []);

		this._writeData(list, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", depth);
		this._writeData(list, "<Root xmlns=\"http://www.nexacroplatform.com/platform/dataset\">", depth++);

		var argParamsCnt = 0;
		var cookievarCnt = 0, scookievarCnt = 0;

		var i = 0;

		var argParams = this.parameters;
		if (argParams) {
			argParamsCnt = argParams.length;
		}
		if (cookievar) {
			cookievarCnt = cookievar.length;
		}

		if (scookievar) {
			scookievarCnt = scookievar.length;
		}

		if (argParamsCnt > 0 || cookievarCnt > 0 || scookievarCnt > 0) {
			this._writeData(list, "<Parameters>", depth++);

			if (cookievarCnt) {
				for (i = 0; i < cookievarCnt; i++) {
					var id = cookievar[i];
					var val = application[id];

					this._setParamterXML(list, id, val, depth);
				}
			}
			if (scookievarCnt) {
				for (var i = 0; i < scookievarCnt; i++) {
					var id = scookievar[i];
					var val = application[id];

					this._setParamterXML(list, id, val, depth);
				}
			}
			if (argParamsCnt > 0) {
				for (i = 0; i < argParamsCnt; i++) {
					var id = argParams[i].lval;
					var val = argParams[i].rval;

					this._setParamterXML(list, id, val, depth);
				}
			}
			this._writeData(list, "</Parameters>", --depth);
		}
		else {
			this._writeData(list, "<Parameters />", depth);
		}

		var datasetParams = this.inputDatasets;
		if (datasetParams && datasetParams.length) {
			var datasetCnt = datasetParams.length;
			for (i = 0; i < datasetCnt; i++) {
				var id = datasetParams[i].rval;
				var ds = this.context._getDatasetObject(id);
				if (ds) {
					list.push(ds._saveXML(datasetParams[i].lval, datasetParams[i].saveType, depth, false));
				}
			}
		}
		this._writeData(list, "</Root>", --depth);

		var rntVal;

		if (argParamsCnt == 0 && cookievarCnt == 0 && (!datasetParams || datasetParams.length == 0)) {
			rntVal = "";
		}
		else {
			rntVal = list.join("\n");
		}

		return rntVal;
	};

	_pTransactionItem.__serializeSSV = function () {
		var _rs_ = String.fromCharCode(30);
		var _cs_ = String.fromCharCode(31);

		var list = [];
		var cookievar = nexacro._getLocalStorage("_cookie_variables", []);
		var scookievar = nexacro._getLocalStorage("_secure_cookie_variables", []);
		var id, val, ds, i;

		var listLength = 0;
		list.push("SSV:utf-8" + _rs_);

		var argParamsCnt = 0;
		var cookievarCnt = 0, scookievarCnt = 0;

		var argParams = this.parameters;
		if (argParams) {
			argParamsCnt = argParams.length;
		}
		if (cookievar) {
			cookievarCnt = cookievar.length;
		}

		if (cookievarCnt > 0) {
			for (i = 0; i < cookievarCnt; i++) {
				id = cookievar[i];
				val = application[id];

				this._setParamterStr(list, id, val, _rs_);
			}
		}
		if (scookievarCnt > 0) {
			for (i = 0; i < scookievarCnt; i++) {
				id = scookievar[i];
				val = application[id];

				this._setParamterStr(list, id, val, _rs_);
			}
		}
		if (argParamsCnt > 0) {
			for (i = 0; i < argParamsCnt; i++) {
				id = argParams[i].lval;
				val = argParams[i].rval;

				this._setParamterStr(list, id, val, _rs_);
			}
		}

		var datasetParams = this.inputDatasets;
		if (datasetParams && datasetParams.length) {
			var datasetCnt = datasetParams.length;
			for (i = 0; i < datasetCnt; i++) {
				var id = datasetParams[i].rval;
				var ds = this.context._getDatasetObject(id);
				if (ds) {
					list.push(ds.saveSSV(datasetParams[i].lval, datasetParams[i].saveType));
				}
			}
		}

		var rtnVal = list.join("");
		return rtnVal;
	};

	_pTransactionItem.__serializeBIN = function () {
		var ssvdata = this.__serializeSSV();
		if (ssvdata) {
			return nexacro._convertStreamSSVToBIN(ssvdata);
		}
		return "";
	};

	_pTransactionItem._deserializeData = function (strRecvData, bPending) {
		if (!strRecvData) {
			return [[-1, "Stream Data is null!"], [], new nexacro.Collection()];
		}

		if (!this._is_bulk) {
			strRecvData = strRecvData.trim();
		}

		var fstr = strRecvData.substring(0, 3);

		if (fstr == "SSV") {
			return this.__deserializeSSV(strRecvData);
		}
		else if (fstr == "CSV") {
			return this.__deserializeCSV(strRecvData);
		}
		else if (fstr == "PPX") {
			return this.__deserializePPX(strRecvData);
		}
		else {
			return this.__deserializeXML(strRecvData);
		}
	};

	_pTransactionItem._setParamter = function (id, val) {
		var form = this.context;
		if (id in form) {
			if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
				form[id] = val;
			}
		}
		else {
			if (application._existVariable(id)) {
				application.setVariable(id, val);
			}
		}
	};

	_pTransactionItem._getDataset = function (id) {
		var form = this.context;
		var outDatasets = this.outputDatasets;
		if (outDatasets && outDatasets.length) {
			var outDataCnt = outDatasets.length;
			for (var i = 0; i < outDataCnt; i++) {
				var param = outDatasets[i];
				if (param.rval == id) {
					return form._getDatasetObject(param.lval);
				}
			}
		}
	};

	_pTransactionItem._hasFirstCountDs = function () {
		if (!this.outputDatasets) {
			return false;
		}

		var outDataCnt = this.outputDatasets.length;
		var form = this.context;

		for (var i = 0; i < outDataCnt; i++) {
			var param = this.outputDatasets[i];
			var ds = form._getDatasetObject(param.lval);
			if (ds) {
				if (ds.firefirstcount > 0) {
					return true;
				}
			}
		}

		return false;
	};

	_pTransactionItem.__deserializeXML = function (strRecvData, doc) {
		var parameters = [];
		var datasets = new nexacro.Collection();
		var code = 0;
		var message = "SUCCESS";

		if (strRecvData.length > 0 && !this._check_responseXML) {
			var fstr = strRecvData.substr(0, 10).toLowerCase();
			if (fstr.indexOf("<?xml") < 0) {
				this._is_unknowntype_data = true;
				return [[-1, "invalid nexacro communication format"], parameters, datasets];
			}

			return this.__deserializeXMLFromStr(strRecvData);
		}

		if (!doc) {
			if (strRecvData.indexOf("&quot;") >= 0) {
				strRecvData = nexacro._replaceAll(strRecvData, "&quot;", "\"");
			}
			if (strRecvData.indexOf("&apos;") >= 0) {
				strRecvData = nexacro._replaceAll(strRecvData, "&apos;", "\'");
			}
			doc = nexacro._parseXMLDocument(strRecvData);
		}

		if (doc.parseError && doc.parseError.errorCode != 0) {
			this._is_unknowntype_data = true;
			message = "invalid nexacro communication format";
			code = -1;
		}

		if (code <= -1) {
			return [[code, message], parameters, datasets];
		}

		var form = this.context;

		var errorinfo = [code, message];

		var ret = nexacro._getCommDataFromDom(doc, this);
		if (ret) {
			var variable = ret[0];
			var len = variable.length;
			for (var i = 0; i < len; i++) {
				if (variable[i].id == "ErrorCode") {
					errorinfo[0] = variable[i].val;
				}
				else if (variable[i].id == "ErrorMsg") {
					errorinfo[1] = variable[i].val;
				}

				if (this.bcache) {
					parameters[parameters.length] = new nexacro._ParametersCache(variable[i].id, variable[i].val);
				}
			}

			if (this.bcache) {
				var dataset_list = ret[1];
				len = dataset_list.length;
				for (var i = 0; i < len; i++) {
					datasets.add_item(dataset_list[i].id, new nexacro._DataSetCache(dataset_list[i].id, dataset_list[i].colinfos, dataset_list[i]._constVars, dataset_list[i]._rawRecords));
				}
			}
		}
		doc = null;
		var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
		if (errorinfo[0] && errorinfo[0] <= -1 && type == "onsuccess") {
			return [errorinfo, parameters, datasets];
		}

		var inDatasets = this.inputDatasets;
		if (inDatasets && inDatasets.length) {
			var inDataCnt = inDatasets.length;
			for (var i = 0; i < inDataCnt; i++) {
				var param = inDatasets[i];
				var ds = form._getDatasetObject(param.rval);
				if (ds) {
					ds.applyChange();
				}
			}
		}

		return [errorinfo, parameters, datasets];
	};


	_pTransactionItem.__deserializeXMLFromStr = function (strRecvData) {
		var parameters = [];
		var datasets = new nexacro.Collection();

		var code = 0;
		var message = "SUCCESS";

		if (!strRecvData) {
			return [[-1, "Stream Data is null!"], null, null];
		}

		var form = this.context;

		var xml_parse_pos = strRecvData.indexOf("<Dataset ");
		var headerData;
		if (xml_parse_pos > -1) {
			headerData = strRecvData.substring(0, xml_parse_pos);
		}
		else {
			headerData = strRecvData;
		}

		var head_parse_pos = 0;
		var paramsInfo = nexacro._getXMLTagData(headerData, head_parse_pos, "<Parameters>", "</Parameters>");
		if (paramsInfo) {
			var paramsData = paramsInfo[0];
			head_parse_pos = paramsInfo[3];

			var param_parse_pos = 0;
			var varInfo = nexacro._getXMLTagData2(paramsData, param_parse_pos, "<Parameter ", "</Parameter>");
			while (varInfo) {
				param_parse_pos = varInfo[3];
				var attrStr = varInfo[1];
				var id = nexacro._getXMLAttributeID(attrStr);
				if (id && id.length) {
					var val = varInfo[0];

					if (id == "ErrorCode") {
						code = parseInt(val) | 0;
						if (isFinite(code) == false) {
							code = -1;
						}
						val = code;
					}
					else if (id == "ErrorMsg") {
						val = nexacro._decodeXml(val);
						message = val;
					}
					else if (id in form) {
						if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
							val = nexacro._decodeXml(val);
							form[id] = val;
						}
					}
					else {
						if (application._existVariable(id)) {
							val = nexacro._decodeXml(val);
							application.setVariable(id, val);
						}
					}

					if (this.bcache) {
						parameters[parameters.length] = new nexacro._ParametersCache(id, val);
					}
				}
				varInfo = nexacro._getXMLTagData2(paramsData, param_parse_pos, "<Parameter ", "</Parameter>");
			}
		}
		var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
		if (code <= -1 && type == "onsuccess") {
			return [[code, message], parameters, datasets];
		}

		var inDatasets = this.inputDatasets;
		if (inDatasets && inDatasets.length) {
			var inDataCnt = inDatasets.length;
			for (var i = 0; i < inDataCnt; i++) {
				var param = inDatasets[i];
				var ds = form._getDatasetObject(param.rval);
				if (ds) {
					ds.applyChange();
				}
			}
		}

		var dsIds = {
		};
		var outDatasets = this.outputDatasets;
		if (outDatasets && outDatasets.length) {
			var outDataCnt = outDatasets.length;
			for (var i = 0; i < outDataCnt; i++) {
				var param = outDatasets[i];
				if (dsIds[param.rval] == undefined) {
					dsIds[param.rval] = param.lval;
				}
			}
		}

		if (xml_parse_pos >= -1) {
			var datasetInfo = nexacro._getXMLTagData2(strRecvData, xml_parse_pos, "<Dataset ", "</Dataset>");
			while (datasetInfo) {
				xml_parse_pos = datasetInfo[3];
				var attrStr = datasetInfo[1];
				var remoteId = nexacro._getXMLAttributeID(attrStr);
				if (remoteId && remoteId.length) {
					var localId = dsIds[remoteId];
					var ds = form._getDatasetObject(localId);
					if (ds) {
						ds.rowposition = -1;
						ds.loadFromXMLStr(datasetInfo[0]);
						if (this.bcache) {
							datasets[localId] = new nexacro._DataSetCache(localId, ds.colinfos, ds._constVars, ds._rawRecords);
						}
					}
				}
				datasetInfo = nexacro._getXMLTagData2(strRecvData, xml_parse_pos, "<Dataset ", "</Dataset>");
			}
		}
		dsIds = null;
		return [[code, message], parameters, datasets];
	};

	nexacro._getCommDataFromDom = function (doc, target) {
		var variablelist = [];
		var paramElems = doc.getElementsByTagName("Parameter");
		var code = 0;
		if (paramElems && paramElems.length) {
			var varCnt = paramElems.length;
			for (var i = 0; i < varCnt; i++) {
				var paramElem = paramElems[i];
				var id = paramElem.getAttribute("id");
				if (id && id.length) {
					var val = (paramElem.textContent || (paramElem.firstChild ? paramElem.firstChild.nodeValue : ""));

					if (id == "ErrorCode") {
						code = parseInt(val) | 0;
						if (isFinite(code) == false) {
							code = -1;
						}
						variablelist.push({
							id : id, 
							val : code
						});
					}
					else if (id == "ErrorMsg") {
						variablelist.push({
							id : id, 
							val : val
						});
					}
					else {
						target._setParamter(id, val);
					}
				}
			}
		}
		var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
		if (code <= -1 && type == "onsuccess") {
			return [variablelist, null];
		}

		var datasetlist = [];
		var datasets = doc.getElementsByTagName("Dataset");
		if (datasets && datasets.length) {
			var dataCnt = datasets.length;
			for (var i = 0; i < dataCnt; i++) {
				var remoteId = datasets[i].getAttribute("id");
				if (remoteId && remoteId.length) {
					var ds = target._getDataset(remoteId);
					if (!ds) {
						ds = new nexacro.Dataset(remoteId);
					}
					if (ds) {
						ds.rowposition = -1;
						ds.loadFromDOM(datasets[i]);
						datasetlist.push(ds);
					}
				}
			}
		}

		return [variablelist, datasetlist];
	};

	_pTransactionItem.__deserializePPX = function (strRecvData) {
		var parameters = [];
		var datasets = new nexacro.Collection();

		var _rs_ = String.fromCharCode(30);
		var _cs_ = String.fromCharCode(31);

		var code = 0;
		var message = "SUCCESS";

		if (!strRecvData) {
			return [[-1, "Stream Data is null!"], null, null];
		}

		var form = this.context;

		var ppxLines = strRecvData.split(_rs_);
		var lineCnt = ppxLines.length;

		var curIdx = 1;

		var curStr;
		var curType;


		for (; curIdx < lineCnt; curIdx++) {
			curStr = ppxLines[curIdx];
			curType = curStr.charAt(0);

			if (curType == "P") {
				var paramArr = curStr.split(_cs_);
				var id = paramArr[1];
				var val = paramArr[2];
				if (val == String.fromCharCode(3)) {
					val = undefined;
				}

				if (id == "ErrorCode") {
					code = parseInt(val) | 0;
					if (isFinite(code) == false) {
						code = -1;
					}
					val = code;
				}
				else if (id == "ErrorMsg") {
					message = paramArr[2];
				}
				else if (id in form) {
					if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
						form[id] = val;
					}
				}
				else {
					if (application._existVariable(id)) {
						application.setVariable(id, val);
					}
				}

				if (this.bcache) {
					parameters[parameters.length] = new nexacro._ParametersCache(id, val);
				}
			}
			else {
				break;
			}
		}
		var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
		if (code <= -1 && type == "onsuccess") {
			ppxLines = null;
			strRecvData = null;

			return [[code, message], parameters, datasets];
		}

		var inDatasets = this.inputDatasets;
		if (inDatasets && inDatasets.length) {
			var inDataCnt = inDatasets.length;
			for (var i = 0; i < inDataCnt; i++) {
				var param = inDatasets[i];
				var ds = form._getDatasetObject(param.rval);
				if (ds) {
					ds.applyChange();
				}
			}
		}
		inDatasets = null;

		var dsIds = {
		};
		var outDatasets = this.outputDatasets;
		if (outDatasets && outDatasets.length) {
			var outDataCnt = outDatasets.length;
			for (var i = 0; i < outDataCnt; i++) {
				var param = outDatasets[i];
				if (dsIds[param.rval] == undefined) {
					dsIds[param.rval] = param.lval;
				}
			}
		}
		outDatasets = null;

		function find_next_dataset_loop () {
			if (curIdx < lineCnt) {
				curStr = ppxLines[curIdx];
				if (curStr.charAt(0) == "D") {
					return true;
				}
				curIdx++;
				return false;
			}
			return true;
		}

		while (curIdx < lineCnt) {
			while (true) {
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
			}
			if (curIdx < lineCnt) {
				var valArr = curStr.split(_cs_);
				var remoteId = valArr[1];
				if (remoteId && remoteId.length) {
					var localId = dsIds[remoteId];
					var ds = form._getDatasetObject(localId);
					if (ds) {
						ds.rowposition = -1;
						curIdx = ds.loadFromPPXArray(ppxLines, lineCnt, curIdx, true);
						if (this.bcache) {
							datasets.add_item(localId, new nexacro._DataSetCache(localId, ds.colinfos, ds._constVars, ds._rawRecords));
						}
					}
					else {
						curIdx++;
					}
					ds = null;
				}
				else {
					curIdx++;
				}
			}
		}
		ppxLines = null;
		strRecvData = null;

		return [[code, message], parameters, datasets];
	};

	_pTransactionItem.__deserializeSSV = function (strRecvData) {
		var parameters = [];
		var datasets = new nexacro.Collection();


		var _rs_ = String.fromCharCode(30);
		var _cs_ = String.fromCharCode(31);

		var code = 0;
		var message = "SUCCESS";

		if (!strRecvData) {
			return [[-1, "Stream Data is null!"], null, null];
		}

		var form = this.context;

		var ssvLines = strRecvData.split(_rs_);
		var lineCnt = ssvLines.length;
		var curIdx = 0;
		curIdx++;

		var curStr;

		for (; curIdx < lineCnt; curIdx++) {
			curStr = ssvLines[curIdx];
			if (curStr.substring(0, 7) != "Dataset") {
				var paramArr = curStr.split(_cs_);
				var paramCnt = paramArr.length;
				for (var i = 0; i < paramCnt; i++) {
					var paramStr = paramArr[i];
					var varInfo = paramStr;
					var val = undefined;
					var sep_pos = paramStr.indexOf("=");
					if (sep_pos >= 0) {
						varInfo = paramStr.substring(0, sep_pos);
						val = paramStr.substring(sep_pos + 1);
						if (val == String.fromCharCode(3)) {
							val = undefined;
						}
					}

					if (varInfo) {
						var id = varInfo;
						var sep_pos = varInfo.indexOf(":");
						if (sep_pos >= 0) {
							id = varInfo.substring(0, sep_pos);
						}

						if (id == "ErrorCode") {
							code = parseInt(val) | 0;
							if (isFinite(code) == false) {
								code = -1;
							}
							val = code;
						}
						else if (id == "ErrorMsg") {
							message = val;
						}
						else if (id in form) {
							if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
								form[id] = val;
							}
						}
						else {
							if (application._existVariable(id)) {
								application.setVariable(id, val);
							}
						}

						if (this.bcache) {
							parameters[parameters.length] = new nexacro._ParametersCache(id, val);
						}
					}
				}
			}
			else {
				break;
			}
		}
		var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
		if (code <= -1 && type == "onsuccess") {
			return [[code, message], parameters, datasets];
		}

		var inDatasets = this.inputDatasets;
		if (inDatasets && inDatasets.length) {
			var inDataCnt = inDatasets.length;
			for (var i = 0; i < inDataCnt; i++) {
				var param = inDatasets[i];
				var ds = form._getDatasetObject(param.rval);
				if (ds) {
					ds.applyChange();
				}
			}
		}

		var dsIds = {
		};
		var outDatasets = this.outputDatasets;
		if (outDatasets && outDatasets.length) {
			var outDataCnt = outDatasets.length;
			for (var i = 0; i < outDataCnt; i++) {
				var param = outDatasets[i];
				if (dsIds[param.rval] == undefined) {
					dsIds[param.rval] = param.lval;
				}
			}
		}

		function find_next_dataset_loop () {
			if (curIdx < lineCnt) {
				curStr = ssvLines[curIdx];
				if (curStr.substring(0, 7) == "Dataset") {
					return true;
				}
				curIdx++;
				return false;
			}
			return true;
		}

		while (curIdx < lineCnt) {
			while (true) {
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
			}
			if (curIdx < lineCnt) {
				var sep_pos = curStr.indexOf(":");
				if (sep_pos >= 0) {
					var remoteId = curStr.substring(sep_pos + 1);
					if (remoteId && remoteId.length) {
						var localId = dsIds[remoteId];
						var ds = form._getDatasetObject(localId);
						if (ds) {
							ds.rowposition = -1;
							curIdx = ds.loadFromSSVArray(ssvLines, lineCnt, curIdx, true, this._is_bulk);
							if (this.bcache) {
								datasets.add_item(localId, new nexacro._DataSetCache(localId, ds.colinfos, ds._constVars, ds._rawRecords));
							}
						}
						else {
							curIdx++;
						}
					}
					else {
						curIdx++;
					}
				}
				else {
					curIdx++;
				}
			}
		}

		dsIds = null;
		return [[code, message], parameters, datasets];
	};

	_pTransactionItem.__deserializeCSV = function (strRecvData) {
		var parameters = [];
		var datasets = new nexacro.Collection();

		var code = 0;
		var message = "SUCCESS";

		if (!strRecvData) {
			return [[-1, "Stream Data is null!"], null, null];
		}

		var form = this.context;

		var csvLines = strRecvData.split(/\r\n|\n/);

		var lineCnt = csvLines.length;
		var curIdx = 0;
		curIdx++;

		var varInfoArr, varInfo, id, val, pIdx;
		var curStr;

		for (; curIdx < lineCnt; curIdx++) {
			curStr = csvLines[curIdx];
			if (curStr.substring(0, 7) != "Dataset") {
				var paramArr = curStr.split(",");
				var paramCnt = paramArr.length;
				for (var i = 0; i < paramCnt; i++) {
					var paramStr = paramArr[i];
					if (paramStr.charAt(0) == "\"" || paramStr.charAt(0) == "\'") {
						paramStr = paramStr.substring(1, paramStr.length - 1);
					}
					var varInfo = paramStr;
					var val = undefined;
					var sep_pos = paramStr.indexOf("=");
					if (sep_pos >= 0) {
						varInfo = paramStr.substring(0, sep_pos);
						val = paramStr.substring(sep_pos + 1);
					}
					if (varInfo) {
						var id = varInfo;
						var sep_pos = varInfo.indexOf(":");
						if (sep_pos >= 0) {
							id = varInfo.substring(0, sep_pos);
						}

						if (id == "ErrorCode") {
							code = parseInt(val) | 0;
							if (isFinite(code) == false) {
								code = -1;
							}
							val = code;
						}
						else if (id == "ErrorMsg") {
							message = val;
						}
						else if (id in form) {
							if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
								form[id] = val;
							}
						}
						else {
							if (application._existVariable(id)) {
								application.setVariable(id, val);
							}
						}

						if (this.bcache) {
							parameters[parameters.length] = new nexacro._ParametersCache(id, val);
						}
					}
				}
			}
			else {
				break;
			}
		}
		var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
		if (code <= -1 && type == "onsuccess") {
			return [[code, message], parameters, datasets];
		}

		var inDatasets = this.inputDatasets;
		if (inDatasets && inDatasets.length) {
			var inDataCnt = inDatasets.length;
			for (var i = 0; i < inDataCnt; i++) {
				var param = inDatasets[i];
				var ds = form._getDatasetObject(param.rval);
				if (ds) {
					ds.applyChange();
				}
			}
		}

		var dsIds = {
		};
		var outDatasets = this.outputDatasets;
		if (outDatasets && outDatasets.length) {
			var outDataCnt = outDatasets.length;
			for (var i = 0; i < outDataCnt; i++) {
				var param = outDatasets[i];
				if (dsIds[param.rval] == undefined) {
					dsIds[param.rval] = param.lval;
				}
			}
		}

		function find_next_dataset_loop () {
			if (curIdx < lineCnt) {
				curStr = csvLines[curIdx];
				if (curStr.substring(0, 7) == "Dataset") {
					return true;
				}
				curIdx++;
				return false;
			}
			return true;
		}

		while (curIdx < lineCnt) {
			while (true) {
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
				if (find_next_dataset_loop()) {
					break;
				}
			}
			if (curIdx < lineCnt) {
				var sep_pos = curStr.indexOf(":");
				if (sep_pos >= 0) {
					var remoteId = curStr.substring(sep_pos + 1);
					if (remoteId && remoteId.length) {
						var localId = dsIds[remoteId];
						var ds = form._getDatasetObject(localId);
						if (ds) {
							ds.rowposition = -1;
							curIdx = ds.loadFromCSVArray(csvLines, lineCnt, curIdx, true);
							if (this.bcache) {
								datasets.add_item(localId, new nexacro._DataSetCache(localId, ds.colinfos, ds._constVars, ds._rawRecords));
							}
						}
						else {
							curIdx++;
						}
					}
					else {
						curIdx++;
					}
				}
				else {
					curIdx++;
				}
			}
		}

		return [[code, message], parameters, datasets];
	};

	_pTransactionItem._TABS = ["", "\t", "\t\t", "\t\t\t", "\t\t\t\t", "\t\t\t\t\t", "\t\t\t\t\t\t"];
	_pTransactionItem._writeData = function (list, str, depth) {
		list[list.length] = this._TABS[depth] + str;
	};

	_pTransactionItem._dsUpdate = function (ds) {
		if (ds) {
			var dsCnt;
			var viewRecords = ds._viewRecords;
			var viewRecLength = viewRecords.length;
			if (ds._deletedRecords.length > 0) {
				viewRecords = ds._viewRecords = [];
				var len = ds._rawRecords.length;
				for (dsCnt = 0; dsCnt < len; dsCnt++) {
					var _currowData = ds._rawRecords[dsCnt];
					if (_currowData._rtype != 8) {
						viewRecords[viewRecLength] = _currowData;
					}
				}
			}

			ds.colcount = ds.colinfos.length;
			ds.rowcount = ds._viewRecords.length;

			ds.loadstatus = false;
			ds._eventstat = ds.enableevent;

			ds._reFilter();
			ds._resetSortGroup();
		}
	};

	_pTransactionItem._dsOnload = function (ds, reason) {
		if (ds) {
			if (ds._viewRecords.length > 0) {
				ds.rowposition = 0;
			}
			if (ds._eventstat) {
				if (reason) {
					ds.on_fire_onload(0, "", reason);
				}
				else {
					ds.on_fire_onload(0, "", 0);
				}
			}
		}
	};

	_pTransactionItem._getStreamType = function (strRecvData) {
		if (!strRecvData) {
			return null;
		}

		var data = nexacro.trimLeft(strRecvData);
		var type = data.slice(0, 10).toUpperCase();

		if (type.indexOf("CSV") == 0) {
			return "CSV";
		}
		else if (type.indexOf("SSV") == 0) {
			return "SSV";
		}
		else if (type.indexOf("PPX") == 0) {
			return "PPX";
		}
		else if (type.indexOf("<?XML") == 0) {
			return "XML";
		}
		else if (type.length == 10) {
			return "UNKNOWN";
		}

		return null;
	};
	delete _pTransactionItem;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.EditBase) {
	nexacro.EditClickEventInfo = function (obj, id, caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		nexacro.ClickEventInfo.call(this, obj, id || "oneditclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		this.caretpos = (caretpos == null) ? 0 : caretpos;
	};

	var _pEditClickEventInfo = nexacro._createPrototype(nexacro.MouseEventInfo, nexacro.EditClickEventInfo);
	nexacro.EditClickEventInfo.prototype = _pEditClickEventInfo;
	_pEditClickEventInfo._type_name = "EditClickEventInfo";

	delete _pEditClickEventInfo;
	_pEditClickEventInfo = null;

	nexacro.CanCharEventInfo = function (obj, id, chartext, pretext, posttext) {
		this.id = this.eventid = id || "cancharchange";
		this.fromobject = this.fromreferenceobject = obj;

		this.chartext = chartext;
		this.posttext = posttext;
		this.pretext = pretext;
	};
	var _pCanCharEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CanCharEventInfo);
	nexacro.CanCharEventInfo.prototype = _pCanCharEventInfo;
	_pCanCharEventInfo._type_name = "TextChangeEventInfo";

	_pCanCharEventInfo.set_chartext = function (v) {
		this.chartext = v;
	};

	delete _pCanCharEventInfo;
	_pCanCharEventInfo = null;

	nexacro.TextChangeEventInfo = function (obj, id, chartext, pretext, posttext, preimetext, postimetext) {
		this.id = this.eventid = id || "ontextchange";
		this.fromobject = this.fromreferenceobject = obj;

		this.chartext = chartext;
		this.posttext = posttext;
		this.pretext = pretext;
		this.preimetext = preimetext;
		this.postimetext = postimetext;
	};
	var _pTextChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.TextChangeEventInfo);
	nexacro.TextChangeEventInfo.prototype = _pTextChangeEventInfo;
	_pTextChangeEventInfo._type_name = "TextChangeEventInfo";

	_pTextChangeEventInfo.set_chartext = function (v) {
		this.chartext = v;
	};

	delete _pTextChangeEventInfo;
	_pTextChangeEventInfo = null;

	nexacro.TextChangedEventInfo = function (obj, id, pretext, posttext) {
		this.id = this.eventid = id || "ontextchanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.pretext = pretext;
		this.posttext = posttext;
	};
	var _pTextChangedEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.TextChangedEventInfo);
	nexacro.TextChangedEventInfo.prototype = _pTextChangedEventInfo;
	_pTextChangedEventInfo._type_name = "TextChangedEventInfo";

	delete _pTextChangedEventInfo;

	nexacro.EditBase = function (comp) {
		if (comp) {
			this.comp = comp;
		}

		this._init_eventhandler();
		this._init();
	};

	_pEditBase = nexacro.EditBase.prototype;
	_pEditBase._type_name = "EditBase";

	_pEditBase._old_text = "";
	_pEditBase._old_old_text = "";
	_pEditBase._text = "";
	_pEditBase._old_value = null;
	_pEditBase._old_old_value = null;
	_pEditBase._value = null;
	_pEditBase._focus_text = "";
	_pEditBase._focus_value = null;
	_pEditBase._old_focus_text = "";
	_pEditBase._old_focus_value = null;
	_pEditBase._strTab = "\t";
	_pEditBase._set_old_prop = false;
	_pEditBase._deleted_char = "";
	_pEditBase._is_on_killfocus = false;
	_pEditBase._is_apply_autoselect = false;
	_pEditBase._imefirsttxt = "";
	_pEditBase._select_text = "";
	_pEditBase._compositionstart_value = "";
	_pEditBase._compositionend_value = "";
	_pEditBase._bChangeFocusText = false;
	_pEditBase._bInsert = false;
	_pEditBase._is_insertkey = false;
	_pEditBase._is_cancel_event = false;
	_pEditBase._is_contextmenu = false;
	_pEditBase._is_mobile_drag = false;
	_pEditBase._mobile_elme_pos = 0;
	_pEditBase._is_ios_paste_composition = false;
	_pEditBase._do_focus = false;
	_pEditBase._skip_sys_focus = false;
	_pEditBase._clipdata = "";
	_pEditBase._skip_setcaret = false;
	_pEditBase._do_set_caret = false;
	_pEditBase._multi_inserttext = "";
	_pEditBase._is_multi_inserttext = true;
	_pEditBase._compositionend_newtext = "";

	_pEditBase._keycode = 0;
	_pEditBase._charcode = 0;
	_pEditBase._precharcode = 0;
	_pEditBase._altkey = false;
	_pEditBase._ctrlkey = false;
	_pEditBase._shiftkey = false;
	_pEditBase._metakey = false;

	_pEditBase._old_begin_pos = 0;
	_pEditBase._old_end_pos = 0;
	_pEditBase._begin_pos = 0;
	_pEditBase._end_pos = 0;
	_pEditBase._input_begin_pos = 0;

	_pEditBase._accept_keyinput_event = true;
	_pEditBase._accept_focus_event = true;
	_pEditBase._accept_blur_event = true;
	_pEditBase._accept_select_event = true;
	_pEditBase._accept_cut_process = true;
	_pEditBase._accept_text_changed_status = 0;

	_pEditBase._stat_mouse = null;
	_pEditBase._stat_focus = null;
	_pEditBase._stat_composition = null;
	_pEditBase._mouseflag = false;

	_pEditBase._is_undo = false;
	_pEditBase._undoStack = null;

	_pEditBase._textEventInfo = null;

	_pEditBase._set_timer_by_killfocus = false;
	_pEditBase._isPasteActionComplete = true;
	_pEditBase._is_ios_composition_touch = false;

	_pEditBase._on_input_mousedown = null;
	_pEditBase._on_input_mouseup = null;
	_pEditBase._on_input_mousemove = null;
	_pEditBase._on_input_touchstart = null;
	_pEditBase._on_input_touchmove = null;
	_pEditBase._on_input_touchend = null;

	_pEditBase._on_input_keydown = null;
	_pEditBase._on_input_keypress = null;
	_pEditBase._on_input_keyinput = null;
	_pEditBase._on_input_keyup = null;

	_pEditBase._on_input_focus = null;
	_pEditBase._on_input_blur = null;

	_pEditBase._on_input_copy = null;
	_pEditBase._on_input_cut = null;
	_pEditBase._on_input_paste = null;

	_pEditBase._on_input_compositionstart = null;
	_pEditBase._on_input_compositionend = null;
	_pEditBase._on_input_compositionupdate = null;

	_pEditBase._on_input_select = null;
	_pEditBase._on_input_selectionchange = null;

	_pEditBase._on_default_input_keyup = nexacro._emptyFn;
	_pEditBase._keyup_process_enter = nexacro._emptyFn;
	_pEditBase._focus_process = nexacro._emptyFn;
	_pEditBase._blur_process = nexacro._emptyFn;
	_pEditBase._mouseup_process = nexacro._emptyFn;
	_pEditBase._mousedown_process = nexacro._emptyFn;

	_pEditBase.onUpdateStyle = nexacro._emptyFn;
	_pEditBase.syncValue = nexacro._emptyFn;
	_pEditBase.insertTabChar = nexacro._emptyFn;
	_pEditBase.applyInputmode = nexacro._emptyFn;
	_pEditBase._changeFocusText = nexacro._emptyFn;

	_pEditBase._setLocale = nexacro._emptyFn;

	_pEditBase._init_eventhandler = function () {
		this._on_input_mousedown = this._on_default_input_mousedown;
		this._on_input_mouseup = this._on_default_input_mouseup;
		this._on_input_mousemove = this._on_default_input_mousemove;
		this._on_input_keydown = this._on_default_input_keydown;
		this._on_input_keypress = this._on_default_input_keypress;
		this._on_input_keyinput = this._on_default_input_keyinput;
		this._on_input_keyup = this._on_default_input_keyup;

		this._on_input_touchstart = this._on_default_input_touchstart;
		this._on_input_touchmove = this._on_default_input_touchmove;
		this._on_input_touchend = this._on_default_input_touchend;

		this._on_input_focus = this._on_default_input_focus;
		this._on_input_blur = this._on_default_input_blur;

		this._on_input_copy = this._on_default_input_copy;
		this._on_input_cut = this._on_default_input_cut;
		this._on_input_paste = this._on_default_input_paste;

		this._on_input_compositionstart = this._on_default_input_compositionstart;
		this._on_input_compositionend = this._on_default_input_compositionend;
		this._on_input_compositionupdate = this._on_default_input_compositionupdate;

		this._on_input_select = this._on_default_input_select;
		this._on_input_selectionchange = this._on_default_input_selectionchange;
	};

	_pEditBase._init = function (bInit) {
		this._old_text = "";
		this._text = "";
		this._old_value = null;
		this._value = null;
		this._focus_text = "";
		this._focus_value = null;
		this._set_old_prop = false;

		if (!bInit) {
			this._old_begin_pos = 0;
			this._old_end_pos = 0;
			this._begin_pos = 0;
			this._end_pos = 0;
		}
		else {
			this._old_begin_pos = this._nMaxedLength;
			this._old_end_pos = this._nMaxedLength;
			this._begin_pos = this._nMaxedLength;
			this._end_pos = this._nMaxedLength;
		}

		this._input_begin_pos = 0;
		this._skip_set_caret = false;
		this._accept_hangul = true;

		this._accept_focus_event = true;
		this._accept_blur_event = true;

		this._set_timer_by_killfocus = false;

		if (!this._stat_mouse) {
			this._stat_mouse = new nexacro.EditBase.Status("mouse");
		}
		else {
			this._stat_mouse.init();
		}

		if (!this._stat_focus) {
			this._stat_focus = new nexacro.EditBase.Status("focus");
		}
		else {
			this._stat_focus.init();
		}

		if (!this._stat_composition) {
			this._stat_composition = new nexacro.EditBase.CompositionStatus("composition");
		}
		else {
			this._stat_composition.init();
		}

		if (!this._undoStack) {
			this._undoStack = new nexacro.EditBase.UndoStack(this.comp);
		}
		else {
			this._undoStack.init();
		}

		if (!this._textEventInfo) {
			this._textEventInfo = new nexacro.EditBase.TextEventInfo(this.comp);
		}
		else {
			this._textEventInfo.init();
		}
	};

	_pEditBase._destroy = function () {
		this.comp = null;

		this._old_value = null;
		this._value = null;
		this._focus_value = null;

		this._stat_mouse = null;
		this._stat_focus = null;
		this._stat_composition = null;

		this._skip_setcaret = false;

		if (this._undoStack) {
			this._undoStack._destroy();
			this._undoStack = null;
		}

		if (this._textEventInfo) {
			this._textEventInfo._destroy();
			this._textEventInfo = null;
		}
	};

	_pEditBase._on_getAccessibilityAdditionalLabel = function () {
		var comp = this.comp;
		var input_elem = comp._input_element;

		if (input_elem && input_elem._wantAccessibilityAdditionalLabel) {
			if (!input_elem._wantAccessibilityAdditionalLabel()) {
				return "";
			}

			if (comp.text !== undefined && comp.value !== undefined) {
				return comp.text;
			}
		}

		return "";
	};

	_pEditBase._on_getAccessibilityWholeLabel = function () {
		var comp = this.comp;
		var input_elem = comp._input_element;

		if (input_elem) {
			if (comp.text !== undefined && comp.value !== undefined) {
				return comp.text;
			}
		}

		return "";
	};

	_pEditBase._set_input_begin_pos = function (v) {
		this._input_begin_pos = v;
	};

	_pEditBase.setPosition = function () {
		var comp = this.comp;
		var elem = comp._input_element;
		var control = comp._control_element;

		var container_width = comp._client_width;
		var container_height = comp._client_height;

		if (elem && elem._handle) {
			if (container_width != 0 && container_height != 0) {
				var p = nexacro._getCachedPaddingObj("0 1 0 1");
				var align = comp.on_find_CurrentStyle_align(comp._pseudo);
				var padding = comp.on_find_CurrentStyle_padding(comp._pseudo);

				var valign = align.valign;
				var halign = align.halign;

				if (valign == "") {
					valign = nexacro.Component._default_left_align.valign;
				}

				elem.setElementPosition(0, 0);
				control.setElementPadding(padding);
				elem.setElementPadding(p);
				elem.setElementSize(container_width, container_height);
				elem.setElementAlignXY(halign, valign);
			}
		}
	};

	_pEditBase.setElementCaretPos = function (start, end, elem) {
		if (elem && elem._type == "date") {
			start = 0;
			end = elem.getElementValue().length;
		}

		this._old_begin_pos = this._begin_pos;
		this._old_end_pos = this._end_pos;

		this._begin_pos = start;
		this._end_pos = end;

		if (!this._is_composition() && !this.comp._input_element._is_ios_composition) {
			this._set_input_begin_pos(start);
		}

		if (elem) {
			if (!this._skip_set_caret) {
				pos = elem.setElementSetSelect(start, end);
			}
		}
	};

	if (nexacro.OS == "iOS") {
		var ver_arr = nexacro.OSVersion.split(".");
		var major_ver = ver_arr[0];

		if (major_ver < 7) {
			_pEditBase.getCompositionData = function (elem) {
				var value = elem.getElementValue();

				var start = this._input_begin_pos;
				var end = value.length - this._imefirsttxt.length;

				var data = value.substr(start, end);

				return data;
			};
		}
		else {
			_pEditBase.getCompositionData = function (elem) {
				var pos = elem.getElementCaretPos();
				if (!pos || pos == -1) {
					return "";
				}

				var value = elem.getElementValue();

				var start = this._input_begin_pos;
				var end = pos.begin - this._input_begin_pos;

				var data = value.substr(start, end);

				return data;
			};
		}
	}
	else {
		_pEditBase.getCompositionData = function (elem) {
			var pos = elem.getElementCaretPos();
			if (!pos || pos == -1) {
				return "";
			}

			var value = elem.getElementValue();

			var start = this._input_begin_pos;
			var end = pos.begin - this._input_begin_pos;
			if ((nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11) || nexacro.BrowserType == "Edge") {
				if (nexacro.BrowserType == "Edge") {
					if (value && this._is_hangul(value.substr(pos.begin - 1, 1))) {
						if (pos.begin - this._input_begin_pos > 1) {
							start = this._input_begin_pos;
							end = pos.begin - start;
						}
					}
				}

				if (end < 0) {
					start = this._input_begin_pos = this._input_begin_pos + end;
					end = pos.begin - this._input_begin_pos;
				}

				if (end == 0) {
					end = pos.begin + 1;
				}
			}

			var data = "";
			if ((nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11) || nexacro.BrowserType == "Edge") {
				if (this._value) {
					var r_v = this._value.substr(start);
					var r_len = r_v ? r_v.length : 0;
					var value_len = value.length;
					data = value.substr(start, value_len - start - r_len);
				}
				else {
					data = value.substr(start, end);
				}
			}
			else {
				data = value.substr(start, end);
			}

			return data;
		};
	}

	_pEditBase.getInsertText = function (elem) {
		var insertText = "";
		var element_text = elem.getElementValue();
		var text = this._text;

		if (!text) {
			text = "";
		}

		if (nexacro.Browser == "IE" && this._pasteAction) {
			var compositionlen = 0;
			var compositiondata = this._stat_composition.getData(elem);
			if (compositiondata) {
				compositionlen = compositiondata.length;
			}

			if (!this._clipdata || this._clipdata.length <= 0) {
				var len = (element_text.length - text.length) + compositionlen;
			}
			else {
				var len = this._clipdata.length + compositionlen;
			}

			insertText = element_text.substr(this._begin_pos, len);

			elem.setElementBlur();
			elem.setElementFocus();
		}
		else if (this._pasteAction || this._keycode == 13 || this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.None) {
			var len = element_text.length - text.length;
			insertText = element_text.substr(this._begin_pos, len);
		}
		else if (this.getCompositionData(elem)) {
			insertText = this.getCompositionData(elem);
		}
		else {
			insertText = this._stat_composition.getData(elem);
		}

		return insertText;
	};

	_pEditBase.clearBuffer = function (text, begin, end) {
		if (text === null || text === undefined) {
			return;
		}

		var newText = text.substr(0, begin) + text.substr(end, text.length - end);
		this._setText(newText);
		this._setValue(newText);
		this.setElementCaretPos(begin, begin);
	};

	_pEditBase.restoreBuffer = function (text, begin, end) {
		if (text === null || text === undefined) {
			return;
		}

		this._setText(text);
		this._setValue(text);
		this.setElementCaretPos(begin, end);
	};

	_pEditBase.writeBuffer = function (elem) {
		var str = this._text;
		if (str === undefined || str === null) {
			str = "";
		}

		str = str.replace(/\r\n/g, "\n");

		var val = elem.getElementValue();
		val = val.replace(/\r\n/g, "\n");

		if (elem && val != str) {
			elem.setElementValue(str);
		}

		return str;
	};

	_pEditBase.setValue = function (v) {
		var elem = this.comp._input_element;

		if (nexacro._isNull(v) || v === "") {
			this._setText("");
			this._setValue(v);
			this._undoStack.push(v);

			if (elem) {
				if (nexacro.Browser == "Runtime") {
					this.setElementCaretPos(0, 0, elem);
				}
				else {
					this.setElementCaretPos(0, 0);
				}
			}
		}
		else {
			this._setText(v);
			this._setValue(v);
			this._undoStack.push(v, v, this._begin_pos, this._end_pos);
		}

		if (elem) {
			if (nexacro.OS == "iOS" && elem) {
				if (!this.comp.password) {
					elem.setElementInputType("text", true);
					elem.setElementInputTypeKeypad(this.comp.inputtype);
				}
			}

			if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
				this._accept_keyinput_event = false;
			}

			elem.setElementValue(v, true);

			if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
				this._accept_keyinput_event = true;
			}
		}
	};

	_pEditBase._on_default_input_mousedown = function (elem, altKey, ctrlKey, shiftKey, metaKey) {
		this._old_text = this._text;
		this._old_value = this._value;

		var mouse_stat = this._stat_mouse.getCurrentStatus();
		if (mouse_stat == "mousedown") {
			this._is_apply_autoselect = false;
		}

		this._stat_mouse.setStatus(nexacro.EditBase.Status.MouseDown);

		this._mousedown_process(elem);

		if (ctrlKey && !this._is_selected()) {
			this.comp.setSelect();
		}
	};

	_pEditBase._on_default_input_mousemove = function (elem) {
		if (this._text == elem.getElementValue() && !this._block_setcaret_mousemove) {
			this._setCaret(elem);
		}
	};

	_pEditBase._on_default_input_mouseup = function (elem, altKey, ctrlKey, shiftKey, metaKey) {
		this._stat_mouse.setStatus(nexacro.EditBase.Status.MouseUp);
		this._stat_composition.init();
		this._compositionend_value = "";

		this._mouseup_process(elem);

		if (this._is_apply_autoselect) {
			this._is_apply_autoselect = false;
			elem._event_stop = true;
		}

		if (elem.readonly) {
			elem._deleteCaret();
		}
	};

	_pEditBase._on_default_input_touchstart = function (elem) {
		this._old_text = this._text;
		this._old_value = this._value;

		this._mousedown_process(elem);
	};

	_pEditBase._on_default_input_touchmove = function (elem) {
	};

	_pEditBase._on_default_input_touchend = function (elem) {
		this._stat_mouse.setStatus(nexacro.EditBase.Status.MouseUp);
		this._setCaret(elem);

		if (elem.readonly) {
			elem._deleteCaret();
		}
	};

	_pEditBase._on_default_input_select = function (elem) {
		if (this._accept_select_event === false) {
			this._accept_select_event = true;
			return;
		}

		if (nexacro.BrowserType != "Edge") {
			this._setCaret(elem);
		}

		if (this._text && (this._begin_pos != this._end_pos)) {
			this._select_text = this._text.substring(this._begin_pos, this._end_pos);
		}
		else {
			this._select_text = "";
		}
	};

	_pEditBase._on_default_input_selectionchange = function (elem) {
		if (elem && elem._input_handle) {
			if (!this._is_composition() && !elem._is_ios_composition) {
				var node = elem._input_handle;
				this._old_begin_pos = this._begin_pos;
				this._old_end_pos = this._end_pos;

				this._begin_pos = node.selectionStart;
				this._end_pos = node.selectionEnd;

				this._set_input_begin_pos(this._begin_pos);
			}
		}

		if (this._text && (this._begin_pos != this._end_pos)) {
			this._select_text = this._text.substring(this._begin_pos, this._end_pos);
		}
	};

	_pEditBase._on_default_input_focus = function (elem, target) {
		var mouseflag = false;
		var mouse_status = this._stat_mouse.getCurrentStatus();
		var focus_status = this._stat_focus.getCurrentStatus();

		if (mouse_status == nexacro.EditBase.Status.MouseDown && focus_status != nexacro.EditBase.Status.Focus) {
			mouseflag = true;
		}

		if (this._accept_focus_event === false) {
			this._accept_focus_event = true;

			if (!this._skip_setcaret) {
				this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
			}

			this._skip_setcaret = false;
			if (!mouseflag && elem.readonly) {
				elem._deleteCaret();
			}

			return;
		}

		this._focus_process(elem, mouseflag);

		if (focus_status != nexacro.EditBase.Status.Focus) {
			if (!this.comp._activate_flag) {
				this._setFocusValue();
			}
		}

		if (mouseflag) {
			if (nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") {
				elem._event_stop = true;
			}
		}

		if (!this._is_composition()) {
			this._compositionend_value = "";
			this._stat_composition.init();
		}

		this.comp._activate_flag = false;

		if (((nexacro.Browser == "Runtime") || (nexacro.Browser != "Runtime" && this._mouseflag && mouse_stat == "mousedown")) && 
			focus_status != nexacro.EditBase.Status.Focus && 
			this._stat_focus.getCurrentStatus() == nexacro.EditBase.Status.Focus) {
			var win = this.comp._getWindow();
			var focus_idx = win ? win._indexOfCurrentFocusPaths(this.comp) : 0;
			if (focus_idx < 0 && this.comp._is_subcontrol) {
				focus_idx = win ? win._indexOfCurrentFocusPaths(this.comp.parent) : 0;
			}
			if (focus_idx < 0 && nexacro.Browser == "Runtime" && !application._is_on_alert) {
				this.comp._on_focus(true);
			}
		}
	};

	_pEditBase._on_default_input_blur = function (elem, target) {
		if ((!this.comp._input_element.getRootWindowHandle()) || (target === elem._handle && elem.password)) {
			return true;
		}

		if (this._accept_blur_event === false) {
			this._accept_blur_event = true;
			return false;
		}

		if (this._is_on_killfocus && this._stat_mouse.getCurrentStatus() === nexacro.EditBase.Status.MouseDown) {
			this._stat_mouse.setStatus(nexacro.EditBase.Status.MouseUp);
		}

		this._blur_process(elem);

		this._stat_focus.setStatus(nexacro.EditBase.Status.Blur);

		return true;
	};

	if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10 && nexacro._getRealBrowserVersion() <= 10) {
		if (nexacro.OSVersion >= 6.0) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 10) {
				_pEditBase._on_default_input_keyinput = function (elem) {
					var mouse_stat = this._stat_mouse.getCurrentStatus();
					if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
						mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
						elem.setElementValue(this._value);
						return false;
					}

					if (this._accept_keyinput_event === false) {
						this._accept_keyinput_event = true;
						return false;
					}

					if (this._is_cancel_event == true) {
						return false;
					}

					if (this._is_selected(elem) && this._select_text == "") {
						elem.setElementValue(this._text);
						this.setElementCaretPos(this._begin_pos, this._begin_pos, elem);
					}

					if (elem.readonly) {
						return false;
					}
					if (!this.comp) {
						return false;
					}

					var comp = this.comp;
					var element_value = elem.getElementValue();
					var editbase_text = this._text;
					var editbase_value = this._value;

					if (!editbase_text) {
						editbase_text = "";
					}
					if (!editbase_value) {
						editbase_value = "";
					}

					if (!elem.usemultiline) {
						editbase_text = editbase_text.replace(/\r\n/g, "");
						editbase_text = editbase_text.replace(/\n/g, "");

						editbase_value = editbase_value.replace(/\r\n/g, "");
						editbase_value = editbase_value.replace(/\n/g, "");
					}

					if (element_value == editbase_text && element_value == editbase_value && (element_value == "" || element_value && (comp.maxlength == 0 || comp.maxlength >= element_value.length))) {
						this._setCaret(elem);
						return false;
					}

					if (element_value == editbase_value && this._is_composition()) {
						return false;
					}

					if (!this._set_old_prop) {
						this._old_text = this._text;
						this._old_value = this._value;
						this._old_begin_pos = this._begin_pos;
						this._old_end_pos = this._end_pos;
					}

					if (this._is_selected() && !this._cutAction) {
						this.clearBuffer(this._text, this._begin_pos, this._end_pos);
						this.syncValue();
						this._set_old_prop = true;

						if (this._pasteAction) {
							this._isPasteActionComplete = false;
						}
						return false;
					}

					if (this._keycode == nexacro.KeyCode_ImeInput && (this._stat_composition.getCurrentStatus() != nexacro.EditBase.Status.CompositionEnd)) {
						var data = this.getCompositionData(elem);
						var pos = elem.getElementCaretPos();
						if (!this._is_composition()) {
							if (data != "　" && data != "") {
								this._on_input_compositionstart(data);
							}
							else {
								this.setElementCaretPos(this._old_begin_pos + 1, this._old_begin_pos + 1, elem);
								elem.setElementBlur();
								elem.setElementFocus();
								return false;
							}
						}
						else {
							if (this._is_hangul(data)) {
								if (pos.begin != this._begin_pos) {
									var insertText = data.substr(0, 1);

									this._on_input_compositionend(insertText);

									var ret = this._fire_text_event(insertText);

									data = this.getCompositionData(elem);
									if (data.length > 0) {
										this._on_input_compositionstart(data);
									}
								}
								else if (this._compositionend_value === element_value) {
									this._on_input_compositionend(data);
								}
								else {
									this._on_input_compositionupdate(data);
								}
							}
							else {
								this._on_input_compositionupdate(data);
							}
						}
					}
					else if (this._is_composition()) {
						var data = this.getCompositionData(elem);
						if (!this._is_hangul(data)) {
							this._on_input_compositionupdate(data);
						}
						else {
							this._on_input_compositionend(data);
						}
					}

					var insertText = "";

					insertText = this.getInsertText(elem);

					var ret = this._fire_text_event(insertText);

					this._compositionend_value = element_value;

					if (!this._is_composition()) {
						this._compositionend_value = "";
						this._stat_composition.init();
					}

					this._set_old_prop = false;
					this.onUpdateStyle(comp);
					this._isPasteActionComplete = true;
					if (this._do_set_caret) {
						this._setCaret(elem);
						this._do_set_caret = false;
					}

					return ret;
				};
			}
			else if (nexacro.BrowserVersion == 9) {
				_pEditBase._on_default_input_keyinput = function (elem) {
					var mouse_stat = this._stat_mouse.getCurrentStatus();
					if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
						mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
						elem.setElementValue(this._value);
						return false;
					}
					if (this._accept_keyinput_event === false) {
						this._accept_keyinput_event = true;
						return false;
					}

					if (elem.readonly) {
						return false;
					}
					if (!this.comp) {
						return false;
					}

					var comp = this.comp;
					var element_value = elem.getElementValue();
					var editbase_text = this._text;
					var editbase_value = this._value;

					if (!editbase_text) {
						editbase_text = "";
					}
					if (!editbase_value) {
						editbase_value = "";
					}

					if (!elem.usemultiline) {
						editbase_text = editbase_text.replace(/\r\n/g, "");
						editbase_text = editbase_text.replace(/\n/g, "");

						editbase_value = editbase_value.replace(/\r\n/g, "");
						editbase_value = editbase_value.replace(/\n/g, "");
					}

					if (element_value == editbase_text && element_value == editbase_value && (element_value == "" || element_value && (comp.maxlength == 0 || comp.maxlength >= element_value.length))) {
						this._setCaret(elem);
						return false;
					}

					this._old_text = this._text;
					this._old_value = this._value;
					this._old_begin_pos = this._begin_pos;
					this._old_end_pos = this._end_pos;

					if (this._is_selected()) {
						this.clearBuffer(this._text, this._begin_pos, this._end_pos);
						this.syncValue();
						this._begin_pos = this._old_begin_pos;
						this._end_pos = this._old_end_pos;
					}

					if (this._keycode == nexacro.KeyCode_ImeInput) {
						var data = this.getCompositionData(elem);
						var pos = elem.getElementCaretPos();
						if (!this._is_composition()) {
							if (data != "　") {
								this._on_input_compositionstart(data);
							}
						}
						else {
							if (this._is_hangul(data)) {
								if (pos.begin != this._begin_pos) {
									var insertText = data.substr(0, 1);

									this._on_input_compositionend(insertText);

									var ret = this._fire_text_event(insertText);

									data = this.getCompositionData(elem);

									if (data.length > 0) {
										this._on_input_compositionstart(data);
									}
								}
								else if (this._compositionend_value === element_value) {
									this._on_input_compositionend(data);
								}
								else {
									this._on_input_compositionupdate(data);
								}
							}
							else {
								this._on_input_compositionupdate(data);
							}
						}
					}
					else if (this._is_composition()) {
						var data = this.getCompositionData(elem);
						if (!this._is_hangul(data)) {
							this._on_input_compositionupdate(data);
						}
					}

					var insertText = this.getInsertText(elem);
					var ret = this._fire_text_event(insertText);

					this._compositionend_value = element_value;

					if (!this._is_composition()) {
						this._compositionend_value = "";
						this._stat_composition.init();
					}

					if (this._do_set_caret) {
						this._setCaret(elem);
						this._do_set_caret = false;
					}

					this.onUpdateStyle(comp);

					return ret;
				};
			}
			else {
				_pEditBase._on_default_input_keyinput = function (elem) {
					var mouse_stat = this._stat_mouse.getCurrentStatus();
					if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
						mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
						elem.setElementValue(this._value);
						return false;
					}

					if (this._accept_keyinput_event === false) {
						this._accept_keyinput_event = true;
						return false;
					}

					if (elem.readonly) {
						return false;
					}
					if (!this.comp) {
						return false;
					}

					var comp = this.comp;
					var element_value = elem.getElementValue();
					var editbase_text = this._text;
					var editbase_value = this._value;

					if (!editbase_text) {
						editbase_text = "";
					}
					if (!editbase_value) {
						editbase_value = "";
					}

					if (!elem.usemultiline) {
						if (typeof (editbase_text) == "string") {
							editbase_text = editbase_text.replace(/\r\n/g, "");
							editbase_text = editbase_text.replace(/\n/g, "");
						}
						if (typeof (editbase_value) == "string") {
							editbase_value = editbase_value.replace(/\r\n/g, "");
							editbase_value = editbase_value.replace(/\n/g, "");
						}
					}


					if (element_value == editbase_text && element_value == editbase_value && (element_value == "" || element_value && (comp.maxlength == 0 || comp.maxlength >= element_value.length))) {
						this._setCaret(elem);
						return false;
					}

					if (!this._set_old_prop) {
						this._old_text = this._text;
						this._old_value = this._value;
						this._old_begin_pos = this._begin_pos;
						this._old_end_pos = this._end_pos;
					}

					if (this._is_selected() && !this._cutAction) {
						this.clearBuffer(this._text, this._begin_pos, this._end_pos);
						this.syncValue();
						this._set_old_prop = true;

						return;
					}

					if (this._keycode == nexacro.KeyCode_ImeInput) {
						var data = this.getCompositionData(elem);
						var pos = elem.getElementCaretPos();

						if (!this._is_composition()) {
							if (data && data.charAt(data.length - 1) != "　") {
								if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.None) {
									this._on_input_compositionstart(data);
								}
							}
							else {
								this._on_input_compositionend(data);
							}
						}
						else {
							if (data && data.length > 0) {
								if (this._is_hangul(data)) {
									if (pos.begin != this._begin_pos) {
										var insertText = data.substr(0, 1);

										this._on_input_compositionend(insertText);

										var ret = this._fire_text_event(insertText);

										var newCompositionText = data.substring(1, data.length);
										if (newCompositionText.length > 0) {
											this._on_input_compositionstart(newCompositionText);
										}
									}
									else {
										this._on_input_compositionupdate(data);
									}
								}
								else {
									this._on_input_compositionupdate(data);
								}
							}
							else {
								if (pos.end == this._input_begin_pos && this._is_hangul(this._stat_composition.getData())) {
									this._on_input_compositionend("");
									this._stat_composition.init();
									this._compositionend_value = "";
								}
							}
						}
					}
					else if (this._is_composition()) {
						var data = this.getCompositionData(elem);
						if (!this._is_hangul(data)) {
							this._on_input_compositionupdate(data);
						}
					}

					var insertText = this.getInsertText(elem);
					var ret = this._fire_text_event(insertText);

					this._compositionend_value = element_value;
					if (!this._is_composition()) {
						this._compositionend_value = "";
						this._stat_composition.init();
					}

					this._set_old_prop = false;
					if (this._do_set_caret) {
						this._setCaret(elem);
						this._do_set_caret = false;
					}
					this.onUpdateStyle(comp);

					return ret;
				};
			}
		}
		else {
			_pEditBase._on_default_input_keyinput = function (elem) {
				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;
					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var comp = this.comp;
				var element_value = elem.getElementValue();
				var editbase_text = this._text;
				var editbase_value = this._value;

				if (!editbase_text) {
					editbase_text = "";
				}
				if (!editbase_value) {
					editbase_value = "";
				}

				if (!elem.usemultiline) {
					editbase_text = editbase_text.replace(/\r\n/g, "");
					editbase_text = editbase_text.replace(/\n/g, "");

					editbase_value = editbase_value.replace(/\r\n/g, "");
					editbase_value = editbase_value.replace(/\n/g, "");
				}

				if (element_value == editbase_text && element_value == editbase_value && (element_value == "" || element_value && (comp.maxlength == 0 || comp.maxlength >= element_value.length))) {
					this._setCaret(elem);
					return false;
				}

				this._old_text = this._text;
				this._old_value = this._value;
				this._old_begin_pos = this._begin_pos;
				this._old_end_pos = this._end_pos;

				if (this._is_selected()) {
					this.clearBuffer(this._text, this._begin_pos, this._end_pos);
					this.syncValue();
					this._begin_pos = this._old_begin_pos;
					this._end_pos = this._old_end_pos;
				}

				if (this._keycode == nexacro.KeyCode_ImeInput) {
					var data = this.getCompositionData(elem);
					if (!this._is_composition()) {
						if (data != "　") {
							this._on_input_compositionstart(data);
						}
					}
					else {
						if (this._is_hangul(data)) {
							if (this._compositionend_value && (this._compositionend_value.length < element_value.length)) {
								var insertText = data.substr(0, 1);

								this._compositionend_value = element_value.substr(0, element_value.length - 1);
								this._on_input_compositionend(insertText);

								var ret = this._fire_text_event(insertText);
								data = data.substr(1, data.length - 1);

								if (data.length > 0) {
									this._on_input_compositionstart(data);
								}
							}
							else {
								this._on_input_compositionupdate(data);
							}
						}
						else {
							this._on_input_compositionupdate(data);
						}
					}
				}
				else if (this._is_composition()) {
					var data = this.getCompositionData(elem);
					if (!this._is_hangul(data)) {
						this._on_input_compositionupdate(data);
					}
				}

				var insertText = this.getInsertText(elem);
				var ret = this._fire_text_event(insertText);

				this._compositionend_value = element_value;

				if (!this._is_composition()) {
					this._compositionend_value = "";
					this._stat_composition.init();
				}

				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}
				this.onUpdateStyle(comp);
				return ret;
			};
		}
	}
	else if (nexacro.OS == "iOS") {
		var ver_arr = nexacro.OSVersion.split(".");
		var major_ver = ver_arr[0];
		var minor_ver = ver_arr[1];
		if (major_ver < 7) {
			_pEditBase._on_default_input_keyinput = function (elem) {
				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;
					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var comp = this.comp;
				var elem_value = elem.getElementValue();
				var base_text = this._text;
				var base_value = this._value;

				if (this._is_composition() && this._imefirsttxt == elem_value && (elem_value == "" || elem_value && (comp.maxlength == 0 || comp.maxlength >= elem_value.length))) {
					return false;
				}

				this._old_text = this._text;
				this._old_value = this._value;
				this._old_begin_pos = this._begin_pos;
				this._old_end_pos = this._end_pos;

				if (this._is_selected()) {
					this.clearBuffer(this._text, this._begin_pos, this._end_pos);
					this.syncValue();
				}

				if (this._charcode >= 12593 && this._charcode <= 12643) {
					if (!this._is_composition()) {
						this._imefirsttxt = this._text;
						var data = this.getCompositionData(elem);

						this._on_input_compositionstart(data);
					}
					else {
						var data = this.getCompositionData(elem);

						if (this._compositionend_value && (this._compositionend_value.length < elem_value.length)) {
							var insertText = data.substr(0, 1);
							var newData_len = data.length - 1;

							var composition_front = elem_value.substr(0, this._begin_pos);
							var composition_rear = elem_value.substr(this._begin_pos + newData_len, elem_value.length - 1);

							this._compositionend_value = composition_front + composition_rear;
							this._on_input_compositionend(insertText);

							var ret = this._fire_text_event(insertText);
							data = data.substr(1, data.length - 1);

							if (data.length > 0) {
								this._imefirsttxt = this._compositionend_value;
								this._on_input_compositionstart(data);
							}
						}
						else {
							this._on_input_compositionupdate(data);
						}
					}
				}
				else if (this._is_composition()) {
					var data = this.getCompositionData(elem);
					if (!this._is_hangul(data)) {
						this._on_input_compositionupdate(data);
					}
				}

				var insertText = this.getInsertText(elem);

				var ret = this._fire_text_event(insertText);

				this._compositionend_value = elem_value;

				if (!this._is_composition()) {
					this._compositionend_value = "";
					this._stat_composition.init();
				}

				this.onUpdateStyle(comp);
				return ret;
			};
		}
		else {
			_pEditBase._on_default_input_keyinput = function (elem) {
				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					if (this.comp) {
						if (elem.password && elem.maxlength > 0 && this.comp.autoskip) {
							this._autoskip_from_text_event();
						}
					}

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var comp = this.comp;
				var elem_value = elem.getElementValue();
				var pos = elem.getElementCaretPos();
				var base_text = this._text;
				var base_value = this._value;

				if (this._is_composition() && this._imefirsttxt == elem_value && (elem_value == "" || elem_value && (comp.maxlength == 0 || comp.maxlength >= elem_value.length))) {
					if (major_ver >= 13 && elem._keypad_type == "number") {
						if (pos.begin != pos.end && pos.end != this._end_pos) {
							this._begin_pos = this._end_pos = pos.end;
						}

						if (!(pos.begin == pos.end && pos.end == this._end_pos)) {
							return false;
						}
					}
					else {
						return false;
					}
				}

				this._old_text = this._text;
				this._old_value = this._value;
				this._old_begin_pos = this._begin_pos;
				this._old_end_pos = this._end_pos;

				if (this._is_selected()) {
					this.clearBuffer(this._text, this._begin_pos, this._end_pos);
					this.syncValue();
				}

				if (this._charcode >= 12593 && this._charcode <= 12643) {
					if (!this._is_composition()) {
						this._imefirsttxt = this._text;

						var begin_pos = (!pos || pos == -1) ? 0 : pos.begin - 1;
						this._set_input_begin_pos(begin_pos);

						var data = this.getCompositionData(elem);
						this._on_input_compositionstart(data);
					}
					else {
						var data = this.getCompositionData(elem);
						var diff = this._begin_pos - this._input_begin_pos;

						if (diff != 1) {
							data = this._stat_composition.getData();
						}

						if (data.length <= 1) {
							if (data == "") {
								return false;
							}
						}

						if (this._compositionend_value && (this._compositionend_value.length < elem_value.length)) {
							var insertText = data.substr(0, 1);
							var newData_len = data.length - 1;

							if (diff == 1) {
								var composition_front = elem_value.substr(0, this._begin_pos);
								var composition_rear = elem_value.substr(this._begin_pos + newData_len, elem_value.length - 1);
								this._compositionend_value = composition_front + composition_rear;
							}

							this._on_input_compositionend(insertText);

							var ret = this._fire_text_event(insertText);
							data = data.substr(1, data.length - 1);

							if (diff != 1) {
								var begin = pos.end - 1;
								data = elem_value.slice(begin, begin + 1);
								this.setElementCaretPos(begin, begin);
							}

							if (data.length > 0) {
								this._imefirsttxt = this._compositionend_value;
								this._on_input_compositionstart(data);
								if (this._is_hangul(data)) {
									var strFront = this._text.substr(0, this._begin_pos);
									var strRear = this._text.substr(this._end_pos, this._text.length);
									var newText = strFront + data + strRear;
									this._compositionstart_value = data;

									this._setText(newText);
									elem.setElementValue(newText);
									elem.text = strFront + newText;
									this.setElementCaretPos(this._begin_pos + 1, this._begin_pos + 1, elem);
								}
							}
						}
						else {
							this._on_input_compositionupdate(data);
						}
					}
				}
				else if (this._is_composition() && this._charcode == 0 && (((major_ver == 10 && minor_ver >= 3) || (major_ver >= 11 && major_ver <= 12) || (major_ver >= 13 && pos.begin == pos.end && pos.end == this._end_pos)))) {
					if (this.getCompositionData(elem) == "") {
						this.setElementCaretPos(pos.end, pos.end, elem);
						this._old_begin_pos = pos.begin;
						this._old_end_pos = pos.begin;
					}

					var data = this.getCompositionData(elem);

					if (this._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionUpdate) {
						if (this._stat_composition._prev_stat == nexacro.EditBase.Status.CompositionStart) {
							if (this._is_ios_composition_touch) {
								this._is_ios_composition_touch = false;
								elem.setElementValue(this._text);
								this.setElementCaretPos(this._old_end_pos, this._old_end_pos, elem);
								return false;
							}
						}

						if (this._stat_composition._prev_stat == nexacro.EditBase.Status.None) {
							if (this._is_ios_composition_touch) {
								if (data == "") {
									data = this._stat_composition.getData();
									this._set_input_begin_pos(pos.begin);
								}
							}
							else {
								if (data != "" && data != this._stat_composition.getData()) {
									var begin = this._input_begin_pos - (this._stat_composition.getData().length - data.length);
									data = this._stat_composition.getData();
									this._set_input_begin_pos(begin);
									this._old_begin_pos = begin;
									this._old_end_pos = begin;
									begin = null;
								}
							}
						}
					}

					if (major_ver >= 13 && data == "" && elem._keypad_type == "number") {
						data = this._stat_composition.getData();
					}

					this._on_input_compositionend(data);

					if (this._filteredtext && comp.displaynulltext != "" && pos.begin != pos.end && this._text != elem_value) {
						elem.setElementValue(this._text);
						var begin = pos.begin + this._text.length - this._textEventInfo.prechareventtext.length;
						this.setElementCaretPos(begin, begin, elem);
						elem._is_ios_composition = false;
						return false;
					}

					if (major_ver >= 13) {
						this._old_begin_pos = this._input_begin_pos;
						this._old_end_pos = this._input_begin_pos;
					}

					elem._is_ios_composition = false;
				}
				else {
					var data = this._stat_composition.getData(elem);
					if (this._is_composition() && this._is_hangul(data) && this._keycode != 8) {
						this._on_input_compositionend(data);
					}

					if (this._is_composition() && this._keycode != 8 && this._charcode == 0 && !((major_ver >= 10 && minor_ver >= 3) || major_ver >= 11)) {
						if (this.getCompositionData(elem) == "") {
							return false;
						}
					}

					if (!this._is_ios_paste_composition && !this._pasteAction) {
						if (this._filteredtext && this._stat_composition.getPreviousStatus() == nexacro.EditBase.Status.CompositionUpdate && !this._is_hangul(data) && base_text != elem_value) {
							elem.setElementValue(this._text);
							this.setElementCaretPos(pos.end - data.length, pos.end - data.length, elem);
							return false;
						}

						if (!this._is_composition() && !this._is_hangul(data) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd) {
							this._old_begin_pos = pos.end - data.length;
							this._old_end_pos = pos.end - data.length;
						}
					}

					if (major_ver >= 13 && this._is_composition() && this._charcode !== nexacro.Event.KEY_BACKSPACE) {
						if (pos.begin == pos.end) {
							if (pos.end != this._end_pos && pos.end == this._input_begin_pos && this._text != elem_value) {
								return false;
							}

							if (this._filteredtext && this._stat_composition.getPreviousStatus() == nexacro.EditBase.Status.None && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate) {
								if (data !== "") {
									this._on_input_compositionend(data);
								}
							}
						}
						else {
							if (pos.end == this._end_pos && elem_value == this._text) {
								return false;
							}
						}
					}
				}

				var insertText = this.getInsertText(elem);

				if (this._is_ios_paste_composition) {
					var begin = this._input_begin_pos;
					var pThis = this;

					if (!this._filteredtext) {
						begin += (this._textEventInfo.chartext.length - this._stat_composition.getPreviousData().length);
					}

					elem.setElementValue(base_text);
					nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
						pThis.setElementCaretPos(begin, begin, elem);
					});
					this._is_ios_paste_composition = false;
					this._compositionend_value = "";
					this._stat_composition.init();
					return false;
				}

				if (this._pasteAction) {
					if (major_ver >= 13 && insertText != this._clipdata) {
						insertText = this._clipdata;
						var newText = elem_value.slice(0, this._input_begin_pos) + insertText + elem_value.slice(pos.end);
						var begin = this._input_begin_pos + insertText.length;
						this._text = newText;
						elem.setElementValue(newText);
						this.setElementCaretPos(begin, begin, elem);
						this._set_input_begin_pos(begin - insertText.length);
					}

					if (this._stat_composition.getPreviousStatus() == nexacro.EditBase.Status.CompositionUpdate) {
						var prev_data = this._stat_composition.getPreviousData();

						if (!this._is_hangul(prev_data)) {
							this._accept_blur_event = false;
							this._accept_focus_event = false;
							elem.setElementBlur();
							elem.setElementFocus();
							this._accept_blur_event = true;
							this._accept_focus_event = true;

							insertText = prev_data + insertText;

							this.setElementCaretPos(pos.end, pos.end);
							this._set_input_begin_pos(pos.end - insertText.length);
							this._old_begin_pos = this._input_begin_pos;
							this._old_end_pos = this._input_begin_pos;

							this._is_ios_paste_composition = true;
						}
					}
				}

				var ret = this._fire_text_event(insertText);

				this._compositionend_value = elem_value;

				if (!this._is_composition()) {
					if (major_ver >= 13 && elem._is_ios_composition_returned) {
						elem._is_ios_composition_returned = false;
						elem._on_sys_blur(elem._input_handle);
					}

					this._compositionend_value = "";
					this._stat_composition.init();
				}

				this.onUpdateStyle(comp);
				return ret;
			};
		}
	}
	else if (nexacro.Browser == "IE" && (nexacro.BrowserVersion == 11 || (nexacro.BrowserType == "IE10" && nexacro._getRealBrowserVersion() == 11))) {
		_pEditBase._on_default_input_keyinput = function (elem) {
			var mouse_stat = this._stat_mouse.getCurrentStatus();
			if (mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition() && this._pasteAction)) {
				elem.setElementValue(this._value);
				return false;
			}

			if (this._accept_keyinput_event === false) {
				this._accept_keyinput_event = true;
				return false;
			}

			if (elem.readonly) {
				elem.setElementValue(this._value);
				return false;
			}
			if (!this.comp) {
				return false;
			}

			var comp = this.comp;
			var elem_value = elem.getElementValue();
			var elem_pos = elem.getElementCaretPos();
			var editbase_text = this._text;
			var editbase_value = this._value;

			if (!editbase_text) {
				editbase_text = "";
			}
			if (!editbase_value) {
				editbase_value = "";
			}

			if (!this._is_composition() && elem_value == editbase_text && elem_value == editbase_value && (elem_value == "" || elem_value && (comp.maxlength == 0 || comp.maxlength >= this.getLength(elem, editbase_text)))) {
				this._setCaret(elem);
				this.onUpdateStyle(comp);

				if (elem.password && elem.maxlength > 0 && comp.autoskip) {
					this._autoskip_from_text_event();
				}

				return false;
			}

			this._old_old_text = this._old_text;
			this._old_old_value = this._old_value;
			this._old_text = this._text;
			this._old_value = this._value;
			this._old_begin_pos = this._begin_pos;
			this._old_end_pos = this._end_pos;

			if (this._is_selected()) {
				if (this._is_composition() || elem_pos.begin != elem_pos.end || this._input_begin_pos != elem_pos.begin) {
					this.clearBuffer(this._text, this._begin_pos, this._end_pos);
					this.syncValue();
					this._begin_pos = this._old_begin_pos;
					this._end_pos = this._old_end_pos;
				}
			}

			var insertText = this.getInsertText(elem);
			var diff = elem_value.length - this._text.length;

			if (this._text.length == elem_value.length && this._text != elem_value) {
				var replaceText = elem_value.substr(this._begin_pos, elem_pos.begin - this._begin_pos);
				if (replaceText.length > 0) {
					var temp = replaceText;

					replaceText = this.applyInputmode(replaceText);

					if (comp.inputmode == "lower") {
						if (replaceText == temp.toLowerCase()) {
							replaceText = temp;
						}
					}
					else if (comp.inputmode == "upper") {
						if (replaceText == temp.toUpperCase()) {
							replaceText = temp;
						}
					}

					replaceText = this._apply_inputfilter(replaceText);

					replaceText = this._apply_inputtype(replaceText);
					if (replaceText == "") {
						this._is_insertkey = true;
						insertText = temp;
					}
					else {
						if (!this._is_selected()) {
							this.clearBuffer(this._text, this._begin_pos, this._begin_pos + 1);
							this.syncValue();
						}
						insertText = replaceText;
					}
				}
			}

			if (this._bInsert) {
				this._bInsert = false;
			}

			if (this._is_hangul(insertText) && (diff > insertText.length || insertText.length > 1)) {
				var insertTextlen = insertText.length;
				this._set_input_begin_pos(this._input_begin_pos - (diff - insertTextlen));
				if (this._input_begin_pos < 0) {
					this._set_input_begin_pos(0);
					this._text = this._old_text;
					this._old_text = this._old_old_text;
					this._old_value = this._old_old_value;
					this.clearBuffer(this._text, this._begin_pos, this._end_pos);
					this.syncValue();
					if (diff > 1) {
						diff -= 1;
					}
				}
				insertText = elem_value.substr(this._input_begin_pos, diff);


				if (this._is_multi_inserttext) {
					this._multi_inserttext = insertText;
				}
				else {
					this._is_multi_inserttext = true;
				}
			}

			var ret = this._fire_text_event(insertText);
			if (!this._is_composition()) {
				this._stat_composition.init();
			}

			if (this._do_set_caret) {
				this._setCaret(elem);
				this._do_set_caret = false;
			}
			this.onUpdateStyle(comp);
			return ret;
		};
	}
	else {
		_pEditBase._on_default_input_keyinput = function (elem) {
			var mouse_stat = this._stat_mouse.getCurrentStatus();
			if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
				mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
				elem.setElementValue(this._value);
				return false;
			}

			if (this._accept_keyinput_event === false) {
				this._accept_keyinput_event = true;
				return false;
			}

			if (elem.readonly) {
				return false;
			}
			if (!this.comp) {
				return false;
			}

			var comp = this.comp;
			var elem_value = elem.getElementValue();
			var elem_pos = elem.getElementCaretPos();
			var editbase_text = this._text;
			var editbase_value = this._value;

			if (!editbase_text) {
				editbase_text = "";
			}
			if (!editbase_value) {
				editbase_value = "";
			}

			if (!this._is_composition() && elem_value == editbase_text && elem_value == editbase_value && (elem_value == "" || (elem_value && (comp.maxlength == 0 || comp.maxlength >= this.getLength(elem, editbase_text))))) {
				this._setCaret(elem);
				this.onUpdateStyle(comp);

				if (elem.password && elem.maxlength > 0 && comp.autoskip) {
					this._autoskip_from_text_event();
				}

				return false;
			}

			this._old_text = this._text;
			if (this._old_value != this._value) {
				this._old_value = this._value;
			}
			this._old_begin_pos = this._begin_pos;
			this._old_end_pos = this._end_pos;

			if (this._is_selected()) {
				if (this._is_composition() || elem_pos.begin != elem_pos.end || this._input_begin_pos != elem_pos.begin) {
					this.clearBuffer(this._text, this._begin_pos, this._end_pos);
					this.syncValue();
					this._begin_pos = this._old_begin_pos;
					this._end_pos = this._old_end_pos;
				}
			}

			var insertText = this.getInsertText(elem);

			if (nexacro.Browser == "Runtime") {
				if (this._text.length == elem_value.length && this._text != elem_value) {
					var replaceText = elem_value.substr(this._begin_pos, elem_pos.begin - this._begin_pos);
					if (replaceText.length > 0) {
						var temp = replaceText;

						replaceText = this.applyInputmode(replaceText);

						if (comp.inputmode == "lower") {
							if (replaceText == temp.toLowerCase()) {
								replaceText = temp;
							}
						}
						else if (comp.inputmode == "upper") {
							if (replaceText == temp.toUpperCase()) {
								replaceText = temp;
							}
						}
						replaceText = this._apply_inputfilter(replaceText);

						replaceText = this._apply_inputtype(replaceText);
						if (replaceText == "") {
							this._is_insertkey = true;
							insertText = temp;
						}
						else {
							if (!this._is_selected()) {
								this.clearBuffer(this._text, this._begin_pos, this._begin_pos + 1);
								this.syncValue();
							}
							insertText = replaceText;
						}
					}
				}
			}

			if (nexacro.OS == "Android" && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit"))) {
				if (comp.maxlength > 0 && this._select_text == "" && this._focus_value && this._focus_value.length >= comp.maxlength) {
					var input_text = elem_value.substr(elem_pos.end - 1, elem_value.length - this._text.length);

					if (this._is_composition()) {
						if (this._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionUpdate) {
							var compositiondata = this._stat_composition._curr_data;

							if (this._is_hangul(compositiondata)) {
								this._input_begin_pos = this._mobile_elme_pos = elem_pos.begin;
								insertText = input_text;
							}
							else if (this._is_full_japaness(compositiondata) || this._is_half_japaness(compositiondata)) {
								if (elem_pos.begin != this._begin_pos) {
									insertText = input_text;
									this.setElementCaretPos(elem_pos.begin, elem_pos.begin);
									this._input_begin_pos = this._mobile_elme_pos = elem_pos.begin;
								}
							}

							if (!this._is_hangul(compositiondata) && !this._is_half_japaness(compositiondata) && !this._is_full_japaness(compositiondata)) {
								var _lg_flag = window.navigator.appVersion.indexOf("LG");

								if (_lg_flag < 0) {
									elem.setElementValue(null);
									elem.setElementValue(this._text);
									this.setElementCaretPos(this._mobile_elme_pos, this._mobile_elme_pos, elem);
								}
								_lg_flag = null;
							}

							if (!this._is_half_japaness(compositiondata) && !this._is_full_japaness(compositiondata)) {
								this._is_mobile_drag = true;
							}
						}
					}
					else {
						if (!this._pasteAction) {
							var begin_pos = elem_pos.begin - 1 < 0 ? 0 : elem_pos.begin - 1;
							this._input_begin_pos = this._mobile_elme_pos = begin_pos;
							this._is_mobile_drag = true;
						}
					}
					input_text = null;
				}
			}

			if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "Runtime") {
				if (this._is_composition() && this._keycode == nexacro.KeyCode_ImeInput && this._stat_composition.getPreviousStatus() == nexacro.EditBase.Status.CompositionUpdate) {
					if (this._old_text == this._text && this._old_text == elem_value) {
						return false;
					}
				}
			}

			var ret = this._fire_text_event(insertText);
			if (!this._is_composition()) {
				this._stat_composition.init();
			}

			if (nexacro.BrowserType == "Edge") {
				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}
				if (this._keycode != nexacro.KeyCode_ImeInput && this._text.length < 500) {
					this.onUpdateStyle(comp);
				}
			}
			else {
				this.onUpdateStyle(comp);
			}

			return ret;
		};
	}

	_pEditBase._on_input_keyinput_after = function () {
		if (this._isPasteActionComplete) {
			this._pasteAction = false;
			this._cutAction = false;
		}
	};

	_pEditBase._on_default_input_copy = function (elem) {
	};

	_pEditBase._on_default_input_cut = function (elem) {
		this._cutAction = true;

		var pos = elem.getElementCaretPos();
		var val = elem.getElementValue();

		if (!pos || pos == -1) {
			this._undoStack.push(val, val, 0, 0);
		}
		else {
			this._begin_pos = pos.begin;
			this._end_pos = pos.end;
			this._undoStack.push(val, val, pos.begin, pos.end);
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				pThis._on_input_keyinput(elem);
			});
		}
	};

	_pEditBase._on_default_input_paste = function (elem) {
		this._pasteAction = true;

		var pos = elem.getElementCaretPos();
		var val = elem.getElementValue();

		if (nexacro.Browser == "IE" && this._is_composition()) {
			var pos1 = pos.begin;
			pos1 = pos1 - this.getCompositionData(elem).length;
			if (pos1 < 0) {
				pos1 = 0;
			}

			this._begin_pos = pos1;
		}

		if (!pos || pos == -1) {
			this._undoStack.push(val, val, 0, 0);
		}
		else {
			this._undoStack.push(val, val, pos.begin, pos.end);
		}

		if (nexacro.OS == "iOS") {
			if (elem._is_ios_composition) {
				elem._is_ios_composition = false;
			}
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			this._set_input_begin_pos(pos.begin);
		}
		else if (nexacro.Browser == "IE") {
			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

				this._accept_focus_event = false;
				this._accept_blur_event = false;

				elem.setElementBlur();
				elem.setElementFocus();
			}

			if (this._check_maxlength && !this._check_maxlength() && !this._select_text) {
				elem.setElementValue(this._value);
				this._set_input_begin_pos(pos.begin);
			}
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				if (!(pThis._ctrlkey && pThis._keycode == 86)) {
					pThis.setElementCaretPos(pThis._old_begin_pos, pThis._old_begin_pos);
				}

				pThis._on_input_keyinput(elem);
			});
		}
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
		_pEditBase._on_default_input_compositionstart = function (data) {
			var elem = this.comp._input_element;
			var val = elem.getElementValue();

			if (data == "" || this._is_hangul(data)) {
				if (this._compositionstart_value.length != val.length) {
					if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate) {
						var compositionend_char = val.substr(this._input_begin_pos, 1);


						this._is_multi_inserttext = false;
						this._on_default_input_compositionend(compositionend_char);
					}
				}
			}

			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionStart, data);
		};
	}
	else if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
		_pEditBase._on_default_input_compositionstart = function (data) {
			this._compositionstart_value = this._text;
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionStart, data);
		};
	}
	else if (nexacro.Browser == "Safari") {
		_pEditBase._on_default_input_compositionstart = function (data) {
			if (this._is_compositionfocus) {
				var elem = this.comp._input_element;

				this._is_compositionfocus = false;
				this._accept_focus_event = false;
				this._accept_blur_event = false;

				elem.setElementBlur();
				elem.setElementFocus();
			}

			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionStart, data);
		};
	}
	else if (nexacro.OS == "Android") {
		_pEditBase._on_default_input_compositionstart = function (data) {
			if (this._keycode == 0) {
				this._set_input_begin_pos(this.comp._input_element.getElementCaretPos().begin);
			}
			else {
				this._set_input_begin_pos(this._begin_pos);
			}
			this._compositionstart_value = this._text;
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionStart, data);
		};
	}
	else {
		_pEditBase._on_default_input_compositionstart = function (data) {
			var ver_arr = nexacro.OSVersion.split(".");
			var major_ver = ver_arr[0], input_element = this.comp._input_element;
			if (nexacro.OS == "iOS" && major_ver >= 13 && input_element && input_element._is_keydown === false) {
				if (this._setElementValue) {
					this._setElementValue(input_element, this._begin_pos, this._end_pos, true);
				}
				this._stat_composition.init();

				input_element._is_ios_composition = false;

				return;
			}
			this._set_input_begin_pos(this._begin_pos);
			this._compositionstart_value = this._text;
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionStart, data);
		};
	}

	if (nexacro.BrowserType == "Edge") {
		_pEditBase._on_default_input_compositionupdate = function (data) {
			var elem = this.comp._input_element;
			var val = elem.getElementValue();
			var pos = elem.getElementCaretPos();

			if (data == "" || this._is_hangul(data)) {
				this._bInsert = true;

				if (data.length > 1) {
					var compositiondata = "";
					var len = data.length;
					for (var i = 0; i < len; i++) {
						if (!this._is_hangul(data[i])) {
							break;
						}
						compositiondata += data[i];
					}

					if (compositiondata.length > 0 || (compositiondata.length == 0 && data.length > 10)) {
						data = compositiondata;
					}

					compositiondata = null;
					len = null;
				}

				if (this._compositionstart_value.length != val.length) {
					if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate) {
						this._on_default_input_compositionstart(data);
					}
				}

				if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionStart) {
					this._compositionstart_value = val;
				}
			}

			if (this._is_nipon(data)) {
				if (this._isJapaneseReComposition()) {
					var begin_pos = pos.begin - data.length;
					var old_strFront = this._text.substr(0, begin_pos);
					var old_strRear = this._text.substr(this._old_begin_pos, this._text.length);
					var strFront = val.substr(0, begin_pos);
					var strRear = val.substr(pos.begin, val.length);

					if (old_strRear != strRear) {
						old_strRear = strRear;
					}

					if (old_strFront == strFront && old_strRear == strRear) {
						var old_data = this._text.substr(begin_pos, this._text.length - old_strRear.length);

						if (old_data != data) {
							this._setValue(strFront + strRear);
							this._input_begin_pos = pos.begin - data.length;
						}
						else {
							if (this._text == val && pos.begin != this._input_begin_pos) {
								this._input_begin_pos = pos.begin;
							}
						}
					}
				}
			}

			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionUpdate, data);
		};
	}
	else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
		_pEditBase._on_default_input_compositionupdate = function (data) {
			var elem = this.comp._input_element;
			var val = elem.getElementValue();
			var pos = elem.getElementCaretPos();

			if (data == "" || this._is_hangul(data)) {
				this._bInsert = true;
				if (this._compositionstart_value.length != val.length) {
					if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate) {
						this._on_default_input_compositionstart(data);
					}
				}

				if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionStart) {
					this._compositionstart_value = val;
				}
			}

			if (this._isJapaneseReComposition()) {
				if (this._begin_pos == this._end_pos) {
					this._input_begin_pos = pos.begin - data.length;

					if (this.comp.maxlength > 0) {
						var strFront = this._text.substr(0, this._input_begin_pos);
						var strRear = this._text.substr(pos.begin, this._text.length);
						var value = strFront + strRear;
						this._setValue(value);

						strFront = strRear = value = null;
					}
				}
			}

			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionUpdate, data);
		};
	}
	else if (nexacro.Browser == "Safari") {
		_pEditBase._on_default_input_compositionupdate = function (data) {
			if (this._is_compositionfocus) {
				var elem = this.comp._input_element;

				this._is_compositionfocus = false;
				this._accept_focus_event = false;
				this._accept_blur_event = false;

				elem.setElementBlur();
				elem.setElementFocus();
			}

			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionUpdate, data);
		};
	}
	else if (nexacro.Browser == "Gecko") {
		_pEditBase._on_default_input_compositionupdate = function (data) {
			this._precharcode = this._charcode;

			if (this._isJapaneseReComposition()) {
				var elem = this.comp._input_element;
				var pos = elem.getElementCaretPos();

				this._input_begin_pos = pos.begin;
				this._begin_pos = pos.begin;
				elem = pos = null;
			}

			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionUpdate, data);
		};
	}
	else if (nexacro.OS == "Android") {
		_pEditBase._on_default_input_compositionupdate = function (data) {
			this._precharcode = this._charcode;
			if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionStart) {
				var elem = this.comp._input_element;
				var pos = elem.getElementCaretPos();

				if (pos.begin == pos.end && pos.begin == this._input_begin_pos) {
					if (this._text == this._value && elem.getElementValue() == this._value) {
						var begin = pos.begin - data.length >= 0 ? pos.begin - data.length : 0;
						var end = pos.end;
						if (data == this._value.slice(begin, end)) {
							this._set_input_begin_pos(begin);
							var front_val = this._value.slice(0, begin);
							var rear_val = this._value.slice(end);
							this._setValue(front_val + rear_val);
						}
					}
				}
			}
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionUpdate, data);
		};
	}
	else {
		_pEditBase._on_default_input_compositionupdate = function (data) {
			var ver_arr = nexacro.OSVersion.split(".");
			var major_ver = ver_arr[0];
			if (nexacro.OS == "iOS" && major_ver >= 13 && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.None) {
				return;
			}
			this._precharcode = this._charcode;
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionUpdate, data);
		};
	}

	if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && (nexacro.BrowserVersion == 11 || (nexacro.BrowserType == "IE10" && nexacro._getRealBrowserVersion() == 11)))) {
		_pEditBase._on_default_input_compositionend = function (data) {
			this._compositionstart_value = "";
			if (nexacro.BrowserType == "Edge" && data.length > 1) {
				var compositiondata = "";
				var len = data.length;
				for (var i = 0; i < len; i++) {
					if (!this._is_hangul(data[i])) {
						break;
					}
					compositiondata += data[i];
				}

				if (compositiondata.length > 0 || (compositiondata.length == 0 && data.length > 10)) {
					data = compositiondata;
				}

				compositiondata = null;
				len = null;
			}
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, data);

			if (this._bStatChangeOnly) {
				return;
			}

			var elem = this.comp._input_element;
			var val = elem.getElementValue();
			var pos = elem.getElementCaretPos();
			var pThis = this;

			if (nexacro.BrowserType == "Edge") {
				if (this._value == val) {
					return;
				}
			}

			var front_val = val.substr(0, this._input_begin_pos);

			if (this._multi_inserttext) {
				data = this._multi_inserttext;
			}

			var data_len = data ? data.length : 1;
			var input_val = val.substr(this._input_begin_pos, data_len);
			var rear_val = val.substr(pos.end, val.length - pos.end);
			var newText = front_val + input_val + rear_val;

			if ((nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) && this._multi_inserttext) {
				this._compositionend_newtext = newText;
				this._multi_inserttext = "";
			}

			if (data == "" || this._is_hangul(data)) {
				if (this._stat_mouse.getCurrentStatus() != nexacro.EditBase.Status.MouseDown && this._bInsert) {
					this._accept_keyinput_event = false;
				}

				if (this._accept_keyinput_event) {
					if (!this._is_on_killfocus) {
						if (input_val == "") {
							newText = val;
						}
						else {
							if (this._stat_composition._prev_data != "" && this._stat_composition._curr_data == "") {
								newText = val;
								input_val = "";
							}
						}
					}

					this._fire_text_event(input_val);

					if (this._textEventInfo.chartext != input_val) {
						newText = front_val + this._textEventInfo.chartext + rear_val;
					}

					this._text = newText;
					this._value = newText;
					this._compositionend_newtext = "";
					return true;
				}
				else {
					this._accept_keyinput_event = true;
				}
			}

			this._compositionend_newtext = "";
		};
	}
	else if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion >= 53) {
		_pEditBase._on_default_input_compositionend = function (data) {
			this._compositionstart_value = "";
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, data);

			if (this._bStatChangeOnly) {
				return;
			}

			var elem = this.comp._input_element;
			var val = elem.getElementValue();
			var pos = elem.getElementCaretPos();
			var pThis = this;

			var front_val = val.substr(0, this._input_begin_pos);
			var input_val = val.substr(this._input_begin_pos, data.length);
			var rear_val = val.substr(pos.end, val.length - pos.end);
			var newText = front_val + input_val + rear_val;

			if (this._accept_keyinput_event) {
				var prev_data = this._stat_composition.getPreviousData();
				if (data != "" && data != prev_data && this._is_hangul(prev_data)) {
					input_val = prev_data;
				}

				if (this._old_value != this._value) {
					this._old_value = this._value;
				}

				this._fire_text_event(input_val);
				return true;
			}
			else {
				this._accept_keyinput_event = true;
			}
		};
	}
	else if (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari") {
		var BrowserVersion = window.navigator.appVersion.split('Version/')[1];
		BrowserVersion = BrowserVersion.split(' ')[0];
		var major_ver = BrowserVersion.split('.');

		if (major_ver[0] >= 10 && major_ver[1] > 0 || major_ver[0] >= 11) {
			_pEditBase._on_default_input_compositionend = function (data) {
				this._compositionstart_value = "";
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, data);

				if (this._bStatChangeOnly) {
					return;
				}

				var elem = this.comp._input_element;
				var val = elem.getElementValue();
				var pos = elem.getElementCaretPos();
				var pThis = this;

				var front_val = val.substr(0, this._input_begin_pos);
				var input_val = val.substr(this._input_begin_pos, data.length);
				var rear_val = val.substr(pos.end, val.length - pos.end);
				var newText = front_val + input_val + rear_val;

				if (this._accept_keyinput_event) {
					if (this._is_hangul(data)) {
						input_val = data;
					}
					this._fire_text_event(input_val);
					return true;
				}
				else {
					this._accept_keyinput_event = true;
				}
			};
		}
		else {
			_pEditBase._on_default_input_compositionend = function (data) {
				this._precharcode = 0;
				this._compositionstart_value = "";
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, data);
			};
		}
		BrowserVersion = major_ver = null;
	}
	else if (nexacro._isDesktop() && nexacro.Browser == "Safari") {
		_pEditBase._on_default_input_compositionend = function (data) {
			this._precharcode = 0;
			this._compositionstart_value = "";
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, data);

			if (this._is_compositionfocus) {
				var elem = this.comp._input_element;

				this._is_compositionfocus = false;
				this._accept_focus_event = false;
				this._accept_blur_event = false;

				elem.setElementBlur();
				elem.setElementFocus();
				this._stat_composition.init();
			}
		};
	}
	else {
		_pEditBase._on_default_input_compositionend = function (data) {
			this._precharcode = 0;
			this._compositionstart_value = "";
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, data);
		};
	}

	_pEditBase._fire_text_event = function (chartext) {
		var ret = true;
		var bInsert = true;
		var bCut = false;
		var bCancel = false;
		var bFilled = false;

		var comp = this.comp;
		var elem = comp._input_element;

		var text = this._cutAction ? this._old_text : this._text;


		var value = this._value;
		var autoskip = comp.autoskip;
		var text_info = this._textEventInfo;
		var newText = this._get_newText_from_text_event(chartext);

		if (!text) {
			text = "";
		}

		var begin_pos = this._input_begin_pos;
		var end_pos = begin_pos + chartext.length;
		var old_chartext = chartext;
		var evt_chartext = chartext;

		if (this._is_insertkey) {
			this._is_insertkey = false;
			newText = this._text;
			end_pos = this._end_pos;
		}

		var strFront = newText.substr(0, begin_pos);
		var strRear = newText.substr(end_pos, newText.length - end_pos);
		var preImeText = this._stat_composition.getPreviousData();
		var postImeText = this._stat_composition.getData();
		var preCharEventText = strFront + this._select_text + strRear;

		bFilled = this._check_maxlength();
		this._initinfo_from_text_event(chartext, newText, begin_pos, end_pos);

		if (this._check_filterable(chartext)) {
			chartext = this.applyInputmode(chartext);
			chartext = this._apply_inputfilter(chartext);
			chartext = this._apply_inputtype(chartext);
			if (old_chartext.length > 0 && chartext.length == 0) {
				bCancel = true;
				chartext = this._select_text;
			}

			this._select_text = "";

			if (!bCancel) {
				bInsert = this._check_maxlength_from_text_event(chartext);
				if (!bInsert) {
					chartext = "";
					newText = comp.text;
				}
				else {
					chartext = this._apply_maxlength_from_text_event(chartext);

					if (chartext != old_chartext) {
						bCut = true;
					}
				}
			}

			if (bInsert) {
				this._accept_text_changed_status = 0;
			}

			newText = strFront + chartext + strRear;
			var newTextlen = this.getLength(elem, newText, false, null, comp.lengthunit);
			if (comp.maxlength > 0 && newTextlen > comp.maxlength) {
				var strlen = newText.length;
				while (strlen > 0) {
					var curTxt = newText.slice(0, strlen--);
					var ret = this.getLength(null, curTxt, false, null, comp.lengthunit);
					if (ret <= comp.maxlength) {
						newText = curTxt;
						break;
					}
				}
			}
		}

		ret = this._after_filterprocess_from_text_event(chartext, newText, bInsert, bCut);

		if (this._is_composition()) {
			evt_chartext = "";
		}

		text_info.setTextInfo(evt_chartext, text, ret.newText, preImeText, postImeText, preCharEventText, ret.bInsert, ret.bCut);

		if (!bCancel) {
			ret = comp._on_fire_textchangeEventSet(text_info);

			if (ret.bTextchangeRet) {
				if (ret.fireCancharEvent) {
					if (ret.bCancahrchangeRet && ret.bOncharRet) {
						this._setValue(text_info.posttext);
						this.syncValue();

						if (!this._is_undo) {
							var undo_pos = begin_pos + chartext.length;
							this._undoStack.push(this._value, this._value, undo_pos, undo_pos);
						}
					}
					else {
						if (this._is_hangul(chartext)) {
							this._cancel_event_char_from_text_event(begin_pos, begin_pos);
						}
						else {
							this._setText(this._old_value);
							this._setValue(this._old_value);
							this.syncValue();

							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);
						}

						return ret;
					}
				}

				if (text_info.pretext != text_info.posttext || this._accept_text_changed_status == 1) {
					this._setText(text_info.posttext);
					this.syncValue();

					if (ret.bChangeInputValue) {
						elem.setElementValue(text_info.posttext);
					}

					comp.on_fire_ontextchanged(comp, this._old_text, this._text);
					if (this._accept_text_changed_status == 1) {
						this._accept_text_changed_status = 2;
					}

					if (comp._is_set_value) {
						this._updateEventInfo(text_info);
						comp._is_set_value = false;
					}
				}

				if (bFilled != this._check_maxlength() && bInsert && !this._pasteAction && this._is_hangul(chartext) && nexacro.Browser != "Runtime") {
					this._accept_text_changed_status = 1;
				}

				if (evt_chartext != text_info.chartext) {
					if (comp._setcaret) {
						begin_pos = this._begin_pos;
					}
					else {
						begin_pos += text_info.chartext.length;
					}
					elem.setElementValue(text_info.posttext);
					this.setElementCaretPos(begin_pos, begin_pos, elem);
				}
				else {
					if (comp._setcaret) {
						begin_pos = this._begin_pos;
					}
					else {
						begin_pos += chartext.length;
					}
					this._after_eventset_fired_from_text_event(begin_pos);
				}
			}
			else {
				this._cancel_event_textchange_from_text_event(begin_pos, end_pos);
			}
		}

		if (!ret.bInsert) {
			this._not_insert_from_text_event(begin_pos, end_pos);
		}

		if (ret.bCut) {
			this._cut_from_text_event(begin_pos, end_pos);
		}

		if (bCancel) {
			this._cancel_from_text_event(newText, begin_pos, end_pos);
		}

		if (autoskip && !bCancel) {
			this._autoskip_from_text_event(old_chartext);
		}

		return ret;
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		if (nexacro.OSVersion >= 6.0) {
			if (nexacro.SystemLang == "ja") {
				if (nexacro.BrowserVersion >= 9) {
					_pEditBase._get_newText_from_text_event = function (chartext) {
						var elem = this.comp._input_element;

						if (this._is_hangul(chartext) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
							var newText = this._compositionend_value;
						}
						else {
							var newText = elem.getElementValue();
						}

						return newText;
					};

					_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

					_pEditBase._check_maxlength_from_text_event = function (chartext) {
						return this._check_maxlength();
					};

					_pEditBase._apply_maxlength_from_text_event = function (chartext) {
						return this._apply_maxlength(chartext);
					};

					_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
						return {
							newText : newText, 
							bInsert : bInsert, 
							bCut : bCut
						};
					};

					_pEditBase._after_eventset_fired_from_text_event = function (pos) {
						this.setElementCaretPos(pos, pos);
					};

					_pEditBase._cancel_event_char_from_text_event = nexacro._emptyFn;

					_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
						var elem = this.comp._input_element;

						this._setText(this._old_text);
						this._setValue(this._old_value);
						this.syncValue();

						if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
						if (!this._is_selected()) {
							this._select_text = "";
						}
					};

					_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						if (!this._is_on_killfocus) {
							if (!this._set_timer_by_killfocus) {
								this._accept_keyinput_event = false;
								this._accept_focus_event = false;
								this._accept_blur_event = false;

								elem.setElementBlur();
								if (!this._is_on_killfocus) {
									elem.setElementFocus();
								}

								this._accept_keyinput_event = false;
							}

							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);

							this._accept_keyinput_event = true;
							this._accept_focus_event = true;
							this._accept_blur_event = true;
						}
						else {
							this._set_timer_by_killfocus = true;

							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								elem.setElementValue(pThis._text);
								pThis._set_timer_by_killfocus = false;
							});
						}
					};

					_pEditBase._cut_from_text_event = function (begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						this._setText(this._text);
						this._setValue(this._text);
						this.syncValue();

						if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

							elem.setElementBlur();
							elem.setElementFocus();
						}

						if (this._pasteAction && (nexacro.BrowserVersion == 9 || nexacro.BrowserVersion == 10)) {
							elem.setElementValue(this._text);
							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								pThis.setElementCaretPos(begin_pos, begin_pos, elem);
							});
						}
						else {
							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);
						}
					};

					_pEditBase._cancel_from_text_event = function (newText, begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						this._setText(newText);
						this._setValue(newText);
						this.syncValue();

						if (!this._is_on_killfocus) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							if (this._is_composition()) {
								elem.setElementBlur();
								elem.setElementFocus();
							}

							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);

							this._accept_keyinput_event = true;
							this._accept_focus_event = true;
							this._accept_blur_event = true;
						}
						else {
							elem.setElementValue(this._text);
						}
					};

					_pEditBase._autoskip_from_text_event = function (chartext) {
						var bFilled = this._check_maxlength();
						if (!bFilled) {
							this._apply_autoskip();
						}
					};
				}
				else {
					_pEditBase._get_newText_from_text_event = function (chartext) {
						var elem = this.comp._input_element;

						if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
							var newText = this._compositionend_value;
						}
						else {
							var newText = elem.getElementValue();
						}

						return newText;
					};

					_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

					_pEditBase._check_maxlength_from_text_event = function (chartext) {
						return this._check_maxlength();
					};

					_pEditBase._apply_maxlength_from_text_event = function (chartext) {
						return this._apply_maxlength(chartext);
					};

					_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
						if (!chartext && !this._is_composition() && !this._is_undo) {
							this._text = this._value;
							return {
								newText : this._value, 
								bInsert : bInsert, 
								bCut : bCut
							};
						}
						return {
							newText : newText, 
							bInsert : bInsert, 
							bCut : bCut
						};
					};

					_pEditBase._after_eventset_fired_from_text_event = function (pos) {
						this.setElementCaretPos(pos, pos);
					};

					_pEditBase._cancel_event_char_from_text_event = nexacro._emptyFn;

					_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
						var elem = this.comp._input_element;

						this._setText(this._old_text);
						this._setValue(this._old_value);
						this.syncValue();

						if (this._is_composition()) {
							this._on_input_compositionend("");

							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
					};

					_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						if (!this._is_on_killfocus) {
							if (!this._set_timer_by_killfocus) {
								this._accept_focus_event = false;
								this._accept_blur_event = false;

								if (!((this._keycode == nexacro.Event.KEY_BACKSPACE || this._keycode == nexacro.Event.KEY_DELETE) && this._text == "")) {
									elem.setElementBlur();

									elem.setElementValue(this._text);

									nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
										pThis._accept_focus_event = false;
										pThis.setElementCaretPos(begin_pos, begin_pos, elem);
									});
								}
							}
						}
						else {
							this._set_timer_by_killfocus = true;

							var text = this._text;

							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								elem.setElementValue(text);
								pThis._set_timer_by_killfocus = false;
							});
						}
					};

					_pEditBase._cut_from_text_event = function (begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						this._setText(this._text);
						this._setValue(this._value);
						this.syncValue();

						if (!this._is_on_killfocus) {
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementValue(this._text);

							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								pThis._accept_focus_event = false;
								pThis.setElementCaretPos(begin_pos, begin_pos, elem);
							});
						}
						else {
							this._set_timer_by_killfocus = true;

							var text = this._text;

							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								elem.setElementValue(text);
								pThis._set_timer_by_killfocus = false;
							});
						}
					};

					_pEditBase._cancel_from_text_event = function (newText, begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						this._setText(newText);
						this._setValue(newText);
						this.syncValue();

						if (!this._is_on_killfocus) {
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementValue(this._text);

							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								pThis._accept_focus_event = false;
								pThis.setElementCaretPos(begin_pos, begin_pos, elem);
							});
						}
						else {
							this._set_timer_by_killfocus = true;

							var text = this._text;

							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								elem.setElementValue(text);
								pThis._set_timer_by_killfocus = false;
							});
						}
					};

					_pEditBase._autoskip_from_text_event = function (chartext) {
						var bFilled = this._check_maxlength();
						if (!bFilled) {
							this._apply_autoskip();
						}
					};
				}
			}
			else {
				if (nexacro.BrowserVersion >= 9) {
					_pEditBase._get_newText_from_text_event = function (chartext) {
						var elem = this.comp._input_element;

						if (this._is_hangul(chartext) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
							var newText = this._compositionend_value;
						}
						else if (this._compositionend_newtext) {
							var newText = this._compositionend_newtext;
						}
						else {
							var newText = elem.getElementValue();
						}

						return newText;
					};

					_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

					_pEditBase._check_maxlength_from_text_event = function (chartext) {
						return this._check_maxlength();
					};

					_pEditBase._apply_maxlength_from_text_event = function (chartext) {
						return this._apply_maxlength(chartext);
					};

					_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
						return {
							newText : newText, 
							bInsert : bInsert, 
							bCut : bCut
						};
					};

					_pEditBase._after_eventset_fired_from_text_event = function (pos) {
						this.setElementCaretPos(pos, pos);
					};

					if (nexacro.BrowserVersion == 11) {
						_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
							var elem = this.comp._input_element;

							this._old_begin_pos = begin_pos;
							this._old_end_pos = end_pos;

							var elem = this.comp._input_element;

							this._setText(this._old_value);
							this._setValue(this._old_value);
							this.syncValue();

							this._accept_keyinput_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();

							var pThis = this;
							var oldValue = this._old_value;
							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								pThis._setText(oldValue);
								pThis._setValue(oldValue);
								pThis.syncValue();

								elem.setElementValue(oldValue);
								pThis.setElementCaretPos(begin_pos, end_pos, elem);
							});
						};
					}
					else {
						_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
							this._old_begin_pos = begin_pos;
							this._old_end_pos = begin_pos;

							this._cancel_from_text_event(this._old_value, begin_pos, begin_pos);
						};
					}

					_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
						var elem = this.comp._input_element;

						this._setText(this._old_text);
						this._setValue(this._old_value);
						this.syncValue();

						if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
						if (!this._is_selected()) {
							this._select_text = "";
						}
					};

					if (nexacro.BrowserType == "Edge") {
						_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
							var elem = this.comp._input_element;

							if (this._is_composition()) {
								this._accept_keyinput_event = false;

								this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
							}

							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);
							this._accept_keyinput_event = true;
						};
					}
					else {
						_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
							var elem = this.comp._input_element;

							if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
								this._accept_keyinput_event = false;
								this._accept_focus_event = false;
								this._accept_blur_event = false;

								this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

								elem.setElementBlur();
								elem.setElementFocus();
							}

							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);
						};
					}

					_pEditBase._cut_from_text_event = function (begin_pos, end_pos) {
						var pThis = this;
						var elem = this.comp._input_element;

						this._setText(this._text);
						this._setValue(this._text);
						this.syncValue();

						if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

							elem.setElementBlur();
							elem.setElementFocus();
						}

						if (this._pasteAction && (nexacro.BrowserVersion == 9 || nexacro.BrowserVersion == 10)) {
							elem.setElementValue(this._text);
							nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
								pThis.setElementCaretPos(begin_pos, begin_pos, elem);
							});
						}
						else {
							elem.setElementValue(this._text);
							this.setElementCaretPos(begin_pos, begin_pos, elem);
						}
					};

					_pEditBase._cancel_from_text_event = function (newText, begin_pos, end_pos) {
						this._is_cancel_event = true;
						var elem = this.comp._input_element;

						this._setText(newText);
						this._setValue(newText);
						this.syncValue();

						if (nexacro.BrowserVersion == 11) {
							if (this._is_composition() || (nexacro.Browser == "IE" && this._keycode == 229)) {
								this._accept_keyinput_event = false;

								this._bStatChangeOnly = true;
								this._on_input_compositionend("");
								this._bStatChangeOnly = false;
								this._accept_keyinput_event = true;
							}
						}
						else {
							this._accept_keyinput_event = false;

							this._on_input_compositionend("");
						}

						this._accept_focus_event = false;
						this._accept_blur_event = false;

						if (nexacro.BrowserType != "Edge") {
							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(begin_pos, begin_pos, elem);
						if (this._is_cancel_event == true) {
							this._is_cancel_event = false;
						}
					};

					_pEditBase._autoskip_from_text_event = function (chartext) {
						var bFilled = this._check_maxlength();
						if (!bFilled) {
							this._apply_autoskip();
						}
					};
				}
				else {
					_pEditBase._get_newText_from_text_event = function (chartext) {
						var elem = this.comp._input_element;

						if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
							var newText = this._compositionend_value;
						}
						else {
							var newText = elem.getElementValue();
						}

						return newText;
					};

					_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

					_pEditBase._check_maxlength_from_text_event = function (chartext) {
						return this._check_maxlength();
					};

					_pEditBase._apply_maxlength_from_text_event = function (chartext) {
						return this._apply_maxlength(chartext);
					};

					_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
						return {
							newText : newText, 
							bInsert : bInsert, 
							bCut : bCut
						};
					};

					_pEditBase._after_eventset_fired_from_text_event = function (pos) {
						this.setElementCaretPos(pos, pos);
					};

					_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
						this._old_begin_pos = begin_pos;
						this._old_end_pos = end_pos;

						var elem = this.comp._input_element;

						this._setText(this._old_value);
						this._setValue(this._old_value);
						this.syncValue();

						this._accept_keyinput_event = false;
						this._accept_blur_event = false;

						elem.setElementBlur();

						var pThis = this;
						var oldValue = this._old_value;
						nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
							pThis._setText(oldValue);
							pThis._setValue(oldValue);
							pThis.syncValue();

							elem.setElementValue(oldValue);
							pThis.setElementCaretPos(begin_pos, end_pos, elem);
						});
					};

					_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
						var elem = this.comp._input_element;

						this._setText(this._old_text);
						this._setValue(this._old_value);
						this.syncValue();

						if (this._is_composition()) {
							this._on_input_compositionend("");

							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
					};

					_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
						var elem = this.comp._input_element;

						if (this._is_composition()) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
					};

					_pEditBase._cut_from_text_event = function (begin_pos, end_pos) {
						var elem = this.comp._input_element;

						this._setText(this._text);
						this._setValue(this._value);
						this.syncValue();

						if (this._is_composition()) {
							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(begin_pos, begin_pos, elem);
					};

					_pEditBase._cancel_from_text_event = function (newText) {
						var elem = this.comp._input_element;

						this._setText(newText);
						this._setValue(newText);
						this.syncValue();

						if (this._is_composition()) {
							this._on_input_compositionend("");

							this._accept_keyinput_event = false;
							this._accept_focus_event = false;
							this._accept_blur_event = false;

							elem.setElementBlur();
							elem.setElementFocus();
						}

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos);
					};

					_pEditBase._autoskip_from_text_event = function (chartext) {
						var bFilled = this._check_maxlength();
						if (!bFilled) {
							this._apply_autoskip();
						}
					};
				}
			}
		}
		else {
			if (nexacro.SystemLang == "ja") {
				_pEditBase._get_newText_from_text_event = function (chartext) {
					var elem = this.comp._input_element;

					if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
						var newText = this._compositionend_value;
					}
					else {
						var newText = elem.getElementValue();
					}

					return newText;
				};

				_pEditBase._initinfo_from_text_event = function (chartext, text, begin, end) {
					if (chartext && !this._is_hangul(chartext) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd) {
						this._value = text.substr(0, begin) + text.substr(end, text.length - end);
					}
				};
				_pEditBase._check_maxlength_from_text_event = function (chartext) {
					return this._check_maxlength();
				};

				_pEditBase._apply_maxlength_from_text_event = function (chartext) {
					return this._apply_maxlength(chartext);
				};

				_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
					if (!chartext && !this._is_composition() && !this._is_undo) {
						this._text = this._value;
						return {
							newText : this._value, 
							bInsert : false, 
							bCut : false
						};
					}
					return {
						newText : newText, 
						bInsert : bInsert, 
						bCut : bCut
					};
				};

				_pEditBase._after_eventset_fired_from_text_event = function (pos) {
					var elem = this.comp._input_element;

					if (!this._is_on_killfocus) {
						this.setElementCaretPos(pos, pos, elem);
					}
				};

				_pEditBase._cancel_event_char_from_text_event = nexacro._emptyFn;

				_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
					var elem = this.comp._input_element;

					this._setText(this._old_text);
					this._setValue(this._old_value);
					this.syncValue();

					if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
						this._accept_keyinput_event = false;
						this._accept_focus_event = false;
						this._accept_blur_event = false;

						elem.setElementBlur();
						elem.setElementFocus();
					}

					elem.setElementValue(this._text);
					this.setElementCaretPos(begin_pos, begin_pos, elem);
				};

				_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
					var elem = this.comp._input_element;

					this._accept_blur_event = false;
					this._accept_focus_event = false;

					elem.setElementBlur();

					elem.setElementValue(this._text);

					if (!this._is_on_killfocus) {
						this.setElementCaretPos(begin_pos, begin_pos, elem);
					}
				};

				_pEditBase._cut_from_text_event = function (begin_pos, end_pos) {
					var elem = this.comp._input_element;

					this._setText(this._text);
					this._setValue(this._value);
					this.syncValue();

					this._accept_blur_event = false;
					this._accept_focus_event = false;

					elem.setElementBlur();

					elem.setElementValue(this._text);

					if (!this._is_on_killfocus) {
						this.setElementCaretPos(begin_pos, begin_pos, elem);
					}
				};

				_pEditBase._cancel_from_text_event = function (newText, begin_pos, end_pos) {
					var elem = this.comp._input_element;

					this._setText(newText);
					this._setValue(newText);
					this.syncValue();

					this._accept_blur_event = false;
					this._accept_focus_event = false;

					elem.setElementBlur();

					elem.setElementValue(this._text);

					if (!this._is_on_killfocus) {
						this.setElementCaretPos(begin_pos, begin_pos, elem);
					}
				};

				_pEditBase._autoskip_from_text_event = function (chartext) {
					var bFilled = this._check_maxlength();
					if (!bFilled) {
						this._apply_autoskip();
					}
				};
			}
			else {
				_pEditBase._get_newText_from_text_event = function (chartext) {
					var elem = this.comp._input_element;

					if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
						var newText = this._compositionend_value;
					}
					else {
						var newText = elem.getElementValue();
					}

					return newText;
				};

				_pEditBase._initinfo_from_text_event = function (chartext, text, begin, end) {
					if (chartext && !this._is_hangul(chartext) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd) {
						this._value = text.substr(0, begin) + text.substr(end, text.length - end);
					}
				};
				_pEditBase._check_maxlength_from_text_event = function (chartext) {
					return this._check_maxlength();
				};

				_pEditBase._apply_maxlength_from_text_event = function (chartext) {
					return this._apply_maxlength2(chartext);
				};

				_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
					return {
						newText : newText, 
						bInsert : bInsert, 
						bCut : bCut
					};
				};

				_pEditBase._after_eventset_fired_from_text_event = function (pos) {
					if (!this._is_on_killfocus) {
						this.setElementCaretPos(pos, pos);
					}
				};

				_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
					this._old_begin_pos = begin_pos;
					this._old_end_pos = end_pos;

					var elem = this.comp._input_element;

					this._setText(this._old_value);
					this._setValue(this._old_value);
					this.syncValue();

					this._accept_keyinput_event = false;
					this._accept_blur_event = false;

					elem.setElementBlur();

					var pThis = this;
					var oldValue = this._old_value;
					nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
						pThis._setText(oldValue);
						pThis._setValue(oldValue);
						pThis.syncValue();

						elem.setElementValue(oldValue);
						pThis.setElementCaretPos(begin_pos, end_pos, elem);
					});
				};

				_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
					var elem = this.comp._input_element;

					this._setText(this._old_text);
					this._setValue(this._old_value);
					this.syncValue();

					if (this._is_composition() || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11 && this._keycode == 229)) {
						this._accept_keyinput_event = false;
						this._accept_focus_event = false;
						this._accept_blur_event = false;

						elem.setElementBlur();
						elem.setElementFocus();
					}

					elem.setElementValue(this._text);
					this.setElementCaretPos(begin_pos, begin_pos, elem);
				};

				_pEditBase._not_insert_from_text_event = function (begin_pos, end_pos) {
					var elem = this.comp._input_element;

					if (!this._is_on_killfocus) {
						this._accept_keyinput_event = false;
						this._accept_blur_event = false;
						this._accept_focus_event = false;

						this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

						elem.setElementBlur();
						elem.setElementFocus();

						elem.setElementValue(this._text);
						this.setElementCaretPos(begin_pos, begin_pos, elem);
					}
					else {
						var pThis = this;
						nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
							elem.setElementValue(pThis._text);
						});
					}
				};

				_pEditBase._cut_from_text_event = function (begin_pos, end_pos) {
					var elem = this.comp._input_element;

					this._setText(this._text);
					this._setValue(this._value);
					this.syncValue();

					if (!this._is_on_killfocus) {
						this._accept_blur_event = false;
						this._accept_focus_event = false;

						this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

						elem.setElementBlur();
						elem.setElementFocus();

						elem.setElementValue(this._text);
						this.setElementCaretPos(begin_pos, begin_pos, elem);
					}
					else {
						var pThis = this;
						nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
							elem.setElementValue(pThis._text);
						});
					}
				};

				_pEditBase._cancel_from_text_event = function (newText) {
					var elem = this.comp._input_element;

					this._setText(newText);
					this._setValue(newText);
					this.syncValue();

					if (!this._is_on_killfocus) {
						this._accept_blur_event = false;
						this._accept_focus_event = false;

						this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");

						elem.setElementBlur();
						elem.setElementFocus();

						elem.setElementValue(this._text);
						this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
					}
					else {
						var pThis = this;
						nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
							elem.setElementValue(pThis._text);
						});
					}
				};

				_pEditBase._autoskip_from_text_event = function (chartext) {
					var bFilled = this._check_maxlength();
					if (!bFilled) {
						if (!(chartext != "" && !this._is_hangul(chartext))) {
							this._accept_keyinput_event = false;
						}

						this._apply_autoskip();
					}
				};
			}
		}
	}
	else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
		_pEditBase._get_newText_from_text_event = function (chartext) {
			var elem = this.comp._input_element;
			var newText = elem.getElementValue();

			return newText;
		};

		_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

		_pEditBase._check_maxlength_from_text_event = function (chartext) {
			return this._check_maxlength();
		};

		_pEditBase._apply_maxlength_from_text_event = function (chartext) {
			return this._apply_maxlength(chartext);
		};

		_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
			return {
				newText : newText, 
				bInsert : bInsert, 
				bCut : bCut
			};
		};

		_pEditBase._after_eventset_fired_from_text_event = function (pos) {
			this.setElementCaretPos(pos, pos);
		};

		_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
			var elem = this.comp._input_element;

			this._setText(this._old_value);
			this._setValue(this._old_value);
			this.syncValue();

			elem.setElementValue(this._text);
			this.setElementCaretPos(begin_pos, end_pos, elem);
		};

		_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			}

			this._setText(this._old_text);
			this._setValue(this._old_value);
			this.syncValue();

			elem.setElementValue(this._text);
			this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
			elem.setElementValue(this._text, true);
		};

		_pEditBase._not_insert_from_text_event = function () {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			}

			elem.setElementValue(this._text);
			this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
		};

		_pEditBase._cut_from_text_event = function () {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			}

			this._setText(this._text);
			this._setValue(this._value);
			this.syncValue();

			elem.setElementValue(this._text);
			this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
		};

		_pEditBase._cancel_from_text_event = function (newText, begin_pos, end_pos) {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			}

			this._setText(newText);
			this._setValue(newText);
			this.syncValue();

			elem.setElementValue(this._text);
			this.setElementCaretPos(begin_pos, begin_pos, elem);

			if (this._is_selected()) {
				this._select_text = this._text.substring(this._begin_pos, this._end_pos);
			}
		};

		_pEditBase._autoskip_from_text_event = function (chartext) {
			var bFilled = this._check_maxlength();
			if (!bFilled) {
				this._apply_autoskip();
			}
		};
	}
	else if (nexacro.Browser == "Gecko") {
		_pEditBase._get_newText_from_text_event = function (chartext) {
			var elem = this.comp._input_element;
			var newText = elem.getElementValue();

			return newText;
		};

		_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

		_pEditBase._check_maxlength_from_text_event = function (chartext) {
			return this._check_maxlength();
		};

		_pEditBase._apply_maxlength_from_text_event = function (chartext) {
			return this._apply_maxlength(chartext);
		};

		_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
			return {
				newText : newText, 
				bInsert : bInsert, 
				bCut : bCut
			};
		};

		_pEditBase._after_eventset_fired_from_text_event = function (pos) {
			this.setElementCaretPos(pos, pos);
		};

		_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
			var elem = this.comp._input_element;

			this._old_begin_pos = begin_pos;
			this._old_end_pos = end_pos;

			this._cancel_from_text_event(this._old_value);
		};

		_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
			var elem = this.comp._input_element;

			this._setText(this._old_text);
			this._setValue(this._old_value);
			this.syncValue();

			this._accept_focus_event = false;
			this._accept_blur_event = false;


			elem.setElementValue(this._text);
			this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
		};

		_pEditBase._not_insert_from_text_event = function () {
			var elem = this.comp._input_element;

			this._accept_focus_event = false;
			this._accept_blur_event = false;

			if (this._is_composition()) {
				elem.setElementBlur();
				elem.setElementFocus();
			}

			elem.setElementValue(this._text);
			this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
		};

		_pEditBase._cut_from_text_event = function () {
			var elem = this.comp._input_element;

			this._setText(this._text);
			this._setValue(this._value);
			this.syncValue();

			this._accept_focus_event = false;
			this._accept_blur_event = false;

			if (this._is_composition()) {
				elem.setElementBlur();
				elem.setElementFocus();
			}

			elem.setElementValue(this._text);
			this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
		};

		_pEditBase._cancel_from_text_event = function (newText, begin_pos, end_pos) {
			if (!this._accept_cut_process) {
				this._accept_cut_process = true;
				return;
			}

			var elem = this.comp._input_element;

			this._setText(newText);
			this._setValue(newText);
			this.syncValue();

			this._accept_focus_event = false;
			this._accept_blur_event = false;

			if (this._is_composition()) {
				this._accept_keyinput_event = false;
				this._accept_cut_process = false;

				elem.setElementBlur();
				elem.setElementFocus();

				this._accept_keyinput_event = true;
			}

			if (this._old_begin_pos != this._old_end_pos) {
				this._accept_select_event = false;
			}

			elem.setElementValue(this._text);
			this.setElementCaretPos(begin_pos, begin_pos, elem);

			if (this._is_selected()) {
				this._select_text = this._text.substring(this._begin_pos, this._end_pos);
			}
			this._accept_cut_process = true;
			this._accept_focus_event = true;
			this._accept_blur_event = true;
		};

		_pEditBase._autoskip_from_text_event = function (chartext) {
			var bFilled = this._check_maxlength();
			if (!bFilled) {
				this._apply_autoskip();
			}
		};
	}
	else {
		if (nexacro.OS == "iOS") {
			_pEditBase._get_newText_from_text_event = function (chartext) {
				var elem = this.comp._input_element;
				var newText = elem.getElementValue();

				if (this._is_hangul(chartext) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && (this._compositionend_value && this._compositionend_value.length > 0)) {
					newText = this._compositionend_value;
				}
				else if (major_ver >= 13 && elem._keypad_type == "number") {
					if (this._value) {
						newText = this._value.slice(0, this._input_begin_pos) + chartext + this._value.slice(this._input_begin_pos);
					}
					else {
						newText = chartext;
					}
				}

				return newText;
			};
		}
		else {
			_pEditBase._get_newText_from_text_event = function (chartext) {
				var elem = this.comp._input_element;
				var newText = elem.getElementValue();

				return newText;
			};
		}

		_pEditBase._initinfo_from_text_event = nexacro._emptyFn;

		_pEditBase._check_maxlength_from_text_event = function (chartext) {
			return this._check_maxlength();
		};

		_pEditBase._apply_maxlength_from_text_event = function (chartext) {
			return this._apply_maxlength(chartext);
		};

		_pEditBase._after_filterprocess_from_text_event = function (chartext, newText, bInsert, bCut) {
			return {
				newText : newText, 
				bInsert : bInsert, 
				bCut : bCut
			};
		};

		_pEditBase._after_eventset_fired_from_text_event = function (pos) {
			this.setElementCaretPos(pos, pos);
		};

		if (nexacro.Browser == "Safari") {
			_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
				var elem = this.comp._input_element;

				this._setText(this._old_value);
				this._setValue(this._old_value);
				this.syncValue();

				this._accept_focus_event = false;
				this._accept_blur_event = false;
				this._accept_keyinput_event = false;

				elem.setElementBlur();
				elem.setElementValue("");
				elem.setElementFocus();

				elem.setElementValue(this._text);
				this.setElementCaretPos(begin_pos, end_pos, elem);
			};
		}
		else if (nexacro.Browser == "MobileSafari") {
			_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
				var elem = this.comp._input_element;

				this._setText(this._old_value);
				this._setValue(this._old_value);
				this.syncValue();

				this._accept_keyinput_event = false;

				this._on_default_input_compositionend("");

				this.setElementCaretPos(0, 0, elem);
				elem.setElementValue("", true);

				this._old_begin_pos = begin_pos;
				this._old_end_pos = end_pos;
				this._begin_pos = begin_pos;
				this._end_pos = end_pos;
				this._set_input_begin_pos(begin_pos);

				var pThis = this;
				var oldValue = this._old_value;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					pThis._setText(oldValue);
					pThis._setValue(oldValue);
					pThis.syncValue();

					pThis._old_value = oldValue;
					pThis._old_text = oldValue;

					elem.setElementValue(oldValue, true);
					pThis.setElementCaretPos(begin_pos, end_pos, elem);

					pThis._compositionend_value = elem.getElementValue();
				});
			};
		}
		else {
			_pEditBase._cancel_event_char_from_text_event = function (begin_pos, end_pos) {
				var elem = this.comp._input_element;

				this._old_begin_pos = begin_pos;
				this._old_end_pos = end_pos;

				this._cancel_from_text_event(this._old_value);
			};
		}

		_pEditBase._cancel_event_textchange_from_text_event = function (begin_pos, end_pos) {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
				elem.setInputElementCompositeClear();
			}

			this._setText(this._old_text);
			this._setValue(this._old_value);
			this.syncValue();

			elem.setElementValue(this._text);
			this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
		};

		_pEditBase._not_insert_from_text_event = function () {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
				elem.setInputElementCompositeClear();
			}

			this._filteredtext = true;

			if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
				elem.setElementValue(null);
			}
			elem.setElementValue(this._text);
			if (nexacro.Browser == "Safari" || nexacro.Browser == "Runtime") {
				this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
			}
			else {
				this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
			}
		};

		_pEditBase._cut_from_text_event = function () {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
				elem.setInputElementCompositeClear();
			}

			this._filteredtext = true;
			this._setText(this._text);
			this._setValue(this._value);
			this.syncValue();

			if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
				elem.setElementValue(null);
			}
			elem.setElementValue(this._text);
			this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
		};

		_pEditBase._cancel_from_text_event = function (newText) {
			var elem = this.comp._input_element;

			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
				elem.setInputElementCompositeClear();
			}

			this._filteredtext = true;
			this._setText(newText);
			this._setValue(newText);
			this.syncValue();

			if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari" && !this._pasteAction) {
				elem.setElementValue(null);
			}
			elem.setElementValue(this._text);
			this.setElementCaretPos(this._old_begin_pos, this._old_end_pos, elem);
		};

		_pEditBase._autoskip_from_text_event = function (chartext) {
			var bFilled = this._check_maxlength();
			if (!bFilled) {
				this._apply_autoskip();
			}
		};
	}
	;

	_pEditBase._is_composition = function () {
		if (this._stat_composition) {
			return (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionStart || this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate);
		}
		else {
			return false;
		}
	};

	_pEditBase._is_selected = function (elem) {
		if (!elem) {
			return (this._begin_pos != this._end_pos);
		}
		else {
			if ((nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) && !this._pasteAction) {
				var elem_value = elem.getElementValue();

				return ((this._begin_pos != this._end_pos) && ((!this._value || !elem_value) || (this._value && elem_value && elem_value.length <= this._value.length)));
			}
			else {
				return (this._begin_pos != this._end_pos);
			}
		}
	};

	_pEditBase._is_cleared = function (elem) {
		var cur_text = elem.getElementValue();
		if (cur_text == "" && cur_text != this._text) {
			return true;
		}
		return false;
	};

	_pEditBase._is_hangul = function (v) {
		var r = new RegExp("[\\uac00-\\ud7af\\u3130-\\u318f\\u1100-\\u11ff]");
		if (r.test(v)) {
			return true;
		}

		return false;
	};

	_pEditBase._is_nipon = function (v) {
		var regexp_nipon = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u31F0-\u31FF]|[\uFF01-\uFFEF]|[\u3000-\u3002]|[\u300C]|[\u300D]|[\u309B]|[\u309C]|[\u2010-\u201F]/;
		var regexp_hanja = /[\u2E80-\u2EFF]|[\u3400-\u4DBF]|[\u4E00-\u9FBF]|[\uF900-\uFAFF]|[\u20000-\u2A6DF]|[\u2F8000-\u2FA1F]/;
		var regexp_ascii = /[\u0000-\u007F]/;
		var regexp_greek = /[\u0370-\u03FF]/;

		if (regexp_nipon.test(v) || regexp_hanja.test(v)) {
			return true;
		}

		if (this._keycode == 229) {
			if (regexp_ascii.test(v)) {
				return true;
			}
			if (regexp_greek.test(v)) {
				return true;
			}
		}

		return false;
	};
	_pEditBase._check_filterable = function (data) {
		if (data == null) {
			return false;
		}

		if (this._is_hangul(data) || !this._is_composition()) {
			return true;
		}

		return false;
	};

	_pEditBase._set_enable = function (v) {
		if (this.comp && this.comp._input_element) {
			this.comp._input_element.setElementEnable(v);
		}
	};

	_pEditBase._setText = function (v) {
		if (!nexacro._isNull(v)) {
			if (!(typeof v == "string")) {
				v = nexacro._toString(v);
			}
			v = v.replace(/\r\n/g, "\n");
		}
		else {
			v = "";
		}
		this._text = v;
	};

	_pEditBase._setValue = function (v) {
		if (!nexacro._isNull(v)) {
			if (!(typeof v == "string")) {
				v = nexacro._toString(v);
			}
		}
		this._value = v;
	};

	_pEditBase._getText = function () {
		return this._text;
	};

	_pEditBase._getValue = function () {
		return this._value;
	};

	_pEditBase._getFocusText = function () {
		return this._focus_text;
	};

	_pEditBase._getFocusValue = function () {
		return this._focus_value;
	};

	_pEditBase._setCaret = function (elem) {
		var pos = elem.getElementCaretPos();

		if (pos && pos != -1) {
			this._old_begin_pos = this._begin_pos;
			this._old_end_pos = this._end_pos;

			this._begin_pos = pos.begin;
			this._end_pos = pos.end;

			if (!this._is_composition() && !elem._is_ios_composition) {
				this._set_input_begin_pos(pos.begin);
			}
		}
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		_pEditBase._apply_autoselect = function (elem) {
			var comp = this.comp;

			if (comp.autoselect) {
				var text = this._select_text = this._text;
				this.setElementCaretPos(0, text.length, elem);
				this.onUpdateStyle(comp);
			}
		};
	}
	else if (nexacro.OS == "Android") {
		_pEditBase._apply_autoselect = function (elem) {
			var comp = this.comp;

			if (comp.autoselect) {
				var pThis = this;
				var text = this._select_text = this._text;
				this._is_apply_autoselect = true;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					pThis.setElementCaretPos(0, text.length, elem);
				}, 0);
			}
		};
	}
	else {
		_pEditBase._apply_autoselect = function (elem, mflag) {
			var comp = this.comp;

			if (comp.autoselect) {
				var text = this._select_text = this._text;

				this._is_apply_autoselect = true;


				this.setElementCaretPos(0, text.length, elem);
			}
		};
	}

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari" || nexacro.Browser == "IE") {
		_pEditBase._apply_autoskip = function () {
			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				pThis.comp.on_apply_autoskip();
			}, 0);
		};
	}
	else {
		_pEditBase._apply_autoskip = function () {
			var comp = this.comp;
			comp.on_apply_autoskip();
		};
	}

	_pEditBase.applyInputmode = function (v) {
		if (!v) {
			return v;
		}

		var gbn = this.comp.inputmode;

		if (gbn) {
			switch (gbn.toLowerCase()) {
				case "upper":
					v = v.toUpperCase();
					break;
				case "lower":
					v = v.toLowerCase();
					break;
				default:
					break;
			}
		}
		return v;
	};

	_pEditBase._setFocusValue = function () {
		this._focus_text = this._text;
		this._focus_value = this._value;
	};

	_pEditBase._calcCaret = function (pos, halign, pretext, posttext) {
		if (pos && pos != -1) {
			var begin = pos.begin;

			var pre_len = pretext.length;
			var post_len = posttext.length;

			if (pre_len > post_len) {
				var diff_len = pre_len - post_len;
				var is_odd = diff_len % 2 ? true : false;

				if (halign == "center") {
					if (is_odd) {
						var post_caret = begin - diff_len;

						if (post_caret < 0) {
							begin = 0;
						}
						else if (post_caret >= post_len) {
							begin = post_len;
						}
						else {
							begin = post_caret + 1;
						}
					}
					else {
						var correct_caret = diff_len / 2;
						var post_caret = begin - correct_caret;

						if (post_caret <= 0) {
							begin = 0;
						}
						else if (post_caret >= post_len) {
							begin = post_len;
						}
						else {
							begin = post_caret;
						}
					}
				}
				else if (halign == "right") {
					if ((begin - diff_len) <= 0) {
						begin = 0;
					}
					else {
						begin -= diff_len;
					}
				}
			}
			else if (pre_len < post_len) {
				begin = pos.begin;
			}
		}
		else {
			var begin = 0;
		}

		return {
			begin : begin, 
			end : begin
		};
	};

	_pEditBase._updateCaretPos = function () {
		var comp = this.comp;
		if (comp) {
			this._set_input_begin_pos(!nexacro._isNull(comp.text) ? comp.text.length : -1);

			if (comp._old_selection) {
				comp._old_selection[0] = comp._old_selection[1] = this._input_begin_pos;
			}
		}
		comp = null;
	};

	if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
		_pEditBase._apply_style = function (elem) {
			var comp = this.comp;
			if (comp && comp._is_created) {
				var bWidthChange = (elem.width <= 0) ? false : true;
				var cur_width = elem.width;

				elem.setElementSize((cur_width > 0) ? cur_width = cur_width - 1 : cur_width, elem.height);

				nexacro.OnceCallbackTimer.callonce(this.comp, function () {
					elem.setElementSize(bWidthChange ? cur_width + 1 : cur_width, elem.height);
				}, 0);
			}
		};
	}
	else {
		_pEditBase._apply_style = nexacro._emptyFn;
	}

	_pEditBase._apply_elementtype = function (elem) {
		if (elem && !elem.password) {
			elem.setElementInputType(this.comp.inputtype);
			elem.setElementInputTypeKeypad(this.comp.inputtype);
		}
	};

	_pEditBase._check_backspace = function (elem) {
		var elem_value = elem.getElementValue();
		if (elem_value.length == (this._text.length - 1)) {
			if (this._keycode == 0) {
				if (!this._cutAction && !this._pasteAction && !this._is_composition()) {
					return true;
				}
			}
		}

		return false;
	};

	_pEditBase._setAccessibilityNotifyLabel = function () {
		var comp = this.comp;
		if (comp) {
			comp._refreshAccessibilityValue();
			var accessibility = comp.on_find_CurrentStyle_accessibility(comp._pseudo);
			var label = comp._getAccessibilityLabel(accessibility);
			if (comp.value == null && comp.displaynulltext.length > 0) {
				label = label + " " + comp.displaynulltext;
				comp._setAccessibilityLabel(label);
			}
			return label;
		}
		return null;
	};

	if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
		_pEditBase._isJapaneseReComposition = function () {
			var ret = false;
			var data = this._stat_composition.getData();
			var curr_stat = this._stat_composition.getCurrentStatus();

			if (!this._is_hangul(data) && curr_stat == nexacro.EditBase.Status.CompositionStart && data != "" && this._keycode == nexacro.KeyCode_ImeInput) {
				ret = true;
			}

			data = null, curr_stat = null;
			return ret;
		};
	}
	else if (nexacro.BrowserType == "Edge") {
		_pEditBase._isJapaneseReComposition = function () {
			var ret = false;
			var curr_stat = this._stat_composition.getCurrentStatus();

			if (curr_stat == nexacro.EditBase.Status.CompositionStart && (this._old_begin_pos == this._old_end_pos) && (this._begin_pos == this._end_pos) && (this._input_begin_pos && this._begin_pos)) {
				ret = true;
			}

			curr_stat = null;
			return ret;
		};
	}
	else if (nexacro.Browser == "Gecko") {
		_pEditBase._isJapaneseReComposition = function () {
			var ret = false;
			var data = this._stat_composition.getData();
			var curr_stat = this._stat_composition.getCurrentStatus();
			var pos = this.comp._input_element.getElementCaretPos();

			if (!this._is_hangul(data) && curr_stat == nexacro.EditBase.Status.CompositionStart && data != "" && (this._input_begin_pos == this._begin_pos)
				 && (this._begin_pos == this._end_pos) && (this._begin_pos != pos.begin)) {
				ret = true;
			}

			pos = null, data = null, curr_stat = null;
			return ret;
		};
	}
	else {
		_pEditBase._isJapaneseReComposition = nexacro._emptyFn;
	}

	_pEditBase._updateEventInfo = function (text_info, textEvt, charEvt) {
		var _value = nexacro._isNull(this._value) ? "" : this._value;
		if (text_info) {
			text_info.chartext = _value;
			text_info.posttext = this._value;
			text_info.postimetext = "";
		}
		if (textEvt) {
			textEvt.chartext = _value;
			textEvt.posttext = _value;
		}
		if (charEvt) {
			charEvt.chartext = _value;
			charEvt.posttext = _value;
		}
		_value = null;
	};

	delete _pEditBase;
	_pEditBase = null;

	nexacro.EditNormal = function (comp) {
		nexacro.EditBase.call(this, comp);

		if (comp) {
			this.comp = comp;
		}

		this._pre_char = "";

		this._typeRegex = undefined;
		this._typeRegex1 = undefined;
	};

	_pEditNormal = nexacro._createPrototype(nexacro.EditBase, nexacro.EditNormal);
	nexacro.EditNormal.prototype = _pEditNormal;

	_pEditNormal._type_name = "EditNormal";

	_pEditNormal._filterRegexMap = {
		alpha : "a-zA-Z", 
		comma : ",", 
		digit : "0-9", 
		symbol : "!\"#$%&'()*\\/;:<=>?@\\[\\\\\\]\\^_`{|}~'\\\\\\u20a9", 
		sign : "+\\-", 
		space : " \t", 
		dot : "."
	};

	_pEditNormal._typeRegexMap = {
		alpha : "a-zA-Z", 
		comma : ",", 
		digit : "0-9", 
		dot : ".", 
		english : "a-zA-Z", 
		symbol : "!\"#$%&+,.'()*\\-/;:<=>?@[\\\\\\]\\^_`{|}~'\\u20a9", 
		number : "0-9\\-.,", 
		numberandenglish : "0-9\\-.,\\a-zA-Z", 
		sign : "+\\-", 
		space : " \t", 
		half : "\\uff61-\\uff9f\\uffe8-\\uffee\\!\"#$%&'()*+,\\-./;:<=>?@[\\\\\\]\\^_`{|}~'\\a-zA-Z\\0-9+", 
		full : "\\uff01-\\uff60\\uffe0-\\uffe6"
	};

	_pEditNormal._destroy = function () {
		this._filterRegexMap = null;
		this._typeRegexMap = null;

		this._typeRegex = null;
		this._typeRegex1 = null;

		nexacro.EditBase.prototype._destroy.call(this);
	};

	_pEditNormal.getWCharLen = function (v) {
		var c = v.charCodeAt(0);

		if (((c & 0xff80) == 0) || c == 0x20a9) {
			return 1;
		}
		else if ((c & 0xff00) < 0x0800) {
			return 2;
		}
		else {
			return 3;
		}
	};

	_pEditNormal._is_english = function (v) {
		var r = new RegExp("[\\u0041-\\u007a]");
		if (r.test(v)) {
			return true;
		}

		return false;
	};

	_pEditNormal._is_half_japaness = function (v) {
		var r = new RegExp("[\\uff61-\\uff9f]");
		if (r.test(v)) {
			return true;
		}

		return false;
	};

	_pEditNormal._is_full_japaness = function (v) {
		var r = new RegExp("[\\u3041-\\u30f6\\uff10-\\uff5a\\u3000]");
		if (r.test(v)) {
			return true;
		}

		return false;
	};

	_pEditNormal._is_dakuten = function (v) {
		var r = new RegExp("\\uff9e");
		if (r.test(v)) {
			return true;
		}

		return false;
	};

	_pEditNormal._is_handakuten = function (v) {
		var r = new RegExp("\\uff9f");
		if (r.test(v)) {
			return true;
		}

		return false;
	};

	_pEditNormal.setInputfilter = function (strInputfilter) {
		var arr = strInputfilter.split(",");
		var buffer = "";
		var len = arr.length;
		for (var i = 0; i < len; i++) {
			var regex = this._filterRegexMap[arr[i]];
			if (regex) {
				buffer += regex;
			}
		}
		if (buffer.length) {
			this._filterRegex = new RegExp("[" + buffer + "]");
		}
		else {
			this._filterRegex = undefined;
		}
	};

	_pEditNormal.setInputType = function (v) {
		var arr = v.split(/\s*,\s*/);
		var buffer = "";
		var len = arr.length;
		for (var i = 0; i < len; i++) {
			var regex = this._typeRegexMap[arr[i]];
			if (regex) {
				buffer += regex;
			}
		}

		if (buffer.length) {
			this._typeRegex = new RegExp("[" + buffer + "]");
			if (v.indexOf("full") != -1) {
				var f = this._typeRegexMap["half"];
				this._typeRegex1 = new RegExp("[" + f + "]");
			}

			if (!(v.indexOf("full") != -1 || v.indexOf("normal") != -1)) {
				this._accept_hangul = false;
			}
		}
		else {
			this._typeRegex = undefined;
			this._typeRegex1 = undefined;
		}
	};

	_pEditNormal.syncValue = function () {
		var comp = this.comp;
		var elem = comp._input_element;

		comp.value = this._value;

		if (comp.password) {
			comp.text = this._text.replace(/./gi, "*");
			if (elem) {
				elem.setElementPassword(comp.password);
			}
		}
		else {
			comp.text = this._text;
		}
	};

	_pEditNormal.setSelectText = function (elem, v) {
		if (v && v.length > 0) {
			var comp = this.comp;
			var start = this._begin_pos !== undefined ? this._begin_pos : 0;
			var end = this._end_pos !== undefined ? this._end_pos : 0;

			if (start == end) {
				return "";
			}

			var curTxt = this._text;
			if (comp.maxlength && !((+comp.maxlength) != (+comp.maxlength))) {
				var ret = this.getLength(elem, curTxt);
				if (comp.maxlength <= ret) {
					return "";
				}
			}

			var ret = [];
			var c = "";

			for (var i = 0, n = v.length; i < n; i++) {
				c = v.charAt(i);

				if (this._filterRegex) {
					if (this._filterRegex.test(c)) {
						continue;
					}
				}
				if (this._typeRegex) {
					if (!this._typeRegex.test(c)) {
						if (comp.inputtype == "full") {
							if (this.getWCharLen(c) == 1 || this._typeRegex1.test(c)) {
								continue;
							}
						}
						else {
							continue;
						}
					}

					if (comp.inputtype != "full" && this.getWCharLen(c) > 1) {
						continue;
					}
				}
				ret.push(c);
			}

			var selText = comp.getSelectedText();
			var str = ret.join("");
			if (str.length > 0) {
				var newText = curTxt.substring(0, start) + str + curTxt.substr(end);
				if (this._text != newText) {
					this._setText(newText);

					this.writeBuffer(elem);
					this._setValue(this._text);
					this.syncValue();

					this._begin_pos = start;
					this._end_pos = start + str.length;

					elem.setElementSetSelect(this._begin_pos, this._end_pos);
				}

				return selText;
			}
		}
		return "";
	};

	_pEditNormal.applyInputmode = function (v) {
		if (!v) {
			return v;
		}

		var gbn = this.comp.inputmode;
		var text = "";
		var i = 0;
		var v_len = v.length;
		if (gbn) {
			switch (gbn.toLowerCase()) {
				case "upper":
					{

						for (i = 0; i < v_len; i++) {
							var c = v.charAt(i);
							var len = this.getWCharLen(c);
							if (len == 1) {
								c = c.toUpperCase();
							}

							text += c;
						}
					}
					break;
				case "lower":
					{

						for (i = 0; i < v_len; i++) {
							var c = v.charAt(i);
							var len = this.getWCharLen(c);
							if (len == 1) {
								c = c.toLowerCase();
							}

							text += c;
						}
					}
					break;
				default:
					{

						text = v;
					}
					break;
			}
		}
		return text;
	};

	_pEditNormal.setLengthunit = function (v) {
		this._lengthunit = v;
	};

	_pEditNormal.getLength = function (elem, str, bStr, checkLen, unitGbn) {
		if (str === undefined) {
			return 0;
		}

		if (unitGbn === undefined) {
			unitGbn = this._lengthunit;
		}
		if (bStr) {
			if (unitGbn == "utf8") {
				return this.utf8ByteCount(elem, str, bStr, checkLen);
			}
			else if (unitGbn == "ascii") {
				return this.asciiByteCount(elem, str, bStr, checkLen);
			}
			else {
				var comp = this.comp;

				if (checkLen === undefined) {
					checkLen = comp.maxlength;
				}
				var ret = str;
				if (checkLen < str.length) {
					ret = ret.substring(0, checkLen);
				}
				return {
					"len" : str.length, 
					"str" : ret
				};
			}
		}
		else {
			if (unitGbn == "utf8") {
				return this.utf8ByteCount(elem, str);
			}
			else if (unitGbn == "ascii") {
				return this.asciiByteCount(elem, str);
			}
			else {
				return str.length;
			}
		}
	};

	_pEditNormal.utf8Len = function (codePoint) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			throw new Error("Illegal argument: " + codePoint);
		}
		if (codePoint < 0) {
			throw new Error("Illegal argument: " + codePoint);
		}
		if (codePoint <= 0x7F) {
			return 1;
		}
		if (codePoint <= 0x7FF) {
			return 2;
		}
		if (codePoint <= 0xFFFF) {
			return 3;
		}
		if (codePoint <= 0x1FFFFF) {
			return 4;
		}
		if (codePoint <= 0x3FFFFFF) {
			return 5;
		}
		if (codePoint <= 0x7FFFFFFF) {
			return 6;
		}
		throw new Error("Illegal argument: " + codePoint);
	};

	_pEditNormal.isHighSurrogate = function (codeUnit) {
		return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;
	};

	_pEditNormal.isLowSurrogate = function (codeUnit) {
		return codeUnit >= 0xDC00 && codeUnit <= 0xDFFF;
	};

	_pEditNormal.toCodepoint = function (highCodeUnit, lowCodeUnit) {
		if (!this.isHighSurrogate(highCodeUnit)) {
			throw new Error("Illegal argument: " + highCodeUnit);
		}
		if (!this.isLowSurrogate(lowCodeUnit)) {
			throw new Error("Illegal argument: " + lowCodeUnit);
		}
		highCodeUnit = (0x3FF & highCodeUnit) << 10;
		var u = highCodeUnit | (0x3FF & lowCodeUnit);
		return u + 0x10000;
	};

	_pEditNormal.utf8ByteCount = function (elem, str, bRetStr, checkLen) {
		if (str === undefined) {
			return 0;
		}

		var count = 0;

		if (bRetStr) {
			var comp = this.comp;

			if (checkLen === undefined) {
				checkLen = comp.maxlength;
			}
			var stopPos = str.length;
			for (var i = 0, n = str.length; i < n; i++) {
				var ch = str.charCodeAt(i);
				if (this.isHighSurrogate(ch)) {
					var high = ch;
					var low = str.charCodeAt(++i);
					count += this.utf8Len(this.toCodepoint(high, low));
				}
				else {
					count += this.utf8Len(ch);
				}
				if (checkLen == count) {
					stopPos = i;
					break;
				}
				else if (checkLen < count) {
					stopPos = i - 1;
					break;
				}
			}
			return {
				"len" : count, 
				"str" : str.substring(0, stopPos + 1)
			};
		}

		for (var i = 0, n = str.length; i < n; i++) {
			var ch = str.charCodeAt(i);

			if (this.isHighSurrogate(ch)) {
				var high = ch;
				var low = str.charCodeAt(++i);
				count += this.utf8Len(this.toCodepoint(high, low));
			}
			else {
				count += this.utf8Len(ch);
			}
		}
		return count;
	};

	_pEditNormal.asciiByteCount = function (elem, str, bRetStr, checkLen) {
		if (str === undefined) {
			return 0;
		}

		var j = 0, val;
		if (bRetStr) {
			var comp = this.comp;

			if (checkLen === undefined) {
				checkLen = comp.maxlength;
			}
			var stopPos = str.length;
			for (var i = 0, n = str.length; i < n; i++) {
				val = str.charCodeAt(i);
				var char = str.substr(i, 1);
				if (val > 255 && !this._is_half_japaness(char)) {
					j++;
					if (checkLen >= j) {
						stopPos = i - 1;
					}
				}
				j++;
				if (checkLen >= j) {
					stopPos = i;
				}
			}
			return {
				"len" : j, 
				"str" : str.substring(0, stopPos + 1)
			};
		}
		else {
			for (var i = 0, n = str.length; i < n; i++) {
				val = str.charCodeAt(i);
				var char = str.substr(i, 1);
				if (val > 255 && !this._is_half_japaness(char)) {
					j++;
				}
				j++;
			}
			return j;
		}
	};

	_pEditNormal.deleteChar = function (bBack) {
		var text = this._text ? this._text : "";

		var begin_pos = this._begin_pos;
		var end_pos = this._end_pos;

		if (bBack) {
			if (begin_pos == end_pos) {
				if (nexacro.OS == "iOS") {
					var v = text.substr(begin_pos - 1 < 0 ? 0 : begin_pos - 1, 1);
					if (this._is_dakuten(v) || this._is_handakuten(v)) {
						var i = begin_pos - 1;

						while (this._is_dakuten(v) || this._is_handakuten(v)) {
							i--;
							if (i < 0) {
								break;
							}
							v = text.substr(i < 0 ? 0 : i, 1);
						}

						begin_pos = i;
					}
					else {
						begin_pos--;
					}
				}
				else {
					begin_pos--;
				}
			}
		}
		else {
			if (begin_pos == end_pos) {
				end_pos++;
			}
		}

		var strFront = text.substr(0, begin_pos);
		var strRear = text.substr(end_pos, text.length - end_pos);
		var newText = strFront + strRear;

		if (text != newText) {
			this._setText(newText);

			if ((nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) && 
				this._is_composition()) {
				var _begin_pos = _end_pos = this._input_begin_pos;

				if (bBack) {
					if (--_begin_pos < 0) {
						_begin_pos = 0;
					}
				}
				else {
					++_end_pos;
				}
				var f_v = this._value ? this._value.substr(0, _begin_pos) : "";
				var r_v = this._value ? this._value.substr(_end_pos) : "";
				this._setValue(f_v + r_v);
				this.setElementCaretPos(_begin_pos, _begin_pos);
				return true;
			}

			if (nexacro.OS != "iOS" || (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari" && !this._is_composition())) {
				this._setValue(newText);
			}
			this.setElementCaretPos(begin_pos, begin_pos);

			return true;
		}
		else {
			return false;
		}
	};

	_pEditNormal._on_default_input_keydown = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var E = nexacro.Event;
		var comp = this.comp;
		if (!comp) {
			return false;
		}

		var readonly = comp.readonly;

		var ret = true;

		if (readonly == true) {
			this.onUpdateStyle(comp);
			if (ctrlKey && keyCode == 67 || ctrlKey && keyCode == 65) {
				return true;
			}

			return false;
		}

		var _input_begin_pos = this._input_begin_pos;
		if (this._check_maxlength()) {
			this._setCaret(elem);

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				this._input_begin_pos = _input_begin_pos;
			}
		}

		if (keyCode == nexacro.KeyCode_ImeInput) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (nexacro.OSVersion < 6.0 && !this._is_composition()) {
					this._set_input_begin_pos(this._old_begin_pos);
				}
			}

			if (nexacro.BrowserType == "Edge") {
				if (this._is_composition() && this._is_hangul(this.getCompositionData(elem))) {
					if (this._accept_hangul) {
						if (this._stat_composition.getPreviousStatus() == nexacro.EditBase.Status.CompositionEnd) {
							var data = this.getCompositionData(elem);
							this._on_input_compositionend(data);
							this._fire_text_event(data);
							this._on_input_compositionstart(data);
						}
					}
				}
			}
		}
		else {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				if (this._is_composition()) {
					var data = this.getCompositionData(elem);
					if (keyCode == E.KEY_BACKSPACE || keyCode == E.KEY_DELETE) {
						if (this._is_hangul(data)) {
							this._on_input_compositionend("");
							this._stat_composition.init();
							this._compositionend_value = "";
						}
					}
					else if (keyCode == E.KEY_SPACE || keyCode == E.KEY_ESC || (keyCode >= E.KEY_PAGE_UP && keyCode <= E.KEY_DOWN)) {
						if (this._is_hangul(data)) {
							this._on_input_compositionend(data);
							this._fire_text_event(data);
							this._on_input_keyinput(elem);
						}
					}
				}
			}
			else {
				if (this._is_composition() && ((keyCode == E.KEY_BACKSPACE && (nexacro.Browser != "MobileSafari" || (nexacro.Browser == "MobileSafari" && this._is_hangul(this.getCompositionData(elem)))))
					 || keyCode == E.KEY_DELETE || (nexacro.OS != "iOS" && keyCode == E.KEY_SPACE) || (keyCode >= E.KEY_PAGE_UP && keyCode <= E.KEY_DOWN))) {
					if (this._is_hangul(this.getCompositionData(elem))) {
						this._on_input_compositionend("");
						this._stat_composition.init();
						this._compositionend_value = "";
					}
				}

				if (nexacro.BrowserType == "Edge" && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd) {
					var data = this._stat_composition.getData();
					if (this._is_hangul(data)) {
						this._on_input_compositionend(data);
						this._fire_text_event(data);
					}
				}
			}

			if (!shiftKey) {
				var pos = elem.getElementCaretPos();
				if (pos != -1) {
					if (keyCode == E.KEY_LEFT) {
						if (pos.begin > 0) {
							this._set_input_begin_pos(this._begin_pos = this._end_pos = elem.getElementCaretPos().begin - 1);
						}
					}
					else if (keyCode == E.KEY_RIGHT) {
						if (pos.begin < this._text.length) {
							this._set_input_begin_pos(this._begin_pos = this._end_pos = elem.getElementCaretPos().begin + 1);
						}
					}
				}
			}

			if (keyCode == E.KEY_TAB) {
				if (this._is_composition()) {
					var data = this.getCompositionData(elem);
					this._on_input_compositionend(data);
					this._fire_text_event(data);
				}

				if (comp.acceptstab || (ctrlKey && !comp.acceptstab)) {
					this.insertTabChar(elem);
					this._on_input_keyinput(elem);

					elem._event_stop = true;
					return false;
				}
			}

			if (ctrlKey && (keyCode == 90)) {
				if ((nexacro.Browser == "IE" && nexacro.BrowserVersion >= 10) || nexacro.Browser != "IE") {
					this._is_undo = true;
					this._undoStack.doUndo();
					this._setCaret(elem);
					if (!this._is_composition()) {
						this._stat_composition.init();
						this._on_input_keyinput(elem);
					}
				}
				else {
					this._stat_composition.init();
					this._on_input_keyinput(elem);

					this._is_undo = true;
					this._undoStack.doUndo();
					this._setCaret(elem);
				}

				this._on_input_keyinput(elem);
				this._is_undo = false;

				elem._event_stop = true;
				return false;
			}
			else if (ctrlKey && (keyCode == 89)) {
				this._is_undo = true;
				this._undoStack.doRedo();
				this._setCaret(elem);
				if (!this._is_composition()) {
					this._stat_composition.init();
					this._on_input_keyinput(elem);
				}
				this._on_input_keyinput(elem);
				this._is_undo = false;

				elem._event_stop = true;
				return false;
			}
		}

		if (keyCode == 229) {
			this._accept_select_event = false;
		}

		var movefocus = false;
		if (keyCode == E.KEY_TAB && comp && comp.acceptstab == false) {
			movefocus = true;
		}

		if (nexacro.BrowserType == "Edge") {
			if (!this._is_composition()) {
				this.onUpdateStyle(comp, movefocus);
			}
		}
		else {
			this.onUpdateStyle(comp, movefocus);
		}

		this._keycode = keyCode;
		this._altkey = altKey;
		this._ctrlkey = ctrlKey;
		this._shiftkey = shiftKey;
		this._metakey = metaKey;
	};

	_pEditNormal._on_default_input_keypress = function (elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey) {
		var k = charCode || keyCode;
		var ret = true;
		var bEvtRet;
		var bFireEvt = false;
		var bPrevent = false;
		var bMaxlength = false;
		var bFilterchar = false;

		var comp = this.comp;
		var cur_text = elem.getElementValue();
		var text = this._text ? this._text : "";
		var text_info = this._textEventInfo;

		var begin_pos = this._input_begin_pos;
		var end_pos = this._end_pos;
		var undo_pos = begin_pos;

		this._charcode = charCode;

		if (!comp) {
			return false;
		}

		if (elem.readonly) {
			if (k == nexacro.Event.KEY_BACKSPACE) {
				elem._event_stop = true;
			}
			return false;
		}

		var _is_enter_hangul = false;

		if ((nexacro.OS == "iOS" || nexacro.BrowserType == "Edge") && (k == nexacro.Event.KEY_ENTER)) {
			var iospos = this._begin_pos - 1 >= 0 ? this._begin_pos - 1 : 0;
			var ioschartext = "";
			if (text != elem.text) {
				ioschartext = text.substr(iospos, 1);
			}
			if (this._is_hangul(ioschartext) && this._begin_pos > 0) {
				_is_enter_hangul = true;
			}
		}

		if (k == nexacro.Event.KEY_BACKSPACE || (k == nexacro.Event.KEY_DELETE && k == this._keycode) || (nexacro.Browser == "MobileSafari" && k == 127)) {
			var ret1 = this.deleteChar(k == 8 ? true : false);
			this._select_text = "";

			if ((nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) && k == nexacro.Event.KEY_BACKSPACE) {
				this._set_input_begin_pos(this._begin_pos);
			}

			text_info.setTextInfo("", text, this._text, "", "", text);
			undo_pos = this._begin_pos;
			bFireEvt = ret1;
		}
		else if (k != nexacro.KeyCode_ImeInput && (k != nexacro.Event.KEY_ENTER || _is_enter_hangul) && charCode != 0) {
			if (elem.password && elem.maxlength > 0 || _is_enter_hangul) {
				var chartext = String.fromCharCode(k);
				if (_is_enter_hangul) {
					chartext = ioschartext;
				}
				var old_chartext = chartext;

				chartext = this.applyInputmode(chartext);

				chartext = this._apply_inputfilter(chartext);

				chartext = this._apply_inputtype(chartext);

				if (old_chartext != chartext && chartext.length == 0) {
					bFireEvt = false;
					bFilterchar = true;
				}
				else {
					if (_is_enter_hangul) {
						var strFront = text.substr(0, iospos);
						var strRear = text.substr(this._end_pos, text.length - this._end_pos);
						var newText = strFront + ioschartext + strRear;

						text_info.setTextInfo(ioschartext, text, newText, "", "", text);
						undo_pos = iospos;

						bFireEvt = true;

						this._compositionend_value = newText;
						this._on_input_compositionend(ioschartext);

						if (nexacro.Browser == "MobileSafari") {
						}
					}
					else {
						var strFront = text.substr(0, begin_pos);
						var strRear = text.substr(end_pos, text.length - end_pos);
						var newText = strFront + chartext + strRear;

						text_info.setTextInfo("", text, newText, "", "", text);
						undo_pos = begin_pos + text_info.chartext.length;

						if (newText.length > elem.maxlength) {
							bMaxlength = true;
						}
						bFireEvt = true;
						if (nexacro.Browser == "MobileSafari") {
							this._accept_keyinput_event = false;
						}
					}
				}
			}

			if ((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") && keyCode == 27) {
				if (cur_text != text) {
					text_info.setTextInfo("", text, cur_text, "", "", text);
					bFireEvt = true;
				}
			}
		}

		if (bFireEvt) {
			var textEvt = new nexacro.TextChangeEventInfo(comp, "ontextchange", text_info.chartext, text_info.pretext, nexacro._isNull(text_info.posttext) ? "" : text_info.posttext, text_info.preimetext, text_info.postimetext);
			bEvtRet = comp.on_fire_ontextchange(textEvt);

			if (comp._is_set_value) {
				this._updateEventInfo(text_info, textEvt);
				comp._is_set_value = false;
			}

			var is_ios_composition = false;
			if (bEvtRet) {
				if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
					var curr_stat = this._stat_composition.getCurrentStatus();
					if (k == 8 && curr_stat != nexacro.EditBase.Status.CompositionEnd && curr_stat != "none") {
						bEvtRet = false;
						is_ios_composition = true;
					}
				}

				if (bEvtRet) {
					bEvtRet = comp.on_fire_cancharchange(comp, textEvt.chartext, textEvt.pretext, textEvt.posttext);
				}
				if (comp._is_set_value) {
					this._updateEventInfo(text_info, textEvt);
					comp._is_set_value = false;
				}
				if (bEvtRet || !bEvtRet && is_ios_composition) {
					if (bEvtRet) {
						var charEvt = new nexacro.TextChangeEventInfo(comp, "onchar", textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
						if ((nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") || nexacro.BrowserType == "Edge") {
							bEvtRet = comp.on_fire_onchar(text_info, charEvt);

							if (bEvtRet && text_info.chartext != charEvt.chartext) {
								text_info.chartext = charEvt.chartext;
								if (nexacro.BrowserType == "Edge") {
									var strFront = text_info.pretext.substr(0, this._input_begin_pos - 1);
								}
								else {
									var strFront = text_info.pretext.substr(0, this._input_begin_pos);
								}
								var strRear = text_info.pretext.substr(end_pos, text_info.pretext.length - end_pos);

								if (comp._is_set_value) {
									this._updateEventInfo(text_info, textEvt);
									comp._is_set_value = false;
									strFront = textEvt.posttext;
									strRear = "";
									textEvt.posttext = strFront + charEvt.chartext + strRear;
								}

								text_info.posttext = strFront + charEvt.chartext + strRear;

								this._setText(text_info.posttext);
								elem.setElementValue(text_info.posttext);
								this.setElementCaretPos(this._begin_pos, this._begin_pos, elem);
							}
							else {
								if (comp._is_set_value) {
									this._updateEventInfo(text_info, textEvt);
									comp._is_set_value = false;
								}
							}
						}
						else {
							bEvtRet = comp.on_fire_onchar(text_info, charEvt);
							if (comp._is_set_value) {
								this._updateEventInfo(text_info, textEvt);
								comp._is_set_value = false;
							}
						}
					}

					if (bEvtRet || !bEvtRet && is_ios_composition) {
						if (bMaxlength) {
							bEvtRet = false;
						}
						else if (text_info.pretext != text_info.posttext) {
							if (nexacro.OS != "iOS" || (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari" && !this._is_composition())) {
								this._setText(text_info.posttext);

								if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) {
									if (!this._is_composition()) {
										this._setValue(text_info.posttext);
									}
								}
								else {
									this._setValue(text_info.posttext);
								}

								if (nexacro.Browser != "Runtime" && elem
									 && (keyCode == nexacro.Event.KEY_DELETE || keyCode == nexacro.Event.KEY_BACKSPACE)) {
									if (!(nexacro.Browser == "Chrome" && nexacro._isDesktop() && this._is_composition())) {
										elem.setElementValue(this._text, true);
									}

									this.setElementCaretPos(this._begin_pos, this._begin_pos, elem);
									elem._event_stop = true;
								}
								else {
									this.setElementCaretPos(this._begin_pos, this._begin_pos);
								}
								this.syncValue();
							}

							if (!this._is_undo) {
								this._undoStack.push(this._value, this._text, undo_pos, undo_pos);
							}

							comp._textchanging = true;
							comp.on_fire_ontextchanged(comp, text_info.pretext, text_info.posttext);
							comp._textchanging = false;
						}
						else {
							if (_is_enter_hangul) {
								this._setText(text_info.posttext);
								this._setValue(text_info.posttext);
								this.setElementCaretPos(this._begin_pos, this._begin_pos);
								this.syncValue();

								if (!this._is_undo) {
									this._undoStack.push(this._value, this._text, undo_pos, undo_pos);
								}

								comp._textchanging = true;
								comp.on_fire_ontextchanged(comp, text_info.pretext, text_info.posttext);
								comp._textchanging = false;
							}
							else {
								ret = false;
								bPrevent = true;
							}
						}

						if (comp._is_set_value) {
							this._updateEventInfo(text_info);
							comp._is_set_value = false;
						}
					}
				}
			}

			if (!bEvtRet && !is_ios_composition) {
				ret = false;
				bPrevent = true;

				this._setText(text);
				this._setValue(text);
				this.syncValue();

				this.setElementCaretPos(this._old_begin_pos, this._old_end_pos);

				if (this._is_selected()) {
					this._select_text = this._text.substring(this._begin_pos, this._end_pos);
				}
			}

			if (elem.password && elem.maxlength > 0 && comp.autoskip) {
				if (bMaxlength) {
					this._autoskip_from_text_event(chartext);
				}
			}

			is_ios_composition = null;
		}
		else if ((nexacro.OS == "iOS" && ((this.comp.inputtype == "number" && !(keyCode == nexacro.Event.KEY_ENTER)) || (charCode >= 12593 && charCode <= 12643))) || keyCode == nexacro.Event.KEY_SPACE) {
			bPrevent = this._check_keypressPrevent(keyCode);
			if (bPrevent) {
				ret = false;
			}
		}

		if (bFilterchar && (nexacro.Browser == "MobileSafari" || nexacro.Browser == "Safari")) {
			ret = false;
			bPrevent = true;

			this._setText(text);
			this._setValue(text);
			this.syncValue();

			this.setElementCaretPos(this._old_begin_pos, this._old_end_pos);

			if (this._is_selected()) {
				this._select_text = this._text.substring(this._begin_pos, this._end_pos);
			}
		}

		if (bPrevent) {
			elem._event_stop = true;
		}

		this.onUpdateStyle(this.comp);
		return ret;
	};

	_pEditNormal._on_default_input_keyup = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		var comp = this.comp;
		var k = keycode;
		var curTxt = this._val;

		this._accept_select_event = true;
		this._altkey = altKey;
		this._ctrlkey = ctrlKey;
		this._shiftkey = shiftKey;
		this._metakey = metaKey;

		if ((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") && nexacro.BrowserVersion >= 9 && (k == 8 || k == 46)) {
			this._text = elem.getElementValue();
		}

		if ((k == 0 || k == 13) || (ctrlKey && k == 90)) {
			if (!curTxt || (curTxt && !this._is_hangul(curTxt.charAt(this._begin_pos)))) {
				if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
					if (this._is_composition()) {
						var data = this.getCompositionData(elem);
						this._on_input_compositionend(data);

						this._fire_text_event(data);
						this.onUpdateStyle(this.comp);
					}
				}
			}
		}

		if (k == 13) {
			var elem_val = elem.getElementValue();
			if (((nexacro.Browser == "IE" && nexacro.BrowserVersion == 9) || nexacro.OS == "iOS") && 
				elem_val != this._value && !this._is_composition()) {
				this._setText(elem_val);
				this._setValue(elem_val);
				this.syncValue();
			}

			this._keyup_process_enter(elem);
		}

		if (k == 27) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (this._is_composition()) {
					var data = this._stat_composition.getData();

					if (this._is_hangul(data)) {
						this._on_input_compositionend("");
					}
					else {
						this._on_input_compositionend(data);
					}
					this._fire_text_event(data);
				}
			}
		}

		if (k == 8) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11 || nexacro.BrowserType == "Edge") {
				if (this._is_composition()) {
					if (this._text == "" && this.getCompositionData(elem) == "") {
						this._on_input_compositionend("");
						this._fire_text_event("");
					}
				}
			}
			else if (nexacro.Browser == "IE" && nexacro.OSVersion >= 6.0) {
				var pos = elem.getElementCaretPos();
				if (this._is_composition() && (pos.begin != this._begin_pos)) {
					if ((this._compositionstart_value == this._text) && (this.getCompositionData(elem) == "")) {
						this._on_input_compositionend("");
						this._fire_text_event("");
					}
				}
			}
			else {
				if (this._is_composition()) {
					if ((this._compositionstart_value == this._text) && (this.getCompositionData(elem) == "")) {
						this._on_input_compositionend("");
						this._fire_text_event("");
					}
				}
			}
		}

		if (nexacro.Browser == "IE" && nexacro.OSVersion < 6.0) {
			var data = this.getCompositionData(elem);
			if ((keycode == 121 || keycode == 120) && this._is_composition() && !this._is_hangul(data)) {
				this._on_input_compositionupdate(data);
			}
			else {
				var pThis = this;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					pThis._setCaret(elem);
				}, 0);
			}
		}
		else if (nexacro.OS == "iOS") {
			if (this._filteredtext) {
				this._filteredtext = false;
				this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
			}
			else {
				this._setCaret(elem);
			}
		}
		else {
			if (!(nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11))) {
				var bInsert = this._check_maxlength_from_text_event();
				if (!bInsert) {
					var node_value = null;
					if (elem._input_handle && nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
						node_value = elem._input_handle.value;
					}

					var comp_text = this._text;
					var maxlength = this.comp.maxlength;
					if (maxlength && (comp_text.length > maxlength || (node_value && node_value.length > maxlength))) {
						if (!(this._is_composition() && !this._is_hangul(this.getCompositionData(elem)))) {
							var text = comp_text.substr(0, maxlength);

							elem.setElementValue(text);
						}
					}
				}
			}

			if (nexacro.BrowserType == "Edge" && this._is_composition()) {
				if (this._is_hangul(this.getCompositionData(elem)) && this._is_selected && !this._is_selected()) {
					this._setCaret(elem);
				}
				else {
					var pThis = this;
					setTimeout(function () {
						pThis._setCaret(elem);
					}, 0);
				}
			}
			else {
				if (nexacro.BrowserType == "Edge" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 11)) {
					if (this._keycode != 229 || (this._keycode == 229 && this._accept_hangul)) {
						this._setCaret(elem);
					}
				}
				else {
					this._setCaret(elem);
				}
			}
		}


		var selected = this._is_selected();
		if (!shiftKey && (k >= 37 && k <= 40) && !selected) {
			this._select_text = "";
		}

		if (!this._is_composition()) {
			this._compositionend_value = "";
			this._stat_composition.init();
		}

		this._charcode = 0;

		if (nexacro.OS == "Android" && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && this._is_mobile_drag) {
			var _lg_flag = window.navigator.appVersion.indexOf("LG");
			var elem_text = elem.getElementValue();

			if (_lg_flag > 0) {
				if (this._is_composition()) {
					if (!this._is_hangul(this.getCompositionData(elem))) {
						var text_array = elem_text.split(this._textEventInfo.postimetext);
						var len = text_array.length;

						elem_text = "";
						for (var i = 0; i < len; i++) {
							if (text_array[i] != "") {
								elem_text += text_array[i];
							}
						}

						elem.setElementValue(null);
						elem.setElementBlur();
						elem.setElementFocus();
						elem.setElementValue(elem_text);
						elem._input_handle.value = elem_text;

						this.setElementCaretPos(this._mobile_elme_pos, this._mobile_elme_pos, elem);
						this.clearBuffer(elem_text, this._mobile_elme_pos, this._mobile_elme_pos);

						text_array = len = null;
					}
				}
				else {
					elem.setElementValue(null);
					elem.setElementValue(elem_text);
					this.setElementCaretPos(this._mobile_elme_pos, this._mobile_elme_pos, elem);
				}
			}
			else {
				elem.setElementValue(null);
				elem.setElementValue(elem_text);
				this.setElementCaretPos(this._mobile_elme_pos, this._mobile_elme_pos, elem);

				if (this._is_composition()) {
					this._compositionend_value = "";
					this._stat_composition.init();
				}
			}
			this._is_mobile_drag = false;
			elem_text = _lg_flag = null;
		}
	};

	_pEditNormal._check_maxlength = function () {
		var comp = this.comp;
		var elem = comp._input_element;
		var value = this._value;

		if (!value) {
			value = "";
		}

		if (comp.maxlength > 0) {
			if (value.length) {
				var str = this.getLength(elem, value, true);

				if (comp.maxlength <= str.len) {
					return false;
				}
			}
		}
		return true;
	};

	_pEditNormal._check_maxlength2 = function (insertText) {
		if (!insertText || insertText.length == 0) {
			return true;
		}

		var comp = this.comp;
		var elem = comp._input_element;
		var value = elem.getElementValue();

		if (!value) {
			value = "";
		}

		if (comp.maxlength > 0) {
			var begin_pos = this._input_begin_pos;
			var end_pos = begin_pos + insertText.length;
			value = value.substr(0, begin_pos) + value.substr(end_pos, value.length - end_pos);

			if (value.length) {
				var str = this.getLength(elem, value, true);

				if (comp.maxlength <= str.len) {
					return false;
				}
			}
		}
		return true;
	};

	_pEditNormal._apply_maxlength = function (insertText) {
		var comp = this.comp;
		var elem = comp._input_element;
		var text = insertText;
		var value = this._value;

		if (!value) {
			value = "";
		}

		if (comp.maxlength > 0) {
			var str = this.getLength(elem, value, true);

			if (comp.maxlength > str.len) {
				text = this.getLength(elem, insertText, true, comp.maxlength - str.len).str;
			}
		}

		return text;
	};

	_pEditNormal._apply_maxlength2 = function (insertText) {
		var comp = this.comp;
		var elem = comp._input_element;
		var text = insertText;
		var value = elem.getElementValue();

		if (!value) {
			value = "";
		}

		if (comp.maxlength > 0) {
			var begin_pos = this._input_begin_pos;
			var end_pos = begin_pos + insertText.length;
			value = value.substr(0, begin_pos) + value.substr(end_pos, value.length - end_pos);

			var str = this.getLength(elem, value, true);

			if (comp.maxlength > str.len) {
				text = this.getLength(elem, insertText, true, comp.maxlength - str.len).str;
			}
		}

		return text;
	};

	_pEditNormal._apply_inputfilter = function (v) {
		if (!v) {
			v = "";
		}

		var len = v ? v.length : 0;
		var valArr = v.split("");
		var text = [];

		for (var i = 0; i < len; i++) {
			var c = valArr[i];

			if (this._filterRegex) {
				if (this._filterRegex.test(c)) {
					continue;
				}
			}
			text.push(c);
		}

		text = text.join("");

		return text;
	};

	_pEditNormal._apply_inputtype = function (v) {
		if (!v) {
			v = "";
		}

		v = v.replace(/\r\n/g, "\n");

		var inputtype = this.comp.inputtype;
		var len = v ? v.length : 0;
		var valArr = v.split("");
		var text = [];

		for (var i = 0; i < len; i++) {
			var c = valArr[i];

			if (c != '\n' && this._typeRegex) {
				if (!this._typeRegex.test(c)) {
					if (inputtype.indexOf("full") != -1) {
						if (this.getWCharLen(c) == 1 || (this._typeRegex1 && this._typeRegex1.test(c))) {
							continue;
						}
					}
					else {
						continue;
					}
				}
				if ((inputtype.indexOf("full") == -1) && this.getWCharLen(c) > 1) {
					if (!(this._is_half_japaness(c))) {
						continue;
					}
				}
			}
			text.push(c);
		}

		text = text.join("");

		return text;
	};

	_pEditNormal._focus_process = function (elem, mflag) {
		var comp = this.comp;
		var win = comp._getWindow();
		var cur_text = elem.getElementValue();

		if (elem._is_ios_composition_returned) {
			this._setCaret(elem);
			elem._is_ios_composition_returned = false;
		}
		else {
			this._setText(cur_text);
		}

		if (win && win._keydown_element && comp._setcaret) {
			this.setElementCaretPos(comp._caret_pos.begin, comp._caret_pos.end, elem);
			comp._setcaret = false;
		}

		if (nexacro.Browser == "Safari") {
			if (this._is_composition()) {
				this._is_compositionfocus = true;
			}
			else {
				this._is_compositionfocus = false;
			}
		}

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			if (this._is_composition()) {
				elem.setElementValue(null);
				elem.setElementValue(cur_text);
				this.setElementCaretPos(this._begin_pos, this._begin_pos, elem);
			}
		}

		this._apply_autoselect(elem, mflag);
		this._stat_focus.setStatus(nexacro.EditBase.Status.Focus);
	};

	_pEditNormal._blur_process = function (elem) {
		if (this._is_composition()) {
			var skip = false;
			if ((nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") && 
				this._value == elem.getElementValue()) {
				skip = true;
			}

			if (!skip) {
				if (this.getCompositionData(elem)) {
					var data = this.getCompositionData(elem);
				}
				else {
					var data = this._stat_composition.getData(elem);
					if (nexacro.Browser != "MobileSafari" && data == elem.getElementValue()) {
						data = "";
					}
				}

				if (nexacro.BrowserType == "Edge" && data == "" && this._is_hangul(this._stat_composition.getData())) {
					data = this._stat_composition.getData();
				}

				var proc_fire_text_event = this._on_input_compositionend(data);

				elem.setInputElementCompositeClear();

				if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
					if (elem._is_ios_composition_returned) {
						var maxlength = this.comp.maxlength;
						var begin_pos = this._input_begin_pos;
						var len = (data != "") ? (begin_pos + data.length) : (begin_pos + elem.getElementValue().length);

						if (this._input_begin_pos < this._end_pos && len > this._end_pos) {
							this._is_ios_composition_touch = true;
						}

						if (maxlength > 0) {
							if (this._focus_text.length >= maxlength) {
								if (this.comp._bind_event) {
									if (this._old_text == this._focus_text) {
										elem.setElementValue(null);
										elem.setElementValue(this._focus_text);
									}
								}
								else {
									if (this._old_text == this._focus_text) {
										elem.setElementValue(null);
										elem.setElementValue(this._focus_text);
									}
									else {
										if (this._focus_value && this._focus_value == this._value) {
											elem.setElementValue(null);
											elem.setElementValue(this._focus_value);
										}
									}
								}
							}
							else if (this._focus_text.length <= maxlength && this._value >= maxlength) {
								elem.setElementValue(null);
								elem.setElementValue(this._value);
							}
						}

						elem._is_ios_composition = false;
						maxlength = null;
						begin_pos = null;
						len = null;
					}

					if (this.comp.maxlength > 0 && this._is_ios_composition_touch && !elem._is_ios_composition_returned && data != "") {
						this._is_ios_composition_touch = false;
						data = "";
					}

					if (data != "" && this._filteredtext) {
						if (this._text == elem.getElementValue() && !elem._is_ios_composition_returned) {
							data = "";
							elem._is_ios_composition = false;
						}

						if (!this._is_hangul(data) && !this._is_on_killfocus && this._focus_text == elem.getElementValue()) {
							data = "";
						}
					}
				}
				if (!proc_fire_text_event) {
					this._fire_text_event(data);
				}
			}

			this._stat_composition.init();
			this._compositionend_value = "";

			this.onUpdateStyle(this.comp);
		}



		if (nexacro.BrowserType == "Edge" && !this._is_composition()) {
			var data = this._stat_composition.getData();
			if (this._is_hangul(data) && this._charcode != nexacro.Event.KEY_ENTER) {
				this._fire_text_event(data);
				this._stat_composition.init();
				this._compositionend_value = "";
				this.onUpdateStyle(this.comp);
			}
		}

		this._setCaret(elem);

		if (nexacro.Browser == "Gecko") {
			if (this._is_composition()) {
				if (this._is_on_killfocus) {
					elem.setElementBlur();
				}
			}
		}
	};

	_pEditNormal._mouseup_process = function (elem) {
		var caret = elem.getElementCaretPos();

		if (this._is_composition() || ((caret.begin != this._begin_pos && caret.end != this._end_pos) && nexacro.Browser != "Runtime")) {
			elem._useTimer = false;
			this._setCaret(elem);

			if (nexacro.BrowserType == "Edge" && caret.begin == caret.end) {
				this.comp._setcaret = false;
			}

			if (nexacro.BrowserType == "Edge") {
				if (this._text) {
					if (this._begin_pos == this._end_pos) {
						this._select_text = "";
					}
					else {
						this._select_text = this._text.substring(this._begin_pos, this._end_pos);
					}
				}
			}
		}
		else if (nexacro._isDesktop() && nexacro.Browser == "Runtime") {
			elem._useTimer = false;
			this._setCaret(elem);

			if (this._text) {
				if (this._begin_pos == this._end_pos) {
					this._select_text = "";
				}
				else {
					this._select_text = this._text.substring(this._begin_pos, this._end_pos);
				}
			}
		}
		else {
			elem._useTimer = true;

			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				if (!pThis._pasteAction) {
					if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
						var cur_text = elem.getElementValue();
						if (cur_text == "" && cur_text != pThis._text) {
							pThis._setText(cur_text);
							pThis._setValue(cur_text);
							pThis.syncValue();
						}
					}

					pThis._setCaret(elem);

					if (pThis._text) {
						if (pThis._begin_pos == pThis._end_pos) {
							pThis._select_text = "";
						}
						else {
							pThis._select_text = pThis._text.substring(pThis._begin_pos, pThis._end_pos);
						}
					}
				}
				else {
					pThis._do_set_caret = true;
				}
			});
		}
	};

	_pEditNormal._mousedown_process = function (elem) {
		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Runtime") {
			this._accept_select_event = true;
			if (this._is_composition()) {
				var data = this._stat_composition.getData();

				if (nexacro.Browser == "IE" || nexacro.Browser == "Runtime") {
					if (this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate) {
						var bCandidateChange = (this._end_pos - this._input_begin_pos) == data.length ? false : true;
						if (bCandidateChange) {
							data = this.getInsertText(elem);
						}
					}
				}

				if (this._is_hangul(data) && this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionUpdate) {
					this._accept_keyinput_event = false;
				}

				this._on_input_compositionend(data);

				this._fire_text_event(data);

				this._compositionend_value = "";
				this._stat_composition.init();

				if (!this._is_hangul(data)) {
					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
						this._accept_focus_event = false;
						elem.setElementBlur();
						elem.setElementFocus();
					}
					else if (nexacro.BrowserType == "Edge") {
						var editbase_text = this._text;
						elem.setElementValue(null);
						elem.setElementBlur();
						elem.setElementFocus();
						this._setText(editbase_text);
						elem.setElementValue(editbase_text);
						editbase_text = null;
					}
				}
			}
		}
	};

	_pEditNormal._keyup_process_enter = function (elem) {
		if (nexacro.Browser == "Runtime") {
			this._setText(elem.getElementValue());
		}
		var focus_text = this._getFocusText();
		var focus_val = this._getFocusValue();
		var cur_text = this._getText();
		var cur_val = this._getValue();

		if (focus_text != cur_text) {
			this.comp._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);
		}

		if (nexacro.BrowserType == "Edge" || nexacro.OS == "iOS") {
			var elem_val = elem.getElementValue();
			if (elem_val != cur_text) {
				elem.setElementValue(cur_text);
			}
		}
	};

	_pEditNormal._check_keypressPrevent = function (keyCode) {
		var ret = false;
		var chartext = String.fromCharCode(keyCode);
		var old_chartext = chartext;

		chartext = this._apply_inputfilter(chartext);

		chartext = this._apply_inputtype(chartext);

		if (old_chartext != chartext) {
			ret = true;
		}

		return ret;
	};

	delete _pEditNormal;
	_pEditNormal = null;

	nexacro.MultilineEdit = function (comp) {
		nexacro.EditBase.call(this, comp);

		if (comp) {
			this.comp = comp;
		}
	};

	_pMultilineEdit = nexacro._createPrototype(nexacro.EditNormal, nexacro.MultilineEdit);
	nexacro.MultilineEdit.prototype = _pMultilineEdit;

	_pMultilineEdit._type_name = "MultilineEdit";

	_pMultilineEdit.setPosition = function () {
		var comp = this.comp;
		var elem = comp._input_element;
		var control = comp._control_element;

		var container_width = comp._client_width;
		var container_height = comp._client_height;
		if (container_width == 0 || container_height == 0) {
			return;
		}

		if (elem && elem._handle) {
			var p = nexacro._getCachedPaddingObj("0 0 0 0");
			var align = comp.on_find_CurrentStyle_align(comp._pseudo);
			var padding = comp.on_find_CurrentStyle_padding(comp._pseudo);

			var valign = nexacro.Component._default_textarea_align.valign;
			var halign = align.halign;
			if ((comp.wordwrap == "none" || comp.wordwrap == "false" || comp.wordwrap == false) && (comp._scrollbars == 2 || comp._scrollbars == 3 || comp._scrollbars == 8 || comp._scrollbars == 12 || comp._scrollbars == 32)) {
				halign = nexacro.Component._default_textarea_align.halign;
			}

			elem.setElementPosition(0, 0, true);
			elem.setElementSize(container_width, container_height);
			if (padding && (padding.top || padding.right || padding.bottom || padding.left)) {
				elem.setElementPadding(padding);
			}
			else {
				elem.setElementPadding(p);
			}
			elem.setElementAlignXY(halign, valign);
		}
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		_pMultilineEdit._apply_autoselect = function (elem) {
			var comp = this.comp;

			if (comp.autoselect) {
				var text = this._select_text = this._text;
				var scrolltop = comp._input_element.getScrollTop();
				comp._scrolltop = scrolltop;
				var scrollleft = comp._input_element.getScrollLeft();

				this.setElementCaretPos(0, text.length, elem);

				if (scrolltop != comp._input_element.getScrollTop()) {
					comp._input_element.setScrollTop(scrolltop);
				}
				if (scrollleft != comp._input_element.getScrollLeft()) {
					comp._input_element.setScrollLeft(scrollleft);
				}
				this.onUpdateStyle(comp);
			}
		};
	}
	else if (nexacro.OS == "Android") {
		_pMultilineEdit._apply_autoselect = function (elem) {
			var comp = this.comp;

			if (comp.autoselect) {
				var pThis = this;
				var text = this._select_text = this._text;
				this._is_apply_autoselect = true;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					pThis.setElementCaretPos(0, text.length, elem);
				}, 0);
			}
		};
	}
	else {
		_pMultilineEdit._apply_autoselect = function (elem, mflag) {
			var comp = this.comp;

			if (comp.autoselect) {
				var text = this._select_text = this._text;
				this._is_apply_autoselect = true;


				this.setElementCaretPos(0, text.length, elem);

				if (nexacro.Browser == "Gecko") {
					var h_pos = comp.hscrollbar ? comp.hscrollbar.pos : 0;
					var v_pos = comp.vscrollbar ? comp.vscrollbar.pos : 0;

					nexacro.OnceCallbackTimer.callonce(comp, function () {
						if (comp.vscrollbar) {
							comp.vscrollbar.set_pos(v_pos);
						}
						if (comp.hscrollbar) {
							comp.hscrollbar.set_pos(h_pos);
						}
					}, 70);
				}
			}
		};
	}

	_pMultilineEdit.onUpdateStyle = function (comp, movefocus) {
		var scrolltop = 0;
		var scrollleft = 0;
		if (movefocus == true) {
			if (nexacro.OS == "Windows" && nexacro.Browser == "Runtime"
				 && comp && comp._input_element) {
				scrolltop = comp._input_element.getScrollTop();
				scrollleft = comp._input_element.getScrollLeft();
			}
			else {
				movefocus = false;
			}
		}

		this.setPosition();

		if (nexacro.SystemLang == "ja") {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
				comp._update_scroll();
			}
		}

		if (comp._refform) {
			nexacro.OnceCallbackTimer.callonce(comp, function () {
				if (movefocus == true) {
					if (comp.vscrollbar) {
						comp._input_element.setScrollTop(scrolltop);
					}
					if (comp.hscrollbar) {
						comp._input_element.setScrollLeft(scrollleft);
					}
				}

				comp._update_scroll();
			});
		}
		else {
			comp._update_scroll();
		}
	};

	_pMultilineEdit.onResetHScroll = function (comp) {
		comp._reset_hscroll();
	};

	_pMultilineEdit.insertTabChar = function (elem) {
		var newText = elem.getElementValue();
		var begin_pos = this._begin_pos;
		var end_pos = this._end_pos;

		var strFront = newText.substr(0, this._begin_pos);
		var strRear = newText.substr(this._end_pos, newText.length - this._end_pos);
		newText = strFront + this._strTab + strRear;

		begin_pos = begin_pos + this._strTab.length;

		this._text = newText;
		elem.setElementValue(newText);
		this.setElementCaretPos(begin_pos, begin_pos, elem);
	};

	_pMultilineEdit._keyup_process_enter = function (elem) {
		return;
	};

	_pMultilineEdit._on_getAccessibilityAdditionalLabel = function (direction) {
		var comp = this.comp;
		var input_elem = comp._input_element;

		if (input_elem && input_elem._wantAccessibilityAdditionalLabel) {
			if (!input_elem._wantAccessibilityAdditionalLabel()) {
				return "";
			}

			if (comp.text !== undefined && comp.value !== undefined) {
				if (!direction) {
					direction = 0;
				}
				return comp._getCaretLineString(null, direction);
			}
		}

		return "";
	};

	delete _pMultilineEdit;
	_pMultilineEdit = null;

	nexacro.EditMaskString = function (comp) {
		nexacro.EditBase.call(this, comp);

		if (comp) {
			this.comp = comp;
		}

		this._mask_PassWDST = "{";
		this._mask_PassWDED = "}";
		this._mask_MARKCHAR = "_";
		this._mask_PASSCHAR = "*";
		this._chkEmpty = String.fromCharCode(0x08);

		this._isPWInput = false;
		this._cPassChar = null;
		this._cMaskChar = null;

		this._value = null;
		this._text = "";
		this._strMaskedValue = [];

		this._bufMask = [];
		this._bufPass = [];
		this._strMask = [];

		this._keypress = false;
	};

	_pEditMaskString = nexacro._createPrototype(nexacro.EditBase, nexacro.EditMaskString);
	nexacro.EditMaskString.prototype = _pEditMaskString;

	_pEditMaskString._type_name = "EditMaskString";

	_pEditMaskString._maskChr = {
		"@" : /[\u0020-\u00ff]/, 
		"#" : /[0-9]/, 
		"*" : /[a-zA-Z]/, 
		"9" : /[a-zA-Z0-9]/, 
		"A" : /[A-Z]/, 
		"a" : /[a-z]/, 
		"Z" : /[A-Z0-9]/, 
		"z" : /[a-z0-9]/, 
		"!" : /[0-9]/
	};

	if (nexacro.OS != "iOS" && nexacro.OS != "Mac OS" && !(nexacro.Browser == "Chrome" && nexacro._isDesktop())) {
		_pEditMaskString._on_default_input_compositionstart = nexacro._emptyFn;
		_pEditMaskString._on_default_input_compositionupdate = nexacro._emptyFn;
		_pEditMaskString._on_default_input_compositionend = nexacro._emptyFn;
	}

	_pEditMaskString._init = function (bInit) {
		nexacro.EditBase.prototype._init.call(this, bInit);

		if (!this._cPassChar) {
			this._cPassChar = this._mask_PASSCHAR;
		}
		if (!this._cMaskChar) {
			this._cMaskChar = this._mask_MARKCHAR;
		}

		this._value = null;
		this._text = "";
		this._strMaskedValue = [];

		this._bufMask = [];
		this._bufPass = [];
		this._strMask = [];
	};

	_pEditMaskString._destroy = function () {
		this._cPassChar = null;
		this._cMaskChar = null;

		this._strMaskedValue = null;

		this._bufMask = null;
		this._bufPass = null;
		this._strMask = null;
		this._maskChr = null;

		nexacro.EditBase.prototype._destroy.call(this);
	};

	_pEditMaskString.setMask = function (strMask, bInit) {
		this._init(bInit);

		var bQuote = false;
		var bEscape = false;
		var bPasswd = false;

		var nLen = strMask.length;
		var cMasks = strMask.split("");
		var defs = this._maskChr;
		var Mask = 0;
		var i = 0;
		var nIdx = 0;

		for (i = 0; i < nLen; i++) {
			Mask = 0;

			if (bEscape == false && cMasks[i] == "'") {
				if (bQuote == false) {
					bQuote = true;
				}
				else {
					bQuote = false;
				}
				continue;
			}

			if (bEscape == false && cMasks[i] == "\\" && !bQuote) {
				bEscape = true;
				continue;
			}
			else if (bEscape) {
				bEscape = false;
			}
			else if (bQuote == false) {
				if (defs[cMasks[i]]) {
					Mask = defs[cMasks[i]];
				}
				if (cMasks[i] == this._mask_PassWDST) {
					bPasswd = true;
					continue;
				}
				if (cMasks[i] == this._mask_PassWDED) {
					bPasswd = false;
					continue;
				}
			}
			this._bufMask[nIdx] = Mask;
			this._bufPass[nIdx] = bPasswd;
			this._strMask[nIdx] = cMasks[i];
			nIdx++;
		}
		this._nMaxedLength = strMask.length;
	};

	_pEditMaskString.setValue = function (strValue) {
		var elem = this.comp._input_element;

		if (nexacro._isNull(strValue)) {
			this._setValue(strValue);
			this._setMaskedValue(this.makeMaskedValue(""));
			this._setText(this.makeText(this._strMaskedValue));
		}
		else {
			this._setValue(strValue.toString());
			this._setMaskedValue(this.makeMaskedValue(this._value));
			this._setText(this.makeText(this._strMaskedValue));
		}

		this._undoStack.push(this._value, this._text);

		if (elem) {
			elem.setElementValue(this._value, true);
		}
	};

	_pEditMaskString.isFilled = function () {
		var bufMask = this._bufMask;
		var nLen = bufMask.length;
		var val = this._strMaskedValue;

		if (nLen == 0) {
			return false;
		}

		for (var i = 0; i < nLen; i++) {
			if (bufMask[i] != 0 && val[i] == this._chkEmpty) {
				return false;
			}
		}
		return true;
	};

	_pEditMaskString.inputText = function (txt) {
		var isMax = false;
		var nLeft = this._begin_pos;
		var nRight = this._end_pos;

		var strText = this._text;
		var strMaskedValue = this._strMaskedValue.concat();

		if (nLeft != nRight) {
		}
		else {
			nLeft = this.findNextPos(strMaskedValue, nLeft - 1);
		}

		if (this._nMaxedLength <= nLeft) {
			isMax = true;
		}

		var nNewLeft = nLeft;
		var nLen = txt.length;
		var tmpArr = txt.split("");

		if (!isMax) {
			for (var i = 0; i < nLen; i++) {
				nNewLeft = this.onInputChar(strMaskedValue, tmpArr[i], nNewLeft);
			}

			strText = this.makeText(strMaskedValue);
		}

		return {
			newText : strText, 
			newMaskedValue : strMaskedValue, 
			end : nNewLeft
		};
	};

	_pEditMaskString.onInputChar = function (strMaskedValue, c, nPos) {
		var bUse = true;
		var Mask = this._bufMask[nPos];
		var strMask = this._strMask[nPos];
		if (Mask !== undefined && Mask != 0) {
			if (strMask == "A" || strMask == "Z") {
				c = c.toUpperCase();
			}
			else if (strMask == "a" || strMask == "z") {
				c = c.toLowerCase();
			}
			if (!Mask.test(c)) {
				bUse = false;
			}
		}
		else {
			return nPos;
		}

		if (bUse) {
			strMaskedValue[nPos] = c;
			nPos = this.findNextPos(strMaskedValue, nPos);
		}

		return nPos;
	};

	_pEditMaskString.deleteChar = function (bBack) {
		var text = this._text;
		var begin = this._begin_pos;
		var end = this._end_pos;

		if (bBack) {
			if (end == begin && begin != 0) {
				begin--;
			}
			this.clearBuffer2(this._text, this._strMaskedValue, begin, end);
		}
		else {
			if (end == begin && end < text.length) {
				end++;
			}
			this.clearBuffer2(this._text, this._strMaskedValue, begin, end);
		}
	};

	_pEditMaskString.syncValue = function () {
		var comp = this.comp;

		comp.value = this._value;
		comp.text = this._text;
	};

	_pEditMaskString.getValue = function () {
		if (!this._value) {
			return;
		}

		var str = this._value;

		if (this._nTrimType) {
			if (this._nTrimType == 1) {
				str = str.replace(/^\s+/, "");
			}
			else if (this._nTrimType == 2) {
				str = str.replace(/\s+$/, "");
			}
			else if (this._nTrimType == 3) {
				str = str.replace(/^\s+/, "");
				str = str.replace(/\s+$/, "");
			}
			return str;
		}
		return str;
	};

	_pEditMaskString.makeMaskedValue = function (strValue) {
		var strMask = this._strMask;
		var bufMask = this._bufMask;
		var defs = this._maskChr;

		strValue = strValue.split("");
		var maskLen = strMask.length;
		var nLen = strValue.length;

		var bOverlappedValue = false;
		var strMaskedValue = [];
		var Mask;
		var c, i, j;

		if (nLen == maskLen) {
			for (i = 0; i < nLen; i++) {
				if (bufMask[i] == 0 && strValue[i] == strMask[i]) {
					continue;
				}
				else if (bufMask[i] == 0) {
					break;
				}
			}
			if (i == strValue.length) {
				bOverlappedValue = true;
			}
		}

		for (i = 0, j = 0; i < maskLen; i++) {
			c = strMask[i];
			Mask = bufMask[i];

			if (Mask != 0 && defs[c]) {
				do {
					c = strValue[j];
					j++;
				} while (c && !Mask.test(c) && !(c == this._FillMaskChar) && !(c == "\u200e"));

				if (nexacro._isNull(c) || (c == this._FillMaskChar)) {
					c = this._chkEmpty;
				}
			}
			else if (bOverlappedValue && strMask[i] == c) {
				j++;
			}
			strMaskedValue[i] = c;
		}

		return strMaskedValue;
	};

	_pEditMaskString.makeText = function (strMaskedValue) {
		var i;
		var strText = [];
		var c;
		var Mask, Pass, strMask;

		var nLen = this._strMask.length;
		for (i = 0; i < nLen; i++) {
			c = strMaskedValue[i];
			Mask = this._bufMask[i];
			Pass = this._bufPass[i];
			strMask = this._strMask[i];
			if (Mask != 0) {
				if (nexacro._isNull(c) || c == this._chkEmpty || c == this._FillMaskChar) {
					c = this._cMaskChar;
				}
				else if (Pass) {
					c = this._cPassChar;
					this._isPWInput = true;
				}
				else if (strMask == "A" || strMask == "Z") {
					c = c.toUpperCase();
				}
				else if (strMask == "a" || strMask == "z") {
					c = c.toLowerCase();
				}
			}
			strText[i] = c;
		}

		return strText.join("");
	};

	_pEditMaskString.makeValue = function (strMaskedValue) {
		var i, j;
		var c;
		var Mask;
		var nLen = this._strMask.length;
		var strValue = [];

		for (i = 0, j = 0; i < nLen; i++) {
			Mask = this._bufMask[i];
			if (Mask != 0) {
				c = strMaskedValue[i];
				if (!nexacro._isNull(c) && c != this._chkEmpty) {
					strValue[j] = c;
					j++;
				}
				else if (!nexacro._isNull(this._FillMaskChar)) {
					strValue[j] = this._FillMaskChar;
					j++;
				}
			}
		}

		var newStr = strValue.join("");

		if (this._nTrimType) {
			if (this._nTrimType == 1) {
				newStr = newStr.replace(/^\s+/, "");
			}
			else if (this._nTrimType == 2) {
				newStr = newStr.replace(/\s+$/, "");
			}
			else if (this._nTrimType == 3) {
				newStr = newStr.replace(/^\s+/, "");
				newStr = newStr.replace(/\s+$/, "");
			}
		}

		return newStr;
	};

	_pEditMaskString.findFirstInputPos = function (strMaskedValue) {
		var i;
		var nLen = this._strMask.length;
		var c;
		var bHasSpace = false;

		for (i = 0; i < nLen; i++) {
			var Mask = this._bufMask[i];
			if (Mask != 0) {
				bHasSpace = true;
				c = strMaskedValue[i];
				if (c == this._chkEmpty || nexacro._isNull(c)) {
					return i;
				}
			}
		}

		if (bHasSpace) {
			return this.findPrevPos(strMaskedValue, nLen) + 1;
		}

		return 0;
	};

	_pEditMaskString.findNextPos = function (strMaskedValue, nPos) {
		var i;
		var nLen = this._strMask.length;
		var Mask;

		for (i = nPos + 1; i < nLen; i++) {
			Mask = this._bufMask[i];
			if (Mask != 0) {
				return i;
			}
		}
		for (i = 0; i < nLen; i++) {
			if (this._bufMask[i] != 0) {
				return this.findPrevPos(strMaskedValue, nLen) + 1;
			}
		}

		return nLen;
	};

	_pEditMaskString.findPrevPos = function (strMaskedValue, nPos) {
		var i;
		var nLen = this._strMask.length;
		var Mask;
		for (i = nPos - 1; i >= 0; i--) {
			Mask = this._bufMask[i];
			if (Mask != 0) {
				return i;
			}
		}
		for (i = nLen - 1; i >= 0; i--) {
			if (this._bufMask[i] != 0) {
				return this.findFirstInputPos(strMaskedValue);
			}
		}

		return 0;
	};

	_pEditMaskString.writeBuffer = function (elem) {
		var str;
		if (this._text) {
			str = this._text;
		}
		else {
			str = "";
		}
		var comp = this.comp;
		var displaynulltext = comp.displaynulltext;

		var val = elem.getElementValue();
		if (elem && val != str) {
			elem.setElementValue(str);
		}

		return str;
	};

	_pEditMaskString.clearBuffer = function (strText, begin, end) {
		var newText = strText.substr(0, begin) + strText.substr(end, strText.length - end);

		this._setMaskedValue(this.makeMaskedValue(newText));
		this._setText(newText);
		this._setValue(newText);
		this.setElementCaretPos(begin, begin);
	};

	_pEditMaskString.clearBuffer2 = function (strText, strMaskedValue, begin, end) {
		var nCaret = -1;
		var Mask;
		var cMask;
		var strDeleted = [];
		for (var nPos = begin; nPos < end; nPos++) {
			Mask = this._bufMask[nPos];
			cMask = this._strMask[nPos];
			if (Mask != 0 && cMask != "^") {
				strDeleted.push(strMaskedValue[nPos]);
				strMaskedValue[nPos] = this._chkEmpty;
				strText[nPos] = this._cMaskChar;
				if (nCaret == -1) {
					nCaret = nPos;
				}
			}
			else {
				if ((end - begin) < 2) {
					var nDelLength = 0;
					var nCurrentPos = nPos;
					while (this._bufMask[nCurrentPos] == 0 || this._strMask[nCurrentPos] == "^") {
						nCurrentPos--;
						nDelLength++;
					}

					strDeleted.push(strMaskedValue[nPos - nDelLength]);
					strMaskedValue[nPos - nDelLength] = this._chkEmpty;
					strText[nPos - nDelLength] = this._cMaskChar;

					if (nCaret == -1) {
						nCaret = nPos - nDelLength;
					}
				}
				else {
					strDeleted.push(strMaskedValue[nPos]);
					if (nCaret == -1) {
						nCaret = nPos;
					}
				}
			}
		}

		if (nCaret == -1) {
			nCaret = begin;
		}

		this._deleted_char = strDeleted.join("");
		this._setMaskedValue(strMaskedValue);
		this._setText(this.makeText(this._strMaskedValue));
		if (strText != this._text) {
			this._setValue(this.makeValue(this._strMaskedValue));
		}
		this.setElementCaretPos(nCaret, nCaret);
	};

	_pEditMaskString._setMaskedValue = function (v) {
		this._strMaskedValue = v;
	};

	_pEditMaskString._set_old_info = function () {
		this._old_text = this._text;
		this._old_value = this._value;

		this._oldMaskedValue = this._strMaskedValue;

		this._old_begin_pos = this._begin_pos;
		this._old_end_pos = this._end_pos;
	};

	_pEditMaskString._apply_input_filter = function (txt) {
		var isChange = false;
		var isMax = false;
		var nLeft = this._begin_pos;
		var nRight = this._end_pos;

		var strText = this._text;
		var strMaskedValue = this._strMaskedValue.concat();

		if (nLeft != nRight) {
		}
		else {
			nLeft = this.findNextPos(strMaskedValue, nLeft - 1);
		}

		if (this._nMaxedLength <= nLeft) {
			isMax = true;
		}

		var nNewLeft = nLeft;
		var nLen = txt.length;
		var tmpArr = txt.split("");

		if (!isMax) {
			for (var i = 0; i < nLen; i++) {
				nNewLeft = this.onInputChar(strMaskedValue, tmpArr[i], nNewLeft);
			}

			strText = this.makeText(strMaskedValue);
		}

		for (var i = 0, n = strMaskedValue.length; i < n; i++) {
			if (strMaskedValue[i] != this._strMaskedValue[i]) {
				isChange = true;
				break;
			}
		}

		if (isChange) {
			this._setMaskedValue(strMaskedValue);
			this._setText(this.makeText(this._strMaskedValue));
			this._setValue(this.makeValue(this._strMaskedValue));
		}
		this.setElementCaretPos(nNewLeft, nNewLeft);
	};

	_pEditMaskString._check_value = function () {
		var maskedValue = this._strMaskedValue;
		var bufMask = this._bufMask;
		var bNull = true;

		for (var i = 0, n = maskedValue.length; i < n; i++) {
			if (bufMask[i] != 0 && maskedValue[i] != this._chkEmpty) {
				bNull = false;
			}
		}

		return bNull;
	};

	_pEditMaskString.getInsertText = function (elem) {
		var insertText = "";
		var element_text = elem.getElementValue();
		var text = this._text;

		if (!text) {
			text = "";
		}

		var old_text = this._text;
		var cur_text = elem.getElementValue();
		var str_mask = this._strMask;
		var len = element_text.length - text.length;
		var deleted_char_length = this._deleted_char.length;

		if (this._pasteAction) {
			if (len == 0) {
				var bFind = false;
				for (var i = 0, n = element_text.length; i < n; i++) {
					if (!bFind && element_text[i] != text[i]) {
						insertText += element_text[i];
						bFind = true;
					}
					else if (bFind) {
						insertText += element_text[i];
					}
				}
			}
			else if (len < 0) {
				var strFront = text.substr(0, this._begin_pos);
				var strRear = text.substr(this._begin_pos + deleted_char_length, text.length - (this._begin_pos + deleted_char_length));

				insertText = element_text.substr(strFront.length, element_text.length - (strFront.length + strRear.length));
			}
			else {
				insertText = element_text.substr(this._begin_pos, len + deleted_char_length);
			}
		}
		else if (this._keycode == 13 || this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.None) {
			if (len == 0) {
				var bFind = false;

				for (var i = 0, n = element_text.length; i < n; i++) {
					if (element_text[i] != text[i]) {
						insertText += element_text[i];
						bFind = true;
					}
					else if (bFind) {
						break;
					}
				}
			}
			else if (len < 0) {
				var strFront = text.substr(0, this._begin_pos);
				var strRear = text.substr(this._begin_pos + deleted_char_length, text.length - (this._begin_pos + deleted_char_length));

				insertText = element_text.substr(strFront.length, element_text.length - (strFront.length + strRear.length));
			}
			else {
				insertText = element_text.substr(this._begin_pos, len);
			}
		}
		else {
			insertText = this._stat_composition.getData(elem);
			if (nexacro.Browser == "Chrome" && nexacro._isDesktop() && insertText && insertText.length > 1) {
				var _len = insertText.length;
				insertText = insertText.substr(_len - 1, _len);
			}
		}

		return insertText;
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		_pEditMaskString._setElementValue = function (elem, begin, end, caretApply, valApply) {
			if (valApply) {
				elem.setElementValue(this._text, true);
			}
			else {
				elem.setElementValue(this._text);
			}

			if (caretApply) {
				this.setElementCaretPos(begin, end, elem);
			}
			else {
				this.setElementCaretPos(begin, end);
			}
		};
	}
	else if (nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") {
		_pEditMaskString._setElementValue = function (elem, begin, end, bApply) {
			elem.setElementValue(this._text);

			if (bApply) {
				var pThis = this;
				this.setElementCaretPos(begin, end, elem);
				nexacro.OnceCallbackTimer.callonce(this.comp, function () {
					pThis._accept_focus_event = false;
					pThis.setElementCaretPos(begin, end, elem);
				});
			}
			else {
				this.setElementCaretPos(begin, end);
			}
		};
	}
	else {
		_pEditMaskString._setElementValue = function (elem, begin, end, bApply) {
			elem.setElementValue(this._text);

			if (bApply) {
				if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.OSVersion >= 10.0) {
					this.setElementCaretPos(begin, end, elem);
					var pThis = this;
					nexacro.OnceCallbackTimer.callonce(this.comp, function () {
						pThis._accept_focus_event = false;
						pThis.setElementCaretPos(begin, end, elem);
					});
				}
				else if (nexacro.OS == "Android" && (nexacro.OSVersion == "4.4.2" || nexacro.OSVersion == "6.0.1" || nexacro.OSVersion == "7.0") && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit"))) {
					this.setElementCaretPos(begin, end, elem);
					var pThis = this;
					nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
						pThis._accept_focus_event = false;
						pThis.setElementCaretPos(begin, end, elem);
					});
				}
				else {
					this.setElementCaretPos(begin, end, elem);
				}
			}
			else {
				this.setElementCaretPos(begin, end);
			}
		};
	}

	_pEditMaskString._changeFocusText = function (elem) {
		var cur_val = this._value;
		var cur_text = elem.getElementValue();
		var cur_pos = elem.getElementCaretPos();

		if (!cur_val) {
			this._setMaskedValue(this.makeMaskedValue(""));
		}
		else {
			this._setMaskedValue(this.makeMaskedValue(cur_val));
		}

		var focus_text = this.makeText(this._strMaskedValue);

		this._setText(focus_text);
		this.syncValue();

		if (cur_text != focus_text) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				this._accept_blur_event = false;
			}

			elem.setElementValue(cur_val);
		}
	};

	_pEditMaskString._check_backspace = function (elem) {
		if (!this._is_selected() && this._select_text && this._select_text.length) {
			this._select_text = "";
		}

		var elem_value = elem.getElementValue();
		if (this._select_text.length == 0 && (elem_value.length == (this._text.length - 1))) {
			if (!this._cutAction && !this._pasteAction && !this._is_composition()) {
				return true;
			}
		}

		return false;
	};

	_pEditMaskString._mousedown_process = function (elem) {
		this._oldMaskedValue = this._strMaskedValue.concat();
	};

	_pEditMaskString._mouseup_process = function (elem) {
		if (this._is_composition()) {
			this._setCaret(elem);
		}
		else {
			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				if (!pThis._pasteAction) {
					pThis._setCaret(elem);

					if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
						var cur_text = elem.getElementValue();
						if (cur_text == "" && cur_text != pThis._text) {
							pThis._setMaskedValue(pThis.makeMaskedValue(cur_text));
							pThis._setText(pThis.makeText(pThis._strMaskedValue));
							if (pThis._value) {
								pThis._setValue(pThis.makeValue(pThis._strMaskedValue));
							}
							pThis.syncValue();

							pThis._setElementValue(elem, pThis._begin_pos, pThis._end_pos);
							pThis.setElementCaretPos(pThis._begin_pos, pThis._begin_pos, elem);
						}
					}

					if (pThis._text) {
						if (pThis._begin_pos == pThis._end_pos) {
							pThis._select_text = "";
						}
						else {
							pThis._select_text = pThis._text.substring(pThis._begin_pos, pThis._end_pos);
						}
					}
				}
				else {
					pThis._do_set_caret = true;
				}
			});
		}
	};

	_pEditMaskString._focus_process = function (elem, mflag) {
		var comp = this.comp;
		var win = comp._getWindow();
		var cur_text = elem.getElementValue();

		if (!this._bChangeFocusText) {
			this._changeFocusText(elem);
			this._bChangeFocusText = true;
		}
		else {
			this._setText(cur_text);
		}

		if (win && win._keydown_element && comp._setcaret) {
			this.setElementCaretPos(comp._caret_pos.begin, comp._caret_pos.end, elem);
			comp._setcaret = false;
		}

		this._apply_autoselect(elem, mflag);
		this._stat_focus.setStatus(nexacro.EditBase.Status.Focus);
	};

	_pEditMaskString._blur_process = function (elem) {
		var cur_text = elem.getElementValue();

		if (!this._value) {
			this._setMaskedValue(this.makeMaskedValue(""));
		}
		else {
			this._setMaskedValue(this.makeMaskedValue(this._value));
		}

		var blur_text = this.makeText(this._strMaskedValue);

		this._setText(blur_text);
		this.syncValue();
		this._bChangeFocusText = false;

		if (cur_text != blur_text || !this._value) {
			elem.setElementValue(this._value);
		}
	};

	_pEditMaskString._keyup_process_enter = function (elem) {
		var focus_text = this._getFocusText();
		var focus_val = this._getFocusValue();
		var cur_text = this._getText();
		var cur_val = this._getValue();

		if (focus_text != cur_text || focus_val != cur_val) {
			if (nexacro.OSVersion >= 6.0 && nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
				this._accept_keyinput_event = false;
			}

			this.comp._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);

			this.setElementCaretPos(this._begin_pos, this._begin_pos, elem);
		}
	};

	_pEditMaskString._on_default_input_keydown = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var comp = this.comp;

		this._setCaret(elem);

		this._keycode = keyCode;
		this._altkey = altKey;
		this._ctrlkey = ctrlKey;
		this._shiftkey = shiftKey;
		this._metakey = metaKey;

		if (ctrlKey && (keyCode == 90)) {
			this._is_undo = true;
			this._undoStack.doUndo();
			this._setCaret(elem);
			this._on_input_keyinput(elem);
			this._is_undo = false;

			elem._event_stop = true;
			return;
		}
		else if (ctrlKey && (keyCode == 89)) {
			this._is_undo = true;
			this._undoStack.doRedo();
			this._setCaret(elem);
			this._on_input_keyinput(elem);
			this._is_undo = false;

			elem._event_stop = true;
			return;
		}

		if (!comp._accept_keydown_event(keyCode)) {
			elem._event_stop = true;
		}
	};

	_pEditMaskString._on_default_input_keypress = function (elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey) {
		var ret = true;
		var k = charCode || keyCode;
		var comp = this.comp;

		if (!comp) {
			return false;
		}
		if (elem.readonly) {
			if (k == nexacro.Event.KEY_BACKSPACE) {
				elem._event_stop = true;
			}
			return false;
		}

		if (k == nexacro.Event.KEY_BACKSPACE || (k == nexacro.Event.KEY_DELETE && k == this._keycode) || (nexacro.Browser == "MobileSafari" && k == 127)) {
			var preValue = this._value;
			var preText = this._text;
			var delInfo = this.deleteChar(k == 8 ? true : false);
			var postText = this._text;

			var text_info = this._textEventInfo;
			text_info.setTextInfo("", preText, postText, "", "", preText);

			ret = comp.on_fire_ontextchange(text_info);
			if (ret) {
				ret = comp.on_fire_cancharchange(comp, text_info.chartext, text_info.pretext, text_info.posttext);

				if (ret) {
					ret = comp.on_fire_onchar(text_info);
				}

				if (ret) {
					this.syncValue();

					this._setElementValue(elem, this._begin_pos, this._end_pos, true, true);

					if (text_info.pretext != text_info.posttext) {
						if (!this._is_undo) {
							this._undoStack.push(this._value, this._text, this._begin_pos, this._begin_pos);
						}

						comp._textchanging = true;
						comp.on_fire_ontextchanged(comp, text_info.pretext, text_info.posttext);
						comp._textchanging = false;
					}
				}
			}

			if (!ret) {
				this._setMaskedValue(this._oldMaskedValue);
				this._setText(preText);
				this._setValue(preValue);
				this.syncValue();

				this.setElementCaretPos(this._begin_pos, this._end_pos);
			}

			this._select_text = "";
			elem._event_stop = true;
		}
		else if (nexacro.OS == "iOS") {
			this._keypress = true;
		}
		return ret;
	};

	_pEditMaskString._on_default_input_keyup = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		var comp = this.comp;

		this._altkey = altKey;
		this._ctrlkey = ctrlKey;
		this._shiftkey = shiftKey;
		this._metakey = metaKey;


		if (!shiftKey && (keycode >= 35 && keycode <= 40)) {
			this._select_text = "";
		}

		if (keycode == 13) {
			this._keyup_process_enter(elem);
			return;
		}

		if (nexacro.BrowserType != "Edge") {
			this._setCaret(elem);
		}
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		if (nexacro.BrowserVersion == 10) {
			_pEditMaskString._on_default_input_keyinput = function (elem) {
				var mouse_stat = this._stat_mouse.getCurrentStatus();
				if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
					mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
					elem.setElementValue(this._value);
					return false;
				}

				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var elem_value = elem.getElementValue();
				var text = this._text;
				if (!text) {
					text = "";
				}
				var insertText = "";

				if (elem_value == text) {
					this._setCaret(elem);
					return false;
				}

				this._set_old_info();

				if (this._is_selected()) {
					this.clearBuffer2(this._text, this._strMaskedValue, this._begin_pos, this._end_pos);

					if (!this._cutAction) {
						if (this._pasteAction) {
							this._isPasteActionComplete = false;
						}
						return;
					}
				}

				insertText = this.getInsertText(elem);

				this._fire_text_event(insertText);

				if (!this._is_composition()) {
					this._stat_composition.init();
				}
				this._isPasteActionComplete = true;

				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}
			};
		}
		else if (nexacro.BrowserVersion >= 9) {
			_pEditMaskString._on_default_input_keyinput = function (elem) {
				var mouse_stat = this._stat_mouse.getCurrentStatus();
				if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
					mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
					elem.setElementValue(this._value);
					return false;
				}

				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var elem_value = elem.getElementValue();
				var text = this._text;
				if (!text) {
					text = "";
				}
				var insertText = "";

				if (elem_value == text) {
					this._setCaret(elem);
					return false;
				}

				this._set_old_info();

				if (this._is_selected()) {
					this.clearBuffer2(this._text, this._strMaskedValue, this._begin_pos, this._end_pos);
				}

				if (this._is_cleared(elem) && !this._cutAction) {
					this.clearBuffer(elem_value, this._begin_pos, this._end_pos);
				}

				insertText = this.getInsertText(elem);

				this._fire_text_event(insertText);

				if (!this._is_composition()) {
					this._stat_composition.init();
				}
				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}
			};
		}
		else {
			_pEditMaskString._on_default_input_keyinput = function (elem) {
				var mouse_stat = this._stat_mouse.getCurrentStatus();
				if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && 
					mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition())) {
					elem.setElementValue(this._value);
					return false;
				}
				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var elem_value = elem.getElementValue();
				var text = this._text;
				if (!text) {
					text = "";
				}
				var insertText = "";

				if (elem_value == text) {
					this._setCaret(elem);
					return false;
				}

				this._set_old_info();

				if (this._is_selected()) {
					this.clearBuffer2(this._text, this._strMaskedValue, this._begin_pos, this._end_pos);

					if (!this._cutAction) {
						return;
					}
				}

				if (this._is_cleared(elem) && !this._cutAction) {
					this.clearBuffer(elem_value, this._begin_pos, this._end_pos);
				}

				insertText = this.getInsertText(elem);

				this._fire_text_event(insertText);

				if (!this._is_composition()) {
					this._stat_composition.init();
				}

				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}
			};
		}
	}
	else if (nexacro.OS == "iOS") {
		_pEditMaskString._on_default_input_keyinput = function (elem) {
			if (this._accept_keyinput_event === false) {
				this._accept_keyinput_event = true;

				return false;
			}

			if (elem.readonly) {
				return false;
			}
			if (!this.comp) {
				return false;
			}

			var elem_value = elem.getElementValue();
			var elem_pos = elem.getElementCaretPos();
			var text = this._text;
			if (!text) {
				text = "";
			}
			var insertText = "";

			if (major_ver >= 13 && !this._pasteAction && (elem._is_keydown === false || this._keycode == nexacro.Event.KEY_BACKSPACE)) {
				this._setElementValue(this.comp._input_element, this._begin_pos, this._end_pos, true);
				this._stat_composition.init();
				return false;
			}

			if (elem_value == text) {
				this._setCaret(elem);
				return false;
			}

			this._set_old_info();

			if (this._is_selected()) {
				this.clearBuffer2(this._text, this._strMaskedValue, this._begin_pos, this._end_pos);
			}

			if (this._check_backspace(elem)) {
				this.clearBuffer2(elem_value, this._strMaskedValue, elem_pos.begin, elem_pos.begin + 1);
			}

			if (elem._type == "date") {
				insertText = elem_value;
			}
			else {
				insertText = this.getInsertText(elem);

				if (this._is_composition()) {
					if (this._keypress) {
						insertText = insertText.substr(insertText.length - 1, 1);
						this._keypress = false;
					}
					else {
						if (major_ver >= 13 && elem_pos.begin != elem_pos.end) {
							insertText = insertText.substr(insertText.length - 1, 1);
						}
						else {
							insertText = "";
						}
					}
				}

				if (major_ver >= 13 && this._pasteAction && insertText != this._clipdata) {
					insertText = this._clipdata;
					if (this._input_begin_pos != this._begin_pos) {
						this.setElementCaretPos(this._input_begin_pos, this._input_begin_pos);
					}
				}
			}

			this._fire_text_event(insertText);

			if (!this._is_composition()) {
				this._stat_composition.init();
			}
		};
	}
	else {
		_pEditMaskString._on_default_input_keyinput = function (elem) {
			var mouse_stat = this._stat_mouse.getCurrentStatus();
			if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && (mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition()))) {
				elem.setElementValue(this._value);
				return false;
			}

			if (this._accept_keyinput_event === false) {
				this._accept_keyinput_event = true;

				return false;
			}

			if (elem.readonly) {
				return false;
			}
			if (!this.comp) {
				return false;
			}

			var elem_value = elem.getElementValue();
			var elem_pos = elem.getElementCaretPos();
			var text = this._text;
			if (!text) {
				text = "";
			}
			var insertText = "";

			if (elem_value == text) {
				this._setCaret(elem);
				return false;
			}

			this._set_old_info();

			if (this._is_selected()) {
				this.clearBuffer2(this._text, this._strMaskedValue, this._begin_pos, this._end_pos);
			}

			if (this._check_backspace(elem)) {
				this.clearBuffer2(elem_value, this._strMaskedValue, elem_pos.begin, elem_pos.begin + 1);
			}

			if (elem._type == "date") {
				insertText = elem_value;
			}
			else {
				insertText = this.getInsertText(elem);
			}

			this._fire_text_event(insertText);

			if (!this._is_composition()) {
				this._stat_composition.init();
			}
		};
	}

	_pEditMaskString._fire_text_event = function (chartext) {
		var comp = this.comp;
		var elem = comp._input_element;
		var elem_value = elem.getElementValue();

		var text_info = this._textEventInfo;
		var autoskip = comp.autoskip;
		var bFilled = false;

		if (this._is_undo) {
			this._setMaskedValue(this.makeMaskedValue(elem_value));
			this._setText(this.makeText(this._strMaskedValue));
			this._setValue(this.makeValue(this._strMaskedValue));
		}
		else {
			this._apply_input_filter(chartext);
		}

		text_info.setTextInfo(chartext, this._old_text, this._text, "", "", this._old_text);

		var ret = comp.on_fire_ontextchange(text_info);
		if (ret) {
			ret = comp.on_fire_cancharchange(comp, text_info.chartext, text_info.pretext, text_info.posttext, text_info.pretext);
			if (ret) {
				ret = comp.on_fire_onchar(text_info);
				if (ret) {
					if (text_info.pretext != text_info.posttext || this._isPWInput) {
						this._isPWInput = false;
						this.syncValue();

						if (!this._is_undo) {
							this._undoStack.push(this._value, this._text, this._begin_pos, this._begin_pos);
						}

						this._setElementValue(elem, this._begin_pos, this._end_pos, true);

						comp.on_fire_ontextchanged(comp, this._old_text, this._text);
					}
					else {
						this._setElementValue(elem, this._begin_pos, this._end_pos, true);
					}
				}
			}
		}

		if (this._is_composition()) {
			this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
		}

		if (nexacro.Browser == "Chrome" && nexacro._isDesktop() && this._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionEnd) {
			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				pThis._accept_keyinput_event = false;
				pThis._accept_blur_event = false;
				pThis._accept_focus_event = false;
				elem.setElementBlur();
				elem.setElementFocus();
				pThis._accept_blur_event = false;
				pThis._accept_focus_event = false;
				elem.setElementBlur();
				elem.setElementFocus();
				pThis._accept_keyinput_event = true;

				pThis._setElementValue(elem, pThis._begin_pos, pThis._begin_pos, true);
				pThis._stat_composition.init();
			});
		}

		if (!ret) {
			this._setMaskedValue(this._oldMaskedValue);
			this._setText(this._old_text);
			this._setValue(this._old_value);
			this.syncValue();

			this._setElementValue(elem, this._old_begin_pos, this._old_end_pos, true);

			return;
		}


		if (autoskip) {
			bFilled = this.isFilled();
			if (bFilled) {
				this._apply_autoskip();
			}
		}
	};

	delete _pEditMaskString;
	_pEditMaskString = null;

	nexacro.EditMaskNumber = function (comp) {
		nexacro.EditBase.call(this, comp);

		if (comp) {
			this.comp = comp;
		}

		this._dispComponent = false;
		this._dispComma = false;
		this._nMin = 0;
		this._nMax = 0;
		this._nDecimalMin = -1;
		this._nDecimalMax = 0;

		this._default_grouping = [3];
		this._default_decimal_point = ".";
		this._default_thousands_sep = ",";
		this._default_positive_sign = "";
		this._default_negative_sign = "-";
		this._default_positive_sign_posn = 1;
		this._default_negative_sign_posn = 1;

		this._positive_sign = this._default_positive_sign;
		this._negative_sign = this._default_negative_sign;
		this._positive_sign_posn = this._default_positive_sign_posn;
		this._negative_sign_posn = this._default_negative_sign_posn;

		this._grouping = this._default_grouping;
		this._strPoint = this._default_decimal_point;
		this._strSeparator = this._default_thousands_sep;
		this._nSignType = 3;

		this._keypress = false;
	};

	_pEditMaskNumber = nexacro._createPrototype(nexacro.EditBase, nexacro.EditMaskNumber);
	nexacro.EditMaskNumber.prototype = _pEditMaskNumber;

	_pEditMaskNumber._type_name = "EditMaskNumber";

	_pEditMaskNumber._init = function () {
		nexacro.EditBase.prototype._init.call(this);

		this._dispComponent = false;
		this._dispComma = false;
		this._nMin = 0;
		this._nMax = 0;
		this._nDecimalMin = -1;
		this._nDecimalMax = 0;
	};

	_pEditMaskNumber.isFilled = function () {
		var nLength = this._text.length;
		var nPoint = this._text.indexOf(this._strPoint);

		if (this._nDecimalMax == -1) {
			return false;
		}
		else if (this._nDecimalMax == 0) {
			if (this._nMax > 0 && (this._nMax <= nLength)) {
				return true;
			}
			else {
				return false;
			}
		}
		else {
			if (nPoint == -1) {
				return false;
			}
			if ((nLength - nPoint - 1) >= this._nDecimalMax) {
				return true;
			}
		}

		return false;
	};

	_pEditMaskNumber.filterChar = function (c) {
		if (this.isDigit(c)) {
			return c;
		}
		else if (c == this._strPoint) {
			return c;
		}
		else if (c == this._strSeparator) {
			return c;
		}
		else if (c == '-' && (this._nSignType == 3 || this._nSignType == 0)) {
			return c;
		}
		else if (c == '+' && (this._nSignType == 3 || this._nSignType == 1)) {
			return c;
		}

		return "";
	};

	_pEditMaskNumber.setMask = function (strMask) {
		var strSMask = this.trimLeft(strMask);
		var cSignMask = strSMask.charAt(0);

		if (cSignMask == '!') {
			this._nSignType = 2;
		}
		else if (cSignMask == '+') {
			this._nSignType = 1;
		}
		else if (cSignMask == '-') {
			this._nSignType = 0;
		}
		else {
			this._nSignType = 3;
		}

		if (strMask.length <= 0) {
			this._nMin = 0;
			this._nMax = 0;
			this._nDecimalMax = -1;
			this._nDecimalMin = 0;

			return;
		}

		this._nMin = 0;
		this._nMax = 0;
		this._nDecimalMax = 0;
		this._nDecimalMin = 0;
		this._dispComma = (strMask.indexOf(",") >= 0);

		var c;
		var bFindPoint = false;
		for (var i = 0, n = strMask.length; i < n; i++) {
			c = strMask.charAt(i);
			if (c == '.') {
				bFindPoint = true;
			}
			else if (c == '#' || c == '0' || c == '9' || c == ',') {
				if (bFindPoint) {
					this._nDecimalMax++;
					if (c == '0') {
						this._nDecimalMin = this._nDecimalMax;
					}
				}
				else {
					if (c == '0' || (this._nMin > 0 && c != ',')) {
						this._nMin++;
					}

					this._nMax++;
				}
			}
		}
	};

	_pEditMaskNumber.setDisplayMask = function (strMask) {
		var c, i;
		var bFindNineMask = false;
		var bFindPoint = false;
		var strMaskLen = strMask.length;
		var strSMask = this.trimLeft(strMask);
		var cSignMask = strSMask.charAt(0);
		var intNineMaskCnt = 0;
		var decNineMaskCnt = 0;

		this._init();

		this._dispComponent = true;

		if (cSignMask == '!') {
			this._nSignType = 2;
		}
		else if (cSignMask == '+') {
			this._nSignType = 1;
		}
		else if (cSignMask == '-') {
			this._nSignType = 0;
		}
		else {
			this._nSignType = 3;
		}

		if (strMask.length <= 0) {
			this._dispComma = true;

			this._nDecimalMax = -1;
			this._nDecimalMin = 0;
		}
		else {
			this._dispComma = (strMask.indexOf(this._default_thousands_sep) >= 0);

			for (i = 0; i < strMaskLen; i++) {
				c = strMask.charAt(i);
				if (c == this._default_decimal_point) {
					bFindPoint = true;
				}
				else if (c == "#" || c == "0" || c == "9") {
					if (bFindPoint) {
						this._nDecimalMax++;
						if (c == "0") {
							this._nDecimalMin = this._nDecimalMax;
						}
						else if (c == "9") {
							decNineMaskCnt++;
						}
					}
					else {
						if (c == "9") {
							intNineMaskCnt++;
							this._nMin = 1;
						}
						else if (c == "0" || this._nMin > 0) {
							this._nMin++;
						}

						this._nMax++;
					}
				}
			}
		}
	};

	_pEditMaskNumber.syncValue = function () {
		var comp = this.comp;

		comp.value = this._value;
		comp.text = this._text;
	};

	_pEditMaskNumber.getValue = function () {
		return this._value;
	};
	_pEditMaskNumber.setValue = function (strValue) {
		var elem = this.comp ? this.comp._input_element : null;

		if (nexacro._isNull(strValue)) {
			this._setValue(strValue);
			this._setText(this.makeText("", false));
		}
		else {
			strValue = strValue.toString();
			strValue = strValue.replace(this._default_decimal_point, this._strPoint);

			this._setValue(this.normalizeValue(strValue, true, true));
			this._setText(this.makeText(this._value, false));
		}

		this._undoStack.push(this._value, this._text);

		if (elem) {
			if (nexacro.OS == "iOS" && elem) {
				elem.setElementInputType("text", true);
				elem.setElementInputTypeKeypad(this.comp.type);
			}
			elem.setElementValue(this._value, true);
		}
	};

	_pEditMaskNumber.deleteChar = function (bBack) {
		var text = this._text;
		var begin_pos = this._begin_pos;
		var end_pos = this._end_pos;
		var ret = {
		};

		if (bBack) {
			if (end_pos == begin_pos && begin_pos != 0) {
				begin_pos--;

				var delText = text.charAt(begin_pos);
				if (delText == this._strSeparator) {
					begin_pos--;
				}
			}
			this.clearBuffer(text, begin_pos, end_pos);
		}
		else {
			if (end_pos == begin_pos && begin_pos != text.length) {
				var delText = text.charAt(end_pos);
				if (delText == this._strSeparator) {
					end_pos++;
				}
				end_pos++;
			}
			this.clearBuffer(text, begin_pos, end_pos);
		}
	};

	_pEditMaskNumber.makeText = function (strValue, bEditing) {
		if (bEditing === undefined) {
			bEditing = true;
		}

		var nSign = 0;
		var nSignPos = -1;
		var bPoint = false;
		var nDecimalLen = 0;
		var nIntegerLen = 0;

		var strText = strValue;

		var ret = this.split(strText);
		nSign = ret.sign;
		bPoint = ret.pointexist;
		var strNumber = ret.numVal;
		var strDecimal = ret.decVal;

		nIntegerLen = strNumber.length;
		nDecimalLen = strDecimal ? strDecimal.length : 0;

		if (this._nMin > nIntegerLen) {
			var tmpStr = "";
			for (var i = 0, n = this._nMin - nIntegerLen; i < n; i++) {
				tmpStr += "0";
			}
			if (!bEditing) {
				strNumber = tmpStr + strNumber;
			}
		}

		if (this._nDecimalMin > nDecimalLen) {
			var tmpStr = "";
			for (var i = 0, n = this._nDecimalMin - nDecimalLen; i < n; i++) {
				tmpStr += "0";
			}
			if (!bEditing) {
				strDecimal = strDecimal + tmpStr;
			}
		}
		else if (this._nDecimalMax != -1 && this._nDecimalMax < nDecimalLen) {
			if (!bEditing && (this._nLimitType != 3 + 1 || this._nDecimalMax == 0)) {
				strDecimal = strDecimal.substring(0, this._nDecimalMax) + strDecimal.substr(nDecimalLen, strDecimal.length);
			}
		}

		if (this._dispComma) {
			strNumber = this.applyComma(strNumber);
		}

		if (nSign < 0) {
			strSign = this._negative_sign;
			nSignPos = this._negative_sign_posn;
		}
		else if (nSign > 0) {
			strSign = this._positive_sign;
			nSignPos = this._negative_sign_posn;
		}
		else {
			strSign = "";
		}

		if (strDecimal.length > 0) {
			strNumber += this._strPoint;
			strNumber += strDecimal;
		}
		else {
			if (bEditing && bPoint && this._nDecimalMax > 0) {
				strNumber += this._strPoint;
			}
			else if (!bEditing && bPoint) {
				var nLen = strNumber.length;
				this._begin_pos = (this._begin_pos > nLen) ? nLen : this._begin_pos;
				this._end_pos = (this._end_pos > nLen) ? nLen : this._begin_pos;
			}
		}

		switch (nSignPos) {
			case 0:
				strNumber = "(" + strNumber + ")";
				break;
			case 1:
			case 3:
			case 4:
				strNumber = strSign + strNumber;
				break;
			case 2:
				strNumber += strSign;
				break;
			default:
				strNumber = strSign + strNumber;
				break;
		}

		return strNumber;
	};

	_pEditMaskNumber.makeDisplayText = function (strValue, bApplyLocale) {
		var ret = this.split(strValue, bApplyLocale);

		var i, zeroLen;
		var tmpStr = "";
		var nSignPos = -1;
		var nSign = ret.sign;
		var bPoint = ret.pointexist;
		var strInteger = ret.numVal;
		var strDecimal = ret.decVal;
		var nIntegerLen = strInteger.length;
		var nDecimalLen = strDecimal ? strDecimal.length : 0;

		if (this._nMin > nIntegerLen) {
			zeroLen = this._nMin - nIntegerLen;
			for (i = 0; i < zeroLen; i++) {
				tmpStr += "0";
			}

			strInteger = tmpStr + strInteger;
		}
		else if (this._nMin == 0 && this._nMin != this._nMax) {
			if (strInteger == "0") {
				strInteger = "";
			}
		}

		if (this._nDecimalMin > nDecimalLen) {
			tmpStr = "";
			zeroLen = this._nDecimalMin - nDecimalLen;
			for (i = 0; i < zeroLen; i++) {
				tmpStr += "0";
			}

			strDecimal = strDecimal + tmpStr;
		}
		else if (this._nDecimalMax != -1 && this._nDecimalMax < nDecimalLen) {
			if ((this._nLimitType != 3 + 1 || this._nDecimalMax == 0)) {
				strDecimal = strDecimal.substring(0, this._nDecimalMax) + strDecimal.substr(nDecimalLen, strDecimal.length);
			}
		}

		if (this._dispComma) {
			strInteger = this.applyComma(strInteger);
		}

		if (strDecimal.length > 0) {
			strInteger += this._strPoint;
			strInteger += strDecimal;
		}

		if (nSign < 0) {
			strSign = this._negative_sign;
			nSignPos = this._negative_sign_posn;
		}
		else if (nSign > 0) {
			strSign = this._positive_sign;
			nSignPos = this._negative_sign_posn;
		}
		else {
			strSign = "";
		}

		switch (nSignPos) {
			case 0:
				strInteger = "(" + strInteger + ")";
				break;
			case 1:
			case 3:
			case 4:
				strInteger = strSign + strInteger;
				break;
			case 2:
				strInteger += strSign;
				break;
			default:
				strInteger = strSign + strInteger;
				break;
		}

		return strInteger;
	};

	_pEditMaskNumber.normalizeValue = function (strValue, bTrim, bValue) {
		if (strValue.length <= 0) {
			return strValue;
		}

		if (this._dispComponent && isFinite(strValue) == false) {
			return strValue;
		}

		if (bTrim === undefined) {
			bTrim = true;
		}

		strValue = this.removeMask(strValue, bValue);
		if (strValue.charAt(strValue.length - 1) == this._strPoint) {
			strValue = strValue + "0";
		}

		if (bTrim) {
			var bSign = (strValue.charAt(0) == '-') ? 1 : 0;

			while (strValue.charAt(0 + bSign) == '0'
				 && strValue.charAt(1 + bSign) != this._strPoint
				 && strValue.length != (1 + bSign)) {
				strValue = strValue.substring(0, 0 + bSign) + strValue.substr(0 + bSign + 1, strValue.length);
			}

			var nPoint = strValue.indexOf(this._strPoint);
			if (nPoint >= 0) {
				var i;
				for (i = strValue.length - 1; i > nPoint + 1; i--) {
					if (strValue.charAt(i) != '0') {
						break;
					}
				}
				strValue = strValue.substring(0, i + 1);
			}
		}

		if (strValue.charAt(0) == '+') {
			strValue = strValue.substr(1);
		}
		else if (strValue.length <= 0 || parseFloat(strValue) == 0.0) {
			if (strValue.charAt(0) == '-') {
				strValue = strValue.substr(1);
			}
		}

		strValue = strValue.replace(this._strPoint, this._default_decimal_point);

		return strValue;
	};

	_pEditMaskNumber.split = function (strText, bApplyLocale) {
		var nBegin = 0;
		var nSign;
		if ((nBegin = strText.indexOf('+')) >= 0) {
			nSign = +1;
			nBegin = 1;
		}
		else if ((nBegin = strText.indexOf('-')) >= 0) {
			nSign = -1;
			nBegin = 1;
		}
		else {
			nSign = 0;
			nBegin = 0;
		}

		var nPoint;
		nPoint = strText.indexOf(this._strPoint, nBegin);

		var strNumber = "", bPoint, strDecimal = "";
		if (nPoint < 0) {
			strNumber = strText.substr(nBegin);
			bPoint = false;
		}
		else {
			strNumber = strText.substr(nBegin, nPoint - nBegin);
			strDecimal = strText.substr(nPoint + 1);
			bPoint = true;
		}
		return {
			"sign" : nSign, 
			"pointexist" : bPoint, 
			"numVal" : strNumber, 
			"decVal" : strDecimal
		};
	};

	_pEditMaskNumber.writeBuffer = function (elem) {
		var str = this._text;
		var comp = this.comp;
		var displaynulltext = comp.displaynulltext;

		var val = elem.getElementValue();

		if (elem && val != str) {
			elem.setElementValue(str);

			var elem_val = elem.getElementValue();
		}

		return str;
	};

	_pEditMaskNumber.clearBuffer = function (text, begin, end) {
		var tmpText = text.substr(0, begin) + text.substr(end, text.length - end);
		var intText = tmpText;
		var decText = "";

		var newValue = this.normalizeValue(tmpText, false);

		var point_idx = tmpText.indexOf(this._strPoint);
		if (point_idx > 0) {
			intText = tmpText.substring(0, point_idx);
			decText = tmpText.substring(point_idx + 1, tmpText.length);
		}

		var intValue = this.normalizeValue(intText, false);
		var newText = this.makeText(intValue, true);

		if (intText.length != newText.length) {
			var tmp = intText.length - newText.length;
			if (begin != 0) {
				begin = begin - tmp;
			}
		}

		if (point_idx > 0) {
			newText = newText + this._strPoint + decText;
		}

		this._setText(newText);
		this._setValue(newValue);
		this.setElementCaretPos(begin, begin);
	};

	_pEditMaskNumber.clearBuffer2 = function (str, start, end) {
		if (start == end) {
			return {
				"text" : str, 
				"end" : end
			};
		}

		if (start > end) {
			var tmpVal = start;
			start = end;
			end = tmpVal;
		}

		var strTemp = str.substr(start, end - start);
		var strPost = str.substring(0, start) + str.substring(end);
		var pstrDeleted = strTemp;
		if (strTemp.indexOf(this._strPoint) > 0) {
			strTemp = this.makeText(this.normalizeValue(strPost));
			end = this.findIndex(strPost, strTemp, start, true);
			strPost = strTemp;

			if (end < 0) {
				end = 0;
			}
			else if (strTemp.length < end) {
				end = strTemp.length;
			}
		}
		else if (this._is_selected() && pstrDeleted == this._strSeparator) {
			end = start;
			strPost = str;
		}
		else {
			var nPoint = strPost.indexOf(this._strPoint);
			if (nPoint < 0) {
				nPoint = strPost.length;
			}
			if (start <= nPoint) {
				strTemp = this.makeText(this.normalizeValue(strPost));
				end = this.findIndex(strPost, strTemp, start, false);
				strPost = strTemp;
			}
			else {
				end = start;
				var nAppendCount = this._nDecimalMin - (strPost.length - (nPoint + 1));
				var addstr = "";
				if (nAppendCount > 0) {
					for (var i = 0; i < nAppendCount; i++) {
						addstr += "0";
					}
				}
				strPost += addstr;
			}
		}
		return {
			"text" : strPost, 
			"end" : end, 
			"pstrDeleted" : pstrDeleted
		};
	};

	_pEditMaskNumber.isDigit = function (c) {
		if (!this._digit) {
			this._digit = /[0-9]/;
		}
		if (this._digit.test(c)) {
			return true;
		}
		return false;
	};


	_pEditMaskNumber.isPlusSign = function (c) {
		if (c == "+") {
			return true;
		}
		return false;
	};

	_pEditMaskNumber.isMinusSign = function (c) {
		if (c == "-") {
			return true;
		}
		return false;
	};

	_pEditMaskNumber.isComma = function (c) {
		if (c == this._strPoint) {
			return true;
		}
		return false;
	};

	_pEditMaskNumber.isSign = function (c) {
		if (this.isPlusSign(c) || this.isMinusSign(c)) {
			return true;
		}
		return false;
	};

	_pEditMaskNumber.trim = function (str) {
		return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	};

	_pEditMaskNumber.trimLeft = function (str) {
		return str.replace(/^\s\s*/, '');
	};

	_pEditMaskNumber.trimRight = function (str) {
		return str.replace(/\s\s*$/, '');
	};

	_pEditMaskNumber.removeMask = function (str, bValue) {
		str = this.trim(str);
		var ntxtLen = str.length;
		var i;
		var bPoint = false;
		var bInside = false;
		var buf = [];

		if (bValue) {
			for (i = 0; i < ntxtLen; i++) {
				var c = str.charAt(i);
				if ((c == '+' || c == '-') && (bInside === false)) {
					buf.push(c);
					bInside = true;
				}
				else if (this.isDigit(c)) {
					buf.push(c);
					bInside = true;
				}
				else if (c == this._strPoint && bPoint === false) {
					buf.push(c);
					bPoint = true;
					bInside = true;
				}
				else if (c != this._strSeparator) {
					if (!this._pasteAction) {
						return "";
					}
				}
			}
		}
		else {
			for (i = 0; i < ntxtLen; i++) {
				var c = str.charAt(i);
				if ((c == '+' || c == '-') && (bInside === false)) {
					buf.push(c);
					bInside = true;
				}
				else if (this.isDigit(c)) {
					buf.push(c);
					bInside = true;
				}
				else if (c == this._strPoint) {
					if (bPoint === false) {
						buf.push(c);
						bPoint = true;
						bInside = true;
					}
				}
				else if (c != this._strSeparator) {
					if (!this._pasteAction) {
						return "";
					}
				}
			}
		}
		return buf.join("");
	};

	_pEditMaskNumber.applyComma = function (strNumber) {
		var grouping = this._grouping;
		var thousands_sep = this._strSeparator;
		if (thousands_sep.length > 0) {
			var dec_buf = strNumber.split("");
			var dec_size = strNumber.length;
			var out_size = (thousands_sep.length + 1) * strNumber.length;
			var out_buf = [];
			var cur_group = 0, d_size = dec_size;
			var endpos = out_size;
			var groupingIdx = 0;
			while (grouping[groupingIdx] && d_size > 0) {
				var g = grouping[groupingIdx];
				if (g == "\\") {
					groupingIdx++;
					g = parseInt(grouping[groupingIdx]) | 0;
				}
				if (g > 0) {
					cur_group = g;
					while (g-- > 0 && d_size > 0) {
						out_buf[--endpos] = dec_buf[--d_size];
					}
					if (d_size > 0) {
						out_buf[--endpos] = thousands_sep;
					}
				}
				else if (g == 0 && d_size > cur_group) {
					g = cur_group;
					while (g-- > 0) {
						out_buf[--endpos] = dec_buf[--d_size];
					}
					if (d_size > 0) {
						out_buf[--endpos] = thousands_sep;
					}
				}
				else if (g == 0 && d_size <= cur_group && d_size > 0) {
					g = d_size;
					while (g-- > 0) {
						out_buf[--endpos] = dec_buf[--d_size];
					}
				}
				else {
					break;
				}


				if (grouping.length == 2 && groupingIdx == 0) {
					groupingIdx++;
				}
			}
			return out_buf.slice(endpos, out_size + endpos).join("");
		}
		return strNumber;
	};

	_pEditMaskNumber.findIndex = function (strSource, strTarget, nPos, bDeleteComma) {
		var nFindPos = 0;

		var nSource = strSource.indexOf(this._strPoint);
		var nTarget = strTarget.indexOf(this._strPoint);
		if (nSource < 0) {
			nSource = strSource.length - 1;
		}
		if (nTarget < 0) {
			nTarget = strTarget.length - 1;
		}

		if (bDeleteComma) {
			var regexpr = new RegExp(this._strSeparator, "g");
			var xstrSource = strSource;
			if (this._dispComma) {
				xstrSource = xstrSource.replace(regexpr, "");
			}

			var xstrTarget = strTarget.substring(0, nTarget + 1);
			if (this._dispComma) {
				xstrTarget = xstrTarget.replace(regexpr, "");
			}
			xstrTarget.replace(this._strPoint, "");

			var nFixPos = nPos + xstrTarget.length - xstrSource.length;

			if (this._dispComma) {
				var nCount = nSource - nPos;
				for (var i = nPos; i < nSource; i++) {
					if (strSource.charAt(i) == this._strSeparator) {
						nCount--;
					}
					if (strTarget.charAt(i) == this._strSeparator) {
						nCount++;
					}
				}
				nFindPos = nTarget - nCount;

				if (strTarget.indexOf(this._strPoint) >= 0) {
					nFindPos = nTarget;
				}
			}
			else {
				nFindPos = nFixPos;
			}
		}
		else {
			if (nPos == nSource) {
				nFindPos = nTarget;
			}
			else if (this._dispComma) {
				var nCount = nSource - nPos;
				for (var i = nPos; i < nSource; i++) {
					if (strSource.charAt(i) == this._strSeparator) {
						nCount--;
					}
					if (strTarget.charAt(i) == this._strSeparator) {
						nCount++;
					}
				}
				nFindPos = nTarget - nCount;
			}
			else {
				nFindPos = nTarget - (nSource - nPos);
			}
		}

		return nFindPos;
	};

	_pEditMaskNumber.onInputDigit = function (strText, xchNum, nCaret) {
		var nPoint = strText.indexOf(this._strPoint);
		var bPoint = nPoint >= 0;
		if (!bPoint) {
			nPoint = strText.length;
		}

		var origin_caret = nCaret;

		if (nPoint < nCaret) {
			if (!this.isLimit(strText)) {
				strText = strText.substring(0, nCaret) + xchNum + strText.substr(nCaret, strText.length);
				nCaret++;
			}
		}
		else {
			if (!this.isLimit(strText)) {
				if (this._dispComma) {
					if (!this._is_composition()) {
						strText = strText.substring(0, nCaret) + xchNum + strText.substr(nCaret, strText.length);
					}
					else {
						strText = strText.substring(0, this._begin_pos) + xchNum + strText.substr(this._begin_pos, strText.length);
						nCaret = this._begin_pos;
					}
					nCaret++;
					nPoint++;
					var nOldLength = strText.length;
					var nIndex = strText.indexOf("-");
					var strSign = "";

					if (0 <= nIndex) {
						strSign += "-";
					}
					if (strSign != "") {
						strText = this.normalizeValue(strText);
						if (strText.charAt(1) == 0) {
							strText = strSign + strText;
						}
						strText = this.makeText(strText);
					}
					else {
						strText = this.makeText(this.normalizeValue(strText));
					}
					var nNewLength = strText.length;

					nPoint = strText.indexOf(this._strPoint);

					if (nOldLength != nNewLength) {
						nCaret++;

						if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && this._is_composition()) {
							if (nexacro.OSVersion >= 10) {
								this._accept_keyinput_event = false;
							}
						}
					}
				}
				else {
					if (!this._is_composition()) {
						strText = strText.substring(0, nCaret) + xchNum + strText.substr(nCaret, strText.length);
					}
					else {
						strText = strText.substring(0, this._begin_pos) + xchNum + strText.substr(this._begin_pos, strText.length);
						nCaret = this._begin_pos;
						this._set_input_begin_pos(this._begin_pos);
					}
					nCaret++;
					nPoint++;
				}
			}
		}


		if (nPoint > this._nMin && nPoint > 1) {
			if (strText.charAt(0) == '0') {
				if (strText.charAt(1) == this._strSeparator) {
					strText = strText.substr(2);
					nCaret -= 2;
				}
				else if ((this._nMin <= 0) && (strText.charAt(1) != this._strPoint)) {
					strText = strText.substr(1);
					nCaret--;
				}
			}
			else if (strText.charAt(0) == '+' || strText.charAt(0) == '-') {
				if (strText.charAt(1) == '0' && strText.charAt(2) == '0') {
					strText = strText.substring(0, 1) + strText.substr(2, strText.length);
					nCaret--;
				}
			}
		}

		var elem = this.comp._input_element;
		var elem_val = elem.getElementValue();
		var elem_val1 = this.makeText(this.normalizeValue(elem_val));

		if (this._text && elem_val.length == this._text.length && !this._pasteAction) {
			if (nexacro.Browser == "Chrome" && nexacro._isDesktop() && this._stat_composition.getCurrentStatus() != nexacro.EditBase.Status.None) {
				strText = elem_val1;
				nCaret = this._begin_pos;
			}
			else {
				var ch = this._text.charAt(origin_caret);
				var digit = this.isDigit(ch);

				if (!digit) {
					strText = this._text.substring(0, origin_caret + 1) + xchNum + this._text.substr(origin_caret + 2, this._text.length);
					nCaret = origin_caret + 2;
				}
				else {
					strText = elem_val1;
					nCaret = origin_caret + 1;
				}
			}
		}

		return {
			"text" : strText, 
			"pos" : nCaret
		};
	};

	_pEditMaskNumber.isLimit = function (strText) {
		var nLength = strText.length;
		var nPoint = strText.indexOf(this._strPoint);
		var nIntLength = 0;
		var nDecLength = 0;
		if (nPoint != -1) {
			nIntLength = nPoint;
			nDecLength = nLength - (nPoint + 1);
		}

		var bSign = (strText.charAt(0) == '-' || strText.charAt(0) == '+') ? true : false;
		if (bSign) {
			nLength--;
			if (this._end_pos <= nPoint) {
				nIntLength--;
			}
		}

		if (this._nLimitType == 3) {
			if (this._nDecimalMax == 0 || nPoint == -1) {
				return (nLength >= this._nMax);
			}

			if (this._nMax > 0 && this._nDecimalMax > 0) {
				if (this._end_pos <= nPoint) {
					return (nIntLength >= this._nMax);
				}
				else if (this._end_pos > nPoint) {
					return (nDecLength >= this._nDecimalMax);
				}
				else {
					return false;
				}
			}
		}
		else if (this._nLimitType == 2) {
			if (this._nMax > 0 && this._nDecimalMax > 0) {
				if (this._begin_pos > nPoint) {
					return (nDecLength >= this._nDecimalMax);
				}
			}
			else if (this._nMax > 0 && this._nDecimalMax == 0 && nPoint > 0) {
				if (this._begin_pos > nPoint) {
					return (nDecLength >= this._nDecimalMax);
				}
			}
		}
		else if (this._nLimitType == 1) {
			if (this._nDecimalMax == 0 || nPoint == -1) {
				return (nLength >= this._nMax);
			}
			if (this._nMax > 0 && this._nDecimalMax > 0) {
				if (this._end_pos <= nPoint) {
					return (nIntLength >= this._nMax);
				}
				else {
					return false;
				}
			}
		}
		else if (this._nLimitType == 0) {
			return false;
		}
		return false;
	};

	_pEditMaskNumber._set_old_info = function () {
		this._old_text = this._text;
		this._old_value = this._value;
		this._old_begin_pos = this._begin_pos;
		this._old_end_pos = this._end_pos;
	};

	_pEditMaskNumber._is_maskchar = function (c) {
		if (this.isDigit(c) || c == this._strPoint) {
			return c;
		}
		else if (this.isSign(c) && (this._nSignType == 3 || this._nSignType == 0)) {
			return c;
		}
		else if (this.isSign(c) && (this._nSignType == 3 || this._nSignType == 1)) {
			return c;
		}

		return "";
	};

	_pEditMaskNumber._apply_filter = function (ch) {
		var bChange = false;
		var ret = {
			value : null, 
			text : "", 
			begin_pos : this._input_begin_pos, 
			bChange : false
		};
		var filterChar = this._is_maskchar(ch);

		if (this.isSign(filterChar)) {
			ret = this._apply_sign_filter(filterChar, (this._value ? this._value : ""), this._text, this._input_begin_pos);
		}
		else if (this.isComma(filterChar)) {
			ret = this._apply_comma_filter(filterChar, (this._value ? this._value : ""), this._text, this._input_begin_pos);
		}
		else if (this.isDigit(filterChar)) {
			ret = this._apply_digit_filter(filterChar, (this._value ? this._value : ""), this._text, this._input_begin_pos);
		}

		return ret;
	};

	_pEditMaskNumber._apply_sign_filter = function (c, value, text, begin_pos) {
		var firstText = text.charAt(0);

		if (this.isPlusSign(c) && (this._nSignType == 1 || this._nSignType == 3)) {
			if (this.isPlusSign(firstText)) {
				value = this.normalizeValue(text, true);
				text = this.makeText(value);
				begin_pos -= 1;
			}
			else if (this.isMinusSign(firstText)) {
				value = this.normalizeValue(text.substr(1), true);
				text = c + this.makeText(value);
			}
			else {
				text = c + this.makeText(value);
				begin_pos += 1;
			}
		}
		else if (this.isMinusSign(c) && (this._nSignType == 0 || this._nSignType == 3)) {
			if (this.isMinusSign(firstText)) {
				value = this.normalizeValue(text.substr(1), true);
				text = this.makeText(value);
				begin_pos -= 1;
			}
			else if (this.isPlusSign(firstText)) {
				value = this.normalizeValue(text.substr(1), true);
				text = c + this.makeText(value);
			}
			else {
				value = c + this.normalizeValue(text, true);
				text = this.makeText(value);
				begin_pos += 1;
			}
		}

		return {
			value : value, 
			text : text, 
			caret : begin_pos, 
			bChange : true
		};
	};

	_pEditMaskNumber._apply_comma_filter = function (c, value, text, begin_pos) {
		var bNormalize = true;
		var comma_idx = value.indexOf(this._default_decimal_point);

		if (comma_idx == -1) {
			var bInput = true;
			var dec_begin_pos = (this._is_composition() ? this._begin_pos : this._input_begin_pos);
			var intText = text.substr(0, dec_begin_pos);
			var decText = text.substr(dec_begin_pos);
			var decLen = decText.length;

			if (this._nDecimalMax == 0) {
				bInput = false;
			}
			else if (text.indexOf(c) > -1) {
				bInput = false;
			}
			else if (this._nLimitType == 2 || this._nLimitType == 3) {
				bInput = (decLen <= this._nDecimalMax) ? true : false;
			}

			if (bInput) {
				text = intText + c + decText;
				if (decLen == 0) {
					bNormalize = false;
				}
			}
		}

		if (bNormalize) {
			value = this.normalizeValue(text, false);
		}

		if (comma_idx > -1 || (comma_idx == -1 && bInput)) {
			begin_pos = text.indexOf(c) + 1;
		}

		return {
			value : value, 
			text : text, 
			caret : begin_pos, 
			bChange : true
		};
	};

	_pEditMaskNumber._apply_digit_filter = function (c, value, text, begin_pos) {
		var ret = this.onInputDigit(text, c, begin_pos);
		var text = ret.text;

		return {
			value : this.normalizeValue(text), 
			text : text, 
			caret : ret.pos, 
			bChange : true
		};
	};

	_pEditMaskNumber._setLocale = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);

		this._strPoint = locale_info.decimal_point;

		if (locale_info.thousands_sep) {
			this._strSeparator = locale_info.thousands_sep;
		}
		else {
			this._strSeparator = this._default_thousands_sep;
		}

		if (!locale_info.grouping || locale_info.grouping[0] == 0) {
			this._grouping = this._default_grouping;
		}
		else {
			this._grouping = locale_info.grouping;
		}

		if (locale_info.positive_sign) {
			this._positive_sign = locale_info.positive_sign;
		}
		else {
			this._positive_sign = this._default_positive_sign;
		}

		if (locale_info.negative_sign) {
			this._negative_sign = locale_info.negative_sign;
		}
		else {
			this._negative_sign = this._default_negative_sign;
		}

		if (locale_info.p_sign_posn != undefined || locale_info.p_sign_posn != null) {
			this._positive_sign_posn = locale_info.p_sign_posn;
		}
		else {
			this._positive_sign_posn = this._default_positive_sign_posn;
		}

		if (locale_info.n_sign_posn != undefined || locale_info.n_sign_posn != null) {
			this._negative_sign_posn = locale_info.n_sign_posn;
		}
		else {
			this._negative_sign_posn = this._default_negative_sign_posn;
		}
	};

	_pEditMaskNumber.getInsertText = function (elem) {
		var insertText = "";
		var element_text = elem.getElementValue();
		var text = this._text;

		if (!text) {
			text = "";
		}

		var old_text = this._text;
		var cur_text = elem.getElementValue();

		if ((nexacro.Browser != "Runtime" || (this._keycode != 8 && this._keycode != 46)) && (this._pasteAction || this._keycode == 13 || this._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.None)) {
			var len = element_text.length - text.length;

			if (len == 0) {
				var bFind = false;

				for (var i = 0, n = element_text.length; i < n; i++) {
					if (element_text[i] != text[i]) {
						insertText += element_text[i];
						bFind = true;
					}
					else if (bFind) {
						break;
					}
				}
			}
			else {
				var old_pos = this._old_begin_pos;
				var pos = this._begin_pos;

				if (old_pos != pos) {
					insertText = element_text.substr(old_pos, len - (old_pos - pos));
				}
				else {
					insertText = element_text.substr(this._begin_pos, len);
				}
			}
		}
		else if (this._is_composition() && !(nexacro.OS == "Windows" && nexacro.Browser == "Safari")) {
			var pos = elem.getElementCaretPos();
			insertText = element_text.substring(this._begin_pos, pos.end);
		}
		else {
			insertText = this._stat_composition.getData(elem);
		}

		return insertText;
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		_pEditMaskNumber._setElementValue = function (elem, begin, end, caretApply, valApply) {
			if (valApply) {
				elem.setElementValue(this._text, true);
			}
			else {
				elem.setElementValue(this._text);
			}

			if (caretApply) {
				this.setElementCaretPos(begin, end, elem);
			}
			else {
				this.setElementCaretPos(begin, end);
			}
		};
	}
	else if (nexacro.Browser == "Safari") {
		_pEditMaskNumber._setElementValue = function (elem, begin, end, bApply) {
			elem.setElementValue(this._text);

			if (bApply) {
				var pThis = this;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					pThis._accept_focus_event = false;
					pThis.setElementCaretPos(begin, end, elem);
				});
			}
			else {
				this.setElementCaretPos(begin, end);
			}
		};
	}
	else {
		_pEditMaskNumber._setElementValue = function (elem, begin, end, bApply) {
			elem.setElementValue(this._text);

			if (bApply) {
				this.setElementCaretPos(begin, end, elem);
			}
			else {
				this.setElementCaretPos(begin, end);
			}
		};
	}

	_pEditMaskNumber._changeFocusText = function (elem) {
		var cur_val = this._value;
		var cur_text = elem.getElementValue();
		var cur_pos = elem.getElementCaretPos();
		var focus_text = "";

		if (!cur_val) {
			focus_text = this.makeText("", true);
		}
		else {
			if (elem.readonly) {
				focus_text = this.makeText(cur_val, false);
			}
			else {
				focus_text = this.makeText(cur_val, true);
			}
		}

		this._setText(focus_text);
		this.syncValue();

		if (elem && cur_text != focus_text) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				this._accept_blur_event = false;
			}

			elem.setElementValue(cur_val);

			if (nexacro.Browser == "Gecko") {
				this.setElementCaretPos(cur_pos.begin, cur_pos.end, elem);
			}
		}
	};

	_pEditMaskNumber._check_keypressPrevent = function (keyCode) {
		var ret = false;
		var filter_ret = {
			value : null, 
			text : "", 
			begin_pos : this._input_begin_pos, 
			bChange : false
		};
		var chartext = String.fromCharCode(keyCode);
		var old_chartext = chartext;

		filter_ret = this._apply_filter(chartext);

		if (!filter_ret.bChange) {
			ret = true;
		}

		return ret;
	};

	_pEditMaskNumber._check_backspace = function (elem) {
		var elem_value = elem.getElementValue();
		if (elem_value.length == (this._text.length - 1)) {
			if (!this._cutAction && !this._pasteAction && !this._is_composition()) {
				return true;
			}
		}

		return false;
	};

	_pEditMaskNumber._mouseup_process = function (elem) {
		if (this._is_composition()) {
			this._setCaret(elem);
		}
		else {
			var pThis = this;

			nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
				if (!pThis._pasteAction) {
					pThis._setCaret(elem);

					if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
						var cur_text = elem.getElementValue();
						if (cur_text == "" && cur_text != pThis._text) {
							pThis._setText(pThis.makeText(cur_text, true));
							if (pThis._value) {
								pThis._setValue(pThis.normalizeValue(pThis._text));
							}
							pThis.syncValue();

							pThis._setElementValue(elem, pThis._begin_pos, pThis._end_pos);
							pThis.setElementCaretPos(pThis._begin_pos, pThis._begin_pos, elem);
						}
					}

					if (pThis._text) {
						if (pThis._begin_pos == pThis._end_pos) {
							pThis._select_text = "";
						}
						else {
							pThis._select_text = pThis._text.substring(pThis._begin_pos, pThis._end_pos);
						}
					}
				}
				else {
					pThis._do_set_caret = true;
				}
			});
		}
	};

	_pEditMaskNumber._focus_process = function (elem, mflag) {
		var comp = this.comp;
		var win = comp._getWindow();
		var cur_text = elem.getElementValue();

		if (!this._bChangeFocusText) {
			this._changeFocusText(elem);
			this._bChangeFocusText = true;
		}
		else {
			this._setText(cur_text);
		}

		if (win && win._keydown_element && comp._setcaret) {
			this.setElementCaretPos(comp._caret_pos.begin, comp._caret_pos.end, elem);
			comp._setcaret = false;
		}

		this._apply_autoselect(elem, mflag);
		this._stat_focus.setStatus(nexacro.EditBase.Status.Focus);
	};

	_pEditMaskNumber._blur_process = function (elem) {
		var cur_text = elem.getElementValue();

		if (!this._value) {
			var blur_text = this.makeText("", false);
		}
		else {
			var blur_text = this.makeText(this._value, false);
		}

		this._setText(blur_text);
		this.syncValue();
		this._bChangeFocusText = false;

		if (cur_text != blur_text || !this._value) {
			elem.setElementValue(this._value, true);
		}
	};

	_pEditMaskNumber._keyup_process_enter = function (elem) {
		var focus_text = this._getFocusText();
		var focus_val = this._getFocusValue();
		var cur_text = this._getText();
		var cur_val = this._getValue();

		if (focus_text != cur_text || focus_val != cur_val) {
			if (nexacro.OSVersion >= 6.0 && nexacro.Browser == "IE" && nexacro.BrowserVersion <= 10) {
				this._accept_keyinput_event = false;
			}

			this.comp._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);

			this.setElementCaretPos(this._begin_pos, this._begin_pos, elem);
		}
	};

	_pEditMaskNumber._on_default_input_keydown = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var elemVal = elem.getElementValue();


		if (!(nexacro.Browser == "Chrome" && nexacro._isDesktop() && keyCode == 229 && this.isLimit(elemVal))) {
			this._setCaret(elem);
		}

		this._keycode = keyCode;
		this._altkey = altKey;
		this._ctrlkey = ctrlKey;
		this._shiftkey = shiftKey;
		this._metakey = metaKey;

		if (ctrlKey && (keyCode == 90)) {
			this._is_undo = true;
			this._undoStack.doUndo();
			this._setCaret(elem);
			this._on_input_keyinput(elem);
			this._is_undo = false;

			elem._event_stop = true;
			return;
		}
		else if (ctrlKey && (keyCode == 89)) {
			this._is_undo = true;
			this._undoStack.doRedo();
			this._setCaret(elem);
			this._on_input_keyinput(elem);
			this._is_undo = false;

			elem._event_stop = true;
			return;
		}
	};

	_pEditMaskNumber._on_default_input_keypress = function (elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey) {
		var ret = true;
		var k = charCode || keyCode;
		var comp = this.comp;
		var text_info = this._textEventInfo;
		var evt_fire = false;

		if (!comp) {
			return false;
		}
		if (elem.readonly) {
			if (k == nexacro.Event.KEY_BACKSPACE) {
				elem._event_stop = true;
			}
			return false;
		}

		this._set_old_info();

		if (keyCode == nexacro.Event.KEY_SPACE) {
			var text = nexacro._isNull(this._value) ? this.makeText("", false) : this.makeText(this._value, false);

			this._filteredtext = false;
			text_info.setTextInfo("", this._old_text, text, "", "", this._old_text);
			evt_fire = true;
		}

		if (k == nexacro.Event.KEY_BACKSPACE || (k == nexacro.Event.KEY_DELETE && k == this._keycode) || (nexacro.Browser == "MobileSafari" && k == 127)) {
			this.deleteChar(k == 8 ? true : false);
			text_info.setTextInfo("", this._old_text, this._text, "", "", this._old_text);
			evt_fire = true;
		}

		if (evt_fire) {
			ret = comp.on_fire_ontextchange(text_info);
			if (ret) {
				ret = comp.on_fire_cancharchange(comp, text_info.chartext, text_info.pretext, text_info.posttext);

				if (ret) {
					ret = comp.on_fire_onchar(text_info);
				}

				if (ret) {
					this._setText(text_info.posttext);
					this._setValue(this.normalizeValue(text_info.posttext));
					this.syncValue();

					if (nexacro.OSVersion >= 6.0 && nexacro.Browser == "IE" && (nexacro.BrowserVersion == 10 || nexacro.BrowserVersion == 9)) {
						this._accept_keyinput_event = false;
					}

					if (!(nexacro.Browser == "Chrome" && nexacro._isDesktop() && this._is_composition())) {
						elem.setElementValue(this._text, true);
					}
					this.setElementCaretPos(this._end_pos, this._end_pos, elem);

					if (text_info.pretext != text_info.posttext) {
						if (!this._is_undo) {
							this._undoStack.push(this._value, this._text, this._end_pos, this._end_pos);
						}

						comp._textchanging = true;
						comp.on_fire_ontextchanged(comp, text_info.pretext, text_info.posttext);
						comp._textchanging = false;
					}
				}
			}

			if (!ret) {
				this._setText(this._old_text);
				this._setValue(this.normalizeValue(this._old_text));
				this.syncValue();

				this.setElementCaretPos(this._old_begin_pos, this._old_end_pos);
			}

			this._select_text = "";
			elem._event_stop = true;
		}
		else if (nexacro.OS == "iOS") {
			bPrevent = this._check_keypressPrevent(keyCode);

			if (bPrevent) {
				elem._event_stop = true;
			}

			this._keypress = true;
		}

		return ret;
	};

	_pEditMaskNumber._on_default_input_keyup = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		var comp = this.comp;

		this._altkey = altKey;
		this._ctrlkey = ctrlKey;
		this._shiftkey = shiftKey;
		this._metakey = metaKey;

		if (!shiftKey && (keycode >= 37 && keycode <= 40)) {
			this._select_text = "";
		}

		if (keycode == 13) {
			this._keyup_process_enter(elem);

			return;
		}

		if (nexacro.OS == "iOS" || nexacro.OS == "Android") {
			if (this._filteredtext) {
				this._filteredtext = false;
				this.setElementCaretPos(this._begin_pos, this._end_pos, elem);
			}
			else {
				this._setCaret(elem);
			}
		}
		else {
			if (nexacro.BrowserType != "Edge") {
				this._setCaret(elem);
			}
		}
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
		if (nexacro.BrowserVersion == 10) {
			_pEditMaskNumber._on_default_input_keyinput = function (elem) {
				var mouse_stat = this._stat_mouse.getCurrentStatus();
				if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && (mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition()))) {
					elem.setElementValue(this._value);
					return false;
				}

				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var elem_value = elem.getElementValue();
				var text = this._text;
				if (!text) {
					text = "";
				}
				var insertText = "";

				if (elem_value == text) {
					this._setCaret(elem);
					return false;
				}

				if (!this._set_old_prop) {
					this._set_old_info();
				}

				if (this._is_selected()) {
					this.clearBuffer(text, this._begin_pos, this._end_pos);
					this._set_old_prop = true;

					if (!this._cutAction) {
						if (this._pasteAction) {
							this._isPasteActionComplete = false;
						}
						return;
					}
				}

				insertText = this.getInsertText(elem);

				this._fire_text_event(insertText);

				if (!this._is_composition()) {
					this._stat_composition.init();
				}

				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}

				this._set_old_prop = false;
			};
		}
		else if (nexacro.BrowserVersion >= 9) {
			_pEditMaskNumber._on_default_input_keyinput = function (elem) {
				var mouse_stat = this._stat_mouse.getCurrentStatus();
				if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && (mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition()))) {
					elem.setElementValue(this._value);
					return false;
				}

				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var elem_value = elem.getElementValue();

				var text = this._text;
				if (!text) {
					text = "";
				}
				var insertText = "";

				if (elem_value == text) {
					this._setCaret(elem);
					return false;
				}

				this._set_old_info();

				if (this._is_selected()) {
					this.clearBuffer(text, this._begin_pos, this._end_pos);
				}

				if (this._is_cleared(elem) && !this._cutAction) {
					this.clearBuffer(elem_value, this._begin_pos, this._end_pos);
				}

				insertText = this.getInsertText(elem);

				this._fire_text_event(insertText);

				if (!this._is_composition()) {
					this._stat_composition.init();
				}

				if (this._do_set_caret) {
					this._setCaret(elem);
					this._do_set_caret = false;
				}
			};
		}
		else {
			_pEditMaskNumber._on_default_input_keyinput = function (elem) {
				var mouse_stat = this._stat_mouse.getCurrentStatus();
				if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && (mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition()))) {
					elem.setElementValue(this._value);
					return false;
				}

				if (this._accept_keyinput_event === false) {
					this._accept_keyinput_event = true;

					return false;
				}

				if (elem.readonly) {
					return false;
				}
				if (!this.comp) {
					return false;
				}

				var elem_value = elem.getElementValue();
				var text = this._text;
				if (!text) {
					text = "";
				}
				var insertText = "";

				if (elem_value == text) {
					this._setCaret(elem);
					return false;
				}

				if (!this._set_old_prop) {
					this._set_old_info();
				}

				if (this._is_selected()) {
					this.clearBuffer(text, this._begin_pos, this._end_pos);
					this._set_old_prop = true;

					return;
				}

				if (this._is_cleared(elem) && !this._cutAction) {
					this.clearBuffer(elem_value, this._begin_pos, this._end_pos);
				}

				insertText = this.getInsertText(elem);

				this._fire_text_event(insertText);

				if (!this._is_composition()) {
					this._stat_composition.init();
				}

				this._set_old_prop = false;
			};
		}
	}
	else if (nexacro.OS == "iOS") {
		_pEditMaskNumber._on_default_input_keyinput = function (elem) {
			if (this._accept_keyinput_event === false) {
				this._accept_keyinput_event = true;

				return false;
			}

			if (elem.readonly) {
				return false;
			}
			if (!this.comp) {
				return false;
			}
			var elem_value = elem.getElementValue();
			var elem_pos = elem.getElementCaretPos();
			var text = this._text;
			if (!text) {
				text = "";
			}
			var insertText = "";

			if (major_ver >= 13 && !this._pasteAction && (elem._is_keydown === false || this._keycode == nexacro.Event.KEY_BACKSPACE)) {
				if (elem_value == text) {
					nexacro.__setDOMNodeValue(elem._input_handle, null);
				}
				elem.setElementValue(this._text);
				this._stat_composition.init();
				return false;
			}

			if (major_ver >= 13 && elem_value == "" && this._is_composition() && elem._is_keydown) {
				var compositiondata = this._stat_composition.getData(elem);
				if (compositiondata) {
					compositiondata = compositiondata.substr(compositiondata.length - 1, 1);
					compositiondata = this._is_maskchar(compositiondata);

					var newText = text + compositiondata;

					this._setText(newText);
					this._setValue(this.normalizeValue(this._text));

					if (elem_value == text) {
						nexacro.__setDOMNodeValue(elem._input_handle, null);
					}
					this._setElementValue(elem, elem_pos.end, elem_pos.end, true);
					this._stat_composition.init();

					if (compositiondata == "") {
						return false;
					}
				}
			}

			if (elem_value == text) {
				this._setCaret(elem);
				return false;
			}

			this._set_old_info();

			if (this._is_selected()) {
				this.clearBuffer(text, this._begin_pos, this._end_pos);
			}

			if (this._check_backspace(elem)) {
				this.clearBuffer(elem_value, elem_pos.begin, elem_pos.end);
			}

			insertText = this.getInsertText(elem);

			if (this._is_composition()) {
				if (this._keypress) {
					insertText = insertText.substr(insertText.length - 1, 1);
					this._keypress = false;
				}
				else {
					if (major_ver >= 13 && elem_pos.begin != elem_pos.end) {
						insertText = insertText.substr(insertText.length - 1, 1);
					}
					else {
						insertText = "";
					}
				}
			}

			this._fire_text_event(insertText);

			if (!this._is_composition()) {
				this._stat_composition.init();
			}
		};
	}
	else {
		_pEditMaskNumber._on_default_input_keyinput = function (elem) {
			var mouse_stat = this._stat_mouse.getCurrentStatus();
			if ((nexacro.SystemLang == "ja" || nexacro.SystemLang == "ja-JP") && (mouse_stat == "mousedown" && !(nexacro.BrowserType == "Edge" && this._is_composition()))) {
				elem.setElementValue(this._value);
				return false;
			}

			if (this._accept_keyinput_event === false) {
				this._accept_keyinput_event = true;

				return false;
			}

			if (elem.readonly) {
				return false;
			}
			if (!this.comp) {
				return false;
			}

			var elem_value = elem.getElementValue();
			var elem_pos = elem.getElementCaretPos();
			var text = this._text;
			if (!text) {
				text = "";
			}
			var insertText = "";

			if (elem_value == text) {
				this._setCaret(elem);
				return false;
			}

			this._set_old_info();

			if (this._is_selected()) {
				this.clearBuffer(text, this._begin_pos, this._end_pos);
			}

			if (this._check_backspace(elem)) {
				this.clearBuffer(elem_value, elem_pos.begin, elem_pos.end);
			}

			insertText = this.getInsertText(elem);

			this._fire_text_event(insertText);

			if (!this._is_composition()) {
				this._stat_composition.init();
			}
		};
	}

	_pEditMaskNumber._fire_text_event = function (chartext) {
		var comp = this.comp;
		var elem = comp._input_element;
		var elem_value = elem.getElementValue();

		var text_info = this._textEventInfo;
		var autoskip = comp.autoskip;
		var bFilter = false;
		var bFilled = false;
		var changeChartext = false;
		var ret = {
			value : null, 
			text : "", 
			begin_pos : this._input_begin_pos, 
			bChange : false
		};

		if (this._is_undo) {
			this._setText(elem_value);
			this._setValue(this.normalizeValue(this._text));
		}
		else if (this._pasteAction) {
			var i = 0;
			while (i < chartext.length) {
				var ch = chartext.charAt(i);

				ret = this._apply_filter(ch);

				if (ret.bChange) {
					this._setValue(ret.value);
					this._setText(ret.text);
					this.setElementCaretPos(ret.caret, ret.caret);
				}
				i++;
			}
			if (elem_value != this._text) {
				this.setValue(this._text);
			}
		}
		else {
			ret = this._apply_filter(chartext);

			if (ret.bChange) {
				this._setValue(ret.value);
				this._setText(ret.text);
				this.setElementCaretPos(ret.caret, ret.caret);
			}
		}

		if (elem_value != this._text) {
			bFilter = true;
			this._filteredtext = true;
		}

		text_info.setTextInfo(chartext, this._old_text, this._text, "", "", this._old_text);

		var ret = comp.on_fire_ontextchange(text_info);
		if (ret) {
			ret = comp.on_fire_cancharchange(comp, text_info.chartext, text_info.pretext, text_info.posttext, text_info.pretext);
			if (ret) {
				ret = comp.on_fire_onchar(text_info);
				if (ret) {
					if (elem_value != text_info.posttext) {
						changeChartext = true;
					}

					if (text_info.pretext != text_info.posttext) {
						this.syncValue();

						if (!this._is_undo) {
							this._undoStack.push(this._value, this._text, this._begin_pos, this._begin_pos);
						}

						this.setElementCaretPos(this._begin_pos, this._end_pos, elem);

						comp.on_fire_ontextchanged(comp, this._old_text, this._text);
					}
				}
			}
		}

		if (!ret) {
			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			}

			this._setText(this._old_text);
			this._setValue(this._old_value);
			this.syncValue();

			this._setElementValue(elem, this._old_begin_pos, this._old_end_pos, true);

			return;
		}

		if (bFilter || changeChartext) {
			if (this._is_composition()) {
				this._stat_composition.setStatus(nexacro.EditBase.Status.CompositionEnd, "");
			}

			this.syncValue();

			if ((nexacro.OS == "Mac OS" || ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro._isDesktop())) && bFilter && this._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionEnd && !this._is_hangul(chartext)) {
				var pThis = this;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					var caret_pos = elem.getElementCaretPos();
					if (nexacro.Browser == "Chrome" && caret_pos.begin != pThis._begin_pos && caret_pos.begin > pThis._begin_pos) {
						pThis._setCaret(elem);
					}
					pThis._accept_keyinput_event = false;
					pThis._accept_blur_event = false;
					pThis._accept_focus_event = false;
					elem.setElementBlur();
					elem.setElementFocus();
					pThis._accept_blur_event = false;
					pThis._accept_focus_event = false;
					elem.setElementBlur();
					elem.setElementFocus();
					pThis._accept_keyinput_event = true;

					pThis._setElementValue(elem, pThis._begin_pos, pThis._begin_pos, true);
					pThis._stat_composition.init();
				});
			}
			else if (nexacro.OS != "Mac OS" && nexacro.Browser == "Safari" && bFilter && this._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionEnd && !this._is_hangul(chartext)) {
				var pThis = this;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					nexacro.__setDOMNodeValue(elem._input_handle, null);
					pThis._setElementValue(elem, pThis._begin_pos, pThis._begin_pos, true);
					pThis._is_compositionfocus = true;
				});
			}
			else {
				this._setElementValue(elem, this._begin_pos, this._end_pos, true);
			}
		}

		if (nexacro.OS != "Mac OS" && nexacro.Browser == "Safari") {
			if (!bFilter && this._is_composition() && !this._is_hangul(chartext) && this._stat_composition._curr_stat != "none") {
				var pThis = this;
				nexacro.OnceCallbackTimer.callonce(pThis.comp, function () {
					nexacro.__setDOMNodeValue(elem._input_handle, null);
					pThis._setElementValue(elem, pThis._begin_pos, pThis._begin_pos, true);
					pThis._is_compositionfocus = true;
				});
			}
		}

		if (autoskip) {
			bFilled = this.isFilled();
			if (bFilled) {
				this._apply_autoskip();
			}
		}
	};

	delete _pEditMaskNumber;
	_pEditMaskNumber = null;

	nexacro.EditMaskDate = function (comp) {
		nexacro.EditMaskString.call(this, comp);
	};

	_pEditMaskDate = nexacro._createPrototype(nexacro.EditMaskString, nexacro.EditMaskDate);
	nexacro.EditMaskDate.prototype = _pEditMaskDate;

	_pEditMaskDate._type_name = "EditMaskDate";

	_pEditMaskDate._maskChr = {
		"y" : /[0-9]/, 
		"M" : /[0-9]/, 
		"d" : /[0-9]/, 
		"h" : /[0-9]/, 
		"H" : /[0-9]/, 
		"m" : /[0-9]/, 
		"s" : /[0-9]/, 
		"l" : /[0-9]/, 
		"~" : /[uAC00-\uFAFF]/, 
		"^" : /[uAC00-\uFAFF]/
	};

	delete _pEditMaskDate;
	_pEditMaskDate = null;


	nexacro.EditBase.Status = function (id) {
		this.id = id;
		this.init();
	};

	var _pEditBaseStatus = nexacro._createPrototype(nexacro.Object, nexacro.EditBase.Status);
	nexacro.EditBase.Status.prototype = _pEditBaseStatus;
	_pEditBaseStatus._type_name = "EditBaseStatus";

	_pEditBaseStatus._prev_stat = "";
	_pEditBaseStatus._curr_stat = "";

	_pEditBaseStatus.init = function () {
		this._prev_stat = nexacro.EditBase.Status.None;
		this._curr_stat = nexacro.EditBase.Status.None;
	};

	_pEditBaseStatus.setStatus = function (status) {
		this._prev_stat = this._curr_stat;
		this._curr_stat = status;
	};

	_pEditBaseStatus.getCurrentStatus = function () {
		return this._curr_stat;
	};

	_pEditBaseStatus.getPreviousStatus = function () {
		return this._prev_stat;
	};

	delete _pEditBaseStatus;
	_pEditBaseStatus = null;

	nexacro.EditBase.CompositionStatus = function (id) {
		nexacro.EditBase.Status.call(this, id);
	};
	var _pEditBaseCompositionStatus = nexacro._createPrototype(nexacro.EditBase.Status, nexacro.EditBase.CompositionStatus);
	nexacro.EditBase.CompositionStatus.prototype = _pEditBaseCompositionStatus;
	_pEditBaseCompositionStatus._type_name = "EditBaseCompositionStatus";

	_pEditBaseCompositionStatus._prev_stat = "";
	_pEditBaseCompositionStatus._curr_stat = "";
	_pEditBaseCompositionStatus._prev_data = "";
	_pEditBaseCompositionStatus._curr_data = "";

	_pEditBaseCompositionStatus.init = function () {
		this._prev_stat = nexacro.EditBase.Status.None;
		this._curr_stat = nexacro.EditBase.Status.None;
		this._prev_data = "";
		this._curr_data = "";
	};

	_pEditBaseCompositionStatus.setStatus = function (status, data) {
		this._prev_stat = this._curr_stat;
		this._curr_stat = status;
		this._prev_data = this._curr_data;
		this._curr_data = data;
	};

	_pEditBaseCompositionStatus.getData = function () {
		return this._curr_data;
	};

	_pEditBaseCompositionStatus.getPreviousData = function () {
		return this._prev_data;
	};

	delete _pEditBaseCompositionStatus;
	_pEditBaseCompositionStatus = null;

	nexacro.EditBase.Status.None = "none";
	nexacro.EditBase.Status.MouseDown = "mousedown";
	nexacro.EditBase.Status.MouseUp = "mouseup";
	nexacro.EditBase.Status.Click = "click";
	nexacro.EditBase.Status.Select = "select";
	nexacro.EditBase.Status.MouseMove = "mousemove";
	nexacro.EditBase.Status.MouseDrag = "drag";
	nexacro.EditBase.Status.MouseDragMove = "dragmove";
	nexacro.EditBase.Status.MouseDrop = "drop";
	nexacro.EditBase.Status.NoSelectDrag = "noselectdrag";

	nexacro.EditBase.Status.Focus = "focus";
	nexacro.EditBase.Status.Blur = "blur";

	nexacro.EditBase.Status.CompositionStart = "start";
	nexacro.EditBase.Status.CompositionUpdate = "update";
	nexacro.EditBase.Status.CompositionEnd = "end";

	nexacro.EditBase.UndoStack = function (comp) {
		this.init();

		this.comp = comp;
	};

	var _pEditBaseUndoStack = nexacro._createPrototype(nexacro.Object, nexacro.EditBase.UndoStack);
	nexacro.EditBase.UndoStack.prototype = _pEditBaseUndoStack;
	_pEditBaseUndoStack._type_name = "EditBaseUndoStack";

	_pEditBaseUndoStack.undoStack = [{
		value : 0, 
		selectionStart : 0, 
		selectionEnd : 0
	}];
	_pEditBaseUndoStack.comp = null;
	_pEditBaseUndoStack.undoPosition = 0;

	_pEditBaseUndoStack.init = function () {
		this.undoStack = [{
			value : 0, 
			text : 0, 
			selectionStart : 0, 
			selectionEnd : 0
		}];

		this.undoPosition = 0;
	};

	_pEditBaseUndoStack._destroy = function () {
		this.comp = null;
		this.undoStack = null;
	};

	_pEditBaseUndoStack.push = function (value, text, start, end) {
		if (!text) {
			if (!value) {
				text = "";
			}
			else {
				text = value;
			}
		}

		var undoItem = {
			value : value, 
			text : text, 
			selectionStart : start, 
			selectionEnd : end
		};
		var curUndoItem = this.undoStack[this.undoPosition];

		if (curUndoItem.value === value) {
			this.refreshUndoItem(undoItem);
		}
		else {
			this.undoStack.length = ++this.undoPosition;
			this.undoStack.push(undoItem);
		}
	};

	_pEditBaseUndoStack.restoreUndoItem = function (item) {
		var elem = this.comp._input_element;
		if (elem) {
			elem.text = item.text;
			elem.value = item.value;

			elem._updateInputValue();
			elem.setElementSetSelect(item.selectionStart, item.selectionEnd);
		}
	};

	_pEditBaseUndoStack.refreshUndoItem = function (item) {
		var bChange = false;
		var curUndoItem = this.undoStack[this.undoPosition];

		if (curUndoItem.value !== item.value || curUndoItem.text !== item.text || curUndoItem.selectionStart !== item.selectionStart || curUndoItem.selectionEnd !== item.selectionEnd) {
			bChange = true;
		}

		if (bChange) {
			this.undoStack[this.undoPosition] = item;
		}
	};

	_pEditBaseUndoStack.doUndo = function () {
		if (this.comp && this.comp.readonly) {
			return;
		}
		if (this.undoPosition > 1) {
			this.restoreUndoItem(this.undoStack[--this.undoPosition]);
		}
	};

	_pEditBaseUndoStack.doRedo = function () {
		if (this.comp && this.comp.readonly) {
			return;
		}
		if (this.undoPosition < this.undoStack.length - 1) {
			this.restoreUndoItem(this.undoStack[++this.undoPosition]);
		}
	};

	delete _pEditBaseUndoStack;
	_pEditBaseUndoStack = null;

	nexacro.EditBase.TextEventInfo = function (comp) {
		this.init();

		this.comp = comp;
	};

	var _pEditBaseTextEventInfo = nexacro._createPrototype(nexacro.Object, nexacro.EditBase.TextEventInfo);
	nexacro.EditBase.TextEventInfo.prototype = _pEditBaseTextEventInfo;
	_pEditBaseTextEventInfo._type_name = "EditBaseTextEventInfo";

	_pEditBaseTextEventInfo.init = function () {
		this.chartext = null;

		this.pretext = null;
		this.posttext = null;

		this.preimetext = null;
		this.postimetext = null;

		this.prechareventtext = null;

		this.bInsert = true;
		this.bCut = false;
	};

	_pEditBaseTextEventInfo._destroy = function () {
		this.comp = null;

		this.chartext = null;

		this.pretext = null;
		this.posttext = null;

		this.preimetext = null;
		this.postimetext = null;

		this.prechareventtext = null;

		this.bInsert = true;
		this.bCut = false;
	};

	_pEditBaseTextEventInfo.setTextInfo = function (chartext, pretext, posttext, preimetext, postimetext, prechareventtext, bInsert, bCut) {
		this.chartext = chartext;

		this.pretext = pretext;
		this.posttext = posttext;

		this.preimetext = preimetext;
		this.postimetext = postimetext;

		this.prechareventtext = prechareventtext;

		this.bInsert = bInsert;
		this.bCut = bCut;
	};

	delete _pEditBaseTextEventInfo;
	_pEditBaseTextEventInfo = null;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Form) {
	nexacro.LayoutChangeEventInfo = function (obj, id, curlayout_name, newlayout_name, cur_width, new_width, cur_height, new_height) {
		this.id = this.eventid = id || "onlayoutchanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.bubbles = true;

		this.oldlayout = curlayout_name;
		this.newlayout = newlayout_name;
		this.oldlayoutwidth = cur_width;
		this.newlayoutwidth = new_width;
		this.oldlayoutheight = cur_height;
		this.newlayoutheight = new_height;
	};

	var _pLayoutChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.LayoutChangeEventInfo);
	nexacro.LayoutChangeEventInfo.prototype = _pLayoutChangeEventInfo;

	_pLayoutChangeEventInfo._type_name = "LayoutChangeEventInfo";

	delete _pLayoutChangeEventInfo;


	nexacro.DeviceButtonEventInfo = function (obj, e) {
		this.eventid = "ondevicebutton";
		this.fromobject = obj;
		this.fromreferenceobject = obj;
		this.button = e.button;
	};
	var _pDeviceButtonEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DeviceButtonEventInfo);
	nexacro.DeviceButtonEventInfo.prototype = _pDeviceButtonEventInfo;

	_pDeviceButtonEventInfo._type_name = "DeviceButtonEventInfo";

	delete _pDeviceButtonEventInfo;

	nexacro.BindItem = function (name, compid, propid, dsid, columnid) {
		nexacro.Object.call(this);
		this.name = name || "";
		this.compid = compid || "";
		this.propid = propid || "";
		this.datasetid = dsid || "";
		this.columnid = columnid || "";


		this._en_type = 1;
		this._dataset = null;
		this._comp = null;
	};

	var _pBindItem = nexacro.BindItem.prototype = nexacro._createPrototype(nexacro.Object, nexacro.BindItem);
	_pBindItem._type_name = "BindItem";

	_pBindItem.set_name = function (v) {
		if (v && this.name != v) {
			this.name = v;
		}
	};

	_pBindItem.set_compid = function (v) {
		if (v && this.compid != v) {
			this.compid = v;
		}
	};

	_pBindItem.set_propid = function (v) {
		if (v && this.propid != v) {
			this.propid = v;
		}
	};

	_pBindItem.set_datasetid = function (v) {
		if (v && this.datasetid != v) {
			this.datasetid = v;
		}
	};

	_pBindItem.set_columnid = function (v) {
		if (v && this.columnid != v) {
			this.columnid = v;
		}
	};

	_pBindItem.init = function (name, compid, propid, datasetid, columnid) {
		this.set_name(name);
		this.set_compid(compid);
		this.set_propid(propid);
		this.set_datasetid(datasetid);
		this.set_columnid(columnid);
	};

	_pBindItem.destroy = function () {
		this._dataset = null;
		this._comp = null;

		nexacro.Object.prototype.destroy.call(this);
	};

	_pBindItem.bind = function () {
		if (this.parent && !this.parent._is_loading) {
			if (this.compid == "" || this.propid == "" || this.datasetid == "" || this.columnid == "") {
				return;
			}
			this.parent._bind_manager._setBinditem(this, false);
			this.parent._bind_manager._notify(this);
		}
	};

	_pBindItem._checkType = function (propid) {
		if (typeof propid == "string" && propid == this.propid) {
			this._en_type = 2;
		}
	};
	delete _pBindItem;

	nexacro.BindManager = function (form) {
		nexacro.Object.call(this);
		this.datasets = {
		};
		this.exception = "";


		this._form = form;
	};

	var _pBindManager = nexacro.BindManager.prototype = nexacro._createPrototype(nexacro.Object, nexacro.BindManager);

	_pBindManager._type_name = "BindManager";


	_pBindManager.destroy = function () {
		this.datasets = null;
		this._form = null;

		nexacro.Object.prototype.destroy.call(this);
	};

	_pBindManager.on_changevalue = function (obj, e) {
		var prop_id = e.propid;
		var bind_item = this._FindBindItem(obj, prop_id);
		var val = e.val;
		if (bind_item && bind_item._en_type == 2) {
			this.exception = obj;

			var ds = bind_item._dataset;
			var row_idx = ds.rowposition;
			var col = ds._getDataColIndex(bind_item.columnid);
			if (col !== undefined) {
				var ret = ds.setColumn(row_idx, col, val);
				if (ret == true) {
					var real_value = ds.getColumn(row_idx, col);
					if (real_value != val) {
						val = real_value;
					}
					this.exception = null;
					return true;
				}
				else {
					this.exception = null;
					return false;
				}
			}
		}
		this.exception = null;
		return true;
	};

	_pBindManager.on_valuechanged = function (obj, e) {
		var ds = obj;
		var row = e.row;
		var col = e.col;
		var col_id = e.columnid;
		var val = e.newvalue;
		if (ds.rowposition == row || row < 0) {
			if (col < 0) {
				return this._notifyAll(ds.name, null, -1, true, null);
			}
			else {
				return this._notifyAll(ds.name, col_id, col, false, val);
			}
		}
		return true;
	};

	_pBindManager.on_load = function (obj, e) {
		var ds = obj;
		if (ds.rowcount == 0 && e.reason == 0) {
			return this._notifyAll(ds.name, null, -1, true, null);
		}
		return true;
	};


	_pBindManager._delayBinds = function () {
		var len = this._form.binds.length;
		for (var sx = 0; sx < len; sx++) {
			var bind_item = this._form.binds[sx];
			if (bind_item._dataset) {
				continue;
			}

			this._setBinditem(bind_item, false);
			this._notify(bind_item);
		}
	};


	_pBindManager._setBinditem = function (bind_item, close_flag) {
		if (!bind_item) {
			return;
		}

		var binds = this._form.binds;
		var ds_id = bind_item.datasetid;

		var ds = bind_item._dataset;
		var comp = bind_item._comp;
		if (!ds || ds_id != ds.id) {
			ds = this._form._getDatasetObject(ds_id);
		}
		if (!bind_item._comp) {
			comp = this._form._findChildObject(bind_item.compid);
		}

		if (!ds || !comp) {
			return;
		}

		if (!close_flag) {
			bind_item._dataset = ds;
			bind_item._comp = comp;
			bind_item._checkType(comp.on_getBindableProperties());

			if (this.datasets[ds_id]) {
				var cidx = nexacro._indexOf(this.datasets[ds_id], bind_item);
				if (cidx > -1) {
					this.datasets[ds_id].splice(cidx, 1);

					if (comp._bind_event) {
						comp._bind_event._removeHandler(this, this.on_changevalue);
						delete comp._bind_event;
						comp._bind_event = null;
					}
				}
				this.datasets[ds_id].push(bind_item);
			}
			else {
				this.datasets[ds_id] = [];
				this.datasets[ds_id].push(bind_item);
				ds.setEventHandler("onload", this.on_load, this);
				ds.setEventHandler("onvaluechanged", this.on_valuechanged, this);
			}

			if (!comp._bind_event) {
				comp._bind_event = new nexacro.EventListener("onbinditem");
				comp._bind_event._setHandler(this, this.on_changevalue);
			}
		}
		else {
			if (this.datasets[ds_id]) {
				var cidx = nexacro._indexOf(this.datasets[ds_id], bind_item);
				if (cidx > -1) {
					this.datasets[ds_id].splice(cidx, 1);
					if (this.datasets[ds_id].length == 0) {
						ds.removeEventHandler("onload", this.on_load, this);
						ds.removeEventHandler("onvaluechanged", this.on_valuechanged, this);
						delete this.datasets[ds_id];
					}
				}
			}
			if (comp._bind_event) {
				comp._bind_event._removeHandler(this, this.on_changevalue);
				delete comp._bind_event;
			}
		}
	};

	_pBindManager._FindBindItem = function (comp, propid) {
		var binds = this._form.binds;
		for (var sx = 0, n = binds.length; sx < n; sx++) {
			var bind_item = binds[sx];
			if (bind_item._comp == comp && bind_item.propid == propid && bind_item.datasetid && bind_item.columnid) {
				return bind_item;
			}
		}
		return null;
	};

	_pBindManager._dettachSBindItem = function (comp) {
		if (!comp._bind_event) {
			return;
		}

		comp._bind_event._removeHandler(this);
		var binds = this._form.binds;
		var cnt = binds.length;
		for (var i = 0; i < cnt; i++) {
			if (binds[i]._comp == comp) {
				var datasetid = binds[i].datasetid;
				if (this.datasets[datasetid]) {
					var cidx = nexacro._indexOf(this.datasets[datasetid], binds[i]);
					if (cidx > -1) {
						var parent = this.datasets[datasetid][cidx].parent;
						this.datasets[datasetid][cidx].destroy();
						this.datasets[datasetid].splice(cidx, 1);
						binds[i].parent = parent;
					}
					binds[i]._comp = null;
				}
			}
		}
	};


	_pBindManager._notify = function (bindItem) {
		var ds = bindItem._dataset;
		var comp = bindItem._comp;

		if (ds && comp) {
			var row_idx = ds.rowposition;

			if (bindItem._en_type == 2) {
				if (comp.enable) {
					if (row_idx < 0) {
						comp._setEnable(false);
					}
					else {
						if (comp._real_enable) {
							comp._setEnable(true);
						}
					}
				}
				var col = ds._getDataColIndex(bindItem.columnid);
				if (col >= 0 && comp.on_change_bindSource) {
					comp.on_change_bindSource(bindItem.propid, bindItem._dataset, row_idx, col, -1);
				}
			}
			else {
				if (bindItem.columnid && bindItem.columnid != "") {
					var col = ds._getDataColIndex(bindItem.columnid);

					if (col == undefined) {
						col = -1;
					}

					var val = ds.getColumn(row_idx, col);
					if (bindItem.propid) {
						if (comp["set_" + bindItem.propid]) {
							comp["set_" + bindItem.propid](val);
						}
						else if (comp.style && comp.style["set_" + bindItem.propid]) {
							comp.style["set_" + bindItem.propid](val);
						}
					}
				}
			}
		}
	};

	_pBindManager._notifyAll = function (ds_id, col_id, col, all_flag, val) {
		var arr_bind = this.datasets[ds_id];
		var bind_item = null;
		var row_idx = -1;

		if (!arr_bind) {
			return true;
		}

		for (var sx = 0, n = arr_bind.length; sx < n; sx++) {
			bind_item = arr_bind[sx];
			if (!bind_item._dataset) {
				continue;
			}

			if (bind_item.columnid == "") {
				continue;
			}

			var ds = bind_item._dataset;
			row_idx = ds.rowposition;
			var comp = bind_item._comp;

			if (comp) {
				if (bind_item._en_type == 2) {
					if (all_flag) {
						if (comp.enable && comp._isPropEnable()) {
							if (row_idx < 0) {
								comp._setEnable(false);
							}
							else {
								comp._setEnable(true);
							}
						}
						else if (!comp.enable) {
							if (row_idx >= 0) {
								comp._setEnable(true);
							}
						}
						col = ds._getDataColIndex(bind_item.columnid);

						if (col >= 0) {
							if (comp.on_change_bindSource) {
								comp.on_change_bindSource(bind_item.propid, bind_item._dataset, row_idx, col, -1);
							}
						}
						else {
							if (comp.on_init_bindSource) {
								comp.on_init_bindSource(bind_item.columnid, bind_item.propid, bind_item._dataset);
							}
						}
					}
					else {
						if (col >= 0) {
							if (bind_item.columnid == col_id && comp.on_change_bindSource) {
								comp.on_change_bindSource(bind_item.propid, bind_item._dataset, row_idx, col, -1);
							}
						}
						else {
							if (bind_item.columnid == col_id && comp.on_init_bindSource) {
								comp.on_init_bindSource(bind_item.columnid, bind_item.propid, bind_item._dataset);
							}
						}
					}
				}
				else {
					var val0;
					if (all_flag) {
						val0 = ds.getConstColumn(bind_item.columnid);

						if (val0 == undefined) {
							col = ds._getDataColIndex(bind_item.columnid);

							if (col == undefined) {
								col = -1;
							}

							val0 = ds.getColumn(row_idx, col);
						}
					}
					else {
						if (col_id == bind_item.columnid) {
							val0 = val;
						}
						else {
							continue;
						}
					}
					if (bind_item.propid) {
						if (comp["set_" + bind_item.propid]) {
							comp["set_" + bind_item.propid](val0);
						}
						else if (comp.style && comp.style["set_" + bind_item.propid]) {
							comp.style["set_" + bind_item.propid](val0);
						}
					}
				}
			}
		}
		return true;
	};

	delete _pBindManager;

	nexacro.FormBase = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.all = new nexacro.Collection();
		this.components = new nexacro.Collection();
		this.objects = new nexacro.Collection();
		this.binds = new nexacro.Collection();
		this._bind_manager = new nexacro.BindManager(this);
		this._layout_list = new nexacro.Collection();

		this.scrollbars = "autoboth";
		this.dragscrolltype = "all";


		this._css_selectors = {
			_has_items : false, 
			_has_attr_items : false
		};
		this._cssfinder_cache = {
		};


		this._child_list = [];

		this._refform = this;
		this._scrollbars = 3;

		this._load_manager = new nexacro.LoadManager(this);
		this._timerManager = new nexacro.TimerManager(this);

		this._includescriptlist = [];

		this._apply_client_padding = false;

		this._hotkey_list = [];
		this._load_callbacklist = [];
		this._is_loadcallback = false;
		this._is_fired_onload = false;

		this._is_form = true;
		this._is_loaded = false;
		this._is_completed = false;
		this._is_async = false;
		this._is_scrollable = true;

		this._url = "";
		this._base_url = "";

		this._last_focused = null;
		this._hittest_type = "";

		this._default_layout = null;
		this._current_layout_name = "default";
		this._cur_real_layout = "default";

		this._obj_mousemove = null;

		this._locale = "";
	};

	var _pFormBase = nexacro.FormBase.prototype = nexacro._createPrototype(nexacro.Component, nexacro.FormBase);

	_pFormBase._type_name = "FormBase";

	_pFormBase.on_create = nexacro._emptyFn;

	_pFormBase.on_create_control_element = function (parent_elem) {
		if (!parent_elem) {
			return null;
		}

		var control_elem;
		if (this._is_scrollable) {
			control_elem = this.on_create_scrollable_control_element(parent_elem);
		}
		else {
			control_elem = this.on_create_normal_control_element(parent_elem);
		}

		return control_elem;
	};

	_pFormBase.createComponent = function (bCreateOnly) {
		if (this._is_loading) {
			return;
		}

		var parent_elem = null;
		if (!this._is_window) {
			parent_elem = this.parent ? this.parent._control_element : null;
			if (!parent_elem) {
				return false;
			}
		}

		var control_elem = this._control_element;
		if (!control_elem) {
			control_elem = this.on_create_control_element(parent_elem);
			if (this._is_nc_control) {
				control_elem._is_nc_element = true;
			}


			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this._initControl(control_elem, pseudo);

			if (this._layout_list.length > 0) {
				this._initLayoutManager();
			}

			this._initStepContents();

			this._initContents(control_elem, pseudo);
			if (this.tooltiptext) {
				this.on_apply_prop_tooltip();
			}

			if (this.positionstep != null) {
				this.on_apply_positionstep(this.positionstep);
			}

			if (this._hittest_type) {
				control_elem.setElementHittestType(this._hittest_type);
			}

			if (!bCreateOnly && (this._is_window || parent_elem._handle)) {
				var _window = this._getWindow();
				this.on_created(_window);
			}
		}
		else {
			if (parent_elem && parent_elem._handle) {
				parent_elem.appendChildElement(control_elem);
				control_elem.parent = this;

				if (this._layout_list.length > 0) {
					this._initLayoutManager();
				}

				this._initStepContents();

				var pseudo = this._getResultPseudo(this._status, this._pseudo);
				this._initControl(control_elem, pseudo);
				this._initContents(control_elem, pseudo);

				if (this.tooltiptext) {
					this.on_apply_prop_tooltip();
				}

				if (!bCreateOnly) {
					var window = this._getWindow();
					this.on_created(window);
				}
			}
			else {
				var pseudo = this._getResultPseudo(this._status, this._pseudo);
				this._initControl(control_elem, pseudo);
				this._initContents(control_elem, pseudo);
				if (this.tooltiptext) {
					this.on_apply_prop_tooltip();
				}
			}
		}
		return true;
	};

	_pFormBase.on_create_contents = function () {
		var comps = this.components;
		var len = comps.length;

		for (var i = 0; i < len; i++) {
			comps[i].createComponent(true);
		}
	};

	_pFormBase.on_created_contents = function () {
		var len = this.objects.length;
		var i = 0;
		for (i = 0; i < len; i++) {
			this.objects[i].on_created();
		}

		var comps = this.components;
		len = comps.length;
		for (i = 0; i < len; i++) {
			var is_form = false;
			if (comps[i] instanceof nexacro.FormBase) {
				is_form = true;
				comps[i]._is_loadcallback = this._load_callbacklist;
			}

			comps[i].on_created();

			if (is_form) {
				comps[i]._is_loadcallback = false;
			}
		}

		if (this.stepcontrol) {
			this.stepcontrol.on_created();
		}

		if (this._is_scrollable) {
			this.resetScroll();
			var control_elem = this._control_element;
			if (control_elem && this.stepcontrol) {
				control_elem.setElementHScrollPos(control_elem.client_width * control_elem._step_index);
			}
		}

		this.on_apply_prop_rtldirection();
		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(this._pseudo);
		this.on_apply_style_rtlimagemirroring(rtlimagemirroring);

		control_elem = null;
		comps = null;

		var win = this._getWindow();
		if (win) {
			nexacro._refreshWindow(win._handle);
		}
	};

	_pFormBase.on_destroy_contents = function () {
		if (this._timerManager) {
			this._timerManager.destroy();
			this._timerManager = null;
		}

		if (this._load_manager) {
			var load_manager = this._load_manager;
			var tr_list = load_manager.transactionList;
			if (tr_list) {
				this._stopTransaction(true);

				for (var i = tr_list.length - 1; i >= 0; i--) {
					var tr_item = tr_list[i];
					if (tr_item._usewaitcursor) {
						tr_item._hideWaitCursor(this);
					}

					tr_item = null;
				}

				tr_list = null;
			}
			this._load_manager.destroy();
			this._load_manager = null;
		}

		var binds = this.binds;
		var len = binds.length;
		for (var i = 0; i < len; i++) {
			var bindname = binds.get_id(i);
			this._bind_manager._setBinditem(binds.get_item(bindname), true);
			this[bindname] = null;
		}

		var components = this.components;
		len = components.length;

		for (var i = 0; i < len; i++) {
			var compname = components.get_id(0);
			if (this[compname]) {
				if (this[compname]._destroy) {
					this[compname]._destroy();
					this[compname] = null;
				}
			}
		}

		var objects = this.objects;
		len = objects.length;
		for (var i = 0; i < len; i++) {
			var objname = objects.get_id(0);
			if (this[objname]) {
				if (this[objname].destroy) {
					this[objname].destroy();
				}

				objects.delete_item(objname);
				delete this[objname];
				this[objname] = null;
			}
		}

		var layouts = this._layout_list;
		len = layouts.length;
		for (var i = 0; i < len; i++) {
			var layout = layouts.get_id(0);
			if (layout) {
				if (layouts[layout].destroy) {
					layouts[layout].destroy();
				}
				layouts.delete_item(layout);
			}
		}

		if (this._bind_manager) {
			this._bind_manager.destroy();
			this._bind_manager = null;
		}

		this.all.clear();
		this.all = null;
		this.components.clear();
		this.components = null;
		this.objects.clear();
		this.objects = null;
		this.binds.clear();
		this.binds = null;
		this._layout_list.clear();
		this._layout_list = null;

		this._css_selectors = null;
		this._cssfinder_cache = null;
		this._child_list = null;

		this._includescriptlist = null;
		this._hotkey_list = null;
		this._load_callbacklist = null;
		this._css_finder = null;
		this._ref_css_finder = null;
		this._find_csslist = null;
		if (this._default_layout) {
			if (this._default_layout.destroy) {
				this._default_layout.destroy();
			}
			this._default_layout = null;
		}

		this._obj_mousemove = null;
	};

	_pFormBase._clearUserFunctions = function () {
		var objPrototype = null;
		if (this._type_name == "Div") {
			objPrototype = nexacro.Div.prototype;
		}
		else if (this._type_name == "Tab") {
			objPrototype = nexacro.Tab.prototype;
		}
		else if (this._type_name == "Tabpage") {
			objPrototype = nexacro.Tabpage.prototype;
		}
		else if (this._type_name == "PopupDiv") {
			objPrototype = nexacro.PopupDiv.prototype;
		}
		else if (this instanceof nexacro.Tab) {
			objPrototype = nexacro.Tab.prototype;
		}
		else if (this instanceof nexacro.Tabpage) {
			objPrototype = nexacro.Tabpage.prototype;
		}
		else if (this instanceof nexacro.PopupDiv) {
			objPrototype = nexacro.PopupDiv.prototype;
		}
		else if (this instanceof nexacro.Div) {
			objPrototype = nexacro.Div.prototype;
		}
		else if (this instanceof nexacro.Form) {
			objPrototype = nexacro.Form.prototype;
		}
		else if (this instanceof nexacro.Frame) {
			objPrototype = nexacro.Frame.prototype;
		}

		for (var func in this) {
			if (typeof this[func] === "function" && objPrototype && !objPrototype[func]) {
				this[func] = null;
			}
		}
	};

	_pFormBase._clear = function () {
		this._clearEventListeners();

		if (this._timerManager && this._timerManager.timerList.length > 0) {
			this._timerManager.clearAll();
		}

		if (this.stepcontrol) {
			this._destroyStepControl();
			delete this.stepcontrol;
		}

		var binds = this.binds;
		if (binds) {
			var len = binds.length;
			for (var i = 0; i < len; i++) {
				var bindname = binds.get_id(i);
				this._bind_manager._setBinditem(binds.get_item(bindname), true);
				delete this[bindname];
			}
			this.binds.clear();
		}

		var components = this.components;
		this.components = new nexacro.Collection();

		if (components) {
			len = components.length;
			for (var i = 0; i < len; i++) {
				var compname = components.get_id(i);
				if (this[compname]) {
					if (this[compname]._destroy) {
						this[compname]._destroy();
					}
				}
			}
			components.clear();
		}
		this.components.clear();

		var objects = this.objects;
		this.objects = new nexacro.Collection();

		if (objects) {
			len = objects.length;
			for (var i = 0; i < len; i++) {
				var objname = objects.get_id(i);
				if (this[objname]) {
					if (this[objname].destroy) {
						this[objname].destroy();
					}
					delete this[objname];
				}
			}
			objects.clear();
		}
		this.objects.clear();

		this.all = new nexacro.Collection();
		this.all.clear();
		this._hotkey_list = [];

		var control_elem = this.getElement();
		if (control_elem) {
			this._is_init = true;
			this._pseudo = "normal";
			this.style._empty();
			this.currentstyle._empty();
			this._control_pseudo = "";
			this._contents_pseudo = "";

			control_elem.clearContents();

			if (this._is_scrollable) {
				this.resetScroll();
			}
		}
		this._is_created = false;
		this._is_fired_onload = false;
		this._is_loadcallback = false;
	};


	_pFormBase._initStepContents = function () {
		if (this._layout_list.length == 0 && this._default_layout) {
			var old_stepindex = -1, old_stepcount = 0;
			var new_stepindex = -1, new_stepcount = 0;

			new_stepindex = this._default_layout.stepindex;
			new_stepcount = this._default_layout.stepcount;
			this._on_prepare_stepcontents(old_stepcount, old_stepindex, new_stepcount, new_stepindex);
			this._on_refresh_stepcontents(old_stepcount, old_stepindex, new_stepcount, new_stepindex);
		}
	};

	_pFormBase.on_initEvent = nexacro._emptyFn;
	_pFormBase._init = nexacro._emptyFn;
	_pFormBase.loadIncludeScript = nexacro._emptyFn;
	_pFormBase.loadPreloadList = nexacro._emptyFn;

	_pFormBase._loadInclude = function (mainurl, url, asyncmode) {
		var service = nexacro._getServiceObject(url);
		var suburl = nexacro._makeurl(url);
		this._load_manager.loadIncludeModule(suburl, null, asyncmode, service);
	};

	_pFormBase.executeScript = function (url, scriptstr, exports) {
		var suburl = nexacro._makeurl(url);

		if (scriptstr) {
			var module = nexacro._executeScript(scriptstr);

			if (module) {
				var async = this._async;
				this._async = false;
				module.call(this, suburl, exports);
				this._executeScript(this);
				this._async = async;
			}
		}
		else {
			var scriptlist = this._includescriptlist;
			var item, dep, _url;

			for (var i = 0, len = scriptlist.length; i < len; i++) {
				item = scriptlist[i];
				_url = nexacro._makeurl(item.url);

				if (_url == suburl && !item.isexecute) {
					if (!item.isloadonly) {
						for (var j = 0, deplen = item.deps.length; j < deplen; j++) {
							dep = item.deps[j];
							this.executeScript(dep, scriptstr, exports);
						}
					}
					item.isexecute = true;
					item.fn.call(this);
					break;
				}
			}
		}
	};

	_pFormBase.executeIncludeScript = _pFormBase.executeScript;

	_pFormBase._executeScript = function (context) {
		if (context && context._registerscriptfn) {
			context._registerscriptfn.call(context);
		}
		context._registerscriptfn = null;
		context._includescriptlist.length = 0;
	};


	_pFormBase.registerScript = function (filename, fn) {
		var scriptlist = this._includescriptlist;
		var len = scriptlist.length, _url;

		for (var i = 0; i < len; i++) {
			_url = nexacro._makeurl(scriptlist[i].url);
			if (_url == filename) {
				scriptlist[i].fn = fn;
				return;
			}
		}

		this._registerscriptfn = fn;
	};


	_pFormBase.addIncludeScript = function (mainurl, url) {
		if (url && this._is_loading) {
			var deps = [], depslen;
			var includescript;
			var list = this._includescriptlist;

			for (var i = 0, len = list.length; i < len; i++) {
				includescript = list[i];
				if (!includescript.isloadonly) {
					if (includescript.url.match(mainurl)) {
						depslen = includescript.deps.length;
						for (var j = 0; j < depslen; j++) {
							if (includescript.deps[j] == url) {
								continue;
							}
						}
						includescript.deps.push(url);
					}
				}

				if (includescript.url == url) {
					return;
				}
			}

			this._includescriptlist.push({
				url : url, 
				deps : deps, 
				isloadonly : false, 
				fn : nexacro._emptyFn, 
				isload : false, 
				isexecute : false
			});
		}
	};

	_pFormBase.loadIncludeScript = function (mainurl, isloadonly) {
		var includescript;
		var list = this._includescriptlist;

		for (var i = 0, len = list.length; i < len; i++) {
			includescript = list[i];
			includescript.isloadonly = isloadonly;

			if (includescript.isload == false) {
				includescript.isload = true;


				this._loadInclude.call(this, mainurl, includescript.url, this._async);
			}
		}
	};

	_pFormBase._make_find_csslist = function () {
		var css_list = this._find_csslist;
		if (!css_list) {
			css_list = [];
			var pThis = this;
			var css;
			while (pThis) {
				css = pThis._css_selectors;
				if (css && css._has_items) {
					css_list.push(css);
				}

				if (pThis._is_frame && pThis._is_popup_frame && pThis._window_type != 5) {
					break;
				}
				else if (pThis.parent == null && !pThis._is_application) {
					pThis = application;
				}
				else {
					pThis = pThis.parent;
				}
			}
			this._find_csslist = css_list;
		}
		return css_list;
	};

	_pFormBase._addCss = function (objtype, styleProp, styleobj, pseudoarr) {
		var type_arr = objtype.split(">");
		var cnt = type_arr.length;

		var css = this._css_selectors;
		css._has_items = true;
		var type_id = "";
		var ref_id = "";
		var cls_name = "";

		for (var i = 0; i < cnt; i++) {
			var type_name = type_arr[i];

			if (type_name == "*") {
				continue;
			}
			if (type_name.substr(0, 1) == "#") {
				ref_id += type_name;
			}
			else if (type_name.substr(0, 1) == ".") {
				if (ref_id == "") {
					cls_name = type_name;
				}
			}
			else {
				if (type_name.substr(0, 2) == "*.") {
					type_name = type_name.substring(1);
				}

				if (ref_id == "") {
					type_id = type_name;
				}
			}
		}
		if (type_id != "") {
			var css2 = css[type_id];
			if (!css2) {
				css[type_id] = css2 = {
					_is_selector : true
				};
			}
			css = css2;
		}
		else if (cls_name != "") {
			var css2 = css[cls_name];
			if (!css2) {
				css[cls_name] = css2 = {
					_is_selector : true
				};
			}
			css = css2;
		}

		if (ref_id != "") {
			var css2 = css[ref_id];
			if (!css2) {
				css[ref_id] = css2 = {
					_is_selector : true
				};
			}
			css = css2;
		}

		css._has_attr_items = true;
		var css_item = css[styleProp];
		if (!css_item) {
			css[styleProp] = css_item = {
			};
		}
		var i = 0;
		var pseudo_cnt = pseudoarr.length;
		var cur_pseudo;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
		if (i >= pseudo_cnt) {
			return;
		}
		cur_pseudo = pseudoarr[i++];
		css_item[cur_pseudo] = styleobj;
	};

	_pFormBase.create = function () {
		this.on_create();
	};

	_pFormBase.initEvent = function () {
		this.on_initEvent();
	};

	_pFormBase._on_init = function () {
		if (this._is_created) {
			this._clear();
		}
		else {
			if (this._clear_obj) {
				this._clear_obj();
			}
		}

		if (this._is_loading) {
			this._clearEventListeners();
		}

		this._init();
		this.create();

		this._is_loading = false;

		if (this.parent && this.parent.form == this) {
			this.parent._loadedForm();
		}

		var url = this._url, item = null;

		var scriptlist = this._includescriptlist;

		for (var i = 0, len = scriptlist.length; i < len; i++) {
			item = scriptlist[i];
			if (item && !item.isloadonly) {
				this.executeScript(item.url, null, this);
			}
		}

		this._executeScript(this);

		this.initEvent();

		this._is_loaded = true;
	};

	_pFormBase._addPreloadList = function (type, url, id, args) {
		if (!url) {
			return;
		}

		var fullurl, service;
		if (type == "data") {
			service = nexacro._getServiceObject(url, true);
			fullurl = nexacro._getServiceLocation(url, this._base_url);
			this._load_manager.addPreloadItem(type, fullurl, id, args, service);
		}
		else {
			service = nexacro._getServiceObject(url);
			fullurl = nexacro._getFDLLocation(url, this._base_url);
			this._load_manager.addPreloadItem(type, fullurl, this, null, service);
		}
	};



	_pFormBase._findForm = function (comp) {
		return this;
	};

	_pFormBase._getReferenceContext = function () {
		return this;
	};

	_pFormBase._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var last_focused_comp = this._getLastFocused();
		if (last_focused_comp && last_focused_comp != this) {
			return last_focused_comp._getDlgCode(keycode, altKey, ctrlKey, shiftKey);
		}
		return {
			want_tab : false, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : false
		};
	};


	_pFormBase.setSize = function (width, height) {
		if (this._adjust_width != width || this._adjust_height != height) {
			this._adjustPosition(this.left, this.top, null, null, width, height, this.parent._client_width, this.parent._client_height);
			var control_elem = this._control_element;
			if (control_elem) {
				control_elem.setElementSize(width, height);
				this._updateClientSize(control_elem);
			}
		}
	};

	_pFormBase._waitCursor = function (wait_flag, context) {
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._waitCursor(wait_flag, context);
		}
	};

	_pFormBase._destroy = function () {
		if (!this._is_alive || this._is_destroying) {
			return;
		}

		return this.destroyComponent();
	};

	_pFormBase.destroy = function () {
		if (!this._is_alive) {
			return;
		}

		var confirm_message = this._on_beforeclose();
		if (this._checkAndConfirmClose(confirm_message) == false) {
			return false;
		}

		if (this._window) {
			this._window._ignore_close_confirm = true;
		}

		this._on_close();

		this._is_fired_onload = false;

		return this.destroyComponent();
	};

	_pFormBase.loadCss = function (url, base_url, async) {
		if (url) {
			if (!base_url) {
				base_url = this._base_url;
			}
			var cssurl = [];
			cssurl.push(nexacro._getServiceLocation(url, base_url));

			var checkversion = nexacro._getLocalStorage("checkversion", false);
			if (!checkversion) {
				cssurl.push(".js");
			}

			var service = nexacro._getServiceObject(url);
			this._load_manager.loadCssModule(cssurl.join(""), null, async, service);
		}
	};

	_pFormBase.move = function (left, top, width, height, right, bottom, noneUpdate) {
		var control_elem = this.getElement();

		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var bsize = false, bmove = false;
		var update = false;

		var parent = this.parent;
		if (parent) {
			this._adjustPosition(left, top, right, bottom, width, height, parent._client_width, parent._client_height);
		}
		else {
			this._adjustPosition(left, top, right, bottom, width, height, null, null);
		}

		if (this._adjust_width != old_width || this._adjust_height != old_height) {
			bsize = true;
			if (old_width == 0 || old_height == 0) {
				update = true;
			}
		}
		if (this._adjust_left != old_left || this._adjust_top != old_top) {
			bmove = true;
		}
		this.on_update_position(bsize, bmove);

		if (this._layout_list && this._layout_list.length > 0) {
			this._checkValidLayout();
		}

		if (update) {
			this.currentstyle._empty();
			this._control_pseudo = "";
		}

		this._updateControl(control_elem);
		this._updateContents(control_elem);
	};

	_pFormBase.resize = function (w, h) {
		if (w < 0 || h < 0) {
			return;
		}

		if (w == this._adjust_width && h == this._adjust_height) {
			var control_elem = this.getElement();
			if (control_elem && control_elem._handle && control_elem._vml_elem) {
				control_elem._refreshVMLContainerElement(control_elem, control_elem._vml_elem);
			}
			return;
		}
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;

		var bsize = false;
		if (old_width != this._adjust_left + w || old_height != this._adjust_top + h) {
			this.width = w;
			this.height = h;
			bsize = true;
		}

		this._update_position(bsize, false);

		if (this._layout_list && this._layout_list.length > 0) {
			this._checkValidLayout();
		}
	};

	_pFormBase.confirm = function (strText, strCaption, strType) {
		var win = this._getWindow();
		if (!win) {
			return;
		}

		nexacro._skipDragEventAfterMsgBox = true;

		return nexacro._confirm(win.frame, strText, strCaption, strType);
	};

	_pFormBase.alert = function (strText, strCaption, strType) {
		var win = this._getWindow();
		if (!win) {
			return;
		}

		nexacro._skipDragEventAfterMsgBox = true;
		application._is_on_alert = true;
		nexacro._alert(win.frame, strText, strCaption, strType);
		application._is_on_alert = false;
	};

	_pFormBase.getOwnerFrame = function () {
		var frame = null;
		if (this.parent && !(this.parent instanceof nexacro.Frame)) {
			frame = this.parent.getOwnerFrame();
		}
		else {
			frame = this.parent;
		}
		return frame;
	};

	_pFormBase.lookup = function (name) {
		for (var f = this; (f != null); f = (f.opener || f.parent)) {
			if (name in f) {
				return f[name];
			}
		}
	};

	_pFormBase.lookupSetter = function (name, fnname) {
		if (!fnname) {
			fnname = "set_" + name;
		}
		for (var f = this; (f != null); f = (f.opener || f.parent)) {
			var fn = f[fnname];
			if (fn) {
				return new nexacro.SetterBinder(f, name, fn);
			}
			if (name in f) {
				return new nexacro.PropBinder(f, name);
			}
		}
		return null;
	};

	_pFormBase.lookupFunc = function (name) {
		for (var f = this; (f != null); f = (f.opener || f.parent)) {
			var fn = f[name];
			if (fn) {
				return new nexacro.FuncBinder(f, fn);
			}
		}
		return null;
	};

	_pFormBase.getLayoutInfo = function (name, key) {
		var layout = this._layout_list[name];
		if (layout) {
			return layout[key];
		}
		return;
	};

	_pFormBase._on_activate = function () {
		if (this.visible && this._isEnable() && this.enableevent) {
			this.on_fire_onactivate();
		}
	};

	_pFormBase._on_deactivate = function () {
		if (this.visible && this._isEnable() && this.enableevent) {
			this.on_fire_ondeactivate();
		}
	};

	_pFormBase.on_fire_onactivate = function () {
		if (this.onactivate && this.onactivate._has_handlers) {
			var evt = new nexacro.ActivateEventInfo(this, "onactivate", true, this, this);
			this.onactivate._fireEvent(this, evt);
		}
	};

	_pFormBase.on_fire_ondeactivate = function () {
		if (this.ondeactivate && this.ondeactivate._has_handlers) {
			var evt = new nexacro.ActivateEventInfo(this, "ondeactivate", false, this, this);
			this.ondeactivate._fireEvent(this, evt);
		}
	};

	_pFormBase._on_beforeclose = function (root_closing_comp, event_bubbles) {
		if (!this._is_alive || !this._is_form) {
			return;
		}

		if (!root_closing_comp) {
			root_closing_comp = this;
		}

		var msg = "";
		var components = this.components;
		var len = components.length;

		for (var i = 0; i < len; i++) {
			var comp = components[i];
			if (!(comp instanceof nexacro.FormBase)) {
				continue;
			}

			var comp_msg = comp._on_beforeclose(root_closing_comp, true);
			msg = this._appendBeforeCloseMsg(msg, comp_msg);
		}

		if (this._is_loaded) {
			var self_msg = this._on_bubble_beforeclose(root_closing_comp, event_bubbles);
			msg = this._appendBeforeCloseMsg(msg, self_msg);

			return msg;
		}
	};

	_pFormBase._on_bubble_beforeclose = function (root_closing_comp, event_bubbles, fire_comp, refer_comp) {
		if (event_bubbles === undefined) {
			event_bubbles = false;
			fire_comp = this;
			if (!refer_comp) {
				refer_comp = this;
			}
		}

		var msg = "";
		if (this.visible && this._isEnable() && this.enableevent) {
			msg = this.on_fire_onbeforeclose(this, fire_comp, refer_comp, root_closing_comp);
		}

		var bubbled_msg = "";
		if ((!this.onbeforeclose || (this.onbeforeclose && !this.onbeforeclose.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
			bubbled_msg = this.parent._on_bubble_beforeclose(root_closing_comp, event_bubbles, fire_comp, refer_comp);
		}

		return this._appendBeforeCloseMsg(msg, bubbled_msg);
	};

	_pFormBase._on_close = function (event_bubbles) {
		if (!this._is_alive || !this._is_form) {
			return true;
		}

		var components = this.components;
		var len = components.length;

		for (var i = 0; i < len; i++) {
			var comp = components[i];
			if (!(comp instanceof nexacro.FormBase)) {
				continue;
			}

			comp._on_close(true);
		}

		if (this._is_loaded) {
			this._on_bubble_close(event_bubbles);
			return;
		}

		return true;
	};

	_pFormBase._on_bubble_close = function (event_bubbles, fire_comp, refer_comp) {
		if (event_bubbles === undefined) {
			event_bubbles = false;
			fire_comp = this;
			if (!refer_comp) {
				refer_comp = this;
			}
		}

		if (this.visible && this._isEnable() && this.enableevent) {
			this.on_fire_onclose(this, fire_comp, refer_comp);
		}

		var parent = this.parent;
		if (parent) {
			if ((!this.onclose || (this.onclose && !this.onclose.stoppropagation)) && event_bubbles !== true && !parent._is_application) {
				return parent._on_bubble_close(event_bubbles, fire_comp, refer_comp);
			}
		}
	};

	_pFormBase.on_fire_onbeforeclose = function (obj, from_comp, refer_comp, root_closing_comp) {
		if (this.onbeforeclose && this.onbeforeclose._has_handlers) {
			var evt = new nexacro.CloseEventInfo(obj, "onbeforeclose", from_comp, refer_comp, root_closing_comp);
			return this.onbeforeclose._fireEvent(this, evt);
		}
	};

	_pFormBase.on_fire_onclose = function (obj, from_comp, refer_comp) {
		if (this.onclose && this.onclose._has_handlers) {
			var evt = new nexacro.CloseEventInfo(obj, "onclose", from_comp, refer_comp);
			return this.onclose._fireEvent(this, evt);
		}
		return true;
	};


	_pFormBase.loadForm = function (formurl, async, reload, baseurl) {
		if (this._load_manager) {
			var url = nexacro._getFDLLocation(formurl, baseurl);
			this._url = url;
			this._base_url = nexacro._getBaseUrl(url);

			if (this._load_manager) {
				this._load_manager.clearAllLoad();
			}

			this._clearUserFunctions();

			this._is_loading = true;
			if (this.parent._is_frame && this.parent.form == this) {
				application._registerLoadforms(this);
			}

			this._clearCssInfo();

			var serviceurl = formurl;

			if (!this.url && this.parent && this.parent.formurl) {
				serviceurl = this.parent.formurl;
			}

			var service = nexacro._getServiceObject(serviceurl);
			var ret = this._load_manager.loadMainModule(url, undefined, async, reload, service);
		}
	};

	_pFormBase.getParentContext = function () {
	};

	_pFormBase._getFormBaseUrl = function () {
		return this._base_url;
	};

	_pFormBase._clearCssInfo = function (exceptcssselector) {
		this._css_finder = null;
		this._ref_css_finder = null;
		this._cssfinder_cache = {
		};
		this._find_csslist = null;

		var comps = this.components;
		var comp_len = comps.length;

		for (var i = 0; i < comp_len; i++) {
			if (comps[i]._is_form) {
				comps[i]._clearCssInfo(exceptcssselector);
			}
		}

		if (!exceptcssselector) {
			this._css_selectors = null;
			this._css_selectors = {
				_has_items : false, 
				_has_attr_items : false
			};
		}
	};

	_pFormBase._findChildObject = function (queryid) {
		var npos = queryid.indexOf(".");
		if (npos > 0) {
			var querythis = queryid.substring(0, npos).trim();
			querythis = this[querythis];
			if (querythis) {
				return querythis._findChildObject(queryid.substring(npos + 1, queryid.length).trim());
			}
		}
		else {
			return this[queryid];
		}
	};

	_pFormBase._getDatasetObject = function (queryid) {
		var _ds = this[queryid];
		var p = (this.opener || this.parent);
		if (_ds == null && p && p != application) {
			_ds = p._getDatasetObject(queryid);
		}

		if (_ds == null) {
			_ds = application[queryid];
		}

		return _ds;
	};

	_pFormBase._checkContainerTabFocus = function () {
		if (this._is_form && nexacro._enableaccessibility && this._isAccessibilityEnable() == true) {
			return true;
		}

		return false;
	};

	_pFormBase._checkContainerHeadingFocus = function () {
		if (this._is_form && nexacro._enableaccessibility && this._isAccessibilityEnable() == true && this._isAccessibilityRoleHeading()) {
			return true;
		}

		return false;
	};


	_pFormBase._getTabOrderLast = function (bAccessibility, bEditable, edittype, bComposite) {
		var ar = this._getSortedDecendants(this, true, bAccessibility);
		var child;
		for (var i = ar.length - 1; i >= 0; i--) {
			child = ar[i];
			if (bEditable) {
				if (child._isEditableComponent(edittype)) {
					return child;
				}
				else if (bComposite && child._is_form) {
					var comp = child._getTabOrderLast(bAccessibility, bEditable, edittype, bComposite);
					if (comp) {
						return comp;
					}
				}
			}
			else if (bAccessibility) {
				if (child._isAccessibilityEnable()) {
					return child;
				}
				else if (child._is_form && child._child_list.length) {
					var comp = child._getTabOrderLast(true);
					if (comp) {
						return comp;
					}
				}
			}
			else if (child.on_get_prop_tabstop()) {
				return child;
			}
		}
		return null;
	};

	_pFormBase._getHeadingOrderLast = function () {
		var ar = this._getSortedDecendants(this, true, true);
		var child;
		for (var i = ar.length - 1; i >= 0; i--) {
			child = ar[i];

			if (child._isAccessibilityRoleHeading()) {
				return child;
			}
			else if (child._is_form) {
				var comp = child._getHeadingOrderLast();
				if (comp) {
					return comp;
				}
			}
		}
		return null;
	};


	_pFormBase._getTabOrderFirst = function (bAccessibility, bEditable, edittype, bComposite) {
		var ar = this._getSortedDecendants(this, true, bAccessibility);
		var child;
		for (var i = 0, n = ar.length; i < n; i++) {
			child = ar[i];
			if (bEditable) {
				if (child._isEditableComponent(edittype)) {
					return child;
				}
				else if (bComposite && child._is_form) {
					var comp = child._getTabOrderFirst(bAccessibility, bEditable, edittype, bComposite);
					if (comp) {
						return comp;
					}
				}
			}
			else if (bAccessibility) {
				if (child._isAccessibilityEnable()) {
					return child;
				}
				else if (child._is_form && child._child_list.length) {
					var comp = child._getTabOrderFirst(true);
					if (comp) {
						return comp;
					}
				}
			}
			else if (child.on_get_prop_tabstop()) {
				return child;
			}
		}
		return null;
	};

	_pFormBase._getHeadingOrderFirst = function () {
		var ar = this._getSortedDecendants(this, true, true);
		var child;
		for (var i = 0, n = ar.length; i < n; i++) {
			child = ar[i];

			if (child._isAccessibilityRoleHeading()) {
				return child;
			}
			else if (child._is_form) {
				var comp = child._getHeadingOrderFirst();
				if (comp) {
					return comp;
				}
			}
		}
		return null;
	};

	_pFormBase._getTabOrderNext = function (current, direction, bAccessibility, bEditable, edittype, bhotkey, bComposite, bfocus, bNoComposite) {
		if (current && current._is_form && direction > 0 && !bhotkey && (bNoComposite == undefined || bNoComposite)) {
			var current_first_child = current._getTabOrderFirst(bAccessibility, bEditable, edittype);

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
				var _window = this._getWindow();
				if ((current_first_child != null) && (!current._contains(_window._accessibility_last_focused_comp) || current == _window._accessibility_last_focused_comp)) {
					return current_first_child;
				}
			}
			else if (!bfocus && current._last_focused == null && current_first_child != null) {
				return current_first_child;
			}
		}

		var ar = this._getSortedDecendants(this, true, bAccessibility);
		var cur_idx = nexacro._indexOf(ar, current._getRootComponent(current));

		if (cur_idx < 0) {
			return null;
		}

		var child;
		if (direction > 0) {
			for (var i = cur_idx + direction, ar_len = ar.length; i < ar_len; i++) {
				child = ar[i];
				if (bEditable) {
					if (child._isEditableComponent(edittype)) {
						return child;
					}
					else if (bComposite && child._is_form) {
						var comp = child._getTabOrderFirst(bAccessibility, bEditable, edittype, bComposite);
						if (comp) {
							return comp;
						}
					}
				}
				else if (bAccessibility) {
					if (child._isAccessibilityEnable()) {
						return child;
					}
					else if (child._is_form && child._child_list.length) {
						var comp = child._getTabOrderFirst(true);
						if (comp) {
							return comp;
						}
					}
					else if (child._isItemAccessibilityEnable()) {
						return child;
					}
				}
				else if (child.on_get_prop_tabstop()) {
					return child;
				}
			}
		}
		else if (direction < 0) {
			for (var i = cur_idx + direction; i >= 0; i--) {
				child = ar[i];
				if (bEditable) {
					if (child._isEditableComponent(edittype)) {
						return child;
					}
					else if (bComposite && child._is_form) {
						var comp = child._getTabOrderLast(bAccessibility, bEditable, edittype, bComposite);
						if (comp) {
							return comp;
						}
					}
				}
				else if (bAccessibility) {
					if (child._isAccessibilityEnable()) {
						return child;
					}
					else if (child._is_form && child._child_list.length) {
						var comp = child._getTabOrderLast(true);
						if (comp) {
							return comp;
						}
					}
					else if (child._isItemAccessibilityEnable()) {
						return child;
					}
				}
				else if (child.on_get_prop_tabstop()) {
					return child;
				}
			}
		}
		if (bEditable) {
			if (direction > 0) {
				for (var i = 0; i < cur_idx - direction; i++) {
					child = ar[i];
					if (bEditable) {
						if (child._isEditableComponent(edittype)) {
							return child;
						}
						else if (bComposite && child._is_form) {
							var comp = child._getTabOrderFirst(bAccessibility, bEditable, edittype, bComposite);
							if (comp) {
								return comp;
							}
						}
					}
				}
			}
			else if (direction < 0) {
				for (var i = ar.length - 1; i > cur_idx; i--) {
					child = ar[i];
					if (bEditable) {
						if (child._isEditableComponent(edittype)) {
							return child;
						}
						else if (bComposite && child._is_form) {
							var comp = child._getTabOrderLast(bAccessibility, bEditable, edittype, bComposite);
							if (comp) {
								return comp;
							}
						}
					}
				}
			}
		}
		return null;
	};

	_pFormBase._getHeadingOrderNext = function (current, direction) {
		if (current && current._is_form) {
			if (current._last_focused) {
				var comp = current._getHeadingOrderNext(current._last_focused, direction);
				if (comp) {
					return comp;
				}
				else {
					current._last_focused = null;
				}
			}
			else if (current._last_focused == null) {
				if (direction == 1) {
					var comp = current._getHeadingOrderFirst(true);
				}
				else {
					var comp = current._getHeadingOrderLast(true);
				}
				if (comp) {
					return comp;
				}
			}
		}

		var ar = this._getSortedDecendants(this, true, true, null);
		var cur_idx = nexacro._indexOf(ar, current._getRootComponent(current));
		if (cur_idx < 0) {
			return null;
		}

		var child;
		if (direction > 0) {
			for (var i = cur_idx + direction, n = ar.length; i < n; i++) {
				child = ar[i];

				if (child._isAccessibilityRoleHeading()) {
					return child;
				}
				else if (child && child._is_form) {
					var current_first_child = child._getHeadingOrderFirst(true);
					if (current_first_child) {
						return current_first_child;
					}
				}
			}
		}
		else if (direction < 0) {
			for (var i = cur_idx + direction; i >= 0; i--) {
				child = ar[i];
				if (child._isAccessibilityRoleHeading()) {
					return child;
				}
				else if (child && child._is_form) {
					var current_first_child = child._getHeadingOrderLast(true);
					if (current_first_child) {
						return current_first_child;
					}
				}
			}
		}
		return null;
	};

	_pFormBase._getSortedDecendants = function (p, include_not_tabstop, bAccessibility) {
		if (include_not_tabstop === undefined) {
			include_not_tabstop = false;
		}

		var ar = [];
		var comps = p.components;
		if (comps) {
			var comp_len = comps.length;
			for (var i = 0; i < comp_len; i++) {
				var comp = comps[i];

				if (!comp || !comp._is_created || !comp.visible || ((comp._isEnable && !comp._isEnable() || !comp.enable) && (!nexacro._enableaccessibility || nexacro._accessibilitytype != 5)) || comp._popup) {
					continue;
				}

				if (!bAccessibility && !include_not_tabstop && !comp.on_get_prop_tabstop()) {
					continue;
				}

				var tabidx = comp._taborder;
				if (tabidx < 0) {
					tabidx = 0;
				}
				var j = ar.length;
				while (j > 0 && ar[j - 1]._taborder > tabidx) {
					ar[j] = ar[j - 1];
					j--;
				}
				ar[j] = comp;
			}
		}
		return ar;
	};

	_pFormBase.addLayout = function (name, obj) {
		if (!obj) {
			return;
		}

		if (name == "default") {
			this._default_layout = obj;
		}
		else if (application._screeninfo == null || (obj.screenid == "")) {
			this._layout_list.add_item(name, obj);
		}
		else if (application._curscreen) {
			if (!obj.screenid || obj.screenid == "") {
				this._layout_list.add_item(name, obj);
				return;
			}

			var screenid_list = obj.screenid.split(',');
			var cnt = screenid_list.length;
			for (var i = 0; i < cnt; i++) {
				if (application._curscreen.name == screenid_list[i]) {
					this._layout_list.add_item(name, obj);
					break;
				}
			}
		}
	};


	_pFormBase._setPos = function (left, top) {
		if (this._adjust_left != left || this._adjust_top != top) {
			this._adjust_left = this.left = left;
			this._adjust_top = this.top = top;

			if (this.parent) {
				this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width, this.parent._client_height);
			}
			else {
				this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, 0, 0);
			}

			this.on_update_position(false, true);
		}
	};

	_pFormBase._setSize = function (width, height) {
		if (this._adjust_width != width || this._adjust_height != height) {
			this._adjust_width = this.width = width;
			this._adjust_height = this.height = height;

			if (this.parent) {
				this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width, this.parent._client_height);
			}
			else {
				this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, 0, 0);
			}

			this.on_update_position(true, false);
		}
	};

	_pFormBase._initLayoutManager = function () {
		var layout_name = "default";
		var layout_list_len = this._layout_list.length;
		if (layout_list_len > 0) {
			var old_layout_name = this._current_layout_name;
			this._current_layout_name = "";
			this._cur_real_layout = "";

			var xy = {
				cx : this._adjust_width, 
				cy : this._adjust_height
			};
			var idx = application.getLayoutManager().checkValid(this, xy);

			layout_list_len = this._layout_list.length;


			if (this._layout_list[layout_list_len - 1].name != "default") {
				if (this._default_layout.screenid == "" || this._default_layout.screenid.indexOf(application._curscreen.name) >= 0) {
					this._layout_list.add_item("default", this._default_layout);
					layout_list_len = this._layout_list.length;
				}
			}


			if (idx >= 0) {
				var ret;
				var old_layout = this._layout_list[old_layout_name];
				var new_layout = this._layout_list[idx];
				var oldwidth = 0, oldheight = 0;
				oldwidth = old_layout ? old_layout.width : 0;
				oldheight = old_layout ? old_layout.height : 0;

				if (old_layout_name != new_layout.name) {
					ret = this.on_fire_canlayoutchange(this, "canlayoutchange", old_layout_name, new_layout.name, oldwidth, new_layout.width, oldheight, new_layout.height);
				}

				if (ret === true || ret === undefined) {
					application.getLayoutManager().loadLayout(this, null, new_layout);

					if (old_layout_name != new_layout.name) {
						this.on_fire_onlayoutchanged(this, "onlayoutchanged", old_layout_name, new_layout.name, oldwidth, new_layout.width, oldheight, new_layout.height);
					}

					this._current_layout_name = new_layout.name;
					this._cur_real_layout = new_layout.name;
				}
				else {
					if (old_layout_name) {
						layout_name = old_layout_name;
					}

					this._current_layout_name = layout_name;
					this._cur_real_layout = layout_name;
				}
			}
		}
		else if (layout_list_len <= 0 && this._default_layout) {
			application.getLayoutManager().loadLayout(this, null, this._default_layout, this._default_layout);

			this._current_layout_name = layout_name;
			this._cur_real_layout = layout_name;
		}
	};

	_pFormBase._checkValidLayout = function () {
		var pManager = application.getLayoutManager();
		if (pManager) {
			var old_layout_name = this._current_layout_name;
			var new_layout = null;
			var xy = {
				cx : this._adjust_width, 
				cy : this._adjust_height
			};
			var new_idx = pManager.checkValid(this, xy);

			if (new_idx > -1) {
				new_layout = this._layout_list[new_idx];
			}
			else {
				return pManager.getCurrentLayout(this);
			}

			if (new_layout && old_layout_name != new_layout.name) {
				var len = this.all.length;
				for (var i = 0; i < len; i++) {
					if (this.all[i]._is_form && this.all[i]._layout_list.length > 0) {
						this.all[i]._checkValidLayout(xy);
					}
				}

				var old_layout = this._layout_list[old_layout_name];
				var oldwidth = 0, oldheight = 0;
				oldwidth = old_layout ? old_layout.width : 0;
				oldheight = old_layout ? old_layout.height : 0;
				var ret = this.on_fire_canlayoutchange(this, "canlayoutchange", old_layout_name, new_layout.name, oldwidth, new_layout.width, oldheight, new_layout.height);
				if (ret === true || ret === undefined) {
					if (new_layout.name != "default") {
						pManager.changeLayout(this, this._default_layout);
					}

					pManager.changeLayout(this, new_layout);

					this.on_fire_onlayoutchanged(this, "onlayoutchanged", old_layout_name, new_layout.name, oldwidth, new_layout.width, oldheight, new_layout.height);
				}

				if (this._is_scrollable) {
					this.resetScroll();
				}

				return new_layout;
			}
		}
	};

	_pFormBase._on_prepare_stepcontents = function (old_stepcount, old_stepindex, new_stepcount, new_stepindex) {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this._is_created && (old_stepcount > 0 || new_stepcount > 0)) {
				var comps = this.components;
				var comp_len = comps.length;
				for (var i = 0; i < comp_len; i++) {
					var comp_elem = comps[i].getElement();
					control_elem.removeChildElement(comp_elem);
				}
			}

			control_elem.setElementStepCount(new_stepcount);
			control_elem.setElementStepIndex(new_stepindex);
			if (new_stepindex > -1 && control_elem._step_count > new_stepindex) {
				control_elem.setElementHScrollPos(control_elem.client_width * new_stepindex);
			}
		}

		if (this.stepcontrol) {
			this._destroyStepControl();
		}
	};

	_pFormBase._on_refresh_stepcontents = function (old_stepcount, old_stepindex, new_stepcount, new_stepindex) {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this._is_created && (old_stepcount > 0 || new_stepcount > 0)) {
				var comps = this.components;
				var comp_len = comps.length;
				for (var i = 0; i < comp_len; i++) {
					var comp_elem = comps[i].getElement();
					control_elem.appendChildElement(comp_elem);
				}
			}
		}

		if (new_stepcount > 0) {
			if (!this.stepcontrol) {
				this._createStepControl(new_stepcount, new_stepindex);
			}

			if (this._is_created) {
				this.stepcontrol.on_created();
			}
		}
	};

	_pFormBase._createStepControl = function (stepcnt, stepidx) {
		if (!this.stepcontrol) {
			var step_ctrl = new nexacro.StepCtrl("stepcontrol", "absolute", 0, 0, 0, 0, null, null, this);
			step_ctrl.createComponent(true);
			step_ctrl.set_stepcount(stepcnt);
			step_ctrl.set_stepindex(stepidx);
			step_ctrl._setRtlDirection(this._rtldirection);

			this.stepcontrol = step_ctrl;

			this._updateStepControlSize();
			this._setEventHandler("onstepchanged", this._on_stepchanged, this);
		}
	};

	_pFormBase._destroyStepControl = function () {
		var step_ctrl = this.stepcontrol;
		if (step_ctrl) {
			step_ctrl.destroy();
			this.stepcontrol = null;
		}
	};

	_pFormBase._updateStepControlSize = function () {
		var step_ctrl = this.stepcontrol;
		if (step_ctrl) {
			this.on_update_style_stepalign();
		}
	};

	_pFormBase._on_stepchanged = function (obj, e) {
		var stepcontrol = this.stepcontrol;
		var control_elem = this.getElement();
		if (stepcontrol && control_elem) {
			var zoomFactor = this.getZoom() / 100;
			var client_width = control_elem.client_width / zoomFactor;

			var is_invalid_pos = (control_elem.scroll_left != (client_width * stepcontrol.stepindex));
			if (!is_invalid_pos) {
				return;
			}

			this._createStepChangeAnimation(stepcontrol.stepindex, 400);
		}
	};

	_pFormBase.on_fire_sys_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._last_focused && !this._skip_comp && (this._last_focused instanceof nexacro.Menu || this._last_focused instanceof nexacro.MenuItem)) {
			this._last_focused._killfocus_item();
		}

		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttondown._fireSysEvent(this, evt);
		}
		return false;
	};

	_pFormBase.on_fire_sys_onslidestart = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (this.stepcontrol && this._stepchange_info) {
			this._on_cancel_stepchange_animation();
		}
		return nexacro.Component.prototype.on_fire_sys_onslidestart.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
	};

	_pFormBase.on_fire_sys_onslideend = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		if (touch_manager && touch_manager._scroll_comp == this) {
			var control_elem = this.getElement();
			var stepcontrol = this.stepcontrol;
			if (!control_elem || !stepcontrol) {
				return;
			}

			var zoomFactor = this.getZoom() / 100;
			var client_width = control_elem.client_width / zoomFactor;

			var is_invalid_pos = (control_elem.scroll_left != (client_width * stepcontrol.stepindex));
			if (!is_invalid_pos) {
				return;
			}

			var duration = 400;


			var target_pos = control_elem.scroll_left - (client_width / 2);

			var flinginfo = touch_manager.checkFling();
			if (flinginfo) {
				var flingfactor = 3;
				var flingdistance = flinginfo.xstartvalue | 0;

				if (flingdistance < -(client_width / flingfactor)) {
					flingdistance = -(client_width / flingfactor);
				}
				if (flingdistance > (client_width / flingfactor)) {
					flingdistance = (client_width / flingfactor);
				}

				target_pos -= flingdistance;
			}

			var target_index = nexacro.round(target_pos / (client_width) + 0.5);

			var ret = stepcontrol.set_stepindex(target_index);

			if (!ret) {
				if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
					if (control_elem._client_element) {
						control_elem._client_element._cached_scrollLeft = -1;
					}
				}
				control_elem.setElementHScrollPos(client_width * stepcontrol.stepindex);
			}

			touch_manager._fling_blocked = true;
		}
		else {
			return nexacro.Component.prototype.on_fire_sys_onslideend.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);
		}

		return false;
	};

	_pFormBase._createStepChangeAnimation = function (target_index, duration) {
		if (this._stepchange_info) {
			this._on_cancel_stepchange_animation();
		}

		var control_elem = this.getElement();
		if (control_elem) {
			var info = {
			};
			info.is_alive = true;
			info.target_index = target_index;
			info.starttime = new Date().getTime();
			info.duration = duration;
			var zoomFactor = this.getZoom() / 100;
			var hscroll_step = control_elem.hscroll_limit / (control_elem._step_count - 1);
			info.startpos = control_elem.scroll_left;
			info.endpos = hscroll_step * target_index;

			if (this.style.stepshowtype == "action") {
				var stepcontrol = this.stepcontrol;
				if (stepcontrol) {
					stepcontrol.set_visible(true);
				}
			}

			var pThis = this;
			info.timer = new nexacro.AnimationFrame(this, function () {
				pThis._on_stepchange_animation();
			});
			info.timer.start();

			this._stepchange_info = info;
		}
	};

	_pFormBase._on_stepchange_animation = function () {
		var control_elem = this.getElement();
		if (!control_elem) {
			return;
		}

		var info = this._stepchange_info;
		if (info && info.is_alive) {
			var t = new Date().getTime() - info.starttime;
			var d = info.duration;
			var q = t / d - 1;
			var c = Math.min((q * q * q + 1), 1);
			var curpos = info.startpos + ((info.endpos - info.startpos) * c);

			control_elem.setElementHScrollPos(curpos);
			if (t >= info.duration) {
				this._on_end_stepchange_animation();
			}
			else {
				info.timer.start();
			}
		}
	};

	_pFormBase._on_end_stepchange_animation = function () {
		var info = this._stepchange_info;
		if (!info) {
			return;
		}

		info.is_alive = false;
		if (info.timer) {
			info.timer.stop();
		}

		var control_elem = this.getElement();
		var stepcontrol = this.stepcontrol;
		if (control_elem && stepcontrol) {
			var new_index = info.target_index;
			delete info;

			control_elem.setElementStepIndex(new_index);
			var hscroll_step = control_elem.hscroll_limit / (control_elem._step_count - 1);
			control_elem.setElementHScrollPos(hscroll_step * new_index);

			var comps = this.components;
			var comp_len = comps.length;
			for (var i = 0; i < comp_len; i++) {
				comps[i].on_apply_positionstep(comps[i].positionstep);
			}

			this.on_apply_style_stepshowtype(this.style.stepshowtype);
			this._stepchange_info = null;
		}
	};

	_pFormBase._on_cancel_stepchange_animation = function () {
		var info = this._stepchange_info;
		if (!info) {
			return;
		}

		info.is_alive = false;
		if (info.timer) {
			info.timer.stop();
		}
		delete info;
		this._stepchange_info = null;
	};

	_pFormBase._getNextComponent = function (current, direction, bNoComposite) {
		if (current && current._is_form && direction > 0 && bNoComposite) {
			var current_first_child = current._getTabOrderFirst();

			if (current_first_child != null) {
				return current_first_child;
			}
		}

		var ar = this._getSortedDecendants(this, true, undefined);
		var cur_idx = nexacro._indexOf(ar, current._getRootComponent(current));

		if (cur_idx < 0) {
			return null;
		}

		var child;
		if (direction > 0) {
			for (var i = cur_idx + direction, ar_len = ar.length; i < ar_len; i++) {
				child = ar[i];
				if (child.on_get_prop_tabstop()) {
					if (bNoComposite && child._is_form) {
						return this._getNextComponent(child, direction, bNoComposite);
					}
					else {
						return child;
					}
				}
			}
		}
		else if (direction < 0) {
			for (var i = cur_idx + direction; i >= 0; i--) {
				child = ar[i];
				if (child.on_get_prop_tabstop()) {
					if (bNoComposite && child._is_form) {
						return this._getNextComponent(child, direction, bNoComposite);
					}
					else {
						return child;
					}
				}
			}
		}

		return null;
	};

	_pFormBase._searchNextComponent = function (current, bSearchFromFirst, opt_force_cycle, bAccessibility, bhotkey, bnocomposite) {
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility && (nexacro._accessibilitytype != 5);

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, bAccessibility);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;

		if (my_tabstop_child_cnt > 0 && current && !bSearchFromFirst) {
			next = this._getTabOrderNext(current, true, bAccessibility, undefined, undefined, bhotkey, undefined, true);

			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getTabOrderFirst(bAccessibility);
			}
			if (!next) {
				var parent = this.parent;
				var parent_tabstop_childs = parent._getSortedDecendants(this.parent, undefined, bAccessibility);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				if (!opt_cycle && (parent._is_frame || this._is_window)) {
					ret = [null, this, 1];
				}
				else if (parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = parent._searchNextComponent(this, false, undefined, bAccessibility, bhotkey, bnocomposite);
				}
				else {
					next = this._getTabOrderFirst(bAccessibility);
				}
			}
		}
		else {
			next = this._getTabOrderFirst(bAccessibility);

			if (!next) {
				if (this.parent._is_form) {
					ret = this.parent._searchNextComponent(this, undefined, undefined, bAccessibility, bhotkey, bnocomposite);
				}
				else {
					ret = null;
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, bAccessibility) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;
			if (next._is_form && bAccessibility && next._checkContainerTabFocus() == true) {
				ret = [next];
			}
			else if ((next._is_form && next_tabstop_child_cnt > 0 && bnocomposite) || application._getNextMethod_owner == next.name) {
				ret = next._searchNextComponent(null, true, undefined, bAccessibility, bhotkey, bnocomposite);
			}
			else {
				ret = [next];
			}
		}
		return ret;
	};

	_pFormBase._searchNextTabFocus = function (current, bSearchFromFirst, opt_force_cycle, bAccessibility, bhotkey) {
		var tabkeycirculation = application._tabkeycirculation;
		var opt_cycle = (opt_force_cycle == undefined) ? (tabkeycirculation == 0 || tabkeycirculation == 2) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility && (nexacro._accessibilitytype != 5);

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, bAccessibility);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;

		if (my_tabstop_child_cnt > 0 && current && !bSearchFromFirst) {
			next = this._getTabOrderNext(current, true, bAccessibility, undefined, undefined, bhotkey);

			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getTabOrderFirst(bAccessibility);
			}
			if (!next) {
				var parent = this.parent;
				var parent_tabstop_childs = parent._getSortedDecendants(this.parent, undefined, bAccessibility);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				if (!opt_cycle && (parent._is_frame || this._is_window) && (tabkeycirculation != 2 && tabkeycirculation != 3 || this._is_window)) {
					ret = [null, this, 1];
				}
				else if (parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = parent._searchNextTabFocus(this, false, undefined, bAccessibility, bhotkey);
				}
				else if ((tabkeycirculation == 2 || tabkeycirculation == 3) && parent instanceof nexacro.ChildFrame && 
					!(this.parent._window_type > 0 && this.parent._window_type < 6)) {
					ret = parent._searchNextTabFocus(this, false, undefined, bAccessibility, bhotkey);
				}
				else {
					next = this._getTabOrderFirst(bAccessibility);
				}
			}
		}
		else {
			next = this._getTabOrderFirst(bAccessibility);

			if (!next) {
				if (this.parent && this.parent._is_form) {
					ret = this.parent._searchNextTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else if ((tabkeycirculation == 2 || tabkeycirculation == 3) && this.parent && this.parent._is_frameset) {
					var _tabkeycirculation = this.parent._tabkeycirculation;
					var _frames = this.parent.frames;
					var n = _frames ? _frames.length : 0;
					var _childframe = null;
					var _frameset_idx = -1;
					var _idx = -1;
					for (var i = 0; i < n; i++) {
						if (_frames[i] instanceof nexacro.ChildFrame) {
							if (this.id == _frames[i].id) {
								_idx = i;
							}
							else if (_idx != -1) {
								if (_frames[i]._isFocusAcceptable()) {
									if (!(this.parent instanceof nexacro.FrameSet) || (this.parent instanceof nexacro.FrameSet && ((_tabkeycirculation == 3 && this.parent._arrange != 0) || 
										_tabkeycirculation == 0 || (_tabkeycirculation == 1 && _frames[i]._state_openstatus != 2)) || 
										_tabkeycirculation == 2 && _frames[i]._activate)) {
										_childframe = _frames[i];
										break;
									}
								}
							}
						}
						else if (_frames[i]._is_frameset && _frames[i]._isFocusAcceptable()) {
							if (_idx < i && _frameset_idx == -1) {
								_frameset_idx = i;
							}
						}
					}

					if (!_childframe) {
						if (_frameset_idx != -1) {
							_childframe = _frames[_frameset_idx]._getNextChildFrame(_frames[_frameset_idx].frames);
							if (_childframe) {
								next = _childframe.form ? _childframe.form._getTabOrderFirst() : null;
							}
							else {
								var _next_frame_ = null;
								var pp = this.parent.parent;
								if (pp && pp._getNextFrame_) {
									_next_frame_ = pp._getNextFrame_(this.parent.id, opt_cycle);
								}
								if (_next_frame_) {
									if (_next_frame_ instanceof nexacro.ChildFrame) {
										next = _next_frame_.form ? _next_frame_.form._getTabOrderFirst() : null;
									}
									else {
										ret = _next_frame_._searchNextTabFocus(_next_frame_, false, undefined, bAccessibility, bhotkey);
									}
								}
							}
						}
						else {
							var _next_frame_ = null;
							var pp = this.parent.parent;
							if (pp && pp._getNextFrame_) {
								_next_frame_ = pp._getNextFrame_(this.parent.id, opt_cycle);
							}
							if (_next_frame_) {
								if (_next_frame_ instanceof nexacro.ChildFrame) {
									next = _next_frame_.form ? _next_frame_.form._getTabOrderFirst() : null;
								}
								else {
									ret = _next_frame_._searchNextTabFocus(_next_frame_, false, undefined, bAccessibility, bhotkey);
								}
							}
						}
					}
					else {
						next = _childframe.form ? _childframe.form._getTabOrderFirst() : null;
					}
				}
				else {
					ret = null;
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, bAccessibility) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;
			if (next._is_form && bAccessibility && next._checkContainerTabFocus() == true) {
				ret = [next];
			}
			else if (next._is_form && next_tabstop_child_cnt > 0) {
				ret = next._searchNextTabFocus(null, true, undefined, bAccessibility, bhotkey);
			}
			else if (next._is_form && next_tabstop_child_cnt > 0 && (!next._isVisible() || !next._isEnable() || !next._isFocusAcceptable())) {
				ret = next._searchNextTabFocus(next, undefined, undefined, false);
			}
			else {
				ret = [next];
			}
		}

		return ret;
	};

	_pFormBase._searchNextHeadingFocus = function (current, bSearchFromFirst, opt_force_cycle) {
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility;

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, true);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
		if (my_tabstop_child_cnt > 0 && current && !bSearchFromFirst) {
			next = this._getHeadingOrderNext(current, 1);
			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getHeadingOrderFirst();
			}
			if (!next) {
				var parent = this.parent;
				var parent_tabstop_childs = parent._getSortedDecendants(this.parent, undefined, true);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				if (!opt_cycle && (parent._is_frame || this._is_window)) {
					ret = [null, this, 1];
				}
				else if (parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = parent._searchNextHeadingFocus(this);
				}
				else {
					next = this._getHeadingOrderFirst();
				}
			}
		}
		else {
			next = this._getHeadingOrderFirst();
			if (!next) {
				if (this.parent._is_form) {
					ret = this.parent._searchNextHeadingFocus(this);
				}
				else {
					ret = null;
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, true) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;
			if (next._is_form && next._checkContainerHeadingFocus() == true) {
				ret = [next];
			}
			else if (next._is_form && next_tabstop_child_cnt > 0) {
				ret = next._searchNextHeadingFocus(null, true);
			}
			else {
				ret = [next];
			}
		}

		return ret;
	};

	_pFormBase._searchPrevComponent = function (current, bSearchFromLast, opt_force_cycle, bAccessibility, bhotkey, bNoComposite) {
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility && (nexacro._accessibilitytype != 5);

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, bAccessibility);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;

		if (my_tabstop_child_cnt && current && !bSearchFromLast) {
			next = this._getTabOrderNext(current, -1, bAccessibility, undefined, undefined, bhotkey);
			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getTabOrderLast(bAccessibility);
			}

			if (!next) {
				var parent_tabstop_childs = this.parent._getSortedDecendants(this.parent, undefined, bAccessibility);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				var parent_comps = this.parent.components;

				if (!opt_cycle && (this.parent._is_frame || this._is_window)) {
					ret = [null, this, -1];
				}
				else if (bAccessibility && this._checkContainerTabFocus() == true && this.parent._is_form) {
					ret = [this];
				}
				else if (this.parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					next = this._getTabOrderLast(bAccessibility);
				}
			}
		}
		else {
			if (!ret) {
				next = this._getTabOrderLast(bAccessibility);

				if (!next && ret !== null) {
					if (bAccessibility && opt_container_focus && this._checkContainerTabFocus() == true) {
						ret = [this];
					}
					else if (this.parent._is_form) {
						ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
					}
					else {
						ret = null;
					}
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, bAccessibility) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;

			if (next._is_form && next_tabstop_child_cnt > 0 && bNoComposite) {
				ret = next._searchPrevTabFocus(null, true, undefined, bAccessibility, bhotkey);
			}
			else {
				ret = [next];
			}
		}

		return ret;
	};

	_pFormBase._searchPrevTabFocus = function (current, bSearchFromLast, opt_force_cycle, bAccessibility, bhotkey) {
		var tabkeycirculation = application._tabkeycirculation;
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0 || tabkeycirculation == 2) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility && (nexacro._accessibilitytype != 5);

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, bAccessibility);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
		if (my_tabstop_child_cnt && current && !bSearchFromLast) {
			next = this._getTabOrderNext(current, -1, bAccessibility, undefined, undefined, bhotkey);
			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getTabOrderLast(bAccessibility);
			}

			if (!next) {
				var parent_tabstop_childs = this.parent._getSortedDecendants(this.parent, undefined, bAccessibility);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				var parent_comps = this.parent.components;
				if (opt_cycle == false && (this.parent._is_frame || this._is_window) && (tabkeycirculation != 2 && tabkeycirculation != 3 || this._is_window)) {
					ret = [null, this, -1];
				}
				else if (bAccessibility && this._checkContainerTabFocus() == true && this.parent._is_form) {
					ret = [this];
				}
				else if (this.parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else if ((tabkeycirculation == 2 || tabkeycirculation == 3) && this.parent instanceof nexacro.ChildFrame && 
					!this.parent._window) {
					ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					next = this._getTabOrderLast(bAccessibility);
				}
			}
		}
		else {
			if (!bSearchFromLast) {
				if (this instanceof nexacro.PopupDiv) {
					next = this._getTabOrderLast(bAccessibility);
				}
				else if (this.parent._is_form) {
					ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					ret = null;
				}
			}

			if (!ret) {
				next = this._getTabOrderLast(bAccessibility);
				if (!next) {
					if (bAccessibility && opt_container_focus && this._checkContainerTabFocus() == true) {
						ret = [this];
					}
					else if (this.parent._is_form) {
						ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
					}
					else if ((tabkeycirculation == 2 || tabkeycirculation == 3) && this.parent && this.parent._is_frameset) {
						var _tabkeycirculation = this.parent._tabkeycirculation;
						var _frames = this.parent.frames;
						var n = _frames ? _frames.length : 0;
						var _childframe = null;
						var _frameset_idx = -1;
						var _idx = -1;
						for (var i = n - 1; i >= 0; i--) {
							if (_frames[i] instanceof nexacro.ChildFrame) {
								if (this.id == _frames[i].id) {
									_idx = i;
								}
								else if (_idx != -1) {
									if (_frames[i]._isFocusAcceptable()) {
										if (!(this.parent instanceof nexacro.FrameSet) || (this.parent instanceof nexacro.FrameSet && ((_tabkeycirculation == 3 && this.parent._arrange != 0) || 
											_tabkeycirculation == 0 || (_tabkeycirculation == 1 && _frames[i]._state_openstatus != 2)) || 
											_tabkeycirculation == 2 && _frames[i]._activate)) {
											_childframe = _frames[i];
											break;
										}
									}
								}
							}
							else if (_frames[i]._is_frameset && _frames[i]._isFocusAcceptable()) {
								if (_idx > i && _frameset_idx == -1) {
									_frameset_idx = i;
								}
							}
						}

						if (!_childframe) {
							if (_frameset_idx != -1) {
								_childframe = _frames[_frameset_idx]._getPrevChildFrame(_frames[_frameset_idx].frames);
								if (_childframe) {
									next = _childframe.form ? _childframe.form._getTabOrderLast() : null;
								}
							}
							else {
								var pp = this.parent.parent;
								if (pp && pp._getPrevFrame_) {
									_prev_frame_ = pp._getPrevFrame_(this.parent.id, opt_cycle);
								}
								else {
									if (tabkeycirculation == 2) {
										if (this.parent._getPrevChildFrame) {
											_prev_frame_ = this.parent._getPrevChildFrame(this.parent.frames);
										}
									}
									else {
										ret = null;
									}
								}
								if (_prev_frame_) {
									if (_prev_frame_ instanceof nexacro.ChildFrame) {
										if (tabkeycirculation == 3) {
											if (this.form == _prev_frame_.form) {
												next = _prev_frame_.form ? _prev_frame_.form._getTabOrderFirst() : null;
											}
											else {
												next = _prev_frame_.form ? _prev_frame_.form._getTabOrderLast() : null;
											}
										}
										else {
											next = _prev_frame_.form ? _prev_frame_.form._getTabOrderLast() : null;
										}
									}
									else {
										ret = _prev_frame_._searchPrevTabFocus(_prev_frame_, undefined, undefined, bAccessibility, bhotkey);
									}
								}
								else {
								}
							}
						}
						else {
							next = _childframe.form ? _childframe.form._getTabOrderLast() : null;
						}
					}
					else {
						ret = null;
					}
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, bAccessibility) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;

			if (next._is_form && next_tabstop_child_cnt > 0) {
				ret = next._searchPrevTabFocus(null, true, undefined, bAccessibility, bhotkey);
			}
			else if (next._is_form && next_tabstop_child_cnt > 0 && (!next._isVisible() || !next._isEnable() || !next._isFocusAcceptable())) {
				ret = next._searchPrevTabFocus(next, undefined, undefined, false);
			}
			else {
				ret = [next];
			}
		}

		return ret;
	};


	_pFormBase._searchPrevHeadingFocus = function (current, bSearchFromLast, opt_force_cycle) {
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility;

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, true);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
		if (my_tabstop_child_cnt && current && !bSearchFromLast) {
			next = this._getHeadingOrderNext(current, -1);

			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getHeadingOrderLast();
			}
			if (!next) {
				var parent_tabstop_childs = this.parent._getSortedDecendants(this.parent, undefined, true);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				var parent_comps = this.parent.components;
				if (opt_cycle == false && (this.parent._is_frame || this._is_window)) {
					ret = [null, this, -1];
				}
				else if (opt_container_focus && this._type_name == "Tabpage") {
					ret = [this.parent];
				}
				else if (opt_container_focus && this._checkContainerHeadingFocus() == true) {
					ret = [this];
				}
				else if (this.parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = this.parent._searchPrevHeadingFocus(this);
				}
				else {
					next = this._getHeadingOrderLast();
				}
			}
		}
		else {
			if (!bSearchFromLast) {
				if (this.parent._is_form) {
					ret = this.parent._searchPrevTabFocus(this);
				}
				else {
					ret = null;
				}
			}

			if (!ret) {
				next = this._getTabOrderLast();
				if (!next && ret !== null) {
					if (this.parent._is_form) {
						ret = this.parent._searchPrevHeadingFocus(this);
					}
					else {
						ret = null;
					}
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, true) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;
			if (next._is_form && next_tabstop_child_cnt > 0) {
				ret = next._searchPrevHeadingFocus(null, true);
			}
			else {
				ret = [next];
			}
		}

		return ret;
	};

	_pFormBase._processArrowKey = function (bdown, newfocus_comp) {
		if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
			var win = this._getWindow();
			win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
		}
		var dir = 2;
		if (!bdown) {
			dir = 3;
		}
		newfocus_comp[0]._setFocus(true, dir, false);
		if (application.accessibilityfirstovertext && newfocus_comp[0] == this._getTabOrderFirst()) {
			var comp = newfocus_comp[0];
			var _label = comp._getAccessibilityReadLabel() + " " + application.accessibilityfirstovertext;
			comp.getElement().notifyAccessibility(_label, "focus");
		}
		else if (application.accessibilitylastovertext && newfocus_comp[0] == this._getTabOrderLast()) {
			var comp = newfocus_comp[0];
			var _label = comp._getAccessibilityReadLabel() + " " + application.accessibilitylastovertext;
			comp.getElement().notifyAccessibility(_label, "focus");
		}
	};
	_pFormBase._applyHotkey = function (comp, keycode, altKey, ctrlKey, shiftKey) {
		if (!comp.enable || (comp._isEnable && !comp._isEnable())) {
			return false;
		}

		var p = comp.parent;
		do {
			if (p instanceof nexacro.FormBase) {
				break;
			}

			p = p.parent;
		} while (p);

		if (!p.enable) {
			return false;
		}

		comp._on_hotkey(keycode, altKey, ctrlKey, shiftKey);
		return true;
	};

	_pFormBase._processHotkey = function (keycode, altKey, ctrlKey, shiftKey, obj) {
		var parent = null;

		if (obj) {
			parent = obj.parent;
		}

		var hotkey_list = this._hotkey_list;
		var hotkey_comp_list = [], comp = null, idx = 0;

		for (var i = 0, n = hotkey_list.length; i < n; i++) {
			var hotkey_info = hotkey_list[i];
			if (hotkey_info[1] == keycode && hotkey_info[2] == altKey && hotkey_info[3] == ctrlKey && hotkey_info[4] == shiftKey) {
				comp = hotkey_info[0];
				if (comp.parent instanceof nexacro.Tabpage) {
					if (comp.parent._index != comp.parent.parent.tabindex) {
						continue;
					}
				}

				hotkey_comp_list.push(comp);
			}
		}

		var len = hotkey_comp_list.length;
		if (len > 0) {
			pthis = obj;
			while (pthis && idx != 2) {
				for (var i = 0; i < len; i++) {
					comp = idx == 0 ? hotkey_comp_list[i] : hotkey_comp_list[i].parent;
					return this._applyHotkey(hotkey_comp_list[i], keycode, altKey, ctrlKey, shiftKey);
				}
				pthis = pthis.parent;
				idx++;
			}
		}

		if (this._is_frame && (this._window_type == 1 || this._window_type == 4)) {
			return;
		}

		var owner_frame = this.getOwnerFrame();
		if (owner_frame) {
			return owner_frame._processHotkey(keycode, altKey, ctrlKey, shiftKey);
		}
	};

	_pFormBase._appendBeforeCloseMsg = function (current_message, new_message) {
		if (typeof (new_message) == "boolean") {
			new_message = nexacro._toString(new_message);
		}

		if (new_message === undefined || new_message == "" || new_message === null) {
			return current_message;
		}

		if (current_message === undefined || current_message === null) {
			current_message = "";
		}
		else if (current_message != "") {
			current_message += "\n";
		}

		return (current_message + new_message);
	};

	_pFormBase._checkAndConfirmClose = function (confirm_message) {
		if (confirm_message === undefined || confirm_message == "" || confirm_message === null) {
			return true;
		}

		if (this._window && this._window._ignore_close_confirm) {
			return true;
		}

		return nexacro._confirm(this, confirm_message);
	};

	_pFormBase._onResetScrollBar = function () {
		if (!this._is_scrollable) {
			return;
		}

		var control_elem = this._control_element;
		if (control_elem) {
			var new_hbar = false;
			var new_vbar = false;

			var scroll_default_size = nexacro.Component.SCROLLBAR_DEFAULT_SIZE;
			var hscroll_size = scroll_default_size;
			var vscroll_size = scroll_default_size;

			var show_type = 0;
			var bShowVScroll = false;
			var bShowHScroll = false;

			var scrollbars = this._scrollbars;
			if (this.getStepCount() > 0 && (scrollbars == 0 || scrollbars == 1 || scrollbars == 4 || scrollbars == 16)) {
				scrollbars = 2;
			}

			switch (scrollbars) {
				case 0:
					break;
				case 1:
					bShowVScroll = true;
					show_type = 1;
					break;
				case 2:
					bShowHScroll = true;
					show_type = 1;
					break;
				case 3:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 1;
					break;
				case 4:
					bShowVScroll = true;
					show_type = 2;
					break;
				case 8:
					bShowHScroll = true;
					show_type = 2;
					break;
				case 12:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 2;
					break;
				case 16:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 31;
					break;
				case 32:
					bShowVScroll = true;
					bShowHScroll = true;
					show_type = 32;
					break;
			}

			if (bShowHScroll && !this.hscrollbar) {
				this.hscrollbar = this._createHScrollBar(scroll_default_size);
				if (this.hscrollbar.scrollbarsize > 0) {
					hscroll_size = this.hscrollbar.scrollbarsize;
					this.hscrollbar.resize(control_elem.client_width, hscroll_size);
				}
				new_hbar = true;
			}
			else if (bShowHScroll && this.hscrollbar) {
				if (this.hscrollbar.scrollbarsize > 0) {
					hscroll_size = this.hscrollbar.scrollbarsize;
					this.hscrollbar.resize(control_elem.client_width, hscroll_size);
					control_elem._hscroll_height = hscroll_size;
				}
			}
			else if (!bShowHScroll && this.hscrollbar) {
				this.hscrollbar.destroy();
				this.hscrollbar = null;
			}

			if (bShowVScroll && !this.vscrollbar) {
				this.vscrollbar = this._createVScrollBar(scroll_default_size);
				if (this.vscrollbar.scrollbarsize > 0) {
					vscroll_size = this.vscrollbar.scrollbarsize;
					this.vscrollbar.resize(vscroll_size, control_elem.client_height);
				}
				new_vbar = true;
			}
			else if (bShowVScroll && this.vscrollbar) {
				if (this.vscrollbar.scrollbarsize > 0) {
					vscroll_size = this.vscrollbar.scrollbarsize;
					this.vscrollbar.resize(vscroll_size, control_elem.client_height);
					control_elem._vscroll_width = vscroll_size;
				}
			}
			else if (!bShowVScroll && this.vscrollbar) {
				this.vscrollbar.destroy();
				this.vscrollbar = null;
			}

			control_elem.setScrollControls(this.hscrollbar, this.vscrollbar, hscroll_size, vscroll_size, show_type);

			if (new_hbar || this.getStepCount() > 0) {
				this.hscrollbar.createComponent();
			}
			if (new_vbar) {
				this.vscrollbar.createComponent();
			}

			if (control_elem._handle) {
				if (this.hscrollbar && !this.hscrollbar._is_created) {
					this.hscrollbar.on_created();
				}
				if (this.vscrollbar && !this.vscrollbar._is_created) {
					this.vscrollbar.on_created();
				}
			}

			this._updateClientSize(control_elem);
		}
	};

	delete _pFormBase;

	nexacro.Form_Style = function (target) {
		nexacro.Style.call(this, target);
	};

	var _pFormStyle = nexacro._createPrototype(nexacro.Style, nexacro.Form_Style);
	nexacro.Form_Style.prototype = _pFormStyle;

	eval(nexacro._createAlignAttributeEvalStr("_pFormStyle", "stepalign"));
	eval(nexacro._createValueAttributeEvalStr("_pFormStyle", "stepshowtype"));

	_pFormStyle.__custom_emptyObject = function () {
		this.stepalign = null;
		this.stepshowtype = null;
	};
	_pFormStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.stepalign && !this.stepalign._is_empty) {
			val += "stepalign:" + this.stepalign._value + "; ";
		}
		if (this.stepshowtype && !this.stepshowtype._is_empty) {
			val += "stepshowtype:" + this.stepshowtype._value + "; ";
		}
		return val;
	};

	nexacro.Form_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.stepalign = null;
		this.stepshowtype = null;
	};

	var _pFormCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Form_CurrentStyle);
	nexacro.Form_CurrentStyle.prototype = _pFormCurrentStyle;


	_pFormCurrentStyle.__custom_emptyObject = _pFormStyle.__custom_emptyObject;
	_pFormCurrentStyle.__get_custom_style_value = _pFormStyle.__get_custom_style_value;

	delete _pFormStyle;
	delete _pFormCurrentStyle;


	nexacro.Form = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FormBase.call(this, id, position, left, top, width, height, right, bottom, parent, true);

		this.inheritanceid = "";
		this.layout = "";
		this.opener = null;
		this.resizebutton = null;
		this.statustext = "";
		this.titletext = "";
		this.classname = "";
		this.cachelevel = "";
		this.version = "";
		this.layoutautofittype = undefined;
		this.locale = "";


		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmousewheel" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onvscroll" : 1, 
			"onhscroll" : 1, 
			"onactivate" : 1, 
			"onbeforeclose" : 1, 
			"onclose" : 1, 
			"ondeactivate" : 1, 
			"onsyscommand" : 1, 
			"ontimer" : 1, 
			"oninit" : 1, 
			"onload" : 1, 
			"canlayoutchange" : 1, 
			"canstepchange" : 1, 
			"onlayoutchanged" : 1, 
			"onstepchanged" : 1, 
			"ondevicebuttonup" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"ondbltap" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"onzoom" : 1, 

			"onorientationchange" : 1
		};


		this._url = "";
		this._init_width = 0;
		this._init_height = 0;
		this._defaultbutton = null;
		this._escapebutton = null;
		this._accessibility_role = "form";
		this._zoomFactor = undefined;
		this._autofittedZoomFactor = undefined;

		this._is_init = true;
		this._is_closing = false;
		this._is_reload = false;
	};

	var _pForm = nexacro._createPrototype(nexacro.FormBase, nexacro.Form);
	nexacro.Form.prototype = _pForm;

	_pForm._type_name = "Form";

	nexacro.Form_default_stepshowtype = nexacro._getCachedStyleObj("stepshowtype", "always");

	_pForm.on_create_custom_style = function () {
		return new nexacro.Form_Style(this);
	};

	_pForm.on_create_custom_currentStyle = function () {
		return new nexacro.Form_CurrentStyle();
	};

	_pForm.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;
		var stepalign = this.on_find_CurrentStyle_stepalign(pseudo);
		if (curstyle.stepalign != stepalign) {
			curstyle.stepalign = stepalign;
			this.on_apply_style_stepalign(stepalign);
		}

		var stepshowtype = this.on_find_CurrentStyle_stepshowtype(pseudo);
		if (curstyle.stepshowtype != stepshowtype) {
			curstyle.stepshowtype = stepshowtype;
			this.on_apply_style_stepshowtype(stepshowtype);
		}
	};

	_pForm.on_apply_custom_css = function (pseudo) {
		var components = this.components;
		if (components) {
			for (var i = 0, n = components.length; i < n; i++) {
				var comp = components[i];
				comp.on_apply_prop_class(comp[i], pseudo);
			}
		}
	};
	_pForm.on_find_CurrentStyle_stepalign = function (pseudo) {
		var align = this._find_pseudo_obj("stepalign", pseudo, "align");
		return align ? align : nexacro.Component._default_step_align;
	};
	_pForm.on_find_CurrentStyle_stepshowtype = function (pseudo) {
		var stepshowtype = this._find_pseudo_obj("stepshowtype", pseudo, "value");
		return stepshowtype || nexacro.Form_default_stepshowtype;
	};

	_pForm.on_update_style_stepalign = function () {
		var align = this.on_find_CurrentStyle_stepalign(this._pseudo);
		this.currentstyle.stepalign = align;
		this.on_apply_style_stepalign(align);
	};

	_pForm.on_update_style_stepshowtype = function () {
		var showtype = this.on_find_CurrentStyle_stepshowtype(this._pseudo);
		this.currentstyle.stepshowtype = showtype;
		this.on_apply_style_stepshowtype(showtype);
	};

	_pForm.on_apply_style_stepalign = function (stepalign) {
		var control_elem = this.getElement();
		var step_ctrl = this.stepcontrol;
		if (control_elem && step_ctrl) {
			var form_border = this.on_find_CurrentStyle_border(this._pseudo);
			var border_left = (form_border) ? form_border._left_width : 0;
			var border_top = (form_border) ? form_border._top_width : 0;
			var border_right = (form_border) ? form_border._right_width : 0;
			var border_bottom = (form_border) ? form_border._bottom_width : 0;

			var form_width = this._adjust_width - border_left - border_right;
			var form_height = this._adjust_height - border_top - border_bottom;

			var btn_size = step_ctrl._getButtonSize();
			var btn_area = step_ctrl._getButtonAreaSize(step_ctrl.stepcount, btn_size);

			var halign = stepalign.halign;
			var valign = stepalign.valign;
			var left, top;

			switch (halign) {
				case "left":
					left = 0;
					break;
				case "center":
					left = (form_width - btn_area.width) / 2;
					break;
				case "right":
					left = form_width - btn_area.width;
					break;
			}

			switch (valign) {
				case "top":
					top = 0;
					break;
				case "middle":
					top = (form_height - btn_area.height) / 2;
					break;
				case "bottom":
					top = form_height - btn_area.height;
					break;
			}

			step_ctrl.move(left, top, btn_area.width, btn_area.height, null, null);
		}
	};

	_pForm.on_apply_style_stepshowtype = function (stepshowtype) {
		var stepcontrol = this.stepcontrol;
		if (stepcontrol && stepshowtype) {
			var type = stepshowtype.value;
			switch (type) {
				case "action":
					stepcontrol.set_visible(false);
					break;
				case "always":
				default:
					stepcontrol.set_visible(true);
					break;
			}
		}
	};
	_pForm.on_get_style_accessibility_label = function () {
		return this.titletext;
	};

	_pForm.on_get_prop_tabstop = function () {
		return this.tabstop;
	};


	_pForm.on_created = function (_window) {
		var ret = nexacro.FormBase.prototype.on_created.call(this, _window);



		if (this._is_loadcallback && this._is_created) {
			this.on_fire_onload(this, this._url);

			if (!(this instanceof nexacro.Tabpage)) {
				this._on_activate();
			}
		}

		return ret;
	};

	_pForm.on_update_position = function (resize_flag, move_flag) {
		var control_elem = this._control_element;
		if (control_elem) {
			var bForce = false;
			if (this._isRtl(this.parent) && this._left != null) {
				bForce = true;
			}

			control_elem.setElementPosition(this._adjust_left, this._adjust_top, bForce);

			if (resize_flag) {
				var val = this._calcScrollMaxSize();
				control_elem.container_maxwidth = val.w;
				control_elem.container_maxheight = val.h;
			}

			control_elem.setElementSize(this._adjust_width, this._adjust_height);

			this._updateClientSize(control_elem);

			if (move_flag) {
				this.on_fire_onmove(this._adjust_left, this._adjust_top);
			}
			if (resize_flag) {
				this.on_fire_onsize(this._adjust_width, this._adjust_height);
			}
		}
	};

	_pForm.on_change_containerRect = function (width, height) {
		var _move_scroll = false;
		var comps = this.components;
		if (nexacro.OS == "Android" && this.vscrollbar && this.vscrollbar.visible) {
			_move_scroll = true;
			var comp_bottom;
			var comp_scroll_pos;
			var last_comp = this._getLastFocused();
			var form_bottom = this.getOffsetBottom();
		}

		for (var i = 0, n = comps.length; i < n; i++) {
			var comp = comps[i];
			var control_elem = comp.getElement();
			if (control_elem) {
				if (_move_scroll && comp instanceof nexacro.Edit) {
					comp_bottom = comp.getOffsetBottom();
					comp_scroll_pos = comp_bottom - form_bottom;
					if (this.vscrollbar.pos < comp_scroll_pos && form_bottom < comp_bottom && last_comp == comp) {
						this.vscrollbar.set_pos(comp_scroll_pos);
					}
				}
				comp._bChangeRtl = this._bChangeRtl;
				comp.move(comp.left, comp.top, comp.width, comp.height, comp.right, comp.bottom);
				comp._bChangeRtl = false;
			}
		}

		if (this.stepcontrol) {
			this._updateStepControlSize();
		}
		this._onRecalcScrollSize();
	};




	_pForm._on_load = function (obj, url) {
		if (!this._load_callbacklist) {
			return;
		}

		var parent_foraddcallback = this.parent;
		if (this.parent && this.parent.form == this) {
			parent_foraddcallback = application;
		}

		if (parent_foraddcallback && parent_foraddcallback._addLoadCallbacklist) {
			var pthis = this;
			var ret = parent_foraddcallback._addLoadCallbacklist({
				target : pthis, 
				callback : pthis._on_loadcallback, 
				url : this.url
			});
			if (!ret) {
				this._on_loadcallback(obj, url);
			}
		}
	};

	_pForm._addLoadCallbacklist = function (item) {
		if (!this._is_loaded && this._url && this._url.length > 0) {
			if (!this.parent._load_callbacklist) {
				this.parent._load_callbacklist = [];
			}
			this._load_callbacklist.push(item);
			return true;
		}
		return false;
	};


	_pForm._on_loadcallback = function (obj, url) {
		var callbacklist = this._load_callbacklist;

		var n = callbacklist.length, _url;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbacklist[i];
				var target = item.target;
				_url = nexacro._makeurl(item.url);

				if (target._is_alive != false) {
					item.callback.call(target, target, _url);
				}
			}
			callbacklist.splice(0, n);
		}
		var binds = this.binds;
		if (binds) {
			for (var i = 0, len = binds.length; i < len; i++) {
				binds[i].bind();
			}
		}
		this.on_fire_oninit(this);
		this.createComponent(true);

		var _window;
		if (!this._is_created) {
			this._is_loadcallback = true;
			_window = this._getWindow();
			this.on_created(_window);
			this._is_loadcallback = false;
		}


		var ret = false;

		var parent = this.parent;
		if (parent) {
			if (parent._is_frame && parent.form == this) {
				parent._createdForm();
				application._notifyLoadforms(this);
			}
			else {
				if (!_window) {
					_window = this._getRootWindow();
				}

				if (_window && _window.frame && _window.frame._activate == true) {
					var cur_focus_paths = _window.getCurrentFocusPaths();
					if (cur_focus_paths && nexacro._indexOf(cur_focus_paths, this) > -1) {
						if (this instanceof nexacro.Tabpage) {
							this._on_activate();
						}

						if (nexacro._enableaccessibility && nexacro._accessibilitywholereadtype > 1) {
							this._setFocus();
							this._playAccessibilityWholeReadLabel("wholeread");
						}
						else {
							this._on_focus(true);
						}
					}
					else if (nexacro._enableaccessibility && nexacro._accessibilitywholereadtype > 1 && this instanceof nexacro.Div) {
						this._playAccessibilityWholeReadLabel("wholeread");
					}
				}
			}
		}
		this._refreshAccessibilityValue();
		return ret;
	};

	_pForm.set_opener = nexacro._emptyFn;

	_pForm.set_inheritanceid = function (v) {
	};

	_pForm.set_layout = function (v) {
	};

	_pForm.set_statustext = function (v) {
		if (this.parent && this.parent._is_frame) {
			if (this.statustext != v) {
				this.statustext = v;
				this.parent._applyStatusText();
			}
		}
	};

	_pForm.set_titletext = function (v) {
		this._setAccessibilityLabel(v);

		if (this.parent && this.parent._is_frame) {
			if (this.titletext != v) {
				this.titletext = v;
				this.parent._applyTitleText();
			}
		}
	};

	_pForm.set_classname = function (v) {
		return;
	};

	_pForm.set_cachelevel = function (v) {
	};

	_pForm.set_version = function (v) {
		;
	};


	_pForm.set_dragscrolltype = function (v) {
		var enums = ["none", "vert", "horz", "both", "all"];
		if (this.dragscrolltype != v) {
			if (nexacro._indexOf(enums, v) >= 0) {
				this.dragscrolltype = v;
			}
			else {
			}
		}
	};

	_pForm.set_layoutautofittype = function (v) {
		return;
	};

	_pForm.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);

		var comps = this.components;

		var root_form = this._getRootForm();
		var binds = root_form.binds;

		for (var i = 0, n = comps.length; i < n; i++) {
			var comp = comps[i];

			if (binds) {
				var skip = false;
				for (var idx = 0, bind_len = binds.length; idx < bind_len; idx++) {
					var item_comp = binds[idx]._comp;
					if (item_comp == comp && binds[idx]._en_type == 2) {
						skip = true;
						var dataset = binds[idx]._dataset;
						if (dataset.rowposition != -1) {
							comp._setEnable(v);
						}
						break;
					}
				}

				if (!skip) {
					comp._setEnable(v);
				}
			}
			else {
				comp._setEnable(v);
			}
		}
	};

	_pForm.on_apply_prop_rtldirection = function () {
		this._bChangeRtl = true;

		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var control_elem = this._control_element;
		if (control_elem) {
			if (nexacro._isDesktop()) {
				this.on_change_containerRect(control_elem.client_width, control_elem.client_height);
			}
		}

		var comps = this.components;
		var _rtldirection = this._rtldirection;

		for (var i = 0, n = comps.length; i < n; i++) {
			var comp = comps[i];
			if (comp._is_form) {
				comp.on_apply_prop_rtldirection(_rtldirection);
			}
			comp._setRtlDirection(_rtldirection);
		}

		if (this.vscrollbar) {
			this.vscrollbar._setRtlDirection(_rtldirection);
		}
		if (this.hscrollbar) {
			this.hscrollbar._setRtlDirection(_rtldirection);
		}

		if (this.stepcontrol) {
			this.stepcontrol._setRtlDirection(_rtldirection);
		}

		this._bChangeRtl = false;
	};

	_pForm.set_locale = function (v) {
		if (v != this.locale) {
			this.locale = v;
			if (this._locale != v) {
				this._locale = v;
				this.on_apply_locale();
			}
		}
	};

	_pForm.on_apply_locale = function () {
		var comps = this.components;

		for (var i = 0, n = comps.length; i < n; i++) {
			var comp = comps[i];
			comp._setLocale(this._locale);
		}
	};


	_pForm.on_fire_sys_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onrbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);

		if (application._quickview_mode && ret !== true && this.parent instanceof nexacro.ChildFrame) {
			if (from_refer_comp && !from_refer_comp._input_element) {
				return nexacro._showQuickviewMenu(this, screenX, screenY);
			}
		}
		return ret;
	};


	_pForm.on_fire_oninit = function (obj) {
		if (this._is_init && this.oninit && this.oninit._has_handlers) {
			this._is_init = false;
			var evt = new nexacro.Event(obj, "oninit");
			return this.oninit._fireEvent(this, evt);
		}
		return true;
	};

	_pForm.on_fire_canstepchange = function (obj) {
		if (this.canstepchange && this.canstepchange._has_handlers) {
			var evt = new nexacro.StepChangeEventInfo(obj, "canstepchange", obj._prestepindex, obj._poststepindex);
			return this.canstepchange._fireCheckEvent(this, evt);
		}
	};

	_pForm.on_fire_onstepchanged = function (obj) {
		if (this.onstepchanged && this.onstepchanged._has_handlers) {
			var evt = new nexacro.StepChangeEventInfo(obj, "onstepchanged", obj._prestepindex, obj._poststepindex);
			return this.onstepchanged._fireEvent(this, evt);
		}
	};

	_pForm.on_fire_canlayoutchange = function (obj, eventid, curlayoutname, newlayoutname, curlayoutwidth, newlayoutwidth, curlayoutheight, newlayoutheight) {
		if (this.canlayoutchange && this.canlayoutchange._has_handlers) {
			var evt = new nexacro.LayoutChangeEventInfo(obj, eventid, curlayoutname, newlayoutname, curlayoutwidth, newlayoutwidth, curlayoutheight, newlayoutheight);
			return this.canlayoutchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pForm.on_fire_onlayoutchanged = function (obj, eventid, curlayoutname, newlayoutname, curlayoutwidth, newlayoutwidth, curlayoutheight, newlayoutheight) {
		if (this.onlayoutchanged && this.onlayoutchanged._has_handlers) {
			var evt = new nexacro.LayoutChangeEventInfo(obj, eventid, curlayoutname, newlayoutname, curlayoutwidth, newlayoutwidth, curlayoutheight, newlayoutheight);
			return this.onlayoutchanged._fireEvent(this, evt);
		}
		return true;
	};

	_pForm.on_fire_onbeforelayoutchange = function (obj, eventid, curlayout, newlayout) {
		if (this.onbeforelayoutchange && this.onbeforelayoutchange._has_handlers) {
			var evt = new nexacro.LayoutChangeEventInfo(obj, eventid, curlayout, newlayout);
			return this.onbeforelayoutchange._fireEvent(this, evt);
		}
		return true;
	};

	_pForm.on_fire_onload = function (obj, url) {
		if (this._is_reload) {
			this._is_reload = false;
		}

		if (this._is_fired_onload) {
			return true;
		}

		if (this.onload && this.onload._has_handlers) {
			this._bFireLoadEvent = true;
			var evt = new nexacro.LoadEventInfo(obj, "onload", url);
			var ret = this.onload._fireEvent(this, evt);
			this._bFireLoadEvent = false;
			evt.destroy();
			evt = null;

			this._is_fired_onload = true;

			return ret;
		}
		return true;
	};

	_pForm.on_fire_ondevicebuttonup = function (obj, e) {
		if (this.ondevicebuttonup && this.ondevicebuttonup._has_handlers) {
			var evt = new nexacro.DeviceButtonEventInfo(obj, e);
			return this.ondevicebuttonup._fireEvent(this, evt);
		}
		return true;
	};

	_pForm._on_devicebuttonup = function (e) {
		var ret = this.on_fire_ondevicebuttonup(this, e);
		if (!ret && this.parent && this.parent instanceof nexacro.Form) {
			return this.parent._on_devicebuttonup(e);
		}
		return ret;
	};


	_pForm.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		var focusedComp = refer_comp;

		if (!focusedComp) {
			focusedComp = this.getFocus();
		}
		if (!focusedComp) {
			focusedComp = this;
		}
		if (focusedComp) {
			focusedComp = focusedComp._getRootComponent(focusedComp);
		}

		var dlgc = focusedComp._getDlgCode(keycode, alt_key, ctrl_key, shift_key);

		if (keycode == nexacro.Event.KEY_TAB) {
			if (dlgc.want_tab == false) {
				var newfocus_comp;

				var root_window = this._getRootWindow();
				if (root_window._keydown_element) {
					root_window._keydown_element._event_stop = true;
				}

				if (nexacro._enableaccessibility) {
					var ret = nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, this, this._last_focused);
				}


				if (!shift_key) {
					newfocus_comp = this._searchNextTabFocus(this._last_focused, undefined, undefined, false);
				}
				else {
					newfocus_comp = this._searchPrevTabFocus(this._last_focused, undefined, undefined, false);
				}

				if (newfocus_comp && newfocus_comp[0]) {
					if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
						var win = this._getWindow();
						win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
					}

					newfocus_comp[0]._setFocus(true, (!shift_key ? 0 : 1), true);
				}
				else if (newfocus_comp && newfocus_comp[2] == -1) {
					var comp = this._last_focused;
					if (comp) {
						comp.getElement().notifyAccessibility(application.accessibilityfirstovertext);
					}
				}
				else if (newfocus_comp && newfocus_comp[2] == 1) {
					var comp = this._last_focused;
					if (comp) {
						comp.getElement().notifyAccessibility(application.accessibilitylastovertext);
					}
				}

				return true;
			}
		}
		else if (keycode == nexacro.Event.KEY_RETURN) {
			if (dlgc.want_return == false) {
				if (this instanceof nexacro.Form) {
					var is_popup = focusedComp._isPopupVisible();
					if (!is_popup && this._defaultbutton && this._defaultbutton.enableevent && this._defaultbutton._isEnable()) {
						this._defaultbutton.click();
					}
				}
			}
		}
		else if (keycode == nexacro.Event.KEY_ESC) {
			if (nexacro._stopTransaction(this, 1) <= 0 && dlgc.want_escape == false) {
				if (this instanceof nexacro.Form) {
					if (this._escapebutton && this._escapebutton.enableevent && this._escapebutton._isEnable()) {
						this._escapebutton.click();
					}
				}
			}
		}
		else if (nexacro._enableaccessibility && keycode == nexacro.Event.KEY_DOWN) {
			if (dlgc.want_arrows == false) {
				var ret = nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, this, this._last_focused);

				var newfocus_comp = this._searchNextTabFocus(this._last_focused, undefined, undefined, true);
				if (newfocus_comp && newfocus_comp[0]) {
					if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
						var win = this._getWindow();
						win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
					}
					newfocus_comp[0]._setFocus(true, 2, true);
				}
				var root_window = this._getRootWindow();
				root_window._keydown_element._event_stop = true;
				return true;
			}
		}
		else if (nexacro._enableaccessibility && keycode == nexacro.Event.KEY_UP) {
			if (dlgc.want_arrows == false) {
				var ret = nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, this, this._last_focused);

				var newfocus_comp = this._searchPrevTabFocus(this._last_focused, undefined, undefined, true);
				if (newfocus_comp && newfocus_comp[0]) {
					if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
						var win = this._getWindow();
						win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
					}
					newfocus_comp[0]._setFocus(true, 3, true);
				}
				var root_window = this._getRootWindow();
				root_window._keydown_element._event_stop = true;
				return true;
			}
		}

		var ret = nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, this, refer_comp);

		if (!this.onkeydown || (this.onkeydown && !this.onkeydown.defaultprevented)) {
			if (keycode == nexacro.Event.KEY_LEFT || keycode == nexacro.Event.KEY_RIGHT) {
				if (this.hscrollbar && this.hscrollbar.visible && ctrl_key == true) {
					if (dlgc.want_arrows == false) {
						var line = this.hscrollbar.line;
						if (line <= 0) {
							line = this.hscrollbar._linedown;
						}
						if (keycode == nexacro.Event.KEY_LEFT) {
							line *= -1;
						}
						this.hscrollbar.set_pos(this.hscrollbar.pos + line);
						return true;
					}
				}
			}
			else if (keycode == nexacro.Event.KEY_UP || keycode == nexacro.Event.KEY_DOWN) {
				if (this.vscrollbar && this.vscrollbar.visible && ctrl_key == true) {
					if (dlgc.want_arrows == false) {
						var line = this.vscrollbar.line;
						if (line <= 0) {
							line = this.vscrollbar._linedown;
						}
						if (keycode == nexacro.Event.KEY_UP) {
							line *= -1;
						}

						this.vscrollbar.set_pos(this.vscrollbar.pos + line);
						return true;
					}
				}
			}
		}

		return ret;
	};

	_pForm._on_activate = function () {
		if (!this.parent) {
			return;
		}

		var owner_frame = this.getOwnerFrame();
		if (!owner_frame || !owner_frame._activate) {
			return;
		}

		nexacro.FormBase.prototype._on_activate.call(this);
	};

	_pForm._on_deactivate = function () {
		if (!this.parent) {
			return;
		}

		var owner_frame = this.getOwnerFrame();
		if (!owner_frame || !owner_frame._activate) {
			return;
		}

		nexacro.FormBase.prototype._on_deactivate.call(this);
	};

	_pForm._refresh_input_comp = function (child_list, is_focus) {
		if ((nexacro.OS == "iOS" && !nexacro._isHybrid()) || (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge" || nexacro.Browser == "MobileSafari")) {
			var child_list_len = child_list ? child_list.length : 0;
			for (var i = 0; i < child_list_len; i++) {
				var child_comp = child_list[i];
				if (child_comp) {
					if (child_comp instanceof nexacro.TextArea && child_comp.value) {
						if (is_focus) {
							if (child_comp._input_element) {
								child_comp._input_element._refreshElement1(is_focus);
							}
						}
						else {
							(function (c1) {
								setTimeout(function () {
									if (c1 && c1._input_element) {
										c1._input_element._refreshElement1();
									}
								}, 100);
							})(child_comp);
						}
					}
					else if (child_comp instanceof nexacro.Div) {
						this._refresh_input_comp(child_comp._child_list, is_focus);
					}
				}
			}
		}
	};

	_pForm._refresh_input_components = function () {
		if ((nexacro.OS == "iOS" && !nexacro._isHybrid()) || (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge" || nexacro.Browser == "MobileSafari")) {
			var comp = this._last_focused ? this._last_focused : this;

			while (comp) {
				if (comp instanceof nexacro.FormBase) {
					if (comp._last_focused) {
						comp = comp._last_focused;
					}
					else {
						break;
					}
				}
				else {
					break;
				}
			}

			if (comp && (comp._has_inputElement || comp instanceof nexacro.Grid)) {
				var edit_base = null;
				if (comp instanceof nexacro.Grid) {
					edit_base = comp._tempEditor ? comp._tempEditor._edit_base_api : null;
				}
				else {
					edit_base = comp._edit_base_api;
				}
				if (edit_base && !edit_base._is_composition()) {
					if (nexacro.OSVersion >= 10 && (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE")) {
						if (comp instanceof nexacro.TextArea) {
							edit_base.comp._input_element._refreshElement1(true);
						}
						else {
							if (edit_base && edit_base.comp && edit_base.comp._input_element) {
								edit_base.comp._input_element._refreshElement();
							}
						}
					}
					else {
						if (edit_base && edit_base.comp && edit_base.comp._input_element) {
							edit_base.comp._input_element._refreshElement();
						}
					}
				}
			}
			else if (comp && comp instanceof nexacro.FileUpload) {
				if (comp._items) {
					var item = comp._items[comp.index];
					if (item) {
						item.fileitemedit._input_element._refreshElement();
					}
				}
			}
			else {
			}
		}
	};
	_pForm.on_vscroll = function (obj, e) {
		if (this.onvscroll && this.onvscroll._has_handlers) {
			e.fromobject = this;
			this.onvscroll._fireEvent(this, e);
		}

		var control_elem = this._control_element;
		var limit_pos = 0;

		if (control_elem) {
			if (control_elem.scroll_top == control_elem.vscroll_limit && 
				e.pos >= control_elem.scroll_top) {
				return true;
			}
			else {
				limit_pos = control_elem.vscroll_limit;
				control_elem.setElementVScrollPos(e.pos);
			}
		}

		this._refresh_input_components();

		if (e.pos >= limit_pos) {
			return true;
		}

		return true;
	};

	_pForm.on_hscroll = function (obj, e) {
		if (this.onhscroll && this.onhscroll._has_handlers) {
			e.fromobject = this;
			this.onhscroll._fireEvent(this, e);
		}

		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementHScrollPos(e.pos);
		}


		return true;
	};

	_pForm._on_orientationchange = function (orientation) {
		this.on_fire_onorientationchange(orientation);
	};

	_pForm.on_fire_onorientationchange = function (orientation) {
		if (this.onorientationchange && this.onorientationchange._has_handlers) {
			var evt = new nexacro.OrientationChangeEventInfo(this, "onorientationchange", orientation);
			this.onorientationchange._fireEvent(this, evt);
		}
	};

	_pForm.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		var _window = this._getWindow();
		var accessibility_focus_comp = refer_comp;
		var comp = null;

		if (!accessibility_focus_comp) {
			accessibility_focus_comp = this.getFocus();
		}

		if (!accessibility_focus_comp) {
			accessibility_focus_comp = this;
		}

		if (accessibility_focus_comp) {
			accessibility_focus_comp = accessibility_focus_comp._getRootComponent(accessibility_focus_comp);
		}

		if (!direction) {
			comp = this._searchPrevTabFocus(_window._accessibility_last_focused_comp, undefined, undefined, true);

			while (comp && comp[0] && comp[0]._is_form) {
				if (comp[0] == this) {
					var new_comp = comp[0].parent._searchPrevTabFocus(comp[0], undefined, undefined, true);
				}

				if (new_comp && new_comp[0]) {
					if (comp[0] == new_comp[0]) {
						comp = new_comp;
						break;
					}
					comp = new_comp;
				}
				else {
					break;
				}
			}
		}
		else {
			comp = this._searchNextTabFocus(_window._accessibility_last_focused_comp, undefined, undefined, true);

			while (comp && comp[0] && comp[0]._is_form) {
				var my_tapstop_childs = this._getSortedDecendants(comp[0], undefined, true);
				var my_tapstop_childs_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
				if (my_tapstop_childs_cnt == 0) {
					break;
				}

				var new_comp = this._searchNextTabFocus(comp[0], undefined, undefined, true);

				if (comp[0] == new_comp[0]) {
					comp = new_comp;
					break;
				}
				comp = new_comp;
			}
		}

		if (comp && comp[0]) {
			comp[0]._setAccessibilityNotifyEvent(direction);
			return true;
		}

		return false;
	};



	_pForm.addChild = function (id, obj) {
		var ret = -1;

		if (id && id.length <= 0) {
			return -1;
		}
		if (!obj) {
			throw nexacro.MakeReferenceError(this, "reference_not_define", id);
		}

		if (this[id]) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
		}

		obj.parent = this;
		obj._refform = this;

		this[id] = obj;
		this.all.add_item(id, obj);
		obj.id = id;

		if (this.visible && !this._real_visible) {
			obj._real_visible = false;
		}
		else {
			obj._real_visible = this.visible;
		}

		if (obj._is_component) {
			ret = this.components.add_item(id, obj);
			this._child_list.push(obj);
			if (obj._is_alive && obj._is_created && this._is_created) {
				this._control_element.appendChildElement(obj.getElement());
			}

			obj._setRtlDirection(this._rtldirection);
		}
		else if (obj instanceof nexacro.BindItem) {
			ret = this.binds.add_item(id, obj);
		}
		else {
			ret = this.objects.add_item(id, obj);
		}
		return ret;
	};

	_pForm.resetScroll = function () {
		this._onRecalcScrollSize();
		this._onResetScrollBar();
	};

	_pForm.close = function (arg) {
		if (this._is_closing) {
			return;
		}
		this._is_closing = true;
		if (!this.parent || !this.parent._is_frame) {
			return;
		}

		this.setWaitCursor(false, null);

		var childframe = this.parent;

		var confirm_message = childframe._on_beforeclose();
		if (childframe._checkAndConfirmClose(confirm_message) == false) {
			this._is_closing = false;
			return false;
		}

		if (childframe._window) {
			childframe._window._ignore_close_confirm = true;
		}

		childframe._on_close();

		if (typeof (arg) == "object") {
			arg = null;
		}

		if (this.parent) {
			this.parent._closeForm(arg);
		}
		this._is_closing = false;
	};

	_pForm.getFirstComponent = function (no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var first = this._getTabOrderFirst(false, false);
		if (no_composite_flag) {
			if (first._is_form) {
				return first._getTabOrderFirst(false, false);
			}
		}
		return first;
	};

	_pForm.getLastComponent = function (no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var last = this._getTabOrderLast(false, false);
		if (no_composite_flag) {
			if (last._is_form) {
				return last._getTabOrderLast(false, false);
			}
		}
		return last;
	};

	_pForm.getNextComponent = function (comp, no_composite_flag) {
		application._getNextMethod_owner = this.name;

		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var pThis = comp.parent;
		var next = pThis._getNextComponent(comp, 1, no_composite_flag);

		if (!next) {
			next = pThis._searchNextComponent(comp, undefined, undefined, false, false, no_composite_flag)[0];
		}

		return next;
	};

	_pForm.getPrevComponent = function (comp, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var pThis = comp.parent;
		var prev = pThis._getNextComponent(comp, -1, no_composite_flag);

		if (!prev) {
			prev = pThis._searchPrevComponent(comp, undefined, undefined, false, false, no_composite_flag)[0];
		}

		return prev;
	};

	_pForm.getFirstAccessibilityComponent = function (no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var first = this._getTabOrderFirst(true, false);
		if (!first._isAccessibilityEnable()) {
			first = this.getNextAccessibilityComponent(first, no_composite_flag);
		}
		if (no_composite_flag) {
			if (first._is_form) {
				return first._getTabOrderFirst(true, false);
			}
		}
		return first;
	};

	_pForm.getLastAccessibilityComponent = function (no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var last = this._getTabOrderLast(true, false);
		if (!last._isAccessibilityEnable()) {
			last = this.getPrevAccessibilityComponent(last, no_composite_flag);
		}
		if (no_composite_flag) {
			if (last._is_form) {
				return last._getTabOrderLast(true, false);
			}
		}
		return last;
	};

	_pForm.getNextAccessibilityComponent = function (comp, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}
		if (comp) {
			var pThis = comp.parent;
			var next = pThis._getTabOrderNext(comp, 1, true, false);
			if (next == undefined && !nexacro._enableaccessibility) {
				next = pThis.getFirstComponent(no_composite_flag);
			}
			if (no_composite_flag) {
				pThis = next;
				if (next._is_form) {
					var next_c = next._getTabOrderNext(comp, 1, true, false);
					if (next_c) {
						return next_c;
					}
					next_c = next._getTabOrderFirst(true, false);
					if (next_c) {
						return next_c;
					}
				}
			}
			return next;
		}
		return undefined;
	};

	_pForm.getPrevAccessibilityComponent = function (comp, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		if (comp) {
			var pThis = comp.parent;
			var prev = pThis._getTabOrderNext(comp, -1, true, false);
			if (prev == undefined && !nexacro._enableaccessibility) {
				prev = pThis.getLastComponent(no_composite_flag);
			}
			if (no_composite_flag) {
				pThis = prev;
				if (prev._is_form) {
					var prev_c = prev._getTabOrderNext(comp, -1, true, false);
					if (prev_c) {
						return prev_c;
					}
					prev_c = prev._getTabOrderLast(true, false);
					if (prev_c) {
						return prev_c;
					}
				}
			}
			return prev;
		}
		return undefined;
	};

	_pForm.getNextEditableComponent = function (comp, edittype, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}
		if (comp) {
			var pThis = comp.parent;
			var next = pThis._getTabOrderNext(comp, 1, false, true, edittype, undefined, no_composite_flag);
			if (next == undefined) {
				next = pThis._getTabOrderNext(comp, 1, false, true, "All", undefined, no_composite_flag);
			}
			if (next == undefined) {
				next = pThis.getFirstEditableComponent(edittype, no_composite_flag);
			}

			return next;
		}
		return undefined;
	};

	_pForm.getPrevEditableComponent = function (comp, edittype, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		if (comp) {
			var pThis = comp.parent;
			var prev = pThis._getTabOrderNext(comp, -1, false, true, edittype, undefined, no_composite_flag);
			if (prev == undefined) {
				prev = pThis._getTabOrderNext(comp, -1, false, true, "All", undefined, no_composite_flag);
			}
			if (prev == undefined) {
				prev = pThis.getLastEditableComponent(edittype, no_composite_flag);
			}

			return prev;
		}
		return undefined;
	};

	_pForm.getFirstEditableComponent = function (edittype, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var first = this._getTabOrderFirst(false, true, edittype, no_composite_flag);
		if (!first) {
			first = this._getTabOrderFirst(false, true, "All", no_composite_flag);
		}
		return first;
	};

	_pForm.getLastEditableComponent = function (edittype, no_composite_flag) {
		if (no_composite_flag !== true) {
			no_composite_flag = false;
		}

		var last = this._getTabOrderLast(false, true, edittype, no_composite_flag);
		if (!last) {
			last = this._getTabOrderLast(false, true, "All", no_composite_flag);
		}
		return last;
	};

	_pForm._getNextHeadingComponent = function (current) {
		var arcomp = this._searchNextHeadingFocus(current);
		if (arcomp) {
			return arcomp[0];
		}
	};

	_pForm._getPrevHeadingComponent = function (current) {
		var arcomp = this._searchPrevHeadingFocus(current);
		if (arcomp) {
			return arcomp[0];
		}
	};

	_pForm.getFocus = function () {
		var last_focus = this._find_lastFocused();
		if (last_focus == null) {
			return this;
		}
		return last_focus;
	};

	_pForm.getZoom = function () {
		var control_elem = this._control_element;
		if (control_elem && control_elem.getZoom) {
			return (this._zoomFactor !== undefined) ? this._zoomFactor : control_elem.getZoom();
		}

		return 100;
	};

	_pForm.setZoom = function (v) {
		var prevZoomFactor = this.getZoom();
		if (typeof v == "string" && v.charAt(v.length - 1) == "%") {
			v = v.slice(0, v.length - 1);
		}



		var control_elem = this._control_element;
		if (control_elem) {
			this._zoomFactor = v;

			control_elem.container_maxwidth = 0;
			control_elem.container_maxheight = 0;
			control_elem.setElementScrollMaxSize(0, 0);


			this._client_width = 0;
			this._client_height = 0;
			this._updateClientSize(control_elem);

			control_elem.setZoom(v);
			nexacro._applyZoomEdge(control_elem, v);

			var popups = nexacro._current_popups;
			var len = popups.length;
			for (var i = 0; i < len; i++) {
				if (this._contains(popups[i])) {
					popups[i].parent._applyZoomPopup();
				}
			}
		}

		return prevZoomFactor;
	};

	_pForm.go = function (v) {
		if (this._url != v) {
			if (this._url != "") {
				var confirm_message = this._on_beforeclose();
				if (this._checkAndConfirmClose(confirm_message) == false) {
					return;
				}
				this._on_close();
			}

			this._url = v;
			this._base_url = nexacro._getBaseUrl(v);
			this._apply_formurl();

			this.set_scrollbars("autoboth");

			if (nexacro.OS == "Windows" && nexacro.Browser == "Runtime") {
				if (this.getZoom() != 100) {
					var zoomfactor = 100;
					this._zoomFactor = zoomfactor;
					var control_elem = this._control_element;
					if (control_elem) {
						this._updateClientSize(control_elem);
						control_elem.setZoom(zoomfactor);
						nexacro._applyZoomEdge(control_elem, zoomfactor);
					}
				}
			}
		}
	};

	_pForm.hasPopupFrame = function () {
		return false;
	};

	_pForm.insertChild = function (idx, id, obj) {
		if (id && id.length <= 0) {
			return -1;
		}
		if (!obj) {
			return -1;
		}
		if (this[id]) {
			return -1;
		}

		obj.parent = this;
		obj._refform = this;

		this[id] = obj;
		this.all.add_item(id, obj);
		obj.id = id;

		if (obj._is_component) {
			ret = this.components.insert_item(idx, id, obj);
			this._child_list.push(obj);
		}
		else if (obj instanceof nexacro.BindItem) {
			ret = this.binds.insert_item(idx, id, obj);
		}
		else {
			ret = this.objects.insert_item(idx, id, obj);
		}


		return ret;
	};

	_pForm.isValidObject = function (target) {
		if (typeof target == "string") {
			if (this[target]) {
				return true;
			}
		}
		else if (target instanceof Object) {
			var len = this.all.length;
			for (var i = 0; i < len; i++) {
				if (this.all[i] == target) {
					return true;
				}
			}
		}
		else {
			if (nexacro._indexOf(this.all, target) > -1) {
				return true;
			}
		}
		return false;
	};

	_pForm.killTimer = function (nTimerID) {
		this._timerManager.deleteTimer(nTimerID);
	};

	_pForm.setTimer = function (nTimerID, nElapse) {
		var timer = new nexacro.EventTimer(this, nTimerID, nElapse);
		timer.start();
	};

	_pForm.loadStyle = function (url, bclear) {
		if ((typeof (url) != "string") || url.length == 0) {
			return;
		}
		bclear = bclear == false ? false : true;
		var exceptcssselector = true;

		if (bclear) {
			exceptcssselector = false;
		}

		this._clearCssInfo(exceptcssselector);
		var base_url = this._base_url;
		var cssurl = [];
		cssurl.push(nexacro._getServiceLocation(url, base_url));

		var checkversion = nexacro._getLocalStorage("checkversion", false);
		if (!checkversion) {
			cssurl.push(".js");
		}

		var service = nexacro._getServiceObject(url);
		this._load_manager.reloadCssModule(cssurl.join(""), null, false, service);

		this._apply_formstyle(this);
	};

	_pForm.reload = function () {
		this._is_reload = true;
		var _win = this._getRootWindow();
		_win._removeFromCurrentFocusPath(this);

		if (!this._url) {
			this._url = this.parent._formurl;
		}

		this._base_url = nexacro._getBaseUrl(this._url);

		if (nexacro.OS == "Windows" && nexacro.Browser == "Runtime") {
			if (this.getZoom() != 100) {
				var zoomfactor = 100;
				this._zoomFactor = zoomfactor;
				var control_elem = this._control_element;
				if (control_elem) {
					this._updateClientSize(control_elem);
					control_elem.setZoom(zoomfactor);
					nexacro._applyZoomEdge(control_elem, zoomfactor);
				}
			}
		}
		this._zoomFactor = 100;

		this._apply_formurl();
	};

	_pForm.removeChild = function (id) {
		if (!id || id.length <= 0) {
			return null;
		}
		if (!this[id]) {
			return null;
		}
		var obj = this[id];

		if (obj._is_component) {
			var is_focused = false;
			var _window = this._getWindow();
			if (_window) {
				is_focused = (_window._indexOfCurrentFocusPaths(obj) > -1);
			}

			if (this._defaultbutton == obj) {
				this._defaultbutton = null;
			}
			if (this._escapebutton == obj) {
				this._escapebutton = null;
			}

			if (this._is_alive && obj._control_element) {
				obj._control_element._removeFromContainer();
			}

			if (this._bind_manager) {
				this._bind_manager._dettachSBindItem(obj);
			}

			if (this._overedobj == obj) {
				this._overedobj = null;
			}

			this.components.delete_item(id);
			var cidx = nexacro._indexOf(this._child_list, obj);
			if (cidx > -1) {
				this._child_list.splice(cidx, 1);
			}

			if (is_focused && this._is_alive) {
				if (obj instanceof nexacro.Form) {
					obj._on_deactivate();
				}

				_window._removeFromCurrentFocusPath(obj, true);
				_window._last_focused_elem = this._control_element;

				this._on_focus(true);
			}
		}
		else if (obj instanceof nexacro.BindItem) {
			this._bind_manager._setBinditem(obj, true);
			this.binds.delete_item(id);
		}
		else {
			this.objects.delete_item(id);
		}

		obj.parent = null;
		delete this[id];
		this.all.delete_item(id);

		return obj;
	};

	_pForm.setWaitCursor = function (wait_flag, forcely_flag) {
		var wait = wait_flag;
		var forcely = forcely_flag;
		if (wait == undefined) {
			wait = true;
		}
		if (forcely == undefined) {
			forcely = false;
		}

		if (!forcely && !application.usewaitcursor) {
			return;
		}

		var window = this._getWindow();
		if (window) {
			if (wait_flag || nexacro._getLocalStorage("_com_waiting", false)) {
				window._cancelEvent();
			}
		}
		this._waitCursor(wait, null);
	};

	_pForm.sleep = function (nMilliseconds) {
		nexacro._sleep(nMilliseconds);
	};

	_pForm.transaction = function (id, url, inDatasetsParam, outDatasetsParam, argsParam, callbackFn, isAsync, datatype, isCompress, isbulk) {
		var window = this._getWindow();
		if (window) {
			var elem = window._cur_ldown_elem || window._keydown_element;
			var comp = window.findComponent(elem, 0, 0);

			if (comp && comp[0]) {
				var comp_org = comp[0]._getRootComponent(comp[0]);
				comp_org._cancelEvent(comp[0]);
			}
		}

		var realurl = nexacro._getServiceLocation(url, this._base_url);
		var service = nexacro._getServiceObject(url, true);

		this._load_manager.loadDataModule(realurl, id, inDatasetsParam, outDatasetsParam, argsParam, callbackFn, isAsync, datatype, isCompress, service, isbulk);
	};

	_pForm.cancelTransaction = function (id) {
		if (!this._load_manager) {
			return -1;
		}
		var datalist = this._load_manager.dataList;
		if (!datalist) {
			return -1;
		}
		var canceledCnt = 0;

		if (id != undefined) {
			var datalistid = (typeof id == "string") ? id.split(",") : id;
			if (datalistid.length > 0) {
				var datalistfilter = [];
				for (var k = 0, n = datalist.length; k < n; k++) {
					datalistfilter[k] = datalist[k].url;
				}

				var datalistfiltered = [];
				for (var j = 0, n = datalistfilter.length; n > j; j++) {
					var datalistfound = false;
					for (var i = 0, n = datalistid.length; n > i; i++) {
						if (datalistid[i] == datalistfilter[j]) {
							datalistfound = true;
							break;
						}
					}
					if (!datalistfound) {
						datalistfiltered.push(datalistfilter[j]);
					}
				}

				for (var j = datalistfiltered.length - 1; j >= 0; j--) {
					for (var i = datalist.length - 1; i >= 0; i--) {
						if (datalist[i].url == datalistfiltered[j]) {
							datalist = nexacro._removedatalist(datalist, i);
						}
					}
				}
			}
		}

		this._stopTransaction(true);
	};

	_pForm.updateWindow = function () {
	};

	_pForm.getStepCount = function () {
		var step_ctrl = this.stepcontrol;
		if (step_ctrl) {
			return step_ctrl.stepcount;
		}
	};

	_pForm.setStepIndex = function (index) {
		var step_ctrl = this.stepcontrol;
		if (step_ctrl) {
			return step_ctrl.set_stepindex(index);
		}
	};

	_pForm.applyChange = function () {
		var comp = this._last_focused;
		if (!comp) {
			return;
		}
		comp.applyto_bindSource("value", comp.value);

		var binds = this.binds;
		var len = binds.length;
		for (var i = 0; i < len; i++) {
			var bind_item = binds[i];
			if (bind_item._comp == comp && bind_item.propid == "value") {
				this._bind_manager._notify(bind_item);
				return;
			}
		}
	};

	_pForm._setFormPosition = function (left, top, width, height) {
		this._init_width = width;
		this._init_height = height;
	};

	_pForm._resetScrollPos = function (target_comp, left, top, right, bottom, focus_direction) {
		if (this._is_frame || !this._control_element) {
			return;
		}

		var hscroll = this.hscrollbar;
		var vscroll = this.vscrollbar;

		var client_width, client_height;
		client_width = this._client_width;
		client_height = this._client_height;

		var hpos = 0;
		var vpos = 0;

		if (hscroll && hscroll.visible) {
			hpos = hscroll.pos;

			if (left - hpos < client_width && right - hpos > client_width) {
				if (right - left < client_width) {
					hscroll.set_pos(right - client_width);
				}
				else {
					hscroll.set_pos(left);
				}
			}
			else if (hpos > left) {
				if (focus_direction == 1 && right - left > client_width) {
					hscroll.set_pos(right - client_width);
				}
				else {
					hscroll.set_pos(left);
				}
			}
			else if (left - hpos >= client_width) {
				if (right - left < client_width) {
					hscroll.set_pos(right - client_width);
				}
				else {
					hscroll.set_pos(left);
				}
			}
			hpos = hscroll.pos;
		}

		if (vscroll && vscroll.visible) {
			vpos = vscroll.pos;
			if (top - vpos < client_height && bottom - vpos > client_height) {
				if (bottom - top < client_height) {
					vscroll.set_pos(bottom - client_height);
				}
				else {
					vscroll.set_pos(top);
				}
			}
			else if (vpos > top) {
				if (focus_direction == 1 && bottom - top > client_height) {
					vscroll.set_pos(bottom - client_height);
				}
				else {
					vscroll.set_pos(top);
				}
			}
			else if (top - vpos >= client_height) {
				if (bottom - top < client_height) {
					vscroll.set_pos(bottom - client_height);
				}
				else {
					vscroll.set_pos(top);
				}
			}
			vpos = vscroll.pos;
		}

		left = this._adjust_left + left - hpos;
		top = this._adjust_top + top - vpos;
		right = this._adjust_left + right - hpos;
		bottom = this._adjust_top + bottom - vpos;

		if (!this._is_popup_control && this.parent && this.parent != this) {
			this.parent._resetScrollPos(this, left, top, right, bottom, focus_direction);
		}
	};



	_pForm._setDragMove = function (v, is_windowframe) {
		this._is_track = v;
		if (v && is_windowframe) {
			this._hittest_type = "caption";
		}
		else {
			this._hittest_type = "none";
		}

		if (this._control_element) {
			this._control_element.setElementHittestType(this._hittest_type);
		}
	};

	_pForm._on_starttrack = function () {
		if (!this._is_alive) {
			return;
		}
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._on_titlebar_starttrack();
		}
	};

	_pForm._on_endtrack = function (x, y, dragdata) {
		if (!this._is_alive) {
			return;
		}
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._on_titlebar_endtrack(x, y, dragdata);
		}
	};

	_pForm._on_movetrack = function (x, y, dragdata, windowX, windowY) {
		if (!this._is_alive) {
			return;
		}
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._on_titlebar_movetrack(x, y, dragdata, windowX, windowY);
		}
	};

	_pForm._setSize = function (width, height) {
		var control_elem = this.getElement();
		var w = this._adjust_width;
		var h = this._adjust_height;
		var left = this._adjust_left;
		var top = this._adjust_top;

		if (w != width || h != height) {
			var update = false;
			if (w == 0 || h == 0) {
				update = true;
			}

			this.width = this._adjust_width = width;
			this.height = this._adjust_height = height;

			if (this.parent) {
				this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width, this.parent._client_height);
			}
			else {
				this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, 0, 0);
			}




			if (this._layout_list && this._layout_list.length > 0) {
				var layout = this._checkValidLayout();
				if (layout) {
					control_elem = layout._form.getElement();
					if (control_elem) {
						control_elem.setElementSize(width, height);
						this._updateClientSize(control_elem);
					}
				}
			}

			this.on_update_position(true, false);

			if (control_elem && update) {
				this.currentstyle._empty();
				this._control_pseudo = "";

				var pseudo = this._getResultPseudo(this._status, this._pseudo);
				this._updateControl(control_elem, pseudo);
				this._updateContents(control_elem, pseudo);
			}
		}
	};

	_pForm._stopTransaction = function (is_cancel) {
		if (!this._load_manager) {
			return -1;
		}
		var datalist = this._load_manager.dataList;
		if (!datalist) {
			return -1;
		}

		var trlist = this._load_manager.transactionList;
		var idx = 0;
		var pre_len = datalist.length;
		var canceledCnt = 0;
		while (idx < datalist.length) {
			var dataitem = datalist[idx];
			if (!dataitem) {
				idx++;
				continue;
			}

			var dataitem_handle = dataitem._handle;
			if (!dataitem_handle) {
				idx++;
				continue;
			}

			if (dataitem._is_cancel || dataitem._is_process) {
				idx++;
				pre_len = datalist.length;
				continue;
			}

			if (!is_cancel) {
				dataitem_handle._user_aborted = false;
				var tritem = trlist[idx];
				if (tritem) {
					var ret = tritem.on_error(-1, "comm_stop_transaction_byesc", nexacro._communicationStatusTable["stop"], "", nexacro.Communication_Error.STOPTRANSACTIONBYESC);
					if (ret) {
						dataitem._is_process = true;
						dataitem_handle._user_aborted = undefined;
						idx++;
						continue;
					}
				}
			}

			dataitem_handle._user_aborted = true;
			dataitem._is_cancel = true;

			if (nexacro.Browser == "Runtime") {
				nexacro._cancelLoad(dataitem_handle);
			}
			else {
				nexacro._cancelLoad(dataitem_handle);

				if (tritem) {
					tritem.on_error(0, "comm_cancel_byuser", 499, "", nexacro.Communication_Error.CANCELBYUSER);
				}
			}

			dataitem_handle = null;
			dataitem = null;

			canceledCnt++;

			if (pre_len == datalist.length) {
				idx++;
			}
			else {
				idx = 0;
				pre_len = datalist.length;
			}
		}


		return canceledCnt;
	};

	_pForm._onRecalcScrollSize = function (fromComp) {
		var control_elem = this._control_element;
		if (this._is_scrollable && control_elem) {
			var ret = false;
			var w = 0, h = 0;
			if (!fromComp) {
				var comps = this.components;
				var zoom_factor = this.getZoom() / 100;
				var org_maxwidth = this._client_width / zoom_factor;
				var org_maxheight = this._client_height / zoom_factor;

				for (var i = 0, n = comps.length; i < n; i++) {
					var comp = comps[i];
					if (comp && comp.visible) {
						var offsetright = comp.getOffsetRight();
						var offsetbottom = comp.getOffsetBottom();

						var applywidht = 1;
						if (comp.right) {
							var val = comp.right;
							if (typeof (val) == "string" && val.indexOf("%") >= 0) {
								if (parseFloat(val) >= 0) {
									applywidht = 0;
								}
							}
							else {
								if (parseInt(val) >= 0) {
									applywidht = 0;
								}
							}
						}

						if (applywidht || w < offsetright) {
							w = Math.max(w, offsetright);
						}

						var applyheight = 1;
						if (comp.bottom) {
							var val = comp.bottom;
							if (typeof (val) == "string" && val.indexOf("%") >= 0) {
								if (parseFloat(val) >= 0) {
									applyheight = 0;
								}
							}
							else {
								if (parseInt(val) >= 0) {
									applyheight = 0;
								}
							}
						}

						if (applyheight || h < offsetbottom) {
							h = Math.max(h, offsetbottom);
						}
					}
				}

				if (org_maxwidth || org_maxheight) {
					if (org_maxwidth <= -1) {
						w = -1;
					}

					if (org_maxheight <= -1) {
						h = -1;
					}
				}

				control_elem.setElementScrollMaxSize(w, h);
			}
			else if (fromComp.visible) {
				var curMaxWidth = control_elem.container_maxwidth;
				var curMaxHeight = control_elem.container_maxheight;

				var offsetRight = fromComp.getOffsetRight();
				var offsetBottom = fromComp.getOffsetBottom();

				if (curMaxWidth < offsetRight || curMaxHeight < offsetBottom) {
					w = Math.max(curMaxWidth, offsetRight);
					h = Math.max(curMaxHeight, offsetBottom);
					ret = control_elem.setElementScrollMaxSize(w, h);
				}
			}
		}
	};

	_pForm._calcScrollMaxSize = function () {
		var control_elem = this._control_element;
		if (this._is_scrollable && control_elem) {
			var _w = 0, _h = 0;
			var comps = this.components;
			for (var i = 0, n = comps.length; i < n; i++) {
				var comp = comps[i];
				if (comp && comp.visible) {
					var offsets = comp._getFixedOffsetValue();
					_w = Math.max(_w, offsets.right);
					_h = Math.max(_h, offsets.bottom);
				}
			}

			return {
				w : _w, 
				h : _h
			};
		}
		return {
			w : -1, 
			h : -1
		};
	};

	_pForm._dragEnd = function (info) {
		var control_elem = this.getElement();
		if (control_elem) {
			var stepcontrol = this.stepcontrol;
			if (stepcontrol) {
				var step_count = control_elem._step_count;
				var step_index = control_elem._step_index;
				var direction = info.direction;
				if (step_count > 0) {
					var new_index = -1;
					if (direction == "L") {
						new_index = step_index + 1;
					}
					else if (direction == "R") {
						new_index = step_index - 1;
					}
					if (new_index < 0 || new_index >= step_count) {
						return;
					}
					stepcontrol.set_stepindex(new_index);
				}
			}
		}
	};

	_pForm._getDefaultButton = function () {
		var comps = this.components;
		if (comps) {
			var comp;
			for (var i = 0, n = comps.length; i < n; i++) {
				comp = comps[i];
				if (comp._is_form) {
					var btn = comp._getDefaultButton();
					if (btn) {
						return btn;
					}
				}
				else if (nexacro._toBoolean(comp.defaultbutton)) {
					return comp;
				}
			}
		}
		return null;
	};

	_pForm._getEscapeButton = function () {
		var comps = this.components;
		if (comps) {
			var comp;
			for (var i = 0, n = comps.length; i < n; i++) {
				comp = comps[i];
				if (comp._is_form) {
					var btn = comp._getEscapeButton();
					if (btn) {
						return btn;
					}
				}
				else if (nexacro._toBoolean(comp.escapebutton)) {
					return comp;
				}
			}
		}
		return null;
	};



	_pForm._apply_formurl = function () {
		this._clear();
		if (this._url) {
			this.loadForm(this._url, true, true);
			this.set_visible(true);
		}
	};

	_pForm._apply_formstyle = function (obj) {
		var comps = obj.components;
		for (var i = 0, n = comps.length; i < n; i++) {
			var comp = comps[i];
			if (comp) {
				comp.currentstyle._empty();
				comp._control_pseudo = "";
				comp._contents_pseudo = "";
				comp._css_finder = null;
				comp._ref_css_finder = null;
				if (comp._is_form) {
					comp.on_apply_pseudo("");
					this._apply_formstyle(comp);
				}
				else {
					comp.on_apply_pseudo("");
					comp.on_apply_custom_class();
				}
			}
		}

		if (this.vscrollbar) {
			this.vscrollbar.on_apply_prop_class();
		}
		if (this.hscrollbar) {
			this.hscrollbar.on_apply_prop_class();
		}

		this._onResetScrollBar();


		this._control_pseudo = "";
		this._contents_pseudo = "";
		this.on_apply_pseudo("");
	};


	_pForm._apply_stepcount = function () {
		var stepctrl = this.stepcontrol;

		if (stepctrl) {
			this._on_prepare_stepcontents(stepctrl._prestepcount, stepctrl._prestepindex, stepctrl.stepcount, stepctrl.stepindex);
			this._on_refresh_stepcontents(stepctrl._prestepcount, stepctrl._prestepindex, stepctrl.stepcount, stepctrl.stepindex);
		}
	};
	_pForm._getAccessibilityWholeReadLabel = function () {
		var readlabel = "";
		var ar = this._getSortedDecendants(this, true, true);
		for (var i = 0, n = ar.length; i < n; i++) {
			comp = ar[i];
			if (comp._isAccessibilityEnable()) {
				var label = comp._getAccessibilityReadLabel(true);
				if (label) {
					label.trim();
					if (label && label.length > 0) {
						readlabel += label + " ";
					}
				}
			}
		}
		return readlabel;
	};

	_pForm._playAccessibilityWholeReadLabel = function (type) {
		var control = this.getElement();
		if (control) {
			var label = this._getAccessibilityWholeReadLabel();
			control.notifyAccessibility(label, type);
		}
	};


	delete _pForm;
}


//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.TitleBar) {
	nexacro.TitleBar_Style = function (target) {
		this.icon = null;


		this._target = target || null;
	};

	var _pTitleBarStyle = nexacro._createPrototype(nexacro.Style, nexacro.TitleBar_Style);
	nexacro.TitleBar_Style.prototype = _pTitleBarStyle;

	eval(nexacro._createValueAttributeEvalStr("_pTitleBarStyle", "icon"));

	_pTitleBarStyle.__custom_emptyObject = function () {
		this.icon = null;
	};

	_pTitleBarStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.icon && !this.icon._is_empty) {
			val += "icon:" + this.icon._value + "; ";
		}
		return val;
	};

	nexacro.TitleBar_CurrentStyle = function () {
		this.icon = null;
	};

	var _pTitleBarCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.TitleBar_CurrentStyle);
	nexacro.TitleBar_CurrentStyle.prototype = _pTitleBarCurrentStyle;

	_pTitleBarCurrentStyle.__custom_emptyObject = _pTitleBarStyle.__custom_emptyObject;
	_pTitleBarCurrentStyle.__get_custom_style_value = _pTitleBarStyle.__get_custom_style_value;


	delete _pTitleBarStyle;
	delete _pTitleBarCurrentStyle;

	nexacro.TitleBar = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Form.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.minbutton = null;
		this.normalbutton = null;
		this.maxbutton = null;
		this.closebutton = null;


		this._state_openstatus = 0;

		if (parent && parent._is_frame && parent._is_window) {
			this._is_track = false;
		}
		else {
			this._is_track = true;
		}

		this._icon_elem = null;
		this._text_elem = null;
		this._titletext = "";
		this._is_verticalmin = false;
		this._absolute_style = 0;
		this._iconwidth = 0;
		this._iconheight = 0;
		this._is_scrollable = false;
		this._is_nc_control = true;
		this._is_focus_accept = false;
	};

	var _pTitleBar = nexacro._createPrototype(nexacro.Form, nexacro.TitleBar);
	nexacro.TitleBar.prototype = _pTitleBar;

	_pTitleBar._type_name = "TitleBar";

	nexacro.TitleBar._default_align = nexacro.Component._default_left_align;
	nexacro.TitleBar._default_icon = null;

	_pTitleBar.on_create_custom_style = function () {
		return new nexacro.TitleBar_Style(this);
	};

	_pTitleBar.on_create_custom_currentStyle = function () {
		return new nexacro.TitleBar_CurrentStyle();
	};

	_pTitleBar.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var icon = this.on_find_CurrentStyle_icon(pseudo);
		if (icon != curstyle.icon) {
			curstyle.icon = icon;
			this.on_apply_style_icon(icon);
		}



		var padding = this.on_find_CurrentStyle_padding(pseudo);
		if (curstyle.padding != padding) {
			curstyle.padding = padding;
			this.on_apply_style_padding(padding);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pTitleBar.on_find_CurrentStyle_icon = function (pseudo) {
		var icon = this._find_pseudo_obj("icon", pseudo, "value");
		return icon ? icon : nexacro.TitleBar._default_icon;
	};

	_pTitleBar.on_update_style_icon = function () {
		this.on_apply_style_icon(this.currentstyle.icon = this.on_find_CurrentStyle_icon(this._pseudo));
	};

	_pTitleBar.on_update_style_padding = function () {
		var padding = this.currentstyle.padding = this.on_find_CurrentStyle_padding(this._pseudo);

		if (this._control_element) {
			this._control_element.setElementPadding(padding);
			this._updateClientSize(this._control_element);
		}
	};

	_pTitleBar.on_apply_style_padding = function (padding) {
		if (this._control_element) {
			this._control_element.setElementPadding(padding);
		}
	};

	_pTitleBar.on_apply_style_icon = function (icon) {
		if (this._icon_elem) {
			var ownerframe = this.getOwnerFrame();
			if (ownerframe && ownerframe.currentstyle.icon && !ownerframe.currentstyle.icon._is_empty) {
				icon = ownerframe.currentstyle.icon;
			}
			if (icon == null) {
				icon = this.currentstyle.icon;
			}

			var iconsize = nexacro._getImageSize(icon.value, this._on_loadicon, this, this._getRefFormBaseUrl(), undefined, icon.value);
			if (iconsize) {
				if ((iconsize.width > 0) && (iconsize.height > 0)) {
					this._iconwidth = iconsize.width;
					this._iconheight = iconsize.height;
				}
			}
			if (ownerframe.showtitleicon == false) {
				this._icon_elem.setElementImageUrl("");
			}
			else {
				this._icon_elem.setElementImageUrl(icon.value);
			}

			this._updateControlPosition();
		}
	};

	_pTitleBar.on_apply_style_font = function (font) {
		if (this._text_elem) {
			this._text_elem.setElementFont(font);
		}
	};
	_pTitleBar.on_apply_style_color = function (color) {
		if (this._text_elem) {
			this._text_elem.setElementColor(color);
		}
	};

	_pTitleBar.on_apply_style_align = function (align) {
		if (this._text_elem) {
			this._text_elem.setElementAlign(align);
		}
	};

	_pTitleBar.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pTitleBar.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var ownerframe = this.getOwnerFrame();
			var curstyle = this.currentstyle;

			var iconElem = this._icon_elem = new nexacro.AlignImageElement(control_elem);
			iconElem.setElementAlignXY("center", "middle");

			var textElem = this._text_elem = new nexacro.TextBoxElement(control_elem);
			if (this._titletext) {
				textElem.setElementText(this._titletext);
			}
			textElem.setElementAlign(curstyle.align ? curstyle.align : nexacro.TitleBar._default_align);
			textElem.setElementFont(curstyle.font);
			textElem.setElementColor(curstyle.color);
			textElem.setElementLetterSpace(curstyle.letterspace);

			var minBtn = this.minbutton = new nexacro.ImageButtonCtrl("minbutton", "absolute", 0, 0, 0, 0, null, null, this);
			var maxBtn = this.maxbutton = new nexacro.ImageButtonCtrl("maxbutton", "absolute", 0, 0, 0, 0, null, null, this);
			var normalBtn = this.normalbutton = new nexacro.ImageButtonCtrl("normalbutton", "absolute", 0, 0, 0, 0, null, null, this);
			var closeBtn = this.closebutton = new nexacro.ImageButtonCtrl("closebutton", "absolute", 0, 0, 0, 0, null, null, this);

			normalBtn.set_visible(false);

			if (ownerframe) {
				minBtn._setEventHandler("onclick", ownerframe.on_minbutton_click, ownerframe);
				maxBtn._setEventHandler("onclick", ownerframe.on_maxbutton_click, ownerframe);
				normalBtn._setEventHandler("onclick", ownerframe.on_normalbutton_click, ownerframe);
				closeBtn._setEventHandler("onclick", ownerframe.on_closebutton_click, ownerframe);

				this._setEventHandler("ondblclick", ownerframe._on_titlebar_dblclick, ownerframe);
			}

			var icon;
			if (ownerframe && ownerframe.currentstyle.icon && !ownerframe.currentstyle.icon._is_empty) {
				icon = ownerframe.currentstyle.icon;
			}
			else {
				icon = this.currentstyle.icon;
			}

			if (icon) {
				var val = nexacro._getURIValue(icon._value);
				val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());


				var iconsize = nexacro._getImageSize(val, this._on_loadicon, this, this._getRefFormBaseUrl(), icon._value);
				if (iconsize) {
					if ((iconsize.width > 0) && (iconsize.height > 0)) {
						this._iconwidth = iconsize.width;
						this._iconheight = iconsize.height;

						if (ownerframe && ownerframe.showtitleicon != false) {
							iconElem.setElementImageUrl(val);
						}

						if (iconElem) {
							this._updateControlPosition(this._client_width, this._client_height);
						}

						var frame = this.parent;

						if (frame && frame._is_window) {
							var _window = frame._getWindow();
							if (_window) {
								nexacro._setWindowHandleIcon(_window._handle, val);
							}
						}
					}
				}
			}
			this._updateControlPosition(this._client_width, this._client_height);

			minBtn.createComponent();
			maxBtn.createComponent();
			normalBtn.createComponent();
			closeBtn.createComponent();
		}
	};

	_pTitleBar.on_created_contents = function () {
		this._icon_elem.create();
		this._text_elem.create();

		this.minbutton.on_created();
		this.maxbutton.on_created();
		this.normalbutton.on_created();
		this.closebutton.on_created();

		if (this._pseudo) {
			var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(this._pseudo);
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
		this.on_apply_prop_rtldirection();
	};

	_pTitleBar.on_destroy_contents = function () {
		var iconElem = this._icon_elem;
		var textElem = this._text_elem;
		var minBtn = this.minbutton;
		var maxBtn = this.maxbutton;
		var normalBtn = this.normalbutton;
		var closeBtn = this.closebutton;

		if (iconElem) {
			iconElem.destroy();
			this._icon_elem = null;
		}
		if (textElem) {
			textElem.destroy();
			this._text_elem = null;
		}
		if (minBtn) {
			minBtn.destroy();
			this.minbutton = null;
		}
		if (maxBtn) {
			maxBtn.destroy();
			this.maxbutton = null;
		}
		if (normalBtn) {
			normalBtn.destroy();
			this.normalbutton = null;
		}
		if (closeBtn) {
			closeBtn.destroy();
			this.closebutton = null;
		}
	};

	_pTitleBar.on_change_containerRect = function (width, height) {
		nexacro.Form.prototype.on_change_containerRect.call(this, width, height);
		this._updateControlPosition(width, height);
	};

	_pTitleBar.set_titletext = function (v) {
		this._titletext = v;
		if (this._text_elem) {
			this._text_elem.setElementText(v);
		}
	};


	_pTitleBar.on_minbutton_click = function (obj, e) {
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe.on_minbutton_click(obj, e);
		}
	};
	_pTitleBar.on_maxbutton_click = function (obj, e) {
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe.on_maxbutton_click(obj, e);
		}
	};
	_pTitleBar.on_normalbutton_click = function (obj, e) {
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe.on_normalbutton_click(obj, e);
		}
	};
	_pTitleBar.on_closebutton_click = function (obj, e) {
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe.on_closebutton_click(obj, e);
		}
	};

	_pTitleBar._on_starttrack = function () {
		if (!this._is_alive) {
			return;
		}
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._on_titlebar_starttrack();
		}
	};

	_pTitleBar._on_endtrack = function (x, y, dragdata) {
		if (!this._is_alive) {
			return;
		}
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._on_titlebar_endtrack(x, y, dragdata);
		}
	};

	_pTitleBar._on_movetrack = function (x, y, dragdata, windowX, windowY) {
		if (!this._is_alive) {
			return;
		}
		var ownerframe = this.getOwnerFrame();
		if (ownerframe) {
			ownerframe._on_titlebar_movetrack(x, y, dragdata, windowX, windowY);
		}
	};


	_pTitleBar._on_loadicon = function (url, w, h) {
		if ((w < 1) || (h < 1)) {
			return;
		}

		var ownerframe = this.getOwnerFrame();
		if (ownerframe && ownerframe.showtitleicon != false) {
			this._icon_elem.setElementImageUrl(url);
		}

		this._iconwidth = w;
		this._iconheight = h;
		if (this._icon_elem) {
			this._updateControlPosition(this._client_width, this._client_height);
		}

		var frame = this.parent;
		if (frame && frame._is_window) {
			var _window = frame._getWindow();
			if (_window) {
				nexacro._setWindowHandleIcon(_window._handle, url);
			}
		}
	};

	_pTitleBar._updateControlPosition = function (width, height) {
		if (!width || !height) {
			width = this._client_width;
			height = this._client_height;
		}


		var iconleftgap = 10;
		var iconrightgap = 6;
		var buttonwidth = 22;
		var buttonheight = 20;
		var buttongap = 1;
		var rightgap = 2;

		var display_as_minimize = ((this._state_openstatus == 2) || this._is_verticalmin);

		if (!this._is_verticalmin) {
			var itemsize = 24;
			var top = ((height - buttonheight) / 2) | 0;
			if (top < 0) {
				top = 0;
			}

			var curleft = width - (rightgap);
			curleft -= buttonwidth;
			this.closebutton.move(curleft, top, buttonwidth, buttonheight);

			curleft -= buttongap;
			curleft -= buttonwidth;
			this.maxbutton.move(curleft, top, buttonwidth, buttonheight);
			if (!display_as_minimize) {
				this.normalbutton.move(curleft, top, buttonwidth, buttonheight);
			}

			curleft -= buttongap;
			curleft -= buttonwidth;
			this.minbutton.move(curleft, top, buttonwidth, buttonheight);
			if (display_as_minimize) {
				this.normalbutton.move(curleft, top, buttonwidth, buttonheight);
			}

			var curright = curleft;
			curleft = iconleftgap;

			var iconElem = this._icon_elem;
			var iconwidth = this._iconwidth;
			var iconheight = this._iconheight;
			top = ((height - iconheight) / 2) | 0;

			var new_left = this._convertLeftForRtlLayout(curleft, iconwidth);

			var bCheckIconPos = false;
			if (this._isRtl()
				 && iconElem.left == new_left
				 && iconElem.top == top
				 && iconElem.width == iconwidth
				 && iconElem.height == iconheight) {
				bCheckIconPos = true;
			}

			iconElem.setElementPosition(new_left, top);
			iconElem.setElementSize(iconwidth, iconheight);

			curleft += iconwidth;
			curleft += iconrightgap;
			var textwidth = (curright - curleft);
			if (textwidth < 0) {
				textwidth = 0;
			}
			var textheight = itemsize;
			top = ((height - textheight) / 2) | 0;

			new_left = this._convertLeftForRtlLayout(curleft, textwidth);

			if (bCheckIconPos) {
				if (this._text_elem.width != textwidth) {
					bCheckIconPos = true;
				}
				else {
					bCheckIconPos = false;
				}
			}

			this._text_elem.setElementPosition(new_left, top);
			this._text_elem.setElementSize(textwidth, textheight);

			if (iconElem) {
				iconElem.setElementPosition(iconElem.left, iconElem.top, bCheckIconPos || iconElem._isRtl());
			}
		}
		else {
			var itemsize = 24;
			var left = ((width - buttonwidth) / 2) | 0;
			if (left < 0) {
				left = 0;
			}

			var curtop = height - (rightgap);
			curtop -= buttonwidth;
			this.closebutton.move(left, curtop, buttonwidth, buttonheight);

			curtop -= buttongap;
			curtop -= buttonwidth;
			this.maxbutton.move(left, curtop, buttonwidth, buttonheight);
			if (!display_as_minimize) {
				this.normalbutton.move(left, curtop, buttonwidth, buttonheight);
			}

			curtop -= buttongap;
			curtop -= buttonwidth;
			this.minbutton.move(left, curtop, buttonwidth, buttonheight);
			if (display_as_minimize) {
				this.normalbutton.move(left, curtop, buttonwidth, buttonheight);
			}

			var curbottom = curtop;
			curtop = iconleftgap;

			var iconElem = this._icon_elem;
			var iconwidth = this._iconwidth;
			var iconheight = this._iconheight;
			left = ((width - iconwidth) / 2) | 0;

			var new_left = this._convertLeftForRtlLayout(left, iconwidth);

			iconElem.setElementPosition(new_left, curtop);
			iconElem.setElementSize(iconwidth, iconheight);

			curtop += iconwidth;
			curtop += iconrightgap;
			var textwidth = (curbottom - curtop);
			if (textwidth < 0) {
				textwidth = 0;
			}
			var textheight = itemsize;
			left = ((width - textheight) / 2) | 0;

			new_left = this._convertLeftForRtlLayout(left, textwidth);

			this._text_elem.setElementPosition(new_left, curtop);
			this._text_elem.setElementSize(textwidth, textheight);
		}
	};

	_pTitleBar._change_state_OpenStatus = function (cur) {
		var pre = this._prestate_openstatus = this._state_openstatus;
		this._state_openstatus = cur;
		if (this._is_verticalmin) {
			cur = 2;
		}

		if (pre != cur) {
			switch (cur) {
				case 0:
					if ((this._absolute_style & 0x0001) == 0) {
						this.minbutton.set_visible(true);
					}
					if ((this._absolute_style & 0x0002) == 0) {
						this.maxbutton.set_visible(true);
					}
					if ((this._absolute_style & 0x0008) == 0) {
						this.closebutton.set_visible(true);
					}
					this.normalbutton.set_visible(false);
					break;
				case 1:
					break;
				case 2:
					this.minbutton.set_visible(false);
					if ((this._absolute_style & 0x0002) == 0) {
						this.maxbutton.set_visible(true);
					}
					if ((this._absolute_style & 0x0008) == 0) {
						this.closebutton.set_visible(true);
					}
					if ((this._absolute_style & 0x0004) == 0) {
						this.normalbutton.set_visible(true);
					}
					break;
				case 3:
					if ((this._absolute_style & 0x0001) == 0) {
						this.minbutton.set_visible(true);
					}
					this.maxbutton.set_visible(false);
					if ((this._absolute_style & 0x0008) == 0) {
						this.closebutton.set_visible(true);
					}
					if ((this._absolute_style & 0x0004) == 0) {
						this.normalbutton.set_visible(true);
					}
					break;
			}

			var control_elem = this.getElement();
			if (control_elem) {
				this.on_change_containerRect(control_elem.client_width, control_elem.client_height);
			}
		}
	};

	_pTitleBar._setVerticalMin = function (v) {
		if (this._is_verticalmin == v) {
			return;
		}

		var pre = -1;
		if (v == false) {
			pre = 2;
		}

		this._is_verticalmin = v;

		var real_openstatus = this._state_openstatus;
		if (pre != (-1)) {
			this._state_openstatus = pre;
		}

		this._change_state_OpenStatus(real_openstatus);
		if (this._control_element) {
			this._updateControlPosition();
		}
	};

	_pTitleBar._setDragMove = function (v, is_windowframe) {
		this._is_track = v;

		if (v && is_windowframe) {
			this._hittest_type = "caption";
		}
		else {
			this._hittest_type = "none";
		}

		if (this._control_element) {
			this._control_element.setElementHittestType(this._hittest_type);
		}
	};

	_pTitleBar._setAbsoluteStyle = function (_add, _remove, _apply) {
		this._absolute_style &= ~(_remove);
		this._absolute_style |= _add;

		if (_apply == undefined || _apply == true) {
			this._applyAbsoluteStyle();
		}
	};

	_pTitleBar.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);

		if (this.minbutton && !((this._absolute_style & 0x0010) > 0)) {
			this.minbutton._setEnable(v);
		}
	};

	_pTitleBar._applyAbsoluteStyle = function () {
		if (this.minbutton) {
			if ((this._absolute_style & 0x0001) > 0) {
				this.minbutton.set_visible(false);
			}
			else if ((this._absolute_style & 0x0100) > 0) {
				this.minbutton.set_visible(true);
			}
			if ((this._absolute_style & 0x0010) > 0) {
				this.minbutton.set_enable(false);
			}
			else if ((this._absolute_style & 0x1000) > 0) {
				this.minbutton.set_enable(true);
			}
		}

		if (this.maxbutton) {
			if ((this._absolute_style & 0x0002) > 0) {
				this.maxbutton.set_visible(false);
			}
			else if ((this._absolute_style & 0x0200) > 0) {
				this.maxbutton.set_visible(true);
			}
			if ((this._absolute_style & 0x0020) > 0) {
				this.maxbutton.set_enable(false);
			}
			else if ((this._absolute_style & 0x2000) > 0) {
				this.maxbutton.set_enable(true);
			}
		}

		if (this.normalbutton) {
			if ((this._absolute_style & 0x0004) > 0) {
				this.normalbutton.set_visible(false);
			}
			else if ((this._absolute_style & 0x0400) > 0) {
				this.normalbutton.set_visible(true);
			}
			if ((this._absolute_style & 0x0040) > 0) {
				this.normalbutton.set_enable(false);
			}
			else if ((this._absolute_style & 0x4000) > 0) {
				this.normalbutton.set_enable(true);
			}
		}

		if (this.closebutton) {
			if ((this._absolute_style & 0x0008) > 0) {
				this.closebutton.set_visible(false);
			}
			else if ((this._absolute_style & 0x08) > 0) {
				this.closebutton.set_visible(true);
			}
			if ((this._absolute_style & 0x0080) > 0) {
				this.closebutton.set_enable(false);
			}
			else if ((this._absolute_style & 0x8000) > 0) {
				this.closebutton.set_enable(true);
			}
		}
	};

	_pTitleBar.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var _rtldirection = this._rtldirection;

		var control_element = this._control_element;
		if (control_element) {
			this._updateControlPosition(control_element.client_width, control_element.client_height);

			var pseudo = this._pseudo;
			var align = this.on_find_CurrentStyle_align(pseudo);
			this.on_apply_style_align(align);
		}

		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.setElementRtlDirection(_rtldirection);
			text_elem.setElementPosition(text_elem.left, text_elem.top, true);
		}

		if (this.minbutton) {
			this.minbutton.on_apply_prop_rtldirection();
		}
		if (this.maxbutton) {
			this.maxbutton.on_apply_prop_rtldirection();
		}
		if (this.normalbutton) {
			this.normalbutton.on_apply_prop_rtldirection();
		}
		if (this.closebutton) {
			this.closebutton.on_apply_prop_rtldirection();
		}
		var iconElem = this._icon_elem;
		if (iconElem) {
			iconElem.setElementPosition(iconElem.left, iconElem.top, true);
		}
	};

	_pTitleBar.on_apply_custom_class = function () {
		if (this.minbutton) {
			this.minbutton.on_apply_prop_class();
		}
		if (this.maxbutton) {
			this.maxbutton.on_apply_prop_class();
		}
		if (this.normalbutton) {
			this.normalbutton.on_apply_prop_class();
		}
		if (this.closebutton) {
			this.closebutton.on_apply_prop_class();
		}
	};
	delete _pTitleBar;


	nexacro.TitleBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.TitleBar.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pTitleBarCtrl = nexacro._createPrototype(nexacro.TitleBar, nexacro.TitleBarCtrl);
	nexacro.TitleBarCtrl.prototype = _pTitleBarCtrl;

	_pTitleBarCtrl._type_name = "TitleBarControl";

	nexacro._setForTypedControlStyleFinder(_pTitleBarCtrl);

	delete _pTitleBarCtrl;
}



//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.StatusBar) {
	nexacro.StatusBar_Style = function (target) {
		this._target = target || null;
		this.gripimage = null;
		this.progressbarheight = null;
		this.progressbarwidth = null;
		this.progressbargab = null;
		this.progressbargap = null;
		this.zoomcomboheight = null;
		this.zoomcombowidth = null;
		this.zoomcombogab = null;
		this.zoomcombogap = null;
	};

	var _pStatusBarStyle = nexacro._createPrototype(nexacro.Style, nexacro.StatusBar_Style);
	nexacro.StatusBar_Style.prototype = _pStatusBarStyle;

	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "gripimage"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "progressbarheight"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "progressbarwidth"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "progressbargab"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "progressbargap"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "zoomcomboheight"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "zoomcombowidth"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "zoomcombogab"));
	eval(nexacro._createValueAttributeEvalStr("_pStatusBarStyle", "zoomcombogap"));

	_pStatusBarStyle.__custom_emptyObject = function () {
		this.gripimage = null;
		this.progressbarheight = null;
		this.progressbarwidth = null;
		this.progressbargab = null;
		this.progressbargap = null;
		this.zoomcomboheight = null;
		this.zoomcombowidth = null;
		this.zoomcombogab = null;
		this.zoomcombogap = null;
	};

	_pStatusBarStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.gripimage && !this.gripimage._is_empty) {
			val += "gripimage:" + this.gripimage._value + "; ";
		}
		if (this.progressbarheight && !this.progressbarheight._is_empty) {
			val += "progressbarheight:" + this.progressbarheight._value + "; ";
		}
		if (this.progressbarwidth && !this.progressbarwidth._is_empty) {
			val += "progressbarwidth:" + this.progressbarwidth._value + "; ";
		}
		if (this.progressbargab && !this.progressbargab._is_empty) {
			val += "progressbargab:" + this.progressbargab._value + "; ";
		}
		if (this.progressbargap && !this.progressbargap._is_empty) {
			val += "progressbargap:" + this.progressbargap._value + "; ";
		}
		if (this.zoomcomboheight && !this.zoomcomboheight._is_empty) {
			val += "zoomcomboheight:" + this.zoomcomboheight._value + "; ";
		}
		if (this.zoomcombowidth && !this.zoomcombowidth._is_empty) {
			val += "zoomcombowidth:" + this.zoomcombowidth._value + "; ";
		}
		if (this.zoomcombogab && !this.zoomcombogab._is_empty) {
			val += "zoomcombogab:" + this.zoomcombogab._value + "; ";
		}
		if (this.zoomcombogap && !this.zoomcombogap._is_empty) {
			val += "zoomcombogap:" + this.zoomcombogap._value + "; ";
		}
		return val;
	};

	nexacro.StatusBar_CurrentStyle = function () {
		this.gripimage = null;
		this.progressbarheight = null;
		this.progressbarwidth = null;
		this.progressbargab = null;
		this.progressbargap = null;
		this.zoomcomboheight = null;
		this.zoomcombowidth = null;
		this.zoomcombogab = null;
		this.zoomcombogap = null;
	};

	var _pStatusBarCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.StatusBar_CurrentStyle);
	nexacro.StatusBar_CurrentStyle.prototype = _pStatusBarCurrentStyle;

	_pStatusBarCurrentStyle.__custom_emptyObject = _pStatusBarStyle.__custom_emptyObject;
	_pStatusBarCurrentStyle.__get_custom_style_value = _pStatusBarStyle.__get_custom_style_value;

	delete _pStatusBarStyle;
	delete _pStatusBarCurrentStyle;

	nexacro.StatusBar = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Form.call(this, id, position, left, top, width, height, right, bottom, parent);


		this.progressbar = null;
		this.zoomcombo = null;
		this.showzoomcombo = false;

		this._is_nc_control = true;
		this._text_elem = null;
		this._gripimage_elem = null;
		this._gripimage_size = {
		};
		this._statustext = "";
		this._resizable = false;
		this._is_scrollable = false;
	};

	var _pStatusBar = nexacro._createPrototype(nexacro.Form, nexacro.StatusBar);
	nexacro.StatusBar.prototype = _pStatusBar;

	_pStatusBar._type_name = "StatusBar";

	nexacro.StatusBar._default_align = nexacro.Component._default_left_align;
	nexacro.StatusBar._default_gripimage = "";
	nexacro.StatusBar._default_progressbarwidth = new nexacro.Style_value("200");
	nexacro.StatusBar._default_progressbarheight = new nexacro.Style_value("20");
	nexacro.StatusBar._default_progressbargab = new nexacro.Style_value("1");
	nexacro.StatusBar._default_progressbargap = new nexacro.Style_value("1");
	nexacro.StatusBar._default_zoomcombowidth = new nexacro.Style_value("70");
	nexacro.StatusBar._default_zoomcomboheight = new nexacro.Style_value("20");
	nexacro.StatusBar._default_zoomcombogap = new nexacro.Style_value("1");
	nexacro.StatusBar._default_zoomcombogab = nexacro.StatusBar._default_zoomcombogap;

	_pStatusBar.on_create_custom_style = function () {
		return new nexacro.StatusBar_Style(this);
	};

	_pStatusBar.on_create_custom_currentStyle = function () {
		return new nexacro.StatusBar_CurrentStyle();
	};

	_pStatusBar.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var gripimage = this.on_find_CurrentStyle_gripimage(pseudo);
		if (gripimage != curstyle.gripimage) {
			curstyle.gripimage = gripimage;
			this.on_apply_style_gripimage(gripimage);
		}
	};

	_pStatusBar.on_find_CurrentStyle_gripimage = function (pseudo) {
		var gripimage = this._find_pseudo_obj("gripimage", pseudo, "value");
		return gripimage ? gripimage : nexacro.StatusBar._default_gripimage;
	};

	_pStatusBar.on_find_CurrentStyle_progressbarwidth = function (pseudo) {
		return this._find_pseudo_obj("progressbarwidth", pseudo, "value") || nexacro.StatusBar._default_progressbarwidth;
	};

	_pStatusBar.on_find_CurrentStyle_progressbarheight = function (pseudo) {
		return this._find_pseudo_obj("progressbarheight", pseudo, "value") || nexacro.StatusBar._default_progressbarheight;
	};

	_pStatusBar.on_find_CurrentStyle_progressbargab = function (pseudo) {
		return this._find_pseudo_obj("progressbargab", pseudo, "value") || nexacro.StatusBar._default_progressbargab;
	};

	_pStatusBar.on_find_CurrentStyle_progressbargap = function (pseudo) {
		return this._find_pseudo_obj("progressbargap", pseudo, "value") || nexacro.StatusBar._default_progressbargap;
	};

	_pStatusBar.on_find_CurrentStyle_zoomcombowidth = function (pseudo) {
		return this._find_pseudo_obj("zoomcombowidth", pseudo, "value") || nexacro.StatusBar._default_zoomcombowidth;
	};

	_pStatusBar.on_find_CurrentStyle_zoomcomboheight = function (pseudo) {
		return this._find_pseudo_obj("zoomcomboheight", pseudo, "value") || nexacro.StatusBar._default_zoomcomboheight;
	};

	_pStatusBar.on_find_CurrentStyle_zoomcombogab = function (pseudo) {
		return this._find_pseudo_obj("zoomcombogab", pseudo, "value") || nexacro.StatusBar._default_zoomcombogab;
	};

	_pStatusBar.on_find_CurrentStyle_zoomcombogap = function (pseudo) {
		return this._find_pseudo_obj("zoomcombogap", pseudo, "value") || nexacro.StatusBar._default_zoomcombogap;
	};

	_pStatusBar.on_update_style_gripimage = function () {
		this.on_apply_style_gripimage(this.currentstyle.gripimage = this.on_find_CurrentStyle_gripimage(this._pseudo));
	};

	_pStatusBar.on_update_style_progressbarwidth = function () {
		this.on_apply_style_progressbarwidth(this.currentstyle.progressbarwidth = this.on_find_CurrentStyle_progressbarwidth(this._pseudo));
	};

	_pStatusBar.on_update_style_progressbarheight = function () {
		this.on_apply_style_progressbarheight(this.currentstyle.progressbarheight = this.on_find_CurrentStyle_progressbarheight(this._pseudo));
	};

	_pStatusBar.on_update_style_progressbargab = function () {
		this.on_apply_style_progressbargab(this.currentstyle.progressbargab = this.on_find_CurrentStyle_progressbargab(this._pseudo));
	};

	_pStatusBar.on_update_style_progressbargap = function () {
		this.on_apply_style_progressbargap(this.currentstyle.progressbargap = this.on_find_CurrentStyle_progressbargap(this._pseudo));
	};

	_pStatusBar.on_update_style_zoomcombowidth = function () {
		this.on_apply_style_zoomcombowidth(this.currentstyle.zoomcombowidth = this.on_find_CurrentStyle_zoomcombowidth(this._pseudo));
	};

	_pStatusBar.on_update_style_zoomcomboheight = function () {
		this.on_apply_style_zoomcomboheight(this.currentstyle.zoomcomboheight = this.on_find_CurrentStyle_zoomcomboheight(this._pseudo));
	};

	_pStatusBar.on_update_style_zoomcombogab = function () {
		this.on_apply_style_zoomcombogab(this.currentstyle.zoomcombogab = this.on_find_CurrentStyle_zoomcombogab(this._pseudo));
	};

	_pStatusBar.on_update_style_zoomcombogap = function () {
		this.on_apply_style_zoomcombogap(this.currentstyle.zoomcombogap = this.on_find_CurrentStyle_zoomcombogap(this._pseudo));
	};

	_pStatusBar.on_apply_style_gripimage = function (_gripimage_elem) {
		if (this.gripimage == null && this._gripimage_elem) {
			this._gripimage_elem.setElementImageUrl(_gripimage_elem.value);
		}
	};

	_pStatusBar.on_apply_style_progressbarwidth = function (v) {
		if (this.progressbar && this.progressbar.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_progressbarheight = function (v) {
		if (this.progressbar && this.progressbar.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_progressbargab = function (v) {
		if (this.progressbar && this.progressbar.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_progressbargap = function (v) {
		if (this.progressbar && this.progressbar.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_zoomcombowidth = function (v) {
		if (this.zoomcombo && this.zoomcombo.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_zoomcomboheight = function (v) {
		if (this.zoomcombo && this.zoomcombo.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_zoomcombogab = function (v) {
		if (this.zoomcombo && this.zoomcombo.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_zoomcombogap = function (v) {
		if (this.zoomcombo && this.zoomcombo.visible && this._is_created) {
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_style_font = function (font) {
		if (this._text_elem) {
			this._text_elem.setElementFont(font);
		}
	};
	_pStatusBar.on_apply_style_color = function (color) {
		if (this._text_elem) {
			this._text_elem.setElementColor(color);
		}
	};

	_pStatusBar.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var curstyle = this.currentstyle;

			var textElem = this._text_elem = new nexacro.TextBoxElement(control_elem);

			if (this._statustext) {
				textElem.setElementText(this._statustext);
			}
			textElem.setElementAlign(curstyle.align ? curstyle.align : nexacro.StatusBar._default_align);
			textElem.setElementFont(curstyle.font);
			textElem.setElementColor(curstyle.color);
			textElem.setElementLetterSpace(curstyle.letterspace);

			var progressbar = this.progressbar = new nexacro.ProgressBarCtrl("progressbar", "absolute", 0, 0, 0, 0, null, null, this);
			var zoomcombo = this.zoomcombo = new nexacro.ComboCtrl("zoomcombo", "absolute", 0, 0, 0, 0, null, null, this);
			if (zoomcombo) {
				var dszoomlist = new nexacro.Dataset("dszoomlist", zoomcombo);
				dszoomlist.addColumn("code", "int", "10");
				dszoomlist.addColumn("data", "string", "255");
				var nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "50");
				dszoomlist.setColumn(nRow, "data", "50%");
				nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "75");
				dszoomlist.setColumn(nRow, "data", "75%");
				nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "100");
				dszoomlist.setColumn(nRow, "data", "100%");
				nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "125");
				dszoomlist.setColumn(nRow, "data", "125%");
				nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "150");
				dszoomlist.setColumn(nRow, "data", "150%");
				nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "200");
				dszoomlist.setColumn(nRow, "data", "200%");
				nRow = dszoomlist.addRow();
				dszoomlist.setColumn(nRow, "code", "400");
				dszoomlist.setColumn(nRow, "data", "400%");

				zoomcombo.setInnerDataset(dszoomlist);
				zoomcombo.set_codecolumn("code");
				zoomcombo.set_datacolumn("data");
			}

			var gripimageElem = this._gripimage_elem = new nexacro.AlignImageElement(control_elem);
			gripimageElem.setElementAlignXY("right", "bottom");
			var sGripimage = curstyle.gripimage.value;
			gripimageElem.setElementImageUrl(sGripimage ? sGripimage : this._default_gripimage);

			var ownerframe = this.getOwnerFrame();
			if (ownerframe) {
				zoomcombo._setEventHandler("onitemchanged", this.on_zoomcombo_itemchanged, this);
			}

			progressbar.createComponent();
			if (zoomcombo) {
				zoomcombo.createComponent();
			}

			this._updateControlPosition(this._client_width, this._client_height);
		}
	};
	_pStatusBar.on_created_contents = function () {
		this._text_elem.create();
		this.progressbar.on_created();
		if (this.zoomcombo) {
			this.zoomcombo.on_created();
		}
		this._gripimage_elem.create();
		this._setResizable(this._resizable);

		this.on_apply_prop_rtldirection();
	};

	_pStatusBar.on_destroy_contents = function () {
		var textElem = this._text_elem;
		var progressbar = this.progressbar;
		var zoomcombo = this.zoomcombo;
		var gripimageElem = this._gripimage_elem;

		if (textElem) {
			textElem.destroy();
			this._text_elem = null;
		}
		if (progressbar) {
			progressbar.destroy();
			this.progressbar = null;
		}
		if (zoomcombo) {
			zoomcombo.destroy();
			this.zoomcombo = null;
		}
		if (gripimageElem) {
			gripimageElem.destroy();
			this.gripimageElem = null;
		}
	};

	_pStatusBar.on_zoomcombo_itemchanged = function (obj, e) {
		var zoomcombo = this.zoomcombo;
		if (zoomcombo) {
			var _value = zoomcombo.value;
			this._allFrameSetZoom(application.mainframe, _value);
		}
	};

	_pStatusBar.on_change_containerRect = function (width, height) {
		nexacro.Form.prototype.on_change_containerRect.call(this, width, height);
		this._updateControlPosition(width, height);
	};

	_pStatusBar.set_statustext = function (v) {
		this._statustext = v;
		if (this._text_elem) {
			this._text_elem.setElementText(v);
		}
	};

	_pStatusBar.set_gripimage = function (v) {
		this.gripimage = v;
		if (this._gripimage_elem) {
			if (!v) {
				this.currentstyle.gripimage._value = v;
			}
			this._gripimage_elem.setElementImageUrl(v);
		}
	};

	_pStatusBar.set_showzoomcombo = function (v) {
		if (this.showzoomcombo != v) {
			this.showzoomcombo = v;
			this._updateControlPosition(this._client_width, this._client_height);
		}
	};

	_pStatusBar.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var _rtldirection = this._rtldirection;

		var control_element = this._control_element;
		if (control_element) {
			this._updateControlPosition(control_element.client_width, control_element.client_height);


			var text_elem = this._text_elem;
			if (text_elem) {
				text_elem.setElementRtlDirection(_rtldirection);
				text_elem.setElementPosition(text_elem.left, text_elem.top, true);
			}

			var gripimage_elem = this._gripimage_elem;

			if (gripimage_elem) {
				gripimage_elem.setElementRtlDirection(_rtldirection);
				gripimage_elem.setElementPosition(gripimage_elem.left, gripimage_elem.top, true);
			}

			var zoomcombo = this.zoomcombo;
			if (zoomcombo) {
				zoomcombo._setRtlDirection(_rtldirection);
			}

			var progressbar = this.progressbar;
			if (progressbar) {
				progressbar._setRtlDirection(_rtldirection);
			}
		}
	};


	_pStatusBar._refreshZoomCombo = function (form) {
		if (!form) {
			form = application.getActiveForm();
		}
		if (form) {
			var value = form.getZoom();
			var zoomcombo = this.zoomcombo;
			if (zoomcombo) {
				zoomcombo.set_value(value);
			}
		}
	};

	_pStatusBar._setResizable = function (resizable) {
		var ownerframe = this.getOwnerFrame();
		if (ownerframe && this._gripimage_elem) {
			if (!this._gripimage_elem._handle) {
				this._resizable = resizable;
				return;
			}

			this._gripimage_elem._is_track = resizable;
			var cursor;
			if (resizable) {
				cursor = new nexacro.Style_value("se-resize");
			}
			else {
				cursor = new nexacro.Style_value("arrow");
			}

			if (resizable && ownerframe._is_window) {
				hittest_type = "resizingborder_bottomright";
			}
			else {
				hittest_type = undefined;
			}

			nexacro.ControlElementBase.prototype.setElementCursor.call(this._gripimage_elem, cursor);
			nexacro.ControlElementBase.prototype.setElementHittestType.call(this._gripimage_elem, hittest_type);

			if (this._gripimage_elem._on_starttrack == undefined) {
				this._gripimage_elem._on_starttrack = function () {
					ownerframe._on_border_starttrack(cursor);
				};
				this._gripimage_elem._on_endtrack = function (x, y, dragdata) {
					ownerframe._on_border_endtrack(x, y, dragdata);
				};
				this._gripimage_elem._on_movetrack = function (x, y, dragdata) {
					ownerframe._on_border_movetrack(x, y, dragdata);
				};
			}
		}
	};

	_pStatusBar._allFrameSetZoom = function (frame, zoom_val) {
		if (frame) {
			if (frame instanceof nexacro.MainFrame || 
				frame instanceof nexacro.FrameSetBase) {
				var all = frame.all;
				var len = (all) ? all.length : 0;

				for (var i = 0; i < len; i++) {
					this._allFrameSetZoom(all[i], zoom_val);
				}
			}
			else if (frame instanceof nexacro.ChildFrame) {
				frame.form.setZoom(zoom_val);
			}
		}
	};
	_pStatusBar._updateControlPosition = function (width, height) {
		var itemsize = 20;
		var top = ((height - itemsize) / 2) | 0;
		if (top < 0) {
			top = 0;
		}

		var left = 5;
		var text_width = width;
		if (text_width < 0) {
			text_width = 0;
		}

		var textElem = this._text_elem;
		textElem.setElementPosition(left, top);
		textElem.setElementSize(text_width, height - top - top);

		var gripElem = this._gripimage_elem;
		left = width - itemsize;
		gripElem.setElementPosition(left, 0);
		gripElem.setElementSize(itemsize, height);

		var zoomcombo_left = left;
		if (this.zoomcombo) {
			if (this.showzoomcombo && this._movezoomcombo) {
				zoomcombo_left = this._movezoomcombo(left, top, width, height);
				this.zoomcombo.set_visible("true");
			}
			else {
				this.zoomcombo.move(left, top, 0, 0);
				this.zoomcombo.set_visible("false");
			}
		}

		var curstyle = this.currentstyle;
		var progressbarwidth = this.on_find_CurrentStyle_progressbarwidth(this._pseudo);
		var progressbarheight = this.on_find_CurrentStyle_progressbarheight(this._pseudo);
		var progressbargap = this.on_find_CurrentStyle_progressbargap(this._pseudo);

		left = zoomcombo_left - progressbarwidth - progressbargap;
		if (left < 0) {
			left = 0;
			progressbarwidth = (zoomcombo_left - progressbargap);
		}
		top = ((height - progressbarheight) / 2) | 0;
		if (top < 0) {
			top = 0;
		}
		if ((top + progressbarheight) < height) {
			progressbarheight = height - top;
		}
		this.progressbar.move(left, top, progressbarwidth, progressbarheight);
	};

	delete _pStatusBar;

	nexacro.StatusBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StatusBar.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pStatusBarCtrl = nexacro._createPrototype(nexacro.StatusBar, nexacro.StatusBarCtrl);
	nexacro.StatusBarCtrl.prototype = _pStatusBarCtrl;

	_pStatusBarCtrl._type_name = "StatusBarControl";

	nexacro._setForTypedControlStyleFinder(_pStatusBarCtrl);

	delete _pStatusBarCtrl;
}


//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Frame) {
	nexacro.Frame_Style = function (target) {
		nexacro.Style.call(this, target);

		this.icon = null;
		this.showzoomcombo = null;
		this.statusbarheight = null;
		this.titlebarheight = null;
		this.openstatuseffect = null;
		this.moveeffect = null;
	};

	var _pFrameStyle = nexacro._createPrototype(nexacro.Style, nexacro.Frame_Style);
	nexacro.Frame_Style.prototype = _pFrameStyle;

	eval(nexacro._createValueAttributeEvalStr("_pFrameStyle", "icon"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameStyle", "showzoomcombo"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameStyle", "statusbarheight"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameStyle", "titlebarheight"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameStyle", "openstatuseffect"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameStyle", "moveeffect"));

	_pFrameStyle.__custom_emptyObject = function () {
		this.icon = null;
		this.showzoomcombo = null;
		this.statusbarheight = null;
		this.titlebarheight = null;
		this.openstatuseffect = null;
		this.moveeffect = null;
	};

	_pFrameStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.icon && !this.icon._is_empty) {
			val += "icon:" + this.icon._value + "; ";
		}
		if (this.showzoomcombo && !this.showzoomcombo._is_empty) {
			val += "showzoomcombo:" + this.showzoomcombo._value + "; ";
		}
		if (this.statusbarheight && !this.statusbarheight._is_empty) {
			val += "statusbarheight:" + this.statusbarheight._value + "; ";
		}
		if (this.titlebarheight && !this.titlebarheight._is_empty) {
			val += "titlebarheight:" + this.titlebarheight._value + "; ";
		}
		if (this.openstatuseffect && !this.openstatuseffect._is_empty) {
			val += "openstatuseffect:" + this.openstatuseffect._value + "; ";
		}
		if (this.moveeffect && !this.moveeffect._is_empty) {
			val += "moveeffect:" + this.moveeffect._value + "; ";
		}
		return val;
	};

	nexacro.Frame_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.icon = null;
		this.titlebarheight = null;
		this.statusbarheight = null;
		this.showzoomcombo = null;
		this.openstatuseffect = null;
		this.moveeffect = null;
	};

	var _pFrameCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Frame_CurrentStyle);
	nexacro.Frame_CurrentStyle.prototype = _pFrameCurrentStyle;

	_pFrameCurrentStyle.__custom_emptyObject = _pFrameStyle.__custom_emptyObject;
	_pFrameCurrentStyle.__get_custom_style_value = _pFrameStyle.__get_custom_style_value;

	delete _pFrameStyle;
	delete _pFrameCurrentStyle;

	nexacro.Frame = function (id, position, left, top, width, height, right, bottom, parent, is_main) {
		nexacro.FormBase.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.titlebar = null;
		this.statusbar = null;
		this.openalign = null;

		this.openstatus = "normal";
		this.showcascadestatustext = false;
		this.showcascadetitletext = true;
		this.showstatusbar = false;
		this.showtitlebar = true;
		this.showtitleicon = true;
		this.statustext = "";
		this.titletext = "";
		this.topmost = false;


		this._event_list = 
			{
			"onactivate" : 1, 
			"ondeactivate" : 1, 
			"onbeforeclose" : 1, 
			"onclose" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmousewheel" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"ondevicebuttondown" : 1, 
			"ondevicebuttonpush" : 1, 
			"ondevicebuttonup" : 1, 
			"onsyscommand" : 1, 
			"onorientationchange" : 1
		};


		this._frames = new nexacro.Collection();

		this._is_main = is_main;
		if (parent) {
			this._is_top_frame = (parent._type_name == "Application");
		}

		this._applied_title_height = -1;
		this._applied_status_height = -1;
		this._state_openstatus = 0;
		this._is_click_openstatus = false;
		this._is_verticalmin = false;

		this._restore_position = null;
		this._starttrack_position = null;
		this._resizemode = null;

		this._defaultTitleHeight = 20;
		this._defaultStatusHeight = 20;

		this._minWidth = 100;
		this._minHeight = 100;
		this._defaultWidth = 100;
		this._defaultHeight = 100;

		this._is_frameset = false;
		this._is_frame = true;
		this._is_form = false;
		this._window = null;
		this._activate = false;
		this._window_type = -1;

		this._accessibility_role = "frame";
		this._is_closing = false;
		this._is_destroying = false;
	};

	_pFrame = nexacro._createPrototype(nexacro.FormBase, nexacro.Frame);
	nexacro.Frame.prototype = _pFrame;

	_pFrame._type_name = "Frame";

	nexacro.Frame._default_titlebarheight = nexacro._getCachedStyleObj("value", "20");
	nexacro.Frame._default_statusbarheight = nexacro._getCachedStyleObj("value", "20");

	_pFrame.on_apply_custom_pseudo = function (pseudo) {
		if (pseudo) {
			this._pseudo = pseudo;
		}
		else if (this._pseudo) {
			pseudo = this._pseudo;
		}

		var curstyle = this.currentstyle;
		var icon = this.on_find_CurrentStyle_icon(pseudo);
		var showzoomcombo = this.on_find_CurrentStyle_showzoomcombo(pseudo);
		var statusbarheight = this.on_find_CurrentStyle_statusbarheight(pseudo);
		var titlebarheight = this.on_find_CurrentStyle_titlebarheight(pseudo);
		var openstatuseffect = this.on_find_CurrentStyle_openstatuseffect(pseudo);
		var moveeffect = this.on_find_CurrentStyle_moveeffect(pseudo);

		if (icon != curstyle.icon) {
			curstyle.icon = icon;
			this.on_apply_style_icon();
		}
		if (showzoomcombo != curstyle.showzoomcombo) {
			curstyle.showzoomcombo = showzoomcombo;
			this.on_apply_style_showzoomcombo();
		}
		if (statusbarheight != curstyle.statusbarheight) {
			curstyle.statusbarheight = statusbarheight;
			if (this.showstatusbar) {
				this.on_apply_style_statusbarheight();
			}
		}
		if (titlebarheight != curstyle.titlebarheight) {
			curstyle.titlebarheight = titlebarheight;
			if (this.showtitlebar) {
				this.on_apply_style_titlebarheight();
			}
		}
		if (openstatuseffect != curstyle.openstatuseffect) {
			curstyle.openstatuseffect = openstatuseffect;
			this.on_apply_style_openstatuseffect();
		}
		if (moveeffect != curstyle.moveeffect) {
			curstyle.moveeffect = moveeffect;
			this.on_apply_style_moveeffect();
		}
	};

	_pFrame.on_create_custom_style = function () {
		return new nexacro.Frame_Style(this);
	};

	_pFrame.on_create_custom_currentStyle = function () {
		return new nexacro.Frame_CurrentStyle();
	};

	_pFrame.on_find_CurrentStyle_icon = function (pseudo) {
		return this._find_pseudo_obj("icon", pseudo, "value");
	};

	_pFrame.on_find_CurrentStyle_titlebarheight = function (pseudo) {
		var titlebarheight = this._find_pseudo_obj("titlebarheight", pseudo, "value");
		return titlebarheight ? titlebarheight : nexacro.Frame._default_titlebarheight;
	};

	_pFrame.on_find_CurrentStyle_statusbarheight = function (pseudo) {
		var statusbarheight = this._find_pseudo_obj("statusbarheight", pseudo, "value");
		return statusbarheight ? statusbarheight : nexacro.Frame._default_statusbarheight;
	};

	_pFrame.on_find_CurrentStyle_showzoomcombo = function (pseudo) {
		return this._find_pseudo_obj("showzoomcombo", pseudo, "value");
	};

	_pFrame.on_find_CurrentStyle_openstatuseffect = function (pseudo) {
		return this._find_pseudo_obj("openstatuseffect", pseudo, "value");
	};

	_pFrame.on_find_CurrentStyle_moveeffect = function (pseudo) {
		return this._find_pseudo_obj("moveeffect", pseudo, "value");
	};

	_pFrame.on_update_style_icon = function () {
		this.on_apply_style_icon(this.currentstyle.icon = this.on_find_CurrentStyle_icon(this._pseudo));
	};

	_pFrame.on_update_style_titlebarheight = function () {
		this.on_apply_style_titlebarheight(this.currentstyle.titlebarheight = this.on_find_CurrentStyle_titlebarheight(this._pseudo));
	};

	_pFrame.on_update_style_statusbarheight = function () {
		this.on_apply_style_statusbarheight(this.currentstyle.statusbarheight = this.on_find_CurrentStyle_statusbarheight(this._pseudo));
	};

	_pFrame.on_update_style_showzoomcombo = function () {
		this.on_apply_style_showzoomcombo(this.currentstyle.showzoomcombo = this.on_find_CurrentStyle_showzoomcombo(this._pseudo));
	};

	_pFrame.on_update_style_openstatuseffect = function () {
		this.on_apply_style_openstatuseffect(this.currentstyle.openstatuseffect = this.on_find_CurrentStyle_openstatuseffect(this._pseudo));
	};

	_pFrame.on_update_style_moveeffect = function () {
		this.on_apply_style_moveeffect(this.currentstyle.moveeffect = this.on_find_CurrentStyle_moveeffect(this._pseudo));
	};

	_pFrame.on_apply_style_icon = function () {
		var v = this.currentstyle.icon;
		if (this.titlebar) {
			this.titlebar.on_apply_style_icon(v);
		}
		else {
			if (nexacro.Browser == "Runtime" && this._is_main && this._is_window && v) {
				var _window = this._getWindow();
				if (_window) {
					nexacro._getImageSize(v._value, this._on_loadicon, this, this._getRefFormBaseUrl(), v._value);
				}
			}
		}
	};

	_pFrame._on_loadicon = function (url, w, h) {
		if ((w < 1) || (h < 1)) {
			return;
		}

		var frame = this;
		if (this._is_window) {
			var _window = this._getWindow();
			if (_window) {
				nexacro._setWindowHandleIcon(_window._handle, url);
			}
		}
	};

	_pFrame.on_apply_style_letterspace = function () {
		var v = this.currentstyle.letterspace;
		if (this.titlebar) {
			this.titlebar.on_apply_style_letterspace(v);
		}
		if (this.statusbar) {
			this.statusbar.on_apply_style_letterspace(v);
		}
	};

	_pFrame.on_apply_style_titlebarheight = function () {
		var v = this.currentstyle.titlebarheight;
		var h = nexacro.getStyleValueInt(v, this._defaultTitleHeight);
		if (this._setTitleBarHeight(h)) {
			this._updateClientSize(this._control_element);
		}
	};

	_pFrame.on_apply_style_statusbarheight = function () {
		var v = this.currentstyle.statusbarheight;
		var h = nexacro.getStyleValueInt(v, this._defaultStatusHeight);
		if (this._setStatusBarHeight(h)) {
			this._updateClientSize(this._control_element);
		}
	};

	_pFrame.on_apply_style_showzoomcombo = function () {
		var v = this.currentstyle.showzoomcombo;
		if (v && this.statusbar) {
			var show = nexacro._toBoolean(v.value);
			this.statusbar.set_showzoomcombo(show);
		}
	};

	_pFrame.on_apply_style_openstatuseffect = function () {
		var v = this.currentstyle.openstatuseffect;
		if (v) {
			var val = v._value;
		}
	};

	_pFrame.on_apply_style_moveeffect = function () {
		var v = this.currentstyle.moveeffect;
		if (v) {
			var val = v._value;
		}
	};


	_pFrame._on_window_loaded = nexacro._emptyFn;

	_pFrame.on_created_contents = function () {
		this.on_apply_prop_rtldirection();

		if (this.titlebar) {
			this.titlebar.on_created();
		}
		if (this.statusbar) {
			this.statusbar.on_created();
		}

		this._resetTitleAbsoluteStyle();
	};

	_pFrame.on_create_control_element = function (parent_elem) {
		var control_elem = this.on_create_frame_control_element(parent_elem);
		return control_elem;
	};

	_pFrame.createComponent = function (bCreateOnly) {
		var parent_elem = null;
		if (this._is_window == false) {
			parent_elem = this.parent._control_element;
			if (!parent_elem) {
				return false;
			}
		}
		else {
			if (this._window) {
				nexacro._checkWindowActive(this._window);
			}
		}

		var control_elem = this._control_element;
		if (!control_elem) {
			var control_elem = this.on_create_control_element(parent_elem);

			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this._initControl(control_elem, pseudo);
			this._initContents(control_elem, pseudo);

			if (!bCreateOnly && parent_elem && parent_elem._handle) {
				this.on_created();
			}
		}

		return true;
	};

	_pFrame.on_create_contents = function () {
		if (this.titlebar) {
			this.titlebar.set_titletext(this.titletext);
			this.on_apply_style_letterspace();
		}
		if (this.statusbar) {
			this.statusbar.set_statustext(this.statustext);
			this.on_apply_style_showzoomcombo();
			this.on_apply_style_letterspace();
		}

		var flag = false;
		if (this.showtitlebar) {
			var theight;
			if (this._applied_title_height < 0) {
				var cur_titleheight = parseInt(this.currentstyle.titlebarheight) | 0;
				if (cur_titleheight < 0) {
					theight = this._defaultTitleHeight;
				}
				else {
					theight = cur_titleheight;
				}
			}
			else {
				theight = this._applied_title_height;
			}

			flag = this._setTitleBarHeight(theight);
		}
		if (this.showstatusbar) {
			var sheight;
			if (this._applied_status_height < 0) {
				var cur_statusheight = parseInt(this.currentstyle.statusbarheight) | 0;
				if (cur_statusheight < 0) {
					sheight = this._defaultStatusHeight;
				}
				else {
					sheight = cur_statusheight;
				}
			}
			else {
				sheight = this._applied_status_height;
			}

			flag = (this._setStatusBarHeight(sheight) || flag);
		}
		if (flag) {
			this._updateClientSize(this._control_element);
		}
		if (!application._is_loaded || (application._is_loaded && !this._is_loaded && this._is_popup_frame)) {
			this._on_focus(true, this);
		}
	};

	_pFrame.on_created = function (_window) {
		var is_created = this._is_created;

		nexacro.FormBase.prototype.on_created.call(this, _window);

		if (this.form) {
			if (this.form._control_element) {
				this.form._on_load(this, this._url);
			}
		}

		if (!is_created && this._state_openstatus != 0) {
			var cur_enableevent = this.enableevent;
			var cur_openstatus = this.openstatus;
			var cur_state_openstatus = this._state_openstatus;

			this.enableevent = false;
			this.openstatus = "normal";
			this._state_openstatus = 0;

			this.on_syscommand(this._control_element, cur_openstatus);

			this.enableevent = cur_enableevent;
		}

		if (this._control_element) {
			this._control_element._setResizable(this._canDragResize());
		}

		if (this._is_window) {
			this._applyTitleText();
			this._applyStatusText();
		}
	};

	_pFrame.on_destroy_contents = function () {
		if (this.statusbar) {
			this.statusbar.destroyComponent();
			this.statusbar = null;
		}
		if (this.titlebar) {
			this.titlebar.destroyComponent();
			this.titlebar = null;
		}
	};

	_pFrame.createTitleBar = function () {
		var titlebar;
		if (this._isTopFrame()) {
			titlebar = new nexacro.MainTitleBarCtrl("titlebar", "absolute", 0, 0, this._adjust_width, 0, null, null, this);
		}
		else {
			titlebar = new nexacro.ChildTitleBarCtrl("titlebar", "absolute", 0, 0, this._adjust_width, 0, null, null, this);
		}
		return titlebar;
	};

	_pFrame.createStatusBar = function () {
		var statusbar;
		if (this._isTopFrame()) {
			statusbar = new nexacro.MainStatusBarCtrl("statusbar", "absolute", 0, 0, this._adjust_width, 0, null, null, this);
		}
		else {
			statusbar = new nexacro.ChildStatusBarCtrl("statusbar", "absolute", 0, 0, this._adjust_width, 0, null, null, this);
		}
		return statusbar;
	};


	_pFrame._stat_change = function (status, pseudo) {
		if (status == "activate") {
			if (pseudo == "activate" || pseudo === true) {
				this._change_state_activate(true);
			}
			else if (pseudo == "deactivate" || pseudo === false) {
				this._change_state_activate(false);
			}

			return;
		}

		nexacro.FormBase.prototype._stat_change.call(this, status, pseudo);

		if (status == "focus" && (pseudo == "focused" || pseudo == "pushed") && !this._activate) {
			this._change_state_activate(true);
		}
	};

	_pFrame.setFocus = function (bResetScroll) {
		var win = this._window;
		if (this._is_window && win && win._handle) {
			win._setFocus();
		}
		else {
			if (this.form) {
				if (!this.form._is_created) {
					this._change_state_activate(true);
				}
				this.form._setFocus();
			}
		}
	};

	_pFrame._update_position = function (bsize, bmove) {
		var old_left = this._left;
		var old_top = this._top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var update = false;

		if (this.parent) {
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, this.parent._client_width, this.parent._client_height);
		}
		else {
			this._adjustPosition(this.left, this.top, this.right, this.bottom, this.width, this.height, 0, 0);
		}

		if (this._adjust_width != old_width || this._adjust_height != old_height) {
			bsize = true;

			if (old_width == 0 || old_height == 0) {
				update = true;
			}
		}
		if (this._left != old_left || this._top != old_top) {
			bmove = true;
		}
		this.on_update_position(bsize, bmove);

		if (update) {
			this.currentstyle._empty();
			this.on_apply_pseudo();
		}
	};

	_pFrame._adjustPosition = function (left, top, right, bottom, width, height, parentWidth, parentHeight) {
		var val = null;

		if (this._is_window) {
			if (this._window) {
				if (nexacro.OS == "iOS" && this._window_type == 2 && nexacro._zoom_factor != 0) {
					var id = nexacro._is_attach_childframe ? this._getWindow()._custom_node_id : null;
					var mainwidth = this.parent._getWindow().frame ? this.parent._getWindow().frame.width : this.parent._getWindow().clientWidth;
					width = parentWidth = mainwidth ? mainwidth : (width ? width : nexacro._getWindowHandleClientWidth(this._window._handle, id));
					height = parentHeight = height ? Math.max(height, parentHeight) : nexacro._getWindowHandleClientHeight(this._window._handle, id);
				}
				else {
					var id = nexacro._is_attach_childframe ? this._getWindow()._custom_node_id : null;
					width = parentWidth = width ? width : nexacro._getWindowHandleClientWidth(this._window._handle, id);
					height = parentHeight = height ? height : nexacro._getWindowHandleClientHeight(this._window._handle, id);
				}
			}
		}

		var _left = left;
		var _right = right;

		var bRtl = this._isRtl(this.parent);

		if (bRtl) {
		}

		for (var i = 0; i < 6; i++) {
			switch (i) {
				case 0:
					val = _left;
					if (_left != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(_left, parentWidth);
						}
						else {
							val = this._convToPixel(_left, parentHeight);
						}
					}
					this.left = left;
					this._left = val;
					this._adjust_left = val;
					break;
				case 1:
					val = top;
					if (top != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(top, parentWidth);
						}
						else {
							val = this._convToPixel(top, parentHeight);
						}
					}
					this.top = top;
					this._top = val;
					this._adjust_top = val;
					break;
				case 2:
					val = _right;
					if (_right != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(_right, parentWidth);
						}
						else {
							val = this._convToPixel(_right, parentHeight);
						}
					}
					this.right = right;
					this._right = val;
					break;
				case 3:
					val = bottom;
					if (bottom != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(bottom, parentWidth);
						}
						else {
							val = this._convToPixel(bottom, parentHeight);
						}
					}
					this.bottom = bottom;
					this._bottom = val;
					break;
				case 4:
					val = width;
					if (width != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(width, parentWidth);
						}
						else {
							val = this._convToPixel(width, parentHeight);
						}
					}
					this.width = width;
					this._width = val;
					break;
				case 5:
					val = height;
					if (height != null) {
						if (i % 2 == 0) {
							val = this._convToPixel(height, parentWidth);
						}
						else {
							val = this._convToPixel(height, parentHeight);
						}
					}
					this.height = height;
					this._height = val;
					break;
			}
		}

		var old_width = this._adjust_width;
		var old_height = this._adjust_height;

		this._adjust_width = this._width != null ? this._width : parentWidth - this._left - this._right;
		this._adjust_height = this._height != null ? this._height : parentHeight - this._top - this._bottom;

		if (this._is_window) {
			this._adjust_top = this._adjust_left = 0;
		}
		else {
			this._adjust_left_ltr = this._adjust_left = this._left != null ? this._left : parentWidth - this._right - this._adjust_width;
			this._adjust_top = this._top != null ? this._top : parentHeight - this._bottom - this._adjust_height;

			if (bRtl) {
				this._adjust_left_ltr = this._right != null ? this._right : parentWidth - this._left - this._adjust_width;
			}
		}
	};

	_pFrame._waitCursor = function (wait_flag, context) {
		var owner_frame = this.getOwnerFrame();
		if (owner_frame) {
			owner_frame._waitCursor(wait_flag, context);
		}
	};

	_pFrame.on_get_style_accessibility_label = function () {
		return this._getTitleText(this.showcascadetitletext);
	};

	_pFrame.on_update_position = function (resize_flag, move_flag) {
		var ret = nexacro.FormBase.prototype.on_update_position.call(this, resize_flag, move_flag);

		if (this._is_window && nexacro.Browser == "Runtime") {
			var _window = this._window;
			if (_window) {
				if (resize_flag) {
					_window.setSize(this._adjust_width, this._adjust_height);
				}
				if (move_flag) {
					_window.moveTo(this._left, this._top);
				}
			}
		}

		return ret;
	};

	_pFrame.set_left = function (propVal) {
		if (!this._canMove()) {
			return;
		}
		return nexacro.FormBase.prototype.set_left.call(this, propVal);
	};

	_pFrame.set_top = function (propVal) {
		if (!this._canMove()) {
			return;
		}
		return nexacro.FormBase.prototype.set_top.call(this, propVal);
	};

	_pFrame.set_right = function (propVal) {
		if (!this._canMove()) {
			return;
		}
		return nexacro.FormBase.prototype.set_right.call(this, propVal);
	};

	_pFrame.set_bottom = function (propVal) {
		if (!this._canMove()) {
			return;
		}
		return nexacro.FormBase.prototype.set_bottom.call(this, propVal);
	};

	_pFrame.set_width = function (propVal) {
		if (!this._canResize()) {
			return;
		}
		var ret = nexacro.FormBase.prototype.set_width.call(this, propVal);
		this._setModelessWindowSize();
		return ret;
	};

	_pFrame.set_height = function (propVal) {
		if (!this._canResize()) {
			return;
		}
		var ret = nexacro.FormBase.prototype.set_height.call(this, propVal);
		this._setModelessWindowSize();
		return ret;
	};

	_pFrame.set_openstatus = function (v) {
		if (this.openstatus != v) {
			switch (v) {
				case "minimize":
					this.on_syscommand(this._control_element, v);
					break;
				case "maximize":
					this.on_syscommand(this._control_element, v);
					break;
				case "normal":
					if (this._state_openstatus == 2 || this._state_openstatus == 3) {
						v = "restore";
					}
					this.on_syscommand(this._control_element, v);
					break;
			}
		}
		return this.openstatus;
	};

	_pFrame.set_showcascadestatustext = function (v) {
		var showcascadestatustext = nexacro._toBoolean(v);
		if (this.showcascadestatustext != showcascadestatustext) {
			this.showcascadestatustext = showcascadestatustext;
			this._applyStatusText();
		}
	};

	_pFrame.set_showcascadetitletext = function (v) {
		var showcascadetitletext = nexacro._toBoolean(v);
		if (this.showcascadetitletext != showcascadetitletext) {
			this.showcascadetitletext = showcascadetitletext;
			this._applyTitleText();
		}
	};

	_pFrame.set_showstatusbar = function (v) {
		var showstatusbar = nexacro._toBoolean(v);
		if (this.showstatusbar != showstatusbar) {
			this.showstatusbar = showstatusbar;
			this.showStatusbar(showstatusbar);
		}
	};

	_pFrame.set_showtitlebar = function (v) {
		var showtitlebar = nexacro._toBoolean(v);
		if (this.showtitlebar != showtitlebar) {
			this.showtitlebar = showtitlebar;
			this.showTitlebar(showtitlebar);
		}
	};

	_pFrame.set_showtitleicon = function (v) {
		var showtitleicon = nexacro._toBoolean(v);
		if (this.showtitleicon != showtitleicon) {
			this.showtitleicon = showtitleicon;
		}
	};

	_pFrame.set_statustext = function (v) {
		if (this.statustext != v) {
			this.statustext = v;
			this._applyStatusText();
		}
	};

	_pFrame.set_titletext = function (v) {
		if (this.titletext != v) {
			this.titletext = v;
			this._applyTitleText();
		}
	};

	_pFrame.set_topmost = function (v) {
		var topmost = nexacro._toBoolean(v);
		if (this.topmost != topmost) {
			this.topmost = topmost;
		}
	};

	_pFrame.set_visible = function (v) {
		nexacro.FormBase.prototype.set_visible.call(this, v);

		v = nexacro._toBoolean(v);

		var parent = this.parent;
		if (parent && parent._is_frameset && this._state_openstatus == 3 && !v) {
			var nextframe = parent._getNextOrderFrame(this);
			if (nextframe) {
				nextframe._change_state_OpenStatus(3);
			}
		}
	};

	_pFrame.alert = function (strText, strCaption, strType) {
		nexacro._alert(this, strText, strCaption, strType);
	};

	_pFrame.confirm = function (strText, strCaption, strType) {
		return nexacro._confirm(this, strText, strCaption, strType);
	};

	_pFrame.getHandle = function () {
		return -1;
	};

	_pFrame.getNativeHandle = function () {
		if (nexacro.Browser == "Runtime") {
			var _win = this._getWindow();
			return nexacro._getWindowHwndHandle(_win ? _win._handle : null);
		}
	};

	_pFrame.getOwnerFrame = function () {
		if (this.parent && this.parent._is_frame) {
			return this.parent;
		}

		return null;
	};

	_pFrame.addChild = function (id, obj) {
		var ret = -1;

		if (id && id.length <= 0) {
			return -1;
		}

		if (!obj) {
			throw nexacro.MakeReferenceError(this, "reference_not_define", id);
		}

		if (this[id]) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
		}

		if (!obj._is_frame) {
			throw nexacro.MakeTypeError(this, "type_invalid", id);
		}

		obj.parent = this;

		this[id] = obj;
		this.all.add_item(id, obj);
		var idx = this._frames.add_item(id, obj);

		obj._setRtlDirection(this._rtldirection);

		if (obj._control_element) {
			obj._control_element._appendToContainer(this._control_element);
		}

		if (this._is_frameset) {
			this.frames.add_item(id, obj);
			this._zorderMap.add_item(id, obj);

			if (this._max_frame && obj._state_openstatus == 3) {
				this._max_frame._change_state_OpenStatus(0);
			}

			if (this._state_openstatus == 2 || this._is_autorecalc_frame == true) {
				if (this._control_element) {
					this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
				}
			}
		}

		return idx;
	};

	_pFrame.insertChild = function (idx, id, obj) {
		if (id && id.length <= 0) {
			return -1;
		}
		if (!obj) {
			throw nexacro.MakeReferenceError(this, "reference_not_define", id);
		}

		if (this[id]) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
		}

		if (!obj._is_frame) {
			throw nexacro.MakeTypeError(this, "type_invalid", id);
		}

		obj.parent = this;

		this[id] = obj;
		this.all.add_item(id, obj);
		var idx = this._frames.insert_item(idx, id, obj);


		if (this._is_frameset) {
			this.frames.insert_item(idx, id, obj);

			if (this._is_autorecalc_frame == true) {
				if (this._control_element) {
					this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
				}
			}
		}

		return idx;
	};

	_pFrame.removeChild = function (id) {
		if (id && id.length <= 0) {
			return null;
		}

		var obj = this[id];

		if (obj) {
			this._frames.remove_item(id);
			delete this[id];
			this.all.remove_item(id);

			var _window = this._getWindow();
			if (this._is_frameset) {
				if (this._active_frame == obj) {
					var nextframe = this._getNextOrderFrame(obj);
					obj._change_state_activate(false);

					if (this._is_alive && _window.id == obj._getWindow().id) {
						_window._removeFromCurrentFocusPath(obj, true);
						_window._last_focused_elem = this._control_element;
					}

					if (this._max_frame == obj) {
						this._max_frame = null;
						if (nextframe) {
							nextframe._change_state_OpenStatus(3);
						}
					}

					this._active_frame = null;

					if (this._state_openstatus == 2 || this._is_autorecalc_frame == true) {
						if (this._control_element) {
							this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
						}
					}

					if (nextframe) {
						nextframe.setFocus();
					}
				}

				this.frames.remove_item(id);
				this._zorderMap.remove_item(id);
			}
			else {
				if (obj._is_frame && obj._activate) {
					obj._change_state_activate(false);

					if (this._is_alive && _window.id == obj._getWindow().id) {
						_window._removeFromCurrentFocusPath(obj, true);
						_window._last_focused_elem = this._control_element;
					}
				}
			}

			this._applyTitleText();

			if (this._is_alive && obj._control_element) {
				obj._control_element._removeFromContainer();
			}
		}
		return obj;
	};


	_pFrame.showTitlebar = function (bshow) {
		if (bshow) {
			var v = this.currentstyle.titlebarheight;
			var h = nexacro.getStyleValueInt(v, this._defaultTitleHeight);

			if (this._setTitleBarHeight(h)) {
				this._updateClientSize(this._control_element);
			}
		}
		else {
			if (this._setTitleBarHeight(0)) {
				this._updateClientSize(this._control_element);
			}
		}

		this._applyDragMoveType();
	};

	_pFrame.showStatusbar = function (bshow) {
		if (bshow) {
			var v = this.currentstyle.statusbarheight;
			var h = nexacro.getStyleValueInt(v, this._defaultStatusHeight);

			if (this._setStatusBarHeight(h)) {
				this._updateClientSize(this._control_element);
			}
		}
		else {
			if (this._setStatusBarHeight(0)) {
				this._updateClientSize(this._control_element);
			}
		}
	};

	_pFrame.move = function (left, top, width, height, right, bottom) {
		if (!this._canMove()) {
			return;
		}

		this._move(left, top, width, height, right, bottom);
	};

	_pFrame._move = function (left, top, width, height, right, bottom) {
		var old_left = this._left;
		var old_top = this._top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var bsize = false, bmove = false;
		var update = false;

		if (this.parent) {
			this._adjustPosition(left, top, right, bottom, width, height, this.parent._client_width, this.parent._client_height);
		}
		else {
			this._adjustPosition(left, top, right, bottom, width, height, null, null);
		}

		if (this._adjust_width != old_width || this._adjust_height != old_height) {
			bsize = true;
			if (old_width == 0 || old_height == 0) {
				update = true;
			}
		}
		if (this._left != old_left || this._top != old_top) {
			bmove = true;
		}

		this.on_update_position(bsize, bmove);

		if (this._control_element) {
			if (update) {
				this.currentstyle._empty();
				this._control_pseudo = "";
			}
			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this._updateControl(this._control_element, pseudo);
			this._updateContents(this._control_element, pseudo);
		}
	};

	_pFrame.resize = function (w, h) {
		if (!this._canResize()) {
			return;
		}
		return nexacro.FormBase.prototype.resize.call(this, w, h);
	};


	_pFrame._on_titlebar_dblclick = function (obj, e) {
		if (this.resizable == false || this._is_window) {
			return;
		}

		switch (this._state_openstatus) {
			case 0:
				this.on_maxbutton_click();
				break;
			case 2:
			case 3:
				this.on_normalbutton_click();
				break;
		}
	};

	_pFrame._on_titlebar_starttrack = function () {
		if (!this._canDragMove()) {
			this._starttrack_position = null;
			return false;
		}

		this._starttrack_position = {
			left : this._adjust_left, 
			top : this._adjust_top, 
			width : this._adjust_width, 
			height : this._adjust_height
		};

		var owner_frame = this.getOwnerFrame();
		if (owner_frame && owner_frame._is_frameset) {
			owner_frame._on_child_starttrack(this);
		}
	};

	_pFrame._on_titlebar_endtrack = function (x, y, dragdata) {
		if (this._starttrack_position == null) {
			return;
		}

		var owner_frame = this.getOwnerFrame();
		if (owner_frame && owner_frame._is_frameset) {
			owner_frame._on_child_endtrack(this, x, y, dragdata);
		}

		delete this._starttrack_position;
	};

	_pFrame._on_titlebar_movetrack = function (x, y, dragdata, windowX, windowY) {
		var _pos = this._starttrack_position;
		if (_pos == null) {
			return;
		}

		if (!this._is_window && (windowX != undefined && windowY != undefined)) {
			var mainframe;
			var _win = this._getWindow();
			if (_win) {
				mainframe = _win.frame;
			}
			mainframe = mainframe ? mainframe : application.mainframe;
			var mainframe_left = nexacro._toInt(mainframe.left);
			var mainframe_top = nexacro._toInt(mainframe.left);
			var mainframe_width = nexacro._toInt(mainframe._adjust_width);
			var mainframe_height = nexacro._toInt(mainframe._adjust_height);

			var winX = (windowX ? windowX : 0) + mainframe_left;
			var winY = (windowY ? windowY : 0) + mainframe_top;
			var r = mainframe_left + mainframe_width;
			var b = mainframe_top + mainframe_height;

			if (!(mainframe_left <= winX && r >= winX && mainframe_top <= winY && b >= winY)) {
				return;
			}
		}

		if (!this._is_window) {
			this._move(_pos.left + x, _pos.top + y, _pos.width, _pos.height);
		}
		else if (this._is_window && (this._window_type == 5 || this._window_type == 2)) {
			var winPos = this._getWindow();
			this._move(winPos.left + x, winPos.top + y, _pos.width, _pos.height);
		}

		var owner_frame = this.getOwnerFrame();
		if (owner_frame && owner_frame._is_frameset) {
			owner_frame._on_child_movetrack(this, x, y, dragdata);
		}
	};

	_pFrame._on_border_starttrack = function (resize_cursor) {
		if (!this._canDragResize()) {
			this._starttrack_position = null;
			return false;
		}

		this._starttrack_position = {
			left : this._adjust_left, 
			top : this._adjust_top, 
			width : this._adjust_width, 
			height : this._adjust_height
		};

		this._resizemode = resize_cursor;
		if (this.form) {
			this.form._on_focus(true, "lbuttondown");
		}
	};

	_pFrame._on_border_endtrack = function (x, y, dragdata) {
		if (this._starttrack_position == null) {
			return;
		}

		this._resizemode = null;

		delete this._starttrack_position;
	};

	_pFrame._on_border_movetrack = function (x, y, dragdata) {
		if (this._starttrack_position == null) {
			return;
		}

		var left, top, width, bottom;
		left = this._starttrack_position.left;
		top = this._starttrack_position.top;
		width = this._starttrack_position.width;
		height = this._starttrack_position.height;

		var minmaxinfo = this._getMinMaxInfo();
		if (this._resizemode._value == "n-resize" || this._resizemode._value == "nw-resize" || this._resizemode._value == "ne-resize") {
			top += y;
			height -= y;
			if (height < minmaxinfo.cy) {
				top -= (minmaxinfo.cy - height);
				height = minmaxinfo.cy;
			}
		}
		if (this._resizemode._value == "s-resize" || this._resizemode._value == "sw-resize" || this._resizemode._value == "se-resize") {
			height += y;
			if (height < minmaxinfo.cy) {
				height += (minmaxinfo.cy - height);
			}
		}
		if (this._resizemode._value == "w-resize" || this._resizemode._value == "nw-resize" || this._resizemode._value == "sw-resize") {
			left += x;
			width -= x;
			if (width < minmaxinfo.cx) {
				left -= (minmaxinfo.cx - width);
				width = minmaxinfo.cx;
			}
		}
		if (this._resizemode._value == "e-resize" || this._resizemode._value == "ne-resize" || this._resizemode._value == "se-resize") {
			width += x;
			if (width < minmaxinfo.cx) {
				width += (minmaxinfo.cx - width);
			}
		}

		this._move(left, top, width, height);
	};

	_pFrame.on_fire_sys_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		this._stat_change("activate", "activate");
	};


	_pFrame.on_minbutton_click = function (obj, e) {
		this._is_click_openstatus = true;
		this.on_syscommand(this._control_element, "minimize", undefined, this, obj);
		this._is_click_openstatus = false;
	};

	_pFrame.on_maxbutton_click = function (obj, e) {
		this._is_click_openstatus = true;
		this.on_syscommand(this._control_element, "maximize", undefined, this, obj);
		this._is_click_openstatus = false;
	};

	_pFrame.on_normalbutton_click = function (obj, e) {
		this._is_click_openstatus = true;
		this.on_syscommand(this._control_element, "restore", undefined, this, obj);
		this._is_click_openstatus = false;
	};

	_pFrame.on_closebutton_click = function (obj, e) {
		var confirm_message = this._on_beforeclose();
		if (this._checkAndConfirmClose(confirm_message) == false) {
			return;
		}

		this._on_close();

		var owner_frame = this.getOwnerFrame();
		if (owner_frame) {
			owner_frame.removeChild(this.id);

			if (owner_frame._control_element) {
				owner_frame.on_change_containerRect(owner_frame._control_element.client_width, owner_frame._control_element.client_height);
			}
		}

		if (this._control_element) {
			this._control_element.destroy();
		}
		this._control_element = null;

		if (this._is_window && this._window && this._window._is_alive) {
			this._window.destroy();
		}
		else {
			this._destroy();
		}
	};

	_pFrame._on_beforeclose = function (root_closing_comp, event_bubbles) {
		if (!root_closing_comp) {
			root_closing_comp = this;
		}

		var msg = "";

		if (this.form) {
			var form_msg = this.form._on_beforeclose(root_closing_comp, true);
			if (this.form) {
				msg = this.form._appendBeforeCloseMsg(msg, form_msg);
			}
		}

		if (this.frames) {
			var frames = this.frames;
			var len = frames.length;
			for (var i = 0; i < len; i++) {
				var child_msg = frames[i]._on_beforeclose(root_closing_comp, true);
				msg = this._appendBeforeCloseMsg(msg, child_msg);
			}
		}

		if (this.frame) {
			var child_msg = this.frame._on_beforeclose(root_closing_comp, true);
			msg = this._appendBeforeCloseMsg(msg, child_msg);
		}

		var self_msg = this._on_bubble_beforeclose(root_closing_comp, event_bubbles);
		msg = this._appendBeforeCloseMsg(msg, self_msg);

		return msg;
	};

	_pFrame._on_close = function (event_bubbles) {
		if (this._is_closing) {
			return;
		}
		this._is_closing = true;

		if (this.form) {
			this.form._on_close(true);
		}

		if (this.frames) {
			var frames = this.frames;
			var len = frames.length;
			for (var i = 0; i < len; i++) {
				if (frames[i]) {
					if (this._getWindow() != frames[i]._getWindow()) {
						continue;
					}

					frames[i]._on_close(true);
				}
			}
		}

		if (this.frame) {
			this.frame._on_close(true);
		}


		if (this._is_main && nexacro._print_node) {
			var parent_node = nexacro._print_node.parentNode;
			nexacro.__removeDOMNode(parent_node, nexacro._print_node);

			parent_node = null;
			nexacro._print_node = null;
		}

		this._on_bubble_close(event_bubbles);

		this._is_closing = false;
		return true;
	};

	_pFrame._canMove = function () {
		if (this._state_openstatus != 0) {
			return false;
		}
		return true;
	};

	_pFrame._canDragMove = function () {
		if (nexacro.isTouchInteraction) {
			return false;
		}

		if (!this._canMove()) {
			return false;
		}


		if (!this._is_window) {
			if (this._window_type == 1 || this._window_type == 4) {
				return true;
			}

			var owner_frame = this.getOwnerFrame();
			if (owner_frame) {
				if (owner_frame._on_child_starttrack == undefined) {
					return false;
				}
			}
		}

		if (this._dragmovetype == 0) {
			return false;
		}

		return true;
	};

	_pFrame._canResize = function () {
		if (this._state_openstatus != 0) {
			return false;
		}
		return true;
	};

	_pFrame._canDragResize = function () {
		if (nexacro.isTouchInteraction) {
			return false;
		}

		if (!this._canResize()) {
			return false;
		}

		if (nexacro.Browser != "Runtime" && this._is_window) {
			return false;
		}

		if (this.resizable == false) {
			return false;
		}


		var owner_frame = this.getOwnerFrame();
		if (owner_frame && !this._is_window && (this._window_type != 1 && this._window_type != 4)) {
			if (owner_frame._is_autorecalc_frame) {
				return false;
			}
		}

		return true;
	};

	_pFrame._procSysCommand = function (systemcommand) {
		var statevalue = -1;
		switch (systemcommand) {
			case "restore":
				statevalue = 1;
				break;
			case "minimize":
				statevalue = 2;
				break;
			case "maximize":
				statevalue = 3;
				break;
		}

		if (this._is_window && this._window) {
			if (statevalue != (-1)) {
				this._window._procSysCommand(statevalue);
			}
		}

		if (statevalue == 1) {
			if (this._is_window && this._window && this._state_openstatus == 2) {
				systemcommand = ["normal", "restore", "minimize", "maximize"][this._prestate_openstatus];
				statevalue = this._prestate_openstatus;
			}
			else {
				systemcommand = "normal";
				statevalue = 0;
			}
		}

		if (statevalue != (-1)) {
			this.openstatus = systemcommand;
			this._change_state_OpenStatus(statevalue);
		}
	};

	_pFrame.on_syscommand = function (elem, systemcommand, event_bubbles, fire_comp, refer_comp) {
		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
			}
		}

		if (this.visible && this._isEnable() && this.enableevent) {
			event_bubbles = this.on_fire_syscommand(this, systemcommand);
			if (event_bubbles === false) {
				return false;
			}
		}

		if ((event_bubbles !== false) && this.parent && !this.parent._is_application && !this.parent._is_form) {
			var ret = this.parent.on_syscommand(elem, systemcommand, false, fire_comp ? fire_comp : this, refer_comp);
			if (ret == false) {
				return false;
			}
		}

		if (fire_comp && fire_comp != this) {
			return true;
		}

		this._procSysCommand(systemcommand);
	};

	_pFrame._on_activate = function () {
		if (this._activate == false) {
			return;
		}


		nexacro.FormBase.prototype._on_activate.call(this);

		if (this.form) {
			this.form._on_activate();
		}

		return true;
	};

	_pFrame._on_deactivate = function () {
		if (this._activate == false) {
			return;
		}

		if (this.form) {
			this.form._on_deactivate();
		}

		nexacro.FormBase.prototype._on_deactivate.call(this);

		return true;
	};

	_pFrame._on_orientationchange = function (orientation) {
		this.on_fire_onorientationchange(orientation);

		if (this.form) {
			this.form._on_orientationchange(orientation);
		}

		if (this.frames) {
			var frames = this.frames;
			var len = frames.length;
			for (var i = 0; i < len; i++) {
				if (frames[i]) {
					if (this._getWindow() != frames[i]._getWindow()) {
						continue;
					}

					frames[i]._on_orientationchange(orientation);
				}
			}
		}

		if (this.frame) {
			this.frame._on_orientationchange(orientation);
		}

		return true;
	};

	_pFrame._getRootLayerFrame = function () {
		var frame = this;
		while (frame) {
			if (frame._is_window) {
				return frame;
			}
			if (frame._window_type == 1 || frame._window_type == 4) {
				return frame;
			}
			if (frame.getOwnerFrame()) {
				frame = frame.getOwnerFrame();
			}
			else {
				break;
			}
		}
		return frame;
	};

	_pFrame._isRootLayerFrame = function () {
		if (this._is_window) {
			return true;
		}
		if (this._window_type == 1 || this._window_type == 4) {
			return true;
		}

		return false;
	};

	_pFrame.on_fire_syscommand = function (obj, state) {
		if (this.onsyscommand && this.onsyscommand._has_handlers) {
			var evt = new nexacro.SysCommandEventInfo(obj, "onsyscommand", state);
			var ret = this.onsyscommand._fireCheckEvent(this, evt);
			if (!ret) {
				return false;
			}
		}
		if (this.form && this.form.onsyscommand && this.form.onsyscommand._has_handlers) {
			var evt = new nexacro.SysCommandEventInfo(obj, "onsyscommand", state);
			var ret = this.form.onsyscommand._fireCheckEvent(this.form, evt);
			if (!ret) {
				return false;
			}
		}

		return true;
	};

	_pFrame._applyDragMoveType = nexacro._emptyFn;
	_pFrame.lookup = nexacro._emptyFn;
	_pFrame.lookupSetter = nexacro._emptyFn;
	_pFrame.lookupFunc = nexacro._emptyFn;

	_pFrame._setTitleBarHeight = function (height) {
		var control_elem = this._control_element;
		if (control_elem && this._applied_title_height != height) {
			this._applied_title_height = height;
			if (height > 0) {
				var apply_height = this._getAppliedTitleHeight(height);
				if (!this.titlebar) {
					this.titlebar = this.createTitleBar();
					var titletext = this._getTitleText(this.showcascadetitletext);
					this.titlebar.set_titletext(titletext);
					control_elem.setTitleBarControl(this.titlebar, apply_height);
					this.titlebar.createComponent();
				}
				else {
					control_elem.setTitleBarControl(this.titlebar, apply_height);
				}
			}
			else {
				if (this.titlebar) {
					this.titlebar.destroyComponent();
					this.titlebar = null;
					control_elem.setTitleBarControl(null, 0);
				}
			}
			return true;
		}
		return false;
	};

	_pFrame._setStatusBarHeight = function (height) {
		var control_elem = this._control_element;
		if (control_elem && this._applied_status_height != height) {
			this._applied_status_height = height;
			if (height > 0) {
				var apply_height = this._getAppliedStatusHeight(height);
				if (!this.statusbar) {
					this.statusbar = this.createStatusBar();
					var statustext = this._getStatusText(this.showcascadestatustext);
					this.statusbar.set_statustext(statustext);
					control_elem.setStatusBarControl(this.statusbar, apply_height);
					this.statusbar.createComponent();
					this.statusbar._setResizable(this._canDragResize());
				}
				else if (this._applied_status_height != apply_height) {
					control_elem.setStatusBarControl(this.statusbar, apply_height);
				}
			}
			else {
				if (this.statusbar) {
					this.statusbar.destroyComponent();
					this.statusbar = null;
					control_elem.setStatusBarControl(null, 0);
				}
			}
			return true;
		}
		return false;
	};

	_pFrame._setVerticalMin = function (v) {
		if (this._is_verticalmin == v) {
			return;
		}

		this._is_verticalmin = v;
		if (this._control_element) {
			this._control_element._is_verticalmin = v;
			if (this.titlebar) {
				nexacro.ContainerElement.prototype.bringToFrontElement.call(this._control_element, this.titlebar._control_element);
			}
		}

		if (this.titlebar) {
			this.titlebar._setVerticalMin(v);
		}
	};

	_pFrame._resetTitleAbsoluteStyle = function () {
		var titlebar = this.titlebar;
		if (!titlebar) {
			return;
		}

		var _style = 0;
		var owner_frame = this.getOwnerFrame();
		var is_modal = (this._window_type == 1 || this._window_type == 4 || this._window_type == 5);
		if (!this.resizable) {
			if (this._isNested()) {
				_style |= 0x0020;
			}
			else {
				_style |= 0x0001 | 0x0002;
			}
		}
		else {
			_style |= 0x0100 | 0x0200;
		}

		if (owner_frame && !this._isRootLayerFrame()) {
			if (owner_frame._isTopFrame()) {
				_style |= 0x0010 | 0x0020 | 0x0040;
			}

			if (owner_frame.fullframemaximize == false) {
				_style |= 0x0001;
			}
		}

		if (is_modal) {
			_style |= 0x0001;
			if (!this.resizable) {
				_style |= 0x0002;
			}
		}

		titlebar._setAbsoluteStyle(_style, 0xffff);
	};

	_pFrame._getMinMaxInfo = function () {
		var cx = 110, cy = 0;
		var border = this.on_find_CurrentStyle_border();

		if (border) {
			cx += border._getBorderWidth();
			cy += border._getBorderHeight();
		}

		if (this.showtitlebar) {
			cy += this._getTitlebarHeight();
		}
		if (this.showstatusbar) {
			cy += this._getStatusbarHeight();
		}

		return {
			cx : cx, 
			cy : cy
		};
	};

	_pFrame._isTopFrame = function () {
		return (this._is_top_frame);
	};
	_pFrame._getWindow = function () {
		if (this._is_window) {
			return this._window;
		}

		var parent = this.parent;
		if (parent) {
			return parent._getWindow();
		}
		return null;
	};

	_pFrame._getTitlebarHeight = function () {
		if (this.showtitlebar) {
			var ret = 20;
			if (this.style._applied_title_height > 0) {
				ret = this.style._applied_title_height;
			}
			else if (this.titlebar) {
				ret = this.titlebar._adjust_height;
			}
			return ret;
		}
		return 0;
	};

	_pFrame._getStatusbarHeight = function () {
		if (this.showtitlebar) {
			var ret = 20;
			if (this.style._applied_status_height > 0) {
				ret = this.style._applied_status_height;
			}
			else if (this.statusbar) {
				ret = this.statusbar._adjust_height;
			}
			return ret;
		}
		return 0;
	};

	_pFrame._isEnable = function () {
		return nexacro.FormBase.prototype._isEnable.call(this);
	};

	_pFrame._isNested = function () {
		return !this._is_window;
	};

	_pFrame._getTitleText = function (brecursive) {
		return this.titletext;
	};

	_pFrame._applyTitleText = function () {
		if (this._control_element) {
			var cascade = this.showcascadetitletext;
			var titletext = this._getTitleText(cascade);
			if (this.titlebar) {
				this.titlebar.set_titletext(titletext);
			}

			if (this.parent && this.parent._is_frame) {
				this.parent._applyTitleText();
			}

			if (this._is_window) {
				this._window._setTitleText(titletext);
			}
		}
	};

	_pFrame._applyStatusText = function () {
		if (this._control_element) {
			var cascade = this.showcascadestatustext;
			var statustext = this._getStatusText(cascade);
			if (this.statusbar) {
				this.statusbar.set_statustext(statustext);
			}

			if (this.parent && this.parent._is_frame) {
				this.parent._applyStatusText();
			}

			if (this._is_window) {
				this._window._setStatusText(statustext);
			}
		}
	};

	_pFrame._change_state_OpenStatus = function (cur) {
		var pre = this._prestate_openstatus = this._state_openstatus;
		this._state_openstatus = cur;

		if (pre != cur) {
			var owner_frame = this.getOwnerFrame();

			if (pre == 2) {
				this._setVerticalMin(false);
			}

			if (pre == 3 && !this._is_window) {
				if (owner_frame && owner_frame._is_frame == true && owner_frame._is_frameset == true) {
					owner_frame._max_frame = null;
				}
			}

			if (pre == 0 && (cur == 2 || cur == 3)) {
				if (!this._is_window) {
					if (this._restore_position) {
						this._restore_position = null;
					}

					if ((owner_frame && owner_frame._is_frameset && !owner_frame._is_autorecalc_frame) || (this._window_type == 1 || this._window_type == 4)) {
						this._restore_position = {
							left : this.left, 
							top : this.top, 
							width : this.width, 
							height : this.height, 
							right : this.right, 
							bottom : this.bottom
						};
					}
				}

				if (this._control_element) {
					this._control_element._setResizable(false);
				}
			}

			if ((pre == 2 || pre == 3) && cur == 0) {
				if (!this._is_window) {
					var restore = this._restore_position;
					if (restore) {
						this._move(restore.left, restore.top, restore.width, restore.height, restore.right, restore.bottom);

						this._restore_position = null;
					}
				}

				if (this._control_element) {
					this._control_element._setResizable(this._canDragResize());
				}
			}

			if (cur == 3 && !this._is_window) {
				if (owner_frame && owner_frame._is_frame == true && owner_frame._is_frameset == true) {
					if (owner_frame._max_frame && owner_frame._max_frame != this) {
						owner_frame._max_frame._change_state_OpenStatus(0);
					}
					owner_frame._max_frame = this;
				}
				else if (this._window_type == 1 || this._window_type == 4) {
					var win = this._getWindow();
					var width = nexacro._getMainWindowWidth(win);
					var height = nexacro._getMainWindowHeight(win);
					if (width < win.clientWidth) {
						width = win.clientWidth;
					}
					if (height < win.clientHeight) {
						height = win.clientHeight;
					}
					this._move(0, 0, width, height);
				}
			}

			if (this.titlebar) {
				this.titlebar._change_state_OpenStatus(cur);
			}

			if (this._prestate_openstatus != this._state_openstatus) {
				if (owner_frame && owner_frame._control_element) {
					owner_frame.on_change_containerRect(owner_frame._control_element.client_width, owner_frame._control_element.client_height);
				}
			}

			if (cur == 3 && !this._is_window) {
				if (owner_frame && owner_frame._is_frameset == true) {
					this.setFocus();
				}
			}

			this.openstatus = ["normal", "restore", "minimize", "maximize"][cur];
		}
	};

	_pFrame._change_state_activate = function (cur) {
		if (this._activate == false && cur == true) {
			if (this._control_element) {
				if (this._window_type != 1) {
					var owner_frame = this.getOwnerFrame();
					if (owner_frame) {
						var _win = this._getWindow();
						var owner_win = owner_frame._getWindow();
						if (_win == owner_win) {
							owner_frame._change_state_activate(cur, this);
						}
					}
					else if (nexacro._isDesktop()) {
						var _win = this._getWindow();
						if (this._is_window && _win && _win._handle) {
							_win._setFocus();
						}
					}
				}
				if (this.form) {
					var root_frame = this;
					while (root_frame) {
						if (root_frame._is_window) {
							break;
						}
						root_frame = root_frame.getOwnerFrame();
					}

					if (root_frame && root_frame.statusbar) {
						root_frame.statusbar._refreshZoomCombo(this.form);
					}
				}

				this._applyTitleText();
				this._applyStatusText();
			}

			if (!this._activate) {
				this._activate = cur;

				this._on_activate();
			}
		}
		else if (this._activate == true && cur == false) {
			this._on_deactivate();

			this._activate = cur;
		}
	};

	_pFrame._getAppliedTitleHeight = function (h) {
		return nexacro._AppliedTitleBarHeight(this, h);
	};

	_pFrame._getAppliedStatusHeight = function (h) {
		return nexacro._AppliedStatusBarHeight(this, h);
	};


	_pFrame._setModelessWindowSize = function () {
		if (this._is_window && this._window_type == 2 && this.autosize) {
			var _win = this._window;
			if (_win) {
				var width = this._adjust_width + (_win.width - _win.clientWidth);
				var height = this._adjust_height + (_win.height - _win.clientHeight);


				var win_width = nexacro._getWindowHandleOuterWidth(_win._handle, _win._custom_node_id);
				var win_height = nexacro._getWindowHandleOuterHeight(_win._handle, _win._custom_node_id);

				if (width != win_width || height != win_height) {
					_win.setSize(width, height);
				}
			}
		}
	};

	nexacro.MainFrame_Style = function (target) {
		nexacro.Frame_Style.call(this, target);

		this.menubarheight = null;
	};

	var _pMainFrameStyle = nexacro._createPrototype(nexacro.Frame_Style, nexacro.MainFrame_Style);
	nexacro.MainFrame_Style.prototype = _pMainFrameStyle;

	eval(nexacro._createValueAttributeEvalStr("_pMainFrameStyle", "menubarheight"));

	_pMainFrameStyle.__custom_emptyObject = function () {
		this.menubarheight = null;
	};

	_pMainFrameStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.menubarheight && !this.menubarheight._is_empty) {
			val += "menubarheight:" + this.menubarheight._value + "; ";
		}
		return val;
	};

	nexacro.MainFrame_CurrentStyle = function () {
		nexacro.Frame_CurrentStyle.call(this);

		this.menubarheight = null;
	};

	var _pMainFrameCurrentStyle = nexacro._createPrototype(nexacro.Frame_CurrentStyle, nexacro.MainFrame_CurrentStyle);
	nexacro.MainFrame_CurrentStyle.prototype = _pMainFrameCurrentStyle;

	_pMainFrameCurrentStyle.__custom_emptyObject = _pMainFrameStyle.__custom_emptyObject;
	_pMainFrameCurrentStyle.__get_custom_style_value = _pMainFrameStyle.__get_custom_style_value;

	delete _pMainFrameStyle;
	delete _pMainFrameCurrentStyle;

	nexacro.MainFrame = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Frame.call(this, id, position, left, top, width, height, right, bottom, parent, true);
		this.openalign = new nexacro.Style_align();
		this.applicationmenu = null;
		this.frame = null;
		this.menubar = null;
		this.resizable = true;
		this.layered = false;


		this._window = new nexacro.Window(id, null, true);

		this._menu_height = 0;
		this._applied_menu_height = 0;
		this._ref_comm = 0;
		this._defaultTitleHeight = 30;
		this._defaultStatusHeight = 30;
		this._is_window = true;
		this._is_autorecalc_frame = true;
		this._accessibility_role = "application";
		this._skip_destroy = false;
	};

	_pMainFrame = nexacro._createPrototype(nexacro.Frame, nexacro.MainFrame);
	nexacro.MainFrame.prototype = _pMainFrame;

	_pMainFrame._type_name = "MainFrame";


	_pMainFrame.getActiveFrame = function () {
		return this.frame;
	};

	_pMainFrame.on_apply_custom_pseudo = function (pseudo) {
		nexacro.Frame.prototype.on_apply_custom_pseudo.call(this);

		var curstyle = this.currentstyle;

		var menubarheight = this.on_find_CurrentStyle_menubarheight(pseudo);

		if (menubarheight != curstyle.menubarheight) {
			curstyle.menubarheight = menubarheight;
			this.on_apply_style_menubarheight();
		}
	};

	_pMainFrame.on_create_custom_style = function () {
		return new nexacro.MainFrame_Style(this);
	};
	_pMainFrame.on_create_custom_currentStyle = function () {
		return new nexacro.MainFrame_CurrentStyle();
	};

	_pMainFrame.on_find_CurrentStyle_menubarheight = function (pseudo) {
		return this._find_pseudo_obj("menubarheight", pseudo, "value");
	};

	_pMainFrame.on_update_style_menubarheight = function () {
		this.on_apply_style_menubarheight(this.currentstyle.menubarheight = this.on_find_CurrentStyle_menubarheight(this._pseudo));
	};

	_pMainFrame.on_apply_style_menubarheight = function () {
		var v = this.currentstyle.menubarheight;
		var h = nexacro.getStyleValueInt(v, 0);
		this._menu_height = h;
		if (this._setMenuBarHeight(h)) {
			this._updateClientSize(this._control_element);
		}
	};

	_pMainFrame.on_createBodyFrame = nexacro._emptyFn;

	_pMainFrame.createComponent = function () {
		this.createWindow();
		return nexacro.Frame.prototype.createComponent.call(this);
	};

	_pMainFrame.createWindow = function () {
		var _win = this._window;
		if (_win == null) {
			_win = this._window = new nexacro.Window(this.name, null, true);
		}

		_win.create(null, this.name, this._adjust_width, this._adjust_height, this._adjust_left, this._adjust_top, this.resizable, this.layered);
		_win.attachFrame(this, false);
		_win._setSystemMenuResizable(this.resizable);

		var width = nexacro._getMainWindowWidth(_win);
		var height = nexacro._getMainWindowHeight(_win);
		this._setSize(width, height);
	};

	_pMainFrame.createMenuBar = function () {
		var menubar = new nexacro.Form("menubar", 0, 0, 0, this._menubar_height, this);
		this._applied_menu_height = this._menubar_height;
		menubar.set_style("background:green;");
		menubar.set_text("menubar");
		this.manubar = menubar;
		return menubar;
	};

	_pMainFrame.createBodyFrame = function () {
		this.on_createBodyFrame();
	};

	_pMainFrame.on_create_contents = function () {
		nexacro.Frame.prototype.on_create_contents.call(this);

		if (this.menubar) {
			this._control_element.setMenuBarControl(this.menubar, this._applied_menu_height);
			this.menubar.createComponent();
			if (this._applied_menu_height > 0) {
			}
			this._updateClientSize(this._control_element);
		}
		if (this.frame) {
			this.frame._setPos(0, 0);
			this.frame._setSize(this._client_width, this._client_height);
			this.frame.createComponent();

			this.frame._change_state_OpenStatus(3);
		}
	};

	_pMainFrame._on_deactivate = function () {
		var window = this._getWindow();

		if (window) {
			window._keydown_element = null;
		}

		return nexacro.Frame.prototype._on_deactivate.call(this);
	};

	_pMainFrame.on_created_contents = function () {
		nexacro.Frame.prototype.on_created_contents.call(this);
		if (this.menubar) {
			this.menubar.on_created();
		}
		if (this.frame) {
			this.frame.on_created();
		}

		var control_element = this._control_element;
		if (control_element) {
			control_element.setElementRtlDirection(application.rtldirection);
		}

		if (nexacro.Browser == "Runtime" && nexacro._isDesktop()) {
			var left = this._adjust_left;
			var top = this._adjust_top;
			var width = this._adjust_width;
			var height = this._adjust_height;

			var after_align_pos = this._getOpenAlignPos(this._getWindow(), left, top, width, height);
			if (after_align_pos) {
				left = after_align_pos.left;
				top = after_align_pos.top;
			}
			this._move(left, top, width, height);
		}
	};

	_pMainFrame.destroyComponent = function () {
		if (this._waitcomp) {
			this._waitcomp.destroy();
			this._waitcomp = null;
		}

		if (nexacro._getLocalStorage("_com_waiting", false)) {
			application._com_waiting = false;
			nexacro._setLocalStorage("_com_waiting", "false", "boolean");
		}

		this._is_destroying = true;

		if (this._window && this._window._is_alive) {
			this._window.destroy();
			if (!this._skip_destroy) {
				nexacro.Frame.prototype.destroyComponent.call(this);
			}
			this._window = null;
		}
		else if (this._is_alive) {
			nexacro.Frame.prototype.destroyComponent.call(this);
		}

		this._is_destroying = false;
		return true;
	};

	_pMainFrame.on_destroy_contents = function () {
		nexacro.Frame.prototype.on_destroy_contents.call(this);
		if (this.menubar) {
			this.menubar.destroyComponent();
			this.menubar = null;
		}
		if (this.frame) {
			this.frame.destroyComponent();
			this.frame = null;
		}
	};

	_pMainFrame.on_change_containerPos = function (left, top) {
		if (this.frame) {
			this.frame._setPos(0, 0);
		}
	};

	_pMainFrame.on_change_containerRect = function (width, height) {
		if (this.frame) {
			this.frame._setSize(width, height);
		}

		if (this.titlebar) {
			this.titlebar._update_position(false, true);
		}
	};

	_pMainFrame.on_update_position = function (resize_flag, move_flag) {
		var ret = nexacro.FormBase.prototype.on_update_position.call(this, resize_flag, move_flag);

		if (resize_flag || move_flag) {
			var frames = this._frames;
			var frames_len = frames.length;
			for (var i = 0; i < frames_len; i++) {
				if (this.frame.id == frames[i].id) {
					continue;
				}
				var frame = frames[i];
				var form = frame.form;

				var after_align_pos = frame._getOpenAlignPos(this._getWindow(), frame.left, frame.top, frame.width, frame.height);
				if (after_align_pos) {
					frame.left = after_align_pos.left;
					frame.top = after_align_pos.top;
				}
				frame.move(frame.left, frame.top, frame.width, frame.height, frame.right, frame.bottom);
				form.on_change_containerRect(form._client_width, form._client_height);
			}
		}

		if (this._is_window && nexacro.Browser == "Runtime") {
			var _window = this._window;
			if (_window) {
				if (resize_flag) {
					if (nexacro._isDesktop()) {
						_window.setSize(this._adjust_width, this._adjust_height);
					}
				}

				if (move_flag) {
					_window.moveTo(this._left, this._top);
				}
			}
		}

		return ret;
	};


	_pMainFrame._waitCursor = function (wait_flag, context) {
		if (this._window) {
			if (wait_flag == true) {
				var waitcomp = this._waitcomp;
				if (this._ref_comm == 0) {
					application._com_waiting = true;
					nexacro._setLocalStorage("_com_waiting", "true", "boolean");

					if (waitcomp == null) {
						waitcomp = this._waitcomp = new nexacro.WaitComponent("waitwindow", "absolute", 0, 0, 0, 0, null, null, this);
						waitcomp.createComponent();
						application._is_waitCursor = true;
						waitcomp.on_created();
						application._is_waitCursor = false;
					}

					var waitcursor_imgurl = application._getLoadingImageUrl();
					waitcomp.setImage(waitcursor_imgurl);
					this._window._updateWrapper(true);
					waitcomp.show();
				}
				waitcomp._addContext(context);
				this._ref_comm++;
			}
			else {
				this._window._updateWrapper(false);
				if (this._ref_comm > 0) {
					this._ref_comm--;
				}

				var waitcomp = this._waitcomp;
				if (waitcomp) {
					waitcomp._removeContext(context);
					if (this._ref_comm <= 0) {
						this._ref_comm = 0;
						application._com_waiting = false;
						nexacro._setLocalStorage("_com_waiting", "false", "boolean");
						waitcomp.hide();
					}
				}
			}
		}
	};

	_pMainFrame.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}
		v = nexacro._toBoolean(v);

		if (this.visible != v) {
			nexacro.Component.prototype.set_visible.call(this, v);

			var _win = this._getRootWindow();
			if (_win && _win._handle) {
				nexacro._setPopupWindowHandleVisible(_win._handle, v);
			}
		}
	};
	_pMainFrame.set_openalign = function (v) {
		if (this.openalign._is_empty && this.openalign._value != v) {
			this.openalign._setValue(v);
			this.on_apply_prop_openalign();
		}
	};

	_pMainFrame.set_resizable = function (v) {
		var resizable = nexacro._toBoolean(v);
		if (this.resizable != resizable) {
			this.resizable = resizable;
			this._resetTitleAbsoluteStyle();

			if (this._control_element) {
				this._control_element._setResizable(this._canDragResize());
			}
		}
	};

	_pMainFrame.set_layered = function (v) {
		var layered = nexacro._toBoolean(v);
		if (this.layered != layered) {
			this.layered = layered;
		}
	};


	_pMainFrame.on_apply_prop_openalign = function () {
		if (!this.openalign._is_empty) {
		}
	};

	_pMainFrame.on_apply_prop_enable = function (v) {
		if (this.frame) {
			this.frame._setEnable(v);
		}
	};

	_pMainFrame.on_apply_prop_rtldirection = function () {
		var _rtldirection = this._rtldirection;

		var titlebar = this.titlebar;
		if (titlebar) {
			titlebar._setRtlDirection(_rtldirection);
		}
		var statusbar = this.statusbar;
		if (statusbar) {
			statusbar._setRtlDirection(_rtldirection);
		}

		var menubar = this.menubar;
		if (menubar) {
			menubar._setRtlDirection(_rtldirection);
		}

		var frame = this.frame;
		if (frame) {
			frame._setRtlDirection(_rtldirection);

			var owner_frame = this.frame.getOwnerFrame();
			var width = owner_frame._control_element.client_width;
			var height = owner_frame._control_element.client_height;
			this.frame._setSize(width, height);
		}
	};



	_pMainFrame._on_beforeclose = function (root_closing_comp) {
		if (!root_closing_comp) {
			root_closing_comp = this;
		}

		var msg = "", application_msg = "";

		if (application) {
			application_msg = application.on_fire_onbeforeexit();
			msg = nexacro.Frame.prototype._on_beforeclose.call(this, root_closing_comp);
			msg = this._appendBeforeCloseMsg(msg, application_msg);
		}

		return msg;
	};
	_pMainFrame.on_syscommand = function (elem, systemcommand, event_bubbles, fire_comp, refer_comp) {
		var ret = this.on_fire_syscommand(this, systemcommand);
		if (!ret) {
			return false;
		}

		if (fire_comp && fire_comp != this) {
			return true;
		}

		this._procSysCommand(systemcommand);
	};

	_pMainFrame.on_closebutton_click = function (obj, e) {
		application.exit();
	};

	_pMainFrame._getOpenAlignPos = function (parent_win, left, top, width, height) {
		if (!this.openalign._is_empty) {
			var monitor_idx = nexacro._getMonitorIndex(parent_win.left + width / 2, parent_win.top + height / 2);

			var screen_rect = nexacro._getScreenRect(monitor_idx);

			var p_l = screen_rect.left;
			var p_t = screen_rect.top;
			var p_w = nexacro._getScreenWidth(monitor_idx);
			var p_h = nexacro._getScreenHeight(monitor_idx);

			switch (this.openalign.halign) {
				case "left":
					left = p_l;
					break;
				case "center":
					left = p_l + Math.round((p_w - width) / 2);
					break;
				case "right":
					left = p_l + p_w - width;
					break;
			}
			switch (this.openalign.valign) {
				case "top":
					top = p_t;
					break;
				case "middle":
					top = p_t + Math.round((p_h - height) / 2);
					break;
				case "bottom":
					top = p_t + p_h - height;
					break;
			}

			return {
				left : left, 
				top : top
			};
		}

		return null;
	};

	_pMainFrame._setMenuBarHeight = function (height) {
		if (this._applied_menu_height != height) {
			if (height > 0 && this.menubar) {
				this._applied_menu_height = height;
				var control_elem = this._control_element;
				if (control_elem) {
					control_elem.setMenuBarControl(this.menubar, height);
					return true;
				}
				this.menubar.set_visible(true);
			}
			else if (this._applied_menu_height > 0 && this.menubar) {
				this._applied_menu_height = 0;
				this.menubar.set_visible(false);
				this.menubar = null;
				if (control_elem) {
					control_elem.setMenuBarControl(null, 0);
					return true;
				}
			}
		}
		return false;
	};

	_pMainFrame._change_state_activate = function (cur) {
		if (cur == false) {
			if (this.frame) {
				this.frame._change_state_activate(false);
			}
		}

		nexacro.Frame.prototype._change_state_activate.call(this, cur);
	};

	_pMainFrame._getTitleText = function (brecursive) {
		var titletext;
		titletext = this.titletext;
		if (brecursive) {
			if (this.frame) {
				var subtitletext = this.frame._getTitleText(true);
				if (subtitletext.length > 0) {
					if (titletext.length > 0) {
						titletext += " - ";
					}
					titletext += subtitletext;
				}
			}
		}
		return titletext;
	};

	_pMainFrame._getStatusText = function (brecursive) {
		var statustext;
		statustext = this.statustext;
		if (brecursive) {
			if (this.frame) {
				var substatustext = this.frame._getStatusText(true);
				if (substatustext.length > 0) {
					if (statustext.length > 0) {
						statustext += " - ";
					}
					statustext += substatustext;
				}
			}
		}
		return statustext;
	};

	delete _pMainFrame;

	nexacro.ChildFrame_Style = function (target) {
		nexacro.Frame_Style.call(this, target);
		this.overlaycolor = null;
	};

	var _pChildFrameStyle = nexacro._createPrototype(nexacro.Frame_Style, nexacro.ChildFrame_Style);
	nexacro.ChildFrame_Style.prototype = _pChildFrameStyle;

	eval(nexacro._createValueAttributeEvalStr("_pChildFrameStyle", "overlaycolor"));

	_pChildFrameStyle.__custom_emptyObject = function () {
		nexacro.Frame_Style.prototype.__custom_emptyObject.call(this);
		this.overlaycolor = null;
	};

	_pChildFrameStyle.__get_custom_style_value = function () {
		var val = nexacro.Frame_Style.prototype.__get_custom_style_value.call(this);
		if (this.overlaycolor && !this.overlaycolor._is_empty) {
			val += "overlaycolor:" + this.overlaycolor._value + "; ";
		}
		return val;
	};

	nexacro.ChildFrame_CurrentStyle = function () {
		nexacro.Frame_CurrentStyle.call(this);
		this.overlaycolor = null;
	};

	var _pChildFrameCurrentStyle = nexacro._createPrototype(nexacro.Frame_CurrentStyle, nexacro.ChildFrame_CurrentStyle);
	nexacro.ChildFrame_CurrentStyle.prototype = _pChildFrameCurrentStyle;

	_pChildFrameCurrentStyle.__custom_emptyObject = _pChildFrameStyle.__custom_emptyObject;
	_pChildFrameCurrentStyle.__get_custom_style_value = _pChildFrameStyle.__get_custom_style_value;

	delete _pChildFrameStyle;
	delete _pChildFrameCurrentStyle;

	nexacro.ChildFrame = function (id, position, left, top, width, height, right, bottom, url, parent) {
		nexacro.Frame.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.openalign = new nexacro.Style_align();
		this.opener = null;
		this.form = null;
		this.autosize = true;
		this.resizable = false;
		this.layered = false;
		this.showontaskbar = null;
		this.widget = false;
		this.dragmovetype = "normal";


		this._ref_comm = 0;
		this._waitcomp = null;
		this._window_type = 0;
		this._dragmovetype = 1;

		this._is_popup_frame = false;
		this._is_loadform_failed = false;
		this._init_formurl = url;

		this._args = {
		};
	};

	_pChildFrame = nexacro._createPrototype(nexacro.Frame, nexacro.ChildFrame);
	nexacro.ChildFrame.prototype = _pChildFrame;

	_pChildFrame._type_name = "ChildFrame", 
		
		nexacro.ChildFrame._default_overlaycolor = nexacro._getCachedStyleObj("color", "#00000090");

	_pChildFrame._close_callback = null;
	_pChildFrame._close_argument = undefined;


	_pChildFrame.on_create_custom_style = function () {
		return new nexacro.ChildFrame_Style(this);
	};

	_pChildFrame.on_create_custom_currentStyle = function () {
		return new nexacro.ChildFrame_CurrentStyle();
	};


	_pChildFrame.on_update_style_align = function (idx) {
		if (idx == 0) {
			this._updateCurrentStyle("align");
			this.on_apply_style_align();
		}
		else if (idx == 2) {
			this.on_apply_prop_openalign();
		}
	};

	_pChildFrame.on_apply_prop_openalign = function () {
		if (!this.openalign._is_empty) {
		}
	};

	_pChildFrame.on_apply_prop_enable = function (v) {
		if (this.form) {
			this.form._setEnable(v);
		}
	};

	_pChildFrame.on_apply_prop_rtldirection = function () {
		var _rtldirection = this._rtldirection;

		var titlebar = this.titlebar;
		if (titlebar) {
			titlebar._setRtlDirection(_rtldirection);
		}
		var statusbar = this.statusbar;
		if (statusbar) {
			statusbar._setRtlDirection(_rtldirection);
		}

		var form = this.form;
		if (form) {
			form._setRtlDirection(_rtldirection);
		}
	};

	_pChildFrame.on_apply_style_overlaycolor = function (color) {
		if (this._modal_overlay_elem) {
			this._modal_overlay_elem.setElementColor(color);
		}
	};

	_pChildFrame.on_find_CurrentStyle_overlaycolor = function (pseudo) {
		var overlaycolor = this._find_pseudo_obj("overlaycolor", pseudo, "color");
		if (overlaycolor) {
			return overlaycolor;
		}
		return nexacro.ChildFrame._default_overlaycolor;
	};

	_pChildFrame.on_update_style_overlaycolor = function () {
		this.on_apply_style_overlaycolor(this.currentstyle.overlaycolor = this.on_find_CurrentStyle_overlaycolor(this._pseudo));
	};


	_pChildFrame.on_create_contents = function () {
		nexacro.Frame.prototype.on_create_contents.call(this);

		if (this.form) {
			this.form._setPos(0, 0);
			this.form._setSize(this._client_width, this._client_height);
			this.form.createComponent();
		}
	};

	_pChildFrame.destroyComponent = function () {
		if (this._window_type == 1 || this._window_type == 4) {
			if (!(nexacro.Browser == "IE" && nexacro.BrowserVersion < 9)) {
				this._setModalUnlock();
			}
			this._runCallback();
			if ((nexacro.Browser == "IE" && nexacro.BrowserVersion < 9)) {
				this._setModalUnlock();
			}
			nexacro._unregisterPopupFrame(this.id);

			if (this._window_type == 4) {
				var _win = this._getWindow();
				var _virtual_handle = this._virtual_handle;

				nexacro._unblockScript(_win._handle, _virtual_handle);
				nexacro._closeVirtualWindowHandle(_virtual_handle);
				this._virtual_handle = null;
			}
		}

		if (this._waitcomp) {
			this._waitcomp.destroy();
			this._waitcomp = null;
		}
		this._is_destroying = true;

		if (nexacro._getLocalStorage("_com_waiting", false)) {
			application._com_waiting = true;
			nexacro._setLocalStorage("_com_waiting", "true", "boolean");
		}

		if (this._window && this._window._is_alive) {
			this._window.destroy();
			this._window = null;
			this._is_destroying = false;
			return true;
		}
		else {
			this._is_destroying = false;
			return nexacro.Frame.prototype.destroyComponent.call(this);
		}
	};

	_pChildFrame.on_destroy_contents = function () {
		if (this._waitcomp) {
			this._waitcomp.destroy();
			this._waitcomp = null;
		}

		nexacro.Frame.prototype.on_destroy_contents.call(this);

		if (this._variables) {
			var len = this._variables.length;
			for (var i = 0; i < len; i++) {
				delete this[this._variables[i]];
			}
		}

		if (this.form) {
			this.form.destroyComponent();
			this.form = null;
		}
	};

	_pChildFrame._runCallback = function () {
		var callback = this._close_callback;
		if (callback) {
			if (typeof (callback) == "string") {
				if (this.opener) {
					var _call_callback_fn = this.opener[callback];
					if (_call_callback_fn) {
						try {
							_call_callback_fn.call(this.opener, this.name, this._close_argument);
						}
						catch (e) {
							if (e.obj) {
								application._onSystemError(e.obj, e.name, e.message);
							}
							else {
								var msg = nexacro._getExceptionMessage(e);
								application._onSystemError(application, e.name, msg);
							}
						}
					}
				}
			}
			else if (typeof (callback) == "function") {
				try {
					callback.call(this.opener, this.name, this._close_argument);
				}
				catch (e) {
					if (e.obj) {
						application._onSystemError(e.obj, e.name, e.message);
					}
					else {
						var msg = nexacro._getExceptionMessage(e);
						application._onSystemError(application, e.name, msg);
					}
				}
			}
		}
	};


	_pChildFrame.on_created_contents = function () {
		if (this._is_window && this._window) {
			var window = this._window;
			if (this._delayed_window_pos && window._handle) {
				window.setArea(this._delayed_window_pos.left, this._delayed_window_pos.top, this._delayed_window_pos.width, this._delayed_window_pos.height);

				delete this._delayed_window_pos;
			}

			this._setSize(this._adjust_width, this._adjust_height);

			if (window._handle) {
				window._setSystemMenuResizable(this.resizable);
			}
		}
		else if ((this._window_type == 1 || this._window_type == 4) && this.form && this.autosize) {
			var left = this._adjust_left;
			var top = this._adjust_top;
			var calculated_size = this._getAutosizedFrameSize(true);
			var width = calculated_size.width;
			var height = calculated_size.height;

			var after_align_pos = this._getOpenAlignPos(this._getWindow(), left, top, width, height);
			if (!isNaN(after_align_pos.left) && !isNaN(after_align_pos.top)) {
				left = after_align_pos.left;
				top = after_align_pos.top;
			}
			else {
				var recalculated_pos = this._recalcModalPosition(left, top, width, height);
				left = recalculated_pos.left;
				top = recalculated_pos.top;
			}
			this._move(left, top, width, height);
		}

		nexacro.Frame.prototype.on_created_contents.call(this);


		if (this._init_formurl) {
			this.set_formurl(this._init_formurl);
		}

		this._createForm();
		this.on_apply_prop_rtldirection();
	};

	_pChildFrame.on_change_containerPos = function (left, top) {
		if (this.form) {
			this.form._setPos(0, 0);
		}
	};
	_pChildFrame.on_change_containerRect = function (width, height) {
		if (this.form) {
			this.form._setSize(width, height);


			if (this._is_window) {
				this.form.resetScroll();
			}
		}

		if (this.titlebar) {
			this.titlebar._update_position(false, true);
		}
	};

	_pChildFrame.createComponent = function (bCreateOnly) {
		if (this._window_type != 1 && this._window_type != 4 && this._window_type != 5) {
			return nexacro.Frame.prototype.createComponent.call(this, bCreateOnly);
		}

		var modal_overlay_elem = this._modal_overlay_elem;
		var parent_elem = modal_overlay_elem;
		var control_elem = this._control_element;
		if (!control_elem) {
			var control_elem = this.on_create_control_element(parent_elem);

			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this._initControl(control_elem, pseudo);
			this._initContents(control_elem, pseudo);

			if (!bCreateOnly && parent_elem && parent_elem._handle) {
				this.on_created();
			}
		}
		return true;
	};

	_pChildFrame._checkValidLayout = function () {
		if (this.form != null) {
			this.form._checkValidLayout();
		}
	};

	_pChildFrame._waitCursor = function (wait_flag, context) {
		if (this._isNested()) {
			return nexacro.Frame.prototype._waitCursor.call(this, wait_flag, context);
		}

		if (this._window) {
			if (wait_flag == true) {
				var waitcomp = this._waitcomp;
				if (waitcomp == null) {
					waitcomp = this._waitcomp = new nexacro.WaitComponent("waitwindow", "absolute", 0, 0, 0, 0, null, null, this);
					waitcomp.createComponent();
					waitcomp.on_created();
				}

				this._window._updateWrapper(true);
				if (this._ref_comm == 0) {
					application._com_waiting = true;
					nexacro._setLocalStorage("_com_waiting", "true", "boolean");

					var waitcursor_imgurl = application._getLoadingImageUrl();
					waitcomp.setImage(waitcursor_imgurl);
					waitcomp.show();
				}
				waitcomp._addContext(context);
				this._ref_comm++;
			}
			else {
				this._window._updateWrapper(false);
				if (this._ref_comm > 0) {
					this._ref_comm--;
				}

				var waitcomp = this._waitcomp;
				if (waitcomp) {
					waitcomp._removeContext(context);
					if (this._ref_comm <= 0) {
						this._ref_comm = 0;
						application._com_waiting = false;
						nexacro._setLocalStorage("_com_waiting", "false", "boolean");
						waitcomp.hide();
					}
				}
			}
		}
	};

	_pChildFrame.on_lbuttondown_default_action = function (elem, refer_comp, canvasX, canvasY) {
		if (this._window_type != 1) {
			nexacro.Component.prototype.on_lbuttondown_default_action.call(this, elem, refer_comp, canvasX, canvasY);
		}
	};

	_pChildFrame.set_autosize = function (v) {
		if (this.autosize != v) {
			this.autosize = nexacro._toBoolean(v);
		}
	};

	_pChildFrame.set_dragmovetype = function (v) {
		if (this.dragmovetype != v) {
			var allow_dragform = false;
			switch (v) {
				case "all":
					this.dragmovetype = v;
					this._dragmovetype = 2;
					allow_dragform = true;
					break;
				case "normal":
					this.dragmovetype = v;
					this._dragmovetype = 1;
					break;
				case "none":
					this.dragmovetype = v;
					this._dragmovetype = 0;
					break;
			}

			this._applyDragMoveType();
		}
	};

	_pChildFrame.set_openalign = function (v) {
		if (this.openalign._is_empty && this.openalign._value != v) {
			this.openalign._setValue(v);
			this.on_update_style_align(2);
		}
	};

	_pChildFrame.set_formurl = function (url) {
		var realurl = nexacro._getFDLLocation(url);
		if (this._formurl != realurl) {
			if (this.form && this.form._control_element) {
				var confirm_message = this._on_beforeclose();
				if (this._checkAndConfirmClose(confirm_message) == false) {
					return;
				}
				this._on_close();
			}

			this.formurl = url;
			this._formurl = realurl;
			this._is_loadform_failed = false;

			if (this._is_created) {
				this._createForm();
			}
			this.on_apply_prop_rtldirection();
		}
	};

	_pChildFrame.set_resizable = function (v) {
		var resizable = nexacro._toBoolean(v);
		if (this.resizable != resizable) {
			this.resizable = resizable;
			this._resetTitleAbsoluteStyle();

			if (this._control_element) {
				this._control_element._setResizable(this._canDragResize());
			}

			if (this._window) {
				this._window._setSystemMenuResizable(resizable);
			}
		}
	};

	_pChildFrame.set_layered = function (v) {
		var layered = nexacro._toBoolean(v);
		if (this.layered != layered) {
			this.layered = layered;
		}
	};

	_pChildFrame.set_showontaskbar = function (v) {
		var showontaskbar = nexacro._toBoolean(v);
		if (this.showontaskbar != showontaskbar) {
			this.showontaskbar = showontaskbar;
		}
	};

	_pChildFrame.set_widget = function (v) {
		var widget = nexacro._toBoolean(v);
		if (this.widget != widget) {
			this.widget = widget;
		}
	};

	_pChildFrame.init = function (id, position, left, top, width, height, right, bottom, strurl) {
		if (id) {
			this.id = this.name = id;
		}

		this.position = position ? position : "absolute";

		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;
		var bsize = false, bmove = false;

		if (arguments.length >= 6) {
			this._adjustPosition(left, top, right, bottom, width, height, this.parent ? this.parent._client_width : 0, this.parent ? this.parent._client_height : 0);

			if (this._adjust_width != old_width || this._adjust_height != old_height) {
				bsize = true;
			}
			if (this._adjust_left != old_left || this._adjust_top != old_top) {
				bmove = true;
			}

			if (!strurl) {
				this.on_update_position(bsize, bmove);
			}
		}

		if (strurl) {
			this._init_formurl = strurl;
		}
	};

	_pChildFrame.loadForm = function (strformurl, objframe, basync, callback) {
		return this.getApplication().loadFormurl(strformurl, null, objframe, basync, callback);
	};

	_pChildFrame._on_loadform_failed = function () {
		this._is_loadform_failed = true;

		if (this._window_type > 0) {
			if (!this.showtitlebar) {
				this.set_showtitlebar(true);
			}
			if (!this.visible) {
				this.set_visible(true);
			}

			var left = this._adjust_left;
			var top = this._adjust_top;
			var right = this._adjust_left + this._adjust_width;
			var bottom = this._adjust_top + this._adjust_height;
			var width = this._adjust_width;
			var height = this._adjust_height;

			var _mainframe = application.mainframe;
			var opener_width = _mainframe._adjust_width;
			var opener_height = _mainframe._adjust_height;

			var bmove = false;
			var opener = this.opener;
			if (opener) {
				opener_width = opener._adjust_width;
				opener_height = opener._adjust_height;
			}

			if (right < 0 || bottom < 0 || top > opener_height || left > opener_width) {
				left = 0;
				top = 0;

				bmove = true;
			}

			if (this._adjust_width < this._minWidth || this._adjust_height < this._minHeight) {
				width = this._defaultWidth;
				height = this._defaultHeight;

				bmove = true;
			}

			if (bmove) {
				this.move(left, top, width, height);
			}
		}
	};

	_pChildFrame._addVariable = function (id, val) {
		this[id] = val;
		if (!this._variables) {
			this._variables = [];
		}
		this._variables.push(id);
	};


	_pChildFrame.showModal = function (str_id, _parent_frame, arr_arg, opener, callback, is_async) {
		if (nexacro._current_popups.length > 0) {
			nexacro._checkClosePopupComponent(null);
		}

		var ret, parent_frame, id, arg;
		if (typeof str_id == "string" && str_id != null) {
			this.id = id = arguments[0];
			parent_frame = arguments[1];
			this._arg = arguments[2];
			this.opener = arguments[3];
			this._close_callback = arguments[4];
		}
		else {
			id = this.id;
			parent_frame = arguments[0];
			this._arg = arguments[1];
			this.opener = arguments[2];
			this._close_callback = arguments[3];
		}

		var child_frame = null;

		if (parent_frame == null) {
			parent_frame = application.mainframe;
		}
		if (parent_frame) {
			ret = parent_frame.addChild(id, this);
		}

		if (ret == -1) {
			return false;
		}
		else {
			child_frame = this;
		}

		if (child_frame && child_frame._arg) {
			for (var param in child_frame._arg) {
				child_frame._addVariable(param, child_frame._arg[param]);
			}
		}

		if (nexacro._registerPopupFrame(id, this) < 0) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
			return false;
		}

		var strurl = this.formurl;
		if (strurl) {
			this.set_formurl(strurl);
		}

		child_frame._is_window = false;
		child_frame._window_type = 1;

		var left = child_frame._adjust_left;
		var top = child_frame._adjust_top;
		var width = child_frame._adjust_width;
		var height = child_frame._adjust_height;


		if (this.autosize) {
			var calculated_size = this._getAutosizedFrameSize(true);
			this.width = width = calculated_size.width;
			this.height = height = calculated_size.height;
		}

		var after_align_pos = child_frame._getOpenAlignPos(this._getWindow(), left, top, width, height);
		if (after_align_pos && !isNaN(after_align_pos.left) && !isNaN(after_align_pos.top)) {
			this.left = after_align_pos.left;
			this.top = after_align_pos.top;
		}
		else {
			var recalculated_pos = this._recalcModalPosition(this.left, this.top, this.width, this.height);
			this.left = recalculated_pos.left;
			this.top = recalculated_pos.top;
		}

		if (!this.opener || (this.opener && !this.opener._is_form && !this.opener._is_application)) {
			var _focus_obj = null;
			if (parent_frame && parent_frame._focusManager) {
				_focus_obj = parent_frame._focusManager[0];
			}

			if (_focus_obj) {
				if (_focus_obj.parent._is_form) {
					this.opener = _focus_obj.parent;
				}
				else {
					this.opener = parent_frame ? parent_frame.form : null;
				}
			}
			else {
				this.opener = parent_frame ? parent_frame.form : null;
			}
		}

		if (this.form) {
			this.form.opener = this.opener;
		}

		var parent_window = parent_frame ? parent_frame._getWindow() : null;
		if (parent_window) {
			parent_window._cancelEvent();
		}

		this._setModalLock();
		this.createComponent(true);
		this.on_created();
		if (nexacro.Browser == "Safari") {
			this.getElement().setElementZIndex(0);
		}

		var _win = this._getWindow();
		if (_win) {
			var focusPaths = _win.getCurrentFocusPaths();
			var pathsIndex = nexacro._indexOf(focusPaths, this);
			if (pathsIndex > -1) {
				var elem = this.getElement();
				if (elem) {
					elem.setElementFocus(true);
				}
			}
			else {
				this._on_focus(true);
			}
		}

		this._change_state_activate(true);

		return true;
	};

	_pChildFrame._showModalSync = function (str_id, _parent_frame, arr_arg, opener) {
		var ret, parent_frame, id, arg;
		if (!(str_id instanceof nexacro.Frame) && str_id != null) {
			this.id = id = arguments[0];
			parent_frame = arguments[1];
			this._arg = arguments[2];
			this.opener = arguments[3];
		}
		else {
			id = this.id;
			parent_frame = arguments[0];
			this._arg = arguments[1];
			this.opener = arguments[2];
		}

		var child_frame = null;

		if (parent_frame == null) {
			parent_frame = application.mainframe;
		}
		if (parent_frame) {
			ret = parent_frame.addChild(id, this);
		}

		if (ret == -1) {
			return false;
		}
		else {
			child_frame = this;
		}

		if (child_frame && child_frame._arg) {
			for (var param in child_frame._arg) {
				child_frame._addVariable(param, child_frame._arg[param]);
			}
		}

		if (nexacro._registerPopupFrame(id, this) < 0) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
			return false;
		}

		child_frame._is_window = false;
		child_frame._window_type = 4;

		var left = child_frame._adjust_left;
		var top = child_frame._adjust_top;
		var width = child_frame._adjust_width;
		var height = child_frame._adjust_height;


		if (this.autosize) {
			var calculated_size = this._getAutosizedFrameSize(true);
			this.width = width = calculated_size.width;
			this.height = height = calculated_size.height;
		}

		var after_align_pos = child_frame._getOpenAlignPos(this._getWindow(), left, top, width, height);
		if (after_align_pos && !isNaN(after_align_pos.left) && !isNaN(after_align_pos.top)) {
			this.left = after_align_pos.left;
			this.top = after_align_pos.top;
		}
		else {
			var recalculated_pos = this._recalcModalPosition(this.left, this.top, this.width, this.height);
			this.left = recalculated_pos.left;
			this.top = recalculated_pos.top;
		}

		if (!this.opener || (this.opener && !this.opener._is_form && !this.opener._is_application)) {
			var _focus_obj = null;
			if (parent_frame && parent_frame._focusManager) {
				_focus_obj = parent_frame._focusManager[0];
			}

			if (_focus_obj) {
				if (_focus_obj.parent._is_form) {
					this.opener = _focus_obj.parent;
				}
				else {
					this.opener = parent_frame ? parent_frame.form : null;
				}
			}
			else {
				this.opener = parent_frame ? parent_frame.form : null;
			}
		}

		if (this.form) {
			this.form.opener = this.opener;
		}

		this._setModalLock();
		this.createComponent(true);
		this.on_created();

		this._change_state_activate(true);

		var win = this._getWindow();
		if (win && win._handle) {
			var _virtual_handle = nexacro._createVirtualWindowHandle(win._handle);
			this._virtual_handle = _virtual_handle;
			nexacro._blockScript(win._handle, _virtual_handle);
		}

		return true;
	};



	_pChildFrame.showModeless = function (str_id, _parent_frame, arr_arg, opener) {
		var ret, parent_frame, id, arg, option;
		if (!(str_id instanceof nexacro.Frame) && str_id != null) {
			parent_frame = _parent_frame;
			id = str_id;
			this.id = id;
			this._arg = arr_arg;
			if (opener) {
				this.opener = opener;
			}
		}
		else {
			parent_frame = str_id;
			id = this.id;
			this._arg = _parent_frame;
			if (arr_arg) {
				this.opener = arr_arg;
			}
		}

		var child_frame;
		if (parent_frame) {
			ret = parent_frame.addChild(id, this);
		}

		if (ret == -1) {
			return false;
		}

		child_frame = this;

		if (child_frame && child_frame._arg) {
			for (var param in child_frame._arg) {
				child_frame._addVariable(param, child_frame._arg[param]);
			}
		}

		if (nexacro._registerPopupFrame(id, this) < 0) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
		}

		if (this._init_formurl) {
			this.set_formurl(this._init_formurl);
		}

		child_frame._is_window = true;
		child_frame._window_type = 2;

		var left = child_frame._adjust_left;
		var top = child_frame._adjust_top;
		var width = child_frame._adjust_width;
		var height = child_frame._adjust_height;

		var is_form_loaded = false;
		if (this.autosize && this.form && !this.form._is_loading) {
			var calculated_size = this._getAutosizedFrameSize(nexacro.Browser == "Runtime");
			this.width = width = calculated_size.width;
			this.height = height = calculated_size.height;

			is_form_loaded = true;
		}

		if (!is_form_loaded) {
			var after_align_pos = child_frame._getOpenAlignPos(child_frame._window, left, top, width, height);
			if (after_align_pos) {
				left = after_align_pos.left;
				top = after_align_pos.top;
			}
		}

		if (!this.opener || (this.opener && !this.opener._is_form && !this.opener._is_application)) {
			var _focus_obj = null;
			if (parent_frame && parent_frame._focusManager) {
				_focus_obj = parent_frame._focusManager[0];
			}
			if (_focus_obj) {
				if (_focus_obj.parent._is_form) {
					this.opener = _focus_obj.parent;
				}
				else {
					this.opener = parent_frame ? parent_frame.form : null;
				}
			}
			else {
				this.opener = parent_frame ? parent_frame.form : null;
			}
		}

		if (this.form) {
			this.form.opener = this.opener;
		}

		this._accessibility_role = "dialog";

		var parent_window = parent_frame ? parent_frame._getWindow() : null;
		if (!this.autosize || is_form_loaded) {
			this._window = new nexacro.Window(this.name, parent_window, false);
			this._window.attachFrame(this, false);
			this._window.create(parent_window, this.id, width, height, left, top, this.resizable, this.layered, this.showontaskbar);
			if (this._is_created) {
				this._control_element._parent_elem = null;
			}
		}
		else {
			this._delayed_create_window = true;
			this._delayed_create_parent = parent_window;
			this._createForm();
		}

		return true;
	};

	_pChildFrame._showModalWindow = function (str_id, _parent_frame, arr_arg, opener, _lockmode) {
		this._is_popup_frame = true;
		var ret, parent_frame, id, arg, lockmode;
		var shift_argument = 0;

		if (!(str_id instanceof nexacro.Frame) && str_id != null) {
			this.id = id = arguments[0];
		}
		else {
			shift_argument = -1;
			id = this.id;
		}

		parent_frame = arguments[1 + shift_argument];
		this._arg = arguments[2 + shift_argument];
		if (arguments[3 + shift_argument]) {
			this.opener = arguments[3 + shift_argument];
		}
		lockmode = arguments[4 + shift_argument];

		lockmode = 1;



		if (parent_frame) {
			ret = parent_frame.addChild(id, this);
		}

		if (ret == -1) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
		}

		if (this && this._arg) {
			for (var param in this._arg) {
				this._addVariable(param, this._arg[param]);
			}
		}

		if (nexacro._registerPopupFrame(id, this) < 0) {
			throw nexacro.MakeNativeError(this, "native_exist_id", id);
		}

		if (this._init_formurl) {
			this.set_formurl(this._init_formurl);
		}

		this._is_window = true;
		this._window_type = 5;

		var left = this._adjust_left;
		var top = this._adjust_top;
		var width = this._adjust_width;
		var height = this._adjust_height;


		var win = _parent_frame._getWindow();
		if (win && !this._is_popup_frame) {
			left = win.getLeft();
			top = win.getTop();
		}

		var is_form_loaded = false;
		if (this.autosize && this.form && this.form._control_element) {
			width = this.form._init_width;
			height = this.form._init_height;
			is_form_loaded = true;
		}

		if (!is_form_loaded) {
			var after_align_pos = this._getOpenAlignPos(this._window, left, top, width, height);
			if (after_align_pos) {
				left = after_align_pos.left;
				top = after_align_pos.top;
			}
		}

		if (!this.opener || (this.opener && !this.opener._is_form && !this.opener._is_application)) {
			this.opener = parent_frame ? parent_frame.form : null;
		}

		if (this.form) {
			this.form.opener = this.opener;
		}

		var parent_window = parent_frame ? parent_frame._getWindow() : null;
		if (this.autosize && !is_form_loaded) {
			this._delayed_create_window = true;
			this._delayed_create_parent = parent_window;
		}

		this._window = new nexacro.Window(this.name, parent_window, false);
		this._window.attachFrame(this, false);

		if (this.form && this.form._load_manager.status >= 7) {
			this._loadedForm();
		}

		if (parent_window) {
			parent_window._cancelEvent();
		}

		return this._window.createModal(parent_window, this.id, width, height, left, top, this.resizable, this.layered, lockmode);
	};

	_pChildFrame._on_init = nexacro._emptyFn;
	_pChildFrame._on_load = function () {
		this.createComponent();
		this.on_created();
		this._change_state_activate(true);
	};

	_pChildFrame._showModeless = function (name, target_win) {
		nexacro._registerPopupFrame(name, this);

		this._is_popup_frame = true;
		this._is_window = true;
		this._window = target_win;
		this._window.frame = this;
		this._window_type = 2;

		this._load_manager.status = 2;

		var _cssurls = nexacro._getLocalStorage("_cssurls", []);
		var cnt = _cssurls.length;

		if (cnt == 0) {
			this._load_manager._is_mainloaded = true;
		}

		var _cssurl = nexacro._getLocalStorage("_theme_uri", "./_theme_/default") + "/theme.css";
		var _project_uri = nexacro._getLocalStorage("_project_uri", "");
		this.loadCss(_cssurl, _project_uri);

		if (cnt > 0) {
			this._load_manager._is_mainloaded = true;
		}

		for (var i = 0; i < cnt; i++) {
			_cssurl = _cssurls[i];
			this.loadCss(_cssurl, _project_uri);
		}

		nexacro._setOpenInfo(this, name);
	};

	_pChildFrame.hideModal = function () {
	};

	_pChildFrame.hideModeless = function () {
	};

	_pChildFrame.getForm = function () {
		return this.form ? this.form : null;
	};

	_pChildFrame.on_fire_sys_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onkeydown.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onkeyup.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onlbuttondown.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_loadform_failed && this.showtitlebar == false) {
			var owner_frame = this.getOwnerFrame();
			if (owner_frame) {
				owner_frame.removeChild(this.id);

				if (owner_frame._control_element) {
					owner_frame.on_change_containerRect(owner_frame._control_element.client_width, owner_frame._control_element.client_height);
				}
			}

			if (this._is_window && this._window && this._window._is_alive) {
				this._window.destroy();
			}
			else {
				this._destroy();
			}

			if (this._control_element) {
				this._control_element.destroy();
			}
			this._control_element = null;
		}

		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onrbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onrbuttondown.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onrbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onmousedown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onmousedown.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onmouseup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onmouseenter = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onmouseenter.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onmouseleave = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onmouseleave.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onmousemove.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window) {
			return true;
		}
		return ret;
	};

	_pChildFrame.on_fire_sys_onmousewheel = function (wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._window_type == 1 && !ctrl_key) {
			return true;
		}
		var ret = nexacro.Frame.prototype.on_fire_sys_onmousewheel.call(this, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		if (this._is_window && !ctrl_key) {
			return true;
		}
		return ret;
	};


	_pChildFrame._createForm = function () {
		var formurl = this.formurl;
		if (!formurl) {
			formurl = "";
		}
		var form = this.form;
		if (form) {
			if (form._url != this._formurl) {
				form._waitCursor(false, form);

				form.destroyComponent();
				form = new Form("form", "absolute", 0, 0, this._client_width, this._client_height, null, null, this);
				form._is_init = true;
				form.opener = this.opener;
				this.form = form;
				form.loadForm(formurl);
				if (this._control_element) {
					form.createComponent();
				}
			}
		}
		else {
			form = new Form("form", "absolute", 0, 0, this._client_width, this._client_height, null, null, this);
			form.opener = this.opener;
			this.form = form;
			if (this._formurl) {
				form.loadForm(formurl);
			}

			if (this._control_element) {
				form.createComponent();
			}
		}
		return form;
	};

	_pChildFrame._closeForm = function (arg) {
		if (this._is_window) {
			if (arg !== undefined) {
				this._close_argument = arg;
				this._window.returnValue = arg;
			}

			var all_obj = this.all;
			var all_idx = all_obj.length - 1;
			for (; all_idx >= 0; all_idx--) {
				var childid = all_obj.get_id(all_idx);
				var child = all_obj[all_idx];

				if (child._is_window && child._window && child._is_alive) {
					this.removeChild(childid);

					child._window.destroy();
					child._window = null;
				}
			}

			var ownerframe = this.getOwnerFrame();
			if (ownerframe) {
				ownerframe.removeChild(this.id);
			}

			if (this.form && this.form._is_alive) {
				this.form._destroy();
				this.form = null;
			}

			if (this._window && this._window._is_alive) {
				this._window.destroy();
				this._window = null;
			}
		}
		else {
			if (arg !== undefined) {
				this._close_argument = arg;
			}

			var ownerframe = this.getOwnerFrame();
			if (ownerframe) {
				ownerframe.removeChild(this.id);
			}

			if (this.form && this.form._is_alive) {
				this.form._destroy();
				this.form = null;
			}

			this._destroy();
		}
	};

	_pChildFrame._destroyForm = function () {
		if (this.form) {
			this.form._destroy();
			this.form = null;
		}
	};

	_pChildFrame._loadedForm = function () {
		this._last_focused = this.form;

		if (this._is_loadform_failed) {
			return;
		}

		this._applyDragMoveType();

		if (this.autosize) {
			var parent_window = this._delayed_create_parent;
			var left = this._left;
			var top = this._top;
			var width = this.form._init_width;
			var height = this.form._init_height;

			if (this._is_window && this._window_type == 2) {
				if (this._delayed_create_window) {
					var calculated_size = this._getAutosizedFrameSize(nexacro.Browser == "Runtime");
					width = calculated_size.width;
					height = calculated_size.height;

					var after_align_pos = this._getOpenAlignPos(parent_window, left, top, width, height);
					if (after_align_pos) {
						left = after_align_pos.left;
						top = after_align_pos.top;
					}

					this._move(this._adjust_left, this._adjust_top, width, height);

					var _window = this._window = new nexacro.Window(this.name, parent_window, false);
					_window.attachFrame(this, false);
					_window.create(parent_window, this.id, width, height, left, top, this.resizable, this.layered, this.showontaskbar);

					delete this._delayed_create_parent;
					delete this._delayed_create_window;
				}
				else {
					if (this._window) {
						var after_align_pos = this._getOpenAlignPos(this._window.parent, left, top, width, height);
						if (after_align_pos) {
							left = after_align_pos.left;
							top = after_align_pos.top;
						}

						var calculated_size = this._getAutosizedFrameSize(nexacro.Browser == "Runtime");
						width = calculated_size.width;
						height = calculated_size.height;

						this._move(left, top, width, height);

						var _adjust_width = width + this._window._gap_client_width;
						var _adjust_height = height + this._window._gap_client_height;

						if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
							function getWindowSize (win) {
								var win_handle = win._handle;
								var wW, wH;
								if (win_handle.outerWidth) {
									wW = win_handle.outerWidth;
									wH = win_handle.outerHeight;
								}
								else {
									win.setSize(_adjust_width, _adjust_height);
									var barsW = _adjust_width - nexacro._getWindowHandleOuterWidth(win_handle);
									var barsH = _adjust_height - nexacro._getWindowHandleOuterHeight(win_handle);

									wW = barsW + _adjust_width;
									wH = barsH + _adjust_height;
								}
								return {
									width : wW, 
									height : wH
								};
							}
							;

							var win_rect = getWindowSize(this._window);

							if (win_rect.width != _adjust_width || win_rect.height != _adjust_height) {
								this._window.setSize(win_rect.width, win_rect.height);
							}
						}
						else {
							this._window.setSize(_adjust_width, _adjust_height);
						}
					}
				}
			}
			else if (this._window_type == 5) {
				if (this._delayed_create_window) {
					var calculated_size = this._getAutosizedFrameSize(nexacro.Browser == "Runtime");
					width = calculated_size.width;
					height = calculated_size.height;

					var after_align_pos = this._getOpenAlignPos(parent_window, left, top, width, height);
					if (after_align_pos) {
						left = after_align_pos.left;
						top = after_align_pos.top;
					}

					if (this._window._handle) {
						this._window.moveTo(left, top);
						if (this._state_openstatus == 0) {
							this._window.setSize(width, height);
						}
						else {
							this._restore_position = {
								left : left, 
								top : top, 
								width : width, 
								height : height, 
								right : this.right, 
								bottom : this.bottom
							};
						}
					}
					else {
						this._delayed_window_pos = {
							left : left, 
							top : top, 
							width : width, 
							height : height
						};
					}

					delete this._delayed_create_parent;
					delete this._delayed_create_window;
				}
				else {
					if (this._window) {
						var after_align_pos = this._getOpenAlignPos(this._window.parent, left, top, width, height);
						if (after_align_pos) {
							left = after_align_pos.left;
							top = after_align_pos.top;
						}
						this._move(left, top, width, height);

						var _adjust_width = width + this._window._gap_client_width;
						var _adjust_height = height + this._window._gap_client_height;
						this._window.setSize(_adjust_width, _adjust_height);
					}
				}
			}
			else if (this._window_type == 1 || this._window_type == 4) {
				var calculated_size = this._getAutosizedFrameSize(true);
				width = calculated_size.width;
				height = calculated_size.height;

				var after_align_pos = this._getOpenAlignPos(this._getWindow(), left, top, width, height);
				if (after_align_pos && !isNaN(after_align_pos.left) && !isNaN(after_align_pos.top)) {
					left = after_align_pos.left;
					top = after_align_pos.top;
				}
				else {
					var recalculated_pos = this._recalcModalPosition(left, top, width, height);
					left = recalculated_pos.left;
					top = recalculated_pos.top;
				}
				this._move(left, top, width, height);
			}
		}
	};

	_pChildFrame._on_window_loaded = function () {
		this._checkValidWindowSize();

		if (!this._is_created) {
			this.createComponent();
			this.on_created();
			this._change_state_activate(true);
		}

		if (this._lockmode) {
			delete this._lockmode;
			this._lockmode = null;
		}
	};

	_pChildFrame._createdForm = function () {
		if (this._state_openstatus != 2) {
			var owner_frame = this.getOwnerFrame();
			if (owner_frame) {
				var proc_focus = false;

				if (owner_frame._is_frameset && owner_frame._getTopOrderFrame() == this) {
					proc_focus = true;
				}
				else if (!owner_frame._is_frameset && owner_frame._is_frame) {
					proc_focus = true;
				}

				if (proc_focus) {
					if (this._getWindow() == owner_frame._getWindow()) {
						this._change_state_activate(true);
					}

					if (nexacro._enableaccessibility && (nexacro._accessibilitywholereadtype == 1 || 
						nexacro._accessibilitywholereadtype == 3)) {
						this._setFocus();
						this.form._playAccessibilityWholeReadLabel("focus");
					}
					else {
						this.form._on_focus(true, "focus");
					}
				}
			}
			else {
				this._change_state_activate(true);

				if (nexacro._enableaccessibility && (nexacro._accessibilitywholereadtype == 1 || 
					nexacro._accessibilitywholereadtype == 3)) {
					this._setFocus();
					this.form._playAccessibilityWholeReadLabel("focus");
				}
				else {
					this.form._on_focus(true);
				}
			}
		}

		if (this._is_window && this.autosize != true) {
			this._checkValidWindowSize();
		}
	};

	_pChildFrame._applyDragMoveType = function () {
		var form = this.form;
		if (form) {
			var allow_dragform = false;
			if (this._dragmovetype == 2 || (this._dragmovetype == 1 && !this.showtitlebar)) {
				allow_dragform = true;
			}

			{

				form._setDragMove(allow_dragform, this._is_window);
			}
		}

		if (this.titlebar) {
			this.titlebar._setDragMove(this._dragmovetype != 0, this._is_window);
		}
	};


	_pChildFrame._getTitleText = function (brecursive) {
		var titletext;
		titletext = this.titletext;
		if (brecursive) {
			if (this.form && this.form.titletext.length > 0) {
				if (titletext.length > 0) {
					titletext += " - ";
				}
				titletext += this.form.titletext;
			}
		}
		return titletext;
	};
	_pChildFrame._getStatusText = function (brecursive) {
		var statustext;
		statustext = this.statustext;
		if (brecursive) {
			if (this.form && this.form.statustext.length > 0) {
				if (statustext.length > 0) {
					statustext += " - ";
				}
				statustext += this.form.statustext;
			}
		}
		return statustext;
	};
	_pChildFrame._getOpenAlignPos = function (parent_win, left, top, width, height) {
		if (!this.openalign._is_empty) {
			if (parent_win == null) {
				return;
			}

			var is_modal = (this._window_type == 1 || this._window_type == 4);
			var p_l = is_modal ? 0 : (parent_win.left | 0);
			var p_t = is_modal ? 0 : (parent_win.top | 0);
			var p_w = parent_win.clientWidth;
			var p_h = parent_win.frame ? parent_win.frame._adjust_height : parent_win.clientHeight;
			switch (this.openalign.halign) {
				case "left":
					left = p_l;
					break;
				case "center":
					left = p_l + Math.round((p_w - width) / 2);
					break;
				case "right":
					left = p_l + p_w - width;
					break;
			}
			switch (this.openalign.valign) {
				case "top":
					top = p_t;
					break;
				case "middle":
					top = p_t + Math.round((p_h - height) / 2);
					break;
				case "bottom":
					top = p_t + p_h - height;
					break;
			}

			return {
				left : left, 
				top : top
			};
		}

		return null;
	};

	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Gecko") {
		_pChildFrame._checkValidWindowSize = function () {
			var _window = this._window;
			if (!_window) {
				return;
			}

			var width = this._adjust_width;
			var height = this._adjust_height;
			if ((_window.clientWidth != width || _window.clientHeight != height) && (_window.clientWidth != 0 && _window.clientHeight != 0)) {
				if (this.autosize != true && this._control_element) {
					var control_elem = this._control_element;
					control_elem.setElementSize(width, height);
					control_elem.setElementSize(this._adjust_width, this._adjust_height);
					control_elem._updateClientSize();
				}

				this._move(this._adjust_left, this._adjust_top, _window.clientWidth, _window.clientHeight);

				if (this.autosize != true) {
					this.on_change_containerRect(this._adjust_width, this._adjust_height);
				}

				return false;
			}

			return true;
		};
	}
	else {
		_pChildFrame._checkValidWindowSize = nexacro._emptyFn;
	}
	;

	_pChildFrame._setModalLock = function () {
		var win = this._getWindow();
		if (!win) {
			win = nexacro._getMainWindowHandle() ? nexacro._getMainWindowHandle()._linked_window : null;
		}
		if (!win) {
			return;
		}

		win._on_modalLock();

		var cur_focus_path = win.getCurrentFocusPaths() ? win.getCurrentFocusPaths().slice(0) : null;

		win._removeFromCurrentFocusPath(null, false);

		var overlaycolor = this.on_find_CurrentStyle_overlaycolor(this._pseudo);

		var zindex = nexacro._zindex_firstmodal;
		var modal_stack = win._modal_frame_stack;
		if (modal_stack.length > 0) {
			var modal_info = modal_stack[modal_stack.length - 1];
			zindex = modal_info[1] + 1;
		}

		var parent = this.parent;
		if (!parent) {
			parent = application.mainframe;
		}

		var ref_dest_handle;
		if (win.frame && win.frame._waitcomp) {
			var waitcomp = win.frame._waitcomp;
			if (waitcomp._control_element && waitcomp._control_element._handle) {
				ref_dest_handle = waitcomp._control_element._handle;
			}
		}

		var modal_overlay_elem = this._modal_overlay_elem = new nexacro.ModalOverlayElement(parent._control_element);
		modal_overlay_elem.setLinkedControl(this);
		modal_overlay_elem.create(zindex, overlaycolor, ref_dest_handle);

		win._modal_frame_stack.push([this, zindex, cur_focus_path]);

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			if (this.opener) {
				var form = this.opener._getRootForm();
				form._setAccessibilityHidden(true);
			}
		}
	};

	_pChildFrame._setModalUnlock = function () {
		var win = this._getWindow();
		if (!win) {
			win = nexacro._getMainWindowHandle() ? nexacro._getMainWindowHandle()._linked_window : null;
		}
		if (!win) {
			return;
		}

		var modal_stack = win._modal_frame_stack;
		var modal_stack_len = modal_stack.length;
		var modal_info;
		for (var i = 0; i < modal_stack_len; i++) {
			modal_info = modal_stack[i];
			if (modal_info[0] == this) {
				for (var j = i; j < modal_stack_len - 1; j++) {
					modal_stack[j] = modal_stack[j + 1];
				}
				modal_stack.length = modal_stack_len - 1;
				break;
			}
		}

		if (this._window_type != 1 && this._window_type != 4) {
			nexacro._unregisterPopupFrame(this.id);
		}

		var old_focus_path = modal_info[2];
		if (old_focus_path && old_focus_path.length > 0) {
			var cur_focus_path = win.getCurrentFocusPaths();
			if (cur_focus_path && cur_focus_path.length > 0) {
				old_focus_path = cur_focus_path.slice(0);
				win.clearCurrentFocusPaths();
			}

			var old_focus_path_len = old_focus_path.length;
			for (i = 0; i < old_focus_path_len; i++) {
				var comp = old_focus_path[i];
				if (comp instanceof nexacro.ChildFrame) {
					comp._on_activate();
					continue;
				}
				else if (comp._is_form) {
					comp._on_focus(true);
					break;
				}

				if (i == (old_focus_path_len - 1)) {
					comp._on_focus(true);
				}
			}
		}

		if (this._modal_overlay_elem) {
			this._modal_overlay_elem.destroy();
			this._modal_overlay_elem = null;
		}

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			if (this.opener) {
				var form = this.opener._getRootForm();
				form._setAccessibilityHidden(false);
			}
		}
	};

	_pChildFrame._setModalOverlaySize = function (width, height) {
		this._modal_overlay_elem.setElementSize(width, height);

		if (this._state_openstatus == 3) {
			this._setSize(width, height);
		}
	};

	_pChildFrame._recalcModalPosition = function (left, top, width, height) {
		left = parseInt(left);
		top = parseInt(top);
		width = parseInt(width);
		height = parseInt(height);

		var win = this._getWindow();
		if (!win) {
			return {
				left : left, 
				top : top, 
				width : width, 
				height : height
			};
		}

		var titleheight = parseInt(this.on_find_CurrentStyle_titlebarheight().value) | 0;
		if (titleheight <= 0) {
			titleheight = this._defaultTitleHeight;
		}

		if (left + width > win.clientWidth) {
			left = win.clientWidth - width;
		}
		if (top + titleheight > win.clientHeight) {
			top = win.clientHeight - titleheight;
		}
		if (left < 0) {
			left = 0;
		}
		if (top < 0) {
			top = 0;
		}

		return {
			left : left, 
			top : top, 
			width : width, 
			height : height
		};
	};

	_pChildFrame._getAutosizedFrameSize = function (include_frame_nc) {
		var width = this._adjust_width;
		var height = this._adjust_height;

		var form = this.form;
		if (form && form._is_loading == false && (nexacro._isDesktop() || this._window_type != 2)) {
			width = form._init_width;
			height = form._init_height;
		}

		if (include_frame_nc) {
			var titleheight = 0, statusheight = 0;
			if (this.showtitlebar) {
				titleheight = parseInt(this.on_find_CurrentStyle_titlebarheight().value) | 0;
			}
			if (this.showstatusbar) {
				statusheight = parseInt(this.on_find_CurrentStyle_statusbarheight().value) | 0;
			}
			var border = this.on_find_CurrentStyle_border();
			if (border) {
				width += border._getBorderLeftWidth() + border._getBorderRightWidth();
				height += border._getBorderTopWidth() + border._getBorderBottomWidth();
			}
			height += titleheight + statusheight;
		}

		return {
			"width" : width, 
			"height" : height
		};
	};




	nexacro.FrameSetBase_Style = function (target) {
		nexacro.Frame_Style.call(this, target);
		this.childmoveeffect = null;
		this.childopenstatuseffect = null;
	};


	var _pFrameSetBaseStyle = nexacro._createPrototype(nexacro.Frame_Style, nexacro.FrameSetBase_Style);
	nexacro.FrameSetBase_Style.prototype = _pFrameSetBaseStyle;

	eval(nexacro._createValueAttributeEvalStr("_pFrameSetBaseStyle", "childmoveeffect"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameSetBaseStyle", "childopenstatuseffect"));

	_pFrameSetBaseStyle.__custom_emptyObject = function () {
		this.childmoveeffect = null;
		this.childopenstatuseffect = null;
	};

	_pFrameSetBaseStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.childmoveeffect && !this.childmoveeffect._is_empty) {
			val += "childmoveeffect:" + this.childmoveeffect._value + "; ";
		}
		if (this.childopenstatuseffect && !this.childopenstatuseffect._is_empty) {
			val += "childopenstatuseffect:" + this.childopenstatuseffect._value + "; ";
		}
		return val;
	};

	nexacro.FrameSetBase_CurrentStyle = function () {
		nexacro.Frame_CurrentStyle.call(this);
	};

	var _pFrameSetBaseCurrentStyle = nexacro._createPrototype(nexacro.Frame_CurrentStyle, nexacro.FrameSetBase_CurrentStyle);
	nexacro.FrameSetBase_CurrentStyle.prototype = _pFrameSetBaseCurrentStyle;

	_pFrameSetBaseCurrentStyle.__custom_emptyObject = _pFrameSetBaseStyle.__custom_emptyObject;
	_pFrameSetBaseCurrentStyle.__get_custom_style_value = _pFrameSetBaseStyle.__get_custom_style_value;

	delete _pFrameSetBaseStyle;
	delete _pFrameSetBaseCurrentStyle;

	nexacro.FrameSetBase = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Frame.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.frames = new nexacro.Collection();

		this.separatesize = "";
		this.keepseparatesizewhenswap = false;

		this.ctrltaborder = "active";
		this.ctrltabtype = "order";

		this.showstatusbar = false;
		this.showtitlebar = false;


		this._separatesize = [];
		this._max_frame = null;
		this._track_frame = null;
		this._active_frame = null;
		this._zorderMap = new nexacro.Collection();
		this._is_frameset = true;
		this._is_autorecalc_frame = true;
	};

	var _pFrameSetBase = nexacro._createPrototype(nexacro.Frame, nexacro.FrameSetBase);
	nexacro.FrameSetBase.prototype = _pFrameSetBase;

	_pFrameSetBase._type_name = "FrameSetBase";

	_pFrameSetBase.set_tabkeycirculation = nexacro._emptyFn;


	_pFrameSetBase.on_apply_custom_pseudo = function (pseudo) {
		nexacro.Frame.prototype.on_apply_custom_pseudo.call(this);

		var curstyle = this.currentstyle;

		var childmoveeffect = this.on_find_CurrentStyle_childmoveeffect(pseudo);
		if (childmoveeffect != curstyle.childmoveeffect) {
			curstyle.childmoveeffect = childmoveeffect;
		}

		var childopenstatuseffect = this.on_find_CurrentStyle_childopenstatuseffect(pseudo);
		if (childopenstatuseffect != curstyle.childopenstatuseffect) {
			curstyle.childopenstatuseffect = childopenstatuseffect;
		}
	};

	_pFrameSetBase.on_create_custom_style = function () {
		return new nexacro.FrameSetBase_Style(this);
	};

	_pFrameSetBase.on_create_custom_currentStyle = function () {
		return new nexacro.FrameSetBase_CurrentStyle();
	};

	_pFrameSetBase.on_find_CurrentStyle_childmoveeffect = function (pseudo) {
		return this._find_pseudo_obj("childmoveeffect", pseudo, "value");
	};

	_pFrameSetBase.on_find_CurrentStyle_childopenstatuseffect = function (pseudo) {
		return this._find_pseudo_obj("childopenstatuseffect", pseudo, "value");
	};

	_pFrameSetBase.on_create_contents = function () {
		nexacro.Frame.prototype.on_create_contents.call(this);

		var cnt = this.frames.length;
		for (var i = 0; i < cnt; i++) {
			var frame = this.frames[i];
			if (frame.set_resizable) {
				frame.set_resizable(true);
			}
			frame.createComponent();
			this._zorderMap.add_item(frame.name, frame);
		}
	};

	_pFrameSetBase.on_change_containerRect = function (width, height) {
		var control_elem = this._control_element;
		if (control_elem) {
			;
		}
	};

	_pFrameSetBase.on_created_contents = function () {
		nexacro.Frame.prototype.on_created_contents.call(this);

		var lastx = 0, lasty = 0;
		var defaultwidth = 0, defaultheight = 0;
		var control_elem = this._control_element;
		if (control_elem) {
			defaultwidth = control_elem.client_width / 5 * 3;
			defaultheight = control_elem.client_height / 5 * 3;

			lasty = this._control_element.client_top;
		}

		var cascadegap = this._getTitlebarHeight();
		var cnt = this.frames.length;
		for (var i = 0; i < cnt; i++) {
			var frame_item = this.frames[i];
			if (frame_item.position) {
				if (frame_item._adjsut_width == 0 && frame_item._adjsut_height == 0) {
					frame_item._move(lastx, lasty, defaultwidth, defaultheight);

					lastx += cascadegap;
					lasty += cascadegap;
				}
			}
			frame_item.on_created();
		}
	};

	_pFrameSetBase.on_destroy_contents = function () {
		nexacro.Frame.prototype.on_destroy_contents.call(this);

		var cnt = this.frames.length;
		for (var i = cnt - 1; i >= 0; i--) {
			var frame_item = this.frames[i];
			if (frame_item) {
				frame_item.destroyComponent();
				frame_item = null;
			}
		}
		this.frames = null;
	};

	_pFrameSetBase._updateClientSize = function (control_elem) {
		var client_left = control_elem.client_left;
		var client_top = control_elem.client_top;
		var client_width = control_elem.client_width;
		var client_height = control_elem.client_height;

		var apply_flag = false;
		if (this._client_left != client_left || this._client_top != client_top) {
			this._client_left = client_left;
			this._client_top = client_top;
			apply_flag = true;
		}
		if (this._client_width != client_width || this._client_height != client_height) {
			this._client_width = client_width;
			this._client_height = client_height;
			apply_flag = true;
		}

		if (apply_flag) {
			this.on_change_containerRect(client_width, client_height);
		}
	};


	_pFrameSetBase.set_ctrltaborder = function () {
		;
	};

	_pFrameSetBase.set_ctrltabtype = function () {
		;
	};

	_pFrameSetBase.set_separatesize = function (v) {
		if (this.separatesize != v) {
			this.separatesize = v;
			this._separatesize = v.split(",");

			var control_elem = this._control_element;
			if (control_elem) {
				this.on_change_containerRect(control_elem.client_width, control_elem.client_height);

				if ((nexacro.OS == "iOS" && !nexacro._isHybrid()) || (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge" || nexacro.Browser == "MobileSafari")) {
					this._refresh_input(this.frames);
				}
			}
		}
	};

	_pFrameSetBase.set_keepseparatesizewhenswap = function (v) {
		var keepseparatesizewhenswap = nexacro._toBoolean(v);
		if (this.keepseparatesizewhenswap != keepseparatesizewhenswap) {
			this.keepseparatesizewhenswap = keepseparatesizewhenswap;
		}
	};

	_pFrameSetBase.set_minimizedchildposition = function (v) {
		var pre = this.minimizedchildposition;
		if (pre == v) {
			return;
		}

		switch (v) {
			case "left":
				this._minimizedchildposition = 0;
				this.minimizedchildposition = v;
				break;
			case "top":
				this._minimizedchildposition = 1;
				this.minimizedchildposition = v;
				break;
			case "right":
				this._minimizedchildposition = 2;
				this.minimizedchildposition = v;
				break;
			case "bottom":
				this._minimizedchildposition = 3;
				this.minimizedchildposition = v;
				break;
		}

		var control_elem = this._control_element;
		if (this.minimizedchildposition == v && control_elem) {
			this.on_change_containerRect(control_elem.client_width, control_elem.client_height);
		}

		return this.minimizedchildposition;
	};


	_pFrameSetBase._on_child_movetrack = function (child, x, y, dragdata) {
		var checkx = (this._type_name == "VFrameSet") ? false : true;
		var checky = (this._type_name == "HFrameSet") ? false : true;
		var curx = child._adjust_left + (child._adjust_width / 2);
		var cury = child._adjust_top + (child._adjust_height / 2);
		var hitidx = -1;
		var frames = this.frames;
		for (var i = 0, n = frames.length; i < n; i++) {
			var frame = frames[i];
			if (frame == child) {
				continue;
			}

			if (frame._state_openstatus == 2) {
				continue;
			}

			if (checkx) {
				var loopleft = frame._adjust_left;
				var loopright = loopleft + frame._adjust_width;
				if (loopleft > curx) {
					continue;
				}

				if (loopright < curx) {
					continue;
				}
			}

			if (checky) {
				var looptop = frame._adjust_top;
				var loopbottom = looptop + frame._adjust_height;
				if (looptop > cury) {
					continue;
				}

				if (loopbottom < cury) {
					continue;
				}
			}

			hitidx = i;
			break;
		}

		if (hitidx != (-1)) {
			var frames = this.frames;
			var curidx = frames.indexOf(child.name);
			var hitchild = frames[hitidx];

			frames.remove_item(hitchild.name);
			frames.insert_item(curidx, hitchild.name, hitchild);

			frames.remove_item(child.name);
			frames.insert_item(hitidx, child.name, child);



			if (this._control_element) {
				this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
			}
		}
	};

	_pFrameSetBase._on_child_starttrack = function (child, x, y, dragdata) {
		if (child) {
			this._track_frame = child;
		}
	};

	_pFrameSetBase._on_child_endtrack = function (child, x, y, dragdata) {
		this._track_frame = null;

		if (this._control_element) {
			this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
		}
	};

	_pFrameSetBase._change_state_activate = function (cur, activated_child) {
		if (cur == true) {
			if (activated_child) {
				var cur_active = this.getActiveFrame();
				if (cur_active && cur_active != activated_child) {
					cur_active._change_state_activate(false, null);
				}

				this._active_frame = activated_child;
				if (activated_child._control_element) {
					if (this._zorderMap.indexOf(activated_child) < 0) {
						alert("zorder missed: " + activated_child.id);
						this._zorderMap.insert_item(0, activated_child, activated_child.id);
					}

					if (this._zorderMap.length > 1) {
						if (this._control_element) {
							this._control_element.bringToFrontElement(activated_child._control_element);
						}

						this._zorderMap.remove_item(activated_child.id);
						this._zorderMap.add_item(activated_child.id, activated_child);
					}

					if (this._max_frame && this._max_frame != activated_child) {
						activated_child._change_state_OpenStatus(3);
					}
				}
			}
		}
		else if (cur == false) {
			var frames = this.frames;
			var frames_len = frames.length;
			for (var i = 0; i < frames_len; i++) {
				var child = frames[i];
				if (child._isNested()) {
					child._change_state_activate(false);
				}
			}
		}

		nexacro.Frame.prototype._change_state_activate.call(this, cur);
	};

	_pFrameSetBase.on_apply_prop_enable = function (v) {
		var frames = this.frames;
		for (var i = 0, n = frames.length; i < n; i++) {
			var frame = frames[i];
			frame._setEnable(v);
		}
	};

	_pFrameSetBase.on_apply_prop_rtldirection = function () {
		var control_elem = this._control_element;

		if (control_elem) {
			this.on_change_containerRect(control_elem.client_width, control_elem.client_height);
		}

		var _rtldirection = this._rtldirection;

		var titlebar = this.titlebar;
		if (titlebar) {
			titlebar._setRtlDirection(_rtldirection);
		}
		var statusbar = this.statusbar;
		if (statusbar) {
			statusbar._setRtlDirection(_rtldirection);
		}

		var frames = this.frames;
		if (frames) {
			for (var i = 0, n = frames.length; i < n; i++) {
				var frame = frames[i];
				if (frame) {
					frame._setRtlDirection(_rtldirection);
				}
			}
		}
	};

	_pFrameSetBase.getActiveFrame = function () {
		if (this._active_frame) {
			return this._active_frame;
		}

		return this._getTopOrderFrame();
	};

	_pFrameSetBase.getHandle = function () {
	};


	_pFrameSetBase._getTopOrderFrame = function () {
		var len = this._zorderMap.length;
		if (len > 0) {
			var obj = this._zorderMap.get_item(len - 1);
			return obj;
		}

		return null;
	};

	_pFrameSetBase._getNextOrderFrame = function (target) {
		var len = this._zorderMap.length;
		if (len > 0) {
			var idx = this._zorderMap.indexOf(target.id);
			if (idx - 1 > len - 1 && idx - 1 < 0) {
				return null;
			}

			var obj = this._zorderMap.get_item(idx - 1);
			return obj;
		}
		return null;
	};

	_pFrameSetBase._visibleFrameCount = function () {
		return this.frames.length;
	};

	_pFrameSetBase._getMinimizeFrameCount = function () {
		var cnt = 0;
		var frames = this.frames;
		for (var i = 0, n = frames.length; i < frames.length; i++) {
			if (frames[i]._state_openstatus == 2) {
				cnt++;
			}
		}
		return cnt;
	};

	_pFrameSetBase._recalcSeparateFrameSize = function (totalsize, inframecnt, inseparatecnt) {
		var separateframesize = [];

		var separatesizecnt = ((inseparatecnt) ? inseparatecnt : this._separatesize.length);
		var framecnt = ((inframecnt) ? inframecnt : this._visibleFrameCount());

		var dividecnt = 0, fixedcnt = 0;
		var totalfixedsize = 0, dividesize = 0;

		var separatesize = this._separatesize;
		for (var i = 0; i < framecnt; i++) {
			var str = separatesize[i];
			var pos = -1;
			var size = -1;
			if (str) {
				str.trim();
				size = ((str.indexOf("*") < 0) && (str.length > 0)) ? nexacro._parseInt(str) : -1;
			}
			if (size == -1) {
				var ntimes = -1;
				if (str) {
					pos = str.indexOf("*");
					ntimes = nexacro._parseInt(str.substring(0, pos));
				}
				if (ntimes > 0) {
					dividecnt += ntimes;
					separateframesize[i] = ntimes * size;
				}
				else {
					dividecnt++;
					separateframesize[i] = size;
				}
			}
			else {
				fixedcnt++;
				totalfixedsize += size;
				if (totalfixedsize <= totalsize) {
					separateframesize[i] = size;
				}
				else if (fixedcnt == 1) {
					separateframesize[i] = totalsize;
				}
				else {
					totalfixedsize -= size;
				}
			}
		}

		dividesize = dividecnt > 0 ? (totalsize - totalfixedsize) / dividecnt : 0;

		for (var i = 0; i < framecnt; i++) {
			if (separateframesize[i] < 0) {
				separateframesize[i] = Math.abs(separateframesize[i]) * dividesize;
			}
			else if (separateframesize[i] == undefined) {
				separateframesize[i] = 0;
			}
		}

		return separateframesize;
	};

	_pFrameSetBase._getTitleText = function (brecursive) {
		var titletext;
		titletext = this.titletext;
		if (brecursive) {
			var activeframe = this.getActiveFrame();
			if (activeframe) {
				var subtitletext = activeframe._getTitleText(true);
				if (subtitletext.length > 0) {
					if (titletext.length > 0) {
						titletext += " - ";
					}
					titletext += subtitletext;
				}
			}
		}
		return titletext;
	};

	_pFrameSetBase._getStatusText = function (brecursive) {
		var statustext;
		statustext = this.statustext;
		if (brecursive) {
			var activeframe = this.getActiveFrame();
			if (activeframe) {
				var substatustext = activeframe._getStatusText(true);
				if (substatustext.length > 0) {
					if (statustext.length > 0) {
						statustext += " - ";
					}
					statustext += substatustext;
				}
			}
		}
		return statustext;
	};




	_pFrameSetBase._getFocusChildFrame = function (frame) {
		var _tabkeycirculation = this._tabkeycirculation;
		var _last_focused = this._last_focused;
		if (this._is_frameset && 
			this instanceof nexacro.FrameSet) {
			if (_tabkeycirculation == 2 || _tabkeycirculation == 3) {
				if (((_tabkeycirculation == 2 || _tabkeycirculation == 3) && this._arrange == 0) || (_tabkeycirculation == 2 && this._arrange != 0)) {
					if (_last_focused) {
						if (_last_focused._isFocusAcceptable()) {
							return _last_focused;
						}
						else {
							if (frame._isFocusAcceptable()) {
								return frame;
							}
						}
					}
					else {
						if (frame._isFocusAcceptable()) {
							return frame;
						}
					}
				}
				else if (_tabkeycirculation == 3) {
					if (frame._isFocusAcceptable()) {
						return frame;
					}
				}
			}
			else {
				if (_tabkeycirculation == 0 || (_tabkeycirculation == 1 && frame._state_openstatus != 2)) {
					if (frame._isFocusAcceptable()) {
						return frame;
					}
				}
			}
		}
		else if (frame._isFocusAcceptable()) {
			return frame;
		}

		return null;
	};

	_pFrameSetBase._getNextChildFrame = function (frames) {
		var skip_last_focused = false;
		var n = frames ? frames.length : 0;
		for (var i = 0; i < n; i++) {
			var frame_ = frames[i];
			if (frame_._is_frameset) {
				if (frame_._getNextChildFrame) {
					var ret = frame_._getNextChildFrame(frame_.frames);
					if (ret) {
						return ret;
					}
				}
			}
			else {
				if (frame_.parent._is_frameset) {
					var f = frame_.parent._getFocusChildFrame(frame_);
					if (f) {
						return f;
					}
					else {
						continue;
					}
				}
			}
		}

		return null;
	};

	_pFrameSetBase._getNextFrame_ = function (id, cycle) {
		var childframe_idx = -1;
		var frameset = null;
		var frameset_idx = -1;
		var frames = this.frames;
		var n = frames ? frames.length : 0;
		var frame = null;
		for (var i = 0; i < n; i++) {
			if (frames[i]._is_frameset) {
				if (id == frames[i].id) {
					frameset_idx = i;
				}
				else {
					if (frameset_idx != -1 && 
						frames[i]._isFocusAcceptable()) {
						frame = frames[i]._getNextChildFrame(frames[i].frames);
						break;
					}
				}
			}
			else if (frames[i] instanceof nexacro.ChildFrame) {
				var parent = frames[i].parent;
				if (childframe_idx == -1 && frames[i]._isFocusAcceptable()) {
					childframe_idx = i;
					frame = this._getFocusChildFrame(frames[i]);
				}
				else {
					continue;
				}
			}
		}

		if (this.parent._is_frameset) {
			return this.parent._getNextFrame_(this.parent.id, cycle);
		}
		else {
			if (cycle) {
				if (frame) {
					return frame;
				}
			}
			else {
				return null;
			}
		}

		return null;
	};
	_pFrameSetBase._getPrevChildFrame = function (frames) {
		var _frames = frames ? frames : null;
		if (_frames) {
			var n = _frames.length;
			for (var i = n - 1; i >= 0; i--) {
				var frame_ = _frames[i];
				if (frame_._getPrevChildFrame) {
					var ret = frame_._getPrevChildFrame(frame_.frames);
					if (ret) {
						return ret;
					}
				}
				else {
					if (frame_.parent._is_frameset) {
						var f = frame_.parent._getFocusChildFrame(frame_);
						if (f) {
							return f;
						}
						else {
							continue;
						}
					}
				}
			}
		}
		return null;
	};

	_pFrameSetBase._getPrevFrame_ = function (id, cycle) {
		var childframe_idx = -1;
		var frameset = null;
		var frameset_idx = -1;
		var frames = this.frames;
		var n = frames ? frames.length : 0;
		var frame = null;
		for (var i = n - 1; i >= 0; i--) {
			if (frames[i]._is_frameset) {
				if (id == frames[i].id) {
					frameset_idx = i;
				}
				else {
					if (frameset_idx != -1 && 
						frames[i]._isFocusAcceptable()) {
						frame = frames[i]._getPrevChildFrame(frames[i].frames);
						break;
					}
				}
			}
			else if (frames[i] instanceof nexacro.ChildFrame) {
				var parent = frames[i].parent;
				if (childframe_idx == -1 && frames[i]._isFocusAcceptable()) {
					childframe_idx = i;
					frame = this._getFocusChildFrame(frames[i]);
				}
				else {
					continue;
				}
			}
		}

		if (childframe_idx != -1 && childframe_idx < frameset_idx) {
			{

				if (frame) {
					return frame;
				}
			}
		}
		else {
			if (this.parent._is_frameset) {
				return this.parent._getPrevFrame_(this.parent.id, cycle);
			}
		}

		return null;
	};
	_pFrameSetBase._refresh_input = function (frames) {
		for (var i = 0; i < frames.length; i++) {
			var frame = frames[i];
			if (frame) {
				if (frame instanceof nexacro.ChildFrame) {
					var form = frame.form;
					if (form) {
						form._refresh_input_comp(form._child_list);
					}
				}
				else if (frame instanceof nexacro.FrameSet) {
					this._refresh_input(frame.frames);
				}
			}
		}
	};
	delete _pFrameSetBase;

	nexacro.FrameSet_Style = function (target) {
		nexacro.FrameSetBase_Style.call(this, target);
	};

	var _pFrameSetStyle = nexacro._createPrototype(nexacro.FrameSetBase_Style, nexacro.FrameSet_Style);
	nexacro.FrameSet_Style.prototype = _pFrameSetStyle;

	eval(nexacro._createValueAttributeEvalStr("_pFrameSetStyle", "minimizewidth"));
	eval(nexacro._createValueAttributeEvalStr("_pFrameSetStyle", "minimizeheight"));

	_pFrameSetStyle.__custom_emptyObject = function () {
		this.minimizewidth = null;
		this.minimizeheight = null;
	};

	_pFrameSetStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.minimizewidth && !this.minimizewidth._is_empty) {
			val += "minimizewidth:" + this.minimizewidth._value + "; ";
		}
		if (this.minimizeheight && !this.minimizeheight._is_empty) {
			val += "minimizeheight:" + this.minimizeheight._value + "; ";
		}
		return val;
	};

	nexacro.FrameSet_CurrentStyle = function () {
		nexacro.FrameSetBase_CurrentStyle.call(this);
	};

	var _pFrameSetCurrentStyle = nexacro._createPrototype(nexacro.FrameSetBase_CurrentStyle, nexacro.FrameSet_CurrentStyle);
	nexacro.FrameSet_CurrentStyle.prototype = _pFrameSetCurrentStyle;

	_pFrameSetCurrentStyle.__custom_emptyObject = _pFrameSetStyle.__custom_emptyObject;
	_pFrameSetCurrentStyle.__get_custom_style_value = _pFrameSetStyle.__get_custom_style_value;

	delete _pFrameSetStyle;
	delete _pFrameSetCurrentStyle;

	nexacro.FrameSet = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FrameSetBase.call(this, id, position, left, top, width, height, right, bottom, parent);
		this.separatesize = "";
		this.keepseparatesizewhenswap = false;
		this.childmoveeffect = null;
		this.childopenstatuseffect = null;

		this.ctrltaborder = 0;
		this.ctrltabtype = 0;
		this.minimizedchildposition = "bottom";
		this.tabkeycirculation = "all";
		this._tabkeycirculation = 0;

		this._separatesize = [];
		this._minimizedchildposition = 3;
		this._is_autorecalc_frame = false;
		this._arrange = 0;
	};

	var _pFrameSet = nexacro._createPrototype(nexacro.FrameSetBase, nexacro.FrameSet);
	nexacro.FrameSet.prototype = _pFrameSet;

	_pFrameSet._type_name = "FrameSet";



	_pFrameSet.on_apply_custom_pseudo = function (pseudo) {
		nexacro.Frame.prototype.on_apply_custom_pseudo.call(this);

		var curstyle = this.currentstyle;

		var minimizewidth = this.on_find_CurrentStyle_minimizewidth(pseudo);
		var apply_flag = false;
		if (minimizewidth != curstyle.minimizewidth) {
			curstyle.minimizewidth = minimizewidth;
			apply_flag = true;
		}

		var minimizeheight = this.on_find_CurrentStyle_minimizeheight(pseudo);
		if (minimizeheight != curstyle.minimizeheight) {
			curstyle.minimizeheight = minimizeheight;
			apply_flag = true;
		}

		if (apply_flag) {
			this.on_change_containerRect(this._client_width, this._client_height);
		}
	};

	_pFrameSet.on_create_custom_style = function () {
		return new nexacro.FrameSet_Style(this);
	};

	_pFrameSet.on_create_custom_currentStyle = function () {
		return new nexacro.FrameSet_CurrentStyle();
	};

	_pFrameSet.on_find_CurrentStyle_minimizewidth = function (pseudo) {
		return this._find_pseudo_obj("minimizewidth", pseudo, "value");
	};

	_pFrameSet.on_find_CurrentStyle_minimizeheight = function (pseudo) {
		return this._find_pseudo_obj("minimizeheight", pseudo, "value");
	};

	_pFrameSet.on_apply_style_minimizewidth = function () {
	};

	_pFrameSet.on_apply_style_minimizeheight = function () {
	};


	_pFrameSet.on_change_containerRect = function (width, height) {
		var control_elem = this._control_element;
		if (control_elem) {
			var frameleft = 0;
			var frametop = 0;
			var framewidth = control_elem.client_width;
			var frameheight = control_elem.client_height;
			var frameright = frameleft + control_elem.client_width;
			var framebottom = frametop + control_elem.client_height;

			if (this._max_frame) {
				this._max_frame._move(frameleft, frametop, framewidth, frameheight);
			}

			var frames = this.frames;
			for (var i = 0, n = frames.length; i < n; i++) {
				var child = frames[i];
				if (child == this._max_frame) {
					continue;
				}

				if (child._state_openstatus == 2) {
					child._setVerticalMin(false);

					var minwidth = 25 * 5;

					var minheight = -1;
					if (minheight == (-1)) {
						var titleheight = child.on_find_CurrentStyle_titlebarheight();
						minheight = parseInt(titleheight.value) | 0;

						var borderval = child.on_find_CurrentStyle_border();
						if (borderval) {
							minheight += borderval._getBorderTopWidth();
							minheight += borderval._getBorderBottomWidth();
						}
					}

					switch (this._minimizedchildposition) {
						case 0:
							framebottom = frametop + minheight;
							child._move(frameleft, frametop, minwidth, minheight);
							frametop = framebottom;
							break;
						case 1:
							frameright = frameleft + minwidth;
							child._move(frameleft, frametop, minwidth, minheight);
							frameleft = frameright;
							break;
						case 2:
							framebottom = frametop + minheight;
							child._move(frameright - minwidth, frametop, minwidth, minheight);
							frametop = framebottom;
							break;
						case 3:
							frameright = frameleft + minwidth;
							child._move(frameleft, framebottom - minheight, minwidth, minheight);
							frameleft = frameright;
							break;
					}
				}
			}
		}
	};



	_pFrameSet.set_minimizewidth = function () {
		;
	};

	_pFrameSet.set_minimizeheight = function () {
		;
	};

	_pFrameSet.set_tabkeycirculation = function (v) {
		this.tabkeycirculation = v;
		switch (v) {
			case "all,no_minimize":
				this._tabkeycirculation = 1;
				break;
			case "active_only":
				this._tabkeycirculation = 2;
				break;
			case "auto":
				this._tabkeycirculation = 3;
				break;
			default:
				this._tabkeycirculation = 0;
				this.tabkeycirculation = "all";
				break;
		}
	};


	_pFrameSet.arrange = function (v) {
		if (this._max_frame) {
			this._max_frame.on_syscommand(this._max_frame._control_element, "restore", true, this._max_frame, null);
		}

		var arrangecnt = 0;
		var frames = this.frames;
		for (var i = 0, n = frames.length; i < n; i++) {
			var child = this._zorderMap[i];
			if (child.visible == false || child._state_openstatus == 2) {
				continue;
			}
			arrangecnt++;
		}

		var frameleft = 0;
		var frametop = 0;
		var framewidth = this._client_width;
		var frameheight = this._client_height;
		if (v == "cascade") {
			this._arrange = 0;
			var cascadecnt = 0;
			for (var temp = 100; ; cascadecnt++) {
				if (this._client_height < temp) {
					break;
				}
				temp += (60 + (cascadecnt * 10));
			}

			var cascadegapx = this._getTitlebarHeight() > 0 ? this._getTitlebarHeight() : 20;
			var cascadegapy = cascadegapx;
			framewidth = this._client_width - (cascadegapx * cascadecnt);
			frameheight = this._client_height - (cascadegapy * cascadecnt);
			for (var i = 0, j = 0, n = frames.length; i < n; i++) {
				var child = this._zorderMap[i];
				if (child.visible == false || child._state_openstatus == 2) {
					continue;
				}

				frameleft = cascadegapx * (j % (cascadecnt + 1));
				frametop = cascadegapy * (j % (cascadecnt + 1));

				child._move(frameleft, frametop, framewidth, frameheight);

				j++;
			}
		}
		if (v == "tilevertical") {
			this._arrange = 1;
			var fixed = true;
			var rowcnt = parseInt(Math.sqrt(arrangecnt)) | 0;
			var colcnt = parseInt(arrangecnt / rowcnt) | 0;

			if ((arrangecnt % rowcnt) != 0) {
				rowcnt += 1;
				fixed = false;
			}

			var left = arrangecnt;
			for (var col = 0, i = 0; col < colcnt; col++) {
				for (var row = 0; row < rowcnt; ) {
					var child = this._zorderMap[i];
					if (child.visible == false || child._state_openstatus == 2) {
						i++;
						continue;
					}

					var rc = {
						left : frameleft, 
						top : frametop, 
						right : frameleft + framewidth, 
						bottom : frametop + frameheight
					};
					rc.right = rc.left + ((rc.right - rc.left) / colcnt);
					rc.bottom = rc.top + ((rc.bottom - rc.top) / rowcnt);

					var width = rc.right - rc.left;
					var height = rc.bottom - rc.top;
					rc.left += (colcnt - col - 1) * width;
					rc.top += (rowcnt - row - 1) * height;
					rc.right += (colcnt - col - 1) * width;
					rc.bottom += (rowcnt - row - 1) * height;

					child._move(rc.left, rc.top, rc.right - rc.left, rc.bottom - rc.top);
					row++, i++, left--;
				}

				if (!fixed && rowcnt > 2 && (left % (rowcnt - 1)) == 0) {
					rowcnt--;
					fixed = true;
				}
			}
		}
		if (v == "tilehorizontal") {
			this._arrange = 2;
			var fixed = true;
			var colcnt = parseInt(Math.sqrt(arrangecnt)) | 0;
			var rowcnt = parseInt(arrangecnt / colcnt) | 0;

			if ((arrangecnt % colcnt) != 0) {
				rowcnt += 1;
				fixed = false;
			}

			var left = arrangecnt;
			for (var col = 0, i = 0; col < colcnt; col++) {
				for (var row = 0; row < rowcnt; ) {
					var child = this._zorderMap[i++];
					if (child.visible == false || child._state_openstatus == 2) {
						continue;
					}

					var rc = {
						left : frameleft, 
						top : frametop, 
						right : frameleft + framewidth, 
						bottom : frametop + frameheight
					};
					rc.right = rc.left + ((rc.right - rc.left) / colcnt);
					rc.bottom = rc.top + ((rc.bottom - rc.top) / rowcnt);

					var width = rc.right - rc.left;
					var height = rc.bottom - rc.top;
					rc.left += (colcnt - col - 1) * width;
					rc.top += (rowcnt - row - 1) * height;
					rc.right += (colcnt - col - 1) * width;
					rc.bottom += (rowcnt - row - 1) * height;

					child._move(rc.left, rc.top, rc.right - rc.left, rc.bottom - rc.top);
					row++, left--;
				}

				if (!fixed && rowcnt > 2 && (left % (rowcnt - 1)) == 0) {
					rowcnt--;
					fixed = true;
				}
			}
		}
		if (v == "vertical") {
			this._arrange = 3;
			for (var i = 0, j = 0, n = frames.length; i < n; i++) {
				var child = this._zorderMap[i];
				if (child.visible == false || child._state_openstatus == 2) {
					continue;
				}

				child._move(frameleft + (j * (framewidth / arrangecnt)), frametop, (framewidth / arrangecnt), frameheight);
				j++;
			}
		}
		if (v == "horizontal") {
			this._arrange = 4;
			var top = frametop;
			for (var i = 0, n = frames.length; i < n; i++) {
				var child = this._zorderMap[i];
				if (child.visible == false || child._state_openstatus == 2) {
					continue;
				}

				var rc = {
					left : frameleft, 
					top : frametop, 
					right : frameleft + framewidth, 
					bottom : frametop + frameheight
				};
				rc.top = top;
				rc.bottom = rc.top + (frameheight / arrangecnt);

				var minx = 0, miny = 0;

				if (rc.bottom - rc.top < miny) {
					rc.bottom = rc.top + miny;
				}

				top = rc.bottom + 1;
				child._move(frameleft, rc.top, framewidth, rc.bottom - rc.top);
			}
		}
	};

	delete _pFrameSet;

	nexacro.VFrameSet = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FrameSetBase.call(this, id, position, left, top, width, height, right, bottom, parent);
	};
	var _pVFrameSet = nexacro._createPrototype(nexacro.FrameSetBase, nexacro.VFrameSet);
	nexacro.VFrameSet.prototype = _pVFrameSet;

	_pVFrameSet._type_name = "VFrameSet";

	_pVFrameSet.on_change_containerRect = function (width, height) {
		nexacro.Frame.prototype.on_change_containerRect.call(this, width, height);

		var control_elem = this._control_element;
		if (control_elem) {
			var framesize = this._recalcSeparateFrameSize(height);
			var cnt = this.frames.length;
			var frameleft = 0;
			var frametop = 0;
			var framebottom = 0;
			var frameright = frameleft + width;

			var maxframeheight = this._client_height;
			if (this._max_frame) {
				var maxidx = -1;
				var minheight = 0;
				for (var i = 0; i < cnt; i++) {
					var child = this.frames[i];
					if (child == this._max_frame) {
						maxidx = i;
						continue;
					}
					var titleheight = child.on_find_CurrentStyle_titlebarheight();
					minheight = parseInt(titleheight.value) | 0;

					var borderval = child.on_find_CurrentStyle_border();
					if (borderval) {
						minheight += borderval._getBorderTopWidth();
						minheight += borderval._getBorderBottomWidth();
					}

					maxframeheight -= minheight;
					framesize[i] = minheight;
				}

				framesize[maxidx] = maxframeheight;
			}

			var preframe_minimized = false;
			var gap = 0;
			for (var i = 0; i < cnt; i++) {
				var child = this.frames[i];

				if (preframe_minimized) {
					frametop = framebottom;
					preframe_minimized = false;
				}

				if (child._state_openstatus == 2) {
					child._setVerticalMin(false);

					var minheight = 0;
					var titleheight = child.on_find_CurrentStyle_titlebarheight();
					minheight = parseInt(titleheight.value) | 0;

					var borderval = child.on_find_CurrentStyle_border();
					if (borderval) {
						minheight += borderval._getBorderTopWidth();
						minheight += borderval._getBorderBottomWidth();
					}

					gap += framesize[i] - minheight;
					framesize[i] = minheight;
					preframe_minimized = true;
				}

				if (child._state_openstatus != 2) {
					framesize[i] += gap;
					gap = 0;
				}

				framebottom = framesize[i] + frametop;
				if (child != this._track_frame) {
					child._move(frameleft, frametop, frameright - frameleft, framebottom - frametop);
				}
				frametop = framebottom;
			}
		}
	};

	_pVFrameSet.arrange = nexacro._emptyFn;

	_pVFrameSet.set_minimizedchildposition = nexacro._emptyFn;

	delete _pVFrameSet;

	nexacro.HFrameSet = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FrameSetBase.call(this, id, position, left, top, width, height, right, bottom, parent);
	};
	var _pHFrameSet = nexacro._createPrototype(nexacro.FrameSetBase, nexacro.HFrameSet);
	nexacro.HFrameSet.prototype = _pHFrameSet;

	_pHFrameSet._type_name = "HFrameSet";

	_pHFrameSet.on_change_containerRect = function (width, height) {
		nexacro.Frame.prototype.on_change_containerRect.call(this, width, height);

		var control_elem = this._control_element;
		if (control_elem) {
			var framesize = this._recalcSeparateFrameSize(width);
			var cnt = this.frames.length;
			var frameleft = 0;
			var frametop = 0;
			var frameright = 0;
			var framebottom = frametop + height;

			var maxframewidth = this._client_width;
			if (this._max_frame) {
				var maxidx = -1;
				var minwidth = 0;
				for (var i = 0; i < cnt; i++) {
					var child = this.frames[i];
					if (child == this._max_frame) {
						maxidx = i;
						continue;
					}
					var titleheight = child.on_find_CurrentStyle_titlebarheight();
					minwidth = parseInt(titleheight.value) | 0;

					var borderval = child.on_find_CurrentStyle_border();
					if (borderval) {
						minwidth += borderval._getBorderLeftWidth();
						minwidth += borderval._getBorderRightWidth();
					}

					maxframewidth -= minwidth;
					framesize[i] = minwidth;
				}

				framesize[maxidx] = maxframewidth;
			}

			var preframe_minimized = false;
			var gap = 0;
			for (var i = 0; i < cnt; i++) {
				var child = this.frames[i];

				if (preframe_minimized) {
					frameleft = frameright;
					preframe_minimized = false;
				}

				if (child._state_openstatus == 2) {
					child._setVerticalMin(true);

					var minwidth = 0;
					var titleheight = child.on_find_CurrentStyle_titlebarheight();
					minwidth = parseInt(titleheight.value) | 0;

					var borderval = child.on_find_CurrentStyle_border();
					if (borderval) {
						minwidth += borderval._getBorderLeftWidth();
						minwidth += borderval._getBorderRightWidth();
					}

					gap += framesize[i] - minwidth;
					framesize[i] = minwidth;
					preframe_minimized = true;
				}

				if (child._state_openstatus != 2) {
					if (this._max_frame && child != this._max_frame) {
						child._setVerticalMin(true);
					}
					else {
						child._setVerticalMin(false);
					}

					framesize[i] += gap;
					gap = 0;
				}

				frameright = framesize[i] + frameleft;
				if (child != this._track_frame) {
					child._move(frameleft, frametop, frameright - frameleft, framebottom - frametop);
				}
				frameleft = frameright;
			}
		}
	};

	_pHFrameSet.arrange = nexacro._emptyFn;

	_pHFrameSet.set_minimizedchildposition = nexacro._emptyFn;

	delete _pHFrameSet;

	nexacro.TileFrameSet = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FrameSetBase.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.separatetype = "horizontal";
		this.separatecount = 1;
		this.fullframemaximize = true;
		this.minimizedchildposition = "bottom";


		this._separatetype = 0;
		this._minimizedchildposition = 3;
	};
	var _pTileFrameSet = nexacro._createPrototype(nexacro.FrameSetBase, nexacro.TileFrameSet);
	nexacro.TileFrameSet.prototype = _pTileFrameSet;

	_pTileFrameSet._type_name = "TileFrameSet";

	_pTileFrameSet.on_change_containerRect = function (width, height) {
		nexacro.Frame.prototype.on_change_containerRect.call(this, width, height);

		var control_elem = this._control_element;
		if (control_elem) {
			var framecnt = this.frames.length;

			var fullframewidth = control_elem.client_width;
			var fullframeheight = control_elem.client_height;

			if (this.fullframemaximize == false) {
				if (this._max_frame) {
					for (var i = 0, n = this.frames.length; i < n; i++) {
						if (this._max_frame != this.frames[i] && this.frames[i]._state_openstatus != 2) {
							this.frames[i].openstatus = "minimize";
							this.frames[i]._change_state_OpenStatus(2);
						}
					}
				}
				else {
					for (var i = 0, n = this.frames.length; i < n; i++) {
						if (this.frames[i]._state_openstatus == 2) {
							this.frames[i].openstatus = "normal";
							this.frames[i]._change_state_OpenStatus(0);
						}
					}
				}
			}

			var minimizeframecnt = this._getMinimizeFrameCount();
			var normalframecnt = (framecnt - minimizeframecnt) > 0 ? framecnt - minimizeframecnt : 1;
			var separatecnt = this.separatecount > 0 ? this.separatecount : 1;
			var framerowcnt = parseInt(normalframecnt / separatecnt) + (parseInt(normalframecnt % separatecnt) > 0 ? 1 : 0);

			var horzminarea = false;
			if (this._minimizedchildposition == 1 || this._minimizedchildposition == 3) {
				horzminarea = true;
			}

			var minareawidth = 0, minareaheight = 0;
			if (horzminarea) {
				minareawidth = width;
				if (minimizeframecnt > 0) {
					minareaheight = this._getMaxMinimizedHeight();
					if (minareaheight == (-1)) {
						minareaheight = 25;
					}
				}
			}
			else {
				minareaheight = height;
				if (minimizeframecnt > 0) {
					minareawidth = this._getMaxMinimizedWidth();
					if (minareawidth == (-1)) {
						minareawidth = 150;
					}
				}
			}

			var displayframewidth = 0, displayframeheight = 0;
			if (this._separatetype == 1) {
				displayframewidth = (width - (horzminarea ? 0 : minareawidth)) / framerowcnt;
				displayframeheight = height - (horzminarea ? minareaheight : 0);
			}
			else {
				displayframewidth = width - (horzminarea ? 0 : minareawidth);
				displayframeheight = (height - (horzminarea ? minareaheight : 0)) / framerowcnt;
			}

			var newcnt = framecnt - separatecnt > 0 ? separatecnt : framecnt;
			var realcolcnt = normalframecnt - separatecnt > 0 ? separatecnt : normalframecnt;

			var realtotalsize = 0;
			if (this._separatetype == 1) {
				realtotalsize = height;
				if (horzminarea) {
					realtotalsize -= minareaheight;
				}
			}
			else {
				realtotalsize = width;
				if (!horzminarea) {
					realtotalsize -= minareawidth;
				}
			}

			var framesize = this._recalcSeparateFrameSize(realtotalsize, realcolcnt, realcolcnt);
			var frameleft = 0;
			var frametop = 0;
			var frameright = frameleft + width;
			var framebottom = frametop + height;
			if (minimizeframecnt > 0) {
				switch (this._minimizedchildposition) {
					case 0:
						frameleft += minareawidth;
						break;
					case 1:
						frametop += minareaheight;
						break;
					case 2:
						frameright -= minareawidth;
						break;
					case 3:
						framebottom -= minareaheight;
						break;
				}
			}

			if (this._separatetype == 1) {
				frameright = frameleft + displayframewidth;
			}
			else {
				framebottom = frametop + displayframeheight;
			}

			if (this._max_frame) {
				if (this.fullframemaximize) {
					this._max_frame._move(0, 0, fullframewidth, fullframeheight);
				}
				else {
					this._max_frame._move(frameleft, frametop, frameright - frameleft, framebottom - frametop);
				}

				if (this._control_element && this._max_frame._control_element) {
					this._control_element.bringToFrontElement(this._max_frame._control_element);
				}
			}
			else if (this.fullframemaximize == false) {
				var frames = this.frames;
				for (var i = 0, n = frames.length; i < n; i++) {
					if (frames[i]._state_openstatus == 2) {
						frames[i]._change_state_OpenStatus(1);
					}
				}
			}

			var i = 0, j = 0, k = 0;
			for (i = 0; i < framerowcnt; i++) {
				for (j = 0; j < realcolcnt && k < framecnt; k++) {
					var child = this.frames[k];
					if (child == this._max_frame) {
						continue;
					}

					if (child._state_openstatus == 2) {
						continue;
					}

					if (this._separatetype == 1) {
						framebottom = framesize[j] + frametop;
					}
					else {
						frameright = framesize[j] + frameleft;
					}

					if (child != this._track_frame) {
						child._move(frameleft, frametop, frameright - frameleft, framebottom - frametop);
					}

					if (this._separatetype == 1) {
						frametop = framebottom;
					}
					else {
						frameleft = frameright;
					}

					j++;
				}

				if (this._separatetype == 1) {
					frametop = 0;
					frameleft = frameright;
					frameright = frameleft + displayframewidth;

					if (this._minimizedchildposition == 1) {
						frametop += minareaheight;
					}
				}
				else {
					frameleft = 0;
					frametop = framebottom;
					framebottom = frametop + displayframeheight;

					if (this._minimizedchildposition == 0) {
						frameleft += minareawidth;
					}
				}
			}

			if (minimizeframecnt <= 0) {
				return;
			}

			var minframeleft = 0;
			var minframetop = 0;
			var minframeright = minframeleft + this._client_width;
			var minframebottom = minframetop + this._client_height;
			switch (this._minimizedchildposition) {
				case 0:
					minframeright = minframeleft + minareawidth;
					break;
				case 1:
					minframebottom = minframetop + minareaheight;
					break;
				case 2:
					minframeleft = minframeright - minareawidth;
					break;
				case 3:
					minframetop = minframebottom - minareaheight;
					break;
			}


			var defaultminwidth = 150;
			var minwidth = width - (minimizeframecnt * defaultminwidth);
			minwidth = minwidth > 0 ? defaultminwidth : (width / minimizeframecnt);
			minwidth = minwidth < 100 ? 100 : minwidth;

			for (i = 0; i < framecnt; i++) {
				var child = this.frames[i];
				if (child._state_openstatus == 2) {
					child._setVerticalMin(false);

					var minheight = -1;
					if (minheight == (-1)) {
						var titleheight = child.on_find_CurrentStyle_titlebarheight();
						minheight = parseInt(titleheight.value) | 0;

						var borderval = child.on_find_CurrentStyle_border();
						if (borderval) {
							minheight += borderval._getBorderTopWidth();
							minheight += borderval._getBorderBottomWidth();
						}
					}

					switch (this._minimizedchildposition) {
						case 0:
							minframebottom = minframetop + minheight;
							child._move(minframeleft, minframetop, minframeright - minframeleft, minheight);
							minframetop = minframebottom;
							break;
						case 1:
							minframeright = minframeleft + minwidth;
							child._move(minframeleft, minframetop, minwidth, minframebottom - minframeleft);
							minframeleft = minframeright;
							break;
						case 2:
							minframebottom = minframetop + minheight;
							child._move(minframeleft, minframetop, minframeright - minframeleft, minheight);
							minframetop = minframebottom;
							break;
						case 3:
							minframeright = minframeleft + minwidth;
							child._move(minframeleft, minframetop, minwidth, minframebottom - minframetop);
							minframeleft = minframeright;
							break;
					}
				}
			}
		}
	};

	_pTileFrameSet.set_separatetype = function (v) {
		if (this.separatetype != v) {
			this.separatetype = v;
			this._separatetype = (v == "vertical" ? 1 : 0);

			if (this._control_element) {
				this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
			}
		}
	};

	_pTileFrameSet.set_separatecount = function (v) {
		var separatecount = nexacro._parseInt(v);
		if (this.separatecount != separatecount) {
			if (separatecount < 0) {
				this.separatecount = 1;
			}
			else {
				this.separatecount = separatecount;
			}

			if (this._control_element) {
				this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
			}
		}
	};

	_pTileFrameSet.set_fullframemaximize = function (v) {
		var fullframemaximize = nexacro._toBoolean(v);
		if (this.fullframemaximize != fullframemaximize) {
			this.fullframemaximize = fullframemaximize;
			var frames = this.frames;
			for (var i = 0, n = frames.length; i < n; i++) {
				var child = frames[i];
				if (child.titlebar) {
					if (fullframemaximize == false) {
						child.titlebar._setAbsoluteStyle(0x0001, 0);
					}
					else {
						child.titlebar._setAbsoluteStyle(0x0100, 0x0001);
						child.titlebar._setAbsoluteStyle(0, 0x0100);
					}
				}
			}

			if (this._control_element) {
				this.on_change_containerRect(this._control_element.client_width, this._control_element.client_height);
			}
		}
	};

	_pTileFrameSet.arrange = nexacro._emptyFn;



	_pTileFrameSet._getMaxMinimizedWidth = function () {
		var max = -1;
		var frames = this.frames;
		for (var i = 0, n = frames.length; i < n; i++) {
			var child = frames[i];
			if (child._state_openstatus != 2) {
				continue;
			}
		}
		return max;
	};

	_pTileFrameSet._getMaxMinimizedHeight = function () {
		var max = -1;
		var frames = this.frames;
		for (var i = 0, n = frames.length; i < n; i++) {
			var child = frames[i];
			if (child._state_openstatus != 2) {
				continue;
			}


			var minheight = -1;

			if (minheight == (-1)) {
				var titleheight = child.on_find_CurrentStyle_titlebarheight();
				minheight = parseInt(titleheight.value) | 0;

				var borderval = child.on_find_CurrentStyle_border();
				if (borderval) {
					minheight += borderval._getBorderTopWidth();
					minheight += borderval._getBorderBottomWidth();
				}

				if (minheight > max) {
					max = minheight;
				}
			}
		}
		return max;
	};

	delete _pTileFrameSet;


	if (!nexacro.MainTitleBarCtrl) {
		nexacro.MainTitleBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.TitleBarCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);


			this._hittest_type = "caption";
		};

		var _pMainTitleBarCtrl = nexacro._createPrototype(nexacro.TitleBarCtrl, nexacro.MainTitleBarCtrl);
		nexacro.MainTitleBarCtrl.prototype = _pMainTitleBarCtrl;

		delete _pMainTitleBarCtrl;
	}

	if (!nexacro.ChildTitleBarCtrl) {
		nexacro.ChildTitleBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.TitleBarCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

			this._is_subcontrol = true;


			if (parent && parent._is_frame && parent._is_window && parent._dragmovetype != 0) {
				this._hittest_type = "caption";
			}
		};

		var _pChildTitleBarCtrl = nexacro._createPrototype(nexacro.TitleBarCtrl, nexacro.ChildTitleBarCtrl);
		nexacro.ChildTitleBarCtrl.prototype = _pChildTitleBarCtrl;

		delete _pChildTitleBarCtrl;
	}


	if (!nexacro.MainStatusBarCtrl) {
		nexacro.MainStatusBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.StatusBarCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

			this.zoomcombo = null;
			this.zoomcombogap = 1;
			this.zoomcomboheight = 20;
			this.zoomcombowidth = 70;

			this._comm_progress_ref = 0;
			this._comm_progress_timer = null;
		};

		var _pMainStatusBarCtrl = nexacro._createPrototype(nexacro.StatusBarCtrl, nexacro.MainStatusBarCtrl);
		nexacro.MainStatusBarCtrl.prototype = _pMainStatusBarCtrl;

		_pMainStatusBarCtrl._movezoomcombo = function (left, top, bar_width, bar_height) {
			if (!this.zoomcombo) {
				return;
			}
			var curstyle = this.currentstyle;
			var zoomcombowidth = curstyle.zoomcombowidth > 0 ? curstyle.zoomcombowidth._value : 70;
			var zoomcomboheight = curstyle.zoomcomboheight > 0 ? curstyle.zoomcomboheight._value : 20;
			var zoomcombogap = curstyle.zoomcombogap > 0 ? curstyle.zoomcombogap._value : 2;

			left = left - zoomcombowidth - zoomcombogap;
			left = left > 0 ? left : 0;
			top = ((bar_height - zoomcomboheight) / 2) | 0;
			if (top < 0) {
				top = 0;
			}
			this.zoomcombo.move(left, top, zoomcombowidth, zoomcomboheight);

			return left;
		};

		if (nexacro.Browser == "Runtime") {
			_pMainStatusBarCtrl._beginCommProgress = function () {
				var cur_ref = ++this._comm_progress_ref;
				if (cur_ref == 1) {
					var progressbar = this.progressbar;
					if (progressbar) {
						progressbar.set_max(1000);
						progressbar.set_pos(0);
					}

					var progress_timer = new nexacro.CallbackTimer(this, function () {
						var progressbar = this.progressbar;
						if (!progressbar) {
							return;
						}

						var cur_pos = progressbar.pos;
						cur_pos += Math.max(1, (1000 - cur_pos) / (100 * this._comm_progress_ref));
						if (cur_pos > 990) {
							cur_pos = 990;
						}

						progressbar.set_pos(cur_pos);
					}, 500);
					progress_timer.start();
					this._comm_progress_timer = progress_timer;
				}
			};

			_pMainStatusBarCtrl._stepCommProgress = function (current, overall) {
				var progressbar = this.progressbar;
				if (progressbar) {
					progressbar.set_max(overall);
					progressbar.set_pos(current);
				}
			};

			_pMainStatusBarCtrl._endCommProgress = function () {
				var cur_ref = --this._comm_progress_ref;
				if (cur_ref == 0) {
					var progressbar = this.progressbar;
					if (progressbar) {
						progressbar.set_pos(0);
					}

					if (this._comm_progress_timer) {
						this._comm_progress_timer.stop();
					}
				}
			};
		}
		else {
			_pMainStatusBarCtrl._beginCommProgress = nexacro._emptyFn;
			_pMainStatusBarCtrl._stepCommProgress = nexacro._emptyFn;
			_pMainStatusBarCtrl._endCommProgress = nexacro._emptyFn;
		}
		delete _pMainStatusBarCtrl;
	}

	if (!nexacro.ChildStatusBarCtrl) {
		nexacro.ChildStatusBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.StatusBarCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);


			this._showzoomcombo = false;
		};

		var _pChildStatusBarCtrl = nexacro._createPrototype(nexacro.StatusBarCtrl, nexacro.ChildStatusBarCtrl);
		nexacro.ChildStatusBarCtrl.prototype = _pChildStatusBarCtrl;

		delete _pChildStatusBarCtrl;
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.ScrollBar) {
	nexacro.ScrollBar_Style = function (target) {
		nexacro.Style.call(this, target);

		this.barminsize = null;
		this.baroutsize = null;
		this.incbtnsize = null;
		this.decbtnsize = null;
		this.imgoutsize = null;
		this.scrollbarsize = null;
		this.trackbarsize = null;
	};

	var _pScrollBarStyle = nexacro._createPrototype(nexacro.Style, nexacro.ScrollBar_Style);
	nexacro.ScrollBar_Style.prototype = _pScrollBarStyle;

	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "barminsize"));
	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "baroutsize"));
	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "incbtnsize"));
	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "decbtnsize"));
	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "imgoutsize"));
	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "scrollbarsize"));
	eval(nexacro._createValueAttributeEvalStr("_pScrollBarStyle", "trackbarsize"));

	_pScrollBarStyle.__custom_emptyObject = function () {
		this.barminsize = null;
		this.baroutsize = null;
		this.incbtnsize = null;
		this.decbtnsize = null;
		this.imgoutsize = null;
		this.scrollbarsize = null;
		this.trackbarsize = null;
	};
	_pScrollBarStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.barminsize && !this.barminsize._isEmpty) {
			val += "barminsize:" + this.barminsize._value + "; ";
		}
		if (this.baroutsize && !this.baroutsize._isEmpty) {
			val += "baroutsize:" + this.baroutsize._value + "; ";
		}
		if (this.incbtnsize && !this.incbtnsize._isEmpty) {
			val += "incbtnsize:" + this.incbtnsize._value + "; ";
		}
		if (this.decbtnsize && !this.decbtnsize._isEmpty) {
			val += "decbtnsize:" + this.decbtnsize._value + "; ";
		}
		if (this.imgoutsize && !this.imgoutsize._isEmpty) {
			val += "imgoutsize:" + this.imgoutsize._value + "; ";
		}
		if (this.scrollbarsize && !this.scrollbarsize._isEmpty) {
			val += "scrollbarsize:" + this.scrollbarsize._value + "; ";
		}
		if (this.trackbarsize && !this.trackbarsize._isEmpty) {
			val += "trackbarsize:" + this.trackbarsize._value + "; ";
		}
		return val;
	};

	nexacro.ScrollBar_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.barminsize = null;
		this.baroutsize = null;
		this.incbtnsize = null;
		this.decbtnsize = null;
		this.imgoutsize = null;
		this.scrollbarsize = null;
		this.trackbarsize = null;
	};

	var _pScrollBarCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.ScrollBar_CurrentStyle);
	nexacro.ScrollBar_CurrentStyle.prototype = _pScrollBarCurrentStyle;

	_pScrollBarCurrentStyle.__custom_emptyObject = _pScrollBarStyle.__custom_emptyObject;
	_pScrollBarCurrentStyle.__get_custom_style_value = _pScrollBarStyle.__get_custom_style_value;

	delete _pScrollBarStyle;
	delete _pScrollBarCurrentStyle;


	nexacro.ScrollBar = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.incbutton = null;
		this.decbutton = null;
		this.trackbar = null;
		this.barminsize = -1;
		this.baroutsize = -1;
		this.decbtnsize = -1;
		this.imgoutsize = -1;
		this.incbtnsize = -1;
		this.scrollbarsize = -1;
		this.trackbarsize = -1;
		this.direction = "vert";
		this.line = 1;
		this.page = 3;
		this.view = -1;
		this.max = 0;
		this.min = 0;
		this.pos = 0;
		this.onscroll = null;


		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmousewheel" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onscroll" : 1
		};


		this._rectShaft = new nexacro.Rect();
		this._mousePoint = {
		};
		this._max = 0;
		this._min = 0;
		this._orgmax = 0;
		this._trackbarsize = -1;
		this._pos = 0;
		this._lineup = 1;
		this._linedown = 1;
		this._pageup = 3;
		this._pagedown = 3;
		this._nTrackOver = 0;
		this._is_repeat = true;
		this._start_page_navi = null;
		this._is_tracking = false;
		this._reset_trackbar_fix = false;
		this._set_real = false;
		this._is_nc_control = true;
	};

	nexacro.ScrollBar.TRACKBAR_SIZE_MIN = 6;
	nexacro.ScrollBar.TRACKFIRSTOVER = 1;
	nexacro.ScrollBar.TRACKLASTOVER = 2;

	var _pScrollBar = nexacro._createPrototype(nexacro.Component, nexacro.ScrollBar);
	nexacro.ScrollBar.prototype = _pScrollBar;

	_pScrollBar._type_name = "ScrollBar";

	_pScrollBar._default_rtlimagemirroring = nexacro.Component._default_rtlimagemirroring;

	_pScrollBar.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;
		var style = this.on_find_CurrentStyle_barminsize(pseudo);
		if (style != curstyle.barminsize) {
			curstyle.barminsize = style;
			this.on_apply_style_barminsize();
		}
		style = this.on_find_CurrentStyle_baroutsize(pseudo);
		if (style != curstyle.baroutsize) {
			curstyle.baroutsize = style;
			this.on_apply_style_baroutsize();
		}
		style = this.on_find_CurrentStyle_decbtnsize(pseudo);
		if (style != curstyle.decbtnsize) {
			curstyle.decbtnsize = style;
			this.on_apply_style_decbtnsize();
		}
		style = this.on_find_CurrentStyle_imgoutsize(pseudo);
		if (style != curstyle.imgoutsize) {
			curstyle.imgoutsize = style;
			this.on_apply_style_imgoutsize();
		}
		style = this.on_find_CurrentStyle_incbtnsize(pseudo);
		if (style != curstyle.incbtnsize) {
			curstyle.incbtnsize = style;
			this.on_apply_style_incbtnsize();
		}
		style = this.on_find_CurrentStyle_scrollbarsize(pseudo);
		if (style != curstyle.scrollbarsize) {
			curstyle.scrollbarsize = style;
			this.on_apply_style_scrollbarsize();
		}
		style = this.on_find_CurrentStyle_trackbarsize(pseudo);
		if (style != curstyle.trackbarsize) {
			curstyle.trackbarsize = style;
			this.on_apply_style_trackbarsize();
		}

		if (this.incbutton) {
			this.incbutton._control_pseudo = "";
			this.incbutton._contents_pseudo = "";
			this.incbutton.on_apply_pseudo(pseudo);
		}
		if (this.decbutton) {
			this.decbutton._control_pseudo = "";
			this.decbutton._contents_pseudo = "";
			this.decbutton.on_apply_pseudo(pseudo);
		}
		if (this.trackbar) {
			this.trackbar._control_pseudo = "";
			this.trackbar._contents_pseudo = "";
			this.trackbar.on_apply_pseudo(pseudo);
		}
	};

	_pScrollBar.on_apply_prop_class = function () {
		if (this.incbutton) {
			this.incbutton._css_finder = null;
			this.incbutton._ref_css_finder = null;
		}
		if (this.decbutton) {
			this.decbutton._css_finder = null;
			this.decbutton._ref_css_finder = null;
		}
		if (this.trackbar) {
			this.trackbar._css_finder = null;
			this.trackbar._ref_css_finder = null;
		}
		nexacro.Component.prototype.on_apply_prop_class.call(this);
	};

	_pScrollBar.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		if (this.direction == "horz") {
			if (this.incbutton) {
				this.incbutton._setRtlDirection(this._rtldirection);
				{

					var img_elem = this.incbutton._img_elem;
					if (img_elem) {
						img_elem.setElementImageMirror(null, true);
					}
				}
			}

			if (this.decbutton) {
				this.decbutton._setRtlDirection(this._rtldirection);
				{

					var img_elem = this.decbutton._img_elem;
					if (img_elem) {
						img_elem.setElementImageMirror(null, true);
					}
				}
			}

			if (this.trackbar) {
				this.trackbar._setRtlDirection(this._rtldirection);
			}
		}
		if (this.direction == "vert") {
			if (this.incbutton) {
				this.incbutton._setRtlDirection(this._rtldirection);
			}

			if (this.decbutton) {
				this.decbutton._setRtlDirection(this._rtldirection);
			}

			if (this.trackbar) {
				this.trackbar._setRtlDirection(this._rtldirection);
			}
		}

		var control_element = this._control_element;
		if (control_element) {
			control_element.setElementPosition(control_element.left, control_element.top, true);
		}
	};

	_pScrollBar.on_create_custom_style = function () {
		return new nexacro.ScrollBar_Style(this);
	};
	_pScrollBar.on_create_custom_currentStyle = function () {
		return new nexacro.ScrollBar_CurrentStyle();
	};

	_pScrollBar.on_find_CurrentStyle_barminsize = function (pseudo) {
		return this._find_pseudo_obj("barminsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_baroutsize = function (pseudo) {
		return this._find_pseudo_obj("baroutsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_decbtnsize = function (pseudo) {
		return this._find_pseudo_obj("decbtnsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_imgoutsize = function (pseudo) {
		return this._find_pseudo_obj("imgoutsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_incbtnsize = function (pseudo) {
		return this._find_pseudo_obj("incbtnsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_scrollbarsize = function (pseudo) {
		return this._find_pseudo_obj("scrollbarsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_trackbarsize = function (pseudo) {
		return this._find_pseudo_obj("trackbarsize", pseudo);
	};
	_pScrollBar.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pScrollBar.on_update_style_barminsize = function () {
		this.currentstyle.barminsize = this.on_find_CurrentStyle_barminsize(this._pseudo);
		this.on_apply_style_barminsize();
	};
	_pScrollBar.on_update_style_baroutsize = function () {
		this.currentstyle.baroutsize = this.on_find_CurrentStyle_baroutsize(this._pseudo);
		this.on_apply_style_baroutsize();
	};
	_pScrollBar.on_update_style_decbtnsize = function () {
		this.currentstyle.decbtnsize = this.on_find_CurrentStyle_decbtnsize(this._pseudo);
		this.on_apply_style_decbtnsize();
	};
	_pScrollBar.on_update_style_imgoutsize = function () {
		this.currentstyle.imgoutsize = this.on_find_CurrentStyle_imgoutsize(this._pseudo);
		this.on_apply_style_imgoutsize();
	};
	_pScrollBar.on_update_style_incbtnsize = function () {
		this.currentstyle.incbtnsize = this.on_find_CurrentStyle_incbtnsize(this._pseudo);
		this.on_apply_style_incbtnsize();
	};
	_pScrollBar.on_update_style_scrollbarsize = function () {
		this.currentstyle.scrollbarsize = this.on_find_CurrentStyle_scrollbarsize(this._pseudo);
		this.on_apply_style_scrollbarsize();
	};
	_pScrollBar.on_update_style_trackbarsize = function () {
		this.currentstyle.trackbarsize = this.on_find_CurrentStyle_trackbarsize(this._pseudo);
		this.on_apply_style_trackbarsize();
	};

	_pScrollBar.on_apply_style_barminsize = function () {
		var cur = this.currentstyle.barminsize;
		if (cur && !cur._isEmpty) {
			this.barminsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);
			this._recalcLayout();
		}
	};
	_pScrollBar.on_apply_style_baroutsize = function () {
		var cur = this.currentstyle.baroutsize;
		if (cur && !cur._isEmpty) {
			this.baroutsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);
			this._recalcLayout();
		}
	};
	_pScrollBar.on_apply_style_decbtnsize = function () {
		var cur = this.currentstyle.decbtnsize;
		if (cur && !cur._isEmpty) {
			this.decbtnsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);
			this._recalcLayout();
		}
	};
	_pScrollBar.on_apply_style_imgoutsize = function () {
		var cur = this.currentstyle.imgoutsize;
		if (cur && !cur._isEmpty) {
			this.imgoutsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);
			this._recalcLayout();
		}
	};
	_pScrollBar.on_apply_style_incbtnsize = function () {
		var cur = this.currentstyle.incbtnsize;
		if (cur && !cur._isEmpty) {
			this.incbtnsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);
			this._recalcLayout();
		}
	};
	_pScrollBar.on_apply_style_scrollbarsize = function () {
		var cur = this.currentstyle.scrollbarsize;
		if (cur && !cur._isEmpty) {
			this.scrollbarsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);

			var p_comp = this.parent;
			if (p_comp && this._is_created_contents) {
				var p_control = p_comp._control_element;
				var vscrollbar = p_comp.vscrollbar;
				var hscrollbar = p_comp.hscrollbar;

				var scroll_default_size = nexacro.Component.SCROLLBAR_DEFAULT_SIZE;
				var width = vscrollbar ? (vscrollbar.scrollbarsize == -1 ? scroll_default_size : vscrollbar.scrollbarsize) : scroll_default_size;
				var height = hscrollbar ? (hscrollbar.scrollbarsize == -1 ? scroll_default_size : hscrollbar.scrollbarsize) : scroll_default_size;
				p_control.setElementScrollbarSize(width, height);
				p_comp._updateClientSize(p_control);
			}
		}
	};
	_pScrollBar.on_apply_style_trackbarsize = function () {
		var cur = this.currentstyle.trackbarsize;
		if (cur && !cur._isEmpty) {
			this.trackbarsize = ((+cur._value) != (+cur._value)) ? -1 : (parseInt(cur._value) | 0);
			this._recalcLayout();
		}
	};

	_pScrollBar._get_css_assumedtypename = function () {
		if (!this._is_subcontrol) {
			if (this.direction == "vert") {
				return "VScrollBar";
			}
			else if (this.direction == "horz") {
				return "HScrollBar";
			}
		}
		return this._type_name;
	};

	_pScrollBar.on_create_contents = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			this.incbutton = new nexacro.ImageButtonCtrl("incbutton", "absolute", 0, 0, 0, 0, null, null, this);
			this.decbutton = new nexacro.ImageButtonCtrl("decbutton", "absolute", 0, 0, 0, 0, null, null, this);
			this.trackbar = new nexacro.TrackImageButtonCtrl("trackbar", "absolute", 0, 0, 0, 0, null, null, this);
			this.trackbar._on_starttrack = this._on_starttrack;
			this.trackbar._on_movetrack = this._on_movetrack;
			this.trackbar._on_endtrack = this._on_endtrack;

			this.trackbar._no_slide_scroll = true;

			this.incbutton.createComponent();
			this.decbutton.createComponent();
			if (this.parent._is_form) {
				this.trackbar._is_scrollable_comp = true;
			}
			this.trackbar.createComponent();
		}
	};

	_pScrollBar.on_created_contents = function () {
		var incbutton = this.incbutton;
		if (incbutton) {
			incbutton.on_created();
		}

		var decbutton = this.decbutton;
		if (decbutton) {
			decbutton.on_created();
		}

		var trackbar = this.trackbar;
		if (trackbar) {
			trackbar.on_created();
		}

		this._recalcLayout();
	};

	_pScrollBar.on_destroy_contents = function () {
		if (this.incbutton) {
			this.incbutton.destroy();
			this.incbutton = null;
		}

		if (this.decbutton) {
			this.decbutton.destroy();
			this.decbutton = null;
		}

		if (this.trackbar) {
			this.trackbar.destroy();
			this.trackbar = null;
		}

		this._rectShaft = null;
		this._mousePoint = null;
	};

	_pScrollBar.on_change_containerRect = function (width, height) {
		this._recalcLayout();
	};

	_pScrollBar._on_repeat = function (fromComp, x, y) {
		var scale = this._getCumulativeZoomFactor() / 100.0;

		if (!this._is_alive) {
			return;
		}
		var fromObject = fromComp;
		if (fromObject == this.decbutton) {
			var btn = this.decbutton;
			var left = btn._adjust_left;
			var top = btn._adjust_top;
			var width = btn._adjust_width * scale;
			var height = btn._adjust_height * scale;

			if (left <= x && (left + width) >= x && top <= y && (top + height) >= y) {
				this.on_decbutton_lbuttondown(this);
			}
		}
		else if (fromObject == this.incbutton) {
			var btn = this.incbutton;
			var left = btn._adjust_left;
			var top = btn._adjust_top;
			var width = btn._adjust_width * scale;
			var height = btn._adjust_height * scale;

			if (left <= x && (left + width) >= x && top <= y && (top + height) >= y) {
				this.on_incbutton_lbuttondown(this);
			}
		}
		else if (fromObject == this) {
			this.on_page_click(this, x, y);
		}
	};

	_pScrollBar._on_startrepeat = function (fromComp, x, y) {
		var scale = this._getCumulativeZoomFactor() / 100.0;

		if (!this._is_alive) {
			return;
		}
		var fromObject = fromComp;
		if (fromObject == this.decbutton) {
			var btn = this.decbutton;
			var left = btn._adjust_left;
			var top = btn._adjust_top;
			var width = btn._adjust_width * scale;
			var height = btn._adjust_height * scale;

			if (left <= x && (left + width) >= x && top <= y && (top + height) >= y) {
				this.on_decbutton_lbuttondown(this, null);
			}
		}
		else if (fromObject == this.incbutton) {
			var btn = this.incbutton;
			var left = btn._adjust_left;
			var top = btn._adjust_top;
			var width = btn._adjust_width * scale;
			var height = btn._adjust_height * scale;

			if (left <= x && (left + width) >= x && top <= y && (top + height) >= y) {
				this.on_incbutton_lbuttondown(this, null);
			}
		}
		else if (fromObject == this) {
			var btn = this.trackbar;

			var eType = "";
			if (this.direction == "vert") {
				if (y < btn._adjust_top) {
					eType = "pageup";
				}
				else if (y > (btn._adjust_top + btn._adjust_height)) {
					eType = "pagedown";
				}
				else {
					eType = "";
				}
			}
			else {
				if (x < btn._adjust_left) {
					eType = "pageleft";
				}
				else if (x > (btn._adjust_left + btn._adjust_width)) {
					eType = "pageright";
				}
				else {
					eType = "";
				}
			}
			this._start_page_navi = eType;
			this.on_page_click(this, x, y);
		}
	};


	_pScrollBar.set_barminsize = function (v) {
		if (this.barminsize != v) {
			this.barminsize = v;
		}
	};

	_pScrollBar.set_baroutsize = function (v) {
		if (this.baroutsize != v) {
			this.baroutsize = v;
		}
	};

	_pScrollBar.set_decbtnsize = function (v) {
		if (this.decbtnsize != v) {
			this.decbtnsize = v;
		}
	};

	_pScrollBar.set_imgoutsize = function (v) {
		if (this.imgoutsize != v) {
			this.imgoutsize = v;
		}
	};

	_pScrollBar.set_incbtnsize = function (v) {
		if (this.incbtnsize != v) {
			this.incbtnsize = v;
		}
	};

	_pScrollBar.set_scrollbarsize = function (v) {
		if (this.scrollbarsize != v) {
			this.scrollbarsize = v;

			var p_comp = this.parent;
			if (p_comp) {
				var p_control = p_comp._control_element;
				var vscrollbar = p_comp.vscrollbar;
				var hscrollbar = p_comp.hscrollbar;

				var scroll_default_size = nexacro.Component.SCROLLBAR_DEFAULT_SIZE;
				var width = vscrollbar ? (vscrollbar.scrollbarsize == -1 ? scroll_default_size : vscrollbar.scrollbarsize) : scroll_default_size;
				var height = hscrollbar ? (hscrollbar.scrollbarsize == -1 ? scroll_default_size : hscrollbar.scrollbarsize) : scroll_default_size;
				p_control.setElementScrollbarSize(width, height);
				p_comp._updateClientSize(p_control);
			}
		}
	};

	_pScrollBar.set_trackbarsize = function (v) {
		if (this.trackbarsize != v) {
			this.trackbarsize = v;
		}
	};

	_pScrollBar.set_pos = function (v) {
		this._setPos(v);
	};

	_pScrollBar.on_apply_resize = function () {
		this._recalcLayout();
		this.on_fire_onsize(this._adjust_width, this._adjust_height);
	};

	_pScrollBar.on_apply_move = function () {
		this._recalcLayout();
		this.on_fire_onmove(this._adjust_left, this._adjust_top);
	};

	_pScrollBar.on_apply_prop_enable = function (v) {
		var enable = v;
		if (v == undefined) {
			enable = this.enable;
		}

		if (this.incbutton) {
			this.incbutton._setEnable(enable);
		}
		if (this.decbutton) {
			this.decbutton._setEnable(enable);
		}
		if (this.trackbar) {
			this.trackbar._setEnable(enable);
		}
	};


	_pScrollBar.on_fire_onscroll = function (nPos, strType, isscrolling, sdir, evtkind) {
		if (this.onscroll && this.onscroll._has_handlers) {
			nPos = (nPos + 0.5) | 0;
			var eventid = (this.direction == "vert") ? "onvscroll" : "onhscroll";
			var evt = new nexacro.ScrollEventInfo(this, eventid, nPos, strType, this, this.parent);
			if (isscrolling !== undefined) {
				evt.touchscrolling = isscrolling;
				evt.touchscrolldir = sdir;
			}
			evt._evtkind = evtkind;
			var ret = this.onscroll._fireEvent(this, evt);
			return ret;
		}
		return true;
	};

	_pScrollBar.on_incbutton_lbuttondown = function (obj) {
		var nMin = this._min;
		var nMax = this._max;
		var nPos = this._pos;
		var nInc = this.line;
		if (nInc == -1) {
			nInc = this._lineup;
		}
		var nNew = nPos + nInc;

		var temp = this._getIncNewPosPixel();
		if (temp !== undefined) {
			nNew = temp;
		}

		if (nPos >= nMax) {
			var posarr = this._scroll_reverse_convert(nMax);
			this.pos = posarr[0];
			this._pos = posarr[1];
			this.on_fire_onscroll(this.pos, "lastover");
		}
		else if (nNew >= nMax) {
			var posarr = this._scroll_reverse_convert(nMax);
			this.pos = posarr[0];
			this._pos = posarr[1];
			this.on_fire_onscroll(this.pos, (this.direction == "vert" ? "linedown" : "lineright"));

			this.on_fire_onscroll(this.pos, "last");
		}
		else {
			var posarr = this._scroll_reverse_convert(nNew);
			this.pos = posarr[0];
			this._pos = posarr[1];
			this.on_fire_onscroll(this.pos, (this.direction == "vert" ? "linedown" : "lineright"));
		}
		var rc = this._rectShaft;
		this._resetTrackBar(rc.left, rc.top, rc.right, rc.bottom);
	};

	_pScrollBar.on_decbutton_lbuttondown = function (obj) {
		var nMin = this._min;
		var nMax = this._max;
		var nPos = this._pos;
		var nDec = this.line;
		if (nDec == -1) {
			nDec = this._linedown;
		}
		var nNew = nPos - nDec;

		var temp = this._getDecNewPosPixel();
		if (temp !== undefined) {
			nNew = temp;
		}

		if (nPos <= nMin) {
			var posarr = this._scroll_reverse_convert(nMin);
			this.pos = posarr[0];
			this._pos = posarr[1];
			this.on_fire_onscroll(this.pos, "firstover");
		}
		else if (nNew <= nMin) {
			var posarr = this._scroll_reverse_convert(nMin);
			this.pos = posarr[0];
			this._pos = posarr[1];
			this.on_fire_onscroll(this.pos, (this.direction == "vert" ? "lineup" : "lineleft"));
			this.on_fire_onscroll(this.pos, "first");
		}
		else {
			var posarr = this._scroll_reverse_convert(nNew);
			this.pos = posarr[0];
			this._pos = posarr[1];
			this.on_fire_onscroll(this.pos, (this.direction == "vert" ? "lineup" : "lineleft"));
		}

		var rc = this._rectShaft;
		this._resetTrackBar(rc.left, rc.top, rc.right, rc.bottom);
	};

	_pScrollBar._on_starttrack = function () {
		if (!this._is_alive) {
			return;
		}
		var p = this.parent;
		p._mousePoint = {
			x : 0, 
			y : 0
		};
		nexacro.ScrollBar.prototype._starttrack.call(p);
		p._is_tracking = true;
	};

	_pScrollBar._on_endtrack = function (x, y, dragdata) {
		if (!this._is_alive) {
			return;
		}
		var p = this.parent;
		nexacro.ScrollBar.prototype._endtrack.call(p);
		p._is_tracking = false;
	};


	_pScrollBar._on_movetrack = function (x, y, dragdata) {
		if (!this._is_alive) {
			return;
		}
		var p = this.parent;
		nexacro.ScrollBar.prototype._movetrack.call(p, x, y);
	};


	_pScrollBar.on_page_click = function (obj, nX, nY) {
		var nMin = this._min;
		var nMax = this._max;
		var nPos = this._pos;
		var nPage = this.page;
		var nPageup = this._pageup;
		var nPagedown = this._pagedown;

		if (nPage != -1) {
			nPageup = nPage;
			nPagedown = nPage;
		}

		var trackbar = this.trackbar;
		if (trackbar._adjust_width <= 0 || trackbar._adjust_height <= 0) {
			return;
		}

		var top = trackbar._adjust_top;
		var left = trackbar._adjust_left;
		var right = trackbar._adjust_left + trackbar._adjust_width;
		var bottom = trackbar._adjust_top + trackbar._adjust_height;

		var nNew = nPos, eType;
		var minPos, maxPos;

		if (this.direction == "vert") {
			if (this._start_page_navi == "pageup" && nY < top) {
				nNew = (nPos - nPageup);
				nNew = (nNew < nMin ? nMin : nNew);
				eType = "pageup";
			}
			else if (this._start_page_navi == "pagedown" && nY > bottom) {
				nNew = (nPos + nPagedown);
				nNew = (nNew > nMax ? nMax : nNew);
				eType = "pagedown";
			}
			else {
				eType = "";
			}
		}
		else {
			if (this._start_page_navi == "pageleft" && nX < left) {
				nNew = (nPos - nPageup);
				nNew = (nNew < nMin ? nMin : nNew);
				eType = "pageleft";
			}
			else if (this._start_page_navi == "pageright" && nX > right) {
				nNew = (nPos + nPagedown);
				nNew = (nNew > nMax ? nMax : nNew);
				eType = "pageright";
			}
			else {
				eType = "";
			}
		}

		if (this._pos == nNew) {
			return;
		}

		var posarr = this._scroll_reverse_convert(nNew);
		this.pos = posarr[0];
		this._pos = posarr[1];

		this.on_fire_onscroll(this.pos, eType);

		if (this.direction == "vert") {
			if (nY < top && nNew == nMin) {
				this.on_fire_onscroll(this.pos, "first");
			}
			else if (nY > bottom && nNew == nMax) {
				this.on_fire_onscroll(this.pos, "last");
			}
			else {
				if (nNew == nMin) {
					this.on_fire_onscroll(this.pos, "first");
				}
				else if (nNew == nMax) {
					this.on_fire_onscroll(this.pos, "last");
				}
			}
		}
		else {
			if (nX < left && nNew == nMin) {
				this.on_fire_onscroll(this.pos, "first");
			}
			else if (nX > right && nNew == nMax) {
				this.on_fire_onscroll(this.pos, "last");
			}
			else {
				if (nNew == nMin) {
					this.on_fire_onscroll(this.pos, "first");
				}
				else if (nNew == nMax) {
					this.on_fire_onscroll(this.pos, "last");
				}
			}
		}
		var rc = this._rectShaft;
		this._resetTrackBar(rc.left, rc.top, rc.right, rc.bottom);
	};


	_pScrollBar._setDirection = function (v) {
		if (this.direction != v) {
			switch (v) {
				case "vert":
				case "horz":
					this.direction = v;
					this._recalcLayout();
					this._default_rtlimagemirroring = nexacro._getCachedStyleObj("rtlimagemirroring", "true");
					break;
			}
		}
		return v;
	};

	_pScrollBar._scroll_convert_pixel = function (v, is_notcheck) {
		return v;
	};

	_pScrollBar._scroll_reverse_convert = function (v, is_notcheck, is_max) {
		return [v, v];
	};

	_pScrollBar._setPos = function (v, evtkind) {
		var str = this._getScrollInfo(v, evtkind);

		if (v < this.min) {
			v = this.min;
		}
		if (v > this.max) {
			v = this.max;
		}

		if (this.pos != v) {
			this.pos = v;
			this._pos = this._scroll_convert_pixel(v);
			var rc = this._rectShaft;
			this._resetTrackBar(rc.left, rc.top, rc.right, rc.bottom);
		}

		this.on_fire_onscroll(this.pos, str, undefined, undefined, evtkind);
	};

	_pScrollBar._setScrollPos = function (si_pos) {
		if (this._is_tracking) {
			return;
		}

		var posarr = this._scroll_reverse_convert(si_pos);
		this.pos = posarr[0];
		this._pos = posarr[1];

		if (this._pos < this._min) {
			this.pos = this.min;
			this._pos = this._min;
		}
		if (this._pos > this._max) {
			this.pos = this.max;
			this._pos = this._max;
		}

		this._recalcLayout();
	};


	_pScrollBar._setScrollInfo = function (left, top, width, height, si_min, si_max, si_line, si_page, si_view, si_enable, si_pos) {
		var posarr = this._scroll_reverse_convert(si_min);
		this.min = posarr[0];
		this._min = posarr[1];

		posarr = this._scroll_reverse_convert(si_max, false, true);
		this.max = posarr[0];
		this._max = posarr[1];
		this._orgmax = si_max;

		this.line = si_line;
		this.page = si_page;
		this.view = si_view;

		if (si_pos >= si_max) {
			posarr = this._scroll_reverse_convert(si_pos, false, true);
		}
		else {
			posarr = this._scroll_reverse_convert(si_pos);
		}
		this.pos = posarr[0];
		this._pos = posarr[1];

		if (this._pos < this._min) {
			this.pos = this.min;
			this._pos = this._min;
		}
		if (this._pos > this._max) {
			this.pos = this.max;
			this._pos = this._max;
		}

		var old_left = this._adjust_left;
		var old_top = this._adjust_top;
		var old_width = this._adjust_width;
		var old_height = this._adjust_height;

		var bsize = false;

		if (old_left != left || old_top != top || old_width != width || old_height != height) {
			bsize = true;
		}

		if (bsize) {
			this._adjustPosition(left, top, null, null, width, height, this.parent._client_width, this.parent._client_height);

			var control_elem = this._control_element;

			if (control_elem) {
				control_elem.setElementPosition(this._adjust_left, this._adjust_top);
				control_elem.setElementSize(this._adjust_width, this._adjust_height);
				this._updateClientSize(control_elem);

				if (old_left != this._adjust_left || old_top != this._adjust_top) {
					this.on_fire_onmove(this._adjust_left, this._adjust_top);
				}
				if (old_width != this._adjust_width || old_height != this._adjust_height) {
					this.on_fire_onsize(this._adjust_width, this._adjust_height);
				}
			}
		}
		this._recalcLayout();
		this._setEnable(si_enable);
	};

	_pScrollBar._getScrollInfo = function (v, evtkind) {
		var str = "none";
		if (evtkind && evtkind.length > 0) {
			if (evtkind == "mousewheel") {
				if (this.pos > v && v > this.min) {
					str = "wheelup";
				}
				else if (this.pos < v && v < this.max) {
					str = "wheeldown";
				}
				else if (v == this.min) {
					str = "wheelfirst";
				}
				else if (v == this.max) {
					str = "wheellast";
				}
				else if (v < this.min) {
					if (this.pos != this.min) {
						str = "wheelfirst";
					}
					else {
						str = "wheelfirstover";
					}
				}
				else if (v > this.max) {
					if (this.pos != this.max) {
						str = "wheellast";
					}
					else {
						str = "wheellastover";
					}
				}
			}
			else if (evtkind == "slide" || evtkind == "fling") {
				if (this.pos > v && v > this.min) {
					str = "slide";
				}
				else if (this.pos < v && v < this.max) {
					str = "slide";
				}
				else if (v == this.min) {
					str = "slidefirst";
				}
				else if (v == this.max) {
					str = "slidelast";
				}
				else if (v < this.min) {
					if (this.pos != this.min) {
						str = "slidefirst";
					}
					else {
						str = "slidefirstover";
					}
				}
				else if (v > this.max) {
					if (this.pos != this.max) {
						str = "slidelast";
					}
					else {
						str = "slidelastover";
					}
				}
			}
			else {
				str = evtkind;
			}
		}
		return str;
	};

	_pScrollBar._set_touch_pos = function (v, isScrolling, dir) {
		if (v < this._min) {
			v = this._min;
		}
		if (v > this._max) {
			v = this._max;
		}

		var posarr = this._scroll_reverse_convert(v);
		if (this._pos != posarr[1]) {
			this.pos = posarr[0];
			this._pos = posarr[1];

			this.on_fire_onscroll(this.pos, "touchscroll", isScrolling, dir);
			var rc = this._rectShaft;
			this._resetTrackBar(rc.left, rc.top, rc.right, rc.bottom);
		}
	};

	_pScrollBar._recalcLayout = function () {
		var control_elem = this._control_element;
		if (control_elem && this._is_created_contents) {
			var client_left = control_elem.client_left;
			var client_top = control_elem.client_top;
			var client_width = control_elem.client_width;
			var client_height = control_elem.client_height;
			if (client_width <= 0 || client_height <= 0) {
				return;
			}

			var l = 0, r = 0, t = 0, b = 0, w = 0, h = 0;

			var decsize = this.decbtnsize;
			var incsize = this.incbtnsize;
			var nTrackSize = 0;
			if (this.direction == "vert") {
				if (decsize < 0) {
					decsize = client_width;
				}
				if (incsize < 0) {
					incsize = client_width;
				}

				var diff = client_height - (decsize + incsize);

				if (diff < 0) {
					decsize = ((client_height + (client_height % 2)) / 2) | 0;
					incsize = client_height - decsize;
				}

				var client_bottom = client_top + client_height;

				l = client_left;
				r = l + client_width;
				t = client_top + decsize;
				b = client_bottom - incsize;

				if (decsize == 0) {
					this.decbutton.move(l, 0, client_width, decsize);
				}
				else {
					this.decbutton.move(l, client_top, client_width, decsize);
				}


				if (incsize == 0) {
					this.incbutton.move(l, 0, client_width, client_height - b);
				}
				else {
					this.incbutton.move(l, b, client_width, client_height - b);
				}

				var nShaftSize = b - t;
				if (nShaftSize > 0) {
					var nView = this.view;
					var nBarMin = this.barminsize;
					var nBarOut = this.baroutsize;
					var nSize = this._max - this._min;

					if (nBarOut < 0) {
						nBarOut = r - l;
					}
					if (nBarMin < 0) {
						nBarMin = ((r - l) * 0.60) | 0;
						if (nBarMin < nexacro.ScrollBar.TRACKBAR_SIZE_MIN) {
							nBarMin = nexacro.ScrollBar.TRACKBAR_SIZE_MIN;
						}
					}
					if (nView < 0) {
						nView = 1;
					}

					if (nShaftSize > nBarOut) {
						if (this.trackbarsize > 0) {
							this._trackbarsize = this.trackbarsize;
						}
						else {
							nTrackSize = (nShaftSize * (nView / (nView + nSize))) | 0;
							this._trackbarsize = (nTrackSize < nBarMin) ? nBarMin : nTrackSize;
						}
					}
					else {
						this._trackbarsize = 0;
					}
				}
				else {
					this._trackbarsize = 0;
				}

				if (nShaftSize < this._trackbarsize) {
					this._trackbarsize = nShaftSize;
				}
			}
			else {
				if (decsize < 0) {
					decsize = client_height;
				}
				if (incsize < 0) {
					incsize = client_height;
				}

				var diff = client_width - (decsize + incsize);

				if (diff < 0) {
					decsize = ((client_width + (client_width % 2)) / 2) | 0;
					incsize = client_width - decsize;
				}

				var client_right = client_left + client_width;
				l = client_left + decsize;
				r = client_right - incsize;
				t = client_top;
				b = client_top + client_height;

				if (decsize == 0) {
					this.decbutton.move(client_left, 0, decsize, client_height);
				}
				else {
					this.decbutton.move(client_left, t, decsize, client_height);
				}

				if (incsize == 0) {
					this.incbutton.move(r, 0, client_width - r, client_height);
				}
				else {
					this.incbutton.move(r, t, client_width - r, client_height);
				}

				var nShaftSize = r - l;
				if (nShaftSize > 0) {
					var nView = this.view;
					var nBarMin = this.barminsize;
					var nBarOut = this.baroutsize;
					var nSize = this._max - this._min;

					if (nBarOut < 0) {
						nBarOut = b - t;
					}
					if (nBarMin < 0) {
						nBarMin = parseInt((b - t) * 0.60);
						if (nBarMin < nexacro.ScrollBar.TRACKBAR_SIZE_MIN) {
							nBarMin = nexacro.ScrollBar.TRACKBAR_SIZE_MIN;
						}
					}
					if (nView < 0) {
						nView = 1;
					}

					this._barminsize = nBarMin;
					this._baroutsize = nBarOut;

					if (nShaftSize > nBarOut) {
						if (this.trackbarsize > 0) {
							this._trackbarsize = this.trackbarsize;
						}
						else {
							nTrackSize = (nShaftSize * (nView / (nView + nSize))) | 0;
							this._trackbarsize = (nTrackSize < nBarMin) ? nBarMin : nTrackSize;
						}
					}
					else {
						this._trackbarsize = 0;
					}
				}
				else {
					this._trackbarsize = 0;
				}

				if (nShaftSize < this._trackbarsize) {
					this._trackbarsize = nShaftSize;
				}
			}
			this._rectShaft.set(l, t, r, b);
			this._resetTrackBar(l, t, r, b);
		}
	};

	_pScrollBar._resetTrackBar = function (l, t, r, b) {
		if (this._trackbarsize <= 0) {
			this.trackbar.set_visible(false);
			return;
		}

		this.trackbar.set_visible(true);

		var rl = 0, rt = 0, rr = 0, rb = 0;

		var nMin = this._min;
		var nPos = this._pos;
		var nTrackSize = this._trackbarsize;
		var nSize = this._max - this._min;

		if (nSize > 0) {
			if (this.direction == "vert") {
				var nShaftSize = b - t;
				var nTrackStart = ((nPos - nMin) * (nShaftSize - nTrackSize) / nSize) | 0;

				rl = l;
				rr = r;
				rt = t + nTrackStart;
				rb = rt + nTrackSize;

				if (rb > b) {
					rb = b;
					rt = b - nTrackSize;
				}
			}
			else {
				var nShaftSize = r - l;
				nTrackStart = parseInt((nPos - nMin) * (nShaftSize - nTrackSize) / nSize);

				rl = l + nTrackStart;
				rr = rl + nTrackSize;
				rt = t;
				rb = b;

				if (rr > r) {
					rr = r;
					rl = r - nTrackSize;
				}
			}
		}

		if ((rl <= 0 && rt <= 0 && rr - rl <= 0 && rb - rt <= 0)) {
			this._set_real = true;
			this._setRealEnable(false);
			this.trackbar.set_visible(false);
		}
		else if (this._set_real) {
			this._set_real = false;
			this._setRealEnable(true);
			this.trackbar.set_visible(true);
		}

		if (!this._reset_trackbar_fix) {
			this.trackbar.move(rl, rt, rr - rl, rb - rt);
		}

		this._reset_trackbar_fix = false;
	};

	_pScrollBar._setRealEnable = function (enable) {
		if (enable == undefined) {
			enable = this.enable;
		}

		if (this._real_enable != enable) {
			var control_elem = this._control_element;
			this._real_enable = enable;

			if (enable) {
				this._status = "enable";
				this._pseudo = "normal";
			}
			else {
				this._status = "disable";
				this._pseudo = "disabled";
			}

			if (this.visible && control_elem) {
				this._updateControl(control_elem, this._pseudo);
				this._updateContents(control_elem, this._pseudo);
			}

			if (this.incbutton) {
				this.incbutton._setRealEnable(enable);
			}
			if (this.decbutton) {
				this.decbutton._setRealEnable(enable);
			}
			if (this.trackbar) {
				this.trackbar._setRealEnable(enable);
			}
		}
	};

	_pScrollBar._moveTrackBar = function (rcTrack, rcBound) {
		var width = rcTrack.right - rcTrack.left;
		var height = rcTrack.bottom - rcTrack.top;

		if (rcTrack.left < rcBound.left) {
			rcTrack.left = rcBound.left;
			rcTrack.right = rcTrack.left + width;
		}
		if (rcTrack.right > rcBound.right) {
			rcTrack.right = rcBound.right;
			rcTrack.left = rcTrack.right - width;
		}
		if (rcTrack.top < rcBound.top) {
			rcTrack.top = rcBound.top;
			rcTrack.bottom = rcTrack.top + height;
		}
		if (rcTrack.bottom > rcBound.bottom) {
			rcTrack.bottom = rcBound.bottom;
			rcTrack.top = rcTrack.bottom - height;
		}
		this.trackbar.move(rcTrack.left, rcTrack.top, rcTrack.right - rcTrack.left, rcTrack.bottom - rcTrack.top);
	};

	_pScrollBar._starttrack = function () {
		this.on_fire_onscroll(this.pos, "trackstart");
	};
	_pScrollBar._endtrack = function () {
		this.on_fire_onscroll(this.pos, "trackend");
		var rc = this._rectShaft;
		this._resetTrackBar(rc.left, rc.top, rc.right, rc.bottom);
	};
	_pScrollBar._movetrack = function (x, y) {
		var nX = x;
		var nY = y;
		var nMin = this._min;
		var nMax = this._max;
		var nPos = this._pos;

		var nDiff = 0;
		var nSize = nMax - nMin;
		var nNew = nPos;

		var trackbar = this.trackbar;
		var rcTrackOrigin = {
			left : trackbar._adjust_left, 
			top : trackbar._adjust_top, 
			right : trackbar._adjust_left + trackbar._adjust_width, 
			bottom : trackbar._adjust_top + trackbar._adjust_height
		};

		var w = rcTrackOrigin.right - rcTrackOrigin.left;
		var h = rcTrackOrigin.bottom - rcTrackOrigin.top;
		if (w <= 0 || h <= 0) {
			return;
		}

		var rcTrack = {
			left : rcTrackOrigin.left, 
			top : rcTrackOrigin.top, 
			right : rcTrackOrigin.right, 
			bottom : rcTrackOrigin.bottom
		};

		if (this.direction == "vert") {
			var rc = this._rectShaft;
			nDiff = nY - this._mousePoint.y;
			if ((nDiff < 0 && rcTrackOrigin.top > rc.top) || (nDiff > 0 && rcTrackOrigin.bottom < rc.bottom)) {
				rcTrack.top += nDiff;
				rcTrack.bottom += nDiff;

				nNew = (nSize * (rcTrack.top - rc.top) / ((rc.bottom - rc.top) - (rcTrack.bottom - rcTrack.top)));
				this._moveTrackBar(rcTrack, rc);

				if (trackbar._adjust_top - rcTrackOrigin.top == 0) {
					this._mousePoint.x = nX;
					this._mousePoint.y = nY;
				}
				else {
					this._mousePoint.x = nX;
					this._mousePoint.y = this._mousePoint.y + (trackbar._adjust_top - rcTrackOrigin.top);
				}
			}
		}
		else {
			var rc = this._rectShaft;
			nDiff = nX - this._mousePoint.x;
			if ((nDiff < 0 && rcTrackOrigin.left > rc.left) || (nDiff > 0 && rcTrackOrigin.right < rc.right)) {
				rcTrack.left += nDiff;
				rcTrack.right += nDiff;

				nNew = parseInt(nSize * ((rcTrack.left - rc.left) / ((rc.right - rc.left) - (rcTrack.right - rcTrack.left))));
				this._moveTrackBar(rcTrack, rc);
				if (trackbar._adjust_left - rcTrackOrigin.left == 0) {
					this._mousePoint.x = nX;
					this._mousePoint.y = nY;
				}
				else {
					this._mousePoint.x = this._mousePoint.x + (trackbar._adjust_left - rcTrackOrigin.left);
					this._mousePoint.y = nY;
				}
			}
		}
		if (nNew <= nMin) {
			var posarr = this._scroll_reverse_convert(nMin);
			this.pos = posarr[0];
			this._pos = posarr[1];

			if (!(this._nTrackOver & nexacro.ScrollBar.TRACKFIRSTOVER)) {
				this.on_fire_onscroll(this.pos, "trackfirst");
				this._nTrackOver = nexacro.ScrollBar.TRACKFIRSTOVER;
			}
			else {
				this.on_fire_onscroll(this.pos, "trackfirstover");
			}
		}
		else if (nNew >= nMax) {
			var posarr = this._scroll_reverse_convert(nMax);
			this.pos = posarr[0];
			this._pos = posarr[1];

			if (!(this._nTrackOver & nexacro.ScrollBar.TRACKLASTOVER)) {
				this.on_fire_onscroll(this.pos, "tracklast");
				this._nTrackOver = nexacro.ScrollBar.TRACKLASTOVER;
			}
			else {
				this.on_fire_onscroll(this.pos, "tracklastover");
			}
		}
		else {
			var posarr = this._scroll_reverse_convert(nNew);
			this.pos = posarr[0];
			this._pos = posarr[1];

			this.on_fire_onscroll(this.pos, "track");
			this._nTrackOver = 0;
		}
	};

	_pScrollBar._getIncNewPosPixel = function () {
	};
	_pScrollBar._getDecNewPosPixel = function () {
	};


	_pScrollBar._setScrollLayout = function (min, max, page, line, pos) {
		if (pos < min) {
			pos = min;
		}
		if (pos > max) {
			pos = max;
		}

		var posarr = this._scroll_reverse_convert(min);
		this.min = posarr[0];
		this._min = posarr[1];

		posarr = this._scroll_reverse_convert(max);
		this.max = posarr[0];
		this._max = posarr[1];
		this._orgmax = max;

		posarr = this._scroll_reverse_convert(pos);
		this.pos = posarr[0];
		this._pos = posarr[1];

		this.line = line;
		this.page = page;

		this._recalcLayout();
	};

	delete _pScrollBar;

	nexacro.ScrollBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ScrollBar.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pScrollBarCtrl = nexacro.ScrollBarCtrl.prototype = nexacro._createPrototype(nexacro.ScrollBar, nexacro.ScrollBarCtrl);
	nexacro._setForTypedControlStyleFinder(_pScrollBarCtrl);

	_pScrollBarCtrl._type_name = "ScrollBarControl";
	_pScrollBarCtrl._is_focus_accept = false;

	_pScrollBarCtrl._get_css_assumedtypename = function () {
		if (this.direction == "vert") {
			return "VScrollBarControl";
		}
		else if (this.direction == "horz") {
			return "HScrollBarControl";
		}
		return this._type_name;
	};

	delete _pScrollBarCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Step) {
	nexacro.StepChangeEventInfo = function (obj, id, preindex, postindex) {
		this.id = this.eventid = id || "onstepchanged";
		this.fromobject = obj._form || obj;
		this.fromreferenceobject = obj;

		this.preindex = preindex;
		this.postindex = postindex;
	};


	var _pEventStepChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.StepChangeEventInfo);
	nexacro.StepChangeEventInfo.prototype = _pEventStepChangeEventInfo;
	_pEventStepChangeEventInfo._type_name = "StepChangeEventInfo";
	delete _pEventStepChangeEventInfo;

	nexacro.StepMouseEventInfo = function (obj, id, index, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		nexacro.ClickEventInfo.call(this, obj, id || "onstepmouse", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);

		this.index = index < 0 ? -1 : index;
	};
	var _pEventStepMouseEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.StepMouseEventInfo);
	nexacro.StepMouseEventInfo.prototype = _pEventStepMouseEventInfo;
	_pEventStepMouseEventInfo._type_name = "StepMouseEventInfo";
	delete _pEventStepMouseEventInfo;

	nexacro.StepDragEventInfo = function (obj, id, index, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		nexacro.DragEventInfo.call(this, obj, id || "onstepdrag", dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
		this.index = index ? -1 : index;
	};

	var _pEventStepDragEventInfo = nexacro._createPrototype(nexacro.DragEventInfo, nexacro.StepDragEventInfo);
	nexacro.StepDragEventInfo.prototype = _pEventStepDragEventInfo;
	_pEventStepDragEventInfo._type_name = "StepDragEventInfo";
	delete _pEventStepDragEventInfo;

	nexacro.Step_Style = function (target) {
		nexacro.Style.call(this, target);
		this._initStyle();
	};

	var _pStepStyle = nexacro._createPrototype(nexacro.Style, nexacro.Step_Style);
	nexacro.Step_Style.prototype = _pStepStyle;

	_pStepStyle._initStyle = function () {
		this.buttonalign = null;
		this.buttonbackground = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttongradation = null;
		this.buttonimage = null;
		this.buttonpadding = null;
		this.buttonsize = null;
	};

	eval(nexacro._createAlignAttributeEvalStr("_pStepStyle", "buttonalign"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pStepStyle", "buttonbackground"));
	eval(nexacro._createBorderAttributeEvalStr("_pStepStyle", "buttonborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pStepStyle", "buttonbordertype"));
	eval(nexacro._createGradationAttributeEvalStr("_pStepStyle", "buttongradation"));
	eval(nexacro._createValueAttributeEvalStr("_pStepStyle", "buttonimage"));
	eval(nexacro._createPaddingAttributeEvalStr("_pStepStyle", "buttonpadding"));
	eval(nexacro._createValueAttributeEvalStr("_pStepStyle", "buttonsize"));

	_pStepStyle.__custom_emptyObject = function () {
		this._initStyle();
	};

	_pStepStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.buttonalign && this.buttonalign._is_empty) {
			val += "buttonalign:" + this.buttonalign._value + "; ";
		}
		if (this.buttonbackground && this.buttonbackground._is_empty) {
			val += "buttonbackground:" + this.buttonbackground._value + "; ";
		}
		if (this.buttonborder && this.buttonborder._is_empty) {
			val += "buttonborder:" + this.buttonborder._value + "; ";
		}
		if (this.buttonbordertype && this.buttonbordertype._is_empty) {
			val += "buttonbordertype:" + this.buttonbordertype._value + "; ";
		}
		if (this.buttongradation && this.buttongradation._is_empty) {
			val += "buttongradation:" + this.buttongradation._value + "; ";
		}
		if (this.buttonimage && this.buttonimage._is_empty) {
			val += "buttonimage:" + this.buttonimage._value + "; ";
		}
		if (this.buttonpadding && this.buttonpadding._is_empty) {
			val += "buttonpadding:" + this.buttonpadding._value + "; ";
		}
		if (this.buttonsize && this.buttonsize._is_empty) {
			val += "buttonsize:" + this.buttonsize._value + "; ";
		}

		return val;
	};


	nexacro.Step_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		nexacro.Step_Style.prototype._initStyle.call(this);
	};

	var _pStepCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Step_CurrentStyle);
	nexacro.Step_CurrentStyle.prototype = _pStepCurrentStyle;

	_pStepCurrentStyle.__get_custom_style_value = _pStepStyle.__get_custom_style_value;
	_pStepCurrentStyle.__custom_emptyObject = _pStepStyle.__custom_emptyObject;

	delete _pStepStyle;
	delete _pStepCurrentStyle;

	nexacro.Step = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.stepcount = 0;
		this.stepindex = 0;
		this.text = "";
		this.canstepchange = null;
		this.onstepchanged = null;
		35;
		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"canstepchange" : 1, 
			"onstepchanged" : 1, 
			"onfling" : 1, 
			"onflingstart" : 1, 
			"onflingend" : 1, 
			"onpinch" : 1, 
			"onpinchstart" : 1, 
			"onpinchend" : 1, 
			"onslide" : 1, 
			"onslidestart" : 1, 
			"onslideend" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"onlongpress" : 1
		};


		this._items = [];
		this._btn_img_info = 
			{
			width : 0, 
			height : 0, 
			isimg : false
		};
		this._prestepindex = null;
		this._poststepindex = null;
		this._prestepcount = null;
		this._poststepcount = null;

		this._ischange = false;

		this._accessibility_role = "step";
	};

	var _pStep = nexacro._createPrototype(nexacro.Component, nexacro.Step);
	nexacro.Step.prototype = _pStep;
	_pStep._type_name = "Step";

	nexacro.Step._default_step_buttonalign = nexacro._getCachedStyleObj("align", "lefttext middle");

	_pStep.on_apply_custom_pseudo = function (pseudo) {
		var currentstyle = this.currentstyle;
		var align = this.on_find_CurrentStyle_align(pseudo);
		var color = this.on_find_CurrentStyle_color(pseudo);
		var cursor = this.on_find_CurrentStyle_cursor(pseudo);
		var font = this.on_find_CurrentStyle_font(pseudo);
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		var padding = this.on_find_CurrentStyle_padding(pseudo);

		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		var buttonbackground = this.on_find_CurrentStyle_buttonbackground(pseudo);
		var buttonborder = this.on_find_CurrentStyle_buttonborder(pseudo);
		var buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(pseudo);
		var buttongradation = this.on_find_CurrentStyle_buttongradation(pseudo);
		var buttonimage = this.on_find_CurrentStyle_buttonimage(pseudo);
		var buttonpadding = this.on_find_CurrentStyle_buttonpadding(pseudo);
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);

		if (align != currentstyle.align) {
			currentstyle.align = align;
		}
		if (color != currentstyle.color) {
			currentstyle.color = color;
		}
		if (font != currentstyle.font) {
			currentstyle.font = font;
		}
		if (letterspace != currentstyle.letterspace) {
			currentstyle.letterspace = letterspace;
		}
		if (padding != currentstyle.padding) {
			currentstyle.padding = padding;
		}

		if (buttonalign != currentstyle.buttonalign) {
			currentstyle.buttonalign = buttonalign;
		}
		if (buttonbackground != currentstyle.buttonbackground) {
			currentstyle.buttonbackground = buttonbackground;
		}
		if (buttonborder != currentstyle.buttonborder) {
			currentstyle.buttonborder = buttonborder;
		}
		if (buttonbordertype != currentstyle.buttonbordertype) {
			currentstyle.buttonbordertype = buttonbordertype;
		}
		if (buttongradation != currentstyle.buttongradation) {
			currentstyle.buttongradation = buttongradation;
		}
		if (buttonimage != currentstyle.buttonimage) {
			currentstyle.buttonimage = buttonimage;
		}
		if (buttonpadding != currentstyle.buttonpadding) {
			currentstyle.buttonpadding = buttonpadding;
		}
		if (buttonsize != currentstyle.buttonsize) {
			currentstyle.buttonsize = buttonsize;
		}

		this.on_apply_style_align(align);
		this.on_apply_style_color(color);
		this.on_apply_style_font(font);
		this.on_apply_style_letterspace(letterspace);
		this.on_apply_style_cursor(cursor);
		this.on_apply_style_padding(padding);
	};


	_pStep.on_find_CurrentStyle_buttonalign = function (pseudo) {
		var buttonalign = this._find_pseudo_obj("buttonalign", pseudo, "align");
		if (!buttonalign) {
			buttonalign = (this._is_subcontrol) ? nexacro.Component._default_step_align : nexacro.Step._default_step_buttonalign;
		}
		return buttonalign;
	};

	_pStep.on_find_CurrentStyle_buttonbackground = function (pseudo) {
		var buttonbackground = this._find_pseudo_obj("buttonbackground", pseudo, "background");
		return buttonbackground;
	};

	_pStep.on_find_CurrentStyle_buttonborder = function (pseudo) {
		var buttonborder = this._find_pseudo_obj("buttonborder", pseudo, "border");
		return buttonborder;
	};

	_pStep.on_find_CurrentStyle_buttonbordertype = function (pseudo) {
		var buttonbordertype = this._find_pseudo_obj("buttonbordertype", pseudo, "bordertype");
		return buttonbordertype;
	};

	_pStep.on_find_CurrentStyle_buttongradation = function (pseudo) {
		var buttongradation = this._find_pseudo_obj("buttongradation", pseudo, "gradation");
		return buttongradation;
	};

	_pStep.on_find_CurrentStyle_buttonimage = function (pseudo) {
		var buttonimage = this._find_pseudo_obj("buttonimage", pseudo);
		return buttonimage;
	};

	_pStep.on_find_CurrentStyle_buttonpadding = function (pseudo) {
		var buttonpadding = this._find_pseudo_obj("buttonpadding", pseudo, "padding");
		return buttonpadding || nexacro.Component._default_padding;
	};

	_pStep.on_find_CurrentStyle_buttonsize = function (pseudo) {
		var buttonsize = this._find_pseudo_obj("buttonsize", pseudo);
		return parseInt(buttonsize) | 0;
	};


	_pStep.on_update_style_buttonalign = function () {
		var buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo);
		this.currentstyle.buttonalign = buttonalign;
		this.on_apply_style_buttonalign(buttonalign);
	};

	_pStep.on_update_style_buttonbackground = function () {
		var buttonbackground = this.on_find_CurrentStyle_buttonbackground(this._pseudo);
		this.currentstyle.buttonbackground = buttonbackground;
		this.on_apply_style_buttonbackground(buttonbackground);
	};

	_pStep.on_update_style_buttonborder = function () {
		var buttonborder = this.on_find_CurrentStyle_buttonborder(this._pseudo);
		this.currentstyle.buttonborder = buttonborder;
		this.on_apply_style_buttonborder(buttonborder);
	};

	_pStep.on_update_style_buttonbordertype = function () {
		var buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(this._pseudo);
		this.currentstyle.buttonbordertype = buttonbordertype;
		this.on_apply_style_buttonbordertype(buttonbordertype);
	};

	_pStep.on_update_style_buttongradation = function () {
		var buttongradation = this.on_find_CurrentStyle_buttongradation(this._pseudo);
		this.currentstyle.buttongradation = buttongradation;
		this.on_apply_style_buttongradation(buttongradation);
	};

	_pStep.on_update_style_buttonimage = function () {
		var buttonimage = this.on_find_CurrentStyle_buttonimage(this._pseudo);
		this.currentstyle.buttonimage = buttonimage;
		this.on_apply_style_buttonimage(buttonimage);
	};

	_pStep.on_update_style_buttonpadding = function () {
		var buttonpadding = this.on_find_CurrentStyle_buttonpadding(this._pseudo);
		this.currentstyle.buttonpadding = buttonpadding;
		this.on_apply_style_buttonpadding(buttonpadding);
	};

	_pStep.on_update_style_buttonsize = function () {
		var buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		this.currentstyle.buttonsize = buttonsize;
		this.on_apply_style_buttonsize(buttonsize);
	};


	_pStep.on_apply_style_cursor = function (v) {
		nexacro.Component.prototype.on_apply_style_cursor.call(this, v);
		var item = this._items;
		var item_len = item.length;

		for (var i = 0; i < item_len; i++) {
			item[i].on_apply_style_cursor(v);
		}
	};

	_pStep.on_apply_style_buttonalign = function (v) {
		this.on_apply_stepcount();
	};

	_pStep.on_apply_style_buttonbackground = function (v) {
		var item = this._items;
		var item_len = item.length;

		for (var i = 0; i < item_len; i++) {
			item[i].on_apply_style_background(v);
		}
	};

	_pStep.on_apply_style_buttonborder = function (v) {
		var item = this._items;
		var item_len = item.length;

		for (var i = 0; i < item_len; i++) {
			item[i].on_apply_style_border(v);
		}
	};

	_pStep.on_apply_style_buttonbordertype = function (v) {
		var item = this._items;
		var item_len = item.length;

		for (var i = 0; i < item_len; i++) {
			item[i].on_apply_style_bordertype(v);
		}
	};

	_pStep.on_apply_style_buttongradation = function (v) {
		var item = this._items;
		var item_len = item.length;

		for (var i = 0; i < item_len; i++) {
			item[i].on_apply_style_gradation(v);
		}
	};

	_pStep.on_apply_style_buttonimage = function (v) {
		var button = this._items[this.stepindex];
		button.style.set_image(v);
	};

	_pStep.on_apply_style_buttonpadding = function (v) {
		this.on_apply_stepcount();
	};

	_pStep.on_apply_style_buttonsize = function (v) {
		this.on_apply_stepcount();
	};

	_pStep.on_apply_style_rtlimagemirroring = function (v) {
		return;
	};

	_pStep.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var curstyle = this.currentstyle;
			var info = this._btn_img_info;
			var img = this.on_find_CurrentStyle_buttonimage(this._pseudo);
			var size = 0;
			if (img) {
				size = nexacro._getImageSize(img.value, this._loadImage, this, this._getRefFormBaseUrl());
			}

			if (this.text) {
				var text_elem = new nexacro.TextBoxElement(control_elem);
				this._text_elem = text_elem;
				var halign = curstyle.align.halign == "" ? "center" : curstyle.align._halign;
				var valign = curstyle.align.valign == "" ? "middle" : curstyle.align._valign;
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementFont(curstyle.font);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(curstyle.letterspace);
			}
			if (size) {
				info.width = size.width;
				info.height = size.height;
				info.isimg = true;
			}
		}
	};

	_pStep.on_created_contents = function () {
		if (this.text || this.expr) {
			this.on_apply_text();
			var text_elem = this._text_elem;
			if (text_elem) {
				text_elem.create();
			}
		}

		if (this._btn_img_info.isimg) {
			this.on_apply_stepcount();
			this.on_apply_stepindex();
		}

		this._setEventHandler("onsize", this.__onSize);
	};

	_pStep.on_destroy_contents = function () {
		var text_elem = this._text_elem;

		this._deleteStepButton();
		if (text_elem) {
			text_elem.destroy();
		}

		this._text_elem = null;
	};

	_pStep.on_change_containerRect = function () {
	};

	_pStep.on_create_custom_style = function () {
		return new nexacro.Step_Style(this);
	};

	_pStep.on_create_custom_currentstyle = function () {
		return new nexacro.Step_CurrentStyle();
	};

	_pStep._on_getAccessibilityAdditionalLabel = function () {
		return this.stepindex + " " + this.stepcount;
	};

	_pStep.set_stepcount = function (v) {
		if (v != this.stepcount) {
			if ((+v) != (+v)) {
				v = 0;
			}
			else {
				v = parseInt(v) | 0;
			}
			this._prestepindex = this.stepindex;
			this._prestepcount = this.stepcount;

			this._poststepcount = v;

			if (this._prestepcount != this._poststepcount) {
				this.stepcount = this._poststepcount;

				if (this.stepindex >= this.stepcount) {
					this.stepindex = this.stepcount - 1;
				}

				var form = this._form;
				if (form) {
					form._apply_stepcount();
				}
				else {
					this.on_apply_stepcount();
				}
			}
		}
	};

	_pStep.set_stepindex = function (v) {
		if ((+v) != (+v)) {
			v = 0;
		}
		else {
			v = parseInt(v) | 0;
		}

		this._ischange = false;
		if (v != this.stepindex) {
			var check_count = this.stepcount <= v || v < 0;
			if (!check_count) {
				this._prestepindex = this.stepindex;
				this._poststepindex = v;

				var ret = this.on_fire_canstepchange(this);

				if (ret !== false) {
					this.stepindex = this._poststepindex;
					this.on_apply_stepindex();
					this.on_fire_onstepchanged(this);
				}
			}
		}
	};

	_pStep.on_apply_stepcount = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this._btn_img_info.isimg) {
				var item = this._items;
				var item_len = item.length;
				if (item_len > 0) {
					this._deleteStepButton();
				}
				this._drawStepButton();
			}
		}
	};

	_pStep.on_apply_stepindex = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var oldstep_idx = this._prestepindex;
			var step_idx = this.stepindex;
			if (oldstep_idx != step_idx) {
				this._changeStepIndex(oldstep_idx, step_idx);
				this._ischange = true;
			}
			else {
				this._ischange = false;
			}
		}
	};

	_pStep.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pStep.on_apply_text = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var text_elem = this._text_elem;
			if (!text_elem) {
				text_elem = new nexacro.TextBoxElement(control_elem);
				text_elem.setElementSize(this._client_width, this._client_height);
				this._text_elem = text_elem;

				if (this._is_created) {
					var currentstyle = this.currentstyle;
					var halign = currentstyle.align.halign == "" ? "center" : currentstyle.align._halign;
					var valign = currentstyle.align.valign == "" ? "middle" : currentstyle.align._valign;
					text_elem.setElementColor(currentstyle.color);
					text_elem.setElementFont(currentstyle.font);
					text_elem.setElementAlignXY(halign, valign);
					text_elem.setElementLetterSpace(currentstyle.letterspace);
					text_elem.create();
				}
			}

			var expr = this.expr;

			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var len = expr.length;
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (len == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);

				if (exprfn) {
					try {
						var val = nexacro._toString(exprfn.call(null, this));
						if (val != this.displaytext) {
							this.displaytext = val;
						}
					}
					catch (e) {
						return;
					}
				}
			}
			else {
				this.displaytext = this.text;
			}

			text_elem.setElementText(this.displaytext);
		}
	};

	_pStep.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var text_elem = this._text_elem;
		if (text_elem) {
			var _rtldirection = this._rtldirection;
			text_elem.setElementRtlDirection(_rtldirection);
			text_elem.setElementPosition(text_elem.left, text_elem.top, true);
		}
		this.on_apply_stepcount();
	};

	_pStep.on_fire_canstepchange = function (obj) {
		if (this.canstepchange && this.canstepchange._has_handlers) {
			var evt = new nexacro.StepChangeEventInfo(obj, "canstepchange", obj._prestepindex, obj._poststepindex);
			return this.canstepchange._fireCheckEvent(this, evt);
		}
	};

	_pStep.on_fire_onstepchanged = function (obj) {
		if (this.onstepchanged && this.onstepchanged._has_handlers) {
			var evt = new nexacro.StepChangeEventInfo(obj, "onstepchanged", obj._prestepindex, obj._poststepindex);
			return this.onstepchanged._fireEvent(this, evt);
		}
	};


	_pStep.getStepCount = function () {
		return this.stepcount;
	};

	_pStep.getStepIndex = function () {
		return this.stepindex;
	};

	_pStep.setStepIndex = function (v) {
		this.set_stepindex(v);
		return this._ischange;
	};

	_pStep.stepIt = function (forward, rotate) {
		var stepindex = this.stepindex;
		var max_step = this.stepcount;
		if (forward == undefined) {
			forward = true;
		}
		else {
			forward = nexacro._toBoolean(forward);
		}

		rotate = nexacro._toBoolean(rotate);
		if (forward) {
			stepindex++;
			if (stepindex >= max_step) {
				stepindex = max_step - 1;
				if (rotate) {
					stepindex = 0;
				}
			}
		}
		else {
			stepindex--;
			if (stepindex < 0) {
				stepindex = 0;
				if (rotate) {
					stepindex = max_step - 1;
				}
			}
		}
		this.set_stepindex(stepindex);
		return this._ischange;
	};


	_pStep._deleteStepButton = function () {
		var item = this._items;
		var item_len = item.length;

		for (var i = 0; i < item_len; i++) {
			item[i].destroy();
		}
		this._items = [];
	};

	_pStep._drawStepButton = function () {
		var stepcount = this.stepcount;
		if (stepcount > 0) {
			var items = this._items;
			var stepindex = this.stepindex;
			var img_info = this._btn_img_info;

			var pseudo = this._pseudo;
			var align = this.on_find_CurrentStyle_align(pseudo);
			var btn_align = this.on_find_CurrentStyle_buttonalign(pseudo);
			var btn_padding = this.on_find_CurrentStyle_buttonpadding(pseudo);

			var text = this.text;
			var font = this.on_find_CurrentStyle_font(pseudo);
			var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
			var txt_size = nexacro._getTextSize2(letterspace, text, font, null, null, null, this._rtldirection);

			var txtArea_width = txt_size[0];
			var txtArea_height = txt_size[1];

			var client_width = this._client_width;
			var client_height = this._client_height;

			var btn_size = this._getButtonSize();
			var btnArea = this._getButtonAreaSize(stepcount, btn_size);
			var btnArea_width = btnArea.width;
			var btnArea_height = btnArea.height;

			var btn_l = 0;
			var btn_t = 0;
			var btn_r = 0;
			var btn_b = 0;

			if (btn_align) {
				switch (btn_align.halign) {
					case "left":
						btn_l = btn_padding.left;
						break;
					case "lefttext":
						switch (align.halign) {
							case "left":
								btn_l = btn_padding.left;
								break;
							case "center":
								if (txtArea_width > 0) {
									btn_l = (client_width / 2) - ((btnArea_width + txtArea_width) / 2) + btn_padding.left;
								}
								else {
									btn_l = btn_padding.left;
								}
								break;
							case "right":
								btn_l = client_width - btnArea_width - txtArea_width + btn_padding.left;
								break;
						}
						break;
					case "center":
						btn_l = (client_width / 2) - (btnArea_width / 2) + btn_padding.left;
						break;
					case "right":
						btn_l = client_width - btnArea_width + btn_padding.left;
						break;
					case "righttext":
						switch (align.halign) {
							case "left":
								btn_l = txtArea_width + btn_padding.left;
								break;
							case "center":
								btn_l = (client_width / 2) - ((btnArea_width + txtArea_width) / 2) + txtArea_width + btn_padding.left;
								break;
							case "right":
								btn_l = client_width - btnArea_width + btn_padding.left;
								break;
						}
						break;
					default:
						break;
				}

				switch (btn_align.valign) {
					case "top":
						btn_t = btn_padding.top;
						break;
					case "toptext":
						switch (align.valign) {
							case "top":
								btn_t = btn_padding.top;
								break;
							case "middle":
								btn_t = (client_height / 2) - ((btnArea_height + txtArea_height) / 2) + btn_padding.top;
								break;
							case "bottom":
								btn_t = client_height - btnArea_height - txtArea_height + btn_padding.top;
								break;
						}
						break;
					case "middle":
						btn_t = (client_height / 2) - (btnArea_height / 2) + btn_padding.top - btn_padding.bottom;
						break;
					case "bottom":
						btn_t = client_height - btnArea_height + btn_padding.top;
						break;
					case "bottomtext":
						switch (align.valign) {
							case "top":
								btn_t = txtArea_height + btn_padding.top;
								break;
							case "middle":
								btn_t = (client_height / 2) - ((btnArea_height + txtArea_height) / 2) + txtArea_height + btn_padding.top;
								break;
							case "bottom":
								btn_t = client_height - btnArea_height + btn_padding.top;
								break;
						}
						break;
					default:
						break;
				}
			}

			btn_w = btn_size;
			btn_h = btn_size;

			for (var i = 0; i < stepcount; i++) {
				var stepButton = new nexacro.StepImageButtonCtrl("" + i, "absolute", btn_l, btn_t, btn_w, btn_h, null, null, this);
				stepButton._setEventHandler("onclick", this.__onStepButtonClick, this);
				stepButton.createComponent();
				stepButton.on_created();
				stepButton._setRtlDirection(this._rtldirection);

				if (i == stepindex) {
					var btn_image = this.on_find_CurrentStyle_buttonimage(pseudo);
					stepButton.style.set_image(btn_image);
				}

				items[i] = stepButton;
				btn_l = btn_l + btn_w + btn_padding.left + btn_padding.right;
			}

			this._items = items;
			this.on_apply_style_buttonbordertype(this.on_find_CurrentStyle_buttonbordertype(pseudo));
		}
	};

	_pStep._changeStepIndex = function (pre_step_idx, post_step_idx) {
		var button_image = this.on_find_CurrentStyle_buttonimage(this._pseudo);
		var pre_button = this._items[pre_step_idx];
		var post_button = this._items[post_step_idx];

		if (pre_button) {
			pre_button.style.set_image("");
		}
		if (post_button && button_image && !button_image._is_empty) {
			post_button.style.set_image(button_image);
		}
		else {
		}
	};

	_pStep._loadImage = function (url, width, height) {
		var info = this._btn_img_info;
		info.width = width;
		info.height = height;
		info.isimg = true;
		this.on_apply_stepcount();
	};

	_pStep.__onStepButtonClick = function (obj, e) {
		this.set_stepindex(obj.id);
	};

	_pStep.__onSize = function (obj, e) {
		this.on_apply_stepcount();
	};

	_pStep._getButtonSize = function () {
		var pseudo = this._pseudo;
		var img_info = this._btn_img_info;
		var btn_size = this.on_find_CurrentStyle_buttonsize(pseudo);

		if (img_info.width > btn_size || img_info.height > btn_size) {
			var max = Math.max(img_info.width, img_info.height);
			btn_size = max;
		}
		return btn_size;
	};

	_pStep._getButtonAreaSize = function (stepcount, btn_size) {
		var btn_padding = this.on_find_CurrentStyle_buttonpadding(this._pseudo);

		var btnArea_width = (btn_padding.left + btn_padding.right + btn_size) * stepcount;
		var btnArea_height = btn_padding.top + btn_padding.bottom + btn_size;

		return {
			width : btnArea_width, 
			height : btnArea_height
		};
	};

	delete _pStep;


	nexacro.StepCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Step.call(this, id, position, left, top, width, height, right, bottom, parent);


		this._is_nc_control = true;
		this._is_subcontrol = true;
		this._form = parent;
		this._refform = parent;
	};

	var _pStepCtrl = nexacro._createPrototype(nexacro.Step, nexacro.StepCtrl);
	nexacro.StepCtrl.prototype = _pStepCtrl;
	nexacro._setForControlStyleFinder(_pStepCtrl);

	_pStepCtrl._type_name = "StepControl";

	_pStepCtrl.on_created_contents = function () {
		if (this._btn_img_info.isimg) {
			this.on_apply_stepcount();
			this.on_apply_stepindex();
		}

		this.on_apply_text();
		this.on_apply_expr();

		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.create();
		}

		this.on_apply_stepcount();
	};

	_pStepCtrl.on_change_containerRect = function (width, height) {
		var control_elem = this.getElement();
		if (control_elem) {
			var form = this._form;
			if (form) {
				this.on_apply_stepcount();
			}
		}
	};

	_pStepCtrl.set_stepindex = function (v) {
		if ((+v) != (+v)) {
			v = 0;
		}
		else {
			v = parseInt(v) | 0;
		}

		if (v != this.stepindex) {
			var check_count = this.stepcount <= v || v < 0;
			if (!check_count) {
				this._prestepindex = this.stepindex;
				this._poststepindex = v;

				var ret = this._form.on_fire_canstepchange(this);

				if (ret !== false) {
					this.stepindex = this._poststepindex;
					this.on_apply_stepindex();
					this._form.on_fire_onstepchanged(this);
					return true;
				}
			}
		}
		return false;
	};

	_pStepCtrl.on_apply_stepindex = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var form = this._form;
			var oldstep_idx = this._prestepindex;
			var step_idx = this.stepindex;
			var layoutmanager = application.getLayoutManager();

			if (oldstep_idx != step_idx) {
				this._changeStepIndex(oldstep_idx, step_idx);
				if (layoutmanager) {
					layoutmanager.setStepIndex(form, step_idx);
				}
			}
		}
	};

	_pStepCtrl.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var control_elem = this.getElement();
		if (control_elem) {
			var form = this._form;
			if (form) {
				this.on_apply_stepcount();
			}
		}
	};

	_pStepCtrl._drawStepButton = function () {
		var stepcount = this.stepcount;
		if (stepcount > 0) {
			var stepindex = this.stepindex;
			var items = this._items;
			var pseudo = this._pseudo;
			var layout = this.parent;
			var client_width = this._client_width;
			var client_height = this._client_height;
			var layout_width = layout._client_width;
			var layout_height = layout._client_height;

			var btn_size = this._getButtonSize();
			var btn_padding = this.on_find_CurrentStyle_buttonpadding(pseudo);
			var step_padding = this.on_find_CurrentStyle_padding(pseudo);

			var btn_l = btn_padding.left;
			var btn_t = (((client_height - btn_size) / 2) + btn_padding.top) - btn_padding.bottom;
			var btn_w = btn_size;
			var btn_h = btn_size;

			for (var i = 0; i < stepcount; i++) {
				var stepButton = new nexacro.StepImageButtonCtrl("" + i, "absolute", btn_l, btn_t, btn_w, btn_h, null, null, this);
				stepButton._setEventHandler("onclick", this.__onStepButtonClick, this);
				stepButton.createComponent();
				stepButton.on_created();
				stepButton._setRtlDirection(this._rtldirection);

				if (i == stepindex) {
					var btn_image = this.on_find_CurrentStyle_buttonimage(pseudo);
					stepButton.style.set_image(btn_image);
				}

				items[i] = stepButton;
				btn_l = btn_l + btn_w + btn_padding.left + btn_padding.right;
			}

			this._items = items;
			this.on_apply_style_buttonbordertype(this.on_find_CurrentStyle_buttonbordertype(pseudo));
		}
	};

	_pStepCtrl._getButtonAreaSize = function (stepcount, btn_size) {
		var btn_padding = this.on_find_CurrentStyle_buttonpadding(this._pseudo);
		var step_padding = this.on_find_CurrentStyle_padding(this._pseudo);

		var btnArea_width = step_padding.left + step_padding.right;
		btnArea_width = btnArea_width + ((btn_padding.left + btn_padding.right + btn_size) * stepcount);

		var btnArea_height = step_padding.top + step_padding.bottom;
		btnArea_height = btnArea_height + btn_padding.top + btn_padding.bottom + btn_size;

		return {
			width : btnArea_width, 
			height : btnArea_height
		};
	};

	delete _pStepCtrl;
}
;
