//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.NormalDataset) {
	nexacro.NormalDataset = function (id, parent) {
		nexacro.Dataset.call(this, id, parent);

		this.url = "";
		this.arguments = "";
		this.serverdatasetid = "";
		this.firefirstcount = 0;
		this.firenextcount = 0;
		this.preload = false;

		this._is_preloaded = false;
	};

	var _pNormalDataset = nexacro._createPrototype(nexacro.Dataset, nexacro.NormalDataset);
	nexacro.NormalDataset.prototype = _pNormalDataset;

	nexacro.NormalDataset.ROWTYPE_EMPTY = 0;
	nexacro.NormalDataset.ROWTYPE_NORMAL = 1;
	nexacro.NormalDataset.ROWTYPE_INSERT = 2;
	nexacro.NormalDataset.ROWTYPE_UPDATE = 4;
	nexacro.NormalDataset.ROWTYPE_DELETE = 8;
	nexacro.NormalDataset.ROWTYPE_GROUP = 16;

	nexacro.NormalDataset.REASON_LOAD = 0;
	nexacro.NormalDataset.REASON_LOADPROCESS = 1;
	nexacro.NormalDataset.REASON_RESET = 2;
	nexacro.NormalDataset.REASON_LOADCONTENT = 3;

	nexacro.NormalDataset.REASON_ASSIGN = 10;
	nexacro.NormalDataset.REASON_COPY = 11;
	nexacro.NormalDataset.REASON_APPEND = 12;
	nexacro.NormalDataset.REASON_MERGE = 13;
	nexacro.NormalDataset.REASON_DELETE = 20;
	nexacro.NormalDataset.REASON_DELETEALL = 22;
	nexacro.NormalDataset.REASON_CLEARDATA = 23;
	nexacro.NormalDataset.REASON_CLEAR = 24;
	nexacro.NormalDataset.REASON_SORTGROUP = 30;
	nexacro.NormalDataset.REASON_FILTER = 31;
	nexacro.NormalDataset.REASON_MOVE = 32;
	nexacro.NormalDataset.REASON_EXCHANGE = 33;
	nexacro.NormalDataset.REASON_CHANGELAYOUT = 34;
	nexacro.NormalDataset.REASON_CHANGESTATUS = 40;
	nexacro.NormalDataset.REASON_ENABLEEVENT = 41;

	nexacro.NormalDataset.REASON_ROWCHANGE = 51;
	nexacro.NormalDataset.REASON_ROWINDEXCHANGE = 52;
	nexacro.NormalDataset.REASON_ROWOBJECTCHANGE = 53;

	nexacro.NormalDataset.REASON_BINDSOURCE = 90;

	_pNormalDataset.on_created = function () {
		if (this.url == "" || this.preload == false) {
			if (this.colcount > 0) {
				this._endLoad(0, "SUCCESS", 3);
			}
			else {
				this._is_loaded = true;
			}
		}

		if (!nexacro.isDesignMode && this.preload && !this._is_preloaded) {
			if (this.url && this.parent) {
				var bLoaded = false;

				var keys = [];
				keys.push("__preload");
				keys.push(this.url);
				keys.push(this.id);
				keys.push(this.serverdatasetid);
				var svcid = keys.join('_');

				var url = nexacro._getServiceLocation(this.url);

				var loadmanager = this.parent._load_manager;
				if (loadmanager) {
					var data = loadmanager.getPreloadDataModule(this.id);
					if (data) {
						var outds = this.id + "=" + this.serverdatasetid;
						var tritem = new nexacro.TransactionItem(url, this.parent, svcid, "", outds, "", 0, true);
						tritem._usewaitcursor = false;
						tritem._loadFromData(data);
						this._is_preloaded = true;
					}
				}
			}
		}

		this._defaultKeyStr = this.keystring;
		this._defaultFilterStr = this.filterstr;
	};

	_pNormalDataset.destroy = function () {
		nexacro.Dataset.prototype.destroy.call(this);
		this._refform = null;
	};

	_pNormalDataset.set_url = function (v) {
		this.url = v;
	};
	_pNormalDataset.set_arguments = function (v) {
		this.arguments = v;
	};
	_pNormalDataset.set_firefirstcount = function (v) {
		v = parseInt(v) | 0;
		if (isFinite(v)) {
			this.firefirstcount = v;
		}
	};
	_pNormalDataset.set_firenextcount = function (v) {
		v = parseInt(v) | 0;
		if (isFinite(v)) {
			this.firenextcount = v;
		}
	};
	_pNormalDataset.set_preload = function (v) {
		this.preload = v;
	};
	_pNormalDataset.set_serverdatasetid = function (v) {
		this.serverdatasetid = v;
	};

	_pNormalDataset.load = function (async, datatype) {
		var baseurl;
		if (this._refform) {
			baseurl = this._refform._getRefFormBaseUrl();
		}
		var url = nexacro._getServiceLocation(this.url, baseurl);

		if (url.length && this.parent) {
			var svcid = "__normaldataset_loadurl_" + this.id;
			var loadmanager = this.parent._load_manager;
			if (loadmanager) {
				var serverdatasetid = this.serverdatasetid;
				if (serverdatasetid == null || serverdatasetid.length == 0) {
					serverdatasetid = "output";
				}
				var outds = this.id + "=" + serverdatasetid;
				var service = nexacro._getServiceObject(this.url, true);
				loadmanager.loadDataModule(url, svcid, "", outds, this.arguments, null, async, datatype, false, service);
			}
		}
		else {
			this._endLoad(-1, "empty url", 3);
		}
	};

	_pNormalDataset.on_preload_data = function (url, errstatus, data, fireerrorcode, returncode, requesturi, locationuri, reason) {
		if (errstatus != 0) {
			application._onHttpSystemError(this, true, this, fireerrorcode, url, returncode, requesturi, locationuri, reason);
		}
		else if (data && !this._is_preloaded) {
			var keys = [];
			keys.push("__preload");
			keys.push(this.url);
			keys.push(this.id);
			keys.push(this.serverdatasetid);
			var svcid = keys.join('_');

			var outds = this.id + "=" + this.serverdatasetid;
			var tritem = new nexacro.TransactionItem(this.url, this.parent, svcid, "", outds, "", 0, true);
			tritem._usewaitcursor = false;
			tritem._loadFromData(data);
			this._is_preloaded = true;
		}
	};

	delete _pNormalDataset;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.DomParser) {
	nexacro.DomParseException = function (obj, id, level, line, column, message, description) {
		this.id = this.eventid = id || "onParseError";
		this.fromobject = this.fromreferenceobject = obj;

		this.level = level;
		this.line = line;
		this.column = column;
		this.message = message;
		this.description = description;
	};
	var _pDomParseException = nexacro._createPrototype(nexacro.Event, nexacro.DomParseException);
	nexacro.DomParseException.prototype = _pDomParseException;

	_pDomParseException._type_name = "DomParseException";

	delete _pDomParseException;


	nexacro.DomParser = function (id, parent) {
		this.id = this.name = id;
		this.parent = parent;

		this._event_list = {
			"onParseError" : 1
		};
	};

	var _pDomParser = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.DomParser);
	nexacro.DomParser.prototype = _pDomParser;

	_pDomParser._type_name = "DomParser";

	_pDomParser.on_created = nexacro._emptyFn;
	_pDomParser.parseFromString = function (strText, strMineType) {
		if (!strMineType || strMineType == "text/xml") {
			var xmlDoc = nexacro._parseXMLDocument(strText);
			if (xmlDoc) {
				var error = nexacro._getParserError(xmlDoc);
				if (error) {
					this.on_fire_onparseerror("error", error.line, error.column, error.message, error.desc);
					return null;
				}
			}

			return xmlDoc;
		}

		return null;
	};

	_pDomParser.on_fire_onparseerror = function (level, line, column, message, description) {
		if (this.onParseError && this.onParseError._has_handlers) {
			var evt = new nexacro.DomParseException(this, "onParseError", level, line, column, message, description);
			return this.onParseError._fireEvent(this, evt);
		}
		return false;
	};

	delete _pDomParser;
}
;





//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.Button) {
	nexacro.Button_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}
	};

	var _pButtonStyle = nexacro._createPrototype(nexacro.Style, nexacro.Button_Style);
	nexacro.Button_Style.prototype = _pButtonStyle;

	eval(nexacro._createValueAttributeEvalStr("_pButtonStyle", "image"));
	eval(nexacro._createAlignAttributeEvalStr("_pButtonStyle", "imagealign"));

	_pButtonStyle.__custom_emptyObject = function () {
		this.imagealign = null;
	};

	_pButtonStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.image && !this.image._is_empty) {
			val += "image:" + this.image._value + "; ";
		}
		if (this.imagealign && !this.imagealign._is_empty) {
			val += "imagealign:" + this.imagealign._value + "; ";
		}
		return val;
	};

	_pButtonStyle.setStyleValue = function (stylePropID, pseudo, value) {
		var ret = nexacro.Style.prototype.setStyleValue.call(this, stylePropID, pseudo, value);

		if (!ret) {
			if (stylePropID == "image" && pseudo != "normal") {
				ret = this._setImagePseudoStyle(stylePropID, pseudo, value);
			}
		}

		return ret;
	};

	_pButtonStyle._setImagePseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedStyleObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedStyleObj(stylePropID, value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	nexacro.Button_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.image = null;
		this.imagealign = null;
	};

	var _pButtonCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Button_CurrentStyle);
	nexacro.Button_CurrentStyle.prototype = _pButtonCurrentStyle;

	_pButtonCurrentStyle.__custom_emptyObject = _pButtonStyle.__custom_emptyObject;
	_pButtonCurrentStyle.__get_custom_style_value = _pButtonStyle.__get_custom_style_value;

	delete _pButtonStyle;
	delete _pButtonCurrentStyle;

	nexacro.Button = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.defaultbutton = false;
		this.escapebutton = false;
		this.selectStatus = false;
		this.wordwrap = "none";


		this._apply_pushed_pseudo = true;

		this._text_elem = null;
		this._img_elem = null;

		this._text_width = -1;
		this._text_height = -1;

		this._image_width = 0;
		this._image_height = 0;

		this._is_hotkey_click = false;

		this._down_code = 0;
		this._accessibility_role = "button";
	};


	var _pButton = nexacro._createPrototype(nexacro.Component, nexacro.Button);
	nexacro.Button.prototype = _pButton;

	_pButton._type_name = "Button";

	nexacro.Button._default_image_align = nexacro.Component._default_buttonimg_align;

	_pButton.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var align = this.on_find_CurrentStyle_align(pseudo);
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var image = this.on_find_CurrentStyle_image(pseudo);
		if (curstyle.image != image) {
			curstyle.image = image;
			this.on_apply_style_image(image);
		}

		var imagealign = this.on_find_CurrentStyle_imagealign(pseudo);
		if (imagealign != curstyle.imagealign) {
			curstyle.imagealign = imagealign;
			this.on_apply_style_imagealign(imagealign);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pButton.on_create_custom_style = function () {
		return new nexacro.Button_Style(this);
	};

	_pButton.on_create_custom_currentStyle = function () {
		return new nexacro.Button_CurrentStyle();
	};

	_pButton.on_find_CurrentStyle_image = function (pseudo) {
		return this._find_pseudo_obj("image", pseudo);
	};

	_pButton.on_find_CurrentStyle_imagealign = function (pseudo) {
		var align = this._find_pseudo_obj("imagealign", pseudo, "align");
		return (align) ? align : nexacro.Button._default_image_align;
	};

	_pButton.on_update_style_image = function () {
		this.on_apply_style_image(this.currentstyle.image = this.on_find_CurrentStyle_image(this._pseudo));
	};

	_pButton.on_update_style_imagealign = function () {
		this.on_apply_style_imagealign(this.currentstyle.imagealign = this.on_find_CurrentStyle_imagealign(this._pseudo));
	};

	_pButton.on_update_style_padding = function () {
		var padding = this.currentstyle.padding = this.on_find_CurrentStyle_padding(this._pseudo);
		this._control_element.setElementPadding(padding);
		this._updateClientSize(this._control_element);
	};
	_pButton.on_apply_style_color = function (color) {
		if (this._text_elem && color) {
			this._text_elem.setElementColor(color);
		}
	};

	_pButton.on_apply_style_font = function (font) {
		if (this._text_elem && font) {
			this._text_elem.setElementFont(font);
			this._text_width = -1;
			this._text_height = -1;
			if (this._img_elem) {
				var curstyle = this.currentstyle;
				if (this._img_elem && curstyle.align && curstyle.imagealign) {
					this._updateElementPositions(curstyle.align, curstyle.imagealign);
				}
			}
		}
	};

	_pButton.on_apply_style_align = function (align) {
		if (this._text_elem && align) {
			this._updateElementPositions(align, this.currentstyle.imagealign);
		}
	};

	_pButton.on_apply_style_image = function (image) {
		this._load_image(image);
		this._updateElementPositions(this.currentstyle.align, this.currentstyle.imagealign);
	};

	_pButton.on_apply_style_imagealign = function (imagealign) {
		if (this._img_elem) {
			this._updateElementPositions(this.currentstyle.align, imagealign);
		}
	};
	_pButton.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var curstyle = this.currentstyle;

			if (this.text) {
				var halign = (curstyle.align.halign == "" ? "center" : curstyle.align._halign);
				var valign = (curstyle.align.valign == "" ? "middle" : curstyle.align._valign);

				var text_elem = new nexacro.TextBoxElement(control_elem);
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementFont(curstyle.font);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(curstyle.letterspace);
				this._text_elem = text_elem;
				text_elem = null;
			}

			if (curstyle.image) {
				this._load_image(curstyle.image);
			}

			var mainform = this._getMainForm();
			if (mainform && mainform._defaultbutton == this) {
				this._setAccessibilityFlagDefaultButton(true);
			}
			mainform = null;
		}
	};

	_pButton.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var text_elem = this._text_elem;
			var img_elem = this._img_elem;
			if (img_elem) {
				img_elem.create();
			}
			if (text_elem) {
				text_elem.create();
			}
			if (this.expr) {
				this.on_apply_expr();
			}
			this.on_apply_wordwrap();

			this.on_apply_prop_rtldirection();

			text_elem = null;
			img_elem = null;
		}
		control_elem = null;
		this._preloadImage();
	};
	if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 10) {
		_pButton._preloadImage = function () {
			var pseudoarr = ["mouseover", "disabled", "focused", "pushed", "selected"];
			var pseudoarr_len = pseudoarr.length;

			for (var i = 0; i < pseudoarr_len; i++) {
				var image = this.on_find_CurrentStyle_image(pseudoarr[i]);
				var val = image ? image._value : "";

				if (val) {
					val = nexacro._getURIValue(val);
					val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());

					nexacro._getImageSize(val, function () {
					}, this, undefined, image);
				}
			}
		};
	}
	else {
		_pButton._preloadImage = function () {
		};
	}

	_pButton.destroyComponent = function () {
		if (!this._is_alive) {
			return;
		}

		var mainform = this._getMainForm();
		if (mainform) {
			if (mainform._defaultbutton == this) {
				mainform._defaultbutton = null;
			}
			if (mainform._escapebutton == this) {
				mainform._escapebutton = null;
			}
		}

		return nexacro.Component.prototype.destroyComponent.call(this);
	};

	_pButton.on_destroy_contents = function () {
		var textElem = this._text_elem;
		var imgElem = this._img_elem;
		if (textElem) {
			textElem.destroy();
			this._text_elem = null;
		}
		if (imgElem) {
			imgElem.destroy();
			this._img_elem = null;
		}
	};

	_pButton.on_change_containerRect = function (width, height) {
		var textElem = this._text_elem;
		var imgElem = this._img_elem;
		var curstyle = this.currentstyle;
		if (textElem) {
			textElem.setElementSize(width, height);
		}

		this._updateElementPositions(curstyle.align, curstyle.imagealign);
		this.on_apply_custom_pseudo(this._pseudo);
	};


	_pButton._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		return {
			want_tab : false, 
			want_return : true, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : false
		};
	};

	_pButton._img_load_completed = function (imgurl) {
		var curstyle = this.currentstyle;
		var cur_imagealign = curstyle.imagealign ? curstyle.imagealign : this.on_find_CurrentStyle_imagealign(this._pseudo);

		curstyle.imagealign = cur_imagealign;
		this._updateElementPositions(curstyle.align, cur_imagealign);
		this._img_elem.setElementImageUrl(imgurl);

		cur_imagealign = null;
		curstyle = null;
	};

	_pButton._on_loadImg = function (imgurl, w, h) {
		if (!this._is_alive) {
			return;
		}

		if (this._lastest_imgurl != imgurl) {
			return;
		}

		this._image_width = w;
		this._image_height = h;
		this._img_load_completed(imgurl);

		this.on_apply_custom_pseudo(this._pseudo);
	};

	_pButton._load_image = function (image) {
		var control_elem = this._control_element;
		if (control_elem) {
			var val = image ? image._value : "";
			if (val) {
				val = nexacro._getURIValue(val);
				val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());

				var imgElem = this._img_elem;
				if (!imgElem) {
					imgElem = new nexacro.ImageElement(control_elem);
					this._img_elem = imgElem;
					if (this._is_created) {
						imgElem.create();
					}
				}

				this._lastest_imgurl = val;
				var size = nexacro._getImageSize(val, this._on_loadImg, this, undefined, (image ? image._value : ""));
				if (size) {
					this._image_width = size.width;
					this._image_height = size.height;
					this._img_load_completed(val);
				}
				imgElem = null;
			}
			else {
				if (this._img_elem) {
					this._image_width = 0;
					this._image_height = 0;
				}
			}
		}
	};
	_pButton._updateElementPositions = function (align, imagealign) {
		if (!this._is_created_contents || !align) {
			return;
		}

		var textElem = this._text_elem;
		var imgElem = this._img_elem;

		var client_width = this._client_width;
		var client_height = this._client_height;

		var halign = (align.halign == "") ? "center" : align.halign;
		var valign = (align.valign == "") ? "middle" : align.valign;

		if (imgElem && imagealign) {
			var img_halign = imagealign.halign;
			var img_valign = imagealign.valign;

			var imgpos_x, imgpos_y;
			var imgw = this._image_width;
			var imgh = this._image_height;

			if (textElem) {
				var tw, th, textpos_x, textpos_y, pos;
				var font = this.on_find_CurrentStyle_font(this._pseudo);
				var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
				var size = nexacro._getTextSize(letterspace, this.text, font, null, null, null, this._rtldirection);

				tw = this._text_width = (size[0] < 0) ? 0 : size[0];
				th = this._text_height = size[1];

				switch (img_halign) {
					case "lefttext":
						if (halign == "left") {
							pos = 0;
						}
						else if (halign == "right") {
							pos = client_width - tw - imgw;
						}
						else {
							pos = ((client_width - tw - imgw) / 2) | 0;
						}
						pos = pos < 0 ? 0 : pos;
						imgpos_x = pos;
						pos += imgw;
						textpos_x = pos;
						halign = "left";
						break;
					case "righttext":
						if (halign == "left") {
							pos = 0;
						}
						else if (halign == "right") {
							pos = client_width - tw - imgw;
						}
						else {
							pos = ((client_width - tw - imgw) / 2) | 0;
						}
						pos = pos < 0 ? 0 : pos;
						textpos_x = pos;
						pos += tw;
						imgpos_x = pos;
						halign = "left";
						break;
					case "left":
						imgpos_x = 0;
						textpos_x = 0;
						break;
					case "right":
						pos = client_width - imgw;
						imgpos_x = pos;
						textpos_x = 0;
						break;
					default:
						pos = ((client_width - imgw) / 2) | 0;
						imgpos_x = pos;
						textpos_x = 0;
						break;
				}
				switch (img_valign) {
					case "toptext":
						if (valign == "top") {
							pos = 0;
						}
						else if (valign == "bottom") {
							pos = client_height - th - imgh;
						}
						else {
							pos = ((client_height - th - imgh) / 2) | 0;
						}
						imgpos_y = pos;
						pos += imgh;
						textpos_y = pos;
						valign = "top";
						break;
					case "bottomtext":
						if (valign == "top") {
							pos = 0;
						}
						else if (valign == "bottom") {
							pos = client_height - th - imgh;
						}
						else {
							pos = ((client_height - th - imgh) / 2) | 0;
						}
						textpos_y = pos;
						pos += th;
						imgpos_y = pos;
						valign = "top";
						break;
					case "top":
						imgpos_y = 0;
						textpos_y = 0;
						break;
					case "bottom":
						pos = client_height - imgh;
						imgpos_y = pos;
						textpos_y = 0;
						break;
					default:
						pos = ((client_height - imgh) / 2) | 0;
						imgpos_y = pos;
						textpos_y = 0;
						break;
				}

				textpos_x = textpos_x < 0 ? 0 : textpos_x;
				textpos_y = textpos_y < 0 ? 0 : textpos_y;

				textElem.setElementAlignXY(halign, valign);
				textElem.setElementPaddingXY(textpos_x, textpos_y, 0, 0);
			}
			else {
				switch (img_halign) {
					case "lefttext":
					case "righttext":
						if (halign == "left") {
							imgpos_x = 0;
						}
						else if (halign == "right") {
							imgpos_x = client_width - imgw;
						}
						else {
							imgpos_x = ((client_width - imgw) / 2) | 0;
						}
						break;
					case "left":
						imgpos_x = 0;
						break;
					case "right":
						imgpos_x = client_width - imgw;
						break;
					default:
						imgpos_x = ((client_width - imgw) / 2) | 0;
						break;
				}
				switch (img_valign) {
					case "toptext":
					case "bottomtext":
						if (valign == "top") {
							imgpos_y = 0;
						}
						else if (valign == "bottom") {
							imgpos_y = client_height - imgh;
						}
						else {
							imgpos_y = ((client_height - imgh) / 2) | 0;
						}
						break;
					case "top":
						imgpos_y = 0;
						break;
					case "bottom":
						imgpos_y = client_height - imgh;
						break;
					default:
						imgpos_y = ((client_height - imgh) / 2) | 0;
						break;
				}
			}

			imgpos_x = this._convertLeftForRtlLayout(imgpos_x, imgw);

			imgElem.setElementPosition(imgpos_x, imgpos_y, true);
			imgElem.setElementSize(imgw, imgh);
		}
		else if (textElem) {
			textElem.setElementAlignXY(halign, valign);
			textElem.setElementPaddingXY(0, 0, 0, 0);
			nexacro._updateTextElementPositions(this);
		}

		textElem = null;
		imgElem = null;
	};

	_pButton.on_apply_text = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			var text_elem = this._text_elem;
			if (!text_elem) {
				text_elem = new nexacro.TextBoxElement(control_elem);
				this._text_elem = text_elem;
				this.on_apply_wordwrap();

				var halign, valign;

				if (curstyle.align) {
					halign = (curstyle.align.halign == "" ? "center" : curstyle.align._halign);
					valign = (curstyle.align.valign == "" ? "middle" : curstyle.align._valign);
				}
				else {
					halign = "center";
					valign = "middle";
				}

				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementFont(curstyle.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(curstyle.letterspace);

				if (this._is_created) {
					text_elem.create();
				}
			}

			var expr = this.expr;
			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (expr.length == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				parser = null;
				exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);

				if (exprfn) {
					try {
						var val = nexacro._toString(exprfn.call(null, this));
						if (val != this.displaytext) {
							this.displaytext = val;
						}
					}
					catch (e) {
						return;
					}
				}
			}
			else {
				this.displaytext = this.text;
			}

			expr = null;

			text_elem.setElementText(this.displaytext);
			if (this.displaytext && this.displaytext != "") {
				this._text_width = -1;
				this._text_height = -1;
			}
			else {
				this._text_width = 0;
				this._text_height = 0;
			}

			this._updateElementPositions(curstyle.align, curstyle.imagealign);

			text_elem = null;
			curstyle = null;
			this._refreshAccessibilityValue();
		}
	};

	_pButton.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pButton.on_apply_prop_rtldirection = function () {
		var control_element = this.getElement();
		var _rtldirection = this._rtldirection;

		if (control_element) {
			control_element.setElementRtlDirection(_rtldirection);
			control_element.setElementPosition(control_element.left, control_element.top, true);
			this._updateElementPositions(this.currentstyle.align, this.currentstyle.imagealign);
		}

		var txt_elem = this._text_elem;
		if (txt_elem) {
			txt_elem.setElementRtlDirection(_rtldirection);
			txt_elem.setElementPosition(txt_elem.left, txt_elem.top, true);
		}
	};

	_pButton._on_hotkey = function (keycode, altKey, ctrlKey, shiftKey) {
		this._is_hotkey_click = true;
		this.click();
	};

	_pButton.set_defaultbutton = function (v) {
		this.defaultbutton = nexacro._toBoolean(v);

		var mainform = this._getMainForm();
		if (mainform) {
			if (nexacro._toBoolean(v) == true) {
				mainform._defaultbutton = this;
				this._setAccessibilityFlagDefaultButton(true);
			}
			else {
				if (mainform._defaultbutton == this) {
					mainform._defaultbutton = null;
					this._setAccessibilityFlagDefaultButton(false);
				}
			}
		}
	};
	_pButton.set_escapebutton = function (v) {
		this.escapebutton = nexacro._toBoolean(v);

		var mainform = this._getMainForm();
		if (mainform) {
			var is_ignore = !(this.parent == mainform || this._is_created);
			if (nexacro._toBoolean(v) == true) {
				if (!is_ignore) {
					mainform._escapebutton = this;
				}
			}
			else {
				if (mainform._escapebutton == this) {
					mainform._escapebutton = null;
				}
			}
		}
	};

	_pButton.click = function () {
		this.on_fire_onclick("none", false, false, false, false, -1, -1, -1, -1, -1, -1, this, this);
	};

	_pButton.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onkeyup.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
		var window = this._getWindow();
		var elem = window._cur_ldown_elem || window._keydown_element;

		if (key_code == 13 || key_code == 32) {
			if (!this._is_subcontrol && !this._is_hotkey_click) {
				if (elem == this._cur_ldown_elem && key_code == this._down_code) {
					this.click();
				}
			}

			if (this._apply_pushed_pseudo) {
				this._is_push = false;
				if (this._is_pushed_area) {
					this._stat_change("notpush", "normal");
					this._is_pushed_area = false;
				}
			}
			this._cur_ldown_elem = null;
		}

		this._is_hotkey_click = false;

		return ret;
	};

	_pButton._cur_ldown_elem = null;
	_pButton.on_fire_sys_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onkeydown.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
		var window = this._getWindow();
		this._cur_ldown_elem = window._cur_ldown_elem || window._keydown_element;
		this._down_code = key_code;
		if (key_code == 13 || key_code == 32) {
			if (from_refer_comp === this) {
				if (this._apply_pushed_pseudo) {
					this._stat_change("push", "pushed");
					this._is_pushed_area = true;
					this._is_push = true;
				}
			}
		}

		return ret;
	};

	_pButton.getSelectStatus = function () {
		return this.selectStatus;
	};
	_pButton.setSelectStatus = function (select) {
		var preSelect = this.selectStatus;

		if (select) {
			this._stat_change("select", "selected");
		}
		else {
			this._stat_change("notselect", "normal");
		}
		this.selectStatus = select;
		return preSelect;
	};

	_pButton.toggleSelectStatus = function () {
		var preSelect = this.selectStatus;

		this.setSelectStatus(!preSelect);

		return preSelect;
	};

	_pButton.on_getBindableProperties = function () {
		return "value";
	};

	_pButton.set_wordwrap = function (v) {
		if (typeof (v) == "string") {
			v = v.toLowerCase();
		}

		if (v != this.wordwrap) {
			this.wordwrap = v;

			this.on_apply_wordwrap();
		}
	};

	_pButton.on_apply_wordwrap = function () {
		if (this._text_elem) {
			this._text_elem.setElementWordWrap(this.wordwrap);
		}
	};

	delete _pButton;

	nexacro.ImageButton = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Button.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.defaultbutton = false;
		this.escapebutton = false;
		this.selectStatus = false;
		this._img_elem = null;

		this._apply_pushed_pseudo = true;
		this._is_simple_control = true;
	};


	var _pImageButton = nexacro._createPrototype(nexacro.Button, nexacro.ImageButton);
	nexacro.ImageButton.prototype = _pImageButton;

	_pImageButton.on_create_custom_style = function () {
		return new nexacro.Button_Style(this);
	};

	_pImageButton.on_create_custom_currentStyle = function () {
		return new nexacro.Button_CurrentStyle();
	};

	_pImageButton.on_find_CurrentStyle_image = function (pseudo) {
		return this._find_pseudo_obj("image", pseudo);
	};
	_pImageButton.on_find_CurrentStyle_imagealign = function (pseudo) {
		var align = this._find_pseudo_obj("imagealign", pseudo, "align");
		return (align) ? align : nexacro.Button._default_image_align;
	};

	_pImageButton.on_update_style_image = function () {
		this.on_apply_style_image(this.currentstyle.image = this.on_find_CurrentStyle_image(this._pseudo));
	};

	_pImageButton.on_update_style_imagealign = function () {
		this.on_apply_style_imagealign(this.currentstyle.imagealign = this.on_find_CurrentStyle_imagealign(this._pseudo));
	};

	_pImageButton.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;
		var image = this.on_find_CurrentStyle_image(pseudo);
		if (image != curstyle.image) {
			curstyle.image = image;
			this._load_image(image);
		}

		var align = this.on_find_CurrentStyle_align(pseudo);
		var imagealign = this.on_find_CurrentStyle_imagealign(pseudo);
		if (align != curstyle.align || imagealign != curstyle.imagealign) {
			curstyle.align = align;
			curstyle.imagealign = imagealign;
			this._update_align(align, imagealign);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			this.on_apply_style_rtlimagemirroring(curstyle.rtlimagemirroring = rtlimagemirroring);
		}

		curstyle = null;
	};

	_pImageButton.on_apply_style_image = function (image) {
		this._load_image(image);
	};

	_pImageButton.on_apply_style_align = function (align) {
		this._update_align(align, this.currentstyle.imagealign);
	};
	_pImageButton.on_apply_style_imagealign = function (align) {
		this._update_align(align, this.currentstyle.imagealign);
	};


	_pImageButton.on_create_contents = function () {
		var control_elem = this._control_element;
		var imgElem = new nexacro.AlignImageElement(control_elem);
		var curstyle = this.currentstyle;

		imgElem.setElementPosition(this._client_left, this._client_top);
		imgElem.setElementSize(this._client_width, this._client_height);

		this._img_elem = imgElem;

		this._update_align(curstyle.align, curstyle.imagealign);
		this._load_image(curstyle.image);

		imgElem = null;
		control_elem = null;
		curstyle = null;
	};

	_pImageButton.on_created_contents = function () {
		this._img_elem.create();
	};

	_pImageButton.on_destroy_contents = function () {
		if (this._img_elem) {
			this._img_elem.destroy();
			this._img_elem = null;
		}
	};

	_pImageButton.on_change_containerPos = function (left, top) {
		if (this._img_elem && !(this.getElement()._vml_elem)) {
			this._img_elem.setElementPosition(left, top, true);
		}
	};

	_pImageButton.on_change_containerRect = function (width, height) {
		if (this._img_elem) {
			this._img_elem.setElementSize(width, height);
		}
	};

	_pImageButton._load_image = function (image) {
		var imgElem = this._img_elem;
		if (imgElem) {
			var val = image ? image._value : "";
			if (val) {
				imgElem.setElementImageUrl(val);
			}
			else {
				imgElem.setElementImageUrl("");
			}
		}
		imgElem = null;
	};

	_pImageButton._update_align = function (align, imagealign) {
		if (align == null || imagealign == null) {
			return;
		}

		var imgElem = this._img_elem;
		if (imgElem) {
			var client_width = this._client_width;
			var client_height = this._client_height;

			var halign = align.halign == "" ? "center" : align.halign;
			var valign = align.valign == "" ? "middle" : align.valign;

			var img_halign = imagealign.halign;
			var img_valign = imagealign.valign;

			switch (img_halign) {
				case "left":
				case "right":
					halign = img_halign;
					break;
			}
			switch (img_valign) {
				case "top":
				case "bottom":
					valign = img_valign;
					break;
			}
			imgElem.setElementAlignXY(halign, valign);
		}
		imgElem = null;
	};

	_pImageButton.on_apply_text = function () {
	};
	_pImageButton.on_apply_expr = function () {
	};

	_pImageButton.on_apply_prop_rtldirection = function () {
		var control_element = this.getElement();
		var _rtldirection = this._rtldirection;

		if (control_element) {
			control_element.setElementRtlDirection(_rtldirection);
			control_element.setElementPosition(control_element.left, control_element.top, true);

			var imgElem = this._img_elem;
			if (imgElem) {
				var left = control_element.client_left;
				var top = control_element.client_top;
				var width = control_element.client_width;


				imgElem.setElementPosition(left, top, true);
			}
		}
	};

	_pImageButton.click = function () {
		this.on_fire_onclick("none", false, false, false, false, -1, -1, -1, -1, -1, -1, this, this);
	};

	_pImageButton.getSelectStatus = function () {
		return this.selectStatus;
	};

	_pImageButton.setSelectStatus = function (select) {
		var preSelect = this.selectStatus;

		if (select) {
			this._stat_change("select", "selected");
		}
		else {
			this._stat_change("notselect", "normal");
		}
		this.selectStatus = select;
		return preSelect;
	};

	_pImageButton.toggleSelectStatus = function () {
		var preSelect = this.selectStatus;

		this.selectStatus = !preSelect;
		return preSelect;
	};

	_pImageButton._setRealEnable = function (enable) {
		if (enable == undefined) {
			enable = this.enable;
		}

		if (this._real_enable != enable) {
			var control_elem = this._control_element;
			this._real_enable = enable;

			if (enable) {
				this._status = "enable";
				this._pseudo = "normal";
			}
			else {
				this._status = "disable";
				this._pseudo = "disabled";
			}

			if (this.visible && control_elem) {
				this._updateControl(control_elem, this._pseudo);
				this._updateContents(control_elem, this._pseudo);
			}
		}
	};

	delete _pImageButton;

	nexacro.ButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Button.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pButtonCtrl = nexacro.ButtonCtrl.prototype = nexacro._createPrototype(nexacro.Button, nexacro.ButtonCtrl);
	_pButtonCtrl._type_name = "ButtonControl";

	nexacro._setForControlStyleFinder(_pButtonCtrl);
	delete _pButtonCtrl;


	nexacro.TrackButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_track = true;
	};
	var _pTrackButtonCtrl = nexacro.TrackButtonCtrl.prototype = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.TrackButtonCtrl);
	delete _pTrackButtonCtrl;


	nexacro.ImageButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageButton.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pImageButtonCtrl = nexacro.ImageButtonCtrl.prototype = nexacro._createPrototype(nexacro.ImageButton, nexacro.ImageButtonCtrl);
	_pImageButtonCtrl._type_name = "ButtonControl";

	nexacro._setForControlStyleFinder(_pImageButtonCtrl);

	_pImageButtonCtrl.on_apply_pseudo = function (pseudo) {
		if (this.parent._set_real) {
			return;
		}

		var form = this.parent;
		var enable = this.enable;

		while (form != null) {
			if (form._real_enable == false || form.enable == false) {
				enable = false;
				break;
			}

			if (form.parent && !form.parent._is_application && form._getWindow() != form.parent._getWindow()) {
				break;
			}

			form = form.parent;
		}
		if (this._setEnable(enable)) {
			return;
		}

		this._pseudo = pseudo = this._getResultPseudo(this._status, pseudo);
		var control_elem = this.getElement();
		if (this.visible && control_elem) {
			this._updateControl(control_elem, pseudo);
			this._updateContents(control_elem, pseudo);
		}
		form = null;
		control_elem = null;
	};

	_pImageButtonCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	delete _pImageButtonCtrl;

	nexacro.TrackImageButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_track = true;
		this._is_scrollable_comp = false;
	};
	var _pTrackImageButtonCtrl = nexacro.TrackImageButtonCtrl.prototype = nexacro._createPrototype(nexacro.ImageButtonCtrl, nexacro.TrackImageButtonCtrl);
	delete _pTrackImageButtonCtrl;


	nexacro.StepImageButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageButton.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pStepImageButtonCtrl = nexacro._createPrototype(nexacro.ImageButton, nexacro.StepImageButtonCtrl);
	nexacro.StepImageButtonCtrl.prototype = _pStepImageButtonCtrl;

	_pStepImageButtonCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent._find_pseudo_obj("buttonbackground", pseudo, "background");
	};

	_pStepImageButtonCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent._find_pseudo_obj("buttonborder", pseudo, "border");
	};

	_pStepImageButtonCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent._find_pseudo_obj("buttonbordertype", pseudo, "bordertype");
	};

	_pStepImageButtonCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent._find_pseudo_obj("buttongradation", pseudo, "gradation");
	};

	_pStepImageButtonCtrl.on_find_CurrentStyle_padding = function (pseudo) {
	};

	_pStepImageButtonCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
	};

	_pStepImageButtonCtrl._on_getAccessibilityAdditionalLabel = function () {
		var parent = this.parent;

		if (parent) {
			var label = this.id + " " + parent.stepcount;
			return label;
		}
		parent = null;
		return "";
	};

	_pStepImageButtonCtrl._on_getAccessibilityAdditionalRole = function () {
		return " Step";
	};


	delete _pStepImageButtonCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Static) {
	nexacro.Static_Style = function (target) {
		nexacro.Style.call(this);

		if (target) {
			this._target = target;
		}
		this.linespace = null;
	};
	var _pStaticStyle = nexacro._createPrototype(nexacro.Style, nexacro.Static_Style);
	nexacro.Static_Style.prototype = _pStaticStyle;

	eval(nexacro._createValueAttributeEvalStr("_pStaticStyle", "linespace"));

	_pStaticStyle.__custom_emptyObject = function () {
		this.linespace = null;
	};

	_pStaticStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.linespace && this.linespace._is_empty) {
			val += "linespace:" + this.linespace._value + "; ";
		}
		return val;
	};

	nexacro.Static_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.linespace = null;
	};

	var _pStaticCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Static_CurrentStyle);
	nexacro.Static_CurrentStyle.prototype = _pStaticCurrentStyle;

	_pStaticCurrentStyle.__custom_emptyObject = _pStaticStyle.__custom_emptyObject;
	_pStaticCurrentStyle.__get_custom_style_value = _pStaticStyle.__get_custom_style_value;

	delete _pStaticStyle;
	delete _pStaticCurrentStyle;


	nexacro.Static = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.text = "";
		this.expr = null;
		this.wordwrap = "none";
		this.usedecorate = false;
		this.tabstop = false;

		this._text = "";
		this._expr = null;
		this._text_elem = null;
		this._decorate_text = "";
		this._decorate_link_url = "";
		this._is_focus_accept = false;
		this._accessibility_role = "static";
	};

	var _pStatic = nexacro._createPrototype(nexacro.Component, nexacro.Static);
	nexacro.Static.prototype = _pStatic;
	_pStatic._type_name = "Static";

	_pStatic.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var align = this.on_find_CurrentStyle_align(pseudo);
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var linespace = this.on_find_CurrentStyle_linespace(pseudo);
		if (linespace != curstyle.linespace) {
			curstyle.linespace = linespace;
			this.on_apply_style_linespace(linespace);
		}
	};

	_pStatic.on_apply_style_color = function (color) {
		if (this._text_elem) {
			if (color) {
				this._text_elem.setElementColor(color);
			}
			else {
				var color = new nexacro.Style_color("");
				this._text_elem.setElementColor(color);
				color = null;
			}
		}
	};

	_pStatic.on_apply_style_font = function (font) {
		if (this._text_elem) {
			this._text_elem.setElementFont(font);
		}
	};

	_pStatic.on_apply_style_align = function (align) {
		if (this._text_elem && align) {
			var halign = align.halign == "" ? "center" : align._halign;
			var valign = align.valign == "" ? "middle" : align._valign;
			this._text_elem.setElementAlignXY(halign, valign);
		}
	};

	_pStatic.on_apply_style_linespace = function (v) {
		var text_elem = this._text_elem;
		if (text_elem) {
			var lineHeight = v ? v : 0;
			var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);

			var font_size = nexacro._getTextSize2(letterspace, "Wj", this.on_find_CurrentStyle_font(this._pseudo));
			var linespace = font_size[1] + nexacro._toInt(lineHeight);
			if (this._adjust_height < linespace) {
				lineHeight = (this._adjust_height > font_size[1]) ? (this._adjust_height - font_size[1]) : 0;
			}

			text_elem.setElementLineSpace(lineHeight);
		}
	};

	_pStatic.on_find_CurrentStyle_linespace = function (pseudo) {
		return this._find_pseudo_obj("linespace", pseudo);
	};

	_pStatic.on_update_style_padding = function () {
		var padding = this.currentstyle.padding = this.on_find_CurrentStyle_padding(this._pseudo);
		this._control_element.setElementPadding(padding);
		this._updateClientSize(this._control_element);
	};

	_pStatic.on_update_style_linespace = function () {
		this.on_apply_style_linespace(this.currentstyle.linespace = this.on_find_CurrentStyle_linespace(this._pseudo));
	};

	_pStatic.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem && this.text) {
			var text_elem = new nexacro.TextBoxElement(control_elem);
			var halign = "left";
			var valign = "middle";
			var style_align = this.currentstyle.align;
			if (style_align) {
				halign = style_align.halign == "" ? "center" : style_align._halign;
				valign = style_align.valign == "" ? "middle" : style_align._valign;
			}
			this._text_elem = text_elem;
			text_elem.setElementSize(this._client_width, this._client_height);
			text_elem.setElementColor(this.currentstyle.color);
			text_elem.setElementFont(this.currentstyle.font);
			text_elem.setElementAlignXY(halign, valign);
			text_elem.setElementLetterSpace(this.currentstyle.letterspace);
			text_elem = null;
		}
		else if (control_elem && !this.text && this._text_elem) {
			this._text_elem.setParentElement(control_elem);
		}
	};

	_pStatic.on_created_contents = function () {
		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.create();

			if (this.usedecorate) {
				this.displaytext = text_elem._getElementDisplayText();
			}
		}
		if (this.expr) {
			this.on_apply_expr();
		}
		this.on_apply_wordwrap();
		this.on_apply_style_linespace(this.currentstyle.linespace);

		this.on_apply_prop_rtldirection();
	};

	_pStatic.on_destroy_contents = function () {
		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.destroy();
			this._text_elem = null;
		}
		text_elem = null;
	};

	_pStatic.on_change_containerRect = function (width, height) {
		var text_elem = this._text_elem;
		var align = this.on_find_CurrentStyle_align(this._pseudo);
		if (this._text_elem) {
			text_elem.setElementSize(width, height);
			this.on_apply_style_align(align);
		}
	};

	_pStatic.on_create_custom_style = function () {
		return new nexacro.Static_Style(this);
	};

	_pStatic.on_create_custom_currentStyle = function () {
		return new nexacro.Static_CurrentStyle();
	};

	_pStatic.on_apply_text = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var text_elem = this._text_elem;

			if (text_elem && this.usedecorate && (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) && this._is_created) {
				this._text_elem.destroy();
				this._text_elem = null;
				delete this._text_elem;
				text_elem = null;
			}

			if (!text_elem) {
				var text_elem = new nexacro.TextBoxElement(this.getElement());
				var halign = "left";
				var valign = "middle";
				var style_align = this.currentstyle.align;
				if (style_align) {
					halign = style_align.halign == "" ? "center" : style_align._halign;
					valign = style_align.valign == "" ? "middle" : style_align._valign;
				}
				this._text_elem = text_elem;
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(this.currentstyle.color);
				text_elem.setElementFont(this.currentstyle.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(this.currentstyle.letterspace);

				if (this._is_created) {
					text_elem.create();
				}

				this.on_apply_wordwrap();
				this.on_apply_style_linespace(this.currentstyle.linespace);
			}

			var val = this.text;
			var expr = this.expr;

			val = nexacro._toString(val);
			if (val && val.indexOf("\r") != -1) {
				val = val.replace(/\r/g, "");
			}

			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var len = expr.length;
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (len == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);

				if (exprfn) {
					try {
						val = nexacro._toString(exprfn.call(null, this));
						this.displaytext = val;
					}
					catch (e) {
						return;
					}
				}
			}
			else {
				this.displaytext = val;
			}

			if (this.usedecorate) {
				text_elem.setElementDecorateText(val);
				this.displaytext = text_elem._getElementDisplayText();
			}
			else {
				text_elem.decoration = "";
				text_elem.setElementText(val);
			}
			this._refreshAccessibilityValue();
		}
	};

	_pStatic.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pStatic.set_usedecorate = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usedecorate) {
			this.usedecorate = v;
			this.on_apply_usedecorate();
		}
	};

	_pStatic.on_apply_usedecorate = function () {
		this.on_apply_text();
		this.on_apply_wordwrap();
	};

	_pStatic.set_wordwrap = function (v) {
		if (v != this.wordwrap) {
			this.wordwrap = v;
			this.on_apply_wordwrap();
		}
	};

	_pStatic.on_apply_wordwrap = function () {
		if (this._text_elem) {
			this._text_elem.setElementWordWrap(this.wordwrap);
		}
	};

	_pStatic.set_linespace = function (v) {
		v = nexacro._toInt(v);

		if (v && v != this.linespace) {
			this.linespace = v;
			this.on_apply_linespace();
		}
	};
	_pStatic.on_apply_linespace = function () {
		var text_elem = this._text_elem;
		if (text_elem) {
			var lineHeight = (this.linespace < 0) ? "" : this.linespace + "px";
			text_elem.setElementLineSpace(lineHeight);
		}
	};


	_pStatic.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		if (nexacro.Browser == "Runtime" && this._text_elem) {
			this._text_elem.setElementRtlDirection(this._rtldirection);
		}
		this.on_change_containerRect(this._client_width, this._client_height);
	};

	_pStatic.on_get_prop_tabstop = function () {
		if (nexacro._enableaccessibility) {
			var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
			if (accessibility && accessibility.enable && accessibility.role == "link") {
				return true;
			}
		}
		return false;
	};

	_pStatic._isFocusAcceptable = function () {
		return nexacro._enableaccessibility;
	};

	_pStatic.on_get_style_accessibility_label = function () {
		if (this.usedecorate) {
			return this.displaytext;
		}
		else {
			return this.text;
		}
	};



	_pStatic._getUrl = function () {
		var text_elem = this._text_elem;
		if (text_elem && this.usedecorate) {
			var v = text_elem.decoration;
			if (v != this._decorate_text) {
				this._decorate_text = v;
				var len = v ? v.length : 0;
				var val = "";
				for (var i = 0; i < len; i++) {
					var c = v.charAt(i);
					if (c == '<' && v.charAt(i + 1) == 'l') {
						var quote_idx = 0;
						for (var j = i + 4; j < len; j++) {
							var ch = v.charAt(j);
							if (ch == '\'') {
								if (quote_idx != 0 && quote_idx != j) {
									break;
								}

								quote_idx = j;
								continue;
							}

							if (quote_idx != 0) {
								val += ch;
							}
						}

						break;
					}
				}

				this._decorate_link_url = val;
			}

			return this._decorate_link_url;
		}

		return "";
	};

	delete _pStatic;

	nexacro.StaticCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Static.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pStaticCtrl = nexacro.StaticCtrl.prototype = nexacro._createPrototype(nexacro.Static, nexacro.StaticCtrl);
	_pStaticCtrl._type_name = "StaticControl";

	nexacro._setForControlStyleFinder(_pStaticCtrl);

	delete _pStaticCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Edit) {
	nexacro.Edit_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}

		this.caretcolor = null;
		this.compositecolor = null;
		this.displaynulltextcolor = null;
	};

	var _pEditStyle = nexacro._createPrototype(nexacro.Style, nexacro.Edit_Style);
	nexacro.Edit_Style.prototype = _pEditStyle;

	eval(nexacro._createColorAttributeEvalStr("_pEditStyle", "caretcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pEditStyle", "compositecolor"));
	eval(nexacro._createColorAttributeEvalStr("_pEditStyle", "selectcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pEditStyle", "selectbackground"));
	eval(nexacro._createColorAttributeEvalStr("_pEditStyle", "displaynulltextcolor"));

	_pEditStyle.__custom_emptyObject = function () {
		this.caretcolor = null;
		this.compositecolor = null;
		this.selectcolor = null;
		this.selectbackground = null;
		this.displaynulltextcolor = null;
	};

	_pEditStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.caretcolor && !this.caretcolor._is_empty) {
			val += "caretcolor:" + this.caretcolor._value + "; ";
		}
		if (this.compositecolor && !this.compositecolor._is_empty) {
			val += "compositecolor:" + this.compositecolor._value + "; ";
		}
		if (this.selectcolor && !this.selectcolor._is_empty) {
			val += "selectcolor:" + this.selectcolor._value + "; ";
		}
		if (this.selectbackground && !this.selectbackground._is_empty) {
			val += "selectbackground:" + this.selectbackground._value + "; ";
		}
		if (this.displaynulltextcolor && !this.displaynulltextcolor._is_empty) {
			val += "displaynulltextcolor:" + this.displaynulltextcolor._value + "; ";
		}

		return val;
	};

	nexacro.Edit_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.caretcolor = null;
		this.compositecolor = null;
		this.selectcolor = null;
		this.selectbackground = null;
		this.displaynulltextcolor = null;
	};

	var _pEditCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Edit_CurrentStyle);
	nexacro.Edit_CurrentStyle.prototype = _pEditCurrentStyle;

	_pEditCurrentStyle.__custom_emptyObject = _pEditStyle.__custom_emptyObject;
	_pEditCurrentStyle.__get_custom_style_value = _pEditStyle.__get_custom_style_value;

	_pEditStyle = null;
	_pEditCurrentStyle = null;

	nexacro.Edit = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.value = undefined;
		this.useinputpanel = true;
		this.displaynulltext = "";
		this.readonly = false;
		this.password = false;
		this.autoselect = false;
		this.autoskip = false;
		this.maxlength = 0;
		this.usesoftkeyboard = true;
		this.inputmode = "normal";
		this.inputfilter = "none";
		this.inputtype = "normal";
		this.lengthunit = "utf16";
		this.tabindentsize = 4;
		this.imemode = "none";
		this.useime = "global";
		this.updatebindingvalue = "default";
		this.usecontextmenu = true;
		this.text = "";


		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"oneditclick" : 1, 
			"canchange" : 1, 
			"cancharchange" : 1, 
			"onchanged" : 1, 
			"onchar" : 1, 
			"ontextchange" : 1, 
			"ontextchanged" : 1, 
			"oncontextmenu" : 1, 
			"onfling" : 1, 
			"onflingstart" : 1, 
			"onflingend" : 1, 
			"onpinch" : 1, 
			"onpinchstart" : 1, 
			"onpinchend" : 1, 
			"onslide" : 1, 
			"onslidestart" : 1, 
			"onslideend" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"onlongpress" : 1
		};


		this._input_element = null;
		this._edit_base_api = new nexacro.EditNormal(this);
		this._accessibility_role = "edit";
		this._caret_pos = {
			begin : -1, 
			end : -1, 
			org_begin : -1, 
			org_end : -1
		};
		this._setcaret = false;
		this._textchanging = false;
		this._dsupdate_in_textchanging = false;
		this._dsupdate_cancel = false;
		this._activate_flag = false;
		this._has_inputElement = true;
		this._old_selection = [0, 0];
		this._lose_focus_comp = null;
		this._is_set_value = false;
	};

	var _pEdit = nexacro._createPrototype(nexacro.Component, nexacro.Edit);
	nexacro.Edit.prototype = _pEdit;
	_pEdit._type_name = "Edit";

	nexacro.Edit._default_selectcolor = nexacro._getCachedStyleObj("color", "#3e3e3eff");
	nexacro.Edit._focused_selectcolor = nexacro._getCachedStyleObj("color", "#ffffffff");
	nexacro.Edit._default_selectbackground = nexacro._getCachedStyleObj("color", "#ffffffb3");

	_pEdit.on_apply_custom_pseudo = function (pseudo) {
		if (pseudo) {
			this._pseudo = pseudo;
		}
		else if (this._pseudo) {
			pseudo = this._pseudo;
		}
		var curstyle = this.currentstyle;

		var align = this.on_find_CurrentStyle_align(pseudo) || nexacro.Component._default_left_align;
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}
		align = null;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (font != curstyle.font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		font = null;

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (letterspace != curstyle.letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		letterspace = null;

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (color != curstyle.color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(pseudo);
		if (displaynulltextcolor != curstyle.displaynulltextcolor) {
			curstyle.displaynulltextcolor = displaynulltextcolor;
			this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
		}

		color = this.on_find_CurrentStyle_caretcolor(pseudo);
		if (color != curstyle.caretcolor) {
			curstyle.caretcolor = color;
			this.on_apply_style_caretcolor(color);
		}

		color = this.on_find_CurrentStyle_compositecolor(pseudo);
		if (color != curstyle.compositecolor) {
			curstyle.compositecolor = color;
			this.on_apply_style_compositecolor(color);
		}

		color = null;

		var selectcolor = this.on_find_CurrentStyle_selectcolor(pseudo);
		if (selectcolor != curstyle.selectcolor) {
			curstyle.selectcolor = selectcolor;
			this.on_apply_style_selectcolor(selectcolor);
		}
		selectcolor = null;

		var selectbackground = this.on_find_CurrentStyle_selectbackground(pseudo);
		if (selectbackground != curstyle.selectbackground) {
			curstyle.selectbackground = selectbackground;
			this.on_apply_style_selectbackground(selectbackground);
		}
		selectbackground = null;

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
		rtlimagemirroring = null;
	};

	_pEdit.on_create_custom_style = function () {
		return new nexacro.Edit_Style(this);
	};

	_pEdit.on_create_custom_currentStyle = function () {
		return new nexacro.Edit_CurrentStyle();
	};


	_pEdit.on_find_CurrentStyle_cursor = function (pseudo) {
		var cursor = "";
		if (!this._isEnable() && this.parent && !this.parent._is_application) {
			if (!this._is_subcontrol) {
				cursor = this.parent._find_pseudo_obj("cursor", pseudo, "value");
			}
			else {
				var p = this.parent;
				while (p && p._is_form) {
					p = p.parent;
				}

				if (p) {
					cursor = p._find_pseudo_obj("cursor", pseudo, "value");
				}
				else {
					cursor = null;
				}
			}
		}
		else {
			cursor = this._find_pseudo_obj("cursor", pseudo, "value");
		}

		return (cursor) ? cursor : nexacro.Component._default_cursor;
	};

	_pEdit.on_find_CurrentStyle_align = function (pseudo) {
		var align = this._find_pseudo_obj("align", pseudo, "align");

		return (align) ? align : nexacro.Component._default_left_align;
	};

	_pEdit.on_find_CurrentStyle_caretcolor = function (pseudo) {
		return this._find_pseudo_obj("caretcolor", pseudo, "color");
	};

	_pEdit.on_find_CurrentStyle_compositecolor = function (pseudo) {
		return this._find_pseudo_obj("compositecolor", pseudo, "color");
	};

	_pEdit.on_find_CurrentStyle_selectcolor = function (pseudo) {
		var color = this._find_pseudo_obj("selectcolor", pseudo, "color");
		if (!color) {
			if (pseudo == "focused") {
				color = nexacro.Edit._focused_selectcolor;
			}
			else {
				color = nexacro.Edit._default_selectcolor;
			}
		}

		return color;
	};

	_pEdit.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		var displaynulltextcolor = this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_pseudo_obj("color", pseudo, "color");
		}
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}

		return (displaynulltextcolor) ? displaynulltextcolor : nexacro.Component._default_color;
	};

	_pEdit.on_find_CurrentStyle_selectbackground = function (pseudo) {
		var bkcolor = this._find_pseudo_obj("selectbackground", pseudo, "background");
		return (bkcolor) ? bkcolor : nexacro.Edit._default_selectbackground;
	};


	_pEdit.on_update_style_cursor = function () {
		var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
		this.currentstyle.cursor = cursor;
		this.on_apply_style_cursor(cursor);
	};

	_pEdit.on_update_style_caretcolor = function () {
		var caretcolor = this.on_find_CurrentStyle_caretcolor(this._pseudo);
		this.currentstyle.caretcolor = caretcolor;
		this.on_apply_style_caretcolor(caretcolor);
	};

	_pEdit.on_update_style_compositecolor = function () {
		var compositecolor = this.on_find_CurrentStyle_compositecolor(this._pseudo);
		this.currentstyle.compositecolor = compositecolor;
		this.on_apply_style_compositecolor(compositecolor);
	};

	_pEdit.on_update_style_selectcolor = function () {
		var selectcolor = this.on_find_CurrentStyle_selectcolor(this._pseudo);
		this.currentstyle.selectcolor = selectcolor;
		this.on_apply_style_selectcolor(selectcolor);
	};

	_pEdit.on_update_style_displaynulltextcolor = function () {
		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(this._pseudo);
		this.currentstyle.displaynulltextcolor = displaynulltextcolor;
		this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
	};

	_pEdit.on_update_style_selectbackground = function () {
		var selectbackground = this.on_find_CurrentStyle_selectbackground(this._pseudo);
		this.currentstyle.selectbackground = selectbackground;
		this.on_apply_style_selectbackground(selectbackground);
	};


	_pEdit.on_apply_style_color = function (color) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementColor(color);
		}
	};

	_pEdit.on_apply_style_font = function (font) {
		if (font == null) {
			this.currentstyle.font = nexacro.Component._default_font;
		}

		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementFont(font);
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pEdit.on_apply_style_cursor = function (cursor) {
		var control_elem = this.getElement();
		if (control_elem) {
			control_elem.setElementCursor(cursor);

			var input_elem = this._input_element;
			if (input_elem) {
				input_elem.setElementCursor(cursor);
			}
		}
	};

	_pEdit.on_apply_style_align = function (align) {
		if (align == null) {
			align = nexacro.Component._default_left_align;
		}

		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pEdit.on_apply_style_caretcolor = function (color) {
	};

	_pEdit.on_apply_style_compositecolor = function (color) {
	};

	_pEdit.on_apply_style_selectbackground = function (selectbackground) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSelectBackgroundColor(selectbackground);
		}
	};

	_pEdit.on_apply_style_selectcolor = function (selectcolor) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSelectColor(selectcolor);
		}
	};

	_pEdit.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		if (this._input_element) {
			this._input_element.setElementAccessibilityRole(accessibility.role);
		}
	};

	_pEdit.on_apply_style_displaynulltextcolor = function (displaynulltextcolor) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementDisplayNullTextColor(displaynulltextcolor);
		}
	};

	_pEdit.on_apply_style_letterspace = function (letterspace) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementLetterSpace(letterspace);
		}
	};

	_pEdit.on_create_contents = function () {
		var control = this.getElement();
		if (control) {
			var curstyle = this.currentstyle;
			var input_elem = this._input_element = new nexacro.InputElement(control);

			input_elem.setElementSize(this._client_width, this._client_height);
			input_elem.setElementFont(curstyle.font);
			input_elem.setElementColor(curstyle.color);
			input_elem.setElementAlign(curstyle.align);
			input_elem.setElementSelectColor(curstyle.selectcolor);
			input_elem.setElementSelectBackgroundColor(curstyle.selectbackground);
			input_elem.setElementDisplayNullTextColor(curstyle.displaynulltextcolor);
		}
	};

	_pEdit.on_created_contents = function () {
		var input_elem = this._input_element;
		var api = this._edit_base_api;

		if (input_elem) {
			var val = nexacro._toString(this.value);
			var curstyle = this.currentstyle;

			input_elem.setElementReadonly(this.readonly);
			input_elem.setElementMaxLength(this.maxlength);
			input_elem.setElementUseIme(this.useime);
			input_elem.setElementImeMode(this.imemode);
			input_elem.setElementEnable(this._isEnable());

			if (this.password) {
				input_elem.setElementPassword(this.password);
			}
			else {
				input_elem.setElementInputType(this.inputtype);
				input_elem.setElementInputTypeKeypad(this.inputtype);
			}

			if (api) {
				api.setValue(val);
				api._setFocusValue();
			}

			input_elem.create();
			this.on_apply_style_letterspace(curstyle.letterspace);
			this.on_apply_lengthunit();
			input_elem._bindEvent(input_elem);

			if (api) {
				api.setPosition();
			}


			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
				input_elem._setElementInputLabel();
			}

			this.on_apply_prop_rtldirection();
			this.on_apply_displaynulltext();

			if (curstyle && curstyle.cursor) {
				this.on_apply_style_cursor(curstyle.cursor);
			}

			this.on_apply_prop_class();
		}
	};

	_pEdit.on_destroy_contents = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem._unBindEvent();
			input_elem.destroy();
			this._input_element = null;
		}

		var api = this._edit_base_api;
		if (api) {
			api._destroy();
			this._edit_base_api = null;
		}

		this._caret_pos = null;
	};

	_pEdit.on_change_containerRect = function (width, height) {
		var input_elem = this._input_element;
		var api = this._edit_base_api;
		if (input_elem && api) {
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pEdit.on_getBindableProperties = function () {
		return "value";
	};

	_pEdit.on_apply_prop_enable = function (v) {
		var input_elem = this._input_element;
		if (input_elem) {
			if (!v) {
				var pos = input_elem.getElementCaretPos();
				if (pos != -1 && pos.begin != pos.end) {
					input_elem.setElementSetSelect(0);
				}
			}

			input_elem.setElementEnable(v);
			this.on_apply_style_cursor(this.currentstyle.cursor);
		}
	};

	_pEdit.on_apply_custom_setfocus = function (evt_name) {
		var input_elem = this._input_element;
		var api = this._edit_base_api;

		if (api && input_elem) {
			api._changeFocusText(input_elem);
			api._bChangeFocusText = true;

			if (evt_name != "lbuttondown" && this._old_selection[0] != this._old_selection[1]) {
				input_elem.setElementSetSelect(this._old_selection[0], this._old_selection[1]);
			}
			else if (nexacro.Browser != "MobileSafari" && !this.autoselect) {
				if ((nexacro.Browser == "Gecko" && !evt_name) || nexacro.Browser == "Safari") {
					input_elem.setElementFocus();
				}
				if (!((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Runtime") && evt_name == "lbuttondown")) {
					if (this._setcaret) {
						this._setcaret = false;
					}
					this.setCaretPos(api._input_begin_pos);
				}
			}

			if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
				api._accept_blur_event = false;
				api._do_focus = true;
			}

			if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "Safari") && evt_name == "lbuttondown" && !this._is_subcontrol) {
				input_elem.setScrollLeft(0);
			}

			if (nexacro.OS == "iOS" && nexacro.SystemType == "iphone" && !this.readonly && !this.password) {
				var keypad_type = input_elem._keypad_type;
				var text = this.text;

				if (keypad_type == "number" && text) {
					if (!nexacro.isNumeric(text)) {
						keypad_type = "text";
					}
				}

				input_elem.setElementInputType(keypad_type, true);

				if (api._is_selected()) {
					api._accept_blur_event = false;
					input_elem.setElementBlur();
				}

				if (this.autoselect) {
					var selecttext = api._select_text = api._text;
					var pThis = this;
					nexacro.OnceCallbackTimer.callonce(pThis, function () {
						api._is_apply_autoselect = true;
						api.setElementCaretPos(0, selecttext.length, input_elem);
					}, 500);
				}

				if (api._is_selected()) {
					api._accept_focus_event = false;
					input_elem.setElementFocus();
					api._accept_focus_event = true;
				}
			}

			var _apply_focus = true;

			if (nexacro.OS == "iOS") {
				var _form = this._getForm();
				if (_form && _form.stepcontrol) {
					if (this.positionstep != _form.stepcontrol.stepindex) {
						_apply_focus = false;
					}
				}
			}

			if (_apply_focus) {
				input_elem.setElementFocus();
			}

			if (this._is_set_value) {
				this._is_set_value = false;
			}
		}
	};

	_pEdit.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			var api = this._edit_base_api;
			if (api) {
				if (api._undoStack) {
					api._undoStack.init();
				}
			}

			this._setValue(undefined);
			return true;
		}
	};

	_pEdit.on_change_bindSource = function (propid, ds, row, col, index) {
		if (propid == "value") {
			var v = ds.getColumn(row, col);
			var api = this._edit_base_api;
			var input_elem = this._input_element;

			if (v && v instanceof nexacro.Decimal) {
				v = v.toString();
			}

			if (api) {
				var focus_val = api._getFocusValue();
				if (input_elem) {
					if (v === this.value && v === api._value && v === input_elem.value) {
						if (focus_val != v) {
							api._setFocusValue();
						}
						return true;
					}
					if (this._textchanging && v == this.value) {
						return true;
					}
				}
				if (api._is_composition && api._is_composition()) {
					return true;
				}
				if (api._undoStack) {
					api._undoStack.init();
				}
			}

			this._setValue(v);

			if (api) {
				if (focus_val != v) {
					api._setFocusValue();
				}
				api._updateCaretPos();
			}

			return true;
		}

		return false;
	};


	_pEdit.on_get_style_accessibility_label = function () {
		var label = "";
		return label;
	};

	_pEdit._on_getAccessibilityAdditionalLabel = function () {
		if (this._edit_base_api) {
			return this._edit_base_api._on_getAccessibilityAdditionalLabel();
		}
	};

	_pEdit._getAccessibilityReadLabel = function (bwholeread) {
		var _readlabel = nexacro.Component.prototype._getAccessibilityReadLabel.call(this);
		if (bwholeread && this._input_element && this._status != "focus") {
			if (!this._input_element._wantAccessibilityAdditionalLabel
				 || !this._input_element._wantAccessibilityAdditionalLabel()) {
				_readlabel = this.text + " " + _readlabel;
			}
		}
		return _readlabel;
	};

	_pEdit._getAccessibilityRole = function (accessibility) {
		var role = nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
		if (nexacro._accessibilitytype == 4) {
			return "";
		}
		else {
			return role;
		}
	};

	_pEdit._setAccessibilityStatFocus = function (evt_name) {
		if (this._input_element) {
			var role = this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo));
			if (this._getDescLevel() == "none") {
				role = "none";
			}
			this._input_element.setElementAccessibilityRole(role);
		}
		return nexacro.Component.prototype._setAccessibilityStatFocus.call(this, evt_name);
	};

	_pEdit._setAccessibilityNotifyEvent = function (direction) {
		if (this._edit_base_api) {
			this._edit_base_api._setAccessibilityNotifyLabel();
		}
		return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
	};

	_pEdit.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var api = this._edit_base_api;
		if (api) {
			api.setPosition();
		}
		if (this._input_element) {
			this._input_element.setElementRtlDirection(this._rtldirection);
		}
	};

	_pEdit.set_text = function (v, checkbind) {
	};

	_pEdit.set_value = function (v) {
		var org_value = v;
		var api = this._edit_base_api;

		v = nexacro._toString(v);
		if (v && v !== undefined && v != "") {
			v = v.replace(/&quot;/g, "\"");
		}

		if (v !== this.value) {
			var form = this._getRootForm();
			this._is_set_value = true;
			if (!this.applyto_bindSource("value", v)) {
				var form = this._getRootForm();
				if (form && form._bind_manager) {
					var _bind_item = form._bind_manager._FindBindItem(this, "value");

					if (!_bind_item && this._bind_event && this.parent instanceof nexacro.Div) {
						_bind_item = this._bind_event._sys_handlers[0].target._FindBindItem(this, "value");
					}

					if (_bind_item) {
						var ds = _bind_item._dataset;
						var row_idx = ds.rowposition;
						var col = ds._getDataColIndex(_bind_item.columnid);
						var val = ds.getColumn(row_idx, col);
						this._setValue(val);
					}
					delete _bind_item;
					_bind_item = null;
				}
				delete form;
				form = null;
				return;
			}

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (api) {
					var old_keyinput_event = api._accept_keyinput_event;
					api._accept_keyinput_event = false;

					this._setValue(v);
					api._accept_keyinput_event = old_keyinput_event;
				}
				else {
					this._setValue(v);
				}

				if (nexacro.BrowserVersion <= 8) {
					if (form && form._bFireLoadEvent) {
						this._recreateInputElement();
					}
				}
			}
			else {
				this._setValue(v);
			}

			if (api) {
				api._setFocusValue();
				api._updateCaretPos();
			}

			if (typeof org_value == "number") {
				this.value = parseFloat(v);
			}
		}
		else {
			var elem = this._input_element;
			if (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") {
				if (v !== api._value) {
					this._is_set_value = true;
					this.on_apply_value();
				}
				else {
					if (api._keycode == nexacro.Event.KEY_DELETE || api._keycode == nexacro.Event.KEY_BACKSPACE) {
						if (v !== api._text) {
							this._is_set_value = true;
							this.on_apply_value();
						}
					}
					else {
						if (elem && v !== elem.getElementValue()) {
							this._is_set_value = true;
							this.on_apply_value();
						}
					}
				}
			}
			else {
				if (api._keycode == nexacro.Event.KEY_DELETE || api._keycode == nexacro.Event.KEY_BACKSPACE) {
					if (v !== api._text) {
						this._is_set_value = true;
						this.on_apply_value();
					}
				}
				else {
					if (elem && v !== elem.getElementValue()) {
						this._is_set_value = true;
						this.on_apply_value();
					}
				}
			}
		}
	};

	_pEdit.on_apply_value = function () {
		var api = this._edit_base_api;

		if (api) {
			api.setValue(this.value);
			api.syncValue();
		}
		this._refreshAccessibilityValue();
	};

	_pEdit.set_displaynulltext = function (v) {
		var isNull = nexacro._isNull(v);
		if (isNull) {
			v = "";
		}
		else {
			v = nexacro._toString(v);
			v = v.replace(/&quot;/g, "\"");
		}

		if (v != this.displaynulltext) {
			this.displaynulltext = v;
			this.on_apply_displaynulltext();
		}
	};

	_pEdit.on_apply_displaynulltext = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementDisplayNullText(this.displaynulltext);
		}
	};

	_pEdit.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pEdit.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementReadonly(v);
		}
	};

	_pEdit.set_autoselect = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoselect) {
			this.autoselect = v;
		}
	};

	_pEdit.set_autoskip = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoskip) {
			this.autoskip = v;
		}
	};

	_pEdit.on_apply_autoskip = function () {
		var root_comp = this._getRootComponent(this);
		var next_comp = this._refform.getNextComponent(root_comp, true);
		var api = root_comp._edit_base_api ? root_comp._edit_base_api : null;


		if (next_comp && api && !api._is_composition()) {
			next_comp.setFocus();
			api = next_comp._edit_base_api ? next_comp._edit_base_api : null;
			if (api) {
				if (!next_comp.autoselect) {
					next_comp.setCaretPos(0);
				}
			}
		}
	};

	_pEdit.set_usesoftkeyboard = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usesoftkeyboard) {
			this.usesoftkeyboard = v;
			this.on_apply_usesoftkeyboard();
		}
	};

	_pEdit.on_apply_usesoftkeyboard = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementUseSoftKeyboard(this.usesoftkeyboard);
		}
	};

	_pEdit.set_imemode = function (v) {
		v = nexacro._toString(v);
		this.imemode = v;
		this.on_apply_imemode();
	};

	_pEdit.on_apply_imemode = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementImeMode(this.imemode);
		}
	};

	_pEdit.set_inputmode = function (v) {
		v = nexacro._toString(v);
		if (v && v != this.inputmode) {
			this.inputmode = v;
		}
	};

	_pEdit.set_inputfilter = function (v) {
		v = nexacro._toString(v);
		if (v && v != this.inputfilter) {
			this.inputfilter = v;
			this.on_apply_inputfilter();
		}
	};

	_pEdit.on_apply_inputfilter = function () {
		var api = this._edit_base_api;
		if (api) {
			api.setInputfilter(this.inputfilter);
		}
	};

	_pEdit.set_inputtype = function (v) {
		v = nexacro._toString(v);
		if (v == "") {
			v = "normal";
		}

		if (v && v != this.inputtype) {
			this.inputtype = v;
			this.on_apply_inputtype();
		}
	};

	_pEdit.on_apply_inputtype = function () {
		var api = this._edit_base_api;
		if (api) {
			api.setInputType(this.inputtype);
			api._apply_elementtype(this._input_element);
		}
	};

	_pEdit.set_lengthunit = function (v) {
		if (v != this.lengthunit) {
			this.lengthunit = v;
			this.on_apply_lengthunit();
		}
	};

	_pEdit.on_apply_lengthunit = function () {
		var api = this._edit_base_api;
		if (api) {
			api.setLengthunit(this.lengthunit);
		}
	};

	_pEdit.set_maxlength = function (v) {
		v = nexacro._toInt(v);
		if (v < 0) {
			v = 0;
		}

		if (v != this.maxlength) {
			this.maxlength = v;
			this.on_apply_maxlength();
		}
	};

	_pEdit.on_apply_maxlength = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementMaxLength(this.maxlength);
		}
	};

	_pEdit.set_password = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.password) {
			this.password = v;
			this.on_apply_password();
		}
	};

	_pEdit.on_apply_password = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementPassword(this.password);
		}
	};

	_pEdit.set_useime = function (v) {
		v = nexacro._toString(v);

		this.useime = v;
		this.on_apply_useime();
	};

	_pEdit.on_apply_useime = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementUseIme(this.useime);
		}
	};

	_pEdit.set_useinputpanel = function (v) {
	};

	_pEdit.set_tabindentsize = function (v) {
	};

	_pEdit.set_updatebindingvalue = function (v) {
	};

	_pEdit.set_usecontextmenu = function (v) {
		v = nexacro._toBoolean(v);

		if (this.usecontextmenu != v) {
			this.usecontextmenu = v;
		}
	};

	_pEdit.getLength = function (v) {
		var api = this._edit_base_api;
		if (api) {
			if (!v) {
				v = this.lengthunit;
			}

			return api.getLength(this._input_element, this.value, false, null, v);
		}

		return -1;
	};

	_pEdit.getCaretPos = function () {
		if (this.readonly) {
			return -1;
		}

		var input_elem = this._input_element;
		if (input_elem) {
			if (!input_elem._checkActiveElement()) {
				return -1;
			}

			var pos = input_elem.getElementCaretPos();
			if (pos && pos != -1) {
				var api = this._edit_base_api;
				if (api && api._is_composition()) {
					return pos.end;
				}
				else {
					return pos.begin;
				}
			}
		}

		return -1;
	};

	_pEdit.getInputElementAttribute = function (attribute) {
		var input_elem = this._input_element;
		if (input_elem) {
			return input_elem.getInputElementAttribute(attribute);
		}

		return undefined;
	};

	_pEdit.setInputElementAttribute = function (attribute, attrvalue) {
		var input_elem = this._input_element;
		if (input_elem) {
			return input_elem.setInputElementAttribute(attribute, attrvalue);
		}

		return false;
	};

	_pEdit.setCaretPos = function (v) {
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			this._caret_pos.org_begin = v;
			this._caret_pos.org_end = v;

			if (arguments.length == 0) {
				v = 0;
			}
			else {
				v = nexacro._toInt(v);
				if (v == -1) {
					if (v && this.value != undefined) {
						v = this.value.length;
					}
					else {
						v = 0;
					}
				}
			}

			input_elem.setElementSetSelect(v, v);
			api._input_begin_pos = api._begin_pos = api._end_pos = v;
			this._caret_pos.begin = v;
			this._caret_pos.end = v;
			this._setcaret = true;

			return true;
		}

		return false;
	};

	_pEdit.getSelect = function () {
		var api = this._edit_base_api;
		if (api) {
			var start = api._begin_pos !== undefined ? api._begin_pos : 0;
			var end = api._end_pos !== undefined ? api._end_pos : 0;
			return [start, end];
		}
		else {
			return [0, 0];
		}
	};

	_pEdit.setSelect = function (start, end) {
		var input_elem = this._input_element;
		if (input_elem) {
			var api = this._edit_base_api;
			var txt = this.text ? this.text : "";
			var txt_len = txt.length;

			this._caret_pos.org_begin = start;
			this._caret_pos.org_end = end;

			if (nexacro._isNull(start) || start === "") {
				start = 0;
			}
			if (nexacro._isNull(end) || end === "") {
				end = -1;
			}

			if (!nexacro._isNumber(start)) {
				start = nexacro._toInt(start);
			}
			if (!nexacro._isNumber(end)) {
				end = nexacro._toInt(end);
			}

			if (start == -1) {
				start = txt_len;
			}
			if (end == -1) {
				end = txt_len;
			}

			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}

			api._begin_pos = start;
			api._end_pos = end;
			this._caret_pos.begin = start;
			this._caret_pos.end = end;
			this._setcaret = true;

			if (input_elem._checkActiveElement()) {
				input_elem.setElementSetSelect(start, end);
			}
			else {
				input_elem.setElementSetSelect(start, end);
			}

			return true;
		}

		return false;
	};

	_pEdit.getSelectedText = function () {
		var api = this._edit_base_api;
		var elem = this._input_element;
		if (api) {
			var start = api._begin_pos !== undefined ? api._begin_pos : 0;
			var end = api._end_pos !== undefined ? api._end_pos : 0;
			var txt = api._getText();


			if (txt && (start != end)) {
				return txt.substring(start, end);
			}
			else {
				return "";
			}
		}

		return "";
	};

	_pEdit.setSelectedText = function (v) {
		v = nexacro._toString(v);
		var api = this._edit_base_api;
		var elem = this._input_element;

		if (api) {
			if (!elem._is_focused) {
				elem._bFireSelectEvent = false;
				elem.setElementSetSelect(this._old_selection[0], this._old_selection[1]);
			}

			var ret = api.setSelectText(this._input_element, v);

			if (ret && !elem._is_focused) {
				var focus_text = api._getFocusText();
				var focus_val = api._getFocusValue();
				var cur_text = api._getText();
				var cur_val = api._getValue();

				this._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);

				this._restoreSelect();
				this._cancelSelect();
			}

			elem._bFireSelectEvent = true;

			return ret;
		}

		return "";
	};

	_pEdit.isAboveSelected = function () {
	};

	_pEdit.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		var ret = this.applyto_bindSource("value", this.value);
		if (this._textchanging) {
			this._dsupdate_in_textchanging = true;
			if (!ret) {
				this._dsupdate_cancel = true;
			}
			else {
				this._dsupdate_cancel = false;
			}
		}
		else {
			this._dsupdate_in_textchanging = false;
		}
		return ret;
	};

	_pEdit._on_activate = function () {
		if (!this._isSelected()) {
			this._stat_change("focus", "normal");
		}

		this._activate_flag = true;
	};

	_pEdit._on_killfocus = function (obj, fromObj) {
		if (!this._is_alive) {
			return;
		}

		var api = this._edit_base_api;
		var elem = this._input_element;

		if (api && elem) {
			var focus_text = api._getFocusText();
			var focus_val = api._getFocusValue();
			var cur_text = api._getText();
			var cur_val = api._getValue();

			if (this._activate_flag) {
				this._activate_flag = false;
			}


			var elem_val = elem.getElementValue();
			if (((nexacro.Browser == "IE" && (nexacro.BrowserVersion == 8 || nexacro.BrowserVersion == 9) && nexacro.SystemLang != "ja") || 
				nexacro.OS == "iOS") && elem_val != cur_val) {
				api._setText(elem_val);
				api._setValue(elem_val);
				api.syncValue();
				cur_text = api._getText();

				if (nexacro.OS == "iOS" && api._is_composition && api._is_composition()) {
					if (api._is_hangul(cur_text)) {
						this._on_input_compositionend("");
					}
					else {
						api._skip_set_caret = true;
					}
				}
			}

			if ((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") && !elem._is_focused) {
				if (focus_text != cur_text) {
					this._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);
					this.applyto_bindSource("value", this.value);
				}
				return;
			}

			api._is_on_killfocus = true;
			this._on_input_blur(elem);

			elem_val = elem.getElementValue();
			if (nexacro.Browser == "Gecko" && elem_val != cur_val) {
				api._setText(elem_val);
				api._setValue(elem_val);
				api.syncValue();
			}

			focus_text = api._getFocusText();
			focus_val = api._getFocusValue();
			cur_text = api._getText();
			cur_val = api._getValue();


			if (api._skip_set_caret) {
				api._skip_set_caret = false;
			}
			api._is_on_killfocus = false;

			if (focus_text != cur_text) {
				var win = this._getWindow();
				if (win && win._is_active_window != true && !obj) {
					elem.setElementValue(api._value, false, true);
					return;
				}

				var ret = this._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);
				if (!ret) {
					return;
				}
			}
			else if (focus_val === undefined && focus_text == cur_text) {
				api._setValue(undefined);
				api._setText("");
				api.syncValue();

				elem.setElementValue(api._value);
			}
			else {
				elem.setElementValue(api._value, false, true);
			}

			this._restoreSelect();

			var isRuntimeDisable = (nexacro.Browser == "Runtime" && !elem.enable) ? true : false;
			if (isRuntimeDisable) {
				elem.setElementEnable(true);
			}

			this._cancelSelect();

			if (isRuntimeDisable) {
				elem.setElementEnable(false);
			}

			if ((nexacro.Browser == "IE" || nexacro.BrowserType == "Edge" || nexacro.Browser == "Gecko") && 
				nexacro._isNull(this.value) && this.displaynulltext) {
				elem._setInputVisible(false);
			}
		}
	};

	_pEdit._cancelSelect = function () {
		var api = this._edit_base_api;

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Gecko") {
			if (api._is_selected()) {
				if (this.visible) {
					var form = this._getRootForm();
					var form_elem = form.getElement();

					if (form.vscrollbar) {
						form_elem._recover_vpos = form.vscrollbar.pos;
					}
					if (form.hscrollbar) {
						form_elem._recover_hpos = form.hscrollbar.pos;
					}

					var input_handle = this._input_element._input_handle;
					var _doc = this._input_element.getRootWindowHandle();

					this._input_element.setElementSetSelect(api._begin_pos, api._begin_pos);
					nexacro._inputsetCaretPos(input_handle, _doc);

					if (nexacro.BrowserVersion <= 8) {
						form_elem._recover_vpos = undefined;
						form_elem._recover_hpos = undefined;
					}
				}
				else {
					this.setCaretPos(api._begin_pos);
				}
			}
		}
		else if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			if (api._is_selected()) {
				this.setCaretPos(api._begin_pos);
			}
		}
	};

	_pEdit._restoreSelect = function () {
		this._old_selection = this.getSelect();

		this._caret_pos.begin = this._old_selection[0];
		this._caret_pos.end = this._old_selection[1];
	};

	_pEdit._on_click = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		if (this.visible && this._isEnable() && this.enableevent) {
			var caretPos = this.getCaretPos();
			var clientXY = this._getClientXY(canvasX, canvasY);

			this.on_fire_oneditclick(this, caretPos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, this);
		}
	};

	_pEdit._on_input_keyinput = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_keyinput(elem);
			api._on_input_keyinput_after();
		}
	};

	_pEdit._on_input_focus = function (elem, target) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_focus(elem, target);
		}
	};

	_pEdit._on_input_blur = function (elem, target) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_blur(elem, target);
		}
	};

	_pEdit._on_input_keydown = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;

		if (api) {
			bRet = api._on_input_keydown(elem, keyCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pEdit._on_input_keyup = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keyup(elem, keyCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pEdit._on_input_keypress = function (elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keypress(elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pEdit._on_input_mousedown = function (elem, altKey, ctrlKey, shiftKey, metaKey) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mousedown(elem, altKey, ctrlKey, shiftKey, metaKey);
		}
	};

	_pEdit._on_input_mouseup = function (elem, altKey, ctrlKey, shiftKey, metaKey) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mouseup(elem, altKey, ctrlKey, shiftKey, metaKey);
		}
	};

	_pEdit._on_input_mousemove = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mousemove(elem);
		}
	};

	_pEdit._on_input_touchstart = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchstart(elem);
		}
	};

	_pEdit._on_input_touchmove = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchmove(elem);
		}
	};

	_pEdit._on_input_touchend = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchend(elem);
		}
	};

	_pEdit._on_input_select = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_select(elem);
		}
	};

	_pEdit._on_input_selectionchange = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_selectionchange(elem);
		}
	};

	_pEdit._on_input_copy = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_copy(elem);
		}
	};

	_pEdit._on_input_cut = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_cut(elem);
		}
	};

	_pEdit._on_input_paste = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_paste(elem);
		}
	};

	_pEdit._on_input_compositionstart = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionstart(data);
		}
	};

	_pEdit._on_input_compositionupdate = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionupdate(data);
		}
	};

	_pEdit._on_input_compositionend = function (data) {
		var api = this._edit_base_api;
		if (api && api._is_composition()) {
			api._on_input_compositionend(data);
		}
	};

	_pEdit.on_fire_cancharchange = function (obj, chartext, pretext, posttext) {
		if (this.cancharchange && this.cancharchange._has_handlers) {
			var evt = new nexacro.CanCharEventInfo(obj, "cancharchange", chartext, pretext, posttext);
			return this.cancharchange._fireCheckEvent(this, evt);
		}

		return true;
	};

	_pEdit.on_fire_canchange = function (obj, bText, bValue, aText, aValue) {
		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "canchange", bText, bValue, aText, aValue);
			return this.canchange._fireCheckEvent(this, evt);
		}

		return true;
	};

	_pEdit.on_fire_onchanged = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.onchanged && this.onchanged._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "onchanged", pretext, prevalue, posttext, postvalue);
			return this.onchanged._fireEvent(this, evt);
		}
	};
	_pEdit.on_fire_oneditclick = function (obj, caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.oneditclick && this.oneditclick._has_handlers) {
			var evt = new nexacro.EditClickEventInfo(obj, "oneditclick", caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.oneditclick._fireEvent(this, evt);
		}

		return true;
	};

	_pEdit.on_fire_ontextchanged = function (obj, pretext, posttext) {
		if (this.ontextchanged && this.ontextchanged._has_handlers) {
			var evt = new nexacro.TextChangedEventInfo(obj, "ontextchanged", pretext, posttext);
			return this.ontextchanged._fireEvent(this, evt);
		}

		return true;
	};

	_pEdit.on_fire_ontextchange = function (event_info, evt) {
		var evt2 = evt;
		if (!evt) {
			evt2 = new nexacro.TextChangeEventInfo(this, "ontextchange", event_info.chartext, event_info.pretext, event_info.posttext, event_info.preimetext, event_info.postimetext);
		}
		else if (!(evt instanceof nexacro.TextChangeEventInfo)) {
			evt.evt = evt2 = new nexacro.TextChangeEventInfo(this, "ontextchange", event_info.chartext, event_info.pretext, event_info.posttext, event_info.preimetext, event_info.postimetext);
		}

		if (this.ontextchange && this.ontextchange._has_handlers) {
			return this.ontextchange._fireCheckEvent(this, evt2);
		}
		return true;
	};

	_pEdit.on_fire_onchar = function (event_info, evt) {
		var evt2 = evt;
		if (!evt) {
			evt2 = new nexacro.TextChangeEventInfo(this, "onchar", event_info.chartext, event_info.prechareventtext, event_info.posttext);
		}
		else if (!(evt instanceof nexacro.TextChangeEventInfo)) {
			evt.evt = evt2 = new nexacro.TextChangeEventInfo(this, "onchar", event_info.chartext, event_info.prechareventtext, event_info.posttext);
		}

		if (this.onchar && this.onchar._has_handlers) {
			return this.onchar._fireCheckEvent(this, evt2);
		}
		return true;
	};

	_pEdit._on_fire_textchangeEventSet = function (text_info) {
		var org_chartext = text_info.chartext;
		var changechartext = text_info.chartext;

		var bCancel = false;
		var bInsert = text_info.bInsert;
		var bCut = text_info.bCut;

		var bTextchangeRet = true;
		var bCancahrchangeRet = true;
		var bOncharRet = true;
		var bChartextChange = false;
		var bChangeInputValue = false;

		var fireCancharEvent = true;
		var bSetValue = false;
		var bSetCaret = false;

		var strFront = "";
		var strRear = "";

		var api = this._edit_base_api;
		var textEvt = new nexacro.TextChangeEventInfo(this, "ontextchange", text_info.chartext, text_info.pretext, text_info.posttext, text_info.preimetext, text_info.postimetext);
		var charEvt = new nexacro.TextChangeEventInfo(this, "onchar", text_info.chartext, text_info.prechareventtext, text_info.posttext);

		this._setcaret = false;
		this._is_set_value = false;

		var ret = this.on_fire_ontextchange(text_info, textEvt);

		if (ret) {
			if (org_chartext != textEvt.chartext) {
				bChartextChange = true;
				changechartext = textEvt.chartext;
			}

			if (this._is_set_value) {
				api._updateEventInfo(text_info, textEvt, charEvt);
				this._is_set_value = false;
				bSetValue = true;
				if (this._setcaret) {
					bSetCaret = true;
					this._setcaret = false;
				}
			}

			if (this._setcaret) {
				api.restoreBuffer(api._old_text, api._old_begin_pos, api._old_end_pos);
				api.syncValue();
				this.setSelect(this._caret_pos.org_begin, this._caret_pos.org_end);
				api.clearBuffer(api._text, api._begin_pos, api._end_pos);

				strFront = api._text.substr(0, api._begin_pos);
				strRear = api._text.substr(api._end_pos, api._text.length - api._end_pos);

				text_info.posttext = strFront + changechartext + strRear;

				this._setcaret = false;
				bChangeInputValue = true;
			}

			if (bSetCaret) {
				this._setcaret = true;
				bSetCaret = false;
			}

			if (!api._is_composition()) {
				if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
					var imetext = text_info.postimetext == "" ? text_info.preimetext : text_info.postimetext;

					if (api._keycode == nexacro.KeyCode_ImeInput && text_info.postimetext == "" && (imetext != "" ? !api._is_hangul(imetext) : false)) {
						ret = fireCancharEvent = false;
					}
					if (api._keycode == nexacro.KeyCode_ImeInput && api._stat_composition._curr_data == "" && imetext != "" && api._is_hangul(imetext) && !api._is_on_killfocus && !bSetValue) {
						ret = fireCancharEvent = false;
					}

					delete imetext;
					imetext = null;
				}
				else if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
					if (api._keycode == 8) {
						var elem = this._input_element;
						if (api._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionEnd && org_chartext == "" && api.getCompositionData(elem) == "") {
							ret = fireCancharEvent = false;
						}
					}
				}
				else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && api._stat_composition.getCurrentStatus() != nexacro.EditBase.Status.None) {
						ret = fireCancharEvent = false;
					}
				}
				else if ((nexacro._isDesktop() && nexacro.Browser == "Safari") || nexacro.BrowserType == "Edge") {
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && !api._is_on_killfocus && api._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && !api._pasteAction && !bSetValue) {
						ret = fireCancharEvent = false;
					}
				}
				else if (nexacro.Browser == "Runtime") {
					var imetext = text_info.postimetext == "" ? text_info.preimetext : text_info.postimetext;
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && imetext != "" && !bSetValue) {
						ret = fireCancharEvent = false;
					}

					delete imetext;
					imetext = null;
				}

				if (ret) {
					if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
						if (charEvt.pretext == "" && charEvt.posttext == "" && api._keycode == nexacro.Event.KEY_BACKSPACE && text_info.pretext != "") {
							charEvt.pretext = text_info.pretext;
						}

						if (api._is_hangul(org_chartext)) {
							ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
						}
						else {
							if (bInsert) {
								if (charEvt.posttext != charEvt.pretext && !(api._is_on_killfocus && text_info.pretext == text_info.posttext)) {
									if (charEvt.chartext != "") {
										ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
									}
									else {
										if (api._keycode == nexacro.Event.KEY_BACKSPACE || api._cutAction) {
											ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
										}
									}
								}
							}
							else {
								if (this.maxlength > 0 && text_info.pretext.length >= this.maxlength && charEvt.pretext != "" && charEvt.posttext == charEvt.pretext) {
									fireCancharEvent = false;
									ret = false;

									var elem = this._input_element;
									api._accept_focus_event = false;
									api.setElementCaretPos(api._input_begin_pos, api._input_begin_pos, elem);
									api._accept_focus_event = true;
								}
							}
						}
					}
					else {
						ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
					}

					if (this._is_set_value) {
						api._updateEventInfo(text_info, textEvt, charEvt);
						this._is_set_value = false;
						bSetValue = true;
					}
				}

				if (ret) {
					if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
						if (api._is_hangul(org_chartext)) {
							ret = this.on_fire_onchar(text_info, charEvt);
						}
						else if (bInsert && charEvt.posttext != charEvt.pretext && !(api._is_on_killfocus && text_info.pretext == text_info.posttext)) {
							if (charEvt.chartext != "") {
								ret = this.on_fire_onchar(text_info, charEvt);
							}
							else {
								if (api._keycode == nexacro.Event.KEY_BACKSPACE || api._cutAction) {
									ret = this.on_fire_onchar(text_info, charEvt);
								}
							}
						}
					}
					else {
						ret = this.on_fire_onchar(text_info, charEvt);
					}

					if (!ret) {
						bOncharRet = false;
					}

					if (text_info.chartext != charEvt.chartext) {
						changechartext = charEvt.chartext;
					}

					if (this._is_set_value) {
						api._updateEventInfo(text_info, textEvt, charEvt);
						this._is_set_value = false;
						bSetValue = true;
					}
				}
				else {
					bOncharRet = false;
					bCancahrchangeRet = false;
				}
			}
			else {
				fireCancharEvent = false;
			}

			if (org_chartext != changechartext) {
				var chartext = api.applyInputmode(changechartext);
				chartext = api._apply_inputfilter(chartext);
				chartext = api._apply_inputtype(chartext);

				if (changechartext.length > 0 && chartext.length == 0) {
					bCancel = true;
				}

				if (!bCancel) {
					bInsert = api._check_maxlength_from_text_event(chartext);

					if (!bInsert) {
						chartext = "";
					}
					else {
						chartext = api._apply_maxlength_from_text_event(chartext);

						if (chartext != changechartext) {
							bCut = true;
						}
					}
				}

				text_info.chartext = chartext;
				textEvt.chartext = chartext;

				if (bSetValue) {
					textEvt.posttext += chartext;
					text_info.posttext = textEvt.posttext === "" ? text_info.posttext : textEvt.posttext;
				}
				else {
					strFront = text_info.pretext.substr(0, api._input_begin_pos);

					if (nexacro.Browser == "IE" && api._is_hangul(org_chartext)) {
						strRear = text_info.posttext.substr(api._end_pos, text_info.posttext.length - api._end_pos);
					}
					else if (nexacro.Browser == "Safari" && nexacro._isDesktop() && api._is_hangul(org_chartext)) {
						strRear = text_info.pretext.substr(api._end_pos + org_chartext.length, text_info.pretext.length);
					}
					else if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && api._is_hangul(org_chartext)) {
						strRear = text_info.pretext.substr(api._end_pos + org_chartext.length, text_info.pretext.length - org_chartext.length);
					}
					else {
						strRear = text_info.pretext.substr(api._end_pos, text_info.pretext.length - api._end_pos);
					}

					textEvt.posttext = strFront + chartext + strRear;
					text_info.posttext = strFront + chartext + strRear;
				}

				if (bChartextChange && bOncharRet && bCancahrchangeRet) {
					ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
					if (this._is_set_value) {
						api._updateEventInfo(text_info, textEvt);
						this._is_set_value = false;
					}
					if (ret) {
						var evt = new nexacro.TextChangeEventInfo(this, "onchar", textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
						ret = this.on_fire_onchar(text_info, evt);

						if (!ret) {
							bOncharRet = false;
						}

						if (this._is_set_value) {
							api._updateEventInfo(text_info);
							this._is_set_value = false;
						}
					}
					else {
						bOncharRet = false;
						bCancahrchangeRet = false;
					}
				}
			}
		}
		else {
			bTextchangeRet = false;

			if (this._is_set_value) {
				api._updateEventInfo(text_info);
				this._is_set_value = false;
			}
		}

		var ret = {
			bTextchangeRet : bTextchangeRet, 
			bCancahrchangeRet : bCancahrchangeRet, 
			bOncharRet : bOncharRet, 
			fireCancharEvent : fireCancharEvent, 
			bChangeInputValue : bChangeInputValue, 
			bInsert : bInsert, 
			bCut : bCut
		};

		return ret;
	};

	_pEdit._on_fire_changeEventSet = function (pretext, prevalue, posttext, postvalue) {
		var api = this._edit_base_api;
		var elem = this._input_element;

		var value = this.value;

		this._textchanging = true;
		var ret = this.on_fire_canchange(this, pretext, prevalue, posttext, postvalue);
		if (!ret) {
			api._setText(pretext);
			api._setValue(prevalue);
			api.syncValue();
			api._setFocusValue();

			elem.setElementValue(api._value);
			this._init_bind_flag();

			return false;
		}

		elem.setElementValue(api._value, false, true);

		var bind_ret = this.applyto_bindSource("value", this.value);
		var after_value = this.value;

		if (this._dsupdate_cancel || (!this._dsupdate_in_textchanging && !bind_ret && value == after_value)) {
			api._setText(pretext);
			api._setValue(prevalue);
			api.syncValue();
			api._setFocusValue();

			elem.setElementValue(api._value);
			this._init_bind_flag();

			return false;
		}

		api._setFocusValue();
		this._init_bind_flag();
		this.on_fire_onchanged(this, pretext, prevalue, this.text, this.value);
		api._setFocusValue();

		return true;
	};

	_pEdit._init = function () {
		var api = this._edit_base_api;
		if (api) {
			api._init();
		}

		this.set_value(undefined);
	};

	_pEdit._init_bind_flag = function () {
		this._textchanging = false;
		this._dsupdate_in_textchanging = false;
		this._dsupdate_cancel = false;
	};

	_pEdit._getDragData = function () {
		return this.getSelectedText();
	};

	_pEdit._setValue = function (v) {
		if (nexacro._isNull(v)) {
			this.text = "";
		}
		else {
			this.text = nexacro._toString(v);
		}

		this.value = v;
		this.on_apply_value();
	};

	_pEdit._accept_keydown_event = function (keyCode) {
		return true;
	};

	_pEdit._recreateInputElement = function () {
		var input_elem = this._input_element;

		if (input_elem) {
			input_elem._destroyInputHandle();
			input_elem._input_handle = input_elem._createInputHandle();
			input_elem._bindEvent(input_elem);
		}
	};

	_pEdit._accept_keydown_event = function (keyCode) {
		return true;
	};

	_pEdit._set_editbase_focusstat = function (stat) {
		var api = this._edit_base_api;
		if (api) {
			switch (stat) {
				case "focus":
					api._stat_focus.setStatus(nexacro.EditBase.Status.Focus);
					break;
				case "blur":
					api._stat_focus.setStatus(nexacro.EditBase.Status.Blur);
					break;
				default:
					api._stat_focus.setStatus(stat);
					break;
			}
			;
		}
	};

	delete _pEdit;
	_pEdit = null;

	nexacro.EditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Edit.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pEditCtrl = nexacro._createPrototype(nexacro.Edit, nexacro.EditCtrl);
	nexacro.EditCtrl.prototype = _pEditCtrl;
	_pEditCtrl._type_name = "EditControl";
	nexacro._setForControlStyleFinder(_pEditCtrl);

	delete _pEditCtrl;
	_pEditCtrl = null;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.MaskEdit) {
	nexacro.MaskEdit_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}

		this.caretcolor = null;
		this.compositecolor = null;
		this.displaynulltextcolor = null;
	};

	var _pMaskEditStyle = nexacro._createPrototype(nexacro.Style, nexacro.MaskEdit_Style);
	nexacro.MaskEdit_Style.prototype = _pMaskEditStyle;

	eval(nexacro._createColorAttributeEvalStr("_pMaskEditStyle", "caretcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pMaskEditStyle", "compositecolor"));
	eval(nexacro._createColorAttributeEvalStr("_pMaskEditStyle", "selectcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pMaskEditStyle", "selectbackground"));
	eval(nexacro._createColorAttributeEvalStr("_pMaskEditStyle", "displaynulltextcolor"));

	_pMaskEditStyle.__custom_emptyObject = function () {
		this.caretcolor = null;
		this.compositecolor = null;
		this.selectcolor = null;
		this.selectbackground = null;
		this.displaynulltextcolor = null;
	};

	_pMaskEditStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.caretcolor && !this.caretcolor._is_empty) {
			val += "caretcolor:" + this.caretcolor._value + "; ";
		}
		if (this.compositecolor && !this.compositecolor._is_empty) {
			val += "compositecolor:" + this.compositecolor._value + "; ";
		}
		if (this.selectcolor && !this.selectcolor._is_empty) {
			val += "selectcolor:" + this.selectcolor._value + "; ";
		}
		if (this.selectbackground && !this.selectbackground._is_empty) {
			val += "selectbackground:" + this.selectbackground._value + "; ";
		}
		if (this.displaynulltextcolor && !this.displaynulltextcolor._is_empty) {
			val += "displaynulltextcolor:" + this.displaynulltextcolor._value + "; ";
		}

		return val;
	};

	nexacro.MaskEdit_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.caretcolor = null;
		this.compositecolor = null;
		this.selectcolor = null;
		this.selectbackground = null;
		this.displaynulltextcolor = null;
	};

	var _pMaskEditCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.MaskEdit_CurrentStyle);
	nexacro.MaskEdit_CurrentStyle.prototype = _pMaskEditCurrentStyle;

	_pMaskEditCurrentStyle.__custom_emptyObject = _pMaskEditStyle.__custom_emptyObject;
	_pMaskEditCurrentStyle.__get_custom_style_value = _pMaskEditStyle.__get_custom_style_value;

	delete _pMaskEditStyle;
	delete _pMaskEditCurrentStyle;

	_pMaskEditStyle = null;
	_pMaskEditCurrentStyle = null;

	nexacro.MaskEdit = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.type = "number";
		this.limitbymask = "decimal";
		this.trimtype = "none";
		this.value = undefined;
		this.text = "";
		this.displaynulltext = "";
		this.readonly = false;
		this.autoselect = false;
		this.autoskip = false;
		this.clipmode = "includespace";
		this.mask = "";
		this.maskchar = "_";
		this.updatebindingvalue = "default";
		this.usesoftkeyboard = true;
		this.useinputpanel = true;
		this.usecontextmenu = true;
		this._activate_flag = false;
		this._is_focusing = false;
		this._is_first_focus = true;
		this._lose_focus_comp = null;

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"oneditclick" : 1, 
			"canchange" : 1, 
			"cancharchange" : 1, 
			"onchanged" : 1, 
			"onchar" : 1, 
			"ontextchange" : 1, 
			"ontextchanged" : 1, 
			"oncontextmenu" : 1, 
			"onfling" : 1, 
			"onflingstart" : 1, 
			"onflingend" : 1, 
			"onpinch" : 1, 
			"onpinchstart" : 1, 
			"onpinchend" : 1, 
			"onslide" : 1, 
			"onslidestart" : 1, 
			"onslideend" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onlongpress" : 1
		};

		this._input_element = null;
		this._edit_base_api = null;
		this._accessibility_role = "edit";
		this._caret_pos = {
			begin : -1, 
			end : -1
		};
		this._setcaret = false;
		this._textchanging = false;
		this._dsupdate_in_textchanging = false;
		this._dsupdate_cancel = false;
		this._has_inputElement = true;
		this._locale = "";
		this._old_selection = [0, 0];
	};

	var _pMaskEdit = nexacro._createPrototype(nexacro.Component, nexacro.MaskEdit);
	nexacro.MaskEdit.prototype = _pMaskEdit;
	_pMaskEdit._type_name = "MaskEdit";

	_pMaskEdit.on_apply_custom_pseudo = function (pseudo) {
		if (pseudo) {
			this._pseudo = pseudo;
		}
		else if (this._pseudo) {
			pseudo = this._pseudo;
		}
		var curstyle = this.currentstyle;

		var align = this.on_find_CurrentStyle_align(pseudo) || nexacro.Component._default_left_align;
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (font != curstyle.font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(letterspace);
		if (letterspace != curstyle.letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (color != curstyle.color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		color = this.on_find_CurrentStyle_caretcolor(pseudo);
		if (color != curstyle.caretcolor) {
			curstyle.caretcolor = color;
			this.on_apply_style_caretcolor(color);
		}

		color = this.on_find_CurrentStyle_compositecolor(pseudo);
		if (color != curstyle.compositecolor) {
			curstyle.compositecolor = color;
			this.on_apply_style_compositecolor(color);
		}

		color = this.on_find_CurrentStyle_selectcolor(pseudo);
		if (color != curstyle.selectcolor) {
			curstyle.selectcolor = color;
			this.on_apply_style_selectcolor(color);
		}

		color = this.on_find_CurrentStyle_displaynulltextcolor(pseudo);
		if (color != curstyle.displaynulltextcolor) {
			curstyle.displaynulltextcolor = color;
			this.on_apply_style_displaynulltextcolor(color);
		}

		color = this.on_find_CurrentStyle_selectbackground(pseudo);
		if (color != curstyle.selectbackground) {
			curstyle.selectbackground = color;
			this.on_apply_style_selectbackground(color);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pMaskEdit.on_create_custom_style = function () {
		return new nexacro.MaskEdit_Style(this);
	};

	_pMaskEdit.on_create_custom_currentStyle = function () {
		return new nexacro.MaskEdit_CurrentStyle();
	};

	_pMaskEdit.on_find_CurrentStyle_cursor = function (pseudo) {
		var cursor = "";
		if (!this._isEnable() && this.parent && !this.parent._is_application) {
			if (!this._is_subcontrol) {
				cursor = this.parent._find_pseudo_obj("cursor", pseudo, "value");
			}
			else {
				var p = this.parent;
				while (p && p._is_form) {
					p = p.parent;
				}

				if (p) {
					cursor = p._find_pseudo_obj("cursor", pseudo, "value");
				}
				else {
					cursor = null;
				}
			}
		}
		else {
			cursor = this._find_pseudo_obj("cursor", pseudo, "value");
		}

		return (cursor) ? cursor : nexacro.Component._default_cursor;
	};

	_pMaskEdit.on_find_CurrentStyle_caretcolor = function (pseudo) {
		return this._find_pseudo_obj("caretcolor", pseudo, "color");
	};

	_pMaskEdit.on_find_CurrentStyle_compositecolor = function (pseudo) {
		return this._find_pseudo_obj("compositecolor", pseudo, "color");
	};

	_pMaskEdit.on_find_CurrentStyle_selectcolor = function (pseudo) {
		var color = this._find_pseudo_obj("selectcolor", pseudo, "color");
		if (!color) {
			if (pseudo == "focused") {
				color = nexacro.Edit._focused_selectcolor;
			}
			else {
				color = nexacro.Edit._default_selectcolor;
			}
		}

		return color;
	};

	_pMaskEdit.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		var displaynulltextcolor = this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_pseudo_obj("color", pseudo, "color");
		}
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}

		return (displaynulltextcolor) ? displaynulltextcolor : nexacro.Component._default_color;
	};

	_pMaskEdit.on_find_CurrentStyle_selectbackground = function (pseudo) {
		var bkcolor = this._find_pseudo_obj("selectbackground", pseudo, "background");
		return (bkcolor) ? bkcolor : nexacro.Edit._default_selectbackground;
	};

	_pMaskEdit.on_update_style_cursor = function () {
		var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
		this.currentstyle.cursor = cursor;
		this.on_apply_style_cursor(cursor);
	};

	_pMaskEdit.on_update_style_caretcolor = function () {
		var caretcolor = this.on_find_CurrentStyle_caretcolor(this._pseudo);
		this.currentstyle.caretcolor = caretcolor;
		this.on_apply_style_caretcolor(caretcolor);
	};

	_pMaskEdit.on_update_style_compositecolor = function () {
		var compositecolor = this.on_find_CurrentStyle_compositecolor(this._pseudo);
		this.currentstyle.compositecolor = compositecolor;
		this.on_apply_style_compositecolor(compositecolor);
	};

	_pMaskEdit.on_update_style_selectcolor = function () {
		var selectcolor = this.on_find_CurrentStyle_selectcolor(this._pseudo);
		this.currentstyle.selectcolor = selectcolor;
		this.on_apply_style_selectcolor(selectcolor);
	};

	_pMaskEdit.on_update_style_displaynulltextcolor = function () {
		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(this._pseudo);
		this.currentstyle.displaynulltextcolor = displaynulltextcolor;
		this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
	};

	_pMaskEdit.on_update_style_selectbackground = function () {
		var selectbackground = this.on_find_CurrentStyle_selectbackground(this._pseudo);
		this.currentstyle.selectbackground = selectbackground;
		this.on_apply_style_selectbackground(selectbackground);
	};

	_pMaskEdit.on_apply_style_color = function (color) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementColor(color);
		}
	};

	_pMaskEdit.on_apply_style_font = function (font) {
		if (font == null) {
			font = nexacro.Component._default_font;
		}

		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementFont(font);
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pMaskEdit.on_apply_style_cursor = function (cursor) {
		var control_elem = this.getElement();
		if (control_elem) {
			control_elem.setElementCursor(cursor);

			var input_elem = this._input_element;
			if (input_elem) {
				input_elem.setElementCursor(cursor);
			}
		}
	};

	_pMaskEdit.on_apply_style_align = function (align) {
		if (align == null) {
			align = nexacro.Component._default_left_align;
		}
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pMaskEdit.on_apply_style_caretcolor = function (color) {
	};

	_pMaskEdit.on_apply_style_compositecolor = function (color) {
	};

	_pMaskEdit.on_apply_style_selectbackground = function (selectbackground) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSelectBackgroundColor(selectbackground);
		}
	};

	_pMaskEdit.on_apply_style_selectcolor = function (selectcolor) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSelectColor(selectcolor);
		}
	};

	_pMaskEdit.on_apply_style_displaynulltextcolor = function (displaynulltextcolor) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementDisplayNullTextColor(displaynulltextcolor);
		}
	};

	_pMaskEdit.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		if (this._input_element) {
			this._input_element.setElementAccessibilityRole(accessibility.role);
		}
	};

	_pMaskEdit.on_apply_style_letterspace = function (letterspace) {
		if (this._input_element) {
			this._input_element.setElementLetterSpace(letterspace);
		}
	};

	_pMaskEdit.on_create_contents = function () {
		var control = this.getElement();
		if (control) {
			var input_elem = this._input_element = new nexacro.InputElement(control);
			if (this.type == "number") {
				this._edit_base_api = new nexacro.EditMaskNumber(this);
			}
			else {
				this._edit_base_api = new nexacro.EditMaskString(this);
			}

			var curstyle = this.currentstyle;

			input_elem.setElementSize(this._client_width, this._client_height);
			input_elem.setElementFont(curstyle.font);
			input_elem.setElementColor(curstyle.color);
			input_elem.setElementAlign(curstyle.align);
			input_elem.setElementSelectColor(curstyle.selectcolor);
			input_elem.setElementSelectBackgroundColor(curstyle.selectbackground);
			input_elem.setElementDisplayNullTextColor(curstyle.displaynulltextcolor);
		}
	};

	_pMaskEdit.on_created_contents = function (doc) {
		this._default_align = this._default_left_align;
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			var curstyle = this.currentstyle;

			input_elem.setElementInputType(this.type);
			input_elem.setElementInputTypeKeypad(this.type);
			this.on_apply_limitbymask();
			this.on_apply_trimtype();
			this.on_apply_maskchar();
			this.on_apply_clipmode();
			this.on_apply_mask();
			this.on_apply_value();
			this.on_apply_locale();

			input_elem._is_maskedit = true;

			input_elem.create();

			input_elem.setElementImeMode("disabled");
			input_elem.setElementEnable(this._isEnable());
			input_elem.setElementReadonly(this.readonly);
			input_elem._bindEvent(input_elem);

			if (api) {
				api.setPosition();
			}

			if (nexacro._isDesktop() && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit"))) {
				this.setCaretPos(0);
			}

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
				input_elem._setElementInputLabel();
			}

			this.on_apply_prop_rtldirection();
			this.on_apply_displaynulltext();
			this.on_apply_style_letterspace(curstyle.letterspace);

			if (curstyle && curstyle.cursor) {
				this.on_apply_style_cursor(curstyle.cursor);
			}
		}
	};

	_pMaskEdit.on_destroy_contents = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem._unBindEvent();
			input_elem.destroy();
			this._input_element = null;
		}

		var api = this._edit_base_api;
		if (api) {
			api._destroy();
			this._edit_base_api = null;
		}

		this._caret_pos = null;
	};

	_pMaskEdit.on_change_containerRect = function (width, height) {
		var input_elem = this._input_element;
		var api = this._edit_base_api;

		if (input_elem && api) {
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pMaskEdit.on_getBindableProperties = function () {
		return "value";
	};

	_pMaskEdit.on_apply_prop_enable = function (v) {
		var input_elem = this._input_element;
		if (input_elem) {
			if (!v) {
				var pos = input_elem.getElementCaretPos();
				if (pos != -1 && pos.begin != pos.end) {
					input_elem.setElementSetSelect(0);
				}
			}

			input_elem.setElementEnable(v);
			this.on_apply_style_cursor(this.currentstyle.cursor);
		}
	};

	_pMaskEdit.on_apply_custom_setfocus = function (evt_name) {
		var input_elem = this._input_element;
		var api = this._edit_base_api;

		if (input_elem && api) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				if (this.displaynulltext && this._is_focusing) {
					return;
				}
			}

			this._is_focusing = true;

			api._changeFocusText(input_elem);
			api._bChangeFocusText = true;

			if (this._setcaret) {
				this._setcaret = false;
			}

			if (evt_name != "lbuttondown" && evt_name != "tap" && this._old_selection[0] != this._old_selection[1]) {
				input_elem.setElementSetSelect(this._old_selection[0], this._old_selection[1]);
			}
			else if (nexacro.Browser != "MobileSafari" && !this.autoselect) {
				if ((nexacro.Browser == "Gecko" && !evt_name) || nexacro.Browser == "Safari") {
					input_elem.setElementFocus();
				}
				if (!((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Runtime") && evt_name == "lbuttondown")) {
					this.setCaretPos(api._input_begin_pos);
				}
			}

			if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "Safari") && evt_name == "lbuttondown") {
				input_elem.setScrollLeft(0);
			}

			if (nexacro.OS == "iOS" && nexacro.SystemType == "iphone" && !this.readonly) {
				if (this.type == "number") {
					var keypad_type = this.type;
					var mask = this.mask;
					if (mask !== "" && mask.indexOf(",") >= 0) {
						keypad_type = "text";
					}

					input_elem.setElementInputType(keypad_type, true);

					if (api._is_selected()) {
						api._accept_blur_event = false;
						input_elem.setElementBlur();
					}

					if (this.autoselect) {
						var selecttext = api._select_text = api._text;
						var pThis = this;
						nexacro.OnceCallbackTimer.callonce(pThis, function () {
							api._is_apply_autoselect = true;
							api.setElementCaretPos(0, selecttext.length, input_elem);
						}, 500);
					}

					if (api._is_selected()) {
						api._accept_focus_event = false;
						input_elem.setElementFocus();
						api._accept_focus_event = true;
					}
				}
			}

			var _apply_focus = true;

			if (nexacro.OS == "iOS") {
				var _form = this._getForm();
				if (_form && _form.stepcontrol) {
					if (this.positionstep != _form.stepcontrol.stepindex) {
						_apply_focus = false;
					}
				}
			}

			if (_apply_focus) {
				input_elem.setElementFocus();
			}
		}
	};

	_pMaskEdit.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			var api = this._edit_base_api;
			if (api) {
				if (api._undoStack) {
					api._undoStack.init();
				}
			}

			this._setValue(undefined);
			return true;
		}
	};

	_pMaskEdit.on_change_bindSource = function (propid, ds, row, col, index) {
		if (propid == "value") {
			var v = ds.getColumn(row, col);
			var api = this._edit_base_api;
			var input_elem = this._input_element;

			if (api) {
				var focus_val = api._getFocusValue();
				if (input_elem) {
					if (v === this.value && v === api._value && v === input_elem.value) {
						if (focus_val != v) {
							api._setFocusValue();
						}
						return true;
					}
				}

				if (api._undoStack) {
					api._undoStack.init();
				}
			}

			this._setValue(v);

			if (api) {
				if (focus_val != v) {
					api._setFocusValue();
				}
				api._updateCaretPos();
			}

			return true;
		}

		return false;
	};

	_pMaskEdit.on_get_style_accessibility_label = function () {
		var label = "";
		return label;
	};

	_pMaskEdit._on_getAccessibilityAdditionalLabel = function () {
		if (this._edit_base_api) {
			return this._edit_base_api._on_getAccessibilityAdditionalLabel();
		}
		return "";
	};

	_pMaskEdit._getAccessibilityReadLabel = function (bwholeread) {
		var _readlabel = nexacro.Component.prototype._getAccessibilityReadLabel.call(this);
		if (bwholeread && this._input_element && this._status != "focus") {
			if (!this._input_element._wantAccessibilityAdditionalLabel
				 || !this._input_element._wantAccessibilityAdditionalLabel()) {
				_readlabel = this.text + " " + _readlabel;
			}
		}
		return _readlabel;
	};

	_pMaskEdit._getAccessibilityRole = function (accessibility) {
		var role = nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
		if (nexacro._accessibilitytype == 4) {
			return "";
		}
		else {
			return role;
		}
	};

	_pMaskEdit._setAccessibilityStatFocus = function (evt_name) {
		if (this._input_element) {
			var role = this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo));
			if (this._getDescLevel() == "none") {
				role = "none";
			}
			this._input_element.setElementAccessibilityRole(role);
		}
		return nexacro.Component.prototype._setAccessibilityStatFocus.call(this, evt_name);
	};

	_pMaskEdit._setAccessibilityNotifyEvent = function (direction) {
		if (this._edit_base_api) {
			this._edit_base_api._setAccessibilityNotifyLabel();
		}
		return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
	};

	_pMaskEdit.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var api = this._edit_base_api;
		if (api) {
			api.setPosition();
		}
		if (this._input_element) {
			this._input_element.setElementRtlDirection(this._rtldirection);
		}
	};

	_pMaskEdit.set_text = function (v, checkbind) {
	};

	_pMaskEdit.set_value = function (v) {
		v = nexacro._toString(v);
		if (v && v !== undefined && v != "") {
			v = v.replace(/&quot;/g, "\"");
		}

		if (v != this.value) {
			var form = this._getRootForm();
			var api = this._edit_base_api;

			if (!this.applyto_bindSource("value", v)) {
				return;
			}

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (api) {
					var old_keyinput_event = api._accept_keyinput_event;
					api._accept_keyinput_event = false;

					this._setValue(v);
					api._accept_keyinput_event = old_keyinput_event;
				}
				else {
					this._setValue(v);
				}

				if (nexacro.BrowserVersion <= 8) {
					if (form && form._bFireLoadEvent) {
						this._recreateInputElement();
					}
				}
			}
			else {
				this._setValue(v);
			}

			if (api) {
				api._setFocusValue();
				api._updateCaretPos();
			}
		}
	};

	_pMaskEdit.on_apply_value = function () {
		var api = this._edit_base_api;

		if (api) {
			api.setValue(this.value);
			api.syncValue();

			if (this._is_first_focus && this.value) {
				api._updateCaretPos();
			}
		}

		this._refreshAccessibilityValue();
	};

	_pMaskEdit.set_displaynulltext = function (v) {
		var isNull = nexacro._isNull(v);
		if (isNull) {
			v = "";
		}
		else {
			v = nexacro._toString(v);
			v = v.replace(/&quot;/g, "\"");
		}

		if (v != this.displaynulltext) {
			this.displaynulltext = v;
			this.on_apply_displaynulltext();
		}
	};

	_pMaskEdit.on_apply_displaynulltext = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementDisplayNullText(this.displaynulltext);
		}
	};

	_pMaskEdit.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pMaskEdit.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementReadonly(v);
		}
	};

	_pMaskEdit.set_autoselect = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoselect) {
			this.autoselect = v;
		}
	};

	_pMaskEdit.set_autoskip = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoskip) {
			this.autoskip = v;
		}
	};

	_pMaskEdit.on_apply_autoskip = function () {
		var root_comp = this._getRootComponent(this);
		var next_comp = this._refform.getNextComponent(root_comp, true);
		if (next_comp) {
			next_comp.setFocus();
			var api = next_comp._edit_base_api ? next_comp._edit_base_api : null;
			if (api) {
				if (!next_comp.autoselect) {
					next_comp.setCaretPos(0);
				}
			}
		}
	};

	_pMaskEdit.set_clipmode = function (v) {
		v = nexacro._toString(v);
		if (v != this.clipmode) {
			this.clipmode = v;
			this.on_apply_clipmode();
		}
	};

	_pMaskEdit.on_apply_clipmode = function () {
		var api = this._edit_base_api;
		if (api && this.type == "string") {
			if (this.clipmode == "includespace") {
				api._FillMaskChar = " ";
			}
			else {
				api._FillMaskChar = undefined;
			}
		}
	};

	_pMaskEdit.set_limitbymask = function (v) {
		v = nexacro._toString(v);
		if (v != this.limitbymask) {
			this.limitbymask = v;
			this.on_apply_limitbymask();
		}
	};

	_pMaskEdit.on_apply_limitbymask = function () {
		var api = this._edit_base_api;
		if (api && this.type == "number") {
			if (this.limitbymask == "both") {
				api._nLimitType = 3;
			}
			else if (this.limitbymask == "integer") {
				api._nLimitType = 1;
			}
			else if (this.limitbymask == "decimal") {
				api._nLimitType = 2;
			}
			else {
				api._nLimitType = 0;
			}
		}
	};

	_pMaskEdit.set_mask = function (v, bApply) {
		v = nexacro._toString(v);
		if (v != this.mask) {
			this.mask = v;
			this.on_apply_mask();
			if (bApply !== false) {
				this.on_apply_value();
			}
		}
	};

	_pMaskEdit.on_apply_mask = function () {
		var api = this._edit_base_api;
		if (api) {
			var strMask = this.mask;
			if (!strMask) {
				strMask = "";
			}
			api.setMask(strMask);
		}
	};

	_pMaskEdit.set_maskchar = function (v) {
		v = nexacro._toString(v);
		if (v == "") {
			v = "_";
		}

		if (v != this.maskchar) {
			this.maskchar = v;
			this.on_apply_maskchar();
			this.on_apply_value();
		}
	};

	_pMaskEdit.on_apply_maskchar = function () {
		var api = this._edit_base_api;
		if (api && this.type == "string") {
			var maskchar = this.maskchar;
			if (maskchar && maskchar.length > 0) {
				api._cMaskChar = maskchar;
			}
			else {
				api._cMaskChar = undefined;
			}
		}
	};

	_pMaskEdit.set_trimtype = function (v) {
		v = nexacro._toString(v);
		if (v != this.trimtype) {
			this.trimtype = v;
			this.on_apply_trimtype();
		}
	};

	_pMaskEdit.on_apply_trimtype = function () {
		var api = this._edit_base_api;
		if (api && this.type == "string") {
			if (this.trimtype == "left") {
				api._nTrimType = 1;
			}
			else if (this.trimtype == "right") {
				api._nTrimType = 2;
			}
			else if (this.trimtype == "both") {
				api._nTrimType = 3;
			}
			else {
				api._nTrimType = 0;
			}
		}
	};

	_pMaskEdit.set_type = function (v) {
		v = nexacro._toString(v);
		if (v != this.type) {
			this.type = v;
			this.on_apply_type();
			this.on_apply_limitbymask();
			this.on_apply_trimtype();
			this.on_apply_maskchar();
			this.on_apply_clipmode();
			this.on_apply_displaynulltext();
			this.on_apply_mask();
			this.on_apply_value();
		}
	};

	_pMaskEdit.on_apply_type = function () {
		var control = this.getElement();
		if (control) {
			if (this.type == "number") {
				this._edit_base_api = null;
				this._edit_base_api = new nexacro.EditMaskNumber(this);
			}
			else {
				this._edit_base_api = null;
				this._edit_base_api = new nexacro.EditMaskString(this);
			}

			this._input_element.setElementInputType(this.type);
			this._input_element.setElementInputTypeKeypad(this.type);
		}
	};

	_pMaskEdit.set_usesoftkeyboard = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usesoftkeyboard) {
			this.usesoftkeyboard = v;
			this.on_apply_usesoftkeyboard();
		}
	};

	_pMaskEdit.on_apply_usesoftkeyboard = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementUseSoftKeyboard(this.usesoftkeyboard);
		}
	};

	_pMaskEdit.set_useinputpanel = function (v) {
	};

	_pMaskEdit.set_updatebindingvalue = function (v) {
	};

	_pMaskEdit.set_usecontextmenu = function (v) {
		v = nexacro._toBoolean(v);

		if (this.usecontextmenu != v) {
			this.usecontextmenu = v;
		}
	};

	_pMaskEdit.set_locale = function (v) {
		if (v != this.locale) {
			this.locale = v;
			if (this._locale != v) {
				this._locale = v;
				this.on_apply_locale();
			}
		}
	};

	_pMaskEdit.on_apply_locale = function () {
		var api = this._edit_base_api;
		if (api) {
			var locale = this._getLocale();
			api._setLocale(locale);
			this.on_apply_value();
		}
	};

	_pMaskEdit.getLength = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			var api = this._edit_base_api;
			var v = api.getValue();
			if (v) {
				var len = v.length;
				if (this.type == "number") {
					if (-1 != v.indexOf("-", 0)) {
						len -= 1;
					}
					if (-1 != v.indexOf(".", 0)) {
						len -= 1;
					}
				}

				return len;
			}
			else {
				return -1;
			}
		}

		return -1;
	};

	_pMaskEdit.getCaretPos = function () {
		if (this.readonly) {
			return -1;
		}

		var input_elem = this._input_element;
		if (input_elem) {
			if (!input_elem._checkActiveElement()) {
				return -1;
			}

			var pos = input_elem.getElementCaretPos();
			if (pos && pos != -1) {
				return pos.begin;
			}
		}

		return -1;
	};

	_pMaskEdit.getInputElementAttribute = function (attribute) {
		var input_elem = this._input_element;
		if (input_elem) {
			return input_elem.getInputElementAttribute(attribute);
		}

		return undefined;
	};

	_pMaskEdit.setInputElementAttribute = function (attribute, attrvalue) {
		var input_elem = this._input_element;
		if (input_elem) {
			return input_elem.setInputElementAttribute(attribute, attrvalue);
		}

		return false;
	};

	_pMaskEdit.setCaretPos = function (v) {
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			if (arguments.length == 0) {
				v = 0;
			}
			else {
				v = nexacro._toInt(v);
				if (v == -1) {
					if (v) {
						v = this.text.length;
					}
					else {
						v = 0;
					}
				}
			}

			input_elem.setElementSetSelect(v, v);
			api._input_begin_pos = api._begin_pos = api._end_pos = v;
			this._caret_pos.begin = v;
			this._caret_pos.end = v;


			this._setcaret = true;

			return true;
		}

		return false;
	};

	_pMaskEdit.getSelect = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			var api = this._edit_base_api;
			var start = api._begin_pos !== undefined ? api._begin_pos : 0;
			var end = api._end_pos !== undefined ? api._end_pos : 0;
			return [start, end];
		}
		else {
			return [0, 0];
		}
	};

	_pMaskEdit.setSelect = function (start, end) {
		var input_elem = this._input_element;
		if (input_elem) {
			var api = this._edit_base_api;
			var txt = this.text ? this.text : "";
			var txt_len = txt.length;

			if (nexacro._isNull(start) || start === "") {
				start = 0;
			}
			if (nexacro._isNull(end) || end === "") {
				end = -1;
			}

			if (!nexacro._isNumber(start)) {
				start = nexacro._toInt(start);
			}
			if (!nexacro._isNumber(end)) {
				end = nexacro._toInt(end);
			}

			if (start == -1) {
				start = txt_len;
			}
			if (end == -1) {
				end = txt_len;
			}

			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}

			api._begin_pos = start;
			api._end_pos = end;
			this._caret_pos.begin = start;
			this._caret_pos.end = end;
			this._setcaret = true;

			input_elem.setElementSetSelect(start, end);

			return true;
		}

		return false;
	};

	_pMaskEdit.getSelectedText = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			var api = this._edit_base_api;
			var start = api._begin_pos !== undefined ? api._begin_pos : 0;
			var end = api._end_pos !== undefined ? api._end_pos : 0;

			var txt = api._getText();

			if (txt && (start != end)) {
				return txt.substring(start, end);
			}
			else {
				return "";
			}
		}

		return "";
	};

	_pMaskEdit.isAboveSelected = function () {
	};

	_pMaskEdit.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		var ret = this.applyto_bindSource("value", this.value);
		if (this._textchanging) {
			this._dsupdate_in_textchanging = true;
			if (!ret) {
				this._dsupdate_cancel = true;
			}
			else {
				this._dsupdate_cancel = false;
			}
		}
		else {
			this._dsupdate_in_textchanging = false;
		}
		return ret;
	};

	_pMaskEdit._on_activate = function () {
		var input_elem = this._input_element;
		var api = this._edit_base_api;

		if (api) {
			api._changeFocusText(input_elem);
			api._bChangeFocusText = true;
		}

		if (!this._isSelected()) {
			this._stat_change("focus", "normal");
		}

		this._activate_flag = true;
	};

	_pMaskEdit._on_killfocus = function (obj, fromObj) {
		if (!this._is_alive) {
			return;
		}

		var api = this._edit_base_api;
		var elem = this._input_element;


		if (api && elem) {
			var focus_text = api._getFocusText();
			var focus_val = api._getFocusValue();
			var cur_text = this.text;
			var cur_val = this.value;

			if (this._activate_flag) {
				this._activate_flag = false;
			}

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (!elem._is_focused) {
					if (focus_text != cur_text || focus_val != cur_val) {
						this.applyto_bindSource("value", this.value);
					}

					return;
				}

				if (api._is_composition()) {
					var data = api._stat_composition.getData();
					api._on_input_compositionend(data);
					if (!api._is_hangul(data)) {
						api._fire_text_event(data);
					}
				}
			}

			api._is_on_killfocus = true;
			this._on_input_blur(elem);
			api._is_on_killfocus = false;

			if (focus_text != cur_text || focus_val != cur_val) {
				var win = this._getWindow();
				if (win && win._is_active_window != true && !obj) {
					elem.setElementValue(api._value, false, true);
					return;
				}

				var ret = this._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);
				if (!ret) {
					return;
				}
			}
			else if (focus_val === undefined && focus_text == cur_text && !this._isPasswordUsed(api)) {
				api._setValue(undefined);
				api._setText(focus_text);
				api.syncValue();

				elem.setElementValue(api._value);
			}
			else {
				elem.setElementValue(api._value, false, true);
			}

			this._restoreSelect();

			var isRuntimeDisable = (nexacro.Browser == "Runtime" && !elem.enable) ? true : false;
			if (isRuntimeDisable) {
				elem.setElementEnable(true);
			}

			this._cancelSelect();

			if (isRuntimeDisable) {
				elem.setElementEnable(false);
			}
		}
	};

	_pMaskEdit._cancelSelect = function () {
		var api = this._edit_base_api;

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (api._is_selected()) {
				if (this.visible) {
					var form = this._getRootForm();
					var form_elem = form.getElement();

					if (form.vscrollbar) {
						form_elem._recover_vpos = form.vscrollbar.pos;
					}
					if (form.hscrollbar) {
						form_elem._recover_hpos = form.hscrollbar.pos;
					}

					var input_handle = this._input_element._input_handle;
					var _doc = this._input_element.getRootWindowHandle();

					this._input_element.setElementSetSelect(api._begin_pos, api._begin_pos);
					nexacro._inputsetCaretPos(input_handle, _doc);

					if (nexacro.BrowserVersion <= 8) {
						form_elem._recover_vpos = undefined;
						form_elem._recover_hpos = undefined;
					}
				}
				else {
					this.setCaretPos(api._begin_pos);
				}
			}
		}
		else if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			if (api._is_selected()) {
				this.setCaretPos(api._begin_pos);
			}
		}
	};

	_pMaskEdit._restoreSelect = function () {
		this._old_selection = this.getSelect();

		this._caret_pos.begin = this._old_selection[0];
		this._caret_pos.end = this._old_selection[1];
	};

	_pMaskEdit._on_click = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		if (this._isEnable() && this.enableevent) {
			var caretPos = this.getCaretPos();
			var clientXY = this._getClientXY(canvasX, canvasY);

			this.on_fire_oneditclick(this, caretPos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, this);
		}
	};

	_pMaskEdit._on_input_keyinput = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_keyinput(elem);
			if (nexacro.BrowserType == "Edge") {
				api._setCaret(elem);
			}
			api._on_input_keyinput_after();
		}
	};

	_pMaskEdit._on_input_focus = function (elem, target) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_focus(elem);
			if (this._is_first_focus) {
				this._is_first_focus = false;
			}
		}
	};

	_pMaskEdit._on_input_blur = function (elem, target) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_blur(elem);
		}
	};

	_pMaskEdit._on_input_keypress = function (elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keypress(elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pMaskEdit._on_input_keydown = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keydown(elem, keyCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pMaskEdit._on_input_keyup = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keyup(elem, keyCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pMaskEdit._on_input_mousedown = function (elem, altkey, ctrlkey, shiftkey, metaKey) {
		var api = this._edit_base_api;
		if (api) {
			this._is_first_focus = false;
			api._on_input_mousedown(elem, altkey, ctrlkey, shiftkey, metaKey);
		}
	};

	_pMaskEdit._on_input_mouseup = function (elem, altkey, ctrlkey, shiftkey, metaKey) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mouseup(elem, altkey, ctrlkey, shiftkey, metaKey);
		}
	};

	_pMaskEdit._on_input_touchstart = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchstart(elem);
		}
	};

	_pMaskEdit._on_input_touchmove = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchmove(elem);
		}
	};

	_pMaskEdit._on_input_touchend = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchend(elem);
		}
	};

	_pMaskEdit._on_input_mousemove = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mousemove(elem);
		}
	};

	_pMaskEdit._on_input_select = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_select(elem);
		}
	};

	_pMaskEdit._on_input_selectionchange = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_selectionchange(elem);
		}
	};

	_pMaskEdit._on_input_copy = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_copy(elem);
		}
	};

	_pMaskEdit._on_input_cut = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_cut(elem);
		}
	};

	_pMaskEdit._on_input_paste = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_paste(elem);
		}
	};

	_pMaskEdit._on_input_compositionstart = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionstart(data);
		}
	};

	_pMaskEdit._on_input_compositionupdate = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionupdate(data);
		}
	};

	_pMaskEdit._on_input_compositionend = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionend(data);
		}
	};

	_pMaskEdit.on_fire_cancharchange = function (obj, chartext, pretext, posttext) {
		if (this.cancharchange && this.cancharchange._has_handlers) {
			var evt = new nexacro.CanCharEventInfo(obj, "cancharchange", chartext, pretext, posttext);
			return this.cancharchange._fireCheckEvent(this, evt);
		}

		return true;
	};

	_pMaskEdit.on_fire_canchange = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "canchange", pretext, prevalue, posttext, postvalue);
			return this.canchange._fireCheckEvent(this, evt);
		}

		return true;
	};

	_pMaskEdit.on_fire_oneditclick = function (obj, caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.oneditclick && this.oneditclick._has_handlers) {
			var evt = new nexacro.EditClickEventInfo(obj, "oneditclick", caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.oneditclick._fireEvent(this, evt);
		}

		return true;
	};

	_pMaskEdit.on_fire_onchanged = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.onchanged && this.onchanged._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "onchanged", pretext, prevalue, posttext, postvalue);
			return this.onchanged._fireEvent(this, evt);
		}
	};
	_pMaskEdit.on_fire_ontextchanged = function (obj, pretext, posttext) {
		if (this.ontextchanged && this.ontextchanged._has_handlers) {
			var evt = new nexacro.TextChangedEventInfo(this, "ontextchanged", pretext, posttext);
			return this.ontextchanged._fireEvent(this, evt);
		}

		return true;
	};

	_pMaskEdit.on_fire_ontextchange = function (event_info, obj) {
		var ret = true;
		var api = this._edit_base_api;
		var api_ret = {
			value : null, 
			text : "", 
			begin_pos : this._input_begin_pos, 
			bChange : false
		};
		var evt = new nexacro.TextChangeEventInfo(this, "ontextchange", event_info.chartext, event_info.pretext, event_info.posttext, event_info.preimetext, event_info.postimetext);

		if (obj) {
			obj.evt = evt;
		}

		if (this.ontextchange && this.ontextchange._has_handlers) {
			ret = this.ontextchange._fireCheckEvent(this, evt);

			if (ret && event_info.chartext != evt.chartext) {
				api._setValue(api._old_value);
				api._setText(api._old_text);
				api.setElementCaretPos(api._old_begin_pos, api._old_end_pos);

				if (this.type == "number") {
					api_ret = api._apply_filter(evt.chartext);
					if (api_ret.bChange) {
						api._setValue(api_ret.value);
						api._setText(api_ret.text);
						api.setElementCaretPos(api_ret.caret, api_ret.caret);
					}

					event_info.setTextInfo(evt.chartext, api._old_text, api._text, "", "");
				}
				else if (this.type == "string") {
					var inputInfo = api.inputText(chartext);

					event_info.setTextInfo(evt.chartext, api._old_text, inputInfo.newText, "", "");
				}
			}
		}
		return ret;
	};

	_pMaskEdit.on_fire_onchar = function (event_info, obj) {
		var ret = true;
		var api = this._edit_base_api;
		var api_ret = {
			value : null, 
			text : "", 
			begin_pos : this._input_begin_pos, 
			bChange : false
		};
		var evt = new nexacro.TextChangeEventInfo(this, "onchar", event_info.chartext, event_info.prechareventtext, event_info.posttext);

		if (obj) {
			obj.evt = evt;
		}

		if (this.onchar && this.onchar._has_handlers) {
			ret = this.onchar._fireCheckEvent(this, evt);

			if (ret && event_info.chartext != evt.chartext) {
				api._setValue(api._old_value);
				api._setText(api._old_text);
				api.setElementCaretPos(api._old_begin_pos, api._old_end_pos);

				if (this.type == "number") {
					api_ret = api._apply_filter(evt.chartext);
					if (api_ret.bChange) {
						api._setValue(api_ret.value);
						api._setText(api_ret.text);
						api.setElementCaretPos(api_ret.caret, api_ret.caret);
					}

					event_info.setTextInfo(evt.chartext, api._old_text, api._text, "", "");
				}
				else if (this.type == "string") {
					var inputInfo = api.inputText(evt.chartext);

					event_info.setTextInfo(evt.chartext, api._old_text, inputInfo.newText, "", "");
				}
			}
		}
		return ret;
	};

	_pMaskEdit._on_fire_changeEventSet = function (pretext, prevalue, posttext, postvalue) {
		var api = this._edit_base_api;
		var elem = this._input_element;

		this._textchanging = true;
		var ret = this.on_fire_canchange(this, pretext, prevalue, posttext, postvalue);
		if (!ret) {
			if (this.type == "string") {
				if (!prevalue) {
					api._setMaskedValue(api.makeMaskedValue(""));
				}
				else {
					api._setMaskedValue(api.makeMaskedValue(prevalue));
				}
			}

			api._setText(pretext);
			api._setValue(prevalue);
			api.syncValue();
			api._setFocusValue();

			elem.setElementValue(api._value);
			this._init_bind_flag();

			return false;
		}

		if (this.type == "string") {
			var newval = api.getValue();
			if (!newval) {
				api._setMaskedValue(api.makeMaskedValue(""));
			}
			else {
				api._setMaskedValue(api.makeMaskedValue(newval));
			}

			api._setText(api.makeText(api._strMaskedValue));
			api._setValue(api.makeValue(api._strMaskedValue));
			api.syncValue();
		}

		elem.setElementValue(api._value);

		if (this._dsupdate_cancel || (!this._dsupdate_in_textchanging && !this.applyto_bindSource("value", this.value))) {
			if (this.type == "string") {
				if (!prevalue) {
					api._setMaskedValue(api.makeMaskedValue(""));
				}
				else {
					api._setMaskedValue(api.makeMaskedValue(prevalue));
				}
			}

			api._setText(pretext);
			api._setValue(prevalue);
			api.syncValue();
			api._setFocusValue();

			elem.setElementValue(api._value);
			this._init_bind_flag();

			return false;
		}

		api._setFocusValue();
		this._init_bind_flag();
		this.on_fire_onchanged(this, pretext, prevalue, this.text, this.value);
		api._setFocusValue();

		return true;
	};

	_pMaskEdit._init = function () {
		var api = this._edit_base_api;
		if (api) {
			api._init();
		}

		this.set_value(undefined);
	};

	_pMaskEdit._init_bind_flag = function () {
		this._textchanging = false;
		this._dsupdate_in_textchanging = false;
		this._dsupdate_cancel = false;
	};

	_pMaskEdit._getDragData = function () {
		return this.getSelectedText();
	};

	_pMaskEdit._setValue = function (v) {
		if (nexacro._isNull(v)) {
			this.text = "";
		}
		else {
			this.text = nexacro._toString(v);
		}

		this.value = v;
		this.on_apply_value();
	};

	_pMaskEdit._accept_keydown_event = function (keyCode) {
		return true;
	};

	_pMaskEdit._recreateInputElement = function () {
		var input_elem = this._input_element;

		if (input_elem) {
			input_elem._destroyInputHandle();
			input_elem._input_handle = input_elem._createInputHandle();
			input_elem._bindEvent(input_elem);
		}
	};

	_pMaskEdit._isPasswordUsed = function (api) {
		var len = api && api._bufPass ? api._bufPass.length : 0;
		while (len--) {
			if (api._bufPass[len] == true) {
				return true;
			}
		}
		return false;
	};

	_pMaskEdit._set_editbase_focusstat = function (stat) {
		var api = this._edit_base_api;
		if (api) {
			switch (stat) {
				case "focus":
					api._stat_focus.setStatus(nexacro.EditBase.Status.Focus);
					break;
				case "blur":
					api._stat_focus.setStatus(nexacro.EditBase.Status.Blur);
					break;
				default:
					api._stat_focus.setStatus(stat);
					break;
			}
			;
		}
	};

	delete _pMaskEdit;
	_pMaskEdit = null;

	nexacro.MaskEditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.MaskEdit.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pMaskEditCtrl = nexacro._createPrototype(nexacro.MaskEdit, nexacro.MaskEditCtrl);
	nexacro.MaskEditCtrl.prototype = _pMaskEditCtrl;
	_pMaskEditCtrl._type_name = "MaskEditControl";
	nexacro._setForControlStyleFinder(_pMaskEditCtrl);

	delete _pMaskEditCtrl;
	_pMaskEditCtrl = null;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.TextArea) {
	nexacro.TextArea_Style = function (target) {
		nexacro.Style.call(this);

		if (target) {
			this._target = target;
		}

		this.linespace = null;
		this.caretcolor = null;
		this.compositecolor = null;
		this.displaynulltextcolor = null;
	};

	var _pTextAreaStyle = nexacro._createPrototype(nexacro.Style, nexacro.TextArea_Style);
	nexacro.TextArea_Style.prototype = _pTextAreaStyle;

	eval(nexacro._createValueAttributeEvalStr("_pTextAreaStyle", "linespace"));
	eval(nexacro._createColorAttributeEvalStr("_pTextAreaStyle", "caretcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pTextAreaStyle", "compositecolor"));
	eval(nexacro._createColorAttributeEvalStr("_pTextAreaStyle", "selectcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pTextAreaStyle", "selectbackground"));
	eval(nexacro._createColorAttributeEvalStr("_pTextAreaStyle", "displaynulltextcolor"));

	_pTextAreaStyle.__custom_emptyObject = function () {
		this.linespace = null;
		this.caretcolor = null;
		this.compositecolor = null;
		this.selectcolor = null;
		this.selectbackground = null;
		this.displaynulltextcolor = null;
	};

	_pTextAreaStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.linespace && this.linespace._is_empty) {
			val += "linespace:" + this.linespace._value + "; ";
		}
		if (this.caretcolor && !this.caretcolor._is_empty) {
			val += "caretcolor:" + this.caretcolor._value + "; ";
		}
		if (this.compositecolor && !this.compositecolor._is_empty) {
			val += "compositecolor:" + this.compositecolor._value + "; ";
		}
		if (this.selectcolor && !this.selectcolor._is_empty) {
			val += "selectcolor:" + this.selectcolor._value + "; ";
		}
		if (this.selectbackground && !this.selectbackground._is_empty) {
			val += "selectbackground:" + this.selectbackground._value + "; ";
		}
		if (this.displaynulltextcolor && !this.displaynulltextcolor._is_empty) {
			val += "displaynulltextcolor:" + this.displaynulltextcolor._value + "; ";
		}

		return val;
	};

	nexacro.TextArea_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.linespace = null;
		this.caretcolor = null;
		this.compositecolor = null;
		this.displaynulltextcolor = null;
	};

	var _pTextAreaCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.TextArea_CurrentStyle);
	nexacro.TextArea_CurrentStyle.prototype = _pTextAreaCurrentStyle;

	_pTextAreaCurrentStyle.__custom_emptyObject = _pTextAreaStyle.__custom_emptyObject;
	_pTextAreaCurrentStyle.__get_custom_style_value = _pTextAreaStyle.__get_custom_style_value;

	delete _pTextAreaStyle;
	delete _pTextAreaCurrentStyle;

	_pTextAreaStyle = null;
	_pTextAreaCurrentStyle = null;

	nexacro.TextArea = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent, true);

		this.acceptstab = false;
		this.autoselect = false;
		this.autoskip = false;
		this.displaynulltext = "";
		this.usesoftkeyboard = true;
		this.imemode = "none";
		this.inputfilter = "none";
		this.inputmode = "normal";
		this.inputtype = "normal";
		this.lengthunit = "utf16";
		this.maxlength = 0;
		this.readonly = false;
		this.scrollbars = "autoboth";
		this.tabindentsize = 4;
		this.undotype = "char";
		this.updatebindingvalue = "default";
		this.usecontextmenu = true;
		this.usecontrolkey = true;
		this.useinputpanel = true;
		this.useime = "global";
		this.value = undefined;
		this.text = "";
		this.wordwrap = "none";
		this.dragscrolltype = "all";


		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"canchange" : 1, 
			"onchanged" : 1, 
			"oneditclick" : 1, 
			"ontextchange" : 1, 
			"ontextchanged" : 1, 
			"cancharchange" : 1, 
			"onchar" : 1, 
			"onvscroll" : 1, 
			"onhscroll" : 1, 
			"onmousewheel" : 1, 
			"oncontextmenu" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};


		this._activate_flag = false;
		this._edit_base_api = new nexacro.MultilineEdit(this);
		this._init_max_scroll_width = 0;
		this._init_max_scroll_height = 0;
		this._input_element = null;
		this._is_scrollable = true;
		this._max_scroll_width = 0;
		this._max_scroll_height = 0;
		this._old_max_height = undefined;
		this._scrollbars = 3;
		this._origin_scrollbars = 3;
		this._wordwrap_scrollbars = 1;
		this._update_scroll_lock = false;
		this._accessibility_role = "textbox";
		this._caret_pos = {
			begin : -1, 
			end : -1
		};
		this._setcaret = false;
		this._textchanging = false;
		this._dsupdate_in_textchanging = false;
		this._dsupdate_cancel = false;
		this._max_line = null;
		this._old_selection = [0, 0];
		this._apply_client_padding = false;
		this._has_inputElement = true;
		this._scrolltop = 0;
		this._scrollleft = 0;
		this._activate_scroll = false;
		this._is_first_focus = true;
		this._lose_focus_comp = null;
		this._is_set_value = false;
	};

	var _pTextArea = nexacro._createPrototype(nexacro.Component, nexacro.TextArea);
	nexacro.TextArea.prototype = _pTextArea;
	_pTextArea._type_name = "TextArea";

	nexacro.TextArea._default_selectcolor = nexacro._getCachedStyleObj("color", "#3e3e3eff");
	nexacro.TextArea._focused_selectcolor = nexacro._getCachedStyleObj("color", "#ffffffff");
	nexacro.TextArea._default_selectbackground = nexacro._getCachedStyleObj("color", "#ffffffb3");


	_pTextArea.on_apply_custom_pseudo = function (pseudo) {
		if (pseudo) {
			this._pseudo = pseudo;
		}
		else if (this._pseudo) {
			pseudo = this._pseudo;
		}

		var curstyle = this.currentstyle;

		var align = this.on_find_CurrentStyle_align(pseudo);
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (font != curstyle.font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (letterspace != curstyle.letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (color != curstyle.color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var caretcolor = this.on_find_CurrentStyle_caretcolor(pseudo);
		if (caretcolor != curstyle.caretcolor) {
			curstyle.caretcolor = caretcolor;
			this.on_apply_style_caretcolor(caretcolor);
		}

		var compositecolor = this.on_find_CurrentStyle_compositecolor(pseudo);
		if (compositecolor != curstyle.compositecolor) {
			curstyle.compositecolor = compositecolor;
			this.on_apply_style_compositecolor(compositecolor);
		}

		var selectcolor = this.on_find_CurrentStyle_selectcolor(pseudo);
		if (selectcolor != curstyle.selectcolor) {
			curstyle.selectcolor = selectcolor;
			this.on_apply_style_selectcolor(selectcolor);
		}

		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(pseudo);
		if (displaynulltextcolor != curstyle.displaynulltextcolor) {
			curstyle.displaynulltextcolor = displaynulltextcolor;
			this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
		}

		var selectbackground = this.on_find_CurrentStyle_selectbackground(pseudo);
		if (selectbackground != curstyle.selectbackground) {
			curstyle.selectbackground = selectbackground;
			this.on_apply_style_selectbackground(selectbackground);
		}

		var linespace = this.on_find_CurrentStyle_linespace(pseudo);
		if (linespace != curstyle.linespace) {
			curstyle.linespace = linespace;
			this.on_apply_style_linespace(linespace);
		}

		var padding = this.on_find_CurrentStyle_padding(pseudo);
		if (padding != curstyle.padding) {
			curstyle.padding = padding;
			this.on_apply_style_padding(padding);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pTextArea.on_create_custom_style = function () {
		return new nexacro.TextArea_Style(this);
	};

	_pTextArea.on_create_custom_currentStyle = function () {
		return new nexacro.TextArea_CurrentStyle();
	};


	_pTextArea.on_find_CurrentStyle_align = function (pseudo) {
		var align = this._find_pseudo_obj("align", pseudo, "align");
		return (align) ? align : nexacro.Component._default_textarea_align;
	};

	_pTextArea.on_find_CurrentStyle_cursor = function (pseudo) {
		var cursor = "";
		if (!this._isEnable() && this.parent && !this.parent._is_application) {
			if (!this._is_subcontrol) {
				cursor = this.parent._find_pseudo_obj("cursor", pseudo);
			}
			else {
				var p = this.parent;
				while (p && p._is_form) {
					p = p.parent;
				}

				if (p) {
					cursor = p._find_pseudo_obj("cursor", pseudo);
				}
				else {
					cursor = null;
				}
			}
		}
		else {
			cursor = this._find_pseudo_obj("cursor", pseudo);
		}

		return (cursor) ? cursor : nexacro.Component._default_cursor;
	};

	_pTextArea.on_find_CurrentStyle_caretcolor = function (pseudo) {
		return this._find_pseudo_obj("caretcolor", pseudo, "color");
	};

	_pTextArea.on_find_CurrentStyle_compositecolor = function (pseudo) {
		return this._find_pseudo_obj("compositecolor", pseudo, "color");
	};

	_pTextArea.on_find_CurrentStyle_selectcolor = function (pseudo) {
		var color = this._find_pseudo_obj("selectcolor", pseudo, "color");
		if (!color) {
			if (pseudo == "focused") {
				color = nexacro.TextArea._focused_selectcolor;
			}
			else {
				color = nexacro.TextArea._default_selectcolor;
			}
		}

		return color;
	};

	_pTextArea.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		var displaynulltextcolor = this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_pseudo_obj("color", pseudo, "color");
		}
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}

		return (displaynulltextcolor) ? displaynulltextcolor : nexacro.Component._default_color;
	};

	_pTextArea.on_find_CurrentStyle_selectbackground = function (pseudo) {
		var bkcolor = this._find_pseudo_obj("selectbackground", pseudo, "background");
		return (bkcolor) ? bkcolor : nexacro.TextArea._default_selectbackground;
	};

	_pTextArea.on_find_CurrentStyle_linespace = function (pseudo) {
		return this._find_pseudo_obj("linespace", pseudo, "value");
	};


	_pTextArea.on_update_style_cursor = function () {
		var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
		this.currentstyle.cursor = cursor;
		this.on_apply_style_cursor(cursor);
	};

	_pTextArea.on_update_style_caretcolor = function () {
		var caretcolor = this.on_find_CurrentStyle_caretcolor(this._pseudo);
		this.currentstyle.caretcolor = caretcolor;
		this.on_apply_style_caretcolor(caretcolor);
	};

	_pTextArea.on_update_style_compositecolor = function () {
		var compositecolor = this.on_find_CurrentStyle_compositecolor(this._pseudo);
		this.currentstyle.compositecolor = compositecolor;
		this.on_apply_style_compositecolor(compositecolor);
	};

	_pTextArea.on_update_style_selectcolor = function () {
		var selectcolor = this.on_find_CurrentStyle_selectcolor(this._pseudo);
		this.currentstyle.selectcolor = selectcolor;
		this.on_apply_style_selectcolor(selectcolor);
	};

	_pTextArea.on_update_style_displaynulltextcolor = function () {
		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(this._pseudo);
		this.currentstyle.displaynulltextcolor = displaynulltextcolor;
		this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
	};

	_pTextArea.on_update_style_selectbackground = function () {
		var selectbackground = this.on_find_CurrentStyle_selectbackground(this._pseudo);
		this.currentstyle.selectbackground = selectbackground;
		this.on_apply_style_selectbackground(selectbackground);
	};

	_pTextArea.on_update_style_linespace = function () {
		var linespace = this.on_find_CurrentStyle_linespace(this._pseudo);
		this.currentstyle.linespace = linespace;
		this.on_apply_style_linespace(linespace);
	};

	_pTextArea.on_update_style_padding = function () {
		var padding = this.on_find_CurrentStyle_padding(this._pseudo);
		this.currentstyle.padding = padding;
		this.on_apply_style_padding(padding);
	};


	_pTextArea.on_apply_style_align = function (align) {
		var curstyle = this.currentstyle;
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			if (curstyle.align == null || (curstyle.align && curstyle.align._is_empty)) {
				curstyle.align = nexacro._cloneStyleObject(nexacro.Component._default_textarea_align);
			}

			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pTextArea.on_apply_style_color = function (color) {
		var input_elem = this._input_element;
		if (input_elem) {
			if (this.currentstyle.color == null) {
				this.currentstyle.color = nexacro._cloneStyleObject(nexacro.Component._default_color);
			}
			input_elem.setElementColor(color);
		}
	};

	_pTextArea.on_apply_style_cursor = function (cursor) {
		var control_elem = this.getElement();
		if (control_elem) {
			control_elem.setElementCursor(cursor);

			var input_elem = this._input_element;
			if (input_elem) {
				input_elem.setElementCursor(cursor);
			}
		}
	};

	_pTextArea.on_apply_style_font = function (font) {
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			if (this.currentstyle.font == null) {
				this.currentstyle.font = nexacro._cloneStyleObject(nexacro.Component._default_font);
			}
			input_elem.setElementFont(font);
			api.setPosition();
			api._apply_style(input_elem);
		}
	};

	_pTextArea.on_apply_style_caretcolor = function (color) {
	};

	_pTextArea.on_apply_style_compositecolor = function (color) {
	};

	_pTextArea.on_apply_style_selectbackground = function (selectbackground) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSelectBackgroundColor(selectbackground);
		}
	};

	_pTextArea.on_apply_style_selectcolor = function (selectcolor) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSelectColor(selectcolor);
		}
	};

	_pTextArea.on_apply_style_linespace = function (v) {
		var input_elem = this._input_element;
		if (input_elem) {
			var lineHeight = v ? v : 0;
			input_elem.setElementLineSpace(lineHeight);
			input_elem.setElementValue(this.value, true);
			this._update_scroll();
		}
	};

	_pTextArea.on_apply_style_padding = function (v) {
		var input_elem = this._input_element;
		if (input_elem) {
			this._edit_base_api.setPosition();
			this._update_scroll();
		}
	};

	_pTextArea.on_apply_style_displaynulltextcolor = function (displaynulltextcolor) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementDisplayNullTextColor(displaynulltextcolor);
		}
	};

	_pTextArea.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		if (this._input_element) {
			this._input_element.setElementAccessibilityRole(accessibility.role);
		}
	};

	_pTextArea.on_apply_style_letterspace = function (letterspace) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementLetterSpace(letterspace);
		}
		this._edit_base_api.onUpdateStyle(this);
	};
	_pTextArea.on_create_contents = function () {
		var control = this.getElement();
		if (control) {
			var curstyle = this.currentstyle;
			var input_elem = this._input_element = new nexacro.TextAreaElement(control);

			input_elem.setElementSize(this._client_width, this._client_height);
			input_elem.setElementFont(curstyle.font);
			input_elem.setElementColor(curstyle.color);

			input_elem.setElementSelectColor(curstyle.selectcolor);
			input_elem.setElementSelectBackgroundColor(curstyle.selectbackground);
			input_elem.setElementDisplayNullTextColor(curstyle.displaynulltextcolor);
			this._setAccessibilityFlagMultiLine(true);

			delete input_elem;
			input_elem = null;
		}
	};

	_pTextArea.on_created_contents = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			var val = nexacro._toString(this.value);
			var api = this._edit_base_api;
			var curstyle = this.currentstyle;

			input_elem.setElementReadonly(this.readonly);
			input_elem.setElementMaxLength(this.maxlength);
			input_elem.setElementWordWrap(this.wordwrap);
			input_elem.setElementUseIme(this.useime);
			input_elem.setElementImeMode(this.imemode);
			input_elem.setElementEnable(this._isEnable());
			input_elem._is_prevent_enter = this._is_use_ex_enter;

			if (api) {
				api.setValue(val);
				api._setFocusValue();
			}

			if (this.currentstyle && this.currentstyle.cursor && this.currentstyle.cursor.value != "auto") {
				this.on_apply_style_cursor(this.currentstyle.cursor);
			}

			input_elem.create();

			this.on_apply_lengthunit();

			input_elem._bindEvent();

			if (api) {
				api.setPosition();
			}

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
				input_elem._setElementInputLabel();
			}

			this.on_apply_displaynulltext();
			input_elem.setElementLineSpace(this.currentstyle.linespace);
			input_elem.setElementLetterSpace(this.currentstyle.letterspace);
			this._update_scroll();

			this.on_apply_prop_rtldirection();

			this._init_max_scroll_width = this._max_scroll_width = input_elem.getScrollWidth();
			this._init_max_scroll_height = this._max_scroll_height = input_elem.getScrollHeight();

			if (curstyle && curstyle.cursor) {
				this.on_apply_style_cursor(curstyle.cursor);
			}
		}
	};

	_pTextArea.on_destroy_contents = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem._unBindEvent();
			input_elem.destroy();
			this._input_element = null;
		}

		var api = this._edit_base_api;
		if (api) {
			api._destroy();
			this._edit_base_api = null;
		}

		this._caret_pos = null;
	};

	_pTextArea.on_change_containerRect = function (width, height) {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementSize(width, height);

			if (this._update_scroll_lock == true) {
				return false;
			}

			this._update_scroll_lock = true;
			this._update_scroll();
			this._update_scroll_lock = false;
		}
	};

	_pTextArea.on_getBindableProperties = function () {
		return "value";
	};

	_pTextArea.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);
		var input_elem = this._input_element;

		if (input_elem) {
			if (!v) {
				var pos = input_elem.getElementCaretPos();
				if (pos != -1 && pos.begin != pos.end) {
					input_elem.setElementSetSelect(0);
				}
			}

			input_elem.setElementEnable(v);
			this.on_apply_style_cursor(this.currentstyle.cursor);
		}
	};

	_pTextArea.on_apply_custom_setfocus = function (evt_name) {
		var input_elem = this._input_element;
		var api = this._edit_base_api;

		if (input_elem) {
			if (nexacro._enableaccessibility && (evt_name == "downkey" || evt_name == "upkey")) {
				if (this.vscrollbar && this.vscrollbar.visible) {
					this.vscrollbar.set_pos(0);
				}
				this.setCaretPos(0);
			}

			if (api) {
				api._changeFocusText(input_elem);
				api._bChangeFocusText = true;
			}

			if (this._setcaret) {
				this._setcaret = false;
			}

			if (evt_name != "lbuttondown" && evt_name != "tap" && this._old_selection[0] != this._old_selection[1]) {
				input_elem.setElementSetSelect(this._old_selection[0], this._old_selection[1]);
			}
			else if (nexacro.BrowserType != "Edge" && nexacro.Browser != "MobileSafari" && !this.autoselect) {
				if (!((nexacro.Browser == "IE" || nexacro.Browser == "Runtime") && evt_name == "lbuttondown")) {
					this.setCaretPos(api._input_begin_pos);
				}
			}

			var _apply_focus = true;

			if (nexacro.OS == "iOS") {
				var _form = this._getForm();
				if (_form && _form.stepcontrol) {
					if (this.positionstep != _form.stepcontrol.stepindex) {
						_apply_focus = false;
					}
				}
			}

			if (_apply_focus) {
				input_elem.setElementFocus();
			}

			var h_pos = this.hscrollbar ? this.hscrollbar.pos : 0;
			var v_pos = this.vscrollbar ? this.vscrollbar.pos : 0;

			var _is_set_value = this._is_set_value;

			var pThis = this;
			nexacro.OnceCallbackTimer.callonce(pThis, function () {
				if (pThis.hscrollbar) {
					if (evt_name != "lbuttondown" && !this.autoselect) {
						if (_is_set_value && nexacro.Browser == "Safari") {
							h_pos = input_elem.getScrollWidth ? input_elem.getScrollWidth() : 0;
						}
						else {
							h_pos = input_elem.getScrollLeft ? input_elem.getScrollLeft() : 0;
						}
					}
					pThis.hscrollbar.set_pos(h_pos);
				}

				if (pThis.vscrollbar) {
					if (evt_name != "lbuttondown" && !this.autoselect) {
						if (_is_set_value) {
							v_pos = input_elem.getScrollHeight ? input_elem.getScrollHeight() : 0;
						}
						else {
							v_pos = input_elem.getScrollTop ? input_elem.getScrollTop() : 0;
						}
					}
					pThis.vscrollbar.set_pos(v_pos);
				}
			});
		}
		this._is_set_value = false;
	};

	_pTextArea.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			var api = this._edit_base_api;
			if (api) {
				if (api._undoStack) {
					api._undoStack.init();
				}
			}

			this._setValue(undefined);
			return true;
		}
	};

	_pTextArea.on_change_bindSource = function (propid, ds, row, col, index) {
		if (propid == "value") {
			var v = ds.getColumn(row, col);
			var api = this._edit_base_api;
			var input_elem = this._input_element;

			if (api) {
				var focus_val = api._getFocusValue();
				if (input_elem) {
					if (v === this.value && v === api._value && v === input_elem.value) {
						if (focus_val != v) {
							api._setFocusValue();
						}
						return true;
					}

					if (this._textchanging) {
						return true;
					}
				}
				if (api._is_composition && api._is_composition()) {
					return true;
				}
				if (api._undoStack) {
					api._undoStack.init();
				}
			}

			this._setValue(v);

			if (api && input_elem) {
				if (focus_val != v) {
					api._setFocusValue();
					api._updateCaretPos();
				}
			}
			this._is_set_value = true;

			return true;
		}

		return false;
	};

	_pTextArea.on_hscroll = function (obj, e) {
		if (this.onhscroll && this.onhscroll._has_handlers) {
			e.fromobject = this;
			this.onhscroll._fireEvent(this, e);
		}

		var control_elem = this._control_element;
		if (control_elem) {
			this._input_element.setScrollLeft(e.pos);
		}


		if ((nexacro.OS == "iOS" && !nexacro._isHybrid()) || (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge" || nexacro.Browser == "MobileSafari")) {
			if (nexacro.OSVersion >= 10 && (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE")) {
				this._input_element._refreshElement1(true);
			}
		}

		return true;
	};

	_pTextArea.on_vscroll = function (obj, e) {
		if (this.onvscroll && this.onvscroll._has_handlers) {
			e.fromobject = this;
			this.onvscroll._fireEvent(this, e);
		}

		var control_elem = this._control_element;
		if (control_elem) {
			this._input_element.setScrollTop(e.pos);
		}


		if ((nexacro.OS == "iOS" && !nexacro._isHybrid()) || (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge" || nexacro.Browser == "MobileSafari")) {
			if (nexacro.OSVersion >= 10 && (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE")) {
				this._input_element._refreshElement1(true);
			}
		}

		return true;
	};

	_pTextArea.on_get_style_accessibility_label = function () {
		var label = "";
		return label;
	};

	_pTextArea._on_getAccessibilityAdditionalLabel = function () {
		if (this._edit_base_api && this._isAccessibilityEnable()) {
			return this._edit_base_api._on_getAccessibilityAdditionalLabel();
		}
		return "";
	};

	_pTextArea._getAccessibilityRole = function (accessibility) {
		var role = nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
		if (nexacro._accessibilitytype == 4) {
			return "";
		}
		else {
			return role;
		}
	};

	_pTextArea._setAccessibilityStatFocus = function (evt_name) {
		if (this._input_element) {
			var role = this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo));
			if (this._getDescLevel() == "none") {
				role = "none";
			}
			this._input_element.setElementAccessibilityRole(role);
		}
		return nexacro.Component.prototype._setAccessibilityStatFocus.call(this, evt_name);
	};

	_pTextArea._setAccessibilityNotifyEvent = function (direction) {
		if (this._edit_base_api) {
			this._edit_base_api._setAccessibilityNotifyLabel();
		}
		return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
	};

	_pTextArea.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var api = this._edit_base_api;
		if (api) {
			api.setPosition();
		}

		if (this._input_element) {
			this._input_element.setElementRtlDirection(this._rtldirection);
		}

		if (this.vscrollbar) {
			this.vscrollbar._setRtlDirection(this._rtldirection);
		}
		if (this.hscrollbar) {
			this.hscrollbar._setRtlDirection(this._rtldirection);

			if (!this._is_created) {
				this.hscrollbar.set_pos(0);
			}
		}
	};

	_pTextArea.set_text = function (v) {
	};

	_pTextArea.set_value = function (v) {
		var api = this._edit_base_api;
		v = nexacro._toString(v);

		if (v && v !== undefined && v != "") {
			v = v.replace(/&quot;/g, "\"");
			if (v.indexOf("\r\n") != -1 || v.indexOf("\n\r") != -1) {
				v = v.replace(/\r\n/g, "\n").replace(/\n\r/g, "\n");
			}
			else {
				if (v.indexOf("\r") != -1) {
					v = v.replace(/\r/g, "");
				}
			}
		}

		if (v != this.value) {
			var form = this._getRootForm();
			this._is_set_value = true;

			if (!this.applyto_bindSource("value", v)) {
				return;
			}

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (api) {
					var old_keyinput_event = api._accept_keyinput_event;
					api._accept_keyinput_event = false;

					this._setValue(v);
					api._accept_keyinput_event = old_keyinput_event;
				}
				else {
					this._setValue(v);
				}

				if (nexacro.BrowserVersion <= 8) {
					if (form && form._bFireLoadEvent) {
						this._recreateInputElement();
					}
				}
			}
			else {
				this._setValue(v);
			}

			if (api) {
				api._setFocusValue();
				api._updateCaretPos();
			}
		}
		else {
			var elem = this._input_element;
			if (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") {
				if (v !== api._value) {
					this._is_set_value = true;
					this.on_apply_value();
				}
				else {
					if (api._keycode == nexacro.Event.KEY_DELETE || api._keycode == nexacro.Event.KEY_BACKSPACE) {
						if (v !== api._text) {
							this._is_set_value = true;
							this.on_apply_value();
						}
					}
					else {
						if (elem && v !== elem.getElementValue()) {
							this._is_set_value = true;
							this.on_apply_value();
						}
					}
				}
			}
			else {
				if (api._keycode == nexacro.Event.KEY_DELETE || api._keycode == nexacro.Event.KEY_BACKSPACE) {
					if (v !== api._text) {
						this._is_set_value = true;
						this.on_apply_value();
					}
				}
				else {
					if (elem && v !== elem.getElementValue()) {
						this._is_set_value = true;
						this.on_apply_value();
					}
				}
			}
		}
	};

	_pTextArea.on_apply_value = function () {
		var api = this._edit_base_api;

		if (api) {
			api.setValue(this.value);
			api.syncValue();
			api.onUpdateStyle(this);
		}

		this._refreshAccessibilityValue();
	};

	_pTextArea.set_scrollbars = function (v) {
		if (v != this.scrollbars || !this._is_created) {
			switch (v) {
				case "none":
					this._scrollbars = 0;
					break;
				case "autovert":
					this._scrollbars = 1;
					break;
				case "autohorz":
					this._scrollbars = 2;
					break;
				case "autoboth":
					this._scrollbars = 3;
					break;
				case "fixedvert":
					this._scrollbars = 4;
					break;
				case "fixedhorz":
					this._scrollbars = 8;
					break;
				case "fixedboth":
					this._scrollbars = 12;
					break;
				case "alwaysvert":
					this._scrollbars = 16;
					break;
				case "alwayshorz":
					this._scrollbars = 32;
					break;
				default:
					this._scrollbars = 3;
					v = "autoboth";
			}

			this._origin_scrollbars = this._scrollbars;
			if ((this.wordwrap != "none" && this.wordwrap != "false" && this.wordwrap != false) && this._scrollbars == 3) {
				this._scrollbars = this._wordwrap_scrollbars;
			}
			else {
				this._scrollbars = this._origin_scrollbars;
			}
			var input_elem = this._input_element;
			if (input_elem && (this.wordwrap == "none" || this.wordwrap == "false" || this.wordwrap == false) && (this._scrollbars == 2 || this._scrollbars == 3 || this._scrollbars == 8 || this._scrollbars == 12 || this._scrollbars == 32)) {
				input_elem.setElementAlign(nexacro.Component._default_textarea_align);
			}

			this.scrollbars = v;
			if (this._control_element && this._is_created) {
				this._onResetScrollBar();
			}
		}

		this._update_scroll();

		return v;
	};

	_pTextArea.set_displaynulltext = function (v) {
		var isNull = nexacro._isNull(v);
		if (isNull) {
			v = "";
		}
		else {
			v = nexacro._toString(v);
			v = v.replace(/&quot;/g, "\"");
		}

		if (v != this.displaynulltext) {
			this.displaynulltext = v;
			this.on_apply_displaynulltext();
		}
	};

	_pTextArea.on_apply_displaynulltext = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementDisplayNullText(this.displaynulltext);
		}
	};

	_pTextArea.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pTextArea.on_apply_readonly = function (val) {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementReadonly(v);
		}
	};

	_pTextArea.set_autoselect = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoselect) {
			this.autoselect = v;
		}
	};


	_pTextArea.set_autoskip = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoskip) {
			this.autoskip = v;
		}
	};

	_pTextArea.on_apply_autoskip = function () {
		var root_comp = this._getRootComponent(this);
		var next_comp = this._refform.getNextComponent(root_comp, true);
		if (next_comp) {
			next_comp.setFocus();
			var api = next_comp._edit_base_api ? next_comp._edit_base_api : null;
			if (api) {
				if (!next_comp.autoselect) {
					next_comp.setCaretPos(0);
				}
			}
		}
	};

	_pTextArea.set_acceptstab = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.acceptstab) {
			this.acceptstab = v;
		}
	};

	_pTextArea.set_maxlength = function (v) {
		v = nexacro._toInt(v);
		if (v && v != this.maxlength) {
			if (v < 0) {
				v = 0;
			}
			this.maxlength = v;
			this.on_apply_maxlength();
		}
	};

	_pTextArea.on_apply_maxlength = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementMaxLength(this.maxlength);
		}
	};

	_pTextArea.set_inputmode = function (v) {
		v = nexacro._toString(v);
		if (v && v != this.inputmode) {
			this.inputmode = v;
		}
	};

	_pTextArea.set_inputfilter = function (v) {
		v = nexacro._toString(v);

		if (v && v != this.inputfilter) {
			this.inputfilter = v;
			this.on_apply_inputfilter();
		}
	};

	_pTextArea.on_apply_inputfilter = function () {
		var api = this._edit_base_api;
		if (api) {
			api.setInputfilter(this.inputfilter);
		}
	};

	_pTextArea.set_inputtype = function (v) {
		v = nexacro._toString(v);
		if (v == "") {
			v = "normal";
		}

		if (v && v != this.inputtype) {
			this.inputtype = v;
			this.on_apply_inputtype();
		}
	};

	_pTextArea.on_apply_inputtype = function () {
		var api = this._edit_base_api;
		if (api) {
			api.setInputType(this.inputtype);
			api._apply_elementtype(this._input_element);
		}
	};

	_pTextArea.set_lengthunit = function (v) {
		if (v != this.lengthunit) {
			this.lengthunit = v;
			this.on_apply_lengthunit();
		}
	};

	_pTextArea.on_apply_lengthunit = function () {
		if (this._edit_base_api) {
			this._edit_base_api.setLengthunit(this.lengthunit);
		}
	};

	_pTextArea.set_usesoftkeyboard = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usesoftkeyboard) {
			this.usesoftkeyboard = v;
			this.on_apply_usesoftkeyboard();
		}
	};

	_pTextArea.on_apply_usesoftkeyboard = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementUseSoftKeyboard(this.usesoftkeyboard);
		}
	};

	_pTextArea.set_imemode = function (v) {
		this.imemode = nexacro._toString(v);
		this.on_apply_imemode();
	};

	_pTextArea.on_apply_imemode = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementImeMode(this.imemode);
		}
	};

	_pTextArea.set_useime = function (v) {
		this.useime = nexacro._toString(v);
		this.on_apply_useime();
	};

	_pTextArea.on_apply_useime = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementUseIme(this.useime);
		}
	};

	_pTextArea.set_wordwrap = function (v) {
		if (typeof (v) == "string") {
			v = v.toLowerCase();
		}

		if (v != this.wordwrap) {
			this.wordwrap = v;
			this.on_apply_wordwrap();
		}
	};

	_pTextArea.on_apply_wordwrap = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			input_elem.setElementWordWrap(this.wordwrap);
		}

		if (this.wordwrap != "false" && this.wordwrap != false && this.wordwrap != "none" && this._scrollbars == 3) {
			this._scrollbars = this._wordwrap_scrollbars;
		}
		else {
			this._scrollbars = this._origin_scrollbars;
		}

		this._edit_base_api.onUpdateStyle(this);
		this.on_apply_value();
	};

	_pTextArea.set_linespace = function (v) {
		v = nexacro._toInt(v);
		if (v && v != this.linespace) {
			this.linespace = v;
			this.on_apply_linespace();

			this._update_scroll();
		}
	};

	_pTextArea.on_apply_linespace = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			var lineHeight = (this.linespace < 0) ? "" : this.linespace + "px";
			input_elem.setElementLineSpace(lineHeight);
		}
	};

	_pTextArea.set_dragscrolltype = function (v) {
		nexacro.Form.prototype.set_dragscrolltype.call(this, v);
	};

	_pTextArea.set_tabindentsize = function (v) {
		v = nexacro._toInt(v);
		if (v != this.tabindentsize) {
			this.tabindentsize = v;
		}
	};

	_pTextArea.set_undotype = function (v) {
		v = nexacro._toString(v);
		if (v != this.undotype) {
			this.undotype = v;
		}
	};

	_pTextArea.set_usecontrolkey = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usecontrolkey) {
			this.usecontrolkey = v;
		}
	};

	_pTextArea.set_usecontextmenu = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usecontextmenu) {
			this.usecontextmenu = v;
		}
	};

	_pTextArea.set_useinputpanel = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.useinputpanel) {
			this.useinputpanel = v;
		}
	};

	_pTextArea.set_updatebindingvalue = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.updatebindingvalue) {
			this.updatebindingvalue = v;
		}
	};

	_pTextArea.getLength = function (v) {
		var api = this._edit_base_api;
		if (api) {
			if (!v) {
				v = this.lengthunit;
			}

			return api.getLength(this._input_element, this.value, false, null, v);
		}

		return -1;
	};

	_pTextArea.getCaretPos = function () {
		if (this.readonly) {
			return -1;
		}

		var input_elem = this._input_element;
		if (input_elem) {
			if (!input_elem._checkActiveElement()) {
				return -1;
			}

			var pos = input_elem.getElementCaretPos();
			if (pos && pos != -1) {
				var api = this._edit_base_api;
				if (api && api._is_composition()) {
					return pos.end;
				}
				else {
					return pos.begin;
				}
			}
		}

		return -1;
	};

	_pTextArea.getInputElementAttribute = function (attribute) {
		var input_elem = this._input_element;
		if (input_elem) {
			return input_elem.getInputElementAttribute(attribute);
		}

		return undefined;
	};

	_pTextArea.setInputElementAttribute = function (attribute, attrvalue) {
		var input_elem = this._input_element;
		if (input_elem) {
			return input_elem.setInputElementAttribute(attribute, attrvalue);
		}

		return false;
	};

	_pTextArea.setCaretPos = function (v) {
		var api = this._edit_base_api;
		var input_elem = this._input_element;
		if (input_elem) {
			if (arguments.length == 0) {
				v = 0;
			}
			else {
				v = nexacro._toInt(v);
				if (v == -1) {
					if (this.value) {
						v = this.value.length;
					}
					else {
						v = 0;
					}
				}
			}

			input_elem.setElementSetSelect(v, v);
			api._input_begin_pos = api._begin_pos = api._end_pos = v;
			this._caret_pos.begin = v;
			this._caret_pos.end = v;
			this._setcaret = true;

			return true;
		}
		return false;
	};

	_pTextArea.getSelect = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			if (this._is_focused == false) {
				return this._last_selection;
			}

			var api = this._edit_base_api;
			if (api) {
				var start = api._begin_pos !== undefined ? api._begin_pos : 0;
				var end = api._end_pos !== undefined ? api._end_pos : 0;
				return [start, end];
			}
			else {
				return [0, 0];
			}
		}
		else {
			return this._defalut_lastselection;
		}
	};

	_pTextArea.setSelect = function (start, end) {
		var input_elem = this._input_element;
		if (input_elem) {
			var api = this._edit_base_api;
			var txt = this.text ? this.text : "";
			var txt_len = txt.length;

			if (nexacro._isNull(start) || start === "") {
				start = 0;
			}
			if (nexacro._isNull(end) || end === "") {
				end = -1;
			}

			if (!nexacro._isNumber(start)) {
				start = nexacro._toInt(start);
			}
			if (!nexacro._isNumber(end)) {
				end = nexacro._toInt(end);
			}

			if (start == -1) {
				start = txt_len;
			}
			if (end == -1) {
				end = txt_len;
			}

			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}

			api._begin_pos = start;
			api._end_pos = end;
			this._caret_pos.begin = start;
			this._caret_pos.end = end;
			this._setcaret = true;

			input_elem.setElementSetSelect(start, end);

			return true;
		}

		return false;
	};

	_pTextArea.getSelectedText = function () {
		var input_elem = this._input_element;
		if (input_elem) {
			var pos = this.getSelect();

			if (this.value && pos != undefined) {
				return this.value.substring(pos[0], pos[1]);
			}
		}

		return "";
	};

	_pTextArea.setSelectedText = function (v) {
		v = nexacro._toString(v);

		var input_elem = this._input_element;
		if (v && input_elem) {
			var pos = this.getSelect();

			if (!input_elem._is_focused && !input_elem._is_focusing) {
				pos[0] = this._old_selection[0];
				pos[1] = this._old_selection[1];
			}

			if (pos[0] == pos[1]) {
				return;
			}

			var value = this.value;

			var before = value.substring(0, pos[0]);
			var text = value.substring(pos[0], pos[1]);
			var after = value.substr(pos[1]);
			var newValue = before + v + after;

			this.set_value(newValue);

			if (input_elem._is_focused || input_elem._is_focusing) {
				this.setSelect(pos[0], pos[0] + v.length);
			}
			else {
				this.applyto_bindSource("value", newValue);
			}

			if (!input_elem._is_focused && !input_elem._is_focusing) {
				this._restoreSelect();
				this._cancelSelect();
			}

			return text;
		}

		return undefined;
	};

	_pTextArea.isAboveSelected = function () {
	};

	_pTextArea.insertText = function (text, position) {
		text = nexacro._toString(text);
		if (text) {
			if (position == null) {
				position = -1;
			}

			var newValue = null;
			var value = this.value;
			if (value) {
				if (position < 0) {
					newValue = value + text;
				}
				else {
					var chars = value.split("");
					chars.splice(position, 0, text);

					newValue = chars.join("");
				}
			}
			else {
				newValue = text;
			}

			this.set_value(newValue);
		}
	};

	_pTextArea.deleteText = function (start, count) {
		start = start === undefined ? 0 : parseInt(start, 10);
		count = count === undefined ? -1 : parseInt(count, 10);

		if (count < -1 || start < 0 || isNaN(start) || isNaN(count)) {
			return false;
		}

		if (start == null) {
			start = 0;
		}

		if (count == null) {
			count = -1;
		}

		var newValue = null;
		var value = nexacro._isNull(this.value) ? "" : this.value;
		var chars = value.split("");

		if (count == -1) {
			chars.splice(start, chars.length);
		}
		else {
			chars.splice(start, count);
		}

		newValue = chars.join("");
		this.set_value(newValue);
	};

	_pTextArea.find = function (text, start) {
		if (start == null) {
			start = 0;
		}

		start = nexacro._toInt(start);
		text = nexacro._toString(text);

		if (start < 0) {
			return -1;
		}

		return text ? this.value.indexOf(text, start) : -1;
	};

	_pTextArea.replace = function (oldText, newText) {
		if (newText == null) {
			newText = "";
		}

		oldText = nexacro._toString(oldText);
		newText = nexacro._toString(newText);

		var value = this.value;

		if (oldText) {
			value = value.split(oldText).join(newText);

			this.set_value(value);
		}

		return value;
	};

	_pTextArea.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		var ret = this.applyto_bindSource("value", this.value);
		if (this._textchanging) {
			this._dsupdate_in_textchanging = true;
			if (!ret) {
				this._dsupdate_cancel = true;
			}
			else {
				this._dsupdate_cancel = false;
			}
		}
		else {
			this._dsupdate_in_textchanging = false;
		}
		return ret;
	};

	_pTextArea._on_deactivate = function () {
		nexacro.Component.prototype._on_deactivate.call(this);

		var api = this._edit_base_api;
		var elem = this._input_element;
		if (elem && api) {
			elem.setElementSetSelect(api._begin_pos, api._end_pos, true);

			elem._input_handle.blur();
		}
	};

	_pTextArea._on_activate = function () {
		if (!this._isSelected()) {
			this._stat_change("focus", "normal");
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			this._scrolltop = this._input_element.getScrollTop();
			this._scrollleft = this._input_element.getScrollLeft();
			this._activate_scroll = true;
		}

		this._activate_flag = true;
	};

	_pTextArea._on_killfocus = function (obj, e) {
		if (!this._is_alive) {
			return;
		}

		var api = this._edit_base_api;
		var elem = this._input_element;

		if (api && elem) {
			var focus_text = api._getFocusText();
			var focus_val = api._getFocusValue();
			var cur_text = api._getText();
			var cur_val = api._getValue();


			var elem_val = elem.getElementValue();
			if (((nexacro.Browser == "IE" && (nexacro.BrowserVersion == 8 || nexacro.BrowserVersion == 9) && nexacro.SystemLang != "ja") || 
				nexacro.OS == "iOS") && elem_val != cur_val) {
				api._setText(elem_val);
				api._setValue(elem_val);
				api.syncValue();
				cur_text = api._getText();

				if (nexacro.OS == "iOS" && api._is_composition && api._is_composition()) {
					if (api._is_hangul(cur_text)) {
						this._on_input_compositionend("");
					}
					else {
						api._skip_set_caret = true;
					}
				}
			}

			if (this._activate_flag) {
				this._activate_flag = false;
			}

			if ((nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") && !elem._is_focused) {
				if (focus_text != cur_text) {
					this._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);
					this.applyto_bindSource("value", this.value);
				}
				return;
			}

			api._is_on_killfocus = true;
			this._on_input_blur(elem);

			elem_val = elem.getElementValue();
			if (nexacro.Browser == "Gecko" && elem_val != cur_val) {
				api._setText(elem_val);
				api._setValue(elem_val);
				api.syncValue();
			}

			focus_text = api._getFocusText();
			focus_val = api._getFocusValue();
			cur_text = api._getText();
			cur_val = api._getValue();


			if (api._skip_set_caret) {
				api._skip_set_caret = false;
			}
			api._is_on_killfocus = false;

			if (focus_text != cur_text) {
				var win = this._getWindow();
				if (win && win._is_active_window != true && !obj) {
					elem.setElementValue(api._value, false, true);
					return;
				}

				var ret = this._on_fire_changeEventSet(focus_text, focus_val, cur_text, cur_val);
				if (!ret) {
					return;
				}
			}
			else if (focus_val === undefined && focus_text == cur_text) {
				api._setValue(undefined);
				api._setText("");
				api.syncValue();

				elem.setElementValue(api._value);
			}
			else {
				elem.setElementValue(api._value, false, true);
			}
			this._restoreSelect();

			var isRuntimeDisable = (nexacro.Browser == "Runtime" && !elem.enable) ? true : false;
			if (isRuntimeDisable) {
				elem.setElementEnable(true);
			}

			this._cancelSelect();

			if (isRuntimeDisable) {
				elem.setElementEnable(false);
			}
		}
	};

	_pTextArea._cancelSelect = function () {
		var api = this._edit_base_api;

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (api._is_selected()) {
				if (this.visible) {
					var form = this._getRootForm();
					var form_elem = form.getElement();

					if (form.vscrollbar) {
						form_elem._recover_vpos = form.vscrollbar.pos;
					}
					if (form.hscrollbar) {
						form_elem._recover_hpos = form.hscrollbar.pos;
					}

					var input_handle = this._input_element._input_handle;
					var _doc = this._input_element.getRootWindowHandle();

					if (this.vscrollbar) {
						this._scrolltop = this._input_element.getScrollTop();
					}
					if (this.hscrollbar) {
						this._scrollleft = this._input_element.getScrollLeft();
					}
					this._input_element.setElementSetSelect(api._begin_pos, api._begin_pos);
					nexacro._inputsetCaretPos(input_handle, _doc);

					if (this.vscrollbar) {
						this._input_element.setScrollTop(this._scrolltop);
					}
					if (this.hscrollbar) {
						this._input_element.setScrollLeft(this._scrollleft);
					}

					if (nexacro.BrowserVersion <= 8) {
						form_elem._recover_vpos = undefined;
						form_elem._recover_hpos = undefined;
					}
				}
				else {
					this.setCaretPos(api._begin_pos);
				}
			}
		}
		else if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			if (api._is_selected()) {
				this.setCaretPos(api._begin_pos);
			}
		}
	};

	_pTextArea._restoreSelect = function () {
		this._old_selection = this.getSelect();
	};

	_pTextArea._on_click = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		if (this.visible && this._isEnable() && this.enableevent) {
			var caretPos = this.getCaretPos();
			var clientXY = this._getClientXY(canvasX, canvasY);
			this.on_fire_oneditclick(this, caretPos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, this);
		}
	};

	_pTextArea._on_input_keyinput = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_keyinput(elem);
			api._on_input_keyinput_after();
		}
	};

	_pTextArea._on_input_focus = function (elem, target) {
		var api = this._edit_base_api;
		if (api) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				var scrolltop = this.vscrollbar ? this.vscrollbar.pos : 0;
				var scrollleft = this.hscrollbar ? this.hscrollbar.pos : 0;

				api._on_input_focus(elem, target);

				if (this.vscrollbar && scrolltop != elem.getScrollTop()) {
					elem.setScrollTop(scrolltop);
				}
				if (this.hscrollbar && scrollleft != elem.getScrollLeft()) {
					elem.setScrollLeft(scrollleft);
				}
			}
			else {
				api._on_input_focus(elem, target);
			}
		}
	};

	_pTextArea._on_input_blur = function (elem, target) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_blur(elem, target);
		}
	};

	_pTextArea._on_input_keydown = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keydown(elem, keyCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pTextArea._on_input_keyup = function (elem, keyCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keyup(elem, keyCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pTextArea._on_input_keypress = function (elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey) {
		var bRet = false;
		var api = this._edit_base_api;
		if (api) {
			bRet = api._on_input_keypress(elem, keyCode, charCode, altKey, ctrlKey, shiftKey, metaKey);
		}
		return bRet;
	};

	_pTextArea._on_input_mousedown = function (elem, altKey, ctrlKey, shiftKey, metaKey) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mousedown(elem, altKey, ctrlKey, shiftKey, metaKey);
		}
	};

	_pTextArea._on_input_mouseup = function (elem, altKey, ctrlKey, shiftKey, metaKey) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mouseup(elem, altKey, ctrlKey, shiftKey, metaKey);
		}
	};

	_pTextArea._on_input_mousemove = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_mousemove(elem);
		}
	};

	_pTextArea._on_input_touchstart = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchstart(elem);
		}
	};

	_pTextArea._on_input_touchmove = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchmove(elem);
		}
	};

	_pTextArea._on_input_touchend = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_touchend(elem);
		}
	};

	_pTextArea._on_input_select = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_select(elem);
		}
	};

	_pTextArea._on_input_selectionchange = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_selectionchange(elem);
		}
	};

	_pTextArea._on_input_copy = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_copy(elem);
		}
	};

	_pTextArea._on_input_cut = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_cut(elem);
		}
	};

	_pTextArea._on_input_paste = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_paste(elem);
		}
	};

	_pTextArea._on_input_compositionstart = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionstart(data);
		}
	};

	_pTextArea._on_input_compositionupdate = function (data) {
		var api = this._edit_base_api;
		if (api) {
			api._on_input_compositionupdate(data);
		}
	};

	_pTextArea._on_input_compositionend = function (data) {
		var api = this._edit_base_api;
		if (api && api._is_composition()) {
			api._on_input_compositionend(data);
		}
	};

	_pTextArea._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		var ret = nexacro.Component.prototype._on_mousewheel.call(this, elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll);


		if (this.scrollbars == "none") {
			ret = false;
		}
		return ret;
	};

	_pTextArea._is_use_ex_enter = false;
	_pTextArea.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			if (nexacro._enableaccessibility) {
				if (keycode == nexacro.Event.KEY_DOWN || keycode == nexacro.Event.KEY_UP) {
					var direction;
					if (keycode == nexacro.Event.KEY_DOWN) {
						direction = 1;
					}
					else if (keycode == nexacro.Event.KEY_UP) {
						direction = 2;
					}

					var line_text = this._getCaretLineString(null, direction);
					if (!line_text) {
						line_text = "#textarea:msg_accessibility_emptyline";
					}
					this._notifyAccessibility(line_text, "valuechange");
				}
			}
		}
		var retn = nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);

		if (this._is_use_ex_enter) {
			if ((ctrl_key || alt_key) && keycode == 13) {
				var cpos = this.getCaretPos();
				var value = this.text;
				var chars = value.split("");
				var api = this._edit_base_api;

				chars.splice(cpos, 0, "\n");
				newValue = chars.join("");

				if (this.maxlength >= newValue.length || this.maxlength == 0) {
					var elem = this._input_element;
					if (elem) {
						elem.text = newValue;
						elem.value = newValue;

						if (api) {
							if (nexacro.Browser == "IE") {
								var old_keyinput_event = api._accept_keyinput_event;
								api._accept_keyinput_event = false;

								elem._updateInputValue();
								api._accept_keyinput_event = old_keyinput_event;
							}
							else {
								elem._updateInputValue();
							}
						}
					}

					api._fire_text_event("\n");
					this.setCaretPos(api._begin_pos);
				}
			}
		}
		return retn;
	};

	_pTextArea.on_fire_cancharchange = function (obj, chartext, pretext, posttext) {
		if (this.cancharchange && this.cancharchange._has_handlers) {
			var evt = new nexacro.CanCharEventInfo(obj, "cancharchange", chartext, pretext, posttext);
			return this.cancharchange._fireCheckEvent(this, evt);
		}

		return true;
	};

	_pTextArea.on_fire_canchange = function (obj, bText, bValue, aText, aValue) {
		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "canchange", bText, bValue, aText, aValue);
			return this.canchange._fireCheckEvent(this, evt);
		}

		return true;
	};

	_pTextArea.on_fire_onchanged = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.onchanged && this.onchanged._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "onchanged", pretext, prevalue, posttext, postvalue);
			return this.onchanged._fireEvent(this, evt);
		}
	};

	_pTextArea.on_fire_oneditclick = function (obj, caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.oneditclick && this.oneditclick._has_handlers) {
			var evt = new nexacro.EditClickEventInfo(obj, "oneditclick", caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.oneditclick._fireEvent(this, evt);
		}

		return true;
	};

	_pTextArea.on_fire_ontextchanged = function (obj, pretext, posttext) {
		this._max_line = null;

		if (this.ontextchanged && this.ontextchanged._has_handlers) {
			var evt = new nexacro.TextChangedEventInfo(obj, "ontextchanged", pretext, posttext);
			return this.ontextchanged._fireEvent(this, evt);
		}

		return true;
	};

	_pTextArea.on_fire_ontextchange = function (event_info, evt) {
		var evt2 = evt;
		if (!evt) {
			evt2 = new nexacro.TextChangeEventInfo(this, "ontextchange", event_info.chartext, event_info.pretext, event_info.posttext, event_info.preimetext, event_info.postimetext);
		}
		else if (!(evt instanceof nexacro.TextChangeEventInfo)) {
			evt.evt = evt2 = new nexacro.TextChangeEventInfo(this, "ontextchange", event_info.chartext, event_info.pretext, event_info.posttext, event_info.preimetext, event_info.postimetext);
		}

		if (this.ontextchange && this.ontextchange._has_handlers) {
			return this.ontextchange._fireCheckEvent(this, evt2);
		}
		return true;
	};

	_pTextArea.on_fire_onchar = function (event_info, evt) {
		var evt2 = evt;
		if (!evt) {
			evt2 = new nexacro.TextChangeEventInfo(this, "onchar", event_info.chartext, event_info.prechareventtext, event_info.posttext);
		}
		else if (!(evt instanceof nexacro.TextChangeEventInfo)) {
			evt.evt = evt2 = new nexacro.TextChangeEventInfo(this, "onchar", event_info.chartext, event_info.prechareventtext, event_info.posttext);
		}

		if (this.onchar && this.onchar._has_handlers) {
			return this.onchar._fireCheckEvent(this, evt2);
		}
		return true;
	};

	_pTextArea._on_fire_textchangeEventSet = function (text_info) {
		var org_chartext = text_info.chartext;
		var changechartext = text_info.chartext;

		var bCancel = false;
		var bInsert = text_info.bInsert;
		var bCut = text_info.bCut;

		var bTextchangeRet = true;
		var bCancahrchangeRet = true;
		var bOncharRet = true;
		var bChartextChange = false;

		var fireCancharEvent = true;
		var bSetValue = false;

		var api = this._edit_base_api;
		var textEvt = new nexacro.TextChangeEventInfo(this, "ontextchange", text_info.chartext, text_info.pretext, text_info.posttext, text_info.preimetext, text_info.postimetext);
		var charEvt = new nexacro.TextChangeEventInfo(this, "onchar", text_info.chartext, text_info.prechareventtext, text_info.posttext);

		this._is_set_value = false;
		this._setcaret = false;

		var ret = this.on_fire_ontextchange(text_info, textEvt);

		if (ret) {
			if (org_chartext != textEvt.chartext) {
				bChartextChange = true;
				changechartext = textEvt.chartext;
			}

			if (this._is_set_value) {
				api._updateEventInfo(text_info, textEvt, charEvt);
				this._is_set_value = false;
				bSetValue = true;
			}

			if (!api._is_composition()) {
				if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
					var imetext = text_info.postimetext == "" ? text_info.preimetext : text_info.postimetext;

					if (api._keycode == nexacro.KeyCode_ImeInput && text_info.postimetext == "" && (imetext != "" ? !api._is_hangul(imetext) : false)) {
						ret = fireCancharEvent = false;
					}
					if (api._keycode == nexacro.KeyCode_ImeInput && api._stat_composition._curr_data == "" && imetext != "" && api._is_hangul(imetext) && !api._is_on_killfocus && !bSetValue) {
						ret = fireCancharEvent = false;
					}

					delete imetext;
					imetext = null;
				}
				else if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
					if (api._keycode == 8) {
						if (api._stat_composition._curr_stat == nexacro.EditBase.Status.CompositionEnd && org_chartext == "" && api.getCompositionData(elem) == "") {
							ret = fireCancharEvent = false;
						}
					}
				}
				else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && api._stat_composition.getCurrentStatus() != nexacro.EditBase.Status.None) {
						ret = fireCancharEvent = false;
					}
				}
				else if ((nexacro._isDesktop() && nexacro.Browser == "Safari") || nexacro.BrowserType == "Edge") {
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && !api._is_on_killfocus && api._stat_composition.getCurrentStatus() == nexacro.EditBase.Status.CompositionEnd && !api._pasteAction && !bSetValue) {
						ret = fireCancharEvent = false;
					}
				}
				else if (nexacro.Browser == "Runtime") {
					var imetext = text_info.postimetext == "" ? text_info.preimetext : text_info.postimetext;
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && (imetext != "" ? !api._is_hangul(imetext) : false) && !bSetValue) {
						ret = fireCancharEvent = false;
					}
					if (api._keycode == nexacro.KeyCode_ImeInput && org_chartext == "" && imetext != "" && api._is_hangul(imetext) && !bSetValue) {
						ret = fireCancharEvent = false;
					}

					delete imetext;
					imetext = null;
				}

				if (ret) {
					if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
						if (charEvt.pretext == "" && charEvt.posttext == "" && api._keycode == nexacro.Event.KEY_BACKSPACE && text_info.pretext != "") {
							charEvt.pretext = text_info.pretext;
						}

						if (api._is_hangul(org_chartext)) {
							ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
						}
						else {
							if (bInsert) {
								if (charEvt.posttext != charEvt.pretext && !(api._is_on_killfocus && text_info.pretext == text_info.posttext)) {
									if (charEvt.chartext != "") {
										ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
									}
									else {
										if (api._keycode == nexacro.Event.KEY_BACKSPACE || api._cutAction) {
											ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
										}
									}
								}
							}
							else {
								if (this.maxlength > 0 && text_info.pretext.length >= this.maxlength && charEvt.pretext != "" && charEvt.posttext == charEvt.pretext) {
									fireCancharEvent = false;
									ret = false;

									var elem = this._input_element;
									api._accept_focus_event = false;
									api.setElementCaretPos(api._input_begin_pos, api._input_begin_pos, elem);
									api._accept_focus_event = true;
								}
							}
						}
					}
					else {
						ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
					}

					if (this._is_set_value) {
						api._updateEventInfo(text_info, textEvt, charEvt);
						this._is_set_value = false;
						bSetValue = true;
					}
				}

				if (ret) {
					if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
						if (api._is_hangul(org_chartext)) {
							ret = this.on_fire_onchar(text_info, charEvt);
						}
						else if (bInsert && charEvt.posttext != charEvt.pretext && !(api._is_on_killfocus && text_info.pretext == text_info.posttext)) {
							if (charEvt.chartext != "") {
								ret = this.on_fire_onchar(text_info, charEvt);
							}
							else {
								if (api._keycode == nexacro.Event.KEY_BACKSPACE || api._cutAction) {
									ret = this.on_fire_onchar(text_info, charEvt);
								}
							}
						}
					}
					else {
						ret = this.on_fire_onchar(text_info, charEvt);
					}

					if (!ret) {
						bOncharRet = false;
					}

					if (text_info.chartext != charEvt.chartext) {
						changechartext = charEvt.chartext;
					}

					if (this._is_set_value) {
						api._updateEventInfo(text_info, textEvt, charEvt);
						this._is_set_value = false;
						bSetValue = true;
					}
				}
				else {
					bOncharRet = false;
					bCancahrchangeRet = false;
				}
			}
			else {
				fireCancharEvent = false;
			}

			if (org_chartext != changechartext) {
				var chartext = api.applyInputmode(changechartext);
				chartext = api._apply_inputfilter(changechartext);
				chartext = api._apply_inputtype(changechartext);

				if (changechartext.length > 0 && chartext.length == 0) {
					bCancel = true;
				}

				if (!bCancel) {
					bInsert = api._check_maxlength_from_text_event(chartext);

					if (!bInsert) {
						chartext = "";
					}
					else {
						chartext = api._apply_maxlength_from_text_event(chartext);

						if (chartext != changechartext.chartext) {
							bCut = true;
						}
					}
				}

				text_info.chartext = chartext;
				textEvt.chartext = chartext;

				if (bSetValue) {
					textEvt.posttext += chartext;
					text_info.posttext = textEvt.posttext === "" ? text_info.posttext : textEvt.posttext;
				}
				else {
					strFront = text_info.pretext.substr(0, api._input_begin_pos);

					if (nexacro.Browser == "IE" && api._is_hangul(org_chartext)) {
						var strRear = text_info.posttext.substr(api._end_pos, text_info.posttext.length - api._end_pos);
					}
					else if (nexacro.Browser == "Safari" && nexacro._isDesktop() && api._is_hangul(org_chartext)) {
						var strRear = text_info.pretext.substr(api._end_pos + org_chartext.length, text_info.pretext.length);
					}
					else if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && api._is_hangul(org_chartext)) {
						var strRear = text_info.pretext.substr(api._end_pos + org_chartext.length, text_info.pretext.length - org_chartext.length);
					}
					else {
						var strRear = text_info.pretext.substr(api._end_pos, text_info.pretext.length - api._end_pos);
					}

					textEvt.posttext = strFront + chartext + strRear;
					text_info.posttext = strFront + chartext + strRear;
				}

				if (bChartextChange && bOncharRet && bCancahrchangeRet) {
					ret = this.on_fire_cancharchange(this, textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
					if (this._is_set_value) {
						api._updateEventInfo(text_info, textEvt);
						this._is_set_value = false;
					}

					if (ret) {
						var evt = new nexacro.TextChangeEventInfo(this, "onchar", textEvt.chartext, text_info.prechareventtext, textEvt.posttext);
						ret = this.on_fire_onchar(text_info, evt);

						if (!ret) {
							bOncharRet = false;
						}

						if (this._is_set_value) {
							api._updateEventInfo(text_info);
							this._is_set_value = false;
						}
					}
					else {
						bOncharRet = false;
						bCancahrchangeRet = false;
					}
				}
			}
		}
		else {
			bTextchangeRet = false;

			if (this._is_set_value) {
				api._updateEventInfo(text_info);
				this._is_set_value = false;
			}
		}

		var ret = {
			bTextchangeRet : bTextchangeRet, 
			bCancahrchangeRet : bCancahrchangeRet, 
			bOncharRet : bOncharRet, 
			fireCancharEvent : fireCancharEvent, 
			bInsert : bInsert, 
			bCut : bCut
		};

		return ret;
	};

	_pTextArea._on_fire_changeEventSet = function (pretext, prevalue, posttext, postvalue) {
		var api = this._edit_base_api;
		var elem = this._input_element;

		this._textchanging = true;
		var ret = this.on_fire_canchange(this, pretext, prevalue, posttext, postvalue);
		if (!ret) {
			api._setText(pretext);
			api._setValue(prevalue);
			api.syncValue();
			api._setFocusValue();

			elem.setElementValue(api._value);
			this._init_bind_flag();

			return false;
		}

		elem.setElementValue(api._value, false, true);

		if (this._dsupdate_cancel || (!this._dsupdate_in_textchanging && !this.applyto_bindSource("value", this.value))) {
			api._setText(pretext);
			api._setValue(prevalue);
			api.syncValue();
			api._setFocusValue();

			elem.setElementValue(api._value);
			this._init_bind_flag();

			return false;
		}

		api._setFocusValue();
		this._init_bind_flag();
		this.on_fire_onchanged(this, pretext, prevalue, this.text, this.value);
		api._setFocusValue();

		return true;
	};

	_pTextArea._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_arrow = true;

		if (nexacro._enableaccessibility && !altKey && !ctrlKey && !shiftKey) {
			if (keycode == nexacro.Event.KEY_UP) {
				var elem = this._input_element;

				if (elem) {
					var caret_line = elem.getCaretLine();
					if (caret_line <= 1) {
						want_arrow = false;
					}
				}
				else {
					want_arrow = false;
				}
			}
			else if (keycode == nexacro.Event.KEY_DOWN) {
				var elem = this._input_element;

				if (elem) {
					var caret_line = elem.getCaretLine();
					var max_line = parseInt(this._getTextLine());
					if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
						if (caret_line == (max_line - 1)) {
							var cur_text = elem.getElementValue();
							var last_text = cur_text.substr(cur_text.length - 1, 1);

							if (last_text == "\n" || last_text == "\r") {
								caret_line++;
							}
						}
					}

					if (caret_line >= max_line) {
						want_arrow = false;
					}
				}
				else {
					want_arrow = false;
				}
			}
		}

		return {
			want_tab : this.acceptstab, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : want_arrow
		};
	};

	_pTextArea._init = function () {
		if (this._edit_base_api) {
			this._edit_base_api._init();
		}

		this.set_value(undefined);
	};

	_pTextArea._init_bind_flag = function () {
		this._textchanging = false;
		this._dsupdate_in_textchanging = false;
		this._dsupdate_cancel = false;
	};

	_pTextArea._getDragData = function () {
		return this.getSelectedText();
	};

	_pTextArea._getHLineInfo = function (idx, scroll_pos) {
		var control_elem = this.getElement();
		var input_elem = this._input_element;
		var curstyle = this.currentstyle;
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);

		var begin_idx = 0;
		var end_idx = 0;
		var i = idx;
		var r;

		var value = input_elem.value;
		if (!value) {
			return 0;
		}

		value = value.replace(/\n/g, "\n\r");
		var len = value.length;

		var ch = "";
		while (i >= 0 && (ch != '\n' && ch != '\r')) {
			ch = value.charAt(--i);
		}
		begin_idx = i + 1;

		ch = "";
		i = idx;
		while (len >= i && (ch != '\n' && ch != '\r')) {
			ch = value.charAt(i++);
		}
		end_idx = i - 1;

		i = begin_idx;
		var s_begin_width = 0;
		while (i < end_idx && s_begin_width <= scroll_pos) {
			r = nexacro._getTextSize2(letterspace, value.charAt(i++), curstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false));
			s_begin_width += r[0];
		}

		if (i > 0) {
			i = i - 1;
		}
		var view_begin_idx = i;

		var s_end_width = 0;
		while (i <= end_idx && s_end_width <= control_elem.client_width) {
			r = nexacro._getTextSize2(letterspace, value.charAt(i++), curstylee.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false));
			s_end_width += r[0];
		}
		var view_end_idx = i - 1;

		if (idx > view_begin_idx && idx < view_end_idx) {
			return -1;
		}

		if (idx > view_begin_idx && s_end_width < control_elem.client_width && s_begin_width > scroll_pos) {
			return -1;
		}

		if (idx == begin_idx) {
			return 0;
		}

		var s_width = -1;

		if (idx == end_idx && value.charAt(idx) == '\n' && idx < view_begin_idx) {
			s_width = 0;
			i = begin_idx;
			while (i < idx) {
				r = nexacro._getTextSize2(letterspace, value.charAt(i++), curstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false));
				s_width += r[0];
			}
		}

		else if (idx >= view_end_idx && s_begin_width > scroll_pos) {
			i = view_end_idx;
			s_width = 0;
			while (i < idx) {
				r = nexacro._getTextSize2(letterspace, value.charAt(i++), curstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false));
				s_width += r[0];
			}
			s_width += scroll_pos;
		}

		else if (idx <= view_begin_idx) {
			i = view_begin_idx;
			s_width = 0;
			while (i >= idx) {
				r = nexacro._getTextSize2(letterspace, value.charAt(i--), curstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false));
				s_width += r[0];
			}

			s_width = scroll_pos - s_width;
			if (s_width < 0) {
				s_width = 0;
			}
		}
		else if (idx > begin_idx) {
			i = begin_idx;
			s_width = 0;
			while (i < idx - 1) {
				r = nexacro._getTextSize2(letterspace, value.charAt(i++), curstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false));
				s_width += r[0];
			}

			if (s_width < 0) {
				s_width = 0;
			}
		}

		return s_width;
	};

	_pTextArea._getVLineInfo = function (pos) {
		var control_elem = this.getElement();
		var curstyle = this.currentstyle;

		var font = curstyle.font;
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
		var font_size = nexacro._getTextSize2(letterspace, "Wj", font);

		var linespace = curstyle.linespace ? nexacro._toInt(curstyle.linespace) : 0;
		var lineheight = font_size[1] + linespace;

		var begin_line = nexacro._toInt(pos / lineheight) + 1;
		var end_line = begin_line + Math.ceil((control_elem.client_height) / lineheight) - 1;

		return {
			begin : begin_line, 
			end : end_line
		};
	};

	_pTextArea._getMaxTextLine = function () {
		var input_elem = this._input_element;
		var curstyle = this.currentstyle;
		var line = 0;

		var scroll_height = input_elem.getScrollHeight();
		if (scroll_height > 0) {
			var linespace = curstyle.linespace ? nexacro._toInt(curstyle.linespace) : 0;
			var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
			var lineheight = nexacro._getTextSize2(letterspace, "Wj", curstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false))[1] + linespace;

			line = scroll_height / lineheight;
		}

		return line;
	};

	_pTextArea._getTextLine = function () {
		var input_elem = this._input_element;
		var text = this.value;
		var line = 0;
		var text_width = 0;
		var client_width = this._client_width;

		var textarr;

		if (text) {
			textarr = text.split("\n");
			line = textarr.length;
		}

		if (input_elem && input_elem._handle && this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") {
			var i = 0;
			var subline = 0;
			var t;
			var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
			for (i = 0; i < line; i++) {
				t = textarr[i];
				subline += nexacro._getLineCountWithWordwrap(input_elem, letterspace, t, this.wordwrap);
			}
			line = subline;
		}

		this._max_line = line;

		return line;
	};

	_pTextArea._getCaretLineString = function (old_caret_pos, direction) {
		var pos = old_caret_pos;
		var caret_line = 1;
		var input_elem = this._input_element;
		var i = 0, j = 0, k = 0;
		if (!pos) {
			pos = this.getCaretPos();

			if (input_elem) {
				caret_line = input_elem.getCaretLine();
			}
		}

		if (direction == 1) {
			var text = this.value;
			if (text) {
				var textarr = text.split("\n");
				var line = textarr.length;
			}

			if (input_elem && input_elem._handle && this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") {
				var subline = 0;
				var old_subline = 0;
				var t;
				var substr = "";
				var ch = "";
				var start_caret_index = 0;
				var end_caret_index = 0;

				for (i = 0; i < line; i++) {
					t = textarr[i];
					subline += nexacro._getLineCountWithWordwrap(input_elem, t, this.wordwrap);

					if (subline > caret_line) {
						caret_line = caret_line - old_subline;
						var t_len = t.length;
						for (j = 0; j < t_len; j++) {
							var temp_line = caret_line;
							ch = t[j];
							substr += ch;
							subline = nexacro._getLineCountWithWordwrap(input_elem, substr, this.wordwrap);
							if (subline > caret_line) {
								start_caret_index = j;
								substr = "";
								for (k = j; k < t_len; k++) {
									ch = t[k];
									substr += ch;
									subline = nexacro._getLineCountWithWordwrap(input_elem, substr, this.wordwrap);
									if (subline > 1) {
										end_caret_index = k;
										substr = t.slice(start_caret_index, end_caret_index);
										break;
									}
								}
								end_caret_index = k;
								break;
							}
						}
						break;
					}
					old_subline = subline;
				}
			}
			else {
				return textarr[caret_line + 1];
			}
		}
		else if (direction == 2) {
			var text = this.value;
			if (text) {
				var textarr = text.split("\n");
				var line = textarr.length;
			}

			if (input_elem && input_elem._handle && this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") {
				var subline = 0;
				var old_subline = 0;
				var t;
				var substr = "";
				var ch = "";
				var start_caret_index = 0;
				var end_caret_index = 0;

				for (i = 0; i < line; i++) {
					t = textarr[i];
					subline += nexacro._getLineCountWithWordwrap(input_elem, t, this.wordwrap);

					if (subline >= caret_line - 1) {
						caret_line = caret_line - old_subline - 1;
						var t_len = t.length;
						for (j = 0; j < t_len; j++) {
							var temp_line = caret_line;
							ch = t[j];
							substr += ch;
							subline = nexacro._getLineCountWithWordwrap(input_elem, substr, this.wordwrap);
							if (subline >= caret_line) {
								start_caret_index = j;
								substr = "";
								for (k = j; k < t_len; k++) {
									ch = t[k];
									substr += ch;
									subline = nexacro._getLineCountWithWordwrap(input_elem, substr, this.wordwrap);
									if (subline > 1) {
										end_caret_index = k;
										substr = t.slice(start_caret_index, end_caret_index);
										break;
									}
								}
								end_caret_index = k;
								break;
							}
						}
						break;
					}
					old_subline = subline;
				}
			}
			else {
				return textarr[caret_line - 1];
			}
		}
		else if (direction == 0) {
			var text = this.value;
			if (text) {
				var textarr = text.split("\n");
				var line = textarr.length;
			}

			if (input_elem && input_elem._handle && this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") {
				var subline = 0;
				var old_subline = 0;
				var t;
				var substr = "";
				var ch = "";
				var start_caret_index = 0;
				var end_caret_index = 0;

				for (i = 0; i < line; i++) {
					t = textarr[i];
					subline += nexacro._getLineCountWithWordwrap(input_elem, t, this.wordwrap);

					if (subline >= caret_line) {
						caret_line = caret_line - old_subline;
						var t_len = t.length;
						for (j = 0; j < t_len; j++) {
							var temp_line = caret_line;
							ch = t[j];
							substr += ch;
							subline = nexacro._getLineCountWithWordwrap(input_elem, substr, this.wordwrap);
							if (subline > caret_line) {
								end_caret_index = j;
								substr = t.slice(start_caret_index, end_caret_index);
								break;
							}
						}
						break;
					}
					old_subline = subline;
				}
			}
			else {
				return (textarr[0]) ? textarr[0] : "";
			}
		}
		return substr;
	};

	_pTextArea._update_scroll = function () {
		var control_elem = this.getElement();
		var input_elem = this._input_element;
		if (control_elem && input_elem) {
			var target_arr = nexacro._get_invisible_obj(this);
			nexacro._reset_invisible_obj(target_arr, true);

			var max_width = input_elem.getScrollWidth();
			var max_height = input_elem.getScrollHeight();

			control_elem.setElementScrollMaxSize(max_width, max_height);
			this._updateClientSize(control_elem);

			this._max_scroll_height = max_height;

			if (this.vscrollbar) {
				var pos = input_elem.getScrollTop();
				if (this._activate_scroll && this._scrolltop != pos) {
					pos = this._scrolltop;
				}
				this.vscrollbar.set_pos(pos);
			}

			if (this.hscrollbar) {
				var pos = input_elem.getScrollLeft();
				if (nexacro.Browser != "Chrome" && nexacro.Browser != "Opera" && this._edit_base_api && this._edit_base_api._pasteAction) {
					pos = max_width;
				}
				if (this._activate_scroll && this._scrollleft != pos) {
					pos = this._scrollleft;
				}
				this.hscrollbar.set_pos(pos);
			}

			if (this._activate_scroll) {
				this._activate_scroll = false;
			}

			this._onResetScrollBar();
			this._old_max_height = undefined;

			nexacro._reset_invisible_obj(target_arr, false);
		}
	};

	_pTextArea._reset_hscroll = function () {
		var control_elem = this.getElement();
		var input_elem = this._input_element;

		if (control_elem._hscroll_visible) {
			control_elem.setElementHScrollPos(0);
			input_elem.setScrollLeft(0);
		}
		;
	};

	_pTextArea._setValue = function (v) {
		if (nexacro._isNull(v)) {
			this.text = "";
		}
		else {
			this.text = nexacro._toString(v);
		}

		this.value = v;
		this.on_apply_value();
	};

	_pTextArea._setVScrollDefaultAction = function (vscrollbar, wheelDelta) {
		var currentstyle = this.currentstyle;
		var linespace = currentstyle.linespace ? nexacro._toInt(currentstyle.linespace) : 0;
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
		var lineheight = nexacro._getTextSize2(letterspace, "Wj", currentstyle.font, ((this.wordwrap != "none" && this.wordwrap != false && this.wordwrap != "false") ? true : false))[1] + linespace;
		if (wheelDelta >= 0) {
			var wheelline = 3;
		}
		else {
			var wheelline = -3;
		}
		wheelDelta = lineheight * wheelline;

		vscrollbar.set_pos(vscrollbar.pos - wheelDelta);
	};

	_pTextArea._isWheelScrollable = function (delta) {
		var input_elem = this._input_element;
		if (!input_elem) {
			return false;
		}

		var st = input_elem.getScrollTop();
		var sh = this._max_scroll_height;
		var ch = this._client_height;

		if ((st + ch >= sh && delta < 0) || (st == 0 && delta > 0)) {
			return false;
		}
		return true;
	};

	_pTextArea._accept_keydown_event = function (keyCode) {
		return true;
	};

	_pTextArea._recreateInputElement = function () {
		var input_elem = this._input_element;

		if (input_elem) {
			input_elem._destroyInputHandle();
			input_elem._input_handle = input_elem._createInputHandle();
			input_elem._bindEvent(input_elem);
		}
	};

	_pTextArea._set_editbase_focusstat = function (stat) {
		var api = this._edit_base_api;
		if (api) {
			switch (stat) {
				case "focus":
					api._stat_focus.setStatus(nexacro.EditBase.Status.Focus);
					break;
				case "blur":
					api._stat_focus.setStatus(nexacro.EditBase.Status.Blur);
					break;
				default:
					api._stat_focus.setStatus(stat);
					break;
			}
			;
		}
	};

	delete _pTextArea;
	_pTextArea = null;

	nexacro.TextAreaCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.TextArea.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pTextAreaCtrl = nexacro._createPrototype(nexacro.TextArea, nexacro.TextAreaCtrl);
	nexacro.TextAreaCtrl.prototype = _pTextAreaCtrl;
	_pTextAreaCtrl._type_name = "TextAreaControl";
	nexacro._setForControlStyleFinder(_pTextAreaCtrl);

	delete _pTextAreaCtrl;
	_pTextAreaCtrl = null;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.ImageViewer) {
	nexacro.ImageAlign = function (valign, halign, target) {
		nexacro.Object.call(this);

		this.align = new nexacro.Style_align(valign, halign);

		this.valign = this.align.valign;
		this.halign = this.align.halign;

		this._target = target;
	};

	var _pImageAlign = nexacro.ImageAlign.prototype = nexacro._createPrototype(nexacro.Object, nexacro.ImageAlign);
	_pImageAlign._type_name = "ImageAlign";

	_pImageAlign.set_halign = function (v) {
		if (this.align.set_halign(v)) {
			this.halign = this.align.halign;
			this._target.on_apply_imagealign(this.align);
		}
	};
	_pImageAlign.set_valign = function (v) {
		if (this.align.set_valign(v)) {
			this.valign = this.align.valign;
			this._target.on_apply_imagealign(this.align);
		}
	};

	_pImageAlign.destroy = function () {
		this.align = null;
		this.valign = null;
		this.halign = null;
		this._target = null;
	};
	delete _pImageAlign;

	nexacro.ImageViewer = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.text = "";
		this.image = "";
		this.imagealign = new nexacro.ImageAlign("middle", "center", this);

		this.imagewidth = 0;
		this.imageheight = 0;
		this.stretch = "none";
		this.repeatcount = -1;
		this.resampling = 0;

		this._text_elem = null;
		this._img_elem = null;
		this._prewidth = 0;
		this._preheight = 0;
		this._img_type = "url";
		this._accessibility_role = "image";
	};

	var _pImageViewer = nexacro._createPrototype(nexacro.Component, nexacro.ImageViewer);
	nexacro.ImageViewer.prototype = _pImageViewer;
	_pImageViewer._type_name = "ImageViewer";


	_pImageViewer.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}
		var align = this.on_find_CurrentStyle_align(pseudo);
		if (curstyle.align != align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pImageViewer.on_apply_style_color = function (color) {
		if (this._text_elem) {
			this._text_elem.setElementColor(color);
		}
	};

	_pImageViewer.on_apply_style_font = function (font) {
		if (this._text_elem) {
			this._text_elem.setElementFont(font);
		}
	};

	_pImageViewer.on_apply_style_align = function (align) {
		if (this._text_elem) {
			var halign = align.halign == "" ? "center" : align._halign;
			var valign = align.valign == "" ? "middle" : align._valign;
			this._text_elem.setElementAlignXY(halign, valign);
			halign = valign = null;
		}
	};

	_pImageViewer.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		var rtlimagemirroring = this._find_pseudo_obj("rtlimagemirroring", pseudo, "rtlimagemirroring");

		return rtlimagemirroring ? rtlimagemirroring : nexacro.Component._default_rtlimagemirroring;
	};

	_pImageViewer.on_update_style_rtlimagemirroring = function () {
		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(this._pseudo);
		this.on_apply_style_rtlimagemirroring(this.currentstyle.rtlimagemirroring = rtlimagemirroring);
	};

	_pImageViewer.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		var img_elem = this._img_elem;

		if (img_elem && rtlimagemirroring) {
			img_elem.setElementImageMirror(rtlimagemirroring);
		}
	};

	_pImageViewer.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		this.on_change_containerRect(this._client_width, this._client_height);

		var img_elem = this._img_elem;

		if (img_elem) {
			img_elem.setElementImageMirror(this.currentstyle.rtlimagemirroring, true);
		}
	};

	_pImageViewer.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.text) {
				var text_elem = this._text_elem = new nexacro.TextBoxElement(control_elem);
				var halign = this.currentstyle.align.halign == "" ? "center" : this.currentstyle.align._halign;
				var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(this.currentstyle.color);
				text_elem.setElementFont(this.currentstyle.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(this.currentstyle.letterspace);

				text_elem = halign = valign = null;
			}
		}
		control_elem = null;
	};

	_pImageViewer.on_destroy_contents = function () {
		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}

		if (this._img_elem) {
			this._img_elem.destroy();
			this._img_elem = null;
		}

		if (this.imagealign) {
			this.imagealign.destroy();
			this.imagealign = null;
		}
	};

	_pImageViewer.on_created_contents = function () {
		var _text_elem = this._text_elem;
		this._load_image(this.image);
		var _img_elem = this._img_elem;

		if (_text_elem) {
			var client_width = this._client_width;
			var client_height = this._client_height;
			_text_elem.setElementSize(client_width, client_height);
			_text_elem.create();
		}
		if (this.expr) {
			this.on_apply_expr();
		}

		this.on_apply_prop_rtldirection();
		if (_img_elem) {
			var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(this._pseudo);
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}

		_text_elem = null;
	};

	_pImageViewer.on_fire_onsize = function (width, height) {
		if (this._text_elem) {
			var halign = this.currentstyle.align.halign == "" ? "center" : this.currentstyle.align._halign;
			var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
			this._text_elem.setElementAlignXY(halign, valign);
		}
		this.on_apply_imagealign();

		return nexacro.Component.prototype.on_fire_onsize.call(this, width, height);
	};

	_pImageViewer.on_change_containerRect = function (width, height) {
		var textElem = this._text_elem;
		var imgElem = this._img_elem;
		if (textElem) {
			textElem.setElementSize(width, height);
			if (imgElem) {
				this._updateElementPositions();
			}
		}
		else if (imgElem) {
			this._updateElementPositions();
		}


		var pseudo = this._pseudo;
		var align = this.on_find_CurrentStyle_align(pseudo);
		this.on_apply_style_align(align);

		textElem = null;
		imgElem = null;
	};
	_pImageViewer.on_apply_text = function () {
		var expr = this.expr;
		if (expr && expr.length > 0) {
			expr = expr.trim().split(":");
			var len = expr.length;
			var parser = new nexacro.ExprParser();
			var conv_expr, exprfn;
			var str;

			if (len == 1) {
				str = expr[0];
			}
			else {
				if (expr[0].trim().toUpperCase() != "EXPR") {
					str = expr.join(":");
				}
				else {
					str = expr.slice(1).join(":");
				}
			}

			conv_expr = parser.makeExpr(this, str);
			exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);

			if (exprfn) {
				try {
					var val = nexacro._toString(exprfn.call(null, this));
					if (val != this.displaytext) {
						this.displaytext = val;
					}
				}
				catch (e) {
					return;
				}
			}
			parser = null;
		}
		else {
			this.displaytext = this.text;
		}

		expr = null;

		if (!this._text_elem && this.displaytext) {
			var control_elem = this.getElement();
			if (control_elem) {
				var text_elem = this._text_elem = new nexacro.TextBoxElement(control_elem);
				var halign = this.currentstyle.align.halign == "" ? "center" : this.currentstyle.align._halign;
				var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(this.currentstyle.color);
				text_elem.setElementFont(this.currentstyle.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(this.currentstyle.letterspace);

				text_elem.create();
				text_elem = halign = valign = null;
			}
			control_elem = null;
		}

		if (this._text_elem) {
			this._text_elem.setElementText(this.displaytext);
		}
		this._refreshAccessibilityValue();
	};

	_pImageViewer.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pImageViewer.set_image = function (v) {
		if (v) {
			if (v instanceof nexacro.Image) {
				if ((v._handle_id) && nexacro.Browser == "Runtime" && (((typeof v._handle_id) == "number") || (v._handle_id instanceof nexacro.Decimal))) {
					var image = this.image;
					var elem = this.getElement();
					var img_elem = this._img_elem;
					var image_handleid = image._handle_id;

					if (image_handleid && ((typeof image_handleid) == "number")) {
						img_elem.destroy(null, image_handleid);
					}

					if (!img_elem) {
						this._img_elem = img_elem = new nexacro.ImageElement(elem);
					}

					if (!img_elem._handle) {
						img_elem.create();
					}

					img_elem.setElementHandleImageObject(v._handle_id);

					this.image = v;
					this._img_type = "url";
					this._load_image(v._handle_id);
					return true;
				}
				else {
					v = v._base64str;
					this._img_type = "base64";
				}
			}
			else {
				v = v.toString();

				var isBase64 = nexacro._checkBase64String(v);
				if (isBase64) {
					if (v.substring(0, 10).toLowerCase() == "data:image") {
						if (v.substring(0, 17).toLowerCase() != "data:image;base64") {
							var comma_idx = v.indexOf(",");
							if (comma_idx > -1) {
								var tmp = v.slice(comma_idx + 1, v.legnth);
								v = "data:image;base64," + tmp;
							}
						}
					}
					else {
						v = "data:image;base64," + v;
					}
					this._img_type = "base64";
				}
				else {
					this._img_type = "url";
				}
			}
		}
		else {
			v = "";
			this._img_type = "url";
		}

		if (this.image != v) {
			this.image = v;
			this.on_apply_image();
		}
	};

	_pImageViewer.on_apply_image = function () {
		this._load_image(this.image);
	};

	_pImageViewer.set_imagewidth = function (v) {
	};

	_pImageViewer.set_imageheight = function (v) {
	};


	_pImageViewer.set_stretch = function (v) {
		if (v != this.stretch) {
			this.stretch = v;
			this.on_apply_stretch();
		}
	};

	_pImageViewer.on_apply_stretch = function () {
		this._updateElementPositions();
	};

	_pImageViewer.set_repeatcount = function (v) {
		if (v != this.repeatcount) {
			this.repeatcount = v;
		}
	};

	_pImageViewer.set_imagealign = function (v) {
		if (this.imagealign.align.valueOf() != v) {
			if (this.imagealign.align._setValue(v)) {
				this.imagealign.halign = this.imagealign.align.halign;
				this.imagealign.valign = this.imagealign.align.valign;
				this.on_apply_imagealign();
			}
		}
	};

	_pImageViewer.on_apply_imagealign = function () {
		if (this._img_elem) {
			this._updateElementPositions();
		}
	};


	_pImageViewer.on_apply_repeatcount = function () {
	};

	_pImageViewer.set_resampling = function (v) {
	};

	_pImageViewer.repeatStart = function (nCount) {
		this.repeatcount = parseInt(nCount) | 0;
	};

	_pImageViewer.repeatStop = function () {
		return;
	};

	_pImageViewer.getImageCount = function () {
		var img_elem = this._img_elem;
		if (img_elem) {
			return img_elem.getImageCount();
		}

		return 0;
	};

	_pImageViewer.setImageIndex = function (nIndex) {
		var img_elem = this._img_elem;
		if (img_elem) {
			img_elem.setImageIndex(parseInt(nIndex) | 0);
		}
	};


	_pImageViewer._on_loadImg = function (imgurl, w, h) {
		this.imagewidth = this._prewidth = w;
		this.imageheight = this._preheight = h;
		this._img_load_completed(imgurl);
	};

	_pImageViewer._img_load_completed = function (url, visible) {
		var img_elem = this._img_elem;
		var val = this.image;
		if (img_elem) {
			if (!val) {
				this._img_elem.setElementVisible(false);
				this._img_elem.setElementImageUrl("");
				this._updateElementPositions();

				this.imagewidth = 0;
				this.imageheight = 0;

				if (this._text_elem) {
					var halign = this.currentstyle.align.halign == "" ? "center" : this.currentstyle.align._halign;
					var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
					this._text_elem.setElementAlignXY(halign, valign);
				}
			}
			else {
				var img_type = this._img_type;
				val = val.toString();

				if (visible == undefined) {
					visible = true;
				}

				if (img_type == "url") {
					if (val.substring(0, 4).toLowerCase() == "url(") {
						val = val.substring(5, val.length - 2);
					}

					val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());

					if (val == url) {
						img_elem.setElementVisible(visible);
						img_elem.setElementImageUrl(val);
					}
					else {
						nexacro._releaseImageUrl(url);
					}
				}
				else {
					img_elem.setElementVisible(visible);
					img_elem.setElementImageBase64(url);
				}

				this._updateElementPositions();
			}
		}
		img_elem = null;
	};

	_pImageViewer._load_image = function (image) {
		var val = image.toString();
		var elem = this.getElement();
		var curstyle = this.currentstyle;

		if (val && elem) {
			var img_elem = this._img_elem;
			var text_elem = this._text_elem;
			var img_type = this._img_type;
			if (img_type == "url") {
				val = nexacro._getURIValue(val);
				val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());
			}

			if (!img_elem) {
				this._img_elem = img_elem = new nexacro.ImageElement(elem);
			}

			if (!img_elem._handle) {
				img_elem.create();
			}

			var image_size = nexacro._getImageSize(val, this._on_loadImg, this, undefined, image.toString());
			if (image_size) {
				this._prewidth = image_size.width;
				this._preheight = image_size.height;
				this._img_load_completed(val);
			}

			if (text_elem) {
				elem.moveToNextElement(img_elem, text_elem);
			}

			img_elem = null;
			text_elem = null;
			img_size = null;
		}
		else {
			if (this._img_elem) {
				this._img_elem.setElementVisible(false);
				this._img_elem.setElementImageUrl("");
				this._updateElementPositions();

				this.imagewidth = 0;
				this.imageheight = 0;

				if (this._text_elem) {
					var halign = curstyle.align.halign == "" ? "center" : curstyle.align._halign;
					var valign = curstyle.align.valign == "" ? "middle" : curstyle.align._valign;
					this._text_elem.setElementAlignXY(halign, valign);
				}
			}
		}

		curstyle = null;
	};

	_pImageViewer._updateElementPositions = function () {
		if (this.imagealign.align == null) {
			return;
		}

		this._resizeImage();

		var _img_elem = this._img_elem;
		if (_img_elem) {
			var halign = this.imagealign.align.halign;
			var valign = this.imagealign.align.valign;

			var client_width = this._client_width;
			var client_height = this._client_height;

			var tw, th;

			var imgw = this.imagewidth;
			var imgh = this.imageheight;

			var pos;
			var imgpos_x, imgpos_y;

			switch (halign) {
				case "left":
					imgpos_x = 0;
					break;
				case "right":
					pos = client_width - imgw;
					imgpos_x = pos;
					break;
				default:
					pos = Math.floor((client_width - imgw) / 2);
					imgpos_x = pos;
					break;
			}

			switch (valign) {
				case "top":
					imgpos_y = 0;
					textpos_y = -1;
					break;
				case "bottom":
					pos = client_height - imgh;
					imgpos_y = pos;
					break;
				default:
					pos = Math.floor((client_height - imgh) / 2);
					imgpos_y = pos;
					break;
			}
			imgpos_x = this._convertLeftForRtlLayout(imgpos_x, imgw);
			_img_elem.setElementPosition(imgpos_x, imgpos_y);
			_img_elem.setElementSize(imgw, imgh);
		}
		_img_elem = null;
	};

	_pImageViewer._resizeImage = function () {
		var _img_elem = this._img_elem;
		var _stretch = this.stretch;
		var _img = this.image;

		if (!_img_elem || _stretch == null) {
			return;
		}

		var spanWidth = this._client_width;
		var spanHeight = this._client_height;

		if (_stretch == "fit" || _img._handle_id) {
			if (this._prewidth == 0 && this._preheight == 0) {
				_img_elem.image_width = this.imagewidth = 0;
				_img_elem.image_height = this.imageheight = 0;
			}
			else {
				_img_elem.image_width = this.imagewidth = spanWidth;
				_img_elem.image_height = this.imageheight = spanHeight;
			}
		}
		else if (_stretch == "fixaspectratio") {
			var width = 0, height = 0;

			if (this.imagewidth == 0 && this.imageheight == 0) {
				var _imageWidth = this._prewidth;
				var _imageHeight = this._preheight;
			}
			else {
				var _imageWidth = this.imagewidth = this._prewidth;
				var _imageHeight = this.imageheight = this._preheight;
			}

			var widthPer = spanWidth / _imageWidth;
			var heightPer = spanHeight / _imageHeight;

			if (widthPer <= heightPer) {
				width = spanWidth;
				height = Math.floor(_imageHeight * widthPer);
			}
			else {
				width = Math.floor(_imageWidth * heightPer);
				height = spanHeight;
			}

			_img_elem.image_width = this.imagewidth = width;
			_img_elem.image_height = this.imageheight = height;
		}
		else {
			_img_elem.image_width = this.imagewidth = this._prewidth;
			_img_elem.image_height = this.imageheight = this._preheight;
		}

		_img_elem.setElementSize(this.imagewidth, this.imageheight);
		this.stretch = _stretch;

		_stretch = null;
		_img_elem = null;
	};

	delete _pImageViewer;
	_pImageViewer = null;

	nexacro.ImageViewerCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageViewer.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pImageViewerCtrl = nexacro.ImageViewerCtrl.prototype = nexacro._createPrototype(nexacro.ImageViewer, nexacro.ImageViewerCtrl);
	_pImageViewerCtrl._type_name = "ImageViewerControl";

	nexacro._setForControlStyleFinder(_pImageViewerCtrl);

	delete _pImageViewerCtrl;
	_pImageViewerCtrl = null;
}





//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.CheckBox) {
	nexacro.CheckBoxChangedEventInfo = function (obj, id, prevalue, postvalue) {
		this.id = this.eventid = id || "onchanged";
		this.prevalue = prevalue;
		this.postvalue = postvalue;
		this.fromobject = this.fromreferenceobject = obj;
	};

	var _pCheckBoxChangedEventInfo = nexacro._createPrototype(nexacro.ChangedEventInfo, nexacro.CheckBoxChangedEventInfo);
	nexacro.CheckBoxChangedEventInfo.prototype = _pCheckBoxChangedEventInfo;
	_pCheckBoxChangedEventInfo._type_name = "CheckBoxChangedEventInfo";

	delete _pCheckBoxChangedEventInfo;
	_pCheckBoxChangedEventInfo = null;

	nexacro.CheckBox_Style = function (target, idx) {
		nexacro.Style.call(this, target, idx);

		this.buttonalign = null;
		this.buttonimage = null;
		this.textpadding = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonsize = null;
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonbackgroundimagemode = null;
	};

	_pCheckBoxStyle = nexacro.CheckBox_Style.prototype = nexacro._createPrototype(nexacro.Style, nexacro.CheckBox_Style);
	nexacro.CheckBox_Style.prototype = _pCheckBoxStyle;

	eval(nexacro._createAlignAttributeEvalStr("_pCheckBoxStyle", "buttonalign"));
	eval(nexacro._createValueAttributeEvalStr("_pCheckBoxStyle", "buttonimage"));
	eval(nexacro._createPaddingAttributeEvalStr("_pCheckBoxStyle", "textpadding"));
	eval(nexacro._createBorderAttributeEvalStr("_pCheckBoxStyle", "buttonborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pCheckBoxStyle", "buttonbordertype"));
	eval(nexacro._createValueAttributeEvalStr("_pCheckBoxStyle", "buttonsize"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pCheckBoxStyle", "buttonbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pCheckBoxStyle", "buttongradation"));
	eval(nexacro._createValueAttributeEvalStr("_pCheckBoxStyle", "buttonbackgroundimagemode"));

	_pCheckBoxStyle.__custom_emptyObject = function () {
		this.buttonalign = null;
		this.buttonimage = null;
		this.textpadding = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonsize = null;
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonbackgroundimagemode = null;
		this.accessibility = null;
	};

	_pCheckBoxStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.buttonalign && this.buttonalign._is_empty) {
			val += "buttonalign:" + this.buttonalign._value + "; ";
		}
		if (this.buttonimage && this.buttonimage._is_empty) {
			val += "buttonimage:" + this.buttonimage._value + "; ";
		}
		if (this.textpadding && this.textpadding._is_empty) {
			val += "textpadding:" + this.textpadding._value + "; ";
		}
		if (this.buttonborder && this.buttonborder._is_empty) {
			val += "buttonborder:" + this.buttonborder._value + "; ";
		}
		if (this.buttonbordertype && this.buttonbordertype._is_empty) {
			val += "buttonbordertype:" + this.buttonbordertype._value + "; ";
		}
		if (this.buttonsize && this.buttonsize._is_empty) {
			val += "buttonsize:" + this.buttonsize._value + "; ";
		}
		if (this.buttonbackground && this.buttonbackground._is_empty) {
			val += "buttonbackground:" + this.buttonbackground._value + "; ";
		}
		if (this.buttongradation && this.buttongradation._is_empty) {
			val += "buttongradation:" + this.buttongradation._value + "; ";
		}
		if (this.buttonbackgroundimagemode && this.buttonbackgroundimagemode._is_empty) {
			val += "buttonbackgroundimagemode:" + this.buttonbackgroundimagemode._value + "; ";
		}
		if (this.accessibility && this.accessibility._is_empty) {
			val += "accessibility:" + this.accessibility._value + "; ";
		}
		return val;
	};

	nexacro.CheckBox_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.buttonalign = null;
		this.buttonimage = null;
		this.textpadding = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonsize = null;
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonbackgroundimagemode = null;
	};

	_pCheckBoxCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.CheckBox_CurrentStyle);
	nexacro.CheckBox_CurrentStyle.prototype = _pCheckBoxCurrentStyle;

	_pCheckBoxCurrentStyle.__get_custuom_style_value = _pCheckBoxStyle.__get_custuom_style_value;
	_pCheckBoxCurrentStyle.__custom_emptyObject = _pCheckBoxStyle.__custom_emptyObject;


	delete _pCheckBoxStyle;
	_pCheckBoxStyle = null;
	delete _pCheckBoxCurrentStyle;
	_pCheckBoxCurrentStyle = null;

	nexacro.CheckBox = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._text_elem = null;
		this.chkimg = null;
		this.value = false;
		this.binddataset = null;
		this.readonly = false;
		this.falsevalue = null;
		this.truevalue = null;

		this._value = undefined;
		this._apply_pushed_pseudo = true;


		this._event_list = {
			"canchange" : 1, 
			"onchanged" : 1, 
			"onclick" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onsetfocus" : 1, 
			"onsize" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};


		this._accessibility_role = "checkbox";
		this._is_usetextbox = true;
	};

	_pCheckBox = nexacro._createPrototype(nexacro.Component, nexacro.CheckBox);
	nexacro.CheckBox.prototype = _pCheckBox;

	_pCheckBox._type_name = "CheckBox";

	nexacro.CheckBox._default_buttonsize = nexacro._getCachedStyleObj("buttonsize", 13);
	nexacro.CheckBox._default_textpadding = nexacro._getCachedStyleObj("padding", "5 2 5 2");

	_pCheckBox.on_apply_custom_pseudo = function (pseudo) {
		if (pseudo) {
			this._pseudo = pseudo;
		}
		else if (this._pseudo) {
			pseudo = this._pseudo;
		}

		var curstyle = this.currentstyle;
		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		var buttonimage = this.on_find_CurrentStyle_buttonimage(pseudo);
		var textpadding = this.on_find_CurrentStyle_textpadding(pseudo);
		var buttonborder = this.on_find_CurrentStyle_buttonborder(pseudo);
		var buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(pseudo);
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		var buttonbackground = this.on_find_CurrentStyle_buttonbackground(pseudo);
		var buttonbackgroundimagemode = this.on_find_CurrentStyle_buttonbackgroundimagemode(pseudo);
		var buttongradation = this.on_find_CurrentStyle_buttongradation(pseudo);
		var font = this.on_find_CurrentStyle_font(pseudo);
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		var color = this.on_find_CurrentStyle_color(pseudo);
		var align = this.on_find_CurrentStyle_align(pseudo);
		var accessibility = this.on_find_CurrentStyle_accessibility(pseudo);

		if (this._apply_client_border || buttonalign != curstyle.buttonalign) {
			curstyle.buttonalign = buttonalign;
			this.on_apply_style_buttonalign(buttonalign);
			this._apply_client_border = false;
		}
		if (buttonimage != curstyle.buttonimage) {
			curstyle.buttonimage = buttonimage;
			this.on_apply_style_buttonimage(buttonimage);
		}
		if (textpadding != curstyle.textpadding) {
			curstyle.textpadding = textpadding;
			this.on_apply_style_textpadding(textpadding);
		}
		if (buttonborder != curstyle.buttonborder) {
			curstyle.buttonborder = buttonborder;
			if (this.chkimg) {
				this.chkimg.on_apply_pseudo(pseudo);
			}
			this.on_apply_style_buttonborder(buttonborder);
		}
		if (buttonbordertype != curstyle.buttonbordertype) {
			curstyle.buttonbordertype = buttonbordertype;
			if (this.chkimg) {
				this.chkimg.on_apply_pseudo(pseudo);
			}
			this.on_apply_style_buttonbordertype(buttonbordertype);
		}
		if (buttonsize != curstyle.buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(buttonsize);
		}
		if (buttonbackground != curstyle.buttonbackground) {
			curstyle.buttonbackground = buttonbackground;
			if (this.chkimg) {
				this.chkimg.on_apply_pseudo(pseudo);
			}
			this.on_apply_style_buttonbackground(buttonbackground);
		}
		if (buttongradation != curstyle.buttongradation) {
			curstyle.buttongradation = buttongradation;
			if (this.chkimg) {
				this.chkimg.on_apply_pseudo(pseudo);
			}
			this.on_apply_style_buttongradation(buttongradation);
		}
		if (buttonbackgroundimagemode != curstyle.buttonbackgroundimagemode) {
			curstyle.buttonbackgroundimagemode = buttonbackgroundimagemode;
			if (this.chkimg) {
				this.chkimg.on_apply_pseudo(pseudo);
			}
			this.on_apply_style_buttonbackgroundimagemode(buttonbackgroundimagemode);
		}
		if (font != curstyle.font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		if (letterspace != curstyle.letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		if (color != curstyle.color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pCheckBox.on_create_custom_style = function () {
		return new nexacro.CheckBox_Style(this);
	};

	_pCheckBox.on_create_custom_currentStyle = function () {
		return new nexacro.CheckBox_CurrentStyle(this);
	};


	_pCheckBox.on_find_CurrentStyle_buttonalign = function (pseudo) {
		var default_align = nexacro.Component._default_left_align;

		return this._find_pseudo_obj("buttonalign", pseudo, "align") || default_align;
	};

	_pCheckBox.on_find_CurrentStyle_buttonimage = function (pseudo) {
		return this._find_pseudo_obj("buttonimage", pseudo);
	};

	_pCheckBox.on_find_CurrentStyle_textpadding = function (pseudo) {
		return this._find_pseudo_obj("textpadding", pseudo) || nexacro.CheckBox._default_textpadding;
	};

	_pCheckBox.on_find_CurrentStyle_buttonborder = function (pseudo) {
		return this._find_pseudo_obj("buttonborder", pseudo, "border");
	};

	_pCheckBox.on_find_CurrentStyle_buttonbordertype = function (pseudo) {
		return this._find_pseudo_obj("buttonbordertype", pseudo);
	};

	_pCheckBox.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this._find_pseudo_obj("buttonsize", pseudo) || nexacro.CheckBox._default_buttonsize;
	};

	_pCheckBox.on_find_CurrentStyle_buttonbackground = function (pseudo) {
		return this._find_pseudo_obj("buttonbackground", pseudo);
	};

	_pCheckBox.on_find_CurrentStyle_buttongradation = function (pseudo) {
		return this._find_pseudo_obj("buttongradation", pseudo);
	};

	_pCheckBox.on_find_CurrentStyle_buttonbackgroundimagemode = function (pseudo) {
		return this._find_pseudo_obj("buttonbackgroundimagemode", pseudo);
	};

	_pCheckBox.on_find_CurrentStyle_align = function (pseudo) {
		var default_align = nexacro.Component._default_left_align;

		return this._find_pseudo_obj("align", pseudo) || default_align;
	};

	_pCheckBox.on_update_style_buttonalign = function () {
		var curstyle = this.currentstyle;
		var buttonalign = curstyle.buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo);
		this.on_apply_style_buttonalign(buttonalign);
	};

	_pCheckBox.on_update_style_buttonimage = function () {
		var curstyle = this.currentstyle;
		var buttonimage = curstyle.buttonimage = this.on_find_CurrentStyle_buttonimage(this._pseudo);
		this.on_apply_style_buttonimage(buttonimage);
	};

	_pCheckBox.on_update_style_textpadding = function () {
		var curstyle = this.currentstyle;
		var textpadding = curstyle.textpadding = this.on_find_CurrentStyle_textpadding(this._pseudo);
		this.on_apply_style_textpadding(textpadding);
	};

	_pCheckBox.on_update_style_buttonborder = function () {
		var curstyle = this.currentstyle;
		var buttonborder = curstyle.buttonborder = this.on_find_CurrentStyle_buttonborder(this._pseudo);
		this.on_apply_style_buttonborder(buttonborder);
	};

	_pCheckBox.on_update_style_buttonbordertype = function () {
		var curstyle = this.currentstyle;
		var buttonbordertype = curstyle.buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(this._pseudo);
		this.on_apply_style_buttonbordertype(buttonbordertype);
	};

	_pCheckBox.on_update_style_buttonsize = function () {
		var curstyle = this.currentstyle;
		var buttonsize = curstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		this.on_apply_style_buttonsize(buttonsize);
	};

	_pCheckBox.on_update_style_buttonbackground = function () {
		var curstyle = this.currentstyle;
		var buttonbackground = curstyle.buttonbackground = this.on_find_CurrentStyle_buttonbackground(this._pseudo);
		this.on_apply_style_buttonbackground(buttonbackground);
	};

	_pCheckBox.on_update_style_buttongradation = function () {
		var curstyle = this.currentstyle;
		var buttongradation = curstyle.buttongradation = this.on_find_CurrentStyle_buttongradation(this._pseudo);
		this.on_apply_style_buttongradation(buttongradation);
	};

	_pCheckBox.on_update_style_buttonbackgroundimagemode = function () {
		var curstyle = this.currentstyle;
		var buttonbackgroundimagemode = curstyle.buttonbackgroundimagemode = this.on_find_CurrentStyle_buttonbackgroundimagemode(this._pseudo);
		this.on_apply_style_buttonbackgroundimagemode(buttonbackgroundimagemode);
	};


	_pCheckBox.on_apply_style_align = function (align) {
		if (this._text_elem) {
			var halign = (align.halign == "" ? "center" : align._halign);
			var valign = (align.valign == "" ? "middle" : align._valign);
			this._text_elem.setElementAlignXY(halign, valign);
		}
	};

	_pCheckBox.on_apply_style_buttonalign = function (v) {
		var curstyle = this.currentstyle;

		if (curstyle && curstyle.buttonalign && this.chkimg) {
			var buttonalign = curstyle.buttonalign;

			var container_width = this._client_width;
			var container_height = this._client_height;
			var arr = buttonalign.toString().trim().split(" ");
			var len = arr.length;

			var cl = 0, ct = 0, cr = 0, cb = 0;
			var tl = 0, tt = 0, tr = 0, tb = 0, tw = 0, th = 0;

			var str = "";

			var _buttonsize = curstyle.buttonsize;
			var btn_halign = "left", btn_valign = "middle";
			var btnsize = _buttonsize ? (parseInt(_buttonsize._value) | 0) : 13;

			for (var i = 0; i < len; i++) {
				switch (arr[i]) {
					case "center":
						btn_halign = "center";
						break;
					case "right":
						btn_halign = "right";
						break;
					case "top":
						btn_valign = "top";
						break;
					case "bottom":
						btn_valign = "bottom";
						break;
					default:
						break;
				}
			}

			var curTxtPadding = curstyle.textpadding;
			var textleft, textwidth;

			if (curTxtPadding) {
				if (curTxtPadding.left) {
					tl = curTxtPadding.left;
				}

				if (curTxtPadding.right) {
					tr = curTxtPadding.right;
				}

				if (curTxtPadding.top) {
					tt = curTxtPadding.top;
				}

				if (curTxtPadding.bottom) {
					tb = curTxtPadding.bottom;
				}
			}

			textwidth = container_width - btnsize;
			if (btn_halign == "left" || btn_halign == "center") {
				tl += btnsize;
				cl = 0;
				cr = btnsize;
			}
			else if (btn_halign == "right") {
				tr += btnsize;
				cr = container_width;
				cl = cr - btnsize;
			}

			if (btn_valign == "top") {
				ct = 0;
				cb = btnsize;
			}
			else if (btn_valign == "bottom") {
				cb = container_height;
				ct = cb - btnsize;
			}
			else {
				ct = (container_height - btnsize) / 2;
				cb = ct + btnsize;
			}

			this.chkimg.move(cl, ct, cr - cl, cb - ct);

			if (this._text_elem) {
				tw = container_width - tr - tl;
				th = container_height - tb - tt;
				tw = (tw < 0) ? 0 : tw;
				th = (th < 0) ? 0 : th;

				tl = this._convertLeftForRtlLayout(tl, tw);

				this._text_elem.setElementPosition(tl, tt);
				this._text_elem.setElementSize(tw, th);
			}
		}
	};

	_pCheckBox.on_apply_style_color = function (color) {
		if (this._text_elem) {
			this._text_elem.setElementColor(color);
		}
	};

	_pCheckBox.on_apply_style_padding = function (padding) {
		var control = this.getElement();
		if (control) {
			control.setElementPadding(padding);
		}
	};

	_pCheckBox.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pCheckBox.on_apply_style_font = function (font) {
		if (this._text_elem) {
			this._text_elem.setElementFont(font);
		}
	};

	_pCheckBox.on_apply_style_buttonimage = function (v) {
		if (v && this._isChecked(this.value)) {
			if (this.chkimg) {
				this.chkimg.image = v;
				this.chkimg._load_image(v);
			}
			this.on_apply_value();
		}
	};

	_pCheckBox.on_apply_style_textpadding = function (v) {
		if (this._text_elem && this.currentstyle.textpadding) {
			this.on_apply_style_buttonalign(v);
		}
	};

	_pCheckBox.on_apply_style_buttonborder = function (v) {
		if (this.chkimg) {
			this.chkimg.currentstyle.border = v;
			this.chkimg.on_update_style_border();
		}
	};

	_pCheckBox.on_apply_style_buttonbordertype = function (v) {
		if (this.chkimg) {
			this.chkimg.currentstyle.bordertype = v;
			this.chkimg.on_update_style_bordertype();
		}
	};

	_pCheckBox.on_apply_style_buttonsize = function (v) {
		this.on_apply_style_buttonalign(v);
	};

	_pCheckBox.on_apply_style_buttongradation = function (v) {
		if (this.chkimg) {
			this.chkimg.currentstyle.buttongradation = v;
			this.chkimg.on_update_style_gradation();
		}
	};

	_pCheckBox.on_apply_style_buttonbackground = function (v) {
		if (this.chkimg) {
			this.chkimg.currentstyle.buttonbackground = v;
			this.chkimg.on_update_style_background();
		}
	};

	_pCheckBox.on_apply_style_buttonbackgroundimagemode = function (v) {
	};

	_pCheckBox.on_apply_style_cursor = function (cursor) {
		var ck_cursor = nexacro.Component.prototype.on_apply_style_cursor.call(this, cursor);

		if (this.chkimg) {
			this.chkimg.on_apply_style_cursor(cursor);
		}

		return ck_cursor;
	};

	_pCheckBox.on_get_style_accessibility_label = function () {
		return this.text ? this.text : "";
	};

	_pCheckBox.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		this.on_change_containerRect(this._client_width, this._client_height);
		var _rtldirection = this._rtldirection;

		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.setElementRtlDirection(_rtldirection);
			text_elem.setElementPosition(text_elem.left, text_elem.top, true);
		}
		if (this.chkimg) {
			this.chkimg._setRtlDirection(_rtldirection);
		}
	};

	_pCheckBox.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pCheckBox.on_create_contents = function () {
		var _control_element = this._control_element;
		if (_control_element) {
			this.chkimg = new nexacro.CheckBoxImageCtrl("chkimg", this.position, 0, 0, 0, 0, null, null, this);
			this.chkimg.createComponent();

			var current_style = this.currentstyle;

			if (this._is_usetextbox) {
				var text_elem = new nexacro.TextBoxElement(_control_element);
				var halign = ((!current_style.align || current_style.align.halign == "") ? "center" : current_style.align._halign);
				var valign = ((!current_style.align || current_style.align.valign == "") ? "middle" : current_style.align._valign);

				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(current_style.color);
				text_elem.setElementFont(current_style.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(current_style.letterspace);
				this._text_elem = text_elem;
				text_elem = null;
			}
			if (current_style.buttonimage) {
				this.chkimg._load_image(current_style.buttonimage);
			}
		}
	};

	_pCheckBox.on_created_contents = function () {
		if (this.chkimg) {
			this.chkimg.on_created();
			var img_elem = this.chkimg._img_elem;
			if (img_elem) {
				img_elem.create();
			}
		}

		if (this._text_elem) {
			this._text_elem.create();
		}

		this.on_apply_text();

		if (this.expr) {
			this.on_apply_expr();
		}

		if (this._value !== this.value) {
			this._setValue(this.value, true, false);
		}

		this._reCalcValue();

		this.on_apply_style_buttonalign(this.currentstyle.buttonalign);
		this.on_apply_style_buttonimage(this.currentstyle.buttonimage);
		this.on_apply_style_buttonbackground(this.currentstyle.buttonbackground);
		this.on_apply_style_textpadding(this.currentstyle.textpadding);
		this.on_apply_style_rtlimagemirroring(this.currentstyle.rtlimagemirroring);

		this._setEventHandler("onkeyup", this.on_notify_checkbox_onkeyup, this);

		this.on_apply_prop_rtldirection();
	};

	_pCheckBox.on_destroy_contents = function () {
		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}

		if (this.chkimg) {
			this.chkimg.destroy();
			this.chkimg = null;
		}
		this.binddataset = null;
		this.falsevalue = null;
		this.truevalue = null;
	};

	_pCheckBox.on_change_containerRect = function (width, height) {
		var text_elem = this._text_elem;
		var pseudo = this._pseudo;
		var align = this.on_find_CurrentStyle_align(pseudo);

		if (text_elem) {
			text_elem.setElementSize(width, height);
			this.on_apply_style_align(align);
		}

		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		this.on_apply_style_buttonalign(buttonalign);
	};

	_pCheckBox.on_getBindableProperties = function () {
		return "value";
	};

	_pCheckBox.__getBindableProperties = function () {
		return "value";
	};

	_pCheckBox.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			this._setValue(undefined, false, false);
			return true;
		}
	};

	_pCheckBox.on_change_bindSource = function (propid, ds, row, col, index) {
		this.binddataset = ds;

		if (propid == "value") {
			var v = ds.getColumn(row, col);
			this._setValue(v, false, false);
			return true;
		}
		return false;
	};

	_pCheckBox.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);

		var enable = v;
		if (v == undefined) {
			enable = this.enable;
		}

		if (this.chkimg) {
			this.chkimg._setEnable(enable);
		}
	};

	_pCheckBox.set_value = function (v) {
		if (this.value != v) {
			if (this.truevalue || this.falsevalue) {
				if ((this.truevalue && (this.truevalue == v)) || (!this.truevalue && (v == "true" || v == true || v == 1))) {
					v = this.truevalue;
				}
				else {
					v = this.falsevalue;
				}
			}

			if (this._is_created) {
				this._setValue(v, true, false);
			}
			else {
				this.value = v;
			}
		}
	};

	_pCheckBox._image_path = "";
	_pCheckBox.on_apply_value = function () {
		if (this.chkimg) {
			if (this.isChecked()) {
				var image = "theme://images/checked.gif";

				if (this.currentstyle.buttonimage) {
					image = this.currentstyle.buttonimage._value;
				}

				if (this._image_path != image) {
					this.chkimg.set_image(image);
					this.chkimg.set_imagealign("center middle");
					this.chkimg.on_apply_style_cursor(this.currentstyle.cursor);
					this._image_path = image;
				}
				this.chkimg._img_elem.setElementVisible(true);
			}
			else {
				this.chkimg._img_elem.setElementVisible(false);
			}
		}
	};

	_pCheckBox.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pCheckBox.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}
	};

	_pCheckBox.set_text = function (v) {
		var val = v;
		if (v === undefined || v === null) {
			val = "";
		}
		else {
			val = v.toString();
		}

		if (val != this.text) {
			this.text = val;
			this.on_apply_text();
		}

		return this.text;
	};

	_pCheckBox.on_apply_text = function () {
		if (this._text_elem) {
			var expr = this.expr;

			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var len = expr.length;
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (len == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				parser = null;
				exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);

				if (exprfn) {
					try {
						var val = nexacro._toString(exprfn.call(null, this));
						if (val != this.displaytext) {
							this.displaytext = val;
						}
					}
					catch (e) {
						parser = null;
						return;
					}
				}
				parser = null;
			}
			else {
				this.displaytext = this.text;
			}

			this._text_elem.setElementText(this.displaytext);
			this._refreshAccessibilityValue();
		}
	};

	_pCheckBox.set_truevalue = function (v) {
		if (this.truevalue != v) {
			if (this.value == true || this.value == "true" || this.value == 1) {
				this.value = this._value = v;
			}

			if (this._is_created && this.isChecked()) {
				this.value = this._value = v;
			}

			this.truevalue = v;
			this._reCalcValue();
			return this.truevalue;
		}
	};

	_pCheckBox.set_falsevalue = function (v) {
		if (this.falsevalue != v) {
			if (this.value == false || this.value == "false" || this.value == 0) {
				this.value = this._value = v;
			}

			if (this._is_created && !this.isChecked()) {
				this.value = this._value = v;
			}
			this.falsevalue = v;
			this._reCalcValue();
			return this.falsevalue;
		}
	};

	_pCheckBox.isChecked = function () {
		return this._isChecked(this._value);
	};

	_pCheckBox.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		return this.applyto_bindSource("value", this._value);
	};

	_pCheckBox.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (!this.enable) {
			return false;
		}

		if (this.readonly == false) {
			if (this._isChecked(this._value)) {
				if (this.falsevalue != undefined && this.falsevalue != "") {
					this._setValue(this.falsevalue, true);
				}
				else {
					this._setValue(false, true);
				}
			}
			else {
				if (this.truevalue != undefined && this.truevalue != "") {
					this._setValue(this.truevalue, true);
				}
				else {
					this._setValue(true, true);
				}
			}
		}

		if (this.onclick && this.onclick._has_handlers) {
			var evt = new nexacro.ClickEventInfo(this, "onclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onclick._fireEvent(this, evt);
		}
		return false;
	};

	_pCheckBox.on_fire_onsize = function (width, height) {
		this.on_update_style_buttonalign();
		return nexacro.Component.prototype.on_fire_onsize.call(this, width, height);
	};

	_pCheckBox.on_fire_onchanged = function (obj, prevalue, postvalue) {
		if (this.onchanged && this.onchanged._has_handlers) {
			var evt = new nexacro.CheckBoxChangedEventInfo(this, "onchanged", prevalue, postvalue);
			return this.onchanged._fireEvent(this, evt);
		}
		return false;
	};

	_pCheckBox.on_fire_canchange = function (obj, prevalue, postvalue) {
		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.CheckBoxChangedEventInfo(this, "canchange", prevalue, postvalue);
			return this.canchange._fireEvent(this, evt);
		}
		return true;
	};

	_pCheckBox.on_notify_checkbox_onkeyup = function (obj, e) {
		if (e.keycode == nexacro.Event.KEY_SPACE) {
			this.on_fire_onclick("", e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, -1, -1, -1, -1, -1, -1, this.parent, this);
		}
	};

	_pCheckBox._on_hotkey = function (keycode, altKey, ctrlKey, shiftKey) {
		this.on_fire_onclick("", altKey, ctrlKey, shiftKey, false, -1, -1, -1, -1, -1, -1, this.parent, this);
	};

	_pCheckBox._setValue = function (val, bBind, bFireEvent) {
		var retn;
		if (this.isChecked() == this._isChecked(val)) {
			return this._value;
		}

		if (bFireEvent !== false) {
			retn = this.on_fire_canchange(this, this._value, val);
		}


		if (retn || retn === undefined) {
			var postVal = this._value;
			this.value = this._value = val;
			this._reCalcValue();

			this._setAccessibilityStatChecked(this.isChecked());

			if (postVal !== this._value) {
				if (bFireEvent !== false) {
					this.on_fire_onchanged(this, postVal, this._value);
				}
			}

			if (bBind == true) {
				var ret = this.applyto_bindSource("value", val);

				if (ret == false) {
					this.value = this._value = postVal;
					this._reCalcValue();
				}
			}
		}
		return this._value;
	};

	_pCheckBox._isChecked = function (value) {
		if (this.truevalue != null) {
			if (this.falsevalue != null) {
				if (value == this.falsevalue || value === undefined) {
					return false;
				}

				if (value == this.truevalue || nexacro._toBoolean(value)) {
					return true;
				}

				return false;
			}
			else {
				if (value == this.truevalue || nexacro._toBoolean(value)) {
					return true;
				}
				else {
					return false;
				}
			}
		}
		else {
			if (this.falsevalue != null) {
				if (value == this.falsevalue) {
					return false;
				}
				else {
					return true;
				}
			}
			else {
				return nexacro._toBoolean(value);
			}
		}
	};

	_pCheckBox._verticalalign = function (valign) {
	};

	_pCheckBox._reCalcValue = function () {
		if (!this._control_element) {
			return;
		}

		if (this.isChecked()) {
			if (!this.truevalue) {
				if (parseInt(this._value) != 1) {
					this.value = this._value = true;
				}
				else {
					this.value = this._value = 1;
				}
			}
		}
		else {
			if (!this.falsevalue) {
				if (parseInt(this._value) != 0) {
					this.value = this._value = false;
				}
				else {
					this.value = this._value = 0;
				}
			}
		}

		var v = this.value;
		if (this.truevalue || this.falsevalue) {
			v += "";
		}
		if ((this.truevalue !== null && this.falsevalue === null && this.truevalue != v) || (this.truevalue === null && this.falsevalue === null)) {
			this.value = nexacro._toBoolean(v);
		}
		else {
			this.value = v;
		}

		if (this.truevalue || this.falsevalue) {
			if ((this.truevalue && this.truevalue != v) || (!this.truevalue && (v != "true" && v != true && v != 1))) {
				v = this.falsevalue;
			}

			this.value = v;
		}

		this._setAccessibilityStatChecked(this.isChecked());
		this.on_apply_value();
	};

	delete _pCheckBox;

	nexacro.CheckBoxCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.CheckBox.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	_pCheckBoxCtrl = nexacro._createPrototype(nexacro.CheckBox, nexacro.CheckBoxCtrl);
	nexacro.CheckBoxCtrl.prototype = _pCheckBoxCtrl;
	_pCheckBoxCtrl._type_name = "CheckBoxControl";

	nexacro._setForControlStyleFinder(_pCheckBoxCtrl);

	delete _pCheckBoxCtrl;

	nexacro.CheckBoxImageCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageViewerCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	_pCheckBoxImageCtrl = nexacro._createPrototype(nexacro.ImageViewerCtrl, nexacro.CheckBoxImageCtrl);
	nexacro.CheckBoxImageCtrl.prototype = _pCheckBoxImageCtrl;

	nexacro.CheckBoxImageCtrl._default_rtlimagemirroring = nexacro._getCachedStyleObj("rtlimagemirroring", "true");


	_pCheckBoxImageCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbackground(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_buttonbackgroundimagemode = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbackgroundimagemode(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_image = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonimage(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonborder(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbordertype(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttongradation(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_cursor(pseudo);
	};

	_pCheckBoxImageCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		var rtlimagemirroring = this.parent.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		return rtlimagemirroring ? rtlimagemirroring : nexacro.CheckBoxImageCtrl._default_rtlimagemirroring;
	};
	_pCheckBoxImageCtrl.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this.parent.on_fire_onclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this.parent, this);
	};

	_pCheckBoxImageCtrl.on_fire_ondblclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this.parent.on_fire_ondblclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this.parent, this);
	};

	_pCheckBoxImageCtrl._img_load_completed = function (url) {
		return nexacro.ImageViewerCtrl.prototype._img_load_completed.call(this, url, (this.parent) ? this.parent.isChecked() : null);
	};

	delete _pCheckBoxImageCtrl;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.RadioClickEventInfo) {
	nexacro.RadioClickEventInfo = function (obj, id, index, itemText, itemValue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		nexacro.ClickEventInfo.call(this, obj, id || "onradioclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);

		this.index = index;
		this.itemtext = itemText;
		this.itemvalue = itemValue;
	};
	var _pRadioClickEventInfo = nexacro._createPrototype(nexacro.ClickEventInfo, nexacro.RadioClickEventInfo);
	nexacro.RadioClickEventInfo.prototype = _pRadioClickEventInfo;
	_pRadioClickEventInfo._type_name = "RadioClickEventInfo";

	delete _pRadioClickEventInfo;
}

if (!nexacro.Radio) {
	nexacro.Radio_Style = function (target) {
		nexacro.Style.call(this);
		this.buttonalign = null;
		this.buttonbackground = null;
		this.buttonbackgroundimagemode = null;
		this.buttonborder = null;
		this.buttoncolor = null;
		this.buttongradation = null;
		this.buttonimage = null;
		this.buttonsize = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;
		this.textpadding = null;

		if (target) {
			this._target = target;
		}
	};

	var _pRadioStyle = nexacro._createPrototype(nexacro.Style, nexacro.Radio_Style);
	nexacro.Radio_Style.prototype = _pRadioStyle;

	eval(nexacro._createAlignAttributeEvalStr("_pRadioStyle", "buttonalign"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pRadioStyle", "buttonbackground"));
	eval(nexacro._createValueAttributeEvalStr("_pRadioStyle", "buttonbackgroundimagemode"));
	eval(nexacro._createBorderAttributeEvalStr("_pRadioStyle", "buttonborder"));
	eval(nexacro._createColorAttributeEvalStr("_pRadioStyle", "buttoncolor"));
	eval(nexacro._createGradationAttributeEvalStr("_pRadioStyle", "buttongradation"));
	eval(nexacro._createValueAttributeEvalStr("_pRadioStyle", "buttonimage"));
	eval(nexacro._createValueAttributeEvalStr("_pRadioStyle", "buttonsize"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pRadioStyle", "itembackground"));
	eval(nexacro._createBorderAttributeEvalStr("_pRadioStyle", "itemborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pRadioStyle", "itembordertype"));
	eval(nexacro._createGradationAttributeEvalStr("_pRadioStyle", "itemgradation"));
	eval(nexacro._createPaddingAttributeEvalStr("_pRadioStyle", "itempadding"));
	eval(nexacro._createPaddingAttributeEvalStr("_pRadioStyle", "textpadding"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pRadioStyle", "accessibility"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pRadioStyle", "itemaccessibility"));

	_pRadioStyle.__custom_emptyObject = function () {
		this.buttonalign = null;
		this.buttonbackground = null;
		this.buttonbackgroundimagemode = null;
		this.buttonborder = null;
		this.buttoncolor = null;
		this.buttongradation = null;
		this.buttonimage = null;
		this.buttonsize = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;
		this.textpadding = null;
		this.accessibility = null;
		this.itemaccessibility = null;
	};

	_pRadioStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.buttonalign && this.buttonalign._is_empty) {
			val += "buttonalign:" + this.buttonalign._value + "; ";
		}
		if (this.buttonimage && this.buttonimage._is_empty) {
			val += "buttonimage:" + this.buttonimage._value + "; ";
		}
		if (this.textpadding && this.textpadding._is_empty) {
			val += "textpadding:" + this.textpadding._value + "; ";
		}
		if (this.buttonborder && this.buttonborder._is_empty) {
			val += "buttonborder:" + this.buttonborder._value + "; ";
		}
		if (this.buttoncolor && this.buttoncolor._is_empty) {
			val += "buttoncolor:" + this.buttoncolor._value + "; ";
		}
		if (this.buttonsize && this.buttonsize._is_empty) {
			val += "buttonsize:" + this.buttonsize._value + "; ";
		}
		if (this.buttonbackground && this.buttonbackground._is_empty) {
			val += "buttonbackground:" + this.buttonbackground._value + "; ";
		}
		if (this.buttongradation && this.buttongradation._is_empty) {
			val += "buttongradation:" + this.buttongradation._value + "; ";
		}
		if (this.buttonbackgroundimagemode && this.buttonbackgroundimagemode._is_empty) {
			val += "buttonbackgroundimagemode:" + this.buttonbackgroundimagemode._value + "; ";
		}
		if (this.itembackground && this.itembackground._is_empty) {
			val += "itembackground:" + this.itembackground._value + "; ";
		}
		if (this.itemborder && this.itemborder._is_empty) {
			val += "itemborder:" + this.itemborder._value + "; ";
		}
		if (this.itembordertype && this.itembordertype._is_empty) {
			val += "itembordertype:" + this.itembordertype._value + "; ";
		}
		if (this.itemgradation && this.itemgradation._is_empty) {
			val += "itemgradation:" + this.itemgradation._value + "; ";
		}
		if (this.itempadding && this.itempadding._is_empty) {
			val += "itempadding:" + this.itempadding._value + "; ";
		}
		if (this.accessibility && this.accessibility._is_empty) {
			val += "accessibility:" + this.accessibility._value + "; ";
		}
		if (this.itemaccessibility && this.itemaccessibility._is_empty) {
			val += "itemaccessibility:" + this.itemaccessibility._value + "; ";
		}
		return val;
	};

	_pRadioStyle.setStyleValue = function (stylePropID, pseudo, value) {
		var ret = nexacro.Style.prototype.setStyleValue.call(this, stylePropID, pseudo, value);

		if (!ret) {
			if (stylePropID == "buttonsize" && pseudo != "normal") {
				ret = this._setCustomPseudoStyle(stylePropID, pseudo, value);
			}
		}

		return ret;
	};

	_pRadioStyle._setCustomPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedStyleObj(stylePropID, value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedStyleObj(stylePropID, value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	nexacro.Radio_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.buttonalign = null;
		this.buttonimage = null;
		this.textpadding = null;
		this.buttonborder = null;
		this.buttoncolor = null;
		this.buttonsize = null;
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonbackgroundimagemode = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;
	};

	var _pRadioCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Radio_CurrentStyle);
	nexacro.Radio_CurrentStyle.prototype = _pRadioCurrentStyle;
	_pRadioCurrentStyle.__get_custom_style_value = _pRadioStyle.__get_custom_style_value;
	_pRadioCurrentStyle.__custom_emptyObject = _pRadioStyle.__custom_emptyObject;

	delete _pRadioStyle;
	delete _pRadioCurrentStyle;

	nexacro.Radio = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.pre_index = -1;
		this.pre_text;
		this.pre_value;
		this.datacolumn = "";
		this.value = undefined;
		this.index = -1;
		this.index_init = -1;
		this.codecolumn = "";
		this.readonly = false;
		this.innerdataset = null;
		this.columncount = 0;
		this.rowcount = 0;
		this.direction = "horizontal";
		this._lbuttondown_idx = -1;
		this._mouseover_idx = -1;


		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondrop" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onitemclick" : 1, 
			"onitemchanged" : 1, 
			"canitemchange" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};


		this._apply_pushed_pseudo = true;
		this._do_apply_val = true;
		this._accessibility_role = "radio";
		this._want_tab = true;
		this._want_arrow = false;
		this._is_first_focus = false;
		this._is_tab_focus = false;
		this._accessibility_index = -1;
		this._items = [];
		this._exprcache = {
		};
		this._init_value = undefined;
	};

	var _pRadio = nexacro._createPrototype(nexacro.Component, nexacro.Radio);
	nexacro.Radio.prototype = _pRadio;
	_pRadio._type_name = "Radio";

	_pRadio.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;
		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		var buttonbackground = this.on_find_CurrentStyle_buttonbackground(pseudo);
		var buttonbackgroundimagemode = this.on_find_CurrentStyle_buttonbackgroundimagemode(pseudo);
		var buttonborder = this.on_find_CurrentStyle_buttonborder(pseudo);
		var buttoncolor = this.on_find_CurrentStyle_buttoncolor(pseudo);
		var buttongradation = this.on_find_CurrentStyle_buttongradation(pseudo);
		var buttonimage = this.on_find_CurrentStyle_buttonimage(pseudo);
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		var itembackground = this.on_find_CurrentStyle_itembackground(pseudo);
		var itemborder = this.on_find_CurrentStyle_itemborder(pseudo);
		var itembordertype = this.on_find_CurrentStyle_itembordertype(pseudo);
		var itemgradation = this.on_find_CurrentStyle_itemgradation(pseudo);
		var itempadding = this.on_find_CurrentStyle_itempadding(pseudo);
		var textpadding = this.on_find_CurrentStyle_textpadding(pseudo);
		var font = this.on_find_CurrentStyle_font(pseudo);
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		var color = this.on_find_CurrentStyle_color(pseudo);
		var align = this.on_find_CurrentStyle_align(pseudo);
		var accessibility = this.on_find_CurrentStyle_accessibility(pseudo);
		var itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(pseudo);

		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(curstyle.font);
		}
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(curstyle.letterspace);
		}
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(curstyle.color);
		}
		if (curstyle.align != align) {
			curstyle.align = align;
			this.on_apply_style_align(curstyle.align);
		}
		if (buttonalign != curstyle.buttonalign) {
			curstyle.buttonalign = buttonalign;
		}
		if (buttonbackground != curstyle.buttonbackground) {
			curstyle.buttonbackground = buttonbackground;
		}
		if (buttonbackgroundimagemode != curstyle.buttonbackgroundimagemode) {
			curstyle.buttonbackgroundimagemode = buttonbackgroundimagemode;
		}
		if (buttonborder != curstyle.buttonborder) {
			curstyle.buttonborder = buttonborder;
		}
		if (buttoncolor != curstyle.buttoncolor) {
			curstyle.buttoncolor = buttoncolor;
		}
		if (buttongradation != curstyle.buttongradation) {
			curstyle.buttongradation = buttongradation;
		}
		if (buttonimage != curstyle.buttonimage) {
			curstyle.buttonimage = buttonimage;
		}
		if (buttonsize != curstyle.buttonsize) {
			curstyle.buttonsize = buttonsize;
		}
		if (itembackground != curstyle.itembackground) {
			curstyle.itembackground = itembackground;
		}
		if (itemborder != curstyle.itemborder) {
			curstyle.itemborder = itemborder;
		}
		if (itembordertype != curstyle.itembordertype) {
			curstyle.itembordertype = itembordertype;
		}
		if (itemgradation != curstyle.itemgradation) {
			curstyle.itemgradation = itemgradation;
		}
		if (itempadding != curstyle.itempadding) {
			curstyle.itempadding = itempadding;
		}
		if (textpadding != curstyle.textpadding) {
			curstyle.textpadding = textpadding;
			this.on_apply_style_textpadding(curstyle.textpadding);
		}
		if (accessibility != curstyle.accessibility) {
			curstyle.accessibility = accessibility;
			this.on_update_style_accessibility();
		}
		if (itemaccessibility != curstyle.itemaccessibility) {
			this.currentstyle.itemaccessibility = itemaccessibility;
			this.on_apply_style_itemaccessibility(itemaccessibility);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pRadio.on_create_custom_style = function () {
		return new nexacro.Radio_Style(this);
	};

	_pRadio.on_create_custom_currentStyle = function () {
		return new nexacro.Radio_CurrentStyle();
	};


	_pRadio.on_find_CurrentStyle_buttonalign = function (pseudo) {
		return this._find_pseudo_obj("buttonalign", pseudo, "align");
	};

	_pRadio.on_find_CurrentStyle_buttonbackground = function (pseudo) {
		return this._find_pseudo_obj("buttonbackground", pseudo, "background");
	};

	_pRadio.on_find_CurrentStyle_buttonbackgroundimagemode = function (pseudo) {
		return this._find_pseudo_obj("buttonbackgroundimagemode", pseudo);
	};

	_pRadio.on_find_CurrentStyle_buttonborder = function (pseudo) {
		return this._find_pseudo_obj("buttonborder", pseudo, "border");
	};

	_pRadio.on_find_CurrentStyle_buttoncolor = function (pseudo) {
		return this._find_pseudo_obj("buttoncolor", pseudo, "color");
	};

	_pRadio.on_find_CurrentStyle_buttongradation = function (pseudo) {
		return this._find_pseudo_obj("buttongradation", pseudo, "gradation");
	};

	_pRadio.on_find_CurrentStyle_buttonimage = function (pseudo) {
		return this._find_pseudo_obj("buttonimage", pseudo);
	};

	_pRadio.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this._find_pseudo_obj("buttonsize", pseudo);
	};

	_pRadio.on_find_CurrentStyle_itembackground = function (pseudo) {
		return this._find_pseudo_obj("itembackground", pseudo, "background");
	};

	_pRadio.on_find_CurrentStyle_itemborder = function (pseudo) {
		return this._find_pseudo_obj("itemborder", pseudo, "border");
	};

	_pRadio.on_find_CurrentStyle_itembordertype = function (pseudo) {
		return this._find_pseudo_obj("itembordertype", pseudo, "bordertype");
	};

	_pRadio.on_find_CurrentStyle_itemgradation = function (pseudo) {
		return this._find_pseudo_obj("itemgradation", pseudo, "gradation");
	};

	_pRadio.on_find_CurrentStyle_itempadding = function (pseudo) {
		return this._find_pseudo_obj("itempadding", pseudo, "padding");
	};

	_pRadio.on_find_CurrentStyle_itemaccessibility = function (pseudo) {
		var itemaccessibility = this._find_pseudo_obj("itemaccessibility", pseudo, "accessibility");
		return itemaccessibility ? itemaccessibility : nexacro.Component._default_accessibility;
	};

	_pRadio.on_find_CurrentStyle_textpadding = function (pseudo) {
		return this._find_pseudo_obj("textpadding", pseudo, "padding");
	};

	_pRadio.on_update_style_buttonalign = function () {
		this.currentstyle.buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo);
		this.on_apply_style_buttonalign(this.currentstyle.buttonalign);
	};

	_pRadio.on_update_style_buttonimage = function () {
		this.currentstyle.buttonimage = this.on_find_CurrentStyle_buttonimage(this._pseudo);
		this.on_apply_style_buttonimage(this.currentstyle.buttonimage);
	};

	_pRadio.on_update_style_textpadding = function () {
		this.currentstyle.textpadding = this.on_find_CurrentStyle_textpadding(this._pseudo);
		this.on_apply_style_textpadding(this.currentstyle.textpadding);
	};

	_pRadio.on_update_style_buttonborder = function () {
		this.currentstyle.buttonborder = this.on_find_CurrentStyle_buttonborder(this._pseudo);
		this.on_apply_style_buttonborder(this.currentstyle.buttonborder);
	};

	_pRadio.on_update_style_buttoncolor = function () {
		this.currentstyle.buttoncolor = this.on_find_CurrentStyle_buttoncolor(this._pseudo);
		this.on_apply_style_buttoncolor(this.currentstyle.buttoncolor);
	};

	_pRadio.on_update_style_buttonsize = function () {
		this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		this.on_apply_style_buttonsize(this.currentstyle.buttonsize);
	};

	_pRadio.on_update_style_buttonbackground = function () {
		this.currentstyle.buttonbackground = this.on_find_CurrentStyle_buttonbackground(this._pseudo);
		this.on_apply_style_buttonbackground(this.currentstyle.buttonbackground);
	};

	_pRadio.on_update_style_buttongradation = function () {
		this.currentstyle.buttongradation = this.on_find_CurrentStyle_buttongradation(this._pseudo);
		this.on_apply_style_buttongradation(this.currentstyle.buttongradation);
	};

	_pRadio.on_update_style_buttonbackgroundimagemode = function () {
		this.currentstyle.buttonbackgroundimagemode = this.on_find_CurrentStyle_buttonbackgroundimagemode(this._pseudo);
		this.on_apply_style_buttonbackgroundimagemode(this.currentstyle.buttonbackgroundimagemode);
	};

	_pRadio.on_update_style_itembackground = function () {
		this.currentstyle.itembackground = this.on_find_CurrentStyle_itembackground(this._pseudo);
		this.on_apply_style_itembackground(this.currentstyle.itembackground);
	};

	_pRadio.on_update_style_itemborder = function () {
		this.currentstyle.itemborder = this.on_find_CurrentStyle_itemborder(this._pseudo);
		this.on_apply_style_itemborder(this.currentstyle.itemborder);
	};

	_pRadio.on_update_style_itembordertype = function () {
		this.currentstyle.itembordertype = this.on_find_CurrentStyle_itembordertype(this._pseudo);
		this.on_apply_style_itembordertype(this.currentstyle.itembordertype);
	};

	_pRadio.on_update_style_itemgradation = function () {
		this.currentstyle.itemgradation = this.on_find_CurrentStyle_itemgradation(this._pseudo);
		this.on_apply_style_itemgradation(this.currentstyle.itemgradation);
	};

	_pRadio.on_update_style_itempadding = function () {
		this.currentstyle.itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo);
		this.on_apply_style_itempadding(this.currentstyle.itempadding);
	};

	_pRadio.on_update_style_itemaccessibility = function () {
		this.currentstyle.itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo);
		this.on_apply_style_itemaccessibility(this._make_accessibility_value(this.currentstyle.itemaccessibility));
	};

	_pRadio._search_style_obj = function (propobj, propid, idx) {
		if (propobj && propobj._bindtype != 0) {
			return nexacro._getValueForStyleBindExpr(this, propobj, propid, idx);
		}
		else {
			return propobj;
		}
	};


	_pRadio.on_apply_style_align = function (align) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_align(align);
			}
		}
	};

	_pRadio.on_apply_style_color = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				v = this._search_style_obj(v, "color", i);
				radioitems[i].on_apply_style_color(v);
			}
		}
	};

	_pRadio.on_apply_style_font = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				v = this._search_style_obj(v, "font", i);
				radioitems[i].on_apply_style_font(v);
			}
		}
	};

	_pRadio.on_apply_style_cursor = function (cursor) {
		var control_elem = this.getElement();
		if (control_elem) {
			control_elem.setElementCursor(cursor);

			var radioitems = this._items;
			if (radioitems) {
				var item_len = radioitems.length;
				for (var i = 0; i < item_len; i++) {
					radioitems[i].on_apply_style_cursor(cursor);
				}
			}
		}
	};

	_pRadio.on_apply_style_buttonalign = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttonalign();
			}
		}
	};

	_pRadio.on_apply_style_buttonbackground = function (buttonbackground) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttonbackground(buttonbackground);
			}
		}
	};

	_pRadio.on_apply_style_buttonbackgroundimagemode = function (buttonbackgroundimagemode) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttonbackgroundimagemode(buttonbackgroundimagemode);
			}
		}
	};

	_pRadio.on_apply_style_buttonborder = function (buttonborder) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttonborder(buttonborder);
			}
		}
	};

	_pRadio.on_apply_style_buttoncolor = function (buttoncolor) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttoncolor(buttoncolor);
			}
		}
	};

	_pRadio.on_apply_style_buttongradation = function (buttongradation) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttongradation(buttongradation);
			}
		}
	};

	_pRadio.on_apply_style_buttonimage = function (buttonimage) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttonimage(buttonimage);
			}
		}
	};

	_pRadio.on_apply_style_buttonsize = function (buttonsize) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_buttonsize(buttonsize);
			}
		}
	};

	_pRadio.on_apply_style_textpadding = function (textpadding) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i].on_apply_style_textpadding(textpadding);
			}
		}
	};

	_pRadio.on_apply_style_itembackground = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				v = this._search_style_obj(v, "background", i);
				radioitems[i].on_apply_style_background(v);
			}
		}
	};

	_pRadio.on_apply_style_itemborder = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				v = this._search_style_obj(v, "border", i);
				radioitems[i].on_apply_style_border(v);
			}
		}
	};

	_pRadio.on_apply_style_itembordertype = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				v = this._search_style_obj(v, "bordertype", i);
				radioitems[i].on_apply_style_bordertype(v);
			}
		}
	};

	_pRadio.on_apply_style_itemgradation = function (v) {
		var item_gradation = v;
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				item_gradation = this._search_style_obj(v, "gradation", i);
				radioitems[i].on_apply_style_gradation(item_gradation);
			}
		}
		delete item_gradation, radioitems;
	};

	_pRadio.on_apply_style_itempadding = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				v = this._search_style_obj(v, "padding", i);
				radioitems[i].on_apply_style_padding(v);
			}
		}
	};

	_pRadio.on_apply_style_accessibility = function (accessibility) {
		if (accessibility) {
			var control_elem = this.getElement();
			if (control_elem) {
				control_elem.setAccessibility(accessibility);
			}
		}
	};

	_pRadio.on_apply_style_itemaccessibility = function (itemaccessibility) {
		var radioitems = this._items;
		this.currentstyle.itemaccessibility = itemaccessibility;

		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				if (itemaccessibility) {
					var accessibility = this._search_style_obj(itemaccessibility, "accessibility", i);
					if (accessibility) {
						radioitems[i].style.set_accessibility(accessibility._value);
					}
				}
			}
		}
	};

	_pRadio.on_apply_style_letterspace = function (letterspace) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				letterspace = this._search_style_obj(letterspace, "letterspace", i);
				radioitems[i].on_apply_style_letterspace(letterspace);
			}
		}
	};

	_pRadio.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pRadio.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (!this.innerdataset) {
				var text_elem = new nexacro.TextBoxElement(control_elem);
				this._text_elem = text_elem;
				var halign = this.currentstyle.align.halign == "" ? "center" : this.currentstyle.align._halign;
				var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementFont(this.currentstyle.font);
				text_elem.setElementColor(this.currentstyle.color);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(this.currentstyle.letterspace);
			}
		}
	};

	_pRadio.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this.value = this._init_value;

			var innerdataset = this._innerdataset;
			var datacolumn = this.datacolumn == "" ? this.codecolumn : this.datacolumn;
			var codecolumn = this.codecolumn;
			var text = "";
			var code = "";
			var radioitem = null;

			if (innerdataset) {
				var rows = innerdataset.getRowCount();
				var valueproc = false;
				if (rows > 0) {
					for (var i = 0; i < rows; i++) {
						text = innerdataset.getColumn(i, datacolumn);
						code = innerdataset.getColumn(i, codecolumn);
						radioitem = new nexacro.RadioItemCtrl("item", "absolute", 0, 0, 0, 0, null, null, this);
						radioitem.set_text(text);
						radioitem.set_code(code);
						radioitem.set_index(i);
						if (code) {
							if (code == this.value && valueproc == false) {
								radioitem.set_value(true);
								valueproc = true;
							}
						}

						radioitem.createComponent();
						if (nexacro._enableaccessibility) {
							radioitem._setAccessibilityInfoCount(rows);
							radioitem._setAccessibilityInfoIndex(i);
						}
						radioitem._setEventHandler("onclick", this.on_notify_item_onclick, this);

						this._items[i] = radioitem;
					}
					this._update_radioitem();
				}
				if (this.index_init > -1 && this.index < 0 && this.value === undefined) {
					this.index = this.index_init;
				}

				this.on_apply_index(this.pre_index, this.index, false);
			}
			else {
				var text_elem = this._text_elem;
				if (text_elem) {
					text_elem.create();
					this.on_apply_text();
				}
			}
			this.on_apply_readonly(this.readonly);
			this.on_apply_value(true);
			if (this.value !== undefined && this.value != null) {
				this.applyto_bindSource("value", this.value);
			}

			if (nexacro._enableaccessibility) {
				this._want_arrow = nexacro._enableaccessibility;
				this.on_update_style_accessibility();
				this._refreshAccessibilityValue();
			}

			this.on_apply_style_color(this.currentstyle.color);
			this.on_apply_style_font(this.currentstyle.font);
			this.on_apply_style_align(this.currentstyle.align);
			this.on_apply_style_cursor(this.currentstyle.cursor);
			this.on_apply_style_buttonalign(this.currentstyle.buttonalign);
			this.on_apply_style_itemgradation(this.currentstyle.itemgradation);
			this.on_apply_style_letterspace(this.currentstyle.letterspace);
			this._setEventHandler("onkeydown", this.on_notify_radio_onkeydown, this);

			this.on_apply_prop_rtldirection();
		}
	};

	_pRadio.on_destroy_contents = function () {
		var items = this._items;
		var item_len = items.length;

		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.destroy();
			this._text_elem = null;
		}

		for (var i = 0; i < item_len; i++) {
			items[i].destroy();
			items[i] = null;
		}
		this._items = null;

		if (this._innerdataset) {
			this._innerdataset._removeEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
			this._innerdataset._removeEventHandler("onrowsetchanged", this._callback_onrowsetchanged, this);
			this._innerdataset = null;
		}

		this._exprcache = null;
		this._lbuttondown_idx = -1;
		this._mouseover_idx = -1;
	};

	_pRadio.on_change_containerRect = function (_client_width, _client_height) {
		this._update_radioitem();
	};

	_pRadio.on_getBindableProperties = function () {
		return "value";
	};

	_pRadio.on_apply_prop_enable = function (v) {
		var radioitems = this._items;
		if (radioitems) {
			var item_len = radioitems.length;
			for (var i = 0; i < item_len; i++) {
				radioitems[i]._setEnable(v);
			}
		}
	};

	_pRadio.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			this.value = undefined;

			var preRadio = this._getItem(this.index);
			var curRadio = this._getItem(-1);

			this.index = -1;

			if (preRadio) {
				preRadio.set_value(false);
			}

			if (curRadio) {
				curRadio.set_value(true);
				this.text = curRadio.text;
			}

			return true;
		}
	};

	_pRadio.on_change_bindSource = function (propid, pSendDataset, rowIdx, colIdx, colArrayIdx) {
		if (propid == "value") {
			if (!this._is_created && !this._is_created_contents) {
				this._init_value = undefined;
			}

			var val = pSendDataset.getColumn(rowIdx, colIdx);
			this.value = val;
			this._init_value = val;
			var dataset = this._innerdataset;

			if (!dataset) {
				return true;
			}

			var code = this.codecolumn;
			var row = dataset.findRow(code, val);

			var preRadio = this._getItem(this.index);
			var curRadio = this._getItem(row);

			this.index = row;

			if (preRadio) {
				preRadio.set_value(false);
			}

			if (curRadio) {
				curRadio.set_value(true);
				this.text = curRadio.text;
			}
			return true;
		}
		return false;
	};

	_pRadio.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var items = this._items;
		var accIdx = this._accessibility_index;
		var index = this.index;
		var count = items.length;

		if (keycode == nexacro.Event.KEY_TAB) {
			if (shift_key) {
				if (accIdx < 0) {
					this._want_tab = false;
				}
				else {
					var last_focused = this._last_focused;
					this._do_defocus(last_focused, true);
					if (last_focused && last_focused._selected) {
						last_focused._stat_change("select", "selected");
					}
					this._on_focus(true);
					this._accessibility_index = -1;
				}
			}
			else {
				this._want_tab = false;
			}

			this._getWindow()._keydown_element._event_stop = true;
		}
		else if (nexacro._enableaccessibility && keycode == nexacro.Event.KEY_SPACE) {
			if (!this.readonly) {
				if (this._accessibility_index > -1) {
					items[this._accessibility_index]._stat_change("notfocus", "normal");
					this.set_index(this._accessibility_index);
				}
			}
		}
		return nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pRadio.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		var ret = false;
		var items = this._items;

		if (items && items.length > 0) {
			if (direction > 0) {
				this._accessibility_index++;
			}
			else {
				this._accessibility_index--;
			}

			if (items[this._accessibility_index]) {
				ret = true;
				items[this._accessibility_index]._setAccessibilityNotifyEvent();
			}
		}

		return ret;
	};

	_pRadio._setAccessibilityNotifyEvent = function (direction) {
		var items = this._items;

		if (items && items.length > 0) {
			var obj = null;

			if (this._accessibility_index < 0 || this._accessibility_index >= items.length) {
				if (direction == undefined) {
					direction = 1;
				}

				if (direction > 0) {
					this._accessibility_index = 0;
				}
				else {
					this._accessibility_index = items.length - 1;
				}
			}

			obj = items[this._accessibility_index];
			if (obj) {
				return obj._setAccessibilityNotifyEvent();
			}
		}
		else {
			return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
		}
	};

	_pRadio._setAccessibilityInfoByHover = function (control) {
		if (control) {
			if (control.parent instanceof nexacro.RadioItemCtrl) {
				control = control.parent;
			}

			this._accessibility_index = control.index;
			return control._setAccessibilityNotifyEvent();
		}
		else {
			return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this);
		}
	};

	_pRadio._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_tab = false;
		if (keycode && (keycode == nexacro.Event.KEY_TAB)) {
			want_tab = false;
		}
		else {
			var _want_arrow = this._getPreCalculateWantArrow(keycode);
		}

		if (this._is_first_focus) {
			this._is_first_focus = false;
			this._is_tab_focus = false;
		}
		this._want_arrow = nexacro._enableaccessibility;
		this._want_tab = true;
		return {
			want_tab : want_tab, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : _want_arrow
		};
	};


	_pRadio._setFocus = function (bResetScroll, dir) {
		this._focus_direction = dir;
		var retn = this.setFocus(bResetScroll);
		this._focus_direction = -1;
		return retn;
	};

	_pRadio._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		var retn = false;
		var focusdir = this._focus_direction;
		if (evt_name == "tabkey") {
			focusdir = 0;
		}
		else if (evt_name == "shifttabkey") {
			focusdir = 1;
		}
		else if (evt_name == "downkey") {
			focusdir = 2;
		}
		else if (evt_name == "upkey") {
			focusdir = 3;
		}

		if (self_flag == false) {
			this._focus_direction = -1;
		}

		if (focusdir >= 0) {
			retn = nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
			if (self_flag == false) {
				this._accessibility_index = -1;
				if (focusdir < 2) {
					var items = this._items;
					if (items && items.length > 0) {
						var comp;
						this._is_tab_focus = true;
						this._is_first_focus = true;

						if (this.index > -1) {
							this._accessibility_index = this.index;
							comp = items[this._accessibility_index];
							comp._on_focus(true);
							comp._stat_change("select", "selected");
						}
						else {
							if (focusdir == 0) {
								this._accessibility_index = 0;
							}
							else {
								this._accessibility_index = items.length - 1;
							}
							comp = items[this._accessibility_index];
							comp._on_focus(true);
						}
					}
				}
				else if (nexacro._enableaccessibility) {
					if (!this.readonly) {
						if (focusdir == 2) {
							if (!this._isAccessibilityEnable()) {
								var items = this._items;
								this._is_first_focus = true;
								if (this.index > -1) {
									comp = items[this._accessibility_index = this.index];
									this.set_index(this._accessibility_index);
									comp._on_focus(true);
								}
								else if (items.length > 0) {
									var idx = this._getNextAccessibilityOrderIndex(1);
									if (idx > -1) {
										this.set_index(idx);
										this._accessibility_index = idx;
										var comp = items[idx];
										comp._on_focus(true);
									}
								}
								comp._stat_change("select", "selected");
							}
						}
						else if (focusdir == 3) {
							if (!this._isAccessibilityEnable()) {
								var items = this._items;
								this._is_first_focus = true;
								if (this.index > -1) {
									comp = items[this._accessibility_index = this.index];
									this.set_index(this._accessibility_index);
									comp._on_focus(true);
								}
								else if (items.length > 0) {
									var idx = this._getNextAccessibilityOrderIndex(1);
									if (idx > -1) {
										this.set_index(idx);
										this._accessibility_index = idx;
										var comp = items[idx];
										comp._on_focus(true);
									}
								}
								comp._stat_change("select", "selected");
							}
						}
					}
				}
			}
		}
		else {
			retn = nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
		}
		return retn;
	};

	_pRadio._on_getAccessibilityAdditionalLabel = function () {
		if (!this._is_first_focus) {
			var count = 0;
			var items = this._items;
			if (items) {
				count = items.length;
			}
			return (this.index + 1) + " " + count;
		}
		return "";
	};

	_pRadio._on_getAccessibilityAdditionalRole = function () {
		var _role = "";
		if (!this._is_first_focus && this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo)) == "radio") {
			_role = " radio";
		}
		return _role;
	};

	_pRadio.on_get_style_accessibility_label = function () {
		var label = "";
		if (!this._is_first_focus) {
			label = this.text ? this.text : this.value;
		}
		return label;
	};

	_pRadio._getAccessibilityRole = function (accessibility) {
		var role = nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
		if (nexacro._accessibilitytype == 4) {
			var control_elem = this.getElement();
			var items = this._items;

			if (control_elem && items.length <= 0) {
				role = "static";
			}
		}
		return role;
	};

	_pRadio.on_mousemove_basic_action = function () {
		if (this._apply_pushed_pseudo && this._is_push) {
			this._stat_change("push", "pushed");
			this._is_pushed_area = true;
		}
		else {
			if (!nexacro.isTouchInteraction) {
				if (!this._isSelected()) {
					this._stat_change("", "mouseover");
				}

				this._control_pseudo = "";
				this.on_apply_pseudo(this._pseudo);

				if (this._dragging_cursor) {
					this._dragging_cursor = null;
					var cursor = this.on_find_CurrentStyle_cursor(this._pseudo);
					this._updateCursor(cursor);
				}
			}
		}
	};

	_pRadio.set_text = nexacro._emptyFn;

	_pRadio.on_apply_text = function () {
		var control_elem = this._control_element;
		var text_elem = this._text_elem;
		if (control_elem) {
			if (!this.innerdataset) {
				if (this._text_elem) {
					text_elem.setElementText(this.id);
				}
			}
			else {
				if (this._text_elem) {
					text_elem.setElementText("");
				}
			}
			this._redraw_radioitem();
		}
	};

	_pRadio.set_value = function (v) {
		if (v != this.value) {
			if (v == undefined || v == null) {
				v = "";
			}
			else {
				v = v.toString();
			}
		}

		var pre_idx = this.index;
		var pre_val = this.value;

		this._setValue(v, false);

		var cur_idx = this.index;
		var cur_val = v;

		if (this._is_created && this.value != v && v !== undefined) {
			this.value = v;
		}
		else {
			if (this.applyto_bindSource("value", v) == false) {
				var preRadio = this._getItem(cur_idx);
				var curRadio = this._getItem(pre_idx);

				if (preRadio) {
					preRadio.set_value(false);
				}

				if (curRadio) {
					curRadio.set_value(true);
				}

				this.index = pre_idx;
				this.value = pre_val;
			}
		}
	};

	_pRadio.on_apply_value = function (bIndex) {
		var dataset = this._innerdataset;
		if (!dataset) {
			return;
		}
		var code = this.codecolumn;
		var data = this.datacolumn;

		if (!code && !data) {
			return;
		}

		if (this.value !== undefined && this.value != null) {
			var row = dataset.findRow(code, this.value);
			if (bIndex != true) {
				if (this.index != row) {
					this._setIndex(row, true);
				}
			}
		}

		if (bIndex != true) {
			if (this.value == undefined || this.value === null) {
				this._setIndex(-1, true);
			}
		}
	};

	_pRadio.set_index = function (v) {
		if (!this.value || this.getElement()) {
			this._setIndex(v, false);
		}
	};

	_pRadio.on_apply_index = function (preidx, curidx, bValue) {
		var dataset = this._innerdataset;
		if (!dataset) {
			return;
		}

		var code = this.codecolumn;
		var data = this.datacolumn;
		if (!code && !data) {
			return;
		}

		var val, preRadioItem, postRadioItem;

		if (curidx >= 0) {
			val = dataset.getColumn(curidx, code);

			if (this.value != val) {
				if (this.applyto_bindSource("value", val) === false) {
					postRadioItem = this._getItem(curidx);
					if (postRadioItem) {
						postRadioItem.set_value(false);
						postRadioItem._stat_change("notselect", "normal");
					}

					preRadioItem = this._getItem(this.index);
					if (preRadioItem) {
						preRadioItem.set_value(true);
						this.text = preRadioItem.text;
						preRadioItem._stat_change("select", "selected");
					}

					this._do_apply_val = false;
					return;
				}

				this._setValue(val, true);
			}
		}

		if (bValue != true) {
			if (this.index == undefined) {
				this._setValue(undefined, true);
			}
		}

		if (curidx < 0) {
			var radio;
			for (var i = 0, n = this._items.length; i < n; i++) {
				radio = this._getItem(i);
				if (radio) {
					radio.set_value(false);
					radio._stat_change("notselect", "normal");
				}
			}

			val = undefined;

			if (this.applyto_bindSource("value", val) === false) {
				preRadioItem = this._getItem(this.index);
				if (preRadioItem) {
					preRadioItem.set_value(true);
					this.text = preRadioItem.text;
					preRadioItem._stat_change("select", "selected");
				}

				this._do_apply_val = false;
				return;
			}

			this._setValue(val, true);
		}

		var preRadio = this._getItem(preidx);
		if (preRadio) {
			preRadio.set_value(false);
			preRadio._stat_change("notselect", "normal");
		}

		var curRadio = this._getItem(curidx);
		if (curRadio) {
			curRadio.set_value(true);
			this.text = curRadio.text;
			curRadio._stat_change("select", "selected");
		}
		else {
			this.text = "";
		}
	};

	_pRadio.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pRadio.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		var radioitem = null;
		var items = this._items;
		var item_len = items.length;
		for (var i = 0; i < item_len; i++) {
			radioitem = this._getItem(i);
			radioitem.set_readonly(v);
		}
	};

	_pRadio.set_datacolumn = function (v) {
		this.datacolumn = v;
		this.on_apply_datacolumn();
	};

	_pRadio.on_apply_datacolumn = function () {
		var data = this.datacolumn == "" ? this.codecolumn : this.datacolumn;
		var data_val;

		var innerdataset = this._innerdataset;
		if (!innerdataset) {
			return;
		}

		var items = this._items;
		var item_len = items.length;

		if (this._creating == false) {
			this._create_radioitem();
		}

		for (var i = 0; i < item_len; i++) {
			data_val = innerdataset.getColumn(i, data);
			if (data_val) {
				items[i].set_text(data_val);
				if (i == this.index) {
					this.text = data_val;
				}
			}
			else {
				items[i].set_text("");
				this.text = "";
			}
		}
	};

	_pRadio.set_codecolumn = function (v) {
		this.codecolumn = v;
		this.on_apply_codecolumn();
	};

	_pRadio.on_apply_codecolumn = function () {
		var code = this.codecolumn;
		var code_val;

		var innerdataset = this._innerdataset;
		if (!innerdataset) {
			return;
		}

		var items = this._items;
		var item_len = items.length;

		if (this._creating == false) {
			this._create_radioitem();
		}

		for (var i = 0; i < item_len; i++) {
			code_val = innerdataset.getColumn(i, code);
			if (code_val) {
				items[i].set_code(code_val);
			}
		}

		this.on_apply_value(false);
		this.set_index(this.index);

		if (this.datacolumn == "" && this._control_element) {
			this.on_apply_datacolumn();
		}
	};

	_pRadio.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
		}
	};

	_pRadio._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pRadio.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pRadio.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
		return this.innerdataset;
	};

	_pRadio.on_apply_innerdataset = function () {
		var ds = this._innerdataset;
		if (ds) {
			ds._setEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
			ds._setEventHandler("onrowsetchanged", this._callback_onrowsetchanged, this);
		}
		else {
			var text_elem = this._text_elem;
			if (!text_elem && this._control_element) {
				text_elem = new nexacro.TextBoxElement(this._control_element);
				this._text_elem = text_elem;
				var curstyle = this.currentstyle;

				var halign = (curstyle.align.halign == "" ? "center" : curstyle.align._halign);
				var valign = (curstyle.align.valign == "" ? "middle" : curstyle.align._valign);

				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementFont(curstyle.font);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(curstyle.letterspace);

				text_elem.create();
			}
		}
		this.on_apply_text();
	};

	_pRadio.set_columncount = function (v) {
		if (v != this.columncount) {
			this.columncount = v;
			this.on_apply_columncount();
		}
	};

	_pRadio.on_apply_columncount = function () {
		this._update_radioitem();
	};

	_pRadio.set_rowcount = function (v) {
		if (v != this.rowcount) {
			this.rowcount = v;
			this.on_apply_rowcount();
		}
	};

	_pRadio.on_apply_rowcount = function () {
		this._update_radioitem();
	};

	_pRadio.set_direction = function (v) {
		if (v != this.direction) {
			if (v.toString() == "") {
				v = "horizontal";
			}

			this.direction = v;
			this.on_apply_direction();
		}
	};

	_pRadio.on_apply_direction = function () {
		this._update_radioitem();
	};

	_pRadio.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		this.on_change_containerRect(this._client_width, this._client_height);
		var _rtldirection = this._rtldirection;

		if (this._text_elem) {
			this._text_elem.setElementRtlDirection(_rtldirection);
		}

		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			items[i]._setRtlDirection(_rtldirection);
		}
	};

	_pRadio.getCount = function () {
		var item_len = this._items.length;
		return item_len;
	};

	_pRadio.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		var change_val = this.applyto_bindSource("value", this.value);
		return change_val;
	};

	_pRadio.on_notify_radio_onkeydown = function (obj, e) {
		var ds = this._innerdataset;
		if (!ds || this.readonly) {
			return false;
		}
		var row_cnt = ds.getRowCount();
		var last_idx = row_cnt - 1;
		if (row_cnt < 1) {
			return false;
		}

		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].value == true) {
				this.pre_index = items[i].index;
				this.pre_value = items[i].code;
				this.pre_text = items[i].text;
			}
		}

		var E = nexacro.Event;
		var op = undefined;
		if (!nexacro._enableaccessibility) {
			op = (e.keycode == E.KEY_UP) || (e.keycode == E.KEY_LEFT) ? -1 : (e.keycode == E.KEY_DOWN) || (e.keycode == E.KEY_RIGHT) ? 1 : undefined;
		}
		else {
			op = (e.keycode == E.KEY_LEFT) ? -1 : (e.keycode == E.KEY_RIGHT) ? 1 : undefined;
		}

		if (op !== undefined) {
			if (nexacro._enableaccessibility) {
				if (this._accessibility_index == -1 && this.index > -1) {
					obj.idx = this.index;
				}
				else if (this.index == 0 && E.KEY_UP == e.keycode) {
					var _window = this._getWindow();
					_window._removeFromCurrentFocusPath(this, true);
					if (this._isAccessibilityEnable()) {
						this._on_focus(true);
					}
					this._accessibility_index = -1;
					return;
				}
				else {
					obj.idx = this._accessibility_index + op;
				}
			}
			else {
				obj.idx = this.index + op;
			}

			if (obj.idx >= row_cnt) {
				obj.idx = 0;
			}
			else if (obj.idx < 0) {
				obj.idx = last_idx;
			}

			var radioitem = this._getItem(obj.idx);
			var ret = this.on_fire_canitemchange(radioitem, e);

			if (ret !== false) {
				this._accessibility_index = obj.idx;
				if (row_cnt != obj.idx && row_cnt >= obj.idx && 0 <= obj.idx) {
					this.set_index(obj.idx);
					if (obj.idx != this.pre_index) {
						this.on_fire_onitemchanged(radioitem, e);
					}
				}

				if (nexacro._enableaccessibility) {
					radioitem._on_focus(true);
					radioitem._stat_change("select", "selected");
				}
			}
		}
		return false;
	};

	_pRadio.on_notify_item_onclick = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
				obj._setAccessibilityNotifyEvent();
			}
			return false;
		}
		var items = this._items;
		var item_len = items.length;
		var pre_select_idx = -1;

		for (var i = 0; i < item_len; i++) {
			if (items[i].value == true) {
				this.pre_index = items[i].index;
				this.pre_value = items[i].code;
				this.pre_text = items[i].text;
				pre_select_idx = i;
			}
		}

		var ret = this.on_fire_canitemchange(obj, e);

		if (ret !== false) {
			if (pre_select_idx >= 0) {
				items[this.pre_index].set_value(false);
			}

			this.on_fire_onitemclick(obj, e);

			obj.set_value(true);
			this.set_index(obj.index);

			if (this.index != this.pre_index || pre_select_idx < 0) {
				this.on_fire_onitemchanged(obj, e);
			}

			if (nexacro._enableaccessibility) {
				this._accessibility_index = obj.index;
				obj._on_focus(true);
			}
		}
	};

	_pRadio.on_fire_canitemchange = function (obj, e) {
		if (this.canitemchange && this.canitemchange._has_handlers) {
			var evt = new nexacro.ItemChangeEventInfo(this, "canitemchange", this.pre_index, this.pre_text, this.pre_value, obj.index, obj.text, obj.code);
			return this.canitemchange._fireCheckEvent(this, evt);
		}
		return;
	};

	_pRadio.on_fire_onitemchanged = function (obj, e) {
		if (this.onitemchanged && this.onitemchanged._has_handlers) {
			var evt = new nexacro.ItemChangeEventInfo(this, "onitemchanged", this.pre_index, this.pre_text, this.pre_value, obj.index, obj.text, obj.code);
			return this.onitemchanged._fireEvent(this, evt);
		}
		return false;
	};

	_pRadio.on_fire_onitemclick = function (obj, e) {
		if (this.onitemclick && this.onitemclick._has_handlers) {
			var evt = new nexacro.ItemClickEventInfo(this, "onitemclick", obj.index, obj.text, obj.code);
			return this.onitemclick._fireEvent(this, evt);
		}
		return false;
	};

	_pRadio._callback_onvaluechanged = function (obj, e) {
		this._redraw_radioitem();
	};

	_pRadio._callback_onload = function (obj, e) {
	};

	_pRadio._callback_onrowsetchanged = function (obj, e) {
		this._redraw_radioitem();
	};

	_pRadio._get_contents_rows = function () {
		var buffer_pages = this._buffer_pages, ret_arr = [];
		if (buffer_pages) {
			var rowobjs, rowobj;
			for (var i = 0, n = buffer_pages.length; i < n; i++) {
				rowobjs = buffer_pages[i];
				if (rowobjs) {
					ret_arr = ret_arr.concat(rowobjs);
				}
			}
		}
		return ret_arr;
	};

	_pRadio._setIndex = function (v, bValue) {
		v = parseInt(v) | 0;

		if (this.index_init < 0 && this.index < 0 && this._items.length == 0) {
			this.index_init = v;
		}

		if (v > 0 && this._items.length > 0 && (v >= this._items.length)) {
			v = -1;
		}
		else if (this._innerdataset && this._items.length == 0) {
			if (this._innerdataset.getRowCount() == 0) {
				v = -1;
			}
		}

		this._do_apply_val = true;
		this.on_apply_index(this.index, v, bValue);
		if (this._do_apply_val) {
			this.index = v;
		}
	};

	_pRadio._getItem = function (index) {
		var items = this._items;
		var item_len = items.length;
		if (index >= 0 && items.length > 0) {
			return items[index];
		}
		return null;
	};

	_pRadio._redraw_radioitem = function () {
		var control = this.getElement();
		var innerdataset = this._innerdataset;
		var radioitem = null;
		var text = "";
		var code = "";
		if (control && control.getRootWindowHandle()) {
			this._delete_radioitem();
			if (innerdataset) {
				var rows = innerdataset.getRowCount();
				var datacolumn = this.datacolumn;
				var codecolumn = this.codecolumn;

				if (rows > 0) {
					for (var i = 0; i < rows; i++) {
						text = innerdataset.getColumn(i, datacolumn == "" ? codecolumn : datacolumn);
						code = innerdataset.getColumn(i, codecolumn);
						radioitem = new nexacro.RadioItemCtrl("item", "absolute", 0, 0, 0, 0, null, null, this);
						radioitem.set_text(text);
						radioitem.set_code(code);
						radioitem.set_index(i);

						radioitem.createComponent();
						radioitem.on_created();
						radioitem._setEventHandler("onclick", this.on_notify_item_onclick, this);


						if (nexacro._enableaccessibility) {
							radioitem._setAccessibilityInfoIndex(i);
							radioitem._setAccessibilityInfoCount(rows);
						}
						this._items[i] = radioitem;
					}
					this._update_radioitem();
				}
			}

			this.on_apply_index(this.pre_index, this.index, false);
			this.on_apply_style_cursor();
			this._refreshAccessibilityValue();
		}
	};

	_pRadio._delete_radioitem = function () {
		var items = this._items;
		var item_len = items.length;
		for (var i = 0; i < item_len; i++) {
			items[i].destroy();
			items[i] = null;
		}

		while (item_len > 0) {
			items.pop();
			item_len--;
		}
	};

	_pRadio._update_radioitem = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var innerdataset = this._innerdataset;
			var items = this._items;
			var item_len = items.length;
			if (innerdataset == null || item_len == 0) {
				return;
			}

			var columncount = parseInt(this.columncount) | 0;
			var rowcount = parseInt(this.rowcount) | 0;
			var datarowcnt = innerdataset.getRowCount();
			var datacolcnt = innerdataset.getColCount();
			var colcnt = 1;
			var rowcnt = datarowcnt;
			var gogo = "row";
			var direction = this.direction.toString();
			var width = 0;
			var height = 0;

			var max_col = 1;
			if (columncount == -1 && rowcount == -1) {
				rowcnt = 1;
				colcnt = 0;
				var sum_width = 0;
				for (var i = 0; i < item_len; i++) {
					var size = items[i]._getItemRealSize();
					sum_width += size.width;

					if (this._client_width < sum_width) {
						rowcnt++;
						sum_width = size.width;
						colcnt = 1;
					}
					else {
						colcnt++;
						max_col = max_col > colcnt ? max_col : colcnt;
					}
				}

				colcnt = max_col;

				var dataidx = 0;
				var pre_w = 0, pre_h = 0;
				var size;
				for (var i = 0; i < rowcnt; i++) {
					pre_w = 0;
					for (var j = 0; j < colcnt; j++) {
						if (datarowcnt <= dataidx) {
							break;
						}
						var radioitem = items[dataidx];
						size = radioitem._getItemRealSize();
						size.height = this._client_height / rowcnt;

						radioitem.move(pre_w, pre_h, size.width, size.height);
						radioitem.setTextOverflow(false);

						pre_w += size.width;

						dataidx++;
					}

					pre_h += size.height;
				}
			}
			else {
				if (direction.toLowerCase() == "horizontal") {
					if (columncount > 0) {
						colcnt = columncount;
					}
					else if ((columncount < 0 && rowcount < 0) || (columncount < 0 && rowcount == 0) || (columncount == 0 && rowcount == 0) || (columncount == 0 && rowcount == datarowcnt)) {
						colcnt = 1;
					}
					else if (columncount < 0 && (columncount < rowcount) && (rowcount > 1)) {
						colcnt = Math.round(rowcnt / rowcount);
					}
					else if (rowcount > 0) {
						colcnt = Math.ceil(rowcnt / rowcount);
						if ((colcnt * rowcount) < rowcnt) {
							colcnt++;
							rowcnt = (((colcnt * rowcount) - rowcnt) >= colcnt) ? rowcount - 1 : rowcount;
						}
					}
					else {
						colcnt = rowcnt;
					}

					if (colcnt > rowcnt) {
						colcnt = rowcnt;
					}

					gogo = "col";
					rowcnt = parseInt(datarowcnt / colcnt) | 0;
					if ((datarowcnt > colcnt) && (datarowcnt % colcnt) > 0) {
						rowcnt++;
					}
				}
				else {
					if (rowcount > 0) {
						rowcnt = rowcount;
					}
					else if (columncount > 0) {
						rowcnt = parseInt(datarowcnt / columncount);
						if ((columncount * rowcnt) < datarowcnt) {
							rowcnt++;
							colcnt = (((columncount * rowcnt) - datarowcnt) >= rowcnt) ? columncount - 1 : columncount;
						}
					}
					else {
						rowcnt = 1;
					}

					gogo = "row";
					colcnt = parseInt(datarowcnt / rowcnt) | 0;

					if (colcnt <= 0) {
						colcnt = 1;
					}
					if ((datarowcnt > rowcnt) && (datarowcnt % rowcnt) > 0) {
						colcnt++;
					}
				}

				width = this._client_width / colcnt;
				height = this._client_height / rowcnt;
				var dataidx = 0;
				var radioitem;

				if (gogo == "col") {
					for (var i = 0; i < rowcnt; i++) {
						for (var j = 0; j < colcnt; j++) {
							if (datarowcnt <= dataidx) {
								break;
							}
							radioitem = this._items[dataidx];
							radioitem.move((width * j), (height * i), width, height);
							radioitem.setTextOverflow(true);
							dataidx++;
						}
					}
				}
				else if (gogo == "" || gogo == "row") {
					var pre_w = 0, pre_h;
					for (var i = 0; i < colcnt; i++) {
						pre_h = 0;
						for (var j = 0; j < rowcnt; j++) {
							if (datarowcnt <= dataidx) {
								break;
							}
							radioitem = this._items[dataidx];
							radioitem.move((width * i), (height * j), width, height);
							radioitem.setTextOverflow(true);

							dataidx++;
						}
					}
				}
			}
		}
	};

	_pRadio._searchStyleValue = nexacro._emptyFn;
	_pRadio._exeExprStyle = nexacro._emptyFn;

	_pRadio._setValue = function (v, bIndex) {
		if (this.value == v) {
			return null;
		}

		var val = null;
		if (v == undefined || v == null) {
			val = "";
		}
		else {
			val = v.toString();
		}

		this.value = val;
		if (!this._is_created) {
			this._init_value = val;
		}
		this.on_apply_value(bIndex);
	};

	_pRadio._do_defocus = function (target, bParent) {
		var _window = this._getWindow();
		_window._removeFromCurrentFocusPath(target, true);
		if (bParent) {
			_window._removeFromCurrentFocusPath(this, false);
		}
	};

	_pRadio._getPreCalculateWantTab = function (keycode, shift_key) {
		var ds = this._innerdataset;
		if (ds) {
			if (this.index > -1) {
				var idx = this.index;
				if (idx == this._accessibility_index) {
					return false;
				}
			}
			else {
				var index = this._accessibility_index;
				if (shift_key) {
					if (index < 0) {
						return false;
					}
				}
				else {
					var totalcnt = ds.getRowCount();
					if (index + 1 > totalcnt) {
						return false;
					}
				}
			}
		}
		return this._want_tab;
	};

	_pRadio._getPreCalculateWantArrow = function (keycode) {
		var ds = this._innerdataset;
		if (nexacro._enableaccessibility && (nexacro._accessibilitytype == 4 || nexacro._accessibilitytype == 5)) {
			return true;
		}
		else if (ds) {
			if (keycode == nexacro.Event.KEY_UP) {
				return false;
			}
			else if (keycode == nexacro.Event.KEY_DOWN) {
				return false;
			}
		}
		else {
			return false;
		}

		return this._want_arrow;
	};

	_pRadio._getNextAccessibilityOrderIndex = function (direction) {
		var cur_idx = this._accessibility_index;
		var ar = this._items;
		if (direction > 0) {
			for (var i = cur_idx + direction, n = ar.length; i < n; i++) {
				if (ar[i]._isAccessibilityEnable()) {
					return i;
				}
			}
			cur_idx = -1;
		}
		else if (direction < 0) {
			for (var i = cur_idx + direction; i >= 0; i--) {
				if (ar[i]._isAccessibilityEnable()) {
					return i;
				}
			}
			cur_idx = this._accessibility_index = -1;
		}
		return cur_idx;
	};


	delete _pRadio;

	nexacro.RadioCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Radio.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._is_subcontrol = true;

		this._is_overflow = false;
	};
	var _pRadioCtrl = nexacro._createPrototype(nexacro.Radio, nexacro.RadioCtrl);
	nexacro.RadioCtrl.prototype = _pRadioCtrl;
	_pRadioCtrl._type_name = "RadioControl";

	nexacro._setForControlStyleFinder(_pRadioCtrl);

	delete _pRadioCtrl;
}
;

if (!nexacro.RadioItemCtrl) {
	nexacro.RadioItem_Style = function (target, id) {
		nexacro.Style.call(this, target, id);

		this.buttonalign = null;
		this.buttonbackground = null;
		this.buttonbackgroundimagemode = null;
		this.buttonborder = null;
		this.buttoncolor = null;
		this.buttongradation = null;
		this.buttonimage = null;
		this.buttonsize = null;
		this.textpadding = null;
	};

	var _pRadioItemStyle = nexacro._createPrototype(nexacro.Style, nexacro.RadioItem_Style);
	nexacro.RadioItem_Style.prototype = _pRadioItemStyle;

	eval(nexacro._createAlignAttributeEvalStr("_pRadioItemStyle", "buttonalign"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pRadioItemStyle", "buttonbackground"));
	eval(nexacro._createValueAttributeEvalStr("_pRadioItemStyle", "buttonbackgroundimagemode"));
	eval(nexacro._createBorderAttributeEvalStr("_pRadioItemStyle", "buttonborder"));
	eval(nexacro._createColorAttributeEvalStr("_pRadioItemStyle", "buttoncolor"));
	eval(nexacro._createGradationAttributeEvalStr("_pRadioItemStyle", "buttongradation"));
	eval(nexacro._createValueAttributeEvalStr("_pRadioItemStyle", "buttonimage"));
	eval(nexacro._createValueAttributeEvalStr("_pRadioItemStyle", "buttonsize"));
	eval(nexacro._createPaddingAttributeEvalStr("_pRadioItemStyle", "textpadding"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pRadioItemStyle", "accessibility"));

	_pRadioItemStyle.__custom_emptyObject = function () {
		this.buttonalign = null;
		this.buttonbackground = null;
		this.buttonbackgroundimagemode = null;
		this.buttonborder = null;
		this.buttoncolor = null;
		this.buttongradation = null;
		this.buttonimage = null;
		this.buttonsize = null;
		this.textpadding = null;
		this.accessibility = null;
	};

	_pRadioItemStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.buttonalign._value.length) {
			val += "buttonalign:" + this.buttonalign._value + "; ";
		}
		if (this.buttonimage._value.length) {
			val += "buttonimage:" + this.buttonimage._value + "; ";
		}
		if (this.textpadding._value.length) {
			val += "textpadding:" + this.textpadding._value + "; ";
		}
		if (this.buttonborder._value.length) {
			val += "buttonborder:" + this.buttonborder._value + "; ";
		}
		if (this.buttoncolor._value.length) {
			val += "buttoncolor:" + this.buttoncolor._value + "; ";
		}
		if (this.buttonsize._value.length) {
			val += "buttonsize:" + this.buttonsize._value + "; ";
		}
		if (this.buttonbackground._value.length) {
			val += "buttonbackground:" + this.buttonbackground._value + "; ";
		}
		if (this.buttongradation._value.length) {
			val += "buttongradation:" + this.buttongradation._value + "; ";
		}
		if (this.buttonbackgroundimagemode._value.length) {
			val += "buttonbackgroundimagemode:" + this.buttonbackgroundimagemode._value + "; ";
		}
		if (this.accessibility._value.length) {
			val += "accessibility:" + this.accessibility._value + "; ";
		}

		return val;
	};

	nexacro.RadioItem_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.buttonalign = null;
		this.buttonimage = null;
		this.textpadding = null;
		this.buttonborder = null;
		this.buttoncolor = null;
		this.buttonsize = null;
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonbackgroundimagemode = null;
	};

	var _pRadioItemCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.RadioItem_CurrentStyle);
	nexacro.RadioItem_CurrentStyle.prototype = _pRadioItemCurrentStyle;

	_pRadioItemCurrentStyle.__get_custom_style_value = _pRadioItemStyle.__get_custom_style_value;
	_pRadioItemCurrentStyle.__custom_emptyObject = _pRadioItemStyle.__custom_emptyObject;

	delete _pRadioItemStyle;
	delete _pRadioItemCurrentStyle;

	nexacro.RadioItemCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.radioimg = null;
		this.value = false;
		this.index = -1;
		this.readonly = false;
		this.code = "";


		this._text_elem = null;
		this._is_reference_control = false;
		this._accessibility_role = "radioitem";
		this._apply_pushed_pseudo = true;
	};

	var _pRadioItemCtrl = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.RadioItemCtrl);
	nexacro.RadioItemCtrl.prototype = _pRadioItemCtrl;
	nexacro._setForControlStyleFinder(_pRadioItemCtrl);

	_pRadioItemCtrl.on_apply_custom_pseudo = function (pseudo) {
		if (this._isSelected()) {
			if (pseudo != "pushed" && pseudo != "disabled") {
				pseudo = "selected";
			}
		}

		var curstyle = this.currentstyle;
		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		var buttonimage = this.on_find_CurrentStyle_buttonimage(pseudo);
		var textpadding = this.on_find_CurrentStyle_textpadding(pseudo);
		var buttonborder = this.on_find_CurrentStyle_buttonborder(pseudo);
		var buttoncolor = this.on_find_CurrentStyle_buttoncolor(pseudo);
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		var buttonbackground = this.on_find_CurrentStyle_buttonbackground(pseudo);
		var buttongradation = this.on_find_CurrentStyle_buttongradation(pseudo);
		var buttonbackgroundimagemode = this.on_find_CurrentStyle_buttonbackgroundimagemode(pseudo);
		var accessibility = this.on_find_CurrentStyle_accessibility(pseudo);
		var gradation = this.on_find_CurrentStyle_gradation(pseudo);

		if (gradation != curstyle.gradation) {
			curstyle.gradation = gradation;
			this.on_apply_style_gradation(curstyle.gradation);
		}
		if (buttonalign != curstyle.buttonalign) {
			curstyle.buttonalign = buttonalign;
			this.on_apply_style_buttonalign();
		}
		if (buttonimage != curstyle.buttonimage) {
			curstyle.buttonimage = buttonimage;
			this.on_apply_style_buttonimage(curstyle.buttonimage);
		}
		if (textpadding != curstyle.textpadding) {
			curstyle.textpadding = textpadding;
			this.on_apply_style_textpadding(curstyle.textpadding);
		}
		if (buttonborder != curstyle.buttonborder) {
			curstyle.buttonborder = buttonborder;
			if (this.radioimg) {
				this.radioimg.on_apply_pseudo(pseudo);
			}
		}
		if (buttoncolor != curstyle.buttoncolor) {
			curstyle.buttoncolor = buttoncolor;
			if (this.radioimg) {
				this.radioimg.on_apply_pseudo(pseudo);
			}
		}
		if (buttonsize != curstyle.buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(curstyle.buttonsize);
		}
		if (buttonbackground != curstyle.buttonbackground) {
			curstyle.buttonbackground = buttonbackground;
			if (this.radioimg) {
				this.radioimg.on_apply_pseudo(pseudo);
			}
		}
		if (buttongradation != curstyle.buttongradation) {
			curstyle.buttongradation = buttongradation;
			if (this.radioimg) {
				this.radioimg.on_apply_pseudo(pseudo);
			}
		}
		if (buttonbackgroundimagemode != curstyle.buttonbackgroundimagemode) {
			curstyle.buttonbackgroundimagemode = buttonbackgroundimagemode;
			if (this.radioimg) {
				this.radioimg.on_apply_pseudo(pseudo);
			}
		}

		if (accessibility != curstyle.accessibility) {
			curstyle.accessibility = this._make_accessibility_value(accessibility);
			this.on_apply_style_accessibility(curstyle.accessibility);
		}
	};

	_pRadioItemCtrl.on_create_custom_style = function () {
		return new nexacro.RadioItem_Style(this);
	};

	_pRadioItemCtrl.on_create_custom_currentStyle = function () {
		return new nexacro.RadioItem_CurrentStyle(this);
	};


	_pRadioItemCtrl.on_find_CurrentStyle_background = function (pseudo) {
		var propobj = this.parent.on_find_CurrentStyle_itembackground(pseudo);
		return this.parent._search_style_obj(propobj, "background", this.index);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttonalign = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonalign(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttonbackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbackground(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttonbackgroundimagemode = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbackgroundimagemode(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttonborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonborder(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttoncolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttoncolor(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttongradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttongradation(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttonimage = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonimage(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonsize(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_textpadding = function (pseudo) {
		return this.parent.on_find_CurrentStyle_textpadding(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent.on_find_CurrentStyle_align(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_color = function (pseudo) {
		var propobj = this.parent.on_find_CurrentStyle_color(pseudo);
		return this.parent._search_style_obj(propobj, "color", this.index);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_font = function (pseudo) {
		var propobj = this.parent.on_find_CurrentStyle_font(pseudo);
		return this.parent._search_style_obj(propobj, "font", this.index);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_cursor(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		var propobj = this.parent.on_find_CurrentStyle_itemaccessibility(pseudo);
		return this.parent._search_style_obj(propobj, "accessibility", this.index);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itemborder(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itembordertype(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_padding = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itempadding(pseudo);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		var propobj = this.parent.on_find_CurrentStyle_itemgradation(pseudo);
		return this.parent._search_style_obj(propobj, "gradation", this.index);
	};

	_pRadioItemCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};


	_pRadioItemCtrl.on_update_style_buttonalign = function () {
		this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonalign(this._pseudo);
		this.on_apply_style_buttonalign(this.currentstyle.buttonsize);
	};

	_pRadioItemCtrl.on_update_style_buttonbackground = function () {
		this.currentstyle.buttonbackground = this.on_find_CurrentStyle_buttonbackground(this._pseudo);
		this.on_apply_style_buttonbackground(this.currentstyle.buttonbackground);
	};

	_pRadioItemCtrl.on_update_style_buttonbackgroundimagemode = function () {
		this.currentstyle.buttonbackgroundimagemode = this.on_find_CurrentStyle_buttonbackgroundimagemode(this._pseudo);
		this.on_apply_style_buttonbackgroundimagemode(this.currentstyle.buttonbackgroundimagemode);
	};

	_pRadioItemCtrl.on_update_style_buttonborder = function () {
		this.currentstyle.buttonborder = this.on_find_CurrentStyle_buttonborder(this._pseudo);
		this.on_apply_style_buttonborder(this.currentstyle.buttonborder);
	};

	_pRadioItemCtrl.on_update_style_buttoncolor = function () {
		this.currentstyle.buttoncolor = this.on_find_CurrentStyle_buttoncolor(this._pseudo);
		this.on_apply_style_buttoncolor(this.currentstyle.buttoncolor);
	};

	_pRadioItemCtrl.on_update_style_buttongradation = function () {
		this.currentstyle.buttongradation = this.on_find_CurrentStyle_buttongradation(this._pseudo);
		this.on_apply_style_buttongradation(this.currentstyle.buttongradation);
	};

	_pRadioItemCtrl.on_update_style_buttonimage = function () {
		this.currentstyle.buttonimage = this.on_find_CurrentStyle_buttonimage(this._pseudo);
		this.on_apply_style_buttonimage(this.currentstyle.buttonimage);
	};

	_pRadioItemCtrl.on_update_style_buttonsize = function () {
		this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		this.on_apply_style_buttonsize(this.currentstyle.buttonsize);
	};

	_pRadioItemCtrl.on_update_style_textpadding = function () {
		this.currentstyle.textpadding = this.on_find_CurrentStyle_textpadding(this._pseudo);
		this.on_apply_style_textpadding(this.currentstyle.textpadding);
	};

	_pRadioItemCtrl.on_update_style_accessibility = function () {
		this.on_apply_style_accessibility(this.currentstyle.accessibility = this._make_accessibility_value(this.on_find_CurrentStyle_accessibility(this._pseudo)));
	};


	_pRadioItemCtrl.on_apply_style_align = function (v) {
		if (this._text_elem && v) {
			var halign = v.halign == "" ? "left" : v._halign;
			var valign = v.valign == "" ? "middle" : v._valign;
			this._text_elem.setElementAlignXY(halign, valign);
		}
	};

	_pRadioItemCtrl.on_apply_style_color = function (v) {
		if (this._text_elem) {
			if (v) {
				this._text_elem.setElementColor(v);
			}
			else {
				this._text_elem.setElementColor("");
			}
		}
	};

	_pRadioItemCtrl.on_apply_style_background = function (v) {
		var background = v;
		var parent = this.parent;
		var radio_index = parent.index;
		var pseudo = parent._pseudo;
		if (radio_index >= 0 && this.index == radio_index) {
			if (pseudo == "focused" || pseudo == "pushed" || pseudo == "mouseover") {
				pseudo = "selected";
			}

			background = parent.on_find_CurrentStyle_itembackground(pseudo);
		}
		else if (pseudo == "normal") {
		}
		else {
			if (pseudo == "focused") {
				return;
			}

			if (this.index == this.parent._lbuttondown_idx) {
				if (pseudo == "mouseover") {
					pseudo == "pushed";
				}

				background = parent.on_find_CurrentStyle_itembackground(pseudo);
			}
			else {
				if (pseudo == "mouseover") {
					if (this.index == this.parent._mouseover_idx) {
						background = parent.on_find_CurrentStyle_itembackground(pseudo);
					}
					else {
						if (this._pseudo == "selected") {
							background = parent.on_find_CurrentStyle_itembackground(this._pseudo);
						}
						else {
							background = parent.on_find_CurrentStyle_itembackground("normal");
						}
					}
				}
				else {
					background = parent.on_find_CurrentStyle_itembackground("normal");
				}
			}
		}


		nexacro.Component.prototype.on_apply_style_background.call(this, background);
	};

	_pRadioItemCtrl.on_apply_style_border = function (v) {
		var border = v;
		var parent = this.parent;
		var radio_index = parent.index;
		var pseudo = parent._pseudo;
		if (radio_index >= 0 && this.index == radio_index) {
			if (pseudo == "focused" || pseudo == "pushed" || pseudo == "mouseover") {
				pseudo = "selected";
			}

			border = parent.on_find_CurrentStyle_itemborder(pseudo);
		}
		else if (pseudo == "normal") {
		}
		else {
			if (pseudo == "focused") {
				return;
			}

			if (this.index == this.parent._lbuttondown_idx) {
				if (pseudo == "mouseover") {
					pseudo == "pushed";
				}

				border = parent.on_find_CurrentStyle_itemborder(pseudo);
			}
			else {
				if (pseudo == "mouseover") {
					if (this.index == this.parent._mouseover_idx) {
						border = parent.on_find_CurrentStyle_itemborder(pseudo);
					}
					else {
						if (this._pseudo == "selected") {
							border = parent.on_find_CurrentStyle_itemborder(this._pseudo);
						}
						else {
							border = parent.on_find_CurrentStyle_itemborder("normal");
						}
					}
				}
				else {
					border = parent.on_find_CurrentStyle_itemborder("normal");
				}
			}
		}

		nexacro.Component.prototype.on_apply_style_border.call(this, border);
	};


	_pRadioItemCtrl.on_apply_style_font = function (v) {
		if (this._text_elem) {
			this._text_elem.setElementFont(v);
		}
	};

	_pRadioItemCtrl.on_apply_style_letterspace = function (v) {
		if (this._text_elem) {
			this._text_elem.setElementLetterSpace(v);
		}
	};

	_pRadioItemCtrl.on_apply_style_cursor = function (v) {
		this._control_element.setElementCursor(v);

		if (this.radioimg) {
			this.radioimg.style.set_cursor(v);
		}
	};

	_pRadioItemCtrl.on_apply_style_buttonalign = function (v) {
		var pseudo = this._pseudo;
		if (this._pushed) {
			pseudo = "pushed";
		}

		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		var textpadding = this.on_find_CurrentStyle_textpadding(pseudo);
		if (buttonalign) {
			var align_arr = buttonalign.toString().trim().split(" ");
			var align_len = align_arr.length;
			var horizon = "left";
			var vertical = "middle";
			var cl, ct, cr, cb, cw, ch;
			var tl = 0, tt = 0, tr = 0, tb = 0, tw = 0, th = 0;
			var btnsize, str, curBtnSize, curTxtPadding;

			curBtnSize = buttonsize;
			curTxtPadding = textpadding;

			if (buttonsize == null) {
				btnsize = 20;
			}
			else {
				btnsize = parseInt(curBtnSize._value) | 0;
			}

			for (var x = 0; x < align_len; x++) {
				str = align_arr[x].toString();
				if (str == "center") {
					horizon = "center";
				}
				else if (str == "right") {
					horizon = "right";
				}
				else if (str == "top") {
					vertical = "top";
				}
				else if (str == "bottom") {
					vertical = "bottom";
				}
			}

			var btn_gap = 0;
			var gap_and_size = btn_gap + btnsize;
			if (curTxtPadding) {
				if (curTxtPadding.left) {
					tl = curTxtPadding.left;
				}
				if (curTxtPadding.right) {
					tr = curTxtPadding.right;
				}
				if (curTxtPadding.top) {
					tt = curTxtPadding.top;
				}
				if (curTxtPadding.bottom) {
					tb = curTxtPadding.bottom;
				}
			}

			if (horizon == "left") {
				cl = btn_gap;
				tl += gap_and_size;
				gap_and_size = 0;
			}
			else if (horizon == "right") {
				cl = this._client_width - gap_and_size;
			}
			else if (horizon == "center") {
				cl = Math.round((this._client_width - btnsize) / 2);
			}

			if (vertical == "top") {
				ct = 0;
				cb = btnsize;
			}
			else if (vertical == "bottom") {
				ct = this._client_height - btnsize;
			}
			else {
				ct = (this._client_height - btnsize) / 2;
			}

			if (this.radioimg) {
				this.radioimg.move(cl, ct, btnsize, btnsize);
			}

			if (this._text_elem) {
				tw = this._client_width - tr - tl - gap_and_size;
				th = this._client_height - tb - tt;
				tw = (tw < 0) ? 0 : tw;
				th = (th < 0) ? 0 : th;

				tl = this._convertLeftForRtlLayout(tl, tw);
				this._text_elem.setElementPosition(tl, tt);
				this._text_elem.setElementSize(tw, th);

				this.setTextOverflow(!this._is_overflow);
			}
		}
	};

	_pRadioItemCtrl.on_apply_style_buttonimage = function (v) {
		this.on_apply_value();
	};

	_pRadioItemCtrl.on_apply_style_buttonborder = function (v) {
		if (this.radioimg) {
			this.radioimg.on_update_style_border();
		}
	};

	_pRadioItemCtrl.on_apply_style_buttoncolor = function (v) {
		if (this.radioimg) {
			this.radioimg.on_update_style_color();
		}
	};

	_pRadioItemCtrl.on_apply_style_buttonsize = function (v) {
		this.on_apply_style_buttonalign();
	};

	_pRadioItemCtrl.on_apply_style_buttongradation = function (v) {
		if (this.radioimg) {
			this.radioimg.on_update_style_gradation();
		}
	};

	_pRadioItemCtrl.on_apply_style_buttonbackground = function (v) {
		var radioimg = this.radioimg;

		if (radioimg) {
			if (this.radioimg) {
				radioimg.on_update_style_background();
			}
		}
	};

	_pRadioItemCtrl.on_apply_style_rtlimagemirroring = function (v) {
		return;
	};

	_pRadioItemCtrl.on_apply_style_buttonbackgroundimagemode = function (v) {
		var radioimg = this.radioimg;
		var repeat = "";

		if (v.toString() == "quad") {
			repeat = "quad";
		}
		else {
			repeat = "no-repeat";
		}
		if (radioimg) {
			radioimg.style.set_background_repeat(repeat);
		}
	};

	_pRadioItemCtrl.on_apply_style_textpadding = function (v) {
		this.on_apply_style_buttonalign();
	};

	_pRadioItemCtrl.on_apply_style_accessibility = function (accessibility) {
		if (accessibility) {
			var control_elem = this.getElement();
			control_elem.setAccessibility(accessibility);
		}
	};

	_pRadioItemCtrl.on_apply_prop_enable = function (v) {
		var radioimg = this.radioimg;
		if (radioimg) {
			radioimg._setEnable(v);
		}
	};

	_pRadioItemCtrl.on_apply_prop_rtldirection = function () {
		var _rtldirection = this._rtldirection;
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		this.on_change_containerRect(this._client_width, this._client_height);

		var text_elem = this._text_elem;

		if (text_elem) {
			text_elem.setElementRtlDirection(_rtldirection);
			text_elem.setElementPosition(text_elem.left, text_elem.top, true);
		}
		if (this.radioimg) {
			this.radioimg._setRtlDirection(_rtldirection);
		}
	};

	_pRadioItemCtrl.on_create_contents = function () {
		var control = this.getElement();
		if (control) {
			this.radioimg = new nexacro.ImageRadioCtrl("radioimg", "absolute", 0, 0, 0, 0, null, null, this);
			this.radioimg.style.set_bordertype("round 50 50");

			var p_pseudo = this.parent._pseudo;
			var text_elem = new nexacro.TextBoxElement(control);
			this._text_elem = text_elem;
			var align = this.on_find_CurrentStyle_align();
			var halign = align.halign == "" ? "center" : align._halign;
			var valign = align.valign == "" ? "middle" : align._valign;
			text_elem.setElementSize(this._client_width, this._client_height);
			text_elem.setElementColor(this.on_find_CurrentStyle_color(p_pseudo));
			text_elem.setElementFont(this.on_find_CurrentStyle_font(p_pseudo));

			text_elem.setElementAlignXY(halign, valign);
			text_elem.setElementLetterSpace(this.currentstyle.letterspace);
			this.text += "";
			text_elem.setElementText(this.text);
			text_elem.setElementWordWrap("char");

			this.radioimg.createComponent(true);
		}
	};

	_pRadioItemCtrl.on_created_contents = function () {
		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.create();
		}
		this.radioimg.on_created();
	};

	_pRadioItemCtrl.on_destroy_contents = function () {
		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.destroy();
			this._text_elem = null;
		}

		if (this.radioimg) {
			this.radioimg.destroy();
			this.radioimg = null;
		}
	};

	_pRadioItemCtrl.on_change_containerRect = function (width, height) {
		this.on_apply_style_buttonalign(this.currentstyle.buttonalign);
		this.on_apply_style_buttonimage(this.currentstyle.buttonimage);
		this.on_apply_style_buttonborder(this.currentstyle.buttonborder);
		this.on_apply_style_buttonbackground(this.currentstyle.buttonbackground);
		this.on_apply_style_textpadding(this.currentstyle.textpadding);



		var text_elem = this._text_elem;
		var align = this.on_find_CurrentStyle_align(this._pseudo);
		if (this._text_elem) {
			width = width - this.radioimg.width;
			text_elem.setElementSize(width, height);
			this.on_apply_style_align(align);
		}
	};

	_pRadioItemCtrl.set_value = function (v) {
		if (v != this.value) {
			this.value = v;
			this.on_apply_value();
		}
	};

	_pRadioItemCtrl.on_apply_value = function () {
		if (this.radioimg) {
			var select = this._isSelected();
			var pseudo = this._pseudo;
			if (this._pushed) {
				pseudo = "pushed";
			}

			var image = "";
			if (this.parent.enable) {
				if (pseudo == "disabled") {
					pseudo = "normal";
				}
				image = this.on_find_CurrentStyle_buttonimage(pseudo);
			}
			else {
				image = this.on_find_CurrentStyle_buttonimage("disabled");
			}

			if (select == true && image) {
				this.radioimg.set_image(image);
				this.radioimg.set_imagealign("center middle");

				if (this._pushed) {
					this._stat_change("", "pushed");
				}
				else {
					this._stat_change("", "selected");
				}
			}
			else {
				this.radioimg.set_image("");
				this._setAccessibilityStatSelected(false);
			}
		}
	};

	_pRadioItemCtrl.set_index = function (v) {
		this.index = v;
	};

	_pRadioItemCtrl.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pRadioItemCtrl.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}
	};

	_pRadioItemCtrl.set_text = function (v) {
		this.text = v + "";
		this.on_apply_text();
	};

	_pRadioItemCtrl.on_apply_text = function () {
		if (this._text_elem) {
			this._text_elem.setElementText(this.text + "");
		}
	};

	_pRadioItemCtrl.set_code = function (v) {
		this.code = v;
	};

	_pRadioItemCtrl._on_getAccessibilityAdditionalLabel = function () {
		var radio = this.parent;
		if (this._isAccessibilityEnable() && radio && (!radio._is_first_focus || radio._is_tab_focus)) {
			if (this.index > -1) {
				return (this.index + 1) + " " + radio._items.length;
			}
		}
		return "";
	};

	_pRadioItemCtrl._getFormChildById = function (id) {
		return this.parent._getFormChildById(id);
	};

	_pRadioItemCtrl._getAccessibilityLabel = function (accessibility) {
		var label = "";
		var radio = this.parent;
		if (radio && radio._is_first_focus) {
			var p_accessibility = radio.on_find_CurrentStyle_accessibility(radio._pseudo);
			label = radio._getAccessibilityParentValue(p_accessibility);
		}
		label += " " + nexacro.Component.prototype._getAccessibilityLabel.call(this, accessibility);
		return label;
	};

	_pRadioItemCtrl._setAccessibilityNotifyEvent = function (direction) {
		var control_element = this.getElement();

		if (control_element && control_element.accessibility_enable) {
			control_element.setElementAccessibilityNotifyEvent();
			var form = this._getForm();
			if (form) {
				var _window = form._getWindow();
				_window._accessibility_last_focused_comp = this._getRootComponent(this);
			}
			return true;
		}
		return false;
	};

	_pRadioItemCtrl.on_lbuttondown_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		refer_comp = this;
		return nexacro.Component.prototype.on_lbuttondown_basic_action.call(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope);
	};

	_pRadioItemCtrl._setAccessibilityStatSelected = function (selected) {
		if (this._control_element) {
			this._control_element.setElementAccessibilityStatChecked(selected);
		}
	};


	_pRadioItemCtrl._isSelected = function () {
		return this.value;
	};

	_pRadioItemCtrl._getItemRealSize = function () {
		var buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo);
		var buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		var textpadding = this.on_find_CurrentStyle_textpadding(this._pseudo);
		var itempadding = this.on_find_CurrentStyle_padding(this._pseudo);
		var itemborder = this.on_find_CurrentStyle_border(this._pseudo);
		var width, height;

		var tl = 0, tt = 0, tr = 0, tb = 0;
		var ipl = 0, ipt = 0, ipr = 0, ipb = 0;
		var ibl = 0, ibt = 0, ibr = 0, ibb = 0;
		var btnsize = 20;

		if (buttonsize) {
			btnsize = parseInt(buttonsize._value) | 0;
		}
		if (textpadding) {
			if (textpadding.left) {
				tl = textpadding.left;
			}
			if (textpadding.right) {
				tr = textpadding.right;
			}
			if (textpadding.top) {
				tt = textpadding.top;
			}
			if (textpadding.bottom) {
				tb = textpadding.bottom;
			}
		}

		if (itempadding) {
			if (itempadding.left) {
				ipl = itempadding.left;
			}
			if (itempadding.top) {
				ipt = itempadding.top;
			}
			if (itempadding.right) {
				ipr = itempadding.right;
			}
			if (itempadding.bottom) {
				ipb = itempadding.bottom;
			}
		}

		if (itemborder) {
			ibl = itemborder._left_width;
			ibr = itemborder._right_width;
			ibt = itemborder._top_width;
			ibb = itemborder._bottom_width;
		}


		var text_size = 0;
		if (this._text_elem) {
			var font = this.on_find_CurrentStyle_font(this._pseudo);
			var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
			text_size = nexacro._getTextSize2(letterspace, this._text_elem.text, font, null, null, null, this._rtldirection);
		}

		width = btnsize + tl + tr + text_size[0] + ipl + ipr + ibl + ibr;
		height = btnsize + tt + tb + text_size[1] + ipt + ipb + ibt + ibb;

		return {
			width : Math.ceil(width), 
			height : Math.ceil(height)
		};
	};

	_pRadioItemCtrl.setTextOverflow = function (is_default) {
		var text_elem = this._text_elem;
		if (text_elem) {
			this._is_overflow = !is_default;
			if (is_default) {
				text_elem.setElementWordWrap("char");
			}
			else {
				text_elem.setElementTextOverFlow();
			}
		}
	};

	_pRadioItemCtrl._setRtlDirection = function (v) {
		var rtldirection = this.rtldirection;
		var _rtldirection = this._rtldirection;

		if (v == "inherit") {
			var _parent_rtldirection = this.parent._rtldirection;
			if (_rtldirection != _parent_rtldirection) {
				_rtldirection = _parent_rtldirection;
			}
		}
		else if (_rtldirection != v) {
			if (rtldirection == v) {
				_rtldirection = v;
			}
			else if (!rtldirection || rtldirection == "inherit") {
				_rtldirection = v;
			}
		}

		if (_rtldirection != this._rtldirection) {
			this._rtldirection = _rtldirection;
			this.on_apply_prop_rtldirection();
		}
	};

	delete _pRadioItemCtrl;

	nexacro.ImageRadioCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageViewerCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._is_reference_control = false;
		this._apply_pushed_pseudo = true;
	};
	var _pImageRadioCtrl = nexacro._createPrototype(nexacro.ImageViewerCtrl, nexacro.ImageRadioCtrl);
	nexacro.ImageRadioCtrl.prototype = _pImageRadioCtrl;


	_pImageRadioCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbackground(pseudo);
	};

	_pImageRadioCtrl.on_find_CurrentStyle_buttonbackgroundimagemode = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonbackgroundimagemode(pseudo);
	};

	_pImageRadioCtrl.on_find_CurrentStyle_image = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonimage(pseudo);
	};

	_pImageRadioCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonborder(pseudo);
	};

	_pImageRadioCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttongradation(pseudo);
	};

	_pImageRadioCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pImageRadioCtrl.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (!this.parent.enable) {
			return false;
		}
		this.parent.on_fire_onclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
	};

	_pImageRadioCtrl._isSelected = function () {
		return this.parent._isSelected();
	};

	delete _pImageRadioCtrl;
}
;
//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.ListBox) {
	nexacro.ListBoxClickEventInfo = function (obj, id, index, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		nexacro.ClickEventInfo.call(this, obj, id || "onlistboxclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.index = index;
	};
	var _pListBoxClickEventInfo = nexacro._createPrototype(nexacro.ClickEventInfo, nexacro.ListBoxClickEventInfo);
	nexacro.ListBoxClickEventInfo.prototype = _pListBoxClickEventInfo;

	_pListBoxClickEventInfo._type_name = "ListBoxClickEventInfo";

	delete _pListBoxClickEventInfo;
	_pListBoxClickEventInfo = null;

	nexacro.ListBox_Style = function (target) {
		nexacro.Style.call(this);

		if (target) {
			this._target = target;
		}
		this.itemheight = null;
		this.itembackground = null;
		this.itemgradation = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itempadding = null;
		this.itemaccessibility = null;
	};

	var _pListBoxStyle = nexacro._createPrototype(nexacro.Style, nexacro.ListBox_Style);
	nexacro.ListBox_Style.prototype = _pListBoxStyle;

	eval(nexacro._createValueAttributeEvalStr("_pListBoxStyle", "itemheight"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pListBoxStyle", "itembackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pListBoxStyle", "itemgradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pListBoxStyle", "itemborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pListBoxStyle", "itembordertype"));
	eval(nexacro._createPaddingAttributeEvalStr("_pListBoxStyle", "itempadding"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pListBoxStyle", "itemaccessibility"));

	_pListBoxStyle.__custom_emptyObject = function () {
		this.itemheight = null;
		this.itembackground = null;
		this.itemgradation = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itempadding = null;
		this.itemaccessibility = null;
	};

	_pListBoxStyle.__get_custom_style_value = function () {
		var val = "";
		var style = this.itemheight;
		if (style && style._is_empty) {
			val += "itemheight:" + style._value + "; ";
		}

		style = this.itembackground;
		if (style && style._is_empty) {
			val += "itembackground:" + style._value + "; ";
		}

		style = this.itemgradation;
		if (style && style._is_empty) {
			val += "itemgradation:" + style._value + "; ";
		}

		style = this.itemborder;
		if (style && style._is_empty) {
			val += "itemborder:" + style._value + "; ";
		}

		style = this.itembordertype;
		if (style && style._is_empty) {
			val += "itembordertype:" + style._value + "; ";
		}

		style = this.itempadding;
		if (style && style._is_empty) {
			val += "itempadding:" + style._value + "; ";
		}

		style = this.itemaccessibility;
		if (style && style._is_empty) {
			val += "itemaccessibility:" + style._value + "; ";
		}

		style = null;

		return val;
	};

	nexacro.ListBox_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.itemheight = null;
		this.itembackground = null;
		this.itemgradation = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itempadding = null;
		this.itemaccessibility = null;
	};

	var _pListBoxCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.ListBox_CurrentStyle);
	nexacro.ListBox_CurrentStyle.prototype = _pListBoxCurrentStyle;

	_pListBoxCurrentStyle.__custom_emptyObject = _pListBoxStyle.__custom_emptyObject;
	_pListBoxCurrentStyle.__get_custom_style_value = _pListBoxStyle.__get_custom_style_value;

	delete _pListBoxStyle;
	_pListBoxStyle = null;
	delete _pListBoxCurrentStyle;
	_pListBoxCurrentStyle = null;

	nexacro.ListBox = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._selectinfo = {
			index : -1, 
			text : "", 
			value : undefined, 
			obj : null
		};

		this.scrollbars = "autoboth";
		this.isAboveSelected = false;
		this.codecolumn = "";
		this.datacolumn = "";
		this.multiselect = false;
		this.innerdataset = null;
		this.readonly = false;
		this.index = -1;
		this.text = "";
		this.value = undefined;
		this.dragscrolltype = "all";
		this.selectscrollmode = "default";

		this._scrollbars = 3;
		this._is_scrollable = true;
		this._temp_elem = null;
		this._innerdataset = null;
		this._codecolumn = null;
		this._datacolumn = null;
		this._total_page_rowcnt = 0;
		this._total_page_cnt = 0;
		this._contents_maxwidth = null;
		this._contents_maxheight = null;
		this._page_rowcount = 0;
		this._page_rowcount_min = 0;
		this._shiftKey = false;
		this._ctrlKey = false;
		this._altKey = false;
		this._metaKey = false;
		this._vscrollpos = 0;
		this._prevpos = 0;
		this._refresh_rows = [];
		this._vscrollTask = null;
		this._userDsChange = true;
		this._exprcache = {
		};
		this._overeditemindex = -1;
		this._lbtnDownIdx = -1;
		this._cur_end = -1;
		this._is_redraw = false;
		this._want_tab = true;
		this._want_arrow = false;
		this._accessibility_index = -1;
		this._accessibility_role = "listbox";
		this._shift_select_base_index = null;
		this._is_first_focus = false;
		this._scroll_vpos_queue = [];
		this._apply_ds_val = false;
		this._is_redrawing = false;


		this._select_multi = {
			"items" : [], 
			"map" : {
			}, 
			"keys" : [], 
			"length" : 0, 
			"lastselected" : null
		};
		this._selectinfo_list = [];

		this._keep_scrolling = false;

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onitemclick" : 1, 
			"onitemdblclick" : 1, 
			"canitemchange" : 1, 
			"onitemchanged" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"ondbltap" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"onitemmouseenter" : 1, 
			"onvscroll" : 1, 
			"onhscroll" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1
		};

		this._setEventHandler("onkeydown", this.on_notify_listbox_onkeydown, this);
	};

	var _pListBox = nexacro._createPrototype(nexacro.Component, nexacro.ListBox);
	nexacro.ListBox.prototype = _pListBox;

	_pListBox._type_name = "ListBox";
	_pListBox._default_align = nexacro.Component._default_left_align;
	_pListBox._default_Item_height = 24;


	_pListBox._setVScrollDefaultAction = function (vscrollbar, wheelDelta) {
		if (wheelDelta >= 0) {
			wheelDelta = this.currentstyle.itemheight;
		}
		else {
			wheelDelta = -(this.currentstyle.itemheight);
		}
		vscrollbar.set_pos(vscrollbar.pos - wheelDelta);
	};

	_pListBox.on_apply_custom_class = function () {
		var items = this._get_contents_rows();
		if (items) {
			var rowcount = items.length;
			for (var i = 0; i < rowcount; i++) {
				items[i].on_apply_prop_class();
			}
			items = null;
		}
	};

	_pListBox.on_create_custom_style = function () {
		return new nexacro.ListBox_Style(this);
	};

	_pListBox.on_create_custom_currentStyle = function () {
		return new nexacro.ListBox_CurrentStyle();
	};

	_pListBox.on_apply_custom_pseudo = function (pseudo) {
		if (pseudo) {
			this._pseudo = pseudo;
		}
		else if (this._pseudo) {
			pseudo = this._pseudo;
		}

		var curstyle = this.currentstyle;

		var style = this.on_find_CurrentStyle_itemheight(pseudo);
		if (style != curstyle.itemheight) {
			curstyle.itemheight = style;
			this.on_apply_style_itemheight(style);
		}

		style = this.on_find_CurrentStyle_itembackground(pseudo);
		if (style != curstyle.itembackground) {
			curstyle.itembackground = style;
			this.on_apply_style_itembackground(style);
		}

		style = this.on_find_CurrentStyle_itemgradation(pseudo);
		if (style != curstyle.itemgradation) {
			curstyle.itemgradation = style;
			this.on_apply_style_itemgradation(style);
		}

		style = this.on_find_CurrentStyle_itemborder(pseudo);
		if (style != curstyle.itemborder) {
			curstyle.itemborder = style;
			this.on_apply_style_itemborder(style);
		}

		style = this.on_find_CurrentStyle_itembordertype(pseudo);
		if (style != curstyle.itembordertype) {
			curstyle.itembordertype = style;
			this.on_apply_style_itembordertype(style);
		}

		style = this.on_find_CurrentStyle_itempadding(pseudo);
		if (style != curstyle.itempadding) {
			curstyle.itempadding = style;
			this.on_apply_style_itempadding(style);
		}

		style = this.on_find_CurrentStyle_font(pseudo);
		if (style != curstyle.font) {
			curstyle.font = style;
			this.on_apply_style_font(style);
		}

		style = this.on_find_CurrentStyle_letterspace(pseudo);
		if (style != curstyle.letterspace) {
			curstyle.letterspace = style;
			this.on_apply_style_letterspace(style);
		}

		style = this.on_find_CurrentStyle_color(pseudo);
		if (style != curstyle.color) {
			curstyle.color = style;
			this.on_apply_style_color(style);
		}

		style = this.on_find_CurrentStyle_align(pseudo);
		if (style != curstyle.align) {
			curstyle.align = style;
			this.on_apply_style_align(style);
		}

		style = this.on_find_CurrentStyle_itemaccessibility(pseudo);
		if (style != curstyle.itemaccessibility) {
			curstyle.itemaccessibility = style;
			this.on_apply_style_itemaccessibility(style);
		}

		style = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (style != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = style;
			this.on_apply_style_rtlimagemirroring(style);
		}

		style = null;
	};

	_pListBox.on_apply_style_color = function (v) {
		var items = this._get_contents_rows();
		if (items) {
			var rowcount = items.length;
			for (var i = 0; i < rowcount; i++) {
				items[i].style.set_color(v._value);
			}
			items = null;
		}
	};

	_pListBox.on_apply_style_font = function (v) {
		var items = this._get_contents_rows();
		if (items) {
			var rowcount = items.length;
			for (var i = 0; i < rowcount; i++) {
				if (v) {
					v = this._search_style_obj(v, "font", i);
					items[i].style.set_font(v._value);
				}
			}
			items = null;
		}
	};

	_pListBox.on_apply_style_align = function (v) {
		var items = this._get_contents_rows();
		if (items) {
			var rowcount = items.length;
			for (var i = 0; i < rowcount; i++) {
				items[i].style.set_align(v._value);
			}
			items = null;
		}
	};

	_pListBox.on_apply_style_cursor = function (v) {
		nexacro.Component.prototype.on_apply_style_cursor.call(this, v);

		var items = this._get_contents_rows();
		if (items) {
			var rowcount = items.length;
			for (var i = 0; i < rowcount; i++) {
				items[i].style.set_cursor(v._value);
			}
			items = null;
		}
	};

	_pListBox.on_apply_style_itembackground = function (v) {
		var items = this._get_contents_rows();
		var rowcount = items.length;
		var ibackground = v;

		for (var i = 0; i < rowcount; i++) {
			ibackground = this._search_style_obj(v, "background", i);
			if (ibackground) {
				items[i].style.set_background(ibackground._value);
			}
		}
	};

	_pListBox.on_apply_style_itemheight = function (v) {
		var vscrollbar = this.vscrollbar;
		if (vscrollbar) {
			vscrollbar._setScrollLayout(vscrollbar.min, vscrollbar.max, vscrollbar.page, this._get_rowheight(), vscrollbar.pos);
		}

		if (this._is_redraw == false) {
			this._recreate_data(true);
			this._is_redraw = true;
		}
	};

	_pListBox.on_apply_style_itemaccessibility = function (v) {
		var items = this._get_contents_rows();
		var rowcount = items.length;

		for (var i = 0; i < rowcount; i++) {
			items[i].on_update_style_accessibility();
		}
		items = null;
	};

	_pListBox.on_apply_style_itemgradation = function (v) {
		if (v == null) {
			return false;
		}
		this.on_apply_style_itembackground(this.currentstyle.itembackground);

		var items = this._get_contents_rows();
		var rowcount = items.length;
		var igradation = v;

		for (var i = 0; i < rowcount; i++) {
			igradation = this._search_style_obj(v, "gradation", i);
			if (igradation) {
				items[i].style.set_gradation(igradation._value);
			}
		}
		items = null;
	};

	_pListBox.on_apply_style_itemborder = function (v) {
		var items = this._get_contents_rows();
		var rowcount = items.length;
		var iborder = v;

		for (var i = 0; i < rowcount; i++) {
			iborder = this._search_style_obj(v, "border", i);
			if (iborder) {
				items[i].style.set_border(iborder._value);
			}
		}
		items = null;
	};

	_pListBox.on_apply_style_itembordertype = function (v) {
		var items = this._get_contents_rows();
		var rowcount = items.length;
		var ibordertype = v;

		for (var i = 0; i < rowcount; i++) {
			ibordertype = this._search_style_obj(v, "bordertype", i);

			if (ibordertype) {
				items[i].on_apply_style_bordertype(ibordertype);
			}
		}
		items = null;
	};

	_pListBox.on_apply_style_itempadding = function (v) {
		var items = this._get_contents_rows();
		var rowcount = items.length;
		var ipadding = v;

		for (var i = 0; i < rowcount; i++) {
			ipadding = this._search_style_obj(v, "padding", i);
			if (ipadding) {
				items[i].style.set_padding(ipadding._value);
			}
		}
		items = null;
	};

	_pListBox.on_apply_style_letterspace = function (v) {
		var items = this._get_contents_rows();
		if (items) {
			var rowcount = items.length;
			for (var i = 0; i < rowcount; i++) {
				if (v) {
					v = this._search_style_obj(v, "letterspace", i);
					items[i].on_apply_style_letterspace(v);
				}
			}
			items = null;
		}
	};

	_pListBox.on_apply_style_rtlimagemirroring = function (v) {
		return;
	};

	_pListBox.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		var items = this._get_contents_rows();
		var rowcount = items.length;
		var _rtldirection = this._rtldirection;
		for (var i = 0, n = rowcount.length; i < n; i++) {
			items[i]._setRtlDirection(_rtldirection);
		}

		if (this._is_redraw == false) {
			this._recreate_data(true);
			this._is_redraw = true;
		}
	};

	_pListBox.on_find_CurrentStyle_itemheight = function (pseudo) {
		var style = this._find_pseudo_obj("itemheight", pseudo);

		if (!style) {
			style = nexacro._getCachedStyleObj("itemheight", nexacro._default_Item_height);
		}
		else {
			var value = style._value;
			if (value < 0 || value === null || value === "" || value === undefined) {
				var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
				var size = nexacro._getTextSize2(letterspace, "1", this.currentstyle.font);
				style = nexacro._getCachedStyleObj("itemheight", size[1]);
			}
		}

		return style;
	};

	_pListBox.on_find_CurrentStyle_border = function (pseudo) {
		return this._find_pseudo_obj("border", pseudo, "border");
	};

	_pListBox.on_find_CurrentStyle_padding = function (pseudo) {
		return this._find_pseudo_obj("padding", pseudo, "padding");
	};

	_pListBox.on_find_CurrentStyle_itembackground = function (pseudo) {
		return this._find_pseudo_obj("itembackground", pseudo, "background");
	};

	_pListBox.on_find_CurrentStyle_itemgradation = function (pseudo) {
		return this._find_pseudo_obj("itemgradation", pseudo, "gradation");
	};

	_pListBox.on_find_CurrentStyle_itemborder = function (pseudo) {
		return this._find_pseudo_obj("itemborder", pseudo, "border");
	};

	_pListBox.on_find_CurrentStyle_itembordertype = function (pseudo) {
		return this._find_pseudo_obj("itembordertype", pseudo, "bordertype");
	};

	_pListBox.on_find_CurrentStyle_itempadding = function (pseudo) {
		return this._find_pseudo_obj("itempadding", pseudo, "padding");
	};

	_pListBox.on_find_CurrentStyle_itemaccessibility = function (pseudo) {
		return this._find_pseudo_obj("itemaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pListBox.on_update_style_itemheight = function () {
		this._is_redraw = false;
		this.on_apply_style_itemheight(this.currentstyle.itemheight = this.on_find_CurrentStyle_itemheight(this._pseudo));
	};

	_pListBox.on_update_style_itembackground = function () {
		this.on_apply_style_itembackground(this.currentstyle.itembackground = this.on_find_CurrentStyle_itembackground(this._pseudo));
	};

	_pListBox.on_update_style_itemgradation = function () {
		this.on_apply_style_itemgradation(this.currentstyle.itemgradation = this.on_find_CurrentStyle_itemgradation(this._pseudo));
	};

	_pListBox.on_update_style_itemborder = function () {
		this.on_apply_style_itemborder(this.currentstyle.itemborder = this.on_find_CurrentStyle_itemborder(this._pseudo));
	};

	_pListBox.on_update_style_itembordertype = function () {
		this.on_apply_style_itembordertype(this.currentstyle.itembordertype = this.on_find_CurrentStyle_itembordertype(this._pseudo));
	};

	_pListBox.on_update_style_itempadding = function () {
		this.on_apply_style_itempadding(this.currentstyle.itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo));
	};

	_pListBox.on_update_style_itemaccessibility = function () {
		this.on_apply_style_itemaccessibility(this.currentstyle.itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo));
	};

	_pListBox.on_create_contents = function () {
		var control = this.getElement();
		control.setElementSize(this._client_width, this._client_height);

		this._temp_elem = new nexacro.Element(control._client_element);
		this._temp_elem.setElementSize(1, 1);
		this._temp_elem.setElementVisible(false);
	};

	_pListBox.on_created_contents = function () {
		this._temp_elem.create();

		if (this.getElement()) {
			this.on_apply_innerdataset();
		}

		var rowobjs = this._refresh_rows, rowobj;

		for (var i = 0, n = rowobjs.length; i < n; i++) {
			rowobj = rowobjs[i];
			if (rowobj) {
				rowobj.on_created(this._window);
				rowobj._real_visible = false;
			}
		}

		this.on_apply_style_itemheight(this.currentstyle.itemheight);
		this.on_apply_style_letterspace(this.currentstyle.letterspace);

		this._refresh_rows = [];

		if (nexacro._enableaccessibility) {
			this._want_arrow = true;
			this._refreshAccessibilityValue();
		}

		{

			this._recreate_data();
			this._is_redraw = true;
		}

		this._selectinfo.obj = null;
		this._selectinfo.index = this.index;
		this._selectinfo.text = this.text;
		this._selectinfo.value = this.value;

		this.on_apply_prop_rtldirection();
	};

	_pListBox.on_destroy_contents = function () {
		this._clear_contents();

		if (this._vscrollTask) {
			this._vscrollTask.destroy();
			this._vscrollTask = null;
		}

		if (this._temp_elem) {
			this._temp_elem.destroy();
			this._temp_elem = null;
		}

		if (this._innerdataset) {
			this._innerdataset._removeEventHandler("onload", this._callback_onload, this);
			this._innerdataset._removeEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
			this._innerdataset._removeEventHandler("onrowsetchanged", this._callback_onrowsetchanged, this);

			this._innerdataset = null;
			this.innerdataset = null;
		}

		this._removeEventHandler("onkeydown", this.on_notify_listbox_onkeydown, this);

		this._selectinfo = null;
		this._select_multi = null;
		this._refresh_rows.length = 0;
		this._exprcache = null;
		this._selectinfo_list.length = 0;
		this._scroll_vpos_queue = null;
	};

	_pListBox.on_change_containerRect = function (width, height) {
		if (this._is_created) {
			this._recreate_data(true);
		}
	};

	_pListBox._callback_onload = function (obj, e) {
		this._exprcache = {
		};
		switch (e.reason) {
			case 0:
				this._recreate_data();
				this._is_redraw = true;

				if (this.index > -1) {
					if (this._changeIndex(this.index)) {
						this.on_apply_index();
					}
				}
				else if (this.value != "") {
					var row = this._innerdataset.findRow(this.codecolumn, this.value);
					if (this._changeIndex(row)) {
						this.on_apply_index();
					}
				}
				break;
		}
	};

	_pListBox._callback_onvaluechanged = function (obj, e) {
		if (this._is_created && this._userDsChange) {
			this._recreate_data();
			this._is_redraw = true;
		}
	};

	_pListBox._callback_onrowsetchanged = function (obj, e) {
		if (this._is_created && this._userDsChange) {
			this._recreate_data();
			this._is_redraw = true;
		}
	};

	_pListBox.on_init_bindSource = function (columnid, propid, ds) {
		if (this._is_redraw == false) {
			this._recreate_data();
			this._is_redraw = true;
		}
		if (propid == "value") {
			this.set_value(undefined);
			return true;
		}
		return false;
	};

	_pListBox.on_change_bindSource = function (propid, pSendDataset, rowIdx, colIdx, colArrayIdx) {
		var rtn;

		if (this._is_redraw == false) {
			this._recreate_data();
			this._is_redraw = true;
		}
		if (propid == "value") {
			rtn = pSendDataset.getColumn(rowIdx, colIdx);
			this._apply_ds_val = true;
			this.set_value(rtn);
			this._apply_ds_val = false;
			return true;
		}
		return false;
	};

	_pListBox.on_getBindableProperties = function () {
		return "value";
	};

	_pListBox.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);

		var enable = v;
		if (v == undefined) {
			enable = this.enable;
		}

		var items = this._get_contents_rows();
		if (items && items.length > 0) {
			var size = items.length;
			for (var i = 0; i < size; i++) {
				items[i]._setEnable(enable);
			}
			items = null;
		}
	};

	_pListBox._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_tab, _want_arrow;
		if (keycode && (keycode == nexacro.Event.KEY_TAB)) {
			want_tab = false;
		}
		else {
			_want_arrow = this._getPreCalculateWantArrow(keycode);
		}

		if (this._is_first_focus) {
			this._is_first_focus = false;
		}

		this._want_arrow = _want_arrow;
		this._want_tab = true;

		if (ctrlKey) {
			if (keycode == nexacro.Event.KEY_LEFT) {
				var hscrollbar = this.hscrollbar;
				if (hscrollbar) {
					_want_arrow = hscrollbar.pos > hscrollbar.min ? true : false;
				}
				else {
					_want_arrow = false;
				}
			}
			else if (keycode == nexacro.Event.KEY_UP) {
				var vscrollbar = this.vscrollbar;
				if (vscrollbar) {
					_want_arrow = vscrollbar.pos > vscrollbar.min ? true : false;
				}
				else {
					_want_arrow = false;
				}
			}
			else if (keycode == nexacro.Event.KEY_RIGHT) {
				var hscrollbar = this.hscrollbar;
				if (hscrollbar) {
					_want_arrow = hscrollbar.pos < hscrollbar.max ? true : false;
				}
				else {
					_want_arrow = false;
				}
			}
			else if (keycode == nexacro.Event.KEY_DOWN) {
				var vscrollbar = this.vscrollbar;
				if (vscrollbar) {
					_want_arrow = vscrollbar.pos < vscrollbar.max ? true : false;
				}
				else {
					_want_arrow = false;
				}
			}
		}

		return {
			want_tab : want_tab, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : _want_arrow
		};
	};

	_pListBox._setFocus = function (bResetScroll, dir, bInner) {
		this._focus_direction = dir;
		var retn = this.setFocus(bResetScroll, bInner);
		this._focus_direction = -1;
		return retn;
	};

	_pListBox._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		var retn = false;
		var focusdir = this._focus_direction;
		if (evt_name == "tabkey") {
			focusdir = 0;
		}
		else if (evt_name == "shifttabkey") {
			focusdir = 1;
		}
		else if (evt_name == "downkey") {
			focusdir = 2;
		}
		else if (evt_name == "upkey") {
			focusdir = 3;
		}

		if (self_flag == false) {
			this._focus_direction = -1;
		}

		if (focusdir >= 0) {
			retn = nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
			if (self_flag == false) {
				this._accessibility_index = -1;
				if (this._last_focused) {
					this._do_defocus(this._last_focused, false);
				}
				if (focusdir < 2) {
					var items = this._get_contents_rows();
					if (items.length > 0) {
						var comp;
						if (this.index > -1) {
							this._accessibility_index = this.index;
						}
						else {
							if (focusdir == 0) {
								this._accessibility_index = 0;
							}
							else {
								this._accessibility_index = items.length - 1;
							}
						}
						this._is_first_focus = true;
						comp = items[this._accessibility_index];
						if (!comp) {
							return;
						}
						comp._on_focus(true);
						this._shift_select_base_index = this._accessibility_index;
						comp = null;
					}
					items = null;
				}
				else if (focusdir == 2) {
					if (!this._isAccessibilityEnable()) {
						var comp;
						var items = this._get_contents_rows();
						this._is_first_focus = true;
						if (this.index > -1) {
							comp = items[this._accessibility_index = this.index];
							if (!comp) {
								return;
							}
							comp._on_focus(true);
							comp.set_selected(true);
							this._shift_select_base_index = this.index;
						}
						else if (items.length > 0) {
							if (this.multiselect) {
								this._do_select(this._getNextAccessibilityOrderIndex(1));
							}
							else if (this._changeIndex(this._getNextAccessibilityOrderIndex(1))) {
								this.on_apply_index();
							}
						}
						items = null;
						comp = null;
					}
				}
				else if (focusdir == 3) {
					this._is_first_focus = true;
					var items = this._get_contents_rows();
					var comp;
					if (this.index == -1) {
						if (items.length > 0) {
							if (this.multiselect) {
								if (this.index > -1) {
									this._accessibility_index = this.index;
								}
								else {
									this._accessibility_index = items.length;
								}
								var idx = this._getNextAccessibilityOrderIndex(-1);
								this._do_select(idx);
							}
							else {
								if (this.index > -1) {
									this._accessibility_index = this.index;
								}
								else {
									this._accessibility_index = items.length;
								}
								var idx = this._getNextAccessibilityOrderIndex(-1);
								comp = items[idx];

								if (this._changeIndex(idx)) {
									this.on_apply_index();
								}
							}
						}
					}
					else {
						comp = items[this._accessibility_index = this.index];
						if (nexacro._enableaccessibility && this.multiselect) {
							this._do_select(this._accessibility_index);
						}
						else {
							comp.set_selected(true);
						}
					}
					items = null;
					comp = null;
				}
			}
		}
		else {
			retn = nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
			if (this._last_focused) {
				this._do_defocus(this._last_focused, false);
			}
			else if (this._select_multi.lastselected === undefined && this._accessibility_index > -1) {
				var items = this._get_contents_rows();
				items[this._accessibility_index]._stat_change("notfocus", "normal");
			}
		}

		return retn;
	};

	_pListBox.on_apply_custom_setfocus = function (evt_name) {
		if (nexacro.Browser != "Safari" || (nexacro.Browser == "Safari" && window && window == window.parent)) {
			nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
			return;
		}

		var control_elem = this._control_element;
		if (control_elem) {
			var selffocus = ((evt_name == "lbutton") ? false : nexacro._enableaccessibility);
			if (!(nexacro.Browser == "Safari" && evt_name == "lbuttondown")) {
				control_elem.setElementFocus(selffocus);
			}
		}
	};

	_pListBox.on_get_style_accessibility_label = function () {
		var label = "";
		if (!this._is_first_focus) {
			label = this.text ? this.text : this.value;
		}

		return label;
	};

	_pListBox._setAccessibilityNotifyEvent = function (direction) {
		var items = this._get_contents_rows();

		if (items && items.length > 0) {
			var obj = null;

			if (this._overeditemindex < 0 || this._overeditemindex >= items.length) {
				if (direction == undefined) {
					direction = 1;
				}

				if (direction > 0) {
					this._overeditemindex = 0;
				}
				else {
					this._overeditemindex = items.length - 1;
				}
			}

			obj = this._getItemByRealIdx(items, this._overeditemindex).obj;

			if (obj) {
				return obj._setAccessibilityNotifyEvent();
			}
		}
		else {
			return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
		}
	};

	_pListBox._setAccessibilityInfoByHover = function (control) {
		if (control) {
			this._overeditemindex = control.index;
			return control._setAccessibilityInfoByHover();
		}
		else {
			return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this);
		}
	};

	_pListBox._clearAccessibilityInfoByHover = function () {
		this._overeditemindex = -1;
		return;
	};

	_pListBox._getAccessibilityRole = function (accessibility) {
		var role = nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
		if (nexacro._accessibilitytype == 4) {
			var control_elem = this.getElement();
			var items = this._get_contents_rows();

			if (control_elem && items.length <= 0) {
				role = "static";
			}
		}
		return role;
	};

	_pListBox.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset || (typeof obj == "object" && obj._type_name == "Dataset")) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this._keep_scrolling = (this.innerdataset != obj.id) ? false : true;
			this.on_apply_innerdataset();
		}

		this._onResetScrollBar();
	};

	_pListBox._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pListBox.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pListBox.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}

		this._onResetScrollBar();
	};

	_pListBox.on_apply_innerdataset = function () {
		var dataset = this._innerdataset;
		if (dataset) {
			if (this.datacolumn || this.codecolumn) {
				if (!this.datacolumn) {
					this._datacolumn = this.codecolumn;
				}
				if (!this.codecolumn) {
					this._codecolumn = this.datacolumn;
				}

				dataset._setEventHandler("onload", this._callback_onload, this);
				dataset._setEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
				dataset._setEventHandler("onrowsetchanged", this._callback_onrowsetchanged, this);

				this._recreate_data(this._keep_scrolling);
				this._is_redraw = true;
			}
		}
	};

	_pListBox.set_visible = function (v) {
		var vscroll = this.vscrollbar;
		var need_refreshDom = (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && v && this.visible != v && vscroll;

		nexacro.Component.prototype.set_visible.call(this, v);

		if (need_refreshDom) {
			var vscrollPos = vscroll.pos;
			vscroll.set_pos(vscrollPos - 1);
			vscroll.set_pos(vscrollPos);
		}
	};

	_pListBox.set_codecolumn = function (v) {
		if (v && v != this.codecolumn) {
			this.codecolumn = v;
			this.on_apply_innerdataset();
		}
	};

	_pListBox.set_datacolumn = function (v) {
		if (v && v != this.datacolumn) {
			this.datacolumn = v;
			this.on_apply_innerdataset();
		}
	};

	_pListBox.set_multiselect = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.multiselect) {
			this.multiselect = v;
			this.on_apply_multiselect();
		}
	};

	_pListBox.on_apply_multiselect = function () {
		var pre_idx = -1;
		if (!this.multiselect) {
			this._select_clear();
		}
		this._shiftKey = false;
		this._ctrlKey = false;

		if (!this.multiselect) {
			pre_idx = this.index;
			this._do_select(pre_idx);
		}
	};

	_pListBox.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
			this._setAccessibilityFlagReadOnly(v);
		}
	};

	_pListBox.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}
	};

	_pListBox.set_text = function (v) {
	};

	_pListBox.set_index = function (v, bIgnoreCompareIdx) {
		var dataset = this._innerdataset;
		var v = parseInt(v, 10) | 0;

		if (this._is_created) {
			if (!dataset || v < 0 || v > dataset.getRowCount() - 1) {
				v = -1;
			}
		}
		if (this._changeIndex(v, bIgnoreCompareIdx, true)) {
			this.on_apply_index();
		}
		else {
			this._on_last_selectfocuschanged(this.index, true);
		}
	};

	_pListBox.on_apply_index = function () {
		if (!this.multiselect) {
			var index = this.index;
			var items = this._get_contents_rows();
			var length = items.length;
			if (items && index == -1) {
				for (var i = 0; i < length; i++) {
					var item = items[i];
					item.set_selected(false);

					if (nexacro._enableaccessibility) {
						item._setAccessibilityInfoIndex(i + 1);
						item._setAccessibilityInfoCount(length);
					}
				}
				items = null;
			}

			var control_elem = this.getElement();
			if (control_elem && index > -1) {
				this._do_select(index);
			}
		}
	};

	_pListBox.set_value = function (v) {
		if (v !== this.value) {
			this.value = v;
		}
		var dataset = this._innerdataset;
		if (dataset) {
			var row = -1;
			if (this.value !== undefined) {
				row = dataset.findRow(this.codecolumn, this.value);
			}
			if (this.index != row) {
				this._is_value_setting = true;
				this.set_index(row);
				this._is_value_setting = false;
			}
		}
	};

	_pListBox.set_dragscrolltype = function (v) {
		nexacro.Form.prototype.set_dragscrolltype.call(this, v);
	};

	_pListBox.set_resizebutton = function () {
	};

	_pListBox.set_selectscrollmode = function (v) {
		this.selectscrollmode = nexacro._toString(v);
	};

	_pListBox.set_rtldirection = function (v) {
		this._is_redraw = false;
		nexacro.Component.prototype.set_rtldirection.call(this, v);
	};
	_pListBox.getCount = function () {
		return (this._innerdataset) ? this._innerdataset.getRowCount() : 0;
	};

	_pListBox.getSelectedCount = function () {
		return this._get_selectcount();
	};

	_pListBox.getSelect = function (v) {
		if (v < 0 || v >= this.getCount()) {
			return false;
		}
		var selectedItems = this._select_multi.items;
		var selectedCount = this._select_multi.length;

		for (var i = 0; i < selectedCount; i++) {
			if (selectedItems[i] == v) {
				return true;
			}
		}
		return false;
	};

	_pListBox.getSelectedItems = function () {
		if (this._select_multi && this._select_multi.length > 0) {
			var arrSelect = this._select_multi.items.slice();
			arrSelect.sort();
			return arrSelect;
		}
		else {
			return [];
		}
	};

	_pListBox.clearSelect = function () {
		if (this._select_multi && this._select_multi.length > 0) {
			this._selectinfo.index = -1;

			if (this._changeIndex(-1, true, true)) {
				this.on_apply_index(-1);
			}
			this._select_clear();
		}
	};

	_pListBox.redraw = function () {
		if (this._is_redraw == false) {
			this._recreate_data();
			this._is_redraw = true;
		}
	};
	_pListBox.setSelect = function (index, select) {
		select = nexacro._toBoolean(select);
		index = parseInt(index) | 0;
		var item = this._get_rowobj_byrow(index);

		if (index >= 0) {
			if (select == true) {
				if (!this.multiselect) {
					this._deselect_all(true);

					if (this._changeIndex(index, true, true)) {
						this.on_apply_index();
					}
				}
				else {
					if (item) {
						item.set_selected(select);
					}
					this._changeIndex(index, false, true);
					this._select_add(index);
				}
			}
			else {
				if (item) {
					item.set_selected(false);
				}
				this._select_remove(index);
				if (this._select_multi && this._select_multi.length == 0) {
					this._changeIndex(-1, false, true);
				}
			}
		}
		else {
			if (item) {
				if (this._changeIndex(-1, false, true)) {
					this.on_apply_index();
				}
			}

			this._select_clear();
		}
	};

	_pListBox.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		return this.applyto_bindSource("value", this.value);
	};

	_pListBox.isAboveSelected = function () {
	};


	_pListBox.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		this._metaKey = meta_key;
		this._shiftKey = shift_key;
		this._ctrlKey = ctrl_key;
		this._altKey = alt_key;

		return nexacro.Component.prototype.on_fire_sys_onkeyup.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
	};

	_pListBox.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var accIdx = this._accessibility_index;
		var count = this._get_contents_rows().length;
		if (keycode == nexacro.Event.KEY_TAB) {
			var selecteditem = this._selectinfo;
			if (selecteditem && selecteditem.index > -1) {
				if (shift_key) {
					if (accIdx < 0) {
						this._want_tab = false;
					}
					else {
						var last_focused = this._last_focused;
						this._do_defocus(last_focused, true);
						if (last_focused && last_focused._selected) {
							last_focused._stat_change("select", "selected");
						}

						this._accessibility_index = -1;
					}
				}
				else {
					if (accIdx > -1) {
						this._want_tab = false;
					}
					else {
						var items = this._get_contents_rows();
						var comp = items[this.index];
						if (comp) {
							comp._on_focus(true);
						}
						this._accessibility_index = this.index;
					}
				}
			}
			else {
				if ((shift_key && accIdx < 0) || (!shift_key && accIdx >= count - 1)) {
					this._want_tab = false;
				}
				else {
					if (shift_key) {
						accIdx--;
					}
					else {
						accIdx++;
					}
					var items = this._get_contents_rows();
					var comp = items[accIdx];
					if (comp) {
						comp._on_focus(true);
					}

					this._accessibility_index = accIdx;
				}
			}
			this._getWindow()._keydown_element._event_stop = true;
		}
		return nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pListBox.on_notify_listbox_onkeydown = function (obj, e) {
		if (this.readonly) {
			return false;
		}

		var sel_info = this._selectinfo;
		var nextidx, curidx = this._overeditemindex;
		var ds = this._innerdataset;

		var pre_index = +this.index;
		var pre_text = this.text;
		var pre_value = this.value;
		var post_index, post_text, post_value;
		var items = this._get_contents_rows();

		var shiftKey = this._shiftKey = e.shiftKey;
		this._ctrlKey = e.ctrlKey;
		this._altKey = e.altKey;
		this._metaKey = e.metaKey;
		var keycode = e.keycode;

		if (keycode == nexacro.Event.KEY_UP) {
			if (e.ctrlKey) {
				this._do_scroll("up");
				return true;
			}

			if (this.multiselect) {
				if (nexacro._enableaccessibility) {
					nextidx = this._getNextAccessibilityOrderIndex(-1);

					if (this._accessibility_index < 0) {
						var _window = this._getWindow();
						_window._removeFromCurrentFocusPath(this, true);
						if (this._isAccessibilityEnable()) {
							this._on_focus(true);
						}
						this._accessibility_index = -1;
						return;
					}
					else {
						if (this._select_multi.lastselected === undefined && this._accessibility_index < this._get_rowcount()) {
							items[this._accessibility_index]._stat_change("notfocus", "normal");
						}
						this._select_withkeyupevent(e);
					}
					nextidx = this._accessibility_index;
				}
				else {
					this._select_withkeyupevent(e);
					nextidx = this._get_selection_last();
				}

				if (nextidx != null) {
					if (nextidx > -1) {
						this._changeIndex(nextidx);
					}
				}
			}
			else {
				if (nexacro._enableaccessibility) {
					if (this.index == 0) {
						var _window = this._getWindow();
						_window._removeFromCurrentFocusPath(this, true);
						if (this._isAccessibilityEnable()) {
							this._on_focus(true);
						}
						this._accessibility_index = -1;
						return;
					}
					else {
						if (this._accessibility_index != this.index) {
							var prev_item = items[this._accessibility_index];
							if (prev_item) {
								prev_item._stat_change("notfocus", "normal");
							}
						}
						this._accessibility_index = this._getNextAccessibilityOrderIndex(-1);
						nextidx = this._accessibility_index;
					}
				}
				else {
					nextidx = +this.index - 1;
				}

				if (nextidx > -1) {
					if (this._changeIndex(nextidx)) {
						this.on_apply_index();
					}
				}
			}
		}
		else if (keycode == nexacro.Event.KEY_DOWN) {
			if (e.ctrlKey) {
				this._do_scroll("down");
				return true;
			}

			if (this.multiselect) {
				if (nexacro._enableaccessibility) {
					if (this.index > -1 && this._accessibility_index == -1) {
						nextidx = this._accessibility_index = this.index;
						this._do_select(this._accessibility_index);
					}
					else {
						nextidx = this._getNextAccessibilityOrderIndex(1);
						if (this._accessibility_index < ds.getRowCount()) {
							if (this._select_multi.lastselected === undefined && this._accessibility_index > -1) {
								items[this._accessibility_index]._stat_change("notfocus", "normal");
							}
							this._select_withkeydownevent(e);
						}
					}
				}
				else {
					this._select_withkeydownevent(e);
					nextidx = this._get_selection_last();
				}

				if (nextidx != null) {
					if (nextidx < ds.getRowCount()) {
						this._changeIndex(nextidx);
					}
				}
			}
			else {
				if (nexacro._enableaccessibility) {
					if (this.index > -1 && this._accessibility_index == -1) {
						items[this.index]._on_focus(true);
						this._accessibility_index = this.index;
					}
					else {
						if (this._accessibility_index != this.index) {
							var prev_item = items[this._accessibility_index];
							if (prev_item) {
								prev_item._stat_change("notfocus", "normal");
							}
						}
						this._accessibility_index = this._getNextAccessibilityOrderIndex(1);
					}
					nextidx = this._accessibility_index;
				}
				else {
					nextidx = +this.index + 1;
				}

				if (nextidx < ds.getRowCount()) {
					if (this._changeIndex(nextidx)) {
						this.on_apply_index();
					}
				}
			}
		}

		if (!shiftKey) {
			this._shift_select_base_index = obj.index;
		}

		if ((this.multiselect == true) && (this._ctrlKey == true) && (keycode == nexacro.Event.KEY_SPACE)) {
			var cur_item = this._get_rowobj_byrow(this._select_multi.lastselected);
			var is_same = false;
			this._sellist = this._select_multi.items;
			var len = this._sellist.length;
			var del_idx, iv;

			for (var i = 0; i < len; i++) {
				iv = this._sellist[i];

				if (this._select_multi.lastselected == iv) {
					is_same = true;
					cur_item = this._get_rowobj_byrow(iv);
					del_idx = iv;
				}
			}

			if (is_same !== true) {
				if (cur_item) {
					cur_item.set_selected(true);
				}
				this._select_add(this._select_multi.lastselected);
			}
			else {
				this._do_deselect(del_idx, true);
			}
		}
		else if (keycode == nexacro.Event.KEY_SPACE) {
			if (nexacro._enableaccessibility && this._accessibility_index > -1) {
				var items = this._get_contents_rows();
				if (items[this._accessibility_index]._control_pseudo == "focused") {
					items[this._accessibility_index]._stat_change("notfocus", "normal");
				}

				if (this._changeIndex(this._accessibility_index)) {
					this.on_apply_index();
				}
			}
		}

		this.on_apply_style_itemborder(this.currentstyle.itemborder);
	};

	_pListBox.on_notify_item_onlbuttondown = function (obj, e) {
		if (this.readonly) {
			return false;
		}

		obj._keep_selecting = true;
		obj._stat_change("select", "selected");

		var shiftkey = this._shiftKey = e.shiftKey;
		this._ctrlKey = e.ctrlKey;
		this._altKey = e.altKey;
		this._metaKey = e.metaKey;

		this._selectinfo.obj = obj;
		this._selectinfo.index = obj.index;
		this._selectinfo.text = obj.text;
		this._selectinfo.value = obj.value;

		if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
			this._selectinfo_list[this._selectinfo_list.length] = this._selectinfo;
		}

		if (!shiftkey) {
			this._shift_select_base_index = obj.index;
		}

		this._lbtnDownIdx = obj.index;
	};

	_pListBox.on_fire_user_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (!this._is_alive || this.readonly) {
			return false;
		}

		return nexacro.Component.prototype.on_fire_user_onlbuttondown.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
	};

	_pListBox.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (!this._is_alive || this.readonly) {
			return false;
		}

		return nexacro.Component.prototype.on_fire_user_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
	};

	_pListBox.on_fire_sys_ontouchend = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (from_refer_comp && (from_refer_comp instanceof nexacro.ScrollBarCtrl || (from_refer_comp.parent && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl))) {
			return;
		}

		var sel_info_list = this._selectinfo_list;

		var ret = nexacro.Component.prototype.on_fire_sys_ontouchend.call(this, touchinfos, changedtouchinfos, from_comp, from_refer_comp);

		while (sel_info_list.length) {
			var down_item = sel_info_list[0].obj;
			if (down_item) {
				down_item._keep_selecting = false;

				var items = this._get_contents_rows();
				var change_item;


				var evt = touchinfos[0];

				var canvasX = evt.canvasX;
				var canvasY = evt.canvasY;

				var elem = this.getElement();
				if (elem) {
					var border = this.currentstyle.border;
					var c_l_border = border ? border._left_width : 0;
					var c_t_border = border ? border._top_width : 0;
					canvasX = canvasX - ((elem.scroll_left ? elem.scroll_left : 0) - c_l_border);
					canvasY = canvasY - ((elem.scroll_top ? elem.scroll_top : 0) - c_t_border);

					if (canvasX < 0) {
						canvasX = c_l_border;
					}
					if (canvasY < 0) {
						canvasY = c_t_border;
					}
				}

				var clientXY = this._getClientXY(canvasX, canvasY);

				this.on_fire_onitemclick(this, down_item.index, down_item.text, down_item.value, evt._current_state, this._altKey, this._ctrlKey, this._shiftKey, this._metaKey, evt.screenX, evt.screenY, canvasX, canvasY, clientXY[0], clientXY[1]);

				change_item = down_item;

				var change_index = change_item.index;

				if (this.multiselect) {
					if (this._shiftKey == true || this._ctrlKey == true) {
						this._select_withmouseevent(change_index);
					}
					else {
						this._do_select(change_index, false);
					}
				}
				else {
					if (this._changeIndex(change_index)) {
						this.on_apply_index();
					}
					else {
						if (!down_item.selected) {
							down_item._stat_change("notselect", "normal");
						}
					}
				}
			}

			sel_info_list.shift();
		}

		return ret;
	};

	_pListBox.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (from_refer_comp && (from_refer_comp instanceof nexacro.ScrollBarCtrl || (from_refer_comp.parent && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl))) {
			return;
		}

		var sel_info = this._selectinfo;

		var ret = nexacro.Component.prototype.on_fire_sys_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem);

		var down_item = sel_info.obj;
		if (down_item) {
			down_item._keep_selecting = false;

			var items = this._get_contents_rows();
			var change_item;

			this.on_fire_onitemclick(this, down_item.index, down_item.text, down_item.value, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);

			if (nexacro._enableaccessibility) {
				if (this._accessibility_index > -1) {
					var sel_item = this._get_rowobj_byrow(this._accessibility_index);
					if (sel_info.index != this._accessibility_index && sel_item && sel_item._selected == true) {
						this._deselect_all(true);
						sel_item._stat_change("notselect", "normal");
					}
				}
			}

			change_item = down_item;

			var change_index = change_item.index;

			if (this.multiselect) {
				if (this._shiftKey == true || this._ctrlKey == true) {
					this._select_withmouseevent(change_index);
				}
				else {
					this._do_select(change_index, false);
				}
			}
			else {
				if (this._changeIndex(change_index)) {
					this.on_apply_index();
				}
				else {
					if (!down_item.selected) {
						down_item._stat_change("notselect", "normal");
					}
				}
			}
		}

		return ret;
	};

	_pListBox.on_fire_sys_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onslide.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);

		if (this.selectscrollmode == "select" && this.multiselect) {
			if (this._innerdataset) {
				var idx = -1;
				if (touchinfos[0]._elem && touchinfos[0]._elem.parent) {
					idx = touchinfos[0]._elem.parent.index;
				}

				if (this._lbtnDownIdx > -1 && idx > -1) {
					this._deselect_all(true);

					var startRow = this._lbtnDownIdx;
					var endRow = idx;
					var finalRow = idx;

					if (!nexacro._isNumber(startRow)) {
						startRow = 0;
					}
					if (!nexacro._isNumber(endRow)) {
						endRow = this._get_rowcount();
					}

					if (startRow > endRow) {
						var tmp = endRow;
						endRow = startRow;
						startRow = tmp;
						finalRow = tmp;
					}

					var rows = [];
					for (var i = startRow; i <= endRow; i++) {
						rows.push(i);
					}
					this._do_multi_select(rows, true);
					this._changeIndex(finalRow);
				}
			}

			return true;
		}

		return ret;
	};

	_pListBox.on_notify_item_onmouseenter = function (obj, e) {
		this._overeditemindex = obj.index;
		return false;
	};

	_pListBox.on_notify_item_onmouseleave = function (obj, e) {
		var items = this._get_contents_rows();
		obj = this._getItemByRealIdx(items, this._overeditemindex).obj;

		if (obj) {
			if (!obj.selected) {
				this._overeditemindex = -1;
			}
		}
	};

	_pListBox.on_fire_onitemclick = function (obj, index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		if (this.readonly) {
			return false;
		}
		if (this.onitemclick && this.onitemclick._has_handlers) {
			var evt = new nexacro.ItemClickEventInfo(obj, "onitemclick", index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			var ret = this.onitemclick._fireEvent(this, evt);
			evt = null;
			return nexacro._toBoolean(ret);
		}

		return false;
	};

	_pListBox.on_fire_canitemchange = function (obj, preindex, pretext, prevalue, postindex, posttext, postvalue) {
		if (this.canitemchange && this.canitemchange._has_handlers) {
			var evt = new nexacro.ItemChangeEventInfo(this, "canitemchange", preindex, pretext, prevalue, postindex, posttext, postvalue);
			var ret = this.canitemchange._fireCheckEvent(this, evt);
			evt = null;
			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pListBox._onItemchanged = function (obj, preindex, pretext, prevalue, postindex, posttext, postvalue) {
		this.applyto_bindSource("value", obj.value);
		this.on_fire_onitemchanged(this, preindex, pretext, prevalue, postindex, posttext, postvalue);
		return true;
	};

	_pListBox.on_fire_onitemchanged = function (obj, preindex, pretext, prevalue, postindex, posttext, postvalue) {
		if (!this._selectinfo) {
			return false;
		}

		this._selectinfo.obj = null;
		this._selectinfo.index = obj.index;
		this._selectinfo.text = obj.text;
		this._selectinfo.value = obj.value;

		var sel_info = this._selectinfo;
		sel_info.index = postindex;
		sel_info.text = posttext;
		sel_info.value = postvalue;

		if (this.onitemchanged && this.onitemchanged._has_handlers) {
			var evt = new nexacro.ItemChangeEventInfo(this, "onitemchanged", preindex, pretext, prevalue, postindex, posttext, postvalue);
			var ret = this.onitemchanged._fireEvent(this, evt);
			return nexacro._toBoolean(ret);
		}

		return false;
	};

	_pListBox.on_notify_item_ondblclick = function (obj, e) {
		if (this.readonly || !this.enableevent) {
			return false;
		}

		e.canvasX += obj._adjust_left - obj._scroll_left || 0;
		e.canvasY += obj._adjust_top - obj._scroll_top || 0;

		var curstyle = obj.currentstyle;

		if (curstyle && curstyle.padding) {
			e.canvasX += curstyle.padding.left;
			e.canvasY += curstyle.padding.top;
		}

		var clientXY = this._getClientXY(e.canvasX, e.canvasY);
		e.clientX = clientXY[0];
		e.clientY = clientXY[1];

		return this.on_fire_onitemdblclick(this, this.index, this.text, this.value, e.button, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.screenX, e.screenY, e.canvasX, e.canvasY, e.clientX, e.clientY);
	};

	_pListBox.on_fire_onitemdblclick = function (obj, index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		if (this.readonly) {
			return false;
		}
		if (this.onitemdblclick && this.onitemdblclick._has_handlers) {
			var evt = new nexacro.ItemClickEventInfo(obj, "onitemdblclick", index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			var ret = this.onitemdblclick._fireEvent(this, evt);
			return nexacro._toBoolean(ret);
		}

		return false;
	};

	_pListBox._adjustScrollRows_callback = function (no_ani) {
		this._adjustScrollRows_proc(no_ani);
		this._clearHiddenPage();
	};

	_pListBox._adjustScrollRows_proc = function (no_ani) {
		var pos = this.vscrollbar.pos;

		if (no_ani) {
			this._scroll_vpos_queue = [];
		}
		else {
			this._scroll_vpos_queue.pop();

			if (this._scroll_vpos_queue.length > 0) {
				this._aniframe_rowscroll.start();
			}
		}

		var visible_start = this._get_first_visible_row();
		var visible_end = this._get_last_visible_row(true);

		this._draw_contents(visible_start, visible_end);
		this._control_element.setElementVScrollPos(pos);
	};
	_pListBox.on_vscroll = function (obj, e) {
		if (this.onvscroll && this.onvscroll._has_handlers) {
			e.fromobject = this;
			this.onvscroll._fireEvent(this, e);
		}

		if (e.type == "trackstart" || e.type == "tracklastover" || e.type == "trackfirstover") {
			return;
		}

		if (nexacro.Browser == "Runtime" || (navigator.userAgent.indexOf("Android 4.1") > -1 || navigator.userAgent.indexOf("Android 4.2") > -1 || navigator.userAgent.indexOf("Android 4.3") > -1)) {
			this._adjustScrollRows_callback(true);
		}
		else {
			if (e._evtkind == "fling" || e._evtkind == "slide" || e.type == "track") {
				if (!this._aniframe_rowscroll) {
					var pThis = this;
					this._scroll_vpos_queue = [];

					this._aniframe_rowscroll = new nexacro.AnimationFrame(this, function () {
						pThis._adjustScrollRows_callback();
					});
				}

				var cnt = this._scroll_vpos_queue.push(e.pos);

				if (cnt == 1) {
					this._aniframe_rowscroll.start();
				}
			}
			else {
				this._adjustScrollRows_callback(true);
			}
		}

		return true;
	};

	_pListBox.on_hscroll = function (obj, e) {
		if (this.onhscroll && this.onhscroll._has_handlers) {
			e.fromobject = this;
			this.onhscroll._fireEvent(this, e);
		}

		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementHScrollPos(e.pos);
			control_elem = null;
		}

		return true;
	};

	_pListBox.on_fire_onsize = function (width, height) {
		if (this._is_redraw == false) {
			this._recreate_data();
			this._is_redraw = true;
		}

		return nexacro.Component.prototype.on_fire_onsize.call(this, width, height);
	};

	_pListBox.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		var ret = false;
		var items = this._get_contents_rows();

		if (items && items.length > 0) {
			var obj = null;

			if (direction > 0) {
				this._overeditemindex++;
			}
			else {
				this._overeditemindex--;
			}

			obj = this._getItemByRealIdx(items, this._overeditemindex).obj;

			if (obj) {
				ret = true;
				obj._setAccessibilityNotifyEvent();
			}
		}

		return ret;
	};


	_pListBox._applyScrollPos = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var vpos = control_elem.scroll_top;
			var container_elem = control_elem.getContainerElement();
			if (container_elem) {
				control_elem._reset_scrollpos = true;

				container_elem._cached_scrollTop = 0;
				container_elem.setElementVScrollPos(vpos);
			}
		}
	};

	_pListBox._create_item = function (id, position, left, top, width, height, right, bottom, parent) {
		return new nexacro.ListItemCtrl(id, position, left, top, width, height, right, bottom, parent);
	};

	_pListBox._create_row = function (nRow, left, top, right, bottom) {
		var ds = this._innerdataset;
		var dataCol = this.datacolumn ? this.datacolumn : this._datacolumn;
		var codeCol = this.codecolumn ? this.codecolumn : this._codecolumn;
		var txt = ds.getColumn(nRow, dataCol);
		var val = ds.getColumn(nRow, codeCol);

		var item = this._create_item("item", "absolute", left, top, right - left, bottom - top, null, null, this);
		item.set_value(val);
		item.set_text(txt);
		item.set_index(nRow);
		item.set_selected(false);
		item._setRtlDirection(this._rtldirection);

		item._setEventHandler("onlbuttondown", this.on_notify_item_onlbuttondown, this);
		item._setEventHandler("ontouchstart", this.on_notify_item_onlbuttondown, this);
		item._setEventHandler("ondblclick", this.on_notify_item_ondblclick, this);
		item._setEventHandler("onmouseenter", this.on_notify_item_onmouseenter, this);
		item._setEventHandler("onmouseleave", this.on_notify_item_onmouseleave, this);
		item.createComponent();

		if (!this._is_created) {
			this._refresh_rows[this._refresh_rows.length] = item;
		}

		if (this.multiselect == true) {
			var selItems = this._select_multi.items;
			var len = this._select_multi.length;

			for (var i = 0; i < len; i++) {
				if (nRow == selItems[i]) {
					item.set_selected(true);
					break;
				}
			}
		}
		else {
			if (this.index == nRow) {
				item.set_selected(true);
				this._set_last_selectfocused(nRow);
			}
		}

		return item;
	};

	_pListBox._refresh_scroll = function () {
		this._contents_maxwidth = null;
		this._contents_maxheight = null;
		this._set_scroll_max_size();
		this._refresh_size(false);
	};

	_pListBox._refresh_row = function (nRow, prop, val) {
		var rowobj = this._get_rowobj_byrow(nRow);
		switch (prop) {
			case "value":
				if (rowobj) {
					rowobj.set_value(val);
				}
				break;
			case "text":
				if (rowobj) {
					rowobj.set_text(val);
				}
				var ret = this._set_scroll_max_width(nRow);
				if (ret) {
					this._refresh_size(true);
				}
				break;
			case "index":
				if (rowobj) {
					rowobj.set_index(val);
				}
				break;
			case "select":
				if (rowobj) {
					rowobj.set_selected(val);
				}
				break;
		}
	};

	_pListBox._get_rowcount = function () {
		var ds = this._innerdataset;
		if (ds && (this.datacolumn || this.codecolumn)) {
			return ds.getRowCount();
		}
		else {
			return 0;
		}
	};

	_pListBox._getMaxTextSize = function () {
		var ds = this._innerdataset;
		var col = this.datacolumn || this.codecolumn;
		if (!ds || !col) {
			return false;
		}

		var font = this.on_find_CurrentStyle_font(this._pseudo) || nexacro.Component._default_font;
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
		var ad_width = this.currentstyle.itempadding ? this.currentstyle.itempadding.left + this.currentstyle.itempadding.right : 0;
		ad_width += this.currentstyle.itemborder ? this.currentstyle.itemborder._left_width + this.currentstyle.itemborder._right_width : 0;
		var itemWidth;
		var ds_cnt = ds.getRowCount();
		var maxWidth = 0;
		if (ds_cnt > 0) {
			for (var i = 0; i < ds_cnt; i++) {
				itemWidth = nexacro._getTextSize2(letterspace, ds.getColumn(i, col), font, null, null, null, this._rtldirection)[0];
				if (maxWidth < itemWidth) {
					maxWidth = itemWidth;
				}
			}

			maxWidth += ad_width;

			if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
				return maxWidth;
			}
			else {
				maxWidth = Math.max(this._contents_maxwidth, maxWidth);
				return maxWidth;
			}
		}
		else {
			return 0;
		}
	};

	_pListBox._get_rowheight = function () {
		var itemheight = this.currentstyle.itemheight;
		return itemheight ? nexacro._parseInt(itemheight.value, 20) : 20;
	};

	_pListBox._get_select_mode = function () {
		if (this.multiselect) {
			return "multi";
		}
		else {
			return "single";
		}
	};

	_pListBox._set_scroll_max_size = function () {
		this._set_scroll_max_width();
		this._contents_maxheight = this._get_rowcount() * this._get_rowheight();
		if (this._temp_elem) {
			this._temp_elem.setElementPosition(0, this._contents_maxheight - 1);
		}
	};

	_pListBox._set_scroll_max_width = function (nRow) {
		var font = this.currentstyle.font || this._default_font;
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
		var dataset = this._innerdataset;

		var ad_width = this.currentstyle.itempadding ? this.currentstyle.itempadding.left + this.currentstyle.itempadding.right : 0;
		ad_width += this.currentstyle.itemborder ? this.currentstyle.itemborder._left_width + this.currentstyle.itemborder._right_width : 0;

		if (font && dataset) {
			if (this._contents_maxwidth !== null) {
				if (this._pos_max_width == nRow) {
					var datacolumn = this.datacolumn;

					var size = this._getMaxTextSize();
					var change = false;
					if (this._contents_maxwidth != size) {
						this._contents_maxwidth = Math.max(this._contents_maxwidth, size);
						change = true;
					}
					this._pos_max_width = row;

					return change;
				}
				else {
					var txt = dataset.getColumn(nRow, this.datacolumn);
					var size = nexacro._getTextSize2(letterspace, txt, font, null, null, null, this._rtldirection);
					if (this._contents_maxwidth < size[0]) {
						this._contents_maxwidth = size[0] + ad_width;
						this._pos_max_width = nRow;
						return true;
					}

					return false;
				}
			}
			else {
				var datacolumn = this.datacolumn;

				var row = dataset.findMaxLengthRow(datacolumn);

				var size = this._getMaxTextSize();
				this._contents_maxwidth = size + ad_width;
				this._pos_max_width = row;

				return true;
			}
		}

		return false;
	};

	_pListBox._getItemByRealIdx = function (arr, target) {
		if (nexacro._isArray(arr)) {
			for (var i = 0, n = arr.length; i < n; i++) {
				if (arr[i].index == target) {
					return {
						"obj" : arr[i], 
						"index" : i
					};
				}
			}
		}

		return {
			"obj" : null, 
			"index" : null
		};
	};

	_pListBox._clearHiddenPage = function () {
		var visible_start = this._get_first_visible_row();
		var visible_end = this._get_last_visible_row(true);

		var spage = this._get_page_from_rowidx(visible_start);
		var epage = this._get_page_from_rowidx(visible_end);
		var remain_cnt = 100;
		var rowcount = this._get_rowcount();

		if (this._buffer_pages) {
			var buffer_pages = this._buffer_pages;
			var rowobjs, rowobj;
			var delrowcnt = 0;

			for (var i = 0, n = buffer_pages.length; i < n; i++) {
				if (i >= spage && i <= epage) {
					continue;
				}

				if ((rowcount - delrowcnt) <= remain_cnt) {
					break;
				}

				rowobjs = buffer_pages[i];
				if (rowobjs) {
					for (var j = 0, jlen = rowobjs.length; j < jlen; j++) {
						rowobj = rowobjs[j];
						if (rowobj) {
							rowobj.destroy();
						}
						delrowcnt++;
					}
					buffer_pages[i] = null;
				}
			}
		}
	};

	_pListBox._draw_contents = function (start, end, dir) {
		if (!this._buffer_pages) {
			this._buffer_pages = [];
		}
		var buffer_page;
		var rowobj;
		var start_row, pos;

		if (!this._has_range(start, end)) {
			var start_page = this._get_page_from_rowidx(start);
			var end_page = this._get_page_from_rowidx(end);
			var page;

			start_row = (start_page - 1) * this._page_rowcount;
			var total_cnt = this._get_rowcount();
			var rowheight = this._get_rowheight();
			var control_elem = this.getElement();
			var row_width = 0;
			var page_rowcount = this._page_rowcount;

			if (control_elem) {
				row_width = control_elem.container_maxwidth;
			}

			for (page = start_page; page <= end_page; page++) {
				if (!(this._buffer_pages[page]) || this._buffer_pages[page].length <= 0) {
					buffer_page = this._buffer_pages[page] = [];

					for (var j = 0; j < page_rowcount; j++) {
						pos = (pos === undefined) ? (start_row * rowheight) : pos;
						rowobj = this._create_row(start_row, 0, pos, row_width, pos + rowheight);
						buffer_page.push(rowobj);
						pos = rowobj._adjust_top + rowobj._adjust_height;
						start_row++;
						if (total_cnt <= start_row) {
							break;
						}
					}
				}
				else {
					buffer_page = this._buffer_pages[page];
					var buf = buffer_page[buffer_page.length - 1];
					pos = buf._adjust_top + buf._adjust_height;
					start_row += buffer_page.length;
				}
			}
		}

		this._previous_start = this._cur_start;
		this._previous_end = this._cur_end;
		this._cur_start = start;
		this._cur_end = end;
	};

	_pListBox._resetDisplayInfo = function () {
		var control_elem = this.getElement();
		if (!control_elem) {
			return;
		}

		this._page_rowcount = Math.ceil((control_elem.client_height) / this._get_rowheight());
		this._page_rowcount_min = Math.floor((control_elem.client_height) / this._get_rowheight());

		var rowcount = this._get_rowcount();
		if (rowcount == 0) {
			this._total_page_cnt = 0;
			this._total_page_rowcnt = 0;
		}
		else {
			this._total_page_cnt = Math.ceil(rowcount / this._page_rowcount);
			this._total_page_rowcnt = (this._page_rowcount * this._total_page_cnt);
		}
	};

	_pListBox._recreate_data = function (keep_scroll) {
		if (!this._is_redrawing && this._is_created_contents) {
			var control_elem = this.getElement();
			if (!control_elem) {
				return;
			}

			this._is_redrawing = true;

			this._clear_contents();

			this._resetDisplayInfo();

			this._refresh_scroll();

			var rowcount = this._get_rowcount();
			if (rowcount == 0) {
				this._is_redrawing = false;
				return;
			}

			var startrow, endrow;

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
				startrow = 0;
				endrow = rowcount - 1;
			}
			else {
				if (keep_scroll) {
					startrow = this._get_first_visible_row();
					endrow = this._get_last_visible_row(true);
				}
				else {
					startrow = 0;
					if (rowcount <= this._total_page_rowcnt) {
						endrow = rowcount - 1;
					}
					else {
						endrow = this._total_page_rowcnt - 1;
					}

					if (this._page_rowcount < endrow) {
						endrow = this._page_rowcount;
					}
				}
			}

			if (this._is_created_contents) {
				this._refresh_size(false);
			}

			this._draw_contents(startrow, endrow);


			this._is_redrawing = false;
		}
	};


	_pListBox._refresh_size = function (is_contents_resize) {
		var control_elem = this.getElement();
		if (control_elem) {
			var contents_maxwidth = this._contents_maxwidth;
			var contents_maxheight = this._contents_maxheight;
			var org_maxwidth = control_elem.container_maxwidth;
			var org_maxheight = control_elem.container_maxheight;

			contents_maxwidth = Math.max(contents_maxwidth, control_elem.client_width);
			contents_maxheight = Math.max(contents_maxheight, control_elem.client_height);

			if ((control_elem.container_maxwidth != contents_maxwidth || control_elem.container_maxheight != contents_maxheight)) {
				control_elem.setElementScrollMaxSize(contents_maxwidth, contents_maxheight);
			}

			if (is_contents_resize) {
				this._refresh_scroll();
			}

			this._onResetScrollBar();
		}
	};

	_pListBox._clear_contents = function () {
		if (this._vscrollTask) {
			this._vscrollTask.stop();
		}
		if (this._buffer_pages) {
			var buffer_pages = this._buffer_pages;
			var rowobjs, rowobj;
			for (var i = 0, n = buffer_pages.length; i < n; i++) {
				rowobjs = buffer_pages[i];
				if (rowobjs) {
					for (var j = 0, jlen = rowobjs.length; j < jlen; j++) {
						rowobj = rowobjs[j];
						if (rowobj) {
							rowobj.destroy();
						}
					}
					buffer_pages[i] = null;
				}
			}
		}
		this._buffer_pages = null;
	};

	_pListBox._get_first_visible_row = function () {
		var scrollTop = (this.vscrollbar) ? this.vscrollbar.pos : 0;
		return Math.floor(scrollTop / this._get_rowheight());
	};

	_pListBox._get_last_visible_row = function (bPrecision) {
		var lastrow;
		if (bPrecision) {
			lastrow = this._get_first_visible_row() + this._page_rowcount;
		}
		else {
			lastrow = this._get_first_visible_row() + this._page_rowcount_min;
		}

		var rowcnt = this._get_rowcount();

		if (lastrow >= rowcnt) {
			lastrow = rowcnt - 1;
		}

		return lastrow;
	};

	_pListBox._get_page_from_rowidx = function (rowidx) {
		return Math.floor(rowidx / this._page_rowcount) + 1;
	};

	_pListBox._has_range = function (start, end) {
		if (!this._buffer_pages) {
			return false;
		}
		var page = this._get_page_from_rowidx(start), end_page = this._get_page_from_rowidx(end);

		for (; page <= end_page; page++) {
			if (!this._has_page(page)) {
				return false;
			}
		}

		return true;
	};

	_pListBox._has_page = function (page) {
		return !!this._buffer_pages[page];
	};

	_pListBox._get_contents_rows = function () {
		var buffer_pages = this._buffer_pages, ret_arr = [];
		if (buffer_pages) {
			var rowobjs, rowobj;
			for (var i = 0, n = buffer_pages.length; i < n; i++) {
				rowobjs = buffer_pages[i];
				if (rowobjs) {
					ret_arr = ret_arr.concat(rowobjs);
				}
			}
		}

		return ret_arr;
	};

	_pListBox._get_rowobj_byrow = function (nRow) {
		var buffer_pages = this._buffer_pages;
		if (buffer_pages) {
			var rowobjs, rowobj;
			for (var i = 0, n = buffer_pages.length; i < n; i++) {
				rowobjs = buffer_pages[i];
				if (rowobjs) {
					for (var j = 0, jlen = rowobjs.length; j < jlen; j++) {
						rowobj = rowobjs[j];
						if (rowobj && rowobj.index == nRow) {
							return rowobj;
						}
					}
				}
			}
		}

		return null;
	};

	_pListBox._select_withmouseevent = function (idx, e, keepExisting) {
		switch (this._get_select_mode()) {
			case 'multi':
				if (this._shiftKey) {
					if (!this._ctrlKey) {
						this._deselect_all(true);
					}
					this._select_range(this._shift_select_base_index, idx, this._shiftKey);
				}
				else if (this._ctrlKey) {
					var item = this._get_rowobj_byrow(idx);

					if (item) {
						item.set_selected(!item.selected);
					}

					if (item.selected === false) {
						var i, len;
						var sel = this._select_multi;
						len = sel ? sel.length : 0;

						for (i = 0; i < len; i++) {
							if (idx === sel.items[i]) {
								this._select_remove(idx);
							}
						}
					}
					else {
						this._select_add(idx);
					}
					this._set_last_selectfocused(idx);
				}
				else if (this._is_selected(idx) && !this._shiftKey && !this._ctrlKey && this._get_selectcount() > 1) {
					this._do_select(idx, keepExisting, false);
				}
				else {
					this._do_select(idx, false);
				}
				break;
			case 'single':
				this._do_select(idx, false);
				break;
		}
	};

	_pListBox._select_withkeyupevent = function (e) {
		var lastidx = this._select_multi.lastselected === undefined ? nexacro._enableaccessibility ? this._accessibility_index : this._select_multi.lastselected : this._select_multi.lastselected;

		if (lastidx > 0) {
			var idx = lastidx - 1;
			if (e.shiftKey && lastidx) {
				if (this._is_selected(lastidx) && this._is_selected(idx)) {
					this._do_deselect(lastidx, true);
					this._set_last_selectfocused(idx);

					if (this._isAccessibilityEnable()) {
						var item = this._get_contents_rows();
						item[idx]._setFocus(true);
					}
				}
				else if (!this._is_selected(lastidx)) {
					this._do_select(lastidx, true);
					this._do_select(idx, true);
				}
				else {
					this._do_select(idx, true);
				}
			}
			else {
				this._shift_select_base_index = null;
				this._deselect_all(true);
				this._do_select(idx);
			}
		}
	};

	_pListBox._select_withkeydownevent = function (e) {
		var lastidx = this._select_multi.lastselected === undefined ? nexacro._enableaccessibility ? this._accessibility_index : this._select_multi.lastselected : this._select_multi.lastselected;
		var total_cnt = this._get_rowcount();

		if (lastidx + 1 < total_cnt) {
			var idx = lastidx === null ? 0 : lastidx + 1;
			if (e.shiftKey && lastidx >= 0) {
				if (this._shift_select_base_index == lastidx) {
					this._deselect_all(true);
					this._do_select(this._shift_select_base_index, true);
				}

				if (this._is_selected(lastidx) && this._is_selected(idx)) {
					this._do_deselect(lastidx, true);
					this._set_last_selectfocused(idx);
				}
				else if (!this._is_selected(lastidx)) {
					this._do_select(lastidx, true);
					this._do_select(idx, true);
				}
				else {
					this._do_select(idx, true);
				}
			}
			else {
				this._shift_select_base_index = null;
				this._deselect_all(true);
				this._do_select(idx);
			}
		}
	};

	_pListBox._getPreCalculateWantTab = function (keycode, shift_key) {
		if (this._selectinfo && this._selectinfo.index > -1) {
			var sel_index = this._selectinfo.index;
			if (sel_index != -1 && this.index == sel_index) {
				return false;
			}
		}
		else {
			var index = this._accessibility_index;
			if (shift_key) {
				if (index < 0) {
					return false;
				}
			}
			else {
				var totalcnt = this._get_contents_rows().length;
				if (index + 1 > totalcnt) {
					return false;
				}
			}
		}

		return this._want_tab;
	};

	_pListBox._getPreCalculateWantArrow = function (keycode) {
		if (nexacro._enableaccessibility && (nexacro._accessibilitytype == 4 || nexacro._accessibilitytype == 5)) {
			return true;
		}
		else if (keycode == nexacro.Event.KEY_UP) {
			var index = this._accessibility_index;
			if (index == 0 && !this._isAccessibilityEnable()) {
				return false;
			}
			else if (this._accessibility_index == -1) {
				var nex_idx = this._getNextAccessibilityOrderIndex(-1);

				if (nex_idx > -1) {
					return true;
				}
				else {
					return false;
				}
			}
		}
		else if (keycode == nexacro.Event.KEY_DOWN) {
			if (this.index) {
				var totalcnt = this._get_contents_rows().length;
				if (this.index > -1 && this._accessibility_index == -1) {
					return true;
				}
				else if (index >= totalcnt - 1 || this._getNextAccessibilityOrderIndex(1) >= totalcnt || this._getNextAccessibilityOrderIndex(1) < 0) {
					return false;
				}
			}
			else {
				return true;
			}
		}

		return this._want_arrow;
	};

	_pListBox._getNextAccessibilityOrderIndex = function (direction) {
		var cur_idx = this._accessibility_index;
		var ar = this._get_contents_rows();
		if (direction > 0) {
			for (var i = cur_idx + direction, n = ar.length; i < n; i++) {
				if (ar[i]._isAccessibilityEnable()) {
					return i;
				}
			}
			cur_idx = -1;
		}
		else if (direction < 0) {
			for (var i = cur_idx + direction; i >= 0; i--) {
				if (ar[i]._isAccessibilityEnable()) {
					return i;
				}
			}
			cur_idx = this._accessibility_index = -1;
		}

		return cur_idx;
	};

	_pListBox._do_scroll = function (dir) {
		var visible_start = this._get_first_visible_row();
		var rowheight = this._get_rowheight();

		var vscrollbar = this.vscrollbar;
		if (vscrollbar) {
			var idx = visible_start;

			if (dir == "down") {
				idx += 1;
			}
			else {
				if (vscrollbar.pos <= idx * rowheight) {
					idx -= 1;
				}
			}

			vscrollbar.set_pos(idx * rowheight);
			vscrollbar = null;
		}
	};

	_pListBox._select_add = function (selectIdx, isNotFireEvent) {
		if (selectIdx < 0 || selectIdx > this._innerdataset.getRowCount() - 1) {
			return;
		}
		var k = selectIdx + "";
		var info = this._select_multi;
		var old = info.map[k];

		if (typeof old != 'undefined') {
			return this._select_replace(k, selectIdx);
		}
		info.map[k] = selectIdx;
		info.length++;
		info.items.push(selectIdx);
		info.keys.push(k);

		this._changeIndex(selectIdx, undefined, undefined, "_select_add", isNotFireEvent);
	};

	_pListBox._select_replace = function (k, selectIdx) {
		var idx = this._select_indexOfkey(k);
		var info = this._select_multi;
		info.items[idx] = selectIdx;
		info.map[k] = selectIdx;
	};

	_pListBox._select_indexOfkey = function (k) {
		k += "";
		return nexacro._indexOf(this._select_multi.keys, k);
	};

	_pListBox._get_selectcount = function () {
		return this._select_multi.length;
	};

	_pListBox._select_remove = function (selectIdx) {
		var idx = this._select_indexOfkey(selectIdx);
		var info = this._select_multi;
		if (idx < info.length && idx >= 0) {
			info.length--;
			info.items.splice(idx, 1);
			var k = info.keys[idx];
			if (typeof k != 'undefined') {
				info.map[k] = undefined;
			}
			info.keys.splice(idx, 1);
			if (!this.multiselect && info.length == 0) {
				this.index = -1;
				this.text = "";
				this.value = undefined;
			}

			return selectIdx;
		}

		return false;
	};

	_pListBox._select_indexOf = function (selectIdx) {
		if (!this.multiselect) {
			return this._selectinfo ? this._selectinfo.index == selectIdx : -1;
		}
		else {
			return nexacro._indexOf(this._select_multi.items, selectIdx);
		}
	};

	_pListBox._get_selection_last = function () {
		var info = this._select_multi;
		return info.items[info.length - 1];
	};

	_pListBox._get_select_range = function (start, end) {
		var info = this._select_multi;
		var items = info.items, range = [], i;

		if (items.length < 1) {
			return range;
		}

		start = start || 0;
		end = Math.min(typeof end == 'undefined' ? info.length - 1 : end, info.length - 1);

		if (start <= end) {
			for (i = start; i <= end; i++) {
				range[range.length] = items[i];
			}
		}
		else {
			for (i = start; i >= end; i--) {
				range[range.length] = items[i];
			}
		}

		return range;
	};

	_pListBox._select_clear = function () {
		var items = this._get_contents_rows();
		var length = items.length;
		if (items) {
			for (var i = 0; i < length; i++) {
				items[i].set_selected(false);
			}
		}
		this._select_multi = {
			"items" : [], 
			"map" : {
			}, 
			"keys" : [], 
			"length" : 0, 
			"lastselected" : null
		};
	};

	_pListBox._is_selected = function (idx) {
		return this._select_indexOf(idx) !== -1;
	};

	_pListBox._select_range = function (startRow, endRow, keepExisting, dir) {
		if (!keepExisting) {
			this._deselect_all(true);
		}

		var selectedCount = 0, i, tmp, dontdeselect, rows = [], FinalRow = endRow;

		if (!nexacro._isNumber(startRow)) {
			startRow = 0;
		}
		if (!nexacro._isNumber(endRow)) {
			endRow = this._get_rowcount();
		}

		if (startRow > endRow) {
			tmp = endRow;
			endRow = startRow;
			startRow = tmp;
			FinalRow = tmp;
		}

		for (i = startRow; i <= endRow; i++) {
			if (this._is_selected(i)) {
				selectedCount++;
			}
		}

		if (!dir) {
			dontdeselect = -1;
		}
		else {
			dontdeselect = (dir == 'up') ? startRow : endRow;
		}

		for (i = startRow; i <= endRow; i++) {
			if (selectedCount == (endRow - startRow + 1)) {
				if (i != dontdeselect) {
					this._do_deselect(i, true);
				}
			}
			else {
				rows.push(i);
			}
		}
		this._do_multi_select(rows, true, true);
		this._changeIndex(FinalRow);
	};

	_pListBox._deselect_all = function (isNotFireEvent) {
		var i = 0, len = this._get_rowcount();

		for (; i < len; i++) {
			this._do_deselect(i, isNotFireEvent);
		}
	};

	_pListBox._do_select = function (rows, keepExisting, isNotFireEvent) {
		if (this.readonly) {
			return false;
		}
		var idx;

		if (typeof rows === "number") {
			rows = [rows];
		}

		if (this._get_select_mode() == "single" && rows) {
			idx = rows.length ? rows[0] : rows;
			this._do_single_select(idx, isNotFireEvent);
		}
		else {
			this._do_multi_select(rows, keepExisting, isNotFireEvent);
		}
	};

	_pListBox._do_deselect = function (rows, isNotFireEvent) {
		if (nexacro._isNumber(rows)) {
			rows = [rows];
		}
		else if (!nexacro._isArray(rows)) {
			rows = [rows];
		}

		var len = rows.length;
		var idx, i = 0, attempted = 0;
		var params = [0];
		var info = this._select_multi;

		for (; i < len; i++) {
			idx = rows[i];
			if (this._is_selected(idx)) {
				++attempted;
				this._on_select_change(idx, false, "deselect", params, isNotFireEvent);
			}
		}

		return params[0] === attempted;
	};

	_pListBox._select_commit = function (jobgbn, row, params, isNotFireEvent) {
		var info = this._select_multi;

		switch (jobgbn) {
			case "deselect":
				++(params[0]);
				this._select_remove(row);
				break;
			case "singleselect":
				var last_select_row = info.lastselected;
				this._select_add(row);
				if (last_select_row != row && this._get_selectcount() > 0 && this._do_deselect(last_select_row) === false) {
					return false;
				}
				params[0] = true;
				break;
			case "multiselect":
				this._select_add(row, isNotFireEvent);
				params[0] = true;
				break;
		}
	};

	_pListBox._do_single_select = function (idx, isNotFireEvent) {
		var params = [false];
		this._on_select_change(idx, true, "singleselect", params, isNotFireEvent);

		if (params[0]) {
			if (!isNotFireEvent) {
				this._set_last_selectfocused(idx);
			}
		}
	};

	_pListBox._do_multi_select = function (rows, keepExisting, isNotFireEvent) {
		var sel_row = rows[0];
		var single_sel = this._selectinfo.index;

		var len = rows.length;

		if (!keepExisting && this._get_selectcount() > 0) {
			if (this._do_deselect(this._get_select_range(), isNotFireEvent) === false) {
				return;
			}
		}

		var params = [false];
		var i = 0, idx;
		var info = this._select_multi;

		for (; i < len; i++) {
			idx = rows[i];
			if (keepExisting && this._is_selected(idx)) {
				continue;
			}
			this._on_select_change(idx, true, "multiselect", params, isNotFireEvent);
		}
		this._set_last_selectfocused(sel_row, isNotFireEvent);
	};

	_pListBox._set_last_selectfocused = function (idx, isNotFireEvent) {
		var rowBeforeLast = this._select_multi.lastselected;
		this._select_multi.lastselected = idx;

		if (idx !== rowBeforeLast) {
			this._on_last_selectfocuschanged(idx, isNotFireEvent);
		}
	};

	_pListBox._on_select_change = function (idx, isSelected, jobgbn, params, isNotFireEvent) {
		if (this._select_commit(jobgbn, idx, params, isNotFireEvent) !== false) {
			if (isSelected) {
				this._refresh_row(idx, "select", true);
			}
			else {
				this._refresh_row(idx, "select", false);
			}
		}
	};

	_pListBox._on_last_selectfocuschanged = function (newFocused, isNotFireEvent) {
		if (newFocused > -1) {
			var control_elem = this.getElement();
			var visible_start = this._get_first_visible_row();
			var visible_end = this._get_last_visible_row(true);

			if (this.vscrollbar) {
				if (newFocused <= visible_start) {
					this.vscrollbar.set_pos(newFocused * this._get_rowheight());
				}
				else if (newFocused >= visible_end) {
					if (control_elem) {
						if (this._get_rowcount() > newFocused) {
							var pos = (newFocused + 1) * this._get_rowheight() - control_elem.client_height;
							this.vscrollbar.set_pos(pos);
						}
					}
				}
			}
			else {
				var item = this._get_contents_rows();
				if (item[newFocused]) {
					var item_control_elem = item[newFocused].getElement();
					if (item_control_elem) {
						item_control_elem.setElementFocus();
					}
				}
			}
		}
	};

	_pListBox._search_style_obj = function (propobj, propid, idx) {
		if (propobj && propobj._bindtype != 0) {
			if (this._is_subcontrol) {
				return nexacro._getValueForStyleBindExpr(this.parent, propobj, propid, idx);
			}
			else {
				return nexacro._getValueForStyleBindExpr(this, propobj, propid, idx);
			}
		}
		else {
			return propobj;
		}
	};

	_pListBox._do_defocus = function (target, bParent) {
		var _window = this._getWindow();
		_window._removeFromCurrentFocusPath(target, true);
		if (bParent) {
			_window._removeFromCurrentFocusPath(this, true);
		}
	};

	_pListBox.applyto_bindSource = function (propid, Val) {
		if (this._apply_ds_val) {
			return true;
		}

		if (!this._bind_event) {
			return true;
		}

		var evt = {
			propid : propid, 
			val : Val
		};
		var ret = this._bind_event._fireEvent(this, evt);
		return ret;
	};

	_pListBox._changeIndex = function (v, bIgnoreCompareIdx, change_by_script, funcname, isNotFireEvent) {
		if (this.readonly) {
			return false;
		}

		if (bIgnoreCompareIdx || (v != this.index && !isNotFireEvent)) {
			var dataset = this._innerdataset;
			var postindex = parseInt(v, 10) | 0;

			var preidx = this.index;
			var pretext = this.text;
			var prevalue = this.value;

			var column = (this.codecolumn || this.datacolumn);
			if (dataset && column) {
				var datavalue = dataset.getColumn(postindex, this.datacolumn || this.codecolumn);
				var codevalue = dataset.getColumn(postindex, this.codecolumn || this.datacolumn);

				var posttext = datavalue == undefined ? "" : datavalue;
				var postvalue = codevalue;


				this._prevpos = this._vscrollpos;

				if (change_by_script != true) {
					if (this.on_fire_canitemchange(this, preidx, pretext, prevalue, postindex, posttext, postvalue) != false) {
						this._accessibility_index = this.index = postindex;
						this.text = posttext;
						if (!this._is_value_setting) {
							this.value = postvalue;
						}
						this.applyto_bindSource("value", codevalue);
						this.on_fire_onitemchanged(this, preidx, pretext, prevalue, postindex, posttext, postvalue);
						return true;
					}
				}
				else {
					this._accessibility_index = this.index = postindex;
					this.text = posttext;
					if (!this._is_value_setting) {
						this.value = postvalue;
					}
					this.applyto_bindSource("value", codevalue);
					return true;
				}
			}
		}

		return false;
	};

	delete _pListBox;
	_pListBox = null;

	nexacro.ListItemCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
		this._is_reference_control = false;

		this._accessibility_role = "listitem";

		this.index = "";
		this.value = undefined;
		this.selected = false;

		this._keep_selecting = false;
		this.wordwrap = "none";
	};

	var _pListItemCtrl = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.ListItemCtrl);
	nexacro.ListItemCtrl.prototype = _pListItemCtrl;

	_pListItemCtrl.destroy = function () {
		this._removeEventHandler("onlbuttondown", this.parent.on_notify_item_onlbuttondown, this.parent);
		this._removeEventHandler("ontouchstart", this.parent.on_notify_item_onlbuttondown, this.parent);
		this._removeEventHandler("ondblclick", this.parent.on_notify_item_ondblclick, this.parent);
		this._removeEventHandler("onmouseenter", this.parent.on_notify_item_onmouseenter, this.parent);
		this._removeEventHandler("onmouseleave", this.parent.on_notify_item_onmouseleave, this.parent);
		nexacro.Component.prototype.destroy.call(this);
	};

	_pListItemCtrl.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var style = this.on_find_CurrentStyle_font(pseudo);
		if (style != curstyle.font) {
			curstyle.font = style;
			this.on_apply_style_font(style);
		}

		style = this.on_find_CurrentStyle_color(pseudo);
		if (style != curstyle.color) {
			curstyle.color = style;
			this.on_apply_style_color(style);
		}

		style = this.on_find_CurrentStyle_align(pseudo);
		if (style != curstyle.align) {
			curstyle.align = style;
			this.on_apply_style_align(style);
		}

		style = this.on_find_CurrentStyle_linespace(pseudo);
		if (style != curstyle.linespace) {
			curstyle.linespace = style;
			this.on_apply_style_linespace(style);
		}
		style = this.on_find_CurrentStyle_accessibility(pseudo);
		if (style != curstyle.accessibility) {
			curstyle.accessibility = this._make_accessibility_value(style);
			this.on_apply_style_accessibility(curstyle.accessibility);
		}

		style = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (style != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = style;
			this.on_apply_style_rtlimagemirroring(curstyle.rtlimagemirroring);
		}

		style = null;
	};

	_pListItemCtrl.on_find_CurrentStyle_background = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_itembackground(pseudo);
		return this.parent._search_style_obj(propobj, "background", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_itemgradation(pseudo);
		return this.parent._search_style_obj(propobj, "gradation", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_border = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_itemborder(pseudo);
		return this.parent._search_style_obj(propobj, "border", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_itembordertype(pseudo);
		return this.parent._search_style_obj(propobj, "bordertype", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_padding = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_itempadding(pseudo);
		return this.parent._search_style_obj(propobj, "padding", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_color = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_color(pseudo);
		return this.parent._search_style_obj(propobj, "color", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_font = function (pseudo) {
		if ((this._keep_selecting || this.selected) && this.parent.enable) {
			pseudo = "selected";
		}

		var propobj = this.parent.on_find_CurrentStyle_font(pseudo);
		return this.parent._search_style_obj(propobj, "font", this.index);
	};

	_pListItemCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent.on_find_CurrentStyle_align(pseudo);
	};

	_pListItemCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itemaccessibility(pseudo);
	};

	_pListItemCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pListItemCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_cursor(pseudo);
	};

	_pListItemCtrl.on_apply_custom_setfocus = function (evt_name) {
		if (!this.parent._is_subcontrol && this.parent._pseudo == "focused") {
			nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
		}
	};

	_pListItemCtrl.isFocusAcceptable = function () {
		return nexacro._enableaccessibility;
	};

	_pListItemCtrl._getAccessibilityLabel = function (accessibility) {
		var flag = this.parent._is_first_focus;
		var label = "";
		if (flag && this._isAccessibilityEnable()) {
			var parent = this.parent;
			var p_accessibility = parent.on_find_CurrentStyle_accessibility(parent._pseudo);
			label = parent._getAccessibilityParentValue(p_accessibility);
		}
		label += " " + nexacro.Component.prototype._getAccessibilityLabel.call(this, accessibility);
		return label;
	};

	_pListItemCtrl._getAccessibilityRole = function (accessibility) {
		var role = "";
		if (this._isAccessibilityEnable()) {
			var parent = this.parent;
			if (parent._is_first_focus) {
				var p_accessibility = parent.on_find_CurrentStyle_accessibility(parent._pseudo);
				role = p_accessibility.role ? p_accessibility.role : parent._accessibility_role;
			}
			else {
				role = accessibility.role ? accessibility.role : this._accessibility_role;
			}
		}
		return role;
	};

	_pListItemCtrl._setAccessibilityStatFocus = function (evt_name) {
		var list = this.parent;

		if (!list._is_subcontrol && list._pseudo == "focused") {
			if (list.multiselect && list._shift_select_base_index && list._shift_select_base_index != this.index) {
				var item = list._get_contents_rows()[list._shift_select_base_index];
				if (item && item._pseudo == "selected") {
					var label = item._getAccessibilityLabel(item.on_find_CurrentStyle_accessibility(this._pseudo));
					label += " " + this._getAccessibilityLabel(this.on_find_CurrentStyle_accessibility(this._pseudo));
					this._setAccessibilityLabel(label);
				}
			}
			return nexacro.Component.prototype._setAccessibilityStatFocus.call(this, evt_name);
		}
	};

	_pListItemCtrl.on_get_style_accessibility_label = function () {
		return this.text;
	};

	_pListItemCtrl.set_index = function (v) {
		if (v !== this.index) {
			this.index = parseInt(v, 10);
		}
	};

	_pListItemCtrl.set_value = function (v) {
		if (v !== this.value) {
			this.value = v;
		}
	};

	_pListItemCtrl.set_selected = function (v) {
		if (v != this.selected) {
			this.selected = v;
			this.on_apply_selected();
		}
	};

	_pListItemCtrl.on_apply_selected = function () {
		this._control_pseudo = "";
		this._contents_pseudo = "";

		if (this.selected) {
			this._stat_change("select", "selected");
		}
		else {
			if (nexacro._enableaccessibility) {
				if (this._control_pseudo == "focused") {
					this._stat_change("notfocus", "normal");
				}
				else {
					this._stat_change("notselect", "normal");
				}
			}
			else {
				this._stat_change("notselect", "normal");
			}
		}
	};

	_pListItemCtrl.on_apply_mouseover = function (isovered) {
		if (isovered) {
			this._stat_change("notselect", "mouseover");
		}
		else {
			if (this.selected) {
				this._stat_change("select", "selected");
			}
			else {
				this._stat_change("notselect", "normal");
			}
		}
	};



	nexacro.ListBoxCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ListBox.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pListBoxCtrl = nexacro.ListBoxCtrl.prototype = nexacro._createPrototype(nexacro.ListBox, nexacro.ListBoxCtrl);

	_pListBoxCtrl._type_name = "ListBoxControl";

	nexacro._setForControlStyleFinder(_pListBoxCtrl);
	delete _pListBoxCtrl;
	_ListBoxCtrl = null;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Combo) {
	nexacro.ComboCloseUpEventInfo = function (obj, id, beforeIndex, beforeText, beforeValue, afterIndex, afterText, afterValue, isSelect) {
		this.id = this.eventid = id || "oncloseup";
		this.fromobject = this.fromreferenceobject = obj;

		this.posttext = afterText;
		this.pretext = beforeText;
		this.postvalue = afterValue;
		this.prevalue = beforeValue;
		this.postindex = afterIndex;
		this.preindex = beforeIndex;
		this.isselect = isSelect;
	};
	var _pComboCloseUpEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ComboCloseUpEventInfo);
	nexacro.ComboCloseUpEventInfo.prototype = _pComboCloseUpEventInfo;
	_pComboCloseUpEventInfo._type_name = "ComboCloseUpEventInfo";

	delete _pComboCloseUpEventInfo;
	_pComboCloseUpEventInfo = null;

	nexacro.Combo_Style = function (target, id) {
		nexacro.Style.call(this, target, id);

		this.itemheight = null;
		this.itembackground = null;
		this.itemcolor = null;
		this.itemfont = null;
		this.itemgradation = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itempadding = null;
		this.buttonsize = null;
		this.itemaccessibility = null;
		this.popuptype = null;
		this.displaynulltextcolor = null;
	};

	var _pComboStyle = nexacro._createPrototype(nexacro.Style, nexacro.Combo_Style);
	nexacro.Combo_Style.prototype = _pComboStyle;
	_pComboStyle._type_name = "ComboStyle";

	eval(nexacro._createValueAttributeEvalStr("_pComboStyle", "itemheight"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pComboStyle", "itembackground"));
	eval(nexacro._createColorAttributeEvalStr("_pComboStyle", "itemcolor"));
	eval(nexacro._createFontAttributeEvalStr("_pComboStyle", "itemfont"));
	eval(nexacro._createGradationAttributeEvalStr("_pComboStyle", "itemgradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pComboStyle", "itemborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pComboStyle", "itembordertype"));
	eval(nexacro._createPaddingAttributeEvalStr("_pComboStyle", "itempadding"));
	eval(nexacro._createValueAttributeEvalStr("_pComboStyle", "buttonsize"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pComboStyle", "itemaccessibility"));
	eval(nexacro._createValueAttributeEvalStr("_pComboStyle", "popuptype"));
	eval(nexacro._createColorAttributeEvalStr("_pComboStyle", "displaynulltextcolor"));


	_pComboStyle.__custom_emptyObject = function () {
		this.itemheight = null;
		this.itembackground = null;
		this.itemcolor = null;
		this.itemfont = null;
		this.itemgradation = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itempadding = null;
		this.buttonsize = null;
		this.itemaccessibility = null;
		this.popuptype = null;
		this.displaynulltextcolor = null;
	};

	_pComboStyle.__get_custom_style_value = function () {
		var val = "";
		var style = this.itemheight;
		if (style && style._is_empty) {
			val += "itemheight:" + style._value + "; ";
		}

		style = this.itembackground;
		if (style && style._is_empty) {
			val += "itembackground:" + style._value + "; ";
		}

		style = this.itemcolor;
		if (style && style.is_empty) {
			val += "itemcolor:" + style._value + "; ";
		}

		style = this.itemfont;
		if (style && style._is_empty) {
			val += "itemfont:" + style._value + "; ";
		}

		style = this.itemgradation;
		if (style && style._is_empty) {
			val += "itemgradation:" + style._value + "; ";
		}

		style = this.itemborder;
		if (style && style._is_empty) {
			val += "itemborder:" + style._value + "; ";
		}

		style = this.itembordertype;
		if (style && style._is_empty) {
			val += "itembordertype:" + style._value + "; ";
		}

		style = this.itempadding;
		if (style && style._is_empty) {
			val += "itempadding:" + style._value + "; ";
		}

		style = this.buttonsize;
		if (style && style._is_empty) {
			val += "buttonsize:" + style._value + "; ";
		}

		style = this.accessibility;
		if (style && style._is_empty) {
			val += "accessibility:" + style._value + "; ";
		}

		style = this.itemaccessibility;
		if (style && style._is_empty) {
			val += "itemaccessibility:" + style._value + "; ";
		}

		style = this.popuptype;
		if (style && style._is_empty) {
			val += "popuptype:" + style._value + "; ";
		}

		style = this.displaynulltextcolor;
		if (style && style._is_empty) {
			val += "displaynulltextcolor:" + style._value + "; ";
		}

		style = null;

		return val;
	};

	nexacro.Combo_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.itemheight = null;
		this.itembackground = null;
		this.itemcolor = null;
		this.itemfont = null;
		this.itemgradation = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itempadding = null;
		this.buttonsize = null;
		this.itemaccessibility = null;
		this.popuptype = null;
		this.displaynulltextcolor = null;
	};

	var _pComboCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Combo_CurrentStyle);
	nexacro.Combo_CurrentStyle.prototype = _pComboCurrentStyle;
	_pComboCurrentStyle._type_name = "ComboCurrentStyle";

	_pComboCurrentStyle.__custom_emptyObject = _pComboStyle.__custom_emptyObject;
	_pComboCurrentStyle.__get_custom_style_value = _pComboStyle.__get_custom_style_value;

	delete _pComboStyle;
	delete _pComboCurrentStyle;

	nexacro.Combo = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._selectinfo = {
			index : -1, 
			text : "", 
			value : undefined
		};

		this._eventinfo = {
			postindex : -1, 
			posttext : "", 
			postvalue : undefined, 
			preindex : -1, 
			pretext : "", 
			prevalue : undefined, 
			isselect : false
		};

		this.comboedit = null;
		this.dropbutton = null;
		this.combolist = null;
		this.popupwindow = null;

		this.value = undefined;
		this.index = -1;
		this.text = "";
		this.codecolumn = "";
		this.datacolumn = "";
		this.innerdataset = null;
		this.type = "dropdown";
		this.readonly = false;
		this.displayrowcount = -1;
		this.displaynulltext = "";
		this.autoselect = false;
		this.autoskip = false;
		this.usesoftkeyboard = true;
		this.imemode = "normal";
		this.inputtype = "normal";
		this.useime = "global";
		this.selectchangetype = "noboundup";
		this.usecontextmenu = true;
		this.overflowtextposition = "";

		this._exprcache = {
		};

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"oneditclick" : 1, 
			"ontextchanged" : 1, 
			"onitemclick" : 1, 
			"canitemchange" : 1, 
			"onitemchanged" : 1, 
			"ondropdown" : 1, 
			"oncloseup" : 1, 
			"ontextchange" : 1, 
			"onchar" : 1, 
			"cancharchange" : 1, 
			"oncontextmenu" : 1, 
			"onmousewheel" : 1
		};

		this._prevalue = undefined;
		this._preindex = -1;
		this._pretext = "";
		this._moverindex = -1;
		this._default_buttonsize = nexacro._getCachedStyleObj("buttonsize", "-1");
		this._innerdataset = null;
		this._filtereddataset = null;
		this._downkey = false;
		this._enterkey = false;
		this._keyval = undefined;
		this._text_change = false;
		this._want_arrows = true;
		this._accessibility_role = "combobox";
		this._has_inputElement = true;
		this._edit_base_api = null;
		this._is_recheck = false;
		this._scroll_proc = false;
		this._start_vscroll_pos = 0;
		this._is_notify_dropdown = false;
		this._is_force = false;
		this._init_value = undefined;
		this._init_index = -1;
		this._is_mouseover = false;
		this._textposition_timer = null;
	};

	var _pCombo = nexacro._createPrototype(nexacro.Component, nexacro.Combo);
	nexacro.Combo.prototype = _pCombo;
	_pCombo._type_name = "Combo";

	_pCombo.on_create_custom_style = function () {
		return new nexacro.Combo_Style(this);
	};

	_pCombo.on_create_custom_currentStyle = function () {
		return new nexacro.Combo_CurrentStyle();
	};

	_pCombo.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var style = this.on_find_CurrentStyle_itemheight(pseudo);
		if (style != curstyle.itemheight) {
			curstyle.itemheight = style;
			this.on_apply_style_itemheight(style);
		}



		style = this.on_find_CurrentStyle_itembackground(pseudo);
		if (style != curstyle.itembackground) {
			curstyle.itembackground = style;
			this.on_apply_style_itembackground(style);
		}

		style = this.on_find_CurrentStyle_itemcolor(pseudo);
		if (style != curstyle.itemcolor) {
			curstyle.itemcolor = style;
			this.on_apply_style_itemcolor(style);
		}

		style = this.on_find_CurrentStyle_itemfont(pseudo);
		if (style != curstyle.itemfont) {
			curstyle.itemfont = style;
			this.on_apply_style_itemfont(style);
		}

		style = this.on_find_CurrentStyle_itemgradation(pseudo);
		if (style != curstyle.itemgradation) {
			curstyle.itemgradation = style;
			this.on_apply_style_itemgradation(style);
		}

		style = this.on_find_CurrentStyle_itemborder(pseudo);
		if (style != curstyle.itemborder) {
			curstyle.itemborder = style;
			this.on_apply_style_itemborder(style);
		}

		style = this.on_find_CurrentStyle_itembordertype(pseudo);
		if (style != curstyle.itembordertype) {
			curstyle.itembordertype = style;
			this.on_apply_style_itembordertype(style);
		}

		style = this.on_find_CurrentStyle_itempadding(pseudo);
		if (style != curstyle.itempadding) {
			curstyle.itempadding = style;
			this.on_apply_style_itempadding(style);
		}

		style = this.on_find_CurrentStyle_itemaccessibility(pseudo);
		if (style != curstyle.itemaccessibility) {
			curstyle.itemaccessibility = style;
			this.on_apply_style_itemaccessibility(style);
		}

		style = this.on_find_CurrentStyle_buttonsize(pseudo);
		if (style != curstyle.buttonsize) {
			curstyle.buttonsize = style;
			this.on_apply_style_buttonsize(style);
		}

		style = this.on_find_CurrentStyle_align(pseudo);
		if (style != curstyle.align) {
			curstyle.align = style;
			this.on_apply_style_align(style);
		}

		style = this.on_find_CurrentStyle_font(pseudo);
		if (style != curstyle.font) {
			curstyle.font = style;
			this.on_apply_style_font(style);
		}

		style = this.on_find_CurrentStyle_letterspace(pseudo);
		if (style != curstyle.letterspace) {
			curstyle.letterspace = style;
			this.on_apply_style_letterspace(style);
		}

		style = this.on_find_CurrentStyle_color(pseudo, this.comboedit);
		if (style != curstyle.color) {
			curstyle.color = style;

			if (style != null) {
				this.on_apply_style_color(style);
			}
		}

		style = this.on_find_CurrentStyle_displaynulltextcolor(pseudo);
		if (style != curstyle.displaynulltextcolor) {
			curstyle.displaynulltextcolor = style;
			this.on_apply_style_displaynulltextcolor(style);
		}

		var popuptype = this.on_find_CurrentStyle_popuptype(pseudo);
		if (curstyle.popuptype != popuptype) {
			curstyle.popuptype = popuptype;
		}


		style = null;
	};

	_pCombo.on_find_CurrentStyle_itemheight = function (pseudo) {
		return this._find_pseudo_obj("itemheight", pseudo);
	};

	_pCombo.on_find_CurrentStyle_itembackground = function (pseudo) {
		return this._find_pseudo_obj("itembackground", pseudo, "background");
	};

	_pCombo.on_find_CurrentStyle_itemcolor = function (pseudo) {
		return this._find_pseudo_obj("itemcolor", pseudo, "color") || nexacro.Component._default_color;
	};

	_pCombo.on_find_CurrentStyle_itemfont = function (pseudo) {
		return this._find_pseudo_obj("itemfont", pseudo, "font");
	};

	_pCombo.on_find_CurrentStyle_itemgradation = function (pseudo) {
		return this._find_pseudo_obj("itemgradation", pseudo, "gradation");
	};
	_pCombo.on_find_CurrentStyle_itemborder = function (pseudo) {
		return this._find_pseudo_obj("itemborder", pseudo, "border");
	};

	_pCombo.on_find_CurrentStyle_itembordertype = function (pseudo) {
		return this._find_pseudo_obj("itembordertype", pseudo, "bordertype");
	};

	_pCombo.on_find_CurrentStyle_itempadding = function (pseudo) {
		return this._find_pseudo_obj("itempadding", pseudo, "padding") || nexacro.Component._default_padding;
	};

	_pCombo.on_find_CurrentStyle_itemaccessibility = function (pseudo) {
		return this._find_pseudo_obj("itemaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pCombo.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this._find_pseudo_obj("buttonsize", pseudo) || this._default_buttonsize;
	};

	_pCombo.on_find_CurrentStyle_popuptype = function (pseudo) {
		return this._find_pseudo_obj("popuptype", pseudo);
	};

	_pCombo.on_find_CurrentStyle_align = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("align", pseudo, "align") || this._find_pseudo_obj("align", pseudo, "align");
		}

		return this._find_pseudo_obj("align", pseudo, "align");
	};

	_pCombo.on_find_CurrentStyle_background = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("background", pseudo, "background") || this._find_pseudo_obj("background", pseudo, "background");
		}

		return this._find_pseudo_obj("background", pseudo, "background");
	};

	_pCombo.on_find_CurrentStyle_border = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("border", pseudo, "border") || this._find_pseudo_obj("border", pseudo, "border");
		}

		return this._find_pseudo_obj("border", pseudo, "border");
	};

	_pCombo.on_find_CurrentStyle_bordertype = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("bordertype", pseudo, "bordertype") || this._find_pseudo_obj("bordertype", pseudo, "bordertype");
		}

		return this._find_pseudo_obj("bordertype", pseudo, "bordertype");
	};

	_pCombo.on_find_CurrentStyle_color = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("color", pseudo, "color") || this._find_pseudo_obj("color", pseudo, "color");
		}

		return this._find_pseudo_obj("color", pseudo, "color");
	};

	_pCombo.on_find_CurrentStyle_font = function (pseudo, childctrl) {
		if (childctrl) {
			var font = childctrl._find_pseudo_obj("font", pseudo, "font");
			if (font) {
				return font;
			}
		}

		return nexacro.Component.prototype.on_find_CurrentStyle_font.call(this, pseudo);
	};

	_pCombo.on_find_CurrentStyle_displaynulltextcolor = function (pseudo, childctrl) {
		if (childctrl) {
			var displaynulltextcolor = childctrl._find_pseudo_obj("displaynulltextcolor", pseudo, "color") || this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		}
		else {
			var displaynulltextcolor = this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		}

		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_pseudo_obj("color", pseudo, "color");
		}
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}

		return (displaynulltextcolor) ? displaynulltextcolor : nexacro.Component._default_color;
	};

	_pCombo.on_find_CurrentStyle_gradation = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("gradation", pseudo, "gradation") || this._find_pseudo_obj("gradation", pseudo, "gradation");
		}

		return this._find_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pCombo.on_find_CurrentStyle_accessibility = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("accessibility", pseudo, "accessibility") || this._find_pseudo_obj("accessibility", pseudo, "accessibility");
		}

		return this._find_pseudo_obj("accessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pCombo.on_update_style_color = function () {
		this.on_apply_style_color(this.currentstyle.color = this.on_find_CurrentStyle_color(this._pseudo, this.comboedit));
	};

	_pCombo.on_update_style_itemheight = function () {
		this.on_apply_style_itemheight(this.currentstyle.itemheight = this.on_find_CurrentStyle_itemheight(this._pseudo));
	};

	_pCombo.on_update_style_itembackground = function () {
		this.on_apply_style_itembackground(this.currentstyle.itembackground = this.on_find_CurrentStyle_itembackground(this._pseudo));
	};

	_pCombo.on_update_style_itemcolor = function () {
		this.on_apply_style_itemcolor(this.currentstyle.itemcolor = this.on_find_CurrentStyle_itemcolor(this._pseudo));
	};

	_pCombo.on_update_style_displaynulltextcolor = function () {
		this.on_apply_style_displaynulltextcolor(this.currentstyle.displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(this._pseudo));
	};

	_pCombo.on_update_style_itemfont = function () {
		this.on_apply_style_itemfont(this.currentstyle.itemfont = this.on_find_CurrentStyle_itemfont(this._pseudo));
	};

	_pCombo.on_update_style_itemgradation = function () {
		this.on_apply_style_itemgradation(this.currentstyle.itemgradation = this.on_find_CurrentStyle_itemgradation(this._pseudo));
	};

	_pCombo.on_update_style_itemborder = function () {
		this.on_apply_style_itemborder(this.currentstyle.itemborder = this.on_find_CurrentStyle_itemborder(this._pseudo));
	};

	_pCombo.on_update_style_itembordertype = function () {
		this.on_apply_style_itembordertype(this.currentstyle.itembordertype = this.on_find_CurrentStyle_itembordertype(this._pseudo));
	};

	_pCombo.on_update_style_itempadding = function () {
		this.on_apply_style_itempadding(this.currentstyle.itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo));
	};

	_pCombo.on_update_style_itemaccessibility = function () {
		this.on_apply_style_itemaccessibility(this.currentstyle.itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo));
	};

	_pCombo.on_update_style_buttonsize = function () {
		this.on_apply_style_buttonsize(this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo));
	};

	_pCombo.on_update_style_popuptype = function () {
		this.currentstyle.popuptype = this.on_find_CurrentStyle_popuptype(this._pseudo);
	};


	_pCombo.on_apply_style_color = function (color) {
		if (this.comboedit) {
			this.comboedit.on_apply_style_color(this.comboedit.currentstyle.color = color);
		}
	};

	_pCombo.on_apply_style_displaynulltextcolor = function (color) {
		if (this.comboedit) {
			this.comboedit.on_apply_style_displaynulltextcolor(this.comboedit.currentstyle.displaynulltextcolor = color);
		}
	};

	_pCombo.on_apply_style_font = function (font) {
		if (this.comboedit) {
			this.comboedit.on_apply_style_font(this.comboedit.currentstyle.font = font);
		}
	};

	_pCombo.on_apply_style_letterspace = function (letterspace) {
		if (this.comboedit) {
			this.comboedit.on_apply_style_letterspace(this.comboedit.currentstyle.letterspace = letterspace);
		}
	};

	_pCombo.on_apply_style_align = function (align) {
		if (!align) {
			align = this.on_find_CurrentStyle_align(this._pseudo);
		}

		if (this.comboedit) {
			this.comboedit.style.set_align(align);
		}
	};

	_pCombo.on_apply_style_itemheight = function (v) {
		if (this.combolist) {
			this.combolist.on_update_style_itemheight();
		}
	};

	_pCombo.on_apply_style_itembackground = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_itembackground(v);
		}
	};

	_pCombo.on_apply_style_itemcolor = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_color(v);
		}
	};

	_pCombo.on_apply_style_itemfont = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_font(v);
		}
	};

	_pCombo.on_apply_style_itemgradation = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_itemgradation(v);
		}
	};

	_pCombo.on_apply_style_itemborder = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_itemborder(v);
		}
	};

	_pCombo.on_apply_style_itembordertype = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_itembordertype(v);
		}
	};

	_pCombo.on_apply_style_itempadding = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_itempadding(v);
		}
	};

	_pCombo.on_apply_style_itemaccessibility = function (v) {
		if (this.combolist) {
			this.combolist.on_apply_style_itemaccessibility(v);
		}
	};

	_pCombo.on_apply_style_buttonsize = function (v) {
		this._recalcLayout();
	};

	_pCombo.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		if (this.comboedit) {
			this.comboedit.on_apply_style_accessibility(accessibility);
		}
	};


	_pCombo.on_create_contents = function () {
		if (this.getElement()) {
			this.comboedit = new nexacro.ComboEditCtrl("comboedit", "absolute", 0, 0, 0, 0, null, null, this);
			this.dropbutton = new nexacro.ComboButtonCtrl("dropbutton", "absolute", 0, 0, 0, 0, null, null, this);

			this.comboedit.createComponent();
			this.dropbutton.createComponent();
		}
	};

	_pCombo.on_created_contents = function () {
		this.on_apply_autoskip();
		this.on_apply_displaynulltext();
		this.on_apply_imemode();
		this.on_apply_type();
		this.on_apply_autoselect();
		this.on_apply_style_displaynulltextcolor(this.currentstyle.displaynulltextcolor);

		if (this.value === undefined) {
			this.value = this._init_value;
			this.index = this._init_index;
		}

		if (this.value !== undefined) {
			this.on_apply_value();
			this.applyto_bindSource("value", this.value);
		}
		else if (this.index > -1) {
			this.on_apply_index();
		}
		else if (this.text !== "") {
			if (!this._innerdataset) {
				this.on_apply_text();
			}
			else {
				this.on_apply_index();
			}
		}

		this.on_apply_usecontextmenu();

		this._setEventHandler("onmousewheel", this.on_notify_combo_mousewheel, this);

		this.comboedit._setEventHandler("oneditclick", this.on_notify_edit_oneditclick, this);
		this.comboedit._setEventHandler("ontextchanged", this.on_notify_edit_ontextchanged, this);
		this.comboedit._setEventHandler("ontextchange", this.on_notify_edit_ontextchange, this);
		this.comboedit._setEventHandler("onchar", this.on_notify_edit_onchar, this);
		this.comboedit._setEventHandler("cancharchange", this.on_notify_edit_cancharchange, this);

		if (!nexacro.isTouchInteraction && !nexacro.SupportTouch) {
			this.comboedit._setEventHandler("onlbuttondown", this.on_notify_edit_onlbuttondown, this);
			this.dropbutton._setEventHandler("onlbuttondown", this.on_notify_ondropdown, this);

			this.comboedit._setEventHandler("onmouseenter", this.on_notify_edit_onmouseenter, this);
			this.comboedit._setEventHandler("onmouseleave", this.on_notify_edit_onmouseleave, this);
		}

		this.comboedit.on_created();
		this._edit_base_api = this.comboedit._edit_base_api;
		this.dropbutton.on_created();

		this._setEditReaonly();

		if (nexacro._enableaccessibility) {
			this._want_arrows = false;
			this._setAccessibilityActiveDescendant(this.comboedit);
			this._setAccessibilityStatAutoComplete("list");

			this.on_apply_style_itemaccessibility(this.currentstyle.itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo));
		}

		this.on_apply_style_align(this.currentstyle.align);
		this.on_apply_style_cursor(this.currentstyle.cursor);
		this.on_apply_style_letterspace(this.currentstyle.letterspace);

		this.on_apply_prop_rtldirection();

		if (this.innerdataset && this.value && this.index == -1) {
			this.comboedit._setValue("");
		}
		else if (!this.innerdataset || this.index == -1) {
			this._is_force = true;
			this.set_text("");
			this._is_force = false;
			var api = this.comboedit._edit_base_api;
			api._undoStack.init();
		}
	};

	_pCombo.on_destroy_contents = function () {
		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
		}

		var form = this._getRootForm();
		if (form) {
			form._bind_manager._dettachSBindItem(this);
		}

		if (this.comboedit) {
			this.comboedit.destroy();
			this.comboedit = null;
		}
		if (this.dropbutton) {
			this.dropbutton.destroy();
			this.dropbutton = null;
		}
		if (this.combolist) {
			this.combolist.destroy();
			this.combolist = null;
		}
		if (this.popupwindow) {
			this.popupwindow.destroy();
			this.popupwindow = null;
		}

		if (this._innerdataset) {
			this._innerdataset._removeEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
			this._innerdataset._removeEventHandler("onrowsetchanged", this._callback_onrowsetchanged, this);
		}
		this._innerdataset = null;
		this.innerdataset = null;
		this._filtereddataset = null;
		this._selectinfo = null;
		this._eventinfo = null;
		this._exprcache = null;
		this._default_buttonsize = null;
	};

	_pCombo.on_change_containerRect = function (container_width, container_height) {
		this._recalcLayout();
	};

	_pCombo.on_apply_custom_setfocus = function (evt_name) {
		var comboedit = this.comboedit;

		try {
			if (this._textposition_timer) {
				this._textposition_timer.destroy();
				this._textposition_timer = null;
			}

			comboedit._stat_change("focus", "focused");

			if (nexacro._enableaccessibility) {
				if (!(nexacro.isTouchInteraction && nexacro.SupportTouch) || !nexacro.SupportTouch || (nexacro._isMobile && !nexacro._isMobile())) {
					comboedit.on_apply_custom_setfocus(true, evt_name);
				}
				else {
					nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
				}
			}
			else {
				var mobile = (nexacro.isTouchInteraction && nexacro.SupportTouch) || (nexacro._isMobile && nexacro._isMobile());
				if (evt_name == "focus" || evt_name == "tabkey" || evt_name == "shifttabkey" || (!mobile && !evt_name)) {
					if (!mobile) {
						comboedit._on_focus(true, evt_name);
					}
					else {
						nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
					}
				}
			}
		}
		catch (e) {
		}
	};

	_pCombo.on_getBindableProperties = function () {
		return "value";
	};

	_pCombo._callback_onvaluechanged = function (obj, e) {
		if (this.type == "filter" || this.type == "filterlike") {
			this._createFilteredDataset();
		}

		this._recheckValue();
		this._is_recheck = true;

		var combolist = this.combolist;
		if (combolist) {
			combolist._recreate_data(true);
		}
	};

	_pCombo._callback_onrowsetchanged = function (obj, e) {
		if (e.reason == 22 || e.reason == 31) {
			if (this.type == "filter" || this.type == "filterlike") {
				this._createFilteredDataset();
			}
		}
		else if (e.reason == 10) {
			this.set_index(-1);
		}


		if (this._is_recheck == false) {
			this._recheckValue();
			this._is_recheck = true;
		}
	};

	_pCombo.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);

		var enable = v;
		if (v == undefined) {
			enable = this.enable;
		}

		if (this.comboedit) {
			this.comboedit._setEnable(enable);
		}
		if (this.dropbutton) {
			this.dropbutton._setEnable(enable);
		}
		if (this.combolist) {
			this.combolist._setEnable(enable);
		}
	};

	_pCombo.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		var _rtldirection = this._rtldirection;

		if (this.comboedit) {
			this.comboedit._setRtlDirection(_rtldirection);
		}
		if (this.dropbutton) {
			this.dropbutton._setRtlDirection(_rtldirection);
		}
		if (this.combolist) {
			this.combolist._setRtlDirection(_rtldirection);
		}
	};

	_pCombo.on_apply_custom_class = function () {
		if (this.comboedit) {
			this.comboedit.on_apply_prop_class();
		}
		if (this.dropbutton) {
			this.dropbutton.on_apply_prop_class();
		}
		if (this.combolist) {
			this.combolist.on_apply_prop_class();
		}
	};

	_pCombo.on_init_bindSource = function (columnid, propid, ds) {
		if (this.type == "filter" || this.type == "filterlike") {
			this._createFilteredDataset();
		}

		this._prevalue = undefined;
		this._preindex = -1;
		this._pretext = "";
		this.value = undefined;

		this.index = -1;
		this.text = "";

		this._eventinfo.preindex = -1;
		this._eventinfo.pretext = "";
		this._eventinfo.prevalue = undefined;
		this._eventinfo.postindex = -1;
		this._eventinfo.posttext = "";
		this._eventinfo.postvalue = undefined;

		this.redraw();
		return true;
	};

	_pCombo.on_change_bindSource = function (propid, pSendDataset, rowIdx, colIdx, colArrayIdx) {
		if (propid !== "value" || !pSendDataset || rowIdx < -1 || colIdx < -1) {
			return false;
		}

		if (this.type == "filter" || this.type == "filterlike") {
			this._createFilteredDataset();
		}

		var value = pSendDataset.getColumn(rowIdx, colIdx);

		if (!this._is_created) {
			if (this._init_value != undefined
				 && this._init_value != value) {
				this.on_apply_value();
				return;
			}
		}

		if (this.value == value) {
			return true;
		}

		this._prevalue = this.value;
		this._preindex = this.index;
		this._pretext = this.text;
		this.value = value;

		this.index = this._getIndex(value);
		this.text = this._getItemText(this.index);

		var combolist = this.combolist;
		if (combolist) {
			combolist.set_index(this.index);
		}

		if (this.index == -1 && !this._innerdataset) {
			this.index = rowIdx;
			this.text = value;
		}

		this._eventinfo.preindex = this._preindex;
		this._eventinfo.pretext = this._pretext;
		this._eventinfo.prevalue = this._prevalue;
		this._eventinfo.postindex = this.index;
		this._eventinfo.posttext = this.text;
		this._eventinfo.postvalue = this.value;

		this.redraw();
		return true;
	};

	_pCombo.on_update_position = function (resize_flag, move_flag) {
		nexacro.Component.prototype.on_update_position.call(this, resize_flag, move_flag);

		if (this._isPopupVisible()) {
			if (resize_flag || move_flag) {
				this._closePopup();
				return;
			}

			this._update_popupwindow_position();

			if (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser == "Runtime") {
				var pThis = this;

				var _observer = this._popupwindow_position_observer;
				if (_observer) {
					if (_observer._interval_timer) {
						_observer._interval_timer.stop();
						delete _observer._interval_timer;
						_observer._interval_timer = null;
					}
					this._popupwindow_position_observer = null;
				}

				var control_elem = this._control_element;
				_observer = this._popupwindow_position_observer = {
				};
				_observer._observed_count = 0;
				_observer._elem_pos = nexacro._getElementPositionInFrame(control_elem);
				_observer._interval_timer = new nexacro.CallbackTimer(this, function () {
					if (++_observer._observed_count >= 50) {
						_observer._interval_timer.destroy();
						delete _observer._interval_timer;
						_observer._interval_timer = null;
						return;
					}

					var cur_elem_pos = nexacro._getElementPositionInFrame(control_elem);
					if (_observer._elem_pos.x != cur_elem_pos.x || _observer._elem_pos.y != cur_elem_pos.y) {
						pThis._update_popupwindow_position();
						_observer._observed_count = 50;
					}
				}, 100);
				_observer._interval_timer.start();
			}
		}
	};

	_pCombo._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		if (keycode == nexacro.Event.KEY_UP || keycode == nexacro.Event.KEY_DOWN) {
			if (ctrlKey || altKey) {
				return {
					want_tab : false, 
					want_return : false, 
					want_escape : false, 
					want_chars : false, 
					want_arrows : true
				};
			}
		}

		return {
			want_tab : false, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : this._want_arrows
		};
	};

	_pCombo.on_get_style_accessibility_label = function () {
		return "";
	};

	_pCombo._getAccessibilityReadLabel = function (bwholeread) {
		var _readlabel = nexacro.Component.prototype._getAccessibilityReadLabel.call(this);
		if (bwholeread && this.comboedit._input_element && this._status != "focus") {
			if (!this.comboedit._input_element._wantAccessibilityAdditionalLabel
				 || !this.comboedit._input_element._wantAccessibilityAdditionalLabel()) {
				_readlabel = this.text + " " + _readlabel;
			}
		}
		return _readlabel;
	};

	_pCombo._isItemAccessibilityEnable = function () {
		return false;
	};

	_pCombo.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}
		v = nexacro._toBoolean(v);

		if (v != this.visible) {
			nexacro.Component.prototype.set_visible.call(this, v);
			if (!v && this._is_created) {
				this.closeDropdown();
			}
		}
	};

	_pCombo.set_value = function (v) {
		if (v != this.value) {
			this._prevalue = this.value;
			this.value = v;
			if (!this._is_created) {
				this._init_value = this.value;
			}
			this.on_apply_value();
			if (this._is_created && this.value === undefined && !nexacro._isNull(v)) {
				this.value = v;
			}
			else {
				this.applyto_bindSource("value", this.value);
			}
		}
	};

	_pCombo.on_apply_value = function () {
		if (this.getElement()) {
			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;

			if (ds) {
				var row_count = ds.getRowCount();
				for (var i = 0; i < row_count; i++) {
					var item_value = this._getItemValue(i);

					if (item_value instanceof nexacro.Decimal && this.value instanceof nexacro.Decimal) {
						if (item_value.isEqual(this.value)) {
							this.index = i;
							this.text = this._getItemText(this.index);
							this._preindex = this.index;
							this._prevalue = this.value;

							this.redraw();
							this._refreshAccessibilityValue();

							return;
						}
					}
					else {
						var newval = this.value;

						if (newval instanceof nexacro.Decimal) {
							newval = newval.toString();
						}
						else if (item_value instanceof nexacro.Decimal) {
							item_value = item_value.toString();
						}

						if (this.value == item_value) {
							if (item_value === 0) {
								item_value = item_value + "";
							}
							if (newval === 0) {
								newval = newval + "";
							}

							if (item_value == newval) {
								this.index = i;
								this.text = this._getItemText(this.index);
								this._preindex = this.index;
								this._prevalue = this.value;

								this.redraw();
								this._refreshAccessibilityValue();
								return;
							}
						}
					}
				}

				if (this._is_created) {
					this.value = undefined;
				}
				this.index = -1;
				this.text = "";
				this._refreshAccessibilityValue();
			}

			this._preindex = this.index;
			this._prevalue = this.value;
			this.redraw();
			this._refreshAccessibilityValue();
		}
	};

	_pCombo.set_index = function (v) {
		if (v != this.index) {
			var ds;
			if (this.type == "filter" || this.type == "filterlike") {
				ds = this._filtereddataset;
			}
			else {
				ds = this._innerdataset;
			}

			if (ds) {
				if (v !== undefined) {
					v = parseInt(v, 10) | 0;
				}

				this._preindex = this.index;
				this._pretext = this.text;
				this._prevalue = this.value;
				this.index = v;
				if (v >= 0 && ds && v < ds.getRowCount()) {
					this.value = this._getItemValue(v);
					this.text = this._getItemText(v);
				}
				if (!this._is_created) {
					this._init_index = this.index;
				}
				this.on_apply_index();
			}
		}
	};

	_pCombo.on_apply_index = function () {
		if (this.getElement()) {
			var ds = this._innerdataset;
			var index = this.index;

			if (index >= 0 && ds && index < ds.getRowCount()) {
				this.value = this._getItemValue(index);
				this.text = this._getItemText(index);

				this._eventinfo.preindex = this._preindex;
				this._eventinfo.pretext = this._pretext;
				this._eventinfo.prevalue = this._prevalue;
				this._eventinfo.postindex = this.index;
				this._eventinfo.posttext = this.text;
				this._eventinfo.postvalue = this.value;

				if (this.applyto_bindSource("value", this.value) === false && !nexacro._isNull(this.value)) {
					this.index = this._preindex;
					this.value = this._prevalue;
					this.text = this._getItemText(this.index);
				}

				var combolist = this.combolist;
				if (combolist) {
					if (this.type == "filter" || this.type == "filterlike") {
						var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
						fds.set_filterstr("");
					}
					combolist.set_index(this.index);
				}
				combolist = null;

				this.redraw();
				this._refreshAccessibilityValue();

				return;
			}

			this.index = -1;
			this.value = undefined;
			this.text = "";

			if (ds) {
				if (this.applyto_bindSource("value", this.value) === false) {
					this.index = this._preindex;
					this.value = this._prevalue;
					if (this.index != -1) {
						this.text = this._getItemText(this.index);
					}
				}
			}
			this._preindex = this.index;
			this._prevalue = this.value;
			this.redraw();
			this._refreshAccessibilityValue();
		}
	};

	_pCombo.set_text = function (v) {
		if (v != this.text || this._is_force) {
			this._pretext = this.text;
			this.text = v == undefined ? "" : v;
			this.on_apply_text();
		}
	};

	_pCombo.on_apply_text = function () {
		if (this.getElement()) {
			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;

			if (!ds || (!this.datacolumn && !this.codecolumn)) {
				if (this.comboedit._input_element._value == undefined || this._pretext != "") {
					if (this.value) {
						this._setEditValue(this.text);
					}
					else {
						if (this.displaynulltext || this.text == "") {
							this._setEditValue(undefined);
						}
						else {
							this._setEditValue(this.text);
						}
					}
				}
				this._refreshAccessibilityValue();
				return;
			}

			if (ds && this._is_created) {
				var row_count = ds.getRowCount();
				for (var i = 0; i < row_count; i++) {
					if (this.text == this._getItemText(i)) {
						this.index = i;
						this.value = this._getItemValue(i);

						if (this.applyto_bindSource("value", this.value) === false) {
							this.index = this._preindex;
							this.value = this._prevalue;
						}

						this._preindex = this.index;
						this._prevalue = this.value;

						this.redraw();
						this._refreshAccessibilityValue();
						return;
					}
				}
				this.value = undefined;
				this.text = "";
			}
			this._preindex = this.index;
			this._prevalue = this.value;
			this.redraw();
			this._refreshAccessibilityValue();
		}
	};

	_pCombo.set_codecolumn = function (v) {
		if (v != this.codecolumn) {
			this.codecolumn = v;
			this.on_apply_codecolumn();
		}
	};

	_pCombo.on_apply_codecolumn = function () {
		if (this.combolist) {
			this.combolist.set_codecolumn(this.codecolumn);
		}
		if (this.type == "filter" || this.type == "filterlike") {
			this._createFilteredDataset();
		}
		this._recheckValue();
		this._is_recheck = true;
	};

	_pCombo.set_datacolumn = function (v) {
		if (v != this.datacolumn) {
			this.datacolumn = v;
			this.on_apply_datacolumn();
		}
	};

	_pCombo.on_apply_datacolumn = function () {
		if (this.combolist) {
			this.combolist.set_datacolumn(this.datacolumn);
		}
		if (this.type == "filter" || this.type == "filterlike") {
			this._createFilteredDataset();
		}
		this._recheckValue();
		this._is_recheck = true;
	};

	_pCombo.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset || (typeof obj == "object" && obj._type_name == "Dataset")) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
			this._recheckValue();
			this._is_recheck = true;
		}
	};

	_pCombo._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pCombo.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pCombo.set_innerdataset = function (str) {
		this.innerdataset = "";

		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
	};

	_pCombo.on_apply_innerdataset = function () {
		var ds = this._innerdataset;
		if (this.combolist) {
			this.combolist.setInnerDataset(ds);
		}

		if (ds) {
			ds._setEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
			ds._setEventHandler("onrowsetchanged", this._callback_onrowsetchanged, this);

			if (this.type == "filter" || this.type == "filterlike") {
				this._createFilteredDataset();
			}
		}
	};

	_pCombo.set_displayrowcount = function (v) {
		if (v != this.displayrowcount) {
			this.displayrowcount = v;
		}
	};

	_pCombo.set_autoselect = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.autoselect) {
			this.autoselect = v;
			this.on_apply_autoselect();
		}
	};

	_pCombo.on_apply_autoselect = function () {
		if (this.type == "search") {
			this.comboedit && this.comboedit.set_autoselect(this.autoselect);
		}
		else {
			this.comboedit && this.comboedit.set_autoselect(false);
		}
	};

	_pCombo.set_autoskip = function (v) {
		if (v != this.autoskip) {
			this.autoskip = v;
			this.on_apply_autoskip();
		}
	};

	_pCombo.on_apply_autoskip = function () {
		this.comboedit && this.comboedit.set_autoskip(this.autoskip);
	};

	_pCombo.set_displaynulltext = function (v) {
		if (v != this.displaynulltext) {
			this.displaynulltext = v;
			this.on_apply_displaynulltext();
		}
	};

	_pCombo.on_apply_displaynulltext = function () {
		this.comboedit && this.comboedit.set_displaynulltext(this.displaynulltext);
	};

	_pCombo.set_type = function (v) {
		if (v != this.type) {
			this.type = v;
			this.on_apply_type();
		}
	};

	_pCombo.on_apply_type = function () {
		if (this.getElement()) {
			if (this._filtereddataset) {
				this._filtereddataset.filter("");
			}

			this._setEditReaonly();
			this.comboedit.set_readonly(this.readonly);
			this.on_apply_autoselect();
		}
	};

	_pCombo.set_usesoftkeyboard = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usesoftkeyboard) {
			this.usesoftkeyboard = v;
			this.on_apply_usesoftkeyboard();
		}
	};

	_pCombo.on_apply_usesoftkeyboard = function () {
		var input_elem = this.comboedit ? this.comboedit._input_element : null;
		if (input_elem) {
			input_elem.setElementUseSoftKeyboard(this.usesoftkeyboard);
		}
	};

	_pCombo.set_imemode = function (v) {
		this.imemode = nexacro._toString(v);
		this.on_apply_imemode();
	};

	_pCombo.on_apply_imemode = function () {
		this.comboedit && this.comboedit.set_imemode(this.imemode);
	};

	_pCombo.set_inputtype = function (v) {
	};

	_pCombo.set_comboedit = function (v) {
	};

	_pCombo.set_combolist = function (v) {
	};

	_pCombo.set_popupwindow = function (v) {
	};

	_pCombo.set_readonly = function (v) {
		v = nexacro._toBoolean(v);

		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pCombo.on_apply_readonly = function () {
		var v = this.readonly;

		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		if (this.comboedit) {
			this.comboedit.set_readonly(v);
			if (v === false) {
				this._setEditReaonly();
			}
		}
	};


	_pCombo.set_usecontextmenu = function (v) {
		v = nexacro._toBoolean(v);

		if (v != this.usecontextmenu) {
			this.usecontextmenu = v;
			this.on_apply_usecontextmenu();
		}
	};

	_pCombo.on_apply_usecontextmenu = function () {
		var comboedit = this.comboedit;
		if (comboedit) {
			comboedit.set_usecontextmenu(this.usecontextmenu);
		}
	};

	_pCombo.set_useime = function (v) {
	};

	_pCombo.set_selectchangetype = function (v) {
		this.selectchangetype = nexacro._toString(v);
	};

	_pCombo.set_overflowtextposition = function (v) {
		v = nexacro._toString(v);
		if (v != this.overflowtextposition) {
			this.overflowtextposition = v;
		}
	};

	_pCombo.redraw = function () {
		var combolist = this.combolist;


		if (this.comboedit) {
			if (this.text || !nexacro._isNull(this.value)) {
				this._setEditValue(this.text);
			}
			else {
				this._setEditValue(undefined);
			}
		}

		this._moverindex = this.index;
		combolist = null;
	};

	_pCombo.dropdown = function () {
		if (this.enable === false || this.readonly === true || this.visible === false) {
			return;
		}

		var ds;
		if (!this.isDropdown()) {
			if (this.type == "filter" || this.type == "filterlike") {
				ds = this._filtereddataset;
				if (ds) {
					ds.set_filterstr("");
				}
				else {
					ds = this._getFilteredDataset();
				}
			}
			else {
				ds = this._innerdataset;
			}

			if (ds && ds.rowcount == 0) {
				ds = this._innerdataset;
			}

			this.setFocus(false);

			this._showPopup(ds, this.index);
		}
	};

	_pCombo.isDropdown = function () {
		if (!this.popupwindow) {
			return false;
		}
		return this.popupwindow._is_popup();
	};

	_pCombo.getSelect = function () {
		if (this._control_element) {
			return this.comboedit.getSelect();
		}
	};

	_pCombo.getCount = function () {
		if (this._control_element) {
			if (this.combolist) {
				return this.combolist.getCount();
			}
			else if (this._innerdataset) {
				return this._innerdataset.getRowCount();
			}
			else {
				return 0;
			}
		}
	};

	_pCombo.getSelectedText = function () {
		if (this._control_element) {
			return this.comboedit.getSelectedText();
		}
	};

	_pCombo.getCaretPos = function () {
		if (this.readonly) {
			return -1;
		}

		if (this._control_element) {
			return this.comboedit.getCaretPos();
		}
	};

	_pCombo.setCaretPos = function (v) {
		if (this._control_element) {
			return this.comboedit.setCaretPos(v);
		}
	};

	_pCombo.setSelect = function (start, end) {
		if (this._control_element) {
			return this.comboedit.setSelect(start, end);
		}
	};

	_pCombo.setSelectedText = function (v) {
		if (this._control_element) {
			return this.comboedit.setSelectedText(v);
		}
	};

	_pCombo.closeDropdown = function (obj, e) {
		if (this.isDropdown()) {
			this.popupwindow._closePopup();
		}
	};

	_pCombo.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		return this.applyto_bindSource("value", this.value);
	};

	_pCombo.isAboveSelected = function () {
	};

	_pCombo.on_notify_ondropdown = function (obj, e) {
		if (this.readonly) {
			return false;
		}

		var ds = this._innerdataset;

		if (this._isPopupVisible() == true) {
			this.popupwindow._closePopup();
		}
		else {
			var comboedit = this.comboedit;
			if (!(nexacro.isTouchInteraction || nexacro.SupportTouch || (nexacro._isMobile && nexacro._isMobile())) && comboedit && comboedit._edit_base_api) {
				if (nexacro.Browser == "Runtime" && comboedit._input_element) {
					comboedit._input_element.setScrollLeft(0);
				}
				comboedit.setSelect(0, 0);
				comboedit._edit_base_api._set_input_begin_pos(0);
				comboedit._restoreSelect();
			}

			if (this.combolist && (this.type == "filter" || this.type == "filterlike")) {
				if (this._filtereddataset) {
					this._filtereddataset.set_filterstr("");
				}


				var index = this.index;
				if (this.text != this._getItemText(index)) {
					for (var i = 0, items = ds.getRowCount(); i < items; i++) {
						if (this.text == this._getItemText(i)) {
							index = i;
							break;
						}
					}
				}

				this._showPopup(ds, index);
			}
			else {
				this._showPopup(ds, this.index);
			}
		}

		return false;
	};

	_pCombo.on_notify_item_onlbuttonup = function () {
		if (!this.combolist) {
			return false;
		}

		if (this.selectchangetype != "noboundup") {
			return false;
		}

		if (this._isPopupVisible()) {
			if (!this._scroll_proc) {
				this.popupwindow._closePopup();
			}
		}

		return false;
	};
	_pCombo.on_notify_item_canitemchange = function (obj, e) {
		var eventinfo = e, retv;
		if (this.type == "filter" || this.type == "filterlike") {
			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			var raw_post_index = this._getRawIndex(fds, e.postindex);
			raw_post_index = (raw_post_index == -1) ? e.postindex : raw_post_index;
		}
		else {
			raw_post_index = e.postindex;
		}

		if (retv = this.on_fire_canitemchange(obj, this.index, this.text, this.value, raw_post_index, e.posttext, e.postvalue)) {
			eventinfo.preindex = eventinfo.postindex;
			eventinfo.pretext = eventinfo.posttext;
			eventinfo.prevalue = eventinfo.postvalue;

			eventinfo.postindex = raw_post_index;
			eventinfo.posttext = e.posttext;
			eventinfo.postvalue = e.postvalue;

			this._setIndex(raw_post_index);

			if (this._isPopupVisible()) {
				if (!this._scroll_proc) {
					this.popupwindow._closePopup();
				}
			}
		}
		else {
			if (this._isPopupVisible()) {
				if (!this._scroll_proc) {
					this.popupwindow._closePopup();
				}
			}

			if (this.type == "filter" || this.type == "filterlike") {
				fds.set_filterstr("");
			}
		}

		if (this.comboedit) {
			if (this.autoskip && this.type == "search" && this._refform.getNextComponent(this, true) != this) {
				return retv;
			}

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
				var win = this._getWindow();
				if (win) {
					win._removeFromCurrentFocusPath(this, true);
				}
			}

			var last_focused = this._find_lastFocused();
			if ((last_focused && last_focused.id == this.id) || this._is_subcontrol) {
				this.comboedit._setFocus(false);
			}
		}

		return retv;
	};

	_pCombo.on_notify_item_onitemclick = function (obj, e) {
		if (!this.combolist || !this.comboedit) {
			return false;
		}

		this.on_fire_onitemclick(obj, e.index, e.itemtext, e.itemvalue, e.button, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.screenX, e.screenY, e.canvasX, e.canvasY, e.clientX, e.clientY);

		if (e.index == this.index) {
			if (this.type == "filter" || this.type == "filterlike") {
				var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
				var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;
				var curidx = this._getRawIndex(ds, e.index);

				if (curidx != this.index) {
					return;
				}
			}

			var eventinfo = e;
			this.on_fire_canitemchange(obj, this.index, this.text, this.value, e.index, e.itemtext, e.itemvalue);

			if (this._isPopupVisible()) {
				if (!this._scroll_proc) {
					this.popupwindow._closePopup();
				}

				if (this.comboedit) {
					if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
						var win = this._getWindow();
						if (win) {
							win._removeFromCurrentFocusPath(this, true);
						}
					}
					this.comboedit._setFocus(false);
				}
				else {
					this._setFocus(false);
				}
			}
		}
	};

	_pCombo.on_notify_item_onitemchanged = function (obj, e) {
		if (!this.combolist || !this.comboedit) {
			return false;
		}

		var curidx = e.postindex;
		var codecol = this.codecolumn;
		var datacol = this.datacolumn;
		var ds;

		if (this.type == "filter" || this.type == "filterlike") {
			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;
			curidx = this._getRawIndex(ds, curidx);
			ds = this._filtereddataset;
			fds.set_filterstr("");
		}
		else {
			ds = this._innerdataset;
		}

		var sel_info = this._selectinfo;
		var ei = {
			preindex : this.index, 
			pretext : this.text, 
			prevalue : this.value, 
			postindex : curidx, 
			posttext : ds.getColumn(curidx, datacol || codecol), 
			postvalue : ds.getColumn(curidx, codecol || datacol)
		};

		this._eventinfo.preindex = ei.preindex;
		this._eventinfo.pretext = ei.pretext;
		this._eventinfo.prevalue = ei.prevalue;
		this._eventinfo.postindex = ei.postindex;
		this._eventinfo.posttext = ei.posttext;
		this._eventinfo.postvalue = ei.postvalue;
		this._eventinfo.isselect = true;

		if (this.index != curidx) {
			if (this._isPopupVisible()) {
				if (!this._scroll_proc) {
					this.popupwindow._closePopup();
				}
			}
		}
		else {
			if (this.type != "dropdown") {
				this._setEditValue(this.text);
			}
			if (this._isPopupVisible()) {
				if (!this._scroll_proc) {
					this.popupwindow._closePopup();
				}
			}
		}

		if (this.comboedit) {
			if (this.autoskip && this.type == "search" && this._refform.getNextComponent(this, true) != this) {
				return false;
			}

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
				var win = this._getWindow();
				if (win) {
					win._removeFromCurrentFocusPath(this, true);
				}
			}

			var last_focused = this._find_lastFocused();
			if ((last_focused && last_focused.id == this.id) || this._is_subcontrol) {
				this.comboedit._setFocus(false);
			}
		}

		return false;
	};

	_pCombo._setEditValue = function (v) {
		this.comboedit.set_value(v);
	};

	_pCombo.on_combo_keydown = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey, eventBubbles) {
		if (this.readonly || !this.comboedit) {
			return false;
		}

		var E = nexacro.Event;
		var combolist = this.combolist;
		var popupwindow = this.popupwindow;
		var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
		var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;
		var datacol = this.datacolumn;
		var codecol = this.codecolumn;
		var nextidx, rawidx, curidx = this._moverindex;

		if (!ds || (!datacol && !codecol)) {
			return;
		}

		if (curidx < 0) {
			curidx = this.index;
			if (this.type == "filter" || this.type == "filterlike") {
				ds.set_filterstr("");
			}
		}

		if (keycode == E.KEY_ESC) {
			if (this._isPopupVisible()) {
				popupwindow._closePopup();
				this._setEditValue(this.text);
			}
			return false;
		}

		if (altKey == true && keycode == E.KEY_DOWN) {
			if (this._isPopupVisible()) {
				popupwindow._closePopup();
			}
			else {
				this._showPopup(ds, this.index);
			}
			return false;
		}

		var sel_info = this._selectinfo;
		var ei = {
			preindex : this.index, 
			pretext : this.text, 
			prevalue : this.value, 
			postindex : sel_info.index, 
			posttext : sel_info.text, 
			postvalue : sel_info.value
		};

		if (keycode == E.KEY_ENTER) {
			if (curidx >= 0 && curidx == this._moverindex) {
				if (this.type == "filter" || this.type == "filterlike") {
					rawidx = this._getRawIndex(ds, curidx);
					rawidx = (rawidx == -1) ? curidx : rawidx;
					fds.set_filterstr("");
				}
				else {
					rawidx = curidx;
				}
			}
			else {
				return false;
			}

			ei.postindex = rawidx;
			ei.postvalue = this._getItemValue(rawidx);
			ei.posttext = this._getItemText(rawidx);

			if (this.on_fire_canitemchange(this, ei.preindex, ei.pretext, ei.prevalue, ei.postindex, ei.posttext, ei.postvalue) == false) {
				this._setEditValue(this.text);
				if (this._isPopupVisible()) {
					popupwindow._closePopup();
				}

				return false;
			}

			this._setIndex(rawidx);

			if (this.comboedit && this.comboedit._edit_base_api) {
				if (ei.preindex == ei.postindex) {
					this.comboedit.setCaretPos(this.comboedit._edit_base_api._input_begin_pos);
				}
			}

			if (this._isPopupVisible()) {
				this._enterkey = true;
				popupwindow._closePopup();
			}

			this._eventinfo.isselect = true;
		}

		if (keycode == nexacro.Event.KEY_UP || keycode == nexacro.Event.KEY_DOWN) {
			if (!nexacro._enableaccessibility || ctrlKey || this._isPopupVisible()) {
				if (this._isPopupVisible()) {
					var text;
					if (keycode == nexacro.Event.KEY_UP) {
						if (curidx > 0) {
							var overidx = -1;
							if (combolist._overedItem) {
								overidx = combolist._overedItem.index;
							}
							else {
								overidx = curidx;
							}

							if (overidx == curidx) {
								nextidx = curidx - 1;
							}
							else {
								nextidx = overidx - 1;
							}
						}
						else {
							nextidx = 0;
						}
						this._downkey = false;

						text = ds.getColumn(nextidx, datacol || codecol);
						text = text == undefined ? "" : text;
						this._setEditValue(text);

						combolist._reset_item(nextidx);
						combolist._overeditemindex = nextidx;
						this._moverindex = nextidx;
					}
					else {
						var overidx = 0;
						if (combolist._overedItem) {
							overidx = combolist._overedItem.index;
						}
						else {
							overidx = curidx;
						}

						if (overidx == curidx) {
							nextidx = curidx + 1;
						}
						else {
							nextidx = overidx + 1;
						}

						if (nextidx < ds.getRowCount()) {
							text = ds.getColumn(nextidx, datacol || codecol);
							text = text == undefined ? "" : text;
							this._setEditValue(text);

							this._downkey = true;
							combolist._reset_item(nextidx);
							combolist._overeditemindex = nextidx;
							this._moverindex = nextidx;
						}
					}
				}
				else {
					if (keycode == nexacro.Event.KEY_UP) {
						if (curidx > 0) {
							nextidx = curidx - 1;
						}
						else {
							nextidx = 0;
						}
					}
					else {
						if (curidx + 1 < ds.getRowCount()) {
							nextidx = curidx + 1;
						}
						else {
							nextidx = curidx;
						}
					}

					if (nextidx >= 0) {
						if (this.type == "filter" || this.type == "filterlike") {
							rawidx = this._getRawIndex(ds, nextidx);
							rawidx = (rawidx == -1) ? nextidx : rawidx;
							fds.set_filterstr("");
						}
						else {
							rawidx = nextidx;
						}
					}

					ei.postindex = rawidx;
					ei.postvalue = this._getItemValue(rawidx);
					ei.posttext = this._getItemText(rawidx);

					if (this.index != rawidx) {
						var ret = this.on_fire_canitemchange(this, ei.preindex, ei.pretext, ei.prevalue, ei.postindex, ei.posttext, ei.postvalue);
						if (ret) {
							this._setIndex(rawidx);
						}
					}
				}
			}
			if (this._getWindow()._keydown_element) {
				this._getWindow()._keydown_element._event_stop = true;
			}

			return false;
		}
		return false;
	};

	if (nexacro.Browser == "Gecko") {
		_pCombo.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
			var ret = nexacro.Component.prototype.on_fire_sys_onkeyup.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);

			if (key_code == nexacro.Event.KEY_UP || key_code == nexacro.Event.KEY_DOWN) {
				if (this.type == "dropdown") {
					this.comboedit.setCaretPos(0);
				}
			}

			return ret;
		};
		_pCombo._eachColosePopup = nexacro._emptyFn;
	}
	else {
		_pCombo._eachColosePopup = function (val) {
			var popupwindow = this.popupwindow;
			if (popupwindow._is_popup()) {
				popupwindow._closePopup();
			}
		};
	}

	_pCombo.on_fire_onkillfocus = function (obj, fromObj) {
		if (this._text_change == true) {
			this._setEditValue(this.text);
			this._text_change = false;
		}

		if (this.combolist) {
			this.combolist._reset_item(this.index);
			this.combolist._overeditemindex = -1;
			this._moverindex = -1;
		}

		if (this._isPopupVisible()) {
			this.popupwindow._closePopup();
			this._setEditValue(this.text);
		}

		var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
		var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;
		var datacol = this.datacolumn;
		var codecol = this.codecolumn;

		if ((!ds || (!datacol && !codecol))) {
			if (!this.text) {
				this._setEditValue(undefined);
			}
		}
		else {
			if (this.value && this.index == -1) {
				this.comboedit._setValue("");
			}
			else if (this.index == -1) {
				this._setEditValue(this.value);
			}
		}

		if (this.comboedit) {
			this.comboedit._restoreSelect();
			if ((nexacro.Browser == "Runtime" && this.autoselect == true) || nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				this.comboedit._cancelSelect();
			}

			this.comboedit._stat_change("notfocus", "normal");

			var input_elem = this.comboedit._input_element;
			if (input_elem && nexacro.BrowserType != "Edge") {
				var scrollLeft = input_elem.getScrollLeft();
				var textPosition = this.overflowtextposition;

				switch (textPosition) {
					case "keep":
						if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") && !this.autoselect) {
							this._textposition_timer = nexacro.OnceCallbackTimer.callonce(this, function () {
								input_elem.setScrollLeft(scrollLeft);
							});
						}
						break;
					case "start":
						if (nexacro.Browser == "Runtime" || nexacro.Browser == "Gecko") {
							if (scrollLeft > 0) {
								this._textposition_timer = nexacro.OnceCallbackTimer.callonce(this, function () {
									input_elem.setScrollLeft(0);
								});
							}
						}
						else if (nexacro.Browser == "IE") {
							this.comboedit._prev_caret_pos = this.comboedit.getCaretPos();
							input_elem.setElementSetSelect(0, 0);
						}
						break;
					default:
						break;
				}
			}
		}
		nexacro.Component.prototype.on_fire_onkillfocus.call(this, obj, fromObj);
	};

	_pCombo.on_notify_edit_onlbuttondown = function (obj, e) {
		if (this.readonly) {
			return false;
		}

		if (this._isPopupVisible()) {
			this.popupwindow._closePopup();
		}
		else {
			if (this.type == "dropdown") {
				this._showPopup(this._innerdataset, this.index);
			}
		}

		return false;
	};

	_pCombo.on_notify_edit_onmouseenter = function (obj, e) {
		this._is_mouseover = true;

		return false;
	};

	_pCombo.on_notify_edit_onmouseleave = function (obj, e) {
		this._is_mouseover = false;

		return false;
	};

	_pCombo._is_fling = false;
	_pCombo._on_bubble_flingstart = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		this._is_fling = true;
		return nexacro.Component.prototype._on_bubble_flingstart.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble);
	};

	_pCombo._on_bubble_flingend = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble) {
		this._is_fling = false;
		return nexacro.Component.prototype._on_bubble_flingend.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, event_bubbles, fire_comp, refer_comp, is_userbubble);
	};

	_pCombo.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return nexacro.Component.prototype.on_fire_user_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
	};

	_pCombo.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		var upelem = this._is_real_upelem;
		this._is_real_upelem = null;

		if (from_refer_comp instanceof nexacro.ScrollBarCtrl) {
			return;
		}
		if (from_refer_comp && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl) {
			return;
		}

		var ret = nexacro.Component.prototype.on_fire_sys_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem);

		var window = this._getWindow();
		var down_id = "";
		var compinfo = window.findComponent(window._cur_ldown_elem, 0, 0);
		if (compinfo && compinfo[0]) {
			down_id = compinfo[0]._unique_id;
		}

		var up_id = "";
		compinfo = window.findComponent(from_elem, 0, 0);
		if (compinfo && compinfo[0]) {
			up_id = compinfo[0]._unique_id;
		}

		if (down_id != up_id) {
			return;
		}

		var moveredidx = -1;
		var preindex = this.index;
		var combolist = this.combolist;
		var comboedit = this.comboedit;
		var sel_info = combolist && combolist._selectinfo;

		if (combolist) {
			moveredidx = combolist._overeditemindex;
		}

		if (this.visible && this._isEnable() && this._isPopupVisible()) {
			if (combolist) {
				if (moveredidx > -1) {
					if (preindex != moveredidx) {
						if (sel_info.index == moveredidx) {
							this._setIndex(preindex);
						}
						else {
							this._setIndex(moveredidx);
						}
						if (upelem && this._isPopupVisible()) {
							if (!this._scroll_proc) {
								this.popupwindow._closePopup();
							}
						}
					}
					else {
						this._setIndex(preindex);
					}

					if (comboedit) {
						if (!(nexacro.isTouchInteraction && nexacro.SupportTouch) || !nexacro.SupportTouch) {
							comboedit.on_apply_custom_setfocus();
						}
					}
				}
				else {
					this._setIndex(preindex);
				}
			}
		}
		combolist = null;
		comboedit = null;

		return ret;
	};

	_pCombo.on_fire_sys_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (from_refer_comp && (from_refer_comp instanceof nexacro.ScrollBarCtrl || (from_refer_comp.parent && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl))) {
			return;
		}

		if (this._is_fling_stop) {
			return;
		}

		if (this.isDropdown()) {
			var sel_info_list = this.combolist._selectinfo_list;

			if (this._scroll_proc) {
				if (sel_info_list.length) {
					var last = sel_info_list.length - 1;
					var info = sel_info_list[last];

					if (info.index != this.index) {
						info.obj._keep_selecting = false;
						info.obj._control_pseudo = "";
						info.obj._contents_pseudo = "";
						info.obj._stat_change("notselect", "normal");
						sel_info_list.splice(last, 1);
					}
				}
				return;
			}

			while (sel_info_list.length) {
				var down_item = sel_info_list[0].obj;
				if (down_item) {
					down_item._keep_selecting = false;


					if (!down_item.selected) {
						down_item._stat_change("notselect", "normal");
					}
				}
				sel_info_list.shift();
			}
		}
		return;
	};

	_pCombo.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		return nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pCombo.on_fire_sys_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
		this.on_combo_keydown(null, keycode, alt_key, ctrl_key, shift_key, meta_key, 0);
		return ret;
	};

	_pCombo._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		if (this.popupwindow && this.popupwindow._is_popup()) {
			if (this.combolist) {
				return this.combolist._on_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll);
			}
		}

		return true;
	};
	_pCombo.on_fire_sys_onmousewheel = function (wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, comp, refer_comp) {
		if (this.readonly) {
			return false;
		}
		var last_focus = this._find_lastFocused();
		if ((this != last_focus && !this._is_subcontrol) || (this.parent != last_focus && this._is_subcontrol)) {
			return;
		}
		if (!this.popupwindow || !this.popupwindow._is_popup()) {
			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;
			var curidx = this.index;
			var nextidx = 0;

			if (wheelDeltaY > 0) {
				if (curidx > 0) {
					nextidx = curidx - 1;
				}
				else {
					nextidx = 0;
				}
				this._setIndex(nextidx);
			}
			else {
				nextidx = curidx + 1;
				if (ds && nextidx < ds.getRowCount()) {
					this._setIndex(nextidx);
				}
			}
		}

		return true;
	};

	_pCombo.on_fire_sys_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		nexacro.Component.prototype.on_fire_sys_onslide.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);

		this._update_popupwindow_position();

		return (this.popupwindow && this.popupwindow._is_popup()) ? true : false;
	};

	_pCombo.on_fire_sys_onfling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onfling.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);

		this._update_popupwindow_position();

		return ret;
	};

	_pCombo.on_notify_edit_cancharchange = function (obj, e) {
		if (this.cancharchange && this.cancharchange._has_handlers) {
			e.fromobject = this;
			var ret = this.cancharchange._fireCheckEvent(this, e);
			if (!ret) {
				this.value = e.pretext;
				this.text = e.pretext;
				this._setEditValue(this.text);
			}

			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pCombo.on_notify_edit_onchar = function (obj, e) {
		return this.on_fire_onchar(obj, e);
	};

	_pCombo.on_notify_edit_ontextchange = function (obj, e) {
		return this.on_fire_ontextchange(obj, e);
	};

	_pCombo.on_notify_edit_ontextchanged = function (obj, e) {
		return this.on_fire_ontextchanged(obj, e);
	};

	_pCombo.on_fire_onchar = function (obj, e) {
		if (this.onchar && this.onchar._has_handlers) {
			var ret = this.onchar._fireCheckEvent(this, e);
			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pCombo.on_fire_ontextchange = function (obj, e) {
		if (this.ontextchange && this.ontextchange._has_handlers) {
			e.fromobject = this;
			var ret = this.ontextchange._fireCheckEvent(this, e);
			if (e.pretext != e.posttext) {
				this._text_change = true;
			}

			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pCombo.on_fire_ontextchanged = function (obj, e) {
		var ret = false;

		if (this.ontextchanged && this.ontextchanged._has_handlers) {
			e.fromobject = this;
			ret = this.ontextchanged._fireEvent(this, e);
		}
		if (e.pretext != e.posttext) {
			if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
				var api = obj._edit_base_api;
				if (api) {
					var _skip_combo_text_changed = (e.pretext == "" && api._pasteAction == false) || (e.posttext == "" && (api._is_composition ? api._is_composition() : false));
					if (_skip_combo_text_changed) {
						return nexacro._toBoolean(ret);
					}
				}
			}
			this.on_combo_text_changed(e.pretext, e.posttext);
		}
		return nexacro._toBoolean(ret);
	};


	_pCombo.on_notify_edit_oneditclick = function (obj, e) {
		var skip = true;
		if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
			var evt = new nexacro.EventInfo(this, "oneditclick");
			if ((nexacro.Browser == "Runtime" && (e.button == "lbutton" || e.button == "touch")) || (nexacro.Browser != "Runtime" && ((nexacro.isTouchInteraction && e.button == "touch") || (!nexacro.isTouchInteraction && application.enabletouchevent && ((nexacro._pointerType == "pen" && e.button == "touch") || e.button == "lbutton")) || (nexacro.Browser != "IE" && ((!application.enabletouchevent && e.button == "lbutton") || (nexacro.SupportTouch && e.button == "touch"))) || (nexacro.Browser == "IE" && !application.enabletouchevent)))) {
				skip = false;
				this.on_notify_edit_onlbuttondown(this, evt);
			}
		}
		else {
			skip = false;
		}

		if (!skip && this.oneditclick && this.oneditclick._has_handlers) {
			e.fromobject = this;
			var ret = this.oneditclick._fireEvent(this, e);
			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pCombo.on_combo_text_changed = function (pretext, posttext) {
		if (this.readonly || !this.comboedit) {
			return false;
		}

		if ((this.type != "dropdown") && (this.onkeydown && this.onkeydown.defaultprevented === true)) {
			this.comboedit.set_value("");
			return;
		}

		var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
		var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;
		if (!ds) {
			return false;
		}

		if (!this.combolist && this.type != "dropdown") {
			this._createList(ds);
		}

		var col = this.datacolumn || this.codecolumn;
		var keyval = posttext;
		var comboedit = this.comboedit;
		var popupwindow = this.popupwindow;
		this._keyval = keyval;

		if (keyval === "") {
			this._text_change = true;
			this._eachColosePopup();

			if (this.type == "filter" || this.type == "filterlike") {
				ds.set_filterstr("");
			}

			return;
		}

		if (pretext != posttext) {
			this._text_change = true;
		}

		switch (this.type) {
			case "search":
				var index = ds.findRowAs(col, keyval);

				if (index >= 0) {
					var flag_backspace = false;
					if (comboedit._edit_base_api && comboedit._edit_base_api._charcode == nexacro.Event.KEY_BACKSPACE) {
						flag_backspace = true;
					}

					if (!popupwindow || !popupwindow._is_popup()) {
						this._text_change = true;
						this._showPopup(ds, index);
					}
					else {
						this._showPopup(ds, index);
					}
				}
				else {
					if (popupwindow && popupwindow._is_popup()) {
						popupwindow._closePopup();
					}
				}
				break;
			case "filter":
			case "filterlike":
				var regExp = /[\　\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]/;
				var parse_val = "";
				var keyval_len = keyval.length;
				for (var i = 0; i < keyval_len; i++) {
					var c = keyval.charAt(i);

					if (regExp.test(c)) {
						parse_val += "\\";
					}
					parse_val += c;
				}
				if (this.type == "filter") {
					ds.set_filterstr(col + ".match(/^(" + parse_val + ")/)");
				}
				else if (this.type == "filterlike") {
					ds.set_filterstr(col + ".match(/" + parse_val + "/)");
				}
				else {
					ds.set_filterstr("");
				}

				if (ds.getRowCount() > 0) {
					this.combolist._overeditemindex = 0;
					this._moverindex = 0;
					this._text_change = true;
					this._showPopup(ds, 0);
				}
				else {
					if (popupwindow && popupwindow._is_popup()) {
						popupwindow._closePopup();
					}
				}
				break;
		}
		this._keyval = undefined;
	};

	_pCombo.on_fire_onitemclick = function (obj, index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		if (this.onitemclick && this.onitemclick._has_handlers) {
			var evt = new nexacro.ItemClickEventInfo(obj, "onitemclick", index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
			this.onitemclick._fireEvent(this, evt);
		}

		return false;
	};

	_pCombo.on_fire_onitemchanged = function (obj, preindex, pretext, prevalue, postindex, posttext, postvalue) {
		this.applyto_bindSource("value", obj.value);

		var sel_info = this._selectinfo;
		sel_info.index = postindex;
		sel_info.text = posttext;
		sel_info.value = postvalue;

		this._eventinfo.preindex = preindex;
		this._eventinfo.pretext = pretext;
		this._eventinfo.prevalue = prevalue;
		this._eventinfo.postindex = postindex;
		this._eventinfo.posttext = posttext;
		this._eventinfo.postvalue = postvalue;
		this._eventinfo.isselect = true;

		if (this.onitemchanged && this.onitemchanged._has_handlers) {
			var evt = new nexacro.ItemChangeEventInfo(this, "onitemchanged", preindex, pretext, prevalue, postindex, posttext, postvalue);
			this.onitemchanged._fireEvent(this, evt);
		}

		return false;
	};

	_pCombo.on_fire_canitemchange = function (obj, preindex, pretext, prevalue, postindex, posttext, postvalue) {
		if (this.canitemchange && this.canitemchange._has_handlers) {
			var evt = new nexacro.ItemChangeEventInfo(this, "canitemchange", preindex, pretext, prevalue, postindex, posttext, postvalue);
			var ret = this.canitemchange._fireCheckEvent(this, evt);
			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pCombo.on_fire_ondropdown = function (obj) {
		if (this.ondropdown && this.ondropdown._has_handlers) {
			var evt = new nexacro.EventInfo(this, "ondropdown");
			evt.postvalue = this.value;
			var ret = this.ondropdown._fireEvent(this, evt);
			if (ret == undefined) {
				ret = true;
			}

			return nexacro._toBoolean(ret);
		}

		return true;
	};

	_pCombo.on_fire_oncloseup = function (obj, beforeIndex, beforeText, beforeValue, afterIndex, afterText, afterValue, isSelect) {
		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
		}

		var listidx;
		if (this.combolist) {
			listidx = this.combolist.index;

			if (this.type == "filter") {
				listidx = this._getRawToListindex(listidx);
			}
			if (!this._enterkey) {
				this.combolist._reset_item(listidx);
			}
			this._enterkey = false;
			this.combolist._overeditemindex = -1;
			this._moverindex = -1;
			if (this.combolist._overedItem) {
				this.combolist._overedItem = null;
			}
		}

		if (isSelect == false && (this.combolist && this.index != listidx)) {
			if ((beforeText == afterText) && (this._keyval !== "") && (this._text_change == false)) {
				this._setEditValue(this.text);
			}

			if (this.combolist) {
				if (this.type == "filter") {
					beforeIndex = this._getRawToListindex(beforeIndex);
				}
				this.combolist.index = beforeIndex;
				this.combolist.on_apply_index(beforeIndex);
			}
		}

		if (this.oncloseup && this.oncloseup._has_handlers) {
			var evt = new nexacro.ComboCloseUpEventInfo(this, "oncloseup", beforeIndex, beforeText, beforeValue, afterIndex, afterText, afterValue, isSelect);
			var ret = this.oncloseup._fireEvent(this, evt);
			return nexacro._toBoolean(ret);
		}

		return false;
	};

	_pCombo.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		var ret = false;
		if (this._isPopupVisible()) {
			var combolist = this.combolist;
			var items = combolist._get_contents_rows();
			var obj = null;

			if (items) {
				if (direction) {
					combolist._overeditemindex++;
				}
				else {
					combolist._overeditemindex--;
				}

				if (combolist._overeditemindex < 0 || combolist._overeditemindex > items.length - 1) {
					if (this._isPopupVisible()) {
						this._closePopup();
					}
					combolist._overeditemindex = 0;
				}
				else {
					obj = combolist._getItemByRealIdx(items, combolist._overeditemindex).obj;
				}
			}

			if (obj) {
				ret = true;
				obj._setAccessibilityNotifyEvent();
			}
		}
		return ret;
	};

	_pCombo._applyZoomPopup = function () {
		if (this.popupwindow && this.popupwindow._is_popup()) {
			if (this.enable === false || this.readonly === true || this.visible === false) {
				return;
			}

			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			var ds = this.type == "filter" ? fds : this._innerdataset;
			if (ds && ds.rowcount == 0) {
				ds = this._innerdataset;
			}

			this._showPopup(ds, this.index);
		}
	};

	_pCombo._setIndex = function (v, bIgnoreCompareIdx) {
		if (bIgnoreCompareIdx || v != this.index) {
			var ds;
			if (this.type == "filter") {
				ds = this._filtereddataset;
			}
			else {
				ds = this._innerdataset;
			}

			if (ds) {
				v = parseInt(v, 10) | 0;

				this._preindex = this.index;
				this._pretext = this.text;
				this._prevalue = this.value;
				this.index = v;
				this.on_apply_index();

				this.on_fire_onitemchanged(this, this._eventinfo.preindex, this._eventinfo.pretext, this._eventinfo.prevalue, this._eventinfo.postindex, this._eventinfo.posttext, this._eventinfo.postvalue);

				var comboedit = this.comboedit;
				if (this.autoskip && comboedit && this.type == "search") {
					comboedit.on_apply_autoskip();
				}
			}
		}
		this._cancelSelect();
		return v;
	};

	_pCombo._recalcLayout = function () {
		if (!this.getElement() || !this._is_created_contents) {
			return;
		}

		var comboedit = this.comboedit;
		var dropbutton = this.dropbutton;
		var btn_size = 0;
		var client_width = this._client_width;
		var client_height = this._client_height;
		var client_left = this._client_left;
		var client_top = this._client_top;

		var style_btnsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);

		if (!style_btnsize || style_btnsize._is_empty) {
			btn_size = client_height;
		}
		else if (parseInt(style_btnsize._value, 10) > client_width) {
			btn_size = client_width;
		}
		else {
			btn_size = parseInt(style_btnsize._value, 10) | 0;
			if (btn_size < 0) {
				btn_size = client_height;
			}
		}

		if (dropbutton) {
			var btn_left = client_width - btn_size;
			var btn_top = client_top;
			var btn_width = btn_size;
			var btn_height = client_height;

			var btn_margin = dropbutton.on_find_CurrentStyle_margin(this._pseudo);
			if (btn_margin && !btn_margin._is_empty) {
				btn_left = btn_left + btn_margin.left;
				btn_top = btn_margin.top;
				btn_width = btn_size - btn_margin.left - btn_margin.right;
				btn_height = client_height - btn_margin.top - btn_margin.bottom;
			}
			dropbutton.move(btn_left, btn_top, btn_width, btn_height, null, null);
		}

		if (comboedit) {
			var edit_left = client_left;
			var edit_top = client_top;
			var edit_width = client_width - btn_size - 1;
			var edit_height = client_height;

			var edit_margin = comboedit.on_find_CurrentStyle_margin(this._pseudo);
			if (edit_margin && !edit_margin._is_empty) {
				edit_left = edit_margin.left;
				edit_top = edit_margin.top;
				edit_width = edit_width - edit_margin.left - edit_margin.right;
				edit_height = edit_height - edit_margin.top - edit_margin.bottom;
			}
			comboedit.move(edit_left, edit_top, edit_width, edit_height, null, null);
		}
	};
	_pCombo._getMaxTextSize = function (ds) {
		var col = this.datacolumn || this.codecolumn;
		var combolist = this.combolist;
		if (!ds || !col || !combolist) {
			return false;
		}

		return combolist._getMaxTextSize();
	};

	_pCombo._isPopupVisible = function () {
		var popupwindow = this.popupwindow;
		if (popupwindow && popupwindow.visible == true) {
			return true;
		}
		else {
			return false;
		}
	};

	_pCombo._createListOnly = function (ds) {
		var datacol = this.datacolumn;
		var codecol = this.codecolumn;
		var combolist = this.combolist;

		if (!ds || ds && ds.getRowCount() <= 0 || (!datacol && !codecol)) {
			return;
		}

		if (!combolist) {
			this._exprcache = {
			};

			combolist = this.combolist = new nexacro.ComboListCtrl("combolist", "absolute", 0, 0, 1, 1, null, null, this);
			combolist.set_scrollbars("autovert");
			combolist.set_codecolumn(codecol);
			combolist.set_datacolumn(datacol);
			this.on_apply_innerdataset();

			combolist.createComponent(true);
			combolist._setEventHandler("onitemclick", this.on_notify_item_onitemclick, this);
			combolist._setEventHandler("canitemchange", this.on_notify_item_canitemchange, this);
			combolist._setEventHandler("onitemchanged", this.on_notify_item_onitemchanged, this);
		}
	};

	_pCombo._createList = function (ds, max_width, max_height) {
		var datacol = this.datacolumn;
		var codecol = this.codecolumn;

		if (!ds || ds && ds.getRowCount() <= 0 || (!datacol && !codecol)) {
			return;
		}

		if (!this.combolist) {
			this._createListOnly(ds);
		}

		var combolist = this.combolist;
		combolist._is_redrawing = true;

		var popupwindow = this.popupwindow;
		if (!popupwindow) {
			popupwindow = this.popupwindow = new nexacro.ComboPopupWindow("combopopup", "absolute", 0, 0, 0, 0, null, null, this);
		}

		if (!popupwindow._is_created) {
			popupwindow.createComponent(true);
			popupwindow._attach(combolist);
			popupwindow.on_created();
		}

		if (!combolist._is_created) {
			var control_elem = combolist._control_element;
			if (control_elem && control_elem._adjust_height == null) {
				if (max_width != undefined && max_height != undefined) {
					control_elem.setElementSize(max_width, max_height);
				}
				else {
					var size = this._getPopuplistSize(ds);
					var width = size.width;
					var height = size.height;
					control_elem.setElementSize(width, height);
				}
			}

			combolist.on_created();
			combolist.getElement().setElementToolTip("", combolist.getElement().tooltiptype);
		}

		popupwindow = null;
		combolist = null;
	};

	_pCombo._update_popupwindow_position = function () {
		var popupwindow = this.popupwindow;
		if (popupwindow) {
			var popup_control_elem = popupwindow._control_element;

			var ds = this.type == "filter" ? (this._filtereddataset ? this._filtereddataset : this._getFilteredDataset()) : this._innerdataset;
			ds = (ds && ds.rowcount == 0) ? this._innerdataset : ds;

			var size = this._getPopuplistSize(ds);
			var height = size.height, width = size.width;
			var pos = nexacro._getElementPositionInFrame(this._control_element);

			{

				var offs = {
					x : 0, 
					y : 0
				};
				var w = this._getWindow();
				var w_w = w.getWidth();
				var w_h = w.getHeight();

				var scale = this._getCumulativeZoomFactor() / 100.0;

				offs.width = w_w - pos.x + (this._adjust_width * scale);
				width = parseInt(Math.min(width, offs.width / scale));

				offs.height = w_h - pos.y + (this._adjust_height * scale);
				height = parseInt(Math.min(height, offs.height / scale));
			}

			var scalepos = popupwindow._getScalePosition(width, height);
			var l = pos.x + scalepos.left, t = pos.y + scalepos.top;

			if (this._getPopupType() == "center") {
				var rootframe = this._getOwnerFrame();
				if (!rootframe) {
					return;
				}

				var rootwindow = rootframe._getWindow();
				rootframe = rootwindow ? rootwindow.frame : null;
				if (!rootframe) {
					return;
				}

				l = ((rootframe.width / 2) - (popup_control_elem.width / 2));
				t = ((rootframe.height / 2) - (popup_control_elem.height / 2));

				t = t < 0 ? 0 : t;
				popup_control_elem.setElementPosition(l / scale, t);
			}
			else {
				popup_control_elem.setElementPosition(l, t);
			}
			popupwindow = null;
		}
	};

	_pCombo._showPopup = function (ds, index) {
		if (this._isPopupVisible()) {
			this._closePopup();
		}

		var is_change_index = false;
		var pre_idx = this.index;

		this._eventinfo.preindex = this.index;
		this._eventinfo.pretext = this.text;
		this._eventinfo.prevalue = this.value;

		if (this.on_fire_ondropdown(this) == false) {
			return;
		}

		if (pre_idx != this.index) {
			is_change_index = true;
		}

		if ((this.ondropdown && this.dropdown.preventable && this.ondropdown.defaultprevented === true) || !ds || (ds && ds.getRowCount() == 0) || this._getPopupType() == "none") {
			return;
		}

		if (is_change_index) {
			index = this.index;
		}

		this._createListOnly(ds);

		this.combolist._set_scroll_max_size();

		var size = this._getPopuplistSize(ds);
		var width = parseInt(size.width);
		var height = parseInt(size.height);

		if (height > 700) {
			var offs = {
				x : 0, 
				y : 0
			};
			var w = this._getWindow();
			var w_w = w.getWidth();
			var w_h = w.getHeight();

			var pos = nexacro._getElementPositionInFrame(this._control_element);
			var scale = this._getCumulativeZoomFactor() / 100.0;

			offs.width = w_w - pos.x + (this._adjust_width * scale);
			width = parseInt(Math.min(width, offs.width / scale));

			offs.height = w_h - pos.y + (this._adjust_height * scale);
			height = parseInt(Math.min(height, offs.height / scale));
		}

		this._createList(ds, width, height);

		var combolist = this.combolist;
		var popupwindow = this.popupwindow;
		popupwindow._track_capture = true;

		this.on_apply_prop_rtldirection();

		if (nexacro._enableaccessibility) {
			this._want_arrows = true;
		}

		if (combolist) {
			if (this._getPopupType() == "center") {
				popupwindow._popupCenterAuto(width, height);
			}
			else {
				popupwindow._popupAuto(width, height);
			}

			if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && combolist.vscrollbar) {
				var temp = combolist.getElement().scroll_top;
				combolist.getElement().getContainerElement()._cached_scrollTop = 1;
				combolist.getElement().setElementVScrollPos(1);
				combolist.getElement().setElementVScrollPos(temp);
			}

			combolist._is_redrawing = false;
			combolist.setInnerDataset(ds);
			combolist.set_index(index);
			combolist._reset_item(index);
			if (this._isRtl()) {
				combolist.on_update_position(true);
			}

			if (index <= 0 && combolist.vscrollbar) {
				if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
					combolist.getElement().getContainerElement()._cached_scrollTop = 1;
					combolist.getElement().setElementVScrollPos(1);
				}
				combolist.getElement().setElementVScrollPos(0);
			}


			if (nexacro._enableaccessibility) {
				this._setAccessibilityStatExpanded(true);
				if (nexacro._accessibilitytype == 4) {
					var items = combolist._get_contents_rows();
					if (items && items.length > 0) {
						var index = this.index >= 0 ? this.index : 0;
						items[index]._setFocus();
					}
				}
				else if (nexacro._accessibilitytype == 5) {
					combolist._setAccessibilityNotifyEvent();
				}
			}


			combolist = null;
		}
	};

	_pCombo._closePopup = function () {
		var popupwindow = this.popupwindow;
		if (popupwindow) {
			popupwindow._closePopup();
		}

		popupwindow = null;
	};

	_pCombo._getPopuplistSize = function (ds) {
		var combolist = this.combolist;
		var ds_cnt = ds.getRowCount();
		var display_cnt = this.displayrowcount < ds_cnt ? this.displayrowcount : ds_cnt;

		var totalw, totalh;
		var textw = this._getMaxTextSize(ds);
		var itemh = parseInt(combolist.currentstyle.itemheight._value, 10);

		var cl_p = combolist.on_find_CurrentStyle_padding(this._pseudo);
		var cl_b = combolist.on_find_CurrentStyle_border(this._pseudo);

		var item_p = combolist.on_find_CurrentStyle_itempadding(this._pseudo);
		var item_b = combolist.on_find_CurrentStyle_itemborder(this._pseudo);

		var cl_pw = cl_p ? cl_p._getPaddingWidth() : 0;
		var cl_ph = cl_p ? cl_p._getPaddingHeight() : 0;
		var cl_bw = cl_b ? cl_b._getBorderWidth() : 0;
		var cl_bh = cl_b ? cl_b._getBorderHeight() : 0;

		var item_pw = item_p ? item_p._getPaddingWidth() : 0;
		var item_bw = item_b ? item_b._getBorderWidth() : 0;

		totalh = display_cnt <= 0 ? itemh * ds_cnt : itemh * display_cnt;
		totalh += cl_ph + cl_bh;
		textw += cl_pw + cl_bw;
		totalw = Math.max(this._adjust_width, textw);

		return {
			width : totalw, 
			height : totalh
		};
	};

	_pCombo._getRawToListindex = function (idx) {
		if (this.type == "filter") {
			var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
			var row_count = fds._viewRecords.length;
			var idsArr = fds._viewRecords;

			for (var i = 0; i < row_count; i++) {
				if (idsArr[i]._rawidx == idx) {
					return i;
				}
			}
		}
		return idx;
	};

	_pCombo._getRawIndex = function (fds, idx) {
		var ids = this._innerdataset;

		if (idx == -1 || (fds._viewRecords.length <= idx)) {
			return -1;
		}

		var rawidx = fds._viewRecords[idx]._rawidx;
		var idsArr = ids._rawRecords;
		var row_count = idsArr.length;

		for (var i = 0; i < row_count; i++) {
			if (idsArr[i]._rawidx == rawidx) {
				return rawidx;
			}
		}
		return -1;
	};

	_pCombo._getFilteredDataset = function () {
		if (!this._filtereddataset) {
			this._createFilteredDataset();
		}
		return this._filtereddataset;
	};

	_pCombo._createFilteredDataset = function () {
		var fds = this._filtereddataset;
		var codecol = this.codecolumn;
		var datacol = this.datacolumn;
		var ids = this._innerdataset;

		if (ids && (!(codecol in ids.colinfos) || !(datacol in ids.colinfos))) {
			if (fds) {
				fds.clear();
				this._filtereddataset = null;
			}
			return;
		}

		if (!ids || ids && ids.getRowCount() <= 0 || !datacol && !codecol) {
			if (fds) {
				fds.clear();
				this._filtereddataset = null;
			}
			return;
		}

		var row_count = ids.getRowCount();

		if (!fds) {
			fds = this._filtereddataset = new nexacro.Dataset("filter_" + this.id);
			fds.addColumn(codecol, "string");
			fds.addColumn(datacol, "string");

			for (var i = 0; i < row_count; i++) {
				fds.insertRow(i);
				fds.setColumn(i, codecol, ids.getColumn(i, codecol));
				fds.setColumn(i, datacol, ids.getColumn(i, datacol));
			}
		}
		else {
			if (this.combolist) {
				this.combolist._userDsChange = false;

				fds.clear();
				fds.addColumn(codecol, "string");
				fds.addColumn(datacol, "string");
				for (var i = 0; i < row_count; i++) {
					fds.insertRow(i);
					fds.setColumn(i, codecol, ids.getColumn(i, codecol));
					fds.setColumn(i, datacol, ids.getColumn(i, datacol));
				}

				this.combolist._userDsChange = true;
				this.combolist.redraw();
			}
			else {
				fds.clear();
				fds.addColumn(codecol, "string");
				fds.addColumn(datacol, "string");
				for (var i = 0; i < row_count; i++) {
					fds.insertRow(i);
					fds.setColumn(i, codecol, ids.getColumn(i, codecol));
					fds.setColumn(i, datacol, ids.getColumn(i, datacol));
				}
			}
		}
	};

	_pCombo._getDragData = function () {
		if (this.comboedit && this.comboedit.getSelectedText) {
			return this.comboedit.getSelectedText();
		}
	};

	_pCombo._recheckValue = function () {
		var ds = this._innerdataset;
		if (!this.comboedit) {
			return false;
		}
		if (this.value !== undefined) {
			if (ds) {
				var row_count = ds.getRowCount();
				for (var i = 0; i < row_count; i++) {
					var v = nexacro.DataUtils.toString(this.value);
					var v1 = nexacro.DataUtils.toString(this._getItemValue(i));
					if (v == v1) {
						this.index = i;
						this.text = this._getItemText(i);
						this.redraw();
						return;
					}
				}

				this.index = -1;
				this.text = "";
				this.redraw();
				return;
			}
		}

		if (this.text != "") {
			if (ds) {
				var row_count = ds.getRowCount();
				for (var i = 0; i < row_count; i++) {
					if (this.text == this._getItemText(i)) {
						this.index = i;
						this.value = this._getItemValue(i);
						this.redraw();
						return;
					}
				}
			}
		}

		if (this.index != -1) {
			if (ds) {
				if (this.index < ds.getRowCount()) {
					this.value = this._getItemValue(this.index);
					this.text = this._getItemText(this.index);
					this.redraw();
					return;
				}
			}
		}

		this.index = -1;
		this.value = undefined;
		this.text = "";

		if (!ds) {
			this.redraw();
		}
	};

	_pCombo._getItemValue = function (index) {
		var ds = this._innerdataset;
		var column = this.codecolumn || this.datacolumn;

		if (ds && column) {
			var rtn = ds.getColumn(index, column);

			return rtn;
		}

		return null;
	};

	_pCombo._getItemText = function (index) {
		var ds = this._innerdataset;
		var column = this.datacolumn || this.codecolumn;

		if (ds && column) {
			var rtn = ds.getColumn(index, column);
			if (rtn == undefined && (this.type == "filter" || this.type == "filterlike") && this._filtereddataset) {
				rtn = this._filtereddataset.getColumn(index, column);
			}
			if (!nexacro._isNull(rtn)) {
				return nexacro._toString(rtn);
			}
		}
		return "";
	};

	_pCombo._getIndex = function (value) {
		var fds = this._filtereddataset ? this._filtereddataset : this._getFilteredDataset();
		var ds = (this.type == "filter" || this.type == "filterlike") ? fds : this._innerdataset;

		if (ds) {
			var row_count = ds.getRowCount();
			for (var i = 0; i < row_count; i++) {
				var v = this._getItemValue(i);
				if (value instanceof nexacro.Decimal) {
					value = value.toString();
				}
				if (v instanceof nexacro.Decimal) {
					v = v.toString();
				}

				if (value == v) {
					return i;
				}
			}
		}

		return -1;
	};

	_pCombo._cancelSelect = function () {
		if (this.comboedit) {
			this.comboedit._cancelSelect();
		}
	};

	_pCombo._setAccessibilityInfoByHover = function (control) {
		if (this._isPopupVisible()) {
			var combolist = this.combolist;
			return combolist._setAccessibilityInfoByHover(control);
		}
		else {
			return this._setAccessibilityNotifyEvent();
		}
	};

	_pCombo._clearAccessibilityInfoByHover = function () {
		if (this.combolist) {
			this.combolist._clearAccessibilityInfoByHover();
		}
	};

	_pCombo._setEditReaonly = function () {
		if (this.comboedit) {
			var input_elem = this.comboedit._input_element;

			if (this.type == "dropdown") {
				if (input_elem) {
					if (nexacro.Browser == "Runtime") {
						var _handle = input_elem._handle;
						if (_handle) {
							nexacro.__setElementHandleReadOnly(_handle, true);
						}
					}
					else {
						var input_handle = input_elem._input_handle;
						if (input_handle) {
							nexacro.__setDOMNodeReadOnly(input_handle, true);
							if (nexacro.OS == "Android") {
								input_elem.setElementReadonly(true);
							}
						}
					}
				}
			}
			else {
				if (input_elem) {
					if (nexacro.Browser == "Runtime") {
						var _handle = input_elem._handle;
						if (_handle) {
							nexacro.__setElementHandleReadOnly(_handle, this.readonly);
						}
					}
					else {
						var input_handle = input_elem._input_handle;
						if (input_handle) {
							nexacro.__setDOMNodeReadOnly(input_handle, this.readonly);
						}
					}
				}
			}
		}
	};

	delete _pCombo;
	_pCombo = null;


	nexacro.ComboListCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ListBoxCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._default_itemheight = nexacro._getCachedStyleObj("itemheight", "20");
		this._overedItem = null;

		this._downItem = null;
		this._is_accessibility_changeIdx = false;
	};

	var _pComboListCtrl = nexacro._createPrototype(nexacro.ListBoxCtrl, nexacro.ComboListCtrl);
	nexacro.ComboListCtrl.prototype = _pComboListCtrl;

	_pComboListCtrl.on_find_CurrentStyle_itemheight = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itemheight(pseudo) || this._default_itemheight;
	};

	_pComboListCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this._find_pseudo_obj("border", pseudo, "border");
	};

	_pComboListCtrl.on_find_CurrentStyle_itembackground = function (pseudo) {
		return this.parent._find_pseudo_obj("itembackground", pseudo, "background") || this._find_pseudo_obj("itembackground", pseudo, "background");
	};

	_pComboListCtrl.on_find_CurrentStyle_itemgradation = function (pseudo) {
		return this.parent._find_pseudo_obj("itemgradation", pseudo, "gradation") || this._find_pseudo_obj("itemgradation", pseudo, "gradation");
	};

	_pComboListCtrl.on_find_CurrentStyle_itemborder = function (pseudo) {
		return this.parent._find_pseudo_obj("itemborder", pseudo, "border") || this._find_pseudo_obj("itemborder", pseudo, "border");
	};

	_pComboListCtrl.on_find_CurrentStyle_itembordertype = function (pseudo) {
		return this.parent._find_pseudo_obj("itembordertype", pseudo, "bordertype") || this._find_pseudo_obj("itembordertype", pseudo, "bordertype");
	};

	_pComboListCtrl.on_find_CurrentStyle_itempadding = function (pseudo) {
		return this.parent._find_pseudo_obj("itempadding", pseudo, "padding") || this._find_pseudo_obj("itempadding", pseudo, "padding");
	};

	_pComboListCtrl.on_find_CurrentStyle_itemaccessibility = function (pseudo) {
		return this.parent._find_pseudo_obj("itemaccessibility", pseudo, "accessibility") || this._find_pseudo_obj("itemaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pComboListCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent._find_pseudo_obj("itemcolor", pseudo, "color") || this._find_inherit_pseudo_obj("color", pseudo, "color") || nexacro.Component._default_color;
	};

	_pComboListCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent._find_pseudo_obj("itemfont", pseudo, "font") || this._find_inherit_pseudo_obj("font", pseudo, "font") || nexacro.Component._default_font;
	};

	_pComboListCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};
	_pComboListCtrl._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		return nexacro.Component.prototype._on_mousewheel.call(this, elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll);
	};

	_pComboListCtrl.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (from_refer_comp && (from_refer_comp instanceof nexacro.ScrollBarCtrl || (from_refer_comp.parent && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl))) {
			return;
		}

		if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
			if (this._is_fling_stop) {
				return;
			}

			var sel_info_list = this._selectinfo_list;

			if (this.parent._scroll_proc) {
				if (sel_info_list.length) {
					var last = sel_info_list.length - 1;
					var info = sel_info_list[last];

					if (info.index != this.parent.index) {
						info.obj._keep_selecting = false;
						info.obj._control_pseudo = "";
						info.obj._contents_pseudo = "";
						info.obj._stat_change("notselect", "normal");
						sel_info_list.splice(last, 1);
					}
				}
				return;
			}
		}

		var up_obj = this._getWindow().findComponent(from_elem);
		var sel_info = this._selectinfo;

		var ret = nexacro.Component.prototype.on_fire_sys_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem);

		var down_item = sel_info.obj;
		if (down_item) {
			this._is_lbutton_up = true;
			down_item._keep_selecting = false;

			var items = this._get_contents_rows();
			var change_item;

			if (this._contains(from_elem)) {
				this.on_fire_onitemclick(this, up_obj.index, up_obj.text, up_obj.value, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);

				if (nexacro._enableaccessibility) {
					if (this._accessibility_index > -1) {
						var sel_item = this._get_rowobj_byrow(this._accessibility_index);
						if (sel_info.index != this._accessibility_index && sel_item && sel_item._selected == true) {
							this._deselect_all(true);
							sel_item._stat_change("notselect", "normal");
						}
					}
				}

				change_item = up_obj;

				var change_index = change_item.index;

				if (this.multiselect) {
					if (this._shiftKey == true || this._ctrlKey == true) {
						this._select_withmouseevent(change_index);
					}
					else {
						this._do_select(change_index, false);
					}
				}
				else {
					if (this._changeIndex(change_index)) {
						this.on_apply_index();
						if (!down_item.selected) {
							down_item._stat_change("notselect", "normal");
						}
					}
					else {
						if (!down_item.selected) {
							down_item._stat_change("notselect", "normal");
						}
					}
				}
			}
			else {
				if (!down_item.selected) {
					down_item._stat_change("notselect", "normal");
				}
			}

			if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
				this._is_accessibility_changeIdx = true;
			}
		}

		return ret;
	};

	_pComboListCtrl.on_fire_sys_ontouchstart = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (this._is_fling_stop = this.parent._is_fling) {
			return;
		}

		this._downItem = this._getWindow().findComponent(touchinfos[0]._elem);

		var ret = nexacro.Component.prototype.on_fire_sys_ontouchstart.call(this, touchinfos, changedtouchinfos, from_comp, from_refer_comp);
		return ret;
	};

	_pComboListCtrl.on_fire_sys_ontouchend = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (from_refer_comp && (from_refer_comp instanceof nexacro.ScrollBarCtrl || (from_refer_comp.parent && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl))) {
			return;
		}

		if (this._is_fling_stop) {
			return;
		}

		var sel_info_list = this._selectinfo_list;

		if (this.parent._scroll_proc) {
			if (sel_info_list.length) {
				var last = sel_info_list.length - 1;
				var info = sel_info_list[last];

				if (info.index != this.parent.index) {
					info.obj._keep_selecting = false;
					info.obj._control_pseudo = "";
					info.obj._contents_pseudo = "";
					info.obj._stat_change("notselect", "normal");
					sel_info_list.splice(last, 1);
				}
			}
			return;
		}

		var up_obj = this._getWindow().findComponent(touchinfos[0]._elem);
		var ret = nexacro.Component.prototype.on_fire_sys_ontouchend.call(this, touchinfos, changedtouchinfos, from_comp, from_refer_comp);

		while (sel_info_list.length) {
			var down_item = sel_info_list[0].obj;
			if (down_item) {
				down_item._keep_selecting = false;

				var items = this._get_contents_rows();
				var change_item;

				if (this._contains(up_obj) && this._downItem.index == up_obj.index) {
					var evt = touchinfos[0];
					this.on_fire_onitemclick(this, up_obj.index, up_obj.text, up_obj.value, evt._current_state, this._altKey, this._ctrlKey, this._shiftKey, this._metaKey, evt.screenX, evt.screenY, evt.canvasX, evt.canvasY, evt.clientX, evt.clientY);

					change_item = up_obj;

					var change_index = change_item.index;

					if (this.multiselect) {
						if (this._shiftKey == true || this._ctrlKey == true) {
							this._select_withmouseevent(change_index);
						}
						else {
							this._do_select(change_index, false);
						}
					}
					else {
						if (this._changeIndex(change_index)) {
							this.on_apply_index();
							if (!down_item.selected) {
								down_item._stat_change("notselect", "normal");
							}
						}
						else {
							if (!down_item.selected) {
								down_item._stat_change("notselect", "normal");
							}
						}
					}
				}
				else {
					if (!down_item.selected) {
						down_item._stat_change("notselect", "normal");
					}
				}
			}
			sel_info_list.shift();
		}

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5) {
			this._is_accessibility_changeIdx = true;
		}
		return ret;
	};

	_pComboListCtrl.on_fire_sys_ontouchcancel = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (from_refer_comp && (from_refer_comp instanceof nexacro.ScrollBarCtrl || (from_refer_comp.parent && from_refer_comp.parent instanceof nexacro.ScrollBarCtrl))) {
			return;
		}

		if (this._is_fling_stop) {
			return;
		}

		var sel_info_list = this._selectinfo_list;

		if (this.parent._scroll_proc) {
			if (sel_info_list.length) {
				var last = sel_info_list.length - 1;
				var info = sel_info_list[last];

				if (info.index != this.parent.index) {
					info.obj._keep_selecting = false;
					info.obj._control_pseudo = "";
					info.obj._contents_pseudo = "";
					info.obj._stat_change("notselect", "normal");
					sel_info_list.splice(last, 1);
				}
			}
			return;
		}

		if (this._downItem) {
			this._downItem._stat_change("notselect", "normal");
		}

		while (sel_info_list.length) {
			var down_item = sel_info_list[0].obj;
			if (down_item) {
				down_item._keep_selecting = false;


				if (!down_item.selected) {
					down_item._stat_change("notselect", "normal");
				}
			}
			sel_info_list.shift();
		}

		return;
	};

	_pComboListCtrl.on_vscroll = function (obj, e) {
		if (e._evtkind == "fling" || e._evtkind == "slide") {
			if (e.pos != this.parent._start_vscroll_pos) {
				this.parent._scroll_proc = true;
			}
		}
		nexacro.ListBoxCtrl.prototype.on_vscroll.call(this, obj, e);
	};

	_pComboListCtrl.on_hscroll = function (obj, e) {
		this.parent._scroll_proc = true;
		nexacro.ListBoxCtrl.prototype.on_hscroll.call(this, obj, e);
	};

	_pComboListCtrl._is_fling_stop = false;

	_pComboListCtrl.on_lbuttondown_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!nexacro.isTouchInteraction && !nexacro.SupportTouch) {
			return;
		}

		if (this._is_fling_stop = this.parent._is_fling) {
			return;
		}

		var obj = elem.parent;

		while (!obj._is_component) {
			obj = obj.parent;
		}

		if (!obj) {
			return;
		}

		obj._keep_selecting = true;

		obj._control_pseudo = "";
		obj._contents_pseudo = "";
		obj._stat_change("select", "selected");

		var shiftkey = this._shiftKey = shift_key;
		this._ctrlKey = ctrl_key;
		this._altKey = alt_key;
		this._metaKey = meta_key;

		this._selectinfo.obj = obj;
		this._selectinfo.index = obj.index;
		this._selectinfo.text = obj.text;
		this._selectinfo.value = obj.value;
		this._selectinfo_list[this._selectinfo_list.length] = this._selectinfo;

		if (!shiftkey) {
			this._shift_select_base_index = obj.index;
		}

		this._lbtnDownIdx = obj.index;
	};

	_pComboListCtrl.on_notify_item_onlbuttondown = function (obj, e) {
		if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
			if (this._is_fling_stop = this.parent._is_fling) {
				return;
			}
		}

		this.parent._start_vscroll_pos = this.vscroll && this.vscroll.pos > 0 ? this.vscroll.pos : 0;
		this.parent._scroll_proc = false;

		if (!nexacro.isTouchInteraction && !nexacro.SupportTouch) {
			var items = this.getSelectedItems();
			var items_len = items.length;

			for (var i = 0; i < items_len; i++) {
				var rowobj = this._get_rowobj_byrow(items[i]);
				if (rowobj) {
					rowobj.selected = false;
					rowobj._stat_change("notselect", "normal");
				}
			}
		}
		nexacro.ListBoxCtrl.prototype.on_notify_item_onlbuttondown.call(this, obj, e);
	};

	_pComboListCtrl.on_notify_item_onmouseenter = function (obj, e) {
	};

	_pComboListCtrl.on_notify_item_onmouseleave = function (obj, e) {
	};

	_pComboListCtrl._create_item = function (id, position, left, top, width, height, right, bottom, parent) {
		return new nexacro.ComboListItemCtrl(id, position, left, top, width, height, right, bottom, parent);
	};

	_pComboListCtrl._reset_item = function (rowidx) {
		var control_elem = this.getElement();

		var preidx = this.index;

		if (this._overedItem) {
			preidx = this._overedItem.index;
		}

		var currVScrollTopPos = control_elem.scroll_top == undefined ? 0 : control_elem.scroll_top;
		var vpos, nextTopPos, nextBottom;
		var itemHeight = parseInt(this.currentstyle.itemheight._value, 10);
		var rowcount = this._get_rowcount();
		var visible_end = this._get_last_visible_row(true) - 1;

		if (rowidx >= rowcount) {
			return;
		}

		nextTopPos = (rowidx < 0 ? 0 : rowidx) * itemHeight;
		nextBottom = nextTopPos + itemHeight;

		if ((preidx != rowidx) && (nextBottom >= this._client_height + currVScrollTopPos) && (this.parent._downkey == true)) {
			vpos = currVScrollTopPos + itemHeight;
		}
		else if (nextTopPos < currVScrollTopPos) {
			vpos = nextTopPos;
		}

		if (vpos >= 0) {
			this.vscrollbar.set_pos(vpos);
		}

		var items = this._get_contents_rows();
		var currobj = this._getItemByRealIdx(items, this._overeditemindex).obj;
		var nextobj = this._getItemByRealIdx(items, rowidx).obj;

		if (currobj) {
			currobj.on_apply_mouseover(false);
			this._set_overeditemindex(-1);
		}

		if (nextobj) {
			this._overedItem = nextobj;
			nextobj.on_apply_mouseover(true);
			this._set_overeditemindex(nextobj.index);
		}
	};

	_pComboListCtrl._refresh_size = function (is_contents_resize) {
		var control_elem = this.getElement();
		if (control_elem) {
			this._onResetScrollBar();

			var contents_maxwidth = this._contents_maxwidth;
			var contents_maxheight = this._contents_maxheight;
			var org_maxwidth = control_elem.container_maxwidth;
			var org_maxheight = control_elem.container_maxheight;

			contents_maxwidth = Math.max(contents_maxwidth, control_elem.client_width);
			contents_maxheight = Math.max(contents_maxheight, control_elem.client_height);

			if ((control_elem.container_maxwidth != contents_maxwidth || control_elem.container_maxheight != contents_maxheight)) {
				control_elem.setElementScrollMaxSize(contents_maxwidth, contents_maxheight);
			}

			if (is_contents_resize) {
				this._refresh_scroll();
			}
		}
	};

	_pComboListCtrl._adjustScrollRows_callback = function (no_ani) {
		this._adjustScrollRows_proc(no_ani);
		if (this.parent && !this.parent._is_fling) {
			this._clearHiddenPage();
		}
	};

	_pComboListCtrl._set_overeditemindex = function (idx) {
		this._overeditemindex = idx;
		this.parent._moverindex = idx;
	};

	_pComboListCtrl._changeIndex = function (v, bIgnoreCompareIdx, change_by_script, funcname) {
		var parent = this.parent;

		if (bIgnoreCompareIdx || v != this.index || ((parent.type == "search") && parent.index != v && v == this.index && !parent._keyval)) {
			var dataset = this._innerdataset;
			var postindex = parseInt(v, 10) | 0;

			var preidx = this.index;
			var pretext = this.text;
			var prevalue = this.value;

			var column = (this.codecolumn || this.datacolumn);
			if (dataset && column) {
				var datavalue = dataset.getColumn(postindex, this.datacolumn || this.codecolumn);
				var codevalue = dataset.getColumn(postindex, this.codecolumn || this.datacolumn);

				var posttext = datavalue == undefined ? "" : datavalue;
				var postvalue = codevalue;

				if (change_by_script != true) {
					if (this.on_fire_canitemchange(this, preidx, pretext, prevalue, postindex, posttext, postvalue) != false) {
						this._accessibility_index = this.index = postindex;
						this.text = posttext;
						if (!this._is_value_setting) {
							this.value = postvalue;
						}
						this.applyto_bindSource("value", codevalue);
						this.on_fire_onitemchanged(this, preidx, pretext, prevalue, postindex, posttext, postvalue);
						return true;
					}
				}
				else {
					this._accessibility_index = this.index = postindex;
					this.text = posttext;
					if (!this._is_value_setting) {
						this.value = postvalue;
					}
					this.applyto_bindSource("value", codevalue);
					return true;
				}
			}
		}
		else if ((parent.type == "filterlike" || parent.type == "filter") && v == this.index && !parent._keyval) {
			if (funcname == "_select_add") {
				return true;
			}

			var dataset = parent._filtereddataset ? parent._filtereddataset : parent._getFilteredDataset();
			v = parent._getRawIndex(dataset, v);

			if (v != parent.index) {
				var postindex = parseInt(this.index, 10) | 0;

				var preidx = this.index;
				var pretext = this.text;
				var prevalue = this.value;

				var column = (this.codecolumn || this.datacolumn);

				if (dataset && column) {
					var datavalue = dataset.getColumn(postindex, this.datacolumn || this.codecolumn);
					var codevalue = dataset.getColumn(postindex, this.codecolumn || this.datacolumn);

					var posttext = datavalue == undefined ? "" : datavalue;
					var postvalue = codevalue;

					if (this.on_fire_canitemchange(this, preidx, pretext, prevalue, postindex, posttext, postvalue) != false) {
						this._accessibility_index = this.index = postindex;
						this.text = posttext;
						if (!this._is_value_setting) {
							this.value = postvalue;
						}
						this.applyto_bindSource("value", codevalue);

						this.on_fire_onitemchanged(this, preidx, pretext, prevalue, postindex, posttext, postvalue);
						return true;
					}
				}
			}
			else {
				var rowobj = this._get_rowobj_byrow(v);
				if (rowobj && rowobj.selected == false) {
					rowobj.set_selected(true);
				}

				if (parent._isPopupVisible() && !change_by_script) {
					if (!parent._scroll_proc) {
						parent.popupwindow._closePopup();
					}
				}
			}
		}
		return false;
	};

	_pComboListCtrl._setAccessibilityNotifyEvent = function (direction) {
		if (this._is_accessibility_changeIdx) {
			this._is_accessibility_changeIdx = false;
			return this.parent._setAccessibilityNotifyEvent(direction);
		}
		else {
			return nexacro.ListBox.prototype._setAccessibilityNotifyEvent.call(this, direction);
		}
	};

	delete _pComboListCtrl;
	_pComboListCtrl = null;


	nexacro.ComboListItemCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ListItemCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pComboListItemCtrl = nexacro._createPrototype(nexacro.ListItemCtrl, nexacro.ComboListItemCtrl);
	nexacro.ComboListItemCtrl.prototype = _pComboListItemCtrl;

	_pComboListItemCtrl.on_mousemove_basic_action = function () {
		if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
			return;
		}

		var overobj = this.parent._overedItem;

		if (overobj && overobj != this) {
			if (overobj._apply_pushed_pseudo && overobj._is_push) {
				overobj._stat_change("notpush", "normal");
				overobj._is_pushed_area = false;
			}
			else if (!overobj._selected) {
				overobj._stat_change("", "normal");
			}
			overobj = null;
		}

		this.parent._overedItem = this;

		if (this._apply_pushed_pseudo && this._is_push) {
			this._stat_change("push", "pushed");
			this._is_pushed_area = true;
		}
		else {
			this.parent._set_overeditemindex(this.index);
			this._stat_change("", "mouseover");
		}
	};

	_pComboListItemCtrl.on_apply_mouseover = function (isovered) {
		if (this.selected) {
			return;
		}
		if (isovered) {
			this._stat_change("notselect", "mouseover");
		}
		else {
			this._stat_change("notselect", "normal");
		}
	};

	_pComboListItemCtrl.on_apply_selected = function () {
		if (this.selected) {
			this._stat_change("select", "selected");
		}
		else {
			this._stat_change("notselect", "normal");
		}
	};

	_pComboListItemCtrl._common_lbuttonup = function (changedtouchinfos, elem, canvasX, canvasY, from_elem) {
		if (changedtouchinfos) {
			var touchinfo = nexacro._getFirstTouchInfo(changedtouchinfos);

			if (touchinfo) {
				elem = touchinfo._elem;
				canvasX = touchinfo.canvasX;
				canvasY = touchinfo.canvasY;
				from_elem = elem;
				touchinfo = null;
			}
		}

		if (elem != from_elem) {
			this.parent.parent._is_real_upelem = from_elem;
		}

		return true;
	};

	_pComboListItemCtrl._on_touchend = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		this._common_lbuttonup(changedtouchinfos, null, null, null, null);
		return nexacro.Component.prototype._on_touchend.call(this, touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp);
	};

	_pComboListItemCtrl._on_lbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem) {
		this._common_lbuttonup(null, elem, canvasX, canvasY, from_elem);
		return nexacro.Component.prototype._on_lbuttonup.call(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem);
	};

	_pComboListItemCtrl.on_apply_custom_setfocus = function (evt_name) {
		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			return nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
		}
		return nexacro.ListItemCtrl.prototype.on_apply_custom_setfocus.call(this, evt_name);
	};

	delete _pComboListItemCtrl;
	_pComboListItemCtrl = null;


	nexacro.ComboEditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.EditCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._accessibility_role = "combobox";
		this._prev_caret_pos = -1;
	};

	var _pComboEditCtrl = nexacro._createPrototype(nexacro.EditCtrl, nexacro.ComboEditCtrl);
	nexacro.ComboEditCtrl.prototype = _pComboEditCtrl;

	_pComboEditCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent.on_find_CurrentStyle_color(pseudo, this) || nexacro.Component._default_color;
	};

	_pComboEditCtrl.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_displaynulltextcolor(pseudo, this) || nexacro.Component._default_color;
	};

	_pComboEditCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_font(pseudo, this) || nexacro.Component._default_font;
	};

	_pComboEditCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent.on_find_CurrentStyle_align(pseudo, this) || nexacro.Component._default_align;
	};

	_pComboEditCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		return this.parent.on_find_CurrentStyle_accessibility(pseudo, this) || nexacro.Component._default_accessibility;
	};

	_pComboEditCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_background(pseudo, this);
	};

	_pComboEditCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_border(pseudo, this);
	};

	_pComboEditCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bordertype(pseudo, this);
	};

	_pComboEditCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_gradation(pseudo, this);
	};

	_pComboEditCtrl.on_apply_custom_setfocus = function (evt_name) {
		var api = this._edit_base_api;
		var input_elem = this._input_element;

		if (api && input_elem) {
			if (nexacro._enableaccessibility) {
				input_elem._setElementInputRole();
			}

			var prevCaretPos = this._prev_caret_pos;
			if (prevCaretPos > -1) {
				api._set_input_begin_pos(prevCaretPos);

				if (evt_name != "lbuttondown") {
					input_elem.setElementSetSelect(prevCaretPos, prevCaretPos);
				}
				this._prev_caret_pos = -1;
			}

			if (this.parent && this.parent.type == "dropdown") {
				api._set_input_begin_pos(0);

				if (nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") {
					input_elem.setElementSetSelect(api._input_begin_pos, api._input_begin_pos);
				}
			}

			if (nexacro.BrowserType == "Edge" && evt_name == "focus") {
				if (this._setcaret) {
					this._setcaret = false;
				}
				this.setCaretPos(api._input_begin_pos);
				input_elem.setElementFocus();
			}
			else {
				var scrollLeft = input_elem.getScrollLeft();
				var textPosition = this.parent ? this.parent.overflowtextposition : null;

				nexacro.Edit.prototype.on_apply_custom_setfocus.call(this, evt_name);

				if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") && evt_name == "lbuttondown" && !nexacro._isNull(textPosition)) {
					if (textPosition == "keep") {
						input_elem.setScrollLeft(scrollLeft);
					}
					else {
						input_elem.setScrollLeft(0);
					}
				}
			}

			input_elem = null;
		}
	};


	_pComboEditCtrl.on_get_style_accessibility_label = function () {
		return "";
	};

	_pComboEditCtrl._getFromComponent = function (comp) {
		var parent = comp.parent;
		if (parent && parent._isPopupVisible()) {
			return parent;
		}
		else {
			return nexacro.Component.prototype._getFromComponent.call(this, comp);
		}
	};

	_pComboEditCtrl.set_value = function (v) {
		nexacro.Edit.prototype.set_value.call(this, v);

		var textPosition = this.parent ? this.parent.overflowtextposition : null;
		if (textPosition == "start" && this._prev_caret_pos > -1) {
			this._prev_caret_pos = -1;
		}

		this._setAccessibilityValue(this.text, false);
	};

	_pComboEditCtrl.on_fire_ondblclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return this.parent.on_fire_ondblclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this.parent, from_refer_comp);
	};

	delete _pComboEditCtrl;
	_pComboEditCtrl = null;


	nexacro.ComboButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pComboButtonCtrl = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.ComboButtonCtrl);
	nexacro.ComboButtonCtrl.prototype = _pComboButtonCtrl;

	_pComboButtonCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this._find_ctrl_pseudo_obj("background", pseudo, "background");
	};

	_pComboButtonCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this._find_ctrl_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pComboButtonCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this._find_ctrl_pseudo_obj("border", pseudo, "border");
	};

	_pComboButtonCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this._find_ctrl_pseudo_obj("bordertype", pseudo, "bordertype");
	};

	_pComboButtonCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this._find_ctrl_pseudo_obj("align", pseudo, "align") || nexacro.Component._default_align;
	};

	_pComboButtonCtrl.on_find_CurrentStyle_margin = function (pseudo) {
		return this._find_ctrl_pseudo_obj("margin", pseudo, "margin") || nexacro.Component._default_margin;
	};

	_pComboButtonCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this._find_ctrl_pseudo_obj("cursor", pseudo, "cursor") || nexacro.Component._default_cursor;
	};

	_pComboButtonCtrl.on_find_CurrentStyle_opacity = function (pseudo) {
		return this._find_ctrl_pseudo_obj("opacity", pseudo, "opacity") || nexacro.Component._default_opacity;
	};

	_pComboButtonCtrl.on_find_CurrentStyle_shadow = function (pseudo) {
		return this._find_ctrl_pseudo_obj("shadow", pseudo, "shadow");
	};

	_pComboButtonCtrl.on_apply_custom_setfocus = function (evt_name) {
		var parent = this.parent;
		if (parent) {
			if (parent.comboedit) {
				if (!(nexacro.isTouchInteraction || nexacro.SupportTouch) || (nexacro._isMobile && !nexacro._isMobile())) {
					parent.comboedit.on_apply_custom_setfocus(evt_name);
				}
				else {
					nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
				}
			}
			parent = null;
		}
	};

	_pComboButtonCtrl.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (nexacro.isTouchInteraction || nexacro.SupportTouch) {
			var evt = new nexacro.EventInfo(this, "ondropdown");
			if ((nexacro.Browser == "Runtime" && (button == "lbutton" || button == "touch")) || (nexacro.Browser != "Runtime" && (button == "touch" || (!nexacro.isTouchInteraction && button == "lbutton")))) {
				this.parent.on_notify_ondropdown(this, evt);
			}
		}

		return this.parent.on_fire_onclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
	};

	_pComboButtonCtrl.on_fire_ondblclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return this.parent.on_fire_ondblclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this.parent, from_refer_comp);
	};

	delete _pComboButtonCtrl;
	_pComboButtonCtrl = null;


	nexacro.ComboPopupWindow = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.PopupComponent.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
		this._is_ios = false;
	};

	var _pPopupWindow = nexacro._createPrototype(nexacro.PopupComponent, nexacro.ComboPopupWindow);
	nexacro.ComboPopupWindow.prototype = _pPopupWindow;

	_pPopupWindow.set_visible = function (v) {
		nexacro.PopupComponent.prototype.set_visible.call(this, v);

		var parent = this.parent;
		if (!v) {
			var keyval = parent._keyval;
			var ei = parent._eventinfo;

			if (keyval === null || keyval === undefined) {
				if (parent.displaynulltext != "" && parent.value == undefined) {
					parent._setEditValue(undefined);
				}
				else {
					if (parent.value && !parent.text) {
						parent._setEditValue("");
					}
					else {
						parent._setEditValue(parent.text);
					}
				}
			}

			parent.on_fire_oncloseup(parent, ei.preindex, ei.pretext, ei.prevalue, ei.postindex, ei.posttext, ei.postvalue, ei.isselect);
		}
		else {
			parent._eventinfo.isselect = false;
		}
		parent = null;
	};

	_pPopupWindow._closePopup = function () {
		if (nexacro._enableaccessibility) {
			this.parent._want_arrows = false;
			this.parent._setAccessibilityStatExpanded(false);
		}

		if (nexacro.OS == "iOS" && this._is_ios && this.parent.comboedit._input_element._is_ios_composition) {
			this.parent.comboedit._input_element._input_handle.blur();
			this.parent.comboedit._input_element._is_ios_composition = false;
		}

		nexacro.PopupComponent.prototype._closePopup.call(this);

		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
			_window._releaseCaptureLock(this._attached_comp);
			this._track_capture = false;
		}

		var last_focused = this._find_lastFocused(this);

		if (!this.parent._is_mouseover && last_focused == this.parent) {
			this.parent._stat_change("focus", "focused");
		}
	};
	_pPopupWindow._getMainFrame = function () {
		var form = this;
		while (form && form instanceof nexacro.MainFrame) {
			form = form.parent;
		}
		return form;
	};

	_pPopupWindow._getScalePosition = function (totalw, totalh) {
		var parent = this.parent;
		var combolist = this._attached_comp;
		if (!combolist) {
			return;
		}

		var rootframe = this._getOwnerFrame();

		if (!rootframe) {
			return;
		}

		var rootwindow = rootframe._getWindow();
		rootframe = rootwindow ? rootwindow.frame : null;
		if (!rootframe) {
			return;
		}

		var scale = this._getCumulativeZoomFactor() / 100.0;
		var combo_ctrl_elem_pos = nexacro._getElementPositionInFrame(parent.getElement());
		var mainframe_ctrl_elem_pos = nexacro._getElementPositionInFrame(rootframe.getElement());
		var mainframe_ctrl_elem_screen_pos = nexacro._getElementScreenPosition(rootframe.getElement());

		var combolist_width = totalw;
		var combolist_height = totalh * scale;
		var combo_width = parent._adjust_width;
		var combo_height = parent._adjust_height * scale;
		var _left, _top, _width, _height;
		var body_width, body_height;
		var pre_height = totalh;
		var vscroll_width, text_width, max_width;

		body_width = mainframe_ctrl_elem_pos.x + rootframe._adjust_width;
		body_height = mainframe_ctrl_elem_pos.y + rootframe._adjust_height;

		var screen_avail_height = nexacro._getScreenAvailHeight();

		_left = 0;
		_top = combo_height;
		_width = combolist_width;
		_height = combolist_height;

		var below_space_height = 0;
		if (screen_avail_height > body_height && mainframe_ctrl_elem_screen_pos.y + body_height > screen_avail_height) {
			below_space_height = screen_avail_height - mainframe_ctrl_elem_screen_pos.y - (combo_ctrl_elem_pos.y + combo_height);
		}
		else if (nexacro.Browser == "Runtime" && screen_avail_height <= body_height) {
			below_space_height = screen_avail_height - mainframe_ctrl_elem_screen_pos.y - (combo_ctrl_elem_pos.y + combo_height);
		}
		else {
			below_space_height = body_height - (combo_ctrl_elem_pos.y + combo_height);
		}
		var upper_space_height = combo_ctrl_elem_pos.y;

		var list_pt = list_pb = list_bt = list_bb = 0;
		var list_item_h = (parseInt(combolist.currentstyle.itemheight._value, 10)) * scale;
		if (combolist.currentstyle.padding) {
			list_pt = (parseInt(combolist.currentstyle.padding.top, 10)) * scale;
			list_pb = (parseInt(combolist.currentstyle.padding.bottom, 10)) * scale;
		}
		if (combolist.currentstyle.border) {
			list_bt = (parseInt(combolist.currentstyle.border.top_width, 10)) * scale;
			list_bb = (parseInt(combolist.currentstyle.border.bottom_width, 10)) * scale;
		}
		var list_pd_bd = list_pt + list_pb + list_bt + list_bb;
		var displayrowcount = parent.displayrowcount;
		var rowcnt = 0;
		var need_minimum_height = 0;
		var fds = parent._filtereddataset ? parent._filtereddataset : parent._getFilteredDataset();
		var ds = (parent.type == "filter" || parent.type == "filterlike") ? fds : parent._innerdataset;
		if (ds) {
			rowcnt = ds.getRowCount();
		}


		if (displayrowcount == -1) {
			need_minimum_height = (rowcnt < 3 ? rowcnt : 3) * list_item_h + list_pd_bd;
			combolist_height = (rowcnt * list_item_h + list_pd_bd);

			if (below_space_height > need_minimum_height) {
				if (below_space_height > combolist_height) {
					_height = combolist_height;
				}
				else {
					_height = below_space_height;
				}
			}
			else {
				if (upper_space_height > need_minimum_height) {
					if (upper_space_height > combolist_height) {
						_top = -combolist_height;
						_height = combolist_height;
					}
					else {
						_top = -upper_space_height;
						_height = upper_space_height;
					}
				}
				else {
					if (below_space_height > upper_space_height) {
						_height = below_space_height;
					}
					else {
						_top = -upper_space_height;
						_height = upper_space_height;
					}
				}
			}
		}
		else {
			rowcnt = rowcnt > displayrowcount ? displayrowcount : rowcnt;
			need_minimum_height = rowcnt * list_item_h + list_pd_bd;
			combolist_height = (rowcnt * list_item_h + list_pd_bd);

			if (below_space_height > need_minimum_height) {
				_height = need_minimum_height;
			}
			else {
				if (upper_space_height > need_minimum_height) {
					_top = -need_minimum_height;
					_height = need_minimum_height;
				}
				else {
					if (below_space_height > upper_space_height) {
						_height = below_space_height;
					}
					else {
						_top = -upper_space_height;
						_height = upper_space_height;
					}
				}
			}
		}



		text_width = this.parent._getMaxTextSize(this.parent._innerdataset);

		if (combolist.vscrollbar) {
			vscroll_width = combolist.vscrollbar.width;
			max_width = text_width + vscroll_width;

			if ((combo_width < max_width) && (_height < pre_height)) {
				_width += vscroll_width;
			}
		}

		if (combo_ctrl_elem_pos.x < mainframe_ctrl_elem_pos.x) {
			var gap = mainframe_ctrl_elem_pos.x - combo_ctrl_elem_pos.x;
			_left += gap;
		}
		else if (combo_ctrl_elem_pos.x + combolist_width > mainframe_ctrl_elem_pos.x + body_width) {
			var gap = (combo_ctrl_elem_pos.x + combolist_width) - (mainframe_ctrl_elem_pos.x + body_width);
			_left -= gap;

			if (combolist.vscrollbar) {
				_left -= vscroll_width;
			}

			if (_left < (mainframe_ctrl_elem_pos.x - combo_ctrl_elem_pos.x)) {
				_left = mainframe_ctrl_elem_pos.x - combo_ctrl_elem_pos.x;
			}
		}

		return {
			left : _left, 
			top : _top, 
			width : _width, 
			height : _height, 
			scale : scale
		};
	};
	_pPopupWindow._popupAuto = function (totalw, totalh) {
		var jsonval = this._getScalePosition(totalw, totalh);
		var scale = jsonval.scale, left = jsonval.left, top = jsonval.top, width = jsonval.width, height = jsonval.height;

		var elem = this.getElement();
		if (elem.setZoom) {
			elem.setZoom(scale * 100);
		}
		else if (nexacro.ScrollableContainerElement.prototype.setZoom) {
			nexacro.ScrollableContainerElement.prototype.setZoom.call(elem, scale * 100);
		}

		if (this._attached_comp._isRtl()) {
			left = -left;
		}

		this._popupBy(this.parent, left, top, width, (height / scale));
	};

	_pPopupWindow._popupCenterAuto = function (totalw, totalh) {
		var jsonval = this._getScalePosition(totalw, totalh);
		var scale = jsonval.scale, left = jsonval.left, top = jsonval.top, width = jsonval.width, height = jsonval.height;

		var elem = this.getElement();
		if (elem.setZoom) {
			elem.setZoom(scale * 100);
		}
		else if (nexacro.ScrollableContainerElement.prototype.setZoom) {
			nexacro.ScrollableContainerElement.prototype.setZoom.call(elem, scale * 100);
		}

		var rootframe = this._getOwnerFrame();

		if (!rootframe) {
			return;
		}

		var rootwindow = rootframe._getWindow();
		rootframe = rootwindow ? rootwindow.frame : null;

		var pos = nexacro._getElementPositionInFrame(rootframe.getElement());
		var l = ((rootframe.width / 2) - (width / 2));
		var t = ((rootframe.height / 2) - (height / 2));

		t = t < 0 ? 0 : t;

		this._popupBy(rootframe, (l / scale), t, width, (height / scale));
	};

	delete _pPopupWindow;
	_pPopupWindow = null;


	nexacro.ComboCtrl = function (id, absolute, left, top, width, height, right, bottom, parent) {
		nexacro.Combo.call(this, id, absolute, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pComboCtrl = nexacro.ComboCtrl.prototype = nexacro._createPrototype(nexacro.Combo, nexacro.ComboCtrl);
	_pComboCtrl._type_name = "ComboControl";

	nexacro._setForControlStyleFinder(_pComboCtrl);

	_pComboCtrl.on_created_contents = function () {
		nexacro.Combo.prototype.on_created_contents.call(this);

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			this._control_element.setElementAccessibilityHidden(true);
		}
	};

	delete _pComboCtrl;
	_pComboCtrl = null;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Div) {
	nexacro.Div = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Form.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.async = true;
		this.url = null;
		this.applystyletype = "cascade,keep";
		this.scrollbars = "autoboth";

		this._init_width = (right - left) | 0;
		this._init_height = (bottom - top) | 0;

		this._text_elem = null;

		this._url = null;
		this._urlloading = false;
		this._oldstyletype = 3;
		this._styletype = 3;

		this._originStyles = {
		};
		this._linkstyles = {
		};
		this._linkstyles.normal = this.on_create_custom_style();
		this._setstylecomplete = false;
		this._callstylecnt = 0;

		this._cssclass = "";
		this._linkedcssclass = "";
		this._setclasscomplete = false;
		this._callclasscnt = 0;

		if (parent) {
			this._has_parent = true;
		}
		else {
			this._has_parent = false;
		}

		this._scrollbars = 3;

		this._apply_client_padding = true;

		this._accessibility_role = "form";

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmousewheel" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onvscroll" : 1, 
			"onhscroll" : 1, 
			"onactivate" : 1, 
			"onbeforeclose" : 1, 
			"onclose" : 1, 
			"ondeactivate" : 1, 
			"onsyscommand" : 1, 
			"ontimer" : 1, 
			"oninit" : 1, 
			"onload" : 1, 
			"canlayoutchange" : 1, 
			"canstepchange" : 1, 
			"onlayoutchanged" : 1, 
			"onstepchanged" : 1, 
			"onmouseup" : 1, 
			"onmousedown" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"ondbltap" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"onzoom" : 1
		};
	};

	var _pDiv = nexacro._createPrototype(nexacro.Form, nexacro.Div);
	nexacro.Div.prototype = _pDiv;
	_pDiv._type_name = "Div";

	_pDiv._find_pseudo_obj = function (styleProp, pseudo, returnType) {
		switch (this._styletype) {
			case 5:
				return this._find_cascade_pseudo_obj(styleProp, pseudo, returnType);
			case 4:
				return this._find_apply_pseudo_obj(styleProp, pseudo, returnType);
			case 1:
				return this._find_keep_pseudo_obj(styleProp, pseudo, returnType);
			case 3:
			default:
				return this._find_cascadekeep_pseudo_obj(styleProp, pseudo, returnType);
		}
		return null;
	};

	_pDiv._find_cascade_pseudo_obj = function (styleProp, pseudo, returnType) {
		var r;
		do {
			if (pseudo != "normal") {
				var lo = this._linkstyles[pseudo];
				if (lo && (r = lo[styleProp]) && (!r._is_empty)) {
					break;
				}
				var po = this._styles[pseudo];
				if (po && (r = po[styleProp]) && (!r._is_empty)) {
					break;
				}
			}

			var no = this._linkstyles["normal"];
			if (no && (r = no[styleProp]) && (!r._is_empty)) {
				break;
			}
			var no = this.style;
			if (no && (r = no[styleProp]) && (!r._is_empty)) {
				break;
			}
		} while (false);

		if (r && !r._is_empty) {
			var foundType = r._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				r = nexacro._getCachedStyleObj(returnType, r._value);
			}
			return r;
		}

		return this._find_comp_pseudo_obj_from_finder(styleProp, pseudo, returnType);
	};

	_pDiv._find_apply_pseudo_obj = function (styleProp, pseudo, returnType) {
		var r;
		do {
			if (pseudo != "normal") {
				var lo = this._linkstyles[pseudo];
				if (lo && (r = lo[styleProp]) && (!r._is_empty)) {
					break;
				}
			}

			var no = this._linkstyles["normal"];
			if (no && (r = no[styleProp]) && (!r._is_empty)) {
				break;
			}
		} while (false);

		if (r && !r._is_empty) {
			var foundType = r._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				r = nexacro._getCachedStyleObj(returnType, r._value);
			}
			return r;
		}
		return this._find_comp_pseudo_obj_from_finder(styleProp, pseudo, returnType);
	};

	_pDiv._find_keep_pseudo_obj = function (styleProp, pseudo, returnType) {
		var r;
		do {
			if (pseudo != "normal") {
				var po = this._styles[pseudo];
				if (po && (r = po[styleProp]) && (!r._is_empty)) {
					break;
				}
			}

			var no = this.style;
			if (no && (r = no[styleProp]) && (!r._is_empty)) {
				break;
			}
		} while (false);

		if (r && !r._is_empty) {
			var foundType = r._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				r = nexacro._getCachedStyleObj(returnType, r._value);
			}
			return r;
		}
		return this._find_comp_pseudo_obj_from_finder(styleProp, pseudo, returnType);
	};

	_pDiv._find_cascadekeep_pseudo_obj = function (styleProp, pseudo, returnType) {
		var r;
		do {
			if (pseudo != "normal") {
				var po = this._styles[pseudo];
				if (po && (r = po[styleProp]) && (!r._is_empty)) {
					break;
				}
				var lo = this._linkstyles[pseudo];
				if (lo && (r = lo[styleProp]) && (!r._is_empty)) {
					break;
				}
			}

			var no = this.style;
			if (no && (r = no[styleProp]) && (!r._is_empty)) {
				break;
			}
			no = this._linkstyles["normal"];
			if (no && (r = no[styleProp]) && (!r._is_empty)) {
				break;
			}
		} while (false);

		if (r && !r._is_empty) {
			var foundType = r._type_name.toLowerCase();
			if (returnType && foundType != returnType) {
				r = nexacro._getCachedStyleObj(returnType, r._value);
			}
			return r;
		}
		return this._find_comp_pseudo_obj_from_finder(styleProp, pseudo, returnType);
	};

	_pDiv.on_apply_custom_pseudo = function (pseudo) {
		var applystyles = applystyles = ["align", "background", "border", "bordertype", "color", "cursor", "font", "letterspace", "gradation", "margin", "opacity", "padding", "shadow", "accessibility"];
		var findstyle;
		if (!this._url || this._url.length == 0) {
			this._oldstyletype = this._styletype;
			this._styletype = 1;
			findstyle = this._find_style(applystyles);
			this._styletype = this._oldstyletype;

			this._apply_style(findstyle);
		}
		else {
			if (this._setstylecomplete) {
				findstyle = this._find_style(applystyles);

				this._apply_style(findstyle);
			}
		}
		applystyles = null;
	};

	_pDiv.on_update_style_align = function () {
		var align = this.style.align;
		var ret = this.on_update_style("align", align);
		if (ret) {
			this.on_apply_style_align(align);
		}
	};

	_pDiv.on_update_style_background = function () {
		var background = this.style.background;
		var ret = this.on_update_style("background", background);
		if (ret) {
			this.on_apply_style_background(background);
		}
	};

	_pDiv.on_update_style_border = function () {
		var border = this.style.border;
		var ret = this.on_update_style("border", border);
		if (ret) {
			this.on_apply_style_border(border);
		}
	};

	_pDiv.on_update_style_bordertype = function () {
		var bordertype = this.style.bordertype;
		var ret = this.on_update_style("bordertype", bordertype);
		if (ret) {
			this.on_apply_style_bordertype(bordertype);
		}
	};

	_pDiv.on_update_style_color = function () {
		var color = this.style.color;
		var ret = this.on_update_style("color", color);
		if (ret) {
			this.on_apply_style_color(color);
		}
	};

	_pDiv.on_update_style_cursor = function () {
		var cursor = this.style.cursor;
		var ret = this.on_update_style("cursor", cursor);
		if (ret) {
			this.on_apply_style_cursor(cursor);
		}
	};

	_pDiv.on_update_style_font = function () {
		var font = this.style.font;
		var ret = this.on_update_style("font", font);
		if (ret) {
			this.on_apply_style_font(font);
		}
	};

	_pDiv.on_update_style_glow = function () {
		var glow = this.style.glow;
		var ret = this.on_update_style("glow", glow);
		if (ret) {
			this.on_apply_style_glow(glow);
		}
	};

	_pDiv.on_update_style_gradation = function () {
		var gradation = this.style.gradation;
		var ret = this.on_update_style("gradation", gradation);
		if (ret) {
			this.on_apply_style_gradation(gradation);
		}
	};

	_pDiv.on_update_style_margin = function () {
		var margin = this.style.margin;
		var ret = this.on_update_style("margin", margin);
		if (ret) {
			this.on_apply_style_margin(margin);
		}
	};

	_pDiv.on_update_style_opacity = function () {
		var opacity = this.style.opacity;
		var ret = this.on_update_style("opacity", opacity);
		if (ret) {
			this.on_apply_style_opacity(opacity);
		}
	};

	_pDiv.on_update_style_padding = function () {
		var padding = this.style.padding;
		var ret = this.on_update_style("padding", padding);
		if (ret) {
			this.on_apply_style_padding(padding);
		}
	};

	_pDiv.on_update_style_shadow = function () {
		var shadow = this.style.shadow;
		var ret = this.on_update_style("shadow", shadow);
		if (ret) {
			this.on_apply_style_shadow(shadow);
		}
	};

	_pDiv.on_update_style_accessibility = function () {
		var accessibility = this.style.accessibility;
		var ret = this.on_update_style("accessibility", accessibility);
		if (ret) {
			this.on_apply_style_accessibility(this._make_accessibility_value(accessibility));
		}
	};

	_pDiv.on_update_style = function (styleName, styleObj) {
		var pseudo = "normal";
		if (!this._setstylecomplete && this._is_loading) {
			if (!this._linkstyles[pseudo]) {
				var styleclone = nexacro._cloneStyleObject(this.style);
				this._linkstyles[pseudo] = styleclone;
				styleclone = null;
			}
			this._linkstyles[pseudo][styleName] = styleObj;
			if (this._styletype == 4 || this._styletype == 5 || (this._styletype == 3 && this._styles[pseudo] && this._styles[pseudo][styleName] == null)) {
				this.currentstyle[styleName] = styleObj;
				return true;
			}
		}
		else if (this._setstylecomplete && !this._is_loading) {
			var style = styleObj;
			if (!this._styles[pseudo]) {
				var styleclone = nexacro._cloneStyleObject(this.style);
				this._styles[pseudo] = styleclone;
				styleclone = null;
			}
			this._styles[pseudo][styleName] = style;
			if (!this._url || this._url.length == 0) {
				this.currentstyle[styleName] = styleObj;
				return true;
			}
			else {
				if (this._styletype == 1 || this._styletype == 3) {
					this.currentstyle[styleName] = styleObj;
					return true;
				}
				else {
					return false;
				}
			}
		}
	};

	_pDiv.on_apply_style_color = function (color) {
		var textElem = this._text_elem;

		if (textElem) {
			textElem.setElementColor(color);
		}
	};

	_pDiv.on_apply_style_font = function (font) {
		var textElem = this._text_elem;

		if (textElem) {
			textElem.setElementFont(font);
		}
	};

	_pDiv.on_apply_style_align = function (align) {
		var textElem = this._text_elem;

		if (textElem) {
			var halign = align.halign == "" ? "center" : align._halign;
			var valign = align.valign == "" ? "middle" : align._valign;
			textElem.setElementAlignXY(halign, valign);
		}
	};

	_pDiv.on_create_contents = function () {
		if (this.components.length > 0) {
			nexacro.Form.prototype.on_create_contents.call(this);
		}
		else {
			var control_elem = this.getElement();
			if (control_elem) {
				var curstyle = this.currentstyle;

				if (this.text) {
					var text_elem = new nexacro.TextBoxElement(control_elem);
					var halign = ((curstyle.align == null || curstyle.align.halign == "") ? "center" : curstyle.align._halign);
					var valign = ((curstyle.align == null || curstyle.align.valign == "") ? "middle" : curstyle.align._valign);

					text_elem.setElementSize(this._client_width, this._client_height);
					text_elem.setElementFont(curstyle.font);
					text_elem.setElementColor(curstyle.color);
					text_elem.setElementAlignXY(halign, valign);
					text_elem.setElementLetterSpace(curstyle.letterspace);
					this._text_elem = text_elem;

					text_elem = null;
					curstyle = null;
					halign = null;
					valign = null;
				}
				else if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
					this._text_elem = new nexacro.TextBoxElement(control_elem);
					this._text_elem.setElementSize(this._client_width, this._client_height);
				}
			}
			control_elem = null;
		}
		this._setStyle();
		this._setclasscomplete = true;
	};

	_pDiv.on_created_contents = function () {
		this.on_apply_applystyletype();
		if (this.text) {
			this.on_apply_text();
			var text_elem = this._text_elem;

			if (text_elem) {
				text_elem.create();
				text_elem = null;
			}
		}

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4 && this._text_elem) {
			this._text_elem.create();
			this._text_elem._setElementAccessibilityRole();
			this._text_elem._setElementAccessibilityLabel();
		}

		if (this._is_loaded == false && this.url != null && !this._has_parent) {
			this._has_parent = true;
			this.loadForm(this.url, this.async, true, this.parent._url);
		}

		nexacro.Form.prototype.on_created_contents.call(this);
	};
	_pDiv.on_destroy_contents = function () {
		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}

		this._has_parent = false;
		this._user_property_list = null;

		nexacro.Form.prototype.on_destroy_contents.call(this);

		if (this._originStyles) {
			var originstyles = this._originStyles;
			for (var pseudo in originstyles) {
				var originstyle = originstyles[pseudo];
				if (originstyle.destroy) {
					originstyle.destroy();
					originstyle = null;
				}
			}
			this._originStyles = null;
		}

		if (this._linkstyles) {
			var linkstyles = this._linkstyles;
			for (var pseudo in linkstyles) {
				var linkstyle = linkstyles[pseudo];
				if (linkstyle.destroy) {
					linkstyle.destroy();
					linkstyle = null;
				}
			}
			this._linkstyles = null;
		}
	};


	_pDiv.on_change_containerRect = function (width, height) {
		if (this._text_elem) {
			this._text_elem.setElementSize(width, height);
		}

		nexacro.Form.prototype.on_change_containerRect.call(this, width, height);
	};

	_pDiv.on_update_position = function (resize_flag, move_flag) {
		var child_list = this._child_list;
		var len = child_list ? child_list.length : 0;
		for (var i = 0; i < len; i++) {
			var comp = child_list[i];
			if (comp._isPopupVisible && comp._isPopupVisible() && (resize_flag || move_flag)) {
				if (comp._closePopup) {
					comp._closePopup();
				}
			}
			comp = null;
		}

		childe_list = null;
		len = null;

		nexacro.Form.prototype.on_update_position.call(this, resize_flag, move_flag);
	};

	_pDiv._getAccessibilityRole = function (accessibility) {
		var role = accessibility.role ? accessibility.role : this._accessibility_role;
		return role;
	};

	_pDiv.on_get_style_accessibility_label = function () {
		return this.text ? this.text : "";
	};

	_pDiv.getFocus = function () {
		return this.parent ? this.parent.getFocus() : null;
	};

	_pDiv.getParentContext = function () {
		return this.parent;
	};

	_pDiv.reload = function () {
		this._is_reload = true;
		this.on_apply_url(true);
	};

	_pDiv.addChild = function (id, obj) {
		var ret = nexacro.Form.prototype.addChild.call(this, id, obj);
		if (obj._is_component) {
			this._delete_text();
		}
		return ret;
	};

	_pDiv._delete_text = function () {
		this._apply_client_padding = false;

		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}
		if (this._control_element) {
			this._control_element.setElementPadding(nexacro.Component._default_padding);
		}
	};


	_pDiv._initContents = function (control_elem, pseudo) {
		if (this._urlloading) {
			pseudo = "normal";
			this._pseudo = "normal";
			this._contents_pseudo = "";
		}
		this._urlloading = false;

		nexacro.Component.prototype._initContents.call(this, control_elem, pseudo);
	};

	_pDiv._init = function () {
		this._css_finder = null;
		this._ref_css_finder = null;
		this._cssfinder_cache = {
		};

		if (!this._setstylecomplete && this._callstylecnt == 0) {
			this._setStyle();
		}

		if (this.hscrollbar) {
			this.hscrollbar._setScrollPos(0);
		}
		if (this.vscrollbar) {
			this.vscrollbar._setScrollPos(0);
		}

		this._cssclass = this.cssclass;
		this._callclasscnt++;
	};

	_pDiv._clear = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._is_init = true;
			this._pseudo = "normal";
			this.currentstyle._empty();
			this._control_pseudo = "";
			this._contents_pseudo = "";

			this._clearEventListeners();

			if (this._timerManager && this._timerManager.timerList.length > 0) {
				this._timerManager.clearAll();
			}

			if (this._text_elem) {
				this._text_elem.destroy();
				this._text_elem = null;
			}

			control_elem.clearContents();
			control_elem = null;

			if (this.stepcontrol) {
				if (nexacro.Browser == "Runtime") {
					this.stepcontrol.set_stepcount(0);
				}
				this._destroyStepControl();
				this.stepcontrol = null;
			}

			var binds = this.binds;
			var len = binds.length;
			for (var i = 0; i < len; i++) {
				var bindname = binds.get_id(i);
				this._bind_manager._setBinditem(binds.get_item(bindname), true);
				this[bindname] = null;
			}
			binds.clear();
			binds = null;

			var components = this.components;
			var objects = this.objects;

			this.all = new nexacro.Collection();
			this.components = new nexacro.Collection();
			this.objects = new nexacro.Collection();

			len = components.length;
			for (var i = 0; i < len; i++) {
				var compname = components.get_id(i);
				if (this[compname]) {
					if (this[compname]._destroy) {
						this[compname]._destroy();
					}
				}
			}
			components.clear();
			components = null;

			len = objects.length;
			for (var i = 0; i < len; i++) {
				var objname = objects.get_id(i);
				if (this[objname]) {
					if (this[objname].destroy) {
						this[objname].destroy();
					}
					delete this[objname];
					this[objname] = null;
				}
			}
			objects.clear();
			objects = null;

			if (this._linkstyles) {
				var linkstyles = this._linkstyles;
				for (var pseudo in linkstyles) {
					var linkstyle = linkstyles[pseudo];
					if (linkstyle.destroy) {
						linkstyle.destroy();
						linkstyle = null;
					}
				}
			}


			this.resetScroll();

			this._clear_prop();
			this._last_focused = null;
		}
		this._is_created = false;
	};
	_pDiv._clear_obj = function () {
		this._is_init = true;
		this._pseudo = "normal";
		this.currentstyle._empty();
		this._contents_pseudo = "";

		this._clearEventListeners();

		if (this._timerManager && this._timerManager.timerList.length > 0) {
			this._timerManager.clearAll();
		}

		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}

		if (this.stepcontrol) {
			this._destroyStepControl();
			this.stepcontrol = null;
		}

		var binds = this.binds;
		var len = binds.length;
		for (var i = 0; i < len; i++) {
			var bindname = binds.get_id(i);
			this._bind_manager._setBinditem(binds.get_item(bindname), true);
			this[bindname] = null;
		}
		binds.clear();
		binds = null;

		var components = this.components;
		var objects = this.objects;

		this.all = new nexacro.Collection();
		this.components = new nexacro.Collection();
		this.objects = new nexacro.Collection();

		len = components.length;
		for (var i = 0; i < len; i++) {
			var compname = components.get_id(i);
			if (this[compname]) {
				if (this[compname]._destroy) {
					this[compname]._destroy();
				}
			}
		}
		components.clear();
		components = null;

		len = objects.length;
		for (var i = 0; i < len; i++) {
			var objname = objects.get_id(i);
			if (this[objname]) {
				if (this[objname].destroy) {
					this[objname].destroy();
				}
				delete this[objname];
				this[objname] = null;
			}
		}
		objects.clear();
		objects = null;

		if (this._linkstyles) {
			var linkstyles = this._linkstyles;
			for (var pseudo in linkstyles) {
				var linkstyle = linkstyles[pseudo];
				if (linkstyle.destroy) {
					linkstyle.destroy();
					linkstyle = null;
				}
			}
		}

		this._last_focused = null;
	};

	_pDiv.loadForm = function (formurl, async, reload, baseurl) {
		var is_async = async;
		var parent_context = this.getParentContext();
		while (parent_context && parent_context._is_form) {
			if (parent_context && !parent_context._is_fired_onload && parent_context.async === false) {
				is_async = false;
				break;
			}

			parent_context = parent_context.getParentContext();
		}

		nexacro.FormBase.prototype.loadForm.call(this, formurl, is_async, reload, baseurl);
	};

	_pDiv._loadInclude = function (mainurl, url) {
		var is_async = this.async;
		var parent_context = this.getParentContext();
		while (parent_context && parent_context._is_form) {
			if (parent_context && !parent_context._is_fired_onload && parent_context.async === false) {
				is_async = false;
				break;
			}

			parent_context = parent_context.getParentContext();
		}

		if (!this._is_created) {
		}

		this._loadIncludeJS.call(this, mainurl, url, is_async);
	};

	_pDiv._loadIncludeJS = function (mainurl, url, asyncmode) {
		var service = nexacro._getServiceObject(url);
		var suburl = nexacro._makeurl(url);
		this._load_manager.loadIncludeModule(suburl, null, asyncmode, service);
	};

	_pDiv.on_apply_text = function () {
		var control_elem = this.getElement();
		var text_elem = this._text_elem;
		var curstyle = this.currentstyle;

		if (control_elem) {
			if (!text_elem && this.text && this.components.length < 1) {
				text_elem = this._text_elem = new nexacro.TextBoxElement(control_elem);
				text_elem.create();
			}

			if (text_elem) {
				var halign = (curstyle.align.halign == "" ? "center" : curstyle.align._halign);
				var valign = (curstyle.align.valign == "" ? "middle" : curstyle.align._valign);

				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementFont(curstyle.font);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(curstyle.letterspace);

				halign = null;
				valign = null;

				if (this.style.color != "transparent") {
					var text = this._display_text;
					if (text) {
						text_elem.setElementText(text);
					}
					else {
						text_elem.setElementText("");
					}
				}

				if (this._is_created && nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
					text_elem._setElementAccessibilityRole();
					text_elem._setElementAccessibilityLabel();
				}
			}
		}
		control_elem = null;
		text_elem = null;
		curstyle = null;
	};

	_pDiv.set_async = function (v) {
		this.async = nexacro._toBoolean(v);
	};

	_pDiv.set_url = function (v, basync) {
		if ((v != this.url) && !(v == "" && this.url == null)) {
			if ((v && v.substring(v.length - 5) == ".xfdl") || !v) {
				this._old_url = this.url;
				this.url = v;
				this._url = v;
				this.on_apply_url();
			}
		}
	};

	_pDiv.getSetter = function (name, fnname) {
		{

			if (!this._user_property_list) {
				this._user_property_list = [];
			}

			if (!this._user_property_list[name]) {
				this._user_property_list.push(name);
			}
		}

		if (!fnname) {
			fnname = "set_" + name;
		}

		var fn = this[fnname];
		if (fn) {
			return new nexacro.SetterBinder(this, name, fn);
		}
		return new nexacro.PropBinder(this, name);
	};

	_pDiv._clear_prop = function () {
		var list = nexacro._div_property_list;
		var user_list = this._user_property_list;
		var temp_obj = [];

		var proplength = list.length;
		var usr_length = user_list ? user_list.length : 0;
		var i = 0;

		for (i = 0; i < proplength; i++) {
			var propid = list[i];
			temp_obj[i] = this[propid];
			this[propid] = null;
		}
		for (i = 0; i < usr_length; i++) {
			var propid = user_list[i];
			temp_obj[i + proplength] = this[propid];
			this[propid] = null;
		}

		for (var prop in this) {
			if (this.hasOwnProperty(prop) && this[prop] != null && prop != "_registerscriptfn" && prop != "_addPreloadList") {
				this[prop] = null;
			}
		}

		for (i = 0; i < proplength; i++) {
			var propid = list[i];
			this[propid] = temp_obj[i];
		}
		for (i = 0; i < usr_length; i++) {
			var propid = user_list[i];
			this[propid] = temp_obj[i + proplength];
		}
		temp_obj = null;
	};

	_pDiv.on_apply_url = function (reload) {
		if (this._url && this._url.length > 0) {
			this._urlloading = true;
			this._setstylecomplete = false;

			application.getLayoutManager().clearLayout(this);

			var asyncmode = this.async;

			if (reload != true) {
				var confirm_message = this._on_beforeclose();
				if (this._checkAndConfirmClose(confirm_message) == false) {
					this.url = this._url = this._old_url;
					return;
				}
				this._on_close();

				var _last_focused_orig = this._last_focused;
				var _is_created_orig = this._is_created;

				this._clear();

				this._last_focused = _last_focused_orig;
				this._is_created = _is_created_orig;
			}

			var _parent = this.parent;
			if (_parent != null) {
				while (!_parent._url) {
					_parent = _parent.parent;
				}
				if (this._apply_client_padding) {
					this._delete_text();
				}
				this.loadForm(this._url, asyncmode, true, _parent._url);
				this._has_parent = true;
			}
			else {
				this._has_parent = false;
			}
			_parent = null;
		}
		else {
			var confirm_message = this._on_beforeclose();
			if (this._checkAndConfirmClose(confirm_message) == false) {
				this.url = this._url = this._old_url;
				return;
			}
			this._on_close();

			this.on_apply_emptyurl();
			this.on_apply_applystyletype();
		}

		if (this.onactivate && this.onactivate._has_handlers && this._isCompleted) {
			var evt = new ActivateEventInfo(this, "onactivate", true);
			this.onactivate._fireEvent(this, evt);
			evt = null;
		}
	};

	_pDiv.on_apply_emptyurl = function () {
		this._clear();
		var parent_elem = this.parent._control_element;
		if (!parent_elem) {
			return false;
		}

		var control_elem = this._control_element;
		if (control_elem) {
			var pseudo = this._getResultPseudo(this._status, this._pseudo);
			this.cssclass = this._cssclass;
			this._initControl(control_elem, pseudo);
			this._initContents(control_elem, pseudo);
			if (parent_elem._handle) {
				parent_elem.appendChildElement(control_elem);
				this.on_created();
			}
			pseudo = "";
		}

		parent_elem = null;
		control_elem = null;
	};

	_pDiv.set_applystyletype = function (v) {
		if (this.applystyletype != v) {
			this.applystyletype = v;
			this.on_apply_applystyletype();
		}
	};

	_pDiv.on_apply_applystyletype = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var applystyles = ["align", "background", "border", "bordertype", "color", "cursor", "font", "gradation", "margin", "opacity", "padding", "shadow", "accessibility"];
			var findstyle;
			if (!this._url || this._url.length == 0) {
				this._oldstyletype = this._styletype;
				this._styletype = 1;
				findstyle = this._find_style(applystyles);
				this._styletype = this._oldstyletype;
				this.cssclass = this._cssclass;
			}
			else {
				switch (this.applystyletype) {
					case "keep":
						this._styletype = 1;
						this.cssclass = this._cssclass;
						break;
					case "apply":
						this._styletype = 4;
						if (this._linkedcssclass) {
							this.cssclass = this._linkedcssclass;
						}
						break;
					case "cascade":
						this._styletype = 5;
						if (this._linkedcssclass) {
							this.cssclass = this._linkedcssclass;
						}
						break;
					case "cascade,keep":
						this._styletype = 3;
						if (this._linkedcssclass) {
							this.cssclass = this._linkedcssclass;
						}
						break;
					default:
						this._styletype = 3;
						if (this._linkedcssclass) {
							this.cssclass = this._linkedcssclass;
						}
						v = "cascade,keep";
						break;
				}
				findstyle = this._find_style(applystyles);
			}
			this._apply_style(findstyle);

			if (this.components && this.components.length > 0) {
				for (var i = 0; i < this.components.length; i++) {
					var obj = this.components[i];
					if (obj.on_apply_applystyletype) {
						obj.on_apply_applystyletype();
					}
					else if (obj.on_apply_custom_pseudo) {
						if (obj instanceof nexacro.Grid) {
							obj.on_apply_custom_pseudo(obj._pseudo, true);
						}
						else {
							obj.on_apply_custom_pseudo(obj._pseudo);
						}
					}
				}
			}
			applystyles = null;
			findstyle = null;
		}
		control_elem = null;
	};

	_pDiv.set_cssclass = function (cssclass) {
		if (this.cssclass != cssclass) {
			if (!this._setclasscomplete) {
				if (!this._url || this._url.length == 0) {
					this._cssclass = cssclass;
				}
				else {
					if (this._is_loading && this._callclasscnt == 0) {
						this._cssclass = cssclass;
					}
					else if (this._is_loading && this._callclasscnt != 0) {
						this._linkedcssclass = cssclass;
					}
				}
			}
			else {
				if (this._is_loading) {
					this._linkedcssclass = cssclass;
				}
				else {
					this._cssclass = cssclass;
				}
			}

			this.cssclass = cssclass;
			this.on_apply_cssclass(cssclass);
		}
	};

	_pDiv.set_class = _pDiv.set_cssclass;

	_pDiv.on_apply_cssclass = function () {
		var pseudo = this._pseudo;
		var control_elem = this._control_element;

		if (control_elem) {
			this.currentstyle._empty();
			this._css_finder = null;
			this._ref_css_finder = null;
			this._cssfinder_cache = {
			};

			pseudo = this._pseudo == "" ? "normal" : this._pseudo;

			if (this.vscrollbar) {
				this.vscrollbar.on_apply_prop_class();
			}
			if (this.hscrollbar) {
				this.hscrollbar.on_apply_prop_class();
			}

			this._onResetScrollBar();

			this._pseudo = "";
			this._control_pseudo = "";
			this._contents_pseudo = "";

			this._updateControl(control_elem, pseudo);
			this._updateContents(control_elem, pseudo);
		}
	};

	_pDiv._apply_style = function (styleObj) {
		this.on_apply_style_align(styleObj.align);
		this.on_apply_style_background(styleObj.background);
		this.on_apply_style_border(styleObj.border);
		this.on_apply_style_bordertype(styleObj.bordertype);
		this.on_apply_style_color(styleObj.color);
		this.on_apply_style_cursor(styleObj.cursor);
		this.on_apply_style_font(styleObj.font);
		this.on_apply_style_letterspace(styleObj.letterspace);
		this.on_apply_style_glow(styleObj.glow);
		this.on_apply_style_gradation(styleObj.gradation);
		this.on_apply_style_margin(styleObj.margin);
		this.on_apply_style_opacity(styleObj.opacity);
		this.on_apply_style_padding(styleObj.padding);
		this.on_apply_style_shadow(styleObj.shadow);
		this.on_apply_style_accessibility(styleObj.accessibility);
	};

	_pDiv._find_style = function (styleNameArr) {
		var style = {
		};
		var style_len = styleNameArr.length;
		var pseudo = this._pseudo;

		for (var i = 0; i < style_len; i++) {
			var styleName = styleNameArr[i];
			switch (styleName) {
				case "accessibility":
					style["accessibility"] = this._make_accessibility_value(this.on_find_CurrentStyle_accessibility(pseudo));
					if (!style["accessibility"]) {
						style["accessibility"] = nexacro._getCachedAccessibilityObj("");
					}
					break;
				case "align":
					style["align"] = this.on_find_CurrentStyle_align(pseudo);
					if (!style["align"]) {
						style["align"] = nexacro._getCachedAlignObj("");
					}
					break;
				case "background":
					style["background"] = this.on_find_CurrentStyle_background(pseudo);
					if (!style["background"]) {
						style["background"] = nexacro._getCachedBackgroundObj("");
					}
					break;
				case "border":
					style["border"] = this.on_find_CurrentStyle_border(pseudo);
					if (!style["border"]) {
						style["border"] = nexacro._getCachedBorderObj("");
					}
					break;
				case "bordertype":
					style["bordertype"] = this.on_find_CurrentStyle_bordertype(pseudo);
					if (!style["bordertype"]) {
						style["bordertype"] = nexacro._getCachedBordertypeObj("");
					}
					break;
				case "color":
					style["color"] = this.on_find_CurrentStyle_color(pseudo);
					if (!style["color"]) {
						style["color"] = nexacro._getCachedColorObj("");
					}
					break;
				case "cursor":
					style["cursor"] = this.on_find_CurrentStyle_cursor(pseudo);
					if (!style["cursor"]) {
						style["cursor"] = nexacro._getCachedStyleObj("");
					}
					break;
				case "font":
					style["font"] = this.on_find_CurrentStyle_font(pseudo);
					if (!style["font"]) {
						style["font"] = nexacro._getCachedFontObj("");
					}
					break;
				case "letterspace":
					style["letterspace"] = this.on_find_CurrentStyle_letterspace(pseudo);
					if (!style["letterspace"]) {
						style["letterspace"] = nexacro._getCachedStyleObj("letterspace", "0");
					}
					break;
				case "glow":
					style["glow"] = this.on_find_CurrentStyle_glow(pseudo);
					if (!style["glow"]) {
						style["glow"] = nexacro._getCachedGlowObj("");
					}
					break;
				case "gradation":
					style["gradation"] = this.on_find_CurrentStyle_gradation(pseudo);
					if (!style["gradation"]) {
						style["gradation"] = nexacro._getCachedGradationObj("");
					}
					break;
				case "margin":
					style["margin"] = this.on_find_CurrentStyle_margin(pseudo);
					if (!style["margin"]) {
						style["margin"] = nexacro._getCachedMarginObj("");
					}
					break;
				case "opacity":
					style["opacity"] = this.on_find_CurrentStyle_opacity(pseudo);
					if (!style["opacity"]) {
						style["opacity"] = nexacro._getCachedStyleObj("opacity", "100");
					}
					break;
				case "padding":
					style["padding"] = this.on_find_CurrentStyle_padding(pseudo);
					if (!style["padding"]) {
						style["padding"] = nexacro._getCachedPaddingObj("");
					}
					break;
				case "shadow":
					style["shadow"] = this.on_find_CurrentStyle_shadow(pseudo);
					if (!style["shadow"]) {
						style["shadow"] = nexacro._getCachedShadowObj("");
					}
					break;
			}
			this.currentstyle[styleName] = style[styleName];
		}
		return style;
	};

	_pDiv._setStyle = function () {
		var pseudoName;
		if (!this._setstylecomplete && this._callstylecnt == 0) {
			var styleclone = nexacro._cloneStyleObject(this.style);
			this._originStyles.normal = styleclone;

			for (pseudoName in this._styles) {
				this._originStyles[pseudoName] = nexacro._cloneStyleObject(this._styles[pseudoName]);
			}

			if (!this._url || this._url.length == 0) {
				this._setstylecomplete = true;
			}
			else {
				this.style._empty();
			}
			this._callstylecnt++;
			styleclone = null;
		}
		else if (!this._setstylecomplete && this._callstylecnt != 0) {
			if (this._url || this._url.length > 0) {
				var styleclone = nexacro._cloneStyleObject(this.style);
				this._linkstyles.normal = styleclone;

				for (pseudoName in this._styles) {
					this._linkstyles[pseudoName] = nexacro._cloneStyleObject(this._styles[pseudoName]);
				}

				this._setstylecomplete = true;
				this._callstylecnt++;

				for (pseudoName in this._originStyles) {
					var styleclone2 = nexacro._cloneStyleObject(this._originStyles[pseudoName]);
					styleclone2._target = this;
					if (pseudoName == "normal") {
						this.style = styleclone2;
					}
					else {
						this._styles[pseudoName] = styleclone2;
					}
					styleclone2 = null;
				}
				styleclone = null;
			}
			else {
				this.style = nexacro._cloneStyleObject(this._originStyles.normal);
			}
		}
		return;
	};

	delete _pDiv;
	_pDiv = null;

	nexacro.DivCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Div.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pDivCtrl = nexacro.DivCtrl.prototype = nexacro._createPrototype(nexacro.Div, nexacro.DivCtrl);

	nexacro._setForControlStyleFinder(_pDivCtrl);
	delete _pDivCtrl;
	_pDivCtrl = null;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.ProgressBar) {
	nexacro.ProgressBar_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}
	};

	var _pProgressBarStyle = nexacro._createPrototype(nexacro.Style, nexacro.ProgressBar_Style);
	nexacro.ProgressBar_Style.prototype = _pProgressBarStyle;

	eval(nexacro._createValueAttributeEvalStr("_pProgressBarStyle", "bartype"));
	eval(nexacro._createValueAttributeEvalStr("_pProgressBarStyle", "smooth"));
	eval(nexacro._createValueAttributeEvalStr("_pProgressBarStyle", "direction"));
	eval(nexacro._createValueAttributeEvalStr("_pProgressBarStyle", "startimage"));
	eval(nexacro._createValueAttributeEvalStr("_pProgressBarStyle", "progressimage"));
	eval(nexacro._createValueAttributeEvalStr("_pProgressBarStyle", "endimage"));
	eval(nexacro._createColorAttributeEvalStr("_pProgressBarStyle", "barcolor"));
	eval(nexacro._createGradationAttributeEvalStr("_pProgressBarStyle", "bargradation"));

	_pProgressBarStyle.__custom_emptyObject = function () {
		this.bartype = null;
		this.smooth = null;
		this.direction = null;
		this.startimage = null;
		this.progressimage = null;
		this.endimage = null;
		this.barcolor = null;
		this.bargradation = null;
	};

	_pProgressBarStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.bartype && !this.bartype._is_empty) {
			val += "bartype:" + this.bartype._value + "; ";
		}
		if (this.smooth && !this.smooth._is_empty) {
			val += "smooth:" + this.smooth._value + "; ";
		}
		if (this.direction && !this.direction._is_empty) {
			val += "direction:" + this.direction._value + "; ";
		}
		if (this.startimage && !this.startimage._is_empty) {
			val += "startimage:" + this.startimage._value + "; ";
		}
		if (this.progressimage && !this.progressimage._is_empty) {
			val += "progressimage:" + this.progressimage._value + "; ";
		}
		if (this.endimage && !this.endimage._is_empty) {
			val += "endimage:" + this.endimage._value + "; ";
		}
		if (this.barcolor && !this.barcolor._is_empty) {
			val += "barcolor:" + this.barcolor._value + "; ";
		}
		if (this.bargradation && !this.bargradation._is_empty) {
			val += "bargradation:" + this.bargradation._value + "; ";
		}
		return val;
	};

	nexacro.ProgressBar_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.bartype = null;
		this.smooth = null;
		this.direction = null;
		this.startimage = null;
		this.progressimage = null;
		this.endimage = null;
		this.barcolor = null;
		this.bargradation = null;
	};

	var _pProgressBarCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.ProgressBar_CurrentStyle);
	nexacro.ProgressBar_CurrentStyle.prototype = _pProgressBarCurrentStyle;

	_pProgressBarCurrentStyle.__custom_emptyObject = _pProgressBarStyle.__custom_emptyObject;
	_pProgressBarCurrentStyle.__get_custom_style_value = _pProgressBarStyle.__get_custom_style_value;

	_pProgressBarStyle = null;
	_pProgressBarCurrentStyle = null;

	nexacro.ProgressBar = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.pos = 0;
		this.step = 1;
		this.max = 100;
		this.min = 0;
		this.blocksize = 15;
		this.blockgap = 2;

		this._cell_list = [];
		this._cell_item = null;
		this._start_cell = null;
		this._progress_cell = null;
		this._end_cell = null;
		this._start_cell_width = 0;
		this._progress_cell_width = 0;
		this._end_cell_width = 0;
		this._start_cell_url = "";
		this._progress_cell_url = "";
		this._end_cell_url = "";
		this._accessibility_role = "progressbar";
	};

	var _pProgressBar = nexacro._createPrototype(nexacro.Component, nexacro.ProgressBar);
	nexacro.ProgressBar.prototype = _pProgressBar;

	_pProgressBar._type_name = "ProgressBar";

	nexacro.ProgressBar._default_bartype = nexacro._getCachedStyleObj("bartype", "normal");

	_pProgressBar.on_apply_custom_pseudo = function (pseudo) {
		if (!pseudo) {
			pseudo = this._pseudo;
		}

		var curstyle = this.currentstyle;
		var style_obj = this.on_find_CurrentStyle_bartype(pseudo);
		if (curstyle.bartype != style_obj) {
			curstyle.bartype = style_obj;
			this.on_apply_style_bartype(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_smooth(pseudo);
		if (curstyle.smooth != style_obj) {
			curstyle.smooth = style_obj;
			this.on_apply_style_smooth(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_direction(pseudo);
		if (curstyle.direction != style_obj) {
			curstyle.direction = style_obj;
			this.on_apply_style_direction(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_startImage(pseudo);
		if (curstyle.startimage != style_obj) {
			curstyle.startimage = style_obj;
			this.on_apply_style_startimage(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_endImage(pseudo);
		if (curstyle.endimage != style_obj) {
			curstyle.endimage = style_obj;
			this.on_apply_style_endimage(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_progressImage(pseudo);
		if (curstyle.progressimage != style_obj) {
			curstyle.progressimage = style_obj;
			this.on_apply_style_progressimage(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_barColor(pseudo);
		if (curstyle.barcolor != style_obj) {
			curstyle.barcolor = style_obj;
			this.on_apply_style_barcolor(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_barGradation(pseudo);
		if (curstyle.bargradation != style_obj) {
			curstyle.bargradation = style_obj;
			this.on_apply_style_bargradation(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != style_obj) {
			curstyle.font = style_obj;
			this.on_apply_style_font(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != style_obj) {
			curstyle.letterspace = style_obj;
			this.on_apply_style_letterspace(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != style_obj) {
			curstyle.color = style_obj;
			this.on_apply_style_color(style_obj);
		}

		style_obj = this.on_find_CurrentStyle_align(pseudo);
		if (curstyle.align != style_obj) {
			curstyle.align = style_obj;
			this.on_apply_style_align(style_obj);
		}
	};

	_pProgressBar.on_create_custom_style = function () {
		return new nexacro.ProgressBar_Style(this);
	};

	_pProgressBar.on_create_custom_currentStyle = function () {
		return new nexacro.ProgressBar_CurrentStyle();
	};


	_pProgressBar.on_find_CurrentStyle_bartype = function (pseudo) {
		var bartype = this._find_pseudo_obj("bartype", pseudo);
		return (bartype) ? bartype : nexacro.ProgressBar._default_bartype;
	};
	_pProgressBar.on_find_CurrentStyle_smooth = function (pseudo) {
		return this._find_pseudo_obj("smooth", pseudo);
	};
	_pProgressBar.on_find_CurrentStyle_direction = function (pseudo) {
		return this._find_pseudo_obj("direction", pseudo);
	};
	_pProgressBar.on_find_CurrentStyle_startImage = function (pseudo) {
		return this._find_pseudo_obj("startimage", pseudo);
	};
	_pProgressBar.on_find_CurrentStyle_progressImage = function (pseudo) {
		return this._find_pseudo_obj("progressimage", pseudo);
	};
	_pProgressBar.on_find_CurrentStyle_endImage = function (pseudo) {
		return this._find_pseudo_obj("endimage", pseudo);
	};
	_pProgressBar.on_find_CurrentStyle_barColor = function (pseudo) {
		return this._find_pseudo_obj("barcolor", pseudo, "color");
	};
	_pProgressBar.on_find_CurrentStyle_barGradation = function (pseudo) {
		return this._find_pseudo_obj("bargradation", pseudo, "gradation");
	};


	_pProgressBar.on_update_style_bartype = function () {
		var bartype = this.currentstyle.bartype = this.on_find_CurrentStyle_bartype(this._pseudo);
		this.on_apply_style_bartype(bartype);
	};
	_pProgressBar.on_update_style_smooth = function () {
		var smooth = this.currentstyle.smooth = this.on_find_CurrentStyle_smooth(this._pseudo);
		this.on_apply_style_smooth(smooth);
	};
	_pProgressBar.on_update_style_direction = function () {
		var direction = this.currentstyle.direction = this.on_find_CurrentStyle_direction(this._pseudo);
		this.on_apply_style_direction(direction);
	};
	_pProgressBar.on_update_style_startimage = function () {
		var startimage = this.currentstyle.startimage = this.on_find_CurrentStyle_startImage(this._pseudo);
		this.on_apply_style_startimage(startimage);
	};
	_pProgressBar.on_update_style_progressimage = function () {
		var progressimage = this.currentstyle.progressimage = this.on_find_CurrentStyle_progressImage(this._pseudo);
		this.on_apply_style_progressimage(progressimage);
	};
	_pProgressBar.on_update_style_endimage = function () {
		var endimage = this.currentstyle.endimage = this.on_find_CurrentStyle_endImage(this._pseudo);
		this.on_apply_style_endimage(endimage);
	};
	_pProgressBar.on_update_style_barcolor = function () {
		var barcolor = this.currentstyle.barcolor = this.on_find_CurrentStyle_barColor(this._pseudo);
		this.on_apply_style_barcolor(barcolor);
	};
	_pProgressBar.on_update_style_bargradation = function () {
		var bargradation = this.currentstyle.bargradation = this.on_find_CurrentStyle_barGradation(this._pseudo);
		this.on_apply_style_bargradation(bargradation);
	};


	_pProgressBar.on_apply_style_bartype = function (v) {
		this._update();
	};

	_pProgressBar.on_apply_style_smooth = function (v) {
		this._update();
	};

	_pProgressBar.on_apply_style_direction = function (v) {
		this._update();
	};

	_pProgressBar.on_apply_style_startimage = function (v) {
		this._apply_style_image(v, this._on_start_cell, "start");
	};

	_pProgressBar.on_apply_style_progressimage = function (v) {
		this._apply_style_image(v, this._on_progress_cell, "progress");
	};

	_pProgressBar.on_apply_style_endimage = function (v) {
		this._apply_style_image(v, this._on_end_cell, "end");
	};

	_pProgressBar.on_apply_style_barcolor = function (barcolor) {
		var bartype = this.on_find_CurrentStyle_bartype();
		barcolor = barcolor ? barcolor.toString() : "transparent";

		if (barcolor != "@gradation" && bartype == "normal") {
			if (this._cell_item) {
				this._cell_item.style.set_background(barcolor);
			}

			var list = this._cell_list;
			if (list.length > 0) {
				for (var i = 0, len = list.length; i < len; i++) {
					list[i].style.set_background(barcolor);
				}
			}
		}
	};

	_pProgressBar.on_apply_style_bargradation = function (bargradation) {
		if (!bargradation) {
			return;
		}

		var barcolor = this.on_find_CurrentStyle_barColor(this._pseudo);
		barcolor = barcolor ? barcolor.toString() : "transparent";

		if (barcolor == "@gradation") {
			var cell_item = this._cell_item;
			if (cell_item) {
				cell_item.style.set_background(barcolor);
				cell_item.on_update_style_gradation();
			}
			var cell_list = this._cell_list;
			var len = cell_list.length;
			if (len > 0) {
				for (var i = 0; i < len; i++) {
					cell_list[i].style.set_background(barcolor);
					cell_list[i].on_update_style_gradation();
				}
			}
		}
	};

	_pProgressBar.on_apply_style_color = function (color) {
		if (this._text_elem && color) {
			this._text_elem.setElementColor(color);
		}
	};

	_pProgressBar.on_apply_style_font = function (font) {
		if (this._text_elem && font) {
			this._text_elem.setElementFont(font);
		}
	};

	_pProgressBar.on_apply_style_align = function (align) {
		if (this._text_elem && align) {
			this._text_elem.setElementAlignXY(align.halign ? align._halign : "center", align.valign ? align._valign : "middle");
		}
	};

	_pProgressBar.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var pseudo = this._pseudo;
			if (this.text) {
				var text_elem = this._text_elem = new nexacro.TextBoxElement(control_elem);
				var align = this.on_find_CurrentStyle_align(pseudo);

				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(this.on_find_CurrentStyle_color(pseudo));
				text_elem.setElementFont(this.on_find_CurrentStyle_font(pseudo));
				text_elem.setElementAlignXY(align.halign ? align._halign : "center", align.valign ? align._valign : "middle");
				text_elem.setElementLetterSpace(this.on_find_CurrentStyle_letterspace(pseudo));
			}
		}
	};

	_pProgressBar.on_created_contents = function () {
		var text_elem = this._text_elem;
		var list = this._cell_list;

		if (text_elem) {
			text_elem.create();
		}

		if (this._cell_item) {
			this._cell_item.on_created();
		}

		if (list && list.length > 0) {
			for (var i = 0; i < list.length; i++) {
				list[i].on_created();
			}
		}

		if (this.cssclass) {
			this.on_apply_pseudo();
			this.on_apply_custom_pseudo();
			this.on_apply_prop_class();
		}

		this.on_apply_text();

		if (nexacro._enableaccessibility && this._isAccessibilityEnable()) {
			this._setAccessibilityInfoValueMin(this.min);
			this._setAccessibilityInfoValueMax(this.max);
			this._setAccessibilityInfoValueCur(this.pos);
		}
	};
	_pProgressBar.on_destroy_contents = function () {
		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}

		this._clear();
	};

	_pProgressBar._clear = function (type) {
		if ((!type || type == "list") && this._cell_list) {
			for (var i = 0, len = this._cell_list.length; i < len; i++) {
				this._cell_list[i].destroyComponent();
			}
			this._cell_list = [];
		}

		if (!type || type == "img") {
			if (this._start_cell) {
				this._start_cell.destroyComponent();
				this._start_cell = null;
			}

			if (this._end_cell) {
				this._end_cell.destroyComponent();
				this._end_cell = null;
			}

			if (this._progress_cell) {
				this._progress_cell.destroyComponent();
				this._progress_cell = null;
			}
		}

		if (!type || type == "cell") {
			if (this._cell_item) {
				this._cell_item.destroyComponent();
				this._cell_item = null;
			}
		}
	};

	_pProgressBar.on_change_containerRect = function (width, height) {
		var textElem = this._text_elem;
		if (textElem) {
			textElem.setElementSize(width, height);
		}
		this._update();
	};
	_pProgressBar._on_getAccessibilityAdditionalLabel = function () {
		var additional = "";
		if (this._isAccessibilityEnable()) {
			additional = (this.expr && this.expr.length > 0) ? this.displaytext + " " + this.min + " " + this.max : this.pos + " " + this.min + " " + this.max;
		}
		return additional;
	};

	_pProgressBar._on_getAccessibilityAdditionalRole = function () {
		if (this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo)) == "progressbar") {
			return " ProgressBar";
		}
		return "";
	};
	_pProgressBar.on_apply_text = function () {
		var control_elem = this.getElement();
		if (control_elem && this.text) {
			var text_elem = this._text_elem;
			if (!text_elem) {
				text_elem = this._text_elem = new nexacro.TextBoxElement(control_elem);

				text_elem.setElementSize(this._client_width, this._client_height);
				var align = this.on_find_CurrentStyle_align(this._pseudo);

				text_elem.setElementColor(this.on_find_CurrentStyle_color(this._pseudo));
				text_elem.setElementFont(this.on_find_CurrentStyle_font(this._pseudo));
				text_elem.setElementAlignXY(align.halign ? align._halign : "center", align.valign ? align._valign : "middle");
				text_elem.setElementLetterSpace(this.on_find_CurrentStyle_letterspace(this._pseudo));

				text_elem.create();
			}

			var expr = this.expr;

			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var len = expr.length;
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (len == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				exprfn = nexacro._createInlineFunc(conv_expr, ["comp", "pos"]);

				if (exprfn) {
					try {
						var val = nexacro._toString(exprfn.call(null, this, this.pos));
						if (val != this.displaytext) {
							this.displaytext = val;
							if (nexacro._enableaccessibility && this._isAccessibilityEnable()) {
								this._setAccessibilityValue(val);
								this._notifyAccessibility(val, "notify");
							}
						}
					}
					catch (e) {
						return;
					}
				}
			}
			else {
				this.displaytext = this.text;
			}

			text_elem.setElementText(this.displaytext);
			text_elem.setElementRtlDirection(this._rtldirection);
			this.on_apply_style_align(this.currentstyle.align);
		}
	};

	_pProgressBar.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pProgressBar.set_blockgap = function (v) {
		if (this._is_NaN(v)) {
			return;
		}

		v = parseInt(v) | 0;

		v = (v < 0) ? 0 : v;

		if (this.blockgap != v) {
			this.blockgap = v;
			this._update();
		}
	};

	_pProgressBar.set_blocksize = function (v) {
		if (this._is_NaN(v)) {
			return;
		}
		v = parseInt(v) | 0;

		if (v < 1) {
			v = 1;
		}

		if (this.blocksize != v) {
			this.blocksize = v;
			this._update();
		}
	};

	_pProgressBar.set_min = function (v) {
		if (this._is_NaN(v)) {
			return;
		}

		v = parseInt(v) | 0;

		v = (v < 0) ? 0 : v;

		if (this.min != v) {
			this.min = v;

			if (v > this.max) {
				this.max = v;
			}
			if (v > this.pos) {
				this.pos = v;
			}

			if (nexacro._enableaccessibility && this._isAccessibilityEnable()) {
				this._setAccessibilityInfoValueMin(v);
			}
			this._update();
		}
	};

	_pProgressBar.set_max = function (v) {
		if (this._is_NaN(v)) {
			return;
		}

		v = parseInt(v) | 0;

		v = (v < 0) ? 0 : v;

		if (this.max != v) {
			this.max = v;

			if (v < this.min) {
				this.min = v;
			}
			if (v < this.pos) {
				this.pos = v;
			}

			if (nexacro._enableaccessibility && this._isAccessibilityEnable()) {
				this._setAccessibilityInfoValueMax(v);
			}

			this._update();
		}
	};

	_pProgressBar.set_pos = function (v) {
		if (this._is_NaN(v)) {
			return;
		}

		v = parseInt(v) | 0;

		if (this.pos != v) {
			if (v > this.max) {
				v = this.max;
			}
			else if (v < this.min) {
				v = this.min;
			}

			this.pos = v;

			if (nexacro._enableaccessibility && this._isAccessibilityEnable()) {
				this._setAccessibilityInfoValueCur(v);
			}

			this._update();
		}
	};

	_pProgressBar.set_step = function (v) {
		if (this.step != v) {
			this.step = v;
			this._update();
		}
	};

	_pProgressBar.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		this._update();
	};

	_pProgressBar.stepIt = function () {
		this.set_pos(this.pos + parseInt(this.step));
	};

	_pProgressBar._on_start_cell = function (imgurl, w, h) {
		if (this._start_cell_width != w || this._start_cell_url != imgurl) {
			this._start_cell_width = w;
			this._start_cell_url = imgurl;
			this._update_cells();
		}
	};

	_pProgressBar._on_progress_cell = function (imgurl, w, h) {
		if (this._progress_cell_width != w || this._progress_cell_url != imgurl) {
			this._progress_cell_width = w;
			this._progress_cell_url = imgurl;
			this._update_cells();
		}
	};

	_pProgressBar._on_end_cell = function (imgurl, w, h) {
		if (this._end_cell_width != w || this._end_cell_url != imgurl) {
			this._end_cell_width = w;
			this._end_cell_url = imgurl;
			this._update_cells();
		}
	};

	_pProgressBar._create_cell = function (url, imgurl, id, l, t, w, h) {
		if (!imgurl || (url != null && url != "")) {
			var obj = new nexacro.ProgressBarCell(id, "absolute", l, t, w, h, null, null, this);
			obj.createComponent();
			obj._setRtlDirection(this._rtldirection);

			if (imgurl) {
				obj.style.set_background("URL('" + imgurl + "') stretch");
			}

			return obj;
		}
		return null;
	};
	_pProgressBar._update = function () {
		if (this._is_created) {
			this._update_cells();
		}
	};

	_pProgressBar._update_image_type = function (list, min, max, pos, width, height, direction) {
		var l = 0, t = 0, w = 0, h = 0, r = 0;
		var progressimg = this.currentstyle.progressimage;
		var startimg = this.currentstyle.startimage;
		var endimg = this.currentstyle.endimage;

		if ((progressimg && progressimg.value == "") || (this._client_height == 0 && this._client_width == 0)) {
			return;
		}

		this._clear("cell");

		if (!list) {
			list = this._cell_list = [];
		}

		var progress_w = this._progress_cell_width;
		var s_cell = this._start_cell, e_cell = this._end_cell, p_cell = this._progress_cell;
		var start_w = 0, end_w = 0, cnt = 0;
		var start_url = this._start_cell_url, end_url = this._end_cell_url, progress_url = this._progress_cell_url;
		var posX = parseInt(((pos - min) / (max - min)) * width) | 0;
		var img_item = null;

		if (!s_cell && start_url) {
			s_cell = this._start_cell = this._create_cell(start_url, startimg, "startcell", 0, 0, 0, height);
		}
		else if (s_cell) {
			if (s_cell.style.background.image != start_url) {
				s_cell.style.set_background("URL('" + startimg + "') stretch");
			}
		}
		start_w = this._start_cell_width;

		if (!e_cell && end_url) {
			e_cell = this._end_cell = this._create_cell(end_url, endimg, "endcell", 0, 0, 0, height);
		}
		else if (e_cell) {
			if (e_cell.style.background.image != end_url) {
				e_cell.style.set_background("URL('" + endimg + "') stretch");
			}
		}
		end_w = this._end_cell_width;

		cnt = parseInt((posX - start_w - end_w) / progress_w) | 0;

		if (cnt <= 0) {
			this._clear("list");
		}
		var len = list.length;
		if (len > cnt) {
			var gabage = len - cnt;
			for (var i = 1; i < gabage + 1; i++) {
				var list_obj = list[len - i];
				if (list_obj) {
					list_obj.destroyComponent();
					list.splice(len - i);
				}
			}
		}

		if (direction == "backward") {
			if (e_cell) {
				l = width - end_w;
				e_cell._applysetPosition(l, t, end_w, height);
			}

			for (var i = list.length; i < cnt; i++) {
				if (!list[i]) {
					p_cell = this._progress_cell = this._create_cell(progress_url, progressimg, "cell_" + i, 0, 0, 0, height);
					list[i] = p_cell;
				}
			}

			for (var j = 0; j < list.length; j++) {
				if (list[j].style.background.image != progress_url) {
					list[j].style.set_background("URL('" + progressimg + "') stretch");
				}

				l = (width - progress_w) - (progress_w * j) - end_w;
				if (list[j]._adjust_left != l || list[j]._adjust_width != progress_w) {
					list[j]._applysetPosition(l, t, progress_w, height);
				}
			}

			if (s_cell) {
				s_cell._applysetPosition(l - start_w, t, start_w, height);
			}
		}
		else {
			if (s_cell) {
				r = start_w;
				s_cell._applysetPosition(l, t, r - l, height - t);
			}

			for (var i = list.length; i < cnt; i++) {
				if (!list[i]) {
					p_cell = this._progress_cell = this._create_cell(progress_url, progressimg, "cell_" + i, 0, 0, 0, height);
					list[i] = p_cell;
				}
			}

			for (var j = 0; j < list.length; j++) {
				if (list[j].style.background.image != progress_url) {
					list[j].style.set_background("URL('" + progressimg + "') stretch");
				}

				if (j > 0) {
					img_item = list[j - 1];
					l = img_item._adjust_left + img_item._adjust_width;
					r = l + progress_w;
				}
				else {
					l = s_cell ? (s_cell._adjust_left + s_cell._adjust_width) : 0;
					r = s_cell ? (l + progress_w) : progress_w;
				}

				list[j]._applysetPosition(l, 0, r - l, height - t);
			}

			p_cell = list.length > 0 ? list[list.length - 1] : null;

			if (e_cell) {
				if (p_cell) {
					l = p_cell._adjust_left + p_cell._adjust_width;
				}
				else if (s_cell) {
					l = s_cell._adjust_left + s_cell._adjust_width;
				}

				r = l + end_w;

				e_cell._applysetPosition(l, t, r - l, height - t);
			}
		}
	};

	_pProgressBar._update_normal_type = function (item, list, min, max, pos, width, height, direction, smooth) {
		var l = 0, t = 0, w = 0, h = 0;
		var per = (pos - min) / (max - min);

		this._clear("img");

		if (smooth == true || smooth == "true") {
			if (!item) {
				item = this._cell_item = this._create_cell("", "", "cell_0", 0, 0, 0, height);
			}

			this._clear("list");

			l = (direction == "backward") ? width - parseInt(width * per) : 0;
			w = parseInt(width * per) | 0;

			if (item._ajdust_left != l || item._ajdust_width != w) {
				item._applysetPosition(l, 0, w, height);
			}
		}
		else {
			this._clear("cell");

			var blocksize = this.blocksize;
			var blockgap = this.blockgap;

			var rtn = this._get_block_size(width, blockgap, blocksize, per);
			var list_len = list.length;

			if (list_len > rtn.cnt) {
				var gabage = list_len - rtn.cnt;
				for (var i = 1; i < gabage + 1; i++) {
					var list_obj = list[list_len - i];
					if (list_obj) {
						list_obj.destroyComponent();
						list.splice(list_len - i);
					}
				}
			}

			list_len = list.length;
			var i_l = 0;

			if (direction == "backward") {
				if (list_len != rtn.cnt) {
					for (var i = 0; i < rtn.cnt; i++) {
						if (!list[i]) {
							list[i] = this._create_cell("", "", "cell_" + i, (width - (i * rtn.size) + blockgap), 0, blocksize, height);
						}
					}
				}

				if (list_len > 0) {
					for (var i = 0, len = list_len; i < len; i++) {
						i_l = width - (i * rtn.size) + blockgap;
						if (list[i]._adjust_left != i_l || list[i]._adjust_width != blocksize) {
							list[i]._applysetPosition(i_l, 0, blocksize, height);
						}
					}
				}
			}
			else {
				for (var i = list_len, rtnlen = rtn.cnt; i < rtnlen; i++) {
					if (!list[i]) {
						list[i] = this._create_cell("", "", "cell_" + i, (i * rtn.size), 0, blocksize, height);
					}
				}

				if (list_len > 0) {
					for (var i = 0, len = list_len; i < len; i++) {
						i_l = (i * rtn.size);
						if (list[i]._adjust_left != i_l || list[i]._adjust_width != blocksize) {
							list[i]._applysetPosition(i_l, 0, blocksize, height);
						}
					}
				}
			}
			this._cell_list = list;
		}

		var control_elem = this.getElement();
		if (control_elem) {
			this.on_apply_style_align(this.currentstyle.align);
			this.on_apply_style_barcolor(this.currentstyle.barcolor);
			this.on_apply_style_bargradation(this.currentstyle.bargradation);
			this.on_apply_text();
		}
	};

	_pProgressBar._update_cells = function () {
		var type = this.on_find_CurrentStyle_bartype();
		var direction = this.on_find_CurrentStyle_direction();

		if (this.pos == 0) {
			this._clear();
			return;
		}

		if (type == "image") {
			this._update_image_type(this._cell_list, this.min, this.max, this.pos, this._client_width, this._client_height, direction);
		}
		else {
			this._update_normal_type(this._cell_item, this._cell_list, this.min, this.max, this.pos, this._client_width, this._client_height, direction, this.on_find_CurrentStyle_smooth());
		}
	};

	_pProgressBar._get_block_size = function (width, gap, size, per) {
		var block_size = gap + size;

		var cnt = Math.ceil((width / block_size) * per);

		return {
			size : block_size, 
			cnt : cnt
		};
	};

	_pProgressBar._is_NaN = function (v) {
		if (v !== undefined) {
			if (isNaN(v = +v)) {
				return true;
			}
		}
		return false;
	};

	_pProgressBar._apply_style_image = function (imgurl, callbackfn, type) {
		if (imgurl) {
			var imgfullurl = nexacro._toString(imgurl);
			if (imgfullurl.substring(0, 4).toLowerCase() == "url(") {
				imgfullurl = imgfullurl.substring(5, imgfullurl.length - 2);
			}

			imgfullurl = nexacro._getImageLocation(imgfullurl, this._getRefFormBaseUrl());

			var size = nexacro._getImageSize(imgfullurl, callbackfn, this, undefined, imgurl);
			if (size != null) {
				if (type == "progress") {
					if (this._progress_cell_width == size.width && this._progress_cell_url == imgfullurl) {
						return;
					}

					this._progress_cell_width = size.width;
					this._progress_cell_url = imgfullurl;
				}
				else if (type == "start") {
					if (this._start_cell_width == size.width && this._start_cell_url == imgfullurl) {
						return;
					}

					this._start_cell_width = size.width;
					this._start_cell_url = imgfullurl;
				}
				else {
					if (this._end_cell_width == size.width && this._end_cell_url == imgfullurl) {
						return;
					}

					this._end_cell_width = size.width;
					this._end_cell_url = imgfullurl;
				}
				this._update_cells();
			}
		}
	};

	delete _pProgressBar;

	nexacro.ProgressBarCell = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;
	};
	_pProgressBarCell = nexacro.ProgressBarCell.prototype = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.ProgressBarCell);

	_pProgressBarCell.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent._find_pseudo_obj("bargradation", pseudo, "gradation");
	};

	_pProgressBarCell.on_created = function (_window) {
		if (!this._is_loading) {
			var parent_elem = null;
			if (!this._is_window) {
				parent_elem = this.parent ? this.parent._control_element : null;
				if (!parent_elem) {
					return false;
				}
			}

			if (!_window) {
				_window = this._getWindow();
			}

			var control_elem = this._control_element;
			var enable = this._isEnable();

			if ((this._real_enable == null && enable == false) || (this._real_enable && this._real_enable != enable)) {
				this._real_enable = enable;
				this._stat_change(enable ? "enable" : "disable", this._pseudo);
				this.on_apply_prop_enable(enable);
			}
			else {
				this._real_enable = enable;
			}

			if (control_elem) {
				var before_elem = this.parent ? (this.parent._text_elem ? this.parent._text_elem : null) : null;

				if (before_elem) {
					control_elem.create(_window, before_elem);
				}
				else {
					control_elem.create(_window);
				}

				if (!control_elem._handle) {
					return;
				}
			}

			if (!this._is_subcontrol) {
				this._registerHotkey();
			}

			if (this._is_created != true) {
				this.on_created_contents();
			}

			this._is_created = true;

			if (this._is_subcontrol) {
				nexacro._addSubComponent(this);
			}
			this._orientation = nexacro._getMobileOrientation();
		}
	};

	_pProgressBarCell.on_find_CurrentStyle_padding = nexacro._emptyFn;
	_pProgressBarCell.on_find_CurrentStyle_linespace = nexacro._emptyFn;
	_pProgressBarCell.on_apply_style_color = nexacro._emptyFn;
	_pProgressBarCell.on_apply_style_font = nexacro._emptyFn;
	_pProgressBarCell.on_apply_style_align = nexacro._emptyFn;
	_pProgressBarCell.on_apply_style_linespace = nexacro._emptyFn;
	_pProgressBarCell.on_apply_expr = nexacro._emptyFn;
	_pProgressBarCell.on_apply_usedecorate = nexacro._emptyFn;
	_pProgressBarCell.on_apply_wordwrap = nexacro._emptyFn;
	_pProgressBarCell.on_apply_linespace = nexacro._emptyFn;
	_pProgressBarCell.on_update_style_linespace = nexacro._emptyFn;
	_pProgressBarCell.on_update_style_padding = nexacro._emptyFn;

	delete _pProgressBarCell;

	nexacro.ProgressBarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ProgressBar.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pProgressBarCtrl = nexacro.ProgressBarCtrl.prototype = nexacro._createPrototype(nexacro.ProgressBar, nexacro.ProgressBarCtrl);
	_pProgressBarCtrl._type_name = "ProgressBarControl";

	_pProgressBarCtrl._is_focus_accept = false;

	nexacro._setForControlStyleFinder(_pProgressBarCtrl);

	delete _pProgressBarCtrl;
}


//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.PopupDiv) {
	nexacro.PopupDiv = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Div.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.callbackfunction = null;
		this.visible = false;

		this._isSelfStyle = true;
		this._isSelfClass = true;
		this._is_window = true;

		this._attached_comp = this;
		this._is_init = false;
		this.returnvalue = "";
		this._track_on = false;

		this._caller_comp = null;

		this._is_destroy = false;

		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onload" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"oncloseup" : 1, 
			"onpopup" : 1, 
			"onlayoutchanged" : 1, 
			"canlayoutchange" : 1, 
			"onmousewheel" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"onvscroll" : 1, 
			"onhscroll" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"ondbltap" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"onzoom" : 1
		};
		this._accessibility_role = "form";
	};
	var _pPopupDiv = nexacro._createPrototype(nexacro.Div, nexacro.PopupDiv);
	nexacro.PopupDiv.prototype = _pPopupDiv;
	_pPopupDiv._type_name = "PopupDiv";

	_pPopupDiv._is_popup_control = true;
	_pPopupDiv._is_selfclose = true;
	_pPopupDiv._default_zindex = nexacro._zindex_popup;
	_pPopupDiv._track_capture = true;


	_pPopupDiv.on_create_control_element = function (parent_elem) {
		var control_elem;
		if (this._is_scrollable) {
			control_elem = this.on_create_popupscrollable_control_element(parent_elem);
		}
		else {
			control_elem = this.on_create_popup_control_element(parent_elem);
		}
		if (control_elem && this._default_zindex > 0) {
			var popup_zindex = this._default_zindex;
			var _win = this._getWindow();
			if (_win) {
				var layer_info = _win._getComponentLayerInfo(this);
				if (layer_info) {
					popup_zindex = Math.max(layer_info.popup_zindex, this._default_zindex);
				}
				layer_info = null;
			}
			control_elem.setElementZIndex(popup_zindex);
		}

		return control_elem;
	};

	_pPopupDiv.on_created = function (_window) {
		this._is_destroy = false;
		nexacro.Div.prototype.on_created.call(this, _window);

		nexacro.PopupComponent.prototype.on_created.call(this, _window);
		this._refform = this;
	};

	_pPopupDiv.on_destroy_contents = function () {
		this._is_destroy = true;
		nexacro.Div.prototype.on_destroy_contents.call(this);
	};

	_pPopupDiv.destroyComponent = nexacro.PopupComponent.prototype.destroyComponent;
	_pPopupDiv.set_visible = function (v) {
		if (this._track_on) {
			nexacro.PopupComponent.prototype.set_visible.apply(this, arguments);
		}
	};
	_pPopupDiv.on_update_position = function (resize_flag, move_flag) {
		if (this.visible || !nexacro._allow_default_pinchzoom) {
			nexacro.Div.prototype.on_update_position.call(this, resize_flag, move_flag);
		}
		else {
			var control_elem = this._control_element;
			if (control_elem) {
				control_elem.setElementPosition(0, 0);
				control_elem.setElementSize(1, 1);

				this._updateClientSize(control_elem);
				if (move_flag) {
					this.on_fire_onmove(this._adjust_left, this._adjust_top);
				}
				if (resize_flag) {
					this.on_fire_onsize(this._adjust_width, this._adjust_height);
				}
			}
		}
	};

	_pPopupDiv.on_fire_onpopup = function (obj) {
		if (this.onpopup && this.onpopup._has_handlers) {
			var evt = new nexacro.EventInfo(obj);
			evt.eventid = "onpopup";
			return this.onpopup._fireEvent(this, evt);
		}
		return false;
	};

	_pPopupDiv.on_fire_onmove = function (left, top) {
		if (this.onmove && this.onmove._has_handlers) {
			var evt = new nexacro.MoveEventInfo(this, "onmove", left, top);
			return this.onmove._fireEvent(this, evt);
		}
		return false;
	};


	_pPopupDiv.on_fire_oncloseup = function (obj) {
		if (this.callbackfunction) {
			this.callbackfunction.call(this.parent, this.id, this.returnvalue);
		}
		if (this.oncloseup && this.oncloseup._has_handlers) {
			var evt = new nexacro.EventInfo(obj);
			evt.eventid = "oncloseup";
			return this.oncloseup._fireEvent(this, evt);
		}
		return false;
	};

	_pPopupDiv.trackPopup = function (left, top, width, height, callbackfn, bcapture) {
		if (this._track_on == true) {
			return;
		}

		this._track_capture = bcapture === false ? false : true;

		this.returnvalue = "";
		if (width == null && height == null) {
			width = this._adjust_width;
			height = this._adjust_height;
		}

		var _left = +left;
		var _top = +top;
		var _width = +width;
		var _height = +height;
		var window_frame = this._getWindowFrame();

		var m_c_width = window_frame._adjust_width;
		var m_c_height = window_frame._adjust_height;

		if (_left + _width > m_c_width) {
			var left_width = _left - _width;
			if (left_width > 0) {
				_left = left_width;
			}
			else {
				_left = m_c_width - _width;
			}
		}

		if (_top + _height > m_c_height) {
			var t_temp = m_c_height - _height;
			if (t_temp < 0) {
				_top = 0;
				_height = m_c_height;
			}
			else {
				_top = t_temp;
			}
		}
		this._track_on = true;
		if (this._is_loading) {
			this._wait_pop_position = {
				obj : null, 
				left : _left, 
				top : _top, 
				width : _width, 
				height : _height
			};
		}
		else {
			this._popup(_left, _top, _width, _height);
		}

		if (callbackfn && typeof callbackfn == "string") {
			this.callbackfunction = this.parent[callbackfn];
			var root_form = this._getRootForm();
			if (!this.callbackfunction && this.parent != root_form) {
				this.callbackfunction = root_form[callbackfn];
			}
		}
		else {
			this.callbackfunction = undefined;
		}

		this._caller_comp = this.setFocus();

		this.on_fire_onpopup(this);


		return (this.async ? true : this.returnvalue);
	};
	_pPopupDiv.trackPopupByComponent = function (obj, left, top, width, height, callbackfn, bcapture) {
		if (this._track_on == true) {
			return;
		}

		this.returnvalue = "";
		this._track_capture = bcapture === false ? false : true;

		if (width == null && height == null) {
			width = this._adjust_width;
			height = this._adjust_height;
		}

		width = parseInt(width);
		height = parseInt(height);

		if (callbackfn && typeof callbackfn == "string") {
			this.callbackfunction = this.parent[callbackfn];
			var root_form = this._getRootForm();
			if (!this.callbackfunction && this.parent != root_form) {
				this.callbackfunction = root_form[callbackfn];
			}
		}
		else {
			this.callbackfunction = undefined;
		}

		this._track_on = true;
		if (this._is_loading) {
			this._wait_pop_position = {
				obj : obj, 
				left : left, 
				top : top, 
				width : width, 
				height : height
			};
		}
		else {
			this._popupBy(obj, left, top, width, height);
		}
		this._caller_comp = this.setFocus();

		this.on_fire_onpopup(this);

		return (this.async ? true : this.returnvalue);
	};

	_pPopupDiv.closePopup = function (retvalue) {
		this.returnvalue = retvalue;
		if (this.visible) {
			this._closePopup(true);
			return true;
		}
		return false;
	};



	_pPopupDiv._getAllPos = function () {
		var parent = this;
		var all_left = 0;
		var all_top = 0;
		while (parent) {
			if (parent._adjust_left != null) {
				all_left += parent._adjust_left;
				all_top += parent._adjust_top;
			}
			parent = parent.parent;
		}
		return {
			left : all_left, 
			top : all_top
		};
	};

	_pPopupDiv.isPopup = nexacro.PopupComponent.prototype._is_popup;
	_pPopupDiv._popup = nexacro.PopupComponent.prototype._popup;
	_pPopupDiv._popupBy = nexacro.PopupComponent.prototype._popupBy;
	_pPopupDiv._getWindowHandle = nexacro.PopupComponent.prototype._getWindowHandle;
	_pPopupDiv._getWindow = nexacro.PopupComponent.prototype._getWindow;
	_pPopupDiv._findOwnerElementHandle = nexacro.PopupComponent.prototype._findOwnerElementHandle;

	_pPopupDiv._closePopup = function () {
		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
		}

		nexacro.PopupComponent.prototype._closePopup.apply(this, arguments);
		this._track_on = false;
	};
	_pPopupDiv._isPopupVisible = function () {
		return this.visible;
	};

	_pPopupDiv._getMainFrame = function () {
		var pThis = this;
		while (pThis && !pThis._is_main) {
			pThis = pThis.parent;
		}
		return pThis;
	};

	_pPopupDiv._getWindowFrame = function () {
		var win = this._getWindow();
		if (win) {
			return win.frame;
		}

		return null;
	};

	_pPopupDiv._control_popup = function (_left, _top, _width, _height) {
		var window_frame = this._getWindowFrame();

		var frame_c_width = window_frame._adjust_width;
		var frame_c_height = window_frame._adjust_height;

		if (_left + _width > frame_c_width) {
			var left_width = _left - _width;
			if (left_width > 0) {
				_left = left_width;
			}
			else {
				_left = frame_c_width - _width;
			}
		}

		if (_top + _height > frame_c_height) {
			_top = frame_c_height - _height;
		}
		this._popup(_left, _top, _width, _height);
	};
	_pPopupDiv._clearEventListener = function (evt_id) {
		if (this._is_init && application.getActiveForm()) {
			var formEventList = application.getActiveForm()._event_list;
			if (!formEventList[evt_id]) {
				return;
			}
		}
		if (this._is_destroy) {
			nexacro.EventSinkObject.prototype._clearEventListener.apply(this, arguments);
		}
	};

	_pPopupDiv._clear_prop = function () {
		var list = nexacro._div_property_list;
		var user_list = this._user_property_list;
		var temp_obj = [];

		var proplength = list.length;
		var usr_length = user_list ? user_list.length : 0;
		var i = 0;

		for (i = 0; i < proplength; i++) {
			var propid = list[i];
			temp_obj[i] = this[propid];
			this[propid] = null;
		}
		for (i = 0; i < usr_length; i++) {
			var propid = user_list[i];
			temp_obj[i + proplength] = this[propid];
			this[propid] = null;
		}

		for (var prop in this) {
			if (this.hasOwnProperty(prop) && this[prop] != null && prop != "_registerscriptfn" && (!(this[prop] instanceof nexacro.EventListener) || this._is_destroy)) {
				this[prop] = null;
			}
		}

		for (i = 0; i < proplength; i++) {
			var propid = list[i];
			this[propid] = temp_obj[i];
		}
		for (i = 0; i < usr_length; i++) {
			var propid = user_list[i];
			this[propid] = temp_obj[i + proplength];
		}
		temp_obj = null;
	};

	_pPopupDiv._on_init = function () {
		this._is_init = true;
		nexacro.FormBase.prototype._on_init.apply(this, arguments);
		this._is_init = false;
	};

	_pPopupDiv._on_load = function () {
		var control_element = this._control_element;
		var ret = nexacro.Form.prototype._on_load.apply(this, arguments);

		var popup_info = this._wait_pop_position;
		if (popup_info) {
			if (popup_info.obj) {
				this._popupBy(popup_info.obj, popup_info.left, popup_info.top, popup_info.width, popup_info.height);
			}
			else {
				this._popup(popup_info.left, popup_info.top, popup_info.width, popup_info.height);
			}

			popup_info = null;
			delete this._wait_pop_position;
		}

		if (!control_element) {
			this.setFocus();
		}

		return ret;
	};

	_pPopupDiv._on_bubble_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				event_bubbles = this.on_fire_user_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], this, refer_comp);

				var pThis = this._getFromComponent(this);

				if (event_bubbles !== true) {
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.defaultprevented)) {
						var ret = this.on_fire_sys_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], this, refer_comp);

						if (ret) {
							return false;
						}

						if (this.vscrollbar && this.vscrollbar.enable) {
							var vscrollbar = this.vscrollbar;
							var old_vpos = vscrollbar._pos;
							this._setVScrollDefaultAction(vscrollbar, wheelDeltaY);
							var new_vpos = vscrollbar._pos;
							if (old_vpos != new_vpos) {
								return false;
							}
						}

						if (nexacro.OS == "Mac OS") {
							if (this.hscrollbar && this.hscrollbar.enable) {
								var hscrollbar = this.hscrollbar;
								var old_hpos = hscrollbar._pos;
								this._setHScrollDefaultAction(hscrollbar, wheelDeltaX);
								var new_hpos = hscrollbar._pos;
								if (old_hpos != new_hpos) {
									return false;
								}
							}
						}

						return;
					}

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}

					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.stoppropagation)) {
						if (this.parent && !this.parent._is_application) {
							var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

							canvasX = canvas[0];
							canvasY = canvas[1];

							if (this._is_subcontrol) {
								return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bScroll);
							}
							else {
								return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bScroll);
							}
						}
					}
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				event_bubbles = this.on_fire_user_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], fire_comp, refer_comp);

				var pThis = this._getFromComponent(this);

				if (event_bubbles !== true) {
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.defaultprevented)) {
						var ret = this.on_fire_sys_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], fire_comp, refer_comp);

						if (ret) {
							return false;
						}

						if (this._isWheelScrollable(wheelDeltaY) && this.vscrollbar && this.vscrollbar.enable) {
							var vscrollbar = this.vscrollbar;
							var old_vpos = vscrollbar._pos;
							this._setVScrollDefaultAction(vscrollbar, wheelDeltaY);
							var new_vpos = vscrollbar._pos;
							if (old_vpos != new_vpos) {
								return false;
							}
						}

						if (nexacro.OS == "Mac OS") {
							if (this._isWheelScrollable(wheelDeltaX) && this.hscrollbar && this.hscrollbar.enable) {
								var hscrollbar = this.hscrollbar;
								var old_hpos = hscrollbar._pos;
								this._setHScrollDefaultAction(hscrollbar, wheelDeltaX);
								var new_hpos = hscrollbar._pos;
								if (old_hpos != new_hpos) {
									return false;
								}
							}
						}

						return;
					}
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.stoppropagation)) {
						if (this.parent && !this.parent._is_application) {
							canvasX += this._adjust_left - this._scroll_left || 0;
							canvasY += this._adjust_top - this._scroll_top || 0;
							return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bScroll);
						}
					}
				}
			}
		}
	};

	_pPopupDiv.on_fire_sys_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		nexacro.Component.prototype.on_fire_sys_onslide.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);

		return true;
	};
	delete _pPopupDiv;



	nexacro.PopupDivCtrl = function (id, left, top, right, bottom, parent) {
		nexacro.PopupDiv.call(this, id, left, top, right, bottom, parent);
	};
	var _pPopupDivCtrl = nexacro.PopupDivCtrl.prototype = nexacro._createPrototype(nexacro.PopupDiv, nexacro.PopupDivCtrl);

	_pPopupDivCtrl._is_subcontrol = true;

	nexacro._setForControlStyleFinder(_pPopupDivCtrl);

	delete _pPopupDivCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.MenuItem) {
	nexacro.MenuItem = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.index = 0;
		this.datarow = 0;
		this.itemexpand = true;
		this.id = "";
		this.enable = true;
		this.level = "";
		this.userdata = null;
		this.selected = false;

		this._init_padding = false;
		this._accessibility_role = "menuitem";
	};

	var _pMenuItem = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.MenuItem);
	nexacro.MenuItem.prototype = _pMenuItem;

	_pMenuItem._type_name = "MenuItem";

	_pMenuItem._updateControl = function (control_elem, pseudo) {
		if (!this._isEnableRedraw()) {
			return;
		}
		if (application._cur_track_info && pseudo == "mouseover") {
			return;
		}

		if (control_elem && this._control_pseudo != pseudo && this._adjust_width != 0 && this._adjust_height != 0) {
			this._control_pseudo = pseudo;
			var curstyle = this.currentstyle;

			var border = this.on_find_CurrentStyle_border(pseudo);
			var bordertype = this.on_find_CurrentStyle_bordertype(pseudo);
			var background = this.on_find_CurrentStyle_background(pseudo);
			var gradation = this.on_find_CurrentStyle_gradation(pseudo);

			var background_flag = (background != curstyle.background);
			var bordertype_flag = (bordertype != curstyle.bordertype);
			var border_flag = (border != curstyle.border);
			var gradation_flag = (gradation != curstyle.gradation);

			if (border_flag || bordertype_flag || background_flag || gradation_flag) {
				this._apply_client_border = border_flag;
				curstyle.bordertype = bordertype;
				curstyle.border = border;
				curstyle.background = background;
				curstyle.gradation = gradation;

				control_elem.setElementBorder(border, bordertype);
				control_elem.setElementBackground(background, gradation);
			}

			var opacity = this.on_find_CurrentStyle_opacity(pseudo);
			if (opacity && opacity != curstyle.opacity) {
				curstyle.opacity = opacity;
				control_elem.setElementOpacity(opacity);
			}
			var shadow = this.on_find_CurrentStyle_shadow(pseudo);
			if (shadow && shadow != curstyle.shadow) {
				curstyle.shadow = shadow;
				control_elem.setElementShadow(shadow);
			}
			var cursor = this.on_find_CurrentStyle_cursor(pseudo);
			if (cursor && cursor != curstyle.cursor) {
				curstyle.cursor = cursor;
				control_elem.setElementCursor(cursor);
			}
			if (nexacro._enableaccessibility) {
				var accessibility = this.on_find_CurrentStyle_accessibility(pseudo);
				if (accessibility && accessibility != curstyle.accessibility) {
					curstyle.accessibility = this._make_accessibility_value(accessibility);
					control_elem.setAccessibility(curstyle.accessibility);
				}
			}

			if (this._apply_client_padding) {
				var padding = this.on_find_CurrentStyle_padding(pseudo);

				if ((padding && padding != curstyle.padding) || border_flag) {
					curstyle.padding = padding;
					control_elem.setElementPadding(padding);
				}
			}
			this._updateClientSize(control_elem);
			return true;
		}
		return false;
	};

	_pMenuItem.on_find_CurrentStyle_color = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_color(pseudo);
	};
	_pMenuItem.on_find_CurrentStyle_font = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_font(pseudo);
	};
	_pMenuItem.on_find_CurrentStyle_letterspace = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_letterspace(pseudo);
	};
	_pMenuItem.on_find_CurrentStyle_align = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		var align = this.parent.on_find_CurrentStyle_itemalign(pseudo);
		return (align) ? align : nexacro.Component._default_align;
	};
	_pMenuItem.on_find_CurrentStyle_background = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_itembackground(pseudo);
	};

	_pMenuItem.on_find_CurrentStyle_padding = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_itempadding(pseudo);
	};

	_pMenuItem.on_find_CurrentStyle_gradation = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_itemgradation(pseudo);
	};

	_pMenuItem.on_find_CurrentStyle_border = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_itemborder(pseudo);
	};

	_pMenuItem.on_find_CurrentStyle_bordertype = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_itembordertype(pseudo);
	};

	_pMenuItem.on_find_CurrentStyle_cursor = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		var rootComp = this._getRootComponent(this);
		return rootComp.on_find_CurrentStyle_cursor(pseudo);
	};

	_pMenuItem.on_find_CurrentStyle_accessibility = function (pseudo) {
		if (!this.enable) {
			pseudo = "disabled";
		}
		else if (!(this.parent instanceof nexacro.PopupMenu) && this.selected) {
			pseudo = "selected";
		}
		return this.parent.on_find_CurrentStyle_itemaccessibility(pseudo);
	};


	_pMenuItem.on_apply_style_padding = function (padding) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementPadding(padding);
			this._updateClientSize(control_elem);
		}
	};

	_pMenuItem.on_apply_style_accessibility = function (accessibility) {
		var control_elem = this._control_element;
		if (control_elem && accessibility) {
			control_elem.setAccessibility(accessibility);

			this._updateAccessibilityLabel(this);
		}
	};

	_pMenuItem.on_apply_mouseover = function (isovered) {
		if (!isovered) {
			this._stat_change("enable", "normal");
		}
		else {
			var rootComp = this._getRootComponent(this);
			if (this.parent._key_action || (rootComp && rootComp._pseudo == "focused")) {
				this._stat_change("enable", "selected");
			}
			else {
				this._stat_change("enable", "mouseover");
			}
		}
	};

	_pMenuItem.on_tap_basic_action = function () {
		var parent = this.parent;
		var popupmenu = parent._popupmenu;
		if (popupmenu) {
			if (popupmenu._is_popup()) {
				if (parent.beforeindex != this.index) {
					parent.beforeindex = this.index;
				}
				popupmenu.cancelPopup();

				parent._menuitemindex = this.index;
				parent._popupitemindex = -1;
			}
		}

		var rootComp = this._getRootComponent(this);
		if (this.enable && this.itemexpand) {
			parent._closeflag = true;
			parent._showPopup(this);

			rootComp._is_menu_click = true;
			this.selected = true;

			if (rootComp instanceof nexacro.Menu) {
				rootComp._on_focus(true);
				rootComp._popupitemindex = this.index;
			}
			rootComp._item_focus(this, true);
		}
		else {
			if (this.enable == false || rootComp._getPopupType() == "none") {
				return;
			}

			if (rootComp.onmenuclick && rootComp.onmenuclick._has_handlers) {
				rootComp.on_fire_onitemclick(rootComp, "onmenuclick", this.id, this.userdata, this.index, this.parent.level);
				rootComp._popupitemindex = -1;
			}
			rootComp._closePopup();
		}
		return nexacro.Component.prototype.on_tap_basic_action.apply(this, arguments);
	};

	_pMenuItem._getWindowPosition = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var border = this.on_find_CurrentStyle_border(this._pseudo);
			var elem_pos = nexacro._getElementXYInWindow(control_elem._handle);
			var windowLeft = elem_pos[0];
			var windowTop = elem_pos[1];
			return {
				x : windowLeft, 
				y : windowTop
			};
		}
		return {
			x : 0, 
			y : 0
		};
	};

	_pMenuItem._killfocus_item = function () {
		this._control_pseudo = "";
		this.selected = false;
		var status = "enable";
		var pseudo = "normal";
		if (!this.enable) {
			status = "disable";
			pseudo = "disabled";
		}
		this._stat_change(status, pseudo);
		this.on_apply_custom_pseudo(pseudo);
	};

	_pMenuItem._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this.enable) {
			return;
		}

		if (nexacro._enableaccessibility) {
			var menu = this.parent;
			menu._focus_obj = this;
		}

		nexacro._skipDragEventAfterMsgBox = false;

		var form = this._getForm();
		form._skip_comp = true;
		var ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttondown || (pThis.onlbuttondown && !pThis.onlbuttondown.defaultprevented)) {
			this.on_lbuttondown_default_action(elem, this._focus_refer_comp, canvasX, canvasY);
			ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		form._skip_comp = false;

		return ret;
	};

	_pMenuItem._on_dragleave = function (elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var ret = nexacro.Component.prototype._on_dragleave.call(this, elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);

		var rootCom = this._getRootComponent(this);
		if (rootCom.ondragleave) {
			rootCom._last_mouseleave_iteminfo.index = this.index;
			rootCom._last_mouseleave_iteminfo.bindindex = this._bindindex;
			rootCom._last_mouseleave_iteminfo.level = this.parent.level;
		}

		return ret;
	};

	_pMenuItem._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		return true;
	};

	_pMenuItem._updateAccessibilityLabel = function (item) {
		var rootComp = this._getRootComponent(this);
		var dataLen = rootComp._innerdataset.getRowCount();
		item._setAccessibilityInfoIndex(item.datarow + 1);
		item._setAccessibilityInfoCount(dataLen);
		item._setAccessibilityFlagHasPopup(item.itemexpand ? true : false);
	};

	delete _pMenuItem;
}

if (!nexacro.Menu) {
	nexacro.MenuClickEventInfo = function (obj, id, itemid, itemuserdata, index, level) {
		this.eventid = id || "onmenuclick";
		this.id = itemid;
		this.fromobject = obj;
		this.fromreferenceobject = obj;
		this.index = index;
		this.level = level;

		this.userdata = itemuserdata;
	};
	var _pMenuClickEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MenuClickEventInfo);
	nexacro.MenuClickEventInfo.prototype = _pMenuClickEventInfo;
	_pMenuClickEventInfo._type_name = "MenuClickEventInfo";

	delete _pMenuClickEventInfo;

	nexacro.MenuDragEventInfo = function (obj, id, itemid, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, level, index, bindindex) {
		this.id = itemid;
		this.eventid = id || "onmenudrag";

		if (!from_refer_comp) {
			from_refer_comp = from_comp;
		}

		this.cancelable = true;
		this.bubbles = true;

		this.dragdata = dragdata;
		this.userdata = userdata;
		this.sourceobject = src_comp;
		this.sourcereferenceobject = src_refer_comp;
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = alt_key || false;
		this.ctrlKey = ctrl_key || false;
		this.button = button || "";
		this.shiftKey = shift_key || false;
		this.metaKey = meta_key || false;
		this.screenX = screenX || -1;
		this.screenY = screenY || -1;
		this.canvasX = canvasX || -1;
		this.canvasY = canvasY || -1;
		this.clientX = clientX || -1;
		this.clientY = clientY || -1;

		this.level = level;
		this.index = index;
		this.bindindex = bindindex;
	};
	var _pEventMenuDragEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MenuDragEventInfo);
	nexacro.MenuDragEventInfo.prototype = _pEventMenuDragEventInfo;
	_pEventMenuDragEventInfo._type_name = "MenuDragEventInfo";

	delete _pEventMenuDragEventInfo;

	nexacro.MenuMouseEventInfo = function (obj, id, itemid, strButton, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, level, index, bindindex) {
		this.id = itemid;
		this.eventid = id || "onmenumouse";
		this.cancelable = true;
		this.bubbles = true;

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = altKey || false;
		this.ctrlKey = ctrlKey || false;
		this.button = strButton || "";
		this.shiftKey = shiftKey || false;
		this.metaKey = metaKey || false;
		this.screenX = screenX || -1;
		this.screenY = screenY || -1;
		this.canvasX = canvasX || -1;
		this.canvasY = canvasY || -1;
		this.clientX = clientX || -1;
		this.clientY = clientY || -1;

		this.level = level;
		this.index = index;
		this.bindindex = bindindex;
	};

	var _pEventMenuMouseEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MenuMouseEventInfo);
	nexacro.MenuMouseEventInfo.prototype = _pEventMenuMouseEventInfo;
	_pEventMenuMouseEventInfo._type_name = "MenuMouseEventInfo";

	delete _pEventMenuMouseEventInfo;

	nexacro.Menu_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}

		this.autohotkey = null;
		this.buttonimage = null;
		this.popupcolor = null;
		this.popupborder = null;
		this.popupbordertype = null;
		this.popuppadding = null;
		this.popupfont = null;
		this.popupbackground = null;
		this.popupgradation = null;

		this.itemalign = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;

		this.itempadding = null;
		this.checkboximage = null;
		this.expandimage = null;

		this.popupitemheight = null;
		this.popupitemalign = null;
		this.popupitempadding = null;
		this.popupitemborder = null;
		this.popupitembordertype = null;
		this.popupitembackground = null;
		this.popupitemgradation = null;
		this.itemaccessibility = null;

		this.popuptype = null;
		this.buttonsize = null;
		this.buttonalign = null;
	};

	var _pMenuStyle = nexacro._createPrototype(nexacro.Style, nexacro.Menu_Style);
	nexacro.Menu_Style.prototype = _pMenuStyle;

	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "autohotkey"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "buttonimage"));
	eval(nexacro._createColorAttributeEvalStr("_pMenuStyle", "popupcolor"));
	eval(nexacro._createBorderAttributeEvalStr("_pMenuStyle", "popupborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pMenuStyle", "popupbordertype"));
	eval(nexacro._createPaddingAttributeEvalStr("_pMenuStyle", "popuppadding"));
	eval(nexacro._createFontAttributeEvalStr("_pMenuStyle", "popupfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pMenuStyle", "popupbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pMenuStyle", "popupgradation"));
	eval(nexacro._createAlignAttributeEvalStr("_pMenuStyle", "itemalign"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pMenuStyle", "itembackground"));
	eval(nexacro._createBorderAttributeEvalStr("_pMenuStyle", "itemborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pMenuStyle", "itembordertype"));
	eval(nexacro._createGradationAttributeEvalStr("_pMenuStyle", "itemgradation"));
	eval(nexacro._createPaddingAttributeEvalStr("_pMenuStyle", "itempadding"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "checkboximage"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "expandimage"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "popupitemheight"));
	eval(nexacro._createAlignAttributeEvalStr("_pMenuStyle", "popupitemalign"));
	eval(nexacro._createPaddingAttributeEvalStr("_pMenuStyle", "popupitempadding"));
	eval(nexacro._createBorderAttributeEvalStr("_pMenuStyle", "popupitemborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pMenuStyle", "popupitembordertype"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pMenuStyle", "popupitembackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pMenuStyle", "popupitemgradation"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pMenuStyle", "itemaccessibility"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "popuptype"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "buttonsize"));
	eval(nexacro._createValueAttributeEvalStr("_pMenuStyle", "buttonalign"));

	_pMenuStyle.__custom_emptyObject = function () {
		this.autohotkey = null;
		this.buttonimage = null;
		this.popupcolor = null;
		this.popupborder = null;
		this.popupbordertype = null;
		this.popuppadding = null;
		this.popupfont = null;
		this.popupbackground = null;
		this.popupgradation = null;

		this.itemalign = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;

		this.itempadding = null;
		this.checkboximage = null;
		this.expandimage = null;

		this.popupitemheight = null;
		this.popupitemalign = null;
		this.popupitempadding = null;
		this.popupitemborder = null;
		this.popupitembordertype = null;
		this.popupitembackground = null;
		this.popupitemgradation = null;
		this.itemaccessibility = null;

		this.popuptype = null;
		this.buttonsize = null;
		this.buttonalign = null;
	};

	_pMenuStyle.__get_custom_style_value = function () {
		var val = "";
		var popupitempadding = this.popupitempadding;
		if (popupitempadding && popupitempadding._value.length) {
			val += "popupitempadding:" + this.popupitempadding._value + "; ";
		}

		var popupborder = this.popupborder;
		if (popupborder && popupborder._value.length) {
			val += "popupborder:" + popupborder._value + "; ";
		}
		var popupbordertype = this.popupbordertype;
		if (popupbordertype && popupbordertype._value.length) {
			val += "popupbordertype:" + popupbordertype._value + "; ";
		}
		var popupfont = this.popupfont;
		if (popupfont && popupfont._value.length) {
			val += "popupfont:" + popupfont._value + "; ";
		}
		var popuppadding = this.popuppadding;
		if (popuppadding && popuppadding._value.length) {
			val += "popuppadding:" + popuppadding._value + "; ";
		}
		var popupcolor = this.popupcolor;
		if (popupcolor && popupcolor._value.length) {
			val += "popupcolor:" + popupcolor._value + "; ";
		}
		var popupbackground = this.popupbackground;
		if (popupbackground && popupbackground._value.length) {
			val += "popupbackground:" + popupbackground._value + "; ";
		}
		var popupgradation = this.popupgradation;
		if (popupgradation && popupgradation._value.length) {
			val += "popupgradation:" + popupgradation._value + "; ";
		}

		var itemalign = this.itemalign;
		if (itemalign && itemalign._value.length) {
			val += "itemalign:" + itemalign._value + "; ";
		}
		var itembackground = this.itembackground;
		if (itembackground && itembackground._value.length) {
			val += "itembackground:" + itembackground._value + "; ";
		}
		var itemborder = this.itemborder;
		if (itemborder && itemborder._value.length) {
			val += "itemborder:" + itemborder._value + "; ";
		}
		var itembordertype = this.itembordertype;
		if (itembordertype && itembordertype._value.length) {
			val += "itembordertype:" + itembordertype._value + "; ";
		}
		var itemgradation = this.itemgradation;
		if (itemgradation && itemgradation._value.length) {
			val += "itemgradation:" + itemgradation._value + "; ";
		}
		var itempadding = this.itempadding;
		if (itempadding && itempadding._value.length) {
			val += "itempadding:" + itempadding._value + "; ";
		}

		var popuptype = this.popuptype;
		if (popuptype && popuptype._value.length) {
			val += "popuptype:" + popuptype._value + "; ";
		}

		var checkboximage = this.checkboximage;
		if (checkboximage && checkboximage._value.length) {
			val += "checkboximage:" + checkboximage._value + "; ";
		}
		var expandimage = this.expandimage;
		if (expandimage && expandimage._value.length) {
			val += "expandimage:" + expandimage._value + "; ";
		}

		var popupitembackground = this.popupitembackground;
		if (popupitembackground && popupitembackground._value.length) {
			val += "popupitembackground:" + popupitembackground._value + "; ";
		}
		var popupitemheight = this.popupitemheight;
		if (popupitemheight && popupitemheight._value.length) {
			val += "popupitemheight:" + popupitemheight._value + "; ";
		}
		var popupitemalign = this.popupitemalign;
		if (popupitemalign && popupitemalign._value.length) {
			val += "popupitemalign:" + popupitemalign._value + "; ";
		}
		var popupitemborder = this.popupitemborder;
		if (popupitemborder && popupitemborder._value.length) {
			val += "popupitemborder:" + popupitemborder._value + "; ";
		}
		var popupitembordertype = this.popupitembordertype;
		if (popupitembordertype && popupitembordertype._value.length) {
			val += "popupitembordertype:" + popupitembordertype._value + "; ";
		}
		var popupitemgradation = this.popupitemgradation;
		if (popupitemgradation && popupitemgradation._value.length) {
			val += "popupitemgradation:" + popupitemgradation._value + "; ";
		}

		var autohotkey = this.autohotkey;
		if (autohotkey && autohotkey._value.length) {
			val += "autohotkey:" + autohotkey._value + "; ";
		}

		var itemaccessibility = this.itemaccessibility;
		if (itemaccessibility && itemaccessibility._value.length) {
			val += "itemaccessibility:" + itemaccessibility._value + "; ";
		}

		var buttonsize = this.buttonsize;
		if (buttonsize && buttonsize._value.length) {
			val += "buttonsize:" + buttonsize._value + "; ";
		}

		var buttonalign = this.buttonalign;
		if (buttonalign && buttonalign._value.length) {
			val += "buttonalign:" + buttonalign._value + "; ";
		}
		return val;
	};

	nexacro.Menu_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.autohotkey = null;
		this.buttonimage = null;
		this.popupcolor = null;
		this.popupborder = null;
		this.popupbordertype = null;
		this.popuppadding = null;
		this.popupfont = null;
		this.popupbackground = null;
		this.popupgradation = null;

		this.itemalign = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;

		this.checkboximage = null;
		this.expandimage = null;

		this.popupitemheight = null;
		this.popupitemalign = null;
		this.popupitempadding = null;
		this.popupitemborder = null;
		this.popupitembordertype = null;
		this.popupitembackground = null;
		this.popupitemgradation = null;
		this.itemaccessibility = null;

		this.popuptype = null;
		this.buttonsize = null;
		this.buttonalign = null;
	};

	var _pMenuCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Menu_CurrentStyle);
	nexacro.Menu_CurrentStyle.prototype = _pMenuCurrentStyle;


	_pMenuCurrentStyle.__custom_emptyObject = _pMenuStyle.__custom_emptyObject;
	_pMenuCurrentStyle.__get_custom_style_value = _pMenuStyle.__get_custom_style_value;

	_pMenuStyle = null;
	_pMenuCurrentStyle = null;


	nexacro.Menu = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.captioncolumn = "";
		this.checkboxcolumn = "";
		this.enablecolumn = "";
		this.hotkeycolumn = "";
		this.iconcolumn = "";
		this.idcolumn = "";
		this.levelcolumn = "";
		this.userdatacolumn = "";
		this.beforeindex = -1;
		this.level = 0;
		this.innerdataset = "";


		this._is_menu_click = false;
		this._innerdataset = "";
		this._popupmenu = null;
		this._items = [];
		this._cancelPopup = undefined;
		this._close_popup = false;
		this._want_arrow = true;
		this._hot_key_list = [];
		this._last_mouseleave_iteminfo = {
			bindindex : -1, 
			index : -1, 
			level : -1
		};

		this._is_popupmenu_mouseover = false;

		this.spinupbutton = null;
		this.spindownbutton = null;

		this._spin_width = 15;
		this._scrollIndex = 0;
		this._scrollIndex_tmp = 0;
		this._buttonRect = [];
		this._item_total_width = 0;


		this._accessibility_role = "menubar";
		this._focus_obj = null;


		this._menuitemindex = -1;
		this._menuitemonmouseenter = null;
		this._popupitemindex = -1;
		this._popupitempreviousindex = 0;
		this._previousitem = 0;
		this._clickitemindex = -1;
		this._key_action = false;

		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmenuclick" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};
	};

	var _pMenu = nexacro._createPrototype(nexacro.Component, nexacro.Menu);
	nexacro.Menu.prototype = _pMenu;

	_pMenu._type_name = "Menu";
	nexacro.Menu._default_image_align = nexacro.Component._default_buttonimg_align;
	nexacro.Menu._default_buttonsize = nexacro._getCachedStyleObj("buttonsize", -1);
	nexacro.Menu._default_buttonalign = nexacro._getCachedStyleObj("buttonalign", "auto");
	nexacro.Menu._default_autohotkey = nexacro._getCachedStyleObj("autohotkey", "false");

	_pMenu.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var align = this.on_find_CurrentStyle_align(pseudo);
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var itemalign = this.on_find_CurrentStyle_itemalign(pseudo);
		if (curstyle.itemalign != itemalign) {
			curstyle.itemalign = itemalign;
		}

		var itembackground = this.on_find_CurrentStyle_itembackground(pseudo);
		if (curstyle.itembackground != itembackground) {
			curstyle.itembackground = itembackground;
		}

		var itemborder = this.on_find_CurrentStyle_itemborder(pseudo);
		if (curstyle.itemborder != itemborder) {
			curstyle.itemborder = itemborder;
		}

		var itembordertype = this.on_find_CurrentStyle_itembordertype(pseudo);
		if (curstyle.itembordertype != itembordertype) {
			curstyle.itembordertype = itembordertype;
		}

		var itemgradation = this.on_find_CurrentStyle_itemgradation(pseudo);
		if (curstyle.itemgradation != itemgradation) {
			curstyle.itemgradation = itemgradation;
		}

		var itempadding = this.on_find_CurrentStyle_itempadding(pseudo);
		if (curstyle.itempadding != itempadding) {
			curstyle.itempadding = itempadding;
		}

		var checkboximage = this.on_find_CurrentStyle_checkboximage(pseudo);
		if (curstyle.checkboximage != checkboximage) {
			curstyle.checkboximage = checkboximage;
		}

		var expandimage = this.on_find_CurrentStyle_expandimage(pseudo);
		if (curstyle.expandimage != expandimage) {
			curstyle.expandimage = expandimage;
		}

		var popupborder = this.on_find_CurrentStyle_popupborder(pseudo);
		if (curstyle.popupborder != popupborder) {
			curstyle.popupborder = popupborder;
		}

		var popupbordertype = this.on_find_CurrentStyle_popupbordertype(pseudo);
		if (curstyle.popupbordertype != popupbordertype) {
			curstyle.popupbordertype = popupbordertype;
		}

		var popuppadding = this.on_find_CurrentStyle_popuppadding(pseudo);
		if (curstyle.popuppadding != popuppadding) {
			curstyle.popuppadding = popuppadding;
		}

		var popupfont = this.on_find_CurrentStyle_popupfont(pseudo);
		if (curstyle.popupfont != popupfont) {
			curstyle.popupfont = popupfont;
		}

		var popupcolor = this.on_find_CurrentStyle_popupcolor(pseudo);
		if (curstyle.popupcolor != popupcolor) {
			curstyle.popupcolor = popupcolor;
		}

		var popupbackground = this.on_find_CurrentStyle_popupbackground(pseudo);
		if (curstyle.popupbackground != popupbackground) {
			curstyle.popupbackground = popupbackground;
		}

		var popupgradation = this.on_find_CurrentStyle_popupgradation(pseudo);
		if (curstyle.popupgradation != popupgradation) {
			curstyle.popupgradation = popupgradation;
		}

		var popupitemheight = this.on_find_CurrentStyle_popupitemheight(pseudo);
		if (curstyle.popupitemheight != popupitemheight) {
			curstyle.popupitemheight = popupitemheight;
		}

		var popupitempadding = this.on_find_CurrentStyle_popupitempadding(pseudo);
		if (curstyle.popupitempadding != popupitempadding) {
			curstyle.popupitempadding = popupitempadding;
		}

		var popupitembackground = this.on_find_CurrentStyle_popupitembackground(pseudo);
		if (curstyle.popupitembackground != popupitembackground) {
			curstyle.popupitembackground = popupitembackground;
		}

		var popupitemalign = this.on_find_CurrentStyle_popupitemalign(pseudo);
		if (curstyle.popupitemalign != popupitemalign) {
			curstyle.popupitemalign = popupitemalign;
		}

		var popupitemborder = this.on_find_CurrentStyle_popupitemborder(pseudo);
		if (curstyle.popupitemborder != popupitemborder) {
			curstyle.popupitemborder = popupitemborder;
		}

		var popupitembordertype = this.on_find_CurrentStyle_popupitembordertype(pseudo);
		if (curstyle.popupitembordertype != popupitembordertype) {
			curstyle.popupitembordertype = popupitembordertype;
		}

		var popupitemgradation = this.on_find_CurrentStyle_popupitemgradation(pseudo);
		if (curstyle.popupitemgradation != popupitemgradation) {
			curstyle.popupitemgradation = popupitemgradation;
		}

		var autohotkey = this.on_find_CurrentStyle_autohotkey(pseudo);
		if (curstyle.autohotkey != autohotkey) {
			curstyle.autohotkey = autohotkey;
		}

		var accessibility = this.on_find_CurrentStyle_accessibility(pseudo);
		if (curstyle.accessibility != accessibility) {
			curstyle.accessibility = accessibility;
		}

		var itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(pseudo);
		if (curstyle.itemaccessibility != itemaccessibility) {
			curstyle.itemaccessibility = itemaccessibility;
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}

		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		if (buttonsize != curstyle.buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(buttonsize);
		}

		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		if (buttonalign != curstyle.buttonalign) {
			curstyle.buttonalign = buttonalign;
			this.on_apply_style_buttonalign(buttonalign);
		}

		if (this.spinupbutton) {
			this.spinupbutton._control_pseudo = "";
			this.spinupbutton._contents_pseudo = "";
			this.spinupbutton.on_apply_pseudo(pseudo);
		}
		if (this.spindownbutton) {
			this.spindownbutton._control_pseudo = "";
			this.spindownbutton._contents_pseudo = "";
			this.spindownbutton.on_apply_pseudo(pseudo);
		}
	};

	_pMenu.on_apply_custom_setfocus = function (evt_name) {
		nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);

		if (evt_name == "downkey" || evt_name == "upkey" || this._is_menu_click) {
			if (evt_name == "downkey" || evt_name == "upkey") {
				this._focus_obj = this;
				this._previousitem = 0;
				this._menuitemindex = -1;
			}
		}
		else {
			var menuitem = this._items;
			var menuitem_len = menuitem.length - 1;

			if (menuitem && menuitem_len > 0 && !this._focus_obj) {
				this._menuitemindex = 0;
				this._menuitemonmouseenter = menuitem[this._menuitemindex];

				this._item_focus(this._menuitemonmouseenter, true);
			}
		}

		return;
	};

	_pMenu.on_create_custom_style = function () {
		return new nexacro.Menu_Style(this);
	};

	_pMenu.on_create_custom_currentStyle = function () {
		return new nexacro.Menu_CurrentStyle();
	};

	_pMenu.on_find_CurrentStyle_buttonimage = function (pseudo) {
		return this._find_pseudo_obj("buttonimage", pseudo);
	};

	_pMenu.on_find_CurrentStyle_popupcolor = function (pseudo) {
		return this._find_pseudo_obj("popupcolor", pseudo, "color");
	};

	_pMenu.on_find_CurrentStyle_popupborder = function (pseudo) {
		return this._find_pseudo_obj("popupborder", pseudo, "border");
	};

	_pMenu.on_find_CurrentStyle_popupbordertype = function (pseudo) {
		return this._find_pseudo_obj("popupbordertype", pseudo, "bordertype");
	};

	_pMenu.on_find_CurrentStyle_popuppadding = function (pseudo) {
		return this._find_pseudo_obj("popuppadding", pseudo, "padding");
	};

	_pMenu.on_find_CurrentStyle_popupfont = function (pseudo) {
		return this._find_pseudo_obj("popupfont", pseudo, "font");
	};

	_pMenu.on_find_CurrentStyle_letterspace = function (pseudo) {
		return this._find_pseudo_obj("letterspace", pseudo, "letterspace");
	};

	_pMenu.on_find_CurrentStyle_popupbackground = function (pseudo) {
		return this._find_pseudo_obj("popupbackground", pseudo, "background");
	};

	_pMenu.on_find_CurrentStyle_popupgradation = function (pseudo) {
		return this._find_pseudo_obj("popupgradation", pseudo, "gradation");
	};

	_pMenu.on_find_CurrentStyle_itemalign = function (pseudo) {
		return this._find_pseudo_obj("itemalign", pseudo, "align");
	};

	_pMenu.on_find_CurrentStyle_itembackground = function (pseudo) {
		return this._find_pseudo_obj("itembackground", pseudo, "background");
	};

	_pMenu.on_find_CurrentStyle_itemborder = function (pseudo) {
		return this._find_pseudo_obj("itemborder", pseudo, "border");
	};

	_pMenu.on_find_CurrentStyle_itembordertype = function (pseudo) {
		return this._find_pseudo_obj("itembordertype", pseudo, "bordertype");
	};

	_pMenu.on_find_CurrentStyle_itemgradation = function (pseudo) {
		return this._find_pseudo_obj("itemgradation", pseudo, "gradation");
	};

	_pMenu.on_find_CurrentStyle_itempadding = function (pseudo) {
		return this._find_pseudo_obj("itempadding", pseudo, "padding");
	};

	_pMenu.on_find_CurrentStyle_checkboximage = function (pseudo) {
		return this._find_pseudo_obj("checkboximage", pseudo);
	};

	_pMenu.on_find_CurrentStyle_expandimage = function (pseudo) {
		return this._find_pseudo_obj("expandimage", "normal");
	};

	_pMenu.on_find_CurrentStyle_popupitemheight = function (pseudo) {
		return this._find_pseudo_obj("popupitemheight", pseudo);
	};

	_pMenu.on_find_CurrentStyle_popupitemalign = function (pseudo) {
		return this._find_pseudo_obj("popupitemalign", pseudo);
	};

	_pMenu.on_find_CurrentStyle_popupitempadding = function (pseudo) {
		return this._find_pseudo_obj("popupitempadding", pseudo, "padding");
	};

	_pMenu.on_find_CurrentStyle_popupitemborder = function (pseudo) {
		return this._find_pseudo_obj("popupitemborder", pseudo, "border");
	};

	_pMenu.on_find_CurrentStyle_popupitembordertype = function (pseudo) {
		return this._find_pseudo_obj("popupitembordertype", pseudo, "bordertype");
	};

	_pMenu.on_find_CurrentStyle_popupitembackground = function (pseudo) {
		return this._find_pseudo_obj("popupitembackground", pseudo, "background");
	};

	_pMenu.on_find_CurrentStyle_popupitemgradation = function (pseudo) {
		return this._find_pseudo_obj("popupitemgradation", pseudo, "gradation");
	};

	_pMenu.on_find_CurrentStyle_autohotkey = function (pseudo) {
		return this._find_pseudo_obj("autohotkey", pseudo) || nexacro.Menu._default_autohotkey;
	};

	_pMenu.on_find_CurrentStyle_itemaccessibility = function (pseudo) {
		return this._find_pseudo_obj("itemaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pMenu.on_find_CurrentStyle_popuptype = function (pseudo) {
		return this._find_pseudo_obj("popuptype", pseudo);
	};

	_pMenu.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this._find_pseudo_obj("buttonsize", pseudo) || nexacro.Menu._default_buttonsize;
	};
	_pMenu.on_find_CurrentStyle_buttonalign = function (pseudo) {
		return this._find_pseudo_obj("buttonalign", pseudo) || nexacro.Menu._default_buttonalign;
	};
	_pMenu.on_update_style_popuptype = function () {
		this.currentstyle.popuptype = this.on_find_CurrentStyle_popuptype(this._pseudo);
	};

	_pMenu.on_update_style_buttonsize = function () {
		this.on_apply_style_buttonsize(this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo));
	};

	_pMenu.on_update_style_buttonalign = function () {
		this.on_apply_style_buttonalign(this.currentstyle.buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo));
	};

	_pMenu.on_update_style_color = function () {
		this.currentstyle.color = this.on_find_CurrentStyle_color(this._pseudo);

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				if (items[i] && items[i].enable) {
					items[i].on_update_style_color();
				}
			}
		}
	};

	_pMenu.on_update_style_font = function () {
		this.currentstyle.font = this.on_find_CurrentStyle_font(this._pseudo);

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				if (items[i]) {
					items[i].on_apply_style_font(this.currentstyle.font);
				}
			}
			this._createMenu(false);
		}
	};

	_pMenu.on_update_style_align = function () {
		this.currentstyle.align = this.on_find_CurrentStyle_align(this._pseudo);

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				if (items[i]) {
					items[i].on_update_style_align();
				}
			}
		}
	};

	_pMenu.on_update_style_buttonimage = function () {
		this.on_apply_style_buttonimage(this.currentstyle.buttonimage = this.on_find_CurrentStyle_buttonimage(this._pseudo));
	};

	_pMenu.on_update_style_popupcolor = function () {
		this.currentstyle.popupcolor = this.on_find_CurrentStyle_popupcolor(this._pseudo);
		if (this._popupmenu) {
			this._popupmenu.on_update_style_color();
		}
	};

	_pMenu.on_update_style_popupborder = function () {
		this.currentstyle.popupborder = this.on_find_CurrentStyle_popupborder(this._pseudo);
		if (this._popupmenu) {
			this._popupmenu.on_update_style_border();
		}
	};

	_pMenu.on_update_style_popupbordertype = function () {
		this.currentstyle.popupbordertype = this.on_find_CurrentStyle_popupbordertype(this._pseudo);
		if (this._popupmenu) {
			this._popupmenu.on_update_style_bordertype();
		}
	};

	_pMenu.on_update_style_popuppadding = function () {
		this.currentstyle.popuppadding = this.on_find_CurrentStyle_popuppadding(this._pseudo);
		if (this._popupmenu) {
			this._popupmenu.on_update_style_padding();
		}
	};

	_pMenu.on_update_style_popupfont = function () {
		this.currentstyle.popupfont = this.on_find_CurrentStyle_popupfont(this._pseudo);
		if (this._popupmenu) {
			this._popupmenu.on_update_style_font();
		}
	};

	_pMenu.on_update_style_popupbackground = function () {
		this.on_apply_style_popupbackground(this.currentstyle.popupbackground = this.on_find_CurrentStyle_popupbackground(this._pseudo));
		if (this._popupmenu) {
			this._popupmenu.on_update_style_background();
		}
	};

	_pMenu.on_update_style_popupgradation = function () {
		this.currentstyle.popupgradation = this.on_find_CurrentStyle_popupgradation(this._pseudo);
		if (this._popupmenu) {
			this._popupmenu.on_update_style_gradation();
		}
	};

	_pMenu.on_update_style_itemalign = function () {
		this.on_apply_style_itemalign(this.currentstyle.itemalign = this.on_find_CurrentStyle_itemalign(this._pseudo));
	};

	_pMenu.on_update_style_itembackground = function () {
		this.on_apply_style_itembackground(this.currentstyle.itembackground = this.on_find_CurrentStyle_itembackground(this._pseudo));
	};

	_pMenu.on_update_style_itemborder = function () {
		this.on_apply_style_itemborder(this.currentstyle.itemborder = this.on_find_CurrentStyle_itemborder(this._pseudo));
	};

	_pMenu.on_update_style_itembordertype = function () {
		this.on_apply_style_itembordertype(this.currentstyle.itembordertype = this.on_find_CurrentStyle_itembordertype(this._pseudo));
	};

	_pMenu.on_update_style_itemgradation = function () {
		this.on_apply_style_itemgradation(this.currentstyle.itemgradation = this.on_find_CurrentStyle_itemgradation(this._pseudo));
	};

	_pMenu.on_update_style_itempadding = function () {
		this.on_apply_style_itempadding(this.currentstyle.itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo));
	};

	_pMenu.on_update_style_checkboximage = function () {
		this.on_apply_style_checkboximage(this.currentstyle.checkboximage = this.on_find_CurrentStyle_checkboximage(this._pseudo));
	};

	_pMenu.on_update_style_expandimage = function () {
		this.on_apply_style_expandimage(this.currentstyle.expandimage = this.on_find_CurrentStyle_expandimage(this._pseudo));
	};

	_pMenu.on_update_style_popupitemheight = function () {
		this.on_apply_style_popupitemheight(this.currentstyle.popupitemheight = this.on_find_CurrentStyle_popupitemheight(this._pseudo));
	};

	_pMenu.on_update_style_popupitemalign = function () {
		this.on_apply_style_popupitemalign(this.currentstyle.popupitemalign = this.on_find_CurrentStyle_popupitemalign(this._pseudo));
	};

	_pMenu.on_update_style_popupitempadding = function () {
		this.on_apply_style_popupitempadding(this.currentstyle.popupitempadding = this.on_find_CurrentStyle_popupitempadding(this._pseudo));
	};

	_pMenu.on_update_style_popupitemborder = function () {
		this.on_apply_style_popupitemborder(this.currentstyle.popupitemborder = this.on_find_CurrentStyle_popupitemborder(this._pseudo));
	};

	_pMenu.on_update_style_popupitembordertype = function () {
		this.on_apply_style_popupitembordertype(this.currentstyle.popupitembordertype = this.on_find_CurrentStyle_popupitembordertype(this._pseudo));
	};

	_pMenu.on_update_style_popupitembackground = function () {
		this.on_apply_style_popupitembackground(this.currentstyle.popupitembackground = this.on_find_CurrentStyle_popupitembackground(this._pseudo));
	};

	_pMenu.on_update_style_popupitemgradation = function () {
		this.on_apply_style_popupitemgradation(this.currentstyle.popupitemgradation = this.on_find_CurrentStyle_popupitemgradation(this._pseudo));
	};

	_pMenu.on_update_style_autohotkey = function () {
		this.on_apply_style_autohotkey(this.currentstyle.autohotkey = this.on_find_CurrentStyle_autohotkey(this._pseudo));
	};

	_pMenu.on_update_style_itemaccessibility = function () {
		this.on_apply_style_itemaccessibility(this.currentstyle.itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo));
	};

	_pMenu.on_apply_style_color = function (color) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				var _item = items[i];

				if (_item.selected) {
					_item._pseudo = "selected";
				}

				if (!_item.enable) {
					_item._pseudo = "disabled";
				}
				color = this.on_find_CurrentStyle_color(_item._pseudo);
				_item.on_apply_style_color(color);
			}
		}
	};

	_pMenu.on_apply_style_font = function (font) {
		this._createMenu();
	};

	_pMenu.on_apply_style_letterspace = function (letterspace) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_letterspace(letterspace);
			}
		}
		this._calcMenuItem();
		this._updateMenuItemPosition();

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_letterspace(letterspace);
		}
	};

	_pMenu.on_apply_style_itemalign = function (itemalign) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_align(itemalign);
			}
		}
	};

	_pMenu.on_apply_style_itembackground = function (itembackground) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_background(itembackground);
			}
		}
	};

	_pMenu.on_apply_style_itemborder = function (itemborder) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_border(itemborder);
			}
		}
	};

	_pMenu.on_apply_style_itembordertype = function (itembordertype) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_bordertype(itembordertype);
			}
		}
	};

	_pMenu.on_apply_style_itemgradation = function (itemgradation) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_gradation(itemgradation);
			}
		}
	};

	_pMenu.on_apply_style_itempadding = function (itempadding) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_padding(itempadding);
			}
			this._createMenu(false);
		}
	};

	_pMenu.on_apply_style_checkboximage = function (checkboximage) {
		if (checkboximage) {
			this._load_image(checkboximage, 0);
		}

		if (this._popupmenu) {
			this._popupmenu.on_apply_style_checkboximage(checkboximage);
		}
	};

	_pMenu.on_apply_style_expandimage = function (expandimage) {
		if (expandimage) {
			this._load_image(expandimage, 1);
		}

		if (this._popupmenu) {
			this._popupmenu.on_apply_style_expandimage(expandimage);
		}
	};

	_pMenu.on_apply_style_popupborder = function (popupborder) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_border(popupborder);
		}
	};

	_pMenu.on_apply_style_popupbordertype = function (popupbordertype) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_bordertype(popupbordertype);
		}
	};

	_pMenu.on_apply_style_popupfont = function (popupfont) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_font(popupfont);
		}
	};

	_pMenu.on_apply_style_popuppadding = function (popuppadding) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_padding(popuppadding);
		}
	};

	_pMenu.on_apply_style_popupcolor = function (popupcolor) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_color(popupcolor);
		}
	};

	_pMenu.on_apply_style_popupgradation = function (popupgradation) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_gradation(popupgradation);
		}
	};

	_pMenu.on_apply_style_popupbackground = function (popupbackground) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_background(popupbackground);
		}
	};

	_pMenu.on_apply_style_popupitembackground = function (popupitembackground) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itembackground(popupitembackground);
		}
	};

	_pMenu.on_apply_style_popupitemalign = function (popupitemalign) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itemalign(popupitemalign);
		}
	};

	_pMenu.on_apply_style_popupitemborder = function (popupitemborder) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itemborder(popupitemborder);
		}
	};

	_pMenu.on_apply_style_popupitembordertype = function (popupitembordertype) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itembordertype(popupitembordertype);
		}
	};

	_pMenu.on_apply_style_popupitemgradation = function (popupitemgradation) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itemgradation(popupitemgradation);
		}
	};

	_pMenu.on_apply_style_autohotkey = nexacro._emptyFn;
	_pMenu.on_apply_style_popupitemheight = function (popupitemheight) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itemheight(popupitemheight);
		}
	};

	_pMenu.on_apply_style_popupitempadding = function (popupitempadding) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_itempadding(popupitempadding);
		}
	};

	_pMenu.on_apply_style_itemaccessibility = function (itemaccessibility) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_accessibility(itemaccessibility);
			}
		}
	};

	_pMenu.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pMenu.on_apply_style_buttonsize = function (buttonsize) {
		if (buttonsize && buttonsize._value != -1) {
			this._spin_width = parseInt(buttonsize._value);
		}
		else {
			this._spin_width = 15;
		}
		this._createMenu(false);

		var items = this._items;
		var len = items.length;
		var padding = this.on_find_CurrentStyle_padding(this._pseudo);

		var height = this._client_height;
		if (padding) {
			height = height - padding.top - padding.bottom;
		}

		for (var i = 0; i < len; i++) {
			items[i].resize(items[i]._adjust_width, height);
		}
	};

	_pMenu.on_apply_style_buttonalign = function (buttonalign) {
		if (buttonalign) {
			var align = buttonalign._value;
			if (align == "none") {
				this._spin_width = 0;
			}
			else {
				var buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
				if (buttonsize && buttonsize._value != -1) {
					this._spin_width = parseInt(buttonsize._value);
				}
				else {
					this._spin_width = 15;
				}
			}
		}

		this._createMenu(false);

		var items = this._items;
		var len = items.length;
		var padding = this.on_find_CurrentStyle_padding(this._pseudo);

		var height = this._client_height;
		if (padding) {
			height = height - padding.top - padding.bottom;
		}

		for (var i = 0; i < len; i++) {
			items[i].resize(items[i]._adjust_width, height);
		}
	};

	_pMenu.on_create_contents = function () {
		var curstyle = this.currentstyle;
		this._createMenu(true);
		if (curstyle.checkboximage) {
			this._load_image(curstyle.checkboximage, 0);
		}

		if (curstyle.expandimage) {
			this._load_image(curstyle.expandimage, 1);
		}
	};

	_pMenu.on_created_contents = function () {
		var control = this.getElement();
		if (control) {
			var items = this._items;
			if (items) {
				var len = this._items.length;
				var item = null;


				for (var i = 0; i < len; i++) {
					items[i].on_created();
				}
			}

			if (nexacro._enableaccessibility) {
				this._want_arrow = true;
				this._setAccessibilityInfoLevel(this.level);
			}

			if (this._innerdataset && this.enablecolumn) {
				this.on_apply_enablecolumn();
			}

			this._createMenu(false);

			this.on_apply_prop_rtldirection();
		}
	};

	_pMenu.on_destroy_contents = function () {
		if (this._popupmenu) {
			this._popupmenu.destroy();
			this._popupmenu = null;
		}

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].destroy();
				items[i] = null;
			}

			this._items = null;
		}
		items = null;

		this._destroySpinButton();
	};

	_pMenu.on_change_containerRect = function (width, height) {
		this._createMenu(false);

		var items = this._items;
		var len = items.length;
		var padding = this.on_find_CurrentStyle_padding(this._pseudo);

		if (padding) {
			height = height - padding.top - padding.bottom;
		}

		for (var i = 0; i < len; i++) {
			items[i].resize(items[i]._adjust_width, height);
		}

		this._item_focus(this._focus_obj, true);
	};

	_pMenu.on_apply_prop_enable = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i]._setEnable(v);
			}
		}
	};

	_pMenu.set_captioncolumn = function (v) {
		var val = v;
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.set_captioncolumn(val);
		}

		if (val != this.captioncolumn) {
			this.captioncolumn = val;
			this.on_apply_captioncolumn();
		}
	};

	_pMenu.on_apply_captioncolumn = function () {
		var val = this.captioncolumn;

		if (this._innerdataset) {
			this._createMenu(false);

			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				var text = this._innerdataset.getColumn(items[i].datarow, this.captioncolumn);
				if (text) {
					items[i].set_text(text);
				}
				else {
					items[i].set_text("");
				}
			}
		}
	};

	_pMenu.set_checkboxcolumn = function (v) {
		var val = v;
		if (this._popupmenu) {
			this._popupmenu.set_checkboxcolumn(val);
		}

		if (val != this.checkboxcolumn) {
			this.checkboxcolumn = val;
			this._createMenu(false);
		}
		return this.checkboxcolumn;
	};

	_pMenu.set_enablecolumn = function (v) {
		if (v != this.enablecolumn) {
			this.enablecolumn = v;
			this.on_apply_enablecolumn();
		}
		return this.enablecolumn;
	};

	_pMenu.on_apply_enablecolumn = function () {
		var val = this.enablecolumn;

		if (this._innerdataset) {
			this._createMenu(false);

			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				var enabletext = this._innerdataset.getColumn(items[i].datarow, this.enablecolumn);

				enabletext = enabletext == false || enabletext == "false" ? false : true;

				items[i].set_enable(enabletext);
			}
		}
		if (this._popupmenu) {
			this._popupmenu.set_enablecolumn(this.enablecolumn);
		}
	};

	_pMenu.set_hotkeycolumn = function (v) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.set_hotkeycolumn(v);
		}

		if (v != this.hotkeycolumn) {
			this.hotkeycolumn = v;
			this._createMenu(false);
		}
		return this.hotkeycolumn;
	};

	_pMenu.set_iconcolumn = function (v) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.set_iconcolumn(v);
		}

		if (v != this.iconcolumn) {
			this.iconcolumn = v;
			this._createMenu(false);
		}
		return this.iconcolumn;
	};

	_pMenu.set_idcolumn = function (v) {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.set_idcolumn(v);
		}

		if (v != this.idcolumn) {
			this.idcolumn = v;
			this.on_apply_idcolumn();
		}
		return this.idcolumn;
	};

	_pMenu.on_apply_idcolumn = function () {
		var val = this.idcolumn;

		if (this._innerdataset) {
			this._createMenu(false);

			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				var id = this._innerdataset.getColumn(items[i].datarow, this.idcolumn);
				items[i].id = id ? id : "";
			}
		}
	};

	_pMenu.set_levelcolumn = function (v) {
		var val = v;
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.set_levelcolumn(val);
		}

		if (val != this.levelcolumn) {
			this.levelcolumn = val;
			this.on_apply_levelcolumn();
		}
		return this.levelcolumn;
	};

	_pMenu.on_apply_levelcolumn = function () {
		var val = this.levelcolumn;

		if (this._innerdataset) {
			this._createMenu(false);

			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				var level = this._innerdataset.getColumn(items[i].datarow, this.levelcolumn);
				items[i].level = level ? level : -1;
			}
		}
	};

	_pMenu.set_userdatacolumn = function (v) {
		var val = v;
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.set_userdatacolumn(val);
		}

		if (val != this.userdatacolumn) {
			this.userdatacolumn = val;
			this.on_apply_userdatacolumn();
		}
		return this.userdatacolumn;
	};

	_pMenu.on_apply_userdatacolumn = function () {
		var val = this.userdatacolumn;

		if (this._innerdataset) {
			this._createMenu(false);

			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				var userdata = this._innerdataset.getColumn(items[i].datarow, this.userdatacolumn);
				if (userdata) {
					items[i].userdata = userdata;
				}
			}
		}
	};

	_pMenu.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
		}
	};

	_pMenu._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pMenu.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pMenu.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}

		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
		return this.innerdataset;
	};

	_pMenu.on_apply_innerdataset = function () {
		var ds = this._innerdataset;
		if (ds) {
			var callback = this._callbackFromDataset;
			ds._setEventHandler("onrowposchanged", callback, this);
			ds._setEventHandler("oncolumnchanged", callback, this);
			ds._setEventHandler("onrowsetchanged", callback, this);
		}
		var control = this.getElement();
		if (control && this.innerdataset) {
			this._createMenu(true);
			this.beforeindex = -1;
			this.beforevalue = "";
			this.beforeText = "";
		}
	};

	_pMenu.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		var _rtldirection = this._rtldirection;

		var items = this._items;
		var iLen = items.length;
		for (var i = 0; i < iLen; i++) {
			items[i]._setRtlDirection(_rtldirection);
		}

		if (this._popupmenu) {
			this._popupmenu._setRtlDirection(_rtldirection);
		}
	};

	_pMenu.on_fire_user_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onlbuttondown", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onlbuttondown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onlbuttonup", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onlbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onrbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttondown && this.onrbuttondown._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onrbuttondown", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onrbuttondown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttonup && this.onrbuttonup._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onrbuttonup", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onrbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmouseup", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onmouseup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onmousedown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmousedown", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onmousedown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onmouseenter = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseenter && this.onmouseenter._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			if (refer_comp.index == undefined) {
				refer_comp.index = -1;
			}
			var evt = new nexacro.MenuMouseEventInfo(this, "onmouseenter", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onmouseenter._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onmouseleave = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseleave && this.onmouseleave._has_handlers) {
			if (this._overedobj) {
				this._overedobj = null;
			}
			var refer_comp = from_comp._overedobj || from_comp;
			if (refer_comp.index == undefined) {
				refer_comp.index = -1;
			}
			var evt = new nexacro.MenuMouseEventInfo(this, "onmouseleave", from_refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onmouseleave._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._menuitemonmouseenter && (this._menuitemonmouseenter != from_refer_comp) && (this != from_refer_comp)) {
			this._process_mousemove(from_refer_comp);
		}

		if (this.onmousemove && this.onmousemove._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			if (refer_comp.index == undefined) {
				refer_comp.index = -1;
			}
			var evt = new nexacro.MenuMouseEventInfo(this, "onmousemove", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.onmousemove._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_ondrag = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, refer_comp, self_refer_comp) {
		if (this.ondrag && this.ondrag._has_handlers) {
			var dragData = this._getDragData();

			var self_refer = self_refer_comp._overedobj || self_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondrag", refer_comp.id, dragData, null, this, self_refer_comp, from_comp, refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, self_refer_comp.level, self_refer.index, self_refer._bindindex);
			return [this.ondrag._fireUserEvent(this, evt), this, self_refer_comp, dragData, evt.userdata];
		}
		return [false];
	};

	_pMenu.on_fire_user_ondrop = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondrop && this.ondrop._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondrop", src_refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.ondrop._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_ondragenter = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragenter && this.ondragenter._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondragenter", src_refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.ondragenter._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_ondragleave = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragleave && this.ondragleave._has_handlers) {
			var evt = new nexacro.MenuDragEventInfo(this, "ondragleave", src_refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this._last_mouseleave_iteminfo.level, this._last_mouseleave_iteminfo.index, this._last_mouseleave_iteminfo.bindindex);

			return this.ondragleave._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_user_ondragmove = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragmove && this.ondragmove._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondragmove", src_refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_refer_comp.level, refer_comp.index, refer_comp._bindindex);
			return this.ondragmove._fireUserEvent(this, evt);
		}
		return false;
	};

	_pMenu.on_fire_sys_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var pThis = this._popupmenu_find(this);
		var item = this._item_find(pThis);
		var popupvisible = this._popupmenu_visible(this);
		var menuitem = this._items;


		var menuexpand;
		if (menuitem[this._menuitemindex]) {
			menuexpand = this._popupmenuitem_extend(menuitem[this._menuitemindex]);
		}

		var popupexpand;
		if (item[this._popupitemindex]) {
			popupexpand = this._popupmenuitem_extend(item[this._popupitemindex]);
		}

		var item_len = item.length - 1;
		var menuitem_len = menuitem.length - 1;

		var E = nexacro.Event;

		if (nexacro._enableaccessibility) {
			switch (keycode) {
				case E.KEY_UP:
					{

						if (this._focus_obj instanceof nexacro.Menu) {
							this._menuitemindex = -1;
							var prev_comp = this.parent.getPrevAccessibilityComponent(pThis);
							if (prev_comp) {
								prev_comp._setFocus(false);
							}
						}
						else if (this._focus_obj instanceof nexacro.PopupMenuItem) {
							item = this._item_find(pThis);

							this._item_focus(item[this._popupitemindex], false);

							this._popupitemindex--;
							if (this._popupitemindex < 0) {
								this._popupitemindex = item_len;
							}
							this._focus_obj = this._menuitemonmouseenter = item[this._popupitemindex];
							this._item_focus(item[this._popupitemindex], true);
						}
						else if (this._focus_obj instanceof nexacro.MenuItem) {
							if (popupvisible) {
								this._showPopup(this._focus_obj);
								item = this._item_find(pThis);

								this._item_focus(item[this._popupitemindex], false);

								this._popupitemindex--;
								if (this._popupitemindex < 0) {
									this._popupitemindex = item_len;
								}
								this._focus_obj = this._menuitemonmouseenter = item[this._popupitemindex];
								this._item_focus(item[this._popupitemindex], true);
							}
							else {
								this._focus_obj = pThis;
								this._item_focus(this._focus_obj, true);
							}
						}

						break;
					}
				case E.KEY_DOWN:
					if (this._focus_obj instanceof nexacro.Menu) {
						this._menuitemindex = 0;
						this._focus_obj = menuitem[this._menuitemindex];
						this._item_focus(this._focus_obj, true);
					}
					else if (this._focus_obj instanceof nexacro.PopupMenuItem) {
						item = this._item_find(pThis);

						this._item_focus(item[this._popupitemindex], false);

						this._popupitemindex++;
						if (this._popupitemindex > item_len) {
							this._popupitemindex = 0;
						}
						this._focus_obj = this._menuitemonmouseenter = item[this._popupitemindex];
						this._item_focus(item[this._popupitemindex], true);
					}
					else if (this._focus_obj instanceof nexacro.MenuItem) {
						if (menuexpand == true) {
							var obj = this._focus_obj;
							this._showPopup(obj);
							item = this._item_find(pThis);
							this._previousitem = this._menuitemindex;
							popupvisible = true;
						}

						if (popupvisible) {
							this._item_focus(item[this._popupitemindex], false);

							this._popupitemindex++;
							if (this._popupitemindex > item_len) {
								this._popupitemindex = 0;
							}
							this._focus_obj = this._menuitemonmouseenter = item[this._popupitemindex];
							if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
								nexacro.OnceCallbackTimer.callonce(this, function () {
									this._item_focus(this._focus_obj, true);
								});
							}
							else {
								this._item_focus(this._focus_obj, true);
							}
						}
					}

					break;
				case E.KEY_LEFT:
					if (popupvisible) {
						this._previousitem = this._menuitemindex;
					}
					else {
						this._menuitemindex--;
						this._previousitem = this._menuitemindex;
					}

					if (this._menuitemindex < 0) {
						this._menuitemindex = menuitem_len;
					}

					if (popupvisible) {
						if (pThis.parent instanceof nexacro.PopupMenu) {
							this._item_focus(item[this._popupitemindex], false);
							this._popupitemindex = pThis.parent._previousitem;
							var item = pThis.parent._items;

							pThis._closePopup();

							this._focus_obj = item[this._popupitemindex];
							this._menuitemonmouseenter = this._focus_obj;
							this._item_focus(this._focus_obj, true);
						}
						else {
							this._previousitem--;

							if (this._previousitem < 0) {
								this._previousitem = menuitem_len;
							}

							this._menuitemindex = this._previousitem;

							var menuexpand = this._popupmenuitem_extend(menuitem[this._menuitemindex]);
							this.on_notify_menuitem_onmouseenter(menuitem[this._menuitemindex]);

							this._popupitemindex = 0;

							if (!menuexpand) {
								this._focus_obj = menuitem[this._menuitemindex];
								this._menuitemonmouseenter = this._focus_obj;
								this._item_focus(this._focus_obj, true);
							}
							else {
								var rThis = this._popupmenu_find(this);
								var rItem = this._item_find(rThis);


								this._focus_obj = rItem[this._popupitemindex];
								this._menuitemonmouseenter = this._focus_obj;
								if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
									nexacro.OnceCallbackTimer.callonce(this, function () {
										this._item_focus(this._focus_obj, true);
									});
								}
								else {
									this._item_focus(this._focus_obj, true);
								}
							}
						}
					}
					else {
						pThis._previousitem = this._menuitemindex;
						this._focus_obj = menuitem[this._menuitemindex];
						this._menuitemonmouseenter = this._focus_obj;
						this._item_focus(this._focus_obj, true);
					}
					break;
				case E.KEY_RIGHT:
					if (!popupvisible) {
						this._menuitemindex++;
						this._previousitem = this._menuitemindex;
					}

					if (this._menuitemindex > menuitem_len) {
						this._menuitemindex = 0;
					}

					if (menuexpand && popupvisible == true) {
						if (this._popupitemindex == -1) {
							this._popupitemindex = 0;
						}

						var popupexpand = this._popupmenuitem_extend(item[this._popupitemindex]);
						if (!popupexpand) {
							this._menuitemindex++;

							if (this._menuitemindex > menuitem_len) {
								this._menuitemindex = 0;
							}

							this.on_notify_menuitem_onmouseenter(menuitem[this._menuitemindex]);

							var menuexpand = this._popupmenuitem_extend(menuitem[this._menuitemindex]);
							if (!menuexpand) {
								this._focus_obj = menuitem[this._menuitemindex];
								this._item_focus(this._focus_obj, true);
							}
							else {
								var rThis = this._popupmenu_find(this);
								var rItem = this._item_find(rThis);


								this._popupitemindex = 0;
								this._focus_obj = rItem[this._popupitemindex];
								if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
									nexacro.OnceCallbackTimer.callonce(this, function () {
										this._item_focus(this._focus_obj, true);
									});
								}
								else {
									this._item_focus(this._focus_obj, true);
								}
							}
						}
						else {
							pThis.on_notify_menuitem_onmouseenter(item[this._popupitemindex]);

							var rItem = this._item_find(pThis);


							this._popupitemindex = 0;
							this._focus_obj = rItem[this._popupitemindex];
							this._menuitemonmouseenter = this._focus_obj;
							this._item_focus(this._focus_obj, true);
						}
					}
					else {
						this._focus_obj = menuitem[this._menuitemindex];
						this._menuitemonmouseenter = menuitem[this._menuitemindex];
						this._item_focus(this._focus_obj, true);
					}
					break;
				case E.KEY_ENTER:
					if (this._menuitemonmouseenter) {
						if (menuexpand == true && (!this._popupmenu || (this._popupmenu && !this._popupmenu._is_popup()))) {
							this.on_notify_menuitem_onlbuttondown(menuitem[this._menuitemindex]);
							this._previousitem = this._menuitemindex;
						}
						else if (pThis instanceof nexacro.Menu) {
							pThis.on_notify_menuitem_onclick(this._menuitemonmouseenter);
						}
						else {
							var rThis = this._menuitemonmouseenter.parent;
							rThis.on_notify_menuitem_onclick(this._menuitemonmouseenter);
						}
					}

					break;
				case E.KEY_ESC:
					if (popupvisible) {
						this._popupitemindex = -1;
						pThis._closePopup();
						var item = pThis.parent._items[pThis.parent._previousitem];
						this._item_focus(item, false);
						this._focus_obj = item;
						this._item_focus(item, true);
					}
					break;
				default:
					break;
			}
		}
		else {
			this._key_action = true;
			switch (keycode) {
				case E.KEY_UP:
					var menuitemindex = this._menuitemindex > -1 ? this._menuitemindex : this._clickitemindex;
					if (menuitemindex > -1) {
						if (popupvisible) {
							if (pThis._is_spin_visible) {
								pThis._popupitemindex = this._popupitemindex;
								pThis._do_scroll(keycode, pThis);
							}

							var _index_change = true;
							var _item = item[this._popupitemindex];

							if (_item && (!_item.enable || _item._pseudo == "mouseover")) {
								_index_change = false;
							}
							_item = null;

							if (_index_change) {
								this._popupitemindex = 0;
							}
							else {
								this._popupitemindex--;
							}
							_index_change = null;

							if (this._popupitemindex < 0) {
								this._popupitemindex = item_len;
							}

							this._menuitemonmouseenter = item[this._popupitemindex];

							this._item_focus(item[this._popupitemindex], true);
							this._popupitempreviousindex = this._popupitemindex;
						}
					}
					break;
				case E.KEY_DOWN:
					var menuitemindex = this._menuitemindex > -1 ? this._menuitemindex : this._clickitemindex;
					if (menuitemindex > -1) {
						if (menuexpand && menuitem[menuitemindex].enable) {
							if (popupvisible == true) {
								if (pThis._is_spin_visible) {
									pThis._popupitemindex = this._popupitemindex;
									pThis._do_scroll(keycode, pThis);
								}

								var _index_change = true;
								var _item = item[this._popupitemindex];

								if (_item && (!_item.enable || _item._pseudo == "mouseover")) {
									_index_change = false;
								}
								_item = null;

								if (_index_change) {
									this._popupitemindex = 0;
								}
								else {
									this._popupitemindex++;
								}
								_index_change = null;

								if (this._popupitemindex > item_len) {
									this._popupitemindex = 0;
								}

								this._menuitemonmouseenter = item[this._popupitemindex];

								this._item_focus(item[this._popupitemindex], true);
								this._popupitempreviousindex = this._popupitemindex;
							}
							else if (popupvisible == false) {
								if (!this._is_menu_click) {
									this._is_menu_click = true;
								}
								this.on_notify_menuitem_onlbuttondown(menuitem[menuitemindex]);

								this._previousitem = this._menuitemindex;

								var rThis = this._popupmenu_find(this);
								if (rThis != this) {
									var rItem = this._item_find(rThis);

									this._popupitemindex = 0;

									this._menuitemonmouseenter = rItem[this._popupitemindex];
									this._item_focus(rItem[this._popupitemindex], true);
									this._popupitempreviousindex = this._popupitemindex;
								}
							}
						}
						else if (!this._is_menu_click && !this._selected && this._menuitemonmouseenter && this._menuitemonmouseenter._pseudo == "normal") {
							this._menuitemindex = 0;

							if (!this._is_menu_click) {
								this._is_menu_click = true;
							}

							this._previousitem = this._menuitemindex;
							this._menuitemonmouseenter = menuitem[this._menuitemindex];

							menuexpand = this._popupmenuitem_extend(this._menuitemonmouseenter);
							if (menuexpand) {
								this.on_notify_menuitem_onlbuttondown(this._menuitemonmouseenter);
							}
							else {
								this._item_focus(this._menuitemonmouseenter, this._is_menu_click);
								break;
							}

							var rThis = this._popupmenu_find(this);
							if (rThis != this) {
								var rItem = this._item_find(rThis);

								this._popupitemindex = 0;

								this._menuitemonmouseenter = rItem[this._popupitemindex];
								this._item_focus(rItem[this._popupitemindex], true);
								this._popupitempreviousindex = this._popupitemindex;
							}
						}
					}
					break;
				case E.KEY_LEFT:
					if (popupvisible) {
						this._previousitem = this._menuitemindex;

						if (pThis.parent instanceof nexacro.PopupMenu) {
							this._popupitemindex = pThis.parent._previousitem;
							var item = pThis.parent._items;

							pThis._closePopup();

							this._menuitemonmouseenter = item[this._popupitemindex];
							this._item_focus(item[this._popupitemindex], true);
							this._popupitempreviousindex = this._popupitemindex;
						}
						else {
							if (this._is_spin_visible) {
								this._do_scroll(keycode, this);
							}

							this._previousitem--;

							if (this._previousitem < 0) {
								this._previousitem = menuitem_len;
							}

							this._menuitemindex = this._previousitem;

							var _item = menuitem[this._menuitemindex];

							var menuexpand = this._popupmenuitem_extend(_item);
							this.on_notify_menuitem_onmouseenter(_item);
							this._item_focus(_item, true);

							this._popupitemindex = 0;

							if (!menuexpand) {
								this._menuitemonmouseenter = _item;
								this._item_focus(_item, true);
							}
							else {
								var rThis = this._popupmenu_find(this);
								if (rThis != this) {
									var rItem = this._item_find(rThis);
									this._menuitemonmouseenter = rItem[this._popupitemindex];
									this._item_focus(rItem[this._popupitemindex], true);
									this._popupitempreviousindex = this._popupitemindex;
								}
							}
						}
					}
					else {
						if (this._is_spin_visible) {
							this._do_scroll(keycode, this);
						}

						if (!this._is_menu_click && !this._selected && this._menuitemonmouseenter && this._menuitemonmouseenter._pseudo == "normal") {
							this._menuitemindex = 0;
						}
						else if (!popupvisible) {
							this._menuitemindex--;
						}

						if (this._menuitemindex < 0) {
							this._menuitemindex = menuitem_len;
						}

						this._menuitemonmouseenter = menuitem[this._menuitemindex];
						this._clickitemindex = this._menuitemindex;

						if (this._previousitem > -1) {
							this._item_focus(menuitem[this._previousitem], false);
						}
						this._previousitem = this._menuitemindex;

						var menuexpand = this._popupmenuitem_extend(this._menuitemonmouseenter);
						if (menuexpand) {
							if (menuitem[this._menuitemindex].enable && this._clickitemindex >= 0 && !this._close_popup) {
								this.on_notify_menuitem_onlbuttondown(menuitem[this._menuitemindex]);
							}
							else {
								this._item_focus(menuitem[this._menuitemindex], true);
								break;
							}
							var rThis = this._popupmenu_find(this);
							var rItem = this._item_find(rThis);
							this._popupitemindex = 0;
							if (!(rItem[this._popupitemindex] instanceof nexacro.PopupMenuItem)) {
								this._item_focus(this._menuitemonmouseenter, true);
								break;
							}
							this._menuitemonmouseenter = rItem[this._popupitemindex];
							this._item_focus(rItem[this._popupitemindex], true);
							this._popupitempreviousindex = this._popupitemindex;
						}
						else {
							this._item_focus(menuitem[this._menuitemindex], true);
						}
					}
					break;
				case E.KEY_RIGHT:
					if (this._menuitemonmouseenter && !(pThis instanceof nexacro.Menu)) {
						var _popupmenu = this._menuitemonmouseenter.parent;

						if (_popupmenu._is_popupmenu_mouseover) {
							var _val = pThis._popupmenuitem_mouseover(keycode, pThis, item);

							if (_val) {
								pThis = _val.pThis;
								popupexpand = _val.popupexpand;

								item = _val.item;
							}
							_val = null;
						}
						_popupmenu._is_popupmenu_mouseover = false;
						_popupmenu = null;
					}

					if (menuexpand && popupvisible == true) {
						if (this._popupitemindex == -1) {
							this._popupitemindex = 0;
						}

						if (!popupexpand) {
							if (this._is_spin_visible) {
								this._do_scroll(keycode, this);
							}

							this._menuitemindex++;

							if (this._menuitemindex > menuitem_len) {
								this._menuitemindex = 0;
							}

							this._previousitem = this._menuitemindex;

							var _item = menuitem[this._menuitemindex];
							var menuexpand = this._popupmenuitem_extend(_item);
							this.on_notify_menuitem_onmouseenter(_item);
							this._item_focus(_item, true);

							if (!menuexpand) {
								this._menuitemonmouseenter = _item;
								this._item_focus(_item, true);
							}
							else {
								var rThis = this._popupmenu_find(this);
								if (rThis != this) {
									var rItem = this._item_find(rThis);
									this._popupitemindex = 0;
									this._menuitemonmouseenter = rItem[this._popupitemindex];
									this._item_focus(rItem[this._popupitemindex], true);
									this._popupitempreviousindex = this._popupitemindex;
								}
							}
						}
						else {
							if (item[this._popupitemindex] && item[this._popupitemindex].enable) {
								var _item = item[this._popupitemindex];
								var _prev_click = this._is_menu_click;

								if (_item._pseudo == "normal") {
									if (_item != this._menuitemonmouseenter) {
										pThis._closePopup();

										this._is_menu_click = _prev_click;
										this._menuitemindex++;

										if (this._menuitemindex > menuitem_len) {
											this._menuitemindex = 0;
										}

										this._previousitem = this._menuitemindex;

										_item = menuitem[this._menuitemindex];

										this.on_notify_menuitem_onmouseenter(_item);
										this._item_focus(_item, true);

										if (_item.enable) {
											this._showPopup(_item);
										}

										_item = this._item_find(pThis);

										if (this._popupitemindex == -1) {
											this._popupitemindex = 0;
										}

										_item = _item[this._popupitemindex];
										this._menuitemonmouseenter = _item;
									}
									else {
										pThis._showPopup(_item);
									}
									this._item_focus(_item, true);

									_item = null;
									_prev_click = null;

									break;
								}

								pThis._previousitem = this._popupitemindex;
								pThis._closeflag = true;
								pThis._showPopup(item[this._popupitemindex]);

								var rItem = this._item_find(pThis);
								this._popupitemindex = 0;
								this._menuitemonmouseenter = rItem[this._popupitemindex];
								this._item_focus(rItem[this._popupitemindex], true);
								this._popupitempreviousindex = this._popupitemindex;
							}
							else {
								if (this._is_spin_visible) {
									this._do_scroll(keycode, this);
								}

								this._menuitemindex++;

								if (this._menuitemindex > menuitem_len) {
									this._menuitemindex = 0;
								}

								this._previousitem = this._menuitemindex;

								var _item = menuitem[this._menuitemindex];
								this.on_notify_menuitem_onmouseenter(_item);
								this._item_focus(_item, true);

								var rThis = this._popupmenu_find(this);
								if (rThis != this) {
									var rItem = this._item_find(rThis);
									this._popupitemindex = 0;
									this._menuitemonmouseenter = rItem[this._popupitemindex];
									this._item_focus(rItem[this._popupitemindex], true);
									this._popupitempreviousindex = this._popupitemindex;
								}
							}
						}
					}
					else {
						if (this._is_spin_visible) {
							this._do_scroll(keycode, this);
						}

						if (!this._is_menu_click && !this._selected && this._menuitemonmouseenter && this._menuitemonmouseenter._pseudo == "normal") {
							this._menuitemindex = 0;
						}
						else if (!popupvisible) {
							this._menuitemindex++;
						}

						if (this._menuitemindex > menuitem_len) {
							this._menuitemindex = 0;
						}

						this._menuitemonmouseenter = menuitem[this._menuitemindex];

						this._clickitemindex = this._menuitemindex;

						this._previousitem = this._menuitemindex;
						var menuexpand = this._popupmenuitem_extend(this._menuitemonmouseenter);
						if (menuexpand) {
							if (menuitem[this._menuitemindex].enable && this._clickitemindex >= 0 && !this._close_popup) {
								this.on_notify_menuitem_onlbuttondown(menuitem[this._menuitemindex]);
							}
							else {
								this._item_focus(menuitem[this._menuitemindex], true);
								break;
							}
							var rThis = this._popupmenu_find(this);
							var rItem = this._item_find(rThis);
							this._popupitemindex = 0;
							if (!(rItem[this._popupitemindex] instanceof nexacro.PopupMenuItem)) {
								this._item_focus(this._menuitemonmouseenter, true);
								break;
							}
							this._menuitemonmouseenter = rItem[this._popupitemindex];
							this._item_focus(rItem[this._popupitemindex], true);
							this._popupitempreviousindex = this._popupitemindex;
						}
						else {
							this._item_focus(menuitem[this._menuitemindex], true);
						}
					}
					break;
				case E.KEY_ENTER:
					if (this._menuitemonmouseenter && this._menuitemonmouseenter.enable) {
						if (!(pThis instanceof nexacro.Menu)) {
							var _popupmenu = this._menuitemonmouseenter.parent;

							if (_popupmenu._is_popupmenu_mouseover) {
								pThis = pThis._popupmenuitem_mouseover(keycode, pThis, item);
								item = this._item_find(pThis);
							}
							_popupmenu._is_popupmenu_mouseover = false;
							_popupmenu = null;
						}

						if ((menuexpand == true && menuitem[this._menuitemindex].enable) && (this._menuitemonmouseenter instanceof nexacro.MenuItem && !(this._menuitemonmouseenter instanceof nexacro.PopupMenuItem))) {
							this._key_action = false;
							this.on_notify_menuitem_onlbuttondown(menuitem[this._menuitemindex]);
							this._key_action = true;
							this._previousitem = this._menuitemindex;

							var rThis = this._popupmenu_find(this);
							if (rThis != this) {
								var rItem = this._item_find(rThis);
								this._popupitemindex = 0;
								this._menuitemonmouseenter = rItem[this._popupitemindex];
								this._item_focus(rItem[this._popupitemindex], true);
								this._popupitempreviousindex = this._popupitemindex;
							}
							else {
								this._menuitemindex = 0;
							}
						}
						else if (pThis instanceof nexacro.Menu) {
							if (!this._is_menu_click && !this._selected && this._menuitemonmouseenter._pseudo == "normal") {
								this._menuitemindex = 0;
								this._clickitemindex = 0;

								this._previousitem = this._menuitemindex;
								this._menuitemonmouseenter = this._items[this._clickitemindex];

								menuexpand = this._popupmenuitem_extend(this._menuitemonmouseenter);
								if (menuexpand) {
									this._key_action = false;
									this.on_notify_menuitem_onlbuttondown(this._menuitemonmouseenter);
									this._key_action = true;
								}
								else {
									pThis.on_notify_menuitem_onclick(this._menuitemonmouseenter);

									this._is_menu_click = !this._is_menu_click;
									this._item_focus(this._items[this._clickitemindex], this._is_menu_click);

									break;
								}

								var rThis = this._popupmenu_find(this);
								if (rThis != this) {
									var rItem = this._item_find(rThis);
									this._popupitemindex = 0;
									this._menuitemonmouseenter = rItem[this._popupitemindex];
									this._item_focus(rItem[this._popupitemindex], true);
									this._popupitempreviousindex = this._popupitemindex;
								}
							}
							else {
								pThis.on_notify_menuitem_onclick(this._menuitemonmouseenter);

								this._is_menu_click = !this._is_menu_click;
								this._item_focus(this._items[this._clickitemindex], this._is_menu_click);
							}
						}
						else {
							var rThis = this._menuitemonmouseenter.parent;
							rThis.on_notify_menuitem_onclick(this._menuitemonmouseenter);
							if (!this._menuitemonmouseenter.itemexpand) {
								this._menuitemonmouseenter = menuitem[this._menuitemindex];
								if (this._menuitemonmouseenter) {
									this._menuitemonmouseenter._stat_change("notselect", "normal");
								}
							}
							else {
								var _item = item[this._popupitemindex];

								if (_item && _item.enable) {
									pThis._previousitem = this._popupitemindex;
									pThis._closeflag = true;
									pThis._showPopup(_item);

									var rItem = this._item_find(pThis);
									this._popupitemindex = 0;
									this._menuitemonmouseenter = rItem[this._popupitemindex];
									this._item_focus(rItem[this._popupitemindex], true);
									this._popupitempreviousindex = this._popupitemindex;
								}
								else {
									this._menuitemindex = 0;
								}
							}
						}
					}
					break;
				case E.KEY_ESC:
					if (popupvisible) {
						pThis._closePopup();
						var item = pThis.parent._items[pThis.parent._previousitem];
						this._item_focus(item, true);
						this._menuitemindex = item.index;
						this._menuitemonmouseenter = item;
					}
					break;
				default:
					break;
			}
			this._key_action = false;
		}
		return nexacro.Component.prototype.on_fire_sys_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pMenu._do_defocus = function (target, bParent) {
		var _window = this._getWindow();
		_window._removeFromCurrentFocusPath(target, true);
		if (bParent) {
			_window._removeFromCurrentFocusPath(this, false);
		}
	};

	_pMenu._do_scroll = function (keycode, pThis) {
		var _item_length = this._items ? this._items.length : -1;

		if (_item_length > 0) {
			var E = nexacro.Event;

			switch (keycode) {
				case E.KEY_LEFT:
					if (this._menuitemindex == 0) {
						var _view_item_qty = this._getViewItemQty(pThis, _item_length);

						if (this._scrollIndex != 0) {
							this._scrollIndex = 0;
						}
						else if (this._items[this._menuitemindex]._pseudo != "normal") {
							this._scrollIndex = _item_length - _view_item_qty;
						}

						if (this._scrollIndex > -1) {
							this._calcMenuItem();
							this._updateMenuItemPosition();
						}
						_view_item_qty = null;
					}
					else if (this._menuitemindex == this._scrollIndex) {
						this._spinup();
					}
					break;
				case E.KEY_RIGHT:
					var _view_item_qty = this._getViewItemQty(pThis, _item_length);

					if ((this._menuitemindex == (_item_length - 1)) || ((this._menuitemindex == 0) && (this._scrollIndex != 0))) {
						this._scrollIndex = 0;

						this._calcMenuItem();
						this._updateMenuItemPosition();
					}
					else if (_view_item_qty == (this._menuitemindex - this._scrollIndex + 1)) {
						this._spindown();
					}
					_view_item_qty = null;
					break;
				default:
					break;
			}
		}
		_item_length = null;
	};

	_pMenu._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		nexacro._skipDragEventAfterMsgBox = false;

		var form = this._getForm();
		form._skip_comp = true;
		var ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttondown || (pThis.onlbuttondown && !pThis.onlbuttondown.defaultprevented)) {
			this.on_lbuttondown_default_action(elem, this._focus_refer_comp, canvasX, canvasY);
			ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		form._skip_comp = false;

		return ret;
	};

	_pMenu._on_activate = function () {
		if (!this._is_alive) {
			return;
		}

		if (!this._isSelected()) {
			this._stat_change("focus", "normal");

			if (this._items && this._items.length > 0) {
				this._menuitemindex = 0;
				this._menuitemonmouseenter = this._items[this._menuitemindex];

				this._item_focus(this._menuitemonmouseenter, true);
			}
		}
	};

	_pMenu._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		if (this._popupmenu) {
			return this._popupmenu._on_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll);
		}
		return true;
	};

	_pMenu.on_notify_menuitem_onmouseleave = function (obj, e) {
		if (obj.selected || (this._popupmenu && this._popupmenu._isVisible())) {
			this._item_focus(obj, true);
		}
		else {
			this._menuitemindex = 0;
		}
		this._last_mouseleave_iteminfo.index = obj.index;
		this._last_mouseleave_iteminfo.bindindex = obj._bindindex;
		this._last_mouseleave_iteminfo.level = obj.parent.level;


		if (this._overedobj) {
			this._overedobj = null;
		}
	};

	_pMenu.on_notify_menuitem_onmouseenter = function (obj, e) {
		if ((obj && !obj.enable && !this._key_action) || !(obj instanceof nexacro.MenuItem)) {
			return;
		}
		var popupmenu = this._popupmenu;
		this._menuitemonmouseenter = obj;
		this._previousitem = obj.index;

		if (popupmenu) {
			if (popupmenu._is_popup() || this._is_menu_click) {
				var prev_click = this._is_menu_click;
				if (this.beforeindex != obj.index) {
					this.beforeindex = obj.index;
				}
				if (!this._menuitemonmouseenter.selected) {
					this._cancelPopup = true;
					popupmenu.cancelPopup();
					this._cancelPopup = false;

					if (obj.enable) {
						this._showPopup(obj);
					}
				}
				this._menuitemindex = obj.index;
				this._popupitemindex = -1;
				this._is_menu_click = prev_click;
			}
		}
		else {
			if (this._is_menu_click) {
				if (obj.enable) {
					this._showPopup(obj);
				}
			}
		}

		var item = this._items;

		this._menuitemindex = obj.index;
		this._previousitem = obj.index;

		if (this._is_menu_click) {
			item[obj.index].selected = true;
			this._item_focus(item[obj.index], true);
			this._clickitemindex = obj.index;
		}
		else {
			this._item_focus(item[obj.index], true, nexacro._enableaccessibility);
		}
		return true;
	};

	_pMenu.on_notify_menuitem_onclick = function (obj, e) {
		if (obj.enable == false || this._getPopupType() == "none") {
			return;
		}

		if (!this._is_alive) {
			return;
		}
		if (this.visible && this._isEnable() && this.enableevent) {
			this._on_focus(true);

			if (!obj.itemexpand && (obj == this._menuitemonmouseenter)) {
				this._close_popup = !this._close_popup;

				var rootComp = this._getRootComponent(obj);
				this.on_fire_onitemclick(rootComp, "onmenuclick", obj.id, obj.userdata, obj.index, obj.parent.level);

				rootComp = null;
			}

			if (!this._is_menu_click) {
				return;
			}

			if (this._items) {
				var item = this._items[this._menuitemindex];
				if (item) {
					if (item == obj) {
						this._item_focus(item, true);
					}
				}
				else {
					this._item_focus(this._items[this._previousitem], false);
					this._item_focus(this._items[this._clickitemindex], false);
				}

				if (nexacro._enableaccessibility) {
					this._focus_obj = item;
				}
			}

			this._menuitemonmouseenter = item;
			this._popupitemindex = -1;
			this._popupitempreviousindex = 0;
			this._previousitem = 0;
			this._clickitemindex = obj.index;
		}

		this._previousitem = obj.index;
	};

	_pMenu.on_notify_menuitem_onlbuttondown = function (obj, e) {
		var popupmenu = this._popupmenu;
		if (popupmenu && popupmenu._is_popup()) {
			if (this.beforeindex != obj.index) {
				this.beforeindex = obj.index;
			}
			this._cancelPopup = true;
			popupmenu.cancelPopup();
			this._cancelPopup = false;
			this._previousitem = this._menuitemindex = obj.index;
			this._popupitemindex = -1;
			this._close_popup = true;
			this._is_menu_click = false;
			this._clickitemindex = -1;
			return;
		}
		else {
			this._menuitemonmouseenter = obj;
			this._previousitem = this._menuitemindex = obj.index;
		}

		this._menuitemindex = obj.index;

		if (!this._key_action) {
			if (!this._is_menu_click) {
				this._is_menu_click = true;
			}
			else {
				obj.selected = false;
				this._item_focus(obj, false);
				this._is_menu_click = false;
				return;
			}
		}

		if (this._is_menu_click) {
			obj.selected = true;
			if (obj.itemexpand) {
				this._showPopup(obj);
			}
			else {
				return;
			}
			this._item_focus(obj, true);
		}
	};

	_pMenu.on_notify_menuitem_onrbuttondown = function (obj, e) {
		if (!this._is_alive) {
			return;
		}
		if (this.visible && this._isEnable() && this.enableevent) {
			this._on_focus(true);
		}
	};

	_pMenu.on_fire_onitemclick = function (obj, id, itemid, itemuserdata, index, level) {
		if (this.onmenuclick && this.onmenuclick._has_handlers) {
			var evt = new nexacro.MenuClickEventInfo(obj, id, itemid, itemuserdata, index, level);
			this.onmenuclick._fireEvent(this, evt);
		}
	};

	_pMenu.cancelPopup = function () {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			if (popupmenu.isPopup()) {
				popupmenu.cancelPopup();
			}
			if (this._is_menu_click) {
				this._is_menu_click = false;
			}
		}
		return true;
	};

	_pMenu.isPopup = function () {
		return this._isPopupVisible();
	};

	_pMenu.trackPopup = function (index, x, y, bcapture) {
		index = parseInt(index);
		this._track_capture = bcapture = (bcapture === false || bcapture == "false") ? false : true;
		var align = this.on_find_CurrentStyle_popupitemalign();
		var items = this._items;
		if (items && items[index] && !this._is_menu_click) {
			this._is_menu_click = true;
			this._showPopup(items[index], x, y, bcapture);
			this._menuitemindex = items[index].index;
			return true;
		}
		return false;
	};

	_pMenu._calcMenuItem = function () {
		var ds = this._innerdataset;
		var left = 0;
		var index = 0;
		var len = ds.getRowCount();
		var text, id, level, padding, width, border;

		var _buttonRect = this._buttonRect;

		if (_buttonRect[0]) {
			for (var i = 0; i < this._scrollIndex; i++) {
				left -= _buttonRect[i].width;
			}

			if (this._is_spin_visible) {
				if (this._scrollIndex == 0) {
					left = this._spin_width;
				}
			}
		}

		var j = 0;
		var spin_flag = false;
		this._item_total_width = 0;
		for (var i = 0; i < len; i++) {
			id = ds.getColumn(i, this.idcolumn);
			level = ds.getColumn(i, this.levelcolumn);

			if (level == 0) {
				text = ds.getColumn(i, this.captioncolumn);

				size = this._getTextSize(text);

				border = this.on_find_CurrentStyle_itemborder(this._pseudo);
				padding = this.on_find_CurrentStyle_itempadding(this._pseudo);

				width = Math.ceil(size[0]) + (border ? border._left_width + border._right_width : 0) + (padding ? padding.left + padding.right : 0);

				if (this._is_spin_visible && (left + width > this._client_width - this._spin_width)) {
					left = this._client_width;
				}

				var rect = {
					left : 0, 
					top : 0, 
					right : 0, 
					bottom : 0, 
					width : 0
				};
				rect.left = left;
				rect.top = 0;
				rect.right = left + width;
				rect.bottom = this._client_height;
				rect.width = width;

				left += width;

				this._item_total_width += width;

				if (!spin_flag && this._is_spin_visible && this._scrollIndex > 0 && left >= 0) {
					spin_flag = true;
					left += this._spin_width;
				}

				_buttonRect[j] = rect;

				j++;
			}
		}
	};

	_pMenu._calcSpinButton = function () {
		if (!this.spindownbutton && !this.spinupbutton) {
			return;
		}

		var _buttonRect = this._buttonRect;
		var len = _buttonRect.length;

		if (len > 0 && (this._item_total_width > this._client_width) && this._spin_width > 0) {
			this._is_spin_visible = true;

			this.spinupbutton.set_visible(true);
			this.spinupbutton.move(0, 0, this._spin_width, this._client_height);

			var left = this._spin_width;
			var client_width = this._client_width;

			this.spindownbutton.set_visible(true);
			this.spindownbutton.move(client_width - left, 0, left, this._client_height);

			this._scrollIndex = this._scrollIndex_tmp;

			var scroll_item_width = 0;
			for (var i = this._scrollIndex; i < len; i++) {
				if (_buttonRect[i].right > (this._client_width - (this._spin_width * 2))) {
					break;
				}

				scroll_item_width += _buttonRect[i].width;
			}

			if (i == len) {
				for (var j = this._scrollIndex - 1; j >= 0; j--) {
					scroll_item_width += _buttonRect[j].width;
					if (scroll_item_width > (this._client_width - (this._spin_width * 2))) {
						break;
					}

					--this._scrollIndex;
				}
				this._scrollIndex_tmp = this._scrollIndex;
			}
		}
		else {
			this._scrollIndex = 0;
			this._is_spin_visible = false;
			this.spinupbutton.set_visible(false);
			this.spindownbutton.set_visible(false);
		}
	};

	_pMenu._updateMenuItemPosition = function () {
		var _buttonRect = this._buttonRect;
		var _items = this._items;
		var len = _items ? _items.length : 0;
		for (var i = 0; i < len; i++) {
			_items[i].move(_buttonRect[i].left, _buttonRect[i].top, _buttonRect[i].width, _buttonRect[i].bottom);
		}
	};

	_pMenu._createMenu = function (init) {
		var control = this.getElement();
		if (control) {
			this._destroySpinButton();
			this._createSpinbutton();

			this._deleteMenu();
			var ds = this._innerdataset;

			if (ds && this.captioncolumn && this.captioncolumn && this.idcolumn) {
				var index = 0;
				var len = ds.getRowCount();
				var text, enable, hotkey, id, level, userdata, size, padding, width, border;
				var item;
				var _buttonRect = this._buttonRect;

				this._calcMenuItem();
				this._calcSpinButton();
				this._calcMenuItem();

				var j = 0;
				for (var i = 0; i < len; i++) {
					hotkey = ds.getColumn(i, this.hotkeycolumn);
					id = ds.getColumn(i, this.idcolumn);
					level = ds.getColumn(i, this.levelcolumn);

					if (hotkey && (i == len - 1 || level >= ds.getColumn(i + 1, this.levelcolumn))) {
						this._set_hotkey(id, hotkey);
					}

					if (level == 0) {
						text = ds.getColumn(i, this.captioncolumn);
						enable = ds.getColumn(i, this.enablecolumn);
						userdata = ds.getColumn(i, this.userdatacolumn);




						var item = new nexacro.MenuItem("item", "absolute", _buttonRect[j].left, 0, _buttonRect[j].width, _buttonRect[j].bottom, null, null, this);
						item._is_subcontrol = true;

						item.userdata = userdata;
						item._bindindex = i;
						item.index = index++;
						item.datarow = i;
						item.id = id ? id : "";
						item.level = level;

						if (text) {
							item.set_text(text);
						}

						item._setEventHandler("onlbuttondown", this.on_notify_menuitem_onlbuttondown, this);
						item._setEventHandler("onrbuttondown", this.on_notify_menuitem_onrbuttondown, this);
						item._setEventHandler("onlbuttonup", this.on_notify_menuitem_onclick, this);

						if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
							item._setEventHandler("onmouseenter", this.on_notify_menuitem_onmouseenter, this);
							item._setEventHandler("onmouseleave", this.on_notify_menuitem_onmouseleave, this);
						}

						if (i == ds.getRowCount() - 1) {
							item.itemexpand = false;
						}
						else {
							level = ds.getColumn(i + 1, this.levelcolumn);
							if (level <= this.level) {
								item.itemexpand = false;
							}
						}

						item.set_enable(enable == false || enable == "false" ? false : true);
						item.createComponent();

						this._items.push(item);
						item = null;
						j++;
					}
				}

				this._focus_obj = this._clickitemindex > -1 ? this._items[this._clickitemindex] : null;
			}
		}
	};

	_pMenu._deleteMenu = function () {
		var list = this._hot_key_list;
		var len = list.length;
		var _form = this._getMainForm();

		for (var i = 0; i < len; i++) {
			nexacro._unregisterHotkeyComp(_form, this, list[i].key);
		}

		this._hot_key_list = [];

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].destroy();
				items[i] = null;
			}

			this._items = [];
		}
	};

	_pMenu._createSpinbutton = function () {
		if (!this.spinupbutton) {
			this.spinupbutton = new nexacro.MenuSpinButtonCtrl("spinupbutton", this.position, 0, 0, 0, 0, null, null, this);
			this.spinupbutton.createComponent();
			this.spinupbutton.set_visible(false);
			this.spinupbutton._setEventHandler("onclick", this.on_notify_spinup_onclick, this);
			this.spinupbutton.on_created();
			this._is_spin_visible = false;
		}
		if (!this.spindownbutton) {
			this.spindownbutton = new nexacro.MenuSpinButtonCtrl("spindownbutton", this.position, 0, 0, 0, 0, null, null, this);
			this.spindownbutton.createComponent();
			this.spindownbutton.set_visible(false);
			this.spindownbutton._setEventHandler("onclick", this.on_notify_spindown_onclick, this);
			this.spindownbutton.on_created();
			this._is_spin_visible = false;
		}
	};

	_pMenu._destroySpinButton = function () {
		this._scrollIndex_tmp = 0;

		if (this.spinupbutton) {
			this.spinupbutton.destroy();
			this.spinupbutton = null;
		}
		if (this.spindownbutton) {
			this.spindownbutton.destroy();
			this.spindownbutton = null;
		}
	};

	_pMenu._getTextSize = function (text) {
		var font = this.on_find_CurrentStyle_font(this._pseudo) || nexacro.Component._default_font;
		var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
		return nexacro._getTextSize2(letterspace, text, font, null, null, null, this._rtldirection);
	};

	_pMenu._getViewItemQty = function (pThis, _item_length) {
		if (!pThis) {
			return;
		}

		var _val = 0;

		var _item_size = 0;
		var _view_size = this.width - this._spin_width - this._spin_width;

		for (i = this._scrollIndex; i < _item_length; i++) {
			_item_size += this._buttonRect[i].width;
			_val = i - pThis._scrollIndex;

			if (_item_size > _view_size) {
				break;
			}
		}
		_view_size = null;
		_item_size = null;

		return _val;
	};

	_pMenu._loaded_expImage = function (imgurl, w, h) {
		this._expImage_width = w;
		this._expImage_height = h;
	};

	_pMenu._loaded_chkImage = function (imgurl, w, h) {
		this._chkImage_width = w;
		this._chkImage_height = h;
	};

	_pMenu._load_image = function (image, flag) {
		var control_elem = this._control_element;
		if (control_elem) {
			var val = (image && image != "") ? image._value : "";
			if (val) {
				val = nexacro._getURIValue(val);
				val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());

				var size;
				if (flag) {
					size = nexacro._getImageSize(val, this._loaded_expImage, this, undefined, (image ? image._value : ""));
					if (size) {
						this._expImage_width = size.width;
						this._expImage_height = size.height;
					}
				}
				else {
					size = nexacro._getImageSize(val, this._loaded_chkImage, this, undefined, (image ? image._value : ""));
					if (size) {
						this._chkImage_width = size.width;
						this._chkImage_height = size.height;
					}
				}
			}
		}
	};

	_pMenu._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_arrow = this._want_arrow;
		this._want_arrow = nexacro._enableaccessibility;
		return {
			want_tab : false, 
			want_return : true, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : want_arrow
		};
	};

	_pMenu._showPopup = function (obj, x, y, bcapture) {
		if (this._getPopupType() == "none") {
			return;
		}

		if (this._innerdataset && this.levelcolumn && this.captioncolumn && this.idcolumn && obj && obj.itemexpand == true) {
			var popupmenu = this._popupmenu;

			this._track_capture = bcapture = (bcapture === false || bcapture == "false") ? false : true;

			if (popupmenu == null) {
				popupmenu = this._popupmenu = new nexacro.PopupMenuCtrl("popupmenu", "absolute", 0, 0, 0, 0, null, null, this);
				popupmenu._is_subcontrol = true;

				popupmenu._scrollIndex = 0;
				popupmenu._scrollIndex_tmp = 0;
				popupmenu.level = 1;
				popupmenu.index = obj.index;
				popupmenu.datarow = obj.datarow + 1;
				popupmenu.selfpopup = false;

				popupmenu.setInnerDataset(this._innerdataset);

				popupmenu.set_captioncolumn(this.captioncolumn);
				popupmenu.set_iconcolumn(this.iconcolumn);
				popupmenu.set_checkboxcolumn(this.checkboxcolumn);
				popupmenu.set_hotkeycolumn(this.hotkeycolumn);
				popupmenu.set_idcolumn(this.idcolumn);
				popupmenu.set_levelcolumn(this.levelcolumn);
				popupmenu.set_userdatacolumn(this.userdatacolumn);

				popupmenu.set_enablecolumn(this.enablecolumn);

				popupmenu.style.set_checkboximage(this.currentstyle.checkboximage);
				popupmenu.style.set_expandimage(this.currentstyle.expandimage);

				popupmenu._track_capture = bcapture;
				popupmenu.createComponent();
				popupmenu._setRtlDirection(this._rtldirection);

				popupmenu._setEventHandler("oncloseup", this.on_notify_onclosepopup, this);
				popupmenu.style.popuptype = this.style.popuptype;

				popupmenu._trackPopup(obj, "vertical", x, y);
			}
			else {
				popupmenu.datarow = obj.datarow + 1;
				popupmenu.style.popuptype = this.style.popuptype;
				popupmenu._track_capture = bcapture;

				popupmenu._trackPopup(obj, "vertical", x, y);
			}

			if (popupmenu._is_popup()) {
				var _window = this._getWindow();
				if (_window) {
					if (this._track_capture) {
						_window._setCaptureLock(this, true, false);
					}
					else {
						_window._releaseCaptureLock();
					}
				}
			}

			this._close_popup = false;
		}
	};

	_pMenu._isPopupVisible = function () {
		var popupmenu = this._popupmenu;
		return popupmenu ? popupmenu._is_popup() : false;
	};

	_pMenu._callbackFromDataset = function (obj, e) {
		this._createMenu();
	};

	_pMenu._closePopup = function () {
		var popup = this._popupmenu;

		if (this._is_menu_click) {
			this._is_menu_click = false;
		}

		if (popup) {
			popup.cancelPopup();

			var _window = this._getWindow();
			if (_window && this._track_capture) {
				_window._releaseCaptureLock(this);
			}
		}

		var items = this._items;
		if (items && items[this._clickitemindex]) {
			items[this._clickitemindex].selected = false;
			this._item_focus(items[this._clickitemindex], false);
		}

		this._menuitemindex = 0;
		this._popupitemindex = -1;

		if (!this._cancelPopup && this._cancelPopup !== undefined) {
			if (items && items[this._clickitemindex]) {
				items[this._clickitemindex].selected = false;
			}
		}
		else if (this._cancelPopup === undefined) {
			this._is_menu_click = false;
		}
		this._menuitemonmouseenter = items[this._menuitemindex];
	};

	_pMenu._process_mousemove = function (obj, e) {
		if (!(obj instanceof nexacro.Menu) && !(obj instanceof nexacro.PopupMenu) && !(obj instanceof nexacro.PopupMenuItem)) {
			this.on_notify_menuitem_onmouseenter(obj, e);
		}
	};

	_pMenu._killfocus_item = function () {
		var _is_mobile_click = (nexacro.OS == "Android" || nexacro.OS == "iOS" || nexacro.OS == "Windows Phone") && !application.enabletouchevent;

		var items = this._items;
		if (items && !this._isPopupVisible()) {
			var _item = items[this._menuitemindex] ? items[this._menuitemindex] : null;
			if (!_is_mobile_click || (_is_mobile_click && _item && !_item.selected)) {
				this._is_menu_click = false;
				this._clickitemindex = -1;
				if (_item) {
					_item._killfocus_item();
				}
				this._menuitemindex = 0;
			}
			_item = null;
		}
	};

	_pMenu._on_killfocus = function (new_focus, new_ref_focus) {
		if (!this._is_alive || application._is_on_alert) {
			return;
		}

		if (!(this && this.parent && (this.parent instanceof nexacro.PopupMenu || this.parent instanceof nexacro.PopupMenuCtrl))) {
			var tmp = this._cancelPopup;
			this._cancelPopup = true;
			this._closePopup();
			this._cancelPopup = tmp;
		}
		var items = this._items;
		if (items) {
			this._item_focus(items[this._previousitem], false);
			this._item_focus(items[this._clickitemindex], false);

			if (items[this._clickitemindex]) {
				items[this._clickitemindex]._stat_change("notselect", "normal");
			}
		}
		items = null;
		this._clickitemindex = -1;
		this._focus_obj = null;
	};

	_pMenu.on_notify_onclosepopup = function (obj, e) {
		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
		}
		this._closePopup();
	};

	_pMenu.on_notify_spinup_onclick = function (obj, e) {
		this._closePopup();
		this._spinup();
	};

	_pMenu.on_notify_spindown_onclick = function (obj, e) {
		this._closePopup();
		this._spindown();
	};

	_pMenu._spinup = function () {
		if (this._scrollIndex > 0) {
			this._scrollIndex--;

			this._scrollIndex_tmp = this._scrollIndex;

			this._calcMenuItem();
			this._updateMenuItemPosition();
		}
	};

	_pMenu._spindown = function () {
		var _buttonRect = this._buttonRect;
		var len = _buttonRect ? _buttonRect.length : 0;
		if (len == 0) {
			return;
		}

		if (_buttonRect[len - 1].right > this._client_width) {
			this._scrollIndex++;
			this._scrollIndex_tmp = this._scrollIndex;

			this._calcMenuItem();
			this._updateMenuItemPosition();
		}
	};

	_pMenu._processHotkey = function (keycode, altKey, ctrlKey, shiftKey, obj) {
		var autohotkey = this.on_find_CurrentStyle_autohotkey(this.pseudo);
		if (autohotkey && nexacro._toBoolean(autohotkey._value)) {
			var list = this._hot_key_list;
			var len = list.length;
			var key = null;
			var modifykey = null;
			for (var i = 0; i < len; i++) {
				key = list[i].key;
				if (key._keycode == keycode) {
					modifykey = key._modifierkey;
					if (altKey == ((modifykey & 0x02) == 0x02) && ctrlKey == ((modifykey & 0x01) == 0x01) && shiftKey == ((modifykey & 0x04) == 0x04)) {
						this.on_fire_onitemclick(this, "onmenuclick", list[i].id, "", list[i].index, list.level);
						return;
					}
				}
			}
		}

		nexacro.Component.prototype._processHotkey.call(this, keycode, altKey, ctrlKey, shiftKey, obj);
	};

	_pMenu._set_hotkey = function (id, hotkey) {
		var hkey = this.hotkey;
		var _hkey = this._hotkey;

		this._hotkey = null;

		this.set_hotkey(hotkey);

		var item_hk = this._hotkey;

		this.hotkey = hkey ? hkey : null;
		this._hotkey = _hkey ? _hkey : null;

		var list = {
			id : id, 
			key : item_hk
		};
		this._hot_key_list.push(list);
	};

	_pMenu._item_focus = function (obj, bflag, b_mouseenter) {
		if (obj) {
			if (nexacro._enableaccessibility && !b_mouseenter) {
				if (bflag) {
					if (obj instanceof nexacro.PopupMenuItem) {
						obj._on_focus(false);
					}
					else {
						obj._on_focus(true);
					}
				}
				else {
					var _window = this._getWindow();
					if (_window) {
						_window._removeFromCurrentFocusPath(obj, true);
					}
				}
			}

			if (obj.on_apply_mouseover) {
				var _items = obj.parent ? obj.parent._items : null;
				var _items_len = _items ? _items.length : -1;

				for (var i = 0; i < _items_len; i++) {
					_items[i]._control_pseudo = "";
					_items[i].selected = false;
					_items[i].on_apply_custom_pseudo("normal");
					_items[i].on_apply_mouseover(false);
				}
				_items = null;

				obj.selected = this._is_menu_click ? bflag : obj.selected;
				obj.on_apply_mouseover(bflag);
			}
		}
	};

	_pMenu._item_find = function (obj) {
		if (obj._popupmenu == null || obj._popupmenu.visible == false) {
			return obj._items;
		}
		return obj._popupmenu._items;
	};

	_pMenu._popupmenu_visible = function (obj) {
		if (obj._popupmenu == null || obj._popupmenu.visible == false) {
			return false;
		}
		return true;
	};

	_pMenu._popupmenu_find = function (obj) {
		var pThis = obj;
		while (pThis) {
			if (pThis._popupmenu === null || pThis._popupmenu.visible == false) {
				break;
			}
			var pThis = pThis._popupmenu;
		}
		return pThis;
	};

	_pMenu._popupmenuitem_extend = function (obj) {
		return obj.itemexpand;
	};

	_pMenu._popupmenuitem_find = function (obj) {
		var pThis = obj._overedobj;
		while (pThis) {
			if (pThis._overedobj === null) {
				break;
			}
			var pThis = pThis._overedobj;
		}
		return pThis;
	};

	_pMenu._find_lastFocused = function () {
		var form = this._getForm();
		if (!form) {
			return null;
		}

		var last_focus = form._last_focused;
		while (last_focus && last_focus._is_form) {
			var child_last_focus = last_focus._getLastFocused();
			if (!child_last_focus) {
				break;
			}
			last_focus = child_last_focus;
		}

		return last_focus;
	};

	delete _pMenu;

	nexacro.MenuSpinButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pMenuSpinButtonCtrl = nexacro.MenuSpinButtonCtrl.prototype = nexacro._createPrototype(nexacro.ImageButtonCtrl, nexacro.MenuSpinButtonCtrl);

	_pMenuSpinButtonCtrl._processHotkey = function (keycode, altKey, ctrlKey, shiftKey) {
		var menu = this.parent;
		if (menu) {
			return menu._processHotkey(keycode, altKey, ctrlKey, shiftKey);
		}
	};

	delete _pMenuSpinButtonCtrl;
	_pMenuSpinButtonCtrl = null;

	nexacro.MenuCtrl = function (id, left, top, right, bottom, parent) {
		nexacro.Menu.call(this, id, left, top, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pMenuCtrl = nexacro.MenuCtrl.prototype = nexacro._createPrototype(nexacro.Menu, nexacro.MenuCtrl);

	_pMenuCtrl._type_name = "MenuControl";

	nexacro._setForControlStyleFinder(_pMenuCtrl);

	delete _pMenuCtrl;
}
;
//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.PopupMenuItem) {
	nexacro.PopupMenuItem = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.MenuItem.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.chkimgctrl = null;
		this.imgctrl = null;
		this.expimgelem = null;
		this.gap = 5;

		this.chkwidth = 0;
		this.textwidth = 0;
		this.hotkeywidth = 0;
		this.expwidth = 0;
		this.expheight = 0;
		this.index = 0;
		this.datarow = 0;
		this.itemexpand = true;

		this.value = false;
		this.expandimage = "";
		this.checkimage = "";
		this.id = "";
		this.enable = true;

		this.icon = "";
		this.userdata = null;
		this.buttonalign = "";

		this._text_elem = null;
		this._hotkey_txtelem = null;
		this._hotkey_string = "";
		this._accessibility_role = "menuitem";
	};

	var _pPopupMenuItem = nexacro._createPrototype(nexacro.MenuItem, nexacro.PopupMenuItem);
	nexacro.PopupMenuItem.prototype = _pPopupMenuItem;

	_pPopupMenuItem._type_name = "PopupMenuItem";


	_pPopupMenuItem.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itemborder(pseudo);
	};
	_pPopupMenuItem.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itembackground(pseudo);
	};
	_pPopupMenuItem.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itembordertype(pseudo);
	};
	_pPopupMenuItem.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itemgradation(pseudo);
	};
	_pPopupMenuItem.on_find_CurrentStyle_padding = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itempadding(pseudo);
	};
	_pPopupMenuItem.on_find_CurrentStyle_accessibility = function (pseudo) {
		return this.parent.on_find_CurrentStyle_itemaccessibility(pseudo);
	};

	_pPopupMenuItem.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pPopupMenuItem.on_apply_style_color = function (v) {
		if (this._text_elem) {
			this._text_elem.setElementColor(v);
		}
		if (this._hotkey_txtelem) {
			this._hotkey_txtelem.setElementColor(v);
		}
	};

	_pPopupMenuItem.on_apply_style_font = function (v) {
		if (this._text_elem) {
			this._text_elem.setElementFont(v);
		}
		if (this._hotkey_txtelem) {
			this._hotkey_txtelem.setElementFont(v);
		}
	};

	_pPopupMenuItem.on_apply_style_letterspace = function (v) {
		if (this._text_elem) {
			this._text_elem.setElementLetterSpace(v);
		}
		if (this._hotkey_txtelem) {
			this._hotkey_txtelem.setElementLetterSpace(v);
		}
	};

	_pPopupMenuItem.on_apply_style_accessibility = function (accessibility) {
		var control_elem = this._control_element;
		if (control_elem && accessibility) {
			control_elem.setAccessibility(accessibility);

			this._updateAccessibilityLabel(this);
		}
	};

	_pPopupMenuItem._getWindowPosition = function () {
		return nexacro.Component.prototype._getWindowPosition.call(this);
	};

	_pPopupMenuItem.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var curstyle = this.currentstyle;

			if (this.checkimage) {
				var chkimgctrl = this.chkimgctrl = new nexacro.ImageViewerCtrl("chkimg", "absolute", 0, 0, 0, 0, null, null, this);
				chkimgctrl.style.set_rtlimagemirroring("true");
				this.on_apply_checkimage();
				chkimgctrl.createComponent();
			}
			else if (this.icon) {
				this._load_image(this.icon, "icon");

				var imgctrl = this.imgctrl = new nexacro.ImageViewerCtrl("iconimg", "absolute", 0, 0, 0, 0, null, null, this);
				this.on_apply_icon();
				imgctrl.createComponent();
			}

			if (this.text) {
				var txtelem = this._text_elem = new nexacro.TextBoxElement(control_elem);
				txtelem.setElementFont(curstyle.font);
				txtelem.setElementColor(curstyle.color);
				txtelem.setElementLetterSpace(curstyle.letterspace);
			}

			if (this._hotkey_string) {
				var hotkey_txt_elem = this._hotkey_txtelem = new nexacro.TextBoxElement(control_elem);
				hotkey_txt_elem.setElementFont(curstyle.font);
				hotkey_txt_elem.setElementColor(curstyle.color);
				hotkey_txt_elem.setElementLetterSpace(curstyle.letterspace);
			}

			var exp_img_url = this.expandimage;
			if (exp_img_url) {
				this._load_image(exp_img_url._value);
			}
		}
	};

	_pPopupMenuItem.on_created_contents = function () {
		var txtelem = this._text_elem;
		var hotkey_txtelem = this._hotkey_txtelem;
		var chkimgctrl = this.chkimgctrl;
		var imgctrl = this.imgctrl;
		var expimgelem = this.expimgelem;

		if (chkimgctrl) {
			chkimgctrl.on_created();
		}

		if (imgctrl) {
			imgctrl.on_created();
		}

		if (expimgelem) {
			expimgelem.create();
		}

		if (hotkey_txtelem) {
			this.on_apply_hotkeytext();
			hotkey_txtelem.create();
		}

		if (txtelem) {
			txtelem.create();
		}
	};

	_pPopupMenuItem.on_destroy_contents = function () {
		if (this.imgctrl) {
			this.imgctrl.destroy();
			this.imgctrl = null;
		}

		if (this.chkimgctrl) {
			this.chkimgctrl.destroy();
			this.chkimgctrl = null;
		}
		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}

		if (this._hotkey_txtelem) {
			this._hotkey_txtelem.destroy();
			this._hotkey_txtelem = null;
		}

		if (this.expimgelem) {
			this.expimgelem.destroy();
			this.expimgelem = null;
		}
	};

	_pPopupMenuItem.on_change_containerRect = function (width, height) {
		var txtelem = this._text_elem, hotkey_txtelem = this._hotkey_txtelem;
		var text_height = 0, parent_height = 0;

		if (this.parent && this.parent.text_height) {
			text_height = this.parent.text_height;
		}

		if (this.parent) {
			parent_height = this.parent.on_find_CurrentStyle_itemheight();
		}
	};


	_pPopupMenuItem._setValue = function (v) {
		if (this.value != v) {
			this.value = v;
			this.on_apply_value();
		}
	};

	_pPopupMenuItem.on_apply_value = function () {
		var checkimage = this.parent.on_find_CurrentStyle_checkboximage(this._pseudo);
		this._setCheckimage(checkimage);
	};

	_pPopupMenuItem._setIcon = function (v) {
		if (this.icon != v) {
			this.icon = v;
			this.on_apply_icon();
		}
	};

	_pPopupMenuItem.on_apply_icon = function () {
		if (this.imgctrl) {
			this.imgctrl.set_image(this.icon);
		}
	};

	_pPopupMenuItem._setExpandimage = function (v) {
		if (this.expandimage != v) {
			this.expandimage = v;
			this.on_apply_expandimage();
		}
	};

	_pPopupMenuItem.on_apply_expandimage = function () {
		var elem = this.expimgelem;
		var img_url = this.expandimage;

		if (elem) {
			if (this.itemexpand) {
				if (img_url != "") {
					this._load_image(img_url);
				}
				else {
					elem = new nexacro.TextBoxElement(control_elem);
					this.expimgelem = elem;
					elem.setElementText(">");
					elem.setElementFont(this.currentstyle.font);

					if (this._is_created) {
						elem.create();
					}
				}
			}
		}
	};

	_pPopupMenuItem._setCheckimage = function (v) {
		if (this.checkimage != v) {
			this.checkimage = v;
			this.on_apply_checkimage();
		}
	};

	_pPopupMenuItem.on_apply_checkimage = function () {
		if (this.chkimgctrl) {
			if (this._isChecked() == true) {
				this.chkimgctrl.set_image(this.checkimage);
			}
			else {
				this.chkimgctrl.set_image("");
			}
		}
	};

	_pPopupMenuItem._setText = function (v) {
		if (v != this.text) {
			this.text = v;
			this.on_apply_text();
		}
	};

	_pPopupMenuItem.on_apply_text = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var txtelem = this._text_elem;
			if (!txtelem) {
				txtelem = new nexacro.TextBoxElement(control_elem);
				this._text_elem = txtelem;
				txtelem.setElementSize(this._width, this._client_height);
				txtelem.setElementColor(this.currentstyle.color);
				txtelem.setElementFont(this.currentstyle.font);
				txtelem.setElementLetterSpace(this.curstyle.letterspace);

				if (this._is_created) {
					txtelem.create();
				}
			}

			if (this.text || this.text === "") {
				txtelem.setElementText(this.text);
			}
		}
	};

	_pPopupMenuItem._setHotkey = function (v) {
		if (v != this._hotkey_string) {
			this._hotkey_string = v;
			this.on_apply_hotkeytext();
		}
	};

	_pPopupMenuItem.on_apply_hotkeytext = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var elem = this._hotkey_txtelem;

			if (!elem) {
				elem = new nexacro.TextBoxElement(control_elem);
				this._hotkey_txtelem = elem;
				elem.setElementSize(this._width, this._client_height);
				elem.setElementColor(this.currentstyle.color);
				elem.setElementFont(this.currentstyle.font);
				elem.setElementLetterSpace(this.currentstyle.letterspace);

				if (this._is_created) {
					elem.create();
				}
			}

			if (this._hotkey_string || this._hotkey_string === "") {
				elem.setElementText(this._hotkey_string);
			}
		}
	};

	_pPopupMenuItem._setUserdata = function (v) {
		if (v != this.userdata) {
			this.userdata = v;
		}
	};

	_pPopupMenuItem.on_apply_mouseover = function (isovered) {
		if (isovered) {
			this._stat_change("normal", "mouseover");
		}
		else {
			this._stat_change("normal", "normal");
		}
	};

	_pPopupMenuItem.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pPopupMenuItem.on_apply_prop_rtldirection = function () {
		var control_element = this.getElement();
		var _rtldirection = this._rtldirection;
		var chk_img_ctrl = this.chkimgctrl;
		var img_ctrl = this.imgctrl;
		var exp_img_elem = this.expimgelem;

		if (control_element) {
			control_element.setElementRtlDirection(_rtldirection);

			if (chk_img_ctrl) {
				chk_img_ctrl._setRtlDirection(_rtldirection);
			}
			if (img_ctrl) {
				img_ctrl._setRtlDirection(_rtldirection);
			}
			if (exp_img_elem) {
				exp_img_elem.setElementImageMirror(null, true);
			}
		}
	};


	_pPopupMenuItem.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		var _is_mobile_click = (nexacro.OS == "Android" || nexacro.OS == "iOS" || nexacro.OS == "Windows Phone") && !application.enabletouchevent;

		var rootComp = this._getRootComponent(this);
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var popupmenuitem = rootComp._menuitemonmouseenter;

			if (_is_mobile_click && rootComp instanceof nexacro.Menu) {
				popupmenuitem = this.parent ? this.parent._menuitemonmouseenter : popupmenuitem;
				if (!popupmenuitem.itemexpand) {
					rootComp.on_fire_onitemclick(popupmenuitem, "onmenuclick", popupmenuitem.id, popupmenuitem.userdata, popupmenuitem.index, popupmenuitem.parent.level);
				}
			}

			if (_is_mobile_click || ((popupmenuitem == from_refer_comp) && (popupmenuitem._pseudo == "mouseover"))) {
				var evt = new nexacro.MouseEventInfo(this, "onlbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
				return this.onlbuttonup._fireSysEvent(this, evt);
			}
		}
		return false;
	};

	_pPopupMenuItem.on_mouseleave_basic_action = function (is_subcontrol_bubble) {
	};


	_pPopupMenuItem._isChecked = function () {
		var v = this.value;
		if (!!v || v.toString().toLowerCase() == "true") {
			return true;
		}

		return false;
	};

	_pPopupMenuItem._verticalAlign = function (valign) {
		if (this.chkimgctrl) {
			this.chkimgctrl.set_imagealign("center " + valign.toString());
		}
	};

	_pPopupMenuItem._load_image = function (val) {
		var control_elem = this._control_element;
		if (control_elem) {
			if (val) {
				var expimgelem = this.expimgelem;
				if (!expimgelem) {
					expimgelem = new nexacro.ImageElement(control_elem);
					this.expimgelem = expimgelem;
					expimgelem.setElementImageUrl(val);
					expimgelem.setElementImageMirror(null, true);
					if (this._is_created) {
						expimgelem.create();
					}
				}
				else {
					expimgelem.setElementImageUrl(val);
				}
			}
		}
	};

	_pPopupMenuItem._updateElementPositions = function (txtwidth, hotkeywidth, itemheight, defaultgap) {
		if (!this._is_created_contents) {
			return;
		}

		var txtelem = this._text_elem;

		if (txtelem) {
			var client_width = this._client_width;
			var adjust_height = this._adjust_height;
			var client_height = this._client_height;
			var chkwidth = this.chkwidth, expwidth = this.expwidth, expheight = this.expheight, iconimgwidth = this.iconimgwidth;

			var halign = "left", valign = "middle";
			var img_halign = "lefttext", img_valign = "middle";

			var textpos_x, textpos_y, hottextpos_x, expimgpos_x;
			var _po = 0, _height = itemheight;

			var imgctrl = this.chkimgctrl;
			var expimgelem = this.expimgelem, hotkeyelem = this._hotkey_txtelem;

			textpos_x = chkwidth == 0 ? iconimgwidth : chkwidth;
			textpos_y = 0;
			hottextpos_x = chkwidth + iconimgwidth + txtwidth;
			expimgpos_x = hottextpos_x + hotkeywidth;

			if (imgctrl) {
				imgctrl.move(0, 0, chkwidth, client_height, null, null);
			}

			if (this.imgctrl) {
				this.imgctrl.move(0, 0, iconimgwidth, client_height, null, null);
			}

			if (this.itemexpand && expimgelem) {
				var imgpos_x = this._convertLeftForRtlLayout((client_width - expwidth), expwidth);
				expimgelem.setElementPosition(imgpos_x, ((client_height - expheight) / 2) | 0, true);
				expimgelem.setElementSize(expwidth, expheight);
				if (hotkeyelem) {
					hotkeyelem.setElementVisible(false);
				}
			}
			else if (hotkeyelem) {
				hotkeyelem.setElementVisible(true);
				hotkeyelem.setElementPosition(defaultgap, 0, true);
				hotkeyelem.setElementSize(client_width, client_height);
				hotkeyelem.setElementAlignXY(halign, valign);
				hotkeyelem.setElementPaddingXY(hottextpos_x, textpos_y, 0, 0);
			}

			if (client_height <= itemheight) {
				txtelem.setElementPosition(0, 0, true);
			}
			txtelem.setElementSize(client_width, client_height);

			txtelem.setElementAlignXY(halign, valign);
			txtelem.setElementPaddingXY(textpos_x, textpos_y, 0, 0);
		}
	};

	_pPopupMenuItem._getWidth = function () {
		var width = this.chkwidth;
		if (this.textwidth > 0) {
			width += (this.textwidth + this.gap);
		}

		if (this.hotkeywidth > 0 && this.expwidth > 0) {
			var maxWidth = Math.max(this.hotkeywidth, this.expwidth);
			width += (maxWidth + this.gap);
		}
		else {
			if (this.hotkeywidth > 0) {
				width += (this.hotkeywidth + this.gap);
			}

			width += this.expwidth;
		}
		return width;
	};

	_pPopupMenuItem._updateAccessibilityLabel = function (item) {
		var rootComp = this._getRootComponent(this);
		var dataLen = rootComp._innerdataset.getRowCount();
		item._setAccessibilityInfoIndex(item.datarow + 1);
		item._setAccessibilityInfoCount(dataLen);
		item._setAccessibilityFlagHasPopup(item.itemexpand ? true : false);
	};

	delete _pPopupMenuItem;
}

if (!nexacro.PopupMenu_Style) {
	nexacro.PopupMenu_Style = function (target, idx) {
		nexacro.Style.call(this, target, idx);
		if (target) {
			this._target = target;
		}

		this.itemalign = null;
		this.itemheight = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;
		this.checkboximage = null;
		this.expandimage = null;
		this.itemaccessibility = null;
		this.popuptype = null;
		this.buttonsize = null;
		this.buttonalign = null;
		this.autohotkey = null;
	};

	var _pPopupMenuStyle = nexacro.PopupMenu_Style.prototype = nexacro._createPrototype(nexacro.Style, nexacro.PopupMenu_Style);

	eval(nexacro._createAlignAttributeEvalStr("_pPopupMenuStyle", "itemalign"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "itemheight"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pPopupMenuStyle", "itembackground"));
	eval(nexacro._createBorderAttributeEvalStr("_pPopupMenuStyle", "itemborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pPopupMenuStyle", "itembordertype"));
	eval(nexacro._createGradationAttributeEvalStr("_pPopupMenuStyle", "itemgradation"));
	eval(nexacro._createPaddingAttributeEvalStr("_pPopupMenuStyle", "itempadding"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "checkboximage"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "expandimage"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pPopupMenuStyle", "itemaccessibility"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "popuptype"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "buttonsize"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "buttonalign"));
	eval(nexacro._createValueAttributeEvalStr("_pPopupMenuStyle", "autohotkey"));

	_pPopupMenuStyle.__custom_emptyObject = function () {
		this.itemalign = null;
		this.itemheight = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;
		this.checkboximage = null;
		this.expandimage = null;
		this.itemaccessibility = null;
		this.popuptype = null;
		this.buttonsize = null;
		this.buttonalign = null;
		this.autohotkey = null;
	};

	_pPopupMenuStyle.__get_custom_style_value = function () {
		var val = "";
		var itemalign = this.itemalign;
		if (itemalign && itemalign._value.length) {
			val += "itemalign:" + itemalign._value + "; ";
		}

		var itemheight = this.itemheight;
		if (itemheight && itemheight._value.length) {
			val += "itemheight:" + itemheight._value + "; ";
		}

		var itembackground = this.itembackground;
		if (itembackground && itembackground._value.length) {
			val += "itembackground:" + itembackground._value + "; ";
		}

		var itemborder = this.itemborder;
		if (itemborder && itemborder._value.length) {
			val += "itemborder:" + itemborder._value + "; ";
		}

		var itembordertype = this.itembordertype;
		if (itembordertype && itembordertype._value.length) {
			val += "itembordertype:" + itembordertype._value + "; ";
		}

		var itemgradation = this.itemgradation;
		if (itemgradation && itemgradation._value.length) {
			val += "itemgradation:" + itemgradation._value + "; ";
		}

		var itempadding = this.itempadding;
		if (itempadding && itempadding._value.length) {
			val += "itempadding:" + itempadding._value + "; ";
		}

		var checkboximage = this.checkboximage;
		if (checkboximage && checkboximage._value.length) {
			val += "checkboximage:" + checkboximage._value + "; ";
		}

		var expandimage = this.expandimage;
		if (expandimage && this.expandimage._value.length) {
			val += "expandimage:" + expandimage._value + "; ";
		}

		var itemaccessibility = this.itemaccessibility;
		if (itemaccessibility && itemaccessibility._value.length) {
			val += "itemaccessibility:" + itemaccessibility._value + "; ";
		}

		var popuptype = this.popuptype;
		if (popuptype && popuptype._value.length) {
			val += "itemaccessibility:" + popuptype._value + "; ";
		}

		var buttonsize = this.buttonsize;
		if (buttonsize && buttonsize._value.length) {
			val += "buttonsize:" + buttonsize._value + "; ";
		}

		var buttonalign = this.buttonalign;
		if (buttonalign && buttonalign._value.length) {
			val += "buttonalign:" + buttonalign._value + "; ";
		}

		var autohotkey = this.autohotkey;
		if (autohotkey && autohotkey._value.length) {
			val += "autohotkey:" + autohotkey._value + "; ";
		}

		return val;
	};

	nexacro.PopupMenu_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.itemalign = null;
		this.itemheight = null;
		this.itembackground = null;
		this.itemborder = null;
		this.itembordertype = null;
		this.itemgradation = null;
		this.itempadding = null;
		this.checkboximage = null;
		this.expandimage = null;
		this.itemaccessibility = null;
		this.popuptype = null;
		this.buttonsize = null;
		this.buttonalign = null;
		this.autohotkey = null;
	};

	var _pPopupMenuCurrentStyle = nexacro.PopupMenu_CurrentStyle.prototype = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.PopupMenu_CurrentStyle);

	_pPopupMenuCurrentStyle.__custom_emptyObject = _pPopupMenuStyle.__custom_emptyObject;
	_pPopupMenuCurrentStyle.__get_custom_style_value = _pPopupMenuStyle.__get_custom_style_value;

	delete _pPopupMenuStyle;
	delete _pPopupMenuCurrentStyle;
}

if (!nexacro.PopupMenu) {
	nexacro.MenuCloseUpEventInfo = function (obj, id, isselect) {
		this.id = this.eventid = id || "oncloseup";
		this.fromobject = obj;
		this.fromreferenceobject = obj;
		this.isselect = isselect;
	};
	var _pMenuCloseUpEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MenuCloseUpEventInfo);
	nexacro.MenuCloseUpEventInfo.prototype = _pMenuCloseUpEventInfo;
	_pMenuCloseUpEventInfo._type_name = "MenuCloseUpEventInfo";

	delete _pMenuCloseUpEventInfo;

	nexacro.MenuClickEventInfo = function (obj, id, itemid, itemuserdata, index, level) {
		this.eventid = id || "onmenuclick";
		this.id = itemid;
		this.fromobject = this.fromreferenceobject = obj;
		this.index = index;
		this.level = level;
		this.userdata = itemuserdata;
	};

	var _pMenuClickEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MenuClickEventInfo);
	nexacro.MenuClickEventInfo.prototype = _pMenuClickEventInfo;
	_pMenuClickEventInfo._type_name = "MenuClickEventInfo";

	delete _pMenuClickEventInfo;

	nexacro.PopupMenu = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.PopupComponent.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.datarow = 0;
		this.level = 0;
		this.selfpopup = true;
		this.beforeindex = -1;
		this.innerdataset = "";
		this.captioncolumn = "";
		this.checkboxcolumn = "";
		this.enablecolumn = "";
		this.hotkeycolumn = "";
		this.iconcolumn = "";
		this.idcolumn = "";
		this.levelcolumn = "";
		this.userdatacolumn = "";


		this._popupmenu = null;
		this._hot_key_list = [];
		this._items = [];
		this._attached_comp = this;
		this._is_subcontrol = false;
		this._previousitem = 0;
		this._popupitemindex = -1;
		this._popupitempreviousindex = -1;
		this._closeflag = true;
		this._want_tab = true;
		this._selected_itemindex = -1;
		this._last_mouseleave_iteminfo = {
			bindindex : -1, 
			index : -1, 
			level : -1
		};
		this._iconImage_width = 0;
		this._iconImage_height = 0;
		this._innerdataset = "";
		this._lineItems = [];
		this._is_popupmenu_mouseover = false;
		this._caller_comp = null;

		this.spinupbutton = null;
		this.spindownbutton = null;

		this._spin_height = 20;
		this._scrollIndex = 0;
		this._buttonRect = [];
		this._buttonRect_elem = [];


		this._accessibility_role = "menu";
		this._want_arrow = true;

		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmenuclick" : 1, 
			"onpopup" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"oncloseup" : 1
		};
	};

	var _pPopupMenu = nexacro._createPrototype(nexacro.PopupComponent, nexacro.PopupMenu);
	nexacro.PopupMenu.prototype = _pPopupMenu;

	_pPopupMenu._type_name = "PopupMenu";

	nexacro.PopupMenu._default_buttonsize = nexacro._getCachedStyleObj("buttonsize", -1);
	nexacro.PopupMenu._default_buttonalign = nexacro._getCachedStyleObj("buttonalign", "auto");


	_pPopupMenu.on_create_custom_style = function () {
		return new nexacro.PopupMenu_Style(this);
	};

	_pPopupMenu.on_create_custom_currentStyle = function () {
		return new nexacro.PopupMenu_CurrentStyle();
	};

	_pPopupMenu.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var itemalign = this.on_find_CurrentStyle_itemalign(pseudo);
		if (itemalign && curstyle.itemalign != itemalign) {
			curstyle.itemalign = itemalign;
			this.on_apply_style_itemalign(itemalign);
		}

		var itemheight = this.on_find_CurrentStyle_itemheight(pseudo);
		if (itemheight && curstyle.itemheight != itemheight) {
			curstyle.itemheight = itemheight;
			this.on_apply_style_itemheight(itemheight);
		}

		var itemborder = this.on_find_CurrentStyle_itemborder(pseudo);
		if (itemborder && this._compareitemBorder(curstyle.itemborder, itemborder)) {
			curstyle.itemborder = itemborder;
			this.on_apply_style_itemborder(itemborder);
		}

		var itembordertype = this.on_find_CurrentStyle_itembordertype(pseudo);
		if (itembordertype && curstyle.itembordertype != itembordertype) {
			curstyle.itembordertype = itembordertype;
			this.on_apply_style_itembordertype(itembordertype);
		}

		var itemgradation = this.on_find_CurrentStyle_itemgradation(pseudo);
		if (itemgradation && curstyle.itemgradation != itemgradation) {
			curstyle.itemgradation = itemgradation;
			this.on_apply_style_itemgradation(itemgradation);
		}

		var itempadding = this.on_find_CurrentStyle_itempadding(pseudo);
		if (itempadding && this._compareitemPadding(curstyle.itempadding, itempadding)) {
			curstyle.itempadding = itempadding;
			this.on_apply_style_itempadding(itempadding);
		}

		var checkboximage = this.on_find_CurrentStyle_checkboximage(pseudo);
		if (checkboximage && curstyle.checkboximage != checkboximage) {
			curstyle.checkboximage = checkboximage;
			this.on_apply_style_checkboximage(checkboximage);
		}

		var expandimage = this.on_find_CurrentStyle_expandimage(pseudo);
		if (expandimage && curstyle.expandimage != expandimage) {
			curstyle.expandimage = expandimage;
			this.on_apply_style_expandimage(expandimage);
		}

		var itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(pseudo);
		if (itemaccessibility && curstyle.itemaccessibility != itemaccessibility) {
			curstyle.itemaccessibility = itemaccessibility;
			this.on_apply_style_itemaccessibility(itemaccessibility);
		}

		var popuptype = this.on_find_CurrentStyle_popuptype(pseudo);
		if (popuptype && curstyle.popuptype != popuptype) {
			curstyle.popuptype = popuptype;
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}

		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		if (buttonsize != curstyle.buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(buttonsize);
		}

		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		if (buttonalign != curstyle.buttonalign) {
			curstyle.buttonalign = buttonalign;
			this.on_apply_style_buttonalign(buttonalign);
		}

		var autohotkey = this.on_find_CurrentStyle_autohotkey(pseudo);
		if (autohotkey != curstyle.autohotkey) {
			curstyle.autohotkey = autohotkey;
		}

		if (this.spinupbutton) {
			this.spinupbutton._control_pseudo = "";
			this.spinupbutton._contents_pseudo = "";
			this.spinupbutton.on_apply_pseudo(pseudo);
		}
		if (this.spindownbutton) {
			this.spindownbutton._control_pseudo = "";
			this.spindownbutton._contents_pseudo = "";
			this.spindownbutton.on_apply_pseudo(pseudo);
		}
	};

	_pPopupMenu._compareitemPadding = function (curpadding, padding) {
		if (!curpadding) {
			return true;
		}
		if (curpadding.top != padding.top || curpadding.left != padding.left || curpadding.right != padding.right || curpadding.bottom != padding.bottom) {
			return true;
		}
		return false;
	};

	_pPopupMenu._compareitemBorder = function (curborder, border) {
		if (!curborder) {
			return true;
		}
		if (curborder._value != border._value) {
			return true;
		}
		return false;
	};

	_pPopupMenu.on_find_CurrentStyle_popuptype = function (pseudo) {
		if (this.parent instanceof nexacro.Menu || this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_popuptype(pseudo);
		}

		return this._find_pseudo_obj("popuptype", pseudo);
	};

	_pPopupMenu.on_find_CurrentStyle_itemalign = function (pseudo) {
		if (this.parent instanceof nexacro.Menu || this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itemalign(pseudo);
		}

		return this._find_pseudo_obj("itemalign", pseudo, "align");
	};

	_pPopupMenu.on_find_CurrentStyle_itemheight = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupitemheight(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itemheight(pseudo);
		}
		return this._find_pseudo_obj("itemheight", pseudo);
	};

	_pPopupMenu.on_find_CurrentStyle_itembackground = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupitembackground(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itembackground(pseudo);
		}
		return itembackground = this._find_pseudo_obj("itembackground", pseudo, "background");
	};

	_pPopupMenu.on_find_CurrentStyle_itemborder = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupitemborder(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itemborder(pseudo);
		}
		return this._find_pseudo_obj("itemborder", pseudo, "border");
	};

	_pPopupMenu.on_find_CurrentStyle_itembordertype = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupitembordertype(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itembordertype(pseudo);
		}
		return this._find_pseudo_obj("itembordertype", pseudo, "bordertype");
	};

	_pPopupMenu.on_find_CurrentStyle_itemgradation = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupitemgradation(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itemgradation(pseudo);
		}
		return this._find_pseudo_obj("itemgradation", pseudo, "gradation");
	};

	_pPopupMenu.on_find_CurrentStyle_itempadding = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupitempadding(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itempadding(pseudo);
		}
		return this._find_pseudo_obj("itempadding", pseudo, "padding");
	};

	_pPopupMenu.on_find_CurrentStyle_checkboximage = function (pseudo) {
		if (this.parent instanceof nexacro.Menu || this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_checkboximage(pseudo);
		}
		return this._find_pseudo_obj("checkboximage", pseudo);
	};

	_pPopupMenu.on_find_CurrentStyle_expandimage = function (pseudo) {
		if (this.parent instanceof nexacro.Menu || this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_expandimage("normal");
		}
		return this._find_pseudo_obj("expandimage", "normal");
	};

	_pPopupMenu.on_find_CurrentStyle_popupitembackground = function (pseudo) {
		if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_popupitembackground(pseudo);
		}
		return this.parent._find_pseudo_obj("popupitembackground", pseudo, "background");
	};

	_pPopupMenu.on_find_CurrentStyle_popupitempadding = function (pseudo) {
		if (this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_popupitempadding(pseudo);
		}
		return this.parent._find_pseudo_obj("popupitempadding", pseudo, "padding");
	};

	_pPopupMenu.on_find_CurrentStyle_background = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupbackground(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_pseudo_obj("background", pseudo, "background");
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("popupbackground", pseudo, "background");
			}
		}
		return this._find_pseudo_obj("background", pseudo, "background");
	};

	_pPopupMenu.on_find_CurrentStyle_font = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupfont(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_inherit_pseudo_obj("font", pseudo, "font");
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("popupfont", pseudo, "font");
			}
		}
		return this._find_inherit_pseudo_obj("font", pseudo, "font");
	};

	_pPopupMenu.on_find_CurrentStyle_letterspace = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_letterspace(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_inherit_pseudo_obj("letterspace", pseudo, "letterspace");
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("letterspace", pseudo, "letterspace");
			}
		}
		return this._find_inherit_pseudo_obj("letterspace", pseudo, "letterspace");
	};

	_pPopupMenu.on_find_CurrentStyle_color = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupcolor(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_inherit_pseudo_obj("color", pseudo, "color") || this._defaultcolor;
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("popupcolor", pseudo, "color") || this._defaultcolor;
			}
		}
		return this._find_inherit_pseudo_obj("color", pseudo, "color") || this._defaultcolor;
	};

	_pPopupMenu.on_find_CurrentStyle_border = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupborder(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_pseudo_obj("border", pseudo, "border");
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("popupborder", pseudo, "border");
			}
		}
		return this._find_pseudo_obj("border", pseudo, "border");
	};

	_pPopupMenu.on_find_CurrentStyle_bordertype = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popupbordertype(pseudo);
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_pseudo_obj("bordertype", pseudo, "bordertype");
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("popupbordertype", pseudo, "bordertype");
			}
		}
		return this._find_pseudo_obj("bordertype", pseudo, "bordertype");
	};

	_pPopupMenu.on_find_CurrentStyle_padding = function (pseudo) {
		if (this.parent instanceof nexacro.Menu) {
			return this.parent.on_find_CurrentStyle_popuppadding();
		}
		else if (this.parent instanceof nexacro.PopupMenu) {
			if (this.selfpopup) {
				var p = this;
				while (p._is_subcontrol != false) {
					p = p.parent;
				}
				return p._find_pseudo_obj("padding", pseudo, "padding");
			}
			else {
				return this._getMenuObj()._find_pseudo_obj("popuppadding", pseudo, "padding");
			}
		}
		return this._find_pseudo_obj("padding", pseudo, "padding");
	};

	_pPopupMenu.on_find_CurrentStyle_itemaccessibility = function (pseudo) {
		if (this.parent instanceof nexacro.Menu || this.parent instanceof nexacro.PopupMenu) {
			return this.parent.on_find_CurrentStyle_itemaccessibility(pseudo) || nexacro.Component._default_accessibility;
		}
		return this._find_pseudo_obj("itemaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pPopupMenu.on_find_CurrentStyle_cusor = function (pseudo) {
		return nexacro.Component.prototype.on_find_CurrentStyle_cusor.call(this._getRootComponent(this));
	};

	_pPopupMenu.on_find_CurrentStyle_opacity = function (pseudo) {
		return nexacro.Component.prototype.on_find_CurrentStyle_opacity.call(this._getRootComponent(this));
	};

	_pPopupMenu.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pPopupMenu.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this._find_pseudo_obj("buttonsize", pseudo) || nexacro.PopupMenu._default_buttonsize;
	};

	_pPopupMenu.on_find_CurrentStyle_buttonalign = function (pseudo) {
		return this._find_pseudo_obj("buttonalign", pseudo) || nexacro.PopupMenu._default_buttonalign;
	};

	_pPopupMenu.on_find_CurrentStyle_autohotkey = function (pseudo) {
		return this._find_pseudo_obj("autohotkey", pseudo) || nexacro.Menu._default_autohotkey;
	};

	_pPopupMenu.on_apply_custom_class = function () {
		if (this._popupmenu) {
			this._popupmenu.on_apply_prop_class();
		}
	};

	_pPopupMenu.on_apply_style_color = function (color) {
		var items = this._items;
		if (items) {
			var len = items.length;

			for (var i = 0; i < len; i++) {
				color = this.on_find_CurrentStyle_color(items[i]._pseudo);
				items[i].on_apply_style_color(color);
			}
		}
	};

	_pPopupMenu.on_apply_style_font = function (font) {
		var items = this._items;
		if (items) {
			var len = items.length;

			for (var i = 0; i < len; i++) {
				font = this.on_find_CurrentStyle_font(items[i]._pseudo);
				items[i].on_apply_style_font(font);
			}
		}
	};

	_pPopupMenu.on_apply_style_letterspace = function (letterspace) {
		var items = this._items;
		if (items) {
			var len = items.length;

			for (var i = 0; i < len; i++) {
				letterspace = this.on_find_CurrentStyle_letterspace(items[i]._pseudo);
				items[i].on_apply_style_letterspace(letterspace);
			}
		}
	};

	_pPopupMenu.on_apply_style_cursor = function (cursor) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementCursor(cursor);
		}
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_cursor(cursor);
			}
		}
	};

	_pPopupMenu.on_apply_style_opacity = function (opacity) {
		nexacro.Component.prototype.on_apply_style_opacity.call(this);

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_opacity(opacity);
		}
	};

	_pPopupMenu.on_apply_style_padding = function (padding) {
		nexacro.Component.prototype.on_apply_style_padding.call(this);

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_apply_style_padding(padding);
		}
	};

	_pPopupMenu.on_apply_style_itemalign = function (itemalign) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				itemalign = this.on_find_CurrentStyle_itemalign(items[i]._pseudo);
				items[i].on_apply_style_align(itemalign);
			}
		}
	};

	_pPopupMenu.on_apply_style_itembackground = function (itembackground) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				itembackground = this.on_find_CurrentStyle_itembackground(items[i]._pseudo);
				items[i].on_apply_style_background(itembackground);
			}
		}
	};

	_pPopupMenu.on_apply_style_itemborder = function (itemborder) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				itemborder = this.on_find_CurrentStyle_itemborder(items[i]._pseudo);
				items[i].on_apply_style_border(itemborder);
			}
		}
	};

	_pPopupMenu.on_apply_style_itembordertype = function (itembordertype) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				itembordertype = this.on_find_CurrentStyle_itembordertype(items[i]._pseudo);
				items[i].on_apply_style_bordertype(itembordertype);
			}
		}
	};

	_pPopupMenu.on_apply_style_itemgradation = function (itemgradation) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				itemgradation = this.on_find_CurrentStyle_itemgradation(items[i]._pseudo);
				items[i].on_apply_style_gradation(itemgradation);
			}
		}
	};

	_pPopupMenu.on_apply_style_itempadding = function (itempadding) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				itempadding = this.on_find_CurrentStyle_itempadding(items[i]._pseudo);
				items[i].on_apply_style_padding(itempadding);
			}

			this._reCalcSize();
			this._calcSpinButton();
			this._updateMenuItemPosition();
		}
	};

	_pPopupMenu.on_apply_style_itemheight = nexacro._emptyFn;

	_pPopupMenu.on_apply_style_checkboximage = function (checkboximage) {
		if (!checkboximage) {
			checkboximage = this.currentstyle.checkboximage;
		}

		this._load_image(checkboximage, "chk");

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i]._setCheckimage(checkboximage._value);
			}
		}

		if (this._popupmenu) {
			this._popupmenu.style.set_checkboximage(checkboximage);
		}

		this._reCalcSize();
		this._calcSpinButton();
		this._updateMenuItemPosition();
	};

	_pPopupMenu.on_apply_style_expandimage = function (expandimage) {
		if (!expandimage) {
			expandimage = this.currentstyle.expandimage;
		}

		var img_url = this._load_image(expandimage, "exp");

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i]._setExpandimage(img_url);
			}
		}

		if (this._popupmenu) {
			this._popupmenu.style.set_expandimage(expandimage);
		}
	};

	_pPopupMenu.on_apply_style_itemaccessibility = function (itemaccessibility) {
		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_apply_style_accessibility(itemaccessibility);
			}
		}
	};

	_pPopupMenu.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pPopupMenu.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var _rtldirection = this._rtldirection;

		var len = this._items.length;
		var item = null;
		for (var i = 0; i < len; i++) {
			item = this._getItem(i);
			item._setRtlDirection(_rtldirection);
		}

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu._setRtlDirection(_rtldirection);
		}
	};

	_pPopupMenu.on_apply_prop_enable = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			var items = this._items;
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i]._setEnable(v);
			}
		}
	};

	_pPopupMenu.on_apply_style_buttonsize = function (buttonsize) {
		if (buttonsize && buttonsize._value != -1) {
			this._spin_height = parseInt(buttonsize._value);
		}
		else {
			this._spin_height = 20;
		}
		this._reCalcSize();
		this._calcSpinButton();
		this._updateMenuItemPosition();
	};

	_pPopupMenu.on_apply_style_buttonalign = function (buttonalign) {
		if (buttonalign) {
			var align = buttonalign._value;
			if (align == "none") {
				this._spin_height = 0;
			}
			else {
				var buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
				if (buttonsize && buttonsize._value != -1) {
					this._spin_height = parseInt(buttonsize._value);
				}
				else {
					this._spin_height = 20;
				}
			}
		}

		this._reCalcSize();
		this._calcSpinButton();
		this._updateMenuItemPosition();
	};

	_pPopupMenu.on_apply_style_autohotkey = nexacro._emptyFn;

	_pPopupMenu.on_update_style_color = function () {
		if (!this._is_subcontrol) {
			this.currentstyle.color = this.on_find_CurrentStyle_color(this._pseudo);
		}

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_update_style_color();
			}
		}

		if (this._popupmenu) {
			this._popupmenu.on_update_style_color();
		}
	};

	_pPopupMenu.on_update_style_font = function () {
		if (!this._is_subcontrol) {
			this.currentstyle.font = this.on_find_CurrentStyle_font(this._pseudo);
		}

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_update_style_font();
			}
		}
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_font();
		}
	};

	_pPopupMenu.on_update_style_align = function () {
		if (!this._is_subcontrol) {
			this.currentstyle.align = this.on_find_CurrentStyle_align(this._pseudo);
		}

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].on_update_style_align();
			}
		}

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_align();
		}
	};

	_pPopupMenu.on_update_style_border = function () {
		this.on_apply_style_border(this.currentstyle.border = this.on_find_CurrentStyle_border(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_border();
		}
	};
	_pPopupMenu.on_update_style_bordertype = function () {
		this.on_apply_style_bordertype(this.currentstyle.bordertype = this.on_find_CurrentStyle_bordertype(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_bordertype();
		}
	};
	_pPopupMenu.on_update_style_background = function () {
		this.on_apply_style_background(this.currentstyle.background = this.on_find_CurrentStyle_background(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_background();
		}
	};
	_pPopupMenu.on_update_style_gradation = function () {
		this.on_apply_style_gradation(this.currentstyle.gradation = this.on_find_CurrentStyle_gradation(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_gradation();
		}
	};

	_pPopupMenu.on_update_style_opacity = function () {
		this.on_apply_style_opacity(this.currentstyle.opacity = this.on_find_CurrentStyle_opacity(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_opacity();
		}
	};

	_pPopupMenu.on_update_style_shadow = function () {
		this.on_apply_style_shadow(this.currentstyle.shadow = this.on_find_CurrentStyle_shadow(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_shadow();
		}
	};
	_pPopupMenu.on_update_style_cursor = function () {
		this.on_apply_style_cursor(this.currentstyle.cursor = this.on_find_CurrentStyle_cursor(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_cursor();
		}
	};

	_pPopupMenu.on_update_style_padding = function () {
		nexacro.Component.prototype.on_update_style_padding.call(this);

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_padding();
		}
	};

	_pPopupMenu.on_update_style_popuptype = function () {
		this.currentstyle.popuptype = this.on_find_CurrentStyle_popuptype(this._pseudo);
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_popuptype();
		}
	};


	_pPopupMenu.on_update_style_itemalign = function () {
		this.on_apply_style_itemalign(this.currentstyle.itemalign = this.on_find_CurrentStyle_itemalign(this._pseudo));
	};

	_pPopupMenu.on_update_style_itemheight = function () {
		this.on_apply_style_itemheight(this.currentstyle.itemheight = this.on_find_CurrentStyle_itemheight(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itemheight();
		}
	};

	_pPopupMenu.on_update_style_itembackground = function () {
		this.on_apply_style_itembackground(this.currentstyle.itembackground = this.on_find_CurrentStyle_itembackground(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itembackground();
		}
	};

	_pPopupMenu.on_update_style_itemborder = function () {
		this.on_apply_style_itemborder(this.currentstyle.itemborder = this.on_find_CurrentStyle_itemborder(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itemborder();
		}
	};

	_pPopupMenu.on_update_style_itembordertype = function () {
		this.on_apply_style_itembordertype(this.currentstyle.itembordertype = this.on_find_CurrentStyle_itembordertype(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itembordertype();
		}
	};

	_pPopupMenu.on_update_style_itemgradation = function () {
		this.on_apply_style_itemgradation(this.currentstyle.itemgradation = this.on_find_CurrentStyle_itemgradation(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itemgradation();
		}
	};

	_pPopupMenu.on_update_style_itempadding = function () {
		this.on_apply_style_itempadding(this.currentstyle.itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itempadding();
		}
	};

	_pPopupMenu.on_update_style_checkboximage = function () {
		this.on_apply_style_checkboximage(this.currentstyle.checkboximage = this.on_find_CurrentStyle_checkboximage(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_checkboximage();
		}
	};

	_pPopupMenu.on_update_style_expandimage = function () {
		this.on_apply_style_expandimage(this.currentstyle.expandimage = this.on_find_CurrentStyle_expandimage(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_expandimage();
		}
	};

	_pPopupMenu.on_update_style_itemaccessibility = function () {
		this.on_apply_style_itemaccessibility(this.currentstyle.itemaccessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo));

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu.on_update_style_itemaccessibility();
		}
	};

	_pPopupMenu.on_update_style_buttonsize = function () {
		this.on_apply_style_buttonsize(this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo));
	};

	_pPopupMenu.on_update_style_buttonalign = function () {
		this.on_apply_style_buttonalign(this.currentstyle.buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo));
	};

	_pPopupMenu.on_update_style_autohotkey = function () {
		this.on_apply_style_autohotkey(this.currentstyle.autohotkey = this.on_find_CurrentStyle_autohotkey(this._pseudo));
	};


	_pPopupMenu.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._createPopupMenu();
		}

		if (!this._is_subcontrol) {
			var curstyle = this.currentstyle;
			if (curstyle.checkboximage) {
				this._load_image(curstyle.checkboximage, "chk");
			}

			if (curstyle.expandimage) {
				this._load_image(curstyle.expandimage, "exp");
			}
		}

		if (this._innerdataset && this.enablecolumn) {
			this.on_apply_enablecolumn();
		}
	};

	_pPopupMenu.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (!this._innerdataset && this.innerdataset) {
				this._innerdataset = this._findDataset(this.innerdataset);
				this.on_apply_innerdataset();
			}

			var items = this._lineItems;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i].on_created();
				}
			}

			if (nexacro._enableaccessibility) {
				this.on_apply_style_itemaccessibility(this.on_find_CurrentStyle_itemaccessibility(this._pseudo));
				this._setAccessibilityInfoLevel(this.level);
			}
			this.on_apply_prop_rtldirection();
		}
	};

	_pPopupMenu.on_destroy_contents = function () {
		this._deletePopupMenu();

		if (this._innerdataset) {
			this._innerdataset._removeEventHandler("onrowposchanged", this._callbackFromDataset, this);
			this._innerdataset._removeEventHandler("oncolumnchanged", this._callbackFromDataset, this);
			this._innerdataset._removeEventHandler("onrowsetchanged", this._callbackFromDataset, this);

			this._innerdataset = null;
			this.innerdataset = null;
		}

		this._hot_key_list = [];
		this._attached_comp = null;
	};

	_pPopupMenu.set_captioncolumn = function (v) {
		if (v != this.captioncolumn) {
			this.captioncolumn = v;
			var popupmenu = this._popupmenu;
			if (popupmenu) {
				popupmenu.set_captioncolumn(v);
			}

			this.on_apply_captioncolumn();
		}
	};

	_pPopupMenu.on_apply_captioncolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();

			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i]._setText(ds.getColumn(items[i].datarow, this.captioncolumn) || "");
				}
			}
		}
	};

	_pPopupMenu.set_checkboxcolumn = function (v) {
		if (v != this.checkboxcolumn) {
			this.checkboxcolumn = v;
			var popupmenu = this._popupmenu;
			if (popupmenu) {
				popupmenu.set_checkboxcolumn(v);
			}

			this.on_apply_checkboxcolumn();
		}
	};

	_pPopupMenu.on_apply_checkboxcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();

			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i]._setValue(ds.getColumn(items[i].datarow, this.checkboxcolumn) || false);
				}
			}
		}
	};

	_pPopupMenu.set_enablecolumn = function (v) {
		if (v != this.enablecolumn) {
			this.enablecolumn = v;
			var popupmenu = this._popupmenu;
			if (popupmenu) {
				popupmenu.set_enablecolumn(v);
			}

			this.on_apply_enablecolumn();
		}
	};

	_pPopupMenu.on_apply_enablecolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();

			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					var enabletext = ds.getColumn(items[i].datarow, this.enablecolumn);

					enabletext = enabletext == false || enabletext == "false" ? false : true;

					items[i].set_enable(enabletext);
				}
			}
		}
	};

	_pPopupMenu.set_hotkeycolumn = function (v) {
		if (v != this.hotkeycolumn) {
			this.hotkeycolumn = v;
			var popupmenu = this._popupmenu;
			if (popupmenu) {
				popupmenu.set_hotkeycolumn(v);
			}

			this.on_apply_hotkeycolumn();
		}
	};

	_pPopupMenu.on_apply_hotkeycolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();

			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i]._setHotkey(ds.getColumn(items[i].datarow, this.hotkeycolumn) || "");
				}
			}
		}
	};

	_pPopupMenu.set_iconcolumn = function (v) {
		if (v != this.iconcolumn) {
			this.iconcolumn = v;
			if (this._popupmenu) {
				this._popupmenu.set_iconcolumn(v);
			}
			this.on_apply_iconcolumn();
		}
	};

	_pPopupMenu.on_apply_iconcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();
			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i]._setIcon(ds.getColumn(items[i].datarow, this.iconcolumn) || "");
				}
			}
		}
	};

	_pPopupMenu.set_idcolumn = function (v) {
		if (v != this.idcolumn) {
			this.idcolumn = v;
			if (this._popupmenu) {
				this._popupmenu.set_idcolumn(v);
			}
			this.on_apply_idcolumn();
		}
	};

	_pPopupMenu.on_apply_idcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();
			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i].id = ds.getColumn(items[i].datarow, this.idcolumn) || "";
				}
			}
		}
	};

	_pPopupMenu.set_levelcolumn = function (v) {
		if (v != this.levelcolumn) {
			this.levelcolumn = v;
			this.on_apply_levelcolumn();
		}
	};

	_pPopupMenu.on_apply_levelcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();

			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i].level = ds.getColumn(items[i].datarow, this.levelcolumn) || -1;
				}
			}
		}
	};

	_pPopupMenu.set_userdatacolumn = function (v) {
		if (v != this.userdatacolumn) {
			this.userdatacolumn = v;
			var popupmenu = this._popupmenu;
			if (popupmenu) {
				popupmenu.set_userdatacolumn(v);
			}

			this.on_apply_userdatacolumn();
		}
	};

	_pPopupMenu.on_apply_userdatacolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._createPopupMenu();

			var items = this._items;
			if (items) {
				var len = items.length;
				for (var i = 0; i < len; i++) {
					items[i].userdata = ds.getColumn(items[i].datarow, this.userdatacolumn) || null;
				}
			}
		}
	};

	_pPopupMenu.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
		}
	};

	_pPopupMenu._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pPopupMenu.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pPopupMenu.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
	};

	_pPopupMenu.on_apply_innerdataset = function () {
		var ds = this._innerdataset;
		if (ds) {
			var callback = this._callbackFromDataset;
			ds._setEventHandler("onrowposchanged", callback, this);
			ds._setEventHandler("oncolumnchanged", callback, this);
			ds._setEventHandler("onrowsetchanged", callback, this);
		}
		this._createPopupMenu();
		this.beforeindex = -1;
		this.beforevalue = "";
		this.beforeText = "";
	};

	_pPopupMenu.on_mouseleave_basic_action = function (is_subcontrol_bubble) {
		if (is_subcontrol_bubble) {
			if (this._apply_pushed_pseudo && this._is_push) {
				this._stat_change("notpush", "normal");
				this._is_pushed_area = false;
			}
			else if (!this._isSelected()) {
				var tmp_comp = this;
				var alive = true;

				while (tmp_comp) {
					if (tmp_comp._is_alive == false) {
						alive = false;
						break;
					}
					tmp_comp = tmp_comp.parent;
				}

				if (alive) {
					this._stat_change("", "normal");
				}

				var _curritem = this._items ? this._items[this._previousitem] : null;

				if (_curritem && this._popupmenuitem_extend(_curritem)) {
					var _popupmenu = _curritem.parent;
					if (_popupmenu && this._popupmenu_visible(_popupmenu)) {
						_curritem._stat_change("enable", "mouseover");
					}
				}
			}
		}
		else {
			if (this._apply_pushed_pseudo && this._is_push) {
				this._stat_change("notpush", "normal");
				this._is_pushed_area = false;
			}
			else if (this._isSelected()) {
			}
			else {
				if (this._is_form) {
					this._stat_change("", "normal");
				}
				else {
					if (this._find_lastFocused(this) == this) {
						this._stat_change("", "normal");
					}
					else {
						this._stat_change("notfocus", "normal");
					}
				}
			}
		}
	};

	_pPopupMenu.on_fire_user_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onlbuttondown", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.onlbuttondown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(button, "onlbuttonup", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.onlbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_onmousedown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmousedown", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.onmousedown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmouseup", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.onmouseup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_onmouseenter = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseenter && this.onmouseenter._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmouseenter", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.onmouseenter._fireUserEvent(this, evt);
		}
	};

	_pPopupMenu.on_fire_user_onmouseleave = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseleave && this.onmouseleave._has_handlers) {
			var iteminfo = this._last_mouseleave_iteminfo;
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmouseleave", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, iteminfo.level, iteminfo.index, iteminfo.bindindex);
			return this.onmouseleave._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		var rootComp = this._getRootComponent(this);
		if (rootComp._menuitemonmouseenter && (rootComp._menuitemonmouseenter != from_refer_comp) && (from_refer_comp instanceof nexacro.PopupMenuItem)) {
			this._process_mousemove(from_refer_comp);
		}
		rootComp = null;

		if (this.onmousemove && this.onmousemove._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuMouseEventInfo(this, "onmousemove", refer_comp.id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.onmousemove._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_ondrag = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, refer_comp, self_refer_comp) {
		if (this.ondrag && this.ondrag._has_handlers) {
			var dragData = this._getDragData();
			var self_refer = self_refer_comp._overedobj || self_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondrag", refer_comp.id, dragData, null, this, self_refer_comp, from_comp, refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, self_refer_comp.parent.level, self_refer.index, self_refer._bindindex);
			return [this.ondrag._fireUserEvent(this, evt), this, self_refer_comp, dragData, evt.userdata];
		}
		return [false];
	};

	_pPopupMenu.on_fire_user_ondrop = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondrop && this.ondrop._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondrop", refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.ondrop._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_ondragenter = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragenter && this.ondragenter._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondragenter", refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.ondragenter._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_ondragleave = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragleave && this.ondragleave._has_handlers) {
			var iteminfo = this._last_mouseleave_iteminfo;
			var evt = new nexacro.MenuDragEventInfo(this, "ondragleave", refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, iteminfo.level, iteminfo.index, iteminfo.bindindex);

			return this.ondragleave._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_ondragmove = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.ondragmove && this.ondragmove._has_handlers) {
			var refer_comp = from_refer_comp._overedobj || from_refer_comp;
			var evt = new nexacro.MenuDragEventInfo(this, "ondragmove", refer_comp.id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_refer_comp.parent.level, refer_comp.index, refer_comp._bindindex);
			return this.ondragmove._fireUserEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var pThis = this._popupmenu_find(this);
		var item = this._item_find(pThis);
		var popupvisible = this._popupmenu_visible(this);

		var item_len = item.length - 1;
		var pitemindex, nitemindex = this._popupitemindex;
		var popuptype = this._getPopupType();

		var rootComp = this._getRootComponent(this);
		var E = nexacro.Event;

		switch (keycode) {
			case E.KEY_TAB:
				if (!popupvisible) {
					if (!shift_key && this._popupitemindex == item_len || shift_key && this._popupitemindex < 0) {
						this._want_tab = false;
						this._closePopup();
					}
					else {
						if (shift_key == false) {
							this._popupitemindex++;
						}
						else {
							this._popupitemindex--;
						}

						if (item[this._popupitemindex]) {
							rootComp._menuitemonmouseenter = item[this._popupitemindex];
							this._item_focus(item[this._popupitemindex], true);
						}
						else {
							this._item_focus(rootComp._menuitemonmouseenter, false);
							this._do_defocus(this._last_focused, true);
							this._on_focus(true);
						}
					}
					this.parent._getWindow()._keydown_element._event_stop = true;
					break;
				}
				else {
					if ((!shift_key && this._popupitemindex == item_len) || (shift_key && (this._popupitemindex == 0 || this._popupitemindex == -1))) {
						pThis._closePopup();
						var pThis = this._popupmenu_find(this);
						var item = this._item_find(pThis);
						rootComp._menuitemonmouseenter = item[pThis._previousitem];
						pThis._item_focus(item[pThis._previousitem], true);
						this._popupitemindex = pThis._previousitem;
					}
					else {
						if (this._popupitemindex == 0 && item[this._popupitemindex]._pseudo != "mouseover") {
						}
						else {
							if (shift_key) {
								this._popupitemindex--;
							}
							else {
								this._popupitemindex++;
							}
						}

						rootComp._menuitemonmouseenter = item[this._popupitemindex];
						pThis._item_focus(item[this._popupitemindex], true);
					}

					this.parent._getWindow()._keydown_element._event_stop = true;
					break;
				}
			default:
				break;
		}

		return nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pPopupMenu.on_fire_sys_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		if (this._is_subcontrol == false) {
			var pThis = this._popupmenu_find(this);
			var item = this._item_find(pThis);

			var item_len = item.length - 1;
			var pitemindex, nitemindex = this._popupitemindex;
			var popuptype = this._getPopupType();

			var rootComp = this._getRootComponent(this);
			var E = nexacro.Event;

			switch (keycode) {
				case E.KEY_UP:
					if (pThis._is_spin_visible) {
						this._do_scroll(keycode, pThis);
					}

					this._popupitemindex = rootComp._popupitemindex;

					if (this._popupitemindex == -1) {
						this._popupitemindex = 0;
					}
					else {
						this._popupitemindex--;
					}

					if (this._popupitemindex < 0) {
						this._popupitemindex = item_len;
					}

					rootComp._menuitemonmouseenter = item[this._popupitemindex];
					pThis._previousitem = this._popupitemindex;
					pThis._item_focus(item[this._popupitemindex], true);
					break;
				case E.KEY_DOWN:
					if (pThis._is_spin_visible) {
						this._do_scroll(keycode, pThis);
					}

					this._popupitemindex = rootComp._popupitemindex;
					this._popupitemindex++;

					if (this._popupitemindex > item_len) {
						this._popupitemindex = 0;
					}

					rootComp._menuitemonmouseenter = item[this._popupitemindex];
					pThis._previousitem = this._popupitemindex;
					pThis._item_focus(item[this._popupitemindex], true);
					break;
				case E.KEY_LEFT:
					if ((pThis.parent instanceof nexacro.PopupMenu) == false) {
						break;
					}
					else {
						pThis._closePopup();
						this._popupitemindex = pThis.parent._previousitem;
						var item = this._item_find(pThis.parent);

						rootComp._menuitemonmouseenter = item[this._popupitemindex];
						item[this._popupitemindex].parent._item_focus(item[this._popupitemindex], true);
						item[this._popupitemindex].parent._popupitemindex = this._popupitemindex;
					}
					break;
				case E.KEY_RIGHT:
					if (popuptype == "none") {
						break;
					}

					this._popupitemindex = rootComp._popupitemindex;

					var _item = item[this._popupitemindex];
					var popupexpand = _item ? this._popupmenuitem_extend(_item) : null;

					var _popupmenu = rootComp._menuitemonmouseenter ? rootComp._menuitemonmouseenter.parent : null;

					if (_popupmenu) {
						if (_popupmenu._is_popupmenu_mouseover) {
							var _val = this._popupmenuitem_mouseover(keycode, pThis, item);

							if (_val) {
								pThis = _val.pThis;
								popupexpand = _val.popupexpand;

								item = _val.item;

								_item = item[this._popupitemindex];
							}
							_val = null;
						}
						_popupmenu._is_popupmenu_mouseover = false;
					}
					_popupmenu = null;

					if (popupexpand == true && _item && _item.enable) {
						pThis._previousitem = this._popupitemindex;

						pThis.on_notify_menuitem_onmouseenter(_item);
						pThis._is_popupmenu_mouseover = false;

						this._item_focus(_item, true);
						this._popupitemindex = 0;

						item = this._item_find(pThis);

						_item = item[this._popupitemindex];

						rootComp._menuitemonmouseenter = _item;

						pThis._item_focus(_item, true);
						pThis._popupitemindex = this._popupitemindex;
					}
					break;
				case E.KEY_ENTER:
					if (popuptype == "none") {
						break;
					}

					var _item = rootComp._menuitemonmouseenter;
					var _popupmenu = rootComp._menuitemonmouseenter ? rootComp._menuitemonmouseenter.parent : null;

					if (_item && _popupmenu && (_item._pseudo == "mouseover")) {
						if (_popupmenu._is_popupmenu_mouseover) {
							pThis = this._popupmenuitem_mouseover(keycode, pThis, item);
							item = this._item_find(pThis);
						}
						_popupmenu._is_popupmenu_mouseover = false;

						if (pThis instanceof nexacro.Menu) {
							pThis.on_notify_menuitem_onlbuttondown(_item);
						}
						else if (_item.enable) {
							pThis._previousitem = this._popupitemindex;

							if (!_item.itemexpand) {
								pThis.on_notify_menuitem_onclick(_item);
							}
							else {
								pThis.on_notify_menuitem_onlbuttondown(_item);
							}
							pThis._is_popupmenu_mouseover = false;

							this._popupitemindex = 0;

							pThis = this._popupmenu_find(this);
							item = this._item_find(pThis);

							_item = item[this._popupitemindex];

							rootComp._menuitemonmouseenter = _item;

							pThis._item_focus(_item, true);
							pThis._popupitemindex = this._popupitemindex;

							this._popupitempreviousindex = this._popupitemindex;
						}
					}
					break;
				default:
					break;
			}

			return nexacro.Component.prototype.on_fire_sys_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
		}
	};

	_pPopupMenu._do_defocus = function (target, bParent) {
		var _window = this._getWindow();
		_window._removeFromCurrentFocusPath(target, true);
		if (bParent) {
			_window._removeFromCurrentFocusPath(this, false);
		}
	};

	_pPopupMenu._do_scroll = function (keycode, pThis) {
		var _items = this._item_find(pThis);
		var _item_length = _items ? _items.length : -1;

		if (_item_length > 0) {
			var E = nexacro.Event;

			switch (keycode) {
				case E.KEY_UP:
					if (this._popupitemindex == 0) {
						var _view_item_qty = this._getViewItemQty(pThis, _item_length);

						pThis._scrollIndex = _item_length - _view_item_qty;

						if (pThis._scrollIndex > -1) {
							pThis._reCalcSize();
							pThis._calcSpinButton();
							pThis._updateMenuItemPosition();
						}
						_view_item_qty = null;
					}
					else if (this._popupitemindex == pThis._scrollIndex) {
						pThis._spinup();
					}
					break;
				case E.KEY_DOWN:
					var _view_item_qty = this._getViewItemQty(pThis, _item_length);

					if (this._popupitemindex == (_item_length - 1)) {
						pThis._scrollIndex = 0;

						pThis._reCalcSize();
						pThis._calcSpinButton();
						pThis._updateMenuItemPosition();
					}
					else if (_view_item_qty == (this._popupitemindex - pThis._scrollIndex + 1)) {
						pThis._spindown();
					}
					_view_item_qty = null;
					break;
				default:
					break;
			}
		}
		_item_length = null;
		_items = null;
	};

	_pPopupMenu.on_notify_menuitem_onclick = function (obj, e) {
		var popuptype = this._getPopupType();
		this._previousitem = obj.index;

		if (obj.enable == false || popuptype == "none") {
			return;
		}

		if (obj.parent) {
			obj.parent._is_popupmenu_mouseover = true;
		}

		if (obj.itemexpand == false) {
			if (this.parent && this.parent.enable == true) {
				if (this.parent instanceof nexacro.Menu) {
					{

						this.parent.on_notify_menuitem_onclick(obj, e);
					}
				}
				else if (!(this.parent instanceof nexacro.PopupMenu)) {
					if (this.onmenuclick && this.onmenuclick._has_handlers) {
						var rootComp = this._getRootComponent(obj);
						this.on_fire_onitemclick(rootComp, "onmenuclick", obj.id, obj.userdata, obj.index, obj.parent.level);
						this._popupitemindex = -1;
					}
				}
				else {
					this.parent.on_notify_menuitem_onclick(obj, e);
				}
				this._closeAllPopup();
			}
		}
	};

	_pPopupMenu.on_notify_menuitem_onmouseenter = function (obj, e) {
		if (!obj.enable) {
			return;
		}

		if (obj.parent) {
			obj.parent._is_popupmenu_mouseover = true;
		}

		var popupmenu = this._popupmenu;
		var pobj = this._getRootComponent(obj);
		pobj._popupitemindex = this._popupitemindex = obj.index;
		pobj._menuitemonmouseenter = obj;

		if (popupmenu && popupmenu._is_popup()) {
			if (!this._popupmenuitem_extend(obj) || (this.beforeindex != obj.index)) {
				popupmenu.cancelPopup();
				this._closeflag = true;
				this._showPopup(obj);
			}
		}
		else {
			if (this._getPopupType() != "none") {
				this._closeflag = true;
				this._showPopup(obj);
				if (!popupmenu) {
					popupmenu = this._popupmenu;
				}
			}
		}
		this.beforeindex = obj.index;

		if (!nexacro._enableaccessibility) {
			var item = this._items;
			var pitem = this.parent._items;

			this._item_focus(item[obj.index], true);

			if (this._popupitempreviousindex == -1 || this._popupitemindex == -1) {
				this._popupitempreviousindex = 0;
				this._popupitemindex = 0;
			}

			if (item.length <= this._popupitemindex) {
				this._popupitemindex = item.length - 1;
				this._popupitempreviousindex = this._popupitemindex;
			}

			if (pitem && pitem[this.parent._previousitem]) {
				this._item_focus(pitem[this.parent._previousitem], true);
			}

			if (popupmenu && popupmenu._is_popup() == true) {
				this._popupitemindex = -1;
			}
			else {
				this._popupitemindex = obj.index;
			}

			this._previousitem = obj.index;

			var rootComp = this._getRootComponent(this);
			if (rootComp instanceof nexacro.Menu) {
				var items = rootComp._items;
				if (items[rootComp._menuitemindex]) {
					items[rootComp._menuitemindex].selected = true;
					this._item_focus(items[rootComp._menuitemindex], true);
				}
			}
		}
		else {
			this._item_focus(obj, true);
		}
	};

	_pPopupMenu.on_notify_menuitem_onmouseleave = function (obj, e) {
		if (this._popupmenu && this._popupmenu._isVisible()) {
			this._item_focus(obj, true);
		}

		var rootComp = this._getRootComponent(this);
		rootComp._last_mouseleave_iteminfo.index = obj.index;
		rootComp._last_mouseleave_iteminfo.bindindex = obj._bindindex;
		rootComp._last_mouseleave_iteminfo.level = obj.parent.level;
	};

	_pPopupMenu.on_notify_menuitem_onlbuttondown = function (obj, e) {
		this._menuitemonmouseenter = obj;
		this._previousitem = obj.index;

		var popupmenu = this._popupmenu;
		if (popupmenu) {
			if (popupmenu._is_popup()) {
				if (this.beforeindex != obj.index) {
					this.beforeindex = obj.index;
				}
				popupmenu.cancelPopup();

				this._menuitemindex = obj.index;
				this._popupitemindex = -1;
			}
		}

		if (obj.itemexpand) {
			this._closeflag = true;
			this._showPopup(obj);

			if (this._getRootComponent(obj) instanceof nexacro.Menu) {
				this._getRootComponent(obj)._popupitemindex = obj.index;
			}
		}
		this._item_focus(obj, true);
	};

	_pPopupMenu.on_fire_onitemclick = function (obj, id, itemid, itemuserdata, index, level) {
		this._selected_itemindex = index;
		var evt = new nexacro.MenuClickEventInfo(obj, id, itemid, itemuserdata, index, level);
		this.onmenuclick._fireEvent(this, evt);
	};

	_pPopupMenu._on_bubble_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bScroll) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				event_bubbles = this.on_fire_user_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], this, refer_comp);

				var pThis = this._getFromComponent(this);

				if (event_bubbles !== true) {
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.defaultprevented)) {
						var ret = this.on_fire_sys_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], this, refer_comp);

						if (ret) {
							return false;
						}

						if (this.vscrollbar && this.vscrollbar.enable) {
							var vscrollbar = this.vscrollbar;
							var old_vpos = vscrollbar._pos;
							this._setVScrollDefaultAction(vscrollbar, wheelDeltaY);
							var new_vpos = vscrollbar._pos;
							if (old_vpos != new_vpos) {
								return false;
							}
						}

						if (nexacro.OS == "Mac OS") {
							if (this.hscrollbar && this.hscrollbar.enable) {
								var hscrollbar = this.hscrollbar;
								var old_hpos = hscrollbar._pos;
								this._setHScrollDefaultAction(hscrollbar, wheelDeltaX);
								var new_hpos = hscrollbar._pos;
								if (old_hpos != new_hpos) {
									return false;
								}
							}
						}

						return;
					}

					if (event_bubbles === false) {
						event_bubbles = undefined;
					}

					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.stoppropagation)) {
						if (this.parent && !this.parent._is_application) {
							var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

							canvasX = canvas[0];
							canvasY = canvas[1];

							if (this._is_subcontrol) {
								return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bScroll);
							}
							else {
								return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, this, refer_comp, bScroll);
							}
						}
					}
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				event_bubbles = this.on_fire_user_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], fire_comp, refer_comp);

				var pThis = this._getFromComponent(this);

				if (event_bubbles !== true) {
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.defaultprevented)) {
						var ret = this.on_fire_sys_onmousewheel(wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[0], fire_comp, refer_comp);

						if (ret) {
							return false;
						}

						if (this._isWheelScrollable(wheelDeltaY) && this.vscrollbar && this.vscrollbar.enable) {
							var vscrollbar = this.vscrollbar;
							var old_vpos = vscrollbar._pos;
							this._setVScrollDefaultAction(vscrollbar, wheelDeltaY);
							var new_vpos = vscrollbar._pos;
							if (old_vpos != new_vpos) {
								return false;
							}
						}

						if (nexacro.OS == "Mac OS") {
							if (this._isWheelScrollable(wheelDeltaX) && this.hscrollbar && this.hscrollbar.enable) {
								var hscrollbar = this.hscrollbar;
								var old_hpos = hscrollbar._pos;
								this._setHScrollDefaultAction(hscrollbar, wheelDeltaX);
								var new_hpos = hscrollbar._pos;
								if (old_hpos != new_hpos) {
									return false;
								}
							}
						}

						return;
					}
					if (!pThis.onmousewheel || (pThis.onmousewheel && !pThis.onmousewheel.stoppropagation)) {
						if (this.parent && !this.parent._is_application) {
							canvasX += this._adjust_left - this._scroll_left || 0;
							canvasY += this._adjust_top - this._scroll_top || 0;
							return this.parent._on_bubble_mousewheel(elem, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bScroll);
						}
					}
				}
			}
		}
	};

	_pPopupMenu.cancelPopup = function () {
		var _tempIndex = this.beforeindex;

		this._closePopup();

		if (this._items[_tempIndex] && this._items[_tempIndex].notexpand && (nexacro._enableaccessibility == false)) {
			var rootComp = this._getRootComponent(this);
			if (rootComp instanceof nexacro.Menu) {
				var items = rootComp._items;
				for (var i = 0, n = items.length; i < n; i++) {
					items[i].selected = false;
					this._item_focus(items[i], false);
				}
			}
		}
	};

	_pPopupMenu.isPopup = function () {
		return this._is_popup();
	};

	_pPopupMenu.on_fire_onpopup = function (obj) {
		if (this.onpopup && this.onpopup._has_handlers) {
			var evt = new nexacro.EventInfo(obj);
			evt.eventid = "onpopup";
			return this.onpopup._fireEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.trackPopup = function (x, y, align, bcapture) {
		if (this.isPopup()) {
			return;
		}

		this._selected_itemindex = -1;
		this._track_capture = bcapture === false ? false : true;

		this.on_apply_innerdataset();

		this._destroySpinButton();
		this._createSpinbutton();

		var alignPosition = this._getAlignPosition(x, y, align);
		if (!this._is_root_comp_menu()) {
			this._adjust_left = alignPosition[0];
			this._adjust_top = alignPosition[1];
		}

		this._reCalcSize();
		this.on_created();

		{

			var pos = 0;
			var form = this._getRootForm();
			if (form && form.vscrollbar) {
				pos = form.vscrollbar.pos;
			}
			y -= pos;
		}

		this._adjustPopupPosition(+x, +y, align);

		this._calcSpinButton();
		this._updateMenuItemPosition();

		this._closeflag = true;
		this._caller_comp = this.setFocus();
	};


	_pPopupMenu.trackPopupByComponent = function (obj, x, y, align, bcapture) {
		if (this.isPopup()) {
			return;
		}

		this._selected_itemindex = -1;
		this._track_capture = bcapture === false ? false : true;

		this._destroySpinButton();
		this._createSpinbutton();

		this._createPopupMenu();
		this._reCalcSize();
		this.on_created();


		this._track_on = true;
		var alignPosition = this._getAlignPosition(x, y, align);
		this._calcSpinButton();
		this._updateMenuItemPosition();

		var popup_left = alignPosition[0];
		var org_popup_top = alignPosition[1];
		var popup_top = org_popup_top;
		var popup_width = this._width;
		var popup_height = this._height;

		var popup_winpos_right = popup_left + popup_width;
		var popup_winpos_bottom = popup_top + popup_height + (obj._adjust_top);

		{

			var pos = 0;
			var form = this._getRootForm();
			if (form && form.vscrollbar) {
				pos = form.vscrollbar.pos;
			}

			popup_winpos_bottom -= pos;
		}

		var _window = this._getWindow();
		var win_width = _window.clientWidth;
		var win_height = _window.clientHeight;

		var frame = application.mainframe;
		var statusbar_height = 0;
		var titlebar_height = 0;
		if (frame && nexacro.Browser == "Runtime") {
			var frame_border = frame.currentstyle.border;
			var border_width = frame_border ? (frame_border._top_width + frame_border._bottom_width) : 0;
			statusbar_height = frame.statusbar ? frame.statusbar._client_height : 0;
			titlebar_height = frame.titlebar ? frame.titlebar._client_height : 0;
			win_height = win_height - (titlebar_height + statusbar_height) - border_width;
		}

		var width_gap = popup_winpos_right - win_width;
		if (popup_winpos_right > win_width && popup_left > width_gap) {
			popup_left = popup_left - width_gap;
		}

		if (popup_winpos_bottom > win_height) {
			var form = this._getRootForm();
			var pos = form.vscrollbar ? form.vscrollbar.pos : 0;
			var max_pos = form.vscrollbar ? form.vscrollbar.max : 0;
			popup_top = (win_height - obj._adjust_top - obj._adjust_height) - popup_height + popup_top + pos;

			if (popup_top < 0) {
				var p = nexacro._getElementPositionInFrame(obj.getElement());

				if (max_pos > 0) {
					popup_top = (win_height - popup_height - p.y) + statusbar_height;
					if (nexacro.Browser == "Runtime") {
						popup_top += titlebar_height + border_width;
					}
				}
				else {
					popup_top = -(org_popup_top + popup_height) + (win_height - obj._adjust_top);
				}
			}
		}

		this._track_on = true;

		var scale = this._getCumulativeZoomFactor() / 100.0;
		var elem = this.getElement();
		if (elem.setZoom) {
			elem.setZoom(scale * 100);
		}
		else if (nexacro.ScrollableContainerElement.prototype.setZoom) {
			nexacro.ScrollableContainerElement.prototype.setZoom.call(elem, scale * 100);
		}

		this._popupBy(obj, popup_left, popup_top, this._width, this._height);

		this._closeflag = true;
		this._caller_comp = this.setFocus();
	};

	_pPopupMenu.on_change_containerRect = function () {
	};


	_pPopupMenu._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_arrow = this._want_arrow;
		var want_tab = this._want_tab;
		this._want_tab = true;
		return {
			want_tab : want_tab, 
			want_return : true, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : want_arrow
		};
	};

	_pPopupMenu._get_apply_padding_size = function () {
		var padding = this.on_find_CurrentStyle_padding(this._pseudo);
		var padding_l = 0, padding_r = 0, padding_b = 0, padding_t = 0;
		if (padding) {
			padding_l = padding.left;
			padding_r = padding.right;
			padding_b = padding.bottom;
			padding_t = padding.top;
		}
		var _width = this._width + (padding_l + padding_r);
		var _height = this._height + (padding_t + padding_b);

		return {
			width : _width, 
			height : _height
		};
	};

	_pPopupMenu._loaded_expImage = function (imgurl, w, h) {
		this._expImage_width = w;
		this._expImage_height = h;

		if (this._is_popup()) {
			var _control_element = this.getElement();

			if (_control_element) {
				this._reCalcSize();
				this._updateMenuItemPosition();
				var size = this._get_apply_padding_size();
				_control_element.setElementSize(size.width, size.height);
			}
		}
	};

	_pPopupMenu._loaded_chkImage = function (imgurl, w, h) {
		this._chkImage_width = w;
		this._chkImage_height = h;

		if (this._is_popup()) {
			var _control_element = this.getElement();

			if (_control_element) {
				this._reCalcSize();
				this._updateMenuItemPosition();
				var size = this._get_apply_padding_size();
				_control_element.setElementSize(size.width, size.height);
			}
		}
	};

	_pPopupMenu._loaded_iconImage = function (imgurl, w, h) {
		this._iconImage_width = w;
		this._iconImage_height = h;

		if (this._is_popup()) {
			var _control_element = this.getElement();

			if (_control_element) {
				this._reCalcSize();
				this._updateMenuItemPosition();
				var size = this._get_apply_padding_size();
				_control_element.setElementSize(size.width, size.height);
			}
		}
	};

	_pPopupMenu._load_image = function (image, strflag) {
		var control_elem = this._control_element;
		if (control_elem) {
			var val = (image && image != "") ? image._value : "";
			if (val) {
				val = nexacro._getURIValue(val);
				val = nexacro._getImageLocation(val, this._getRefFormBaseUrl());

				var size;
				if (strflag == "exp") {
					size = nexacro._getImageSize(val, this._loaded_expImage, this, undefined, (image ? image._value : ""));
					if (size) {
						this._expImage_width = size.width;
						this._expImage_height = size.height;
					}
				}
				else if (strflag == "chk") {
					size = nexacro._getImageSize(val, this._loaded_chkImage, this, undefined, (image ? image._value : ""));
					if (size) {
						this._chkImage_width = size.width;
						this._chkImage_height = size.height;
					}
				}
				else if (strflag == "icon") {
					size = nexacro._getImageSize(val, this._loaded_iconImage, this, undefined, (image ? image._value : ""));
					if (size) {
						this._iconImage_width = size.width;
						this._iconImage_height = size.height;
					}
				}
				return val;
			}
		}
	};

	_pPopupMenu._getMaxTextSize = function (column) {
		var size = [];
		size[0] = 0;
		size[1] = 0;
		var ds = this._innerdataset;

		if (ds) {
			var items = this._items;
			if (items) {
				var len = items.length;
				var font = this.on_find_CurrentStyle_font(this._pseudo);
				var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
				for (var i = 0; i < len; i++) {
					var text = ds.getColumn(items[i].datarow, column);
					if (text === undefined) {
						break;
					}

					var size2 = nexacro._getTextSize2(letterspace, text, font, null, null, null, items[i]._rtldirection);

					size[0] = size2[0] > size[0] ? size2[0] : size[0];
					size[1] = size2[1] > size[1] ? size2[1] : size[1];
				}
			}
		}
		return size;
	};

	_pPopupMenu._getItem = function (index) {
		var items = this._items;
		var item_len = items.length;
		if (index >= 0 && items.length > 0) {
			return items[index];
		}
		return null;
	};

	_pPopupMenu._getViewItemQty = function (pThis, _item_length) {
		if (!pThis) {
			return;
		}

		var _val = 0;

		var _item_size = 0;
		var _view_size = this.height - this._spin_height - this._spin_height;

		for (var i = pThis._scrollIndex; i < _item_length; i++) {
			_item_size += pThis._buttonRect[i].height;
			_val = i - pThis._scrollIndex;

			if (_item_size > _view_size) {
				break;
			}
		}
		_view_size = null;
		_item_size = null;

		return _val;
	};

	_pPopupMenu._createPopupMenu = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._deletePopupMenu();
			var ds = this._innerdataset;
			if (ds && this.levelcolumn && this.captioncolumn && this.idcolumn) {
				var top = 0;
				var height = 0;

				if (this.currentstyle.itemheight && this.currentstyle.itemheight._value != "") {
					height = parseInt(this.currentstyle.itemheight._value, 10) | 0;
				}

				var index = 0, len = ds.getRowCount();
				var datarow = this.datarow;

				for (var rowlength = datarow; rowlength < len; rowlength++) {
					var level = ds.getColumn(rowlength, this.levelcolumn);
					var id = ds.getColumn(rowlength, this.idcolumn);
					var hotkey = ds.getColumn(rowlength, this.hotkeycolumn);

					if (!this._is_subcontrol && hotkey) {
						if (rowlength == len - 1 || level >= ds.getColumn(rowlength + 1, this.levelcolumn)) {
							this._set_hotkey(id, hotkey);
						}
					}

					if (level == this.level) {
						var text = ds.getColumn(rowlength, this.captioncolumn);
						if (text == "-") {
							var lineItem = new nexacro.StaticCtrl("-", "absolute", 0, top, 0, 1, null, null, this);
							lineItem.style.set_background("black");
							lineItem.createComponent();
							lineItem._bLine = true;
							top += 1;
							this._lineItems.push(lineItem);
							continue;
						}

						var popupmenuitem = new nexacro.PopupMenuItem("popup", "absolute", 0, top, 0, height, null, null, this);
						popupmenuitem._is_subcontrol = true;

						top += height;

						popupmenuitem._bindindex = rowlength;
						popupmenuitem.index = index++;
						popupmenuitem.datarow = rowlength;
						popupmenuitem.level = level;

						var enable = ds.getColumn(rowlength, this.enablecolumn);
						popupmenuitem.set_enable(enable == false || enable == "false" ? false : true);

						if (text) {
							popupmenuitem._setText(text);
						}

						var checkimg = ds.getColumn(rowlength, this.checkboxcolumn);
						if (checkimg) {
							popupmenuitem._setValue(nexacro._toBoolean(checkimg));
						}

						if (id) {
							popupmenuitem.id = id;
						}

						if (hotkey) {
							popupmenuitem._setHotkey(hotkey);
						}

						var userdata = ds.getColumn(rowlength, this.userdatacolumn);
						popupmenuitem.userdata = userdata;
						if (userdata) {
							popupmenuitem._setUserdata(userdata);
						}

						var icon = ds.getColumn(rowlength, this.iconcolumn);
						if (icon) {
							if (!nexacro._toBoolean(checkimg) && !popupmenuitem.imgctrl) {
								var imgctrl = popupmenuitem.imgctrl = new nexacro.ImageViewerCtrl("imgctrl", "absolute", 0, 0, 0, 0, null, null, popupmenuitem);
								popupmenuitem._setIcon(icon);
								popupmenuitem.imgctrl.createComponent();
							}
						}

						if (rowlength == ds.getRowCount() - 1) {
							popupmenuitem.itemexpand = false;
						}
						else {
							level = ds.getColumn(rowlength + 1, this.levelcolumn);
							if (level <= this.level) {
								popupmenuitem.itemexpand = false;
							}
							else {
								popupmenuitem._setExpandimage(this.on_find_CurrentStyle_expandimage(this._pseudo));
							}
						}

						popupmenuitem._setEventHandler("onlbuttonup", this.on_notify_menuitem_onclick, this);
						popupmenuitem._setEventHandler("onlbuttondown", this.on_notify_menuitem_onlbuttondown, this);

						if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
							popupmenuitem._setEventHandler("onmouseenter", this.on_notify_menuitem_onmouseenter, this);
							var rootComp = this._getRootComponent(this);
							if (rootComp.onmouseleave || rootComp instanceof nexacro.PopupMenu) {
								popupmenuitem._setEventHandler("onmouseleave", this.on_notify_menuitem_onmouseleave, this);
							}
						}

						popupmenuitem.createComponent();

						this._items.push(popupmenuitem);
						this._lineItems.push(popupmenuitem);

						popupmenuitem._real_visible = false;
						popupmenuitem._setRtlDirection(this._rtldirection);
					}
					else if (level < this.level) {
						break;
					}
				}
			}
		}
	};

	_pPopupMenu._deletePopupMenu = function () {
		if (!this._is_subcontrol) {
			var list = this._hot_key_list;
			var len = list.length;
			var _form = this._getMainForm();
			if (_form) {
				for (var i = 0; i < len; i++) {
					nexacro._unregisterHotkeyComp(_form, this, list[i].key);
				}
			}

			this._hot_key_list = [];
		}

		var items = this._items;
		if (items) {
			var len = items.length;
			for (var i = 0; i < len; i++) {
				items[i].destroyComponent();
				items[i] = null;
			}

			this._items = [];
		}
		var lineitems = this._lineItems;
		if (lineitems) {
			var len = lineitems.length;
			for (var i = 0; i < len; i++) {
				lineitems[i].destroyComponent();
				lineitems[i] = null;
			}

			this._lineItems = [];
		}
		if (this._popupmenu) {
			this._popupmenu.destroyComponent();
			this._popupmenu = null;
		}

		this._buttonRect = [];
		this._buttonRect_elem = [];
		this._scrollIndex = 0;
		this._is_spin_visible = false;
	};

	_pPopupMenu._createSpinbutton = function () {
		if (!this.spinupbutton) {
			this.spinupbutton = new nexacro.ImageButtonCtrl("spinupbutton", this.position, 0, 0, 0, 0, null, null, this);
			this.spinupbutton.createComponent();
			this.spinupbutton.set_visible(false);
			this.spinupbutton._setEventHandler("onclick", this.on_notify_spinup_onclick, this);
			this.spinupbutton.on_created();
			this.spinupbutton._is_focus_accept = false;
		}
		if (!this.spindownbutton) {
			this.spindownbutton = new nexacro.ImageButtonCtrl("spindownbutton", this.position, 0, 0, 0, 0, null, null, this);
			this.spindownbutton.createComponent();
			this.spindownbutton.set_visible(false);
			this.spindownbutton._setEventHandler("onclick", this.on_notify_spindown_onclick, this);
			this.spindownbutton.on_created();
			this.spindownbutton._is_focus_accept = false;
		}

		this._is_spin_visible = false;
		this._scrollIndex = 0;
	};

	_pPopupMenu._destroySpinButton = function () {
		if (this.spinupbutton) {
			this.spinupbutton.destroy();
			this.spinupbutton = null;
		}
		if (this.spindownbutton) {
			this.spindownbutton.destroy();
			this.spindownbutton = null;
		}
	};

	_pPopupMenu._showPopup = function (obj) {
		if (this._getPopupType() == "none") {
			return;
		}

		if (this._innerdataset && this.levelcolumn && this.captioncolumn && this.idcolumn && obj.itemexpand == true && this.visible) {
			var popupmenu = this._popupmenu;
			if (!popupmenu) {
				popupmenu = this._popupmenu = new nexacro.PopupMenuCtrl("popup", "absolute", 0, 0, 0, 0, null, null, this);

				popupmenu._scrollIndex = 0;

				popupmenu.level = this.level + 1;
				popupmenu.datarow = obj.datarow + 1;
				popupmenu.selfpopup = this.selfpopup;
				popupmenu._closeflag = this._closeflag;
				popupmenu._is_subcontrol = true;

				popupmenu._track_capture = false;
				popupmenu.parentPopupMenu = this;
				popupmenu._is_loading = true;
				popupmenu.setInnerDataset(this._innerdataset);

				popupmenu.set_captioncolumn(this.captioncolumn);
				popupmenu.set_checkboxcolumn(this.checkboxcolumn);
				popupmenu.set_hotkeycolumn(this.hotkeycolumn);
				popupmenu.set_idcolumn(this.idcolumn);
				popupmenu.set_levelcolumn(this.levelcolumn);
				popupmenu.set_userdatacolumn(this.userdatacolumn);
				popupmenu.set_enablecolumn(this.enablecolumn);
				popupmenu.set_iconcolumn(this.iconcolumn);
				popupmenu._is_loading = true;

				if (this.currentstyle.checkboximage) {
					popupmenu.style.set_checkboximage(this.currentstyle.checkboximage._value);
				}
				if (this.currentstyle.expandimage) {
					popupmenu.style.set_expandimage(this.currentstyle.expandimage._value);
				}

				popupmenu.createComponent();

				popupmenu.currentstyle.popuptype = this.currentstyle.popuptype;
				popupmenu._setRtlDirection(this._rtldirection);

				popupmenu._trackPopup(obj, "horizontal");
			}
			else {
				popupmenu.datarow = obj.datarow + 1;

				if (this.selfpopup == true) {
					popupmenu.style = this.style;
					popupmenu.currentstyle = this.currentstyle;
				}

				if (this._closeflag) {
					popupmenu._trackPopup(obj, "horizontal");
				}
			}
		}
	};

	_pPopupMenu._set_hotkey = function (id, hotkey) {
		var hkey = this.hotkey;
		var _hkey = this._hotkey;

		this._hotkey = null;

		this.set_hotkey(hotkey);

		var item_hk = this._hotkey;

		this.hotkey = hkey ? hkey : null;
		this._hotkey = _hkey ? _hkey : null;

		var list = {
			id : id, 
			key : item_hk
		};
		this._hot_key_list.push(list);
	};

	_pPopupMenu._processHotkey = function (keycode, altKey, ctrlKey, shiftKey, obj) {
		var autohotkey = this.on_find_CurrentStyle_autohotkey(this.pseudo);
		if (autohotkey && nexacro._toBoolean(autohotkey._value)) {
			var list = this._hot_key_list;
			var len = list.length;
			var key = null;
			var modifykey = null;
			for (var i = 0; i < len; i++) {
				key = list[i].key;
				if (key._keycode == keycode) {
					modifykey = key._modifierkey;
					if (altKey == ((modifykey & 0x02) == 0x02) && ctrlKey == ((modifykey & 0x01) == 0x01) && shiftKey == ((modifykey & 0x04) == 0x04)) {
						this.on_fire_onitemclick(this, "onmenuclick", list[i].id, "", list[i].index, list.level);
						return;
					}
				}
			}
		}

		nexacro.Component.prototype._processHotkey.call(this, keycode, altKey, ctrlKey, shiftKey, obj);
	};

	_pPopupMenu._adjustPopupPosition = function (x, y, align, obj) {
		var alignPosition = this._getAlignPosition(x, y, align);

		var popup_left = alignPosition[0] < 0 ? 0 : alignPosition[0];
		var popup_top = alignPosition[1] < 0 ? 0 : alignPosition[1];
		var popup_width = this._width;
		var popup_height = this._height;

		var popup_winpos_right = popup_left + popup_width;
		var popup_winpos_bottom = popup_top + popup_height;

		var _window = this._getWindow();
		var win_width = _window.clientWidth;
		var win_height = _window.clientHeight;

		var width_gap = popup_winpos_right - win_width;
		if (popup_winpos_right > win_width && popup_left > width_gap) {
			popup_left = popup_left - width_gap;
		}

		if (popup_winpos_bottom > win_height) {
			popup_top = win_height - popup_height;
		}

		this._track_on = true;

		var scale = this._getCumulativeZoomFactor() / 100.0;
		var elem = this.getElement();
		if (elem.setZoom) {
			elem.setZoom(scale * 100);
		}
		else if (nexacro.ScrollableContainerElement.prototype.setZoom) {
			nexacro.ScrollableContainerElement.prototype.setZoom.call(elem, scale * 100);
		}

		this._popup(popup_left, popup_top, popup_width, popup_height);
	};

	_pPopupMenu._callbackFromDataset = function (obj, e) {
		this._createPopupMenu();
	};

	_pPopupMenu._getMainFrame = function () {
		var pThis = this;
		while (pThis && !pThis._is_main) {
			pThis = pThis.parent;
		}
		return pThis;
	};

	_pPopupMenu._trackPopup = function (obj, direction, x, y) {
		this._createPopupMenu();
		this._reCalcSize();
		this.on_created();

		var _left, _top, _width, _height;
		var parent = this.parent;
		var mainframe = this._getMainFrame();

		var s = nexacro._getElementPositionInFrame(mainframe.getElement());
		var padding = this.on_find_CurrentStyle_padding(this._pseudo);
		var padding_l = 0, padding_r = 0, padding_b = 0, padding_t = 0;
		if (padding) {
			padding_l = padding.left;
			padding_r = padding.right;
			padding_b = padding.bottom;
			padding_t = padding.top;
		}

		var scale = this._getCumulativeZoomFactor() / 100.0;

		var p_width, p_height, p;

		var popup_width = this._width;
		var popup_height = this._height;

		var curr_frame = mainframe;
		if (!curr_frame) {
			var win = this._getWindow();
			var frame = win.frame;
			var childframe = frame;
			if (frame instanceof nexacro.MainFrame) {
				childframe = frame.frame;
			}
			if (!childframe) {
				childframe = frame;
			}

			curr_frame = childframe;
		}

		var bodyWidth = s.x + curr_frame._adjust_width;
		var bodyHeight = s.y + curr_frame._adjust_height;


		_width = popup_width + padding_l + padding_r;
		_height = popup_height + padding_b + padding_t;

		if (direction == "horizontal") {
			p = nexacro._getElementPositionInFrame(parent.getElement());

			var mainframe = this.getMainframe();
			if (mainframe) {
				var control_elem = mainframe._control_element;

				if (this._attached_comp._isRtl()) {
					p.x = control_elem.client_width - parent._width - p.x;
				}
			}

			p_width = parent._client_width;
			p_height = parent._client_height;
			_left = p_width;
			_top = 0;
			if (!y) {
				var tmp = p.y + obj._adjust_top + popup_height;
				if (tmp > bodyHeight) {
					_top = bodyHeight - tmp;
				}

				_top = _top * scale;
			}
			else {
				_top = y;
			}

			if (!x) {
				var px = p.x;
				var px_width = px + p_width;
				if (px_width + popup_width > bodyWidth) {
					if (px - popup_width > 0) {
						_left = -popup_width;
					}
				}

				_left = _left * scale;
			}
			else {
				_left = x;
			}
		}
		else {
			p = nexacro._getElementPositionInFrame(obj.getElement());

			var mainframe = this.getMainframe();
			if (mainframe) {
				var control_elem = mainframe._control_element;

				if (this._attached_comp._isRtl()) {
					p.x = control_elem.client_width - parent._width - p.x;
				}
			}

			p_width = 0;

			p_height = obj._adjust_height;
			_left = 0, _top = p_height;

			if (!y) {
				var tmp = p.y + p_height + popup_height;
				if (tmp > bodyHeight) {
					if (s.y < (p.y - popup_height)) {
						_top = -popup_height;
					}
					else {
						_top = 10;
					}
				}

				_top = _top * scale;
			}
			else {
				_top = y;
			}

			if (!x) {
				var px = p.x;
				if (px + popup_width > bodyWidth) {
					_left = bodyWidth - px - popup_width;
				}
				else if (px < 0) {
					_left -= px;
				}

				_left = _left * scale;
			}
			else {
				_left = x;
			}
		}

		var elem = this.getElement();
		if (elem.setZoom) {
			elem.setZoom(scale * 100);
		}
		else if (nexacro.ScrollableContainerElement.prototype.setZoom) {
			nexacro.ScrollableContainerElement.prototype.setZoom.call(elem, scale * 100);
		}

		if (this._getPopupType() == "center") {
			var left = (curr_frame._adjust_width / 2) - (_width / 2);
			var top = (curr_frame._adjust_height / 2) - (_height / 2);
			this._adjustPopupPosition(left, top);
		}
		else {
			this._track_on = true;
			this._popupBy(obj, _left, _top, _width, _height);
		}

		this._destroySpinButton();
		this._createSpinbutton();

		this._calcSpinButton();
		this._updateMenuItemPosition();

		this.on_apply_pseudo();
	};

	_pPopupMenu._getMenuObj = function () {
		var p = this.parent;
		while (!(p instanceof nexacro.Menu)) {
			p = p.parent;
		}

		return p;
	};

	_pPopupMenu.iconimgwidth = 0;

	_pPopupMenu._is_root_comp_menu = function () {
		var is_root_menu = false;
		var comp = this.parent;
		while (comp) {
			if (comp instanceof nexacro.Menu || comp instanceof nexacro.Form) {
				if (comp instanceof nexacro.Menu) {
					is_root_menu = true;
				}
				break;
			}

			comp = comp.parent;
		}

		return is_root_menu;
	};
	_pPopupMenu._reCalcSize = function () {
		var ds = this._innerdataset;
		if (ds && this.captioncolumn) {
			var items = this._items;
			if (!items || items.length == 0) {
				return;
			}

			var len = items.length;
			var size = this._getMaxTextSize(this.captioncolumn);
			this.text_height = size[1];
			var textwidth = size[0];
			var hotkeywidth = 0;
			var rootComp = this._getRootComponent(this);
			var chkimgwidth = 0, expimgwidth = 0, expimgheight = 0, iconimgwidth = 0;

			var curstyle = this.currentstyle;
			var h = this.on_find_CurrentStyle_itemheight(this._pseudo);
			var item_h = h ? parseInt(h._value, 10) : 20;

			var _expandimage = rootComp.on_find_CurrentStyle_expandimage(this._pseudo);
			if (_expandimage) {
				expimgwidth = rootComp._expImage_width ? rootComp._expImage_width : item_h;
				expimgheight = rootComp._expImage_height ? rootComp._expImage_height : item_h;
				if (expimgwidth == undefined) {
					expimgwidth = 0;
				}
				if (expimgheight == undefined) {
					expimgheight = 0;
				}
			}

			if (this.hotkeycolumn) {
				size = this._getMaxTextSize(this.hotkeycolumn);
				hotkeywidth = size[0];
			}

			for (var i = 0; i < len; i++) {
				if (items[i].value) {
					if (curstyle.checkboximage) {
						chkimgwidth = item_h;
					}
					break;
				}
			}

			for (var i = 0; i < len; i++) {
				if (items[i].icon) {
					iconimgwidth = item_h;
					break;
				}
			}

			var itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo);
			var border = this.on_find_CurrentStyle_border(this._pseudo);

			var itempadding_l = 0, itempadding_r = 0;
			if (itempadding) {
				itempadding_l = itempadding.left;
				itempadding_r = itempadding.right;
			}

			var border_left = 0, border_top = 0, border_right = 0, border_bottom = 0;
			if (border) {
				border_left = border._left_width;
				border_top = border._top_width;
				border_right = border._right_width;
				border_bottom = border._bottom_width;
			}

			var _default_gap = 20;

			var width = itempadding_l + chkimgwidth + iconimgwidth + textwidth + (hotkeywidth == 0 ? 0 : _default_gap + hotkeywidth) + item_h + expimgwidth + itempadding_r;

			var lineCnt = 0;
			for (var i = 0, n = this._lineItems.length; i < n; i++) {
				var item = this._lineItems[i];
				if (item._bLine) {
					lineCnt++;
				}
			}

			var height = (item_h * len) + lineCnt;

			var mainframe = this._getMainFrame();

			var curr_frame = mainframe;

			if (!curr_frame) {
				var win = this._getWindow();
				var frame = win.frame;
				var childframe = frame;
				if (frame instanceof nexacro.MainFrame) {
					childframe = frame.frame;
				}
				if (!childframe) {
					childframe = frame;
				}

				curr_frame = childframe;
			}

			var bodyHeight = curr_frame._adjust_height;
			var resize_height = height + border_top + border_bottom;
			var menu_bottom = 0;
			var comp = this.parent;
			var form = comp._getForm();
			var form_top = 0;
			while (form) {
				if (form._is_form) {
					form_top += form._adjust_top;
				}
				form = form.parent;

				if (form instanceof nexacro.ChildFrame || form instanceof nexacro.MainFrame) {
					break;
				}
			}

			var is_root_menu = false;
			while (comp) {
				if (comp instanceof nexacro.Menu || comp instanceof nexacro.Form) {
					if (comp instanceof nexacro.Menu) {
						is_root_menu = true;
					}
					menu_bottom = form_top + comp._adjust_top + comp._adjust_height;
					break;
				}

				comp = comp.parent;
			}

			if (!is_root_menu) {
				menu_bottom = resize_height;

				if (menu_bottom > bodyHeight) {
					resize_height = bodyHeight;
				}
			}
			else {
				if (resize_height > (bodyHeight - menu_bottom)) {
					if (form_top + comp._adjust_top < (bodyHeight - menu_bottom)) {
						resize_height = bodyHeight - menu_bottom;
					}
					else {
						if (form_top + comp._adjust_top < resize_height) {
							resize_height = form_top + comp._adjust_top;
						}
					}
				}
			}

			this._width = width + border_left + border_right;
			if (!this.visible) {
				this.resize(this._width, resize_height);
			}

			var _item_top = 0;

			var _buttonRect = this._buttonRect;
			var _buttonRect_elem = this._buttonRect_elem;
			var _buttonRect_line = this._buttonRect_line;

			if (_buttonRect[0]) {
				for (var i = 0; i < this._scrollIndex; i++) {
					if (_buttonRect[i]) {
						_item_top -= _buttonRect[i].height;
					}
				}

				if (this._is_spin_visible) {
					if (this._scrollIndex == 0) {
						_item_top = this._spin_height;
					}
					else {
						_item_top += this._spin_height;
					}
				}
			}

			var spin_flag = false;
			for (var i = 0, n = this._lineItems.length; i < n; i++) {
				var item = this._lineItems[i];
				if (item._bLine) {
					var rect = {
						left : 0, 
						top : 0, 
						right : 0, 
						bottom : 0, 
						width : 0, 
						height : 0
					};
					rect.left = 0;
					rect.top = _item_top;
					rect.right = this._width;
					rect.bottom = _item_top + 1;
					rect.width = this._width;
					rect.height = 1;
					_buttonRect[i] = rect;

					var rect1 = {
						textWidth : 0, 
						hotkeyWidth : 0, 
						itemHeight : 0, 
						defaultGap : 0
					};
					rect1.textWidth = textwidth;
					rect1.hotkeyWidth = hotkeywidth;
					rect1.itemHeight = item_h;
					rect1.defaultGap = _default_gap;
					_buttonRect_elem[i] = rect1;

					_item_top += 1;
				}
				else {
					item.chkwidth = chkimgwidth;
					item.iconimgwidth = iconimgwidth;
					item.textwidth = textwidth;
					item.hotkeywidth = hotkeywidth;

					item.expwidth = expimgwidth;
					item.expheight = expimgheight;

					var rect = {
						left : 0, 
						top : 0, 
						right : 0, 
						bottom : 0, 
						width : 0, 
						height : 0
					};
					rect.left = 0;
					rect.top = _item_top;
					rect.right = this._width;
					rect.bottom = _item_top + item_h;
					rect.width = this._width;
					rect.height = item_h;
					_buttonRect[i] = rect;


					var rect1 = {
						textWidth : 0, 
						hotkeyWidth : 0, 
						itemHeight : 0, 
						defaultGap : 0
					};
					rect1.textWidth = textwidth;
					rect1.hotkeyWidth = hotkeywidth;
					rect1.itemHeight = item_h;
					rect1.defaultGap = _default_gap;
					_buttonRect_elem[i] = rect1;


					if (nexacro._enableaccessibility) {
						item._updateAccessibilityLabel(item);
					}
					_item_top += item_h;

					if (!spin_flag && this._scrollIndex > 0 && _item_top >= 0) {
						spin_flag = true;
					}
				}
			}
		}
	};

	_pPopupMenu._calcSpinButton = function () {
		if (!this.spindownbutton && !this.spinupbutton) {
			return;
		}

		var itempadding = this.on_find_CurrentStyle_itempadding(this._pseudo);
		var border = this.on_find_CurrentStyle_border(this._pseudo);

		var gap_height = (itempadding ? itempadding.bottom : 0) + (border ? border._bottom_width : 0);

		var _buttonRect = this._buttonRect;
		var len = _buttonRect.length;
		if (this._spin_height > 0 && len > 0 && _buttonRect[len - 1].bottom - gap_height > this._adjust_height || this._is_spin_visible) {
			this.spinupbutton.set_visible(true);
			this.spinupbutton.move(0, 0, this._client_width, this._spin_height);

			var bottom = 0;
			var spindownbutton_top = 0;
			var top = this._spin_height;
			var _items = this._lineItems;
			var len = _items ? _items.length : 0;
			if (this._is_spin_visible) {
				top = 0;
			}

			for (var i = 0; i < len; i++) {
				var buttonRect = _buttonRect[i];
				if (buttonRect.bottom > this._adjust_height - this._spin_height * (top == 0 ? 1 : 2)) {
					if (bottom == 0) {
						bottom = this._adjust_height;
					}
				}

				if (bottom == 0) {
					buttonRect.top += top;
					buttonRect.bottom += top;
				}
				else {
					buttonRect.top = bottom;
					buttonRect.bottom = bottom + top;
				}
			}

			this.spindownbutton.set_visible(true);
			this.spindownbutton.move(0, this._adjust_height - this._spin_height - gap_height, this._client_width, this._spin_height);

			this._is_spin_visible = true;
		}
		else {
			this._is_spin_visible = false;
			this.spinupbutton.set_visible(false);
			this.spindownbutton.set_visible(false);
		}
	};

	_pPopupMenu._updateMenuItemPosition = function () {
		var _buttonRect = this._buttonRect;
		var _buttonRect_elem = this._buttonRect_elem;
		var _lineitems = this._lineItems;
		var len = _lineitems ? _lineitems.length : 0;
		for (var i = 0; i < len; i++) {
			var lineitem = _lineitems[i];
			var buttonRect = _buttonRect[i];
			lineitem.move(buttonRect.left, buttonRect.top, buttonRect.width, buttonRect.height);

			var buttonRect_elem = _buttonRect_elem[i];
			if (lineitem instanceof nexacro.PopupMenuItem) {
				lineitem._updateElementPositions(buttonRect_elem.textWidth, buttonRect_elem.hotkeyWidth, buttonRect_elem.itemHeight, buttonRect_elem.defaultGap);
			}
		}
	};

	_pPopupMenu._getAlignPosition = function (x, y, align) {
		if (align) {
			var width = this._width;
			var height = this._height;
			var popup_align = align.split(/\s+/);
			var align_len = popup_align.length;
			var horizon = parseInt(x, 10) | 0;
			var vertical = parseInt(y, 10) | 0;
			switch (align_len) {
				case 0:
					break;
				case 1:
					if (popup_align[0] == "left") {
						x = horizon - width;
					}
					else if (popup_align[0] == "center") {
						x = horizon - (width / 2);
					}
					else if (popup_align[0] == "top") {
						y = vertical - height;
					}
					else if (popup_align[0] == "middle") {
						y = vertical - (height / 2);
					}
					break;
				case 2:
					if (popup_align[0] == "left" || popup_align[0] == "center" || popup_align[0] == "right") {
						if (popup_align[0] == "left") {
							x = horizon - width;
						}
						else if (popup_align[0] == "center") {
							x = horizon - (width / 2);
						}
					}
					else if (popup_align[0] == "top" || popup_align[0] == "middle" || popup_align[0] == "bottom") {
						if (popup_align[0] == "top") {
							y = vertical - height;
						}
						else if (popup_align[0] == "middle") {
							y = vertical - (height / 2);
						}
					}

					if (popup_align[1] == "left" || popup_align[1] == "center" || popup_align[1] == "right") {
						if (popup_align[1] == "left") {
							x = horizon - width;
						}
						else if (popup_align[1] == "center") {
							x = horizon - (width / 2);
						}
					}
					else if (popup_align[1] == "top" || popup_align[1] == "middle" || popup_align[1] == "bottom") {
						if (popup_align[1] == "top") {
							y = vertical - height;
						}
						else if (popup_align[1] == "middle") {
							y = vertical - (height / 2);
						}
					}
					break;
				default:
					break;
			}
		}
		return [x, y];
	};

	_pPopupMenu.set_visible = function (v) {
		if (this._track_on) {
			nexacro.PopupComponent.prototype.set_visible.apply(this, arguments);
		}
	};
	_pPopupMenu._process_mousemove = function (obj, e) {
		if (obj && obj.enable) {
			this.on_notify_menuitem_onmouseenter(obj, e);
		}
	};
	_pPopupMenu._closePopup = function () {
		var popupmenu = this._popupmenu;
		if (popupmenu) {
			popupmenu._closePopup();
			popupmenu._destroySpinButton();

			if (this._innerdataset) {
				this._innerdataset._removeEventHandler("onrowposchanged", this._callbackFromDataset, this);
				this._innerdataset._removeEventHandler("oncolumnchanged", this._callbackFromDataset, this);
				this._innerdataset._removeEventHandler("onrowsetchanged", this._callbackFromDataset, this);
			}
		}

		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
		}

		var items = this._item_find(this);
		if (nexacro._enableaccessibility) {
			this._item_focus(items[this._popupitemindex], false);
			this._popupitemindex = -1;
		}
		else {
			var itemLen = items.length;
			for (var i = 0; i < itemLen; i++) {
				this._item_focus(items[i], false);
			}
			this._popupitemindex = -1;
		}

		this.set_visible(false);
		this._track_on = false;
		this._closeflag = false;
	};

	_pPopupMenu.closePopup = _pPopupMenu._closePopup;

	_pPopupMenu._closeAllPopup = function () {
		this._closePopup();

		var parent = this.parent;
		if (parent) {
			if (parent instanceof nexacro.Menu) {
				if (parent._is_menu_click) {
					parent._is_menu_click = false;
				}
			}
		}
	};

	_pPopupMenu.on_fire_oncloseup = function (obj) {
		if (this.oncloseup && this.oncloseup._has_handlers) {
			var evt = new nexacro.MenuCloseUpEventInfo(obj, "oncloseup", (this._selected_itemindex >= 0));
			evt.eventid = "oncloseup";
			return this.oncloseup._fireEvent(this, evt);
		}
		return false;
	};

	_pPopupMenu.on_notify_spinup_onclick = function (obj, e) {
		this._spinup();
	};

	_pPopupMenu.on_notify_spindown_onclick = function (obj, e) {
		this._spindown();
	};

	_pPopupMenu._spinup = function () {
		if (this._scrollIndex > 0) {
			if (this._popupmenu) {
				this._popupmenu._closePopup();
			}

			this._scrollIndex--;

			this._reCalcSize();
			this._calcSpinButton();
			this._updateMenuItemPosition();
		}
	};

	_pPopupMenu._spindown = function () {
		var _buttonRect = this._buttonRect;
		var len = _buttonRect ? _buttonRect.length : 0;
		if (len == 0) {
			return;
		}

		if (_buttonRect[len - 1].bottom > this._client_height) {
			if (this._popupmenu) {
				this._popupmenu._closePopup();
			}

			this._scrollIndex++;

			this._reCalcSize();
			this._calcSpinButton();
			this._updateMenuItemPosition();
		}
	};

	_pPopupMenu._item_focus = function (obj, bflag) {
		if (obj) {
			if (nexacro._enableaccessibility) {
				if (bflag) {
					if (obj instanceof nexacro.PopupMenuItem) {
						obj._on_focus(false);
					}
					else {
						obj._on_focus(true);
					}
				}
				else {
					var _window = this._getWindow();
					if (_window) {
						_window._removeFromCurrentFocusPath(obj, true);
					}
				}
			}

			if (obj.on_apply_mouseover) {
				var _items = obj.parent ? obj.parent._items : null;
				var _items_length = _items ? _items.length : -1;

				for (var i = 0; i < _items_length; i++) {
					_items[i].on_apply_mouseover(false);
				}
				_items_length = null;
				_items = null;

				obj.on_apply_mouseover(bflag);
			}
		}
	};

	_pPopupMenu._popupmenu_visible = function (obj) {
		if (obj._popupmenu == null || obj._popupmenu.visible == false) {
			return false;
		}
		return true;
	};

	_pPopupMenu._item_find = function (obj) {
		if (obj._popupmenu == null || obj._popupmenu.visible == false) {
			return obj._items;
		}
		return obj._popupmenu._items;
	};

	_pPopupMenu._popupmenu_find = function (obj) {
		var pThis = obj;

		while (pThis) {
			if (pThis._popupmenu === null || pThis._popupmenu.visible == false) {
				break;
			}
			var pThis = pThis._popupmenu;
		}
		return pThis;
	};

	_pPopupMenu._popupmenuitem_extend = function (obj) {
		return obj.itemexpand;
	};

	_pPopupMenu._popupmenuitem_find = function (obj) {
		var pThis = obj._overedobj;

		while (pThis) {
			if (pThis._overedobj === null) {
				break;
			}
			var pThis = pThis._overedobj;
		}

		return pThis;
	};

	_pPopupMenu._popupmenuitem_mouseover = function (keycode, pThis, item) {
		var rootComp = this._getRootComponent(this);

		var _item = rootComp._menuitemonmouseenter;
		var _flag = _item ? (_item._pseudo != "mouseover") || (_item != item[rootComp._popupitemindex]) : false;

		var E = nexacro.Event;

		if (_item && _flag && !(pThis.parent instanceof nexacro.FormBase)) {
			var _popupexpand;

			if (!(pThis.parent instanceof nexacro.Menu)) {
				pThis = pThis.parent;
				pThis._popupmenu = null;

				item = rootComp._item_find(pThis);

				var _itemlength = item ? item.length : -1;

				for (var i = 0; i < _itemlength; i++) {
					if (item[i]._pseudo == "mouseover") {
						rootComp._popupitemindex = i;
						break;
					}
				}
				_itemlength = null;

				if (item[rootComp._popupitemindex] && (keycode == E.KEY_RIGHT)) {
					_popupexpand = rootComp._popupmenuitem_extend(item[rootComp._popupitemindex]);
				}
			}
			else {
				_popupexpand = false;
			}

			if (keycode == E.KEY_RIGHT) {
				return {
					pThis : pThis, 
					popupexpand : _popupexpand, 
					item : item
				};
			}
			_popupexpand = null;
		}
		_flag = null;
		_item = null;

		if (keycode == E.KEY_ENTER) {
			return pThis;
		}
	};

	delete _pPopupMenu;

	nexacro.PopupMenuCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.PopupMenu.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
		this.level = 1;
		this._previousitem = 0;
	};
	var _pPopupMenuCtrl = nexacro.PopupMenuCtrl.prototype = nexacro._createPrototype(nexacro.PopupMenu, nexacro.PopupMenuCtrl);

	nexacro._setForControlStyleFinder(_pPopupMenuCtrl);

	delete _pPopupMenuCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.Spin) {
	nexacro.SpinEventInfo = function (obj, id, beforeText, beforeValue, afterText, afterValue, isUp) {
		this.id = this.eventid = id || "onspin";
		this.fromobject = this.fromreferenceobject = obj;

		this.pretext = beforeText;
		this.prevalue = beforeValue;
		this.posttext = afterText;
		this.postvalue = afterValue;
		this.up = isUp;
	};

	var _pSpinEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.SpinEventInfo);
	nexacro.SpinEventInfo.prototype = _pSpinEventInfo;
	_pSpinEventInfo._type_name = "SpinEventInfo";

	delete _pSpinEventInfo;
	_pSpinEventInfo = null;

	nexacro.Spin_Style = function (target, idx) {
		nexacro.Style.call(this);

		if (target) {
			this._target = target;
		}

		this.buttonalign = null;
		this.buttonsize = null;
		this.accessibility = null;
		this.displaynulltextcolor = null;
	};

	var _pSpinStyle = nexacro._createPrototype(nexacro.Style, nexacro.Spin_Style);
	nexacro.Spin_Style.prototype = _pSpinStyle;

	eval(nexacro._createAlignAttributeEvalStr("_pSpinStyle", "buttonalign"));
	eval(nexacro._createValueAttributeEvalStr("_pSpinStyle", "buttonsize"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pSpinStyle", "accessibility"));
	eval(nexacro._createColorAttributeEvalStr("_pSpinStyle", "displaynulltextcolor"));

	_pSpinStyle.__custom_emptyObject = function () {
		this.buttonalign = null;
		this.buttonsize = null;
		this.displaynulltextcolor = null;
	};

	_pSpinStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.buttonalign && !this.buttonalign._is_empty) {
			val += "buttonalign:" + this.buttonalign._value + "; ";
		}
		if (this.buttonsize && !this.buttonsize._is_empty) {
			val += "buttonsize:" + this.buttonsize._value + "; ";
		}
		if (this.accessibility && !this.accessibility._is_empty) {
			val += "accessibility:" + this.accessibility._value + "; ";
		}
		if (this.displaynulltextcolor && !this.displaynulltextcolor._is_empty) {
			val += "displaynulltextcolor" + this.displaynulltextcolor._value + "; ";
		}
		return val;
	};

	nexacro.Spin_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.buttonalign = null;
		this.buttonsize = null;
		this.accessibility = null;
		this.displaynulltextcolor = null;
	};

	var _pSpinCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Spin_CurrentStyle);
	nexacro.Spin_CurrentStyle.prototype = _pSpinCurrentStyle;

	_pSpinCurrentStyle.__get_custuom_style_value = _pSpinStyle.__get_custuom_style_value;
	_pSpinCurrentStyle.__custom_emptyObject = _pSpinStyle.__custom_emptyObject;

	delete _pSpinStyle;
	delete _pSpinCurrentStyle;

	_pSpinStyle = null;
	_pSpinCurrentStyle = null;

	nexacro.Spin = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.spinupbutton = null;
		this.spindownbutton = null;
		this.spinedit = null;

		this.type = 0;
		this.enable = true;
		this.value = undefined;
		this.text = "";
		this.readonly = false;
		this.displaynulltext = "";
		this.increment = 1;
		this.max = 10000;
		this.min = 0;
		this.displaymask = "9,999.9999999";
		this.circulation = false;
		this.displaycomma = false;
		this.textchangebindflag = false;
		this.usecontextmenu = true;
		this.usesoftkeyboard = true;

		this._old_value = undefined;
		this._accessibility_role = "spin";
		this._want_arrow = false;
		this._has_inputElement = true;
		this._edit_base_api = null;
		this.locale = "";

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onchanged" : 1, 
			"onspin" : 1, 
			"canchange" : 1, 
			"oneditclick" : 1, 
			"ontextchange" : 1, 
			"ontextchanged" : 1, 
			"cancharchange" : 1, 
			"onchar" : 1, 
			"oncontextmenu" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};
	};

	var _pSpin = nexacro._createPrototype(nexacro.Component, nexacro.Spin);
	nexacro.Spin.prototype = _pSpin;

	nexacro.Spin._default_buttonalign = nexacro._getCachedStyleObj("buttonalign", "right");
	nexacro.Spin._default_buttonsize = nexacro._getCachedStyleObj("buttonsize", "-1");

	_pSpin._type_name = "Spin";

	_pSpin.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var align = this.on_find_CurrentStyle_align(pseudo);

		if (curstyle.align != align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}
		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.spinedit ? this.spinedit.on_find_CurrentStyle_color(pseudo) || this.on_find_CurrentStyle_color(pseudo) : this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}
		var buttonalign = this.on_find_CurrentStyle_buttonalign(pseudo);
		if (curstyle.buttonalign != buttonalign) {
			curstyle.buttonalign = buttonalign;
			this.on_apply_style_buttonalign(buttonalign);
		}
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		if (curstyle.buttonsize != buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(buttonsize);
		}

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}

		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(pseudo);
		if (displaynulltextcolor != curstyle.displaynulltextcolor) {
			curstyle.displaynulltextcolor = displaynulltextcolor;
			this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
		}
	};

	_pSpin.on_apply_custom_class = function () {
		if (this.spinupbutton) {
			this.spinupbutton.on_apply_prop_class();
		}
		if (this.spindownbutton) {
			this.spindownbutton.on_apply_prop_class();
		}
		if (this.spinedit) {
			this.spinedit.on_apply_prop_class();
		}
	};

	_pSpin.on_create_custom_style = function () {
		return new nexacro.Spin_Style(this);
	};

	_pSpin.on_create_custom_currentStyle = function () {
		return new nexacro.Spin_CurrentStyle(this);
	};

	_pSpin.on_find_CurrentStyle_buttonalign = function (pseudo) {
		var align = this._find_pseudo_obj("buttonalign", pseudo, "align");
		return (align) ? align : nexacro.Spin._default_buttonalign;
	};

	_pSpin.on_find_CurrentStyle_buttonsize = function (pseudo) {
		var size = this._find_pseudo_obj("buttonsize", pseudo);
		return (size) ? size : nexacro.Spin._default_buttonsize;
	};

	_pSpin.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		var displaynulltextcolor = this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_pseudo_obj("color", pseudo, "color");
		}
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}

		return (displaynulltextcolor) ? displaynulltextcolor : nexacro.Component._default_color;
	};

	_pSpin.on_update_style_color = function () {
		var color = this.currentstyle.color = (this.spinedit ? (this.spinedit.on_find_CurrentStyle_color(this._pseudo) || this.on_find_CurrentStyle_color(this._pseudo)) : this.on_find_CurrentStyle_color(this._pseudo));
		this.on_apply_style_color(color);
	};

	_pSpin.on_update_style_buttonsize = function () {
		var buttonsize = this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		this.on_apply_style_buttonsize();
	};

	_pSpin.on_update_style_buttonalign = function () {
		var buttonalign = this.currentstyle.buttonalign = this.on_find_CurrentStyle_buttonalign(this._pseudo);
		this.on_apply_style_buttonalign();
	};

	_pSpin.on_update_style_displaynulltextcolor = function () {
		var displaynulltextcolor = this.currentstyle.displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(this._pseudo);
		this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
	};

	_pSpin.on_apply_style_align = function (align) {
		if (!align) {
			align = this.on_find_CurrentStyle_align(this._pseudo);
		}
		if (this.spinedit) {
			this.spinedit.style.set_align(align._value);
		}
	};

	_pSpin.on_apply_style_color = function (color) {
		if (this.spinedit) {
			this.spinedit.on_apply_style_color(this.spinedit.currentstyle.color = color);
		}
	};

	_pSpin.on_apply_style_font = function (font) {
		if (this.spinedit) {
			this.spinedit.on_apply_style_font(this.spinedit.currentstyle.font = font);
		}
	};

	_pSpin.on_apply_style_buttonsize = function () {
		this._recalcLayout();
	};

	_pSpin.on_apply_style_buttonalign = function () {
		this._recalcLayout();
	};

	_pSpin.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		if (this.spinedit) {
			this.spinedit.on_apply_style_accessibility(accessibility);
		}
	};

	_pSpin.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pSpin.on_apply_style_letterspace = function (letterspace) {
		if (this.spinedit) {
			this.spinedit.on_apply_style_letterspace(this.spinedit.currentstyle.letterspace = letterspace);
		}
	};

	_pSpin.on_apply_style_displaynulltextcolor = function (displaynulltextcolor) {
		if (this.spinedit) {
			this.spinedit.on_apply_style_displaynulltextcolor(this.spinedit.currentstyle.displaynulltextcolor = displaynulltextcolor);
		}
	};

	_pSpin.on_create_contents = function () {
		if (this._control_element) {
			this.spinupbutton = new nexacro.SpinButtonCtrl("spinupbutton", "absolute", 0, 0, 0, 0, null, null, this);
			this.spindownbutton = new nexacro.SpinButtonCtrl("spindownbutton", "absolute", 0, 0, 0, 0, null, null, this);
			var spinedit = this.spinedit = new nexacro.SpinEditCtrl("spinedit", "absolute", 0, 0, 0, 0, null, null, this);

			this.spinedit.createComponent();
			this.spinupbutton.createComponent();
			this.spindownbutton.createComponent();
		}
	};

	_pSpin.on_created_contents = function () {
		this.on_apply_readonly();
		this.on_apply_circulation();
		this.on_apply_displaycomma();
		this.on_apply_displaynulltext();
		this.on_apply_type();
		this.on_apply_usecontextmenu();
		this.on_apply_style_displaynulltextcolor(this.currentstyle.displaynulltextcolor);

		this.spinupbutton._setEventHandler("onclick", this.on_notify_spinupbutton_click, this);
		this.spindownbutton._setEventHandler("onclick", this.on_notify_spindownbutton_click, this);

		this.spinedit._setEventHandler("ontextchange", this.on_notify_spin_textchange, this);
		this.spinedit._setEventHandler("ontextchanged", this.on_notify_spin_textchanged, this);
		this.spinedit._setEventHandler("cancharchange", this.on_notify_spin_cancharchange, this);
		this.spinedit._setEventHandler("onchar", this.on_notify_spin_char, this);
		this.spinedit._setEventHandler("oneditclick", this.on_notify_spin_editclick, this);
		this.spinedit._setEventHandler("onkeydown", this.on_notify_spin_keydown, this);

		this.spinupbutton.on_created();
		this.spindownbutton.on_created();
		this.spinedit.on_created();
		this._edit_base_api = this.spinedit._edit_base_api;

		this.on_apply_style_letterspace(this.currentstyle.letterspace);
		this.on_apply_style_rtlimagemirroring(this.currentstyle.rtlimagemirroring);

		this._setAccessibilityInfoValueMax(this.max);
		this._setAccessibilityInfoValueMin(this.min);
		this._setAccessibilityInfoValueCur(this.value);

		this._setAccessibilityActiveDescendant(this.spinedit);
		this.on_apply_prop_rtldirection();

		if (this._old_value !== undefined) {
			this._setValue(this._old_value);
		}
	};

	_pSpin.on_destroy_contents = function () {
		if (this.spinupbutton) {
			this.spinupbutton.destroy();
			this.spinupbutton = null;
		}

		if (this.spindownbutton) {
			this.spindownbutton.destroy();
			this.spindownbutton = null;
		}

		if (this.spinedit) {
			this.spinedit.destroy();
			this.spinedit = null;
		}
	};

	_pSpin.on_change_containerRect = function () {
		this._recalcLayout();
	};

	_pSpin.on_apply_prop_enable = function (v) {
		this._updateButton();
	};

	_pSpin.on_apply_custom_setfocus = function (evt_name) {
		if (this.spinedit && this.spinedit.enable == true) {
			this.spinedit.on_apply_custom_setfocus(evt_name);
		}
	};

	_pSpin.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			this._setValue(undefined);
			return true;
		}
	};

	_pSpin.on_change_bindSource = function (propid, ds, row, col, index) {
		if (propid == "value") {
			var ds_val = ds.getColumn(row, col);

			var v = parseFloat(ds_val);

			if (isNaN(v)) {
				v = ds_val;
			}
			else if (this.min > v || this.max < v) {
				v = (this.min > v) ? this.min : this.max;
				var ret = this.applyto_bindSource("value", v);
				if (ret == false) {
					return false;
				}
			}

			this._setValue(v);
			return true;
		}
		return false;
	};

	_pSpin.on_getBindableProperties = function () {
		return "value";
	};

	_pSpin.on_get_style_accessibility_label = function () {
		var label = "";
		return label;
	};

	_pSpin._on_getAccessibilityAdditionalLabel = function () {
		var label = "";
		if (this.spinedit && this.spinedit._edit_base_api) {
			label = this.spinedit._edit_base_api._on_getAccessibilityAdditionalLabel();
		}
		return label + " " + this.min + " " + this.max;
	};

	_pSpin._getAccessibilityReadLabel = function (bwholeread) {
		var _readlabel = nexacro.Component.prototype._getAccessibilityReadLabel.call(this);
		if (bwholeread && this.spinedit._input_element && this._status != "focus") {
			if (!this.spinedit._input_element._wantAccessibilityAdditionalLabel
				 || !this.spinedit._input_element._wantAccessibilityAdditionalLabel()) {
				_readlabel = this.text + " " + _readlabel;
			}
		}
		return _readlabel;
	};

	_pSpin._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_arrow = this._want_arrow;
		this._want_arrow = false;
		return {
			want_tab : false, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : want_arrow
		};
	};

	_pSpin.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		var _rtldirection = this._rtldirection;
		var spinedit = this.spinedit;
		var upbutton = this.spinupbutton;
		var downbutton = this.spindownbutton;

		if (spinedit) {
			spinedit._setRtlDirection(_rtldirection);
		}
		if (upbutton) {
			upbutton._setRtlDirection(_rtldirection);
		}
		if (downbutton) {
			downbutton._setRtlDirection(_rtldirection);
		}
	};

	_pSpin.set_type = function (v) {
		this.type = v;
		this.on_apply_type();
	};

	_pSpin.on_apply_type = function () {
		if (this.spinedit) {
			switch (this.type) {
				case "spinonly":
					this.spinedit.set_visible(false);
					break;
				case "noneditable":
					this.spinedit.set_visible(true);
					this.spinedit.set_readonly(true);
					break;
				case "normal":
				default:
					this.spinedit.set_visible(true);
					this.spinedit.set_readonly(this.readonly);
					break;
			}
		}
		this._recalcLayout();
	};

	_pSpin.set_value = function (v) {
		var _val = parseFloat(v, 10);

		v = this._getValidation(v);

		var ret = this.applyto_bindSource("value", v);
		if (ret == false) {
			return;
		}

		this._setValue(v);

		if (!this._is_created) {
			this._old_value = _val;
		}
	};

	_pSpin._setValue = function (v) {
		this._old_value = this.value = v;

		this.text = nexacro._toString(v);

		this._updateToText();

		this.on_apply_value();
		this._updateButton();
	};

	_pSpin.on_apply_value = function () {
		if (this.spinedit) {
			if (this.value === null || this.value === undefined) {
				this.spinedit.set_value(undefined);
			}
			else {
				this.spinedit.set_value(this.value);
			}
			this.text = this.spinedit.text;
		}
	};


	_pSpin.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pSpin.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		if (this.spinedit) {
			if (this.type != "noneditable") {
				this.spinedit.set_readonly(v);
			}
		}
	};

	_pSpin.set_displaynulltext = function (v) {
		this.displaynulltext = v.toString();
		this.on_apply_displaynulltext();
	};

	_pSpin.on_apply_displaynulltext = function () {
		if (this.spinedit && this.displaynulltext) {
			this.spinedit.set_displaynulltext(this.displaynulltext);
		}
	};

	_pSpin.set_increment = function (v) {
		var increment = parseFloat(v, 10);
		if (isNaN(increment)) {
			return;
		}
		else {
			this.increment = increment;
		}

		this.on_apply_increment();
	};

	_pSpin.on_apply_increment = function () {
		this._updateButton();
	};

	_pSpin.set_max = function (v) {
		var max = parseFloat(v, 10);
		if (isNaN(max)) {
			return;
		}
		else {
			this.max = max;
			this._setAccessibilityInfoValueMax(max);
		}
		this.on_apply_max();
	};

	_pSpin.on_apply_max = function () {
		if (this.value > this.max) {
			this.value = this.max;
		}

		if (this.max < this.min) {
			this.min = this.max;
		}

		this._updateToText();
	};

	_pSpin.set_min = function (v) {
		var min = parseFloat(v, 10);
		if (isNaN(min)) {
			return;
		}
		else {
			this.min = min;
			this._setAccessibilityInfoValueMin(min);
		}
		this.on_apply_min();
	};

	_pSpin.on_apply_min = function () {
		if (this.value < this.min) {
			this.value = this.min;
		}

		if (this.max < this.min) {
			this.max = this.min;
		}

		this._updateToText();
	};

	_pSpin.set_displaycomma = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.displaycomma) {
			this.displaycomma = v;
			this.on_apply_displaycomma();
		}
	};

	_pSpin.on_apply_displaycomma = function () {
		if (this.spinedit) {
			if (this.displaycomma) {
				this.spinedit.set_mask(this.displaymask);
			}
			else {
				this.spinedit.set_mask("");
			}
		}
		this._updateToText();
	};


	_pSpin.set_circulation = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.circulation) {
			this.circulation = v;
			this.on_apply_circulation();
		}
	};

	_pSpin.on_apply_circulation = function () {
		this._updateButton();
	};

	_pSpin.set_text = function (v) {
	};

	_pSpin.set_usecontextmenu = function (v) {
		v = nexacro._toBoolean(v);

		if (v != this.usecontextmenu) {
			this.usecontextmenu = v;
			this.on_apply_usecontextmenu();
		}
	};

	_pSpin.on_apply_usecontextmenu = function () {
		var spinedit = this.spinedit;
		if (spinedit) {
			spinedit.set_usecontextmenu(this.usecontextmenu);
		}
	};

	_pSpin.set_usesoftkeyboard = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usesoftkeyboard) {
			this.usesoftkeyboard = v;
			this.on_apply_usesoftkeyboard();
		}
	};

	_pSpin.on_apply_usesoftkeyboard = function () {
		if (this.spinedit) {
			this.spinedit.set_usesoftkeyboard(this.usesoftkeyboard);
		}
	};

	_pSpin.set_locale = function (v) {
		if (v != this.locale) {
			this.locale = v;
			if (this._locale != v) {
				this._locale = v;
				this.on_apply_locale();
			}
		}
	};

	_pSpin.on_apply_locale = function () {
		var edit = this.spinedit;
		if (edit) {
			edit._setLocale(this._locale);
		}
	};

	_pSpin.getCaretPos = function () {
		if (this.readonly) {
			return -1;
		}

		return this.spinedit.getCaretPos();
	};

	_pSpin.getSelect = function () {
		return this.spinedit.getSelect();
	};

	_pSpin.getSelectedText = function () {
		return this.spinedit.getSelectedText();
	};

	_pSpin.setCaretPos = function (v) {
		return this.spinedit.setCaretPos(v);
	};

	_pSpin.setSelect = function (startIndex, endIndex) {
		this.spinedit.setSelect(startIndex, endIndex);
	};

	_pSpin.setSelectedText = function (v) {
		this.spinedit.setSelectedText(v);
	};

	_pSpin.setRange = function (min, max) {
		this.set_min(min);
		this.set_max(max);

		if (this.min > this.max) {
			var swap = this.min;
			this.min = this.max;
			this.max = swap;
		}
	};

	_pSpin.updateToDataset = function () {
		if (!this._bind_event) {
			return false;
		}

		return this.applyto_bindSource("value", this.value);
	};

	_pSpin.on_notify_spin_down = function (obj, e) {
		if (!this.readonly) {
			var bcheck = true;
			this.textchangebindflag = true;
			var value = parseFloat(this.value, 10);

			if (value == undefined || value == null || isNaN(value)) {
				value = 0;
			}

			var preValue = value;
			var decvalue = this._calcValue(value, this.increment, "-");

			if (this.circulation) {
				if (this.increment >= 0) {
					value = (decvalue < this.min) ? this.max : decvalue;
				}
				else {
					value = (decvalue > this.max) ? this.min : decvalue;
				}
			}
			else {
				value = (decvalue < this.min) ? this.min : (decvalue > this.max) ? this.max : decvalue;
			}

			var strPreText = preValue.toString();
			var postValue = this.value = value;
			var strPostText = value.toString();

			bcheck = this.on_fire_onspin(this, strPreText, preValue, strPostText, postValue, false);
			this.spinedit.on_fire_ontextchanged(this, preValue, postValue);

			if (bcheck || bcheck === undefined) {
				this.value = postValue;
			}
			else {
				this.value = preValue;
			}
			this._on_focus(true);
			this._updateToText();
		}
	};

	_pSpin.on_notify_spin_up = function (obj, e) {
		if (!this.readonly) {
			var bcheck = true;
			this.textchangebindflag = true;
			var value = parseFloat(this.value, 10);

			if (value == undefined || value == null || isNaN(value)) {
				value = 0;
			}

			var preValue = value;
			var incvalue = this._calcValue(value, this.increment, "+");

			if (this.circulation) {
				if (this.increment >= 0) {
					value = (incvalue > this.max) ? this.min : incvalue;
				}
				else {
					value = (incvalue < this.min) ? this.max : incvalue;
				}
			}
			else {
				value = (incvalue > this.max) ? this.max : (incvalue < this.min) ? this.min : incvalue;
			}

			var strPreText = preValue.toString();
			var postValue = this.value = value;
			var strPostText = value.toString();

			bcheck = this.on_fire_onspin(this, strPreText, preValue, strPostText, postValue, true);
			this.spinedit.on_fire_ontextchanged(this, preValue, postValue);

			if (bcheck || bcheck === undefined) {
				this.value = postValue;
			}
			else {
				this.value = preValue;
			}

			this._on_focus(true);
			this._updateToText();
		}
	};

	_pSpin.on_notify_spin_textchange = function (obj, e) {
		if (obj.parent == this) {
			this._setFocus(false);
		}
		var ret = this.on_fire_ontextchange(obj, e);

		var val;
		if (this.displaycomma) {
			val = this._commaStrToStr(e.posttext);
		}
		else {
			val = e.posttext;
		}

		if (ret) {
			this.textchangebindflag = true;
			val = parseFloat(val, 10);
			if (isNaN(val)) {
				this.value = this.min;
			}
			else {
				this.value = val;
			}

			this._updateToText(true);
		}
		return ret;
	};

	_pSpin.on_notify_spin_editclick = function (obj, e) {
		this.on_fire_oneditclick(obj, e.caretpos, e.button, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.screenX, e.screenY, e.canvasX, e.canvasY, e.clientX, e.clientY, e.fromobject, e.fromreferenceobject);
	};

	_pSpin.on_notify_spin_textchanged = function (obj, e) {
		return this.on_fire_ontextchanged(obj, e);
	};

	_pSpin.on_notify_spin_char = function (obj, e) {
		var ret = this.on_fire_onchar(obj, e);
		if (!ret) {
			this.textchangebindflag = false;
			this.value = this._old_value;
		}
		return ret;
	};

	_pSpin.on_notify_spin_cancharchange = function (obj, e) {
		var ret = this.on_fire_cancharchange(obj, e);
		if (!ret) {
			this.textchangebindflag = false;
			this.value = this._old_value;
		}
		return ret;
	};

	_pSpin.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		this._want_arrow = true;
		nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pSpin.on_notify_spin_keydown = function (obj, e) {
		switch (e.keycode) {
			case nexacro.Event.KEY_UP:
				if (!nexacro._enableaccessibility || e.ctrlKey) {
					this.on_notify_spin_up();
				}
				break;
			case nexacro.Event.KEY_DOWN:
				if (!nexacro._enableaccessibility || e.ctrlKey) {
					this.on_notify_spin_down();
				}
				break;
			case nexacro.Event.KEY_ENTER:
				this.textchangebindflag = true;
				this._valuechange();
				break;
		}
		return true;
	};

	_pSpin.on_notify_spinupbutton_click = function (obj, e) {
		this.on_notify_spin_up(obj, e);
	};

	_pSpin.on_notify_spindownbutton_click = function (obj, e) {
		this.on_notify_spin_down(obj, e);
	};

	_pSpin.on_fire_oneditclick = function (obj, caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.visible && this._isEnable() && this.enableevent) {
			if (this.oneditclick && this.oneditclick._has_handlers) {
				var evt = new nexacro.EditClickEventInfo(this, "oneditclick", caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this, from_refer_comp);
				return this.oneditclick._fireEvent(this, evt);
			}
		}
		return false;
	};

	_pSpin.on_fire_ontextchange = function (obj, e) {
		if (this.ontextchange && this.ontextchange._has_handlers) {
			var evt = new nexacro.TextChangeEventInfo(this, "ontextchange", e.chartext, e.pretext, e.posttext, "", "");
			return this.ontextchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pSpin.on_fire_ontextchanged = function (obj, e) {
		if (this.ontextchanged && this.ontextchanged._has_handlers) {
			var evt = new nexacro.TextChangedEventInfo(this, "ontextchanged", e.pretext, e.posttext);
			return this.ontextchanged._fireEvent(this, evt);
		}
		return true;
	};

	_pSpin.on_fire_onchar = function (obj, e) {
		if (this.onchar && this.onchar._has_handlers) {
			var evt = new nexacro.TextChangeEventInfo(this, "onchar", e.chartext, e.pretext, e.posttext);
			return this.onchar._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pSpin.on_fire_cancharchange = function (obj, e) {
		if (this.cancharchange && this.cancharchange._has_handlers) {
			var evt = new nexacro.CanCharEventInfo(obj, "cancharchange", e.chartext, e.pretext, e.posttext);
			return this.cancharchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pSpin.on_fire_canchange = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(this, "canchange", pretext, prevalue, posttext, postvalue);
			return this.canchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pSpin.on_fire_onchanged = function (obj, preText, preValue, postText, postValue) {
		if (this.onchanged && this.onchanged._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(obj, "onchanged", preText, preValue, postText, postValue);
			return this.onchanged._fireEvent(this, evt);
		}
		return true;
	};

	_pSpin.on_fire_onspin = function (obj, preText, preValue, postText, postValue, isUp) {
		if (this.onspin && this.onspin._has_handlers) {
			var evt = new nexacro.SpinEventInfo(obj, "onspin", preText, preValue, postText, postValue, isUp);
			return this.onspin._fireEvent(this, evt);
		}
		return true;
	};

	_pSpin._on_killfocus = function (obj, fromObj) {
		var win = this._getWindow();
		if (win && win._is_active_window != true && !obj) {
			return;
		}
		this._valuechange();

		if (this.spinedit) {
			this.spinedit._cancelSelect();
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
			if (this.spinedit) {
				this.spinedit._is_focusing = false;
			}
		}
	};

	_pSpin._recalcLayout = function () {
		if (this._control_element && this.spinupbutton && this.spindownbutton && this.spinedit) {
			var cw = this._client_width, ch = this._client_height;
			var l = 0, r = 0, t = 0, b = 0;
			var w = 0;
			h = 0;

			var up_top_margin = 0, up_left_margin = 0, up_right_margin = 0, up_bottom_margin = 0;
			var down_top_margin = 0, down_left_margin = 0, down_right_margin = 0, down_bottom_margin = 0;
			var edit_top_margin = 0, edit_left_margin = 0, edit_right_margin = 0, edit_bottom_margin = 0;

			var upmargin = this.spinupbutton.on_find_CurrentStyle_margin();

			if (upmargin) {
				up_top_margin = upmargin.top;
				up_left_margin = upmargin.left;
				up_bottom_margin = upmargin.bottom;
				up_right_margin = upmargin.right;
			}

			var downmargin = this.spindownbutton.on_find_CurrentStyle_margin();
			if (downmargin) {
				down_top_margin = downmargin.top;
				down_left_margin = downmargin.left;
				down_bottom_margin = downmargin.bottom;
				down_right_margin = downmargin.right;
			}

			var editmargin = this.spinedit.on_find_CurrentStyle_margin();
			if (editmargin) {
				edit_top_margin = editmargin.top;
				edit_left_margin = editmargin.left;
				edit_bottom_margin = editmargin.bottom;
				edit_right_margin = editmargin.right;
			}

			var button_size_x = 0;
			var button_size_y = ch;

			if (this.type == "spinonly") {
				button_size_x = cw;
			}
			else {
				button_size_x = button_size_y;
			}

			var curstylebtnsize = this.on_find_CurrentStyle_buttonsize();
			if (curstylebtnsize) {
				curstylebtnsize = parseInt(curstylebtnsize) | 0;
				if (curstylebtnsize > -1) {
					button_size_x = curstylebtnsize;
				}
				else {
					button_size_x = 0;
				}
			}

			var curbuttonalign = this.on_find_CurrentStyle_buttonalign();

			if (curbuttonalign.halign != "left") {
				l = cw - button_size_x;
				t = up_top_margin;
				w = button_size_x - up_right_margin;
				h = button_size_y / 2 - 1;

				this.spinupbutton.move(l, t, w, h, null, null);

				w = button_size_x - down_right_margin;
				t = t + h + down_top_margin + 1;
				h = button_size_y / 2 - 1 - down_bottom_margin;

				this.spindownbutton.move(l, t, w, h, null, null);

				if (this.type != "spinonly") {
					l = edit_left_margin;
					t = edit_top_margin;
					w = cw - button_size_x - edit_right_margin - up_left_margin;
					h = ch - down_bottom_margin;

					this.spinedit.move(l, t, w, h, r, b);
				}
			}
			else {
				l = up_left_margin;
				t = up_top_margin;
				w = button_size_x - up_right_margin;
				h = button_size_y / 2 - 1;

				this.spinupbutton.move(l, t, w, h, null, null);

				w = button_size_x - down_right_margin;
				t = t + h + up_bottom_margin + down_top_margin + 1;
				h = button_size_y / 2 - 1 - down_bottom_margin;

				this.spindownbutton.move(l, t, w, h, null, null);

				if (this.type != "spinonly") {
					l = l + button_size_x + edit_left_margin;
					t = edit_top_margin;
					w = cw - button_size_x - edit_right_margin;
					h = ch - edit_bottom_margin;

					this.spinedit.move(l, t, w, h, null, null);
				}
			}
		}
	};

	_pSpin._updateButton = function () {
		if (this._control_element) {
			var upbutton = this.spinupbutton;
			var downbutton = this.spindownbutton;
			var edit = this.spinedit;
			var val = this.value;

			if (!this._isEnable()) {
				upbutton._setEnable(false);
				downbutton._setEnable(false);
				edit._setEnable(false);
			}
			else {
				edit._setEnable(true);

				if (!this.circulation) {
					if (val == null || val == undefined) {
						downbutton._setEnable(false);
						upbutton._setEnable(true);
						return;
					}

					if (this.increment >= 0) {
						if (this.max > val) {
							upbutton._setEnable(true);
						}
						else {
							upbutton._setEnable(false);
						}

						if (this.min < val) {
							downbutton._setEnable(true);
						}
						else {
							downbutton._setEnable(false);
						}
					}
					else {
						if (this.max > val) {
							downbutton._setEnable(true);
						}
						else {
							downbutton._setEnable(false);
						}

						if (this.min < val) {
							upbutton._setEnable(true);
						}
						else {
							upbutton._setEnable(false);
						}
					}
				}
				else {
					upbutton._setEnable(true);
					downbutton._setEnable(true);
				}
			}
		}
	};

	_pSpin._updateToText = function (skip_setvalue) {
		var v = this.value;
		if (v === null || v === undefined) {
			this.value = undefined;
			this.text = "";
		}
		else if (v.date || v.time || v.blob || v.datetime) {
			v = undefined;
			this.text = "";
		}
		else {
			v = this._commaStrToStr(this.value);
		}
		if (this.spinedit) {
			if (!skip_setvalue) {
				this.spinedit.set_value(v);
				this.text = this.spinedit.text;
			}
			this._setAccessibilityInfoValueCur(v);
		}
		this._updateButton();
	};

	_pSpin._commaStrToStr = function (v) {
		var strComma = nexacro._toString(v);

		if (v == undefined) {
			strComma = "";
		}
		return strComma.replace(/,/g, "");
	};

	_pSpin._getValidation = function (v) {
		v = parseFloat(v, 10);

		if (isNaN(v)) {
			return undefined;
		}
		else if (this.min > v) {
			v = this.min;
		}
		else if (this.max < v) {
			v = this.max;
		}

		return v;
	};

	_pSpin._valuechange = function () {
		if (!this._is_alive) {
			return;
		}

		var val = this.value;
		if (val <= this.max && val >= this.min) {
			this.value = val;
		}
		else {
			this.value = this._getValidation(val);
		}

		var postValue = this.value;
		var strPostText = nexacro._toString(this.value);

		var preValue = this._old_value;
		var strPreText = nexacro._toString(this._old_value);

		var ret = this.on_fire_canchange(this, strPreText, preValue, strPostText, postValue);
		if (ret === false) {
			this.value = this._old_value;
			this._updateToText();
		}
		else {
			this._setValue(this.value);

			if (this.textchangebindflag) {
				this.applyto_bindSource("value", this.value);
				this.textchangebindflag = false;
			}

			if (preValue != postValue) {
				this.on_fire_onchanged(this, strPreText, preValue, strPostText, postValue);
			}
		}
	};

	_pSpin._calcValue = function (val, inc, sign) {
		var addConst = 1;
		var strVal = val.toString();
		var strInc = inc.toString();
		var bPointVal = strVal.indexOf(".");
		var bPointInc = strInc.indexOf(".");

		if (bPointVal > -1 || bPointInc > -1) {
			var decVal = bPointVal > -1 ? strVal.substring(bPointVal + 1, strVal.length) : "";
			var decInc = bPointInc > -1 ? strInc.substring(bPointInc + 1, strInc.length) : "";
			var maxLength = decVal.length >= decInc.length ? decVal.length : decInc.length;
			addConst = Math.pow(10, maxLength);

			val = Math.round(val * addConst);
			inc = Math.round(inc * addConst);
		}

		if (sign == "+") {
			return (val + inc) / addConst;
		}
		else {
			return (val - inc) / addConst;
		}
	};

	delete _pSpin;
	_pSpin = null;

	nexacro.SpinButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pSpinButtonCtrl = nexacro.SpinButtonCtrl.prototype = nexacro._createPrototype(nexacro.ImageButtonCtrl, nexacro.SpinButtonCtrl);

	_pSpinButtonCtrl.on_apply_custom_setfocus = function (evt_name) {
		var parent = this.parent;
		if (parent) {
			var edit = parent.spinedit;
			if (edit && edit.enable == true) {
				if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
					edit.on_apply_custom_setfocus(evt_name);
				}
				else {
					nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
				}
			}
		}
	};

	delete _pSpinButtonCtrl;
	_pSpinButtonCtrl = null;

	nexacro.SpinEditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.MaskEditCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._accessibility_role = "spin";
	};

	var _pSpinEditCtrl = nexacro.SpinEditCtrl.prototype = nexacro._createPrototype(nexacro.MaskEditCtrl, nexacro.SpinEditCtrl);


	_pSpinEditCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent._find_pseudo_obj("align", pseudo, "align") || this._find_ctrl_pseudo_obj("align", pseudo, "align") || nexacro.Component._default_align;
	};

	_pSpinEditCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this._find_inherit_pseudo_obj("color", pseudo, "color") || nexacro.Component._default_color;
	};

	_pSpinEditCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this._find_inherit_pseudo_obj("font", pseudo, "font") || nexacro.Component._default_font;
	};

	_pSpinEditCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		var accessibility = this._find_pseudo_obj("accessibility", pseudo, "accessibility");
		return accessibility ? accessibility : this.parent.on_find_CurrentStyle_accessibility(pseudo);
	};

	_pSpinEditCtrl._getAccessibilityRole = function (accessibility) {
		accessibility = this.parent.on_find_CurrentStyle_accessibility(this._pseudo);
		return this.parent._getAccessibilityRole(accessibility);
	};

	delete _pSpinEditCtrl;
	_pSpinEditCtrl = null;

	nexacro.SpinCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Spin.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._is_subcontrol = true;
	};

	var _pSpinCtrl = nexacro.SpinCtrl.prototype = nexacro._createPrototype(nexacro.Spin, nexacro.SpinCtrl);

	_pSpinCtrl._type_name = "SpinControl";
	nexacro._setForControlStyleFinder(_pSpinCtrl);

	delete _pSpinCtrl;
	_pSpinCtrl = null;
}
;
//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.DatePicker) {
	nexacro.DatePicker_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}

		this.ncpadding = null;
		this.usetrailingday = null;
		this.headerformat = null;
		this.weekformat = null;
		this.viewyearspin = null;
		this.viewmonthspin = null;
		this.accessibility = null;

		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;

		this.headerheight = null;
		this.headercolor = null;
		this.headerbackground = null;
		this.headergradation = null;
		this.headerbordertype = null;
		this.headerborder = null;
		this.headerfont = null;

		this.bodybackground = null;
		this.bodygradation = null;
		this.bodybordertype = null;
		this.bodyborder = null;

		this.weekcolor = null;
		this.weekbackground = null;
		this.weekgradation = null;
		this.weekfont = null;

		this.todaybackground = null;
		this.todaygradation = null;
		this.todayborder = null;
		this.todaybordertype = null;
		this.todaycolor = null;
		this.todayfont = null;

		this.saturdaybackground = null;
		this.saturdaygradation = null;
		this.saturdayborder = null;
		this.saturdaybordertype = null;
		this.saturdaycolor = null;
		this.saturdayfont = null;

		this.sundaybackground = null;
		this.sundaygradation = null;
		this.sundayborder = null;
		this.sundaybordertype = null;
		this.sundaycolor = null;
		this.sundayfont = null;

		this.trailingdaybackground = null;
		this.trailingdaygradation = null;
		this.trailingdayborder = null;
		this.trailingdaybordertype = null;
		this.trailingdaycolor = null;
		this.trailingdayfont = null;
	};

	var _pDatePickerStyle = nexacro._createPrototype(nexacro.Style, nexacro.DatePicker_Style);
	nexacro.DatePicker_Style.prototype = _pDatePickerStyle;

	eval(nexacro._createPaddingAttributeEvalStr("_pDatePickerStyle", "ncpadding"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "usetrailingday"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "headerformat"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "weekformat"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "daysize"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "daycolor"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "daybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "daygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "dayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "daybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "dayfont"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "headerheight"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "headercolor"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "headerbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "headergradation"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "headerbordertype"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "headerborder"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "headerfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "bodybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "bodygradation"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "bodybordertype"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "bodyborder"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "weekcolor"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "weekbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "weekgradation"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "weekfont"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "saturdaycolor"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "sundaycolor"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "todaycolor"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerStyle", "trailingdaycolor"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "viewyearspin"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerStyle", "viewmonthspin"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "todaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "todaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "todayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "todaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "todayfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "saturdaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "saturdaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "saturdayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "saturdaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "saturdayfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "sundaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "sundaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "sundayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "sundaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "sundayfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerStyle", "trailingdaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerStyle", "trailingdaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerStyle", "trailingdayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerStyle", "trailingdaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerStyle", "trailingdayfont"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pDatePickerStyle", "accessibility"));

	_pDatePickerStyle.__custom_emptyObject = function () {
		this.ncpadding = null;
		this.usetrailingday = null;
		this.headerformat = null;
		this.weekformat = null;
		this.viewyearspin = null;
		this.viewmonthspin = null;
		this.accessibility = null;

		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;

		this.headerheight = null;
		this.headercolor = null;
		this.headerbackground = null;
		this.headergradation = null;
		this.headerbordertype = null;
		this.headerborder = null;
		this.headerfont = null;

		this.bodybackground = null;
		this.bodygradation = null;
		this.bodybordertype = null;
		this.bodyborder = null;

		this.weekcolor = null;
		this.weekbackground = null;
		this.weekgradation = null;
		this.weekfont = null;

		this.todaybackground = null;
		this.todaygradation = null;
		this.todayborder = null;
		this.todaybordertype = null;
		this.todaycolor = null;
		this.todayfont = null;

		this.saturdaybackground = null;
		this.saturdaygradation = null;
		this.saturdayborder = null;
		this.saturdaybordertype = null;
		this.saturdaycolor = null;
		this.saturdayfont = null;

		this.sundaybackground = null;
		this.sundaygradation = null;
		this.sundayborder = null;
		this.sundaybordertype = null;
		this.sundaycolor = null;
		this.sundayfont = null;

		this.trailingdaybackground = null;
		this.trailingdaygradation = null;
		this.trailingdayborder = null;
		this.trailingdaybordertype = null;
		this.trailingdaycolor = null;
		this.trailingdayfont = null;
	};

	_pDatePickerStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.ncpadding && !this.ncpadding._is_empty) {
			val += "ncpadding:" + this.ncpadding._value + "; ";
		}
		if (this.usetrailingday && !this.usetrailingday._is_empty) {
			val += "usetrailingday:" + this.usetrailingday._value + "; ";
		}
		if (this.headerformat && !this.headerformat._is_empty) {
			val += "headerformat:" + this.headerformat._value + "; ";
		}
		if (this.weekformat && !this.weekformat._is_empty) {
			val += "weekformat:" + this.weekformat._value + "; ";
		}
		if (this.daysize && !this.daysize._is_empty) {
			val += "daysize:" + this.daysize._value + "; ";
		}
		if (this.daycolor && !this.daycolor._is_empty) {
			val += "daycolor:" + this.daycolor._value + "; ";
		}
		if (this.daybackground && !this.daybackground._is_empty) {
			val += "daybackground:" + this.daybackground._value + "; ";
		}
		if (this.daygradation && !this.daygradation._is_empty) {
			val += "daygradation:" + this.daygradation._value + "; ";
		}
		if (this.dayborder && !this.dayborder._is_empty) {
			val += "dayborder:" + this.dayborder._value + "; ";
		}
		if (this.daybordertype && !this.daybordertype._is_empty) {
			val += "daybordertype:" + this.daybordertype._value + "; ";
		}
		if (this.dayfont && !this.dayfont._is_empty) {
			val += "dayfont:" + this.dayfont._value + "; ";
		}
		if (this.headerheight && !this.headerheight._is_empty) {
			val += "headerheight:" + this.headerheight._value + "; ";
		}
		if (this.headercolor && !this.headercolor._is_empty) {
			val += "headercolor:" + this.headercolor._value + "; ";
		}
		if (this.headerbackground && !this.headerbackground._is_empty) {
			val += "headerbackground:" + this.headerbackground._value + "; ";
		}
		if (this.headergradation && !this.headergradation._is_empty) {
			val += "headergradation:" + this.headergradation._value + "; ";
		}
		if (this.headerbordertype && !this.headerbordertype._is_empty) {
			val += "headerbordertype:" + this.headerbordertype._value + "; ";
		}
		if (this.headerborder && !this.headerborder._is_empty) {
			val += "headerborder:" + this.headerborder._value + "; ";
		}
		if (this.headerfont && !this.headerfont._is_empty) {
			val += "headerfont:" + this.headerfont._value + "; ";
		}
		if (this.bodybackground && !this.bodybackground._is_empty) {
			val += "bodybackground:" + this.bodybackground._value + "; ";
		}
		if (this.bodygradation && !this.bodygradation._is_empty) {
			val += "bodygradation:" + this.bodygradation._value + "; ";
		}
		if (this.bodybordertype && !this.bodybordertype._is_empty) {
			val += "bodybordertype:" + this.bodybordertype._value + "; ";
		}
		if (this.bodyborder && !this.bodyborder._is_empty) {
			val += "bodyborder:" + this.bodyborder._value + "; ";
		}
		if (this.weekcolor && !this.weekcolor._is_empty) {
			val += "weekcolor:" + this.weekcolor._value + "; ";
		}
		if (this.weekbackground && !this.weekbackground._is_empty) {
			val += "weekbackground:" + this.weekbackground._value + "; ";
		}
		if (this.weekgradation && !this.weekgradation._is_empty) {
			val += "weekgradation:" + this.weekgradation._value + "; ";
		}
		if (this.weekfont && !this.weekfont._is_empty) {
			val += "weekfont:" + this.weekfont._value + "; ";
		}
		if (this.saturdaycolor && !this.saturdaycolor._is_empty) {
			val += "saturdaycolor:" + this.saturdaycolor._value + "; ";
		}
		if (this.sundaycolor && !this.sundaycolor._is_empty) {
			val += "sundaycolor:" + this.sundaycolor._value + "; ";
		}
		if (this.todaycolor && !this.todaycolor._is_empty) {
			val += "todaycolor:" + this.todaycolor._value + "; ";
		}
		if (this.trailingdaycolor && !this.trailingdaycolor._is_empty) {
			val += "trailingdaycolor:" + this.trailingdaycolor._value + "; ";
		}
		if (this.viewyearspin && !this.viewyearspin._is_empty) {
			val += "viewyearspin:" + this.viewyearspin._value + "; ";
		}
		if (this.viewmonthspin && !this.viewmonthspin._is_empty) {
			val += "viewmonthspin:" + this.viewmonthspin._value + "; ";
		}
		if (this.todaybackground && !this.todaybackground._is_empty) {
			val += "todaybackground:" + this.todaybackground._value + "; ";
		}
		if (this.todaygradation && !this.todaygradation._is_empty) {
			val += "todaygradation:" + this.todaygradation._value + "; ";
		}
		if (this.todayborder && !this.todayborder._is_empty) {
			val += "todayborder:" + this.todayborder._value + "; ";
		}
		if (this.todaybordertype && !this.todaybordertype._is_empty) {
			val += "todaybordertype:" + this.todaybordertype._value + "; ";
		}
		if (this.todayfont && !this.todayfont._is_empty) {
			val += "todayfont:" + this.todayfont._value + "; ";
		}
		if (this.saturdaybackground && !this.saturdaybackground._is_empty) {
			val += "saturdaybackground:" + this.saturdaybackground._value + "; ";
		}
		if (this.saturdaygradation && !this.saturdaygradation._is_empty) {
			val += "saturdaygradation:" + this.saturdaygradation._value + "; ";
		}
		if (this.saturdayborder && !this.saturdayborder._is_empty) {
			val += "saturdayborder:" + this.saturdayborder._value + "; ";
		}
		if (this.saturdaybordertype && !this.saturdaybordertype._is_empty) {
			val += "saturdaybordertype:" + this.saturdaybordertype._value + "; ";
		}
		if (this.saturdayfont && !this.saturdayfont._is_empty) {
			val += "saturdayfont:" + this.saturdayfont._value + "; ";
		}
		if (this.sundaybackground && !this.sundaybackground._is_empty) {
			val += "sundaybackground:" + this.sundaybackground._value + "; ";
		}
		if (this.sundaygradation && !this.sundaygradation._is_empty) {
			val += "sundaygradation:" + this.sundaygradation._value + "; ";
		}
		if (this.sundayborder && !this.sundayborder._is_empty) {
			val += "sundayborder:" + this.sundayborder._value + "; ";
		}
		if (this.sundaybordertype && !this.sundaybordertype._is_empty) {
			val += "sundaybordertype:" + this.sundaybordertype._value + "; ";
		}
		if (this.sundayfont && !this.sundayfont._is_empty) {
			val += "sundayfont:" + this.sundayfont._value + "; ";
		}
		if (this.trailingdaybackground && !this.trailingdaybackground._is_empty) {
			val += "trailingdaybackground:" + this.trailingdaybackground._value + "; ";
		}
		if (this.trailingdaygradation && !this.trailingdaygradation._is_empty) {
			val += "trailingdaygradation:" + this.trailingdaygradation._value + "; ";
		}
		if (this.trailingdayborder && !this.trailingdayborder._is_empty) {
			val += "trailingdayborder:" + this.trailingdayborder._value + "; ";
		}
		if (this.trailingdaybordertype && !this.trailingdaybordertype._is_empty) {
			val += "trailingdaybordertype:" + this.trailingdaybordertype._value + "; ";
		}
		if (this.trailingdayfont && !this.trailingdayfont._is_empty) {
			val += "trailingdayfont:" + this.trailingdayfont._value + "; ";
		}
		if (this.accessibility && this.accessibility._is_empty) {
			val += "accessibility:" + this.accessibility._value + "; ";
		}

		return val;
	};

	nexacro.DatePicker_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.ncpadding = null;
		this.usetrailingday = null;
		this.headerformat = null;
		this.weekformat = null;
		this.viewyearspin = null;
		this.viewmonthspin = null;
		this.accessibility = null;

		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;

		this.headerheight = null;
		this.headercolor = null;
		this.headerbackground = null;
		this.headergradation = null;
		this.headerbordertype = null;
		this.headerborder = null;
		this.headerfont = null;

		this.bodybackground = null;
		this.bodygradation = null;
		this.bodybordertype = null;
		this.bodyborder = null;

		this.weekcolor = null;
		this.weekbackground = null;
		this.weekgradation = null;
		this.weekfont = null;

		this.todaybackground = null;
		this.todaygradation = null;
		this.todayborder = null;
		this.todaybordertype = null;
		this.todaycolor = null;
		this.todayfont = null;

		this.saturdaybackground = null;
		this.saturdaygradation = null;
		this.saturdayborder = null;
		this.saturdaybordertype = null;
		this.saturdaycolor = null;
		this.saturdayfont = null;

		this.sundaybackground = null;
		this.sundaygradation = null;
		this.sundayborder = null;
		this.sundaybordertype = null;
		this.sundaycolor = null;
		this.sundayfont = null;

		this.trailingdaybackground = null;
		this.trailingdaygradation = null;
		this.trailingdayborder = null;
		this.trailingdaybordertype = null;
		this.trailingdaycolor = null;
		this.trailingdayfont = null;
	};

	var _pDatePickerCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.DatePicker_CurrentStyle);
	nexacro.DatePicker_CurrentStyle.prototype = _pDatePickerCurrentStyle;

	_pDatePickerCurrentStyle.__custom_emptyObject = _pDatePickerStyle.__custom_emptyObject;
	_pDatePickerCurrentStyle.__get_custom_style_value = _pDatePickerStyle.__get_custom_style_value;

	_pDatePickerStyle = null;
	_pDatePickerCurrentStyle = null;

	nexacro.DatePicker = function (id, position, left, top, width, height, right, bottom, parent, delay_create) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
		this._delay_create = delay_create;
		this._calendar = parent;
		this._accessibility_role = "datepicker";
		this._has_accessibility_value = false;
		this._is_focus_accept = false;
		this._locale = "";

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"ondayclick" : 1, 
			"oncloseup" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};
	};

	var _pDatePicker = nexacro._createPrototype(nexacro.Component, nexacro.DatePicker);
	nexacro.DatePicker.prototype = _pDatePicker;
	_pDatePicker._type_name = "DatePicker";

	_pDatePicker.prevbutton = "";
	_pDatePicker.nextbutton = "";
	_pDatePicker.yearspin = "";
	_pDatePicker.monthspin = "";
	_pDatePicker.value = "";


	_pDatePicker._header = null;
	_pDatePicker._body = null;
	_pDatePicker._preDay = -1;
	_pDatePicker._preToday = -1;
	_pDatePicker._selected_year = -1;
	_pDatePicker._selected_month = -1;
	_pDatePicker._selected_day = -1;
	_pDatePicker._delay_create = false;

	nexacro.DatePicker._defaultNCPadding = nexacro._getCachedStyleObj("padding", "30 6 6 6");
	nexacro.DatePicker._defaultSundaycolor = nexacro._getCachedStyleObj("color", "red");
	nexacro.DatePicker._defaultSaturdaycolor = nexacro._getCachedStyleObj("color", "blue");
	nexacro.DatePicker._defaultTodaycolor = nexacro._getCachedStyleObj("color", "#00FAFA");
	nexacro.DatePicker._defaultHeaderheight = nexacro._getCachedStyleObj("value", "21");
	nexacro.DatePicker._defaultDaysize = nexacro._getCachedStyleObj("value", "26 26");
	nexacro.DatePicker._defaultWeekformat = nexacro._getCachedStyleObj("value", "S M T W T F S");
	nexacro.DatePicker._defaultHeaderformat = nexacro._getCachedStyleObj("value", "yyyy.MM");
	nexacro.DatePicker._defaultUseTrailngday = nexacro._getCachedStyleObj("value", "false");
	nexacro.DatePicker._defaultViewYearSpin = nexacro._getCachedStyleObj("value", "false");
	nexacro.DatePicker._defaultViewMonthSpin = nexacro._getCachedStyleObj("value", "false");

	_pDatePicker.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var ncpadding = this.on_find_CurrentStyle_ncpadding(pseudo);
		if (curstyle.ncpadding != ncpadding) {
			curstyle.ncpadding = ncpadding;
			this.on_apply_style_ncpadding(ncpadding);
		}

		var headerformat = this.on_find_CurrentStyle_headerformat(pseudo);
		if (curstyle.headerformat != headerformat) {
			curstyle.headerformat = headerformat;
			this.on_apply_style_headerformat(headerformat);
		}
		var headerheight = this.on_find_CurrentStyle_headerheight(pseudo);
		if (curstyle.headerheight != headerheight) {
			curstyle.headerheight = headerheight;
			this.on_apply_style_headerheight(headerheight);
		}
		var headercolor = this.on_find_CurrentStyle_headercolor(pseudo);
		if (curstyle.headercolor != headercolor) {
			curstyle.headercolor = headercolor;
			this.on_apply_style_headercolor(headercolor);
		}
		var headerbackground = this.on_find_CurrentStyle_headerbackground(pseudo);
		if (curstyle.headerbackground != headerbackground) {
			curstyle.headerbackground = headerbackground;
			this.on_apply_style_headerbackground(headerbackground);
		}
		var headergradation = this.on_find_CurrentStyle_headergradation(pseudo);
		if (curstyle.headergradation != headergradation) {
			curstyle.headergradation = headergradation;
			this.on_apply_style_headergradation(headergradation);
		}
		var headerbordertype = this.on_find_CurrentStyle_headerbordertype(pseudo);
		if (curstyle.headerbordertype != headerbordertype) {
			curstyle.headerbordertype = headerbordertype;
			this.on_apply_style_headerbordertype(headerbordertype);
		}
		var headerborder = this.on_find_CurrentStyle_headerborder(pseudo);
		if (curstyle.headerborder != headerborder) {
			curstyle.headerborder = headerborder;
			this.on_apply_style_headerborder(headerborder);
		}
		var headerfont = this.on_find_CurrentStyle_headerfont(pseudo);
		if (curstyle.headerfont != headerfont) {
			curstyle.headerfont = headerfont;
			this.on_apply_style_headerfont(headerfont);
		}

		var bodybackground = this.on_find_CurrentStyle_bodybackground(pseudo);
		if (curstyle.bodybackground != bodybackground) {
			curstyle.bodybackground = bodybackground;
			this.on_apply_style_bodybackground(bodybackground);
		}
		var bodygradation = this.on_find_CurrentStyle_bodygradation(pseudo);
		if (curstyle.bodygradation != bodygradation) {
			curstyle.bodygradation = bodygradation;
			this.on_apply_style_bodygradation(bodygradation);
		}
		var bodybordertype = this.on_find_CurrentStyle_bodybordertype(pseudo);
		if (curstyle.bodybordertype != bodybordertype) {
			curstyle.bodybordertype = bodybordertype;
			this.on_apply_style_bodybordertype(bodybordertype);
		}
		var bodyborder = this.on_find_CurrentStyle_bodyborder(pseudo);
		if (curstyle.bodyborder != bodyborder) {
			curstyle.bodyborder = bodyborder;
			this.on_apply_style_bodyborder(bodyborder);
		}

		var weekformat = this.on_find_CurrentStyle_weekformat(pseudo);
		if (curstyle.weekformat != weekformat) {
			curstyle.weekformat = weekformat;
		}
		var weekcolor = this.on_find_CurrentStyle_weekcolor(pseudo);
		if (curstyle.weekcolor != weekcolor) {
			curstyle.weekcolor = weekcolor;
		}
		var weekbackground = this.on_find_CurrentStyle_weekbackground(pseudo);
		if (curstyle.weekbackground != weekbackground) {
			curstyle.weekbackground = weekbackground;
		}
		var weekgradation = this.on_find_CurrentStyle_weekgradation(pseudo);
		if (curstyle.weekgradation != weekgradation) {
			curstyle.weekgradation = weekgradation;
		}
		var weekfont = this.on_find_CurrentStyle_weekfont(pseudo);
		if (curstyle.weekfont != weekfont) {
			curstyle.weekfont = weekfont;
		}

		var todaycolor = this.on_find_CurrentStyle_todaycolor(pseudo);
		if (curstyle.todaycolor != todaycolor) {
			curstyle.todaycolor = todaycolor;
		}
		var todaybackground = this.on_find_CurrentStyle_todaybackground(pseudo);
		if (curstyle.todaybackground != todaybackground) {
			curstyle.todaybackground = todaybackground;
		}
		var todaygradation = this.on_find_CurrentStyle_todaygradation(pseudo);
		if (curstyle.todaygradation != todaygradation) {
			curstyle.todaygradation = todaygradation;
		}
		var todaybordertype = this.on_find_CurrentStyle_todaybordertype(pseudo);
		if (curstyle.todaybordertype != todaybordertype) {
			curstyle.todaybordertype = todaybordertype;
		}
		var todayborder = this.on_find_CurrentStyle_todayborder(pseudo);
		if (curstyle.todayborder != todayborder) {
			curstyle.todayborder = todayborder;
		}
		var todayfont = this.on_find_CurrentStyle_todayfont(pseudo);
		if (curstyle.todayfont != todayfont) {
			curstyle.todayfont = todayfont;
		}

		var saturdaycolor = this.on_find_CurrentStyle_saturdaycolor(pseudo);
		if (curstyle.saturdaycolor != saturdaycolor) {
			curstyle.saturdaycolor = saturdaycolor;
		}
		var saturdaybackground = this.on_find_CurrentStyle_saturdaybackground(pseudo);
		if (curstyle.saturdaybackground != saturdaybackground) {
			curstyle.saturdaybackground = saturdaybackground;
		}
		var saturdaygradation = this.on_find_CurrentStyle_saturdaygradation(pseudo);
		if (curstyle.saturdaygradation != saturdaygradation) {
			curstyle.saturdaygradation = saturdaygradation;
		}
		var saturdaybordertype = this.on_find_CurrentStyle_saturdaybordertype(pseudo);
		if (curstyle.saturdaybordertype != saturdaybordertype) {
			curstyle.saturdaybordertype = saturdaybordertype;
		}
		var saturdayborder = this.on_find_CurrentStyle_saturdayborder(pseudo);
		if (curstyle.saturdayborder != saturdayborder) {
			curstyle.saturdayborder = saturdayborder;
		}
		var saturdayfont = this.on_find_CurrentStyle_saturdayfont(pseudo);
		if (curstyle.saturdayfont != saturdayfont) {
			curstyle.saturdayfont = saturdayfont;
		}

		var sundaycolor = this.on_find_CurrentStyle_sundaycolor(pseudo);
		if (curstyle.sundaycolor != sundaycolor) {
			curstyle.sundaycolor = sundaycolor;
		}
		var sundaybackground = this.on_find_CurrentStyle_sundaybackground(pseudo);
		if (curstyle.sundaybackground != sundaybackground) {
			curstyle.sundaybackground = sundaybackground;
		}
		var sundaygradation = this.on_find_CurrentStyle_sundaygradation(pseudo);
		if (curstyle.sundaygradation != sundaygradation) {
			curstyle.sundaygradation = sundaygradation;
		}
		var sundaybordertype = this.on_find_CurrentStyle_sundaybordertype(pseudo);
		if (curstyle.sundaybordertype != sundaybordertype) {
			curstyle.sundaybordertype = sundaybordertype;
		}
		var sundayborder = this.on_find_CurrentStyle_sundayborder(pseudo);
		if (curstyle.sundayborder != sundayborder) {
			curstyle.sundayborder = sundayborder;
		}
		var sundayfont = this.on_find_CurrentStyle_sundayfont(pseudo);
		if (curstyle.sundayfont != sundayfont) {
			curstyle.sundayfont = sundayfont;
		}

		var usetrailingday = this.on_find_CurrentStyle_usetrailingday(pseudo);
		if (curstyle.usetrailingday != usetrailingday) {
			curstyle.usetrailingday = usetrailingday;
		}
		var trailingdaycolor = this.on_find_CurrentStyle_trailingdaycolor(pseudo);
		if (curstyle.trailingdaycolor != trailingdaycolor) {
			curstyle.trailingdaycolor = trailingdaycolor;
		}
		var trailingdaybackground = this.on_find_CurrentStyle_trailingdaybackground(pseudo);
		if (curstyle.trailingdaybackground != trailingdaybackground) {
			curstyle.trailingdaybackground = trailingdaybackground;
		}
		var trailingdaygradation = this.on_find_CurrentStyle_trailingdaygradation(pseudo);
		if (curstyle.trailingdaygradation != trailingdaygradation) {
			curstyle.trailingdaygradation = trailingdaygradation;
		}
		var trailingdaybordertype = this.on_find_CurrentStyle_trailingdaybordertype(pseudo);
		if (curstyle.trailingdaybordertype != trailingdaybordertype) {
			curstyle.trailingdaybordertype = trailingdaybordertype;
		}
		var trailingdayborder = this.on_find_CurrentStyle_trailingdayborder(pseudo);
		if (curstyle.trailingdayborder != trailingdayborder) {
			curstyle.trailingdayborder = trailingdayborder;
		}
		var trailingdayfont = this.on_find_CurrentStyle_trailingdayfont(pseudo);
		if (curstyle.trailingdayfont != trailingdayfont) {
			curstyle.trailingdayfont = trailingdayfont;
		}

		var viewyearspin = this.on_find_CurrentStyle_viewyearspin(pseudo);
		if (curstyle.viewyearspin != viewyearspin) {
			curstyle.viewyearspin = viewyearspin;
			this.on_apply_style_viewyearspin(viewyearspin);
		}
		var viewmonthspin = this.on_find_CurrentStyle_viewmonthspin(pseudo);
		if (curstyle.viewmonthspin != viewmonthspin) {
			curstyle.viewmonthspin = viewmonthspin;
			this.on_apply_style_viewmonthspin(viewmonthspin);
		}
	};

	_pDatePicker.on_create_custom_style = function () {
		return new nexacro.DatePicker_Style(this);
	};

	_pDatePicker.on_create_custom_currentStyle = function () {
		return new nexacro.DatePicker_CurrentStyle();
	};


	_pDatePicker.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent._find_pseudo_obj("popupalign", pseudo, "align") || this._find_pseudo_obj("align", pseudo, "align");
	};

	_pDatePicker.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_cursor("cursor", pseudo) || this._find_pseudo_obj("cursor", pseudo) || nexacro.Component._default_cursor;
	};

	_pDatePicker.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent._find_pseudo_obj("popupbackground", pseudo, "background") || this._find_pseudo_obj("background", pseudo, "background");
	};

	_pDatePicker.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent._find_pseudo_obj("popupborder", pseudo, "border") || this._find_pseudo_obj("border", pseudo, "border");
	};

	_pDatePicker.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent._find_pseudo_obj("popupbordertype", pseudo, "bordertype") || this._find_pseudo_obj("bordertype", pseudo, "bordertype");
	};

	_pDatePicker.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent._find_pseudo_obj("popupgradation", pseudo, "gradation") || this._find_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pDatePicker.on_find_CurrentStyle_ncpadding = function (pseudo) {
		return this._find_pseudo_obj("ncpadding", pseudo, "padding") || nexacro.DatePicker._defaultNCPadding;
	};

	_pDatePicker.on_find_CurrentStyle_daysize = function (pseudo) {
		return this.parent._find_pseudo_obj("daysize", pseudo) || this._find_pseudo_obj("daysize", pseudo) || nexacro.DatePicker._defaultDaysize;
	};

	_pDatePicker.on_find_CurrentStyle_daybackground = function (pseudo) {
		return this.parent._find_pseudo_obj("daybackground", pseudo, "background") || this._find_pseudo_obj("daybackground", pseudo, "background");
	};

	_pDatePicker.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pDatePicker.on_find_CurrentStyle_daygradation = function (pseudo) {
		return this.parent._find_pseudo_obj("daygradation", pseudo, "gradation") || this._find_pseudo_obj("daygradation", pseudo, "gradation");
	};

	_pDatePicker.on_find_CurrentStyle_dayborder = function (pseudo) {
		return this.parent._find_pseudo_obj("dayborder", pseudo, "border") || this._find_pseudo_obj("dayborder", pseudo, "border");
	};

	_pDatePicker.on_find_CurrentStyle_daybordertype = function (pseudo) {
		return this.parent._find_pseudo_obj("daybordertype", pseudo, "bordertype") || this._find_pseudo_obj("daybordertype", pseudo, "bordertype");
	};

	_pDatePicker.on_find_CurrentStyle_daycolor = function (pseudo) {
		return this.parent._find_pseudo_obj("daycolor", pseudo, "color") || this._find_pseudo_obj("daycolor", pseudo, "color") || this._find_inherit_pseudo_obj("daycolor", pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_dayfont = function (pseudo) {
		return this.parent._find_pseudo_obj("dayfont", pseudo, "font") || this._find_pseudo_obj("dayfont", pseudo, "font") || this._find_inherit_pseudo_obj("dayfont", pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_headerformat = function (pseudo) {
		return this._find_pseudo_obj("headerformat", pseudo) || nexacro.DatePicker._defaultHeaderformat;
	};

	_pDatePicker.on_find_CurrentStyle_headerheight = function (pseudo) {
		return this._find_pseudo_obj("headerheight", pseudo) || nexacro.DatePicker._defaultHeaderheight;
	};

	_pDatePicker.on_find_CurrentStyle_headerbackground = function (pseudo) {
		return this._find_pseudo_obj("headerbackground", pseudo, "background");
	};

	_pDatePicker.on_find_CurrentStyle_headergradation = function (pseudo) {
		return this._find_pseudo_obj("headergradation", pseudo, "gradation");
	};

	_pDatePicker.on_find_CurrentStyle_headerborder = function (pseudo) {
		return this._find_pseudo_obj("headerborder", pseudo, "border");
	};

	_pDatePicker.on_find_CurrentStyle_headerbordertype = function (pseudo) {
		return this._find_pseudo_obj("headerbordertype", pseudo, "bordertype");
	};

	_pDatePicker.on_find_CurrentStyle_headercolor = function (pseudo) {
		return this._find_pseudo_obj("headercolor", pseudo, "color");
	};

	_pDatePicker.on_find_CurrentStyle_headerfont = function (pseudo) {
		return this._find_pseudo_obj("headerfont", pseudo, "font");
	};

	_pDatePicker.on_find_CurrentStyle_bodybackground = function (pseudo) {
		return this._find_pseudo_obj("bodybackground", pseudo, "background");
	};

	_pDatePicker.on_find_CurrentStyle_bodygradation = function (pseudo) {
		return this._find_pseudo_obj("bodygradation", pseudo, "gradation");
	};

	_pDatePicker.on_find_CurrentStyle_bodyborder = function (pseudo) {
		return this._find_pseudo_obj("bodyborder", pseudo, "border");
	};

	_pDatePicker.on_find_CurrentStyle_bodybordertype = function (pseudo) {
		return this._find_pseudo_obj("bodybordertype", pseudo, "bordertype");
	};

	_pDatePicker.on_find_CurrentStyle_weekformat = function (pseudo) {
		return this._find_pseudo_obj("weekformat", pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_weekbackground = function (pseudo) {
		return this._find_pseudo_obj("weekbackground", pseudo, "background");
	};

	_pDatePicker.on_find_CurrentStyle_weekgradation = function (pseudo) {
		return this._find_pseudo_obj("weekgradation", pseudo, "gradation");
	};
	_pDatePicker.on_find_CurrentStyle_weekcolor = function (pseudo) {
		return this._find_pseudo_obj("weekcolor", pseudo, "color");
	};

	_pDatePicker.on_find_CurrentStyle_weekfont = function (pseudo) {
		return this._find_pseudo_obj("weekfont", pseudo) || nexacro.Component._default_font;
	};

	_pDatePicker.on_find_CurrentStyle_saturdaybackground = function (pseudo) {
		return this._find_pseudo_obj("saturdaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_saturdayborder = function (pseudo) {
		return this._find_pseudo_obj("saturdayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_saturdaybordertype = function (pseudo) {
		return this._find_pseudo_obj("saturdaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_saturdaycolor = function (pseudo) {
		return this._find_pseudo_obj("saturdaycolor", pseudo, "color") || nexacro.DatePicker._defaultSaturdaycolor;
	};

	_pDatePicker.on_find_CurrentStyle_saturdayfont = function (pseudo) {
		return this._find_pseudo_obj("saturdayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_saturdaygradation = function (pseudo) {
		return this._find_pseudo_obj("saturdaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_sundaybackground = function (pseudo) {
		return this._find_pseudo_obj("sundaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_sundaygradation = function (pseudo) {
		return this._find_pseudo_obj("sundaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_sundayborder = function (pseudo) {
		return this._find_pseudo_obj("sundayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_sundaybordertype = function (pseudo) {
		return this._find_pseudo_obj("sundaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_sundaycolor = function (pseudo) {
		return this._find_pseudo_obj("sundaycolor", pseudo, "color") || nexacro.DatePicker._defaultSundaycolor;
	};

	_pDatePicker.on_find_CurrentStyle_sundayfont = function (pseudo) {
		return this._find_pseudo_obj("sundayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_todaybackground = function (pseudo) {
		return this._find_pseudo_obj("todaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_todaygradation = function (pseudo) {
		return this._find_pseudo_obj("todaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_todayborder = function (pseudo) {
		return this._find_pseudo_obj("todayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_todaybordertype = function (pseudo) {
		return this._find_pseudo_obj("todaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_todaycolor = function (pseudo) {
		return this._find_pseudo_obj("todaycolor", pseudo, "color") || nexacro.DatePicker._defaultTodaycolor;
	};

	_pDatePicker.on_find_CurrentStyle_todayfont = function (pseudo) {
		return this._find_pseudo_obj("todayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_usetrailingday = function (pseudo) {
		return this.parent._find_pseudo_obj("usetrailingday", pseudo) || this._find_pseudo_obj("usetrailingday", pseudo) || nexacro.DatePicker._defaultUseTrailngday;
	};

	_pDatePicker.on_find_CurrentStyle_trailingdaybackground = function (pseudo) {
		return this._find_pseudo_obj("trailingdaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_trailingdaygradation = function (pseudo) {
		return this._find_pseudo_obj("trailingdaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_trailingdayborder = function (pseudo) {
		return this._find_pseudo_obj("trailingdayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_trailingdaybordertype = function (pseudo) {
		return this._find_pseudo_obj("trailingdaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_trailingdaycolor = function (pseudo) {
		return this.parent._find_pseudo_obj("trailingdaycolor", pseudo, "color") || this._find_pseudo_obj("trailingdaycolor", pseudo, "color") || this.on_find_CurrentStyle_daycolor(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_trailingdayfont = function (pseudo) {
		return this._find_pseudo_obj("trailingdayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePicker.on_find_CurrentStyle_viewmonthspin = function (pseudo) {
		return this.parent._find_pseudo_obj("viewmonthspin", pseudo) || this._find_pseudo_obj("viewmonthspin", pseudo) || nexacro.DatePicker._defaultViewMonthSpin;
	};

	_pDatePicker.on_find_CurrentStyle_viewyearspin = function (pseudo) {
		return this.parent._find_pseudo_obj("viewyearspin", pseudo) || this._find_pseudo_obj("viewyearspin", pseudo) || nexacro.DatePicker._defaultViewYearSpin;
	};


	_pDatePicker.on_update_style_ncpadding = function () {
		this.on_apply_style_ncpadding(this.currentstyle.ncpadding = this.on_find_CurrentStyle_ncpadding(this._pseudo));
	};

	_pDatePicker.on_update_style_daysize = function () {
		this.on_apply_style_daysize(this.currentstyle.daysize = this.on_find_CurrentStyle_daysize(this._pseudo));
	};

	_pDatePicker.on_update_style_daycolor = function () {
		this.on_apply_style_daycolor(this.currentstyle.daycolor = this.on_find_CurrentStyle_daycolor(this._pseudo));
	};

	_pDatePicker.on_update_style_daybackground = function () {
		this.on_apply_style_daybackground(this.currentstyle.daybackground = this.on_find_CurrentStyle_daybackground(this._pseudo));
	};

	_pDatePicker.on_update_style_daygradation = function () {
		this.on_apply_style_daygradation(this.currentstyle.daygradation = this.on_find_CurrentStyle_daygradation(this._pseudo));
	};

	_pDatePicker.on_update_style_dayborder = function () {
		this.on_apply_style_dayborder(this.currentstyle.dayborder = this.on_find_CurrentStyle_dayborder(this._pseudo));
	};

	_pDatePicker.on_update_style_daybordertype = function () {
		this.on_apply_style_daybordertype(this.currentstyle.daybordertype = this.on_find_CurrentStyle_daybordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_dayfont = function () {
		this.on_apply_style_dayfont(this.currentstyle.dayfont = this.on_find_CurrentStyle_dayfont(this._pseudo));
	};

	_pDatePicker.on_update_style_headerformat = function () {
		this.on_apply_style_headerformat(this.currentstyle.headerformat = this.on_find_CurrentStyle_headerformat(this._pseudo));
	};

	_pDatePicker.on_update_style_headerheight = function () {
		this.on_apply_style_headerheight(this.currentstyle.headerheight = this.on_find_CurrentStyle_headerheight(this._pseudo));
	};

	_pDatePicker.on_update_style_headercolor = function () {
		this.on_apply_style_headercolor(this.currentstyle.headercolor = this.on_find_CurrentStyle_headercolor(this._pseudo));
	};

	_pDatePicker.on_update_style_headerbackground = function () {
		this.on_apply_style_headerbackground(this.currentstyle.headerbackground = this.on_find_CurrentStyle_headerbackground(this._pseudo));
	};

	_pDatePicker.on_update_style_headergradation = function () {
		this.on_apply_style_headergradation(this.currentstyle.headergradation = this.on_find_CurrentStyle_headergradation(this._pseudo));
	};

	_pDatePicker.on_update_style_headerborder = function () {
		this.on_apply_style_headerborder(this.currentstyle.headerborder = this.on_find_CurrentStyle_headerborder(this._pseudo));
	};

	_pDatePicker.on_update_style_headerbordertype = function () {
		this.on_apply_style_headerbordertype(this.currentstyle.headerbordertype = this.on_find_CurrentStyle_headerbordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_headerfont = function () {
		this.on_apply_style_headerfont(this.currentstyle.headerfont = this.on_find_CurrentStyle_headerfont(this._pseudo));
	};

	_pDatePicker.on_update_style_bodybackground = function () {
		this.on_apply_style_bodybackground(this.currentstyle.bodybackground = this.on_find_CurrentStyle_bodybackground(this._pseudo));
	};

	_pDatePicker.on_update_style_bodygradation = function () {
		this.on_apply_style_bodygradation(this.currentstyle.bodygradation = this.on_find_CurrentStyle_bodygradation(this._pseudo));
	};

	_pDatePicker.on_update_style_bodyborder = function () {
		this.on_apply_style_bodyborder(this.currentstyle.bodyborder = this.on_find_CurrentStyle_bodyborder(this._pseudo));
	};

	_pDatePicker.on_update_style_bodybordertype = function () {
		this.on_apply_style_bodybordertype(this.currentstyle.bodybordertype = this.on_find_CurrentStyle_bodybordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_weekformat = function () {
		this.on_apply_style_weekformat(this.currentstyle.weekformat = this.on_find_CurrentStyle_weekformat(this._pseudo));
	};

	_pDatePicker.on_update_style_weekcolor = function () {
		this.on_apply_style_weekcolor(this.currentstyle.weekcolor = this.on_find_CurrentStyle_weekcolor(this._pseudo));
	};

	_pDatePicker.on_update_style_weekbackground = function () {
		this.on_apply_style_weekbackground(this.currentstyle.weekbackground = this.on_find_CurrentStyle_weekbackground(this._pseudo));
	};

	_pDatePicker.on_update_style_weekgradation = function () {
		this.on_apply_style_weekgradation(this.currentstyle.weekgradation = this.on_find_CurrentStyle_weekgradation(this._pseudo));
	};

	_pDatePicker.on_update_style_weekfont = function () {
		this.on_apply_style_weekfont(this.currentstyle.weekfont = this.on_find_CurrentStyle_weekfont(this._pseudo));
	};

	_pDatePicker.on_update_style_todaycolor = function () {
		this.on_apply_style_todaycolor(this.currentstyle.todaycolor = this.on_find_CurrentStyle_todaycolor(this._pseudo));
	};

	_pDatePicker.on_update_style_todaybackground = function () {
		this.on_apply_style_todaybackground(this.currentstyle.todaybackground = this.on_find_CurrentStyle_todaybackground(this._pseudo));
	};

	_pDatePicker.on_update_style_todaygradation = function () {
		this.on_apply_style_todaygradation(this.currentstyle.todaygradation = this.on_find_CurrentStyle_todaygradation(this._pseudo));
	};

	_pDatePicker.on_update_style_todayborder = function () {
		this.on_apply_style_todayborder(this.currentstyle.todayborder = this.on_find_CurrentStyle_todayborder(this._pseudo));
	};

	_pDatePicker.on_update_style_todaybordertype = function () {
		this.on_apply_style_todaybordertype(this.currentstyle.todaybordertype = this.on_find_CurrentStyle_todaybordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_todayfont = function () {
		this.on_apply_style_todayfont(this.currentstyle.todayfont = this.on_find_CurrentStyle_todayfont(this._pseudo));
	};

	_pDatePicker.on_update_style_saturdaycolor = function () {
		this.on_apply_style_saturdaycolor(this.currentstyle.saturdaycolor = this.on_find_CurrentStyle_saturdaycolor(this._pseudo));
	};

	_pDatePicker.on_update_style_saturdaybackground = function () {
		this.on_apply_style_saturdaybackground(this.currentstyle.saturdaybackground = this.on_find_CurrentStyle_saturdaybackground(this._pseudo));
	};

	_pDatePicker.on_update_style_saturdaygradation = function () {
		this.on_apply_style_saturdaygradation(this.currentstyle.saturdaygradation = this.on_find_CurrentStyle_saturdaygradation(this._pseudo));
	};

	_pDatePicker.on_update_style_saturdayborder = function () {
		this.on_apply_style_saturdayborder(this.currentstyle.saturdayborder = this.on_find_CurrentStyle_saturdayborder(this._pseudo));
	};

	_pDatePicker.on_update_style_saturdaybordertype = function () {
		this.on_apply_style_saturdaybordertype(this.currentstyle.saturdaybordertype = this.on_find_CurrentStyle_saturdaybordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_saturdayfont = function () {
		this.on_apply_style_saturdayfont(this.currentstyle.saturdayfont = this.on_find_CurrentStyle_saturdayfont(this._pseudo));
	};

	_pDatePicker.on_update_style_sundaycolor = function () {
		this.on_apply_style_sundaycolor(this.currentstyle.sundaycolor = this.on_find_CurrentStyle_sundaycolor(this._pseudo));
	};

	_pDatePicker.on_update_style_sundaybackground = function () {
		this.on_apply_style_sundaybackground(this.currentstyle.sundaybackground = this.on_find_CurrentStyle_sundaybackground(this._pseudo));
	};

	_pDatePicker.on_update_style_sundaygradation = function () {
		this.on_apply_style_sundaygradation(this.currentstyle.sundaygradation = this.on_find_CurrentStyle_sundaygradation(this._pseudo));
	};

	_pDatePicker.on_update_style_sundayborder = function () {
		this.on_apply_style_sundayborder(this.currentstyle.sundayborder = this.on_find_CurrentStyle_sundayborder(this._pseudo));
	};

	_pDatePicker.on_update_style_sundaybordertype = function () {
		this.on_apply_style_sundaybordertype(this.currentstyle.sundaybordertype = this.on_find_CurrentStyle_sundaybordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_sundayfont = function () {
		this.on_apply_style_sundayfont(this.currentstyle.sundayfont = this.on_find_CurrentStyle_sundayfont(this._pseudo));
	};

	_pDatePicker.on_update_style_usetrailingday = function () {
		this.on_apply_style_usetrailingday(this.currentstyle.usetrailingday = this.on_find_CurrentStyle_usetrailingday(this._pseudo));
	};

	_pDatePicker.on_update_style_trailingdaycolor = function () {
		this.on_apply_style_trailingdaycolor(this.currentstyle.trailingdaycolor = this.on_find_CurrentStyle_trailingdaycolor(this._pseudo));
	};

	_pDatePicker.on_update_style_trailingdaybackground = function () {
		this.on_apply_style_trailingdaybackground(this.currentstyle.trailingdaybackground = this.on_find_CurrentStyle_trailingdaybackground(this._pseudo));
	};

	_pDatePicker.on_update_style_trailingdaygradation = function () {
		this.on_apply_style_trailingdaygradation(this.currentstyle.trailingdaygradation = this.on_find_CurrentStyle_trailingdaygradation(this._pseudo));
	};

	_pDatePicker.on_update_style_trailingdayborder = function () {
		this.on_apply_style_trailingdayborder(this.currentstyle.trailingdayborder = this.on_find_CurrentStyle_trailingdayborder(this._pseudo));
	};

	_pDatePicker.on_update_style_trailingdaybordertype = function () {
		this.on_apply_style_trailingdaybordertype(this.currentstyle.trailingdaybordertype = this.on_find_CurrentStyle_trailingdaybordertype(this._pseudo));
	};

	_pDatePicker.on_update_style_trailingdayfont = function () {
		this.on_apply_style_trailingdayfont(this.currentstyle.trailingdayfont = this.on_find_CurrentStyle_trailingdayfont(this._pseudo));
	};

	_pDatePicker.on_update_style_viewyearspin = function () {
		this.on_apply_style_viewyearspin(this.currentstyle.viewyearspin = this.on_find_CurrentStyle_viewyearspin(this._pseudo));
	};

	_pDatePicker.on_update_style_viewmonthspin = function () {
		this.on_apply_style_viewmonthspin(this.currentstyle.viewmonthspin = this.on_find_CurrentStyle_viewmonthspin(this._pseudo));
	};


	_pDatePicker.on_apply_style_border = function (border) {
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			control_elem.setElementBorder(border, curstyle.bordertype);
			control_elem.setElementBackground(this.on_find_CurrentStyle_background("normal"), this.on_find_CurrentStyle_gradation("normal"));
			this._updateClientSize(control_elem);
		}
	};

	_pDatePicker.on_apply_style_bordertype = function (bordertype) {
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			control_elem.setElementBorder(curstyle.border, bordertype);
			control_elem.setElementBackground(this.on_find_CurrentStyle_background("normal"), this.on_find_CurrentStyle_gradation("normal"));
			this._updateClientSize(control_elem);
		}
	};

	_pDatePicker.on_apply_style_ncpadding = function (ncpadding) {
		;
	};

	_pDatePicker.on_apply_style_daysize = function (size) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_daysize(size);
		}
	};

	_pDatePicker.on_apply_style_daycolor = function (color) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_daycolor(color);
		}
	};

	_pDatePicker.on_apply_style_daybackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_daybackground(background);
		}
	};

	_pDatePicker.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pDatePicker.on_apply_style_daygradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_daygradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_dayborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_dayborder(border);
		}
	};

	_pDatePicker.on_apply_style_daybordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_daybordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_dayfont = function (font) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_dayfont(font);
		}
	};

	_pDatePicker.on_apply_style_headerformat = function (format) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header._setFormat(format);
		}
	};

	_pDatePicker.on_apply_style_headerheight = function (height) {
		;
	};

	_pDatePicker.on_apply_style_headercolor = function (color) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header.on_apply_style_color(color);
		}
	};

	_pDatePicker.on_apply_style_headerbackground = function (background) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header.on_apply_style_background(background);
		}
	};

	_pDatePicker.on_apply_style_headergradation = function (gradation) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header.style.set_gradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_headerborder = function (border) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header.on_apply_style_border(border);
		}
	};

	_pDatePicker.on_apply_style_headerbordertype = function (bordertype) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header.on_apply_style_bordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_headerfont = function (font) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header.on_apply_style_font(font);
		}
	};

	_pDatePicker.on_apply_style_bodybackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_background(background);
		}
	};

	_pDatePicker.on_apply_style_bodygradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_gradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_bodyborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_border(border);
		}
	};

	_pDatePicker.on_apply_style_bodybordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_bordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_weekformat = function (format) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekformat(format);
		}
	};

	_pDatePicker.on_apply_style_weekcolor = function (color) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekcolor(color);
		}
	};

	_pDatePicker.on_apply_style_weekbackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekbackground(background);
		}
	};

	_pDatePicker.on_apply_style_weekgradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekgradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_weekborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekborder(border);
		}
	};

	_pDatePicker.on_apply_style_weekbordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekbordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_weekfont = function (font) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_weekfont(font);
		}
	};

	_pDatePicker.on_apply_style_todaycolor = function (color) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_todaycolor(color);
		}
	};

	_pDatePicker.on_apply_style_todaybackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_todaybackground(background);
		}
	};

	_pDatePicker.on_apply_style_todaygradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_todaygradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_todayborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_todayborder(border);
		}
	};

	_pDatePicker.on_apply_style_todaybordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_todaybordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_todayfont = function (font) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_todayfont(font);
		}
	};

	_pDatePicker.on_apply_style_saturdaycolor = function (color) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_saturdaycolor(color);
		}
	};

	_pDatePicker.on_apply_style_saturdaybackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_saturdaybackground(background);
		}
	};

	_pDatePicker.on_apply_style_saturdaygradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_saturdaygradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_saturdayborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_saturdayborder(border);
		}
	};

	_pDatePicker.on_apply_style_saturdaybordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_saturdaybordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_saturdayfont = function (font) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_saturdayfont(font);
		}
	};

	_pDatePicker.on_apply_style_sundaycolor = function (color) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_sundaycolor(color);
		}
	};

	_pDatePicker.on_apply_style_sundaybackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_sundaybackground(background);
		}
	};

	_pDatePicker.on_apply_style_sundaygradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_sundaygradation(gradation);
		}
	};
	_pDatePicker.on_apply_style_sundayborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_sundayborder(border);
		}
	};

	_pDatePicker.on_apply_style_sundaybordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_sundaybordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_sundayfont = function (font) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_sundayfont(font);
		}
	};

	_pDatePicker.on_apply_style_usetrailingday = function (usetrailingday) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_usetrailingday(usetrailingday);
		}
	};

	_pDatePicker.on_apply_style_trailingdaycolor = function (color) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_trailingdaycolor(color);
		}
	};

	_pDatePicker.on_apply_style_trailingdaybackground = function (background) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_trailingdaybackground(background);
		}
	};

	_pDatePicker.on_apply_style_trailingdaygradation = function (gradation) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_trailingdaygradation(gradation);
		}
	};

	_pDatePicker.on_apply_style_trailingdayborder = function (border) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_trailingdayborder(border);
		}
	};

	_pDatePicker.on_apply_style_trailingdaybordertype = function (bordertype) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_trailingdaybordertype(bordertype);
		}
	};

	_pDatePicker.on_apply_style_trailingdayfont = function (font) {
		var control_elem = this.getElement();
		var body = this._body;
		if (control_elem && body) {
			body.on_apply_style_trailingdayfont(font);
		}
	};

	_pDatePicker.on_apply_style_viewyearspin = function (v) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header._setViewYearSpin(v);
		}
	};
	_pDatePicker.on_apply_style_viewmonthspin = function (v) {
		var control_elem = this.getElement();
		var header = this._header;
		if (control_elem && header) {
			header._setViewMonthSpin(v);
		}
	};

	_pDatePicker.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var header = this._header = new nexacro.DatePickerHeader("header", "absolute", 0, 0, 0, 0, null, null, this);
			var body = this._body = new nexacro.DatePickerBody("body", "absolute", 0, 0, 0, 0, null, null, this);

			header.createComponent();
			this.prevbutton = header._prevButton;
			this.nextbutton = header._nextButton;
			this.yearspin = header._yearSpin;
			this.monthspin = header._monthSpin;

			if (!this._delay_create) {
				body.createComponent();
			}
		}
	};

	_pDatePicker.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var header = this._header;
			var body = this._body;

			if (this._delay_create) {
				body.createComponent(true);
			}

			header._setEventHandler("onprevclick", this.on_notify_datepicker_onprevclick, this);
			header._setEventHandler("onnextclick", this.on_notify_datepicker_onnextclick, this);
			header._setEventHandler("onyearspin", this.on_notify_datepicker_onyearspin, this);
			header._setEventHandler("onmonthspin", this.on_notify_datepicker_onmonthspin, this);
			body._setEventHandler("ondayclick", this.on_notify_datepicker_ondayclick, this);
			this._setEventHandler("onlbuttondown", this.on_notify_datepicker_onlbuttondown);
			this._setEventHandler("ontouchstart", this.on_notify_datepicker_onlbuttondown);

			header.on_created();
			body.on_created();

			this.on_apply_prop_rtldirection();

			this._resizePicker();
		}
	};

	_pDatePicker.on_destroy_contents = function () {
		this.prevbutton = null;
		this.nextbutton = null;
		this.yearspin = null;
		this.monthspin = null;

		if (this._header) {
			this._header.destroy();
		}
		if (this._body) {
			this._body.destroy();
		}
	};

	_pDatePicker.on_change_containerRect = function (width, height) {
		this._resizePicker();
	};

	_pDatePicker.on_apply_prop_enable = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			var header = this._header;
			var body = this._body;
			if (header) {
				header._setEnable(v);
			}
			if (body) {
				body._setEnable(v);
			}
		}
	};

	_pDatePicker.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pDatePicker.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		if (this._header) {
			this._header.set_readonly(v);
		}
		if (this._body) {
			this._body.set_readonly(v);
		}
	};

	_pDatePicker.set_value = function (v) {
		if (v != this.value) {
			this.value = v;
		}
		this.on_apply_value();
	};

	_pDatePicker.on_apply_value = function () {
		var v = this.value;

		var year = v.substr(0, 4);
		var month = v.substr(4, 2);
		var day = v.substr(6, 2);

		this._selected_year = parseInt(year, 10);
		this._selected_month = parseInt(month, 10);
		this._selected_day = parseInt(day, 10);

		if (this._header) {
			this._header._setYear(year);
			this._header._setMonth(month);
		}
		if (this._body) {
			this._body._setDate(year, month, day);
		}
	};

	_pDatePicker.set_backgroundcolumn = function (v) {
		if (this._body) {
			this._body.on_apply_backgroundcolumn(v);
		}
	};
	_pDatePicker.on_apply_backgroundcolumn = function (v) {
		if (this._body) {
			this._body.on_apply_backgroundcolumn(v);
		}
	};

	_pDatePicker.on_apply_bordercolumn = function (v) {
		if (this._body) {
			this._body.on_apply_bordercolumn(v);
		}
	};

	_pDatePicker.on_apply_datecolumn = function (v) {
		if (this._body) {
			this._body.on_apply_datecolumn(v);
		}
	};

	_pDatePicker.on_apply_innerdataset = function (v) {
		if (this._body) {
			this._body.on_apply_innerdataset(v);
		}
	};

	_pDatePicker.on_apply_textcolorcolumn = function (v) {
		if (this._body) {
			this._body.on_apply_textcolorcolumn(v);
		}
	};

	_pDatePicker.on_notify_datepicker_onprevclick = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			return false;
		}

		var body = this._body;
		if (body) {
			body._setYear(obj._year);
			body._setMonth(obj._month);
		}
	};

	_pDatePicker.on_notify_datepicker_onnextclick = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			return false;
		}

		var body = this._body;
		if (body) {
			body._setYear(obj._year);
			body._setMonth(obj._month);
		}
	};

	_pDatePicker.on_notify_datepicker_onyearspin = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			return false;
		}

		var body = this._body;
		if (body) {
			body._setYear(obj._year);
		}
	};

	_pDatePicker.on_notify_datepicker_onmonthspin = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			return false;
		}

		var body = this._body;
		if (body) {
			body._setMonth(obj._month);
		}
	};

	_pDatePicker.on_notify_datepicker_ondayclick = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			return false;
		}

		this._header.hide_spindate();


		var date = new nexacro.Date(obj._post_year, obj._post_month - 1, obj._post_day);
		var ret = this.on_fire_ondayclick(obj, date);

		if (ret || ret === undefined) {
			this._selected_year = obj._post_year;
			this._selected_month = obj._post_month;
			this._selected_day = obj._post_day;
		}

		return ret;
	};

	_pDatePicker.on_notify_datepicker_onlbuttondown = function (obj, e) {
		if (!this.enable || this.readonly == true) {
			return false;
		}

		if (e.fromreferenceobject && (e.fromreferenceobject instanceof nexacro.DatePickerBody || 
			e.fromreferenceobject instanceof nexacro.DatePickerCtrl)) {
			this._hide_spindate();
		}
	};

	_pDatePicker.on_fire_ondayclick = function (obj, date) {
		if (this.ondayclick && this.ondayclick._has_handlers) {
			var evt = new nexacro.CalendarDayClickEventInfo(obj, "ondayclick", date);
			return this.ondayclick._fireEvent(this, evt);
		}
		return false;
	};

	_pDatePicker.on_fire_oncloseup = function (obj) {
		if (this.oncloseup && this.oncloseup._has_handlers) {
			return this.oncloseup._fireEvent(this);
		}

		return false;
	};

	_pDatePicker.on_fire_sys_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var calendar = this.parent;
		var header = this._header;
		var body = this._body;
		var year = body._year | 0;
		var month = body._month | 0;
		var day = body._day | 0;
		var ret;
		switch (keycode) {
			case 13:
				{

					var date = new nexacro.Date(year, month - 1, day);
					this.on_fire_ondayclick(this, date);
				}
				break;
			case 37:
				{

					var dec_month = false;
					var dec_day = false;
					if (ctrl_key) {
						dec_month = true;
					}
					else {
						dec_day = true;
					}

					if (dec_day) {
						day -= 1;
						if (day <= 0) {
							dec_month = true;
						}
					}

					if (dec_month) {
						month -= 1;
						if (month <= 0) {
							if (year <= 0) {
								year = 9999;
							}
							else {
								year -= 1;
							}

							month = 12;
						}

						if (!ctrl_key) {
							day = calendar._getEndDay(year, month) + day;
						}
					}
				}
				break;
			case 38:
				{

					if (ctrl_key) {
						year -= 1;
					}
					else {
						day -= 7;

						if (day <= 0) {
							month -= 1;

							if (month <= 0) {
								if (year <= 0) {
									year = 9999;
								}
								else {
									year -= 1;
								}

								month = 12;
							}

							day = calendar._getEndDay(year, month) + day;
						}
					}
					ret = true;
				}
				break;
			case 39:
				{

					var inc_month = false;
					var inc_day = false;
					if (ctrl_key) {
						inc_month = true;
					}
					else {
						inc_day = true;
					}

					var endday = calendar._getEndDay(year, month);
					if (inc_day) {
						day += 1;
						if (day > endday) {
							inc_month = true;
						}
					}

					if (inc_month) {
						month += 1;
						if (month > 12) {
							if (year >= 9999) {
								year = 0;
							}
							else {
								year += 1;
							}

							month = 1;
						}

						if (inc_day) {
							day -= endday;
						}
					}

				}
				break;
			case 40:
				{

					if (ctrl_key) {
						year += 1;
					}
					else {
						day += 7;
						var endday = calendar._getEndDay(year, month);
						if (day > endday) {
							month += 1;

							if (month > 12) {
								if (year >= 9999) {
									year = 0;
								}
								else {
									year += 1;
								}

								month = 1;
							}
							day -= endday;
						}
					}
					ret = true;
				}
				break;
		}

		if (keycode >= 37 && keycode <= 40) {
			year = body._makeDateText(year, "year");
			month = body._makeDateText(month, "month");
			day = body._makeDateText(day, "day");

			var date = new nexacro.Date(year, month - 1, day);
			this._hide_spindate();


			if (calendar.type == "monthonly") {
				this.on_fire_ondayclick(this, date);
			}
			else {
				this.set_value(year + month + day);
			}
		}

		return false;
	};

	_pDatePicker._resizePicker = function (headerheight, ncpadding) {
		var control_elem = this.getElement();
		if (control_elem) {
			var pseudo = this._pseudo;
			if (!ncpadding) {
				ncpadding = this.on_find_CurrentStyle_ncpadding(pseudo);
			}
			if (!headerheight) {
				headerheight = this.on_find_CurrentStyle_headerheight(pseudo);
			}

			var client_width = this._client_width;
			var client_height = this._client_height;
			var client_left = this._client_left;
			var client_top = this._client_top;

			var body_l = 0 + ncpadding.left;
			var body_t = 0 + ncpadding.top;
			var body_w = (client_width - ncpadding.left - ncpadding.right);
			var body_h = (client_height - ncpadding.top - ncpadding.bottom);

			var header_l = 0 + ncpadding.left;
			var header_t = (body_t / 2) - (parseInt(headerheight, 10) / 2);
			var header_w = (client_width - ncpadding.left - ncpadding.right);
			var header_h = parseInt(headerheight, 10);

			this._body.move(body_l, body_t, body_w, body_h, null, null);
			this._header.move(header_l, header_t, header_w, header_h, null, null);
		}
	};

	_pDatePicker._on_apply_style_day = function (flag) {
		var control = this.getElement();
		if (control) {
			var body = this._body;
			if (body) {
				var day = body._days;
				var day_idx = parseInt(body._day, 10);
				var day_len = day.length;
				var pre_day = this._preDay;
				var obj_day = null;
				var pseudo = "normal";
				if (pre_day != -1) {
					obj_day = day[pre_day];
					if (obj_day) {
						obj_day._pseudo = pseudo;
						var background = obj_day.on_find_CurrentStyle_background(pseudo);
						var border = obj_day.on_find_CurrentStyle_border(pseudo);
						var bordertype = obj_day.on_find_CurrentStyle_bordertype(pseudo);
						var color = obj_day.on_find_CurrentStyle_color(pseudo);
						var font = obj_day.on_find_CurrentStyle_font(pseudo);
						var gradation = obj_day.on_find_CurrentStyle_gradation(pseudo);

						obj_day.on_apply_style_background(background);
						obj_day.on_apply_style_border(border);
						obj_day.on_apply_style_bordertype(bordertype);
						obj_day.on_apply_style_color(color);
						obj_day.on_apply_style_font(font);
						obj_day.on_apply_style_gradation(gradation);
					}
				}

				for (var i = 0; i < day_len; i++) {
					if (day[i].text == "1") {
						break;
					}
				}
				day_idx += (i - 1);
				this._preDay = day_idx;

				pseudo = "selected";
				if (!flag) {
					pseudo = "normal";
				}
				obj_day = day[day_idx];
				if (obj_day) {
					obj_day._pseudo = pseudo;

					var background = obj_day.on_find_CurrentStyle_background(pseudo);
					var border = obj_day.on_find_CurrentStyle_border(pseudo);
					var bordertype = obj_day.on_find_CurrentStyle_bordertype(pseudo);
					var color = obj_day.on_find_CurrentStyle_color(pseudo);
					var font = obj_day.on_find_CurrentStyle_font(pseudo);
					var gradation = obj_day.on_find_CurrentStyle_gradation(pseudo);

					obj_day.on_apply_style_background(background);
					obj_day.on_apply_style_border(border);
					obj_day.on_apply_style_bordertype(bordertype);
					obj_day.on_apply_style_color(color);
					obj_day.on_apply_style_font(font);
					obj_day.on_apply_style_gradation(gradation);
				}

				var currentDate = new Date();
				var today = currentDate.getDate();

				currentDate = null;

				pseudo = "normal";
				if (body._isToday(today)) {
					today += (i - 1);
					obj_day = day[today];
					if (obj_day) {
						obj_day._pseudo = pseudo;

						var background = obj_day.on_find_CurrentStyle_background(obj_day._pseudo);
						var border = obj_day.on_find_CurrentStyle_border(obj_day._pseudo);
						var bordertype = obj_day.on_find_CurrentStyle_bordertype(obj_day._pseudo);
						var color = obj_day.on_find_CurrentStyle_color(obj_day._pseudo);
						var font = obj_day.on_find_CurrentStyle_font(obj_day._pseudo);
						var gradation = obj_day.on_find_CurrentStyle_gradation(obj_day._pseudo);

						obj_day.on_apply_style_background(background);
						obj_day.on_apply_style_border(border);
						obj_day.on_apply_style_bordertype(bordertype);
						obj_day.on_apply_style_color(color);
						obj_day.on_apply_style_font(font);
						obj_day.on_apply_style_gradation(gradation);
					}

					this._preToday = today;
				}
				else {
					var preToday = this._preToday;
					if (preToday != -1) {
						obj_day = day[preToday];
						if (obj_day) {
							obj_day._pseudo = pseudo;
							var background = obj_day.on_find_CurrentStyle_background(pseudo);
							var border = obj_day.on_find_CurrentStyle_border(pseudo);
							var bordertype = obj_day.on_find_CurrentStyle_bordertype(pseudo);
							var color = obj_day.on_find_CurrentStyle_color(pseudo);
							var font = obj_day.on_find_CurrentStyle_font(pseudo);
							var gradation = obj_day.on_find_CurrentStyle_gradation(pseudo);

							obj_day.on_apply_style_background(background);
							obj_day.on_apply_style_border(border);
							obj_day.on_apply_style_bordertype(bordertype);
							obj_day.on_apply_style_color(color);
							obj_day.on_apply_style_font(font);
							obj_day.on_apply_style_gradation(gradation);
						}
					}
				}
			}
		}
	};

	_pDatePicker.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var control_elem = this.getElement();
		if (control_elem) {
			this.on_change_containerRect(this._client_width, this._client_height);

			var _rtldirection = this._rtldirection;

			if (this._header) {
				this._header._setRtlDirection(_rtldirection);
			}
			if (this._body) {
				this._body._setRtlDirection(_rtldirection);
			}
		}
	};

	_pDatePicker._makeCssRefInfoCtrl = function (ctrl) {
		ctrl._refcssobj = this;
		ctrl._refcssid = "#" + ctrl.id;
		return this;
	};

	_pDatePicker._hide_spindate = function () {
		var header = this._header;

		if (header) {
			header.hide_spindate();
		}
	};

	delete _pDatePicker;

	nexacro.DatePickerHeader = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;


		this._event_list = {
			"onprevclick" : 1, 
			"onnextclick" : 1, 
			"onyearspin" : 1, 
			"onmonthspin" : 1
		};
	};

	var _pDatePickerHeader = nexacro._createPrototype(nexacro.Component, nexacro.DatePickerHeader);
	nexacro.DatePickerHeader.prototype = _pDatePickerHeader;

	_pDatePickerHeader._type_name = "DatePickerHeader";

	_pDatePickerHeader._prevButton = null;
	_pDatePickerHeader._nextButton = null;
	_pDatePickerHeader._yearStatic = null;
	_pDatePickerHeader._monthStatic = null;
	_pDatePickerHeader._yearSpin = null;
	_pDatePickerHeader._monthSpin = null;
	_pDatePickerHeader._year = "";
	_pDatePickerHeader._month = "";
	_pDatePickerHeader._day = "";
	_pDatePickerHeader._format = "";
	_pDatePickerHeader._viewyearspin = false;
	_pDatePickerHeader._viewmonthspin = false;
	_pDatePickerHeader._prevButton = null;

	_pDatePickerHeader.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
	};


	_pDatePickerHeader.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerbackground(pseudo);
	};

	_pDatePickerHeader.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerborder(pseudo);
	};

	_pDatePickerHeader.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerbordertype(pseudo);
	};

	_pDatePickerHeader.on_find_CurrentStyle_color = function (pseudo) {
		var color = this.parent.on_find_CurrentStyle_headercolor(pseudo) || 
			this._find_inherit_pseudo_obj("color", pseudo) || 
			nexacro.Component._default_color;
		return color;
	};

	_pDatePickerHeader.on_find_CurrentStyle_font = function (pseudo) {
		var font = this.parent.on_find_CurrentStyle_headerfont(pseudo) || 
			this._find_inherit_pseudo_obj("font", pseudo) || 
			nexacro.Component._default_font;
		return font;
	};

	_pDatePickerHeader.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headergradation(pseudo);
	};

	_pDatePickerHeader.on_find_CurrentStyle_headerformat = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerformat(pseudo);
	};


	_pDatePickerHeader.on_apply_style_color = function (v) {
		if (this._yearStatic) {
			this._yearStatic.on_apply_style_color(v);
		}
		if (this._monthStatic) {
			this._monthStatic.on_apply_style_color(v);
		}
	};

	_pDatePickerHeader.on_apply_style_font = function (v) {
		if (this._yearStatic) {
			this._yearStatic.on_apply_style_font(v);
		}
		if (this._monthStatic) {
			this._monthStatic.on_apply_style_font(v);
		}
	};

	_pDatePickerHeader.on_create_contents = function () {
		this._prevButton = new nexacro.PrevButtonCtrl("prevbutton", "absolute", 0, 0, 0, 0, null, null, this);
		this._nextButton = new nexacro.NextButtonCtrl("nextbutton", "absolute", 0, 0, 0, 0, null, null, this);
		this._yearStatic = new nexacro.HeaderStaticCtrl("yearStatic", "absolute", 0, 0, 0, 0, null, null, this);
		this._monthStatic = new nexacro.HeaderStaticCtrl("monthStatic", "absolute", 0, 0, 0, 0, null, null, this);
		this._yearSpin = new nexacro.HeaderSpinCtrl("yearspin", "absolute", 0, 0, 0, 0, null, null, this);
		this._monthSpin = new nexacro.HeaderSpinCtrl("monthspin", "absolute", 0, 0, 0, 0, null, null, this);

		this._prevButton.createComponent();
		this._nextButton.createComponent();
		this._yearStatic.createComponent();
		this._monthStatic.createComponent();
		this._yearSpin.createComponent();
		this._monthSpin.createComponent();

		this._yearSpin.set_visible(false);
		this._yearSpin.set_min("0");
		this._yearSpin.set_max("9999");
		this._yearSpin.set_circulation(true);
		this._yearSpin.set_displaycomma(false);

		this._monthSpin.set_visible(false);
		this._monthSpin.set_min("1");
		this._monthSpin.set_max("12");
		this._monthSpin.set_circulation(true);
		this._monthSpin.set_displaycomma(false);
	};

	_pDatePickerHeader.on_created_contents = function () {
		this.on_apply_prop_enable(this.enable);

		this._prevButton._setEventHandler("onclick", this.on_notify_header_onprevclick, this);
		this._nextButton._setEventHandler("onclick", this.on_notify_header_onnextclick, this);

		this._yearStatic._setEventHandler("onlbuttondown", this.on_notify_header_onyearstatic_lbuttondown, this);
		this._yearStatic._setEventHandler("ontouchend", this.on_notify_header_onyearstatic_lbuttondown, this);
		this._monthStatic._setEventHandler("onlbuttondown", this.on_notify_header_onmonthstatic_lbuttondown, this);
		this._monthStatic._setEventHandler("ontouchend", this.on_notify_header_onmonthstatic_lbuttondown, this);

		this._yearSpin._setEventHandler("oneditclick", this.on_notify_header_onyearclick, this);
		this._yearSpin._setEventHandler("onspin", this.on_notify_header_onyearspin, this);

		this._yearSpin.spinedit._setEventHandler("onkeydown", this.on_notify_header_onyearkeydown, this);
		this._monthSpin.spinedit._setEventHandler("onkeydown", this.on_notify_header_onmonthkeydown, this);

		this._monthSpin._setEventHandler("oneditclick", this.on_notify_header_onmonthclick, this);
		this._monthSpin._setEventHandler("onspin", this.on_notify_header_onmonthspin, this);

		this._yearSpin.set_value(this._year);
		this._monthSpin.set_value(this._month);

		this._prevButton.on_created();
		this._nextButton.on_created();
		this._yearStatic.on_created();
		this._monthStatic.on_created();
		this._yearSpin.on_created();
		this._monthSpin.on_created();

		this.on_apply_prop_rtldirection();
	};

	_pDatePickerHeader.on_destroy_contents = function () {
		if (this._prevButton) {
			this._prevButton.destroy();
			this._prevButton = null;
		}
		if (this._nextButton) {
			this._nextButton.destroy();
			this._nextButton = null;
		}
		if (this._yearStatic) {
			this._yearStatic.destroy();
			this._yearStatic = null;
		}
		if (this._monthStatic) {
			this._monthStatic.destroy();
			this._monthStatic = null;
		}
		if (this._yearSpin) {
			this._yearSpin.destroy();
			this._yearSpin = null;
		}
		if (this._monthSpin) {
			this._monthSpin.destroy();
			this._monthSpin = null;
		}
	};

	_pDatePickerHeader.on_change_containerRect = function (widht, height) {
		this._resizeHeader();
	};

	_pDatePickerHeader._setEnable = function (v) {
		nexacro.Component.prototype._setEnable.call(this, v);

		if (this._yearSpin) {
			this._yearSpin._setEnable(v);
		}
		if (this._monthSpin) {
			this._monthSpin._setEnable(v);
		}
	};

	_pDatePickerHeader.on_apply_prop_enable = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this._prevButton) {
				this._prevButton._setEnable(v);
			}
			if (this._nextButton) {
				this._nextButton._setEnable(v);
			}
			if (this._yearStatic) {
				this._yearStatic._setEnable(v);
			}
			if (this._monthStatic) {
				this._monthStatic._setEnable(v);
			}
		}
	};

	_pDatePickerHeader.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var control_elem = this.getElement();
		if (control_elem) {
			this.on_change_containerRect(this._client_width, this._client_height);

			var _rtldirection = this._rtldirection;

			if (this._prevButton) {
				this._prevButton._setRtlDirection(_rtldirection);
				var img_elem = this._prevButton._img_elem;
				if (img_elem) {
					img_elem.setElementImageMirror(null, true);
				}
			}
			if (this._nextButton) {
				this._nextButton._setRtlDirection(_rtldirection);
				var img_elem = this._nextButton._img_elem;
				if (img_elem) {
					img_elem.setElementImageMirror(null, true);
				}
			}

			if (this._yearStatic) {
				this._yearStatic._setRtlDirection(_rtldirection);
			}
			if (this._monthStatic) {
				this._monthStatic._setRtlDirection(_rtldirection);
			}
			if (this._yearSpin) {
				this._yearSpin._setRtlDirection(_rtldirection);
			}
			if (this._monthSpin) {
				this._monthSpin._setRtlDirection(_rtldirection);
			}
		}
	};

	_pDatePickerHeader.on_apply_custom_setfocus = function (evt_name) {
	};

	_pDatePickerHeader.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pDatePickerHeader.on_apply_readonly = function () {
		var v = this.readonly;
		var control_elem = this.getElement();

		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		if (control_elem) {
			var yearSpin = this._yearSpin;
			if (yearSpin) {
				yearSpin.set_readonly(v);
			}
			var monthSpin = this._monthSpin;
			if (monthSpin) {
				monthSpin.set_readonly(v);
			}
		}
	};

	_pDatePickerHeader._setYear = function (v) {
		if (v != this._year) {
			this._year = v;
			this.on_apply_year();
		}
	};

	_pDatePickerHeader.on_apply_year = function () {
		var control_elem = this.getElement();
		if (control_elem && this._yearStatic) {
			var year = this._year;
			if (year === null || year === undefined || year === "") {
				var date = new Date();
				year = date.getFullYear();
				date = null;
			}
			else {
				year = parseInt(year, 10);

				if (year < 10) {
					year = "000" + year;
				}
				else if (year < 100) {
					year = "00" + year;
				}
				else if (year < 1000) {
					year = "0" + year;
				}
			}
			var headerformat = this.on_find_CurrentStyle_headerformat(this._pseudo);
			this._yearStatic.set_text(year + (((this.on_find_CurrentStyle_headerformat(this._pseudo)) == "MM.yyyy") ? "" : "."));
			this._yearSpin.set_value(year);
		}
	};

	_pDatePickerHeader._setMonth = function (v) {
		if (v != this._month) {
			this._month = v;
			this.on_apply_month();
		}
	};

	_pDatePickerHeader.on_apply_month = function () {
		var control_elem = this.getElement();
		if (control_elem && this._monthStatic) {
			var month = this._month;
			if (month === null || month === undefined || month === "") {
				var date = new Date();
				month = date.getMonth() + 1;
				date = null;
			}
			else {
				month = parseInt(month, 10);
				this._month = month = (month < 10 ? "0" : "") + month;
			}

			this._monthStatic.set_text(month + (((this.on_find_CurrentStyle_headerformat(this._pseudo)) == "MM.yyyy") ? "." : ""));
			this._monthSpin.set_value(month);
		}
	};

	_pDatePickerHeader._setDay = function (v) {
		if (v != this._day) {
			this._day = v;
		}
	};

	_pDatePickerHeader._setViewYearSpin = function (v) {
		if (typeof v == 'object') {
			v = (v.value !== undefined) ? nexacro._toBoolean(v.value) : true;
		}
		else {
			v = nexacro._toBoolean(v);
		}
		if (v != this._viewyearspin) {
			this._viewyearspin = v;
			this.on_apply_viewyearspin();
		}
	};

	_pDatePickerHeader.on_apply_viewyearspin = function () {
		this.hide_spindate();
	};

	_pDatePickerHeader._setViewMonthSpin = function (v) {
		if (typeof v == 'object') {
			v = (v.value !== undefined) ? nexacro._toBoolean(v.value) : true;
		}
		else {
			v = nexacro._toBoolean(v);
		}
		if (v != this._viewmonthspin) {
			this._viewmonthspin = v;
			this.on_apply_viewmonthspin();
		}
	};

	_pDatePickerHeader.on_apply_viewmonthspin = function () {
		this.hide_spindate();
	};

	_pDatePickerHeader._setFormat = function (v) {
		if (v != this._format) {
			this._format = v;
			this.on_apply_format();
		}
	};
	_pDatePickerHeader.on_apply_format = function () {
		;
	};


	_pDatePickerHeader.on_notify_header_onprevclick = function (obj, e) {
		if (!this.enable || this.readonly) {
			return false;
		}

		var month = parseInt(this._month, 10);
		var year = parseInt(this._year, 10);

		if (month == 1) {
			month = 12;
			if (year <= 1) {
				year = 10000;
			}

			this._setYear(year - 1);
		}
		else {
			month--;
		}

		this.hide_spindate();

		this._setMonth(month);
		this.on_fire_onprevclick(obj, e);
	};

	_pDatePickerHeader.on_notify_header_onnextclick = function (obj, e) {
		if (!this.enable || this.readonly) {
			return false;
		}

		var month = parseInt(this._month, 10);
		var year = parseInt(this._year, 10);

		if (month == 12) {
			month = 1;
			if (year == 9999) {
				year = 0;
			}
			else {
				year += 1;
			}
		}
		else {
			month++;
		}

		this.hide_spindate();

		this._setYear(year);
		this._setMonth(month);
		this.on_fire_onnextclick(obj, e);
	};

	_pDatePickerHeader.on_notify_header_onyearstatic_lbuttondown = function (obj, e) {
		if (!this.enable || this.readonly) {
			return false;
		}

		if (this._yearSpin) {
			this._yearStatic.set_visible(false);
			this._yearSpin.set_visible(true);
			this._yearSpin.set_value(this._year);
		}
	};

	_pDatePickerHeader.on_notify_header_onmonthstatic_lbuttondown = function (obj, e) {
		if (!this.enable || this.readonly) {
			return false;
		}

		if (this._monthSpin) {
			this._monthStatic.set_visible(false);
			this._monthSpin.set_visible(true);

			this._monthSpin.set_value(this._month);
		}
	};

	_pDatePickerHeader.on_notify_header_onyearkeydown = function (obj, e) {
		if (e.keycode == nexacro.Event.KEY_ENTER) {
			this._setYear(obj.value);
			this.on_fire_onyearspin(obj, e);

			var _datepicker = this.parent;
			var str_val = this._year + "" + this._month + "" + _datepicker._selected_day;
			var obj_date = _datepicker._calendar._makeDateObj(str_val);
			var day = obj_date.getDate();
			if (day != _datepicker._selected_day) {
				day = _datepicker._calendar._validationDateStr(day);
			}
			var val = this._year + "" + this._month + "" + day;
			_datepicker._calendar.set_value(val);
		}

		return false;
	};

	_pDatePickerHeader.on_notify_header_onmonthkeydown = function (obj, e) {
		if (e.keycode == nexacro.Event.KEY_ENTER) {
			var v = parseInt(obj.value, 10);
			if (v < 1) {
				v = 12;
				obj.set_value(v);
			}
			else if (v > 12) {
				v = 1;
				obj.set_value(v);
			}

			this._setMonth(v);
			this.on_fire_onmonthspin(obj, e);

			var _datepicker = this.parent;
			var str_val = this._year + "" + this._month + "" + _datepicker._selected_day;
			var obj_date = _datepicker._calendar._makeDateObj(str_val);
			var day = obj_date.getDate();
			if (day != _datepicker._selected_day) {
				day = _datepicker._calendar._validationDateStr(day);
			}
			var val = this._year + "" + this._month + "" + day;
			_datepicker._calendar.set_value(val);
		}

		return false;
	};

	_pDatePickerHeader.on_notify_header_onyearclick = function (obj, e) {
		if (!this.enable || this.readonly) {
			return false;
		}
	};

	_pDatePickerHeader.on_notify_header_onyearspin = function (obj, e) {
		if (this._yearSpin) {
			this._setYear(e.postvalue);
			this.on_fire_onyearspin(obj, e);
		}
	};

	_pDatePickerHeader.on_notify_header_onmonthclick = function (obj, e) {
		if (!this.enable || this.readonly) {
			return false;
		}
	};

	_pDatePickerHeader.on_notify_header_onmonthspin = function (obj, e) {
		if (this._monthSpin) {
			var v = parseInt(e.postvalue, 10);
			if (v < 1) {
				v = 12;
				obj.set_value(v);
			}
			else if (v > 12) {
				v = 1;
				obj.set_value(v);
			}

			this._setMonth(v);
			this.on_fire_onmonthspin(obj, e);
		}
	};

	_pDatePickerHeader.on_fire_onprevclick = function (obj, e) {
		if (this.onprevclick && this.onprevclick._has_handlers) {
			return this.onprevclick._fireEvent(this, e);
		}
		return false;
	};

	_pDatePickerHeader.on_fire_onnextclick = function (obj, e) {
		if (this.onnextclick && this.onnextclick._has_handlers) {
			return this.onnextclick._fireEvent(this, e);
		}
		return false;
	};

	_pDatePickerHeader.on_fire_onyearspin = function (obj, e) {
		if (this.onyearspin && this.onyearspin._has_handlers) {
			return this.onyearspin._fireEvent(this, e);
		}
		return false;
	};

	_pDatePickerHeader.on_fire_onmonthspin = function (obj, e) {
		if (this.onmonthspin && this.onmonthspin._has_handlers) {
			return this.onmonthspin._fireEvent(this, e);
		}
		return false;
	};

	_pDatePickerHeader.on_fire_sys_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		var ret = nexacro.Component.prototype.on_fire_sys_onlbuttonup.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem);

		var p_id = from_elem ? from_elem.parent.parent.id : "";
		var pp_id = from_elem ? from_elem.parent.parent.parent.id : "";

		if (this._getWindow()._cur_ldown_elem == from_elem && (p_id != "yearspin" && p_id != "monthspin" && p_id != "yearStatic" && p_id != "monthStatic") && (pp_id != "yearspin" && pp_id != "monthspin" && pp_id != "yearStatic" && pp_id != "monthStatic")) {
			this.hide_spindate();
		}

		return ret;
	};

	_pDatePickerHeader.hide_spindate = function () {
		if (this._yearStatic || this._monthStatic) {
			var is_viewyear = this._viewyearspin;
			var is_viewmonth = this._viewmonthspin;
			if (is_viewyear) {
				if (is_viewmonth) {
					this._yearStatic.set_visible(false);
					this._yearSpin.set_visible(true);
					this._monthStatic.set_visible(false);
					this._monthSpin.set_visible(true);
				}
				else {
					this._yearStatic.set_visible(false);
					this._yearSpin.set_visible(true);
					this._monthStatic.set_visible(true);
					this._monthSpin.set_visible(false);
				}
			}
			else {
				if (is_viewmonth) {
					this._yearStatic.set_visible(true);
					this._yearSpin.set_visible(false);
					this._monthStatic.set_visible(false);
					this._monthSpin.set_visible(true);
				}
				else {
					this._yearStatic.set_visible(true);
					this._yearSpin.set_visible(false);
					this._monthStatic.set_visible(true);
					this._monthSpin.set_visible(false);
				}
			}
		}
	};

	_pDatePickerHeader._resizeHeader = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var clientWidth = this._client_width;
			var clientHeight = this._client_height;

			var prevBtn_l = 0;
			var prevBtn_t = 0;
			var prevBtn_w = clientHeight;
			var prevBtn_h = clientHeight;

			var nextBtn_l = clientWidth - clientHeight;
			var nextBtn_t = 0;
			var nextBtn_w = clientHeight;
			var nextBtn_h = clientHeight;

			var font = this.on_find_CurrentStyle_font(this._pseudo);
			var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);
			var headerformat = this.on_find_CurrentStyle_headerformat(this._pseudo);

			var month = this._month < 10 ? "0" + parseInt(this._month, 10) : this._month + "";
			var yearTextSize = nexacro._getTextSize2(letterspace, this._year + ".", font);
			var monthTextSize = nexacro._getTextSize2(letterspace, this._month + ".", font);
			var yearWidth = yearTextSize[0] + 2;
			var yearHeight = yearTextSize[1];
			var monthWidth = monthTextSize[0] + 2;
			var monthHeight = monthTextSize[1];
			var offset_x = (((prevBtn_l + prevBtn_w) + nextBtn_l) / 2) - ((yearWidth + monthWidth) / 2);

			if (headerformat == "MM.yyyy") {
				var monthStatic_l = offset_x;
				var monthStatic_w = monthWidth;
				var yearStatic_l = monthStatic_l + monthStatic_w;
				var yearStatic_w = yearWidth;
			}
			else {
				var yearStatic_l = offset_x;
				var yearStatic_w = yearWidth;
				var monthStatic_l = yearStatic_l + yearStatic_w;
				var monthStatic_w = monthWidth;
			}
			var yearStatic_t = 0;
			var monthStatic_t = 0;
			var monthStatic_h = clientHeight;
			var yearStatic_h = clientHeight;

			var fontSize = parseInt(font.size, 10);
			var spinHeight = fontSize + 10;
			var spin_top = Math.ceil((clientHeight - spinHeight) / 2);
			var spin_alpha = (fontSize * 1.7);

			var yearSpin_t = spin_top;
			var yearSpin_w = yearWidth + spin_alpha;
			var yearSpin_h = spinHeight;
			var monthSpin_t = spin_top;
			var monthSpin_w = monthWidth + spin_alpha;
			var monthSpin_h = spinHeight;

			if (headerformat == "MM.yyyy") {
				var yearSpin_l = yearStatic_l + 1;
				var monthSpin_l = monthStatic_l - spin_alpha;
			}
			else {
				var yearSpin_l = offset_x - spin_alpha;
				var monthSpin_l = monthStatic_l + 1;
			}

			var prevButton = this._prevButton;
			var nextButton = this._nextButton;
			var yearStatic = this._yearStatic;
			var monthStatic = this._monthStatic;
			var yearSpin = this._yearSpin;
			var monthSpin = this._monthSpin;

			if (prevButton) {
				prevButton.move(prevBtn_l, prevBtn_t, prevBtn_w, prevBtn_h, null, null);
			}
			if (nextButton) {
				nextButton.move(nextBtn_l, nextBtn_t, nextBtn_w, nextBtn_h, null, null);
			}

			var rtl = this._rtldirection;
			this._rtldirection = "ltr";
			if (yearStatic) {
				yearStatic.move(yearStatic_l, yearStatic_t, yearStatic_w, yearStatic_h, null, null);
			}
			if (monthStatic) {
				monthStatic.move(monthStatic_l, monthStatic_t, monthStatic_w, monthStatic_h, null, null);
			}

			if (yearSpin) {
				yearSpin.move(yearSpin_l, yearSpin_t, yearSpin_w, yearSpin_h, null, null);
			}
			if (monthSpin) {
				monthSpin.move(monthSpin_l, monthSpin_t, monthSpin_w, monthSpin_h, null, null);
			}

			this._rtldirection = rtl;
		}
	};

	nexacro.PrevButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pPrevButtonCtrl = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.PrevButtonCtrl);
	nexacro.PrevButtonCtrl.prototype = _pPrevButtonCtrl;

	_pPrevButtonCtrl._makeCssRefInfo = function () {
		return (this.parent.parent._makeCssRefInfoCtrl(this));
	};

	nexacro.NextButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pNextButtonCtrl = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.NextButtonCtrl);
	nexacro.NextButtonCtrl.prototype = _pNextButtonCtrl;

	_pNextButtonCtrl._makeCssRefInfo = function () {
		return (this.parent.parent._makeCssRefInfoCtrl(this));
	};

	nexacro.HeaderStaticCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;
	};
	var _pHeaderStaticCtrl = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.HeaderStaticCtrl);
	nexacro.HeaderStaticCtrl.prototype = _pHeaderStaticCtrl;

	_pHeaderStaticCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_font(pseudo) || this._find_inherit_pseudo_obj("font", pseudo) || nexacro.Component._default_font;
	};
	_pHeaderStaticCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent.on_find_CurrentStyle_color(pseudo) || this._find_inherit_pseudo_obj("color", pseudo) || nexacro.Component._default_color;
	};

	nexacro.HeaderSpinCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.SpinCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;
	};
	var _pHeaderSpinCtrl = nexacro._createPrototype(nexacro.SpinCtrl, nexacro.HeaderSpinCtrl);
	nexacro.HeaderSpinCtrl.prototype = _pHeaderSpinCtrl;

	_pHeaderSpinCtrl.on_find_CurrentStyle_buttonsize = function (pseudo) {
		var size = this._client_height;
		return size;
	};

	_pHeaderSpinCtrl._makeCssRefInfo = function () {
		return (this.parent.parent._makeCssRefInfoCtrl(this));
	};

	delete _pPrevButtonCtrl;
	delete _pNextButtonCtrl;
	delete _pHeaderStaticCtrl;
	delete _pHeaderSpinCtrl;

	nexacro.DatePickerBody_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}
	};

	var _pDatePickerBodyStyle = nexacro._createPrototype(nexacro.Style, nexacro.DatePickerBody_Style);
	nexacro.DatePickerBody_Style.prototype = _pDatePickerBodyStyle;

	eval(nexacro._createValueAttributeEvalStr("_pDatePickerBodyStyle", "usetrailingday"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerBodyStyle", "weekformat"));
	eval(nexacro._createValueAttributeEvalStr("_pDatePickerBodyStyle", "daysize"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerBodyStyle", "daycolor"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerBodyStyle", "daybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerBodyStyle", "daygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerBodyStyle", "dayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerBodyStyle", "daybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerBodyStyle", "dayfont"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerBodyStyle", "weekcolor"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerBodyStyle", "weekbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerBodyStyle", "weekgradation"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerBodyStyle", "weekfont"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerBodyStyle", "saturdaycolor"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerBodyStyle", "sundaycolor"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerBodyStyle", "todaycolor"));
	eval(nexacro._createColorAttributeEvalStr("_pDatePickerBodyStyle", "trailingdaycolor"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerBodyStyle", "todaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerBodyStyle", "todaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerBodyStyle", "todayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerBodyStyle", "todaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerBodyStyle", "todayfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerBodyStyle", "saturdaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerBodyStyle", "saturdaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerBodyStyle", "saturdayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerBodyStyle", "saturdaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerBodyStyle", "saturdayfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerBodyStyle", "sundaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerBodyStyle", "sundaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerBodyStyle", "sundayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerBodyStyle", "sundaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerBodyStyle", "sundayfont"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pDatePickerBodyStyle", "trailingdaybackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pDatePickerBodyStyle", "trailingdaygradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pDatePickerBodyStyle", "trailingdayborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pDatePickerBodyStyle", "trailingdaybordertype"));
	eval(nexacro._createFontAttributeEvalStr("_pDatePickerBodyStyle", "trailingdayfont"));

	_pDatePickerBodyStyle.__custom_emptyObject = function () {
		this.usetrailingday = null;
		this.weekformat = null;
		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;
		this.weekcolor = null;
		this.weekbackground = null;
		this.weekgradation = null;
		this.weekfont = null;
		this.saturdaycolor = null;
		this.sundaycolor = null;
		this.todaycolor = null;
		this.trailingdaycolor = null;
		this.todaybackground = null;
		this.todaygradation = null;
		this.todayborder = null;
		this.todaybordertype = null;
		this.todayfont = null;
		this.saturdaybackground = null;
		this.saturdaygradation = null;
		this.saturdayborder = null;
		this.saturdaybordertype = null;
		this.saturdayfont = null;
		this.sundaybackground = null;
		this.sundaygradation = null;
		this.sundayborder = null;
		this.sundaybordertype = null;
		this.sundayfont = null;
		this.trailingdaybackground = null;
		this.trailingdaygradation = null;
		this.trailingdayborder = null;
		this.trailingdaybordertype = null;
		this.trailingdayfont = null;
	};

	_pDatePickerBodyStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.usetrailingday && !this.usetrailingday._is_empty) {
			val += "usetrailingday:" + this.usetrailingday._value + "; ";
		}
		if (this.weekformat && !this.weekformat._is_empty) {
			val += "weekformat:" + this.weekformat._value + "; ";
		}
		if (this.daysize && !this.daysize._is_empty) {
			val += "daysize:" + this.daysize._value + "; ";
		}
		if (this.daycolor && !this.daycolor._is_empty) {
			val += "daycolor:" + this.daycolor._value + "; ";
		}
		if (this.daybackground && !this.daybackground._is_empty) {
			val += "daybackground:" + this.daybackground._value + "; ";
		}
		if (this.daygradation && !this.daygradation._is_empty) {
			val += "daygradation:" + this.daygradation._value + "; ";
		}
		if (this.dayborder && !this.dayborder._is_empty) {
			val += "dayborder:" + this.dayborder._value + "; ";
		}
		if (this.daybordertype && !this.daybordertype._is_empty) {
			val += "daybordertype:" + this.daybordertype._value + "; ";
		}
		if (this.dayfont && !this.dayfont._is_empty) {
			val += "dayfont:" + this.dayfont._value + "; ";
		}
		if (this.weekcolor && !this.weekcolor._is_empty) {
			val += "weekcolor:" + this.weekcolor._value + "; ";
		}
		if (this.weekbackground && !this.weekbackground._is_empty) {
			val += "weekbackground:" + this.weekbackground._value + "; ";
		}
		if (this.weekgradation && !this.weekgradation._is_empty) {
			val += "weekgradation:" + this.weekgradation._value + "; ";
		}
		if (this.weekfont && !this.weekfont._is_empty) {
			val += "weekfont:" + this.weekfont._value + "; ";
		}
		if (this.saturdaycolor && !this.saturdaycolor._is_empty) {
			val += "saturdaycolor:" + this.saturdaycolor._value + "; ";
		}
		if (this.sundaycolor && !this.sundaycolor._is_empty) {
			val += "sundaycolor:" + this.sundaycolor._value + "; ";
		}
		if (this.todaycolor && !this.todaycolor._is_empty) {
			val += "todaycolor:" + this.todaycolor._value + "; ";
		}
		if (this.trailingdaycolor && !this.trailingdaycolor._is_empty) {
			val += "trailingdaycolor:" + this.trailingdaycolor._value + "; ";
		}
		if (this.todaybackground && !this.todaybackground._is_empty) {
			val += "todaybackground:" + this.todaybackground._value + "; ";
		}
		if (this.todaygradation && !this.todaygradation._is_empty) {
			val += "todaygradation:" + this.todaygradation._value + "; ";
		}
		if (this.todayborder && !this.todayborder._is_empty) {
			val += "todayborder:" + this.todayborder._value + "; ";
		}
		if (this.todaybordertype && !this.todaybordertype._is_empty) {
			val += "todaybordertype:" + this.todaybordertype._value + "; ";
		}
		if (this.todayfont && !this.todayfont._is_empty) {
			val += "todayfont:" + this.todayfont._value + "; ";
		}
		if (this.saturdaybackground && !this.saturdaybackground._is_empty) {
			val += "saturdaybackground:" + this.saturdaybackground._value + "; ";
		}
		if (this.saturdaygradation && !this.saturdaygradation._is_empty) {
			val += "saturdaygradation:" + this.saturdaygradation._value + "; ";
		}
		if (this.saturdayborder && !this.saturdayborder._is_empty) {
			val += "saturdayborder:" + this.saturdayborder._value + "; ";
		}
		if (this.saturdaybordertype && !this.saturdaybordertype._is_empty) {
			val += "saturdaybordertype:" + this.saturdaybordertype._value + "; ";
		}
		if (this.saturdayfont && !this.saturdayfont._is_empty) {
			val += "saturdayfont:" + this.saturdayfont._value + "; ";
		}
		if (this.sundaybackground && !this.sundaybackground._is_empty) {
			val += "sundaybackground:" + this.sundaybackground._value + "; ";
		}
		if (this.sundaygradation && !this.sundaygradation._is_empty) {
			val += "sundaygradation:" + this.sundaygradation._value + "; ";
		}
		if (this.sundayborder && !this.sundayborder._is_empty) {
			val += "sundayborder:" + this.sundayborder._value + "; ";
		}
		if (this.sundaybordertype && !this.sundaybordertype._is_empty) {
			val += "sundaybordertype:" + this.sundaybordertype._value + "; ";
		}
		if (this.sundayfont && !this.sundayfont._is_empty) {
			val += "sundayfont:" + this.sundayfont._value + "; ";
		}
		if (this.trailingdaybackground && !this.trailingdaybackground._is_empty) {
			val += "trailingdaybackground:" + this.trailingdaybackground._value + "; ";
		}
		if (this.trailingdaygradation && !this.trailingdaygradation._is_empty) {
			val += "trailingdaygradation:" + this.trailingdaygradation._value + "; ";
		}
		if (this.trailingdayborder && !this.trailingdayborder._is_empty) {
			val += "trailingdayborder:" + this.trailingdayborder._value + "; ";
		}
		if (this.trailingdaybordertype && !this.trailingdaybordertype._is_empty) {
			val += "trailingdaybordertype:" + this.trailingdaybordertype._value + "; ";
		}
		if (this.trailingdayfont && !this.trailingdayfont._is_empty) {
			val += "trailingdayfont:" + this.trailingdayfont._value + "; ";
		}

		return val;
	};

	nexacro.DatePickerBody_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);
		this.usetrailingday = null;
		this.weekformat = null;
		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;
		this.weekcolor = null;
		this.weekbackground = null;
		this.weekgradation = null;
		this.weekfont = null;
		this.saturdaycolor = null;
		this.sundaycolor = null;
		this.todaycolor = null;
		this.trailingdaycolor = null;
		this.todaybackground = null;
		this.todaygradation = null;
		this.todayborder = null;
		this.todaybordertype = null;
		this.todayfont = null;
		this.saturdaybackground = null;
		this.saturdaygradation = null;
		this.saturdayborder = null;
		this.saturdaybordertype = null;
		this.saturdayfont = null;
		this.sundaybackground = null;
		this.sundaygradation = null;
		this.sundayborder = null;
		this.sundaybordertype = null;
		this.sundayfont = null;
		this.trailingdaybackground = null;
		this.trailingdaygradation = null;
		this.trailingdayborder = null;
		this.trailingdaybordertype = null;
		this.trailingdayfont = null;
	};

	var _pDatePickerBodyCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.DatePickerBody_CurrentStyle);
	nexacro.DatePickerBody_CurrentStyle.prototype = _pDatePickerBodyCurrentStyle;

	_pDatePickerBodyCurrentStyle.__custom_emptyObject = _pDatePickerBodyStyle.__custom_emptyObject;
	_pDatePickerBodyCurrentStyle.__get_custom_style_value = _pDatePickerBodyStyle.__get_custom_style_value;

	delete _pDatePickerBodyStyle;
	delete _pDatePickerBodyCurrentStyle;

	nexacro.DatePickerBody = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;

		this._weekBg = null;
		this._weeks = [];
		this._days = [];
		this._changedDays = [];
		this._calendar = parent._calendar;

		this._event_list = {
			"ondayclick" : 1
		};
	};

	var _pDatePickerBody = nexacro._createPrototype(nexacro.Component, nexacro.DatePickerBody);
	nexacro.DatePickerBody.prototype = _pDatePickerBody;
	_pDatePickerBody._type_name = "DatePickerBody";

	_pDatePickerBody._weeks = null;
	_pDatePickerBody._days = null;
	_pDatePickerBody._year = "";
	_pDatePickerBody._month = "";
	_pDatePickerBody._day = "";
	_pDatePickerBody._changedDays = null;
	_pDatePickerBody._endDayN = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	_pDatePickerBody._endDayL = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

	_pDatePickerBody.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		var daysize = this.on_find_CurrentStyle_daysize(pseudo);
		if (curstyle.daysize != daysize) {
			curstyle.daysize = daysize;
		}
		var daycolor = this.on_find_CurrentStyle_daycolor(pseudo);
		if (curstyle.daycolor != daycolor) {
			curstyle.daycolor = daycolor;
		}
		var daybackground = this.on_find_CurrentStyle_daybackground(pseudo);
		if (curstyle.daybackground != daybackground) {
			curstyle.daybackground = daybackground;
		}
		var daygradation = this.on_find_CurrentStyle_daygradation(pseudo);
		if (curstyle.daygradation != daygradation) {
			curstyle.daygradation = daygradation;
		}
		var dayborder = this.on_find_CurrentStyle_dayborder(pseudo);
		if (curstyle.dayborder != dayborder) {
			curstyle.dayborder = dayborder;
		}
		var daybordertype = this.on_find_CurrentStyle_daybordertype(pseudo);
		if (curstyle.daybordertype != daybordertype) {
			curstyle.daybordertype = daybordertype;
		}
		var dayfont = this.on_find_CurrentStyle_dayfont(pseudo);
		if (curstyle.dayfont != dayfont) {
			curstyle.dayfont = dayfont;
		}

		var weekformat = this.on_find_CurrentStyle_weekformat(pseudo);
		if (curstyle.weekformat != weekformat) {
			curstyle.weekformat = weekformat;
			this.on_apply_style_weekformat(weekformat);
		}
		var weekcolor = this.on_find_CurrentStyle_weekcolor(pseudo);
		if (curstyle.weekcolor != weekcolor) {
			curstyle.weekcolor = weekcolor;
		}
		var weekbackground = this.on_find_CurrentStyle_weekbackground(pseudo);
		if (curstyle.weekbackground != weekbackground) {
			curstyle.weekbackground = weekbackground;
		}
		var weekgradation = this.on_find_CurrentStyle_weekgradation(pseudo);
		if (curstyle.weekgradation != weekgradation) {
			curstyle.weekgradation = weekgradation;
		}
		var weekfont = this.on_find_CurrentStyle_weekfont(pseudo);
		if (curstyle.weekfont != weekfont) {
			curstyle.weekfont = weekfont;
		}

		var todaycolor = this.on_find_CurrentStyle_todaycolor(pseudo);
		if (curstyle.todaycolor != todaycolor) {
			curstyle.todaycolor = todaycolor;
		}
		var todaybackground = this.on_find_CurrentStyle_todaybackground(pseudo);
		if (curstyle.todaybackground != todaybackground) {
			curstyle.todaybackground = todaybackground;
		}
		var todaygradation = this.on_find_CurrentStyle_todaygradation(pseudo);
		if (curstyle.todaygradation != todaygradation) {
			curstyle.todaygradation = todaygradation;
		}
		var todaybordertype = this.on_find_CurrentStyle_todaybordertype(pseudo);
		if (curstyle.todaybordertype != todaybordertype) {
			curstyle.todaybordertype = todaybordertype;
		}
		var todayborder = this.on_find_CurrentStyle_todayborder(pseudo);
		if (curstyle.todayborder != todayborder) {
			curstyle.todayborder = todayborder;
		}
		var todayfont = this.on_find_CurrentStyle_todayfont(pseudo);
		if (curstyle.todayfont != todayfont) {
			curstyle.todayfont = todayfont;
		}

		var saturdaycolor = this.on_find_CurrentStyle_saturdaycolor(pseudo);
		if (curstyle.saturdaycolor != saturdaycolor) {
			curstyle.saturdaycolor = saturdaycolor;
		}
		var saturdaybackground = this.on_find_CurrentStyle_saturdaybackground(pseudo);
		if (curstyle.saturdaybackground != saturdaybackground) {
			curstyle.saturdaybackground = saturdaybackground;
		}
		var saturdaygradation = this.on_find_CurrentStyle_saturdaygradation(pseudo);
		if (curstyle.saturdaygradation != saturdaygradation) {
			curstyle.saturdaygradation = saturdaygradation;
		}
		var saturdaybordertype = this.on_find_CurrentStyle_saturdaybordertype(pseudo);
		if (curstyle.saturdaybordertype != saturdaybordertype) {
			curstyle.saturdaybordertype = saturdaybordertype;
		}
		var saturdayborder = this.on_find_CurrentStyle_saturdayborder(pseudo);
		if (curstyle.saturdayborder != saturdayborder) {
			curstyle.saturdayborder = saturdayborder;
		}
		var saturdayfont = this.on_find_CurrentStyle_saturdayfont(pseudo);
		if (curstyle.saturdayfont != saturdayfont) {
			curstyle.saturdayfont = saturdayfont;
		}

		var sundaycolor = this.on_find_CurrentStyle_sundaycolor(pseudo);
		if (curstyle.sundaycolor != sundaycolor) {
			curstyle.sundaycolor = sundaycolor;
		}
		var sundaybackground = this.on_find_CurrentStyle_sundaybackground(pseudo);
		if (curstyle.sundaybackground != sundaybackground) {
			curstyle.sundaybackground = sundaybackground;
		}
		var sundaygradation = this.on_find_CurrentStyle_sundaygradation(pseudo);
		if (curstyle.sundaygradation != sundaygradation) {
			curstyle.sundaygradation = sundaygradation;
		}
		var sundaybordertype = this.on_find_CurrentStyle_sundaybordertype(pseudo);
		if (curstyle.sundaybordertype != sundaybordertype) {
			curstyle.sundaybordertype = sundaybordertype;
		}
		var sundayborder = this.on_find_CurrentStyle_sundayborder(pseudo);
		if (curstyle.sundayborder != sundayborder) {
			curstyle.sundayborder = sundayborder;
		}
		var sundayfont = this.on_find_CurrentStyle_sundayfont(pseudo);
		if (curstyle.sundayfont != sundayfont) {
			curstyle.sundayfont = sundayfont;
		}

		var usetrailingday = this.on_find_CurrentStyle_usetrailingday(pseudo);
		if (curstyle.usetrailingday != usetrailingday) {
			curstyle.usetrailingday = usetrailingday;
		}

		var trailingdaycolor = this.on_find_CurrentStyle_trailingdaycolor(pseudo);
		if (curstyle.trailingdaycolor != trailingdaycolor) {
			curstyle.trailingdaycolor = trailingdaycolor;
		}
		var trailingdaybackground = this.on_find_CurrentStyle_trailingdaybackground(pseudo);
		if (curstyle.trailingdaybackground != trailingdaybackground) {
			curstyle.trailingdaybackground = trailingdaybackground;
		}
		var trailingdaygradation = this.on_find_CurrentStyle_trailingdaygradation(pseudo);
		if (curstyle.trailingdaygradation != trailingdaygradation) {
			curstyle.trailingdaygradation = trailingdaygradation;
		}
		var trailingdaybordertype = this.on_find_CurrentStyle_trailingdaybordertype(pseudo);
		if (curstyle.trailingdaybordertype != trailingdaybordertype) {
			curstyle.trailingdaybordertype = trailingdaybordertype;
		}
		var trailingdayborder = this.on_find_CurrentStyle_trailingdayborder(pseudo);
		if (curstyle.trailingdayborder != trailingdayborder) {
			curstyle.trailingdayborder = trailingdayborder;
		}
		var trailingdayfont = this.on_find_CurrentStyle_trailingdayfont(pseudo);
		if (curstyle.trailingdayfont != trailingdayfont) {
			curstyle.trailingdayfont = trailingdayfont;
		}
	};

	_pDatePickerBody.on_create_custom_style = function () {
		return new nexacro.DatePickerBody_Style(this);
	};

	_pDatePickerBody.on_create_custom_currentStyle = function () {
		return new nexacro.DatePickerBody_CurrentStyle();
	};


	_pDatePickerBody.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodybackground(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodyborder(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodybordertype(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodygradation(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent.on_find_CurrentStyle_daycolor(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_daysize = function (pseudo) {
		return this.parent.on_find_CurrentStyle_daysize(pseudo) || this._find_pseudo_obj("daysize", pseudo) || nexacro.DatePicker._defaultDaysize;
	};

	_pDatePickerBody.on_find_CurrentStyle_daybackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_daybackground(pseudo) || this._find_pseudo_obj("daybackground", pseudo, "background");
	};

	_pDatePickerBody.on_find_CurrentStyle_daygradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_daygradation(pseudo) || this._find_pseudo_obj("daygradation", pseudo, "gradation");
	};

	_pDatePickerBody.on_find_CurrentStyle_dayborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_dayborder(pseudo) || this._find_pseudo_obj("dayborder", pseudo, "border");
	};

	_pDatePickerBody.on_find_CurrentStyle_daybordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_daybordertype(pseudo) || this._find_pseudo_obj("daybordertype", pseudo, "bordertype");
	};

	_pDatePickerBody.on_find_CurrentStyle_daycolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_daycolor(pseudo) || this._find_pseudo_obj("daycolor", pseudo, "color") || this._find_inherit_pseudo_obj("daycolor", pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_dayfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_dayfont(pseudo) || this._find_pseudo_obj("dayfont", pseudo, "font") || this._find_inherit_pseudo_obj("dayfont", pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_headerformat = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerformat(pseudo) || this._find_pseudo_obj("headerformat", pseudo) || nexacro.DatePicker._defaultHeaderformat;
	};

	_pDatePickerBody.on_find_CurrentStyle_headerheight = function (pseudo) {
		return this.parent.on_find_CurrentStyle_Headerheight(pseudo) || this._find_pseudo_obj("headerheight", pseudo) || nexacro.DatePicker._defaultHeaderheight;
	};

	_pDatePickerBody.on_find_CurrentStyle_headerbackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerbackground(pseudo) || this._find_pseudo_obj("headerbackground", pseudo, "background");
	};

	_pDatePickerBody.on_find_CurrentStyle_headergradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headergradation(pseudo) || this._find_pseudo_obj("headergradation", pseudo, "gradation");
	};

	_pDatePickerBody.on_find_CurrentStyle_headerborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerborder(pseudo) || this._find_pseudo_obj("headerborder", pseudo, "border");
	};

	_pDatePickerBody.on_find_CurrentStyle_headerbordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bordertype(pseudo) || this._find_pseudo_obj("headerbordertype", pseudo, "bordertype");
	};

	_pDatePickerBody.on_find_CurrentStyle_headercolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headercolor(pseudo) || this._find_pseudo_obj("headercolor", pseudo, "color");
	};

	_pDatePickerBody.on_find_CurrentStyle_headerfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_headerfont(pseudo) || this._find_pseudo_obj("headerfont", pseudo, "font");
	};

	_pDatePickerBody.on_find_CurrentStyle_bodybackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodybackground(pseudo) || this._find_pseudo_obj("bodybackground", pseudo, "background");
	};

	_pDatePickerBody.on_find_CurrentStyle_bodygradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodygradation(pseudo) || this._find_pseudo_obj("bodygradation", pseudo, "gradation");
	};

	_pDatePickerBody.on_find_CurrentStyle_bodyborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodyborder(pseudo) || this._find_pseudo_obj("bodyborder", pseudo, "border");
	};

	_pDatePickerBody.on_find_CurrentStyle_bodybordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bodybordertype(pseudo) || this._find_pseudo_obj("bodybordertype", pseudo, "bordertype");
	};

	_pDatePickerBody.on_find_CurrentStyle_weekformat = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekformat(pseudo) || this._find_pseudo_obj("weekformat", pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_weekbackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekbackground(pseudo) || this._find_pseudo_obj("weekbackground", pseudo, "background");
	};

	_pDatePickerBody.on_find_CurrentStyle_weekgradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekgradation(pseudo) || this._find_pseudo_obj("weekgradation", pseudo, "gradation");
	};

	_pDatePickerBody.on_find_CurrentStyle_weekcolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekcolor(pseudo) || this._find_pseudo_obj("weekcolor", pseudo, "color");
	};

	_pDatePickerBody.on_find_CurrentStyle_weekfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekfont(pseudo) || this._find_pseudo_obj("weekfont", pseudo, "font") || nexacro.Component._default_font;
	};

	_pDatePickerBody.on_find_CurrentStyle_saturdaybackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_saturdaybackground(pseudo) || this._find_pseudo_obj("saturdaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_saturdayborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_saturdayborder(pseudo) || this._find_pseudo_obj("saturdayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_saturdaybordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_saturdaybordertype(pseudo) || this._find_pseudo_obj("saturdaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_saturdaycolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_saturdaycolor(pseudo) || this._find_pseudo_obj("saturdaycolor", pseudo, "color") || nexacro.DatePicker._defaultSaturdaycolor;
	};

	_pDatePickerBody.on_find_CurrentStyle_saturdayfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_saturdayfont(pseudo) || this._find_pseudo_obj("saturdayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_saturdaygradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_saturdaygradation(pseudo) || this._find_pseudo_obj("saturdaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_sundaybackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_sundaybackground(pseudo) || this._find_pseudo_obj("sundaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_sundaygradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_sundaygradation(pseudo) || this._find_pseudo_obj("sundaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_sundayborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_sundayborder(pseudo) || this._find_pseudo_obj("sundayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_sundaybordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_sundaybordertype(pseudo) || this._find_pseudo_obj("sundaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_sundaycolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_sundaycolor(pseudo) || this._find_pseudo_obj("sundaycolor", pseudo, "color") || nexacro.DatePicker._defaultSundaycolor;
	};

	_pDatePickerBody.on_find_CurrentStyle_sundayfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_sundayfont(pseudo) || this._find_pseudo_obj("sundayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_todaybackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_todaybackground(pseudo) || this._find_pseudo_obj("todaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_todaygradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_todaygradation(pseudo) || this._find_pseudo_obj("todaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_todayborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_todayborder(pseudo) || this._find_pseudo_obj("todayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_todaybordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_todaybordertype(pseudo) || this._find_pseudo_obj("todaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_todaycolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_todaycolor(pseudo) || this._find_pseudo_obj("todaycolor", pseudo, "color") || nexacro.DatePicker._defaultTodaycolor;
	};

	_pDatePickerBody.on_find_CurrentStyle_todayfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_todayfont(pseudo) || this._find_pseudo_obj("todayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_usetrailingday = function (pseudo) {
		return this.parent.on_find_CurrentStyle_usetrailingday(pseudo) || this._find_pseudo_obj("usetrailingday", pseudo) || nexacro.DatePicker._defaultUseTrailngday;
	};

	_pDatePickerBody.on_find_CurrentStyle_trailingdaybackground = function (pseudo) {
		return this.parent.on_find_CurrentStyle_trailingdaybackground(pseudo) || this._find_pseudo_obj("trailingdaybackground", pseudo, "background") || this.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_trailingdaygradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_trailingdaygradation(pseudo) || this._find_pseudo_obj("trailingdaygradation", pseudo, "gradation") || this.on_find_CurrentStyle_daygradation(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_trailingdayborder = function (pseudo) {
		return this.parent.on_find_CurrentStyle_trailingdayborder(pseudo) || this._find_pseudo_obj("trailingdayborder", pseudo, "border") || this.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_trailingdaybordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_trailingdaybordertype(pseudo) || this._find_pseudo_obj("trailingdaybordertype", pseudo, "bordertype") || this.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_trailingdaycolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_trailingdaycolor(pseudo) || this._find_pseudo_obj("trailingdaycolor", pseudo, "color") || this.on_find_CurrentStyle_daycolor(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_trailingdayfont = function (pseudo) {
		return this.parent.on_find_CurrentStyle_trailingdayfont(pseudo) || this._find_pseudo_obj("trailingdayfont", pseudo, "font") || this.on_find_CurrentStyle_dayfont(pseudo);
	};

	_pDatePickerBody.on_find_CurrentStyle_viewmonthspin = function (pseudo) {
		return this.parent.on_find_CurrentStyle_viewmonthspin(pseudo) || this._find_pseudo_obj("viewmonthspin", pseudo) || nexacro.DatePicker._defaultViewMonthSpin;
	};

	_pDatePickerBody.on_find_CurrentStyle_viewyearspin = function (pseudo) {
		return this.parent.on_find_CurrentStyle_viewyearspin(pseudo) || this._find_pseudo_obj("viewyearspin", pseudo) || nexacro.DatePicker._defaultViewYearSpin;
	};


	_pDatePickerBody.on_update_style_daysize = function () {
		this.on_apply_style_daysize(this.currentstyle.daysize = this.on_find_CurrentStyle_daysize(this._pseudo));
	};

	_pDatePickerBody.on_update_style_daycolor = function () {
		this.on_apply_style_daycolor(this.currentstyle.daycolor = this.on_find_CurrentStyle_daycolor(this._pseudo));
	};

	_pDatePickerBody.on_update_style_daybackground = function () {
		this.on_apply_style_daybackground(this.currentstyle.daybackground = this.on_find_CurrentStyle_daybackground(this._pseudo));
	};

	_pDatePickerBody.on_update_style_daygradation = function () {
		this.on_apply_style_daygradation(this.currentstyle.daygradation = this.on_find_CurrentStyle_daygradation(this._pseudo));
	};

	_pDatePickerBody.on_update_style_dayborder = function () {
		this.on_apply_style_dayborder(this.currentstyle.dayborder = this.on_find_CurrentStyle_dayborder(this._pseudo));
	};

	_pDatePickerBody.on_update_style_daybordertype = function () {
		this.on_apply_style_daybordertype(this.currentstyle.daybordertype = this.on_find_CurrentStyle_daybordertype(this._pseudo));
	};

	_pDatePickerBody.on_update_style_dayfont = function () {
		this.on_apply_style_dayfont(this.currentstyle.dayfont = this.on_find_CurrentStyle_dayfont(this._pseudo));
	};

	_pDatePickerBody.on_update_style_weekformat = function () {
		this.on_apply_style_weekformat(this.currentstyle.weekformat = this.on_find_CurrentStyle_weekformat(this._pseudo));
	};

	_pDatePickerBody.on_update_style_weekcolor = function () {
		this.on_apply_style_weekcolor(this.currentstyle.weekcolor = this.on_find_CurrentStyle_weekcolor(this._pseudo));
	};

	_pDatePickerBody.on_update_style_weekbackground = function () {
		this.on_apply_style_weekbackground(this.currentstyle.weekbackground = this.on_find_CurrentStyle_weekbackground(this._pseudo));
	};

	_pDatePickerBody.on_update_style_weekgradation = function () {
		this.on_apply_style_weekgradation(this.currentstyle.weekgradation = this.on_find_CurrentStyle_weekgradation(this._pseudo));
	};

	_pDatePickerBody.on_update_style_weekfont = function () {
		this.on_apply_style_weekfont(this.currentstyle.weekfont = this.on_find_CurrentStyle_weekfont(this._pseudo));
	};

	_pDatePickerBody.on_update_style_todaycolor = function () {
		this.on_apply_style_todaycolor(this.currentstyle.todaycolor = this.on_find_CurrentStyle_todaycolor(this._pseudo));
	};

	_pDatePickerBody.on_update_style_todaybackground = function () {
		this.on_apply_style_todaybackground(this.currentstyle.todaybackground = this.on_find_CurrentStyle_todaybackground(this._pseudo));
	};

	_pDatePickerBody.on_update_style_todaygradation = function () {
		this.on_apply_style_todaygradation(this.currentstyle.todaygradation = this.on_find_CurrentStyle_todaygradation(this._pseudo));
	};

	_pDatePickerBody.on_update_style_todayborder = function () {
		this.on_apply_style_todayborder(this.currentstyle.todayborder = this.on_find_CurrentStyle_todayborder(this._pseudo));
	};

	_pDatePickerBody.on_update_style_todaybordertype = function () {
		this.on_apply_style_todaybordertype(this.currentstyle.todaybordertype = this.on_find_CurrentStyle_todaybordertype(this._pseudo));
	};

	_pDatePickerBody.on_update_style_todayfont = function () {
		this.on_apply_style_todayfont(this.currentstyle.todayfont = this.on_find_CurrentStyle_todayfont(this._pseudo));
	};

	_pDatePickerBody.on_update_style_saturdaycolor = function () {
		this.on_apply_style_saturdaycolor(this.currentstyle.saturdaycolor = this.on_find_CurrentStyle_saturdaycolor(this._pseudo));
	};

	_pDatePickerBody.on_update_style_saturdaybackground = function () {
		this.on_apply_style_saturdaybackground(this.currentstyle.saturdaybackground = this.on_find_CurrentStyle_saturdaybackground(this._pseudo));
	};

	_pDatePickerBody.on_update_style_saturdaygradation = function () {
		this.on_apply_style_saturdaygradation(this.currentstyle.saturdaygradation = this.on_find_CurrentStyle_saturdaygradation(this._pseudo));
	};

	_pDatePickerBody.on_update_style_saturdayborder = function () {
		this.on_apply_style_saturdayborder(this.currentstyle.saturdayborder = this.on_find_CurrentStyle_saturdayborder(this._pseudo));
	};

	_pDatePickerBody.on_update_style_saturdaybordertype = function () {
		this.on_apply_style_saturdaybordertype(this.currentstyle.saturdaybordertype = this.on_find_CurrentStyle_saturdaybordertype(this._pseudo));
	};

	_pDatePickerBody.on_update_style_saturdayfont = function () {
		this.on_apply_style_saturdayfont(this.currentstyle.saturdayfont = this.on_find_CurrentStyle_saturdayfont(this._pseudo));
	};

	_pDatePickerBody.on_update_style_sundaycolor = function () {
		this.on_apply_style_sundaycolor(this.currentstyle.sundaycolor = this.on_find_CurrentStyle_sundaycolor(this._pseudo));
	};

	_pDatePickerBody.on_update_style_sundaybackground = function () {
		this.on_apply_style_sundaybackground(this.currentstyle.sundaybackground = this.on_find_CurrentStyle_sundaybackground(this._pseudo));
	};

	_pDatePickerBody.on_update_style_sundaygradation = function () {
		this.on_apply_style_sundaygradation(this.currentstyle.sundaygradation = this.on_find_CurrentStyle_sundaygradation(this._pseudo));
	};

	_pDatePickerBody.on_update_style_sundayborder = function () {
		this.on_apply_style_sundayborder(this.currentstyle.sundayborder = this.on_find_CurrentStyle_sundayborder(this._pseudo));
	};

	_pDatePickerBody.on_update_style_sundaybordertype = function () {
		this.on_apply_style_sundaybordertype(this.currentstyle.sundaybordertype = this.on_find_CurrentStyle_sundaybordertype(this._pseudo));
	};

	_pDatePickerBody.on_update_style_sundayfont = function () {
		this.on_apply_style_sundayfont(this.currentstyle.sundayfont = this.on_find_CurrentStyle_sundayfont(this._pseudo));
	};

	_pDatePickerBody.on_update_style_usetrailingday = function () {
		this.on_apply_style_usetrailingday(this.currentstyle.usetrailingday = this.on_find_CurrentStyle_usetrailingday(this._pseudo));
	};

	_pDatePickerBody.on_update_style_trailingdaycolor = function () {
		this.on_apply_style_trailingdaycolor(this.currentstyle.trailingdaycolor = this.on_find_CurrentStyle_trailingdaycolor(this._pseudo));
	};

	_pDatePickerBody.on_update_style_trailingdaybackground = function () {
		this.on_apply_style_trailingdaybackground(this.currentstyle.trailingdaybackground = this.on_find_CurrentStyle_trailingdaybackground(this._pseudo));
	};

	_pDatePickerBody.on_update_style_trailingdaygradation = function () {
		this.on_apply_style_trailingdaygradation(this.currentstyle.trailingdaygradation = this.on_find_CurrentStyle_trailingdaygradation(this._pseudo));
	};

	_pDatePickerBody.on_update_style_trailingdayborder = function () {
		this.on_apply_style_trailingdayborder(this.currentstyle.trailingdayborder = this.on_find_CurrentStyle_trailingdayborder(this._pseudo));
	};

	_pDatePickerBody.on_update_style_trailingdaybordertype = function () {
		this.on_apply_style_trailingdaybordertype(this.currentstyle.trailingdaybordertype = this.on_find_CurrentStyle_trailingdaybordertype(this._pseudo));
	};

	_pDatePickerBody.on_update_style_trailingdayfont = function () {
		this.on_apply_style_trailingdayfont(this.currentstyle.trailingdayfont = this.on_find_CurrentStyle_trailingdayfont(this._pseudo));
	};


	_pDatePickerBody.on_apply_style_daysize = function (size) {
		this._resizeBody();
	};

	_pDatePickerBody.on_apply_style_daycolor = function (color) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_daybackground = function (background) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_daygradation = function (gradation) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_dayborder = function (border) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_daybordertype = function (bordertype) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_dayfont = function (font) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pDatePickerBody.on_apply_style_weekformat = function (format) {
		var control_elem = this.getElement();
		if (control_elem && format) {
			var weekStr;
			var weeks = this._weeks;
			var week_len = weeks.length;
			if (typeof format == "object") {
				weekStr = format.value.split(/\s+/);
			}
			else {
				weekStr = format.split(/\s+/);
			}

			for (var i = 0; i < week_len; i++) {
				weeks[i].set_text(weekStr[i]);
			}
		}
	};

	_pDatePickerBody.on_apply_style_weekcolor = function (color) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_weekbackground = function (background) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_weekgradation = function (gradation) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_weekborder = function (border) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_weekbordertype = function (bordertype) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_weekfont = function (font) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_todaycolor = function (color) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_todaybackground = function (background) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_todaygradation = function (gradation) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_todayborder = function (border) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_todaybordertype = function (bordertype) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_todayfont = function (font) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_saturdaycolor = function (color) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_saturdaybackground = function (background) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_saturdaygradation = function (gradation) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_saturdayborder = function (border) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_saturdaybordertype = function (bordertype) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_saturdayfont = function (font) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_sundaycolor = function (color) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_sundaybackground = function (background) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_sundaygradation = function (gradation) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_sundayborder = function (border) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_sundaybordertype = function (bordertype) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_sundayfont = function (font) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_usetrailingday = function (usetrailingday) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_trailingdaycolor = function (color) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_trailingdaybackground = function (background) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_trailingdaygradation = function (gradation) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_trailingdayborder = function (border) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_trailingdaybordertype = function (bordertype) {
		this._refreshDay();
	};

	_pDatePickerBody.on_apply_style_trailingdayfont = function (font) {
		this._refreshDay();
	};

	_pDatePickerBody.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var curstyle = this.currentstyle;
			var week = this._weeks;
			var day = this._days;
			var maxWeek = 7;
			var weekformat;

			if (curstyle.weekformat) {
				weekformat = curstyle.weekformat.value.split(/\s+/);
			}
			else {
				weekformat = this.parent.parent._datelistS;
			}

			this._weekBg = new nexacro.WeekStaticCtrl("weekstatic", "absolute", 0, 0, 0, 0, null, null, this);
			this._weekBg.createComponent();

			for (var i = 0; i < maxWeek; i++) {
				var weekStatic = new nexacro.WeekStaticCtrl("weekstatic", "absolute", 0, 0, 0, 0, null, null, this);

				weekStatic.set_text(weekformat[i]);
				weekStatic._setDaysOfWeek(i % 7);

				weekStatic.createComponent();
				week[i] = weekStatic;
				weekStatic = null;
			}

			var maxDay = 42;
			for (var i = 0; i < maxDay; i++) {
				var dayStatic = new nexacro.DayStaticCtrl("daystatic", "absolute", 0, 0, 0, 0, null, null, this);
				dayStatic._setDaysOfWeek(i % 7);
				dayStatic.createComponent();

				day[i] = dayStatic;
				dayStatic = null;
			}
		}
	};

	_pDatePickerBody.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var week = this._weeks;
			var day = this._days;

			var week_len = week.length;
			var day_len = day.length;

			this._weekBg.on_created();

			for (var i = 0; i < week_len; i++) {
				week[i].on_created();
			}
			for (var i = 0; i < day_len; i++) {
				day[i].on_created();
				day[i]._setEventHandler("onclick", this.on_notify_DatePickerBody_dayclick, this);

				day[i].style.set_cursor("arrow");
			}

			this.on_apply_prop_rtldirection();
		}
	};

	_pDatePickerBody.on_destroy_contents = function () {
		var week = this._weeks;
		var day = this._days;
		var week_len = week.length;
		var day_len = day.length;

		this._weekBg.destroy();
		this._weekBg = null;

		if (week_len > 0) {
			for (var i = 0; i < week_len; i++) {
				week[i].destroy();
			}
			this._weeks = null;
		}
		if (day_len > 0) {
			for (i = 0; i < day_len; i++) {
				day[i].destroy();
			}
			this._days = null;
		}

		this._changedDays = null;
		this._calendar = null;
	};

	_pDatePickerBody.on_change_containerRect = function (width, height) {
		this._resizeBody();
	};

	_pDatePickerBody.on_apply_prop_enable = function (enable) {
		var control_elem = this.getElement();
		if (control_elem) {
			var week = this._weeks;
			var day = this._days;
			var week_len = week.length;
			var day_len = day.length;

			this._weekBg._setEnable(enable);

			if (week_len > 0) {
				for (var i = 0; i < week_len; i++) {
					week[i]._setEnable(enable);
				}
			}
			if (day_len > 0) {
				for (i = 0; i < day_len; i++) {
					day[i]._setEnable(enable);
				}
			}
		}
	};

	_pDatePickerBody.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var control_elem = this.getElement();
		if (control_elem) {
			this.on_change_containerRect(this._client_width, this._client_height);

			var _rtldirection = this._rtldirection;

			var week = this._weeks;
			var day = this._days;
			var week_len = week.length;
			var day_len = day.length;

			if (week_len > 0) {
				for (var i = 0; i < week_len; i++) {
					week[i]._setRtlDirection(_rtldirection);
				}
			}
			if (day_len > 0) {
				for (i = 0; i < day_len; i++) {
					day[i]._setRtlDirection(_rtldirection);
				}
			}
		}
	};

	_pDatePickerBody.on_apply_backgroundcolumn = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody.on_apply_bordercolumn = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody.on_apply_datecolumn = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody.on_apply_innerdataset = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody.on_apply_textcolorcolumn = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody._setYear = function (v) {
		if (v != this._year) {
			this._year = (v < 10 ? "000" : v < 100 ? "00" : v < 1000 ? "0" : "") + parseInt(v, 10);
			this.on_apply_year();
		}
	};

	_pDatePickerBody.on_apply_year = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody._setMonth = function (v) {
		if (v != this._month) {
			v = (v < 10 ? "0" : "") + parseInt(v, 10);
			this._month = v;
			this.on_apply_month();
		}
	};

	_pDatePickerBody.on_apply_month = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody._setDay = function (v) {
		if (v != this._day) {
			v = (v < 10 ? "0" : "") + parseInt(v, 10);
			this._day = v;
		}
		this.on_apply_day();
	};

	_pDatePickerBody.on_apply_day = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody._setDate = function (year, month, day) {
		this._year = (year < 10 ? "000" : year < 100 ? "00" : year < 1000 ? "0" : "") + parseInt(year, 10);
		this._month = (month < 10 ? "0" : "") + parseInt(month, 10);
		this._day = (day < 10 ? "0" : "") + parseInt(day, 10);
		this.on_apply_date();
	};

	_pDatePickerBody.on_apply_date = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._refreshDay();
		}
	};

	_pDatePickerBody.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pDatePickerBody.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}
	};

	_pDatePickerBody.on_notify_DatePickerBody_dayclick = function (obj, e) {
		this._post_year = (obj.currYear < 10 ? "000" : obj.currYear < 100 ? "00" : obj.currYear < 1000 ? "0" : "") + parseInt(obj.currYear, 10);
		this._post_month = (obj.currMonth < 10 ? "0" : "") + parseInt(obj.currMonth, 10);
		this._post_day = (obj.text < 10 ? "0" : "") + parseInt(obj.text, 10);

		var ret = this.on_fire_ondayclick(obj, e);
	};

	_pDatePickerBody.on_fire_ondayclick = function (obj, e) {
		if (this.ondayclick && this.ondayclick._has_handlers) {
			return this.ondayclick._fireEvent(this, e);
		}
		return false;
	};

	_pDatePickerBody._resizeBody = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var pseudo = this._pseudo;
			var week = this._weeks;
			var day = this._days;
			var week_len = week.length;
			var day_len = day.length;

			var client_width = this._client_width;
			var client_height = this._client_height;
			var client_left = this._client_left;
			var client_top = this._client_top;

			var daysize = this.on_find_CurrentStyle_daysize(pseudo);
			var padding = this.on_find_CurrentStyle_padding(pseudo);

			daysize = daysize.value.split(/\s+/);
			var dayWidth = parseInt(daysize[0], 10);
			var dayHeight = 0;
			if (daysize.length == 1) {
				dayHeight = dayWidth;
			}
			else {
				dayHeight = parseInt(daysize[1], 10);
			}

			var drawWidth_daysize = dayWidth * 7;
			var drawHeight_daysize = dayHeight * 7;

			var blankWidth = 0;
			var blankHeight = 0;
			var result = 0;
			if (drawWidth_daysize < client_width) {
				result = client_width - drawWidth_daysize;
				blankWidth = result / 14;
			}
			if (drawHeight_daysize < client_height) {
				result = client_height - drawHeight_daysize;
				blankHeight = result / 8;
			}

			var week_l = client_left + blankWidth;
			var week_t = client_top + blankHeight / 2;
			var week_w = dayWidth;
			var week_h = dayHeight;

			this._weekBg.move(client_left, week_t, client_width, week_h, null, null);

			for (var i = 0; i < week_len; i++) {
				week[i].move(week_l, week_t, week_w, week_h, null, null);
				week_l = week_l + week_w + blankWidth * 2;
			}

			var week_idx = 1;
			var day_l = client_left + blankWidth;
			var day_t = week_t + dayHeight + blankHeight;
			var day_w = dayWidth;
			var day_h = dayHeight;
			for (var i = 0; i < day_len; i++) {
				day[i].move(day_l, day_t, day_w, day_h, null, null);
				day_l = day_l + day_w + blankWidth * 2;
				if (((i + 1) % 7) == 0) {
					week_idx++;
					day_l = client_left + blankWidth;
					day_t = day_t + day_h + blankHeight;
				}
			}
		}
	};

	_pDatePickerBody._refreshDay = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var currentDate = this._getCurrentDate();
			var year = this._year ? parseInt(this._year, 10) : currentDate.year;
			var month = this._month ? parseInt(this._month, 10) : currentDate.month;
			var day = this._day ? parseInt(this._day, 10) : currentDate.day;

			var is_leapyear = this._getLeapYear(year);
			var firstDay = new Date(year, month - 1, 1);

			if (year < 100) {
				firstDay.setFullYear(year);
			}

			var endDay = is_leapyear ? this._endDayL[month - 1] : this._endDayN[month - 1];
			var week = firstDay.getDay();

			var usetrailingday = this.on_find_CurrentStyle_usetrailingday(this._pseudo);
			var is_usetrailingday = nexacro._toBoolean(usetrailingday.value);
			if (is_usetrailingday) {
				var trailingday_info = this._setUseTrailingDayInfo(year, month, firstDay, endDay);
			}

			var day = this._days;
			var day_len = day.length;
			var dayCount = 1;
			var daysofweek = -1;

			var dayInfo = {
			};

			var sundayfont = this.parent.on_find_CurrentStyle_sundayfont("normal");
			var sundaycolor = this.parent.on_find_CurrentStyle_sundaycolor("normal");
			var sundaybackground = this.parent.on_find_CurrentStyle_sundaybackground("normal");
			var saturdayfont = this.parent.on_find_CurrentStyle_saturdayfont("normal");
			var saturdaycolor = this.parent.on_find_CurrentStyle_saturdaycolor("normal");
			var saturdaybackground = this.parent.on_find_CurrentStyle_saturdaybackground("normal");
			var dayfont = this.parent.on_find_CurrentStyle_dayfont("normal");
			var daycolor = this.parent.on_find_CurrentStyle_daycolor("normal");
			var daybackground = this.parent.on_find_CurrentStyle_daybackground("normal");
			var dayborder = this.parent.on_find_CurrentStyle_dayborder("normal");
			var daybordertype = this.parent.on_find_CurrentStyle_daybordertype("normal");
			var trailingdayfont = this.parent.on_find_CurrentStyle_trailingdayfont("normal");
			var trailingdaycolor = this.parent.on_find_CurrentStyle_trailingdaycolor("normal");
			var trailingdaybackground = this.parent.on_find_CurrentStyle_trailingdaybackground("normal");
			var trailingdayborder = this.parent.on_find_CurrentStyle_trailingdayborder("normal");
			var trailingdaybordertype = this.parent.on_find_CurrentStyle_trailingdaybordertype("normal");
			var rtlimagemirroring = this.parent.on_find_CurrentStyle_rtlimagemirroring("normal");

			for (var i = 0; i < day_len; i++) {
				if (week <= i && endDay >= dayCount) {
					dayInfo = this._setDayInfo(dayCount, false, true, year, month);

					this._refreshDayby(day[i], dayInfo.text, dayInfo.visible, dayInfo.currYear, dayInfo.currMonth, dayInfo.trailingday);

					daysofweek = i % 7;
					if (daysofweek == 0) {
						day[i].on_apply_style_font(sundayfont);
						day[i].on_apply_style_color(sundaycolor);
						day[i].on_apply_style_background(sundaybackground);
					}
					else if (daysofweek == 6) {
						day[i].on_apply_style_font(saturdayfont);
						day[i].on_apply_style_color(saturdaycolor);
						day[i].on_apply_style_background(saturdaybackground);
					}
					else {
						day[i].on_apply_style_font(dayfont);
						day[i].on_apply_style_color(daycolor);
						day[i].on_apply_style_background(daybackground);
					}

					day[i].on_apply_style_border(dayborder);
					day[i].on_apply_style_bordertype(daybordertype);
					day[i].on_apply_style_rtlimagemirroring(rtlimagemirroring);

					dayCount++;
				}
				else {
					if (is_usetrailingday) {
						if (trailingday_info.idx >= 0) {
							dayInfo = this._setDayInfo(trailingday_info.pre_endDay - trailingday_info.idx, true, true, trailingday_info.year_front, trailingday_info.month_front);
							trailingday_info.idx--;
						}
						else {
							dayInfo = this._setDayInfo(trailingday_info.next_beginDay, true, true, trailingday_info.year_back, trailingday_info.month_back);
							trailingday_info.next_beginDay++;
							trailingday_info.endWeek++;
						}

						this._refreshDayby(day[i], dayInfo.text, dayInfo.visible, dayInfo.currYear, dayInfo.currMonth, dayInfo.trailingday);

						day[i].on_apply_style_font(trailingdayfont);
						day[i].on_apply_style_color(trailingdaycolor);
						day[i].on_apply_style_background(trailingdaybackground);
						day[i].on_apply_style_border(trailingdayborder);
						day[i].on_apply_style_bordertype(trailingdaybordertype);
						day[i].on_apply_style_rtlimagemirroring(rtlimagemirroring);
					}
					else {
						dayInfo = this._setDayInfo("", false, false, 0, 0);
						this._refreshDayby(day[i], dayInfo.text, dayInfo.visible, dayInfo.currYear, dayInfo.currMonth, dayInfo.trailingday);
					}
				}
			}
		}

		this._changedDays = [];
		var dataset_path = this.parent.parent;
		var dataset = dataset_path._innerdataset;

		this._initChangedDays();

		if (dataset) {
			this._setDatasetStyle(dataset, dataset_path);
		}

		if (this._isSelectedDay(this._day)) {
			this.parent._on_apply_style_day(true);
		}
		else {
			this.parent._on_apply_style_day(false);
		}
		this._setCalendarAccessibility();
	};

	_pDatePickerBody._refreshDayby = function (day, text, visible, currYear, currMonth, trailingday) {
		day.set_text(text);
		day.set_wordwrap("none");
		day.set_visible(visible);
		day.currYear = currYear;
		day.currMonth = currMonth;
		day.trailingday = trailingday;
	};

	_pDatePickerBody._isToday = function (v) {
		var year = this._year;
		var month = this._month;
		var day = parseInt(v, 10);
		var currentDate = this._getCurrentDate();

		if (!year) {
			year = currentDate.year;
		}
		if (!month) {
			month = currentDate.month;
		}

		if (year == currentDate.year && month == currentDate.month && day == currentDate.day) {
			return true;
		}
		return false;
	};

	_pDatePickerBody._isSelectedDay = function (v) {
		v = parseInt(v, 10);
		var year = parseInt(this._year, 10);
		var month = parseInt(this._month, 10);
		if (year == this.parent._selected_year && month == this.parent._selected_month && v == this.parent._selected_day) {
			return true;
		}
		return false;
	};

	_pDatePickerBody._setDayInfo = function (text, trailingday, visible, currYear, currMonth) {
		return {
			text : text, 
			trailingday : trailingday, 
			visible : visible, 
			currYear : currYear, 
			currMonth : currMonth
		};
	};

	_pDatePickerBody._setUseTrailingDayInfo = function (year, month, dateObj, endDay) {
		var year_front = year;
		var year_back = year;
		var month_front = month;
		var month_back = month;

		if (month == 1) {
			year_front -= 1;
			month_front = 12;

			month_back += 1;
		}
		else {
			month_front -= 1;
			if (month == 12) {
				year_back += 1;
				month_back = 1;
			}
			else {
				month_back += 1;
			}
		}

		var idx = dateObj.getDay() - 1;

		dateObj.setDate(endDay);
		var endWeek = dateObj.getDay();


		var is_pre_leapyear = this._getLeapYear(year_front);
		var pre_endDay = is_pre_leapyear ? this._endDayL[month_front - 1] : this._endDayN[month_front - 1];
		var next_beginDay = 1;

		return {
			year_front : year_front, 
			year_back : year_back, 
			month_front : month_front, 
			month_back : month_back, 
			endWeek : endWeek, 
			idx : idx, 
			pre_endDay : pre_endDay, 
			next_beginDay : next_beginDay
		};
	};

	_pDatePickerBody._setDatasetStyle = function (dataset, dataset_path) {
		var day = this._days;
		var day_len = day.length;
		var backgroundcolumn = dataset_path.backgroundcolumn;
		var bordercolumn = dataset_path.bordercolumn;
		var datecolumn = dataset_path.datecolumn;
		var textcolorcolumn = dataset_path.textcolorcolumn;

		var rowCount = dataset.getRowCount();
		for (var i = 0; i < rowCount; i++) {
			var date = dataset.getColumn(i, datecolumn);
			var background, border, color;
			var week_idx = 0;
			var date_idx = 0;
			var date_year = 0;
			var date_month = 0;
			var date_day = 0;
			var datasetDateObj = {
			};

			if (date) {
				if (typeof date == "string") {
					date_year = parseInt(date.substr(0, 4), 10);
					date_month = parseInt(date.substr(4, 2), 10);
					date_day = parseInt(date.substr(6, 2), 10);
					datasetDateObj = new nexacro.Date(date_year, date_month, 1);
					week_idx = datasetDateObj.getDay();

					datasetDateObj = null;
				}
				else if (typeof date == "object") {
					date_year = date.getFullYear();
					date_month = date.getMonth() + 1;
					date_day = date.getDate();
					week_idx = date.getDay();
				}
				date_idx = week_idx + date_day + 1;
			}

			for (var j = 0; j < day_len; j++) {
				var year_val = this._makeDateText(day[j].currYear, "year");
				var month_val = this._makeDateText(day[j].currMonth, "month");
				var day_val = this._makeDateText(day[j].text, "day");

				var currStyle = day[j].currentstyle;
				var currDate = year_val + month_val + day_val;
				var changeday_len = this._changedDays.length;
				if (currDate == date) {
					if (day[j].trailingday) {
						continue;
					}

					background = dataset.getColumn(i, backgroundcolumn);
					background = nexacro._getCachedBackgroundObj(background);
					border = dataset.getColumn(i, bordercolumn);
					border = nexacro._getCachedBorderObj(border);
					color = dataset.getColumn(i, textcolorcolumn);
					color = nexacro._getCachedColorObj(color);

					if (background) {
						currStyle.background = background;
						day[j].on_apply_style_background(background);
					}
					if (border) {
						currStyle.border = border;
						day[j].on_apply_style_border(border);
					}
					if (color && color._value) {
						currStyle.color = color;
						day[j].on_apply_style_color(color);
					}
					this._changedDays[changeday_len] = day[j];
				}
				else if (date_year != day[j].currYear || date_month != day[j].currMonth) {
					if (date_idx == j) {
						background = day[j].on_find_CurrentStyle_background(day[j]._pseudo);
						border = day[j].on_find_CurrentStyle_border(day[j]._pseudo);
						color = day[j].on_find_CurrentStyle_color(day[j]._pseudo);

						currStyle.background = background;
						currStyle.border = border;
						currStyle.color = color;

						day[j].on_apply_style_background(background);
						day[j].on_apply_style_border(border);
						day[j].on_apply_style_color(color);
						this._changedDays[changeday_len] = day[j];
					}
				}
			}
		}
	};

	_pDatePickerBody._getCurrentDate = function () {
		var year, month, day;
		var currentDate = new Date();

		year = currentDate.getFullYear();
		month = currentDate.getMonth() + 1;
		day = currentDate.getDate();
		currentDate = null;
		return {
			year : year, 
			month : month, 
			day : day
		};
	};

	_pDatePickerBody._getLeapYear = function (year) {
		if ((year % 4) == 0 && (year % 100) != 0 || (year % 400) == 0) {
			return true;
		}
		else {
			return false;
		}
	};

	_pDatePickerBody._initChangedDays = function () {
		var len = this._changedDays.length;
		for (var i = 0; i < len; i++) {
			var background = this.parent._find_pseudo_obj("daybackground", "normal", "background");
			var border = this.parent._find_pseudo_obj("dayborder", "normal", "border");
			var color = this.parent._find_pseudo_obj("daycolor", "normal", "color");
			this._changedDays[i].on_apply_style_background(background);
			this._changedDays[i].on_apply_style_border(border);
			this._changedDays[i].on_apply_style_color(color);
		}
	};

	_pDatePickerBody._makeDateText = function (v, type) {
		if (typeof v != "string") {
		}
		{

			v = nexacro._toString(v);
		}
		switch (type) {
			case "year":
				var year_val = v;
				while (year_val.length < 4) {
					year_val = "0" + year_val;
				}
				return year_val;
				break;
			case "month":
				var month_val = v.length >= 2 ? v : "0" + v;
				return month_val;
				break;
			case "day":
				var day_val = v.length >= 2 ? v : "0" + v;
				return day_val;
				break;
		}
	};

	_pDatePickerBody._setCalendarAccessibility = function () {
		if (nexacro._enableaccessibility) {
			var calendar = this._calendar;
			var cal_value = this._year + this._month + this._day;
			var accessibility_value = calendar._makeCalendarText(cal_value);
			this.parent._setAccessibilityLabel(accessibility_value);
			nexacro._notifyAccessibilityValue(this._control_element, accessibility_value, "daychange");
		}
	};

	delete _pDatePickerBody;

	nexacro.DayStaticCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._is_reference_control = false;

		this.trailingday = false;
		this.currYear = "";
		this.currMonth = "";

		this._flag_dataset = -1;
		this._dataset_background = "";
		this._refObj = parent.parent;
	};

	var _pDayStaticCtrl = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.DayStaticCtrl);
	nexacro.DayStaticCtrl.prototype = _pDayStaticCtrl;

	_pDayStaticCtrl._daysofweek = -1;


	_pDayStaticCtrl.on_find_CurrentStyle_background = function (pseudo) {
		var text = this.text;
		if (text && text.length > 0) {
			if (this.trailingday) {
				return this.parent.on_find_CurrentStyle_trailingdaybackground(pseudo);
			}
			else if (this.parent._isSelectedDay(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daybackground(pseudo);
				}
				return this.parent.on_find_CurrentStyle_daybackground("selected");
			}
			else if (this.parent._isToday(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daybackground(pseudo);
				}
				else {
					return this.parent.on_find_CurrentStyle_todaybackground(pseudo);
				}
			}
			if (this._refObj.parent.backgroundcolumn && pseudo == "normal") {
				var dataset = this._refObj.parent._innerdataset;
				var datecolumn = this._refObj.parent.datecolumn;
				var backgroundcolumn = this._refObj.parent.backgroundcolumn;
				var rowCount = dataset.getRowCount();
				for (var i = 0; i < rowCount; i++) {
					var date = dataset.getColumn(i, datecolumn);

					if (date) {
						var year = date.substr(0, 4);
						var month = date.substr(4, 2);
						var day = date.substr(6, 2);
						var statictext = this.parent._makeDateText(text, "day");
						if (year == this.currYear && month == this.currMonth && day === statictext) {
							var background = dataset.getColumn(i, backgroundcolumn);
							return background = nexacro._getCachedBackgroundObj(background);
						}
					}
				}
			}
			if (this._daysofweek == 6) {
				return this.parent.on_find_CurrentStyle_saturdaybackground(pseudo);
			}
			if (this._daysofweek == 0) {
				return this.parent.on_find_CurrentStyle_sundaybackground(pseudo);
			}
		}
		return this.parent.on_find_CurrentStyle_daybackground(pseudo);
	};

	_pDayStaticCtrl.on_find_CurrentStyle_border = function (pseudo) {
		var text = this.text;
		if (text && text.length > 0) {
			if (this.trailingday) {
				return this.parent.on_find_CurrentStyle_trailingdayborder(pseudo);
			}
			if (this.parent._isSelectedDay(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_dayborder(pseudo);
				}
				return this.parent.on_find_CurrentStyle_dayborder("selected");
			}
			if (this.parent._isToday(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_dayborder(pseudo);
				}
				return this.parent.on_find_CurrentStyle_todayborder(pseudo);
			}

			var p_comp = this._refObj.bordercolumn ? this._refObj : this._refObj.parent;
			if (p_comp.bordercolumn) {
				var dataset = p_comp._innerdataset;
				var datecolumn = p_comp.datecolumn;

				var bordercolumn = p_comp.bordercolumn;
				var rowCount = dataset.getRowCount();
				for (var i = 0; i < rowCount; i++) {
					var date = dataset.getColumn(i, datecolumn);

					if (date) {
						var year = date.substr(0, 4);
						var month = date.substr(4, 2);
						var day = date.substr(6, 2);
						var statictext = this.parent._makeDateText(text, "day");
						if (year == this.currYear && month == this.currMonth && day === statictext) {
							var border = dataset.getColumn(i, bordercolumn);
							return border = nexacro._getCachedBorderObj(border);
						}
					}
				}
			}
			if (this._daysofweek == 6) {
				return this.parent.on_find_CurrentStyle_saturdayborder(pseudo);
			}
			if (this._daysofweek == 0) {
				return this.parent.on_find_CurrentStyle_sundayborder(pseudo);
			}
		}
		return this.parent.on_find_CurrentStyle_dayborder(pseudo);
	};

	_pDayStaticCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		var text = this.text;
		if (text && text.length > 0) {
			if (this.trailingday) {
				return this.parent.on_find_CurrentStyle_trailingdaybordertype(pseudo);
			}
			if (this.parent._isSelectedDay(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daybordertype(pseudo);
				}
				return this.parent.on_find_CurrentStyle_daybordertype("selected");
			}
			if (this.parent._isToday(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daybordertype(pseudo);
				}
				return this.parent.on_find_CurrentStyle_todaybordertype(pseudo);
			}
			if (this._daysofweek == 6) {
				return this.parent.on_find_CurrentStyle_saturdaybordertype(pseudo);
			}
			if (this._daysofweek == 0) {
				return this.parent.on_find_CurrentStyle_sundaybordertype(pseudo);
			}
		}
		return this.parent.on_find_CurrentStyle_daybordertype(pseudo);
	};

	_pDayStaticCtrl.on_find_CurrentStyle_color = function (pseudo) {
		var text = this.text;
		if (text && text.length > 0) {
			if (this._refObj.parent.textcolorcolumn && pseudo == "normal") {
				var dataset = this._refObj.parent._innerdataset;
				var datecolumn = this._refObj.parent.datecolumn;
				var textcolorcolumn = this._refObj.parent.textcolorcolumn;
				var rowCount = dataset.getRowCount();
				for (var i = 0; i < rowCount; i++) {
					var date = dataset.getColumn(i, datecolumn);

					if (typeof date == "object") {
						date = date.toString();
					}

					if (date) {
						var year = date.substr(0, 4);
						var month = date.substr(4, 2);
						var day = date.substr(6, 2);
						var statictext = this.parent._makeDateText(text, "day");
						if (year == this.currYear && month == this.currMonth && day === statictext) {
							if (this.trailingday) {
								return this.parent.on_find_CurrentStyle_trailingdaycolor(pseudo);
							}
							else {
								var color = dataset.getColumn(i, textcolorcolumn);
								color = nexacro._getCachedColorObj(color);
								if (color && color._value) {
									return color;
								}

								break;
							}
						}
					}
				}
			}

			if (this.trailingday) {
				return this.parent.on_find_CurrentStyle_trailingdaycolor(pseudo);
			}
			if (this.parent._isSelectedDay(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daycolor(pseudo);
				}
				return this.parent.on_find_CurrentStyle_daycolor("selected");
			}
			if (this.parent._isToday(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daycolor(pseudo);
				}
				return this.parent.on_find_CurrentStyle_todaycolor(pseudo);
			}

			if (this._daysofweek == 6) {
				return this.parent.on_find_CurrentStyle_saturdaycolor(pseudo);
			}
			if (this._daysofweek == 0) {
				return this.parent.on_find_CurrentStyle_sundaycolor(pseudo);
			}
		}
		return this.parent.on_find_CurrentStyle_daycolor(pseudo) || 
			this._find_inherit_pseudo_obj("color", pseudo) || 
			nexacro.Component._default_color;
	};

	_pDayStaticCtrl.on_find_CurrentStyle_font = function (pseudo) {
		var text = this.text;
		if (text && text.length > 0) {
			if (this.trailingday) {
				return this.parent.on_find_CurrentStyle_trailingdayfont(pseudo);
			}
			if (this.parent._isSelectedDay(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_dayfont(pseudo);
				}
				return this.parent.on_find_CurrentStyle_dayfont("selected");
			}
			if (this.parent._isToday(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_dayfont(pseudo);
				}
				return this.parent.on_find_CurrentStyle_todayfont(pseudo);
			}
			if (this._daysofweek == 6) {
				return this.parent.on_find_CurrentStyle_saturdayfont(pseudo);
			}
			if (this._daysofweek == 0) {
				return this.parent.on_find_CurrentStyle_sundayfont(pseudo);
			}
		}
		return this.parent.on_find_CurrentStyle_dayfont(pseudo) || 
			this._find_inherit_pseudo_obj("font", pseudo) || 
			nexacro.Component._default_font;
	};

	_pDayStaticCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		var text = this.text;
		if (text && text.length > 0) {
			if (this.trailingday) {
				return this.parent.on_find_CurrentStyle_trailingdaygradation(pseudo);
			}
			if (this.parent._isSelectedDay(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daygradation(pseudo);
				}
				return this.parent.on_find_CurrentStyle_daygradation("selected");
			}
			if (this.parent._isToday(text)) {
				if (pseudo == "mouseover") {
					return this.parent.on_find_CurrentStyle_daygradation(pseudo);
				}
				return this.parent.on_find_CurrentStyle_todaygradation(pseudo);
			}
			if (this._daysofweek == 6) {
				return this.parent.on_find_CurrentStyle_saturdaygradation(pseudo);
			}
			if (this._daysofweek == 0) {
				return this.parent.on_find_CurrentStyle_sundaygradation(pseudo);
			}
		}
		return this.parent.on_find_CurrentStyle_daygradation(pseudo);
	};


	_pDayStaticCtrl.on_apply_style_border = function (border) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementBorder(border, this.on_find_CurrentStyle_bordertype("normal"));
			control_elem.setElementBackground(this.on_find_CurrentStyle_background("normal"), this.on_find_CurrentStyle_gradation("normal"));
			this._updateClientSize(control_elem);
		}
		;
	};

	_pDayStaticCtrl.on_apply_style_bordertype = function (bordertype) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementBorder(this.on_find_CurrentStyle_border("normal"), bordertype);
			control_elem.setElementBackground(this.on_find_CurrentStyle_background("normal"), this.on_find_CurrentStyle_gradation("normal"));
			this._updateClientSize(control_elem);
		}
	};

	_pDayStaticCtrl.on_apply_style_background = function (background) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementBackground(background, this.on_find_CurrentStyle_gradation("normal"));
		}
	};

	_pDayStaticCtrl.on_apply_style_gradation = function (gradation) {
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementBackground(this.on_find_CurrentStyle_background("normal"), gradation);
		}
	};

	_pDayStaticCtrl.on_apply_style_font = function (font) {
		if (this.currentstyle.font != font) {
			this.currentstyle.font = font;
			if (this._text_elem && font) {
				this._text_elem.setElementFont(font);
			}
		}
	};

	_pDayStaticCtrl._setDaysOfWeek = function (daysofweek) {
		if (this._daysofweek != daysofweek) {
			this._daysofweek = daysofweek;
			this.on_apply_daysofweek();
		}
	};
	_pDayStaticCtrl.on_apply_daysofweek = function () {
		var v = this._daysofweek;
		var color = this.on_find_CurrentStyle_color(v);
		this.on_apply_style_color(color);
	};

	delete _pDayStaticCtrl;

	nexacro.WeekStaticCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;

		this._refObj = parent.parent;
	};

	var _pWeekCtrl = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.WeekStaticCtrl);
	nexacro.WeekStaticCtrl.prototype = _pWeekCtrl;

	_pWeekCtrl._daysofweek = -1;

	_pWeekCtrl.on_find_CurrentStyle_color = function (pseudo) {
		if (this._daysofweek == 0) {
			return this.parent.on_find_CurrentStyle_sundaycolor(pseudo);
		}
		else if (this._daysofweek == 6) {
			return this.parent.on_find_CurrentStyle_saturdaycolor(pseudo);
		}
		return this.parent.on_find_CurrentStyle_weekcolor(pseudo);
	};

	_pWeekCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekbackground(pseudo);
	};

	_pWeekCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekgradation(pseudo);
	};

	_pWeekCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_weekfont(pseudo);
	};

	_pWeekCtrl._setDaysOfWeek = function (daysofweek) {
		if (this._daysofweek != daysofweek) {
			this._daysofweek = daysofweek;
			this.on_apply_daysofweek();
		}
	};
	_pWeekCtrl.on_apply_daysofweek = function () {
		var v = this._daysofweek;
		var color = this.on_find_CurrentStyle_color(v);
		this.on_apply_style_color(color);
	};

	delete _pWeekCtrl;

	nexacro.DatePickerCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.DatePicker.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pDatePickerCtrl = nexacro.DatePickerCtrl.prototype = nexacro._createPrototype(nexacro.DatePicker, nexacro.DatePickerCtrl);
	_pDatePickerCtrl._type_name = "DatePickerControl";
	nexacro._setForControlStyleFinder(_pDatePickerCtrl);

	_pDatePickerCtrl.on_find_CurrentStyle_daycolor = function (pseudo) {
		var daycolor = null;
		var comp = this.parent;
		if (pseudo != "normal" && comp._styles[pseudo] && comp._styles[pseudo].daycolor) {
			daycolor = comp._styles[pseudo].daycolor;
		}
		else if (comp.style && comp.style.daycolor) {
			daycolor = comp.style.daycolor;
		}
		else {
			daycolor = this._find_inherit_pseudo_obj("daycolor", pseudo, "color") || comp._find_pseudo_obj("daycolor", pseudo, "color");
		}
		return daycolor;
	};

	delete _pDatePickerCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Calendar) {
	nexacro.CalendarCloseUpEventInfo = function (obj, id, pretext, posttext, prevalue, postvalue, isselect) {
		this.id = this.eventid = id || "oncloseup";
		this.fromobject = this.fromreferenceobject = obj;

		this.pretext = pretext;
		this.posttext = posttext;
		this.prevalue = prevalue;
		this.postvalue = postvalue;
	};
	var _pCalendarCloseUpEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CalendarCloseUpEventInfo);
	nexacro.CalendarCloseUpEventInfo.prototype = _pCalendarCloseUpEventInfo;
	_pCalendarCloseUpEventInfo._type_name = "CalendarCloseUpEventInfo";

	delete _pCalendarCloseUpEventInfo;
	_pCalendarCloseUpEventInfo = null;
	nexacro.CalendarDayClickEventInfo = function (obj, id, date) {
		this.id = this.eventid = id || "ondayclick";
		this.fromobject = this.fromreferenceobject = obj;

		if (date instanceof nexacro.Date) {
			date = date.toString();
		}

		this.date = date;
	};
	var _pCalendarDayClickEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CalendarDayClickEventInfo);
	nexacro.CalendarDayClickEventInfo.prototype = _pCalendarDayClickEventInfo;
	_pCalendarDayClickEventInfo._type_name = "CalendarDayClickEventInfo";

	delete _pCalendarDayClickEventInfo;
	_pCalendarDayClickEventInfo = null;

	nexacro.CalendarSpinEventInfo = function (obj, id, beforeText, afterText, beforeValue, afterValue, isUp, fromobject, fromreferenceobject) {
		nexacro.Event.call(this, obj, id || "oncalendarspin");
		this.id = this.eventid = id || "oncalendarspin";

		this.fromobject = fromobject || obj;
		this.fromreferenceobject = fromreferenceobject || obj;

		this.pretext = beforeText;
		this.posttext = afterText;
		this.prevalue = beforeValue;
		this.postvalue = afterValue;
		this.up = isUp;
	};
	var _pCalendarSpinEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CalendarSpinEventInfo);
	nexacro.CalendarSpinEventInfo.prototype = _pCalendarSpinEventInfo;
	_pCalendarSpinEventInfo._type_name = "CalendarSpinEventInfo";

	delete _pCalendarSpinEventInfo;
	_pCalendarSpinEventInfo = null;

	nexacro.Calendar_Style = function (target) {
		nexacro.Style.call(this, target);

		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;

		this.popupsize = null;
		this.popupbackground = null;
		this.popupgradation = null;
		this.popupborder = null;
		this.popupbordertype = null;
		this.popupalign = null;

		this.buttonsize = null;
		this.usetrailingday = null;
		this.trailingdaycolor = null;
		this.viewyearspin = null;
		this.viewmonthspin = null;

		this.popuptype = null;
		this.displaynulltextcolor = null;
	};

	var _pCalendarStyle = nexacro._createPrototype(nexacro.Style, nexacro.Calendar_Style);
	nexacro.Calendar_Style.prototype = _pCalendarStyle;

	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "daysize"));
	eval(nexacro._createColorAttributeEvalStr("_pCalendarStyle", "daycolor"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "popupsize"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "usetrailingday"));
	eval(nexacro._createColorAttributeEvalStr("_pCalendarStyle", "trailingdaycolor"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "buttonsize"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "viewyearspin"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "viewmonthspin"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pCalendarStyle", "daybackground"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pCalendarStyle", "popupbackground"));
	eval(nexacro._createBorderAttributeEvalStr("_pCalendarStyle", "dayborder"));
	eval(nexacro._createBorderAttributeEvalStr("_pCalendarStyle", "popupborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pCalendarStyle", "daybordertype"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pCalendarStyle", "popupbordertype"));
	eval(nexacro._createGradationAttributeEvalStr("_pCalendarStyle", "daygradation"));
	eval(nexacro._createGradationAttributeEvalStr("_pCalendarStyle", "popupgradation"));
	eval(nexacro._createFontAttributeEvalStr("_pCalendarStyle", "dayfont"));
	eval(nexacro._createFontAttributeEvalStr("_pCalendarStyle", "popupfont"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pCalendarStyle", "itemaccessibility"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "popuptype"));
	eval(nexacro._createValueAttributeEvalStr("_pCalendarStyle", "popupalign"));
	eval(nexacro._createColorAttributeEvalStr("_pCalendarStyle", "displaynulltextcolor"));

	_pCalendarStyle.__custom_emptyObject = function () {
		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;

		this.popupsize = null;
		this.popupbackground = null;
		this.popupgradation = null;
		this.popupborder = null;
		this.popupbordertype = null;
		this.popupalign = null;

		this.buttonsize = null;
		this.usetrailingday = null;
		this.trailingdaycolor = null;
		this.viewyearspin = null;
		this.viewmonthspin = null;
		this.popuptype = null;
		this.displaynulltextcolor = null;
	};

	_pCalendarStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.daysize && this.daysize._is_empty) {
			val += "daysize:" + this.daysize._value + "; ";
		}
		if (this.daycolor && this.daycolor._is_empty) {
			val += "daycolor:" + this.daycolor._value + "; ";
		}
		if (this.daybackground && this.daybackground._is_empty) {
			val += "daybackground:" + this.daybackground._value + "; ";
		}
		if (this.dayborder && this.dayborder._is_empty) {
			val += "dayborder:" + this.dayborder._value + "; ";
		}
		if (this.daybordertype && this.daybordertype._is_empty) {
			val += "daybordertype:" + this.daybordertype._value + "; ";
		}
		if (this.daygradation && this.daygradation._is_empty) {
			val += "daygradation:" + this.daygradation._value + "; ";
		}
		if (this.dayfont && this.dayfont._is_empty) {
			val += "dayfont:" + this.dayfont._value + "; ";
		}
		if (this.popupsize && this.popupsize._is_empty) {
			val += "popupsize:" + this.popupsize._value + "; ";
		}
		if (this.popupbackground && this.popupbackground._is_empty) {
			val += "popupbackground:" + this.popupbackground._value + "; ";
		}
		if (this.popupborder && this.popupborder._is_empty) {
			val += "popupborder:" + this.popupborder._value + "; ";
		}
		if (this.popupbordertype && this.popupbordertype._is_empty) {
			val += "popupbordertype:" + this.popupbordertype._value + "; ";
		}
		if (this.popupgradation && this.popupgradation._is_empty) {
			val += "popupgradation:" + this.popupgradation._value + "; ";
		}
		if (this.popupalign && this.popupalign._is_empty) {
			val += "popupalign:" + this.popupalign._value + "; ";
		}
		if (this.buttonsize && this.buttonsize._is_empty) {
			val += "buttonsize:" + this.buttonsize._value + "; ";
		}
		if (this.usetrailingday && this.usetrailingday._is_empty) {
			val += "usetrailingday:" + this.usetrailingday._value + "; ";
		}
		if (this.trailingdaycolor && this.trailingdaycolor._is_empty) {
			val += "trailingdaycolor:" + this.trailingdaycolor._value + "; ";
		}
		if (this.viewyearspin && this.viewyearspin._is_empty) {
			val += "viewyearspin:" + this.viewyearspin._value + "; ";
		}
		if (this.viewmonthspin && this.viewmonthspin._is_empty) {
			val += "viewmonthspin:" + this.viewmonthspin._value + "; ";
		}
		if (this.popuptype && this.popuptype._is_empty) {
			val += "popuptype:" + this.popuptype._value + "; ";
		}
		if (this.displaynulltextcolor && this.displaynulltextcolor._is_empty) {
			val += "displaynulltextcolor:" + this.displaynulltextcolor._value + "; ";
		}

		return val;
	};

	nexacro.Calendar_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.daysize = null;
		this.daycolor = null;
		this.daybackground = null;
		this.daygradation = null;
		this.dayborder = null;
		this.daybordertype = null;
		this.dayfont = null;

		this.popupsize = null;
		this.popupbackground = null;
		this.popupgradation = null;
		this.popupborder = null;
		this.popupbordertype = null;
		this.popupalign = null;

		this.buttonsize = null;
		this.usetrailingday = null;
		this.trailingdaycolor = null;
		this.viewyearspin = null;
		this.viewmonthspin = null;
		this.popuptype = null;
		this.displaynulltextcolor = null;
	};

	var _pCalendarCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Calendar_CurrentStyle);
	nexacro.Calendar_CurrentStyle.prototype = _pCalendarCurrentStyle;

	_pCalendarCurrentStyle.__custom_emptyObject = _pCalendarStyle.__custom_emptyObject;
	_pCalendarCurrentStyle.__get_custom_style_value = _pCalendarStyle.__get_custom_style_value;

	delete _pCalendarStyle;
	delete _pCalendarCurrentStyle;


	nexacro.Calendar = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.calendaredit = null;
		this.dropbutton = null;
		this.popupcalendar = null;
		this.popupwindow = null;
		this.spindownbutton = null;
		this.spinupbutton = null;

		this.text = "";
		this.displaynulltext = "";
		this.value = null;
		this.innerdataset = null;
		this.datecolumn = "";
		this.backgroundcolumn = "";
		this.bordercolumn = "";
		this.textcolorcolumn = "";
		this.type = "normal";
		this.autoselect = false;
		this.autoskip = false;
		this.dateformat = "yyyy-MM-dd ddd";
		this.editformat = "yyyy-MM-dd";
		this.useinputpanel = true;
		this.usecontextmenu = true;
		this.usesoftkeyboard = true;
		this.imemode = "none";
		this.useime = "global";
		this.viewmonthspin = false;
		this.viewyearspin = false;
		this.readonly = false;
		this.locale = "";


		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"oncloseup" : 1, 
			"ondayclick" : 1, 
			"ondropdown" : 1, 
			"oneditclick" : 1, 
			"canchange" : 1, 
			"cancharchange" : 1, 
			"onchanged" : 1, 
			"onchar" : 1, 
			"onmonthchange" : 1, 
			"onspin" : 1, 
			"ontextchange" : 1, 
			"ontextchanged" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"oncontextmenu" : 1
		};


		this._mask = "";
		this._currentformat = "dateformat";
		this._innerdataset = null;
		this._init_popupsize = null;
		this._caret_pos = {
		};
		this._caret_pos.begin = 0;
		this._caret_pos.end = 0;
		this._editformat_info = this._makeFormatInfo(this.editformat, true);
		this._dateformat_info = this._makeFormatInfo(this.dateformat);
		this._prevalue = null;
		this._postvalue = null;
		this._pretext = "";
		this._posttext = "";
		this._primitivevalue = null;
		this._is_primitivevalue = false;
		this._defaultLocale = "ko_KR";
		this._datelistL = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
		this._datelistS = ["일", "월", "화", "수", "목", "금", "토"];
		this._monthlistL = ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"];
		this._monthlistS = ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"];

		this._localeListL = 
			{
			"ko_KR" : ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"], 
			"ja_JP" : ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"], 
			"en_US" : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
		};
		this._localeListS = 
			{
			"ko_KR" : ["일", "월", "화", "수", "목", "금", "토"], 
			"ja_JP" : ["日", "月", "火", "水", "木", "金", "土"], 
			"en_US" : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
		};
		this._accessibility_role = "calendar";
		this._day_click = false;
		this._flag_update2dataset = false;
		this._bindsource = false;
		this._pretype = this.type;
		this._want_arrows = false;
		this._has_inputElement = true;
		this._edit_base_api = null;
		this._locale = "";
		this._is_dropbutton = false;
		this._is_set_value = false;
	};

	var _pCalendar = nexacro._createPrototype(nexacro.Component, nexacro.Calendar);
	nexacro.Calendar.prototype = _pCalendar;
	_pCalendar._type_name = "Calendar";

	nexacro.Calendar._defaultDaysize = nexacro._getCachedStyleObj("daysize", "26 26");
	nexacro.Calendar._defaultPopupsize = nexacro._getCachedStyleObj("popupsize", "192 192");
	nexacro.Calendar._defaultPopupalign = nexacro._getCachedStyleObj("align", "left bottom");
	nexacro.Calendar._defaultUseTrailngday = nexacro._getCachedStyleObj("usetrailingday", "false");
	nexacro.Calendar._defaultButtonsize = nexacro._getCachedStyleObj("buttonsize", -1);
	nexacro.Calendar._defaultViewyearspin = nexacro._getCachedStyleObj("viewyearspin", "false");
	nexacro.Calendar._defaultViewmonthspin = nexacro._getCachedStyleObj("viewmonthspin", "false");

	_pCalendar.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var align = this.on_find_CurrentStyle_align(pseudo);
		if (curstyle.align != align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}
		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo, this.calendaredit);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}
		var padding = this.on_find_CurrentStyle_padding(pseudo);
		if (curstyle.padding != padding) {
			curstyle.padding = padding;
			this.on_apply_style_padding(padding);
		}

		var popupalign = this.on_find_CurrentStyle_popupalign(pseudo);
		if (curstyle.popupalign != popupalign) {
			curstyle.popupalign = popupalign;
			this.on_apply_style_popupalign(popupalign);
		}
		var popupbackground = this.on_find_CurrentStyle_popupbackground(pseudo);
		if (curstyle.popupbackground != popupbackground) {
			curstyle.popupbackground = popupbackground;
			this.on_apply_style_popupbackground(popupbackground);
		}
		var popupborder = this.on_find_CurrentStyle_popupborder(pseudo);
		if (curstyle.popupborder != popupborder) {
			curstyle.popupborder = popupborder;
			this.on_apply_style_popupborder(popupborder);
		}
		var popupbordertype = this.on_find_CurrentStyle_popupbordertype(pseudo);
		if (curstyle.popupbordertype != popupbordertype) {
			curstyle.popupbordertype = popupbordertype;
			this.on_apply_style_popupbordertype(popupbordertype);
		}
		var popupgradation = this.on_find_CurrentStyle_popupgradation(pseudo);
		if (curstyle.popupgradation != popupgradation) {
			curstyle.popupgradation = popupgradation;
			this.on_apply_style_popupgradation(popupgradation);
		}
		var popupsize = this.on_find_CurrentStyle_popupsize(pseudo);
		if (curstyle.popupsize != popupsize) {
			curstyle.popupsize = popupsize;
			this.on_apply_style_popupsize(popupsize);
		}

		var usetrailingday = this.on_find_CurrentStyle_usetrailingday(pseudo);
		if (curstyle.usetrailingday != usetrailingday) {
			curstyle.usetrailingday = usetrailingday;
		}
		var trailingdaycolor = this.on_find_CurrentStyle_trailingdaycolor(pseudo);
		if (curstyle.trailingdaycolor != trailingdaycolor) {
			curstyle.trailingdaycolor = trailingdaycolor;
		}
		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		if (curstyle.buttonsize != buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(buttonsize);
		}
		var viewyearspin = this.on_find_CurrentStyle_viewyearspin(pseudo);
		if (curstyle.viewyearspin != viewyearspin) {
			curstyle.viewyearspin = viewyearspin;
		}
		var viewmonthspin = this.on_find_CurrentStyle_viewmonthspin(pseudo);
		if (curstyle.viewmonthspin != viewmonthspin) {
			curstyle.viewmonthspin = viewmonthspin;
		}
		var popuptype = this.on_find_CurrentStyle_popuptype(pseudo);
		if (curstyle.popuptype != popuptype) {
			curstyle.popuptype = popuptype;
		}
		var displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(pseudo);
		if (curstyle.displaynulltextcolor != displaynulltextcolor) {
			curstyle.displaynulltextcolor = displaynulltextcolor;
			this.on_apply_style_displaynulltextcolor(displaynulltextcolor);
		}
	};

	_pCalendar.on_apply_custom_class = function () {
		if (this.calendaredit) {
			this.calendaredit.on_apply_prop_class();
		}
		if (this.dropbutton) {
			this.dropbutton.on_apply_prop_class();
		}
		if (this.spinupbutton) {
			this.spinupbutton.on_apply_prop_class();
		}
		if (this.spindownbutton) {
			this.spindownbutton.on_apply_prop_class();
		}
	};

	_pCalendar.on_create_custom_style = function () {
		return new nexacro.Calendar_Style(this);
	};

	_pCalendar.on_create_custom_currentStyles = function () {
		return new nexacro.Calendar_CurrentStyle();
	};


	_pCalendar.on_find_CurrentStyle_daycolor = function (pseudo) {
		return this._find_pseudo_obj("daycolor", pseudo, "color");
	};

	_pCalendar.on_find_CurrentStyle_daybackground = function (pseudo) {
		return this._find_pseudo_obj("daybackground", pseudo, "background");
	};

	_pCalendar.on_find_CurrentStyle_dayborder = function (pseudo) {
		return this._find_pseudo_obj("dayborder", pseudo, "border");
	};

	_pCalendar.on_find_CurrentStyle_daybordertype = function (pseudo) {
		return this._find_pseudo_obj("daybordertype", pseudo, "bordertype");
	};

	_pCalendar.on_find_CurrentStyle_dayfont = function (pseudo) {
		return this._find_pseudo_obj("dayfont", pseudo, "font");
	};

	_pCalendar.on_find_CurrentStyle_daygradation = function (pseudo) {
		return this._find_pseudo_obj("daygradation", pseudo, "gradation");
	};

	_pCalendar.on_find_CurrentStyle_daysize = function (pseudo) {
		return this._find_pseudo_obj("daysize", pseudo);
	};

	_pCalendar.on_find_CurrentStyle_popupalign = function (pseudo) {
		return this._find_pseudo_obj("popupalign", pseudo, "align");
	};

	_pCalendar.on_find_CurrentStyle_popupbackground = function (pseudo) {
		return this._find_pseudo_obj("popupbackground", pseudo, "background");
	};

	_pCalendar.on_find_CurrentStyle_popupborder = function (pseudo) {
		return this._find_pseudo_obj("popupborder", pseudo, "border");
	};

	_pCalendar.on_find_CurrentStyle_popupbordertype = function (pseudo) {
		return this._find_pseudo_obj("popupbordertype", pseudo, "bordertype");
	};

	_pCalendar.on_find_CurrentStyle_popupgradation = function (pseudo) {
		return this._find_pseudo_obj("popupgradation", pseudo, "gradation");
	};

	_pCalendar.on_find_CurrentStyle_popupsize = function (pseudo) {
		return this._find_pseudo_obj("popupsize", pseudo) || nexacro.Calendar._defaultPopupsize;
	};

	_pCalendar.on_find_CurrentStyle_usetrailingday = function (pseudo) {
		return this._find_pseudo_obj("usetrailingday", pseudo);
	};

	_pCalendar.on_find_CurrentStyle_trailingdaycolor = function (pseudo) {
		return this._find_pseudo_obj("trailingdaycolor", pseudo, "color");
	};

	_pCalendar.on_find_CurrentStyle_buttonsize = function (pseudo) {
		return this._find_pseudo_obj("buttonsize", pseudo) || nexacro.Calendar._defaultButtonsize;
	};

	_pCalendar.on_find_CurrentStyle_viewyearspin = function (pseudo) {
		return this._find_pseudo_obj("viewyearspin", pseudo) || nexacro.Calendar._defaultViewyearspin;
	};

	_pCalendar.on_find_CurrentStyle_viewmonthspin = function (pseudo) {
		return this._find_pseudo_obj("viewmonthspin", pseudo) || nexacro.Calendar._defaultViewmonthspin;
	};

	_pCalendar.on_find_CurrentStyle_align = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("align", pseudo, "align") || this._find_pseudo_obj("align", pseudo, "align");
		}
		return this._find_pseudo_obj("align", pseudo, "align");
	};

	_pCalendar.on_find_CurrentStyle_background = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("background", pseudo, "background") || this._find_pseudo_obj("background", pseudo, "background");
		}
		return this._find_pseudo_obj("background", pseudo, "background");
	};

	_pCalendar.on_find_CurrentStyle_border = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("border", pseudo, "border") || this._find_pseudo_obj("border", pseudo, "border");
		}
		return this._find_pseudo_obj("border", pseudo, "border");
	};

	_pCalendar.on_find_CurrentStyle_bordertype = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("bordertype", pseudo, "bordertype") || this._find_pseudo_obj("bordertype", pseudo, "bordertype");
		}
		return this._find_pseudo_obj("bordertype", pseudo, "bordertype");
	};

	_pCalendar.on_find_CurrentStyle_color = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("color", pseudo, "color") || this._find_pseudo_obj("color", pseudo, "color");
		}
		return this._find_pseudo_obj("color", pseudo, "color");
	};

	_pCalendar.on_find_CurrentStyle_font = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("font", pseudo, "font") || this._find_pseudo_obj("font", pseudo, "font");
		}
		return this._find_pseudo_obj("font", pseudo, "font");
	};

	_pCalendar.on_find_CurrentStyle_gradation = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("gradation", pseudo, "gradation") || this._find_pseudo_obj("gradation", pseudo, "gradation");
		}
		return this._find_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pCalendar.on_find_CurrentStyle_accessibility = function (pseudo, childctrl) {
		if (childctrl) {
			return childctrl._find_pseudo_obj("accessibility", pseudo, "accessibility") || this._find_pseudo_obj("accessibility", pseudo, "accessibility");
		}
		return this._find_pseudo_obj("accessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pCalendar.on_find_CurrentStyle_popuptype = function (pseudo) {
		return this._find_pseudo_obj("popuptype", pseudo);
	};

	_pCalendar.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		var displaynulltextcolor = null;
		var calendaredit = this.calendaredit;
		if (calendaredit) {
			displaynulltextcolor = calendaredit._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
			if (!displaynulltextcolor) {
				displaynulltextcolor = calendaredit._find_pseudo_obj("color", pseudo, "color");
			}
		}

		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_pseudo_obj("displaynulltextcolor", pseudo, "color");
		}
		if (!displaynulltextcolor) {
			displaynulltextcolor = this._find_inherit_pseudo_obj("color", pseudo, "color");
		}

		return (displaynulltextcolor) ? displaynulltextcolor : nexacro.Component._default_color;
	};


	_pCalendar.on_update_style_color = function () {
		this.on_apply_style_color(this.currentstyle.color = this.on_find_CurrentStyle_color(this._pseudo, this.calendaredit));
	};

	_pCalendar.on_update_style_daycolor = function () {
		this.on_apply_style_daycolor(this.currentstyle.daycolor = this.on_find_CurrentStyle_daycolor(this._pseudo));
	};

	_pCalendar.on_update_style_daybackground = function () {
		this.on_apply_style_daybackground(this.currentstyle.daybackground = this.on_find_CurrentStyle_daybackground(this._pseudo));
	};

	_pCalendar.on_update_style_dayborder = function () {
		this.on_apply_style_dayborder(this.currentstyle.dayborder = this.on_find_CurrentStyle_dayborder(this._pseudo));
	};

	_pCalendar.on_update_style_daybordertype = function () {
		this.on_apply_style_daybordertype(this.currentstyle.daybordertype = this.on_find_CurrentStyle_daybordertype(this._pseudo));
	};

	_pCalendar.on_update_style_dayfont = function () {
		this.on_apply_style_dayfont(this.currentstyle.dayfont = this.on_find_CurrentStyle_dayfont(this._pseudo));
	};

	_pCalendar.on_update_style_daygradation = function () {
		this.on_apply_style_daygradation(this.currentstyle.daygradation = this.on_find_CurrentStyle_daygradation(this._pseudo));
	};

	_pCalendar.on_update_style_daysize = function () {
		this.on_apply_style_daysize(this.currentstyle.daysize = this.on_find_CurrentStyle_daysize(this._pseudo));
	};

	_pCalendar.on_update_style_popupalign = function () {
		this.on_apply_style_popupalign(this.currentstyle.popupalign = this.on_find_CurrentStyle_popupalign(this._pseudo));
	};

	_pCalendar.on_update_style_popupbackground = function () {
		this.on_apply_style_popupbackground(this.currentstyle.popupbackground = this.on_find_CurrentStyle_popupbackground(this._pseudo));
	};

	_pCalendar.on_update_style_popupborder = function () {
		this.on_apply_style_popupborder(this.currentstyle.popupborder = this.on_find_CurrentStyle_popupborder(this._pseudo));
	};

	_pCalendar.on_update_style_popupbordertype = function () {
		this.on_apply_style_popupbordertype(this.currentstyle.popupbordertype = this.on_find_CurrentStyle_popupbordertype(this._pseudo));
	};

	_pCalendar.on_update_style_popupgradation = function () {
		this.on_apply_style_popupgradation(this.currentstyle.popupgradation = this.on_find_CurrentStyle_popupgradation(this._pseudo));
	};

	_pCalendar.on_update_style_popupsize = function () {
		if (!this._init_popupsize) {
			this._init_popupsize = this.currentstyle.popupsize;
		}

		this.on_apply_style_popupsize(this.currentstyle.popupsize = this.on_find_CurrentStyle_popupsize(this._pseudo));
	};

	_pCalendar.on_update_style_usetrailingday = function () {
		this.on_apply_style_usetrailingday(this.currentstyle.usetrailingday = this.on_find_CurrentStyle_usetrailingday(this._pseudo));
	};

	_pCalendar.on_update_style_trailingdaycolor = function () {
		this.on_apply_style_trailingdaycolor(this.currentstyle.trailingdaycolor = this.on_find_CurrentStyle_trailingdaycolor(this._pseudo));
	};

	_pCalendar.on_update_style_buttonsize = function () {
		this.on_apply_style_buttonsize(this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo));
	};

	_pCalendar.on_update_style_viewyearspin = function () {
		this.on_apply_style_viewyearspin(this.currentstyle.viewyearspin = this.on_find_CurrentStyle_viewyearspin(this._pseudo));
	};

	_pCalendar.on_update_style_viewmonthspin = function () {
		this.on_apply_style_viewmonthspin(this.currentstyle.viewmonthspin = this.on_find_CurrentStyle_viewmonthspin(this._pseudo));
	};

	_pCalendar.on_update_style_popuptype = function () {
		this.currentstyle.popuptype = this.on_find_CurrentStyle_popuptype(this._pseudo);

		if (this._getPopupType() == "system" && this.type != "monthonly") {
			if ((nexacro._isMobile && nexacro._isMobile()) || (nexacro._isHybrid && nexacro._isHybrid()) || (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser == "Runtime")) {
				this.type = "system";
				this.on_apply_type();
				return;
			}
		}
	};

	_pCalendar.on_update_style_displaynulltextcolor = function () {
		this.on_apply_style_displaynulltextcolor(this.currentstyle.displaynulltextcolor = this.on_find_CurrentStyle_displaynulltextcolor(this._pseudo));
	};


	_pCalendar.on_apply_style_align = function (v) {
		var edit = this.calendaredit;
		if (edit) {
			edit.style.set_align(v);
		}
	};

	_pCalendar.on_apply_style_popupalign = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_align(v);
		}
	};

	_pCalendar.on_apply_style_color = function (v) {
		var edit = this.calendaredit;
		if (edit) {
			edit.on_apply_style_color(edit.currentstyle.color = v);
		}
	};

	_pCalendar.on_apply_style_popupcolor = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_color(v);
		}
	};

	_pCalendar.on_apply_style_daycolor = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_daycolor(v);
		}
	};

	_pCalendar.on_apply_style_font = function (v) {
		var edit = this.calendaredit;
		if (edit) {
			edit.on_apply_style_font(edit.currentstyle.font = v);
		}
	};

	_pCalendar.on_apply_style_popupfont = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_font(v);
		}
	};

	_pCalendar.on_apply_style_dayfont = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_dayfont(v);
		}
	};

	_pCalendar.on_apply_style_popupbackground = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_background(v);
		}
	};

	_pCalendar.on_apply_style_daybackground = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_daybackground(v);
		}
	};

	_pCalendar.on_apply_style_rtlimagemirroring = function (v) {
		return;
	};
	_pCalendar.on_apply_style_popupborder = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_border(v);
		}
	};

	_pCalendar.on_apply_style_dayborder = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_dayborder(v);
		}
	};

	_pCalendar.on_apply_style_popupbordertype = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_bordertype(v);
		}
	};

	_pCalendar.on_apply_style_daybordertype = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_daybordertype(v);
		}
	};

	_pCalendar.on_apply_style_popupgradation = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_gradation(v);
		}
	};

	_pCalendar.on_apply_style_daygradation = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_daygradation(v);
		}
	};

	_pCalendar.on_apply_style_popupsize = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			if (v) {
				var arr = v.value.split(/\s+/);
				var w, h;
				if (arr.length == 2) {
					w = parseInt(arr[0], 10);
					h = parseInt(arr[1], 10);
				}
				else {
					w = parseInt(arr[0], 10);
					h = parseInt(arr[0], 10);
				}

				var pop_control_elem = popupcalendar._control_element;
				if (this.type == "normal" && pop_control_elem) {
					pop_control_elem.setElementSize(w, h);
					popupcalendar._updateClientSize(pop_control_elem);
				}
			}
		}
	};

	_pCalendar.on_apply_style_daysize = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_daysize(v);
		}
	};

	_pCalendar.on_apply_style_usetrailingday = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_usetrailingday(v);
		}
	};

	_pCalendar.on_apply_style_trailingdaycolor = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_trailingdaycolor(v);
		}
	};

	_pCalendar.on_apply_style_buttonsize = function (v) {
		this._resizeCalendar();
	};

	_pCalendar.on_apply_style_viewyearspin = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_viewyearspin(v);
		}
	};

	_pCalendar.on_apply_style_viewmonthspin = function (v) {
		var popupcalendar = this.popupcalendar;
		if (popupcalendar) {
			popupcalendar.on_apply_style_viewmonthspin(v);
		}
	};

	_pCalendar.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		if (this.calendaredit) {
			this.calendaredit.on_apply_style_accessibility(accessibility);
		}
	};

	_pCalendar.on_apply_style_displaynulltextcolor = function (v) {
		if (this.calendaredit) {
			this.calendaredit.on_apply_style_displaynulltextcolor(this.calendaredit.currentstyle.displaynulltextcolor = v);
		}
	};

	_pCalendar.on_apply_style_letterspace = function (letterspace) {
		if (this.calendaredit) {
			this.calendaredit.on_apply_style_letterspace(this.calendaredit.currentstyle.letterspace = letterspace);
		}
	};

	_pCalendar.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this._getPopupType() == "system" && this.type != "monthonly") {
				if ((nexacro._isMobile && nexacro._isMobile()) || (nexacro._isHybrid && nexacro._isHybrid()) || (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser == "Runtime")) {
					this.type = "system";
				}
			}

			switch (this.type) {
				case "normal":
					this._createCalendaredit();
					this._createDropbutton();
					break;
				case "spin":
					this._createCalendaredit();
					this._createSpinbutton();
					break;
				case "monthonly":
					this._createPopupcalendar();
					break;
				case "system":
					this._createSystemCalendar();
					break;
			}
		}
	};

	_pCalendar.on_created_contents = function () {
		this.on_apply_autoskip();
		this.on_apply_autoselect();
		this.on_apply_locale();
		this.on_apply_displaynulltext();
		this.on_apply_usecontextmenu();
		this.on_apply_style_displaynulltextcolor(this.currentstyle.displaynulltextcolor);

		if (this.expr) {
			this.on_apply_expr();
		}

		if (!this.value && this._primitivevalue) {
			this._setValue(this._primitivevalue);
		}

		this.on_apply_editformat();
		this.on_apply_dateformat();
		this._currentformat = "dateformat";

		if (this.cssclass) {
			this.on_apply_pseudo();
			this.on_apply_custom_pseudo();
			this.on_apply_prop_class();
		}

		switch (this.type) {
			case "spin":
				this._setEventHandlerToCalendarEdit();
				this._setEventHandlerToSpinButton();

				this.calendaredit.on_created();
				this.spinupbutton.on_created();
				this.spindownbutton.on_created();
				this.calendaredit.style.set_align(this.currentstyle.align);
				break;
			case "monthonly":
				this._setEventHandlerToPopupCalendar();
				this.popupcalendar.on_created();
				if (nexacro._enableaccessibility) {
					this._want_arrows = true;
				}
				this.on_apply_style_popupborder(this.currentstyle.popupborder);

				break;
			case "system":
				if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
					var control_elem = this.getElement();
					if (control_elem) {
						control_elem.setElementAccessibilityHidden(false);
					}
				}
				this._setEventHandlerToCalendarEdit();
				this.calendaredit.on_created();
				this._setAccessibilityActiveDescendant(this.calendaredit);
				this.calendaredit.style.set_align(this.currentstyle.align);
				break;
			case "normal":
			default:
				this._setEventHandlerToCalendarEdit();
				this._setEventHandlerToDropButton();

				this.calendaredit.on_created();
				this.dropbutton.on_created();
				this._setAccessibilityActiveDescendant(this.calendaredit);
				this.calendaredit.style.set_align(this.currentstyle.align);
				this.on_apply_style_popupborder(this.currentstyle.popupborder);
				this.dropbutton._control_element.setElementAccessibilityHidden(true);
		}

		if (!nexacro._isDesktop() && this.calendaredit && this.calendaredit._input_element) {
			if (this.type == "system") {
				this.calendaredit._input_element.setElementInputType("date", true, this);
			}
			else {
				this.calendaredit._input_element.setElementInputType("tel");
				this.calendaredit._input_element.setElementInputTypeKeypad("tel");
			}
		}

		this.on_apply_innerdataset();
		this.on_apply_style_letterspace(this.currentstyle.letterspace);
		this.on_apply_prop_rtldirection();

		if (nexacro._enableaccessibility && this.calendaredit && this.calendaredit._input_element) {
			var input_elem = this.calendaredit._input_element;
			input_elem._setElementInputRole();
			input_elem._setElementInputLabel();
		}
	};

	_pCalendar.on_destroy_contents = function () {
		this._destroyControl();
		this._destroyInnerdataset();

		this._editformat_info = null;
		this._dateformat_info = null;
		this._currentformat = "";
		this._mask = "";
		this._caret_pos = null;
		this._prevalue = null;
		this._postvalue = null;
		this._datelistL = null;
		this._datelistS = null;
		this._localeListL = null;
		this._localeListS = null;
	};

	_pCalendar.on_change_containerRect = function (width, height) {
		this._resizeCalendar();
	};

	_pCalendar.on_getBindableProperties = function () {
		return "value";
	};

	_pCalendar.on_apply_custom_setfocus = function (evt_name) {
		var edit = this.calendaredit;
		var popupcalendar = this.popupcalendar;
		if (edit) {
			var edit_api = edit._edit_base_api;
			if (edit_api && !this._re_focus) {
				this._currentformat = "editformat";

				var val = this.value;
				var date = "";

				this._setMask(this._currentformat, false, this.value);

				if (nexacro._isNull(val)) {
					date = val;
				}
				else {
					date = this._makeMaskValue(val.toString());
				}

				edit_api._setValue(date);

				if (this._is_set_value) {
					edit_api._updateCaretPos();
					if (nexacro._isDesktop() && nexacro.Browser == "Runtime" && this.type == "spin") {
						this.setCaretPos(edit_api._input_begin_pos);
					}
				}
				else {
					var caretPos = edit._caret_pos;
					if (caretPos) {
						if (nexacro.Browser == "Runtime" && this._caret_pos) {
							caretPos.begin = this._caret_pos.begin;
							caretPos.end = this._caret_pos.end;
						}

						if (caretPos.begin == caretPos.end) {
							if (nexacro._isNull(this.value) && caretPos.begin == -1) {
								caretPos.begin = 0;
							}

							edit_api._set_input_begin_pos(caretPos.begin);

							if (nexacro.BrowserType == "Edge" && evt_name != "lbuttondown") {
								edit.setSelect(caretPos.begin, caretPos.begin);
							}
						}
						else {
							if (edit._old_selection) {
								edit._old_selection[0] = caretPos.begin;
								edit._old_selection[1] = caretPos.end;
							}
						}
					}
				}
			}

			if (nexacro.Browser == "IE" && edit_api && this.type == "spin") {
				edit.setCaretPos(edit_api._input_begin_pos);
			}

			if (nexacro._enableaccessibility) {
				if (!(nexacro.isTouchInteraction && nexacro.SupportTouch) && !this._is_dropbutton) {
					edit.on_apply_custom_setfocus(evt_name);
				}
				else {
					this._is_dropbutton = false;
					edit_api._changeFocusText(edit._input_element);
					nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
				}
			}
			else {
				var mobile = (nexacro.isTouchInteraction && nexacro.SupportTouch) || (nexacro._isMobile && nexacro._isMobile());
				if (evt_name == "focus" || evt_name == "tabkey" || evt_name == "shifttabkey" || evt_name == "lbuttondown" || (!mobile && !evt_name)) {
					if (!mobile) {
						edit.on_apply_custom_setfocus(evt_name);
					}
					else {
						this._is_dropbutton = false;
						edit_api._changeFocusText(edit._input_element);
						nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
					}
				}
			}

			edit._stat_change("focus", "focused");
		}
		else if (popupcalendar) {
			popupcalendar.on_apply_custom_setfocus(evt_name);
		}
		this._is_set_value = false;
	};

	_pCalendar.on_apply_prop_enable = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.calendaredit) {
				this.calendaredit._setEnable(v);
			}
			if (this.dropbutton) {
				this.dropbutton._setEnable(v);
			}
			if (this.spinupbutton) {
				this.spinupbutton._setEnable(v);
			}
			if (this.spindownbutton) {
				this.spindownbutton._setEnable(v);
			}
			if (this.popupcalendar) {
				this.popupcalendar._setEnable(v);
			}
		}
	};

	_pCalendar.on_init_bindSource = function (columnid, propid, ds) {
		if (propid == "value") {
			this._bindsource = false;
			this._setValue(undefined);
			return true;
		}
	};

	_pCalendar.on_change_bindSource = function (propid, ds, row, col, index) {
		if (propid == "value") {
			this._bindsource = true;
			this._currentformat = "editformat";

			var col_val = ds.getColumn(row, col), v;
			if (col_val) {
				if (col_val instanceof nexacro.Date) {
					v = col_val;
				}
				else {
					if (this.editformat != this._editformat_info.format) {
						this._editformat_info = this._makeFormatInfo(this.editformat);
					}

					var format_temp = this.editformat;
					var currentformat = this._currentformat;

					this._currentformat = "editformat";
					var _info = this._editformat_info;
					if (_info._year || _info._mon || _info._day) {
						if (_info._hour || _info._min || _info._sec || _info._millisec) {
							this.set_editformat("yyyyMMddHHmmsssss");
						}
						else {
							this.set_editformat("yyyyMMdd");
						}
					}
					else {
						this.set_editformat("HHmmsssss");
					}

					v = this._makeDateObj(col_val);

					this._currentformat = currentformat;
					this.set_editformat(format_temp);
				}

				this.set_enable(this.enable);
			}
			else if (!nexacro._isNull(col_val)) {
				v = col_val;
			}

			if (this._is_primitivevalue && !this._is_created) {
				this._primitivevalue = v;
			}
			this._currentformat = "dateformat";
			this._setValue(v);
			this._is_set_value = true;
			return true;
		}

		return false;
	};

	_pCalendar.on_get_style_accessibility_label = function () {
		if (this.type == "monthonly") {
			return this.text ? this.text : this._getCurrentDate();
		}
		else {
			return "";
		}
	};

	_pCalendar._on_getAccessibilityAdditionalLabel = function () {
		var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
		if (accessibility) {
			var edit = this.calendaredit;
			if (edit) {
				return edit._edit_base_api._on_getAccessibilityAdditionalLabel();
			}
		}
		return "";
	};

	_pCalendar.on_update_position = function (resize_flag, move_flag) {
		nexacro.Component.prototype.on_update_position.call(this, resize_flag, move_flag);
		if (this._isPopupVisible()) {
			if (resize_flag || move_flag) {
				this._closePopup();
				return;
			}

			this._update_popupwindow_position();

			if (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser == "Runtime") {
				var pThis = this;

				var _observer = this._popupwindow_position_observer;
				if (_observer) {
					if (_observer._interval_timer) {
						_observer._interval_timer.stop();
						delete _observer._interval_timer;
						_observer._interval_timer = null;
					}
					this._popupwindow_position_observer = null;
				}

				var control_elem = this._control_element;
				_observer = this._popupwindow_position_observer = {
				};
				_observer._observed_count = 0;
				_observer._elem_pos = nexacro._getElementPositionInFrame(control_elem);
				_observer._interval_timer = new nexacro.CallbackTimer(this, function () {
					if (++_observer._observed_count >= 50) {
						_observer._interval_timer.destroy();
						delete _observer._interval_timer;
						_observer._interval_timer = null;
						return;
					}

					var cur_elem_pos = nexacro._getElementPositionInFrame(control_elem);
					if (_observer._elem_pos.x != cur_elem_pos.x || _observer._elem_pos.y != cur_elem_pos.y) {
						pThis._update_popupwindow_position();
						_observer._observed_count = 50;
					}
				}, 100);
				_observer._interval_timer.start();
			}
		}
	};

	_pCalendar._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var _want_arrows = this._want_arrows;
		this._is_first_focus = false;
		return {
			want_tab : false, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : _want_arrows
		};
	};

	_pCalendar._getAccessibilityReadLabel = function (bwholeread) {
		var _readlabel = nexacro.Component.prototype._getAccessibilityReadLabel.call(this);
		if (bwholeread && this.calendaredit._input_element && this._status != "focus") {
			if (!this.calendaredit._input_element._wantAccessibilityAdditionalLabel
				 || !this.calendaredit._input_element._wantAccessibilityAdditionalLabel()) {
				_readlabel = this.text + " " + _readlabel;
			}
		}
		return _readlabel;
	};

	_pCalendar._setAccessibilityStatFocus = function (evt_name) {
		var calendaredit = this.calendaredit;
		if (calendaredit && calendaredit._input_element) {
			var role = this._getAccessibilityRole(this.on_find_CurrentStyle_accessibility(this._pseudo));
			if (this._getDescLevel() == "none") {
				role = "none";
			}
			calendaredit._input_element.setElementAccessibilityRole(role);
		}
		return nexacro.Component.prototype._setAccessibilityStatFocus.call(this, evt_name);
	};

	_pCalendar._getAccessibilityRole = function (accessibility) {
		var role = nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
		return role;
	};

	_pCalendar.set_text = nexacro._emptyFn;

	_pCalendar.set_autoselect = function (v) {
		if (v != this.autoselect) {
			this.autoselect = v;
			this.on_apply_autoselect();
		}
	};

	_pCalendar.on_apply_autoselect = function () {
		var edit = this.calendaredit;
		if (edit) {
			edit.set_autoselect(this.autoselect);
		}
	};

	_pCalendar.set_autoskip = function (v) {
		if (v != this.autoskip) {
			this.autoskip = v;
			this.on_apply_autoskip();
		}
	};

	_pCalendar.on_apply_autoskip = function () {
		var edit = this.calendaredit;
		if (edit) {
			edit.set_autoskip(this.autoskip);
		}
	};

	_pCalendar.set_displaynulltext = function (v) {
		if (v === undefined) {
			return;
		}

		v = nexacro._toString(v);
		v = v.replace(/&quot;/g, "\"");
		if (v != this.displaynulltext) {
			this.displaynulltext = v;
			this.on_apply_displaynulltext();
		}
	};

	_pCalendar.on_apply_displaynulltext = function () {
		if (this.calendaredit) {
			this.calendaredit.set_displaynulltext(this.displaynulltext);
		}
	};

	_pCalendar.on_apply_expr = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var v = this.expr;
			var expr = v.substring(0, 4);
			var parser, conv_expr, exprfn;
			var use_jsdate_fn = false;

			if (expr == "expr") {
				expr = v.substr(4).trim();

				if (/^expr(\s*):/.test(v)) {
					expr = expr.substr(1);
				}
				else {
					expr = expr.substring(1, expr.length - 1);
				}
			}
			else {
				expr = v;
			}

			parser = new nexacro.ExprParser();
			conv_expr = parser.makeExpr(this, expr);

			if (conv_expr.substring(0, 4) == "Date") {
				conv_expr = "new " + conv_expr;
				use_jsdate_fn = true;
			}

			parser = null;
			exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);
			if (exprfn) {
				var val = exprfn.call(null, this);
				if (use_jsdate_fn) {
					this._setValue_JSDate(val);
				}
				else {
					this._setValue(val);
				}
			}
		}
	};

	_pCalendar.set_type = function (v) {
		if (this._getPopupType() == "system" && v != "monthonly") {
			if ((nexacro._isMobile && nexacro._isMobile()) || (nexacro._isHybrid && nexacro._isHybrid()) || (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser == "Runtime")) {
				this.type = "system";
				this.on_apply_type();
				return;
			}
		}

		if (v != this.type) {
			this._pretype = this.type;
			if (v === "spin" || v === "monthonly") {
				this.type = v;
			}
			else {
				this.type = "normal";
			}
			this.on_apply_type();
		}
	};

	_pCalendar.on_apply_type = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var is_change = true;
			var client_width = this._client_width;
			var normal_height = Math.round(client_width / 5);
			if (this._pretype != "monthonly" || this.type == "monthonly") {
				is_change = false;
			}

			this._destroyControl();

			switch (this.type) {
				case "normal":
					this._createNormaltypeControl();
					break;
				case "spin":
					this._createSpintypeControl();
					break;
				case "monthonly":
					var popupsize = this._getPopupSizeArr();
					this._createMonthlytypeControl();
					this.resize(popupsize.width, popupsize.height);
					break;
				case "system":
					if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
						control_elem.setElementAccessibilityHidden(false);
					}
					this._createSystemtypeControl();
			}

			if (is_change) {
				this.resize(client_width, normal_height);
			}

			this._resizeCalendar();

			if (nexacro._enableaccessibility && this.calendaredit && this.calendaredit._input_element) {
				var input_elem = this.calendaredit._input_element;
				input_elem._setElementInputRole();
				input_elem._setElementInputLabel();
			}
		}
	};

	_pCalendar.set_value = function (v) {
		if (v && ((typeof v) == "object") && v._type_name != "Date") {
			return;
		}

		if ((v + "") == (this.value + "")) {
			return;
		}

		this._setUserValue(v);
		this._is_set_value = true;
	};

	_pCalendar.on_apply_value = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var v = this.value;

			if (this.calendaredit) {
				if (v == "" && this._currentformat == "dateformat") {
					var status = true;
				}
				else {
					var status = false;
				}

				this._setMask(this._currentformat, status, this.value);

				if (v == null) {
					this.calendaredit._setValue(undefined);
				}
				else {
					var date = (this._isEmptyStr(v)) ? "" : this._makeMaskValue(v.toString());
					var edit_api = this.calendaredit._edit_base_api;
					this.calendaredit.value = edit_api._getValue();
					this.calendaredit.set_value(date);
				}
			}

			if (this.popupcalendar) {
				var date = this._getPickerValue(v);

				this.popupcalendar.set_value(date);
			}
		}

		this.on_apply_text();
	};

	_pCalendar.on_apply_fake_value = function (v) {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.calendaredit) {
				var value = v;
				var date = this._makeMaskValue(value ? value.toString() : "");
				this._setMask(this._currentformat, true, value);
				this.calendaredit.set_value(date, true);
			}

			if (this.popupcalendar) {
				var value = this._makeDateObj(v);
				var date = this._getPickerValue(value);

				this.popupcalendar.set_value(date);
			}
		}
	};

	_pCalendar.on_apply_text = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var value = this.value;
			if (!value) {
				this.text = "";
			}
			else {
				this.displaytext = this.text = this._makeCalendarText(value);
			}

			this._refreshAccessibilityValue();
		}
	};

	_pCalendar.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
		}
	};

	_pCalendar._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pCalendar.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pCalendar.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
		return this.innerdataset;
	};

	_pCalendar.on_apply_innerdataset = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var innerdataset = this._innerdataset;
			if (innerdataset && this.popupcalendar) {
				innerdataset._setEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
				innerdataset._setEventHandler("onrowsetchanged", this._callback_rowsetchanged, this);

				this.popupcalendar.on_apply_innerdataset(this._innerdataset);
			}
		}
	};

	_pCalendar.set_backgroundcolumn = function (v) {
		if (v != this.backgroundcolumn) {
			this.backgroundcolumn = v;
			this.on_apply_backgroundcolumn();
		}
	};

	_pCalendar.on_apply_backgroundcolumn = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.popupcalendar) {
				this.popupcalendar.on_apply_backgroundcolumn(this.backgroundcolumn);
			}
		}
	};

	_pCalendar.set_bordercolumn = function (v) {
		if (v != this.bordercolumn) {
			this.bordercolumn = v;
			this.on_apply_bordercolumn();
		}
	};

	_pCalendar.on_apply_bordercolumn = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.popupcalendar) {
				this.popupcalendar.on_apply_bordercolumn(this.bordercolumn);
			}
		}
	};

	_pCalendar.set_datecolumn = function (v) {
		if (v != this.datecolumn) {
			this.datecolumn = v;
			this.on_apply_datecolumn();
		}
	};

	_pCalendar.on_apply_datecolumn = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.popupcalendar) {
				this.popupcalendar.on_apply_datecolumn(this.datecolumn);
			}
		}
	};

	_pCalendar.set_textcolorcolumn = function (v) {
		if (v != this.textcolorcolumn) {
			this.textcolorcolumn = v;
			this.on_apply_textcolorcolumn();
		}
	};

	_pCalendar.on_apply_textcolorcolumn = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.popupcalendar) {
				this.popupcalendar.on_apply_textcolorcolumn(this.textcolorcolumn);
			}
		}
	};

	_pCalendar.set_dateformat = function (v) {
		if (v != this.dateformat) {
			this.dateformat = v;
			this.on_apply_dateformat();
		}
	};

	_pCalendar.on_apply_dateformat = function () {
		if (!this._is_created_contents && !this._is_subcontrol) {
			return;
		}

		if (this.type == "system") {
			this._dateformat_info = this._makeFormatInfo("yyyy-MM-dd");
		}
		else {
			this._dateformat_info = this._makeFormatInfo(this.dateformat ? this.dateformat : "");
		}

		var control_elem = this.getElement();
		if (control_elem) {
			this.on_apply_value();
		}
	};

	_pCalendar.set_editformat = function (v) {
		if (v != this.editformat) {
			this.editformat = v;
			this.on_apply_editformat();
		}
	};

	_pCalendar.on_apply_editformat = function () {
		if (!this._is_created_contents && !this._is_subcontrol) {
			return;
		}

		if (this.type == "system") {
			this._editformat_info = this._makeFormatInfo("yyyy-MM-dd");
		}
		else {
			this._editformat_info = this._makeFormatInfo(this.editformat ? this.editformat : "", true);
		}
	};

	_pCalendar.set_usesoftkeyboard = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.usesoftkeyboard) {
			this.usesoftkeyboard = v;
			this.on_apply_usesoftkeyboard();
		}
	};

	_pCalendar.on_apply_usesoftkeyboard = function () {
		var input_elem = this.calendaredit ? this.calendaredit._input_element : null;
		if (input_elem) {
			input_elem.setElementUseSoftKeyboard(this.usesoftkeyboard);
		}
	};

	_pCalendar.set_imemode = function (v) {
		if (v != this.imemode) {
			this.imemode = v;
		}
	};

	_pCalendar.set_locale = function (v) {
		if (v != this.locale) {
			this.locale = v;
			if (this._locale != v) {
				this._locale = v;
				this.on_apply_locale();

				this.on_apply_dateformat();
				this.on_apply_editformat();
			}
		}
	};

	_pCalendar.on_apply_locale = function () {
		var edit = this.calendaredit;
		var locale = this._getLocale();
		if (edit) {
			edit._setLocale(locale);
		}

		var datepicker = this.popupcalendar;
		if (datepicker) {
			datepicker._setLocale(locale);
		}

		var control_elem = this.getElement();
		if (control_elem) {
			var popup = this.popupcalendar;
			var locale_info = nexacro.Locale.getLocaleInfo(locale);

			this._datelistL = locale_info.weekday_names_long;
			this._datelistS = locale_info.weekday_names_short;

			this._monthlistL = locale_info.month_names_long;
			this._monthlistS = locale_info.month_names_short;
			this._locale_direction = locale_info.direction;

			var localeStr = this._datelistS.join(" ");

			this.on_apply_value();

			if (popup) {
				var weekformat = popup.on_find_CurrentStyle_weekformat(this._pseudo);
				if (weekformat) {
					popup.on_apply_style_weekformat(weekformat);
				}
				else {
					popup.on_apply_style_weekformat(localeStr);
				}
			}
		}
	};

	_pCalendar.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}

		v = nexacro._toBoolean(v);
		if (this.visible != v) {
			nexacro.Component.prototype.set_visible.call(this, v);
			if (!v && this._is_created) {
				this.closeDropdown();
			}
		}
	};

	_pCalendar.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly();
		}
	};

	_pCalendar.on_apply_readonly = function () {
		var v = this.readonly;
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		if (this.calendaredit) {
			this.calendaredit.set_readonly(v);
		}
		if (this.popupcalendar) {
			this.popupcalendar.set_readonly(v);
		}
	};

	_pCalendar.set_usecontextmenu = function (v) {
		v = nexacro._toBoolean(v);

		if (v != this.usecontextmenu) {
			this.usecontextmenu = v;
			this.on_apply_usecontextmenu();
		}
	};

	_pCalendar.on_apply_usecontextmenu = function () {
		var calendaredit = this.calendaredit;
		if (calendaredit) {
			calendaredit.set_usecontextmenu(this.usecontextmenu);
		}
	};

	_pCalendar.set_useime = function (v) {
		if (v != this.useime) {
			this.useime = v;
		}
	};

	_pCalendar.set_useinputpanel = function (v) {
		if (v != this.useinputpanel) {
			this.useinputpanel = v;
		}
	};

	_pCalendar.closeDropdown = function () {
		if (this.type == "normal") {
			this._closePopup();
		}
	};

	_pCalendar.dropdown = function () {
		if (this.enable != true || this.readonly == true || this.visible == false || this.type != "normal") {
			return false;
		}

		var pre_value = this.value;

		var calendaredit = this.calendaredit;
		var post_value = this._getDateObjFromDisplayText(calendaredit.text);

		var str_preval = pre_value ? pre_value.toString() : pre_value;
		var str_postval = post_value ? post_value.toString() : post_value;

		this._currentformat = "editformat";
		if (str_preval != str_postval) {
			if (!((str_preval === undefined || str_preval === null) && str_postval === "")) {
				this._setPreValueAndText(pre_value);
				this._setPostValueAndText(post_value);

				var ret = this.on_fire_canchange(this, this._pretext, this._prevalue, this._posttext, this._postvalue);
				if (ret || ret === undefined) {
					var val_ret = this._setValue(this._postvalue);
					if (val_ret === false) {
						this._setValue(this._prevalue);
					}
					else {
						this._fireOnchangedEvent(pre_value, this.value);
					}
				}
				else {
					this._setValue(this._prevalue);
					this.setCaretPos(0);
				}
			}
		}

		if (this.isDropdown()) {
			return false;
		}

		var ret = this.on_fire_ondropdown(this);

		if (this._getPopupType() == "none" || this.type == "system") {
			return;
		}

		if (ret || ret === undefined) {
			this._setFocus(false);

			this._showPopup();
			this._resizeDatePicker(true);
			this._currentformat = "editformat";

			var date = this._makeMaskValue(this.value ? this.value.toString() : "");

			var calendaredit = this.calendaredit;
			if (calendaredit) {
				this._setMask(this._currentformat, true, this.value);
				calendaredit.set_value(date);

				var input_elem = this.calendaredit._input_element;
				if (input_elem) {
					if (this.autoselect) {
						input_elem.setElementSetSelect(0, this.text.length);
					}
					else {
						this._setDefaultCaret();
					}
				}
			}

			var popupcalendar = this.popupcalendar;
			if (popupcalendar) {
				this.on_apply_style_popupborder(this.currentstyle.popupborder);

				date = this._getPickerValue(this.value);

				popupcalendar.set_value(date);
				popupcalendar._hide_spindate();
			}

			if (nexacro._enableaccessibility) {
				this._want_arrows = true;
			}
		}
	};

	_pCalendar.isDropdown = function () {
		return this._isPopupVisible();
	};

	_pCalendar.getCaretPos = function () {
		var ret = -1;
		if (this.calendaredit && this.readonly == false) {
			ret = this.calendaredit.getCaretPos();
		}
		return ret;
	};

	_pCalendar.getDay = function () {
		var ret = 1;
		if (this.value) {
			ret = this.value.getDate();
		}
		return ret;
	};

	_pCalendar.getDayOfWeek = function () {
		var ret = 4;
		if (this.value) {
			ret = this.value.getDay();
		}
		return ret;
	};

	_pCalendar.getMonth = function () {
		var ret = 1;
		if (this.value) {
			ret = this.value.getMonth() + 1;
		}
		return ret;
	};

	_pCalendar.getSelect = function () {
		var ret = [0, 0];
		if (this.calendaredit) {
			ret = this.calendaredit.getSelect();
		}
		return ret;
	};

	_pCalendar.getSelectedText = function () {
		var ret = "";
		if (this.calendaredit) {
			ret = this.calendaredit.getSelectedText();
		}
		return ret;
	};

	_pCalendar.getYear = function () {
		var ret = 1970;
		if (this.value) {
			ret = this.value.getFullYear();
		}
		return ret;
	};

	_pCalendar.isAboveSelected = function () {
	};

	_pCalendar.setCaretPos = function (v) {
		this._caret_pos.begin = v;
		this._caret_pos.end = v;

		if (this.calendaredit) {
			return this.calendaredit.setCaretPos(v);
		}
	};

	_pCalendar.setSelect = function (begin, end) {
		var ret = false;

		this._caret_pos.begin = begin;
		this._caret_pos.end = end;

		if (this.calendaredit) {
			ret = this.calendaredit.setSelect(begin, end);
		}
		return ret;
	};

	_pCalendar.updateToDataset = function () {
		this._bindsource = false;
		if (this.popupcalendar && this._isPopupVisible()) {
			var _value = this.popupcalendar.value;
		}
		else if (this.calendaredit) {
			var _value = this.calendaredit.value;
		}
		else {
			var _value = this.value;
		}

		if (!this._bind_event) {
			return false;
		}

		var ret = this.applyto_bindSource("value", _value);
		if (this._flag_update2dataset) {
			return true;
		}

		return ret;
	};

	_pCalendar._getDragData = function () {
		return this.calendaredit ? this.calendaredit._getDragData() : "";
	};

	_pCalendar.on_notify_ondayclick = function (obj, e) {
		if (this.readonly) {
			return;
		}

		var edit = this.calendaredit;

		if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
			this.on_apply_custom_setfocus();
		}

		var _date = this._getDateObj(e.date);
		this.on_fire_ondayclick(this, _date);

		if (this._dateformat_info == null || this._editformat_info == null) {
			return;
		}

		this._currentformat = "editformat";

		var pre_value = this.value;
		var post_value = _date;

		var timecheck = false;
		if (this._editformat_info) {
			if (this._editformat_info._hour || this._editformat_info._min || this._editformat_info._sec || this._editformat_info._millisec) {
				timecheck = true;
			}
		}

		if (timecheck) {
			post_value._timecheck = true;
			if (pre_value) {
				post_value.setHours(pre_value.getHours(), pre_value.getMinutes(), pre_value.getSeconds(), pre_value.getMilliseconds());
			}
			else {
				post_value.setHours(0, 0, 0, 0);
			}
		}

		var str_preval = pre_value ? pre_value.toString() : pre_value;
		var str_postval = post_value ? post_value.toString() : post_value;

		if (str_preval != str_postval) {
			this._day_click = true;

			this._setPreValueAndText(pre_value);
			this._setPostValueAndText(post_value);

			var ret = this.on_fire_canchange(this, this._pretext, this._prevalue, this._posttext, this._postvalue);
			if (ret || ret === undefined) {
				var val_ret = this._setValue(this._postvalue);
				if (val_ret === false) {
					if (this.value != this._prevalue) {
						this._setValue(this._prevalue);
					}

					this.closeDropdown();
				}
				else {
					this.closeDropdown();
					this._fireOnchangedEvent(pre_value, post_value);
				}

				this._setDefaultCaret();
			}
			else {
				this._setValue(this._prevalue);
			}
		}
		else {
			this.closeDropdown();
			this._setDefaultCaret();
		}

		if (this.autoskip && edit) {
			edit.on_apply_autoskip();
		}

		this._day_click = false;
		this._currentformat = "editformat";

		return ret;
	};

	_pCalendar.on_notify_mobile_ondropdown = function (obj, e) {
		if (this.readonly == true || this.enable == false) {
			return false;
		}

		if (this._isPopupVisible()) {
			this.closeDropdown();
		}
		else {
			this.dropdown();
		}

		return false;
	};

	_pCalendar.on_notify_ondropdown = function (obj, e) {
		if (this.readonly == true || this.enable == false) {
			return false;
		}

		if (this._isPopupVisible()) {
			this.closeDropdown();

			if (this.calendaredit) {
				var input_elem = this.calendaredit._input_element;
				if (input_elem) {
					if (this.autoselect) {
						var text = this.text;
						input_elem.setElementSetSelect(0, text.length);
					}
					else {
						this._setDefaultCaret();
					}
				}
			}
		}
		else {
			this.dropdown();
		}

		return false;
	};

	_pCalendar.on_notify_oneditclick = function (obj, e) {
		this.on_fire_oneditclick(obj, e.caretpos, e.button, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.screenX, e.screenY, e.canvasX, e.canvasY, e.clientX, e.clientY, e.fromobject, e.fromreferenceobject);
	};

	_pCalendar.on_notify_onlbuttonup = function (obj, e) {
		nexacro.OnceCallbackTimer.callonce(this, function () {
			var edit = this.calendaredit;
			var input_elem = edit._input_element;
			var pos = input_elem.getElementCaretPos();

			if (pos && pos != -1) {
				this._caret_pos = pos;
				if (nexacro._isDesktop() && nexacro.Browser == "Runtime") {
					if (pos.begin == pos.end) {
						this.setCaretPos(pos.begin);
					}
				}
			}
			else {
				this._caret_pos.begin = 0;
				this._caret_pos.end = 0;
			}
		});
	};

	_pCalendar.on_notify_onlbuttondown = function (obj, e) {
		if (this.readonly == true) {
			return false;
		}

		var edit = this.calendaredit;
		var edit_api = edit._edit_base_api;
		var input_elem = edit._input_element;
		var pos = input_elem.getElementCaretPos();

		if (pos && pos != -1) {
			this._caret_pos = pos;
		}
		else {
			this._caret_pos.begin = 0;
			this._caret_pos.end = 0;
		}

		if (this._isPopupVisible()) {
			this.closeDropdown();
		}

		if (edit && this._currentformat != "editformat") {
			var status = (this._currentformat == "dateformat" && this.value === "") ? true : false;
			this._currentformat = "editformat";
			this._setMask(this._currentformat, status, this.value);
			var date = this._makeMaskValue(this.value ? this.value.toString() : "");
			edit_api._setValue(date);
		}
	};

	_pCalendar.on_notify_mobile_onlbuttondown = function (obj, e) {
		if (this.readonly == true) {
			return false;
		}

		var edit = this.calendaredit;
		var edit_api = edit._edit_base_api;

		if (this._isPopupVisible()) {
			this.closeDropdown();
		}

		if (edit && this._currentformat != "editformat") {
			this._currentformat = "editformat";
			this._setMask(this._currentformat, false, this.value);

			var date = this._makeMaskValue(this.value ? this.value.toString() : "");
			edit_api._setValue(date);
		}
	};

	_pCalendar.on_notify_ontextchange = function (obj, e) {
		if (!this._isValidDate(e.chartext)) {
			return false;
		}

		return this.on_fire_ontextchange(obj, e.chartext, e.pretext, e.posttext, e.preimetext, e.postimetext);
	};

	_pCalendar.on_notify_ontextchanged = function (obj, e) {
		var cur_text = e.posttext;
		var value = this._getDateObjFromDisplayText(cur_text);
		var date = this._getPickerValue(value);
		if (this.popupcalendar && this.isDropdown()) {
			this.popupcalendar.set_value(date);
		}

		return this.on_fire_ontextchanged(obj, e.pretext, e.posttext);
	};

	_pCalendar.on_notify_onchanged = function (obj, e) {
	};

	_pCalendar.on_notify_onchar = function (obj, e) {
		return this.on_fire_onchar(obj, e.chartext, e.pretext, e.posttext);
	};

	_pCalendar.on_notify_cancharchange = function (obj, e) {
		return this.on_fire_cancharchange(obj, e.chartext, e.pretext, e.posttext);
	};

	_pCalendar.on_notify_canchange = function (obj, e) {
		return this.on_fire_canchange(obj, e.pretext, e.prevalue, e.posttext, e.postvalue);
	};

	_pCalendar.on_notify_oneditkillfocus = function (obj, e) {
		if (this.readonly == true) {
			return;
		}

		if (this.type == "spin" && e) {
			if (e.newreferencecomponent == this.spinupbutton || e.newreferencecomponent == this.spindownbutton) {
				return;
			}
		}

		this._currentformat = "editformat";
		var post_value = this._getDateObjFromDisplayText(this.calendaredit.text);
		var pre_value = this.value;
		var str_preval = pre_value ? pre_value.toString() : pre_value;
		var str_postval = post_value ? post_value.toString() : post_value;

		if (str_preval != str_postval) {
			if ((str_preval === undefined || str_preval === null) && str_postval === "") {
				return;
			}

			this._setPreValueAndText(pre_value);
			this._setPostValueAndText(post_value);

			var ret = this.on_fire_canchange(this, this._pretext, this._prevalue, this._posttext, this._postvalue);
			if (ret || ret === undefined) {
				var val_ret = this._setValue(this._postvalue);
				if (val_ret === false) {
					this._setValue(this._prevalue);
					return;
				}
			}
			else {
				this._setValue(this._prevalue);
				this.setCaretPos(0);
				return;
			}

			this._fireOnchangedEvent(pre_value, this.value);
		}
	};

	_pCalendar.on_notify_oncloseup = function (obj, e) {
		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._releaseCaptureLock(this);
		}

		if (this._day_click) {
			this.on_fire_oncloseup(this, this._pretext, this._posttext, this._prevalue, this._postvalue);
		}
		else {
			var text = this._changeYearValue(true);
			var post_value = this._getDateObjFromDisplayText(text);
			var pre_value = this.value;
			var str_preval = pre_value ? pre_value.toString() : pre_value;
			var str_postval = post_value ? post_value.toString() : post_value;

			this.on_fire_oncloseup(this, str_preval, str_postval, pre_value, post_value);
		}
	};

	_pCalendar.on_notify_onkeydown = function (obj, e) {
		var E = nexacro.Event;

		switch (this.type) {
			case "normal":
				if (e.keycode == E.KEY_ESC) {
					this.closeDropdown();
					this._setDefaultCaret();
				}
				else if (e.keycode == E.KEY_ENTER) {
					this._fireKeydownEvent();
					if (this.isDropdown()) {
						this.popupcalendar.on_fire_sys_onkeydown(e.keycode, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.fromobject, e.fromreferenceobject);
					}
					this.closeDropdown();
					this.setCaretPos(this.text ? this.text.length : 0);
				}
				else if (e.keycode == E.KEY_SPACE) {
					return false;
				}
				else if (e.altKey == true && e.keycode == E.KEY_DOWN) {
					this.dropdown();
				}
				else {
					if (this.isDropdown() && (e.keycode >= E.KEY_LEFT && e.keycode <= E.KEY_DOWN)) {
						this.popupcalendar.on_fire_sys_onkeydown(e.keycode, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.fromobject, e.fromreferenceobject);
					}
				}
				break;
			case "spin":
				var edit = this.calendaredit;
				var input_elem = edit._input_element;
				var pos = input_elem.getElementCaretPos();

				if (pos && pos != -1) {
					this._caret_pos = pos;
				}
				else {
					this._caret_pos = 0;
				}

				if (e.keycode == E.KEY_ENTER) {
					this._fireKeydownEvent();
					this.setCaretPos(this.text ? this.text.length : 0);
				}
				else if (e.keycode == E.KEY_UP) {
					if (!nexacro._enableaccessibility || e.ctrlKey) {
						this.on_notify_onspinup(obj, e);
					}
				}
				else if (e.keycode == E.KEY_DOWN) {
					if (!nexacro._enableaccessibility || e.ctrlKey) {
						this.on_notify_onspindown(obj, e);
					}
				}

				break;
			case "monthonly":
			default:
				break;
		}

		return false;
	};

	_pCalendar.on_fire_sys_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		if (nexacro._enableaccessibility && !ctrl_key && !alt_key && (this.type == "monthonly" || this.isDropdown())) {
			var datepicker = this.popupcalendar;
			var header = datepicker._header;
			var body = datepicker._body;
			var year = body._year | 0;
			var month = body._month | 0;
			var day = body._day | 0;

			switch (keycode) {
				case 38:
					{

						if (ctrl_key) {
							year -= 1;
						}
						else {
							day -= 7;

							if (day <= 0) {
								month -= 1;

								if (month <= 0) {
									if (year <= 0) {
										year = 9999;
									}
									else {
										year -= 1;
									}

									month = 12;
								}

								day = this._getEndDay(year, month) + day;
							}
						}
					}
					break;
				case 40:
					{

						if (ctrl_key) {
							year += 1;
						}
						else {
							day += 7;
							var endday = this._getEndDay(year, month);
							if (day > endday) {
								month += 1;

								if (month > 12) {
									if (year >= 9999) {
										year = 0;
									}
									else {
										year += 1;
									}

									month = 1;
								}
								day -= endday;
							}
						}
					}
					break;
			}
			if (keycode == 38 || keycode == 40) {
				year = body._makeDateText(year, "year");
				month = body._makeDateText(month, "month");
				day = body._makeDateText(day, "day");

				var date = new nexacro.Date(year, month - 1, day);
				datepicker._hide_spindate();


				if (this.type == "monthonly") {
					datepicker.on_fire_ondayclick(datepicker, date);
				}
				else {
					datepicker.set_value(year + month + day);
				}

				date = null;
			}
		}
	};

	_pCalendar.on_notify_onspinup = function (obj, e) {
		if (this.readonly == true) {
			return false;
		}

		this._currentformat = "editformat";
		var edit = this.calendaredit;
		var input_elem = edit._input_element;
		var value = edit.value;
		var caret_pos = this._caret_pos;

		if (!value) {
			var curr_date = new nexacro.Date();
			if (this._isTimeMask()) {
				curr_date._timeonly = true;
			}

			this.on_apply_fake_value(curr_date);
			this.setCaretPos(0);
			curr_date = null;
			return;
		}

		var text = input_elem.text;
		var date = this._makeSpinValue(text, 1, caret_pos.begin);

		this._setPreValueAndText(this._getDateObjFromDisplayText(edit.text));
		this._setPostValueAndText(this._makeDateObj(date));

		var ret = this.on_fire_onspin(this, this._pretext, this._posttext, this._prevalue, this._postvalue, true);
		if (ret || ret === undefined) {
			this.on_apply_fake_value(this._postvalue);
		}


		var adjust_caret = 0;
		if (text.length != input_elem.text.length) {
			adjust_caret = input_elem.text.length - text.length;
		}
		this.setCaretPos(caret_pos.begin + adjust_caret);
		obj._stat_change("notselect", "normal");
	};

	_pCalendar.on_notify_mobile_onspinup = function (obj, e) {
		if (this.readonly == true) {
			return false;
		}

		this._currentformat = "editformat";
		var edit = this.calendaredit;
		var input_elem = edit._input_element;
		var value = edit.value;
		var caret_pos = this._caret_pos = {
			begin : edit._edit_base_api._begin_pos, 
			end : edit._edit_base_api._end_pos
		};

		if (!value) {
			var curr_date = new nexacro.Date();
			if (this._isTimeMask()) {
				curr_date._timeonly = true;
			}

			this.on_apply_fake_value(curr_date);
			curr_date = null;
			return;
		}

		var text = input_elem.text;
		var date = this._makeSpinValue(text, 1, caret_pos.begin);

		this._setPreValueAndText(this._getDateObjFromDisplayText(edit.text));
		this._setPostValueAndText(this._makeDateObj(date));

		var ret = this.on_fire_onspin(this, this._pretext, this._posttext, this._prevalue, this._postvalue, true);
		if (ret || ret == undefined) {
			this.on_apply_fake_value(this._postvalue);
		}

		obj._stat_change("notselect", "normal");
	};

	_pCalendar.on_notify_onspindown = function (obj, e) {
		if (this.readonly == true) {
			return false;
		}

		this._currentformat = "editformat";
		var edit = this.calendaredit;
		var input_elem = edit._input_element;
		var value = edit.value;
		var caret_pos = this._caret_pos;

		if (!value) {
			var curr_date = new nexacro.Date();
			if (this._isTimeMask()) {
				curr_date._timeonly = true;
			}

			this.on_apply_fake_value(curr_date);
			this.setCaretPos(0);
			curr_date = null;
			return;
		}

		var text = input_elem.text;
		var date = this._makeSpinValue(text, -1, caret_pos.begin);
		this._setPreValueAndText(this._getDateObjFromDisplayText(edit.text));
		this._setPostValueAndText(this._makeDateObj(date));

		var ret = this.on_fire_onspin(this, this._pretext, this._posttext, this._prevalue, this._postvalue, false);
		if (ret || ret == undefined) {
			this.on_apply_fake_value(this._postvalue);
		}


		var adjust_caret = 0;
		if (text.length != input_elem.text.length) {
			adjust_caret = input_elem.text.length - text.length;
		}
		this.setCaretPos(caret_pos.begin + adjust_caret);
		obj._stat_change("notselect", "normal");
	};

	_pCalendar.on_notify_mobile_onspindown = function (obj, e) {
		if (this.readonly == true) {
			return false;
		}

		this._currentformat = "editformat";
		var edit = this.calendaredit;
		var input_elem = edit._input_element;
		var value = edit.value;
		var caret_pos = this._caret_pos = {
			begin : edit._edit_base_api._begin_pos, 
			end : edit._edit_base_api._end_pos
		};

		if (!value) {
			var curr_date = new nexacro.Date();
			if (this._isTimeMask()) {
				curr_date._timeonly = true;
			}

			this.on_apply_fake_value(curr_date);
			curr_date = null;
			return;
		}

		var text = input_elem.text;
		var date = this._makeSpinValue(text, -1, caret_pos.begin);
		this._setPreValueAndText(this._getDateObjFromDisplayText(edit.text));
		this._setPostValueAndText(this._makeDateObj(date));

		var ret = this.on_fire_onspin(this, this._pretext, this._posttext, this._prevalue, this._postvalue, false);
		if (ret || ret == undefined) {
			this.on_apply_fake_value(this._postvalue);
		}

		obj._stat_change("notselect", "normal");
	};

	_pCalendar._callback_onvaluechanged = function (obj, e) {
		this.on_apply_backgroundcolumn();
		this.on_apply_bordercolumn();
		this.on_apply_datecolumn();
		this.on_apply_textcolorcolumn();
	};

	_pCalendar._callback_rowsetchanged = function (obj, e) {
		this.on_apply_backgroundcolumn();
		this.on_apply_bordercolumn();
		this.on_apply_datecolumn();
		this.on_apply_textcolorcolumn();
	};

	_pCalendar._on_activate = function () {
		if (!this._is_alive) {
			return;
		}

		var edit = this.calendaredit;
		if (edit) {
			var edit_api = edit._edit_base_api;
			if (edit_api) {
				this._currentformat = "editformat";

				var val = this.value;
				var date = "";
				var text = this._changeYearValue(true);

				this._setMask(this._currentformat, false, this.value);

				if (nexacro._isNull(val)) {
					date = val;
				}
				else {
					date = this._makeMaskValue(val.toString(), this.value);
				}
				this.on_apply_value();

				if (text && text != this.text) {
					val = this._getDateObjFromDisplayText(text);
					date = this._makeMaskValue(val.toString(), val);
				}

				edit_api._setValue(date);

				if (nexacro._enableaccessibility) {
					this._setAccessibilityStatFocus();
				}
			}
		}

		if (!this._isSelected()) {
			this._stat_change("focus", "normal");
		}
	};

	_pCalendar._on_killfocus = function (new_focus, new_ref_focus) {
		if (!this._is_alive) {
			return;
		}

		var edit = this.calendaredit;
		if (edit) {
			this._caret_pos.begin = edit._caret_pos.begin = edit._edit_base_api._begin_pos;
			this._caret_pos.end = edit._caret_pos.end = edit._edit_base_api._end_pos;

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "Runtime") {
				edit._cancelSelect();
			}
		}

		if (this.type != "monthonly") {
			var pre_value = this.value;

			var text = this._changeYearValue(true);
			if (this.popupcalendar) {
				this._currentformat = "editformat";
			}

			var post_value = this._getDateObjFromDisplayText(text);

			var str_preval = pre_value ? pre_value.toString() : pre_value;
			var str_postval = post_value ? post_value.toString() : post_value;

			this._currentformat = "dateformat";

			var win = this._getWindow();
			if (win && win._is_active_window != true && !new_focus) {
				if (this.calendaredit) {
					this.calendaredit._stat_change("notfocus", "normal");

					if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
						this.calendaredit._is_focusing = false;
					}
				}
				return;
			}

			if (str_preval != str_postval) {
				if ((str_preval === undefined || str_preval === null) && str_postval === "") {
					this.on_apply_value();
					this.closeDropdown();

					if (this.calendaredit) {
						this.calendaredit._stat_change("notfocus", "normal");

						if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
							this.calendaredit._is_focusing = false;
						}
					}

					return;
				}

				this._setPreValueAndText(pre_value);
				this._setPostValueAndText(post_value);

				var ret = this.on_fire_canchange(this, this._pretext, this._prevalue, this._posttext, this._postvalue);

				if (ret || ret == undefined) {
					ret = this.applyto_bindSource("value", this._postvalue);

					if (ret === false) {
						this.on_apply_value();
					}
					else {
						this._setValue(this._postvalue);
					}
				}
				else {
					ret = this.applyto_bindSource("value", this._prevalue);
					if (ret === false) {
						this.on_apply_value();
					}
					else {
						this._setValue(this._prevalue);
					}
					return;
				}

				this._fireOnchangedEvent(this._prevalue, this.value);
			}
			else {
				this.on_apply_value();

				var edit = this.calendaredit;
				if (edit) {
					var edit_api = edit._edit_base_api;
					edit_api._setFocusValue();
				}
			}

			this.closeDropdown();
		}
		else {
			if (this.popupcalendar) {
				var datepicker = this.popupcalendar;
				datepicker._hide_spindate();
			}

			this.on_apply_value();
		}

		if (this.calendaredit) {
			this.calendaredit._stat_change("notfocus", "normal");

			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				this.calendaredit._is_focusing = false;
			}
		}
	};


	_pCalendar.on_fire_canchange = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.ChangeEventInfo(this, "canchange", pretext, prevalue, posttext, postvalue);
			return this.canchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_cancharchange = function (obj, chartext, pretext, posttext) {
		if (this.cancharchange && this.cancharchange._has_handlers) {
			var evt = new nexacro.CanCharEventInfo(obj, "cancharchange", chartext, pretext, posttext);
			return this.cancharchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_onchanged = function (obj, pretext, prevalue, posttext, postvalue) {
		if (this.onchanged && this.onchanged._has_handlers) {
			var evt = new nexacro.ChangedEventInfo(this, "onchanged", pretext, prevalue, posttext, postvalue);
			return this.onchanged._fireEvent(this, evt);
		}
		return false;
	};

	_pCalendar.on_fire_onchar = function (obj, chartext, pretext, posttext) {
		if (this.onchar && this.onchar._has_handlers) {
			var evt = new nexacro.CharEventInfo(this, "onchar", chartext, pretext, posttext);
			return this.onchar._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_oncloseup = function (obj, pretext, posttext, prevalue, postvalue) {
		if (this.oncloseup && this.oncloseup._has_handlers) {
			var evt = new nexacro.CalendarCloseUpEventInfo(this, "oncloseup", pretext, posttext, prevalue, postvalue);
			return this.oncloseup._fireEvent(this, evt);
		}
		return false;
	};

	_pCalendar.on_fire_ondayclick = function (obj, date) {
		if (this.ondayclick && this.ondayclick._has_handlers) {
			var evt = new nexacro.CalendarDayClickEventInfo(this, "ondayclick", date);
			return this.ondayclick._fireEvent(this, evt);
		}
		return false;
	};

	_pCalendar.on_fire_ondropdown = function (obj) {
		if (this.ondropdown && this.ondropdown._has_handlers) {
			var evt = new nexacro.Event(this, "ondropdown");
			return this.ondropdown._fireEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_oneditclick = function (obj, caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.visible && this._isEnable() && this.enableevent) {
			if (this.oneditclick && this.oneditclick._has_handlers) {
				var evt = new nexacro.EditClickEventInfo(this, "oneditclick", caretpos, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this, from_refer_comp);
				return this.oneditclick._fireEvent(this, evt);
			}
		}
		return false;
	};

	_pCalendar.on_fire_onspin = function (obj, pretext, posttext, prevalue, postvalue, isUp) {
		if (this.onspin && this.onspin._has_handlers) {
			var evt = new nexacro.CalendarSpinEventInfo(this, "onspin", pretext, posttext, prevalue, postvalue, isUp);
			return this.onspin._fireEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_ontextchange = function (obj, chartext, pretext, posttext, preimetext, postimetext) {
		if (this.ontextchange && this.ontextchange._has_handlers) {
			var evt = new nexacro.TextChangeEventInfo(this, "ontextchange", chartext, pretext, posttext, preimetext, postimetext);
			return this.ontextchange._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_ontextchanged = function (obj, pretext, posttext) {
		if (this.ontextchanged && this.ontextchanged._has_handlers) {
			var evt = new nexacro.TextChangedEventInfo(this, "ontextchanged", pretext, posttext);
			return this.ontextchanged._fireEvent(this, evt);
		}
		return true;
	};

	_pCalendar.on_fire_sys_onslide = function (elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		nexacro.Component.prototype.on_fire_sys_onslide.call(this, elem, touch_manager, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp);

		this._update_popupwindow_position();

		return (this.popupwindow && this.popupwindow._is_popup()) ? true : false;
	};

	_pCalendar.on_fire_sys_onfling = function (elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onfling.call(this, elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp);

		this._update_popupwindow_position();

		return ret;
	};

	_pCalendar.on_fire_user_onmousewheel = function (wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		nexacro.Component.prototype.on_fire_user_onmousewheel.call(this, wheelDeltaX, wheelDeltaY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		return (this.popupwindow && this.popupwindow._is_popup()) ? true : false;
	};

	_pCalendar._applyZoomPopup = function () {
		if (this.popupwindow && this.popupwindow._is_popup()) {
			this.dropdown();
		}
	};

	_pCalendar._createCalendaredit = function () {
		var calendaredit = new nexacro.CalendarEditCtrl("calendaredit", "absolute", 0, 0, 0, 0, null, null, this);
		calendaredit.set_readonly(this.readonly);
		calendaredit.set_type("string");
		calendaredit.set_maskchar(" ");
		calendaredit.set_displaynulltext(this.displaynulltext);

		calendaredit.createComponent(true);
		this.calendaredit = calendaredit;
		this._edit_base_api = calendaredit._edit_base_api;

		calendaredit = null;
		this._setMask("dateformat", true, this.value);
	};

	_pCalendar._createDropbutton = function () {
		var dropbutton = this.dropbutton = new nexacro.CalendarDropButtonCtrl("dropbutton", "absolute", 0, 0, 0, 0, null, null, this);
		dropbutton.createComponent(true);
	};

	_pCalendar._createSpinbutton = function () {
		var spinupbutton = new nexacro.CalendarSpinButtonCtrl("spinupbutton", "absolute", 0, 0, 0, 0, null, null, this);
		var spindownbutton = new nexacro.CalendarSpinButtonCtrl("spindownbutton", "absolute", 0, 0, 0, 0, null, null, this);
		spinupbutton.createComponent(true);
		spindownbutton.createComponent(true);
		this.spinupbutton = spinupbutton;
		this.spindownbutton = spindownbutton;
		spinupbutton = spindownbutton = null;
	};

	_pCalendar._createPopupcalendar = function () {
		var popupcalendar = new nexacro.DatePickerCtrl("popupcalendar", "absolute", 0, 0, 0, 0, null, null, this);
		popupcalendar.createComponent(true);
		popupcalendar._setEnable(true);

		if (this.type == "monthonly") {
			popupcalendar._is_focus_accept = true;
		}
		else {
			popupcalendar._is_focus_accept = false;
		}

		this.popupcalendar = popupcalendar;
		popupcalendar = null;
	};

	_pCalendar._createPopupwindow = function () {
		var popupwindow = new nexacro.CalendarPopupWindow("calendarpopup", "absolute", 0, 0, 0, 0, null, null, this);
		popupwindow.createComponent(true);
		this.popupwindow = popupwindow;
		popupwindow = null;
	};

	_pCalendar._createSystemCalendar = function () {
		var calendaredit = new nexacro.CalendarEditCtrl("calendaredit", "absolute", 0, 0, 0, 0, null, null, this);
		calendaredit.set_readonly(this.readonly);
		calendaredit.set_type("string");
		calendaredit.set_maskchar(" ");
		calendaredit.set_displaynulltext(this.displaynulltext);

		calendaredit.createComponent(true);
		this.calendaredit = calendaredit;
		this.calendaredit.setCaretPos(0);

		calendaredit = null;
	};

	_pCalendar._applyAllProps = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this.on_apply_editformat();
			this.on_apply_value();
			this.on_apply_dateformat();

			this.on_apply_innerdataset();
			this.on_apply_locale();
			this.on_apply_readonly();
		}
	};

	_pCalendar._applyDatepickerProps = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var popupcalendar = this.popupcalendar;
			if (popupcalendar) {
				popupcalendar._setEnable(true);
				popupcalendar.set_readonly(this.readonly);

				var date = this._getPickerValue(this.value);
				popupcalendar.set_value(date);

				this.on_apply_style_viewmonthspin(this.on_find_CurrentStyle_viewmonthspin(this._pseudo));
				this.on_apply_style_viewyearspin(this.on_find_CurrentStyle_viewyearspin(this._pseudo));

				this.on_apply_innerdataset();
			}
		}
	};

	_pCalendar._createNormaltypeControl = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._createCalendaredit();
			this._createDropbutton();
			this._setEventHandlerToCalendarEdit();
			this._setEventHandlerToDropButton();
			this._applyAllProps();

			if (this._is_created) {
				var popupwindow = this.popupwindow;
				var popupcalendar = this.popupcalendar;
				var calendaredit = this.calendaredit;
				var dropbutton = this.dropbutton;

				if (calendaredit) {
					calendaredit.on_created();
					calendaredit.style.set_align(this.currentstyle.align);
				}
				if (dropbutton) {
					dropbutton.on_created();
				}
			}
		}
	};

	_pCalendar._createSpintypeControl = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._createCalendaredit();
			this._createSpinbutton();
			this._setEventHandlerToCalendarEdit();
			this._setEventHandlerToSpinButton();
			this._applyAllProps();

			if (this._is_created) {
				var calendaredit = this.calendaredit;
				var spinupbutton = this.spinupbutton;
				var spindownbutton = this.spindownbutton;

				if (calendaredit) {
					calendaredit.on_created();
					calendaredit.style.set_align(this.currentstyle.align);
				}
				if (spinupbutton) {
					spinupbutton.on_created();
				}
				if (spindownbutton) {
					spindownbutton.on_created();
				}
			}
		}
	};
	_pCalendar._createMonthlytypeControl = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._createPopupcalendar();
			this._setEventHandlerToPopupCalendar();
			this._applyDatepickerProps();

			if (this._is_created) {
				var popupcalendar = this.popupcalendar;
				if (popupcalendar) {
					popupcalendar.on_created();
				}
			}
		}
	};

	_pCalendar._createSystemtypeControl = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._createSystemCalendar();
			this._setEventHandlerToCalendarEdit();
			this._applyAllProps();

			if (this._is_created) {
				var calendaredit = this.calendaredit;

				if (calendaredit) {
					calendaredit.on_created();
					calendaredit.style.set_align(this.currentstyle.align);

					if (!nexacro._isDesktop() && calendaredit && calendaredit._input_element) {
						if (this.type == "system") {
							calendaredit._input_element.setElementInputType("date", true, this);
						}
						else {
							calendaredit._input_element.setElementInputType("tel");
							calendaredit._input_element.setElementInputTypeKeypad("tel");
						}
					}
				}
			}
		}
	};

	_pCalendar._setEventHandlerToCalendarEdit = function () {
		var calendaredit = this.calendaredit;
		calendaredit._setEventHandler("oneditclick", this.on_notify_oneditclick, this);
		calendaredit._setEventHandler("onkeydown", this.on_notify_onkeydown, this);
		calendaredit._setEventHandler("onlbuttondown", this.on_notify_onlbuttondown, this);
		calendaredit._setEventHandler("onlbuttonup", this.on_notify_onlbuttonup, this);
		calendaredit._setEventHandler("ontouchstart", this.on_notify_mobile_onlbuttondown, this);
		calendaredit._setEventHandler("ontextchange", this.on_notify_ontextchange, this);
		calendaredit._setEventHandler("ontextchanged", this.on_notify_ontextchanged, this);
		calendaredit._setEventHandler("cancharchange", this.on_notify_cancharchange, this);
		calendaredit._setEventHandler("onchar", this.on_notify_onchar, this);
	};

	_pCalendar._setEventHandlerToDropButton = function () {
		if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
			this.dropbutton._setEventHandler("onlbuttondown", this.on_notify_ondropdown, this);
		}

		if (nexacro.OS != "Windows" || nexacro.Browser != "Runtime") {
			this.dropbutton._setEventHandler("ontap", this.on_notify_mobile_ondropdown, this);
		}
	};

	_pCalendar._setEventHandlerToSpinButton = function () {
		var spinupbutton = this.spinupbutton;
		var spindownbutton = this.spindownbutton;

		if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
			spinupbutton._setEventHandler("onlbuttondown", this.on_notify_onlbuttondown, this);
			spinupbutton._setEventHandler("onclick", this.on_notify_onspinup, this);

			spindownbutton._setEventHandler("onlbuttondown", this.on_notify_onlbuttondown, this);
			spindownbutton._setEventHandler("onclick", this.on_notify_onspindown, this);
		}
		else {
			spinupbutton._setEventHandler("onlbuttondown", this.on_notify_mobile_onlbuttondown, this);
			spinupbutton._setEventHandler("onclick", this.on_notify_mobile_onspinup, this);

			spindownbutton._setEventHandler("onlbuttondown", this.on_notify_mobile_onlbuttondown, this);
			spindownbutton._setEventHandler("onclick", this.on_notify_mobile_onspindown, this);
		}
	};

	_pCalendar._setEventHandlerToPopupCalendar = function () {
		var popupcalendar = this.popupcalendar;
		popupcalendar._setEventHandler("ondayclick", this.on_notify_ondayclick, this);
		popupcalendar._setEventHandler("oncloseup", this.on_notify_oncloseup, this);
	};

	_pCalendar._setEventHandlerToPopupWindow = function () {
	};

	_pCalendar._destroyControl = function () {
		if (this.calendaredit) {
			this.calendaredit.destroy();
			this.calendaredit = null;
		}
		if (this.dropbutton) {
			this.dropbutton.destroy();
			this.dropbutton = null;
		}
		if (this.spinupbutton) {
			this.spinupbutton.destroy();
			this.spinupbutton = null;
		}
		if (this.spindownbutton) {
			this.spindownbutton.destroy();
			this.spindownbutton = null;
		}
		if (this.popupcalendar) {
			this.popupcalendar.destroy();
			this.popupcalendar = null;
		}
		if (this.popupwindow) {
			this.popupwindow.destroy();
			this.popupwindow = null;
		}
	};

	_pCalendar._destroyInnerdataset = function () {
		if (this._innerdataset) {
			this._innerdataset._removeEventHandler("onvaluechanged", this._callback_onvaluechanged, this);
			this._innerdataset._removeEventHandler("onrowsetchanged", this._callback_rowsetchanged, this);
			this._innerdataset = null;
		}
	};

	_pCalendar.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		var _rtldirection = this._rtldirection;

		if (this.calendaredit) {
			this.calendaredit._setRtlDirection(_rtldirection);
		}

		if (this.dropbutton) {
			this.dropbutton._setRtlDirection(_rtldirection);
		}

		if (this.spinupbutton) {
			this.spinupbutton._setRtlDirection(_rtldirection);
		}

		if (this.spindownbutton) {
			this.spindownbutton._setRtlDirection(_rtldirection);
		}

		if (this.popupcalendar) {
			this.popupcalendar._setRtlDirection(_rtldirection);
		}

		if (this.popupwindow) {
			this.popupwindow._setRtlDirection(_rtldirection);
		}
	};

	_pCalendar._resizeCalendar = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var edit = this.calendaredit;
			var dropbutton = this.dropbutton;
			var spinupbutton = this.spinupbutton;
			var spindownbutton = this.spindownbutton;

			var client_width = this._client_width;
			var client_height = this._client_height;
			var client_left = 0;

			var padding = this.on_find_CurrentStyle_padding(this._pseudo);
			var buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);

			var buttonsize_h = client_height;
			if (buttonsize < 0) {
				var buttonsize_w = client_height;
			}
			else {
				var buttonsize_w = buttonsize;
			}

			switch (this.type) {
				case "normal":
					if (!dropbutton) {
						return;
					}
					var dropbutton_margin = dropbutton.on_find_CurrentStyle_margin(this._pseudo);
					var edit_margin = edit.on_find_CurrentStyle_margin(this._pseudo);

					buttonsize_w = buttonsize_w - dropbutton_margin.left - dropbutton_margin.right;

					var button_l = client_width - dropbutton_margin.right - buttonsize_w;
					var button_t = dropbutton_margin.top;
					var button_w = buttonsize_w;
					var button_h = buttonsize_h - dropbutton_margin.top - dropbutton_margin.bottom;

					var edit_l = edit_margin.left;
					var edit_t = edit_margin.top;
					var edit_w = button_l - dropbutton_margin.left - edit_margin.right - 1;
					var edit_h = client_height - edit_margin.top - edit_margin.bottom;

					this.dropbutton.move(button_l, button_t, button_w, button_h, null, null);
					this.calendaredit.move(client_left, edit_t, edit_w, edit_h, null, null);

					this.calendaredit.set_visible(true);
					this.dropbutton.set_visible(true);

					break;
				case "spin":
					if (!edit) {
						return;
					}

					var edit_margin = edit.on_find_CurrentStyle_margin(this._pseudo);
					var spinupbutton_margin = spinupbutton.on_find_CurrentStyle_margin(this._pseudo);
					var spindownbutton_margin = spindownbutton.on_find_CurrentStyle_margin(this._pseudo);

					var upbuttonsize_w = buttonsize_w - spinupbutton_margin.left - spinupbutton_margin.right;
					var downbuttonsize_w = buttonsize_w - spindownbutton_margin.left - spindownbutton_margin.right;

					if (upbuttonsize_w >= downbuttonsize_w) {
						buttonsize_w = upbuttonsize_w;
					}
					else {
						buttonsize_w = downbuttonsize_w;
					}

					var upbutton_l = client_width - spinupbutton_margin.right - upbuttonsize_w;
					var upbutton_t = spinupbutton_margin.top;
					var upbutton_w = upbuttonsize_w;
					var upbutton_h = (buttonsize_h / 2) - 1;

					var downbutton_l = client_width - spindownbutton_margin.right - downbuttonsize_w;
					var downbutton_t = upbutton_t + upbutton_h + spindownbutton_margin.top + 1;
					var downbutton_w = downbuttonsize_w;
					var downbutton_h = upbutton_h - spindownbutton_margin.bottom;

					var edit_l = edit_margin.left;
					var edit_t = edit_margin.top;
					var edit_w = client_width - buttonsize_w - 1;
					var edit_h = client_height - edit_margin.top - edit_margin.bottom;

					this.spinupbutton.move(upbutton_l, upbutton_t, upbutton_w, upbutton_h, null, null);
					this.spindownbutton.move(downbutton_l, downbutton_t, downbutton_w, downbutton_h, null, null);
					this.calendaredit.move(client_left, edit_t, edit_w, edit_h, null, null);

					this.calendaredit.set_visible(true);
					this.spinupbutton.set_visible(true);
					this.spindownbutton.set_visible(true);
					break;
				case "monthonly":
					if (!this.popupcalendar) {
						return;
					}
					this._applyDatepickerProps();
					this._resizeDatePicker(false);
					this.popupcalendar.set_visible(true);
					break;
				case "system":
					if (!edit) {
						return;
					}

					var edit_margin = edit.on_find_CurrentStyle_margin(this._pseudo);
					var edit_l = edit_margin.left;
					var edit_t = edit_margin.top;
					var edit_w = client_width - edit_margin.left - edit_margin.right;
					var edit_h = client_height - edit_margin.top - edit_margin.bottom;

					this.calendaredit.move(client_left, edit_t, edit_w, edit_h, null, null);
					this.calendaredit.set_visible(true);
					break;
			}
		}
	};

	_pCalendar._resizeDatePicker = function (_is_popup) {
		var popupcalendar = this.popupcalendar;
		if (!popupcalendar) {
			return;
		}

		var pseudo = this._pseudo;
		var padding = this.on_find_CurrentStyle_padding(pseudo);

		var client_width = this._client_width;
		var client_height = this._client_height;

		if (_is_popup) {
			var popupsize = this._getPopupSizeArr();

			popupcalendar.resize(popupsize.width, popupsize.height);
		}
		else {
			var picker_l = padding.left;
			var picker_t = padding.top;
			var picker_w = client_width - padding.right;
			var picker_h = client_height + padding.bottom;

			popupcalendar.move(picker_l, picker_t, picker_w, picker_h, null, null);
		}
	};

	_pCalendar._update_popupwindow_position = function () {
		var popupwindow = this.popupwindow;
		if (popupwindow) {
			var _window = this._getWindow();
			var popupsize = this._getPopupSizeArr();
			var popup_control_elem = popupwindow._control_element;

			var pos = nexacro._getElementPositionInFrame(this._control_element);
			var scale = this._getCumulativeZoomFactor() / 100.0;

			var cal_winpos_left = pos.x;
			var cal_winpos_top = pos.y;
			var cal_height = this._adjust_height * scale;

			var popup_left = cal_winpos_left;
			var popup_top = cal_winpos_top + cal_height;
			var popup_width = popupsize.width;
			var popup_height = popupsize.height * scale;

			var popup_winpos_right = cal_winpos_left + popup_width;
			var popup_winpos_bottom = cal_winpos_top + cal_height + popup_height;

			var win_width = _window.clientWidth;
			var win_height = _window.clientHeight;

			var width_gap = popup_winpos_right - win_width;

			if (this._getPopupType() == "center") {
				var rootframe = this._getOwnerFrame();
				if (!rootframe) {
					return;
				}

				var rootwindow = rootframe._getWindow();
				rootframe = rootwindow ? rootwindow.frame : null;
				if (!rootframe) {
					return;
				}

				popup_left = ((rootframe.width / 2) - (popup_control_elem.width / 2));
				popup_top = ((rootframe.height / 2) - (popup_control_elem.height / 2));

				popup_top = popup_top < 0 ? 0 : popup_top;
			}

			if (popup_winpos_right > win_width && cal_winpos_left > width_gap) {
				popup_left = popup_left - width_gap;
			}

			if (cal_winpos_left < 0) {
				popup_left = -cal_winpos_left;
			}

			if (cal_winpos_top > popup_height && cal_winpos_top + cal_height + popup_height > win_height) {
				popup_top = popup_top - popup_height - cal_height;
			}

			popup_control_elem.setElementPosition(popup_left, popup_top);
		}
	};

	_pCalendar._showPopup = function () {
		if (this.type != "normal") {
			return;
		}

		var popupcalendar = this.popupcalendar;
		var popupwindow = this.popupwindow;

		if (popupwindow == null) {
			this._createPopupwindow();
			popupwindow = this.popupwindow;
		}
		if (popupcalendar == null) {
			this._createPopupcalendar();
			this._setEventHandlerToPopupCalendar();
			this._applyDatepickerProps();
			popupcalendar = this.popupcalendar;
		}

		if (!popupwindow._is_created) {
			popupwindow.on_created();
		}
		if (!popupcalendar._is_created) {
			popupwindow._attach(popupcalendar);
			popupcalendar.on_created();
		}

		this.on_apply_prop_rtldirection();

		var popupsize = this._getPopupSizeArr();

		var pos = nexacro._getElementPositionInFrame(this._control_element);
		var scale = this._getCumulativeZoomFactor() / 100.0;

		var cal_winpos_left = pos.x;
		var cal_winpos_top = pos.y;
		var cal_width = this._adjust_width * scale;
		var cal_height = this._adjust_height * scale;

		var popup_left = 0;
		var popup_top = cal_height;
		var popup_width = popupsize.width;
		var popup_height = popupsize.height;

		var popupalign = this.currentstyle.popupalign;
		if (popupalign) {
			switch (popupalign.halign) {
				case "center":
					cal_winpos_left = cal_winpos_left + cal_width / 2 - popup_width / 2;
					if (this._isRtl()) {
						popup_left = -cal_width / 2 + popup_width / 2;
					}
					else {
						popup_left = cal_width / 2 - popup_width / 2;
					}
					break;
				case "right":
					cal_winpos_left = cal_winpos_left + cal_width - popup_width;
					if (this._isRtl()) {
						popup_left = -cal_width + popup_width;
					}
					else {
						popup_left = cal_width - popup_width;
					}

					break;
			}

			switch (popupalign.valign) {
				case "top":
					if (cal_winpos_top - popup_height >= 0) {
						popup_top = -popup_height;
					}
					break;
				case "middle":
					if (cal_winpos_top - popup_height / 2 >= 0) {
						popup_top = -popup_height / 2 + cal_height / 2;
					}
					break;
			}
		}

		var popup_winpos_right = cal_winpos_left + popup_width;
		var popup_winpos_bottom = cal_winpos_top + cal_height + popup_height;

		var _window = this._getWindow();
		var win_width = _window.clientWidth;
		var win_height = _window.clientHeight;

		var width_gap = popup_winpos_right - win_width;
		if (popup_winpos_right > win_width && cal_winpos_left > width_gap) {
			popup_left = popup_left - width_gap;
		}

		if (cal_winpos_left < 0) {
			popup_left = -cal_winpos_left;
		}

		if (cal_winpos_top > popup_height && popup_winpos_bottom > win_height) {
			popup_top = -(popup_height * scale);
		}

		var elem = popupwindow.getElement();
		if (elem.setZoom) {
			elem.setZoom(scale * 100);
		}
		else if (nexacro.ScrollableContainerElement.prototype.setZoom) {
			nexacro.ScrollableContainerElement.prototype.setZoom.call(elem, scale * 100);
		}

		if (this._getPopupType() == "center") {
			this._centerPopup(popupwindow, popup_width, popup_height);
		}
		else {
			popup_left = this._convertLeftForRtlLayout(popup_left, popup_width);

			if (this._isRtl()) {
				popup_left = -popup_left;
			}

			popupwindow._popupBy(this, popup_left, popup_top, popup_width, popup_height);
		}

		var _window = this._getWindow();
		if (_window && this._track_capture) {
			_window._setCaptureLock(this, true, false);
		}
	};

	_pCalendar._setMask = function (v, bApply, value) {
		if (this._getPopupType() != "system" && nexacro._enableaccessibility && nexacro._accessibilitytype == 4
			 && (value == null || value == undefined || value == "")) {
			return;
		}

		var mask = this._makeMask(v, value);

		if (v == "dateformat" && nexacro._isNull(value) && this.displaynulltext != "") {
			this._mask = this.displaynulltext;
		}
		else {
			if ((v == "dateformat" && this.dateformat == "LONGDATE") || (v == "editformat" && this.editformat == "LONGDATE")) {
				mask = mask.replace(/\'/g, "\\'");
				mask = mask.replace(/a/g, "\\a");
			}

			this._mask = mask;
		}

		this._on_apply_mask(this._mask, bApply);
	};

	_pCalendar._on_apply_mask = function (mask, bApply) {
		var control_elem = this.getElement();
		if (control_elem) {
			var edit = this.calendaredit;
			if (edit) {
				edit.set_mask(mask, bApply);
			}
		}
	};

	_pCalendar._isDateMaskChar = function (ch) {
		if (ch == "y" || ch == "M" || ch == "d" || ch == "H" || ch == "h" || ch == "m" || ch == "s") {
			return true;
		}
		return false;
	};

	_pCalendar._isDateMaskString = function (str) {
		if (str === "yyyy" || str === "yy" || str === "MMMM" || str === "MMM" || str === "MM" || str === "M" || str === "dddd" || str === "ddd" || str === "dd" || str === "d") {
			return true;
		}
		return false;
	};

	_pCalendar._isTimeMaskString = function (str) {
		if (str === "HH" || str === "H" || str === "hh" || str === "h" || str === "mm" || str === "m" || str === "s" || str === "ss" || str === "sss") {
			return true;
		}
		return false;
	};

	_pCalendar._isEmptyStr = function (v) {
		var str_val = v.toString();
		if (str_val === "" || str_val.trim() === "") {
			return true;
		}
		return false;
	};

	_pCalendar._isNullDate = function (v) {
		if (v === null || v === "null") {
			return true;
		}
		var str_val = v.toString();
		if (str_val == "NaN") {
			return true;
		}
		return false;
	};

	_pCalendar._isUndefinedDate = function (v) {
		if (v === undefined || v === "undefined") {
			return true;
		}
		return false;
	};

	_pCalendar._isPopupVisible = function () {
		var ret = false;
		if (this.type != "monthonly") {
			if (this.popupwindow) {
				ret = this.popupwindow.visible;
			}
		}
		return ret;
	};

	_pCalendar._validationDateStr = function (v, type) {
		if (v !== null || v !== undefined) {
			v = parseInt(v, 10);
			if (type == "year") {
				return (v / 10 < 1 ? "000" : v / 100 < 1 ? "00" : v / 1000 < 1 ? "0" : "") + v;
			}
			else if (type == "millisec") {
				return (v / 10 < 1 ? "00" : v / 100 < 1 ? "0" : "") + v;
			}
			else {
				return (v / 10 < 1 ? "0" : "") + v;
			}
		}
		else {
			return v;
		}
	};

	_pCalendar._isValidDate = function (ch) {
		if (ch === "") {
			return true;
		}

		var edit = this.calendaredit;
		var edit_api = edit._edit_base_api;
		var _info = this._editformat_info;

		var format_len = _info.format.length;
		var e_v = edit_api._getText();

		var y = "";
		var m = "";
		var d = "";
		var h = "";
		var mm = "";
		var s = "";
		var millisec = "";

		var y_f = false;
		var m_f = false;
		var d_f = false;
		var h_f = false;
		var mm_f = false;
		var s_f = false;
		var millisec_f = false;
		var millisec_index = -1;

		var check_month_value_type = false;
		var check_day_value_type = false;
		if (_info._mon && _info._mon.length == 1) {
			if (format_len < e_v.length) {
				check_month_value_type = true;
			}
		}

		if (_info._day && _info._day.length == 1) {
			if (format_len < e_v.length) {
				check_day_value_type = true;
			}
		}


		var regtmp = /[0-9]/;
		var nexttextindex = 0;
		for (var i = 0; i < format_len; i++) {
			var mc = _info.format_info[i].ch;
			if (mc == "y") {
				y += e_v.charAt(nexttextindex++);
			}
			else if (mc == "M") {
				if (check_month_value_type) {
					var t_ch = e_v.charAt(nexttextindex++);
					if (regtmp.test(t_ch) == true) {
						m += t_ch;
					}
					if (nexttextindex < e_v.length) {
						t_ch = e_v.charAt(nexttextindex);
						if (regtmp.test(t_ch) == true) {
							nexttextindex++;
							m += t_ch;
						}
						else if (i + 1 < format_len
							 && t_ch != _info.format_info[i + 1].ch) {
							nexttextindex++;
						}
					}
				}
				else {
					m += e_v.charAt(nexttextindex++);
				}
			}
			else if (mc == "d") {
				if (check_day_value_type) {
					var t_ch = e_v.charAt(nexttextindex++);
					if (regtmp.test(t_ch) == true) {
						d += t_ch;
					}
					if (nexttextindex < e_v.length) {
						t_ch = e_v.charAt(nexttextindex);
						if (regtmp.test(t_ch) == true) {
							nexttextindex++;
							d += t_ch;
						}
						else if (i + 1 < format_len
							 && t_ch != _info.format_info[i + 1].ch) {
							nexttextindex++;
						}
					}
				}
				else {
					d += e_v.charAt(nexttextindex++);
				}
			}
			else if (mc == "h" || mc == "H") {
				h += e_v.charAt(nexttextindex++);
			}
			else if (mc == "m") {
				mm += e_v.charAt(nexttextindex++);
			}
			else if (mc == "s") {
				if (millisec_index == -1) {
					if (i + 2 < format_len
						 && "s" == _info.format_info[i + 1].ch
						 && "s" == _info.format_info[i + 2].ch) {
						millisec_index = i;
					}
				}

				if (millisec_index != -1
					 && millisec_index + 2 >= i) {
					millisec += e_v.charAt(nexttextindex++);
				}
				else {
					s += e_v.charAt(nexttextindex++);
				}
			}
			else {
				nexttextindex++;
			}
		}
		y = parseInt(y, 10);
		m = parseInt(m, 10);
		d = parseInt(d, 10);
		h = parseInt(h, 10);
		mm = parseInt(mm, 10);
		s = parseInt(s, 10);
		millisec = parseInt(millisec, 10);

		if (y >= 0) {
			y_f = true;
		}
		if (m >= 0) {
			m_f = true;
		}
		if (d >= 0) {
			d_f = true;
		}
		if (h >= 0) {
			h_f = true;
		}
		if (mm >= 0) {
			mm_f = true;
		}
		if (s >= 0) {
			s_f = true;
		}
		if (millisec >= 0) {
			millisec_f = true;
		}


		var end_day = 31;
		if (y && m) {
			end_day = this._getEndDay(y, m);
		}
		else if (!y && m) {
			var currentDate = new Date();
			end_day = this._getEndDay(currentDate.getFullYear(), m);
			currentDate = null;
		}

		if ((m_f && m > 12) || (d_f && d > end_day) || (h_f && h >= 24) || (mm_f && mm >= 60) || (s_f && s >= 60)) {
			return false;
		}
		return true;
	};

	_pCalendar._makeMask = function (v, datevalue) {
		if (v == "dateformat") {
			var format = this.dateformat;
			var _info = this._dateformat_info;
		}
		else {
			var format = this.editformat;
			var _info = this._editformat_info;
		}

		var idx = 0;
		var mask = "";
		var week = 0;
		var week_str = "";
		var week_str_len = 0;

		var month = 0;
		var month_str = "";
		var month_str_len = 0;

		var is_rtl_month = false;
		var is_rtl_date = false;

		if (datevalue) {
			week = datevalue.getDay();
			month = datevalue.getMonth();
		}

		while (idx < _info.format.length) {
			var mask_str = "";
			var str_len = 0;
			if (_info._year && _info._year.index == idx) {
				if (v == "dateformat") {
					if (is_rtl_month) {
						if (_info._mon && (_info._year.index > _info._mon.index)) {
							mask += "~";
						}
					}
					else if (is_rtl_date) {
						if (_info._date && (_info._year.index > _info._date.index)) {
							mask += "~";
						}
					}
				}

				mask += this._makeMaskString(_info._year, "year", datevalue);
				idx += _info._year.length;
			}
			else if (_info._mon && _info._mon.index == idx) {
				str_len = _info._mon.mask.length;
				if (str_len == 4) {
					if (datevalue && v == "dateformat") {
						month_str = this._monthlistL[month];

						if (!this._isRtl() && this._locale_direction == "rtl") {
							is_rtl_month = true;
						}
					}
					else {
						month_str = "MMMM";
					}

					if (month_str && month_str.length) {
						month_str_len = month_str.length;
					}

					for (var i = 0; i < month_str_len; i++) {
						mask_str += "^";
					}
				}
				else if (str_len == 3) {
					if (datevalue) {
						month_str = this._monthlistS[month];
					}
					else {
						month_str = "MMM";
					}

					if (this.locale == "en_US") {
						if (month_str && month_str.length) {
							month_str_len = month_str.length;
						}

						for (var i = 0; i < month_str_len; i++) {
							mask_str += "~";
						}
					}
					else {
						mask_str += "MM";
					}
				}
				else {
					mask_str += this._makeMaskString(_info._mon, "month", datevalue);
				}

				mask += mask_str;
				idx += _info._mon.length;
			}
			else if (_info._day && _info._day.index == idx) {
				mask += this._makeMaskString(_info._day, "day", datevalue);
				idx += _info._day.length;
			}
			else if (_info._date && _info._date.index == idx) {
				str_len = _info._date.mask.length;
				if (str_len == 3) {
					if (datevalue) {
						week_str = this._datelistS[week];
					}
					else {
						week_str = this._datelistS[0];
						var tmplen = str_len;
						if (week_str && week_str.length) {
							tmplen = week_str.length;
						}

						week_str = "";
						for (var k = 0; k < tmplen; k++) {
							week_str += "d";
						}
					}

					if (week_str && week_str.length) {
						week_str_len = week_str.length;
					}

					for (var i = 0; i < week_str_len; i++) {
						mask_str += "~";
					}
				}
				else if (str_len == 4) {
					if (datevalue && v == "dateformat") {
						week_str = this._datelistL[week];
						if (!this._isRtl() && this._locale_direction == "rtl") {
							is_rtl_date = true;
						}
					}
					else {
						week_str = "dddd";
					}
					week_str_len = week_str.length;
					for (var i = 0; i < week_str_len; i++) {
						if (week_str.charAt(i) == "-") {
							mask_str += week_str.charAt(i);
						}
						else {
							mask_str += "^";
						}
					}
				}
				mask += mask_str;
				idx += _info._date.length;
			}
			else if (_info._hour && _info._hour.index == idx) {
				mask += this._makeMaskString(_info._hour, "hour", datevalue);
				idx += _info._hour.length;
			}
			else if (_info._min && _info._min.index == idx) {
				mask += this._makeMaskString(_info._min, "min", datevalue);
				idx += _info._min.length;
			}
			else if (_info._sec && _info._sec.index == idx) {
				mask += this._makeMaskString(_info._sec, "sec", datevalue);
				idx += _info._sec.length;
			}
			else if (_info._millisec && _info._millisec.index == idx) {
				mask += this._makeMaskString(_info._millisec, "millisec", datevalue);
				idx += _info._millisec.length;
			}
			else {
				var charadd = _info.format_info[idx].ch;
				mask += charadd;
				idx++;
			}
		}
		return mask;
	};

	_pCalendar._makeMaskString = function (section, sectionName, datevalue) {
		var val = datevalue;
		var tmp_val = null;
		var str_len = section.length;
		var maskStr_len = 0;
		var newStr = "";
		var maskchar = "";
		var currentformat = this._currentformat;

		if (sectionName == "year") {
			maskStr_len = str_len;
			maskchar = "y";
		}
		else if (sectionName == "month" || sectionName == "day" || sectionName == "min" || sectionName == "sec") {
			if (val) {
				if (sectionName == "month") {
					tmp_val = val.getMonth();
					tmp_val += 1;
					maskchar = "M";
				}
				else if (sectionName == "day") {
					tmp_val = val.getDate();
					maskchar = "d";
				}
				else if (sectionName == "min") {
					tmp_val = val.getMinutes();
					maskchar = "m";
				}
				else if (sectionName == "sec") {
					tmp_val = val.getSeconds();
					maskchar = "s";
				}

				if ((str_len == 1) && (tmp_val < 10) && currentformat == "dateformat") {
					maskStr_len = 1;
				}
				else if (str_len == 3) {
					maskStr_len = 3;
				}
				else {
					maskStr_len = 2;
				}
			}
			else {
				if (currentformat == "dateformat") {
					maskStr_len = str_len;
				}
				else {
					maskStr_len = 2;
				}
				maskchar = section.mask.charAt(0);
			}
		}
		else if (sectionName == "hour") {
			if (val) {
				tmp_val = val.getHours();
				if (section.mask === "h") {
					if (tmp_val > 12 && tmp_val < 24) {
						tmp_val -= 12;
						if (tmp_val < 10 && currentformat == "dateformat") {
							maskStr_len = 1;
						}
						else {
							maskStr_len = 2;
						}
					}
					maskchar = "h";
				}
				else if (section.mask === "H") {
					if (tmp_val < 10 && currentformat == "dateformat") {
						maskStr_len = 1;
					}
					else {
						maskStr_len = 2;
					}
					maskchar = "H";
				}
				else {
					maskStr_len = 2;
					maskchar = section.mask.charAt(0);
				}
			}
			else {
				maskStr_len = str_len;
				maskchar = section.mask.charAt(0);
			}
		}
		else if (sectionName == "millisec") {
			maskStr_len = 3;
			maskchar = "l";
		}

		for (var i = 0; i < maskStr_len; i++) {
			newStr += maskchar;
		}

		return newStr;
	};
	_pCalendar._makeMaskValue_normal = function (v, format_info, bValueType) {
		var year = "", month = "", day = "", hour = "", min = "", sec = "", millisec = "";
		var mask_value = "";
		var _info = null;
		var is_rtl_month = false;
		var is_rtl_date = false;

		year = v.substr(0, 4);
		month = v.substr(4, 2);
		day = v.substr(6, 2);
		year = year != "" ? year : "0000";
		month = month != "" ? month : "00";
		day = day != "" ? day : "00";
		hour = v.length >= 9 ? v.substr(8, 2) : "00";
		min = v.length >= 11 ? v.substr(10, 2) : "00";
		sec = v.length >= 13 ? v.substr(12, 2) : "00";
		millisec = v.length >= 15 ? v.substr(14, 3) : "000";

		if (format_info) {
			_info = format_info;
		}
		else {
			if (this._currentformat == "dateformat") {
				_info = this._dateformat_info;
			}
			else {
				_info = this._editformat_info;
			}
		}

		for (var i = 0, n = _info.format.length; i < n; i++) {
			if (_info._year && _info._year.index == i) {
				if (_info._year.mask === "yy") {
					year = year.substr(2, 2);
				}

				if (this._currentformat == "dateformat") {
					if (is_rtl_month) {
						if (_info._mon && (_info._year.index > _info._mon.index)) {
							year = "\u200e" + year;
						}
					}
					else if (is_rtl_date) {
						if (_info._date && (_info._year.index > _info._date.index)) {
							year = "\u200e" + year;
						}
					}
				}

				mask_value += year;
			}
			if (_info._mon && _info._mon.index == i) {
				if (_info._mon.mask === "M") {
					if (month.charAt(0) === "0") {
						if (this._currentformat == "dateformat") {
							month = month.substr(1, 1);
						}
						else {
							month = month.replace("0", " ");
						}

						_info._mon.single_digit = true;
					}
					else {
						_info._mon.single_digit = false;
					}
				}
				else if (_info._mon.mask === "MMM") {
					var dateObj = this._getDateObj(v);
					var m = dateObj.getMonth();

					if (this.locale == "en_US") {
						month = this._monthlistS[m];
					}
				}
				else if (_info._mon.mask === "MMMM") {
					if (this._currentformat == "editformat") {
						if (!bValueType) {
							month = "MMMM";
						}
						else {
							var dateObj = this._getDateObj(v);
							var m = dateObj.getMonth() + 1;
							month = nexacro._toString(m).padLeft(4, "0");
						}
					}
					else {
						var dateObj = this._getDateObj(v);
						var m = dateObj.getMonth();
						month = this._monthlistL[m];

						if (!this._isRtl() && this._locale_direction == "rtl") {
							is_rtl_month = true;
						}
					}
				}
				mask_value += month;
			}
			if (_info._day && _info._day.index == i) {
				if (_info._day.mask === "d") {
					if (day.charAt(0) === "0") {
						if (this._currentformat == "dateformat") {
							day = day.substr(1, 1);
						}
						else {
							day = day.replace("0", " ");
						}

						_info._day.single_digit = true;
					}
					else {
						_info._day.single_digit = false;
					}
				}
				mask_value += day;
			}
			if (_info._date && _info._date.index == i) {
				var dateObj = this._getDateObj(v);
				var dateofweek = dateObj.getDay();
				var date = this._datelistS[dateofweek];
				if (_info._date.mask === "dddd") {
					if (this._currentformat == "editformat") {
						date = _info._date.mask;
					}
					else {
						date = this._datelistL[dateofweek];
						if (!this._isRtl() && this._locale_direction == "rtl") {
							is_rtl_date = true;
						}
					}
				}
				mask_value += date ? date : "";
			}
			if (_info._hour && _info._hour.index == i) {
				if (_info._hour.mask === "h" || _info._hour.mask === "hh") {
					var hh = parseInt(hour);
					if (hh > 12 && hh < 24) {
						hh -= 12;
						hour = nexacro._toString(hh);
					}
				}
				if (!((_info._hour.mask === "h" || _info._hour.mask === "H") && hour.length > 0)) {
					hour = hour.padLeft(2, "0");
				}

				mask_value += hour;
			}
			if (_info._min && _info._min.index == i) {
				if (_info._min.mask === "m" && min.charAt(0) === "0") {
					min = min.substr(1, 1);
				}
				else {
					min = min.padLeft(_info._min.length, "0");
				}
				mask_value += min;
			}
			if (_info._sec && _info._sec.index == i) {
				if (_info._sec.mask === "s" && sec.charAt(0) === "0") {
					sec = sec.substr(1, 1);
				}
				else {
					sec = sec.padLeft(_info._sec.length, "0");
				}
				mask_value += sec;
			}
			if (_info._millisec && _info._millisec.index == i) {
				mask_value += millisec;
			}
		}

		return mask_value;
	};

	_pCalendar._makeMaskValue_timeOnly = function (v, format_info) {
		var year = month = day = hour = min = sec = millisec = "";
		var idx = 0;
		var mask_value = "";
		var _info = null;

		if (format_info) {
			_info = format_info;
		}
		else {
			if (this._currentformat == "dateformat") {
				_info = this._dateformat_info;
			}
			else {
				_info = this._editformat_info;
			}
		}

		for (var i = 0, n = _info.format.length; i < n; i++) {
			if (_info._year && _info._year.index == i) {
				year = v.substr(idx, _info._year.length);
				mask_value += year;
				idx += _info._year.length;
			}
			if (_info._mon && _info._mon.index == i) {
				month = v.substr(idx, _info._mon.length);
				mask_value += month;
				idx += _info._mon.length;
			}
			if (_info._day && _info._day.index == i) {
				day = v.substr(idx, _info._day.length);
				mask_value += day;
				idx += _info._day.length;
			}
			if (_info._date && _info._date.index == i) {
				var dateObj = this._getDateObj(v);
				var dateofweek = dateObj.getDay();
				var date = this._datelistS[dateofweek];
				if (_info._date.mask === "dddd") {
					if (this._currentformat == "editformat") {
						date = _info._date.mask;
					}
					else {
						date = this._datelistL[dateofweek];
					}
				}
				mask_value += date ? date : "";
				idx += _info._date.length;
			}
			if (_info._hour && _info._hour.index == i) {
				hour = v.substr(idx, _info._hour.length).padLeft(_info._hour.length, "0");

				if (_info._hour.mask === "h" || _info._hour.mask === "hh") {
					var hh = parseInt(hour);
					if (hh > 12 && hh < 24) {
						hh -= 12;
						hour = nexacro._toString(hh);
					}
				}
				if (!((_info._hour.mask === "h" || _info._hour.mask === "H") && hour.length > 0)) {
					hour = hour.padLeft(2, "0");
				}
				mask_value += hour;
				idx += _info._hour.length;
			}
			if (_info._min && _info._min.index == i) {
				min = v.substr(idx, _info._min.length);
				if (_info._min.mask === "m" && min.charAt(0) === "0") {
					min = min.substr(1, 1);
				}
				else {
					min = min.padLeft(_info._min.length, "0");
				}
				mask_value += min;
				idx += _info._min.length;
			}
			if (_info._sec && _info._sec.index == i) {
				sec = v.substr(idx, _info._sec.length).padLeft(_info._sec.length, "0");
				if (_info._sec.mask === "s" && sec.charAt(0) === "0") {
					sec = sec.substr(1, 1);
				}
				else {
					sec = sec.padLeft(_info._sec.length, "0");
				}
				mask_value += sec;
				idx += _info._sec.length;
			}
			if (_info._millisec && _info._millisec.index == i) {
				millisec = v.substr(idx, _info._millisec.length).padLeft(_info._millisec.length, "0");

				mask_value += millisec;
				idx += _info._millisec.length;
			}
		}

		return mask_value;
	};


	_pCalendar._makeMaskValue = function (v, bValueType) {
		if (this._isUndefinedDate(v)) {
			return;
		}
		if (this._isNullDate(v)) {
			return "";
		}
		if (this._isEmptyStr(v)) {
			return "";
		}

		if (this._currentformat == "dateformat") {
			var _info = this._dateformat_info;
		}
		else {
			var _info = this._editformat_info;
		}

		if (_info._year || _info._mon || _info._day) {
			return this._makeMaskValue_normal(v, _info, bValueType);
		}
		else {
			return this._makeMaskValue_timeOnly(v, _info);
		}
	};

	_pCalendar._makeSpinValue = function (edittext, op, pos) {
		var mask = this.editformat;
		var fullstr = this._getFullValueFromDisplayText(edittext);
		var date = this._getSplitDate(fullstr);

		if (mask == "SHORTDATE" || mask == "LONGDATE") {
			var locale = this._getLocale();
			if (!locale) {
				locale = nexacro.BrowserLang;
			}

			mask = nexacro.Locale._makeDateMaskString(locale, mask);

			var mon_index = mask.indexOf("M");
			var day_index = mask.indexOf("d");

			if (mask.slice(mon_index, mon_index + 2) != "MM") {
				mask = mask.replace("M", "MM");
			}

			if (mask.slice(day_index, day_index + 2) != "dd") {
				mask = mask.replace("d", "dd");
			}

			if (date.mon == "MM") {
				date.mon = nexacro._toString(this.value.getMonth() + 1).padLeft(2, "0");
			}
		}

		if (pos >= 0) {
			var val1 = mask.substring(pos, pos + 1);
			var val2 = this._mask.substring(pos, pos + 1);
			var val3 = this._mask.substring(pos - 1, pos);

			var matchStr = "yMdHhmsl";
			if (!this._isDateMaskChar(val1) && (matchStr.indexOf(val2) >= 0 || matchStr.indexOf(val3) >= 0)) {
				while (!this._isDateMaskChar(val1)) {
					pos--;
					val1 = mask.substring(pos, pos + 1);
				}

				val = val1;
			}
			else {
				val = val1;
			}


			if (val == "d") {
				var dddd_pos = mask.indexOf("dddd");
				var ddd_pos = mask.indexOf("ddd");

				if (dddd_pos >= 0 && pos >= dddd_pos && pos <= (dddd_pos + 3)) {
					val = "";
				}

				if (ddd_pos >= 0 && pos >= ddd_pos && pos <= (ddd_pos + 2)) {
					val = "";
				}
			}

			if (val == "y") {
				var y = parseInt(date.year, 10) + op;

				if (y < 0) {
					y = 9999;
				}
				else if (y > 9999) {
					y = 0;
				}
				date.year = this._validationDateStr(y, "year");
				var d = "" + this._getEndDay(date.year, date.mon);
				if (parseInt(date.day, 10) > d) {
					date.day = "" + d;
				}
			}
			else if (val == "M") {
				var m = parseInt(date.mon, 10) + op;
				if (m < 1) {
					m = 12;
				}
				else if (m > 12) {
					m = 1;
				}
				date.mon = this._validationDateStr(m);
				var d = "" + this._getEndDay(date.year, date.mon);

				if (parseInt(date.day, 10) > d) {
					date.day = "" + d;
				}
			}
			else if (val == "d") {
				var d = parseInt(date.day, 10) + op;
				var val = parseInt(this._getEndDay(date.year, date.mon), 10);
				if (d < 1) {
					date.day = "" + val;
				}
				else {
					if (d > val) {
						d = 1;
					}
					date.day = this._validationDateStr(d);
				}
			}
			else if (val == "H" || val == "h") {
				var h = parseInt(date.hour, 10) + op;
				if (h < 0) {
					h = 23;
				}
				else if (h > 23) {
					h = 0;
				}
				date.hour = this._validationDateStr(h);
			}
			else if (val == "m") {
				var m = parseInt(date.min, 10) + op;
				if (m < 0) {
					m = 59;
				}
				else if (m > 59) {
					m = 0;
				}
				date.min = this._validationDateStr(m);
			}
			else if (val == "s") {
				var s = parseInt(date.sec, 10) + op;
				if (s < 0) {
					s = 59;
				}
				else if (s > 59) {
					s = 0;
				}
				date.sec = this._validationDateStr(s);
			}
		}

		var _info = this._editformat_info;

		var dateformat = null;
		var timeformat = null;

		if (_info._year || _info._mon || _info._day) {
			dateformat = true;
		}

		if (_info._hour || _info._min || _info._sec || _info._millisec) {
			timeformat = true;
		}

		var return_val = "";

		if (dateformat) {
			if (_info._year && date.year) {
				return_val += this._validationDateStr(date.year, "year");
			}
			else {
				return_val += "0000";
			}

			if (_info._mon && date.mon) {
				return_val += this._validationDateStr(date.mon);
			}
			else {
				return_val += "00";
			}

			if (_info._day && date.day) {
				return_val += this._validationDateStr(date.day);
			}
			else {
				return_val += "00";
			}
		}

		if (timeformat) {
			if (_info._hour && date.hour) {
				return_val += this._validationDateStr(date.hour);
			}
			else {
				return_val += "00";
			}

			if (_info._min && date.min) {
				return_val += this._validationDateStr(date.min);
			}
			else {
				return_val += "00";
			}

			if (_info._sec && date.sec) {
				return_val += this._validationDateStr(date.sec);
			}
			else {
				return_val += "00";
			}

			if (_info._millisec && date.millisec) {
				return_val += this._validationDateStr(date.millisec, "millisec");
			}
			else {
				return_val += "000";
			}
		}

		return return_val;
	};

	_pCalendar._makeNormalValue1 = function (edit_value) {
		var _info = this._editformat_info;
		var adjust_index = 0;

		var year, mon, day;

		if (_info._year) {
			adjust_index = 0;

			if (_info._mon && _info._year.index > _info._mon.index) {
				if (_info._mon.length == 1) {
					adjust_index++;
				}
			}
			if (_info._day && _info._year.index > _info._day.index) {
				if (_info._day.length == 1) {
					adjust_index++;
				}
			}

			year = edit_value.substr(_info._year.index + adjust_index, _info._year.length);
			year = year.trim();
		}
		else {
			year = "";
		}


		if (_info._mon) {
			adjust_index = 0;

			if (_info._day && _info._mon.index > _info._day.index) {
				if (_info._day.length == 1) {
					adjust_index++;
				}
			}

			mon = edit_value.substr(_info._mon.index + adjust_index, 2);
			mon = mon.trim();

			if (_info._mon.length == 4) {
				mon = mon.substr(2, 2);

				if (mon == "MM") {
					var v = this.value;
					v = v ? (v.getMonth() + 1) : "";
					mon = nexacro._toString(v).padLeft(2, "0");
				}
			}
			else if (mon) {
				mon = mon.padLeft(2, "0");
			}
		}
		else {
			mon = "";
		}

		if (_info._day) {
			adjust_index = 0;

			if (_info._mon && _info._day.index > _info._mon.index) {
				if (_info._mon.length == 1) {
					adjust_index++;
				}
			}

			day = edit_value.substr(_info._day.index + adjust_index, 2);
			day = day.trim();

			if (day) {
				day = day.padLeft(2, "0");
			}
		}
		else {
			day = "";
		}

		var hour = _info._hour ? edit_value.substr(_info._hour.index, _info._hour.length).padLeft(2, "0") : "";
		var min = _info._min ? edit_value.substr(_info._min.index, _info._min.length).padLeft(2, "0") : "";
		var sec = _info._sec ? edit_value.substr(_info._sec.index, _info._sec.length).padLeft(2, "0") : "";
		var millisec = _info._millisec ? edit_value.substr(_info._millisec.index, _info._millisec.length).padLeft(3, "0") : "";

		var normal_value = year + mon + day + hour + min + sec + millisec;
		return (normal_value === "" && this.displaynulltext !== "") ? "" : normal_value;
	};

	_pCalendar._getDateObjFromDisplayText = function (edit_value) {
		var fullval = this._getFullValueFromDisplayText(edit_value);
		if (fullval == null || fullval == "") {
			return "";
		}

		var year;
		var month;
		var day;
		var hour;
		var min;
		var sec;
		var millisec;


		var _info = this._editformat_info;
		var dateformat = false;
		var timeformat = false;

		if (_info._year || _info._mon || _info._day) {
			dateformat = true;
		}

		if (_info._hour || _info._min || _info._sec || _info._millisec) {
			timeformat = true;
		}


		var parseindex = 0;
		if (dateformat) {
			if (fullval.length >= 4) {
				year = fullval.substr(0, 4);
			}
			if (fullval.length >= 6) {
				month = fullval.substr(4, 2);
			}
			if (fullval.length >= 8) {
				day = fullval.substr(6, 2);
			}

			parseindex = 8;
		}

		if (timeformat) {
			if (fullval.length >= (parseindex + 2)) {
				hour = fullval.substr(parseindex, 2);
				parseindex += 2;
			}
			if (fullval.length >= (parseindex + 2)) {
				min = fullval.substr(parseindex, 2);
				parseindex += 2;
			}
			if (fullval.length >= (parseindex + 2)) {
				sec = fullval.substr(parseindex, 2);
				parseindex += 2;
			}
			if (fullval.length >= (parseindex + 3)) {
				millisec = fullval.substr(parseindex, 3);
			}
		}

		if (this.value) {
			if (!timeformat && this.value._timecheck) {
				timeformat = true;
			}

			if (dateformat) {
				if (year == "0000" && this._editformat_info._year == null) {
					year = this.value.getYear();
				}

				if (month == "00" && this._editformat_info._mon == null) {
					month = this.value.getMonth() + 1;
				}

				if (day == "00" && this._editformat_info._day == null) {
					day = this.value.getDate();
				}
			}

			if (timeformat) {
				if ((hour == "00" || !hour) && this._editformat_info._hour == null) {
					hour = this.value.getHours();
				}

				if ((min == "00" || !min) && this._editformat_info._min == null) {
					min = this.value.getMinutes();
				}

				if ((sec == "00" || !sec) && this._editformat_info._sec == null) {
					sec = this.value.getSeconds();
				}
			}
		}

		if (month) {
			var num_month = parseInt(month, 10);
			if (num_month <= 0 || num_month > 12) {
				num_month = 1;
			}

			if (month.length == 2
				 && num_month.toString().length == 1) {
				month = "0" + num_month.toString();
			}
			else {
				month = num_month.toString();
			}
		}

		if (day) {
			var num_day = parseInt(day, 10);
			if (num_day < 1 || num_day > 31) {
				if (day.length == 1) {
					day = "1";
				}
				else {
					day = "01";
				}
			}
		}

		if (timeformat) {
			if (dateformat == false) {
				var ret = new nexacro.Date(0, 0, 1, hour, min, sec, millisec);
				ret._timeonly = true;
				return ret;
			}

			if (month != "00" && month != "0") {
				return new nexacro.Date(year, month - 1, day, hour, min, sec, millisec);
			}

			return new nexacro.Date(year, month, day, hour, min, sec, millisec);
		}

		if (month != "00" && month != "0") {
			return new nexacro.Date(year, month - 1, day);
		}

		return new nexacro.Date(year, month, day);
	};
	_pCalendar._adjust_refer_index = function (adjobj, referobj) {
		if (referobj && referobj.index < adjobj.index) {
			if (referobj.length == 1) {
				return 1;
			}
		}

		return 0;
	};
	_pCalendar._adjust_refer_index_with_week = function (adjobj, referobj) {
		if (referobj && referobj.index < adjobj.index) {
			if (referobj.mask.length == 3) {
				var weekstrlen = 0;
				var week = 0;
				if (this._datelistS[week]) {
					weekstrlen = this._datelistS[week].length;
				}

				if (referobj.mask.length == weekstrlen) {
					return 0;
				}

				if (referobj.mask.length > weekstrlen) {
					return -(referobj.mask.length - weekstrlen);
				}

				if (referobj.mask.length < weekstrlen) {
					return weekstrlen - referobj.mask.length;
				}
			}
		}

		return 0;
	};
	_pCalendar._getFullValueFromDisplayText = function (edit_value) {
		var _info = this._editformat_info;
		var adjust_index = 0;

		if (_info == null) {
			return "";
		}

		var year, mon, day;
		if (_info._year) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._year, _info._mon);
			adjust_index += this._adjust_refer_index(_info._year, _info._day);
			adjust_index += this._adjust_refer_index_with_week(_info._year, _info._date);


			year = edit_value.substr(_info._year.index + adjust_index, _info._year.length);
			year = year.trim();
			if (year.length > 0 && _info._year.length == 2) {
				var refdate = this._postvalue;
				if (refdate == null) {
					refdate = this.value;
				}
				if (refdate == null) {
					refdate = new nexacro.Date();
				}

				if (refdate) {
					var front = refdate.toString().substring(0, 2);
					if (year.length == 2) {
						year = front + year;
					}
					else if (year.length == 1) {
						year = front + "0" + year;
					}
				}
			}
		}
		else {
			year = "";
		}

		if (_info._mon) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._mon, _info._year);
			adjust_index += this._adjust_refer_index(_info._mon, _info._day);
			adjust_index += this._adjust_refer_index_with_week(_info._mon, _info._date);

			mon = edit_value.substr(_info._mon.index + adjust_index, 2);
			mon = mon.trim();

			if (_info._mon.length == 4) {
				mon = mon.substr(2, 2);

				if (mon == "MM") {
					var v = this.value;
					v = v ? (v.getMonth() + 1) : "";
					mon = nexacro._toString(v).padLeft(2, "0");
				}
			}
			else if (_info._mon.length == 3) {
				month = edit_value.substr(_info._mon.index + adjust_index, 3);
				month.trim();

				var locale_info = nexacro.Locale.getLocaleInfo(this._locale);
				var monthlist = locale_info.month_names_short;
				var month_index = monthlist.indexOf(month);

				if (month_index >= 0) {
					mon = nexacro._toString(month_index + 1);
				}
				mon = mon.padLeft(2, "0");
			}
			else if (mon) {
				mon = mon.padLeft(2, "0");
			}
		}
		else {
			mon = "";
		}

		if (_info._day) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._day, _info._year);
			adjust_index += this._adjust_refer_index(_info._day, _info._mon);
			adjust_index += this._adjust_refer_index_with_week(_info._day, _info._date);

			day = edit_value.substr(_info._day.index + adjust_index, 2);
			day = day.trim();

			if (day) {
				day = day.padLeft(2, "0");
			}
		}
		else {
			day = "";
		}



		var hour = "";
		if (_info._hour) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._hour, _info._year);
			adjust_index += this._adjust_refer_index(_info._hour, _info._mon);
			adjust_index += this._adjust_refer_index(_info._hour, _info._day);
			adjust_index += this._adjust_refer_index_with_week(_info._hour, _info._date);


			hour = edit_value.substr(_info._hour.index + adjust_index, _info._hour.length).padLeft(2, "0");
		}

		var min = "";
		if (_info._min) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._min, _info._year);
			adjust_index += this._adjust_refer_index(_info._min, _info._mon);
			adjust_index += this._adjust_refer_index(_info._min, _info._day);
			adjust_index += this._adjust_refer_index_with_week(_info._min, _info._date);


			min = edit_value.substr(_info._min.index + adjust_index, _info._min.length).padLeft(2, "0");
		}

		var sec = "";
		if (_info._sec) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._sec, _info._year);
			adjust_index += this._adjust_refer_index(_info._sec, _info._mon);
			adjust_index += this._adjust_refer_index(_info._sec, _info._day);
			adjust_index += this._adjust_refer_index_with_week(_info._sec, _info._date);


			sec = edit_value.substr(_info._sec.index + adjust_index, _info._sec.length).padLeft(2, "0");
		}

		var millisec = "";
		if (_info._millisec) {
			adjust_index = 0;

			adjust_index += this._adjust_refer_index(_info._millisec, _info._year);
			adjust_index += this._adjust_refer_index(_info._millisec, _info._mon);
			adjust_index += this._adjust_refer_index(_info._millisec, _info._day);
			adjust_index += this._adjust_refer_index_with_week(_info._millisec, _info._date);

			millisec = edit_value.substr(_info._millisec.index + adjust_index, _info._millisec.length).padLeft(3, "0");
		}

		var normal_value = year.trim() + mon.trim() + day.trim() + hour.trim() + min.trim() + sec.trim() + millisec.trim();
		if (normal_value && normal_value.length) {
			normal_value = "";

			if (_info._year || _info._mon || _info._day) {
				normal_value += (year.trim().length ? year : "0000") + (mon.trim().length ? mon : "00") + (day.trim().length ? day : "00");
			}

			if (_info._hour || _info._min || _info._sec || _info._millisec) {
				normal_value += (hour.trim().length ? hour : "00") + (min.trim().length ? min : "00") + (sec.trim().length ? sec : "00") + (millisec.trim().length ? millisec : "000");
			}
		}

		return (normal_value === "" && this.displaynulltext !== "") ? "" : normal_value;
	};

	_pCalendar._makeCalendarText = function (value) {
		if (!value) {
			return "";
		}

		var oldformat = this._currentformat;
		this._currentformat = "dateformat";

		var date = this._makeMaskValue(value ? value.toString() : "");
		var mask = this._makeMask("dateformat", this._makeDateObj(value));
		var txt_idx = 0;
		var return_txt = "";
		var matchStr = "yMdHhmsl";


		this._currentformat = oldformat;

		for (var i = 0, n = mask.length; i < n; i++) {
			var mask_ch = mask.charAt(i);

			if (matchStr.indexOf(mask_ch) >= 0) {
				if (mask_ch == "M" && mask.charAt(i + 1) == "M" && mask.charAt(i + 2) == "M") {
					if (this.locale == "en_US") {
						return_txt += date.charAt(txt_idx++);
						return_txt += date.charAt(txt_idx++);
						return_txt += date.charAt(txt_idx);
						i += 2;
					}
				}
				else {
					return_txt += date.charAt(txt_idx);
				}
				txt_idx++;
			}
			else {
				if (mask_ch === "~" || mask_ch === "^") {
					return_txt += date.charAt(txt_idx);
					txt_idx++;
				}
				else {
					return_txt += mask_ch;
				}
			}
		}

		return return_txt;
	};

	_pCalendar._makeDateObj = function (v) {
		if (this._isUndefinedDate(v)) {
			return;
		}
		if (this._isNullDate(v)) {
			return null;
		}
		if (this._isEmptyStr(v)) {
			return "";
		}
		if (v._type_name == "Date") {
			return v;
		}

		if (this._currentformat == "dateformat") {
			var _info = this._dateformat_info;
		}
		else {
			var _info = this._editformat_info;
		}

		var ret = new Object();
		var year = mon = day = hour = min = sec = millisec = "";
		var idx = 0;
		var mask_value = "";
		var date = null;

		var val = v;
		var v = this._makeMaskValue(v, true);

		var len = 0;

		for (var i = 0, n = _info.format.length; i < n; i++) {
			if (_info._year && _info._year.index == i) {
				if (_info._year.length == 2) {
					year = val.substr(0, 2);
					year += v.substr(idx, _info._year.length);
				}
				else {
					year = v.substr(idx, _info._year.length);
				}
				idx += _info._year.length;
			}
			if (_info._mon && _info._mon.index == i) {
				len = _info._mon.length;

				if (len == 1) {
					if (this._currentformat == "dateformat" && _info._mon.single_digit) {
						mon = v.substr(idx, len);
					}
					else {
						mon = v.substr(idx, 2);
						len = 2;
					}
				}
				else if (len == 2) {
					mon = v.substr(idx, len);
				}
				else {
					var dateObj = this._getDateObj(val);
					mon = dateObj.getMonth();
					month = this._monthlistL[mon];
					mon = mon + 1;
					len = month.length;
				}

				idx += len;
			}
			if (_info._day && _info._day.index == i) {
				len = _info._day.length;
				if ((_info._day.length == 1 && !_info._day.single_digit) || this._currentformat == "editformat") {
					day = v.substr(idx, 2);
					len = 2;
				}
				else {
					day = v.substr(idx, _info._day.length);
				}

				idx += len;
			}
			if (_info._date && _info._date.index == i) {
				len = _info._date.length;
				{

					var dateObj = this._getDateObj(val);
					var dateofweek = dateObj.getDay();
					if (dateofweek) {
						date = this._datelistS[dateofweek];
					}
					else {
						date = this._datelistS[0];
					}

					if (_info._date.mask === "dddd") {
						if (this._currentformat == "editformat") {
							date = v.substr(idx, len);
						}
						else {
							date = this._datelistL[dateofweek];
						}
					}
					len = date.length;
				}
				idx += len;
			}
			if (_info._hour && _info._hour.index == i) {
				hour = v.substr(idx, _info._hour.length).padLeft(_info._hour.length, "0");

				if (_info._hour.mask === "hh") {
					var hh = parseInt(hour);
					if (hh > 12 && hh < 24) {
						hh -= 12;
						hour = nexacro._toString(hh);
						hour = hour.padLeft(2, "0");
					}
				}
				idx += _info._hour.length;
			}
			if (_info._min && _info._min.index == i) {
				min = v.substr(idx, _info._min.length).padLeft(_info._min.length, "0");

				idx += _info._min.length;
			}
			if (_info._sec && _info._sec.index == i) {
				sec = v.substr(idx, _info._sec.length).padLeft(_info._sec.length, "0");

				idx += _info._sec.length;
			}
			if (_info._millisec && _info._millisec.index == i) {
				millisec = v.substr(idx, _info._millisec.length).padLeft(_info._millisec.length, "0");

				idx += _info._millisec.length;
			}
		}

		ret.year = parseInt(year, 10);
		ret.mon = parseInt(mon, 10);
		ret.day = parseInt(day, 10);
		ret.hour = parseInt(hour, 10);
		ret.min = parseInt(min, 10);
		ret.sec = parseInt(sec, 10);
		ret.millisec = parseInt(millisec, 10);

		if ((ret.year != undefined || ret.year > 0) && (ret.mon > 0 && ret.mon <= 12)) {
			ret.mon -= 1;
		}
		else {
			ret.mon = 0;
		}

		if (!(ret.day >= 1 && ret.day <= 31)) {
			ret.day = 1;
		}

		if (!(_info._hour || _info._min || _info._sec || _info._millisec)) {
			if (ret.day) {
				date = new nexacro.Date(ret.year, ret.mon, ret.day);
			}
			else {
				date = new nexacro.Date(ret.year, ret.mon);
			}
			date._timecheck = false;
		}
		else {
			date = new nexacro.Date(ret.year, ret.mon, ret.day, ret.hour, ret.min, ret.sec, ret.millisec);
			if (this._isTimeMask()) {
				date._timeonly = true;
			}
		}
		ret = null;

		try {
			return date;
		}
		finally {
			date = null;
		}
	};

	_pCalendar._isTimeMask = function () {
		var _info;
		if (this._currentformat == "dateformat") {
			_info = this._dateformat_info;
		}
		else {
			_info = this._editformat_info;
		}

		if (_info._year || _info._mon || _info._day) {
			return false;
		}

		if (_info._hour || _info._min || _info._sec || _info._millisec) {
			return true;
		}

		return false;
	};
	_pCalendar._toValueStr = function (v) {
		var str_v = "";
		if (this._isUndefinedDate(v)) {
			return;
		}
		if (this._isNullDate(v)) {
			return null;
		}
		else if (this._isEmptyStr(v)) {
			return "";
		}
		else if (typeof v != "object") {
			str_v = v;
		}
		else {
			str_v = v.toString();
		}

		if (this._currentformat == "dateformat") {
			var _info = this._dateformat_info;
		}
		else {
			var _info = this._editformat_info;
		}

		var year = "";
		var month = "";
		var day = "";
		var hour = "";
		var min = "";
		var sec = "";
		var millisec = "";

		var idx = 0;

		var mask_value = "";

		if (!this._isTimeMask()) {
			if (_info._year) {
				year = str_v.substr(idx, 4);
				mask_value += year;
			}

			idx += 4;

			if (_info._mon) {
				month = str_v.substr(idx, 2);
				mask_value += month;
			}

			idx += 2;

			if (_info._day) {
				day = str_v.substr(idx, 2);
				mask_value += day;
			}

			idx += 2;
		}
		else if (v instanceof nexacro.Date || str_v.length > 9) {
			idx = str_v.length - 9;
		}

		if (_info._hour) {
			hour = str_v.substr(idx, 2);
			mask_value += hour;
		}

		idx += 2;

		if (_info._min) {
			min = str_v.substr(idx, 2);
			mask_value += min;
		}

		idx += 2;

		if (_info._sec) {
			sec = str_v.substr(idx, 2);
			mask_value += sec;
		}

		idx += 2;

		if (_info._millisec) {
			millisec = str_v.substr(idx, 3);
			mask_value += millisec;
		}

		return mask_value;
	};

	_pCalendar._makeFormatInfo = function (format, is_editformat) {
		var pass_char = null;
		if (format == "SHORTDATE" || format == "LONGDATE") {
			var locale = this._getLocale();
			if (!locale) {
				locale = nexacro.BrowserLang;
			}

			format = nexacro.Locale._makeDateMaskString(locale, format);

			if (locale.indexOf("lt") == 0 || locale.indexOf("lv") == 0 || locale.indexOf("sv") == 0) {
				pass_char = [];
				pass_char[0] = {
					c : "\\m", 
					r : "m"
				};
				pass_char[1] = {
					c : "\\d", 
					r : "d"
				};
				pass_char[2] = {
					c : "\\a", 
					r : "a"
				};
			}

			if (is_editformat) {
				var mon_index = format.indexOf("M");
				var day_index = format.indexOf("d");

				if (format.slice(mon_index, mon_index + 4) == "MMMM") {
					format = format.replace("MMMM", "MM");
				}
				else if (format.slice(mon_index, mon_index + 3) == "MMM") {
					foramt = format.replace("MMM", "MM");
				}
				else if (format.slice(mon_index, mon_index + 2) != "MM") {
				}

				if (format.slice(day_index, day_index + 4) == "dddd") {
					day_index = format.slice(day_index + 4, format.length - 4).indexOf("d") + 4;
				}
				else if (format.slice(day_index, day_index + 3) == "ddd") {
					day_index = format.slice(day_index + 3, format.length - 3).indexOf("d") + 3;
				}
				else if (format.slice(day_index, day_index + 2) != "dd") {
				}

				mon_index = day_index = null;
			}
		}

		if (this.locale != "en_US") {
			var mon_index = format.indexOf("M");
			if (format.slice(mon_index, mon_index + 3) == "MMM") {
				format = format.replace("MMM", "M");
			}
		}

		var format_real = format;
		var format_len = format_real.length;
		var char_info = [];
		var format_info = [];

		if (pass_char) {
			for (var i = 0, n = pass_char.length; i < n; i++) {
				format_real = format_real.replace(pass_char[i].c, pass_char[i].r);
			}
		}

		for (var i = 0; i < format_len; i++) {
			char_info = {
				ch : format_real.charAt(i), 
				idx : i
			};
			format_info[i] = char_info;
		}

		if (pass_char) {
			for (var i = 0, n = pass_char.length; i < n; i++) {
				format = format.replace(pass_char[i].c, "x");
			}
		}

		if (format && format.length) {
			format = format.replace("sss", "lll");
		}

		var y_exp = /y{2,4}/g;
		var M_exp = /M{3}|M{4}|M{1,2}|M{1,3}/g;
		var d_exp = /d{1,2}/g;
		var date_exp = /d{3,4}/g;
		var h_exp = /H{1,2}|h{1,2}/g;
		var m_exp = /m{1,2}/g;
		var s_exp = /s{1,2}/g;
		var ms_exp = /l{3}/g;

		var year_format = y_exp.exec(format);
		var mon_format = M_exp.exec(format);
		var date_format = date_exp.exec(format);
		if (date_format) {
			if (date_format[0].length == 3) {
				var replace_str = "   ";
			}
			else if (date_format[0].length == 4) {
				var replace_str = "    ";
			}
			format = format.replace(/d{3,4}/g, replace_str);
		}

		var day_format = d_exp.exec(format);
		var hour_format = h_exp.exec(format);
		var min_format = m_exp.exec(format);
		var sec_format = s_exp.exec(format);
		var millisec_format = ms_exp.exec(format);



		var year = null;
		var mon = null;
		var day = null;
		var date = null;
		var hour = null;
		var min = null;
		var sec = null;
		var millisec = null;

		var list = [];

		if (year_format) {
			year = {
				mask : year_format[0], 
				index : year_format.index, 
				length : year_format[0].length
			};
			list.push(year);
		}
		if (mon_format) {
			mon = {
				mask : mon_format[0], 
				index : mon_format.index, 
				length : mon_format[0].length, 
				single_digit : true
			};
			list.push(mon);
		}
		if (day_format) {
			day = {
				mask : day_format[0], 
				index : day_format.index, 
				length : day_format[0].length, 
				single_digit : true
			};
			list.push(day);
		}
		if (date_format) {
			date = {
				mask : date_format[0], 
				index : date_format.index, 
				length : date_format[0].length
			};
		}
		if (hour_format) {
			hour = {
				mask : hour_format[0], 
				index : hour_format.index, 
				length : hour_format[0].length
			};
			list.push(hour);
		}
		if (min_format) {
			min = {
				mask : min_format[0], 
				index : min_format.index, 
				length : min_format[0].length
			};
			list.push(min);
		}
		if (sec_format) {
			sec = {
				mask : sec_format[0], 
				index : sec_format.index, 
				length : sec_format[0].length
			};
			list.push(sec);
		}
		if (millisec_format) {
			millisec = {
				mask : millisec_format[0], 
				index : millisec_format.index, 
				length : millisec_format[0].length
			};
			list.push(millisec);
		}

		list.sort(function (a, b) {
			return a.index - b.index;
		});

		return {
			format : format_real, 
			format_info : format_info, 
			format_list : list, 
			_year : year, 
			_mon : mon, 
			_day : day, 
			_date : date, 
			_hour : hour, 
			_min : min, 
			_sec : sec, 
			_millisec : millisec
		};
	};

	_pCalendar._getEndDay = function (y, m) {
		var endDayN = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
		var endDayL = new Array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

		var ret = "";
		var year = parseInt(y);
		var month = parseInt(m);

		if (year == 0) {
			ret = endDayN[month - 1];
			return ret;
		}

		if ((year % 4) == 0 && (year % 100) != 0 || (year % 400) == 0) {
			ret = endDayL[month - 1];
		}
		else {
			ret = endDayN[month - 1];
		}
		endDayN = endDayL = null;
		return ret;
	};

	_pCalendar._getDateObj = function (v) {
		if (!v) {
			return new nexacro.Date();
		}

		v = v.replace(/-/g, "");
		var year = parseInt(v.substr(0, 4), 10);
		var month = parseInt(v.substr(4, 2), 10) - 1;
		var day = parseInt(v.substr(6, 2), 10);
		return new nexacro.Date(year, month, day);
	};

	_pCalendar._getPopupSizeArr = function () {
		var popupsize;
		if (this.type == "normal") {
			popupsize = this.on_find_CurrentStyle_popupsize(this._pseudo);
		}
		else {
			popupsize = this._init_popupsize;
			if (!popupsize) {
				popupsize = this.on_find_CurrentStyle_popupsize(this._pseudo);
			}
		}

		var str = popupsize.value;
		var arr = str.split(/\s+/);

		if (arr.length == 2) {
			return {
				width : parseInt(arr[0], 10), 
				height : parseInt(arr[1], 10)
			};
		}
		else {
			return {
				width : parseInt(arr[0], 10), 
				height : parseInt(arr[0], 10)
			};
		}
	};

	_pCalendar._getPickerValue = function (v) {
		var date = v ? v : new Date();
		var year = date.getFullYear() + "";
		year = this._validationDateStr(year, "year");
		var month = date.getMonth() + 1;
		month = this._validationDateStr(month);
		var day = date.getDate();
		day = this._validationDateStr(day);


		return year + month + day;
	};



	_pCalendar._getSplitDate = function (v) {
		if (this._isTimeMask()) {
			var hour = v.substr(0, 2);
			hour = hour ? hour : "NaN";
			var min = v.substr(2, 2);
			min = min ? min : "NaN";
			var sec = v.substr(4, 2);
			sec = sec ? sec : "NaN";
			var millisec = v.substr(6, 3);
			millisec = millisec ? millisec : "NaN";
		}
		else {
			var year = v.substr(0, 4);
			year = year ? year : "NaN";
			var mon = v.substr(4, 2);
			mon = mon ? mon : "NaN";
			var day = v.substr(6, 2);
			day = day ? day : "NaN";
			var hour = v.substr(8, 2);
			hour = hour ? hour : "NaN";
			var min = v.substr(10, 2);
			min = min ? min : "NaN";
			var sec = v.substr(12, 2);
			sec = sec ? sec : "NaN";
			var millisec = v.substr(14, 3);
			millisec = millisec ? millisec : "NaN";
		}

		return {
			year : year, 
			mon : mon, 
			day : day, 
			hour : hour, 
			min : min, 
			sec : sec, 
			millisec : millisec
		};
	};

	_pCalendar._changeYearValue = function (origin_year) {
		var _info = this._editformat_info;
		var edit = this.calendaredit;
		var edit_api = edit._edit_base_api;
		var text = edit_api._getText();

		if (_info._year) {
			var adjust_index = 0;
			if ((_info._mon && _info._year.index > _info._mon.index) || (_info._day && _info._year.index > _info._day.index)) {
				if (_info._mon && _info._mon.length == 1 && !_info._mon.single_digit) {
					adjust_index++;
				}
				if (_info._day && _info._day.length == 1 && !_info._day.single_digit) {
					adjust_index++;
				}
			}

			var year_str = text.substr(_info._year.index + adjust_index, _info._year.length);
			var year_trim = year_str.trim();
			var year = parseInt(year_trim, 10);
			var year_len = year_trim.length;

			var value = edit_api._getValue();
			var val_trim = value ? value.trim() : "";
			if (val_trim) {
				if (year_trim === "") {
					if (this._prevalue) {
						var fullyear = this._prevalue.getFullYear();
						text = text.replace(year_str, fullyear);
					}
					else {
						text = text.replace(year_str, "0000");
					}
				}
				else if (year_trim.length != 4) {
					if (!origin_year) {
						if (year_len === 1) {
							year = "000" + year;
						}
						else if (year_len === 2) {
							year = "00" + year;
						}
						else if (year_len === 3) {
							year = "0" + year;
						}
						text = text.replace(year_str, year);
					}
				}
			}
		}

		if (_info._mon) {
			if (_info._mon.mask == "MMMM" && this.value) {
				var m = this.value.getMonth() + 1;
				m = nexacro._toString(m).padLeft(4, "0");
				text = text.replace(_info._mon.mask, m);
			}
		}

		return text;
	};

	_pCalendar._setDefaultCaret = function () {
		var edit = this.calendaredit;
		if (edit && nexacro._checkActiveElement(edit._input_element)) {
			this.setCaretPos(0);
		}
	};

	_pCalendar._setPreValueAndText = function (pre_value) {
		var pre_str = "";
		if (pre_value) {
			pre_str = pre_value.toString();
		}
		this._prevalue = pre_value;
		this._pretext = this._makeCalendarText(pre_value);
	};

	_pCalendar._setPostValueAndText = function (post_value) {
		var post_str = "";
		if (post_value) {
			post_str = post_value.toString();
		}
		this._postvalue = post_value;
		this._posttext = this._makeCalendarText(post_value);
	};

	_pCalendar._setValue = function (v, user_set) {
		if (!this._is_created && !this._is_primitivevalue) {
			this._primitivevalue = v;
			this._is_primitivevalue = true;
			return;
		}

		if (this._bindsource) {
			this.value = v;
			this._bindsource = false;

			this.on_apply_value();
		}
		else {
			var date_obj;
			var currentformat = this._currentformat;

			if (this._isUndefinedDate(v)) {
				date_obj = v;
			}
			else if (this._isNullDate(v)) {
				date_obj = null;
			}
			else if (this._isEmptyStr(v)) {
				date_obj = "";
			}
			else {
				if (this._is_primitivevalue) {
					this._is_primitivevalue = false;
				}
				else {
					this._currentformat = "editformat";
				}

				date_obj = this._makeDateObj(v);
			}

			this._currentformat = currentformat;
			this._bindsource = false;

			var ret = this.applyto_bindSource("value", date_obj);
			if (ret == false) {
				currentformat = this._currentformat;
				this._currentformat = "dateformat";
				this.on_apply_fake_value(this.value);

				this._currentformat = currentformat;
				return false;
			}

			if (this._bind_event) {
				var _binditem = null;
				var _form = this._getRootForm();
				if (_form) {
					_binditem = _form._bind_manager._FindBindItem(this, "value");
					_form = null;
				}

				if (_binditem && date_obj && date_obj.valueOf() != (this.value ? this.value.valueOf() : this.value)) {
					this._currentformat = currentformat;
					_binditem = null;
					return ret;
				}
			}


			this.value = date_obj;
			this._currentformat = currentformat;

			this.on_apply_value();

			return ret;
		}
	};

	_pCalendar._setUserValue = function (v) {
		if (!this._is_created && !this._is_primitivevalue) {
			this._primitivevalue = v;
			this._is_primitivevalue = true;
			return;
		}

		var date_obj;
		var format_temp = this.editformat;
		var currentformat = this._currentformat;

		if (this._isUndefinedDate(v)) {
			date_obj = v;
		}
		else if (this._isNullDate(v)) {
			date_obj = null;
		}
		else if (this._isEmptyStr(v)) {
			date_obj = "";
		}
		else {
			this._currentformat = "editformat";

			var _info = this._editformat_info;
			if (_info._year || _info._mon || _info._day) {
				if (_info._hour || _info._min || _info._sec || _info._millisec) {
					this.set_editformat("yyyy-MM-dd HH:mm:ss sss");
				}
				else {
					this.set_editformat("yyyy-MM-dd");
				}
			}
			else {
				this.set_editformat("HH:mm:ss sss");
			}

			date_obj = this._makeDateObj(v);
		}

		this._currentformat = currentformat;
		this._bindsource = false;

		var ret = this.applyto_bindSource("value", date_obj);

		if (ret === false) {
			currentformat = this._currentformat;
			this._currentformat = "dateformat";
			this.on_apply_fake_value(this.value);
			this._currentformat = currentformat;
			return false;
		}

		this.value = date_obj;
		this._currentformat = currentformat;

		this.set_editformat(format_temp);

		this.on_apply_value();
	};

	_pCalendar._setValue_JSDate = function (date_obj) {
		var date_str = date_obj.toString();
		var newDate = new nexacro.Date(date_str);

		this._setValue(newDate);
	};

	_pCalendar._setValue_JSDate = function (date_obj) {
		var date_str = date_obj.toString();
		var newDate = new nexacro.Date(date_str);

		this._setValue(newDate);
	};

	_pCalendar._closePopup = function () {
		if (this.type == "system") {
			nexacro._closeSystemCalendar();
			return;
		}


		var popupcalendar = this.popupcalendar;
		var popupwindow = this.popupwindow;

		if (popupwindow) {
			popupwindow._closePopup();
		}
		if (nexacro._enableaccessibility && this.type != "monthonly") {
			this._want_arrows = false;
		}
	};

	_pCalendar._fireKeydownEvent = function () {
		var edit = this.calendaredit;
		var edit_ctrl = edit._edit_base_api;

		if (edit && edit.value != undefined) {
			var focus_value = edit_ctrl._getFocusText();
			var current_value = edit_ctrl._getText();

			if (focus_value != current_value && focus_value != current_value.trim()) {
				var prevalue = this._getDateObjFromDisplayText(focus_value);
				var value = this._getDateObjFromDisplayText(current_value);

				this._currentformat = "editformat";
				this._setPreValueAndText(prevalue);
				this._setPostValueAndText(value);

				var ret = this.on_fire_canchange(this, this._pretext, this._prevalue, this._posttext, this._postvalue);
				if (ret || ret == undefined) {
					this._setValue(this._postvalue);
				}
				else {
					this._setValue(this._prevalue);
					return;
				}

				this._fireOnchangedEvent(this._prevalue, this.value);
			}
		}
	};

	_pCalendar._fireOnchangedEvent = function (prevalue, postvalue) {
		prevalue = prevalue ? prevalue.toString() : prevalue;
		postvalue = postvalue ? postvalue.toString() : postvalue;

		if (prevalue != postvalue) {
			this._flag_update2dataset = true;
			this.on_fire_onchanged(this, this._pretext, this._prevalue, this._posttext, this._postvalue);
			this._flag_update2dataset = false;

			var edit = this.calendaredit;
			if (edit) {
				var edit_api = edit._edit_base_api;
				edit_api._setFocusValue();
			}
		}
	};

	_pCalendar._getCurrentDate = function () {
		var currentDate = new Date();
		year = currentDate.getFullYear();
		month = currentDate.getMonth() + 1;
		day = currentDate.getDate();
		currentDate = null;
		return year + " " + month + " " + day;
	};

	_pCalendar._getRange = function (pos, formatinfo) {
		var ret = "";
		var list_len = formatinfo.format_list.length;
		var tmp_idx = 0;

		for (var i = 0; i < list_len; i++) {
			var format_obj = formatinfo.format_list[i];
			var start = format_obj.index;
			var end = format_obj.index + format_obj.length;

			if (start <= pos && end >= pos) {
				ret = format_obj;

				break;
			}
		}

		return ret;
	};

	delete _pCalendar;
	_pCalendar = null;

	nexacro.CalendarDropButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};
	var _pCalendarDropButtonCtrl = nexacro.CalendarDropButtonCtrl.prototype = nexacro._createPrototype(nexacro.ImageButtonCtrl, nexacro.CalendarDropButtonCtrl);

	_pCalendarDropButtonCtrl.on_apply_custom_setfocus = function (evt_name) {
		var parent = this.parent;
		if (parent) {
			var edit = parent.calendaredit;
			if (edit) {
				if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
					edit.on_apply_custom_setfocus(evt_name);
				}
				else {
					nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
				}
			}
		}
	};


	_pCalendarDropButtonCtrl.on_tap_basic_action = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!nexacro._enableaccessibility) {
			this.parent._is_dropbutton = true;
		}
		return nexacro.Component.prototype.on_tap_basic_action.call(this, elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
	};

	_pCalendarDropButtonCtrl._on_drag = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
	};

	_pCalendarDropButtonCtrl.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (nexacro.isTouchInteraction && nexacro.SupportTouch && !application.enabletouchevent) {
			var evt = new nexacro.EventInfo(this, "ondropdown");
			this.parent.on_notify_mobile_ondropdown(this, evt);
		}

		return this.parent.on_fire_onclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
	};

	_pCalendarDropButtonCtrl.on_fire_ondblclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return this.parent.on_fire_ondblclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this.parent, from_refer_comp);
	};

	delete _pCalendarDropButtonCtrl;

	nexacro.CalendarSpinButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ImageButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
	};
	var _pCalendarSpinButtonCtrl = nexacro.CalendarSpinButtonCtrl.prototype = nexacro._createPrototype(nexacro.ImageButtonCtrl, nexacro.CalendarSpinButtonCtrl);

	_pCalendarSpinButtonCtrl.on_apply_custom_setfocus = function (evt_name) {
		var parent = this.parent;
		if (parent) {
			var edit = parent.calendaredit;
			if (edit) {
				if (!(nexacro.isTouchInteraction && nexacro.SupportTouch)) {
					edit.on_apply_custom_setfocus(evt_name);
					if (nexacro._isDesktop() && nexacro.Browser == "Runtime") {
						edit.setCaretPos(parent._caret_pos.begin);
					}
				}
				else {
					nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
				}
			}
		}
	};

	_pCalendarSpinButtonCtrl.on_tap_basic_action = function (elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!nexacro._enableaccessibility) {
			this.parent._is_dropbutton = true;
		}
		return nexacro.Component.prototype.on_tap_basic_action.call(this, elem, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
	};

	_pCalendarSpinButtonCtrl._on_drag = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
	};

	_pCalendarSpinButtonCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_cursor(pseudo) || this._find_inherit_pseudo_obj("cursor", pseudo) || nexacro.Component._default_cursor;
	};

	delete _pCalendarSpinButtonCtrl;

	nexacro.CalendarEditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.MaskEditCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._event_list["oneditclick"] = 1;
		this._accessibility_role = "calendar";
	};

	var _pCalendarEditCtrl = nexacro._createPrototype(nexacro.MaskEditCtrl, nexacro.CalendarEditCtrl);
	nexacro.CalendarEditCtrl.prototype = _pCalendarEditCtrl;

	_pCalendarEditCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent.on_find_CurrentStyle_align(pseudo, this) || nexacro.Component._default_align;
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_font(pseudo, this) || nexacro.Component.prototype.on_find_CurrentStyle_font.call(this, pseudo);
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent.on_find_CurrentStyle_color(pseudo, this) || nexacro.Component._default_color;
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		return this.parent.on_find_CurrentStyle_accessibility(pseudo, this) || nexacro.Component._default_accessibility;
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.on_find_CurrentStyle_background(pseudo, this);
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.on_find_CurrentStyle_border(pseudo, this);
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.on_find_CurrentStyle_bordertype(pseudo, this);
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.on_find_CurrentStyle_gradation(pseudo, this);
	};

	_pCalendarEditCtrl.on_find_CurrentStyle_displaynulltextcolor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_displaynulltextcolor(pseudo, this);
	};


	_pCalendarEditCtrl.on_apply_style_displaynulltextcolor = function (displaynulltextcolor) {
		this.parent.currentstyle.displaynulltextcolor = displaynulltextcolor;
		nexacro.MaskEditCtrl.prototype.on_apply_style_displaynulltextcolor.call(this, displaynulltextcolor);
	};

	_pCalendarEditCtrl.on_create_contents = function () {
		var control = this.getElement();
		if (control) {
			var input_elem = this._input_element = new nexacro.InputElement(control);
			this._edit_base_api = new nexacro.EditMaskDate(this);

			var curstyle = this.currentstyle;

			input_elem.setElementSize(this._client_width, this._client_height);
			input_elem.setElementFont(curstyle.font);
			input_elem.setElementColor(curstyle.color);
			input_elem.setElementAlign(curstyle.align);
			input_elem.setElementSelectColor(curstyle.selectcolor);
			input_elem.setElementSelectBackgroundColor(curstyle.selectbackground);
			input_elem.setElementDisplayNullTextColor(curstyle.displaynulltextcolor);
		}
	};

	_pCalendarEditCtrl._getFormChildById = function (id) {
		return this.parent._getFormChildById(id);
	};

	_pCalendarEditCtrl._getFromComponent = function (comp) {
		var parent = comp.parent;
		if (parent && parent._isPopupVisible()) {
			return parent;
		}
		else {
			return nexacro.Component.prototype._getFromComponent.call(this, comp);
		}
	};

	_pCalendarEditCtrl._getAccessibilityRole = function (accessibility) {
		var calendar = this.parent;
		if (calendar) {
			var accessibility = calendar.on_find_CurrentStyle_accessibility(calendar._pseudo);
			return calendar._getAccessibilityRole(accessibility);
		}
		return nexacro.Component.prototype._getAccessibilityRole.call(this, accessibility);
	};

	_pCalendarEditCtrl._getAccessibilityLabel = function (accessibility) {
		var calendar = this.parent;
		if (calendar) {
			var accessibility = calendar.on_find_CurrentStyle_accessibility(calendar._pseudo);
			return calendar._getAccessibilityLabel(accessibility);
		}
		return nexacro.Component.prototype._getAccessibilityLabel.call(this, accessibility);
	};

	_pCalendarEditCtrl._getAccessibilityDescription = function (accessibility) {
		var calendar = this.parent;
		if (calendar) {
			var accessibility = calendar.on_find_CurrentStyle_accessibility(calendar._pseudo);
			return calendar._getAccessibilityDescription(accessibility);
		}
		return nexacro.Component.prototype._getAccessibilityDescription.call(this, accessibility);
	};

	_pCalendarEditCtrl._getAccessibilityAction = function (accessibility) {
		var calendar = this.parent;
		if (calendar) {
			var accessibility = calendar.on_find_CurrentStyle_accessibility(calendar._pseudo);
			return calendar._getAccessibilityAction(accessibility);
		}
		return nexacro.Component.prototype._getAccessibilityAction.call(this, accessibility);
	};

	_pCalendarEditCtrl._on_getAccessibilityAdditionalLabel = function () {
		if (nexacro.OS == "iOS" && nexacro.OSVersion >= 8) {
			return this.value ? this.text : "";
		}
	};

	_pCalendarEditCtrl.set_value = function (v, apply_fake) {
		v = nexacro._toString(v);
		if (v && v !== undefined && v != "") {
			v = v.replace(/&quot;/g, "\"");
		}

		if (v != this.value) {
			var form = this._getRootForm();
			var api = this._edit_base_api;

			if (!this.applyto_bindSource("value", v)) {
				return;
			}

			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				if (api) {
					var old_keyinput_event = api._accept_keyinput_event;
					api._accept_keyinput_event = false;

					this._setValue(v);
					api._accept_keyinput_event = old_keyinput_event;
				}
				else {
					this._setValue(v);
				}

				if (nexacro.BrowserVersion <= 8) {
					if (form && form._bFireLoadEvent) {
						this._recreateInputElement();
					}
				}
			}
			else {
				this._setValue(v);
			}

			if (api && !apply_fake) {
				api._setFocusValue();
			}
		}

		this._setAccessibilityValue(this.value);
		if (this._is_created && nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			var input_elem = this._input_element;
			input_elem._setElementInputLabel();
		}
	};

	_pCalendarEditCtrl.on_apply_type = function () {
		var control = this.getElement();
		if (control) {
			this._edit_base_api = null;
			this._edit_base_api = new nexacro.EditMaskDate(this);

			this._input_element.setElementInputType(this.type);
			this._input_element.setElementInputTypeKeypad(this.type);
		}
	};

	_pCalendarEditCtrl._accept_keydown_event = function (keyCode) {
		var pThis = this.parent;

		if (pThis && (keyCode >= 37 && keyCode <= 40)) {
			if (pThis.isDropdown()) {
				return false;
			}
			else {
				if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
					if (keyCode == 38 || keyCode == 40) {
						return false;
					}
				}
			}
		}

		return true;
	};

	_pCalendarEditCtrl._on_input_keyinput = function (elem) {
		var api = this._edit_base_api;
		if (api) {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
				if (api._is_selected()) {
					api._on_input_keyinput(elem);
					api._on_input_keyinput_after();
				}
			}

			var calendar = this.parent;
			var calendarType = calendar ? calendar.type : null;

			if (calendarType == "system") {
				this._input_element._is_keydown = true;
			}

			api._on_input_keyinput(elem);
			api._on_input_keyinput_after();

			if (calendarType == "system") {
				if (this._input_element._is_keydown) {
					this._input_element._is_keydown = false;
				}
				calendar._setValue(api._getValue());
			}
		}
	};

	if ((nexacro.isTouchInteraction && nexacro.SupportTouch) || (nexacro._isMobile && nexacro._isMobile())) {
		_pCalendarEditCtrl.on_apply_mask = function () {
			var api = this._edit_base_api;
			if (api) {
				var strMask = this.mask;
				if (!strMask) {
					strMask = "";
				}
				api.setMask(strMask, true);
			}
		};
	}

	if ((nexacro.isTouchInteraction && nexacro.SupportTouch) || (nexacro._isMobile && nexacro._isMobile())) {
		_pCalendarEditCtrl.on_apply_mask = function () {
			var api = this._edit_base_api;
			if (api) {
				var strMask = this.mask;
				if (!strMask) {
					strMask = "";
				}
				api.setMask(strMask, true);
			}
		};
	}

	delete _pCalendarEditCtrl;

	nexacro.CalendarPopupWindow = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.PopupComponent.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pCalendarPopupWindow = nexacro._createPrototype(nexacro.PopupComponent, nexacro.CalendarPopupWindow);
	nexacro.CalendarPopupWindow.prototype = _pCalendarPopupWindow;
	_pCalendarPopupWindow._type_name = "CalendarPopupWindow";

	_pCalendarPopupWindow._getMainFrame = function () {
		var form = this;
		while (form && form instanceof nexacro.MainFrame) {
			form = form.parent;
		}
		return form;
	};

	delete _pCalendarPopupWindow;

	nexacro.CalendarCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Calendar.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;

		this._value;
	};

	var _pCalendarCtrl = nexacro._createPrototype(nexacro.Calendar, nexacro.CalendarCtrl);
	nexacro.CalendarCtrl.prototype = _pCalendarCtrl;
	_pCalendarCtrl._type_name = "CalendarControl";

	nexacro._setForControlStyleFinder(_pCalendarCtrl);

	_pCalendarCtrl._setValueCtrl = function (fire_event) {
		this._currentformat = "editformat";
		var edit = this.calendaredit;
		var edit_ctrl = edit._edit_base_api;

		if (edit && edit.value != undefined) {
			var focus_value = edit_ctrl._getFocusText();
			var current_value = edit_ctrl._getText();

			if (focus_value != current_value && focus_value != current_value.trim()) {
				var text = this._changeYearValue(true);
				var post_value = this._getDateObjFromDisplayText(text);
				var pre_value = this._getDateObjFromDisplayText(focus_value);

				this._setPreValueAndText(pre_value);
				this._setPostValueAndText(post_value);

				if (fire_event) {
					var ret = this.on_fire_canchange(this, this._pretext, this._prevalue, this._posttext, this._postvalue);
					if (ret || ret == undefined) {
						this._setValue(this._postvalue);
					}
					else {
						this._setValue(this._prevalue);
						return;
					}

					this._fireOnchangedEvent(this._prevalue, this.value);
				}
				else {
					this._setValue(this._postvalue);
				}
			}
		}
	};

	_pCalendarCtrl.on_created_contents = function () {
		nexacro.Calendar.prototype.on_created_contents.call(this);

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			this._control_element.setElementAccessibilityHidden(true);
		}
	};

	delete _pCalendarCtrl;
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.GroupBox) {
	nexacro.GroupBox_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}
	};

	var _pGroupBoxStyle = nexacro._createPrototype(nexacro.Style, nexacro.GroupBox_Style);
	nexacro.GroupBox_Style.prototype = _pGroupBoxStyle;

	eval(nexacro._createBackgroundAttributeEvalStr("_pGroupBoxStyle", "titlebackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pGroupBoxStyle", "titlegradation"));
	eval(nexacro._createValueAttributeEvalStr("_pGroupBoxStyle", "titleimage"));
	eval(nexacro._createAlignAttributeEvalStr("_pGroupBoxStyle", "titleimagealign"));
	eval(nexacro._createPaddingAttributeEvalStr("_pGroupBoxStyle", "titleimagepadding"));
	eval(nexacro._createPaddingAttributeEvalStr("_pGroupBoxStyle", "titlepadding"));
	eval(nexacro._createValueAttributeEvalStr("_pGroupBoxStyle", "titleview"));

	_pGroupBoxStyle.__custom_emptyObject = function () {
		this.titlebackground = null;
		this.titlegradation = null;
		this.titleimage = null;
		this.titleimagealign = null;
		this.titleimagepadding = null;
		this.titlepadding = null;
		this.titleview = null;
	};

	_pGroupBoxStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.titlebackground && !this.titlebackground._is_empty) {
			val += "titlebackground:" + this.titlebackground._value + "; ";
		}
		if (this.titlegradation && !this.titlegradation._is_empty) {
			val += "titlegradation:" + this.titlegradation._value + "; ";
		}
		if (this.titleimage && !this.titleimage._is_empty) {
			val += "titleimage:" + this.titleimage._value + "; ";
		}
		if (this.titleimagealign && !this.titleimagealign._is_empty) {
			val += "titleimagealign:" + this.titleimagealign._value + "; ";
		}
		if (this.titleimagepadding && !this.titleimagepadding._is_empty) {
			val += "titleimagepadding:" + this.titleimagepadding._value + "; ";
		}
		if (this.titlepadding && !this.titlepadding._is_empty) {
			val += "titlepadding:" + this.titlepadding._value + "; ";
		}
		if (this.titleview && !this.titleview._is_empty) {
			val += "titleview:" + this.titleview._value + "; ";
		}
		return val;
	};


	nexacro.GroupBox_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.titlebackground = null;
		this.titlegradation = null;
		this.titleimage = null;
		this.titleimagealign = null;
		this.titleimagepadding = null;
		this.titlepadding = null;
		this.titleview = null;
	};

	var _pGroupBoxCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.GroupBox_CurrentStyle);
	nexacro.GroupBox_CurrentStyle.prototype = _pGroupBoxCurrentStyle;

	_pGroupBoxCurrentStyle.__custom_emptyObject = _pGroupBoxStyle.__custom_emptyObject;
	_pGroupBoxCurrentStyle.__get_custom_style_value = _pGroupBoxStyle.__get_custom_style_value;

	delete _pGroupBoxStyle;
	delete _pGroupBoxCurrentStyle;

	nexacro.GroupBox = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.titlealign = "topleft";

		this.mainStatic = null;
		this.titleButton = null;
		this.leftStatic = null;
		this.rightStatic = null;
		this.sizechange = 0;

		this._image_width = 0;
		this._image_height = 0;

		this.tabstop = false;
		this._is_focus_accept = false;
		this._accessibility_role = "groupbox";


		this._event_list = {
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};
	};

	var _pGroupBox = nexacro._createPrototype(nexacro.Component, nexacro.GroupBox);
	nexacro.GroupBox.prototype = _pGroupBox;
	_pGroupBox._type_name = "GroupBox";

	nexacro.GroupBox._default_title_view = nexacro._getCachedStyleObj("titleview", "horizontal");

	_pGroupBox.on_create_custom_style = function () {
		return new nexacro.GroupBox_Style(this);
	};

	_pGroupBox.on_create_custom_currentStyle = function () {
		return new nexacro.GroupBox_CurrentStyle();
	};

	_pGroupBox.on_apply_custom_pseudo = function (pseudo) {
		if (!pseudo) {
			pseudo = this._pseudo;
		}
		var curstyle = this.currentstyle;
		var titlebackground = this.on_find_CurrentStyle_titleBackground(pseudo);
		var titlegradation = this.on_find_CurrentStyle_titleGradation(pseudo);
		var titleimage = this.on_find_CurrentStyle_titleImage(pseudo);
		var titleimagealign = this.on_find_CurrentStyle_titleImageAlign(pseudo);
		var titleimagepadding = this.on_find_CurrentStyle_titleImagePadding(pseudo);
		var titlepadding = this.on_find_CurrentStyle_titlePadding(pseudo);
		var titleview = this.on_find_CurrentStyle_titleView(pseudo);
		var font = this.on_find_CurrentStyle_font(pseudo);
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		var color = this.on_find_CurrentStyle_color(pseudo);
		var align = this.on_find_CurrentStyle_align(pseudo);

		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}

		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}

		if (curstyle.align != align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		if (titlebackground != curstyle.titlebackground) {
			curstyle.titlebackground = titlebackground;
			this.on_apply_style_titlebackground(titlebackground);
		}
		if (titlegradation != curstyle.titlegradation) {
			curstyle.titlegradation = titlegradation;
			this.on_apply_style_titlegradation(titlegradation);
		}
		if (titleimage != curstyle.titleimage) {
			curstyle.titleimage = titleimage;
			this.on_apply_style_titleimage(titleimage);
		}
		if (titleimagealign != curstyle.titleimagealign) {
			curstyle.titleimagealign = titleimagealign;
			this.on_apply_style_titleimagealign(titleimagealign);
		}
		if (titleimagepadding != curstyle.titleimagepadding) {
			curstyle.titleimagepadding = titleimagepadding;
			this.on_apply_style_titleimagepadding(titleimagepadding);
		}
		if (titlepadding != curstyle.titlepadding) {
			curstyle.titlepadding = titlepadding;
			this.on_apply_style_titlepadding(titlepadding);
		}
		if (titleview != curstyle.titleview) {
			curstyle.titleview = titleview;
			this.on_apply_style_titleview(titleview);
		}
		this._title_Border();

		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};


	_pGroupBox.on_find_CurrentStyle_titleBackground = function (pseudo) {
		return this._find_pseudo_obj("titlebackground", pseudo, "background");
	};
	_pGroupBox.on_find_CurrentStyle_titleGradation = function (pseudo) {
		return this._find_pseudo_obj("titlegradation", pseudo, "gradation");
	};
	_pGroupBox.on_find_CurrentStyle_titleImage = function (pseudo) {
		return this._find_pseudo_obj("titleimage", pseudo);
	};
	_pGroupBox.on_find_CurrentStyle_titleImageAlign = function (pseudo) {
		var titleimagealign = this._find_pseudo_obj("titleimagealign", pseudo, "align");
		return titleimagealign ? titleimagealign : nexacro.Component._default_buttonimg_align;
	};
	_pGroupBox.on_find_CurrentStyle_titleImagePadding = function (pseudo) {
		return this._find_pseudo_obj("titleimagepadding", pseudo, "padding");
	};
	_pGroupBox.on_find_CurrentStyle_titlePadding = function (pseudo) {
		return this._find_pseudo_obj("titlepadding", pseudo, "padding");
	};
	_pGroupBox.on_find_CurrentStyle_titleView = function (pseudo) {
		var titleview = this._find_pseudo_obj("titleview", pseudo);
		return (titleview) ? titleview : nexacro.GroupBox._default_title_view;
	};


	_pGroupBox.on_update_style_titlebackground = function () {
		var titlebackground = this.currentstyle.titlebackground = this.on_find_CurrentStyle_titleBackground(this._pseudo);
		this.on_apply_style_titlebackground(titlebackground);
	};
	_pGroupBox.on_update_style_titlegradation = function () {
		var titlegradation = this.currentstyle.titlegradation = this.on_find_CurrentStyle_titleGradation(this._pseudo);
		this.on_apply_style_titlegradation(titlegradation);
	};
	_pGroupBox.on_update_style_titleimage = function () {
		var titleimage = this.currentstyle.titleimage = this.on_find_CurrentStyle_titleImage(this._pseudo);
		this.on_apply_style_titleimage(titleimage);
	};
	_pGroupBox.on_update_style_titleimagealign = function () {
		var titleimagealign = this.currentstyle.titleimagealign = this.on_find_CurrentStyle_titleImageAlign(this._pseudo);
		this.on_apply_style_titleimagealign(titleimagealign);
	};
	_pGroupBox.on_update_style_titleimagepadding = function () {
		var titleimagepadding = this.currentstyle.titleimagepadding = this.on_find_CurrentStyle_titleImagePadding(this._pseudo);
		this.on_apply_style_titleimagepadding(titleimagepadding);
	};
	_pGroupBox.on_update_style_titlepadding = function () {
		var titlepadding = this.currentstyle.titlepadding = this.on_find_CurrentStyle_titlePadding(this._pseudo);
		this.on_apply_style_titlepadding(titlepadding);
	};
	_pGroupBox.on_update_style_titleview = function () {
		var titleview = this.currentstyle.titleview = this.on_find_CurrentStyle_titleView(this._pseudo);
		this.on_apply_style_titleview(titleview);
	};


	_pGroupBox.on_apply_style_titlebackground = function (titlebackground) {
		if (this.titleButton && titlebackground) {
			this.titleButton.style.set_background(titlebackground);
		}
	};

	_pGroupBox.on_apply_style_titlegradation = function (titlegradation) {
		if (this.titleButton && titlegradation) {
			this.titleButton.style.set_gradation(titlegradation);
		}
	};

	_pGroupBox.on_apply_style_titleimage = function (titleimage) {
		if (this.titleButton && titleimage) {
			this.titleButton._load_image(titleimage);
		}
	};

	_pGroupBox.on_apply_style_titleimagealign = function (titleimagealign) {
		var titleimage = this.on_find_CurrentStyle_titleImage(this._pseudo);
		var titleButton = this.titleButton;
		if (titleButton && titleimage && titleimagealign) {
			this._applyTitleSize();
			titleButton.on_apply_style_imagealign(titleimagealign);
		}
	};

	_pGroupBox.on_apply_style_titleimagepadding = function (titleimagepadding) {
	};

	_pGroupBox.on_apply_style_titlepadding = function (titlepadding) {
		if (this.titleButton) {
			this.titleButton.style.set_padding(titlepadding);
		}
	};

	_pGroupBox.on_apply_style_titleview = function (titleview) {
	};

	_pGroupBox.on_apply_style_font = function (font) {
		if (this.titleButton) {
			this.titleButton.on_apply_style_font(font);
			this._applyTitleSize();
		}
	};

	_pGroupBox.on_apply_style_color = function (color) {
		if (this.titleButton) {
			this.titleButton.on_apply_style_color(color);
		}
	};

	_pGroupBox.on_apply_style_letterspace = function (letterspace) {
		if (this.titleButton) {
			this.titleButton.style.set_letterspace(this.currentstyle.letterspace);
			this._applyTitleSize();
		}
	};

	_pGroupBox.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pGroupBox.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);
		this.on_change_containerRect(this._client_width, this._client_height);

		var _rtldirection = this._rtldirection;

		var titleButton = this.titleButton;
		var mainStatic = this.mainStatic;
		var leftStatic = this.leftStatic;
		var rightStatic = this.rightStatic;

		if (titleButton) {
			titleButton._setRtlDirection(_rtldirection);
		}
		if (mainStatic) {
			mainStatic._setRtlDirection(_rtldirection);
		}
		if (leftStatic) {
			leftStatic._setRtlDirection(_rtldirection);
		}
		if (rightStatic) {
			rightStatic._setRtlDirection(_rtldirection);
		}
	};

	_pGroupBox.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (this.text) {
				var text_elem = this._text_elem = new nexacro.TextBoxElement(control_elem);
				var halign = this.currentstyle.align.halign == "" ? "center" : this.currentstyle.align._halign;
				var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(this.currentstyle.color);
				text_elem.setElementFont(this.currentstyle.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(this.currentstyle.letterspace);
			}
		}
	};

	_pGroupBox.on_created_contents = function () {
		var text_elem = this._text_elem;
		var img_elem = this._img_elem;
		if (img_elem) {
			img_elem.create();
		}
		if (text_elem) {
			text_elem.create();
		}

		if (this.cssclass) {
			this.on_apply_pseudo();
			this.on_apply_custom_pseudo();
			this.on_apply_prop_class();
		}

		this._createGroupSubObj();
		this.on_apply_text(this.text);
		this.on_apply_style_color(this.currentstyle.color);
		this.on_apply_style_font(this.currentstyle.font);
		this.on_apply_style_letterspace(this.currentstyle.letterspace);
		this.on_apply_style_titleimage(this.currentstyle.titleimage);
		this._applyTitleSize();
		this.on_apply_style_titlepadding(this.currentstyle.titlepadding);
		this.on_apply_style_titleimagealign(this.currentstyle.titleimagealign);
		this.on_apply_style_titleimagepadding(this.currentstyle.titleimagepadding);
		this.on_apply_style_titleview(this.currentstyle.titleview);

		this.on_apply_prop_rtldirection();
	};

	_pGroupBox.on_destroy_contents = function () {
		var textElem = this._text_elem;
		var imgElem = this._img_elem;
		if (textElem) {
			textElem.destroy();
			this._text_elem = null;
		}
	};

	_pGroupBox.on_change_containerRect = function (width, height) {
		var textElem = this._text_elem;

		if (textElem) {
			textElem.setElementSize(width, height);
		}

		if (this.mainStatic && this.leftStatic && this.rightStatic && this.titleButton) {
			this._applyTitleSize();
		}

		this._title_Border();
	};

	_pGroupBox.set_titlealign = function (v) {
		var val = v.toString();
		if (val != this.titlealign) {
			this.titlealign = v;
			this.on_apply_titlealign();
		}
	};

	_pGroupBox.on_apply_titlealign = function () {
		var titlealign = this.titlealign;

		var titleButton = this.titleButton;
		var mainStatic = this.mainStatic;
		var leftStatic = this.leftStatic;
		var rightStatic = this.rightStatic;

		var _bordertype = this.on_find_CurrentStyle_bordertype(this._pseudo);
		var title_w_gap = parseInt(_bordertype ? _bordertype.radiusx : 0);
		var title_h_gap = parseInt(_bordertype ? _bordertype.radiusy : 0);

		if (!this.currentstyle.border && !titleButton || !mainStatic || !leftStatic || !rightStatic) {
			return false;
		}

		var rc_w = this._adjust_width;
		var rc_h = this._adjust_height;

		var title_l = titleButton._adjust_left;
		var title_t = titleButton._adjust_top;
		var title_w = titleButton._adjust_width;
		var title_h = titleButton._adjust_height;

		var titlepadding = this.on_find_CurrentStyle_titlePadding(this._pseudo);

		if (titlepadding) {
			title_w += (titlepadding.left + titlepadding.right);
			title_h += (titlepadding.top + titlepadding.bottom);
		}

		var mini_w = rc_w - 20;
		var mini_h = rc_h - 20;
		if (mini_w < title_w) {
			title_w = mini_w > 0 ? mini_w : 0;
		}
		if (mini_h < title_h) {
			title_h = mini_h > 0 ? mini_h : 0;
		}

		var _border = this.on_find_CurrentStyle_border(this._pseudo);
		var border_width = parseInt(_border.width);

		var border_l_width = parseInt(_border.left_width);
		var border_t_width = parseInt(_border.top_width);
		var border_r_width = parseInt(_border.right_width);
		var border_b_width = parseInt(_border.bottom_width);

		if (titlealign == "topcenter") {
			var static_width = Math.floor((rc_w - title_w) / 2);
			var static_top = Math.floor(title_h / 2);
			var static_height = rc_h - static_top;
			var r_static_left = static_width + title_w + border_r_width;
			var r_static_width = rc_w - static_width - title_w;

			this.mainStatic.move(0, static_top, rc_w, static_height);
			this.leftStatic.move(0, static_top, static_width, static_height);
			this.rightStatic.move(r_static_left, static_top, r_static_width, static_height);
			titleButton.move(static_width, 0, title_w, title_h);
		}
		else if (titlealign == "topright") {
			var static_width = rc_w - title_w_gap - title_w - border_r_width;
			var static_top = Math.floor(title_h / 2);
			var static_height = rc_h - static_top;
			var r_static_left = rc_w - title_w_gap - border_r_width;
			var r_static_width = rc_w - r_static_left;

			this.mainStatic.move(0, static_top, rc_w, static_height);
			this.leftStatic.move(0, static_top, static_width, static_height);
			this.rightStatic.move(r_static_left, static_top, r_static_width, static_height);
			titleButton.move(static_width, 0, title_w, title_h);
		}
		else if (titlealign == "righttop") {
			var static_width = rc_w - Math.floor(title_w / 2);
			var b_static_top = title_h_gap + title_h;


			this.mainStatic.move(0, 0, static_width, rc_h);
			this.leftStatic.move(0, 0, static_width, title_h_gap);
			this.rightStatic.move(0, b_static_top, static_width, rc_h - b_static_top);
			titleButton.move(rc_w - title_w, title_h_gap, title_w, title_h);
		}
		else if (titlealign == "rightcenter") {
			var static_width = rc_w - Math.floor(title_w / 2);
			var t_static_height = Math.floor((rc_h - title_h) / 2);

			this.mainStatic.move(0, 0, static_width, rc_h - border_b_width);
			this.leftStatic.move(0, 0, static_width, t_static_height);
			this.rightStatic.move(0, t_static_height + title_h, static_width, t_static_height);
			titleButton.move(rc_w - title_w, t_static_height, title_w, title_h);
		}
		else if (titlealign == "rightbottom") {
			var static_width = rc_w - Math.floor(title_w / 2);
			var t_static_h = title_h_gap + title_h;

			this.mainStatic.move(0, 0, static_width, rc_h);
			this.leftStatic.move(0, 0, static_width, rc_h - t_static_h);
			this.rightStatic.move(0, rc_h - title_h_gap, static_width, title_h_gap);
			titleButton.move(rc_w - title_w, rc_h - t_static_h, title_w, title_h);
		}
		else if (titlealign == "bottomright") {
			var static_width = rc_w - title_w_gap - title_w;
			var static_height = rc_h - Math.floor(title_h / 2);
			var r_static_left = rc_w - title_w_gap;


			this.mainStatic.move(0, 0, rc_w, static_height);
			this.leftStatic.move(0, 0, static_width, static_height);
			this.rightStatic.move(r_static_left, 0, title_w_gap, static_height);
			titleButton.move(static_width, rc_h - title_h, title_w, title_h);
		}
		else if (titlealign == "bottomcenter") {
			var static_width = Math.floor((rc_w - title_w) / 2);
			var static_height = rc_h - Math.floor(title_h / 2);
			var r_static_left = static_width + title_w + border_r_width;
			var r_static_width = rc_w - static_width - title_w;

			this.mainStatic.move(0, 0, rc_w, static_height);
			this.leftStatic.move(0, 0, static_width, static_height);
			this.rightStatic.move(r_static_left, 0, r_static_width, static_height);
			titleButton.move(static_width, rc_h - title_h, title_w, title_h);
		}
		else if (titlealign == "bottomleft") {
			var static_width = rc_w - title_w_gap - title_w;
			var static_height = rc_h - Math.floor(title_h / 2);
			var r_static_left = title_w_gap + title_w;
			var r_static_width = rc_w - r_static_left + border_r_width;


			this.mainStatic.move(0, 0, rc_w, static_height);
			this.leftStatic.move(0, 0, title_w_gap, static_height);
			this.rightStatic.move(r_static_left, 0, r_static_width, static_height);
			titleButton.move(title_w_gap, rc_h - title_h, title_w, title_h);
		}
		else if (titlealign == "leftbottom") {
			var static_left = Math.floor(title_w / 2);
			var static_width = rc_w - static_left;
			var t_static_h = title_h_gap + title_h;

			this.mainStatic.move(static_left, 0, static_width, rc_h);
			this.leftStatic.move(static_left, 0, static_width, rc_h - t_static_h);
			this.rightStatic.move(static_left, rc_h - title_h_gap, static_width, title_h_gap);
			titleButton.move(0, rc_h - t_static_h, title_w, title_h);
		}
		else if (titlealign == "leftcenter") {
			var static_left = Math.floor(title_w / 2);
			var static_width = rc_w - static_left;
			var t_static_height = Math.floor((rc_h - title_h) / 2);
			var r_static_height = rc_h - t_static_height - title_h - border_b_width;

			this.mainStatic.move(static_left, 0, static_width, rc_h - border_b_width);
			this.leftStatic.move(static_left, 0, static_width, t_static_height);
			this.rightStatic.move(static_left, t_static_height + title_h, static_width, r_static_height);
			titleButton.move(0, t_static_height, title_w, title_h);
		}
		else if (titlealign == "lefttop") {
			var static_left = Math.floor(title_w / 2);
			var static_width = rc_w - static_left;
			var b_static_top = title_h_gap + title_h;


			this.mainStatic.move(static_left, 0, static_width, rc_h);
			this.leftStatic.move(static_left, 0, static_width, title_h_gap);
			this.rightStatic.move(static_left, b_static_top, static_width, rc_h - b_static_top);
			titleButton.move(0, title_h_gap, title_w, title_h);
		}
		else {
			var static_top = Math.floor(title_h / 2);
			var static_height = rc_h - static_top;

			var l_static_width = title_w_gap + border_l_width;
			var r_static_left = l_static_width + title_w;
			var r_static_width = rc_w - r_static_left + border_r_width;
			title_l = l_static_width;

			this.mainStatic.move(0, static_top, rc_w, static_height);
			this.leftStatic.move(0, static_top, l_static_width, static_height + 10);
			this.rightStatic.move(r_static_left, static_top, r_static_width, static_height);
			titleButton.move(title_l, 0, title_w, title_h);
		}

		this._title_Border();
	};

	_pGroupBox.set_text = function (v) {
		var val = v;
		if (val === undefined || val === null) {
			val = "";
		}
		else {
			val = v.toString();
		}

		if (val != this.text) {
			this.text = this._display_text = val;
			var titleButton = this.titleButton;

			this.on_apply_text(val);
			this.on_apply_style_color(this.currentstyle.color);
			this.on_apply_style_font(this.currentstyle.font);
			this.on_apply_style_align(this.currentstyle.align);
			this.on_apply_titlealign();

			if (titleButton) {
				this._applyTitleSize();
				this.bRectChange = true;
			}
		}
		return this.text;
	};

	_pGroupBox.on_apply_text = function (text) {
		var val = text;
		if (this.titleButton != null) {
			this.titleButton.style.set_letterspace(this.currentstyle.letterspace);
			this.titleButton.set_text(val);
		}
	};



	_pGroupBox.on_get_prop_tabstop = function () {
		if (nexacro._enableaccessibility) {
			var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
			if (accessibility && accessibility.enable && accessibility.role == "link") {
				return true;
			}
		}
		return false;
	};

	_pGroupBox._isFocusAcceptable = function () {
		return nexacro._enableaccessibility;
	};

	_pGroupBox._createGroupSubObj = function () {
		var mainStatic = this.mainStatic = new nexacro.MainCtrl("mainline", "absolute", 0, 0, 0, 0, null, null, this);
		mainStatic.createComponent();

		var titleButton = this.titleButton = new nexacro.TitleCtrl("title", "absolute", 0, 0, 0, 0, null, null, this);
		titleButton.style.set_border("0px solid transparent");
		titleButton.style.set_bordertype("round 1 1");
		titleButton.createComponent();

		var leftStatic = this.leftStatic = new nexacro.TitleBorderCtrl("line1", "absolute", 0, 0, 0, 0, null, null, this);
		leftStatic.createComponent();

		var rightStatic = this.rightStatic = new nexacro.TitleBorderCtrl("line2", "absolute", 0, 0, 0, 0, null, null, this);
		rightStatic.createComponent();
	};

	_pGroupBox._applyTitleSize = function () {
		var title_size = this._GetTextSize(this._display_text);
		title_size[0] = title_size[0] < 0 ? 0 : title_size[0];
		var titleButton = this.titleButton;
		var imgwidth = titleButton._image_width;
		var imgheight = titleButton._image_height;
		var title_w = title_size[0];
		var title_h = title_size[1];


		if (titleButton) {
			if (titleButton._img_elem) {
				var imgalign = this.on_find_CurrentStyle_titleImageAlign(this._pseudo);
				if (imgalign.halign == "lefttext" || imgalign.halign == "righttext") {
					title_w += imgwidth;
					title_h = title_h < imgheight ? titleButton._image_height : title_h;
				}
				if (imgalign.valign == "toptext" || imgalign.valign == "bottomtext") {
					title_h += imgheight;
				}
			}

			var title_l = 0;
			var title_t = 0;

			this.titleButton._adjust_left = title_l;
			this.titleButton._adjust_top = title_t;
			this.titleButton._adjust_width = title_w;
			this.titleButton._adjust_height = title_h;
			this.on_apply_titlealign();
		}
	};

	_pGroupBox._getMakeClientRect = function (comp) {
		return {
			left : comp._client_left, 
			top : comp._client_top, 
			right : comp._client_left + comp._client_width, 
			bottom : comp._client_top + comp._client_height, 
			width : comp._client_width, 
			height : comp._client_height
		};
	};

	_pGroupBox._title_Border = function () {
		if (!this.mainStatic || !this.leftStatic || !this.rightStatic) {
			return false;
		}
		var border = this.on_find_CurrentStyle_border(this._pseudo);
		var bordertype = this.on_find_CurrentStyle_bordertype(this._pseudo);
		var background = this.on_find_CurrentStyle_background(this._pseudo);
		var l_bordertype = this.leftStatic.on_find_CurrentStyle_bordertype(this._pseudo);
		var r_bordertype = this.rightStatic.on_find_CurrentStyle_bordertype(this._pseudo);

		this.mainStatic._setElementBorder(this.mainStatic.getElement(), border, bordertype, this.titlealign);
		this.leftStatic._setElementBorder(this.leftStatic.getElement(), border, l_bordertype, this.titlealign);
		this.rightStatic._setElementBorder(this.rightStatic.getElement(), border, r_bordertype, this.titlealign);

		this.on_apply_style_border("");
		this.on_apply_style_background("none");
		this.mainStatic.on_apply_style_background(background);
	};

	_pGroupBox._GetTextSize = function (text) {
		if (!this.titleButton) {
			return;
		}
		var font = this.titleButton.on_find_CurrentStyle_font(this._pseudo) || nexacro.Component._default_font;
		var letterspace = this.titleButton.on_find_CurrentStyle_letterspace(this._pseudo);
		return nexacro._getTextSize2(letterspace, text, font, null, null, null, this._rtldirection);
	};

	_pGroupBox._getRecalcCanvasXY = function (elem, canvasX, canvasY) {
		var scroll_left = 0, scroll_top = 0;
		if (this.parent && !(this instanceof nexacro.ScrollBarCtrl)) {
			var control_elem = this.parent._control_element;
			if (control_elem && control_elem instanceof nexacro.ScrollableControlElement) {
				scroll_left = control_elem.scroll_left;
				scroll_top = control_elem.scroll_top;
				control_elem = null;
			}
		}

		canvasX += this._adjust_left - scroll_left || 0;
		canvasY += this._adjust_top - scroll_top || 0;

		var window = this._getWindow();
		var curstyle = this.currentstyle;
		var comp = window.findComponent(elem);

		if (comp != this) {
			if (curstyle && curstyle.padding) {
				canvasX += curstyle.padding.left;
				canvasY += curstyle.padding.top;
			}
		}
		return [canvasX, canvasY];
	};

	nexacro.TitleCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;
	};
	_pTitleCtrl = nexacro.TitleCtrl.prototype = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.TitleCtrl);
	_pTitleCtrl.orgRect = null;

	_pTitleCtrl.on_apply_custom_pseudo = function (pseudo) {
		nexacro.ButtonCtrl.prototype.on_apply_custom_pseudo.call(this, pseudo);

		this.parent.mainStatic._pseudo = pseudo;
		this.parent.mainStatic.on_update_style_border();

		if (this.parent.rightStatic) {
			this.parent.rightStatic._pseudo = pseudo;
			this.parent.rightStatic.on_update_style_border();
		}
		if (this.parent.leftStatic) {
			this.parent.leftStatic._pseudo = pseudo;
			this.parent.leftStatic.on_update_style_border();
		}
		this.parent._title_Border();
	};


	_pTitleCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return nexacro.Component._default_align;
	};

	_pTitleCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent._find_pseudo_obj("color", pseudo, "color");
	};

	_pTitleCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_font(pseudo);
	};

	_pTitleCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent._find_pseudo_obj("titlebackground", pseudo, "background");
	};

	_pTitleCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent._find_pseudo_obj("titlegradation", pseudo, "gradation");
	};

	_pTitleCtrl.on_find_CurrentStyle_image = function (pseudo) {
		return this.parent._find_pseudo_obj("titleimage", pseudo);
	};

	_pTitleCtrl.on_find_CurrentStyle_imagealign = function (pseudo) {
		return this.parent.on_find_CurrentStyle_titleImageAlign(pseudo);
	};

	_pTitleCtrl.on_find_CurrentStyle_imagepadding = function (pseudo) {
		return this.parent._find_pseudo_obj("titleimagepadding", pseudo, "padding");
	};

	_pTitleCtrl.on_find_CurrentStyle_padding = function (pseudo) {
		return this.parent._find_pseudo_obj("titlepadding", pseudo, "padding");
	};

	_pTitleCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent._find_pseudo_obj("cursor", pseudo);
	};


	_pTitleCtrl._img_load_completed = function (imgurl) {
		this.parent._applyTitleSize();
		nexacro.Button.prototype._img_load_completed.call(this, imgurl);
	};

	nexacro.MainCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;
	};
	_pMainCtrl = nexacro.MainCtrl.prototype = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.MainCtrl);
	_pMainCtrl.orgPos = null;

	_pMainCtrl.on_apply_custom_pseudo = function (pseudo) {
		nexacro.StaticCtrl.prototype.on_apply_custom_pseudo.call(this, pseudo);

		if (this.parent.rightStatic) {
			this.parent.rightStatic._pseudo = pseudo;
			this.parent.rightStatic.on_update_style_border();
		}
		if (this.parent.leftStatic) {
			this.parent.leftStatic._pseudo = pseudo;
			this.parent.leftStatic.on_update_style_border();
		}
		this.parent._title_Border();
	};


	_pMainCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent._find_pseudo_obj("background", pseudo, "background");
	};

	_pMainCtrl.on_find_CurrentStyle_shadow = function (pseudo) {
		return this.parent._find_pseudo_obj("shadow", pseudo, "shadow");
	};

	_pMainCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent._find_pseudo_obj("bordertype", pseudo, "bordertype");
	};

	_pMainCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent._find_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pMainCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent._find_pseudo_obj("cursor", pseudo);
	};


	_pMainCtrl._setElementBorder = function (control, border, bordertype, align) {
		if (!border) {
			return;
		}

		var b = border.clone();
		var b_val = b._value;
		var all_border;

		b._linecnt = 1;
		if (bordertype.type == "round") {
			b._copytoSubObjects();
		}
		b._linecnt = 4;

		if (align != null) {
			if (align == "righttop" || align == "rightcenter" || align == "rightbottom") {
				b.set_right_width("0");
			}
			else if (align == "lefttop" || align == "leftcenter" || align == "leftbottom") {
				b.set_left_width("0");
			}
			else if (align == "bottomright" || align == "bottomcenter" || align == "bottomleft") {
				b.set_bottom_width("0");
			}
			else {
				b.set_top_width("0");
			}
			control.setElementBorder(b, bordertype);
		}
	};

	delete _pMainCtrl;

	nexacro.TitleBorderCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.StaticCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_reference_control = false;
	};

	_pTitleBorderCtrl = nexacro.TitleBorderCtrl.prototype = nexacro._createPrototype(nexacro.StaticCtrl, nexacro.TitleBorderCtrl);

	_pTitleBorderCtrl.on_apply_custom_pseudo = function (pseudo) {
		nexacro.StaticCtrl.prototype.on_apply_custom_pseudo.call(this, pseudo);

		this.parent.mainStatic._pseudo = pseudo;
		this.parent.mainStatic.on_update_style_border();

		if (this.id == "line1") {
			if (this.parent.rightStatic) {
				this.parent.rightStatic._pseudo = pseudo;
				this.parent.rightStatic.on_update_style_border();
			}
		}
		if (this.id == "line2") {
			if (this.parent.leftStatic) {
				this.parent.leftStatic._pseudo = pseudo;
				this.parent.leftStatic.on_update_style_border();
			}
		}
		this.parent._title_Border();
	};


	_pTitleBorderCtrl.on_find_CurrentStyle_background = function (pseudo) {
	};

	_pTitleBorderCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent._find_pseudo_obj("border", pseudo, "border");
	};

	_pTitleBorderCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		var bordertypeorg = this.parent._find_pseudo_obj("bordertype", pseudo, "bordertype");
		var bordertype = bordertypeorg.clone();
		var align = this.parent.titlealign;

		if (align == "righttop" || align == "rightcenter" || align == "rightbottom") {
			if (this.id == "line1") {
				bordertype.set_lefttop(false);
				bordertype.set_leftbottom(false);
				bordertype.set_righttop(true);
				bordertype.set_rightbottom(false);
			}
			else if (this.id == "line2") {
				bordertype.set_lefttop(false);
				bordertype.set_leftbottom(true);
				bordertype.set_righttop(false);
				bordertype.set_rightbottom(true);
			}
		}
		else if (align == "lefttop" || align == "leftcenter" || align == "leftbottom") {
			if (this.id == "line1") {
				bordertype.set_lefttop(true);
				bordertype.set_leftbottom(false);
				bordertype.set_righttop(true);
				bordertype.set_rightbottom(false);
			}
			else if (this.id == "line2") {
				bordertype.set_lefttop(false);
				bordertype.set_leftbottom(true);
				bordertype.set_righttop(false);
				bordertype.set_rightbottom(true);
			}
		}
		else if (align == "bottomright" || align == "bottomcenter" || align == "bottomleft") {
			if (this.id == "line1") {
				bordertype.set_lefttop(true);
				bordertype.set_leftbottom(true);
				bordertype.set_righttop(false);
				bordertype.set_rightbottom(false);
			}
			else if (this.id == "line2") {
				bordertype.set_lefttop(false);
				bordertype.set_leftbottom(false);
				bordertype.set_righttop(true);
				bordertype.set_rightbottom(true);
			}
		}
		else {
			if (this.id == "line1") {
				bordertype.set_lefttop(true);
				bordertype.set_leftbottom(true);
				bordertype.set_righttop(false);
				bordertype.set_rightbottom(false);
			}
			else if (this.id == "line2") {
				bordertype.set_lefttop(false);
				bordertype.set_leftbottom(false);
				bordertype.set_righttop(true);
				bordertype.set_rightbottom(true);
			}
		}

		return bordertype;
	};

	_pTitleBorderCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent._find_pseudo_obj("cursor", pseudo);
	};


	_pTitleBorderCtrl._setElementBorder = function (control, border, bordertype, align) {
		if (!border) {
			return;
		}

		var b = border.clone();
		b._linecnt = 1;
		if (bordertype.type == "round") {
			b._copytoSubObjects();
		}
		b._linecnt = 4;

		if (align != null) {
			if (align == "righttop" || align == "rightcenter" || align == "rightbottom") {
				if (this.id == "line1") {
					b.set_bottom_width("0");
				}
				else if (this.id == "line2") {
					b.set_top_width("0");
				}
			}
			else if (align == "lefttop" || align == "leftcenter" || align == "leftbottom") {
				if (this.id == "line1") {
					b.set_bottom_width("0");
				}
				else if (this.id == "line2") {
					b.set_top_width("0");
				}
			}
			else if (align == "bottomright" || align == "bottomcenter" || align == "bottomleft") {
				b.set_top_width("0");

				if (this.id == "line1") {
					b.set_right_width("0");
				}
				else if (this.id == "line2") {
					b.set_left_width("0");
				}
			}
			else {
				if (this.id == "line1") {
					b.set_right_width("0");
				}
				else if (this.id == "line2") {
					b.set_left_width("0");
				}
			}

			control.setElementBorder(b, bordertype);
		}
	};

	delete _pTitleBorderCtrl;

	nexacro.GroupBoxCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.GroupBox.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pGroupBoxCtrl = nexacro.GroupBoxCtrl.prototype = nexacro._createPrototype(nexacro.GroupBox, nexacro.GroupBoxCtrl);
	_pGroupBoxCtrl._type_name = "GroupBoxControl";

	nexacro._setForControlStyleFinder(_pGroupBoxCtrl);

	delete _pGroupBoxCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

nexacro.TabIndexChangeEventInfo = function (obj, id, postindex, preindex) {
	this.id = this.eventid = id || "ontabindexchange";
	this.fromobject = this.fromreferenceobject = obj;

	this.postindex = postindex;
	this.preindex = preindex;
};
var _pTabIndexChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ChangeEventInfo);
nexacro.TabIndexChangeEventInfo.prototype = _pTabIndexChangeEventInfo;
_pTabIndexChangeEventInfo._type_name = "TabIndexChangeEventInfo";

delete _pTabIndexChangeEventInfo;

nexacro.TabMouseEventInfo = function (obj, id, index, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
	nexacro.MouseEventInfo.call(this, obj, id || "onextrabuttonclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);

	this.index = index;
};
var _pTabMouseEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MouseEventInfo);
nexacro.TabMouseEventInfo.prototype = _pTabMouseEventInfo;
_pTabMouseEventInfo._type_name = "TabMouseEventInfo";

delete _pTabMouseEventInfo;

if (!nexacro.TabComponent) {
	nexacro.TabComponent = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Form.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.spinupbutton = null;
		this.spindownbutton = null;
		this.multiline = false;
		this.tabindex = -1;
		this.focusacceptable = false;
		this.usecontrolkey = true;
		this.rotatetext = false;
		this.tabjustify = false;
		this.selectchangetype = "down";
		this.tabposition = "top";
		this.extrabutton = null;

		this._org_status = "";
		this._pre_scrollIndex = -1;

		this._imagewidth = 0;
		this._imageheight = 0;
		this._setidx = 0;
		this._oldtabindex = 0;
		this._tabpagearea = null;
		this._css_finder = null;
		this._tabButtons = [];
		this._buttonRect = [];
		this._tabextrabuttons = [];
		this._tabBorders = [];
		this._tabButtonBorders = [];
		this._tabButtonLeftBorders = [];
		this._buttonWidth = [];
		this._buttonHeight = [];
		this._buttonBorder = null;

		this._insert_tabpagelist = [];

		this._scrollIndex = -1;
		this._lastIndex = -1;
		this._bSpin = false;
		this._focusobj = null;

		this._spinflagup = false;
		this._spinflagdown = false;


		this._is_canchange = false;

		this._is_scrollable = false;

		this._is_resize = true;
		this._is_recalclayout = false;
		this._is_stat_change = false;

		this._accessibility_role = "tab";
	};

	var _pTabComponent = nexacro._createPrototype(nexacro.Form, nexacro.TabComponent);
	nexacro.TabComponent.prototype = _pTabComponent;

	_pTabComponent._type_name = "Tabcomponent";

	_pTabComponent.on_update_style_cursor = function () {
		var tabbtns = this._tabButtons;
		var tabbtnsLen = tabbtns.length;
		var tabbtn;

		for (var i = 0; i < tabbtnsLen; i++) {
			tabbtn = tabbtns[i];
			tabbtn.on_update_style_cursor();
		}
		var tabpages = this.tabpages;
		for (var i = 0, n = tabpages.length; i < n; i++) {
			tabpages[i].on_update_style_cursor();
		}

		this._tabpagearea.on_apply_style_cursor(this.currentstyle.cursor = this.on_find_CurrentStyle_cursor(this._pseudo));

		this.on_apply_style_cursor(this.currentstyle.cursor);
	};

	_pTabComponent.on_change_containerRect = function (width, height) {
	};

	_pTabComponent.set_visible = function (v) {
		var child_list = this._child_list;
		if (child_list && child_list.length == 0 && nexacro._toBoolean(v)) {
			return;
		}

		nexacro.Component.prototype.set_visible.call(this, v);
	};

	_pTabComponent.on_update_position = function (resize_flag, move_flag) {
		var control_elem = this._control_element;
		if (control_elem) {
			var bForce = false;
			if (this._isRtl(this.parent) && this._left != null) {
				bForce = true;
			}

			control_elem.setElementPosition(this._adjust_left, this._adjust_top, bForce);

			if (resize_flag) {
				var val = this._calcScrollMaxSize();
				control_elem.container_maxwidth = val.w;
				control_elem.container_maxheight = val.h;
			}

			this._is_resize = resize_flag;
			control_elem.setElementSize(this._adjust_width, this._adjust_height);

			this._updateClientSize(control_elem);

			if (move_flag) {
				this.on_fire_onmove(this._adjust_left, this._adjust_top);
			}
			if (resize_flag) {
				this.on_fire_onsize(this._adjust_width, this._adjust_height);
			}

			this._is_resize = false;
		}
	};

	_pTabComponent.set_multiline = function (v) {
		this.multiline = nexacro._toBoolean(v);

		if (this.multiline == false && this._buttonWidth) {
			var s = 0;
			var buttonWidth_len = this._buttonWidth.length;
			for (var i = 0, n = buttonWidth_len; i < n; i++) {
				s += this._buttonWidth[i];
				if (this._orgwidth < s) {
					break;
				}
			}
			if (n > 0) {
				this._scrollIndex = this.tabindex - (i - 1);
			}
		}

		this._recalcLayout();
	};

	_pTabComponent.set_rotatetext = function (v) {
		this.rotatetext = v;
	};

	_pTabComponent.set_usecontrolkey = function (v) {
		v = nexacro._toBoolean(v);
		if (this.usecontrolkey != v) {
			this.usecontrolkey = v;
		}
	};

	_pTabComponent.set_focusacceptable = function (v) {
		v = nexacro._toBoolean(v);
		if (this.focusacceptable != v) {
			this.focusacceptable = v;
		}
	};

	_pTabComponent.set_tabindex = function (v) {
		var idx = parseInt(v) | 0;
		this._oldtabindex = this.tabindex;
		this._setidx = idx;
		this.on_apply_tabindex();
	};

	_pTabComponent.on_apply_tabindex = function () {
		var is_apply_focus = false;

		var form = this._getForm();
		if (form._getTabOrderFirst() instanceof nexacro.Tab && this.parent._last_focused && this.parent._last_focused.name == this.name) {
			is_apply_focus = true;
		}

		var ret = this._changeTabIndex(this._setidx, is_apply_focus);
		if (ret && this.enableevent && this._is_created && this._oldtabindex > -1) {
			this.on_fire_onchanged(this, this._setidx, this._oldtabindex);
		}
	};

	_pTabComponent.set_tabjustify = function (v) {
		v = nexacro._toBoolean(v);

		if (this.tabjustify != v) {
			this.tabjustify = v;
		}
		else {
			return;
		}

		this.on_apply_tabjustify();
	};

	_pTabComponent.on_apply_tabjustify = function () {
		this._recalcLayout();
	};

	_pTabComponent.set_tabposition = function (v) {
		this.tabposition = v.toString();

		var child_list = this._child_list;
		var tabpagecnt = child_list.length;

		for (var i = 0; i < tabpagecnt; i++) {
			var pagecontrol = child_list[i];
			if (pagecontrol != null) {
				pagecontrol._adjust_width = 0;
				pagecontrol._adjust_height = 0;
			}
		}

		this.on_apply_tabposition();
	};

	_pTabComponent.on_apply_tabposition = function () {
		this._recalcLayout();
	};

	_pTabComponent.set_selectchangetype = function (v) {
		this.selectchangetype = v;
	};

	nexacro._is_enable_setting = false;
	_pTabComponent.set_enable = function (v) {
		v = nexacro._toBoolean(v);
		if (this.enable != v) {
			var _window = this._getWindow();
			var newfocus_comp;
			if (!this._is_subcontrol && !v && this._is_created && this.parent) {
				if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
					var _form = this._getForm();
					var cur_tabstop = this.tabstop;
					this.tabstop = false;
					newfocus_comp = _form._searchNextTabFocus();
					this.tabstop = cur_tabstop;
				}
			}

			var control_elem = this._control_element;
			this.enable = v;

			var enable_flag = (this.parent._real_enable && v);
			if (this._real_enable != enable_flag) {
				nexacro._is_enable_setting = true;
				this._setEnable(enable_flag);
				nexacro._is_enable_setting = false;
				var parent = this.parent;
				if (!this._is_subcontrol && this._is_created && parent && parent._is_created) {
					if (enable_flag) {
						if (_window && _window._indexOfCurrentFocusPaths(parent) == _window._getCurrentFocusPathsLength() - 1
							 && !parent._last_focused) {
							this._on_focus(true);
						}
					}
					else {
						if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
							_window._removeFromCurrentFocusPath(this, false);
							if (newfocus_comp && newfocus_comp[0]) {
								newfocus_comp[0]._on_focus(true);
							}
						}
					}
				}
			}
		}
	};

	_pTabComponent.on_notify_spinup_onclick = function (obj, e) {
		this._spinup();
	};

	_pTabComponent.on_notify_spindown_onclick = function (obj, e) {
		this._spindown();
	};

	_pTabComponent.on_fire_onextrabuttonclick = function (obj, index, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onextrabuttonclick && this.onextrabuttonclick._has_handlers) {
			var evt = new nexacro.TabMouseEventInfo(this, "onextrabuttonclick", index, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, this, this);
			return this.onextrabuttonclick._fireEvent(this, evt);
		}
		return true;
	};

	_pTabComponent.getOwnerFrame = function () {
		return this.parent.getOwnerFrame();
	};

	_pTabComponent._created = function () {
		this._recalcLayout();
	};

	_pTabComponent._createSubComp = function () {
		this.spindownbutton = new nexacro.ButtonCtrl("spindownbutton", this.position, 0, 0, 0, 0, null, null, this);

		this.spinupbutton = new nexacro.ButtonCtrl("spinupbutton", this.position, 0, 0, 0, 0, null, null, this);

		this.spinupbutton.createComponent();
		this.spindownbutton.createComponent();

		this.spinupbutton.set_visible(false);
		this.spindownbutton.set_visible(false);

		this.spinupbutton._setEventHandler("onclick", this.on_notify_spinup_onclick, this);
		this.spindownbutton._setEventHandler("onclick", this.on_notify_spindown_onclick, this);

		this._createTabBorder();
	};

	_pTabComponent._getTabPosition = function () {
		return this.tabposition.toString();
	};

	_pTabComponent._isMultiLine = function () {
		return this.multiline;
	};

	_pTabComponent._isTabButtonJustify = function () {
		return this.tabjustify;
	};

	_pTabComponent._isRotateText = function () {
		return this.rotatetext;
	};

	_pTabComponent._isUseCtrlKey = function () {
		return this.usecontrolkey;
	};

	_pTabComponent._isExtraButton = function () {
		return nexacro._toBoolean(this.currentstyle.showextrabutton ? this.currentstyle.showextrabutton._value : "false");
	};

	_pTabComponent._ptInRect = function (rc, nx, ny) {
		if (rc.left <= nx && rc.right >= nx && rc.top <= ny && rc.bottom >= ny) {
			return true;
		}
		return false;
	};

	_pTabComponent._GetTabIndex = function (nx, ny) {
		var compMousePoint = [];
		var scrMousePoint = [];

		compMousePoint[0] = nx;
		compMousePoint[1] = ny;

		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0) {
			return;
		}

		var index, tabindex = -1;

		var bmleft = 0, bmright = 0;
		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);
		if (buttonmargin) {
			bmleft = buttonmargin.left;
			bmright = buttonmargin.right;
		}

		var prop_width = this._client_width;
		var prop_height = this._client_height;

		var tabs_width = prop_width - (Math.ceil(this._getToolBarSize()) | 0);
		var tabs_height = prop_height - (Math.ceil(this._getToolBarSize()) | 0);

		if (!this._isTabButtonJustify() && !this._isMultiLine() && this._isSpinButtonVisible()) {
			var spinsize = null;
			spinsize = this._getSpinSize();

			tabs_width -= 2 * spinsize[0] + 2;
			tabs_height -= 2 * spinsize[1] + 2;
		}

		switch (this._getTabPosition()) {
			case "top":
			case "bottom":
				if (this._scrollIndex == -1) {
					scrMousePoint = compMousePoint;
				}
				else {
					scrMousePoint[0] = compMousePoint[0] + this._buttonRect[this._scrollIndex].left - bmleft;
					scrMousePoint[1] = compMousePoint[1];
				}

				for (index = 0; index < tabpagecnt; index++) {
					if (this._ptInRect(this._buttonRect[index], scrMousePoint[0], scrMousePoint[1])) {
						if (this._isMultiLine()) {
							tabindex = index;
						}
						else if (this._scrollIndex != -1) {
							if ((this._buttonRect[index].right - this._buttonRect[index].left) <= tabs_width) {
								tabindex = index;
							}
						}
						else {
							if (this._buttonRect[index].right <= prop_width) {
								tabindex = index;
							}
						}

						break;
					}
				}
				break;
			case "left":
			case "right":
				if (this._scrollIndex == -1) {
					scrMousePoint = compMousePoint;
				}
				else {
					scrMousePoint[0] = compMousePoint[0];
					scrMousePoint[1] = compMousePoint[1] + this._buttonRect[this._scrollIndex].top;
				}

				for (index = 0; index < tabpagecnt; index++) {
					if (this._ptInRect(this._buttonRect[index], scrMousePoint[0], scrMousePoint[1])) {
						if (this._isMultiLine()) {
							tabindex = index;
						}
						else if (this._scrollIndex != -1) {
							if ((this._buttonRect[index].bottom - this._buttonRect[this._scrollIndex].top) <= tabs_height) {
								tabindex = index;
							}
						}
						else {
							if (this._buttonRect[index].bottom <= prop_height) {
								tabindex = index;
							}
						}
						break;
					}
				}
				break;
		}

		return tabindex;
	};

	_pTabComponent._rearrangeBorder = function () {
		if (this._buttonRect.length - 1 < this.tabindex) {
			return;
		}

		var upleftborder = this._tabBorders[0];
		var downrightborder = this._tabBorders[1];
		var middlecenterborder = this._tabBorders[2];

		if (!upleftborder) {
			return;
		}
		if (!downrightborder) {
			return;
		}

		upleftborder._control_pseudo = "";
		downrightborder._control_pseudo = "";
		middlecenterborder._control_pseudo = "";

		var begin = -1, end = -1;

		var tabButtons = this._tabButtons;
		for (var i = 0, len = tabButtons.length; i < len; i++) {
			if (tabButtons[i] && tabButtons[i].visible) {
				var tabbutton = tabButtons[i];
				tabbutton._setElementBorder(tabbutton.getElement(), tabbutton.currentstyle.border, tabbutton.currentstyle.bordertype);

				if (begin == -1) {
					begin = i;
					end = i;
					continue;
				}

				end = i;
			}
		}

		if (begin == -1 && end == -1) {
			return;
		}

		var tabpos = this._getTabPosition();
		var rc;
		var visible_flag = true;
		if (this.tabindex >= begin && this.tabindex <= end) {
			rc = this._buttonRect[this.tabindex];
		}
		else {
			rc = this._buttonRect[begin];
			visible_flag = false;
		}

		var type = "";

		var buttonborder = this._buttonBorder;
		var buttonborder_w = 0;
		if (buttonborder) {
			buttonborder_w = buttonborder._top_width;
		}

		var borderwidth = 0;
		var border = this.on_find_CurrentStyle_border(this._pseudo);
		var b_left = 0, b_top = 0, b_right = 0, b_bottom = 0;
		if (border) {
			b_left = border._left_width || border._top_width;
			b_top = border._top_width;
			b_right = border._right_width || border._top_width;
			b_bottom = border._bottom_width || border._top_width;

			upleftborder._pseudo = downrightborder._pseudo = middlecenterborder._pseudo = this._pseudo;
			upleftborder._status = downrightborder._status = middlecenterborder._status = this._status;
		}

		switch (tabpos) {
			case "top":
				if (!visible_flag || rc.left < 0 || (rc.left + buttonborder_w - b_left) == 0) {
					upleftborder.set_visible(false);
				}
				else {
					upleftborder.set_visible(true);
				}
				upleftborder.move(0, rc.bottom, rc.left + buttonborder_w, b_top);

				if (rc.left < 0 || !visible_flag) {
					downrightborder.move(0, rc.bottom, this._adjust_width - b_right, b_top);
				}
				else {
					downrightborder.move(rc.right - buttonborder_w, rc.bottom, this._adjust_width - rc.right, b_top);
				}

				if (!visible_flag) {
					middlecenterborder.set_visible(false);
				}
				else {
					middlecenterborder.set_visible(true);
				}
				middlecenterborder.move((rc.left + buttonborder_w), rc.bottom, ((rc.right - buttonborder_w) - (rc.left + buttonborder_w)), b_top);
				break;
			case "bottom":
				if (nexacro.Browser == "Runtime") {
					upleftborder.move(0, rc.top - b_bottom, rc.left + buttonborder_w + 1, b_bottom + 1);
					downrightborder.move(0, rc.top - b_bottom + 1, this._adjust_width - b_right, b_bottom);
					middlecenterborder.move((rc.left + buttonborder_w), (rc.top - b_bottom), ((rc.right - buttonborder_w) - (rc.left + buttonborder_w)) + 1, b_bottom + 1);
				}
				if (!visible_flag || rc.left < 0 || (rc.left + buttonborder_w - b_left == 0)) {
					upleftborder.set_visible(false);
				}
				else {
					upleftborder.set_visible(true);
				}
				upleftborder.move(0, rc.top - b_bottom, rc.left + buttonborder_w, b_bottom);

				if (rc.left < 0 || !visible_flag) {
					downrightborder.move(0, rc.top - b_bottom, this._adjust_width, b_bottom);
				}
				else {
					downrightborder.move(rc.right - buttonborder_w, rc.top - b_bottom, this._adjust_width, b_bottom);
				}

				if (!visible_flag) {
					middlecenterborder.set_visible(false);
				}
				else {
					middlecenterborder.set_visible(true);
				}
				middlecenterborder.move((rc.left + buttonborder_w), (rc.top - b_bottom), ((rc.right - buttonborder_w) - (rc.left + buttonborder_w)), b_bottom);
				break;
			case "left":
				if (!visible_flag || rc.top < 0) {
					upleftborder.set_visible(false);
				}
				else {
					upleftborder.set_visible(true);
				}
				upleftborder.move(rc.right, 0, b_left, rc.top + buttonborder_w);

				if (rc.top < 0 || !visible_flag) {
					downrightborder.move(rc.right, b_top, b_left, this._adjust_height - b_bottom);
				}
				else {
					downrightborder.move(rc.right, rc.bottom - buttonborder_w, b_left, this._adjust_height - rc.bottom + buttonborder_w);
				}

				if (!visible_flag) {
					middlecenterborder.set_visible(false);
				}
				else {
					middlecenterborder.set_visible(true);
				}
				middlecenterborder.move(rc.right, (rc.top + buttonborder_w), b_left, ((rc.bottom - buttonborder_w) - (rc.top + buttonborder_w)));
				break;
			case "right":
				if (nexacro.Browser == "Runtime") {
					upleftborder.move(rc.left - b_right, 0, b_right + 1, rc.top + buttonborder_w + 1);
					downrightborder.move(rc.left - b_right + 1, b_top, b_right, this._adjust_height - b_bottom);
					middlecenterborder.move((rc.left - b_right), (rc.top + buttonborder_w), b_right + 1, ((rc.bottom - buttonborder_w) - (rc.top + buttonborder_w)) + 1);
				}
				if (!visible_flag || rc.top < 0) {
					upleftborder.set_visible(false);
				}
				else {
					upleftborder.set_visible(true);
				}
				upleftborder.move(rc.left - b_right, 0, b_right, rc.top + buttonborder_w);

				if (rc.top < 0 || !visible_flag) {
					downrightborder.move(rc.left - b_right, b_top, b_right, this._adjust_height - b_bottom);
				}
				else {
					downrightborder.move(rc.left - b_right, rc.bottom - buttonborder_w, b_right, this._adjust_height - rc.bottom + buttonborder_w);
				}

				if (!visible_flag) {
					middlecenterborder.set_visible(false);
				}
				else {
					middlecenterborder.set_visible(true);
				}
				middlecenterborder.move((rc.left - b_right), (rc.top + buttonborder_w), b_right, ((rc.bottom - buttonborder_w) - (rc.top + buttonborder_w)));
				break;
		}
	};

	_pTabComponent._rearrangeButton = function () {
		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0) {
			return;
		}

		if (this._buttonRect.length <= 0) {
			return;
		}

		switch (this._getTabPosition()) {
			case "top":
				this._rearrangeTopButton();
				break;
			case "bottom":
				this._rearrangeBottomButton();
				break;
			case "left":
				this._rearrangeLeftButton();
				break;
			case "right":
				this._rearrangeRightButton();
				break;
		}

		this._resetTabPage();

		if (this.enable == false) {
			if (this.spinupbutton) {
				this.spinupbutton.set_enable(false);
			}
			if (this.spindownbutton) {
				this.spindownbutton.set_enable(false);
			}
		}

		if (!this._bSpin) {
			this._scrollIndex = 0;
			if (this.spindownbutton) {
				this.spindownbutton.set_visible(false);
			}
			if (this.spinupbutton) {
				this.spinupbutton.set_visible(false);
			}
		}

		var border = this.on_find_CurrentStyle_border(this._pseudo);
		if (border && border._top_width != 0) {
			this._rearrangeBorder();
		}

		var buttonWidth = this._buttonWidth;
		var buttonRect = this._buttonRect;
		for (var i = 0; i < tabpagecnt; i++) {
			buttonWidth[i] = buttonRect[i].right - buttonRect[i].left;
		}
	};


	_pTabComponent._resetTabPage = function () {
		var child_list = this._child_list;
		var child_list_len = child_list ? child_list.length : 0;
		if (child_list_len <= 0 || this._tabButtons.length <= 0) {
			return;
		}

		for (var i = 0; i < child_list_len; i++) {
			var pagecontrol = child_list[i];
			var btncontrol = this._tabButtons[i];
			if (pagecontrol != null) {
				if (!btncontrol) {
					break;
				}


				if (this.enable) {
					if (pagecontrol.enable) {
						if (i == this.tabindex) {
							pagecontrol.set_visible(true);
							btncontrol._stat_change("select", "selected");
						}
						else {
							pagecontrol.set_visible(false);

							btncontrol._status = "notselect";

							if (btncontrol._pseudo != "mouseover") {
								btncontrol._pseudo = "normal";
							}

							btncontrol._stat_change(btncontrol._status, btncontrol._pseudo);
						}
					}
					else {
						if (i == this.tabindex) {
							pagecontrol.set_visible(true);
						}
						else {
							pagecontrol.set_visible(false);
						}

						btncontrol._status = "disable";
						btncontrol._pseudo = "disabled";
						btncontrol._stat_change(btncontrol._status, btncontrol._pseudo);
					}
				}
				else {
					btncontrol._status = "disable";
					btncontrol._pseudo = "disabled";
					btncontrol._stat_change(btncontrol._status, btncontrol._pseudo);
				}
			}
		}
	};


	_pTabComponent._getToolBarSize = function () {
		return 0;
	};

	_pTabComponent._rearrangeTopButton = function () {
		var pseudo = this._pseudo;
		var type = "", radiusX = 0, radiusY = 0;
		var rtTab = null;

		var padding = this.on_find_CurrentStyle_padding(pseudo);
		var buttonborder = this._buttonBorder;
		var buttonborder_w = buttonborder ? (buttonborder._left_width + buttonborder._right_width) : 0;
		var buttonpadding = this.on_find_CurrentStyle_buttonpadding("normal");
		var buttonpadding_w = buttonpadding ? (buttonpadding.left + buttonpadding.right) : 0;

		var bordertype = this.on_find_CurrentStyle_bordertype(pseudo);
		type = bordertype ? bordertype.type : "";
		if (bordertype != null && type == "round") {
			radiusX = bordertype.radiusx;
			radiusY = bordertype.radiusy;
		}

		var clientWidth = this._adjust_width;
		var clientHeight = this._adjust_height;
		var tabpagecnt = this._child_list.length;

		var total_width = 0;
		var maxWidth = clientWidth - (Math.ceil(this._getToolBarSize()) | 0) - radiusX;
		var maxHeight = 0;

		var bmleft = 0, bmright = 0, bmtop = 0, bmbottom = 0;
		var btnbuttonmargin = this.on_find_CurrentStyle_buttonmargin(pseudo);
		if (btnbuttonmargin) {
			bmleft = btnbuttonmargin.left;
			bmright = btnbuttonmargin.right;
			bmbottom = btnbuttonmargin.bottom;
			bmtop = btnbuttonmargin.top;
		}
		var rtButton = [], rtText;
		for (var i = 0; i < tabpagecnt; i++) {
			rtText = this._getButtonSize(i);
			rtButton[i] = rtText;
			maxHeight = ((rtText.bottom - rtText.top) > maxHeight) ? (rtText.bottom - rtText.top) : maxHeight;
		}

		maxHeight += buttonborder ? (buttonborder._top_width + buttonborder._bottom_width) : 0;

		var buttonRect = this._buttonRect;
		var isextrabutton = this._isExtraButton();
		for (var i = 0; i < tabpagecnt; i++) {
			rtText = rtButton[i];

			var button_rect = buttonRect[i];

			if (!button_rect) {
				break;
			}

			button_rect.left = total_width + bmleft;
			button_rect.bottom = maxHeight;
			button_rect.right = button_rect.left + (rtText.right - rtText.left) + buttonborder_w;
			button_rect.top = bmtop;

			if (isextrabutton) {
				button_rect.right += maxHeight;
			}
			total_width = button_rect.right + bmright;

			this._buttonRect[i] = button_rect;
			this._buttonWidth[i] = button_rect.right - button_rect.left;
		}

		if ((total_width - bmright) >= maxWidth) {
			if (this._isMultiLine()) {
				this._scrollIndex = -1;
				this._lastIndex = tabpagecnt - 1;
				var row_cnt = (total_width / maxWidth + 1) | 0;
				var avrSize = (Math.ceil(total_width / row_cnt) | 0);
				var count = 0;
				var fromtab = 0;
				var tilltab = 0;
				for (var i = 0; i < row_cnt; i++) {
					while (count < tabpagecnt) {
						var button_rect = buttonRect[count];
						if (!button_rect) {
							break;
						}

						if (button_rect.right > (total_width / row_cnt) * (i + 1) || count == tabpagecnt - 1) {
							if (count == tabpagecnt - 1) {
								tilltab = count;
							}
							else if (((total_width / row_cnt) * (i + 1) - button_rect.left) < (button_rect.right - (total_width / row_cnt)
								 * (i + 1))) {
								tilltab = Math.ceil(count - 1) | 0;
							}
							else {
								tilltab = count;
							}

							if (tilltab < 0) {
								tilltab = 0;
							}

							var total_height = 0;
							var inc_width = 0;
							var line_width = buttonRect[tilltab].right - (buttonRect[fromtab] ? buttonRect[fromtab].left : 0);

							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.right = Math.ceil(inc_width + (button_rect.right - button_rect.left) * maxWidth / line_width) | 0;
								button_rect.left = inc_width;
								if (button_rect.bottom > total_height) {
									total_height = button_rect.bottom;
								}

								inc_width = button_rect.right;
							}


							buttonRect[tilltab].right = maxWidth - 1;

							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.bottom = total_height;
							}

							for (var j = tilltab + 1; j < tabpagecnt; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.bottom = (button_rect.bottom - button_rect.top) + total_height;
								button_rect.top = total_height;
							}

							fromtab = tilltab + 1;

							break;
						}
						count++;
					}
				}

				this._rollButtonUp();
				this._bSpin = false;
			}
			else {
				var spinsize = this._getSpinSize();

				var rcButton = {
					left : 0, 
					top : 0, 
					right : 0, 
					bottom : 0
				};
				rcButton.left = maxWidth - spinsize[0] * 2 - 2;

				var scrollidx = this._scrollIndex;

				if (this._scrollIndex < 0 || this._scrollIndex >= this._child_list.length) {
					scrollidx = this._child_list.length - 1;
				}

				var buttonRect_scroll = buttonRect[scrollidx];
				if (!buttonRect_scroll) {
					return;
				}

				rcButton.top = buttonRect_scroll.bottom - spinsize[1] - 2;
				rcButton.right = maxWidth - spinsize[0] - 2;
				rcButton.bottom = buttonRect_scroll.bottom - 2;

				if (this.spinupbutton) {
					this.spinupbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					this.spinupbutton.set_visible(true);

					if (this._scrollIndex <= 0) {
						this.spinupbutton.set_enable(false);
					}
					else {
						this.spinupbutton.set_enable(true);
					}
				}

				rcButton.left = maxWidth - spinsize[0];
				rcButton.top = buttonRect[scrollidx].bottom - spinsize[1] - 2;
				rcButton.right = maxWidth;
				rcButton.bottom = buttonRect[scrollidx].bottom - 2;

				if (this.spindownbutton) {
					var spinpos = this.spindownbutton.position;

					if (spinpos.left != rcButton.left || spinpos.right != rcButton.right || spinpos.top != rcButton.top || spinpos.bottom != rcButton.bottom) {
						this.spindownbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					}

					this.spindownbutton.set_visible(true);

					if (this._scrollIndex == tabpagecnt - 1) {
						this.spindownbutton.set_enable(false);
					}
					else {
						this.spindownbutton.set_enable(true);
					}
				}
				this._bSpin = true;
			}
		}
		else {
			this._lastIndex = tabpagecnt - 1;
			if (this._isTabButtonJustify()) {
				var total_buttonWidth = 0;
				var buttonWidth = this._buttonWidth;
				var buttonWidth_len = buttonWidth ? buttonWidth.length : 0;
				for (var i = 0; i < buttonWidth_len; i++) {
					total_buttonWidth += buttonWidth[i];
				}

				var inc_width = 0;
				for (var i = 0; i < tabpagecnt; i++) {
					var button_rect = buttonRect[i];
					if (!button_rect) {
						break;
					}

					button_rect.left = inc_width;
					inc_width = button_rect.right = button_rect.left + (Math.floor(maxWidth * (this._buttonWidth[i] / total_buttonWidth)) | 0);
				}

				if (buttonRect && buttonRect.length >= tabpagecnt) {
					buttonRect[tabpagecnt - 1].right = maxWidth - 1;
				}
			}
			this._bSpin = false;
		}

		var iMaxBottom = 0;
		for (var i = 0; i < tabpagecnt; i++) {
			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			if (iMaxBottom < button_rect.bottom) {
				iMaxBottom = button_rect.bottom;
			}
		}

		var pagerect = {
			left : 0, 
			top : iMaxBottom, 
			right : clientWidth, 
			bottom : clientHeight
		};
		var btnrect = null;

		var border = this.on_find_CurrentStyle_border(pseudo);
		var b_left = 0, b_top = 0, b_right = 0, b_bottom = 0;

		if (border) {
			b_left = border._left_width || border._top_width;
			b_top = border._top_width;
			b_right = border._right_width || border._top_width;
			b_bottom = border._bottom_width || border._top_width;
		}


		if (this._tabpagearea) {
			var pageborder = this._tabpagearea.on_find_CurrentStyle_border(pseudo);
			this._tabpagearea.on_apply_style_border(pageborder);
			this._tabpagearea.move(pagerect.left, pagerect.top, pagerect.right - pagerect.left, pagerect.bottom - pagerect.top);
		}

		var margin = this._child_list[0].on_find_CurrentStyle_margin(pseudo);
		var m_l = 0, m_t = 0, m_r = 0, m_b = 0;
		if (margin) {
			m_l = margin.left;
			m_t = margin.top;
			m_r = margin.right;
			m_b = margin.bottom;
		}

		pagerect = this._getTabpageClientRectBorder(pagerect, border, bordertype, padding, "top");

		var page_l = pagerect.left + b_left + m_l;
		var page_t = pagerect.top + b_top + m_t;
		var page_w = pagerect.right - b_right - pagerect.left - b_left - m_r - m_l;
		var page_h = pagerect.bottom - pagerect.top - b_bottom - b_top - m_b - m_t;
		var child_list = this._child_list;
		for (var i = 0; i < tabpagecnt; i++) {
			var pagecontrol = child_list[i];
			if (pagecontrol != null) {
				var page_ad_w = pagecontrol._adjust_width;
				var page_ad_h = pagecontrol._adjust_height;

				if (pagecontrol._adjust_left != page_l || pagecontrol._adjust_top != page_t || pagecontrol._getPosRight() != page_w || pagecontrol._getPosBottom() != page_h) {
					pagecontrol.move(page_l, page_t, page_w, page_h);
				}
				else {
					pagecontrol.move(page_l, page_t, page_ad_w, page_ad_h);
				}
			}
		}
	};

	_pTabComponent._drawButton = function () {
		if (this._buttonRect.length <= 0) {
			return;
		}

		switch (this._getTabPosition()) {
			case "top":
			case "bottom":
				this._drawClientTopBottom();
				break;
			case "left":
			case "right":
				this._drawClientLeftRight();
				break;
		}
	};
	_pTabComponent._drawClientTopBottom = function () {
		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0) {
			return;
		}

		var clientWidth = this._adjust_width;
		var clientHeight = this._adjust_height;

		if (clientWidth <= 0 || clientHeight <= 0) {
			return;
		}

		if (this._scrollIndex < 0) {
			this._scrollIndex = 0;
		}

		if (this._scrollIndex >= this._child_list.length) {
			this._scrollIndex = this._child_list.length - 1;
		}

		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);
		var bmleft = 0, bmright = 0, bmbottom = 0, bmtop = 0;
		if (buttonmargin != null || buttonmargin != undefined) {
			bmleft = buttonmargin.left;
			bmright = buttonmargin.right;
			bmtop = buttonmargin.top;
			bmbottom = buttonmargin.bottom;
		}

		var lPassing = this._buttonRect[this._scrollIndex].left - bmleft;

		var buttonRect = this._buttonRect;
		var len = buttonRect.length;
		for (var i = 0; i < len; i++) {
			if (this._scrollIndex != -1) {
				buttonRect[i].left -= lPassing;
				buttonRect[i].right -= lPassing;
			}
		}


		if (this._isMultiLine() || !this._bSpin) {
			for (var i = 0; i < tabpagecnt; i++) {
				this._drawTabButton(i);
			}
		}
		else {
			var border = this.on_find_CurrentStyle_border(this._pseudo);
			var bmborderleft = 0;

			if (border) {
				bmborderleft = border._left_width || border._top_width;
			}

			var spinsize = this._getSpinSize();
			var tabs_width = clientWidth - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[0] * 2) - 2;
			var start = 0, end = 0;
			this._lastIndex = start = this._scrollIndex;

			for (var i = tabpagecnt - 1; i >= start; i--) {
				if (!buttonRect[i]) {
					break;
				}

				if ((buttonRect[i].right - buttonRect[this._scrollIndex].left + bmborderleft) <= tabs_width) {
					this._lastIndex = end = i;
					break;
				}
				else if (i == this._scrollIndex) {
					this._lastIndex = end = i;
					break;
				}
			}

			var tabButtons = this._tabButtons;
			var tabextrabutton = this._tabextrabuttons;

			var isextrabutton = this._isExtraButton();

			for (var i = 0; i < start; i++) {
				tabButtons[i].set_visible(false);
				if (isextrabutton && tabextrabutton[i]) {
					tabextrabutton[i].set_visible(false);
				}
			}

			for (var i = len - 1; i > end; i--) {
				tabButtons[i].set_visible(false);
				if (isextrabutton && tabextrabutton[i]) {
					tabextrabutton[i].set_visible(false);
				}
			}

			for (var i = end; i >= start; i--) {
				tabButtons[i].set_visible(true);
				if (isextrabutton && tabextrabutton[i]) {
					tabextrabutton[i].set_visible(true);
				}
				this._drawTabButton(i);
			}

			this._rearrangeBorder();

			if (end == tabpagecnt - 1 && this.spindownbutton.enable) {
				this.spindownbutton.set_enable(false);
			}

			if (start == 0 && this.spinupbutton.enable) {
				this.spinupbutton.set_enable(false);
			}
		}
	};

	_pTabComponent._drawClientLeftRight = function () {
		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0) {
			return;
		}

		var clientHeight = this._adjust_height;
		if (clientHeight <= 0) {
			return;
		}

		if (this._scrollIndex < 0) {
			this._scrollIndex = 0;
		}

		if (this._scrollIndex >= this._child_list.length) {
			this._scrollIndex = this._child_list.length - 1;
		}

		var buttonRect = this._buttonRect;
		var lPassing = buttonRect[this._scrollIndex].top;

		var len = buttonRect.length;
		for (var i = 0; i < len; i++) {
			if (this._scrollIndex != -1) {
				buttonRect[i].top -= lPassing;
				buttonRect[i].bottom -= lPassing;
			}
		}


		if (this._isMultiLine() || !this._bSpin) {
			for (var i = tabpagecnt - 1; i >= 0; i--) {
				if (i != this.tabindex) {
					this._drawTabButton(i);
				}
			}
			this._drawTabButton(this.tabindex);
		}
		else {
			var border = this.on_find_CurrentStyle_border(this._pseudo);
			var bmtop = 0;

			if (border) {
				bmtop = border._top_width;
			}

			var spinsize = this._getSpinSize();
			var tabs_height = clientHeight - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[1] * 2) - 2;

			var start = 0, end = 0;
			this._lastIndex = start = this._scrollIndex;

			for (var i = tabpagecnt - 1; i >= start; i--) {
				if (!buttonRect[i]) {
					break;
				}

				if ((buttonRect[i].bottom - buttonRect[this._scrollIndex].top + bmtop) <= tabs_height) {
					this._lastIndex = end = i;
					break;
				}
				else if (i == this._scrollIndex) {
					this._lastIndex = end = i;
					break;
				}
			}

			var tabButtons = this._tabButtons;
			var tabextrabutton = this._tabextrabuttons;
			var isextrabutton = this._isExtraButton();
			for (var i = 0; i < len; i++) {
				tabButtons[i].set_visible(false);
				if (isextrabutton && tabextrabutton[i]) {
					tabextrabutton[i].set_visible(false);
				}
			}

			for (var i = end; i >= start; i--) {
				tabButtons[i].set_visible(true);
				if (isextrabutton && tabextrabutton[i]) {
					tabextrabutton[i].set_visible(true);
				}
				this._drawTabButton(i);
			}



			this._rearrangeBorder();

			if (end == tabpagecnt - 1 && this.spindownbutton.enable) {
				this.spindownbutton.set_enable(false);
			}

			if (start == 0 && this.spinupbutton.enable) {
				this.spinupbutton.set_enable(false);
			}
		}
	};

	_pTabComponent._drawTabButton = function (index) {
		var button_rect = this._buttonRect[index];
		if (!button_rect) {
			return;
		}

		if (button_rect.bottom > 0) {
			if (index < 0 || index >= this._child_list.length) {
				return;
			}
			var btnrect = null;
			var tabbutton = this._tabButtons[index];
			if (tabbutton != null) {
				btnrect = this._getExtraButtonArea(button_rect);
				var isextrabutton = this._isExtraButton();
				if (isextrabutton) {
					this._drawExtraButton(btnrect, index, true);
				}

				var align = nexacro._getCachedAlignObj("center middle");
				tabbutton.on_apply_style_align(align);

				if (tabbutton.left != button_rect.left || tabbutton.top != button_rect.top
					 || tabbutton.right != button_rect.right || tabbutton.bottom != button_rect.bottom) {
					tabbutton.move(button_rect.left, button_rect.top, button_rect.right - button_rect.left, button_rect.bottom - button_rect.top);
				}

				if (isextrabutton) {
					var extrabutton_w = this._tabextrabuttons ? (this._tabextrabuttons[index] ? this._tabextrabuttons[index].width : 20) : 20;
					var right = Math.ceil(button_rect.right - extrabutton_w) | 0;
					var control = tabbutton._text_elem;
					if (control) {
						var buttonpadding = this.on_find_CurrentStyle_buttonpadding(tabbutton._pseudo);
						var p_w = buttonpadding ? (buttonpadding.left + buttonpadding.right) : 0;
						var p_h = buttonpadding ? (buttonpadding.top + buttonpadding.bottom) : 0;
						control.setElementSize(right - button_rect.left - p_w, control.height);
					}
				}
				if (!tabbutton.visible) {
					tabbutton.set_visible(true);
				}
			}
		}
	};

	_pTabComponent._drawExtraButton = function (rect, idx, showflag) {
		if (this._tabextrabuttons[idx]) {
			var width = rect.right - rect.left;
			var height = rect.bottom - rect.top;

			var img_width = 12;
			var img_height = 12;

			var img_y = Math.ceil(img_height / 2) | 0;
			var half_height = Math.ceil(height / 2) | 0;

			if (width <= 0 || height <= 0) {
				return;
			}

			var _tabButton = this._tabButtons[idx];
			var _btnBorder_w = 0;

			if (_tabButton && (_tabButton._pseudo == _tabButton.parent._contents_pseudo)) {
				var _btnBorder = this.on_find_CurrentStyle_buttonborder(_tabButton._pseudo);
				if (_btnBorder && (parseInt(_btnBorder.width) > parseInt(this._buttonBorder.width))) {
					_btnBorder_w = parseInt(_btnBorder.width) / 2;
				}
			}

			var extrabutton = this._tabextrabuttons[idx];
			extrabutton.set_visible(showflag);
			if (showflag) {
				extrabutton.move(rect.left - _btnBorder_w, rect.top + half_height - img_y + _btnBorder_w, rect.right - rect.left, img_y * 2);
			}
		}
	};

	_pTabComponent._getClientRectPadding = function (rect, buttonpaddingvalue) {
		var rc = rect;
		switch (this._getTabPosition()) {
			case "top":
			case "bottom":
				rc.right += buttonpaddingvalue.left + buttonpaddingvalue.right;
				rc.bottom += buttonpaddingvalue.top + buttonpaddingvalue.bottom;
				break;
			case "right":
			case "left":
				rc.right += buttonpaddingvalue.left + buttonpaddingvalue.right;
				rc.bottom += buttonpaddingvalue.top + buttonpaddingvalue.bottom;
				break;
		}
		return rc;
	};

	_pTabComponent._getExtraButtonArea = function (rect) {
		var btnrect = {
			left : 0, 
			top : 0, 
			right : 0, 
			bottom : 0
		};
		var nAreaWidth = rect.right - rect.left;
		var nAreaHeight = rect.bottom - rect.top;

		var margin = this.on_find_CurrentStyle_margin(this._pseudo);

		var nLeftMargin = 0, nRightMargin = 0, nTopMargin = 0, nBottomMargin = 0;
		if (margin) {
			nLeftMargin = margin.left;
			nRightMargin = margin.right;
			nTopMargin = margin.top;
			nBottomMargin = margin.bottom;
		}

		switch (this._getTabPosition()) {
			case "top":
			case "bottom":
				btnrect.top = rect.top + nTopMargin;
				btnrect.bottom = rect.bottom - nBottomMargin;
				btnrect.left = rect.right - nAreaHeight + nLeftMargin;
				btnrect.right = rect.right - nRightMargin;
				break;
			case "left":
				if (this._isRotateText()) {
					btnrect.left = rect.left + nLeftMargin;
					btnrect.right = rect.right - nRightMargin;
					btnrect.top = rect.top + nTopMargin;
					btnrect.bottom = rect.top + nAreaWidth - nBottomMargin;
				}
				else {
					btnrect.top = rect.top + nTopMargin;
					btnrect.bottom = rect.bottom - nBottomMargin;
					btnrect.left = rect.right - nAreaHeight + nLeftMargin;
					btnrect.right = rect.right - nRightMargin;
				}
				break;
			case "right":
				if (this._isRotateText()) {
					btnrect.left = rect.left + nLeftMargin;
					btnrect.right = rect.right - nRightMargin;
					btnrect.bottom = rect.bottom - nBottomMargin;
					btnrect.top = rect.bottom - nAreaWidth + nTopMargin;
				}
				else {
					btnrect.top = rect.top + nTopMargin;
					btnrect.bottom = rect.bottom - nBottomMargin;
					btnrect.left = rect.right - nAreaHeight + nLeftMargin;
					btnrect.right = rect.right - nRightMargin;
				}
				break;
		}
		return btnrect;
	};

	_pTabComponent._rearrangeBottomButton = function () {
		var pseudo = this._pseudo;
		var border = this.on_find_CurrentStyle_border(pseudo);
		var bordertype = this.on_find_CurrentStyle_bordertype(pseudo);
		var padding = this.on_find_CurrentStyle_padding(pseudo);
		var buttonborder = this._buttonBorder;
		var buttonborder_w = buttonborder ? buttonborder._top_width : 0;
		var buttonpadding = this.on_find_CurrentStyle_buttonpadding("normal");
		var buttonpadding_w = buttonpadding ? (buttonpadding.left + buttonpadding.right) : 0;

		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(pseudo);

		var bmtop = 0, bmright = 0, bmbottom = 0, bmleft = 0;
		if (buttonmargin) {
			bmleft = buttonmargin.left;
			bmtop = buttonmargin.top;
			bmright = buttonmargin.right;
			bmbottom = buttonmargin.bottom;
		}

		var borderwidth = 0;

		var b_left = 0, b_top = 0, b_right = 0, b_bottom = 0;
		if (border) {
			b_left = border._left_width || border._top_width;
			b_top = border._top_width;
			b_right = border._right_width || border._top_width;
			b_bottom = border._bottom_width || border._top_width;
		}

		var radiusX = 0, radiusY = 0;
		if (this.bordertype && this.bordertype.type == "round") {
			radiusX = this.bordertype.radiusx;
			radiusY = this.bordertype.radiusy;
		}

		var clientWidth = this._adjust_width;
		var clientHeight = this._adjust_height;
		var tabpagecnt = this._child_list.length;

		var total_width = 0;
		var maxWidth = clientWidth - (Math.ceil(this._getToolBarSize()) | 0) - radiusX;
		var maxHeight = 0;
		var btnText = [], rtText;

		for (var i = 0; i < tabpagecnt; i++) {
			rtText = this._getButtonSize(i);
			btnText[i] = rtText;
			maxHeight = ((rtText.bottom - rtText.top) > maxHeight) ? (rtText.bottom - rtText.top) : maxHeight;
		}
		maxHeight += buttonborder ? (buttonborder._top_width + buttonborder._bottom_width) : 0;

		var buttonRect = this._buttonRect;
		var isextrabutton = this._isExtraButton();
		for (var i = 0; i < tabpagecnt; i++) {
			rtText = btnText[i];

			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			button_rect.left = total_width + bmleft;
			button_rect.bottom = clientHeight;
			button_rect.right = button_rect.left + (rtText.right - rtText.left) + (buttonborder_w + buttonborder_w);
			button_rect.top = button_rect.bottom - maxHeight;

			if (isextrabutton) {
				button_rect.right += maxHeight;
			}

			total_width = button_rect.right + bmright;

			this._buttonRect[i] = button_rect;
			this._buttonWidth[i] = button_rect.right - button_rect.left;
		}

		if ((total_width - bmright) >= maxWidth) {
			if (this._isMultiLine()) {
				this._scrollIndex = -1;
				this._lastIndex = tabpagecnt - 1;
				var row_cnt = (total_width / maxWidth + 1) | 0;
				var avrSize = Math.ceil(total_width / row_cnt) | 0;
				var count = 0;
				var fromtab = 0;
				var tilltab = 0;
				for (var i = 0; i < row_cnt; i++) {
					while (count < tabpagecnt) {
						var button_rect = buttonRect[count];
						if (!button_rect) {
							break;
						}

						if (button_rect.right > Math.ceil(total_width / row_cnt) * (i + 1) || count == tabpagecnt - 1) {
							if (count == tabpagecnt - 1) {
								tilltab = count;
							}
							else if (((total_width / row_cnt) * (i + 1) - button_rect.left) < (button_rect.right - (total_width / row_cnt)
								 * (i + 1))) {
								tilltab = count - 1;
							}
							else {
								tilltab = count;
							}

							var total_height = clientHeight;
							var inc_width = 0;
							var line_width = buttonRect[tilltab].right - buttonRect[fromtab].left;

							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.right = Math.ceil(inc_width + (button_rect.right - button_rect.left) * maxWidth / line_width) | 0;
								button_rect.left = inc_width;
								if (button_rect.top < total_height) {
									total_height = button_rect.top;
								}

								inc_width = button_rect.right;
							}

							buttonRect[tilltab].right = maxWidth - 1;
							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.top = total_height;
							}

							for (var j = tilltab + 1; j < tabpagecnt; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.top = total_height - (button_rect.bottom - button_rect.top);
								button_rect.bottom = total_height;
							}

							fromtab = tilltab + 1;
							break;
						}
						count++;
					}
				}
				this._rollButtonUp();
				this._bSpin = false;
			}
			else {
				var spinsize;
				spinsize = this._getSpinSize();

				var tabs_width = clientWidth - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[0] * 2) - 2;

				var tabindex = this.tabindex;

				var scrollidx = this._scrollIndex;

				if (this._scrollIndex < 0 || this._scrollIndex >= this._child_list.length) {
					scrollidx = this._child_list.length - 1;
				}

				var buttonRect_scroll = buttonRect[scrollidx];
				if (!buttonRect_scroll) {
					return;
				}

				var rcButton = {
					left : 0, 
					top : 0, 
					right : 0, 
					bottom : 0
				};

				rcButton.left = maxWidth - spinsize[0] * 2 - 2;
				rcButton.top = buttonRect_scroll.top + 2;
				rcButton.right = maxWidth - spinsize[0] - 2;
				rcButton.bottom = buttonRect_scroll.top + spinsize[1] + 2;

				this.spinupbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
				this.spinupbutton.set_visible(true);

				if (this._scrollIndex == 0) {
					this.spinupbutton.set_enable(false);
				}
				else {
					this.spinupbutton.set_enable(true);
				}

				rcButton.left = maxWidth - spinsize[0];
				rcButton.top = buttonRect[scrollidx].top + 2;
				rcButton.right = maxWidth;
				rcButton.bottom = buttonRect[scrollidx].top + spinsize[1] + 2;

				var spinpos = this.spindownbutton.position;

				if (spinpos.left != rcButton.left || spinpos.right != rcButton.right || spinpos.top != rcButton.top || spinpos.bottom != rcButton.bottom) {
					this.spindownbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					this.spindownbutton.set_visible(true);

					if (this._scrollIndex == tabpagecnt - 1) {
						this.spindownbutton.set_enable(false);
					}
					else {
						this.spindownbutton.set_enable(true);
					}
				}

				this._bSpin = true;
			}
		}
		else {
			this._scrollIndex = -1;
			this._lastIndex = tabpagecnt - 1;
			if (this._isTabButtonJustify()) {
				var total_buttonWidth = 0;
				var buttonWidth = this._buttonWidth;
				var buttonWidth_len = buttonWidth ? buttonWidth.length : 0;
				for (var i = 0; i < buttonWidth_len; i++) {
					total_buttonWidth += buttonWidth[i];
				}

				var inc_width = 0;
				for (var i = 0; i < tabpagecnt; i++) {
					var button_rect = buttonRect[i];
					if (!button_rect) {
						break;
					}

					button_rect.left = inc_width + bmleft;
					inc_width = button_rect.right = button_rect.left + bmright + (Math.floor(maxWidth * (this._buttonWidth[i] / total_buttonWidth)) | 0);
				}

				if (buttonRect && buttonRect.length >= tabpagecnt) {
					buttonRect[tabpagecnt - 1].right = maxWidth - 1;
				}
			}

			this._bSpin = false;
		}

		var iMinTop = clientHeight;
		for (var i = 0; i < tabpagecnt; i++) {
			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			if (iMinTop > button_rect.top) {
				iMinTop = button_rect.top;
			}
		}

		var pagerect = {
			left : 0, 
			top : 0, 
			right : clientWidth, 
			bottom : iMinTop
		};
		var btnrect = null;


		if (this._tabpagearea) {
			var pageborder = this._tabpagearea.on_find_CurrentStyle_border(this._pseudo);
			this._tabpagearea.on_apply_style_border(pageborder);
			this._tabpagearea.move(pagerect.left, pagerect.top, pagerect.right - pagerect.left, pagerect.bottom - pagerect.top);
		}

		var margin = this._child_list[0].on_find_CurrentStyle_margin(pseudo);
		var m_l = 0, m_t = 0, m_r = 0, m_b = 0;
		if (margin) {
			m_l = margin.left;
			m_t = margin.top;
			m_r = margin.right;
			m_b = margin.bottom;
		}

		pagerect = this._getTabpageClientRectBorder(pagerect, border, bordertype, padding, "bottom");

		var page_l = pagerect.left + b_left + m_l;
		var page_t = pagerect.top + b_top + m_t;
		var page_w = pagerect.right - b_right - pagerect.left - b_left - m_r - m_l;
		var page_h = pagerect.bottom - pagerect.top - b_bottom - b_top - m_b - m_t;
		if (page_h < 0) {
			page_h = 0;
		}
		var child_list = this._child_list;
		for (var i = 0; i < tabpagecnt; i++) {
			var pagecontrol = child_list[i];
			if (pagecontrol != null) {
				pagecontrol.move(page_l, page_t, page_w, page_h);
			}
		}
	};

	_pTabComponent._getSpinSize = function () {
		var size = [];
		size[0] = 14;
		size[1] = 14;
		return size;
	};

	_pTabComponent._rearrangeLeftButton = function () {
		var type = "", radiusX = 0, radiusY = 0;

		var pseudo = this._pseudo;
		var border = this.on_find_CurrentStyle_border(pseudo);
		var bordertype = this.on_find_CurrentStyle_bordertype(pseudo);
		var padding = this.on_find_CurrentStyle_padding(pseudo);
		var buttonborder = this._buttonBorder;
		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(pseudo);
		var buttonborder_w = buttonborder ? (buttonborder._top_width + buttonborder._bottom_width) : 0;

		var buttonpadding = this.on_find_CurrentStyle_buttonpadding("normal");
		var buttonpadding_w = buttonpadding ? (buttonpadding.left + buttonpadding.right) : 0;


		var bmtop = 0, bmright = 0, bmbottom = 0, bmleft = 0;
		if (buttonmargin) {
			bmleft = buttonmargin.left;
			bmtop = buttonmargin.top;
			bmright = buttonmargin.right;
			bmbottom = buttonmargin.bottom;
		}

		var radiusX = 0, radiusY = 0;
		if (this.bordertype != null && this.bordertype.type == "round") {
			radiusX = this.bordertype.radiusx;
			radiusY = this.bordertype.radiusy;
		}

		var clientWidth = this._adjust_width;
		var clientHeight = this._adjust_height;
		var tabpagecnt = this._child_list.length;

		var total_height = 0;
		var maxWidth = 0, maxHeight = clientHeight - (Math.ceil(this._getToolBarSize()) | 0) - radiusY;
		var btnWidth = 0;
		var textwidth, textheight;

		var btnText = [];
		var rtText = null;
		for (var i = 0; i < tabpagecnt; i++) {
			rtText = this._getButtonSize(i);
			btnText[i] = rtText;

			if (this._isRotateText()) {
				textwidth = rtText.right - rtText.left;
				textheight = rtText.bottom - rtText.top;
				rtText.left = rtText.right - textheight;
				rtText.bottom = rtText.top + textwidth;
			}

			maxWidth = ((rtText.right - rtText.left) > maxWidth) ? (rtText.right - rtText.left) : maxWidth;
		}

		var max_txt_width = 0, max_txt_height = 0;
		var buttonRect = this._buttonRect;
		var isextrabutton = this._isExtraButton();
		for (var i = 0; i < tabpagecnt; i++) {
			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			rtText = btnText[i];

			button_rect.left = bmleft;
			button_rect.top = total_height + bmtop;
			button_rect.bottom = button_rect.top + (rtText.bottom - rtText.top) + buttonborder_w;
			button_rect.right = button_rect.left + maxWidth;

			if (isextrabutton) {
				if (this._isRotateText()) {
					if (max_txt_width < rtText.right - rtText.left) {
						max_txt_width = rtText.right - rtText.left;

						total_height = 0;

						i = -1;
						continue;
					}

					button_rect.bottom += max_txt_width;
				}
				else {
					if (max_txt_height < rtText.bottom - rtText.top) {
						max_txt_height = rtText.bottom - rtText.top;

						total_height = 0;

						i = -1;
						continue;
					}
					button_rect.right += max_txt_height;
				}
			}

			btnWidth = ((button_rect.right - button_rect.left) > btnWidth) ? (button_rect.right - button_rect.left) : btnWidth;

			total_height = button_rect.bottom + bmbottom;
		}

		if ((total_height - bmbottom) >= maxHeight) {
			if (this._isMultiLine()) {
				this._scrollIndex = -1;
				this._lastIndex = tabpagecnt - 1;
				var row_cnt = (total_height / maxHeight + 1) | 0;
				var avrSize = Math.ceil(total_height / row_cnt) | 0;
				var count = 0;
				var fromtab = 0;
				var tilltab = 0;

				for (var i = 0; i < row_cnt; i++) {
					while (count < tabpagecnt) {
						var button_rect = buttonRect[count];
						if (!button_rect) {
							break;
						}

						if (button_rect.bottom > Math.ceil(total_height / row_cnt) * (i + 1) || count == tabpagecnt - 1) {
							if (count == tabpagecnt - 1) {
								tilltab = count;
							}
							else if (((total_height / row_cnt) * (i + 1) - button_rect.top) < (button_rect.bottom - (total_height / row_cnt)
								 * (i + 1))) {
								tilltab = count - 1;
							}
							else {
								tilltab = count;
							}

							var total_width = 0;
							var inc_height = 0;
							var line_height = buttonRect[tilltab].bottom - buttonRect[fromtab].top;

							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.bottom = Math.ceil(inc_height + (button_rect.bottom - button_rect.top) * maxHeight / line_height) | 0;
								button_rect.top = inc_height;
								if (button_rect.right > total_width) {
									total_width = button_rect.right;
								}

								inc_height = button_rect.bottom;
							}

							buttonRect[tilltab].bottom = maxHeight - 1;
							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.right = total_width;
							}

							for (var j = tilltab + 1; j < tabpagecnt; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.right = (button_rect.right - button_rect.left) + total_width;
								button_rect.left = total_width;
							}

							fromtab = tilltab + 1;
							break;
						}
						count++;
					}
				}

				this._rollButtonUp();
				this._bSpin = false;
			}
			else {
				var spinsize = this._getSpinSize();

				var scrollidx = this._scrollIndex;
				if (this._scrollIndex < 0 || this._scrollIndex >= this._child_list.length) {
					scrollidx = this._child_list.length - 1;
				}

				var tabs_height = clientHeight - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[1] * 2) - 2;

				var rcButton = {
					left : 0, 
					top : 0, 
					right : 0, 
					bottom : 0
				};
				rcButton.left = buttonRect[scrollidx].right - spinsize[0] - 2;
				rcButton.top = maxHeight - spinsize[1] * 2 - 2;
				rcButton.right = buttonRect[scrollidx].right - 2;
				rcButton.bottom = maxHeight - spinsize[1] - 2;

				if (this.spinupbutton) {
					this.spinupbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					this.spinupbutton.set_visible(true);

					if (this._scrollIndex <= 0) {
						this.spinupbutton.set_enable(false);
					}
					else {
						this.spinupbutton.set_enable(true);
					}
				}

				rcButton.left = buttonRect[scrollidx].right - spinsize[0] - 2;
				rcButton.top = maxHeight - spinsize[1];
				rcButton.right = buttonRect[scrollidx].right - 2;
				rcButton.bottom = maxHeight;

				var spindownbutton = this.spindownbutton;
				var s_right = spindownbutton._adjust_left + spindownbutton._adjust_width;
				var s_bottom = spindownbutton._adjust_top + spindownbutton._adjust_height;


				if (this.spindownbutton) {
					this.spindownbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					this.spindownbutton.set_visible(true);

					if (this._scrollIndex == tabpagecnt - 1) {
						this.spindownbutton.set_enable(false);
					}
					else {
						this.spindownbutton.set_enable(true);
					}
				}


				this._bSpin = true;
			}
		}
		else {
			this._lastIndex = tabpagecnt - 1;
			if (this._isTabButtonJustify()) {
				var inc_height = 0;
				for (var i = 0; i < tabpagecnt; i++) {
					var button_rect = buttonRect[i];
					if (!button_rect) {
						break;
					}

					max_txt_height = button_rect.bottom - button_rect.top;

					button_rect.top = inc_height;

					inc_height = button_rect.bottom = (Math.floor(button_rect.bottom * maxHeight / total_height) | 0);

					if (max_txt_height < (button_rect.bottom - button_rect.top)) {
						button_rect.right = button_rect.right - max_txt_height + (button_rect.bottom - button_rect.top);
					}
				}

				if (buttonRect && buttonRect.length >= tabpagecnt) {
					buttonRect[tabpagecnt - 1].bottom = maxHeight - 1;
				}
			}

			this._bSpin = false;
		}

		var iMaxRight = 0;
		for (var i = 0; i < tabpagecnt; i++) {
			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			if (iMaxRight < button_rect.right) {
				iMaxRight = button_rect.right;
			}
		}

		var b_left = 0, b_top = 0, b_right = 0, b_bottom = 0;
		if (border) {
			b_left = border._left_width || border._top_width;
			b_top = border._top_width;
			b_right = border._right_width || border._top_width;
			b_bottom = border._bottom_width || border._top_width;
		}

		var pagerect = {
			left : iMaxRight, 
			top : 0, 
			right : clientWidth, 
			bottom : clientHeight
		};


		if (this._tabpagearea) {
			var pageborder = this._tabpagearea.on_find_CurrentStyle_border(this._pseudo);
			this._tabpagearea.on_apply_style_border(pageborder);
			this._tabpagearea.move(pagerect.left, pagerect.top, pagerect.right - pagerect.left, pagerect.bottom - pagerect.top);
		}

		var margin = this._child_list[0].on_find_CurrentStyle_margin(pseudo);
		var m_l = 0, m_t = 0, m_r = 0, m_b = 0;
		if (margin) {
			m_l = margin.left;
			m_t = margin.top;
			m_r = margin.right;
			m_b = margin.bottom;
		}

		pagerect = this._getTabpageClientRectBorder(pagerect, buttonborder, bordertype, padding, "left");

		var page_l = pagerect.left + b_left + m_l;
		var page_t = pagerect.top + b_top + m_t;
		var page_w = pagerect.right - b_right - pagerect.left - b_left - m_r - m_l;
		var page_h = pagerect.bottom - pagerect.top - b_bottom - b_top - m_b - m_t;
		var child_list = this._child_list;
		for (var i = 0; i < tabpagecnt; i++) {
			var pagecontrol = child_list[i];
			if (pagecontrol != null) {
				var page_ad_w = pagecontrol._adjust_width;
				var page_ad_h = pagecontrol._adjust_height;

				if (pagecontrol._adjust_left != page_l || pagecontrol._adjust_top != page_t || pagecontrol._getPosRight() != page_w || pagecontrol._getPosBottom() != page_h) {
					pagecontrol.move(page_l, page_t, page_w, page_h);
				}
				else {
					pagecontrol.move(page_l, page_t, page_ad_w, page_ad_h);
				}
			}
		}
	};

	_pTabComponent._rearrangeRightButton = function () {
		var tabpagecnt = this._child_list.length;

		var pseudo = this._pseudo;
		var border = this.on_find_CurrentStyle_border(pseudo);
		var bordertype = this.on_find_CurrentStyle_bordertype(pseudo);
		var padding = this.on_find_CurrentStyle_padding(pseudo);
		var buttonborder = this._buttonBorder;
		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(pseudo);

		var rtText = null;

		var bmtop = 0, bmright = 0, bmbottom = 0, bmleft = 0;

		if (buttonmargin != null) {
			bmleft = buttonmargin.left;
			bmtop = buttonmargin.top;
			bmright = buttonmargin.right;
			bmbottom = buttonmargin.bottom;
		}

		var radiusX = 0, radiusY = 0;
		if (bordertype != null && bordertype.type == "round") {
			radiusX = bordertype.radiusx;
			radiusY = bordertype.radiusy;
		}

		var borderwidth = 0;
		if (buttonborder) {
			borderwidth = buttonborder._top_width + buttonborder._bottom_width;
		}

		var b_left = 0, b_top = 0, b_right = 0, b_bottom = 0;
		if (border) {
			b_left = border._left_width || border._top_width;
			b_top = border._top_width;
			b_right = border._right_width || border._top_width;
			b_bottom = border._bottom_width || border._top_width;
		}


		var clientWidth = this._adjust_width;
		var clientHeight = this._adjust_height;

		var total_height = 0;
		var maxWidth = 0, maxHeight = clientHeight - (Math.ceil(this._getToolBarSize()) | 0) - radiusY;
		var btnWidth = 0;
		var textwidth, textheight;
		var btnRect = [];
		for (var i = 0; i < tabpagecnt; i++) {
			rtText = this._getButtonSize(i);
			btnRect[i] = rtText;
			if (this._isRotateText()) {
				textwidth = rtText.right - rtText.left;
				textheight = rtText.bottom - rtText.top;
				rtText.right = rtText.left + textheight;
				rtText.bottom = rtText.top + textwidth;
			}

			maxWidth = ((rtText.right - rtText.left) > maxWidth) ? (rtText.right - rtText.left)
				 : maxWidth;
		}

		var buttonRect = this._buttonRect;
		var isextrabutton = this._isExtraButton();
		for (var i = 0; i < tabpagecnt; i++) {
			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			rtText = btnRect[i];

			button_rect.right = clientWidth - bmright;
			button_rect.left = button_rect.right - (rtText.right - rtText.left);
			button_rect.top = total_height + bmtop;
			button_rect.bottom = button_rect.top + (rtText.bottom - rtText.top) + borderwidth;

			if (isextrabutton) {
				if (this._isRotateText()) {
					button_rect.bottom += (rtText.right - rtText.left);
				}
				else {
					button_rect.left -= (rtText.bottom - rtText.top);
				}
			}

			btnWidth = ((button_rect.right - button_rect.left) > btnWidth) ? (button_rect.right - button_rect.left)
				 : btnWidth;

			total_height = button_rect.bottom + bmbottom;
		}

		for (var i = 0; i < tabpagecnt; i++) {
			var button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			button_rect.left = button_rect.right - btnWidth;
		}

		if ((total_height - bmbottom) >= maxHeight) {
			if (this._isMultiLine()) {
				this._scrollIndex = -1;
				this._lastIndex = tabpagecnt - 1;
				var row_cnt = (total_height / maxHeight + 1) | 0;
				var avrSize = Math.ceil(total_height / row_cnt) | 0;
				var count = 0;
				var fromtab = 0;
				var tilltab = 0;
				for (var i = 0; i < row_cnt; i++) {
					while (count < tabpagecnt) {
						var button_rect = buttonRect[count];
						if (!button_rect) {
							break;
						}

						if (button_rect.bottom > (total_height / row_cnt) * (i + 1) || count == tabpagecnt - 1) {
							if (count == tabpagecnt - 1) {
								tilltab = count;
							}
							else if (((total_height / row_cnt) * (i + 1) - button_rect.top) < (button_rect.bottom - (total_height / row_cnt) * (i + 1))) {
								tilltab = count - 1;
							}
							else {
								tilltab = count;
							}

							var total_width = clientWidth;
							var inc_height = 0;
							var line_height = buttonRect[tilltab].bottom - buttonRect[fromtab].top;

							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.bottom = Math.ceil(inc_height + (button_rect.bottom - button_rect.top) * maxHeight / line_height) | 0;
								button_rect.top = inc_height;
								if (button_rect.left < total_width) {
									total_width = button_rect.left;
								}

								inc_height = button_rect.bottom;
							}

							buttonRect[tilltab].bottom = maxHeight - 1;
							for (var j = fromtab; j <= tilltab; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.left = total_width;
							}

							for (var j = tilltab + 1; j < tabpagecnt; j++) {
								button_rect = buttonRect[j];
								if (!button_rect) {
									break;
								}

								button_rect.left = total_width - (button_rect.right - button_rect.left);
								button_rect.right = total_width;
							}

							fromtab = tilltab + 1;
							break;
						}
						count++;
					}
				}

				this._rollButtonUp();

				this._bSpin = false;
			}
			else {
				var spinsize = this._getSpinSize();

				var tabs_height = clientHeight - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[1] * 2) - 2;


				var rcButton = {
					left : 0, 
					top : 0, 
					right : 0, 
					bottom : 0
				};

				var scrollidx = this._scrollIndex;
				if (this._scrollIndex < 0 || this._scrollIndex >= this._child_list.length) {
					scrollidx = this._child_list.length - 1;
				}

				rcButton.left = buttonRect[scrollidx].left + 2;
				rcButton.top = maxHeight - spinsize[1] * 2 - 2;
				rcButton.right = buttonRect[scrollidx].left + spinsize[0] + 2;
				rcButton.bottom = maxHeight - spinsize[1] - 2;

				if (this.spinupbutton) {
					this.spinupbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					this.spinupbutton.set_visible(true);

					if (this._scrollIndex <= 0) {
						this.spinupbutton.set_enable(false);
					}
					else {
						this.spinupbutton.set_enable(true);
					}
				}

				rcButton.left = buttonRect[scrollidx].left + 2;
				rcButton.top = maxHeight - spinsize[1];
				rcButton.right = buttonRect[scrollidx].left + spinsize[0] + 2;
				rcButton.bottom = maxHeight;

				var spindownbutton = this.spindownbutton;
				var s_right = spindownbutton._adjust_left + spindownbutton._adjust_width;
				var s_bottom = spindownbutton._adjust_top + spindownbutton._adjust_height;

				if (this.spindownbutton) {
					this.spindownbutton.move(rcButton.left, rcButton.top, rcButton.right - rcButton.left, rcButton.bottom - rcButton.top);
					this.spindownbutton.set_visible(true);

					if (this._scrollIndex == tabpagecnt - 1) {
						this.spindownbutton.set_enable(false);
					}
					else {
						this.spindownbutton.set_enable(true);
					}
				}


				this._bSpin = true;
			}
		}
		else {
			this._lastIndex = tabpagecnt - 1;
			if (this._isTabButtonJustify()) {
				var inc_height = 0;
				for (var i = 0; i < tabpagecnt; i++) {
					var button_rect = buttonRect[i];
					if (!button_rect) {
						break;
					}

					max_txt_height = button_rect.bottom - button_rect.top;

					button_rect.top = inc_height;

					inc_height = button_rect.bottom = (Math.floor(button_rect.bottom * maxHeight / total_height) | 0);

					if (max_txt_height <= (button_rect.bottom - button_rect.top)) {
						button_rect.left = button_rect.left - (button_rect.bottom - button_rect.top - max_txt_height);
					}
				}

				if (buttonRect && buttonRect.length >= tabpagecnt) {
					buttonRect[tabpagecnt - 1].bottom = maxHeight - 1;
				}
			}

			this._bSpin = false;
		}

		var iMinLeft = clientWidth;
		for (var i = 0; i < tabpagecnt; i++) {
			button_rect = buttonRect[i];
			if (!button_rect) {
				break;
			}

			if (iMinLeft > button_rect.left) {
				iMinLeft = button_rect.left;
			}
		}

		var b_left = 0, b_top = 0, b_right = 0, b_bottom = 0;
		if (border) {
			b_left = border._left_width || border._top_width;
			b_top = border._top_width;
			b_right = border._right_width || border._top_width;
			b_bottom = border._bottom_width || border._top_width;
		}

		var pagerect = {
			left : 0, 
			top : 0, 
			right : iMinLeft, 
			bottom : clientHeight
		};


		if (this._tabpagearea) {
			var pageborder = this._tabpagearea.on_find_CurrentStyle_border(this._pseudo);
			this._tabpagearea.on_apply_style_border(pageborder);
			this._tabpagearea.move(0, pagerect.top, pagerect.right, pagerect.bottom - pagerect.top);
		}

		var margin = this._child_list[0].on_find_CurrentStyle_margin(pseudo);
		var m_l = 0, m_t = 0, m_r = 0, m_b = 0;
		if (margin) {
			m_l = margin.left;
			m_t = margin.top;
			m_r = margin.right;
			m_b = margin.bottom;
		}

		pagerect = this._getTabpageClientRectBorder(pagerect, buttonborder, bordertype, padding, "right");

		var page_l = pagerect.left + b_left + m_l;
		var page_t = pagerect.top + b_top + m_t;
		var page_w = pagerect.right - b_right - pagerect.left - b_left - m_r - m_l;
		var page_h = pagerect.bottom - pagerect.top - b_bottom - b_top - m_b - m_t;
		var child_list = this._child_list;
		for (var i = 0; i < tabpagecnt; i++) {
			var pagecontrol = child_list[i];
			if (pagecontrol != null) {
				var page_ad_w = pagecontrol._adjust_width;
				var page_ad_h = pagecontrol._adjust_height;

				if (pagecontrol._adjust_left != page_l || pagecontrol._adjust_top != page_t || pagecontrol._getPosRight() != page_w || pagecontrol._getPosBottom() != page_h) {
					pagecontrol.move(page_l, page_t, page_w, page_h);
				}
				else {
					pagecontrol.move(page_l, page_t, page_ad_w, page_ad_h);
				}
			}
		}
	};

	_pTabComponent._getTabpageClientRectBorder = function (rcPage, border, bordertype, padding, tabpos) {
		if (padding != null) {
			rcPage.left += Math.ceil(padding.left) | 0;
			rcPage.top += Math.ceil(padding.top) | 0;
			rcPage.right -= Math.ceil(padding.right) | 0;
			rcPage.bottom -= Math.ceil(padding.bottom) | 0;
		}


		return rcPage;
	};

	_pTabComponent._setScrollIndex = function (scrollindex) {
		var childlist = this._child_list;
		if (scrollindex < 0 || scrollindex >= childlist.length) {
			return;
		}

		this._scrollIndex = scrollindex;

		if (this.spinupbutton != null && this.spindownbutton != null) {
			this.spinupbutton.set_enable(this._isSpinUpEnable());
			this.spindownbutton.set_enable(this._isSpinDownEnable());
		}
	};

	_pTabComponent._changeScrollIndex = function (tabindex) {
		this._resetScrollIndex(tabindex);

		if (this.spinupbutton != null && this.spindownbutton != null) {
			this.spinupbutton.set_enable(this._isSpinUpEnable());
			this.spindownbutton.set_enable(this._isSpinDownEnable());
		}
	};

	_pTabComponent._setScrollIndexByObj = function (tabpage) {
		var childlist = this._child_list;
		for (var scrollindex = 0, n = childlist.length; scrollindex < n; scrollindex++) {
			var page = childlist[scrollindex];
			if (page == tabpage) {
				if (scrollindex < this._scrollIndex || scrollindex > this._lastIndex) {
					this._scrollIndex = scrollindex;

					if (this.spinupbutton != null && this.spindownbutton != null) {
						this.spinupbutton.set_enable(this._isSpinUpEnable());
						this.spindownbutton.set_enable(this._isSpinDownEnable());
					}
				}
			}
		}
	};

	_pTabComponent._getButtonSize = function (index) {
		var pseudo = this._pseudo;
		var btnpadding = this.on_find_CurrentStyle_buttonpadding("normal");
		var btnborder = this._buttonBorder = this.on_find_CurrentStyle_buttonborder("normal");
		var btnbackground = this.on_find_CurrentStyle_buttonbackground(pseudo);
		var btnmargin = this.on_find_CurrentStyle_buttonmargin(pseudo);
		var rc = {
			left : 0, 
			top : 0, 
			right : 0, 
			bottom : 0
		};

		var strTitle = this._child_list[index].text.toString();
		var font = this.on_find_CurrentStyle_font("normal");

		if (index == this.tabindex) {
			var btncontrol = this._tabButtons[index];
			if (btncontrol != null && (btncontrol._pseudo == "focused" || btncontrol._pseudo == "selected")) {
				font = this.on_find_CurrentStyle_font("selected");
			}
		}

		var bpleft = 0, bpright = 0, bptop = 0, bpbottom = 0;
		if (btnpadding) {
			bpleft = btnpadding.left;
			bpright = btnpadding.right;
			bptop = btnpadding.top;
			bpbottom = btnpadding.bottom;
		}

		var btnborderwidth = 0;
		if (btnborder) {
			btnborderwidth = btnborder._top_width;
		}

		if (font) {
			var multi = false;
			if (strTitle) {
				var ret = strTitle.search("\n");
			}
			multi = (ret == -1) ? false : true;
			var letterspace = this.on_find_CurrentStyle_letterspace(this._pseudo);

			var size = nexacro._getTextSize2(letterspace, strTitle, font, multi, null, null, this._rtldirection);

			if (btnbackground && (btnbackground.repeat == "stretch" || btnbackground.repeat == "quad")) {
				var btn_height = (Math.ceil(size[1]) | 0) + bptop + bpbottom;
				if (this._imageheight == 0) {
					rc.right = (Math.ceil(size[0]) | 0) + bpleft + bpright;
					rc.bottom = btn_height;
				}
				else {
					rc.right = (Math.ceil(size[0]) | 0) + bpleft + bpright;
					if (btn_height < this._imageheight) {
						rc.bottom = this._imageheight;
					}
					else {
						rc.bottom = btn_height;
					}
				}
			}
			else {
				rc.right = (Math.ceil(size[0]) | 0) + bpleft + bpright + btnborderwidth * 2;
				rc.bottom = (Math.ceil(size[1]) | 0) + bptop + bpbottom;
			}
			return rc;
		}
	};

	_pTabComponent._rollButtonUp = function () {
		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0 || this.tabindex < 0) {
			return;
		}

		var rcRect;

		var prop_width = this._client_width;
		var prop_height = this._client_height;
		var first_index = -1;
		var idx = 0;

		var buttonRect = this._buttonRect;
		var tabPos = this._getTabPosition();
		if (tabPos == "top") {
			for (var i = 1; i < tabpagecnt; i++) {
				idx = (i + this.tabindex) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.bottom < buttonRect[this.tabindex].bottom) {
					return;
				}
				else if (button_rect.bottom > buttonRect[this.tabindex].bottom) {
					first_index = (i + this.tabindex) % tabpagecnt;
					break;
				}
			}

			if (first_index == -1) {
				return;
			}

			var linetop = buttonRect[first_index].top;
			var max_bottom = 0, bottom_value = 0;

			for (var i = 0; i < tabpagecnt; i++) {
				idx = (i + first_index) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.top != linetop) {
					bottom_value = max_bottom;
					linetop = button_rect.top;
					max_bottom = 0;
				}

				button_rect.bottom = bottom_value + (button_rect.bottom - button_rect.top);
				button_rect.top = bottom_value;
				if (button_rect.bottom > max_bottom) {
					max_bottom = button_rect.bottom;
				}
			}
		}
		else if (tabPos == "bottom") {
			for (var i = 1; i < tabpagecnt; i++) {
				idx = (i + this.tabindex) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.bottom > buttonRect[this.tabindex].bottom) {
					return;
				}
				else if (button_rect.bottom < buttonRect[this.tabindex].bottom) {
					first_index = (i + this.tabindex) % tabpagecnt;
					break;
				}
			}

			if (first_index == -1) {
				return;
			}

			var linebottom = buttonRect[first_index].bottom;
			var min_top = prop_height;
			var top_value = prop_height;
			for (var i = 0; i < tabpagecnt; i++) {
				idx = (i + first_index) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.bottom != linebottom) {
					top_value = min_top;
					linebottom = button_rect.bottom;
					min_top = prop_height;
				}
				button_rect.top = top_value - (button_rect.bottom - button_rect.top);
				button_rect.bottom = top_value;
				if (button_rect.top < min_top) {
					min_top = button_rect.top;
				}
			}
		}
		else if (tabPos == "left") {
			for (var i = 1; i < tabpagecnt; i++) {
				idx = (i + this.tabindex) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.right < buttonRect[this.tabindex].right) {
					return;
				}
				else if (button_rect.right > buttonRect[this.tabindex].right) {
					first_index = (i + this.tabindex) % tabpagecnt;
					break;
				}
			}

			if (first_index == -1) {
				return;
			}

			var lineleft = buttonRect[first_index].left;
			var max_right = 0;
			var right_value = 0;
			for (var i = 0; i < tabpagecnt; i++) {
				idx = (i + first_index) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.left != lineleft) {
					right_value = max_right;
					lineleft = button_rect.left;
					max_right = 0;
				}

				button_rect.right = right_value + (button_rect.right - button_rect.left);
				button_rect.left = right_value;
				if (button_rect.right > max_right) {
					max_right = button_rect.right;
				}
			}
		}
		else if (tabPos == "right") {
			for (var i = 1; i < tabpagecnt; i++) {
				idx = (i + this.tabindex) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.right > buttonRect[this.tabindex].right) {
					return;
				}
				else if (button_rect.right < buttonRect[this.tabindex].right) {
					first_index = (i + this.tabindex) % tabpagecnt;
					break;
				}
			}

			if (first_index == -1) {
				return;
			}

			var lineright = buttonRect[first_index].right;
			var min_left = prop_width;
			var left_value = prop_width;
			for (var i = 0; i < tabpagecnt; i++) {
				idx = (i + first_index) % tabpagecnt;
				var button_rect = buttonRect[idx];
				if (!button_rect) {
					break;
				}

				if (button_rect.right != lineright) {
					left_value = min_left;
					lineright = button_rect.right;
					min_left = prop_width;
				}

				button_rect.left = left_value - (button_rect.right - button_rect.left);
				button_rect.right = left_value;
				if (button_rect.left < min_left) {
					min_left = button_rect.left;
				}
			}
		}
	};

	_pTabComponent._set_child_focus = function () {
		var idx = this.tabindex;
		var child_list = this._child_list;
		if (child_list && child_list.length > 0) {
			var tabpage_child_list = child_list[idx]._getSortedDecendants(child_list[idx]);
			if (tabpage_child_list && tabpage_child_list.length > 0) {
				if (child_list[idx]._last_focused) {
					child_list[idx]._on_focus(true);
				}
				else {
					tabpage_child_list[0]._on_focus(true);
				}
			}
		}
	};

	_pTabComponent._changeTabIndex = function (index, is_apply_focus) {
		if (!this._is_created || this.tabindex == index || ((+index) != (+index)) || index < 0 || (this._child_list && index >= this._child_list.length)) {
			return;
		}

		var oldindex = this.tabindex;
		if (oldindex > -1 && this.enableevent) {
			this._tabButtons[index]._stat_change("notselect", "normal");

			var ret = this.on_fire_canchange(this, index, oldindex);
			if (ret == false) {
				this._tabButtons[index]._stat_change("notselect", "normal");

				this._tabButtons[oldindex]._setFocus(false);

				return false;
			}
		}

		var oldtabpage = oldindex > -1 ? this._child_list[oldindex] : undefined;
		var newtabpage = this._child_list[index];

		var oldtabtn = oldindex > -1 ? this._tabButtons[oldindex] : undefined;
		var newtabbtn = this._tabButtons[index];

		if (oldtabpage) {
			if (oldtabpage.enable) {
				oldtabtn._stat_change("notselect", "normal");
			}
			else {
				oldtabtn._stat_change("disable", "disabled");
			}
			oldtabpage.set_visible(false);

			oldtabtn._setAccessibilityStatSelected(false);
		}

		this._oldtabindex = oldindex;
		this.tabindex = index;

		if (this._isMultiLine()) {
			this._rollButtonUp();
		}

		if (newtabpage) {
			var is_create_tabpage = false;
			if (!this.preload) {
				if (newtabpage._isLoaded == false) {
					if (newtabpage.url != "" && newtabpage.url != undefined) {
						newtabpage._url = newtabpage.url;
						newtabpage.on_apply_url(false);

						newtabpage._isLoaded = true;
					}
				}
				is_create_tabpage = true;
			}

			if (!is_create_tabpage && !newtabpage.visible) {
				newtabpage.set_visible(true);
			}

			newtabbtn._setAccessibilityStatSelected(true);

			if (is_apply_focus) {
				newtabbtn._on_focus(true);
			}


			if (newtabpage.enable) {
				newtabpage._stat_change(newtabpage._status, newtabpage._pseudo);

				newtabbtn._stat_change("select", "selected");
			}
			else {
				newtabpage._stat_change("disable", "disabled");
			}
		}
		else {
			if (oldtabpage) {
				if (oldtabtn.enable) {
					oldtabtn._stat_change("focus", "focused");
				}
				else {
					oldtabtn._stat_change("disable", "disabled");
				}
				oldtabpage.set_visible(true);
			}
		}

		var spinsize = this._getSpinSize();
		var spincnt = this._isSpinButtonVisible() ? 2 : 0;

		var clientWidth = this._client_width - spinsize[0] * spincnt;
		var tabs_width = clientWidth - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[0] * spincnt) - 2;

		var clientHeight = this._client_height - spinsize[1] * spincnt;
		var tabs_height = clientHeight - (Math.ceil(this._getToolBarSize()) | 0) - (spinsize[1] * spincnt) - 2;


		if (this._tabButtons.length - 1 == index && this.spindownbutton.enable == true) {
			this.spindownbutton.set_enable(false);
			this.spinupbutton.set_enable(true);
		}
		else if (index == 0 && this.spinupbutton.enable == true) {
			this.spinupbutton.set_enable(false);
			this.spindownbutton.set_enable(true);
		}
		else {
			if (!this.spinupbutton.enable) {
				this.spinupbutton.set_enable(true);
			}
			if (!this.spindownbutton.enable) {
				this.spindownbutton.set_enable(true);
			}
		}

		if (index < this._scrollIndex || (this._lastIndex != -1 && index > this._lastIndex)) {
			var margin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);
			var button_margin = margin.left + margin.right;

			this._scrollIndex = 0;
			var buttonRect = this._buttonRect;
			var totalSize = 0;
			var clientSize = 0;
			var tabposition = this._getTabPosition();

			for (var i = index; i >= 0; i--) {
				var button_rect = buttonRect[i];
				if (tabposition == "top" || tabposition == "bottom") {
					clientSize = clientWidth;
					totalSize += (Math.ceil(button_rect.right - button_rect.left) | 0) + button_margin;
				}
				else {
					clientSize = clientHeight;
					totalSize += (Math.ceil(button_rect.bottom - button_rect.top) | 0) + button_margin;
				}
				if (totalSize > clientSize) {
					this._scrollIndex = i + 1;
					this._lastIndex = index;
					break;
				}
			}
		}

		this._rearrangeButton();

		var lastfocus = this._find_lastFocused();
		if (lastfocus) {
			if (this._isBtnFocusAcceptable() && this._focusobj instanceof nexacro.TabButtonCtrl) {
				this._focusobj._setFocus(false);
			}
			else {
				this._set_child_focus();
			}
		}
		if (nexacro._accessibilitywholereadtype > 1) {
			newtabpage._playAccessibilityWholeReadLabel("wholeread");
		}

		return true;
	};

	_pTabComponent._resetLastIndex = function () {
		this._lastIndex = -1;
		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0 || this._isMultiLine()) {
			return;
		}

		var prop_width = this._client_width;
		var prop_height = this._client_height;

		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);
		var bmtop = 0, bmright = 0, bmbottom = 0, bmleft = 0;

		if (buttonmargin != null) {
			bmleft = buttonmargin.left;
			bmtop = buttonmargin.top;
			bmright = buttonmargin.right;
			bmbottom = buttonmargin.bottom;
		}

		var buttonpadding = this.on_find_CurrentStyle_buttonpadding(this._pseudo);
		var bptop = 0, bpright = 0, bpbottom = 0, bpleft = 0;
		if (buttonpadding) {
			bpleft = buttonpadding.left;
			bptop = buttonpadding.top;
			bpright = buttonpadding.right;
			bpbottom = buttonpadding.bottom;
		}

		var rect;
		var spinsize;

		spinsize = this._getSpinSize();

		var tabs_width = prop_width - (Math.ceil(this._getToolBarSize()) | 0) - 2 * spinsize[0] - 2;
		var tabs_height = prop_height - (Math.ceil(this._getToolBarSize()) | 0) - 2 * spinsize[1] - 2;
		var scrollpos = 0, lastpos = 0;

		switch (this._getTabPosition()) {
			case "top":
			case "bottom":
				var buttonWidth = this._buttonWidth;
				var extrabutton_size = 0;
				var isextrabutton = this._isExtraButton();
				for (var tabcnt = this._scrollIndex; tabcnt < tabpagecnt; tabcnt++) {
					lastpos += buttonWidth[tabcnt];

					extrabutton_size = isextrabutton ? this.extrabutton._client_width : 0;
					if (lastpos + (bmleft + bmright) * tabcnt + (bpleft + bpright) * tabcnt + extrabutton_size * tabcnt > tabs_width) {
						break;
					}
					this._lastIndex = tabcnt;
				}
				break;
			case "left":
			case "right":
				var buttonHeight = this._buttonHeight;
				for (var tabcnt = this._scrollIndex; tabcnt < tabpagecnt; tabcnt++) {
					lastpos += Math.ceil(buttonHeight[tabcnt]) | 0;
					if (lastpos + (bmtop + bmbottom) * tabcnt + (bptop + bpbottom) * tabcnt > tabs_height) {
						break;
					}
					this._lastIndex = tabcnt;
				}
				break;
		}
	};

	_pTabComponent._resetScrollIndex = function (tabindex) {
		this._scrollIndex = -1;
		this._lastIndex = -1;

		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0 || this._isMultiLine()) {
			return;
		}

		if (!this._buttonRect || this._buttonRect.length == 0 || this._buttonRect.length != this._child_list.length) {
			return;
		}

		var prop_width = this._client_width;
		var prop_height = this._client_height;

		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);

		var bmtop = 0, bmright = 0, bmbottom = 0, bmleft = 0;

		if (buttonmargin != null) {
			bmleft = buttonmargin.left;
			bmtop = buttonmargin.top;
			bmright = buttonmargin.right;
			bmbottom = buttonmargin.bottom;
		}

		var rect;
		var spinsize;

		spinsize = this._getSpinSize();

		var tabs_width = prop_width - Math.ceil(this._getToolBarSize()) - 2 * spinsize[0] - 2;
		var tabs_height = prop_height - Math.ceil(this._getToolBarSize()) - 2 * spinsize[1] - 2;
		var scrollpos = 0, lastpos;

		var buttonRect = this._buttonRect;
		switch (this._getTabPosition()) {
			case "top":
			case "bottom":
				for (var scrollindex = 0; scrollindex < tabpagecnt && this._scrollIndex == -1; scrollindex++) {
					for (var tabcnt = scrollindex; tabcnt < tabpagecnt; tabcnt++) {
						scrollpos = buttonRect[scrollindex].left;
						lastpos = buttonRect[tabcnt].right;
						lastpos -= scrollpos;

						if (lastpos + bmleft > tabs_width) {
							if (this._scrollIndex != -1) {
								return;
							}
							if (this._isSpinButtonVisible()) {
								break;
							}
						}

						if (tabcnt == tabindex) {
							this._scrollIndex = scrollindex;
						}
						this._lastIndex = tabcnt;
					}
				}
				break;
			case "left":
			case "right":
				for (var scrollindex = 0; scrollindex < tabpagecnt && this._scrollIndex == -1; scrollindex++) {
					for (var tabcnt = scrollindex; tabcnt < tabpagecnt; tabcnt++) {
						scrollpos = buttonRect[scrollindex].top;
						lastpos = buttonRect[tabcnt].bottom;
						lastpos -= scrollpos;

						if (lastpos + bmtop > tabs_height) {
							if (this._scrollIndex != -1) {
								return;
							}
							break;
						}
						if (tabcnt == tabindex) {
							this._scrollIndex = scrollindex;
						}
						this._lastIndex = tabcnt;
					}
				}
				break;
		}
	};

	_pTabComponent._getTabIndex = function () {
		return this.tabindex;
	};

	_pTabComponent._getButtonRect = function (index, bBorder) {
		if (index != -1) {
			if (this._buttonRect == null) {
				return;
			}

			var button_rect = this._buttonRect[index];

			var buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);

			var bmtop = 0, bmright = 0, bmbottom = 0, bmleft = 0;
			var nOffsetX = 0, nOffsetY = 0;

			if (buttonmargin != null) {
				bmleft = buttonmargin.left;
				bmtop = buttonmargin.top;
				bmright = buttonmargin.right;
				bmbottom = buttonmargin.bottom;
			}

			if (this._scrollIndex >= 0) {
				var buttonWidth = this._buttonWidth;
				var off = 0;
				switch (this._getTabPosition()) {
					case "top":
					case "bottom":
						{

							if (this._spinflagup) {
								nOffsetX = buttonWidth[this._scrollIndex] + bmright;
							}
							else if (this._spinflagdown) {
								nOffsetX = buttonWidth[this._scrollIndex - 1] + bmright;
							}
							break;
						}
					case "left":
					case "right":
						{

							nOffsetY = this._buttonHeight[this._scrollIndex];
							break;
						}
				}
			}

			if (this._spinflagup) {
				button_rect.left += nOffsetX;
				button_rect.right += nOffsetX;
				button_rect.top += nOffsetY;
				button_rect.bottom += nOffsetY;
			}
			else if (this._spinflagdown) {
				button_rect.left -= nOffsetX;
				button_rect.right -= nOffsetX;
				button_rect.top -= nOffsetY;
				button_rect.bottom -= nOffsetY;
			}
		}
		else {
			var len = this._child_list.length;
			for (var idx = 0; idx < len; idx++) {
				this._getButtonRect(idx);
			}
		}
	};

	_pTabComponent._isBtnFocusAcceptable = function () {
		return nexacro._toBoolean(this.focusacceptable);
	};

	_pTabComponent._spinup = function () {
		if (this._isSpinUpEnable()) {
			this._getButtonRect(-1, true);
			this._scrollIndex--;
			this._resetLastIndex();
			this.spinupbutton.set_enable(this._isSpinUpEnable());
			this.spindownbutton.set_enable(this._isSpinDownEnable());
			this._spinflagup = true;
			this._getButtonRect(-1, true);
			this._spinflagup = false;

			this._drawButton();
			this._rearrangeBorder();

			if (this._isBtnFocusAcceptable() && this._setFocusTabButton) {
				this._setFocusTabButton(this._scrollIndex, this._scrollIndex + 1);
			}
			if (!this._focusobj) {
				this._focusobj = this._child_list ? this._child_list[this.tabindex] : null;
			}
		}
	};

	_pTabComponent._spindown = function () {
		if (this._isSpinDownEnable()) {
			this._getButtonRect(-1, true);
			this._scrollIndex++;
			this._resetLastIndex();
			this.spinupbutton.set_enable(this._isSpinUpEnable());
			this.spindownbutton.set_enable(this._isSpinDownEnable());
			this._spinflagdown = true;
			this._getButtonRect(-1, true);
			this._spinflagdown = false;

			this._drawButton();
			this._rearrangeBorder();

			if (this._isBtnFocusAcceptable() && this._setFocusTabButton) {
				this._setFocusTabButton(this._scrollIndex, this._scrollIndex - 1);
			}

			if (!this._focusobj) {
				this._focusobj = this._child_list ? this._child_list[this.tabindex] : null;
			}
		}
	};

	_pTabComponent._isSpinUpEnable = function () {
		if (this._scrollIndex > 0 && this._isMultiLine() != true) {
			return true;
		}
		else {
			return false;
		}
	};

	_pTabComponent._isSpinDownEnable = function () {
		if (this._lastIndex < this._child_list.length - 1 && this._isMultiLine() != true) {
			return true;
		}
		else {
			return false;
		}
	};

	_pTabComponent._isSpinButtonVisible = function () {
		if (this.spindownbutton.visible || this.spinupbutton.visible) {
			return true;
		}
		else {
			return false;
		}
	};

	_pTabComponent._recalcLayout = function () {
		this._is_recalclayout = true;
		if (this._org_status == "notfocus") {
			this._pre_scrollIndex = this._scrollIndex;
		}
		else {
			this._pre_scrollIndex = -1;
		}

		if (this._is_resize) {
			var pre_lastIndex = this._lastIndex;
			var pre_scrollIndex = this._scrollIndex;
			this._resetScrollIndex(this.tabindex);

			if (this._pre_scrollIndex != -1) {
				this._setScrollIndex(this._pre_scrollIndex);
			}
		}

		this._rearrangeButton();
	};

	_pTabComponent._keydown_filter = function (elem, keycode, alt_key, ctrl_key, shift_key, meta_key, event_bubbles, fire_comp, refer_comp) {
		var tabpagecnt = this._child_list.length;
		if (tabpagecnt <= 0) {
			return false;
		}

		var tabindex = this._getTabIndex();
		var oldindex = this.tabindex;

		var resetindex = -1;

		switch (keycode) {
			case 9:
				if (ctrl_key == true && this.usecontrolkey) {
					{

						if (shift_key != true) {
							if (tabindex < tabpagecnt - 1) {
								resetindex = tabindex + 1;
							}
							else {
								resetindex = 0;
							}
						}
						else {
							if (tabindex > 0) {
								resetindex = tabindex - 1;
							}
							else {
								resetindex = tabpagecnt - 1;
							}
						}

						if (this._focusobj instanceof nexacro.TabButtonCtrl) {
							this._setTabFocusObj(this._tabButtons[resetindex]);
						}
						else if (this._focusobj instanceof nexacro.Tabpage) {
							this._setTabFocusObj(this._child_list[resetindex]);
						}

						break;
					}
				}
				else {
					if (this._focusobj instanceof nexacro.TabComponent) {
						if (shift_key == false) {
							if (this._isBtnFocusAcceptable() == true) {
								this._setTabFocusObj(this._tabButtons[tabindex]);
								this._setFocusTabButton();
							}
							else {
								var obj = this._child_list[tabindex];
								var page_first_comp = this._getTabFocusObj()._getTabOrderFirst();
								if (page_first_comp) {
									if (obj instanceof nexacro.Form && obj._last_focused) {
										var win = this._getWindow();
										win._removeFromCurrentFocusPath(obj._last_focused);
									}
									page_first_comp._setFocus(false, 0);
								}
								this._setTabFocusObj(obj);
							}
						}
						else {
							var newfocus_comp = this.parent._searchPrevTabFocus(this);
							if (newfocus_comp) {
								if (newfocus_comp[0] == null) {
									if (newfocus_comp[2] == 1) {
										var text = application.accessibilitylastovertext;
										nexacro.__notifyAccessibility(this._control_element, text);
									}
									else if (newfocus_comp[2] == -1) {
										var text = application.accessibilityfirstovertext;
										nexacro.__notifyAccessibility(this._control_element, text);
									}
								}
								else {
									if (newfocus_comp[0] instanceof nexacro.Form && newfocus_comp[0]._last_focused) {
										var win = this._getWindow();
										win._removeFromCurrentFocusPath(newfocus_comp[0]._last_focused);
									}

									newfocus_comp[0]._setFocus(true, 1, true);
								}
							}
						}
					}
					else if (this._focusobj instanceof nexacro.TabButtonCtrl) {
						if (!this._focusobj.enable) {
							return false;
						}

						if (shift_key == false) {
							var tabpage = this._child_list[tabindex];

							if (tabpage) {
								var newfocus_comp = tabpage._last_focused;
								if (!tabpage._last_focused) {
									newfocus_comp = tabpage._getTabOrderFirst();
								}
								else {
									newfocus_comp = tabpage._searchNextTabFocus(newfocus_comp);
									newfocus_comp = newfocus_comp ? newfocus_comp[0] : null;
								}

								if (newfocus_comp) {
									newfocus_comp._setFocus(true, 0, true);
									this._setFocusTabButton(-1, this.tabindex);
								}
								else {
									var comp = this._searchNextComponent(tabpage);
									if (comp && comp[0]) {
										comp[0]._setFocus(true, 0);
									}
								}
								this._setTabFocusObj(tabpage);
							}
						}
						else {
							return false;
						}
					}
					else if (this._focusobj instanceof nexacro.Tabpage) {
						if (!this._focusobj.enable) {
							return false;
						}

						var page_last_comp = this._focusobj._getLastFocused();
						var page_first_comp = this._focusobj._getTabOrderFirst();
						var dlgc = undefined;

						if (page_last_comp) {
							dlgc = page_last_comp._getDlgCode(keycode, alt_key, ctrl_key, shift_key);
						}

						if (!dlgc || (dlgc.want_tab == false)) {
							if (shift_key == false) {
								if (page_last_comp == null && page_first_comp) {
									page_first_comp._setFocus(true, 0);
								}
								else {
									var page_next_comp = this._focusobj._searchNextTabFocus(page_last_comp);
									if (page_next_comp && page_next_comp[0]) {
										page_next_comp[0]._setFocus(true, 0);
									}
								}
							}
							else {
								if (page_last_comp == null) {
									if (this._isBtnFocusAcceptable()) {
										this._setTabFocusObj(this._tabButtons[tabindex]);
									}
									else {
										this._setTabFocusObj(this);
									}

									var comp = this._searchPrevTabFocus(null);
									if (comp && comp[0]) {
										comp[0]._setFocus(true, 0);
									}
								}
								else if (page_last_comp == page_first_comp) {
									if (this._isBtnFocusAcceptable()) {
										this._setTabFocusObj(this._tabButtons[tabindex]);
										this._focusobj._setFocus(true, 1);
									}
									else {
										this._setTabFocusObj(this);

										var comp = this._searchPrevTabFocus(null);
										if (comp && comp[0]) {
											comp[0]._setFocus(true, 0);
										}
									}
								}
								else {
									var page_prev_comp = this._focusobj._searchPrevTabFocus(page_last_comp);
									if (page_prev_comp && page_prev_comp[0]) {
										page_prev_comp[0]._setFocus(true, 1);
									}
								}
							}
						}
					}
					return true;
				}
				break;
			case 8:
				if (ctrl_key == true && this.usecontrolkey) {
					this.on_fire_onextrabuttonclick(this, tabindex, "", false, false, false, false, -1, -1, -1, -1, -1, -1, this, this);

					return true;
				}
				break;
			case 38:
				{

					if (nexacro._enableaccessibility) {
						var focusobj = this._focusobj;
						var newcomp;
						if (focusobj instanceof nexacro.TabButtonCtrl) {
							if (this._isAccessibilityEnable()) {
								newcomp = this;
							}

							if (newcomp) {
								newcomp._setFocus(true, 3, true);
								this._setTabFocusObj(newcomp);
							}
							else {
								return false;
							}
						}
						else if (focusobj instanceof nexacro.Tabpage) {
							var page_last_comp = focusobj._getLastFocused();

							if (page_last_comp) {
								var dlg = page_last_comp._getDlgCode(keycode, alt_key, ctrl_key, shift_key);
								if (dlg.want_arrows == false) {
									newcomp = focusobj._searchPrevTabFocus(focusobj._last_focused, undefined, undefined, true)[0];

									if (newcomp) {
										if (newcomp == focusobj) {
											var win = newcomp._getWindow();
											win._removeFromCurrentFocusPath(newcomp);
											newcomp._setFocus(true, 3, true);
											this._setTabFocusObj(newcomp);
										}
										else {
											newcomp._setFocus(true, 3, true);
										}
									}
									else {
										return false;
									}
								}
							}
							else {
								if (focusobj.parent._isBtnFocusAcceptable()) {
									newcomp = focusobj.parent._tabButtons[focusobj.parent.tabindex];
								}
								else {
									newcomp = focusobj.parent;
								}

								if (newcomp) {
									newcomp._setFocus(true, 3, true);
									this._setTabFocusObj(newcomp);
								}
								else {
									return false;
								}
							}
						}
						return true;
					}
				}
				break;
			case 40:
				{

					if (nexacro._enableaccessibility) {
						var focusobj = this._focusobj;
						var newcomp;
						var newcompobj = null;
						if (focusobj instanceof nexacro.Tab) {
							if (this._isBtnFocusAcceptable()) {
								newcomp = this._tabButtons[this.tabindex];
							}
							else {
								newcomp = this.tabpages[this.tabindex];
								if (newcomp._last_focused) {
									newcomp._last_focused = null;
								}
								if (!newcomp._isAccessibilityEnable()) {
									newcompobj = newcomp._searchNextTabFocus(focusobj._last_focused, undefined, undefined, true);
								}
							}
						}
						else if (focusobj instanceof nexacro.TabButtonCtrl) {
							newcomp = this.tabpages[this.tabindex];
							if (newcomp._last_focused) {
								newcomp._last_focused = null;
							}
							if (!newcomp._isAccessibilityEnable()) {
								newcompobj = newcomp._searchNextTabFocus(focusobj._last_focused, undefined, undefined, true);
							}
						}
						else if (focusobj instanceof nexacro.Tabpage) {
							var page_last_comp = focusobj._getLastFocused();
							var dlgc = undefined;
							if (page_last_comp) {
								dlgc = page_last_comp._getDlgCode(keycode, alt_key, ctrl_key, shift_key);
							}

							if (!dlgc || dlgc.want_arrows == false) {
								newcompobj = focusobj._searchNextTabFocus(focusobj._last_focused, undefined, undefined, true);
							}
						}

						if (newcompobj && newcompobj[0]) {
							newcomp = newcompobj[0];
							newcomp._setFocus(true, 2, true);
						}
						else {
							if (newcomp) {
								newcomp._setFocus(true, 2, true);
								this._setTabFocusObj(newcomp);
							}
						}
						return true;
					}
				}
				break;
			case 39:
				if (this._isBtnFocusAcceptable() && ctrl_key == false) {
					var focusobj = this._focusobj;
					if (focusobj instanceof nexacro.TabButtonCtrl) {
						if (tabindex < tabpagecnt - 1) {
							resetindex = tabindex + 1;
						}
						else {
							resetindex = 0;
						}
						this._setTabFocusObj(this._tabButtons[resetindex]);
					}
				}
				break;
			case 37:
				if (this._isBtnFocusAcceptable() && ctrl_key == false) {
					var focusobj = this._focusobj;
					if (focusobj instanceof nexacro.TabButtonCtrl) {
						if (tabindex > 0) {
							resetindex = tabindex - 1;
						}
						else {
							resetindex = tabpagecnt - 1;
						}
						this._setTabFocusObj(this._tabButtons[resetindex]);
					}
				}
				break;
			default:
				break;
		}

		if (resetindex > -1) {
			if (this._changeTabIndex(resetindex, true) == true) {
				if (this.enableevent) {
					this.on_fire_onchanged(this, resetindex, oldindex);
				}

				if (this._setFocusTabButton) {
					this._setFocusTabButton(resetindex, oldindex);
				}
				this._changeScrollIndex(resetindex);
			}
		}
	};

	_pTabComponent._setElementBorder = function (control, border, bordertype, btabborder) {
		if (!border) {
			return;
		}

		var b = border.clone();
		var position = this._getTabPosition();

		b._linecnt = 1;
		b._copytoSubObjects();
		b._linecnt = 4;

		{

			if (position == "top") {
				b.set_top_width("0");
			}
			else if (position == "bottom") {
				b.set_bottom_width("0");
			}
			else if (position == "left") {
				b.set_left_width("0");
			}
			else if (position == "right") {
				b.set_right_width("0");
			}

			control.setElementBorder(b, bordertype);
		}
	};

	delete _pTabComponent;
}

if (!nexacro.Tab_Style) {
	nexacro.Tab_Style = function (target, id) {
		nexacro.Style.call(this, target, id);

		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.showextrabutton = null;
		this.focusborder = null;
	};

	var _pTabStyle = nexacro.Tab_Style.prototype = nexacro._createPrototype(nexacro.Style, nexacro.Tab_style);

	eval(nexacro._createBackgroundAttributeEvalStr("_pTabStyle", "buttonbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pTabStyle", "buttongradation"));
	eval(nexacro._createBorderAttributeEvalStr("_pTabStyle", "buttonborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pTabStyle", "buttonbordertype"));
	eval(nexacro._createPaddingAttributeEvalStr("_pTabStyle", "buttonpadding"));
	eval(nexacro._createMarginAttributeEvalStr("_pTabStyle", "buttonmargin"));
	eval(nexacro._createValueAttributeEvalStr("_pTabStyle", "showextrabutton"));
	eval(nexacro._createValueAttributeEvalStr("_pTabStyle", "focusborder"));

	_pTabStyle.__custom_emptyObject = function () {
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.showextrabutton = null;
		this.focusborder = null;
	};

	_pTabStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.buttonbackground && this.buttonbackground._value.length) {
			val += "buttonbackground:" + this.buttonbackground._value + "; ";
		}
		if (this.buttongradation && this.buttongradation._value.length) {
			val += "buttongradation:" + this.buttongradation._value + "; ";
		}
		if (this.buttonborder && this.buttonborder._value.length) {
			val += "buttonborder:" + this.buttonborder._value + "; ";
		}
		if (this.buttonbordertype && this.buttonbordertype._value.length) {
			val += "buttonbordertype:" + this.buttonbordertype._value + "; ";
		}
		if (this.buttonpadding && this.buttonpadding._value.length) {
			val += "buttonpadding:" + this.buttonpadding._value + "; ";
		}
		if (this.buttonmargin && this.buttonmargin._value.length) {
			val += "buttonmargin:" + this.buttonmargin._value + "; ";
		}
		if (this.showextrabutton && this.showextrabutton._value.length) {
			val += "showextrabutton:" + this.showextrabutton._value + "; ";
		}
		if (this.focusborder && this.focusborder._value.length) {
			val += "focusborder:" + this.focusborder._value + "; ";
		}

		return val;
	};


	_pTabStyle._update_background = function (idx) {
		var target = this._target;

		if (target) {
			if (idx == 1) {
				target.on_update_style_buttonbackground();
			}
			else {
				target.on_update_style_background();
			}

			if (this.buttonbackground && this.buttonbackground.image && target.imagewidth == 0 && target.imageheight == 0) {
				target._getImgSize();
			}
		}
	};

	_pTabStyle._update_border = function (idx) {
		if (this._target) {
			if (idx == 1) {
				this._target.on_update_style_buttonborder();
			}
			else {
				this._target.on_update_style_border();
			}
		}
	};

	_pTabStyle._update_bordertype = function (idx) {
		if (this._target) {
			if (idx == 1) {
				this._target.on_update_style_buttonbordertype();
			}
			else {
				this._target.on_update_style_bordertype();
			}
		}
	};

	_pTabStyle._update_gradation = function (idx) {
		if (this._target) {
			if (idx == 1) {
				this._target.on_update_style_buttongradation();
			}
			else {
				this._target.on_update_style_gradation();
			}
		}
	};

	_pTabStyle._update_style_padding = function (idx) {
		if (this._target) {
			if (idx == 1) {
				this._target.on_update_style_buttonpadding();
			}
			else {
				this._target.on_update_style_padding();
			}
		}
	};

	delete _pTabStyle;

	nexacro.Tab_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.showextrabutton = null;
		this.focusborder = null;
	};

	var _pTabCurrentStyle = nexacro.Tab_CurrentStyle.prototype = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Tab_CurrentSTyle);

	_pTabCurrentStyle.__get_custom_style_value = function () {
		var val = "";

		if (this.buttonbackground && this.buttonbackground._value.length) {
			val += "buttonbackground:" + this.buttonbackground._value + "; ";
		}
		if (this.buttongradation && this.buttongradation._value.length) {
			val += "buttongradation:" + this.buttongradation._value + "; ";
		}
		if (this.buttonbordertype && this.buttonbordertype._value.length) {
			val += "buttonbordertype:" + this.buttonbordertype._value + "; ";
		}
		if (this.buttonborder && this.buttonborder._value.length) {
			val += "buttonborder:" + this.buttonborder._value + "; ";
		}
		if (this.buttonpadding && this.buttonpadding._value.length) {
			val += "buttonpadding:" + this.buttonpadding._value + "; ";
		}
		if (this.buttonmargin && this.buttonmargin._value.length) {
			val += "buttonmargin:" + this.buttonmargin._value + "; ";
		}
		if (this.showextrabutton && this.showextrabutton._value.length) {
			val += "showextrabutton:" + this.showextrabutton._value + "; ";
		}
		if (this.focusborder && this.focusborder._value.length) {
			val += "focusborder:" + this.focusborder._value + "; ";
		}

		return val;
	};

	_pTabCurrentStyle.__custom_emptyObject = function () {
		this.buttonbackground = null;
		this.buttongradation = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.showextrabutton = null;
		this.focusborder = null;
	};

	delete _pTabCurrentStyle;
}

if (!nexacro.Tab) {
	nexacro.Tab = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.TabComponent.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.preload = false;
		this.tabpages = new nexacro.Collection();

		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onchanged" : 1, 
			"canchange" : 1, 
			"onextrabuttonclick" : 1, 
			"onmouseup" : 1, 
			"onmousedown" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"ontap" : 1, 
			"ondbltap" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"onzoom" : 1
				
		};

		this._tabbutton_obj = null;

		if (right) {
			this._orgwidth = right - left;
		}
		else {
			this._orgwidth = width;
		}

		if (bottom) {
			this._orgheight = bottom - top;
		}
		else {
			this._orgheight = height;
		}
	};

	var _pTab = nexacro.Tab.prototype = nexacro._createPrototype(nexacro.TabComponent, nexacro.Tab);

	_pTab._type_name = "Tab";

	nexacro.Tab._default_showextrabutton = nexacro._getCachedStyleObj("showextrabutton", "false");
	nexacro.Tab._default_focusborder = nexacro._getCachedStyleObj("focusborder", "1px dotted #808080");

	_pTab.killTimer = null;
	_pTab.setTimer = null;
	_pTab.loadStyle = null;
	_pTab.setWaitCursor = null;

	_pTab._is_fired_onchanged = true;


	_pTab._accessibility_tabindex = -1;
	_pTab._accessibility_is_next = false;

	_pTab.on_create_custom_style = function () {
		return new nexacro.Tab_Style(this);
	};

	_pTab.on_create_custom_currentStyle = function () {
		return new nexacro.Tab_CurrentStyle();
	};

	_pTab.on_apply_custom_pseudo = function (pseudo) {
		var curr_style = this.currentstyle;
		var change = false;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curr_style.font != font) {
			curr_style.font = font;
			change = true;
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curr_style.letterspace != letterspace) {
			curr_style.letterspace = letterspace;
			change = true;
		}

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curr_style.color != color) {
			curr_style.color = color;
			change = true;
		}

		var btn_bk = this.on_find_CurrentStyle_buttonbackground(pseudo);
		if (curr_style.buttonbackground != btn_bk) {
			curr_style.buttonbackground = btn_bk;
			change = true;
		}

		var btn_gradation = this.on_find_CurrentStyle_buttongradation(pseudo);
		if (curr_style.buttongradation != btn_gradation) {
			curr_style.buttongradation = btn_gradation;
			change = true;
		}

		var btn_border = this.on_find_CurrentStyle_buttonborder(pseudo);
		if (curr_style.buttonborder != btn_border) {
			curr_style.buttonborder = btn_border;
			change = true;
		}

		var btn_bordertype = this.on_find_CurrentStyle_buttonbordertype(pseudo);
		if (curr_style.buttonbordertype != btn_bordertype) {
			curr_style.buttonbordertype = btn_bordertype;
			change = true;
		}

		var btn_margin = this.on_find_CurrentStyle_buttonmargin(pseudo);
		if (curr_style.buttonmargin != btn_margin) {
			curr_style.buttonmargin = btn_margin;
			change = true;
		}

		if (change) {
			this._updateAllTabButton(pseudo);
		}

		var btn_padding = this.on_find_CurrentStyle_buttonpadding(pseudo);
		if (curr_style.buttonpadding != btn_padding) {
			curr_style.buttonpadding = btn_padding;
			this.on_apply_style_buttonpadding(btn_padding);
		}

		var showextrabutton = this.on_find_CurrentStyle_showextrabutton(pseudo);
		if (curr_style.showextrabutton != showextrabutton) {
			curr_style.showextrabutton = showextrabutton;
			this.on_apply_style_showextrabutton(showextrabutton);
		}

		var focusborder = this.on_find_CurrentStyle_focusborder(pseudo);
		if (curr_style.focusborder != focusborder) {
			curr_style.focusborder = focusborder;
			this.on_apply_style_focusborder(focusborder);
		}
	};

	_pTab._updateAllTabButton = function (pseudo) {
		var button = this._tabButtons;
		var child_list = this._child_list;
		var len = button.length;

		pseudo = (pseudo == null || pseudo == "focused") ? "normal" : pseudo;

		if (pseudo == "mouseover") {
			return;
		}

		for (var i = 0; i < len; i++) {
			var pagecontrol = child_list[i];

			if (pagecontrol.enable) {
				this._tabButtons[i]._updateAll(pseudo);
			}
			else {
				this._tabButtons[i]._status = "disable";
				this._tabButtons[i]._updateAll("disabled");
			}
		}
	};

	_pTab.on_find_CurrentStyle_buttonbackground = function (pseudo) {
		return this._find_pseudo_obj("buttonbackground", pseudo, "background");
	};

	_pTab.on_find_CurrentStyle_buttongradation = function (pseudo) {
		return this._find_pseudo_obj("buttongradation", pseudo, "gradation");
	};

	_pTab.on_find_CurrentStyle_buttonborder = function (pseudo) {
		var border = this._find_pseudo_obj("buttonborder", pseudo, "border");
		return (border) ? border : nexacro.Component._default_border;
	};

	_pTab.on_find_CurrentStyle_buttonbordertype = function (pseudo) {
		var bordertype = this._find_pseudo_obj("buttonbordertype", pseudo, "bordertype");
		return (bordertype) ? bordertype : nexacro.Component._default_bordertype;
	};

	_pTab.on_find_CurrentStyle_buttonpadding = function (pseudo) {
		var padding = this._find_pseudo_obj("buttonpadding", pseudo, "padding");
		return (padding) ? padding : nexacro.Component._default_padding;
	};

	_pTab.on_find_CurrentStyle_buttonmargin = function (pseudo) {
		var margin = this._find_pseudo_obj("buttonmargin", pseudo, "margin");
		return (margin) ? margin : nexacro.Component._default_margin;
	};

	_pTab.on_find_CurrentStyle_showextrabutton = function (pseudo) {
		var showextrabutton = this._find_pseudo_obj("showextrabutton", pseudo);
		return (showextrabutton) ? showextrabutton : nexacro.Tab._default_showextrabutton;
	};

	_pTab.on_find_CurrentStyle_focusborder = function (pseudo) {
		var focusborder = this._find_pseudo_obj("focusborder", pseudo, "border");
		return (focusborder) ? focusborder : nexacro.Tab._default_focusborder;
	};

	_pTab.on_find_CurrentStyle_border = function (pseudo) {
		var border = this._find_pseudo_obj("border", pseudo, "border");
		border = (border) ? border : nexacro.Component._default_border;

		if (this._tabpagearea && border) {
			var b = border.clone();
			b._linecnt = 4;
			b.set_top_width("0");
			b.set_right_width("0");
			b.set_bottom_width("0");
			b.set_left_width("0");

			this.getElement().setElementBorder(b, this.currentstyle.bordertype);
		}

		return border;
	};

	_pTab.on_find_CurrentStyle_bordertype = function (pseudo) {
		var bordertype = this._find_pseudo_obj("bordertype", pseudo, "bordertype");
		return (bordertype) ? bordertype : nexacro.Component._default_bordertype;
	};

	_pTab.on_update_style_buttonbackground = function () {
		this.on_apply_style_buttonbackground(this.currentstyle.buttonbackground = this.on_find_CurrentStyle_buttonbackground(this._pseudo));
	};
	_pTab.on_update_style_buttongradation = function () {
		this.on_apply_style_buttongradation(this.currentstyle.buttongradation = this.on_find_CurrentStyle_buttongradation(this._pseudo));
	};
	_pTab.on_update_style_buttonborder = function () {
		this.on_apply_style_buttonborder(this.currentstyle.buttonborder = this._buttonBorder = this.on_find_CurrentStyle_buttonborder(this._pseudo));
	};
	_pTab.on_update_style_buttonbordertype = function () {
		this.on_apply_style_buttonbordertype(this.currentstyle.buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(this._pseudo));
	};
	_pTab.on_update_style_buttonpadding = function () {
		this.on_apply_style_buttonpadding(this.currentstyle.buttonpadding = this.on_find_CurrentStyle_buttonpadding(this._pseudo));
	};
	_pTab.on_update_style_buttonmargin = function () {
		this.on_apply_style_buttonmargin(this.currentstyle.buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo));
	};

	_pTab.on_update_style_showextrabutton = function () {
		this.on_apply_style_showextrabutton(this.currentstyle.showextrabutton = this.on_find_CurrentStyle_showextrabutton(this._pseudo));
	};

	_pTab.on_update_style_focusborder = function () {
		this.on_apply_style_focusborder(this.currentstyle.focusborder = this.on_find_CurrentStyle_focusborder(this._pseudo));
	};

	_pTab.on_update_style_font = function () {
		var tabbtn = null;
		var len = this._tabButtons.length;
		for (var i = 0; i < len; i++) {
			tabbtn = this._tabButtons[i];
			tabbtn.on_apply_style_font(this.style.font);
		}
	};

	_pTab.on_update_style_letterspace = function () {
		var tabbtn = null;
		var len = this._tabButtons.length;
		for (var i = 0; i < len; i++) {
			tabbtn = this._tabButtons[i];
			tabbtn.on_apply_style_letterspace(this.style.letterspace);
		}
		this._updateAllTabButton();
		this._recalcLayout();
	};

	_pTab.on_update_style_rtlimagemirroring = function () {
		return;
	};

	_pTab.on_apply_style_buttonbackground = function (v) {
		this._updateAllTabButton();
	};
	_pTab.on_apply_style_buttongradation = function (v) {
		this._updateAllTabButton();
	};
	_pTab.on_apply_style_buttonborder = function (v) {
		this._updateAllTabButton();
		this._recalcLayout();
	};
	_pTab.on_apply_style_buttonbordertype = function (v) {
		this._updateAllTabButton();
	};
	_pTab.on_apply_style_buttonpadding = function (v) {
		this._updateAllTabButton();
		this._recalcLayout();
	};
	_pTab.on_apply_style_buttonmargin = function (v) {
		this._updateAllTabButton();
	};

	_pTab.on_apply_style_showextrabutton = function (v) {
		var isextrabutton = this._isExtraButton();
		if (isextrabutton && this._tabextrabuttons.length <= 0) {
			var len = this._tabButtons.length;
			for (var i = 0; i < len; i++) {
				var extrabutton = this._createtabextrabutton(i);
				extrabutton.createComponent();
			}
			this.extrabutton = this._tabextrabuttons ? this._tabextrabuttons[0] : null;
		}
		else if (!isextrabutton) {
			var extButton = this._tabextrabuttons;
			var len = 0;
			if (extButton) {
				len = extButton.length;
			}

			for (var i = 0; i < len; i++) {
				extButton[i].set_visible(false);
			}
		}
		this._recalcLayout();
	};

	_pTab.on_apply_style_focusborder = function (v) {
		if (this._isBtnFocusAcceptable()) {
			this._setFocusTabButton();
		}
	};


	_pTab.on_apply_style_color = function (v) {
		this._updateAllTabButton();
	};


	_pTab.on_apply_prop_enable = function (v) {
		var buttons = this._tabButtons;
		var pages = this._child_list;
		var extrabuttons = this._tabextrabuttons;
		var enable = v;
		if (v == undefined) {
			enable = this.enable;
		}
		var len = buttons.length;
		if (len > 0) {
			for (var i = 0; i < len; i++) {
				buttons[i]._setEnable(enable);

				if (this.tabindex == i && enable == true) {
					if (buttons[i]._pseudo != "selected") {
						buttons[i]._stat_change("focus", "focused");
					}
				}

				pages[i]._setEnable(enable);
				if (extrabuttons.length > 0) {
					extrabuttons[i]._setEnable(enable);
				}
			}
		}
		if (this.spinupbutton && this._isSpinUpEnable()) {
			this.spinupbutton._setEnable(enable);
		}
		if (this.spindownbutton && this._isSpinDownEnable()) {
			this.spindownbutton._setEnable(enable);
		}
	};

	_pTab.on_create_contents = function () {
		var control = this.getElement();
		control.setElementSize(this._adjust_width, this._adjust_height);
	};

	_pTab.on_created_contents = function () {
		var control = this.getElement();
		if (control) {
			this._getImgSize();

			this._tabpagearea = new nexacro.TabPageArea("tabpagearea", this.position, 0, 0, 0, 0, null, null, this);
			this._tabpagearea.createComponent();

			this._createSubComp();

			this.on_apply_style_buttonbordertype(this.currentstyle.buttonbordertype);
			this.on_apply_style_buttonbackground(this.currentstyle.buttonbackground);

			this.on_apply_addChild();

			this._is_created = true;

			var tabpagelist = this._insert_tabpagelist;
			var len = tabpagelist.length;
			if (len > 0) {
				for (var i = 0; i < len; i++) {
					var info = tabpagelist[i];
					this.insertTabpage(info.id, info.index, info.url, info.text);
				}

				tabpagelist = [];
				this._insert_tabpagelist = [];
			}

			this.on_apply_tabindex();
			this.on_apply_prop_rtldirection();
			this.on_apply_style_letterspace(this.currentstyle.letterspace);
		}
	};

	_pTab.on_destroy_contents = function () {
		if (this._timerManager) {
			this._timerManager.destroy();
			this._timerManager = null;
		}

		if (this._load_manager) {
			var load_manager = this._load_manager;
			var tr_list = load_manager.transactionList;
			if (tr_list) {
				for (var i = tr_list.length - 1; i >= 0; i--) {
					var tr_item = tr_list[i];
					if (tr_item._usewaitcursor) {
						tr_item._hideWaitCursor(this);
					}

					tr_item = null;
				}

				tr_list = null;
			}
			this._load_manager.destroy();
			this._load_manager = null;
		}

		if (this._bind_manager) {
			this._bind_manager.destroy();
			this._bind_manager = null;
		}

		if (this._tabpagearea) {
			this._tabpagearea.destroy();
			this._tabpagearea = null;
		}
		if (this.spindownbutton) {
			this.spindownbutton.destroy();
			this.spindownbutton = null;
		}
		if (this.spinupbutton) {
			this.spinupbutton.destroy();
			this.spinupbutton = null;
		}

		var comps = this._tabButtons;
		var comp;
		var len = comps.length;
		for (var i = 0; i < len; i++) {
			comp = comps[i];
			if (comp) {
				comp.destroy();
				comps[i] = null;
			}
		}
		comps = this._tabButtonBorders;
		len = comps.length;
		for (var i = 0; i < len; i++) {
			comp = comps[i];
			if (comp) {
				comp.destroy();
				comps[i] = null;
			}
		}
		comps = this._tabButtonLeftBorders;
		len = comps.length;
		for (var i = 0; i < len; i++) {
			comp = comps[i];
			if (comp) {
				comp.destroy();
				comps[i] = null;
			}
		}
		comps = this._tabBorders;
		len = comps.length;
		for (var i = 0; i < len; i++) {
			comp = comps[i];
			if (comp) {
				comp.destroy();
				comps[i] = null;
			}
		}
		comps = this._tabextrabuttons;
		len = comps.length;
		for (var i = 0; i < len; i++) {
			comp = comps[i];
			if (comp) {
				comp.destroy();
				comps[i] = null;
			}
		}

		comps = this.components;
		len = comps.length;
		for (var i = 0; i < len; i++) {
			var compname = comps.get_id(0);
			if (this[compname]) {
				this[compname]._is_loaded = false;
				if (this[compname].destroy) {
					this[compname].destroy();
				}
			}
		}

		var tabpages = this.tabpages;
		var len = tabpages.length;
		for (var i = 0; i < len; i++) {
			tabpages[i] = null;
		}
		this.tabpages = null;
		tabpages = null;

		this._insert_tabpagelist = [];

		delete this._tabButtons;
		delete this._tabButtonBorders;
		delete this._tabButtonLeftBorders;
		delete this._tabBorders;
		delete this._tabextrabuttons;

		if (this._tabbutton_obj) {
			this._tabbutton_obj = null;
		}

		this._buttonWidth = null;
		this._buttonRect = null;
		this._buttonHeight = null;
		this._layout_list.clear();
		this._layout_list = null;
		this.binds = null;
		this.objects = null;

		this._find_csslist = null;
		this._css_selectors = null;
		this._cssfinder_cache = null;
		this._child_list = null;
		this._includescriptlist = null;
		this._hotkey_list = null;

		this._load_callbacklist = null;

		this.all.clear();
		this.all = null;
		this.components.clear();
		this.components = null;
	};

	_pTab.on_change_containerRect = function (width, height) {
		if (this._org_status == "notfocus") {
			this._pre_scrollIndex = this._scrollIndex;
		}
		else {
			this._pre_scrollIndex = -1;
		}

		if (this._is_resize) {
			var pre_lastIndex = this._lastIndex;
			var pre_scrollIndex = this._scrollIndex;
			this._resetScrollIndex(this.tabindex);

			if (this._pre_scrollIndex != -1) {
				this._setScrollIndex(this._pre_scrollIndex);
			}
		}
		this._stat_change(this._status, this._pseudo);
	};

	_pTab.on_apply_custom_setfocus = function (evt_name) {
		nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);

		if (!this._focusobj) {
			if (nexacro._enableaccessibility) {
				if (this._isAccessibilityEnable()) {
					this._setTabFocusObj(this);
				}
				else {
					if (this._isBtnFocusAcceptable()) {
						this._setTabFocusObj(this._tabButtons[this.tabindex]);
					}
					else {
						this._setTabFocusObj(this._child_list[this.tabindex]);
						if (this._focusobj._isAccessibilityEnable()) {
							this._focusobj._setFocus(false);
						}
						else {
							var page_first_comp = this._focusobj._getTabOrderFirst();
							if (page_first_comp) {
								page_first_comp._setFocus(false);
							}
						}
					}
				}
			}
			else {
				if (this._isBtnFocusAcceptable()) {
					this._setTabFocusObj(this._tabButtons[this.tabindex]);
					this._setFocusTabButton();
				}
				else {
					this._setTabFocusObj(this._child_list[this.tabindex]);
				}
			}
		}
	};

	_pTab._stat_change = function (status, pseudo) {
		if (this._is_stat_change) {
			return;
		}

		this._is_stat_change = true;
		this._is_resize = false;
		this._org_status = status;
		this._is_recalclayout = false;

		this.on_change_status(status, pseudo);
		if (!this._is_recalclayout) {
			this._recalcLayout();
		}
		this._is_recalclayout = false;

		if (this._tabpagearea && this.currentstyle.border) {
			var b = this.currentstyle.border.clone();
			b._linecnt = 4;
			b.set_top_width("0");
			b.set_right_width("0");
			b.set_bottom_width("0");
			b.set_left_width("0");

			this.getElement().setElementBorder(b, this.currentstyle.bordertype);
		}
		this._is_resize = true;
		this._is_stat_change = false;
	};

	_pTab.set_preload = function (v) {
		if (v === false || v == "false") {
			this.preload = false;
		}
		else {
			this.preload = true;
		}
	};

	_pTab.set_tabpages = function (v) {
	};

	_pTab.on_fire_user_onmousedown = function (button, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var rootComp = this._getRootComponent(from_comp);

			if (from_comp instanceof nexacro.Tabpage) {
				rootComp = from_comp;
			}
			var evt = new nexacro.MouseEventInfo(rootComp, "onmousedown", button, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousedown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_sys_onmousedown = function (button, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmousedown && this.onmousedown._has_handlers) {
			var rootComp = this._getRootComponent(from_comp);

			if (from_comp instanceof nexacro.Tabpage) {
				rootComp = from_comp;
			}
			var evt = new nexacro.MouseEventInfo(rootComp, "onmousedown", button, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmousedown._fireSysEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_user_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var rootComp = this._getRootComponent(from_comp);

			if (from_comp instanceof nexacro.Tabpage) {
				rootComp = from_comp;
			}
			var evt = new nexacro.MouseEventInfo(rootComp, "onmouseup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_sys_onmouseup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onmouseup && this.onmouseup._has_handlers) {
			var rootComp = this._getRootComponent(from_comp);

			if (from_comp instanceof nexacro.Tabpage) {
				rootComp = from_comp;
			}
			var evt = new nexacro.MouseEventInfo(rootComp, "onmouseup", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onmouseup._fireSysEvent(this, evt);
		}
		return false;
	};

	_pTab._on_killfocus = function (new_focus, new_ref_focus) {
		if (new_focus === this) {
			return;
		}

		if (new_focus == null && new_ref_focus == null) {
			return;
		}

		this._focusobj = null;
		var btnborders = this._tabButtonBorders;

		for (var i = 0, n = btnborders.length; i < n; i++) {
			btnborders[i].set_visible(false);
		}

		if (this._focusobj instanceof nexacro.TabButtonCtrl) {
			this._setFocusTabButton(-1, this.tabindex);
		}
	};

	_pTab.on_fire_user_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		var ret = false;
		if (this.onkeydown && this.onkeydown._has_handlers) {
			if (key_code != nexacro.Event.KEY_TAB || (key_code == nexacro.Event.KEY_TAB && ctrl_key)) {
				var page = this._child_list[this.tabindex];
				var evt = new nexacro.KeyEventInfo(this, "onkeydown", alt_key, ctrl_key, shift_key, meta_key, key_code, page, page);
				ret = this.onkeydown._fireUserEvent(this, evt);
			}
		}


		if (!this.onkeydown || (this.onkeydown && !this.onkeydown.defaultprevented)) {
			if (key_code == nexacro.Event.KEY_TAB || key_code == nexacro.Event.KEY_BACKSPACE) {
				if (this._keydown_filter(null, key_code, alt_key, ctrl_key, shift_key, meta_key, undefined, from_comp, from_refer_comp)) {
					this._getWindow()._keydown_element._event_stop = true;
					return true;
				}
			}
			else if (nexacro._enableaccessibility) {
				if (key_code == nexacro.Event.KEY_DOWN || key_code == nexacro.Event.KEY_UP) {
					if (this._keydown_filter(null, key_code, alt_key, ctrl_key, shift_key, meta_key, undefined, from_comp, from_refer_comp)) {
						return true;
					}
				}
			}
		}
		return ret;
	};

	_pTab.on_fire_sys_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeydown && this.onkeydown._has_handlers) {
			var page = this._child_list[this.tabindex];
			var evt = new nexacro.KeyEventInfo(this, "onkeydown", alt_key, ctrl_key, shift_key, meta_key, key_code, page, page);
			return this.onkeydown._fireSysEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_user_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeyup && this.onkeyup._has_handlers) {
			var page = this._child_list[this.tabindex];

			var evt = new nexacro.KeyEventInfo(page, "onkeyup", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeyup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.onkeyup && this.onkeyup._has_handlers) {
			var page = this._child_list[this.tabindex];

			var evt = new nexacro.KeyEventInfo(page, "onkeyup", alt_key, ctrl_key, shift_key, meta_key, key_code, from_comp, from_refer_comp);
			return this.onkeyup._fireSysEvent(this, evt);
		}
		return false;
	};

	_pTab._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		this._tabbutton_obj = null;
		return nexacro.Component.prototype._on_lbuttondown.call(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
	};

	_pTab._on_btn_lbuttondown = function (obj, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		this._tabbutton_obj = obj;

		nexacro._skipDragEventAfterMsgBox = false;

		var ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, true);

		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttondown || (pThis.onlbuttondown && !pThis.onlbuttondown.defaultprevented)) {
			this.on_lbuttondown_default_action(elem, this._focus_refer_comp, canvasX, canvasY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY);
			ret = this._on_bubble_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}

		this._setTabFocusObj(this._tabButtons[obj._index]);

		if (this._isBtnFocusAcceptable() && this._child_list[obj._index]) {
			this._child_list[obj._index]._last_focused = null;
		}

		return ret;
	};

	_pTab._on_btn_touchstart = function (obj, touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		this._tabbutton_obj = obj;
		var ret = nexacro.Component.prototype._on_touchstart.call(this, touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp);
		this._setTabFocusObj(obj);
		if (this._isBtnFocusAcceptable() && this._child_list[obj._index]) {
			this._child_list[obj._index]._last_focused = null;
		}
		return ret;
	};

	_pTab._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		var focusdir = this._focus_direction;
		if (evt_name == "tabkey") {
			focusdir = 0;
		}
		else if (evt_name == "shifttabkey") {
			focusdir = 1;
		}
		else if (evt_name == "downkey") {
			focusdir = 2;
		}
		else if (evt_name == "upkey") {
			focusdir = 3;
		}
		nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
		if (focusdir == 2) {
			if (!this._isAccessibilityEnable()) {
				var focus_comp;
				if (this._isBtnFocusAcceptable()) {
					focus_comp = this._tabButtons[this.tabindex];
					focus_comp._setFocus(true);
				}
				else {
					focus_comp = this.tabpages[this.tabindex];
					if (focus_comp._isAccessibilityEnable()) {
						focus_comp._setFocus(true);
					}
					else {
						focus_comp = focus_comp._searchNextTabFocus(null, undefined, undefined, true);
						if (focus_comp) {
							focus_comp[0]._setFocus(true);
							focus_comp = focus_comp[0];
						}
						else {
							focus_comp = this;
						}
					}
				}

				if (focus_comp) {
					this._setTabFocusObj(focus_comp);
				}
			}
		}
	};

	_pTab.on_get_prop_tabstop = function () {
		if (!this.tabstop) {
			return false;
		}
		else {
			var my_tabstop_childs = this._getSortedDecendants(this);
			if (my_tabstop_childs && my_tabstop_childs.length > 0) {
				return true;
			}
			else if (this.tabstop) {
				return true;
			}
		}

		return false;
	};


	_pTab._setTabFocusObj = function (focusobj) {
		this._focusobj = focusobj;
	};

	_pTab._getTabFocusObj = function () {
		return this._focusobj;
	};

	_pTab._getTabOrderNext = function (current, direction, bAccessibility, bEditable, edittype, bhotkey, bComposite) {
		if (direction > 0) {
			return nexacro.FormBase.prototype._getTabOrderNext.call(this, current, direction, bAccessibility, bEditable, edittype, bhotkey, bComposite);
		}
		else if (direction < 0) {
			if (this._isBtnFocusAcceptable()) {
				return this._tabButtons[this.tabindex];
			}
			return this.tabpages[this.tabindex];
		}
	};

	_pTab._getTabOrderFirst = function () {
		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 5 && this._accessibility_is_next) {
			this._accessibility_is_next = false;
			return null;
		}

		if (this._isBtnFocusAcceptable()) {
			return this._tabButtons[this.tabindex];
		}
		return this.tabpages[this.tabindex];
	};

	_pTab._getTabOrderLast = function () {
		var ret_comp = nexacro.FormBase.prototype._getTabOrderLast.call(this);
		var child_list_len = ret_comp._child_list ? ret_comp._child_list.length : 0;

		if (child_list_len == 0 && this._isBtnFocusAcceptable()) {
			ret_comp = this._tabButtons[this.tabindex];
		}
		return ret_comp;
	};

	_pTab._on_btn_mousemove = function (obj, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var ret = nexacro.Component.prototype._on_mousemove.call(this._tabButtons[obj._index], elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
	};



	_pTab.on_touchstart_basic_action = function (touch_manager, changedtouchinfos) {
		nexacro.Component.prototype.on_touchstart_basic_action.call(this, touch_manager, changedtouchinfos);

		if (!this.visible || this._isEnable() == false) {
			return ret;
		}




		if (this._isBtnFocusAcceptable()) {
			this._setFocusTabButton();
		}
	};

	_pTab.on_fire_user_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var evt = new nexacro.TabMouseEventInfo(this, "onlbuttondown", this.tabindex, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttondown._fireUserEvent(this, evt);
		}

		return false;
	};

	_pTab.on_lbuttondown_default_action = function (elem, refer_comp, canvasX, canvasY, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY) {
		var ret = nexacro.Component.prototype.on_lbuttondown_default_action.call(this, elem, refer_comp, canvasX, canvasY);

		if (!this.visible || this._isEnable() == false) {
			return ret;
		}

		var tabbutton_obj = this._tabbutton_obj;
		if (tabbutton_obj) {
			if (this.selectchangetype == "down") {
				var idx = tabbutton_obj._index;

				var skip_change_tabindex = false;
				if (tabbutton_obj instanceof nexacro.TabExtraButtonCtrl) {
					var child_list_len = this._child_list ? this._child_list.length : 0;
					idx = this._getExtrabuttonIdx(tabbutton_obj);

					if (this._tabButtons[idx]) {
						this._tabButtons[idx]._setFocus();
					}

					if (idx >= 0) {
						var clientXY = this._getClientXY(canvasX, canvasY);
						this.on_fire_onextrabuttonclick(tabbutton_obj, idx, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, this);
					}

					if (child_list_len != this._child_list.length) {
						skip_change_tabindex = true;
					}
				}

				if (!skip_change_tabindex) {
					oldindex = this.tabindex;
					this._iscanchange = this._changeTabIndex(idx, true);
					if (this._iscanchange == true) {
						if (this.enableevent && oldindex != this.tabindex) {
							this.on_fire_onchanged(tabbutton_obj, idx, oldindex);
						}
					}
				}
				this._tabbutton_obj = null;
			}
		}

		if (this._isBtnFocusAcceptable()) {
			this._setFocusTabButton();
		}

		return ret;
	};


	_pTab.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var evt = new nexacro.TabMouseEventInfo(this, "onlbuttonup", this.tabindex, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_user_onrbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onrbuttondown && this.onrbuttondown._has_handlers) {
			var evt = new nexacro.TabMouseEventInfo(this, "onrbuttondown", this.tabindex, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttondown._fireUserEvent(this, evt);
		}
		return false;
	};

	_pTab.on_fire_user_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onrbuttonup && this.onrbuttonup._has_handlers) {
			var evt = new nexacro.TabMouseEventInfo(this, "onrbuttonup", this.tabindex, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onrbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pTab._onclick_basic_action = function (obj, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, fire_comp, refer_comp) {
		if (button == "touch" || this.selectchangetype == "up") {
			var idx = obj._index;

			if (obj instanceof nexacro.TabExtraButtonCtrl) {
				idx = this._getExtrabuttonIdx(obj);
				if (idx >= 0) {
					this.on_fire_onextrabuttonclick(obj, idx, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, -1, -1, fire_comp, refer_comp);
				}
			}

			oldindex = this.tabindex;

			this._iscanchange = this._changeTabIndex(idx, true);
			if (this._iscanchange == true) {
				if (this.enableevent && oldindex != this.tabindex) {
					this.on_fire_onchanged(obj, idx, oldindex);
				}
			}

			this._tabbutton_obj = null;
		}
	};


	_pTab.on_fire_canchange = function (obj, postindex, preindex) {
		this._is_canchange = true;

		if (this.canchange && this.canchange._has_handlers) {
			var evt = new nexacro.TabIndexChangeEventInfo(obj, "canchange", postindex, preindex);

			this._is_canchange = this.canchange._fireCheckEvent(this, evt);
			return this._is_canchange;
		}

		return true;
	};

	_pTab.on_fire_onchanged = function (obj, postindex, preindex) {
		if (this.onchanged && this.onchanged._has_handlers && (!this.tabpages[postindex].url || this.tabpages[postindex]._is_fired_onload)) {
			var evt = new nexacro.TabIndexChangeEventInfo(this, "onchanged", postindex, preindex);
			return this.onchanged._fireEvent(this, evt);
		}
		else {
			this._is_fired_onchanged = false;
		}

		return true;
	};

	_pTab.getParentContext = function () {
		return this.parent;
	};

	_pTab.insertTabpage = function (strID, nIndex, strURL, strText) {
		if (!this._is_created) {
			var info = {
			};
			info.id = strID;
			info.index = nIndex;
			info.url = strURL;
			info.text = strText;

			this._insert_tabpagelist.push(info);

			return -1;
		}

		var _nIndex = parseInt(nIndex) | 0;
		var count = this._child_list.length;
		var oldtabidx = 0;

		for (var i = 0; i < count; i++) {
			var pChild = this._child_list[i];
			if (strID == pChild.text) {
				return -1;
			}
		}
		var pTabPage = new nexacro.Tabpage(strID, this);
		this._createTabpage(_nIndex, strID, pTabPage);

		if (pTabPage == null) {
			return -1;
		}

		if (_nIndex >= count) {
			_nIndex = -1;
		}

		oldtabidx = this.tabindex;

		if (this[strID]) {
			if (this[strID].name == pTabPage.name) {
				return -1;
			}
		}

		if (_nIndex == -1) {
			this[strID] = pTabPage;
			this.all.add_item(strID, pTabPage);
			this.components.add_item(strID, pTabPage);
			this.tabpages.add_item(strID, pTabPage);
			this._child_list.push(pTabPage);
			this.tabindex = _nIndex = this._child_list.length - 1;
			this._tabpagearea.set_visible(true);
			this._tabBorders[0].set_visible(true);
			this._tabBorders[1].set_visible(true);
			this._tabBorders[2].set_visible(true);
		}
		else {
			this[strID] = pTabPage;
			this.all.add_item(strID, pTabPage);

			var tabbuttonborders = this._tabButtonBorders;
			var tabextrabuttons = this._tabextrabuttons;
			var bextra = tabextrabuttons.length > 0 ? true : false;

			for (i = this._child_list.length; i > nIndex; i--) {
				this._child_list[i] = this._child_list[i - 1];
				this._child_list[i]._index = i;
				this._buttonRect[i] = this._buttonRect[i - 1];
				this._tabButtons[i] = this._tabButtons[i - 1];
				this._tabButtons[i]._index += 1;

				if (bextra) {
					tabextrabuttons[i] = tabextrabuttons[i - 1];
					if (tabextrabuttons[i]) {
						tabextrabuttons[i]._index += 1;
					}
				}

				this._buttonWidth[i] = this._buttonWidth[i - 1];
				this._buttonHeight[i] = this._buttonHeight[i - 1];

				tabbuttonborders[i] = tabbuttonborders[i - 1];
				if (tabextrabuttons[i]) {
					tabbuttonborders[i]._index += 1;
				}
			}

			if (bextra) {
				tabextrabuttons[i] = null;
			}

			this._child_list[nIndex] = pTabPage;
			this.tabpages.insert_item(nIndex, strID, pTabPage);
			this.tabindex = _nIndex;
		}

		if (strURL) {
			pTabPage.set_url(strURL);
		}

		var tabbutton = this._tabButtons[_nIndex] = this._createTabbutton(_nIndex);
		tabbutton.createComponent();


		pTabPage._index = _nIndex;

		if (strText) {
			pTabPage.set_text(strText);
		}
		else {
			pTabPage.set_text(strID);
		}

		this._buttonRect[_nIndex] = this._getButtonSize(_nIndex);
		this._buttonHeight[_nIndex] = this._buttonRect[_nIndex].bottom - this._buttonRect[_nIndex].top;
		this._buttonWidth[_nIndex] = this._buttonRect[_nIndex].right - this._buttonRect[_nIndex].left;

		if (parseInt(this.tabindex) == _nIndex) {
			var oldtab = this._child_list[oldtabidx];
			if (oldtab) {
				oldtab.set_visible(false);
			}
			pTabPage.set_visible(true);
		}
		else {
			pTabPage.set_visible(false);
		}

		if (this._tabButtons.length == 1) {
			this.tabindex = 0;
			this._tabButtons[0]._stat_change("focus", "focused");
		}

		var buttonmargin = null;
		var right = 0;
		buttonmargin = this.currentstyle.buttonmargin;
		if (buttonmargin) {
			right = buttonmargin.right;
		}

		for (var i = this._child_list.length - 1; i > _nIndex; i--) {
			this._buttonRect[i].left += this._buttonWidth[_nIndex] + right;
			this._buttonRect[i].right += this._buttonWidth[_nIndex] + right;
		}
		if (this._isExtraButton()) {
			var extrabutton = this._createtabextrabutton(_nIndex);
			extrabutton.createComponent();

			this.on_apply_style_showextrabutton(this.currentstyle.showextrabutton);
		}

		this.extrabutton = this._tabextrabuttons ? this._tabextrabuttons[0] : null;

		if (this._child_list.length == 1) {
			this.set_visible(true);
		}

		this._rearrangeButton();

		var total = 0;
		var total_width = this._adjust_width;
		if (this.spinupbutton.visible) {
			total_width = this.spinupbutton.left;
		}

		if (nIndex < 0 || this._buttonRect[_nIndex].right > total_width) {
			total = 0;
			this._lastIndex = _nIndex;

			total = this._buttonRect[_nIndex].right;
			if (total > total_width) {
				this._resetScrollIndex(_nIndex);
			}
		}
		else {
			this._resetScrollIndex(_nIndex);
		}

		this._drawButton();
		this._rearrangeButton();

		if (this.enableevent) {
			this.on_fire_onchanged(this, _nIndex, oldtabidx);
		}

		return _nIndex;
	};

	_pTab.removeTabpage = function (nIndex) {
		var idx = parseInt(nIndex) | 0;
		var child_list = this._child_list;
		var len = child_list.length;
		if (len == 0) {
			return -1;
		}

		if (len > 0) {
			var tabpage = child_list[idx];

			if (!tabpage) {
				return -1;
			}

			var is_change = false;
			if (nIndex == this.tabindex) {
				is_change = true;
			}

			var confirm_message = tabpage._on_beforeclose();
			if (tabpage._checkAndConfirmClose(confirm_message) == false) {
				return -1;
			}

			if (tabpage == this._last_focused) {
				this._last_focused = null;
			}

			tabpage._on_close();

			if (idx + 1 != len) {
				child_list[idx + 1].set_visible(true);
			}

			var buttonRect = this._buttonRect;
			var buttonWidth = this._buttonWidth;
			var buttonHeight = this._buttonHeight;
			for (var i = len - 1; i > nIndex; i--) {
				buttonRect[i] = buttonRect[i - 1];
				buttonWidth[i] = buttonWidth[i - 1];
				buttonHeight[i] = buttonHeight[i - 1];
			}

			this[tabpage.id] = null;
			delete this[tabpage.id];
			this.all.delete_item(nIndex);
			this.components.delete_item(nIndex);
			this.tabpages = this.components;

			if (child_list[idx] != undefined) {
				child_list[idx].destroy();
				child_list[idx] = null;
			}

			var tabButtons = this._tabButtons;
			if (tabButtons[idx] != undefined) {
				if (tabButtons[idx] == this._tabbutton_obj) {
					this._tabbutton_obj = null;
				}
				if (tabButtons[idx] == this._last_focused) {
					this._last_focused = null;
				}

				tabButtons[idx].destroy();
			}

			var tabextrabuttons = this._tabextrabuttons;
			if (tabextrabuttons[idx] != undefined) {
				if (tabextrabuttons[idx] == this._tabbutton_obj) {
					this._tabbutton_obj = null;
				}
				if (tabextrabuttons[idx] == this._last_focused) {
					this._last_focused = null;
				}

				tabextrabuttons[idx].parent = null;
				tabextrabuttons[idx].destroy();
				tabextrabuttons[idx] = null;
			}

			var tabbuttonborders = this._tabButtonBorders;
			if (tabbuttonborders[idx] != undefined) {
				tabbuttonborders[idx].parent = null;
				tabbuttonborders[idx].destroy();
				tabbuttonborders[idx] = null;
			}
			var tabButtonleftborders = this._tabButtonLeftBorders;
			if (tabButtonleftborders[idx] != undefined) {
				tabButtonleftborders[idx].parent = null;
				tabButtonleftborders[idx].destroy();
			}

			tabButtons.splice(idx, 1);
			var bextra = false;
			if (tabextrabuttons.length > 0) {
				tabextrabuttons.splice(idx, 1);
				bextra = true;
			}
			this._buttonRect.splice(idx, 1);
			this._buttonWidth.splice(idx, 1);
			this._buttonHeight.splice(idx, 1);
			tabbuttonborders.splice(idx, 1);
			this._child_list.splice(idx, 1);

			len = child_list.length;
			for (var i = 0; i < len; i++) {
				tabButtons[i]._index = i;
				child_list[i]._index = i;

				if (bextra) {
					tabextrabuttons[i]._index = i;
				}

				tabbuttonborders[i]._index = i;
			}

			if (tabextrabuttons[idx] != undefined) {
				this._tabbutton_obj = null;
			}
		}

		if (this._scrollIndex != 0) {
			this._scrollIndex--;
		}

		if (this._lastIndex != 0) {
			this._lastIndex--;
		}

		if (idx != 0 && this.tabindex == idx && this.tabindex == this._tabButtons.length) {
			this.tabindex = idx - 1;
		}
		else if (this.tabindex > idx) {
			this.tabindex -= 1;
		}


		var newtabpage = child_list[this.tabindex];
		if (newtabpage) {
			if (!this.preload) {
				if (newtabpage._isLoaded == false) {
					if (newtabpage.url != "" && newtabpage.url != undefined) {
						newtabpage._url = newtabpage.url;
						newtabpage.on_apply_url(false);
						newtabpage._isLoaded = true;
					}
				}
				this._createTabpage(this.tabindex, newtabpage.id, newtabpage);
			}

			if (this.enableevent && is_change) {
				this.on_fire_onchanged(this, this.tabindex, nIndex);
			}
		}

		if (idx != 0 && this.tabindex == idx - 1) {
			tabButtons[idx - 1]._stat_change("focus", "focused");
		}

		this.extrabutton = this._tabextrabuttons ? this._tabextrabuttons[0] : null;

		this._rearrangeButton();
		this._drawButton();

		if (child_list.length == 0) {
			this.set_visible(false);
		}

		return 0;
	};

	_pTab.exchangeTabpage = function (nFromIndex, nToIndex) {
		var buttonmargin = this.currentstyle.buttonmargin;

		var child_list = this._child_list;
		if (child_list[nToIndex] && child_list[nFromIndex]) {
			var temp = child_list[nFromIndex];
			child_list[nFromIndex] = child_list[nToIndex];
			child_list[nToIndex] = temp;

			var tabButtons = this._tabButtons;
			temp = tabButtons[nFromIndex];
			tabButtons[nFromIndex] = tabButtons[nToIndex];
			tabButtons[nToIndex] = temp;

			var buttonRect = this._buttonRect;
			temp = buttonRect[nFromIndex];
			buttonRect[nFromIndex] = buttonRect[nToIndex];
			buttonRect[nToIndex] = temp;

			var start = nFromIndex > nToIndex ? nToIndex : nFromIndex;
			var end = nFromIndex > nToIndex ? nFromIndex : nToIndex;

			var fromrc = this._buttonRect[start];
			var torc = this._buttonRect[end];

			fromrc.left = torc.left;
			fromrc.right = fromrc.left + this._buttonWidth[end];

			var gap = buttonRect[start].right - buttonRect[start + 1].left + buttonmargin.right;
			if (gap != buttonmargin.right) {
				for (var i = start + 1; i <= end; i++) {
					buttonRect[i].left += gap;
					buttonRect[i].right += gap;
				}
			}

			torc.left = buttonRect[end - 1].right + buttonmargin.right;
			torc.right = torc.left + this._buttonWidth[start];

			if (buttonRect[end + 1]) {
				gap = buttonRect[end].right - buttonRect[end + 1].left + buttonmargin.right;
				if (gap != buttonmargin.right) {
					var len = buttonRect.length;
					for (var i = end + 1; i < len; i++) {
						buttonRect[i].left += gap;
						buttonRect[i].right += gap;
					}
				}
			}

			var tabextrabuttons = this._tabextrabuttons;
			temp = tabextrabuttons[nFromIndex];
			tabextrabuttons[nFromIndex] = tabextrabuttons[nToIndex];
			tabextrabuttons[nToIndex] = temp;

			var buttonWidth = this._buttonWidth;
			temp = buttonWidth[nFromIndex];
			buttonWidth[nFromIndex] = buttonWidth[nToIndex];
			buttonWidth[nToIndex] = temp;

			var buttonHeight = this._buttonHeight;
			temp = buttonHeight[nFromIndex];
			buttonHeight[nFromIndex] = buttonHeight[nToIndex];
			buttonHeight[nToIndex] = temp;

			if (this.tabindex == nFromIndex) {
				this.tabindex = nToIndex;
			}
			else if (this.tabindex == nToIndex) {
				this.tabindex = nFromIndex;
			}

			this.extrabutton = this._tabextrabuttons ? this._tabextrabuttons[0] : null;

			this._rearrangeButton();
			this._drawButton();
		}
	};

	_pTab.moveTabpage = function (nFromIndex, nToIndex) {
		var child_list = this.components;
		var len = child_list.length;
		if (nToIndex < 0 || len <= nToIndex || len <= nFromIndex || nFromIndex < 0) {
			return -1;
		}

		if (nFromIndex == nToIndex) {
			return -1;
		}

		var tabindex = this.tabindex;
		var tabpage = null, tabbutton = null, buttonrc = null, buttonwidth = null, buttonheight = null;
		tabpage = child_list[tabindex];

		var idxtabpage = tabpage.id;

		var totabpage = child_list[nToIndex];
		var fromtabpage = child_list[nFromIndex];

		var tabButtons = this._tabButtons;
		var tobutton = tabButtons[nToIndex];
		var frombutton = tabButtons[nFromIndex];

		var buttonRect = this._buttonRect;
		var tobuttonrc = buttonRect[nToIndex];
		var frombuttonrc = buttonRect[nFromIndex];

		var buttonWidth = this._buttonWidth;
		var tobuttonwidth = buttonWidth[nToIndex];
		var frombuttonwidth = buttonWidth[nFromIndex];

		var buttonHeight = this._buttonHeight;
		var tobuttonheight = buttonHeight[nToIndex];
		var frombuttonheight = buttonHeight[nFromIndex];

		var extrabuttons = this._tabextrabuttons;
		var toextrabutton = extrabuttons[nToIndex];
		var fromextrabutton = extrabuttons[nFromIndex];

		if (nFromIndex < nToIndex) {
			for (var i = nFromIndex + 1; i < len; i++) {
				this._child_list[i - 1] = this._child_list[i];
				this._child_list[i - 1]._index = i - 1;
				child_list[i - 1] = child_list[i];
				child_list[i - 1]._index = i - 1;
				tabButtons[i - 1] = tabButtons[i];
				tabButtons[i - 1]._index = i - 1;
				buttonRect[i - 1] = buttonRect[i];
				buttonWidth[i - 1] = buttonWidth[i];
				buttonHeight[i - 1] = buttonHeight[i];
				extrabuttons[i - 1] = extrabuttons[i];
				extrabuttons[i - 1]._index = i - 1;

				if (i == nToIndex) {
					this._child_list[i] = fromtabpage;
					this._child_list[i]._index = i;
					child_list[i] = fromtabpage;
					child_list[i]._index = i;
					tabButtons[i] = frombutton;
					tabButtons[i]._index = i;
					buttonRect[i] = frombuttonrc;
					buttonWidth[i] = frombuttonwidth;
					buttonHeight[i] = frombuttonheight;
					extrabuttons[i] = fromextrabutton;
					extrabuttons[i]._index = i;
					break;
				}
			}
		}
		else {
			for (var i = nFromIndex; i > nToIndex; i--) {
				this._child_list[i] = this._child_list[i - 1];
				this._child_list[i]._index = i;
				child_list[i] = child_list[i - 1];
				child_list[i]._index = i;
				tabButtons[i] = tabButtons[i - 1];
				tabButtons[i]._index = i;
				buttonRect[i] = buttonRect[i - 1];
				buttonWidth[i] = buttonWidth[i - 1];
				buttonHeight[i] = buttonHeight[i - 1];
				extrabuttons[i] = extrabuttons[i - 1];
				extrabuttons[i]._index = i;
			}

			this._child_list[i] = fromtabpage;
			this._child_list[i]._index = i;
			child_list[i] = fromtabpage;
			child_list[i]._index = i;
			tabButtons[i] = frombutton;
			tabButtons[i]._index = i;
			buttonRect[i] = frombuttonrc;
			buttonWidth[i] = frombuttonwidth;
			buttonHeight[i] = frombuttonheight;
			extrabuttons[i] = fromextrabutton;
			extrabuttons[i]._index = i;
		}

		this.all = this.components;

		len = child_list.length;
		for (var i = 0; i < len; i++) {
			if (idxtabpage == child_list[i].id) {
				this.tabindex = i;
			}
		}

		this._scrollIndex = 0;
		var spinsize = this._getSpinSize();
		var s = 2 * spinsize[0] + 2;

		var spinsize = this._getSpinSize();
		var s = 2 * spinsize[0] + 2;
		var buttonSize = 0;
		var viewCount = 0;
		for (var i = 0, n = buttonWidth.length; i < n; i++) {
			buttonSize += buttonWidth[i];
			s += buttonSize;

			if (this._orgwidth < buttonSize) {
				if (this._orgwidth < s) {
					viewCount = i - 1;
					break;
				}
			}

			viewCount = i;
		}

		if (viewCount >= this.tabindex) {
			this._scrollIndex = 0;
		}
		else {
			this._scrollIndex = this.tabindex - (this._scrollIndex + viewCount);
		}

		this.extrabutton = this._tabextrabuttons ? this._tabextrabuttons[0] : null;

		this.tabpages = this.components;

		this._rearrangeButton();
		this._drawButton();

		return 0;
	};

	_pTab.getTabpageCount = function () {
		return this._child_list.length;
	};

	_pTab.getIndex = function (nXPos, nYPos) {
		var tabindex = this._GetTabIndex(parseInt(nXPos, 10), parseInt(nYPos, 10));
		return tabindex;
	};

	_pTab.addChild = function (id, obj) {
		var ret = -1;

		if (id && id.length <= 0) {
			return -1;
		}
		if (!obj) {
			return -1;
		}

		if (this[id]) {
			return -1;
		}
		if (!(obj instanceof nexacro.Tabpage)) {
			return -1;
		}

		obj._refform = this;
		obj._index = this._child_list ? this._child_list.length : 0;

		this[id] = obj;
		this.all.add_item(id, obj);

		ret = this.components.add_item(id, obj);
		this.tabpages = this.components;
		this._child_list.push(obj);

		if (this.preload || this._child_list[this._setidx] == obj) {
			obj._url = obj.url;
			obj.on_apply_url(obj.async);
		}

		if (!obj._url) {
			obj._is_loaded = true;
		}
	};

	_pTab._on_beforeclose = function (root_closing_comp) {
		if (!this._is_alive) {
			return;
		}

		if (!root_closing_comp) {
			root_closing_comp = this;
		}
		var msg = "";

		var tabpages = this.tabpages;
		var len = tabpages.length;
		for (var i = 0; i < len; i++) {
			var tabpage = tabpages[i];
			if (!tabpage._isLoaded) {
				continue;
			}
			var tabpage_msg = tabpage._on_beforeclose(root_closing_comp);
			msg = this._appendBeforeCloseMsg(msg, tabpage_msg);
		}

		return msg;
	};

	_pTab._on_close = function () {
		if (!this._is_alive) {
			return;
		}

		var tabpages = this.tabpages;
		var len = tabpages.length;
		for (var i = 0; i < len; i++) {
			var tabpage = tabpages[i];
			if (!tabpage._isLoaded) {
				var comp_list = tabpage._child_list;
				var comp_len = comp_list ? comp_list.length : 0;
				for (var j = 0; j < comp_len; j++) {
					var comp = comp_list[j];
					if (comp._on_close) {
						comp._on_close();
					}
				}
				continue;
			}

			tabpage._on_close();
		}
	};

	_pTab.on_apply_addChild = function () {
		var id, obj;
		var comps = this.components;
		var len = comps.length;
		var pseudo = this._pseudo;


		for (var i = 0; i < len; i++) {
			var tabbutton = this._createTabbutton(i);
			tabbutton.createComponent();
			this._tabButtonBorders[i].createComponent();
		}

		if (this._child_list[0]) {
			this._child_list[0]._on_activate();
		}

		this._drawButton();


		var isextrabutton = this._isExtraButton();
		for (var i = 0; i < len; i++) {
			obj = comps[i];
			if (obj instanceof nexacro.Tabpage) {
				obj._is_loadcallback = this._is_loadcallback;
			}
			id = obj.id;

			if (isextrabutton) {
				var extrabutton = this._createtabextrabutton(i);
				extrabutton.createComponent();
			}

			if (this._setidx == i) {
				if (obj.url != "" && obj.url != undefined) {
					obj._url = obj.url;
					obj._isLoaded = true;
				}

				obj.set_visible(true);
				this._createTabpage(i, id, obj);
				obj.initProperties();
			}
			else {
				{

					this._createTabpage(i, id, obj);
				}

				obj.set_visible(false);
			}

			if (obj instanceof nexacro.Tabpage) {
				obj._is_loadcallback = false;
			}
		}

		if (isextrabutton) {
			this.on_apply_style_showextrabutton(this.currentstyle.showextrabutton);
		}

		this.extrabutton = this._tabextrabuttons ? this._tabextrabuttons[0] : null;
	};

	_pTab._getExtrabuttonIdx = function (extrBtnObj) {
		var btns = this._tabextrabuttons;
		var len = btns.length;

		for (var i = 0; i < len; i++) {
			if (btns[i] == extrBtnObj) {
				return i;
			}
		}
		return -1;
	};

	_pTab._saveImageSize = function (imgurl, w, h) {
		this._imagewidth = w;
		this._imageheight = h;

		this._rearrangeButton();
	};

	_pTab._getImgSize = function () {
		var back = this._find_pseudo_obj("buttonbackground", this._pseudo, "background");
		if (!back) {
			return;
		}

		var imagesize = null;

		imagesize = nexacro._getImageSize(back.image, this._saveImageSize, this, undefined, back.image);
		if (imagesize) {
			this._imagewidth = imagesize.width;
			this._imageheight = imagesize.height;
		}
	};

	_pTab._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var focusobj = this._focusobj;
		if (focusobj && !(focusobj instanceof nexacro.TabComponent)) {
			return focusobj._getDlgCode(keycode, altKey, ctrlKey, shiftKey);
		}
		else {
			var tmp_tab = true;
			if (ctrlKey && shiftKey) {
				tmp_tab = true;
			}
			else if (shiftKey) {
				tmp_tab = false;
			}

			return {
				want_tab : tmp_tab, 
				want_return : false, 
				want_escape : false, 
				want_chars : false, 
				want_arrows : keycode == nexacro.Event.KEY_UP ? false : true
			};
		}
	};

	_pTab._getRecalcCanvasXY = function (elem, canvasX, canvasY) {
		var scroll_left = 0, scroll_top = 0;
		var root_form = this._getRootForm();
		var root_comp = this._getRootComponent(this);
		var border_left = 0;

		if (this.parent && !(this instanceof nexacro.ScrollBarCtrl)) {
			var control_elem = this.parent._control_element;
			if (control_elem && control_elem instanceof nexacro.ScrollableControlElement) {
				scroll_left = control_elem.scroll_left;
				scroll_top = control_elem.scroll_top;
				control_elem = null;
			}

			if (root_form && root_form != this && !this._is_subcontrol && root_form == root_comp.parent) {
				var control_elem = root_form._control_element;
				if (control_elem) {
					border_left = control_elem.border ? control_elem.border._left_width : 0;
					border_top = control_elem.border ? control_elem.border._top_width : 0;
				}
			}
		}

		canvasX += this._adjust_left + border_left - scroll_left || 0;
		canvasY += this._adjust_top + border_left - scroll_top || 0;

		var window = this._getWindow();
		var curstyle = this.currentstyle;
		var comp = window.findComponent(elem);

		if (comp != this) {
			if (curstyle && curstyle.padding) {
				canvasX += curstyle.padding.left;
				canvasY += curstyle.padding.top;
			}
		}
		return [canvasX, canvasY];
	};

	_pTab._createTabBorder = function () {
		var leftborder = new nexacro.TabBorderCtrl("tableftborder", this.position, 0, 0, 0, 0, null, null, this);
		this._tabBorders[0] = leftborder;
		leftborder._is_subcontrol = true;

		var rightborder = new nexacro.TabBorderCtrl("tabrightborder", this.position, 0, 0, 0, 0, null, null, this);
		this._tabBorders[1] = rightborder;
		rightborder._is_subcontrol = true;

		var centerborder = new nexacro.TabBorderCtrl("tabcenterborder", this.position, 0, 0, 0, 0, null, null, this);
		this._tabBorders[2] = centerborder;
		centerborder._is_subcontrol = true;

		leftborder.createComponent();
		rightborder.createComponent();
		centerborder.createComponent();
	};

	_pTab._createTabbutton = function (idx) {
		if (idx < 0) {
			idx = this._child_list.length - 1;
		}

		var btnOrgWidth = 0;

		var tabpage = this._child_list[idx];
		var tabWidth = 0;
		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);

		if (idx == 0) {
			tabWidth = 0;
		}
		else {
			tabWidth = this._buttonRect[idx - 1].right + buttonmargin.right;
		}

		var rc = this._getButtonSize(idx);

		switch (this._getTabPosition()) {
			case "top":
				this._buttonRect[idx] = {
					left : tabWidth, 
					top : 0, 
					right : tabWidth + rc.right, 
					bottom : rc.bottom
				};
				break;
			case "left":
				this._buttonRect[idx] = {
					left : tabWidth, 
					top : 0, 
					right : tabWidth + rc.right, 
					bottom : rc.bottom
				};
				break;
			case "bottom":
				this._buttonRect[idx] = {
					left : tabWidth, 
					top : 0, 
					right : tabWidth + rc.right, 
					bottom : rc.bottom
				};
				break;
			case "right":
				this._buttonRect[idx] = {
					left : tabWidth, 
					top : 0, 
					right : tabWidth + rc.right, 
					bottom : rc.bottom
				};
				break;
		}

		var btn = new nexacro.TabButtonCtrl(tabpage.id + "_tabbutton", this.position, 0, 0, 1, 1, null, null, this);

		var rc = this._buttonRect[idx];
		var l = rc.left;
		var t = rc.top;
		var r = rc.right;
		var b = rc.bottom;
		var rctemp = {
			left : l, 
			top : t, 
			right : r, 
			bottom : b
		};

		this._buttonWidth[idx] = rctemp.right - rctemp.left;
		this._buttonHeight[idx] = rctemp.bottom - rctemp.top;

		this._tabButtons[idx] = btn;
		btn.selected = true;
		btn._is_subcontrol = true;
		btn._index = idx;
		btn.set_text(tabpage.text);

		var button_rect = this._buttonRect[idx];
		this._tabButtonBorders[idx] = new nexacro.TabButtonBorderCtrl(tabpage.id + "tabbuttonborder", this.position, button_rect.left, button_rect.top, button_rect.width, button_rect.height, null, null, this);
		this._tabButtonBorders[idx]._index = idx;

		this._tabButtonBorders[idx].set_visible(false);
		this._tabButtonLeftBorders[idx] = new nexacro.TabButtonBorderCtrl("tabbuttonleftborder", this.position, button_rect.left, button_rect.top, button_rect.width, button_rect.height, null, null, this);
		this._tabButtonLeftBorders[idx].createComponent();
		this._tabButtonLeftBorders[idx].set_visible(false);

		return btn;
	};

	_pTab._setFocusTabButton = function (newindex, oldindex) {
		if (newindex == null) {
			newindex = this.tabindex;
		}
		if (oldindex == null) {
			oldindex = this._oldtabindex;
		}

		if (this._tabButtonBorders[oldindex] != null) {
			this._tabButtonBorders[oldindex].set_visible(false);
		}

		if (this._tabButtonBorders[newindex] != null) {
			if (newindex == this.tabindex) {
				this._tabButtonBorders[newindex].set_visible(true);
				var bordertype = this.on_find_CurrentStyle_buttonbordertype(this._pseudo);
				if (bordertype) {
					this._tabButtonBorders[newindex].style.set_bordertype(bordertype);
				}
				if (this.style.focusborder) {
					this._tabButtonBorders[newindex].style.set_border(this.style.focusborder._value);
				}
				if (this._buttonRect[newindex] != null) {
					var rc = this._buttonRect[newindex];
					var border = this.on_find_CurrentStyle_buttonborder(this._pseudo);
					var addsize = 1;
					if (border) {
						addsize += border._top_width;
					}

					var left = rc.left + addsize;
					var top = rc.top + addsize;
					var width = rc.right - left - addsize;
					var height = rc.bottom - top - addsize;

					this._tabButtonBorders[newindex].move(left, top, width, height);
				}
			}
			else {
				this._tabButtonBorders[newindex].set_visible(false);
			}
		}
	};

	_pTab._createtabextrabutton = function (idx) {
		var extrabtn = null;
		if (this._tabextrabuttons[idx]) {
			extrabtn = this._tabextrabuttons[idx];
		}
		else {
			extrabtn = new nexacro.TabExtraButtonCtrl("extrabutton", this.position, 0, 0, 20, 10, null, null, this);
			this._tabextrabuttons[idx] = extrabtn;
			extrabtn._is_subcontrol = true;
			extrabtn._index = idx;
			extrabtn.set_visible(false);
		}
		this._buttonWidth[idx] += extrabtn._client_width;

		extrabtn.parent = this;


		return extrabtn;
	};

	_pTab._createTabpage = function (idx, id, obj) {
		if (obj == null) {
			return obj;
		}

		obj._refobj = this;
		obj._index = idx;

		obj._applyClientPadding = false;
		obj._preLoad(this.preload);

		if (!obj._control_element) {
			obj.createComponent();
		}

		obj._real_enable = obj.enable;

		var child_list = obj._child_list;
		var len = child_list ? child_list.length : 0;
		for (var i = 0; i < len; i++) {
			if (child_list[i] instanceof nexacro.Grid) {
				var row = child_list[i]._selectinfo.curdsrow;
				if (row == -1) {
					row = 0;
				}
				child_list[i].selectRow(row, true);
			}
		}

		obj.on_apply_prop_tooltip();
		obj.set_visible(false);
	};

	_pTab._checkContainerTabFocus = function () {
		if (nexacro._enableaccessibility && this._isAccessibilityEnable() == true) {
			return true;
		}

		return this._isBtnFocusAcceptable();
	};

	_pTab._on_getAccessibilityAdditionalLabel = function () {
		return this.tabindex + " " + this.tabpages.length;
	};

	_pTab.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		var next_obj = null;
		var tabindex = this._getTabIndex();

		if (direction) {
			if (this._accessibility_tabindex == tabindex) {
				next_obj = this._child_list[tabindex];
			}
			else {
				this._accessibility_tabindex++;
				if (this._accessibility_tabindex < this.tabpages.length) {
					next_obj = this._tabButtons[this._accessibility_tabindex];
				}
				else {
					this._accessibility_tabindex = -1;
					this._accessibility_is_next = true;
					next_obj = this.parent._searchNextTabFocus(this, undefined, undefined, true)[0];
				}
			}
		}
		else {
			if (this._accessibility_tabindex == tabindex) {
				this._accessibility_tabindex--;
				next_obj = this._tabButtons[this._accessibility_tabindex];
			}
			else {
				this._accessibility_tabindex--;
				if (this._accessibility_tabindex >= 0) {
					if (this._accessibility_tabindex == tabindex) {
						next_obj = this._child_list[tabindex];
					}
					else {
						next_obj = this._tabButtons[this._accessibility_tabindex];
					}
				}
			}
		}

		if (next_obj) {
			next_obj._setAccessibilityNotifyEvent(direction);
			return true;
		}
		return false;
	};

	_pTab._setRtlDirectionOfComps = function (comps) {
		var _rtldirection = this._rtldirection;

		var len = comps.length;
		for (var i = 0; i < len; i++) {
			var comp = comps[i];
			if (comp) {
				comp._setRtlDirection(_rtldirection);
			}
		}
	};

	_pTab.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		if (this._rtldirection) {
			this.on_change_containerRect(this._client_width, this._client_height);
		}

		var _rtldirection = this._rtldirection;

		if (this._tabpagearea) {
			this._tabpagearea._setRtlDirection(_rtldirection);
		}

		if (this.spinupbutton) {
			this.spinupbutton._setRtlDirection(_rtldirection);
		}
		if (this.spindownbutton) {
			this.spindownbutton._setRtlDirection(_rtldirection);
		}

		this._setRtlDirectionOfComps(this.tabpages);
		this._setRtlDirectionOfComps(this._tabButtons);
		this._setRtlDirectionOfComps(this._tabButtonBorders);
		this._setRtlDirectionOfComps(this._tabButtonLeftBorders);
		this._setRtlDirectionOfComps(this._tabBorders);
		this._setRtlDirectionOfComps(this._tabextrabuttons);

		if (this.extrabutton) {
			this.extrabutton._setRtlDirection(_rtldirection);
		}
	};

	delete _pTab;
}

if (!nexacro.TabExtraButtonCtrl) {
	nexacro.TabExtraButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._index = 0;
		this._is_reference_control = false;
		this._accessibility_role = "tabitem";
	};

	var _pTabExtraButtonCtrl = nexacro.TabExtraButtonCtrl.prototype = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.TabExtraButtonCtrl);
	nexacro.TabExtraButtonCtrl._default_border = nexacro._getCachedStyleObj("border", "");

	_pTabExtraButtonCtrl.on_find_CurrentStyle_border = function (pseudo) {
		var border = this._find_pseudo_obj("border", pseudo, "border");
		return (border) ? border : nexacro.TabExtraButtonCtrl._default_border;
	};

	_pTabExtraButtonCtrl._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this.on_lbuttondown_basic_action(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, this, this);

		var tab = this.parent;
		if (tab) {
			return this.parent._on_btn_lbuttondown(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX + this._adjust_left, canvasY, screenX + this._adjust_left, screenY, event_bubbles, fire_comp, refer_comp);
		}
		return;
	};

	_pTabExtraButtonCtrl.on_click_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		var tab = this.parent;
		if (tab) {
			tab._onclick_basic_action(this, button, alt_key, ctrl_key, shift_key, meta_key, canvasX + this._adjust_left, canvasY, screenX + this._adjust_left, screenY + this._adjust_top, tab, tab);
		}
		return;
	};

	_pTabExtraButtonCtrl._on_touchstart = function (touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this.on_touchstart_basic_action(touch_manager, changedtouchinfos, refer_comp);

		return this.parent._on_btn_touchstart(this, touch_manager, touchinfos, changedtouchinfos, event_bubbles, fire_comp, refer_comp);
	};

	_pTabExtraButtonCtrl._on_mousemove = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this.on_mousemove_basic_action();

		return this.parent._on_btn_mousemove(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);
	};

	delete _pTabExtraButtonCtrl;
}

if (!nexacro.TabButtonCtrl) {
	nexacro.TabButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.ButtonCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._iscanchange = true;
		this._index = 0;
		this._is_reference_control = false;
		this._accessibility_role = "tabitem";
	};

	var _pTabButtonCtrl = nexacro.TabButtonCtrl.prototype = nexacro._createPrototype(nexacro.ButtonCtrl, nexacro.TabButtonCtrl);

	_pTabButtonCtrl.on_find_CurrentStyle_align = function (pseudo) {
		var align = this._find_pseudo_obj("align", pseudo, "align");
		if (!align) {
			align = nexacro._getCachedStyleObj("align", "center middle");
		}
		return align;
	};

	_pTabButtonCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent._find_pseudo_obj("buttonbackground", pseudo, "background");
	};
	_pTabButtonCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent._find_pseudo_obj("buttongradation", pseudo, "gradation");
	};
	_pTabButtonCtrl.on_find_CurrentStyle_border = function (pseudo) {
		var buttonborder = this.parent._find_pseudo_obj("buttonborder", pseudo, "border");
		return (buttonborder) ? buttonborder : nexacro.Component._default_border;
	};
	_pTabButtonCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		var buttonbordertype = this.parent._find_pseudo_obj("buttonbordertype", pseudo, "bordertype");
		return (buttonbordertype) ? buttonbordertype : nexacro.Component._default_bordertype;
	};
	_pTabButtonCtrl.on_find_CurrentStyle_padding = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonpadding(pseudo);
	};
	_pTabButtonCtrl.on_find_CurrentStyle_margin = function (pseudo) {
		return this.parent.on_find_CurrentStyle_buttonmargin(pseudo);
	};
	_pTabButtonCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent.on_find_CurrentStyle_color(pseudo);
	};

	_pTabButtonCtrl.on_find_CurrentStyle_cursor = function (pseudo) {
		return this.parent.on_find_CurrentStyle_cursor(pseudo);
	};

	_pTabButtonCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent.on_find_CurrentStyle_font(pseudo);
	};

	_pTabButtonCtrl.on_find_CurrentStyle_letterspace = function (pseudo) {
		return this.parent.on_find_CurrentStyle_letterspace(pseudo);
	};

	_pTabButtonCtrl.on_apply_style_border = function (border) {
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			this._setElementBorder(this.getElement(), border, curstyle.bordertype);
			control_elem.setElementBackground(curstyle.background, curstyle.gradation);
			this._updateClientSize(control_elem);
		}
	};

	_pTabButtonCtrl.on_apply_style_color = function (color) {
		if (this._text_elem) {
			this._text_elem.setElementColor(color);
		}
	};

	_pTabButtonCtrl.on_apply_style_align = function (align) {
		if (this._text_elem && align) {
			var halign = align.halign == "" ? "center" : align._halign;
			var valign = align.valign == "" ? "middle" : align._valign;
			if (this._img_elem && this.currentstyle.imagealign) {
				this._updateElementPositions(align, this.currentstyle.imagealign);
			}
			else {
				this._text_elem.setElementAlignXY(halign, valign);
				nexacro._updateTextElementPositions(this);
			}
		}
		else {
			this.currentstyle.align = "";
		}
	};

	_pTabButtonCtrl.on_apply_style_font = function (font) {
		if (this._text_elem) {
			this._text_elem.setElementFont(font);
			if (this._img_elem && this.currentstyle.align && this.currentstyle.imagealign) {
				this._updateElementPositions(this.currentstyle.align, this.currentstyle.imagealign);
			}
		}
	};

	_pTabButtonCtrl.on_apply_style_letterspace = function (letterspace) {
		if (this._text_elem) {
			this._text_elem.setElementLetterSpace(letterspace);
			if (this._img_elem && this.currentstyle.align && this.currentstyle.imagealign) {
				this._updateElementPositions(this.currentstyle.align, this.currentstyle.imagealign);
			}
		}
	};

	_pTabButtonCtrl.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pTabButtonCtrl.on_change_status = function (status, pseudo) {
		var objTab = this.parent;

		if ((pseudo == "normal" || pseudo == "mouseover" || pseudo == "pushed") && (objTab._tabButtons && objTab._tabButtons[objTab.tabindex] && this.name == objTab._tabButtons[objTab.tabindex].name)) {
			status = "select";
		}

		if (status == "") {
			this._status = "enable";
		}

		switch (status) {
			case "enable":
				if (this._status != "focus") {
					if (this._readonly) {
						this._status = "readonly";
					}
					else {
						this._status = "enable";
					}
				}
				break;
			case "disable":
				this._status = "disable";
				this.enable = false;
				break;
			case "focus":
				if (this._status != "disable") {
					this._status = "focus";
				}
				break;
			case "notfocus":
				if (this._status != "disable") {
					if (this._readonly) {
						this._status = "readonly";
					}
					else {
						this._status = "enable";
					}
				}
				break;
			case "select":
				this._selected = true;
				if (this._status != "disable" || this._use_enable) {
					this._status = "enable";
					pseudo = "selected";
				}
				break;
			case "notselect":
				this._selected = false;
				if (this._status != "disable") {
					this._status = "enable";
				}
				break;
			case "push":
				this._pushed = true;
				break;
			case "notpush":
				this._pushed = false;
				if (this._selected && pseudo == "normal") {
					pseudo = "selected";
				}
				break;
			case "readonly":
				if (!this._readonly) {
					this._readonly = true;
					this._control_pseudo = "";
					this._contents_pseudo = "";
				}
				if (this._status == "enable") {
					this._status = "readonly";
				}
				break;
			case "writable":
				if (this._readonly) {
					this._readonly = false;

					this._control_pseudo = "";
					this._contents_pseudo = "";
				}
				if (this._status == "readonly") {
					this._status = "enable";
				}
				break;
		}

		this.on_apply_pseudo(pseudo);
		this._setElementBorder(this.getElement(), this.currentstyle.border, this.currentstyle.bordertype);
		this.parent._drawButton();
	};

	_pTabButtonCtrl._setElementBorder = function (control, border, bordertype) {
		if (!border) {
			return;
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			return;
		}

		var b = border.clone();

		b._linecnt = 4;

		var position = this.parent._getTabPosition();

		if (position == "top") {
			b.set_bottom_width("0");
		}
		else if (position == "bottom") {
			b.set_top_width("0");
		}
		else if (position == "left") {
			b.set_right_width("0");
		}
		else if (position == "right") {
			b.set_left_width("0");
		}

		control.setElementBorder(b, bordertype);
	};


	_pTabButtonCtrl._setElementPosition = function (control, l, t, w, h, noStep) {
		if (this._popup) {
			l = 0;
			t = 0;
		}

		if (w < 0) {
			w = 0;
		}

		if (h < 0) {
			h = 0;
		}

		control.setElementPosition(l, t);
		control.setElementSize(w, h);
		this._updateClientSize(control);
	};

	_pTabButtonCtrl._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var _want_arrow = true;
		if (keycode == nexacro.Event.KEY_UP) {
			var _tab = this.parent;
			if (!_tab._isAccessibilityEnable()) {
				_want_arrow = false;
			}
		}

		var tmp_tab = true;
		if (ctrlKey && shiftKey) {
			tmp_tab = true;
		}
		else if (shiftKey) {
			tmp_tab = false;
		}

		if (!this.enable && keycode == nexacro.Event.KEY_TAB && !ctrlKey) {
			tmp_tab = false;
		}

		return {
			want_tab : tmp_tab, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : _want_arrow
		};
	};

	_pTabButtonCtrl._updateAll = function (pseudo) {
		this._control_pseudo = "";
		this._contents_pseudo = "";
		this._stat_change(this._status, pseudo);
	};

	_pTabButtonCtrl.on_apply_custom_setfocus = function (evt_name) {
		if (this.parent._isBtnFocusAcceptable()) {
			nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
		}
		else if (this.parent.tabpages[this._index]) {
			this.parent.tabpages[this._index].on_apply_custom_setfocus(evt_name);
		}
	};

	_pTabButtonCtrl._setAccessibilityNotifyEvent = function (direction) {
		var tab_comp = this.parent;
		if (tab_comp._accessibility_tabindex < 0 && tab_comp._tabButtons && tab_comp._tabButtons.length > 0) {
			if (direction) {
				tab_comp._accessibility_tabindex = 0;
			}
			else {
				tab_comp._accessibility_tabindex = tab_comp.tabpages.length - 1;
			}
			return tab_comp._tabButtons[tab_comp._accessibility_tabindex]._setAccessibilityNotifyEvent(direction);
		}
		else {
			tab_comp._accessibility_tabindex = this._index;
			return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
		}
	};

	_pTabButtonCtrl._on_sys_lbuttondown = function (node, e) {
		var ret = this._on_lbuttondown(node, e);
		return ret;
	};

	_pTabButtonCtrl._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		if (!this._is_alive) {
			return;
		}

		this._on_focus(true);

		var ret = this.parent._on_btn_lbuttondown(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX + this._adjust_left, canvasY, screenX + this._adjust_left, screenY, event_bubbles, fire_comp, refer_comp);



		return ret;
	};

	_pTabButtonCtrl.on_click_basic_action = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		if (!this._is_alive) {
			return;
		}

		var tab = this.parent;
		if (tab) {
			tab._onclick_basic_action(this, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, tab, tab);
		}
		return;
	};

	_pTabButtonCtrl._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		if (this.parent && this.parent._focusobj) {
			var lastfocus = this.parent._focusobj._last_focused;
			if (lastfocus) {
				var prev_tabpage = lastfocus.parent;
				if (prev_tabpage && prev_tabpage instanceof nexacro.Tabpage) {
					if (prev_tabpage._index != this._index
						 && lastfocus.visible == true) {
						var page_last_comp = this.parent._focusobj._getLastFocused();
						var page_next_comp = this.parent._focusobj._searchNextTabFocus(page_last_comp);
						if (page_next_comp && page_next_comp[0]) {
							this.parent._tabButtons[prev_tabpage._index]._setFocus(true);
						}
					}
				}
			}
		}

		nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
		this._setTabFocusObj(this);

		if (this._selected) {
			this._stat_change("select", "selected");
		}

		if (this.parent._isBtnFocusAcceptable()) {
			this.parent._child_list[this._index]._last_focused = null;
		}
	};

	_pTabButtonCtrl._on_touch_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, isTap) {
		if (!this._is_alive) {
			return;
		}

		this._on_focus(true);

		var ret = this.parent._on_btn_lbuttondown(this, elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX + this._adjust_left, canvasY, screenX + this._adjust_left, screenY, event_bubbles, fire_comp, refer_comp);
		return ret;
	};


	_pTabButtonCtrl._setTabFocusObj = function (focusobj) {
		if (!this._is_alive) {
			return;
		}

		this.parent._focusobj = focusobj;
	};

	_pTabButtonCtrl._getTabFocusObj = function () {
		if (!this._is_alive) {
			return;
		}

		return this.parent._focusobj;
	};

	_pTabButtonCtrl.on_fire_sys_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (this.parent._keydown_filter(null, key_code, alt_key, ctrl_key, shift_key, meta_key, undefined, from_comp, from_refer_comp)) {
			return true;
		}






		return true;
	};

	delete _pTabButtonCtrl;
}

if (!nexacro.TabPageArea) {
	nexacro.TabPageArea = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.DivCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._is_reference_control = false;
	};

	var _pTabPageArea = nexacro._createPrototype(nexacro.DivCtrl, nexacro.TabPageArea);
	nexacro.TabPageArea.prototype = _pTabPageArea;

	_pTabPageArea._type_ame = "TabPageArea";

	_pTabPageArea.on_find_CurrentStyle_cursor = function (pseudo) {
		if ((this.parent._status == "focus") && (pseudo == "normal")) {
			pseudo = "focused";
		}

		return this.parent.on_find_CurrentStyle_cursor(pseudo);
	};

	_pTabPageArea.on_find_CurrentStyle_border = function (pseudo) {
		var tab = this.parent;
		if ((tab._status == "focus") && (pseudo == "normal")) {
			pseudo = "focused";
		}

		var border = tab.on_find_CurrentStyle_border(pseudo);
		var bordertype = tab.on_find_CurrentStyle_bordertype(pseudo);
		var position = tab._getTabPosition();
		var b = border.clone();

		b._linecnt = 1;
		if (bordertype._isRound()) {
			b._copytoSubObjects();
		}
		b._linecnt = 4;

		if (position == "top") {
			b.set_top_width("0");
		}
		else if (position == "bottom") {
			b.set_bottom_width("0");
		}
		else if (position == "left") {
			b.set_left_width("0");
		}
		else if (position == "right") {
			b.set_right_width("0");
		}

		return b;
	};

	_pTabPageArea.on_find_CurrentStyle_bordertype = function (pseudo) {
		var tab = this.parent;

		if ((tab._status == "focus") && (pseudo == "normal")) {
			pseudo = "focused";
		}

		return tab.on_find_CurrentStyle_bordertype(pseudo);
	};

	_pTabPageArea.resetScroll = function () {
		this._onRecalcScrollSize();
		this._onResetScrollBar();
	};

	_pTabPageArea._onRecalcScrollSize = function (fromComp) {
		var control_elem = this._control_element;
		if (control_elem && this._is_scrollable) {
			var w = 0, h = 0;
			if (!fromComp) {
				var comps = this.components;
				for (var i = 0, n = comps.length; i < n; i++) {
					var comp = comps[i];
					if (comp && comp.visible) {
						w = Math.max(w, comp.getOffsetRight());
						h = Math.max(h, comp.getOffsetBottom());
					}
				}
				control_elem.setElementScrollMaxSize(w, h);
			}
			else if (fromComp.visible) {
				var curMaxWidth = control_elem.container_maxwidth;
				var curMaxHeight = control_elem.container_maxheight;

				var offsetRight = fromComp.getOffsetRight();
				var offsetBottom = fromComp.getOffsetBottom();

				if (curMaxWidth < offsetRight || curMaxHeight < offsetBottom) {
					w = Math.max(curMaxWidth, offsetRight);
					h = Math.max(curMaxHeight, offsetBottom);
					control_elem.setElementScrollMaxSize(w, h);
				}
			}
		}
	};

	_pTabPageArea.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		this.resetScroll();
	};

	delete _pTabPageArea;
}

if (!nexacro.Tabpage) {
	nexacro.Tabpage = function (id, parent) {
		nexacro.Div.call(this, id, "absolute", 0, 0, 0, 0, null, null, parent);

		this._isSelfstyle = true;
		this._isLoaded = false;

		this.enableflag = true;
		this._index = 0;
		this.text = "";
		this._url = "";

		this._is_reference_control = false;
		this._accessibility_role = "tabpage";
		this._want_tab = false;
		this._want_arrow = true;

		this._apply_client_padding = false;
	};

	var _pTabPage = nexacro._createPrototype(nexacro.Div, nexacro.Tabpage);
	nexacro.Tabpage.prototype = _pTabPage;

	_pTabPage._type_name = "Tabpage";

	_pTabPage.on_fire_onload = function (obj, url) {
		var ret = nexacro.Div.prototype.on_fire_onload.call(this, obj, url);
		var obj = this.parent;
		if (obj) {
			if (obj.tabindex > -1 && !obj._is_fired_onchanged) {
				obj.on_fire_onchanged(obj, this._index, obj._oldtabindex);
				obj._is_fired_onchanged = true;
			}
			this._is_fired_onload = true;
		}

		return ret;
	};

	_pTabPage.bringToFront = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (nexacro.BrowserType == "Edge") {
				control_elem.setElementVisible(true);
			}
			else {
				control_elem.bringToFrontUseZIndex();
			}
		}
		control_elem = null;
		return;
	};
	_pTabPage.sendToBack = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			if (nexacro.BrowserType == "Edge") {
				control_elem.setElementVisible(false);
			}
			else {
				control_elem.sendToBackUseZIndex();
			}
		}
		control_elem = null;
		return;
	};
	_pTabPage.bringToPrev = null;
	_pTabPage.moveToNext = null;
	_pTabPage.moveToPrev = null;
	_pTabPage.sendToNext = null;


	_pTabPage.on_find_CurrentStyle_border = nexacro._emptyFn;
	_pTabPage.on_find_CurrentStyle_bordertype = nexacro._emptyFn;

	_pTabPage.on_find_CurrentStyle_background = function (pseudo) {
		return this._find_pseudo_obj("background", pseudo, "background");
	};

	_pTabPage.on_find_CurrentStyle_gradation = function (pseudo) {
		return this._find_pseudo_obj("gradation", pseudo, "gradation");
	};

	_pTabPage.on_find_CurrentStyle_margin = function (pseudo) {
		return this._find_pseudo_obj("margin", pseudo, "margin");
	};

	_pTabPage.on_find_CurrentStyle_padding = function (pseudo) {
		return this._find_pseudo_obj("padding", pseudo, "padding");
	};

	_pTabPage.on_get_style_accessibility_label = function () {
		return this.text;
	};

	_pTabPage.addChild = function (id, obj) {
		var ret = -1;

		if (id && id.length <= 0) {
			return -1;
		}
		if (!obj) {
			return -1;
		}

		if (this[id]) {
			return -1;
		}
		if (!obj._type_name) {
			return -1;
		}

		obj.parent = this;
		obj._refform = this;

		this[id] = obj;
		this.all.add_item(id, obj);

		if (obj._is_component) {
			ret = this.components.add_item(id, obj);
			this._child_list.push(obj);
		}
		else if (obj instanceof nexacro.BindItem) {
			ret = this.binds.add_item(id, obj);
		}
		else {
			ret = this.objects.add_item(id, obj);
		}

		return ret;
	};

	_pTabPage.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		var _rtldirection = this._rtldirection;

		var child_list = this._child_list;
		var len = child_list.length;

		for (var i = 0; i < len; i++) {
			var comp = child_list[i];
			comp._setRtlDirection(_rtldirection);
		}
	};

	_pTabPage.set_url = function (v) {
		if (v != this.url) {
			this.url = v;
			if ((this.parent instanceof nexacro.TabComponent) && this.parent._is_created == true) {
				if (v.substring(0, 4).toLowerCase() == "url(") {
					v = v.substring(4, v.length - 1);
				}

				this._url = v;
				this.on_apply_url(this.async);
			}
		}
	};


	_pTabPage.on_apply_url = function (bsync) {
		if (this._url && this._url.length > 0) {
			this._urlloading = true;
			this._setstylecomplete = false;

			application.getLayoutManager().clearLayout(this);

			var _parent = this.parent;
			while (!_parent._url) {
				_parent = _parent.parent;
			}
			if (this._apply_client_padding) {
				this._delete_text();
			}

			this.loadForm(this._url, bsync, true, _parent._url);

			this._isLoaded = true;
		}
		else {
			this.on_apply_emptyurl();
			this.on_apply_applystyletype();
		}
	};

	_pTabPage.set_text = function (v) {
		var text;
		if (nexacro._isNull(v)) {
			text = "";
		}
		else {
			text = nexacro._toString(v);
		}

		if (this.text == text) {
			return;
		}

		this.text = text;

		var TabComp = this.parent;
		var btn = null;
		if (TabComp) {
			if (TabComp._tabButtons.length > 0) {
				btn = TabComp._tabButtons[this._index];
				if (btn && btn.id != this.id) {
					btn.set_text(this.text);
					TabComp._recalcLayout();
				}
			}
		}
	};

	nexacro._is_enable_setting = false;
	_pTabPage.set_enable = function (v) {
		v = nexacro._toBoolean(v);
		var _window = this._getWindow();
		var newfocus_comp;
		if (!this._is_subcontrol && !v && this._is_created && this.parent) {
			if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
				var _form = this._getForm();
				var cur_tabstop = this.tabstop;
				this.tabstop = false;
				newfocus_comp = _form._searchNextTabFocus();
				this.tabstop = cur_tabstop;
			}
		}

		var control_elem = this._control_element;
		this.enable = v;

		if (this._is_created) {
			var enable_flag = (this.parent._real_enable && v);
			if (this._real_enable != enable_flag) {
				nexacro._is_enable_setting = true;
				this._setEnable(enable_flag);
				nexacro._is_enable_setting = false;
				var parent = this.parent;
				if (!this._is_subcontrol && this._is_created && parent && parent._is_created) {
					if (enable_flag) {
						if (_window && _window._indexOfCurrentFocusPaths(parent) == _window._getCurrentFocusPathsLength() - 1
							 && !parent._last_focused) {
							this._on_focus(true);
						}
					}
					else {
						if (_window && _window._indexOfCurrentFocusPaths(this) > -1) {
							_window._removeFromCurrentFocusPath(this, false);
							if (newfocus_comp && newfocus_comp[0]) {
								newfocus_comp[0]._on_focus(true);
							}
						}
					}
				}
			}
		}
		else {
			this._resetTabPage(v);
		}
	};

	_pTabPage.on_apply_text = function () {
	};

	_pTabPage.on_apply_prop_tooltip = function () {
		var control = this.getElement();
		if (control) {
			control.setElementToolTip(this.tooltiptext);
		}
	};

	_pTabPage.on_apply_prop_enable = function (v) {
		nexacro.Form.prototype.on_apply_prop_enable.call(this, v);
		this._resetTabPage(v);
	};

	_pTabPage._resetTabPage = function (v) {
		var TabComp = this.parent;

		if (TabComp) {
			var child_list = TabComp._child_list;
			var tab_index = this._index;
			if (TabComp._tabButtons.length > 0) {
				var pagecontrol = child_list[tab_index];
				var btncontrol = TabComp._tabButtons[tab_index];
				if (btncontrol && btncontrol.id != this.id) {
					if (pagecontrol != null) {
						if (TabComp.enable) {
							if (v) {
								if (tab_index == TabComp.tabindex) {
									btncontrol._use_enable = true;
									btncontrol.enable = pagecontrol.enable;
									btncontrol._setEnable(true);
									pagecontrol.set_visible(true);
									btncontrol._stat_change("select", "selected");
									btncontrol._use_enable = null;
								}
								else {
									pagecontrol.set_visible(false);
									btncontrol.enable = pagecontrol.enable;
									btncontrol._setEnable(true);
									btncontrol._status = "notselect";
									btncontrol._pseudo = "normal";
									btncontrol._stat_change(btncontrol._status, btncontrol._pseudo);
								}
							}
							else {
								btncontrol._status = "disable";
								btncontrol._pseudo = "disabled";
								btncontrol._stat_change(btncontrol._status, btncontrol._pseudo);
								btncontrol.enable = pagecontrol.enable;
							}
						}
						else {
							btncontrol._status = "disable";
							btncontrol._pseudo = "disabled";
							btncontrol._stat_change(btncontrol._status, btncontrol._pseudo);
							btncontrol.enable = pagecontrol.enable;
						}
					}
				}
			}
		}
	};

	_pTabPage.set_visible = function (v, skip_focus) {
		if (v === undefined || v === null) {
			return;
		}

		var control_elem = this._control_element;
		v = nexacro._toBoolean(v);


		if (this.visible != v) {
			this.visible = v;
			if (control_elem) {
				if (!this.visible) {
					this.sendToBack();
				}
				else {
					this.bringToFront();
				}

				this._setAccessibilityStatHidden(v);

				if (this.visible) {
					nexacro._resetVML(this);

					this._on_activate();

					if (!this._is_subcontrol && this._is_created && this.parent && this.parent._is_created && !skip_focus) {
						if (this.parent._focusobj instanceof nexacro.Tabpage) {
							this._on_focus(true);
						}
					}
				}
			}
		}
	};

	_pTabPage.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onclick && this.onclick._has_handlers) {
			var evt = new nexacro.ClickEventInfo(this, "onclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onclick._fireEvent(this, evt);
		}
		return false;
	};

	_pTabPage._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);
		this._setTabFocusObj(this);
	};

	_pTabPage.on_fire_user_onkeydown = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		if (!this.enable) {
			return;
		}

		if (key_code == nexacro.Event.KEY_TAB) {
			return;
		}

		return nexacro.Form.prototype.on_fire_user_onkeydown.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
	};

	_pTabPage._setTabFocusObj = function (focusobj) {
		if (this.parent) {
			this.parent._focusobj = focusobj;
		}
	};

	_pTabPage._getTabFocusObj = function () {
		return this.parent._focusobj;
	};

	_pTabPage._preLoad = function (flag) {
		this.preload = flag;
	};

	_pTabPage._loadURL = function () {
		if (this.parent.preload != true) {
			return;
		}
		this.on_apply_url(true);
	};

	_pTabPage._isEnable = function () {
		return this.parent._isEnable();
	};

	_pTabPage._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var _want_tab = true;
		var _want_arrow = this._want_arrow;
		if (keycode == nexacro.Event.KEY_TAB) {
			if (!this._getLastFocused() && !this._getTabOrderFirst()) {
				_want_tab = false;
			}

			if (_want_tab) {
				if (ctrlKey && shiftKey) {
					_want_tab = true;
				}
				else if (!ctrlKey) {
					_want_tab = false;
				}
			}
		}
		return {
			want_tab : _want_tab, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : _want_arrow
		};
	};

	_pTabPage._searchPrevTabFocus = function (current, bSearchFromLast, opt_force_cycle, bAccessibility, bhotkey) {
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility && (nexacro._accessibilitytype != 5);

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, bAccessibility);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
		if (my_tabstop_child_cnt && current && !bSearchFromLast) {
			next = this._getTabOrderNext(current, -1, bAccessibility, undefined, undefined, bhotkey);
			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getTabOrderLast(bAccessibility);
			}

			if (!next) {
				var page_last_comp = this._getLastFocused();
				var page_first_comp = this._getTabOrderFirst();
				var p = this.parent;
				if (page_last_comp == page_first_comp) {
					p = p.parent;
				}
				var parent_tabstop_childs = this.parent._getSortedDecendants(p, undefined, bAccessibility);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				var parent_comps = this.parent.components;
				if (opt_cycle == false && (this.parent._is_frame || this._is_window)) {
					ret = [null, this, -1];
				}
				else if (bAccessibility && this._checkContainerTabFocus() == true && this.parent._is_form) {
					ret = [this];
				}
				else if (this.parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = p._searchPrevTabFocus(this.parent, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					next = this._getTabOrderLast(bAccessibility);
				}
			}
		}
		else {
			if (!bSearchFromLast) {
				if (this instanceof nexacro.PopupDiv) {
					next = this._getTabOrderLast(bAccessibility);
				}
				else if (this.parent._is_form) {
					ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					ret = null;
				}
			}

			if (!ret) {
				next = this._getTabOrderLast(bAccessibility);
				if (!next && ret !== null) {
					if (!this.parent._isBtnFocusAcceptable()) {
						_want_tab = false;
					}
				}
			}
		}
		return {
			want_tab : _want_tab, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : _want_arrow
		};
	};

	_pTabPage._searchPrevTabFocus = function (current, bSearchFromLast, opt_force_cycle, bAccessibility, bhotkey) {
		var opt_cycle = (opt_force_cycle == undefined) ? (application._tabkeycirculation == 0) : opt_force_cycle;
		var opt_container_focus = nexacro._enableaccessibility && (nexacro._accessibilitytype != 5);

		var temp, ret, next;
		var my_tapstop_childs = this._getSortedDecendants(this, undefined, bAccessibility);
		var my_tabstop_child_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
		if (my_tabstop_child_cnt && current && !bSearchFromLast) {
			next = this._getTabOrderNext(current, -1, bAccessibility, undefined, undefined, bhotkey);
			if (opt_cycle && !next && this._isPopupVisible()) {
				next = this._getTabOrderLast(bAccessibility);
			}

			if (!next) {
				if (this.parent.focusacceptable) {
					return [this.parent._tabButtons[this._index]];
				}
				var page_last_comp = this._getLastFocused();
				var page_first_comp = this._getTabOrderFirst();
				var p = this.parent;
				if (page_last_comp == page_first_comp) {
					p = p.parent;
				}
				var parent_tabstop_childs = this.parent._getSortedDecendants(p, undefined, bAccessibility);
				var parent_tabstop_child_cnt = parent_tabstop_childs ? parent_tabstop_childs.length : 0;
				var parent_comps = this.parent.components;
				if (opt_cycle == false && (this.parent._is_frame || this._is_window)) {
					ret = [null, this, -1];
				}
				else if (bAccessibility && this._checkContainerTabFocus() == true && this.parent._is_form) {
					ret = [this];
				}
				else if (this.parent._is_form && parent_tabstop_child_cnt > 0) {
					ret = p._searchPrevTabFocus(this.parent, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					next = this._getTabOrderLast(bAccessibility);
				}
			}
		}
		else {
			if (!bSearchFromLast) {
				if (this instanceof nexacro.PopupDiv) {
					next = this._getTabOrderLast(bAccessibility);
				}
				else if (this.parent._is_form) {
					ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
				}
				else {
					ret = null;
				}
			}

			if (!ret) {
				next = this._getTabOrderLast(bAccessibility);
				if (!next && ret !== null) {
					if (bAccessibility && opt_container_focus && this._checkContainerTabFocus() == true) {
						ret = [this];
					}
					else if (this.parent._is_form) {
						ret = this.parent._searchPrevTabFocus(this, undefined, undefined, bAccessibility, bhotkey);
					}
					else {
						ret = null;
					}
				}
			}
		}

		if (next && !ret) {
			var next_tabstop_childs = (next._is_form ? next._getSortedDecendants(next, undefined, bAccessibility) : null);
			var next_tabstop_child_cnt = next_tabstop_childs ? next_tabstop_childs.length : 0;

			if (next._is_form && next_tabstop_child_cnt > 0) {
				ret = next._searchPrevTabFocus(null, true, undefined, bAccessibility, bhotkey);
			}
			else {
				ret = [next];
			}
		}

		return ret;
	};

	_pTabPage._on_bubble_dragenter = function (elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				this._dragenter_first_comp = this;
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this._is_subcontrol) {
				is_subcontrol_bubble = true;
				if (from_comp && this._contains(from_comp)) {
					return;
				}
				if (from_comp == this) {
					this.on_dragenter_basic_action();
				}
			}
			else {
				is_subcontrol_bubble = false;
				from_comp = this._getRootComponent(from_comp);
				if (from_comp && this._contains(from_comp)) {
					return;
				}

				if (this.visible && this._isEnable()) {
					this.on_dragenter_basic_action();

					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
			}
			if ((!this.ondragenter || (this.ondragenter && !this.ondragenter.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else {
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);

				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondragenter(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}

				this._stat_change("", "mouseover");
			}
			if ((!this.ondragenter || (this.ondragenter && !this.ondragenter.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				canvasX += this._adjust_left - this._scroll_left || 0;
				canvasY += this._adjust_top - this._scroll_top || 0;
				return this.parent._on_bubble_dragenter(elem, from_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pTabPage._on_bubble_dragleave = function (elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, bubble_scope) {
		if (!this._is_alive) {
			return;
		}

		if (event_bubbles === undefined) {
			var is_subcontrol_bubble;

			if (!refer_comp) {
				refer_comp = this;
				if (!refer_comp._is_reference_control) {
					refer_comp = this._getReferenceComponent(refer_comp);
				}
			}

			if (this._is_subcontrol) {
				is_subcontrol_bubble = true;
				if (to_comp && this._contains(to_comp)) {
					return;
				}
				if (fire_comp == this) {
					this.on_dragleave_basic_action();
				}
			}
			else {
				is_subcontrol_bubble = false;
				to_comp = this._getRootComponent(to_comp);
				if (to_comp && this._contains(to_comp)) {
					return;
				}

				if (this.visible && this._isEnable()) {
					this.on_dragleave_basic_action();

					var clientXY = this._getClientXY(canvasX, canvasY);
					if (bubble_scope) {
						event_bubbles = this.on_fire_user_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
					else {
						event_bubbles = this.on_fire_sys_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], this, refer_comp);
					}
				}
			}

			if ((!this.ondragleave || (this.ondragleave && !this.ondragleave.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				var canvas = this._getRecalcCanvasXY(elem, canvasX, canvasY);

				canvasX = canvas[0];
				canvasY = canvas[1];

				if (is_subcontrol_bubble) {
					return this.parent._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, null, refer_comp, bubble_scope);
				}
				else {
				}
			}
		}
		else {
			if (this.visible && this._isEnable()) {
				var clientXY = this._getClientXY(canvasX, canvasY);
				if (bubble_scope) {
					event_bubbles = this.on_fire_user_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}
				else {
					event_bubbles = this.on_fire_sys_ondragleave(src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientXY[0], clientXY[1], fire_comp, refer_comp);
				}

				if (!to_comp || !this._contains(to_comp)) {
					this._stat_change("", "normal");
				}
			}
			if ((!this.ondragleave || (this.ondragleave && !this.ondragleave.stoppropagation)) && event_bubbles !== true && this.parent && !this.parent._is_application) {
				canvasX += this._adjust_left - this._scroll_left || 0;
				canvasY += this._adjust_top - this._scroll_top || 0;
				return this.parent._on_bubble_dragleave(elem, to_comp, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, false, fire_comp, refer_comp, bubble_scope);
			}
		}
	};

	_pTabPage._on_bubble_close = function (event_bubbles, fire_comp, refer_comp) {
		var first_call = false;
		if (event_bubbles === undefined) {
			first_call = true;
			fire_comp = this;
			if (!refer_comp) {
				refer_comp = this;
			}
		}


		if (this.enableevent) {
			if (first_call) {
				event_bubbles = false;
			}

			this.on_fire_onclose(this, fire_comp, refer_comp);
		}


		var parent = this.parent;
		if (parent) {
			if ((!this.onclose || (this.onclose && !this.onclose.stoppropagation)) && event_bubbles !== true && !parent._is_application) {
				return parent._on_bubble_close(event_bubbles, fire_comp, refer_comp);
			}
		}
	};

	_pTabPage.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		var next_obj = null;
		var tab_comp = this.parent;
		var index = tab_comp._getTabIndex();
		var button_len = tab_comp._tabButtons.length;

		var _window = this._getWindow();
		var last_notify = _window._accessibility_last_focused_comp;
		if (direction) {
			next_obj = this._searchNextTabFocus(last_notify, undefined, undefined, true)[0];
			if (next_obj.parent != fire_comp) {
				index++;
				tab_comp._accessibility_tabindex = index;
				next_obj = (button_len > index) ? tab_comp._tabButtons[index] : next_obj;
			}
		}
		else {
			next_obj = this._searchPrevTabFocus(last_notify, undefined, undefined, true)[0];
			if (next_obj == fire_comp) {
				next_obj = tab_comp._tabButtons[index];
			}
		}

		if (next_obj) {
			next_obj._setAccessibilityNotifyEvent(direction);
			return true;
		}
		return false;
	};

	_pTabPage._setAccessibilityNotifyEvent = function (direction) {
		var next_obj = null;
		var index = this._index;
		var tab_comp = this.parent;
		var tabindex = tab_comp._getTabIndex();

		if (direction) {
			if (index != tabindex) {
				next_obj = tab_comp._tabButtons[index];
			}
			else {
				next_obj = this._getTabOrderFirst(true, false);
			}
		}
		else {
			if (index != tabindex) {
				next_obj = tab_comp._tabButtons[index];
			}
			else {
				next_obj = this._getTabOrderLast(true, false);
			}
		}

		if (next_obj) {
			next_obj._setAccessibilityNotifyEvent(direction);
		}
	};

	delete _pTabPage;

	nexacro.TabpageCtrl = function (id, parent) {
		nexacro.Tabpage.call(this, id, parent);
		this._is_subcontrol = true;
	};
	var _pTabpageCtrl = nexacro.TabpageCtrl.prototype = nexacro._createPrototype(nexacro.Tabpage, nexacro.TabpageCtrl);
	nexacro._setForControlStyleFinder(_pTabpageCtrl);

	delete _pTabpageCtrl;
}


if (!nexacro.TabBorderCtrl) {
	nexacro.TabBorderCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pTabBorderCtrl = nexacro._createPrototype(nexacro.Component, nexacro.TabBorderCtrl);
	nexacro.TabBorderCtrl.prototype = _pTabBorderCtrl;

	_pTabBorderCtrl.on_find_CurrentStyle_border = function (pseudo) {
		var tab = this.parent;

		if ((tab._status == "focus") && (pseudo == "normal")) {
			pseudo = "focused";
		}

		var border = tab.on_find_CurrentStyle_border(pseudo);
		var bordertype = tab.on_find_CurrentStyle_bordertype(pseudo);
		var position = tab._getTabPosition();
		var b = border.clone();

		b._linecnt = 1;
		if (bordertype._isRound()) {
			b._copytoSubObjects();
		}
		b._linecnt = 4;

		if (this.name == "tableftborder") {
			if (position == "top" || position == "left") {
				b.set_bottom_width("0");
				b.set_right_width("0");
			}
			else if (position == "bottom") {
				b.set_top_width("0");
				b.set_right_width("0");
			}
			else if (position == "right") {
				b.set_left_width("0");
				b.set_bottom_width("0");
			}
		}
		else if (this.name == "tabcenterborder") {
			if (position == "top") {
				b.set_bottom_width("0");
				b.set_left_width("0");
				if (tab._tabButtons && tab._tabButtons.length > 0 && tab.tabindex > -1) {
					var buttonbackground = tab.on_find_CurrentStyle_buttonbackground("selected");
					var border_color = buttonbackground ? buttonbackground.color : null;
					if (border_color) {
						b.set_top_color(border_color);
						b.set_right_color(border_color);
					}
				}
			}
			else if (position == "bottom" || position == "right") {
				b.set_top_width("0");
				b.set_left_width("0");
				if (tab._tabButtons && tab._tabButtons.length > 0 && tab.tabindex > -1) {
					var buttonbackground = tab.on_find_CurrentStyle_buttonbackground("selected");
					var border_color = buttonbackground ? buttonbackground.color : null;
					if (border_color) {
						b.set_bottom_color(border_color);
						b.set_right_color(border_color);
					}
				}
			}
			else if (position == "left") {
				b.set_top_width("0");
				b.set_right_width("0");
				if (tab._tabButtons && tab._tabButtons.length > 0 && tab.tabindex > -1) {
					var buttonbackground = tab.on_find_CurrentStyle_buttonbackground("selected");
					var border_color = buttonbackground ? buttonbackground.color : null;
					if (border_color) {
						b.set_bottom_color(border_color);
						b.set_left_color(border_color);
					}
				}
			}
		}
		else {
			if (position == "top") {
				b.set_bottom_width("0");
				b.set_left_width("0");
				b.set_right_width("0");
			}
			else if (position == "bottom" || position == "right") {
				b.set_top_width("0");
				b.set_left_width("0");
			}
			else if (position == "left") {
				b.set_top_width("0");
				b.set_right_width("0");
			}
		}

		return b;
	};

	_pTabBorderCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		var tab = this.parent;
		if ((tab._status == "focus") && (pseudo == "normal")) {
			pseudo = "focused";
		}

		var b_type = tab.on_find_CurrentStyle_bordertype(pseudo);
		var position = tab._getTabPosition();
		var bordertype = b_type.clone();

		bordertype.set_lefttop(false);
		bordertype.set_leftbottom(false);
		bordertype.set_righttop(false);
		bordertype.set_rightbottom(false);

		return bordertype;
	};

	delete _pTabBorderCtrl;
}

if (!nexacro.TabButtonBorderCtrl) {
	nexacro.TabButtonBorderCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		this._index = -1;
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pTabButtonBorderCtrl = nexacro._createPrototype(nexacro.Component, nexacro.TabButtonBorderCtrl);
	nexacro.TabButtonBorderCtrl.prototype = _pTabButtonBorderCtrl;

	_pTabButtonBorderCtrl._setElementBorder = function (control, border, bordertype) {
		var b = border.clone();

		b._linecnt = 1;
		b._copytoSubObjects();
		b._linecnt = 4;

		var topcolor = nexacro._getWebColorFromXreColor(border.top_color);
		if (border.top_width && topcolor != "") {
		}
		else if (border.top_width != "") {
			b.set_top_width("0");
		}

		b.set_bottom_width("0");
		b.set_left_width("0");
		b.set_right_width("0");

		control.setElementBorder(b, bordertype);
	};

	_pTabButtonBorderCtrl._on_sys_lbuttondown = function (node, e) {
		var ret = this._on_lbuttondown(node, e);
		return ret;
	};

	_pTabButtonBorderCtrl._on_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		var parent = this.parent;
		var ret = parent._on_btn_lbuttondown(parent._tabButtons[this._index], parent._tabButtons[this._index]._text_elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp);

		parent._tabButtons[this._index]._on_focus(true);


		return ret;
	};

	delete _pTabButtonBorderCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.FileDownload) {
	nexacro.FileDownloadEventInfo = function (obj, id, url, targetfullpath) {
		this.id = this.eventid = id || "onsuccess";
		this.fromobject = this.fromreferenceobject = obj;
		this.url = url;
		this.targetfullpath = targetfullpath;
	};
	var _pFileDownloadEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.FileDownloadEventInfo);
	nexacro.FileDownloadEventInfo.prototype = _pFileDownloadEventInfo;
	_pFileDownloadEventInfo._type_name = "FileDownloadEventInfo";

	delete _pFileDownloadEventInfo;

	nexacro.FileDownloadErrorEventInfo = function (obj, id, errortype, errormsg, errorobj, statuscode, requesturi, locationuri) {
		nexacro.ErrorEventInfo.call(this, obj, id, errortype, errormsg, errorobj, statuscode, requesturi, locationuri);
	};
	var _pFileDownloadErrorEventInfo = nexacro._createPrototype(nexacro.ErrorEventInfo, nexacro.FileDownloadErrorEventInfo);
	nexacro.FileDownloadErrorEventInfo.prototype = _pFileDownloadErrorEventInfo;
	_pFileDownloadErrorEventInfo._type_name = "FileDownloadErrorEventInfo";

	delete _pFileDownloadErrorEventInfo;

	nexacro.FileDownload = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);


		this.downloadurl = "";
		this.wordwrap = "char";
		this.downloadfilename = "";

		this.filedialogpath = "";
		this.openedpath = "";

		this.filefilter = "";
		this.filefilterindex = 0;


		this._handle = null;
		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondrop" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onsuccess" : 1, 
			"onerror" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
				
		};

		this._accessibility_role = "button";
	};

	var _pFileDownload = nexacro._createPrototype(nexacro.Component, nexacro.FileDownload);
	nexacro.FileDownload.prototype = _pFileDownload;

	_pFileDownload._type_name = "FileDownload";

	_pFileDownload.on_apply_style_align = function (align) {
		var text_elem = this._text_elem;
		if (text_elem && align) {
			var halign = align.halign == "" ? "center" : align._halign;
			var valign = align.valign == "" ? "middle" : align._valign;
			text_elem.setElementAlignXY(halign, valign);
		}
	};

	_pFileDownload.on_apply_style_color = function (color) {
		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.setElementColor(color);
		}
	};

	_pFileDownload.on_apply_style_font = function (font) {
		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.setElementFont(font);
		}
	};

	_pFileDownload.on_apply_style_accessibility = function (accessibility) {
		if (accessibility) {
			this._control_element.setAccessibility(accessibility);
		}
	};
	_pFileDownload.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (curstyle.font != font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}
		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (curstyle.letterspace != letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}
		var color = this.on_find_CurrentStyle_color(pseudo);
		if (curstyle.color != color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}
		var align = this.on_find_CurrentStyle_align(pseudo);
		if (curstyle.align != align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}
		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (curstyle.rtlimagemirroring != rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}
	};

	_pFileDownload.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			nexacro._create_filedownload_handle(this.on_load, this);

			var text_elem = new nexacro.TextBoxElement(control_elem);
			this._text_elem = text_elem;
			var halign = this.currentstyle.align.halign == "" ? "left" : this.currentstyle.align._halign;
			var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
			text_elem.setElementSize(this._client_width, this._client_height);
			text_elem.setElementColor(this.currentstyle.color);
			text_elem.setElementFont(this.currentstyle.font);
			text_elem.setElementAlignXY(halign, valign);
			text_elem.setElementLetterSpace(this.currentstyle.letterspace);
		}
	};

	_pFileDownload.on_created_contents = function () {
		var text_elem = this._text_elem;

		if (text_elem) {
			text_elem.create();
		}
		this.on_apply_wordwrap();
		this.on_apply_prop_rtldirection();
	};

	_pFileDownload.on_destroy_contents = function () {
		var text_elem = this._text_elem;

		if (text_elem) {
			text_elem.destroy();
			this._text_elem = null;
		}

		nexacro._destroy_filedownload_handle(this._handle);
	};

	_pFileDownload.on_change_containerRect = function (width, height) {
		var textElem = this._text_elem;
		if (textElem) {
			textElem.setElementSize(width, height);
		}
	};

	_pFileDownload.set_text = function (text) {
		this.text = text;
		this.on_apply_text();
	};

	_pFileDownload.on_apply_text = function () {
		var control_elem = this._control_element;
		if (this._control_element) {
			var text_elem = this._text_elem;
			if (!text_elem) {
				text_elem = new nexacro.TextBoxElement(control_elem);
				this._text_elem = text_elem;
				this.on_apply_wordwrap();
				text_elem.setElementSize(this._client_width, this._client_height);

				if (this._is_created) {
					var halign = this.currentstyle.align.halign == "" ? "left" : this.currentstyle.align._halign;
					var valign = this.currentstyle.align.valign == "" ? "middle" : this.currentstyle.align._valign;
					text_elem.setElementColor(this.currentstyle.color);
					text_elem.setElementFont(this.currentstyle.font);
					text_elem.setElementAlignXY(halign, valign);
					text_elem.setElementLetterSpace(this.currentstyle.letterspace);
					text_elem.create();
				}
			}

			var expr = this.expr;

			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var len = expr.length;
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (len == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				exprfn = nexacro._createInlineFunc(conv_expr, ["comp"]);

				if (exprfn) {
					try {
						var val = nexacro._toString(exprfn.call(null, this));
						if (val != this.displaytext) {
							this.displaytext = val;
						}
					}
					catch (e) {
						return;
					}
				}
			}
			else {
				this.displaytext = this.text;
			}

			text_elem.setElementText(this.displaytext);
			if (this.displaytext && this.displaytext != "") {
				this._text_width = -1;
				this._text_height = -1;
			}
			else {
				this._text_width = 0;
				this._text_height = 0;
			}
		}
	};

	_pFileDownload.on_apply_expr = function () {
		this.on_apply_text();
	};

	_pFileDownload.set_downloadurl = function (v) {
		if (v != this.downloadurl) {
			this.downloadurl = v;
		}
	};

	_pFileDownload.set_wordwrap = function (v) {
		if (typeof (v) == "string") {
			v = v.toLowerCase();
		}

		if (v != this.wordwrap) {
			this.wordwrap = v;
			this.on_apply_wordwrap();
		}
	};

	_pFileDownload.on_apply_wordwrap = function () {
		if (this._text_elem) {
			this._text_elem.setElementWordWrap(this.wordwrap);
		}
	};

	_pFileDownload.set_downloadfilename = function (v) {
		if (v != this.downloadfilename) {
			this.downloadfilename = v;
		}
	};

	_pFileDownload.on_apply_prop_rtldirection = function () {
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.setElementRtlDirection(this._rtldirection);
		}
	};
	_pFileDownload.set_filedialogpath = function (v) {
		this.filedialogpath = v;
	};

	_pFileDownload.set_openedpath = function (v) {
	};

	_pFileDownload.set_filefilter = function (v) {
		this.filefilter = v;
	};

	_pFileDownload.set_filefilterindex = function (v) {
		this.filefilterindex = v;
	};


	_pFileDownload.download = function (url, targetpath) {
		if ((nexacro.Browser == "Runtime") && (!this._handle)) {
			return false;
		}

		var ret = false;
		var downloadret;
		var downloadurl = this.downloadurl;
		var initname = this.downloadfilename;
		if (targetpath != undefined) {
			targetpath = nexacro._toString(targetpath);
		}

		if (url != undefined) {
			url = nexacro._toString(url);
			url = nexacro._getImageLocation(url);

			downloadret = nexacro._download(url, this._handle, initname, targetpath, undefined, this.filedialogpath, this.filefilter, this.filefilterindex);
			if (downloadret === null) {
				return false;
			}
			ret = true;
		}
		else if (downloadurl && downloadurl != undefined && downloadurl != "") {
			downloadurl = nexacro._getServiceLocation(downloadurl);

			downloadret = nexacro._download(downloadurl, this._handle, initname, targetpath, undefined, this.filedialogpath, this.filefilter, this.filefilterindex);
			if (downloadret === null) {
				return false;
			}
			ret = true;
		}
		if (downloadret != undefined) {
			var nIdx = downloadret.lastIndexOf("\\");
			if (nIdx > 0) {
				this.openedpath = downloadret.substring(0, nIdx + 1);
			}
		}

		return ret;
	};

	_pFileDownload.on_fire_onsuccess = function (url, targetfullpath) {
		application._endCommProgress();

		if (this.onsuccess && this.onsuccess._has_handlers && url != "") {
			var evt = new nexacro.FileDownloadEventInfo(this, "onsuccess", url, targetfullpath);
			return this.onsuccess._fireEvent(this, evt);
		}
	};

	_pFileDownload.on_fire_onerror = function (obj, errortype, errormsg, errorobj, statuscode, requesturi, locationuri) {
		application._endCommProgress();

		if (this.onerror && this.onerror._has_handlers) {
			var evt = new nexacro.FileDownloadErrorEventInfo(obj, "onerror", errortype, errormsg, errorobj, statuscode, requesturi, locationuri);
			return this.onerror._fireEvent(this, evt);
		}
	};

	_pFileDownload._addCookieToGlobalVariable = function (cookieStr) {
		if (application && cookieStr) {
			var cookielist = cookieStr.split("; ");
			var cookievarCnt = cookielist.length;
			var sep_pos;
			var cookie_id, cookie_value;
			for (var i = 0; i < cookievarCnt; i++) {
				sep_pos = cookielist[i].indexOf("=");
				if (sep_pos <= 0) {
					continue;
				}

				cookie_id = cookielist[i].substr(0, sep_pos);
				cookie_value = cookielist[i].substr(sep_pos + 1);

				if (nexacro._indexOf(application._cookie_variables, cookie_id) >= 0 || nexacro._indexOf(application._secure_cookie_variables, cookie_id) >= 0) {
					application[cookie_id] = cookie_value;
				}
				else {
					if (application.addcookietovariable && (nexacro._indexOf(application._variables, cookie_id) < 0)) {
						application._addVariable(cookie_id, cookie_value, true);
					}
				}
			}
		}
	};

	_pFileDownload.on_load = function (status, data, url, errcode, httpcode, errmsg, cookies) {
		if (cookies) {
			this._addCookieToGlobalVariable(cookies);
		}

		if (status < 0) {
			application._onHttpSystemError(this, true, this, errcode, url, httpcode, url, null);
			var errormsg = nexacro._GetSystemErrorMsg(this, errcode);
			this.on_fire_onerror(this, "ObjectError", errormsg, this, 9901, null, null);
		}
		else {
			this.on_fire_onsuccess(url, data);
		}
	};

	_pFileDownload.on_fire_onclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_onclick.call(this, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
		this.download();
		return ret;
	};

	_pFileDownload.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_sys_onkeyup.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
		if (key_code == 13 || key_code == 32) {
			this.on_fire_onclick("none", false, false, false, false, -1, -1, -1, -1, -1, -1, this, this);
		}
		return ret;
	};



	_pFileDownload._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		return {
			want_tab : false, 
			want_return : true, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : false
		};
	};

	delete _pFileDownload;

	nexacro.FileDownloadCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FileDownload.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._isSubControl = true;
	};

	var _pFileDownloadCtrl = nexacro._createPrototype(nexacro.FileDownload, nexacro.FileDownloadCtrl);
	nexacro.FileDownloadCtrl.prototype = _pFileDownloadCtrl;
	nexacro._setForControlStyleFinder(_pFileDownloadCtrl);

	_pFileDownloadCtrl._type_name = "FileDownloadControl";

	delete _pFileDownloadCtrl;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.FileUpload) {
	nexacro.FileUploadItemEventInfo = function (obj, id, idx) {
		this.id = this.eventid = id || "onfileuploaditem";
		this.fromobject = this.fromreferenceobject = obj;

		this.index = idx;
	};
	var _pEventFileUploadItemEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.FileUploadItemEventInfo);
	nexacro.FileUploadItemEventInfo.prototype = _pEventFileUploadItemEventInfo;
	_pEventFileUploadItemEventInfo._type_name = "FileUploadItemEventInfo";

	delete _pEventFileUploadItemEventInfo;

	nexacro.FileUploadMouseEventInfo = function (obj, id, strButton, altKey, ctrlKey, shiftKey, metaKey, index, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onmouse";

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = altKey || false;
		this.ctrlKey = ctrlKey || false;
		this.shiftKey = shiftKey || false;
		this.metaKey = metaKey || false;
		this.button = strButton || "";
		this.index = obj.index;
		this.screenX = screenX || -1;
		this.screenY = screenY || -1;
		this.canvasX = canvasX || -1;
		this.canvasY = canvasY || -1;
		this.clientX = clientX || -1;
		this.clientY = clientY || -1;
	};
	var _pFileUploadMouseEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.FileUploadMouseEventInfo);
	nexacro.FileUploadMouseEventInfo.prototype = _pFileUploadMouseEventInfo;
	_pFileUploadMouseEventInfo._type_name = "FileUploadMouseEventInfo";

	delete _pFileUploadMouseEventInfo;

	nexacro.FileUploadLoadEventInfo = function (obj, id, dsArray, code, msg, url) {
		this.id = this.eventid = id || "onsuccess";
		this.fromobject = this.fromreferenceobject = obj;

		this.datasets = dsArray;
		this.errorcode = code;
		this.errormsg = msg;
		this.url = url;
	};
	var _pFileUploadLoadEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.FileUploadLoadEventInfo);
	nexacro.FileUploadLoadEventInfo.prototype = _pFileUploadLoadEventInfo;
	_pFileUploadLoadEventInfo._type_name = "FileUploadLoadEventInfo";

	delete _pFileUploadLoadEventInfo;

	nexacro.FileUploadItemChangeEventInfo = function (obj, id, index, oldvalue, newvalue, value2) {
		this.id = this.eventid = id || "onitemchanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.index = obj.index;
		this.oldvalue = obj.oldvalue;
		this.newvalue = obj.value;
		this.newarrayvalue = value2;
	};
	var _pFileUploadItemChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.FileUploadItemChangeEventInfo);
	nexacro.FileUploadItemChangeEventInfo.prototype = _pFileUploadItemChangeEventInfo;
	_pFileUploadItemChangeEventInfo._type_name = "FileUploadItemChangeEventInfo";

	delete _pFileUploadItemChangeEventInfo;

	nexacro.FileUploadErrorEventInfo = function (obj, id, errortype, errormsg, errorobj, statuscode, requesturi, locationuri, index) {
		nexacro.ErrorEventInfo.call(this, obj, id, errortype, errormsg, errorobj, statuscode, requesturi, locationuri);
		this.index = index;
	};
	var _pFileUploadErrorEventInfo = nexacro._createPrototype(nexacro.ErrorEventInfo, nexacro.FileUploadErrorEventInfo);
	nexacro.FileUploadErrorEventInfo.prototype = _pFileUploadErrorEventInfo;
	_pFileUploadErrorEventInfo._type_name = "FileUploadErrorEventInfo";

	delete _pFileUploadErrorEventInfo;

	nexacro.FileUpload_Style = function (target) {
		nexacro.Style.call(this);
		if (target) {
			this._target = target;
		}

		this.itemheight = null;

		this.buttonbackground = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttongradation = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.buttonfont = null;
		this.buttoncolor = null;
		this.buttonsize = null;
		this.buttontext = null;

		this.editbackground = null;
		this.editborder = null;
		this.editbordertype = null;
		this.editgradation = null;
		this.editpadding = null;
		this.editmargin = null;
		this.editfont = null;
		this.editcolor = null;
		this.editaccessibility = null;
		this.buttonaccessibility = null;
	};

	var _pFileUploadStyle = nexacro._createPrototype(nexacro.Style, nexacro.FileUpload_Style);
	nexacro.FileUpload_Style.prototype = _pFileUploadStyle;
	_pFileUploadStyle._type_name = "FileUploadStyle";

	eval(nexacro._createValueAttributeEvalStr("_pFileUploadStyle", "itemheight"));
	eval(nexacro._createValueAttributeEvalStr("_pFileUploadStyle", "buttonsize"));
	eval(nexacro._createValueAttributeEvalStr("_pFileUploadStyle", "buttontext"));
	eval(nexacro._createColorAttributeEvalStr("_pFileUploadStyle", "editcolor"));
	eval(nexacro._createColorAttributeEvalStr("_pFileUploadStyle", "buttoncolor"));
	eval(nexacro._createBorderAttributeEvalStr("_pFileUploadStyle", "editborder"));
	eval(nexacro._createBorderAttributeEvalStr("_pFileUploadStyle", "buttonborder"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pFileUploadStyle", "editbordertype"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pFileUploadStyle", "buttonbordertype"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pFileUploadStyle", "editbackground"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pFileUploadStyle", "buttonbackground"));
	eval(nexacro._createGradationAttributeEvalStr("_pFileUploadStyle", "editgradation"));
	eval(nexacro._createGradationAttributeEvalStr("_pFileUploadStyle", "buttongradation"));
	eval(nexacro._createPaddingAttributeEvalStr("_pFileUploadStyle", "editpadding"));
	eval(nexacro._createPaddingAttributeEvalStr("_pFileUploadStyle", "buttonpadding"));
	eval(nexacro._createMarginAttributeEvalStr("_pFileUploadStyle", "editmargin"));
	eval(nexacro._createMarginAttributeEvalStr("_pFileUploadStyle", "buttonmargin"));
	eval(nexacro._createFontAttributeEvalStr("_pFileUploadStyle", "editfont"));
	eval(nexacro._createFontAttributeEvalStr("_pFileUploadStyle", "buttonfont"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pFileUploadStyle", "editaccessibility"));
	eval(nexacro._createAccessibilityAttributeEvalStr("_pFileUploadStyle", "buttonaccessibility"));

	_pFileUploadStyle.__custom_emptyObject = function () {
		this.itemheight = null;

		this.buttonbackground = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttongradation = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.buttonfont = null;
		this.buttoncolor = null;
		this.buttonsize = null;
		this.buttontext = null;

		this.editbackground = null;
		this.editborder = null;
		this.editbordertype = null;
		this.editgradation = null;
		this.editpadding = null;
		this.editmargin = null;
		this.editfont = null;
		this.editcolor = null;
		this.editaccessibility = null;
		this.buttonaccessibility = null;
	};

	_pFileUploadStyle.__get_custom_style_value = function () {
		var val = "";
		if (this.itemheight && this.itemheight._is_empty) {
			val += "itemheight" + this.itemheight._value + "; ";
		}

		if (this.buttonsize && this.buttonsize._is_empty) {
			val += "buttonsize" + this.buttonsize._value + "; ";
		}
		if (this.buttontext && this.buttontext._is_empty) {
			val += "buttontext" + this.buttontext._value + "; ";
		}
		if (this.buttonbackground && this.buttonbackground._is_empty) {
			val += "buttonbackground" + this.buttonbackground._value + "; ";
		}
		if (this.buttonborder && this.buttonborder._is_empty) {
			val += "buttonborder" + this.buttonborder._value + "; ";
		}
		if (this.buttonbordertype && this.buttonbordertype._is_empty) {
			val += "buttonbordertype" + this.buttonbordertype._value + "; ";
		}
		if (this.buttongradation && this.buttongradation._is_empty) {
			val += "buttongradation" + this.buttongradation._value + "; ";
		}
		if (this.buttonpadding && this.buttonpadding._is_empty) {
			val += "buttonpadding" + this.buttonpadding._value + "; ";
		}
		if (this.buttonmargin && this.buttonmargin._is_empty) {
			val += "buttonmargin" + this.buttonmargin._value + "; ";
		}
		if (this.buttonfont && this.buttonfont._is_empty) {
			val += "buttonfont" + this.buttonfont._value + "; ";
		}
		if (this.buttoncolor && this.buttoncolor._is_empty) {
			val += "buttoncolor" + this.buttoncolor._value + "; ";
		}

		if (this.editbackground && this.editbackground._is_empty) {
			val += "editbackground" + this.editbackground._value + "; ";
		}
		if (this.editborder && this.editborder._is_empty) {
			val += "editborder" + this.editborder._value + "; ";
		}
		if (this.editbordertype && this.editbordertype._is_empty) {
			val += "editbordertype" + this.editbordertype._value + "; ";
		}
		if (this.editgradation && this.editgradation._is_empty) {
			val += "editgradation" + this.editgradation._value + "; ";
		}
		if (this.editpadding && this.editpadding._is_empty) {
			val += "editpadding" + this.editpadding._value + "; ";
		}
		if (this.editmargin && this.editmargin._is_empty) {
			val += "editmargin" + this.editmargin._value + "; ";
		}
		if (this.editfont && this.editfont._is_empty) {
			val += "editfont" + this.editfont._value + "; ";
		}
		if (this.editcolor && this.editcolor._is_empty) {
			val += "editcolor" + this.editcolor._value + "; ";
		}
		if (this.editaccessibility && this.editaccessibility._is_empty) {
			val += "editaccessibility" + this.editaccessibility._value + "; ";
		}
		if (this.buttonaccessibility && this.buttonaccessibility._is_empty) {
			val += "buttonaccessibility" + this.buttonaccessibility._value + "; ";
		}

		return val;
	};

	nexacro.FileUpload_CurrentStyle = function () {
		nexacro.CurrentStyle.call(this);

		this.itemheight = null;

		this.buttonbackground = null;
		this.buttonborder = null;
		this.buttonbordertype = null;
		this.buttongradation = null;
		this.buttonpadding = null;
		this.buttonmargin = null;
		this.buttonfont = null;
		this.buttoncolor = null;
		this.buttonsize = null;
		this.buttontext = null;

		this.editbackground = null;
		this.editborder = null;
		this.editbordertype = null;
		this.editgradation = null;
		this.editpadding = null;
		this.editmargin = null;
		this.editfont = null;
		this.editcolor = null;
		this.editaccessibility = null;
		this.buttonaccessibility = null;
	};

	var _pFileUploadCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.FileUpload_CurrentStyle);
	nexacro.FileUpload_CurrentStyle.prototype = _pFileUploadCurrentStyle;

	_pFileUploadCurrentStyle.__custom_emptyObject = _pFileUploadStyle.__custom_emptyObject;
	_pFileUploadCurrentStyle.__get_custom_style_value = _pFileUploadStyle.__get_custom_style_value;

	delete _pFileUploadStyle;
	delete _pFileUploadCurrentStyle;

	nexacro.FileUpload = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);


		this.scrollbars = "autoboth";
		this.filecolumn = "";
		this.innerdataset = null;
		this._innerdataset = null;
		this.text = "";
		this.index = -1;
		this.async = "false";
		this.retry = 3;
		this.timeout = 30;
		this.itemheight = 18;
		this.itemcount = 1;
		this.uploadurl = "";
		this.multiselect = false;
		this._multiselect = false;
		this.filelist = [];

		this.filedialogpath = "";
		this.openedpath = "";

		this.filefilter = "";
		this.filefilterindex = 0;


		this._is_scrollable = true;
		this._scrollbars = 3;
		this._items = [];
		this._handle = null;
		this._last_id = -1;
		this._editFlag = null;
		this._buttonFlag = true;
		this._set_focus_dir = -1;

		this._want_tab = true;
		this._want_arrow = false;
		this.filepathedits = new nexacro.Collection();
		this.filefindbuttons = new nexacro.Collection();

		this._onPopupWin = false;

		this._accessibility_role = "fileupload";
		this._first_focus = false;

		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondrop" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmousewheel" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onsuccess" : 1, 
			"onerror" : 1, 
			"onappenditem" : 1, 
			"ondeleteitem" : 1, 
			"onitemclick" : 1, 
			"onfindclick" : 1, 
			"onitemchanged" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1
		};
	};

	var _pFileUpload = nexacro._createPrototype(nexacro.Component, nexacro.FileUpload);
	nexacro.FileUpload.prototype = _pFileUpload;

	_pFileUpload._type_name = "FileUpload";

	_pFileUpload._defaultButtontext = nexacro._getCachedStyleObj("buttontext", "find");
	_pFileUpload._defaultButtonsize = nexacro._getCachedStyleObj("buttonsize", "18");
	_pFileUpload._defaultItemheight = nexacro._getCachedStyleObj("itemheight", "18");

	_pFileUpload.on_apply_custom_pseudo = function (pseudo) {
		var curstyle = this.currentstyle;


		var padding = this.on_find_CurrentStyle_padding(pseudo);
		if (padding != curstyle.padding) {
			curstyle.padding = padding;
			this.on_apply_style_padding(padding);
		}

		var align = this.on_find_CurrentStyle_align(pseudo);
		if (align != curstyle.align) {
			curstyle.align = align;
			this.on_apply_style_align(align);
		}

		var font = this.on_find_CurrentStyle_font(pseudo);
		if (font != curstyle.font) {
			curstyle.font = font;
			this.on_apply_style_font(font);
		}

		var letterspace = this.on_find_CurrentStyle_letterspace(pseudo);
		if (letterspace != curstyle.letterspace) {
			curstyle.letterspace = letterspace;
			this.on_apply_style_letterspace(letterspace);
		}

		var color = this.on_find_CurrentStyle_color(pseudo);
		if (color != curstyle.color) {
			curstyle.color = color;
			this.on_apply_style_color(color);
		}


		var rtlimagemirroring = this.on_find_CurrentStyle_rtlimagemirroring(pseudo);
		if (rtlimagemirroring != curstyle.rtlimagemirroring) {
			curstyle.rtlimagemirroring = rtlimagemirroring;
			this.on_apply_style_rtlimagemirroring(rtlimagemirroring);
		}


		var editbackground = this.on_find_CurrentStyle_editbackground(pseudo);
		if (editbackground != curstyle.editbackground) {
			curstyle.editbackground = editbackground;
			this.on_apply_style_editbackground(editbackground);
		}

		var editborder = this.on_find_CurrentStyle_editborder(pseudo);
		if (editborder != curstyle.editborder) {
			curstyle.editborder = editborder;
			this.on_apply_style_editborder(editborder);
		}

		var editbordertype = this.on_find_CurrentStyle_editbordertype(pseudo);
		if (editbordertype != curstyle.editbordertype) {
			curstyle.editbordertype = editbordertype;
			this.on_apply_style_editbordertype(editbordertype);
		}

		var editgradation = this.on_find_CurrentStyle_editgradation(pseudo);
		if (editgradation != curstyle.editgradation) {
			curstyle.editgradation = editgradation;
			this.on_apply_style_editgradation(editgradation);
		}

		var editpadding = this.on_find_CurrentStyle_editpadding(pseudo);
		if (editpadding != curstyle.editpadding) {
			curstyle.editpadding = editpadding;
			this.on_apply_style_editpadding(editpadding);
		}

		var editmargin = this.on_find_CurrentStyle_editmargin(pseudo);
		if (editmargin != curstyle.editmargin) {
			curstyle.editmargin = editmargin;
			this.on_apply_style_editmargin(editmargin);
		}

		var editfont = this.on_find_CurrentStyle_editfont(pseudo);
		if (editfont != curstyle.editfont) {
			curstyle.editfont = editfont;
			this.on_apply_style_editfont(editfont);
		}

		var editcolor = this.on_find_CurrentStyle_editcolor(pseudo);
		if (editcolor != curstyle.editcolor) {
			curstyle.editcolor = editcolor;
			this.on_apply_style_editcolor(editcolor);
		}


		var buttonbackground = this.on_find_CurrentStyle_buttonbackground(pseudo);
		if (buttonbackground != curstyle.buttonbackground) {
			curstyle.buttonbackground = buttonbackground;
			this.on_apply_style_buttonbackground(buttonbackground);
		}

		var buttonborder = this.on_find_CurrentStyle_buttonborder(pseudo);
		if (buttonborder != curstyle.buttonborder) {
			curstyle.buttonborder = buttonborder;
			this.on_apply_style_buttonborder(buttonborder);
		}

		var buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(pseudo);
		if (buttonbordertype != curstyle.buttonbordertype) {
			curstyle.buttonbordertype = buttonbordertype;
			this.on_apply_style_buttonbordertype(buttonbordertype);
		}

		var buttongradation = this.on_find_CurrentStyle_buttongradation(pseudo);
		if (buttongradation != curstyle.buttongradation) {
			curstyle.buttongradation = buttongradation;
			this.on_apply_style_buttongradation(buttongradation);
		}

		var buttonpadding = this.on_find_CurrentStyle_buttonpadding(pseudo);
		if (buttonpadding != curstyle.buttonpadding) {
			curstyle.buttonpadding = buttonpadding;
			this.on_apply_style_buttonpadding(buttonpadding);
		}

		var buttonmargin = this.on_find_CurrentStyle_buttonmargin(pseudo);
		if (buttonmargin != curstyle.buttonmargin) {
			curstyle.buttonmargin = buttonmargin;
			this.on_apply_style_buttonmargin(buttonmargin);
		}

		var buttonfont = this.on_find_CurrentStyle_buttonfont(pseudo);
		if (buttonfont != curstyle.buttonfont) {
			curstyle.buttonfont = buttonfont;
			this.on_apply_style_buttonfont(buttonfont);
		}

		var buttoncolor = this.on_find_CurrentStyle_buttoncolor(pseudo);
		if (buttoncolor != curstyle.buttoncolor) {
			curstyle.buttoncolor = buttoncolor;
			this.on_apply_style_buttoncolor(buttoncolor);
		}

		var buttonsize = this.on_find_CurrentStyle_buttonsize(pseudo);
		if (buttonsize != curstyle.buttonsize) {
			curstyle.buttonsize = buttonsize;
			this.on_apply_style_buttonsize(buttonsize);
		}

		var buttontext = this.on_find_CurrentStyle_buttontext(pseudo);
		if (buttontext != curstyle.buttontext) {
			curstyle.buttontext = buttontext;
			this.on_apply_style_buttontext(buttontext);
		}

		var itemheight = this.on_find_CurrentStyle_itemheight(pseudo);
		if (itemheight != curstyle.itemheight) {
			curstyle.itemheight = itemheight;
			this.on_apply_style_itemheight(itemheight);
		}


		var editaccessibility = this.on_find_CurrentStyle_editaccessibility(pseudo);
		if (editaccessibility != curstyle.editaccessibility) {
			curstyle.editaccessibility = editaccessibility;
			this.on_find_CurrentStyle_editaccessibility(editaccessibility);
		}
		var buttonaccessibility = this.on_find_CurrentStyle_buttonaccessibility(pseudo);
		if (buttonaccessibility != curstyle.buttonaccessibility) {
			curstyle.buttonaccessibility = buttonaccessibility;
			this.on_apply_style_buttonaccessibility(buttonaccessibility);
		}
	};

	_pFileUpload.on_create_custom_style = function () {
		return new nexacro.FileUpload_Style(this);
	};

	_pFileUpload.on_create_custom_currentStyles = function () {
		return new nexacro.FileUpload_CurrentStyle();
	};


	_pFileUpload.on_find_CurrentStyle_editbackground = function (pseudo) {
		var editbackground = this._find_pseudo_obj("editbackground", pseudo, "background");
		return editbackground;
	};

	_pFileUpload.on_find_CurrentStyle_editborder = function (pseudo) {
		var editborder = this._find_pseudo_obj("editborder", pseudo, "border");
		return editborder;
	};

	_pFileUpload.on_find_CurrentStyle_editbordertype = function (pseudo) {
		var editbordertype = this._find_pseudo_obj("editbordertype", pseudo, "bordertype");
		return editbordertype;
	};

	_pFileUpload.on_find_CurrentStyle_editgradation = function (pseudo) {
		var editgradation = this._find_pseudo_obj("editgradation", pseudo, "gradation");
		return editgradation;
	};

	_pFileUpload.on_find_CurrentStyle_editpadding = function (pseudo) {
		var editpadding = this._find_pseudo_obj("editpadding", pseudo, "padding");
		return editpadding;
	};

	_pFileUpload.on_find_CurrentStyle_editmargin = function (pseudo) {
		var editmargin = this._find_pseudo_obj("editmargin", pseudo, "margin");
		return editmargin;
	};

	_pFileUpload.on_find_CurrentStyle_editfont = function (pseudo) {
		var editfont = this._find_pseudo_obj("editfont", pseudo, "font");
		return editfont;
	};

	_pFileUpload.on_find_CurrentStyle_editcolor = function (pseudo) {
		var editcolor = this._find_pseudo_obj("editcolor", pseudo, "color");
		return editcolor;
	};

	_pFileUpload.on_find_CurrentStyle_buttonbackground = function (pseudo) {
		var buttonbackground = this._find_pseudo_obj("buttonbackground", pseudo, "background");
		return buttonbackground;
	};

	_pFileUpload.on_find_CurrentStyle_buttonborder = function (pseudo) {
		var buttonborder = this._find_pseudo_obj("buttonborder", pseudo, "border");
		return buttonborder;
	};

	_pFileUpload.on_find_CurrentStyle_buttonbordertype = function (pseudo) {
		var buttonbordertype = this._find_pseudo_obj("buttonbordertype", pseudo, "bordertype");
		return buttonbordertype;
	};

	_pFileUpload.on_find_CurrentStyle_buttongradation = function (pseudo) {
		var buttongradation = this._find_pseudo_obj("buttongradation", pseudo, "gradation");
		return buttongradation;
	};

	_pFileUpload.on_find_CurrentStyle_buttonpadding = function (pseudo) {
		var buttonpadding = this._find_pseudo_obj("buttonpadding", pseudo, "padding");
		return buttonpadding;
	};

	_pFileUpload.on_find_CurrentStyle_buttonmargin = function (pseudo) {
		var buttonmargin = this._find_pseudo_obj("buttonmargin", pseudo, "margin");
		return buttonmargin;
	};

	_pFileUpload.on_find_CurrentStyle_buttonfont = function (pseudo) {
		var buttonfont = this._find_pseudo_obj("buttonfont", pseudo, "font");
		return buttonfont;
	};

	_pFileUpload.on_find_CurrentStyle_buttoncolor = function (pseudo) {
		var buttoncolor = this._find_pseudo_obj("buttoncolor", pseudo, "color");
		return buttoncolor;
	};

	_pFileUpload.on_find_CurrentStyle_buttonsize = function (pseudo) {
		var buttonsize = this._find_pseudo_obj("buttonsize", pseudo);
		return buttonsize ? buttonsize : this._defaultButtonsize;
	};

	_pFileUpload.on_find_CurrentStyle_buttontext = function (pseudo) {
		var buttontext = this._find_pseudo_obj("buttontext", pseudo);
		return buttontext ? buttontext : this._defaultButtontext;
	};

	_pFileUpload.on_find_CurrentStyle_itemheight = function (pseudo) {
		var itemheight = this._find_pseudo_obj("itemheight", pseudo);
		return itemheight ? itemheight : this._defaultItemheight;
	};

	_pFileUpload.on_find_CurrentStyle_editaccessibility = function (pseudo) {
		return this._find_pseudo_obj("editaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};

	_pFileUpload.on_find_CurrentStyle_buttonaccessibility = function (pseudo) {
		return this._find_pseudo_obj("buttonaccessibility", pseudo, "accessibility") || nexacro.Component._default_accessibility;
	};


	_pFileUpload.on_update_style_editbackground = function () {
		var editbackground = this.currentstyle.editbackground = this.on_find_CurrentStyle_editbackground(this._pseudo);
		this.on_apply_style_editbackground(editbackground);
	};

	_pFileUpload.on_update_style_editborder = function () {
		var editborder = this.currentstyle.editborder = this.on_find_CurrentStyle_editborder(this._pseudo);
		this.on_apply_style_editborder(editborder);
	};

	_pFileUpload.on_update_style_editbordertype = function () {
		var editbordertype = this.currentstyle.editbordertype = this.on_find_CurrentStyle_editbordertype(this._pseudo);
		this.on_apply_style_editbordertype(editbordertype);
	};

	_pFileUpload.on_update_style_editgradation = function () {
		var editgradation = this.currentstyle.editgradation = this.on_find_CurrentStyle_editgradation(this._pseudo);
		this.on_apply_style_editgradation(editgradation);
	};

	_pFileUpload.on_update_style_editpadding = function () {
		var editpadding = this.currentstyle.editpadding = this.on_find_CurrentStyle_editpadding(this._pseudo);
		this.on_apply_style_editpadding(editpadding);
	};

	_pFileUpload.on_update_style_editmargin = function () {
		var editmargin = this.currentstyle.editmargin = this.on_find_CurrentStyle_editmargin(this._pseudo);
		this.on_apply_style_editmargin(editmargin);
	};

	_pFileUpload.on_update_style_editfont = function () {
		var editfont = this.currentstyle.editfont = this.on_find_CurrentStyle_editfont(this._pseudo);
		this.on_apply_style_editfont(editfont);
	};

	_pFileUpload.on_update_style_editcolor = function () {
		var editcolor = this.currentstyle.editcolor = this.on_find_CurrentStyle_editcolor(this._pseudo);
		this.on_apply_style_editcolor(editcolor);
	};

	_pFileUpload.on_update_style_buttonbackground = function () {
		var buttonbackground = this.currentstyle.buttonbackground = this.on_find_CurrentStyle_buttonbackground(this._pseudo);
		this.on_apply_style_buttonbackground(buttonbackground);
	};

	_pFileUpload.on_update_style_buttonborder = function () {
		var buttonborder = this.currentstyle.buttonborder = this.on_find_CurrentStyle_buttonborder(this._pseudo);
		this.on_apply_style_buttonborder(buttonborder);
	};

	_pFileUpload.on_update_style_buttonbordertype = function () {
		var buttonbordertype = this.currentstyle.buttonbordertype = this.on_find_CurrentStyle_buttonbordertype(this._pseudo);
		this.on_apply_style_buttonbordertype(buttonbordertype);
	};

	_pFileUpload.on_update_style_buttongradation = function () {
		var buttongradation = this.currentstyle.buttongradation = this.on_find_CurrentStyle_buttongradation(this._pseudo);
		this.on_apply_style_buttongradation(buttongradation);
	};

	_pFileUpload.on_update_style_buttonpadding = function () {
		var buttonpadding = this.currentstyle.buttonpadding = this.on_find_CurrentStyle_buttonpadding(this._pseudo);
		this.on_apply_style_buttonpadding(buttonpadding);
	};

	_pFileUpload.on_update_style_buttonmargin = function () {
		var buttonmargin = this.currentstyle.buttonmargin = this.on_find_CurrentStyle_buttonmargin(this._pseudo);
		this.on_apply_style_buttonmargin(buttonmargin);
	};

	_pFileUpload.on_update_style_buttonfont = function () {
		var buttonfont = this.currentstyle.buttonfont = this.on_find_CurrentStyle_buttonfont(this._pseudo);
		this.on_apply_style_buttonfont(buttonfont);
	};

	_pFileUpload.on_update_style_buttoncolor = function () {
		var buttoncolor = this.currentstyle.buttoncolor = this.on_find_CurrentStyle_buttoncolor(this._pseudo);
		this.on_apply_style_buttoncolor(buttoncolor);
	};

	_pFileUpload.on_update_style_buttonsize = function () {
		var buttonsize = this.currentstyle.buttonsize = this.on_find_CurrentStyle_buttonsize(this._pseudo);
		this.on_apply_style_buttonsize(buttonsize);
	};

	_pFileUpload.on_update_style_buttontext = function () {
		var buttontext = this.currentstyle.buttontext = this.on_find_CurrentStyle_buttontext(this._pseudo);
		this.on_apply_style_buttontext(buttontext);
	};

	_pFileUpload.on_update_style_itemheight = function () {
		var itemheight = this.currentstyle.itemheight = this.on_find_CurrentStyle_itemheight(this._pseudo);
		this.on_apply_style_itemheight(itemheight);
	};

	_pFileUpload.on_update_style_editaccessibility = function () {
		var editaccessibility = this.currentstyle.editaccessibility = this.on_find_CurrentStyle_editaccessibility(this._pseudo);
		this.on_apply_style_editaccessibility(editaccessibility);
	};

	_pFileUpload.on_update_style_buttonaccessibility = function () {
		var buttonaccessibility = this.currentstyle.buttonaccessibility = this.on_find_CurrentStyle_buttonaccessibility(this._pseudo);
		this.on_apply_style_buttonaccessibility(buttonaccessibility);
	};


	_pFileUpload.on_apply_style_padding = function (padding) {
		var items = this._items;
		var item_len = items.length;
		var item_width = this._client_width - padding.right;
		var item_height = this.on_find_CurrentStyle_itemheight(this._pseudo);

		for (var i = 0; i < item_len; i++) {
			items[i].move(padding.left, (itemheight * i + padding.top), item_width, (item_height * (i + 1) + padding.top), null, null);
		}
	};

	_pFileUpload.on_apply_style_cursor = function (cursor) {
		var control_elem = this._control_element;
		var items = this._items;
		var item_len = items.length;
		if (control_elem) {
			control_elem.setElementCursor(cursor);
			for (var i = 0; i < item_len; i++) {
				items[i].on_apply_style_cursor(cursor);
			}
		}
	};

	_pFileUpload.on_apply_style_editbackground = function (editbackground) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.currentstyle.background = editbackground;
				items[i].fileitemedit.on_apply_style_background(editbackground);
			}
		}
	};

	_pFileUpload.on_apply_style_editborder = function (editborder) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.currentstyle.border = editborder;
				items[i].fileitemedit.on_apply_style_border(editborder);
			}
		}
	};

	_pFileUpload.on_apply_style_editbordertype = function (editbordertype) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.currentstyle.bordertype = editbordertype;
				items[i].fileitemedit.on_apply_style_bordertype(editbordertype);
			}
		}
	};

	_pFileUpload.on_apply_style_editgradation = function (editgradation) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.currentstyle.gradation = editgradation;
				items[i].fileitemedit.on_apply_style_gradation(editgradation);
			}
		}
	};

	_pFileUpload.on_apply_style_editpadding = function (editpadding) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.currentstyle.padding = editpadding;
				items[i].fileitemedit.on_update_style_padding(editpadding);
			}
		}
	};

	_pFileUpload.on_apply_style_editmargin = function (editmargin) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.currentstyle.margin = editmargin;
				items[i].fileitemedit.on_apply_style_margin(editmargin);
			}
		}
	};

	_pFileUpload.on_apply_style_editfont = function (editfont) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.on_apply_style_font(editfont);
			}
		}
	};

	_pFileUpload.on_apply_style_editcolor = function (editcolor) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.on_apply_style_color(editcolor);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonbackground = function (buttonbackground) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.currentstyle.background = buttonbackground;
				items[i].fileitembutton.on_apply_style_background(buttonbackground);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonborder = function (buttonborder) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.currentstyle.border = buttonborder;
				items[i].fileitembutton.on_apply_style_border(buttonborder);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonbordertype = function (buttonbordertype) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.currentstyle.bordertype = buttonbordertype;
				items[i].fileitembutton.on_apply_style_bordertype(buttonbordertype);
			}
		}
	};

	_pFileUpload.on_apply_style_buttongradation = function (buttongradation) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.currentstyle.gradation = buttongradation;
				items[i].fileitembutton.on_apply_style_gradation(buttongradation);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonpadding = function (buttonpadding) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.currentstyle.padding = buttonpadding;
				items[i].fileitembutton.on_update_style_padding(buttonpadding);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonmargin = function (buttonmargin) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.currentstyle.margin = buttonmargin;
				items[i].fileitembutton.on_apply_style_margin(buttonmargin);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonfont = function (buttonfont) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.on_apply_style_font(buttonfont);
			}
		}
	};

	_pFileUpload.on_apply_style_buttoncolor = function (buttoncolor) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.on_apply_style_color(buttoncolor);
			}
		}
	};

	_pFileUpload.on_apply_style_buttonsize = function (buttonsize) {
		this.on_change_containerRect();
	};

	_pFileUpload.on_apply_style_buttontext = function (buttontext) {
		if (buttontext == null) {
			buttontext = this._defaultButtontext;
		}

		var items = this._items;
		var item_len = items.length;
		if (items == null) {
			return;
		}
		for (var i = 0; i < item_len; i++) {
			items[i].on_apply_style_buttontext(buttontext);
		}
	};

	_pFileUpload.on_apply_style_itemheight = function (itemheight) {
		this.on_change_containerRect();
		this.resetScroll();
	};

	_pFileUpload.on_apply_style_align = function (align) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitemedit) {
				items[i].fileitemedit.style.set_align(align);
			}
		}
	};

	_pFileUpload.on_apply_style_editaccessibility = function (editaccessibility) {
		var iLen = this._items.length;
		var item = null;
		var control_elem = null;

		if (editaccessibility) {
			for (var i = 0; i < iLen; i++) {
				item = this._getItem(i);
				if (item.fileitemedit) {
					item.fileitemedit.on_apply_style_accessibility(editaccessibility);
				}
			}
		}
	};

	_pFileUpload.on_apply_style_buttonaccessibility = function (buttonaccessibility) {
		var iLen = this._items.length;
		var item = null;

		if (buttonaccessibility) {
			for (var i = 0; i < iLen; i++) {
				item = this._getItem(i);
				if (item.fileitembutton) {
					item.fileitembutton.on_apply_style_accessibility(buttonaccessibility);
				}
			}
		}
	};

	_pFileUpload.on_apply_style_letterspace = function (letterspace) {
		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			if (items[i].fileitembutton) {
				items[i].fileitembutton.on_apply_style_letterspace(letterspace);
			}
			if (items[i].fileitemedit) {
				items[i].fileitemedit.on_apply_style_letterspace(letterspace);
			}
		}
	};

	_pFileUpload.on_apply_style_rtlimagemirroring = function (rtlimagemirroring) {
		return;
	};

	_pFileUpload.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var items = this._items;
			var itemcount = this.itemcount;
			for (var i = 0; i < itemcount; i++) {
				var item = this._createFileItem(i, 0, 0, 0, 0);
				this.filepathedits.add_item(item.id, item.fileitemedit);
				this.filefindbuttons.add_item(item.id, item.fileitembutton);
				items[i] = item;
			}
		}
	};

	_pFileUpload.on_created_contents = function () {
		var ranid = new Date().valueOf().toString();
		nexacro._create_hidden_frame(this._unique_id, ranid, this.on_load, this);
		ranid = null;
		this.on_apply_index();
		this.on_apply_innerdataset();
		this.on_apply_filecolumn();
		this.on_apply_prop_enable(this._isEnable());
		if (nexacro._enableaccessibility) {
			this.on_apply_style_editaccessibility(this.currentstyle.editaccessibility = this.on_find_CurrentStyle_editaccessibility(this._pseudo));
			this.on_apply_style_buttonaccessibility(this.currentstyle.buttonaccessibility = this.on_find_CurrentStyle_buttonaccessibility(this._pseudo));
		}

		var items = this._items;
		var itemcount = this.itemcount;
		for (var i = 0; i < itemcount; i++) {
			items[i].on_created();
			items[i]._setEventHandler("onfindclick", this.on_notify_onfindclick, this);
			items[i]._setEventHandler("onitemclick", this.on_notify_onitemclick, this);

			if (nexacro._enableaccessibility) {
				items[i]._setAccessibilityInfoIndex(i + 1);
				items[i]._setAccessibilityInfoCount(itemcount);
			}
		}
		;

		this._onRecalcScrollSize();
		this._onResetScrollBar();
		this._updateClientSize(this._control_element);
		this.on_apply_style_buttontext(this.currentstyle.buttontext);
		this.on_apply_style_letterspace(this.currentstyle.letterspace);
		this.on_change_containerRect();
		this.on_apply_prop_rtldirection();
	};

	_pFileUpload.on_destroy_contents = function () {
		var name = this.name;
		var items = this._items;
		var item_len = items.length;
		for (var i = 0; i < item_len; i++) {
			items[i].destroy();
		}
		this.filelist = null;
		this._items = null;

		this.filepathedits.clear();
		this.filepathedits = null;
		this.filefindbuttons.clear();
		this.filefindbuttons = null;

		if (this._is_created && this._unique_id) {
			nexacro._destroy_hidden_frame(this._unique_id, this, this._handle);
		}
	};

	_pFileUpload.on_change_containerRect = function (width, height) {
		var items = this._items;
		var item_len = items.length;

		if (item_len <= 0) {
			return;
		}

		var pseudo = this._pseudo;
		var client_width = this._client_width;
		var client_left = this._client_left;
		var client_top = this._client_top;
		var item_left, item_top;
		var itemheight = parseInt(this.on_find_CurrentStyle_itemheight(pseudo), 10);
		var buttonsize = parseInt(this.on_find_CurrentStyle_buttonsize(pseudo), 10);
		var padding = this.on_find_CurrentStyle_padding(pseudo);

		var draw_width = buttonsize + padding.left + padding.right;

		var item_width = client_width;

		if (draw_width > client_width) {
			item_left = client_left - padding.left;
		}
		else {
			item_left = client_left - padding.left;
		}

		for (var i = 0; i < item_len; i++) {
			item_top = itemheight * i;

			items[i].move(item_left, item_top, item_width, itemheight, null, null);
			items[i].on_apply_style_itemheight(itemheight);
			items[i].on_apply_style_buttonsize(buttonsize);
		}
	};

	_pFileUpload.resetScroll = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this._onRecalcScrollSize();
			this._updateClientSize(control_elem);
		}
	};

	_pFileUpload._onRecalcScrollSize = function (fromComp) {
		var control_elem = this.getElement();
		if (control_elem) {
			var pseudo = this._pseudo;

			var vscroll = this.vscrollbar;
			var hscroll = this.hscrollbar;

			var height = this.on_find_CurrentStyle_itemheight(pseudo);
			var border = this.on_find_CurrentStyle_border(pseudo);
			var padding = this.on_find_CurrentStyle_padding(pseudo);

			var scrollHeight = this.itemcount * height;
			var scrollWidth = this._client_width;
			if (scrollHeight > this._client_height) {
				if (vscroll) {
					scrollWidth -= vscroll._adjust_width;
				}
				else {
					scrollWidth -= nexacro.Component.SCROLLBAR_DEFAULT_SIZE;
				}
			}

			control_elem.setElementScrollMaxSize(scrollWidth, scrollHeight);
		}
	};

	_pFileUpload.on_hscroll = function (obj, e) {
		if (this.onhscroll && this.onhscroll._has_handlers) {
			e.fromobject = this;
			this.onhscroll._fireEvent(this, e);
		}
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementHScrollPos(e.pos);
		}
		return true;
	};

	_pFileUpload.on_vscroll = function (obj, e) {
		if (this.onvscroll && this.onvscroll._has_handlers) {
			e.fromobject = this;
			this.onvscroll._fireEvent(this, e);
		}
		var control_elem = this._control_element;
		if (control_elem) {
			control_elem.setElementVScrollPos(e.pos);
		}
		return true;
	};

	_pFileUpload.set_multiselect = function (v) {
		if (v != this.multiselect) {
			this.multiselect = v;
			v = nexacro._toBoolean(v);
			if (v != this._multiselect) {
				this._multiselect = v;
				this.on_apply_multiselect(v);
			}
		}
	};

	if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 10) {
		_pFileUpload.on_apply_multiselect = nexacro._emptyFn;
	}
	else {
		_pFileUpload.on_apply_multiselect = function () {
			var control_elem = this.getElement();
			if (control_elem) {
				var items = this._items;
				var item_len = items.length;
				var multi_select = this._multiselect;
				var comp_name = this._unique_id;
				var handle = this._handle;

				for (var i = 0; i < item_len; i++) {
					nexacro._setMultipleFile(comp_name, items[i].name, multi_select, items[i]);
				}
			}
		};
	}

	_pFileUpload.set_uploadurl = function (v) {
		if (v != this.uploadurl) {
			this.uploadurl = v;
		}
	};

	_pFileUpload.set_itemcount = function (v) {
		var val = parseInt(v) | 0;

		if (val != this.itemcount) {
			this._old_itemcount = this.itemcount;
			this.itemcount = val;
			this.on_apply_itemcount();
		}
	};

	_pFileUpload.on_apply_itemcount = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var pseudo = this._pseudo;
			var old_itemcnt = this._old_itemcount;
			var itemcnt = this.itemcount;
			var items = this._items;
			var item_len = items.length;
			var client_left = this._client_left;
			var client_top = this._client_top;
			var client_width = this._client_width;
			var itemheight = parseInt(this.on_find_CurrentStyle_itemheight(pseudo), 10);
			var buttonsize = parseInt(this.on_find_CurrentStyle_buttonsize(pseudo), 10);
			var buttontext = this.on_find_CurrentStyle_buttontext(pseudo);

			while (item_len && old_itemcnt > itemcnt) {
				old_itemcnt--;
				items.pop().destroy();
			}

			for (var i = item_len; i < itemcnt; i++) {
				var item_left = client_left;
				var item_top = client_top + (itemheight * i);
				var item_width = client_width;

				var item = this._createFileItem(i, item_left, item_top, item_width, itemheight);
				this.filepathedits.add_item(item.id, item.fileitemedit);
				this.filefindbuttons.add_item(item.id, item.fileitembutton);
				this._items[i] = item;
			}
			this.on_change_containerRect();
			this.on_apply_style_buttontext(buttontext);
			this.resetScroll();
		}
	};

	_pFileUpload.set_itemheight = function (v) {
		var val = parseInt(v) | 0;

		if (val != this.itemheight) {
			this.itemheight = val;
			this.on_apply_itemheight(val);
		}
	};

	_pFileUpload.on_apply_itemheight = function (itemheight) {
		var control_elem = this.getElement();
		if (control_elem) {
			this.style.set_itemheight(itemheight);
		}
	};

	_pFileUpload.set_timeout = function (v) {
		if (v != this.timeout) {
			this.timeout = v;
		}
	};

	_pFileUpload.set_retry = function (v) {
		if (v != this.retry) {
			this.retry = v;
		}
	};

	_pFileUpload.set_async = function (v) {
		if (v != this.async) {
			this.async = v;
		}
	};

	_pFileUpload.set_index = function (v) {
		if (v != this.index) {
			this.index = v;
			this.on_apply_index(v);
			this._setAccessibilityStatSelected(v);
		}
		;
	};

	_pFileUpload.on_apply_index = function (index) {
		var control_elem = this.getElement();
		if (control_elem) {
			var item = this._items[index];
			if (item) {
				if (this._editFlag) {
					item.fileitemedit.setFocus(false);
				}

				if (this._buttonFlag) {
					item.fileitembutton.setFocus(false);
				}

				this._setText(item.value);
				this._setValue(item.value);
			}
		}
	};

	_pFileUpload.set_text = function (v) {
	};

	_pFileUpload._setText = function (v) {
		if (v != this.text) {
			this.text = v;
		}
		return this.text;
	};

	_pFileUpload.on_apply_text = function (text) {
	};

	_pFileUpload.set_value = function (v) {
	};

	_pFileUpload._setValue = function (v) {
		if (v != this.value) {
			this.value = v;
		}
	};
	_pFileUpload.on_apply_value = function (value) {
	};

	_pFileUpload.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
		}
	};

	_pFileUpload._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = this._findDataset(str);
			this.innerdataset = str;
		}
	};

	_pFileUpload.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pFileUpload.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = this._findDataset(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
		return this.innerdataset;
	};

	_pFileUpload.on_apply_innerdataset = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this.on_apply_filecolumn();
		}
	};

	_pFileUpload.set_filecolumn = function (v) {
		if (v != this.filecolumn) {
			this.filecolumn = v;
			this.on_apply_filecolumn(v);
		}
	};

	_pFileUpload.on_apply_filecolumn = function (filecolumn) {
		var control_elem = this.getElement();
		if (control_elem && this._innerdataset) {
			var items = this._items;
			for (var i = 0, n = items.length; i < n; i++) {
				var filecolumn = this._innerdataset.getColumn(i, filecolumn);
				if (filecolumn) {
					items[i].set_value(filecolumn);
					filecolumn = 0;
				}
			}
		}
	};

	_pFileUpload.on_apply_prop_rtldirection = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var items = this._items;
			for (var i = 0; i < items.length; i++) {
				items[i]._setRtlDirection(this._rtldirection);
			}
			if (this.vscrollbar) {
				this.vscrollbar._setRtlDirection(this._rtldirection);
			}
			if (this.hscrollbar) {
				this.hscrollbar._setRtlDirection(this._rtldirection);
			}
		}
	};

	_pFileUpload.set_filedialogpath = function (v) {
		this.filedialogpath = v;
	};

	_pFileUpload.set_openedpath = function (v) {
	};

	_pFileUpload.set_filefilter = function (v) {
		this.filefilter = v;
	};

	_pFileUpload.set_filefilterindex = function (v) {
		this.filefilterindex = v;
	};

	_pFileUpload.upload = function (v, iscors) {
		this._iscors = iscors;
		var ret = false;
		var uploadurl;

		if (v == undefined) {
			if (this.uploadurl) {
				uploadurl = nexacro._getServiceLocation(this.uploadurl);
			}
		}
		else {
			uploadurl = nexacro._getServiceLocation(v);
		}

		if (uploadurl) {
			var items = this._items;
			var fileinfo = [];
			if (nexacro.Browser == "Runtime" && nexacro.OS != "Android") {
				var len = items.length;
				var idx = 0;
				for (var i = 0; i < len; i++) {
					if (items[i]._files) {
						fileinfo[idx] = items[i]._files;
						idx++;
					}
				}
			}
			else if (nexacro.Browser == "Runtime" && nexacro.OS == "Android") {
				var items = this._items;
				var len = items.length;
				var mergeData = "";

				for (var i = 0; i < len; i++) {
					if (items[i].value) {
						ret = true;
						mergeData += items[i].value;
						if (i != len - 1) {
							mergeData += ",";
						}
					}
				}
				nexacro._submit(this._unique_id, uploadurl, this._handle, null, mergeData);

				return ret;
			}
			var len = items ? items.length : 0;
			for (var i = 0; i < len; i++) {
				if (items[i] && items[i].value) {
					if (nexacro.Browser == "MobileSafari" || nexacro.Browser == "Gecko") {
						nexacro._request_submit(this._unique_id, uploadurl, this, items[i].value);
					}
					else {
						nexacro._submit(this._unique_id, uploadurl, this._handle, null, items[i].value, fileinfo);
					}
					return true;
				}
			}
		}
		return ret;
	};

	_pFileUpload.appendItem = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var pseudo = this._pseudo;
			var itemcount = this.itemcount;
			var client_left = this._client_left;
			var client_top = this._client_top;
			var client_width = this._client_width;
			var itemheight = parseInt(this.on_find_CurrentStyle_itemheight(pseudo), 10);
			var buttonsize = parseInt(this.on_find_CurrentStyle_buttonsize(pseudo), 10);
			var buttontext = this.on_find_CurrentStyle_buttontext(pseudo);
			var padding = this.on_find_CurrentStyle_padding(pseudo);

			var item_left = client_left + padding.left;
			var item_top = client_top + (itemheight * itemcount) + padding.top;
			var item_width = client_width - padding.right;

			var id = itemcount;
			var item = this._createFileItem(id, item_left, item_top, item_width, itemheight);
			this.filepathedits.add_item(item.id, item.fileitemedit);
			this.filefindbuttons.add_item(item.id, item.fileitembutton);

			this._items[id] = item;
			this.itemcount++;
			if (nexacro._enableaccessibility) {
				item._setAccessibilityInfoIndex(id);
				item._setAccessibilityInfoCount(id + 1);
			}

			this.on_change_containerRect();
			this.on_apply_style_buttontext(buttontext);
			this.resetScroll();

			this.on_fire_onappenditem(this, id);
		}
	};

	_pFileUpload.deleteItem = function (idx) {
		var cur_index = this.index;
		var control_elem = this.getElement();
		if (control_elem) {
			idx = parseInt(idx, 10);
			var items = this._items;

			if (this.itemcount <= idx) {
				return;
			}

			var iCount = this.itemcount;
			var iCnt = iCount - 1;
			for (var i = idx + 1; i < iCount; i++) {
				if (cur_index == i) {
					this.index--;
				}
				items[i].index--;

				if (nexacro._enableaccessibility) {
					items[i]._setAccessibilityInfoIndex(i);
					items[i]._setAccessibilityInfoCount(iCnt);
				}
			}

			items[idx].destroy();
			this._upadteFileList();
			items.splice(idx, 1);
			if (cur_index == idx) {
				this.index = -1;
				this._setText(undefined);
				this._setValue(undefined);
			}

			this.itemcount--;

			this.on_change_containerRect();
			this.resetScroll();
			this.on_fire_ondeleteitem(this, idx);
		}
	};

	_pFileUpload.changeItem = function (idx, newvalue) {
		if (nexacro.Browser == "Runtime" && nexacro.OS != "Android") {
			var control_elem = this.getElement();
			if (control_elem) {
				idx = parseInt(idx, 10);

				if (this.itemcount <= idx) {
					return;
				}

				var item = this._items[idx];

				var value = "";
				var fLen = newvalue.length;
				if (fLen > 0) {
					value = newvalue[0];
					for (var j = 1; j < fLen; j++) {
						value += ", " + newvalue[j];
					}
				}

				if (value != item.value) {
					item.oldvalue = item.value;
					item.value = value;
					item._changeFiles(newvalue);
					item.on_apply_value(value);
					if (this.index == idx) {
						item.parent._setText(value);
						item.parent._setValue(value);
					}

					item.parent.on_fire_onitemchanged(item, idx, item.oldvalue, item.value, newvalue);
				}
			}
		}
	};

	_pFileUpload.getItemCount = function (isValue) {
		var elem = this.getElement();
		if (elem) {
			isValue = nexacro._toBoolean(isValue);

			var cnt = 0;
			var idx = 0;
			var itemval_check;
			var items = this._items;
			var item_len = items.length;

			while (idx < item_len) {
				if (isValue == true) {
					if (items[idx].value) {
						cnt++;
					}
				}
				else {
					return item_len;
				}
				++idx;
			}
			return cnt;
		}
	};

	_pFileUpload.getItemIndex = function (obj) {
		var elem = this.getElement();
		if (elem) {
			if (typeof obj == "object") {
				var idx = 0;
				var items = this._items;
				while (idx < items.length) {
					if (obj == items[idx].fileitembutton) {
						return idx;
					}
					if (obj == items[idx].fileitemedit) {
						return idx;
					}
					++idx;
				}
				return -1;
			}
		}
	};

	_pFileUpload._getItem = function (index) {
		if (index >= 0 && this._items.length > 0) {
			return this._items[index];
		}

		return null;
	};

	_pFileUpload.hasValue = function (nIndex) {
		var elem = this.getElement();
		if (elem) {
			var idx = 0;
			var items = this._items;
			if (nIndex == -1) {
				while (idx < items.length) {
					if (items[idx].value) {
						++cnt;
					}
					++idx;
				}
				if (cnt == items.length) {
					return true;
				}
				return false;
			}

			if (nIndex < items.length && items[nIndex].value) {
				return true;
			}
			return false;
		}
	};

	_pFileUpload.getValue = function (idx) {
		var elem = this.getElement();
		if (elem) {
			var items = this._items;
			if (items && idx >= 0 && idx < items.length) {
				return items[idx].value;
			}
			return "";
		}
	};

	_pFileUpload.on_notify_onfindclick = function (obj, e) {
		var bHandled = false;
		var index = nexacro._indexOf(this._items, obj);

		if (this._isEnable() && this.enableevent) {
			bHandled = this.on_fire_onfindclick(obj, index);

			if (bHandled) {
				if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
					var evttarget = obj;
					var callbackFn = function (value) {
						var fullPath = value.virtualfiles[0].fullpath;
						evttarget._changeFiles(value);
						evttarget.on_fileinput_onchange(fullPath);
					};
					evttarget._on_itemedit_onchange = callbackFn;

					var params = '""';
					var jsonstr = '{"id":' + evttarget._id + ', "div":"FileUpload", "method":"find", "params":' + params + '}';
					nexacro.Device.exec(jsonstr);
				}
				else {
					try {
						nexacro._findclick(this._unique_id, obj.name, obj, this._handle, this.filedialogpath, this.filefilter, this.filefilterindex);
					}
					catch (e) {
						var errorobj = nexacro.MakeError("ObjectError", this, "comp_incorrect_file");
						this.on_fire_onerror(this, errorobj.name, errorobj.message, obj, null, null, null, index);
					}
				}
			}
		}
		return bHandled;
	};

	_pFileUpload.on_notify_onitemclick = function (obj, e) {
		if (this.visible && this._isEnable() && this.enableevent) {
			this.on_fire_onitemclick(obj, obj.index);
		}
	};

	_pFileUpload._on_getAccessibilityAdditionalLabel = function () {
		if (this._first_focus == false) {
			var count = 0;
			var items = this._items;
			if (items) {
				count = items.length;
			}
			return (+this.index) + 1 + " " + count;
		}
		return "";
	};

	_pFileUpload._isAccessibilityEnable = function () {
		return true;
	};

	_pFileUpload.on_get_style_accessibility_label = function () {
		var label = "";
		return label;
	};


	_pFileUpload.on_fire_sys_onaccessibilitygesture = function (direction, fire_comp, refer_comp) {
		var idx = this.index;
		var items = this._items;

		while (true) {
			if (direction) {
				if (!this._buttonFlag && items[idx].fileitembutton._isAccessibilityEnable()) {
					this._editFlag = false;
					this._buttonFlag = true;
				}
				else {
					if (items[++idx]) {
						this._editFlag = true;
						this._buttonFlag = false;

						if (!items[idx].fileitemedit._isAccessibilityEnable()) {
							continue;
						}
					}
					else {
						this._editFlag = false;
						this._buttonFlag = false;
						return this._want_arrow = false;
					}
				}
			}
			else {
				if (!this._editFlag && items[idx].fileitemedit._isAccessibilityEnable()) {
					this._editFlag = true;
					this._buttonFlag = false;
				}
				else {
					if (items[--idx]) {
						this._editFlag = false;
						this._buttonFlag = true;
						if (!items[idx].fileitembutton._isAccessibilityEnable()) {
							continue;
						}
					}
					else {
						this._editFlag = false;
						this._buttonFlag = false;
						return this._want_arrow = false;
					}
				}
			}
			break;
		}

		if (items[idx]) {
			if (this._editFlag) {
				items[idx].fileitemedit._setAccessibilityNotifyEvent();
			}
			else if (this._buttonFlag) {
				items[idx].fileitembutton._setAccessibilityNotifyEvent();
			}

			this.index = idx;
			this.value = items[idx].value;
			return this._want_arrow = true;
		}
		else {
			return this._want_arrow = false;
		}
	};

	_pFileUpload._setAccessibilityNotifyEvent = function (direction) {
		this._editFlag = false;
		this._buttonFlag = false;

		var idx = 0;
		var items = this._items;
		var itemLen = items.length;
		if (itemLen) {
			if (direction) {
				idx = 0;
				if (items[idx] && items[idx].fileitemedit._isAccessibilityEnable()) {
					this._editFlag = true;
				}
				else if (items[idx] && items[idx].fileitembutton._isAccessibilityEnable()) {
					this._buttonFlag = true;
				}
			}
			else {
				idx = itemLen - 1;
				if (items[idx] && items[idx].fileitembutton._isAccessibilityEnable()) {
					this._buttonFlag = true;
				}
				else if (items[idx] && items[idx].fileitemedit._isAccessibilityEnable()) {
					this._editFlag = true;
				}
			}

			if (this._buttonFlag || this._editFlag) {
				if (this._editFlag) {
					items[idx].fileitemedit._setAccessibilityNotifyEvent();
				}
				else if (this._buttonFlag) {
					items[idx].fileitembutton._setAccessibilityNotifyEvent();
				}

				this.index = idx;
				this.value = items[idx].value;
				return this._want_arrow = true;
			}
		}

		this._want_arrow = false;
		return nexacro.Component.prototype._setAccessibilityNotifyEvent.call(this, direction);
	};

	_pFileUpload._setAccessibilityInfoByHover = function (control) {
		if (control) {
			this._editFlag = false;
			this._buttonFlag = false;

			var item = control.parent;
			if (control instanceof nexacro.FileItemEditCtrl) {
				this._editFlag = true;
			}
			else if (control instanceof nexacro.FileItemButtonCtrl) {
				this._buttonFlag = true;
			}

			this.index = item.index;
			this._want_arrow = true;
			control._setAccessibilityNotifyEvent();

			return true;
		}

		return false;
	};

	_pFileUpload.on_fire_onerror = function (obj, errortype, errormsg, errorobj, statuscode, requesturi, locationuri, index) {
		if (this.onerror && this.onerror._has_handlers) {
			var evt = new nexacro.FileUploadErrorEventInfo(obj, "onerror", errortype, errormsg, errorobj, statuscode, requesturi, locationuri, index);
			return this.onerror._fireEvent(this, evt);
		}
		return true;
	};

	_pFileUpload.on_fire_user_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this.onlbuttondown && this.onlbuttondown._has_handlers) {
			var evt = new nexacro.FileUploadMouseEventInfo(this, "onlbuttondown", button, alt_key, ctrl_key, shift_key, meta_key, this.index, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttondown._fireEvent(this, evt);
		}
		return false;
	};

	_pFileUpload.on_fire_user_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, from_elem) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var evt = new nexacro.FileUploadMouseEventInfo(this, "onlbuttonup", button, alt_key, ctrl_key, shift_key, meta_key, this.index, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);
			return this.onlbuttonup._fireUserEvent(this, evt);
		}
		return false;
	};

	_pFileUpload.on_fire_onfindclick = function (obj, index) {
		var bCheck = true;

		if (this.onfindclick && this.onfindclick._has_handlers) {
			var evt = new nexacro.FileUploadItemEventInfo(this, "onfindclick", index);
			bCheck = this.onfindclick._fireCheckEvent(this, evt);
		}

		return bCheck;
	};

	_pFileUpload.on_fire_onitemclick = function (obj, index) {
		if (this.onitemclick && this.onitemclick._has_handlers) {
			var evt = new nexacro.FileUploadItemEventInfo(this, "onitemclick", index);
			this.onitemclick._fireEvent(this, evt);
		}
	};

	_pFileUpload.on_fire_onappenditem = function (obj, index) {
		if (this.onappenditem && this.onappenditem._has_handlers) {
			var evt = new nexacro.FileUploadItemEventInfo(obj, "onappenditem", index);
			this.onappenditem._fireEvent(this, evt);
		}
	};

	_pFileUpload.on_fire_ondeleteitem = function (obj, index) {
		if (this.ondeleteitem && this.ondeleteitem._has_handlers) {
			var evt = new nexacro.FileUploadItemEventInfo(obj, "ondeleteitem", index);
			this.ondeleteitem._fireEvent(this, evt);
		}
	};

	_pFileUpload.on_fire_onitemchanged = function (obj, index, oldvalue, newvalue, value2) {
		if (this.onitemchanged && this.onitemchanged._has_handlers) {
			var evt = new nexacro.FileUploadItemChangeEventInfo(obj, "onitemchanged", index, oldvalue, newvalue, value2);
			return this.onitemchanged._fireEvent(this, evt);
		}
	};

	_pFileUpload.on_fire_onsuccess = function (ds, code, msg, url) {
		application._endCommProgress();

		if (this.onsuccess && this.onsuccess._has_handlers) {
			var evt = new nexacro.FileUploadLoadEventInfo(this, "onsuccess", ds, code, msg, url);
			return this.onsuccess._fireEvent(this, evt);
		}
	};

	_pFileUpload._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var want_tab = this._want_tab;
		this._want_tab = true;
		return {
			want_tab : want_tab, 
			want_return : true, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : this._want_arrow
		};
	};

	_pFileUpload.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var items = this._items;
		var tab_flag = false;
		var idx = this.index;
		var E = nexacro.Event;

		if (keycode == E.KEY_TAB) {
			if ((shift_key && idx == 0) || (!shift_key && idx == items.length - 1)) {
				this._want_tab = false;
				this.set_index(-1);
			}
			else {
				if (shift_key) {
					idx--;
				}
				else {
					idx++;
				}
				this.set_index(idx);
			}
			this._getWindow()._keydown_element._event_stop = true;
		}
		else {
			if (nexacro._enableaccessibility) {
				var focus_up = keycode == E.KEY_UP && ctrl_key;
				var focus_down = keycode == E.KEY_DOWN && ctrl_key;

				if (items[idx]) {
					this._find_item_pseudo(items[idx]);
				}

				var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
				if (idx < 0) {
					editaccessibility = this.on_find_CurrentStyle_editaccessibility(items[0].fileitemedit._pseudo);
					buttonaccessibility = this.on_find_CurrentStyle_buttonaccessibility(items[0].fileitembutton._pseudo);
				}
				else {
					editaccessibility = this.on_find_CurrentStyle_editaccessibility(items[idx].fileitemedit._pseudo);
					buttonaccessibility = this.on_find_CurrentStyle_buttonaccessibility(items[idx].fileitembutton._pseudo);
				}

				if (focus_up || focus_down) {
					var _window = this._getWindow();
					if ((focus_up && idx < 0) || (focus_down && this._buttonFlag && idx == items.length - 1)) {
						this._want_arrow = false;
					}
					else {
						while ((editaccessibility && editaccessibility.enable) || (buttonaccessibility && buttonaccessibility.enable)) {
							if (focus_up) {
								if (!this._editFlag && editaccessibility && editaccessibility.enable) {
									this.index = -1;
									this._editFlag = true;
									this._buttonFlag = false;
								}
								else {
									idx--;
									if (buttonaccessibility && buttonaccessibility.enable) {
										if (idx < 0 && accessibility && accessibility.enable) {
											this._editFlag = false;
											this._buttonFlag = false;
											_window._removeFromCurrentFocusPath(this, false);
											this._setFocus(false);
										}
										else {
											this.index = -1;
											this._editFlag = false;
											this._buttonFlag = true;
										}
									}
									else {
										if (idx > 0) {
											this._buttonFlag = false;
											continue;
										}
										else {
											this._want_arrow = false;
											if (accessibility && accessibility.enable) {
												this._editFlag = false;
												this._buttonFlag = false;
												_window._removeFromCurrentFocusPath(this, false);
												this._setFocus(false);
											}
										}
									}
								}
							}
							else if (focus_down) {
								if (!this._editFlag && editaccessibility && editaccessibility.enable) {
									idx++;
									this._editFlag = true;
									this._buttonFlag = false;
								}
								else {
									if (buttonaccessibility && buttonaccessibility.enable) {
										this.index = -1;
										this._editFlag = false;
										this._buttonFlag = true;
									}
									else {
										if (idx < items.length - 1) {
											this._editFlag = false;
											continue;
										}
										else {
											this._want_arrow = false;
											break;
										}
									}
								}
							}
							this.set_index(idx);
							this._want_arrow = true;
							this._getWindow()._keydown_element._event_stop = true;
							break;
						}
					}
				}
				else {
					this._want_arrow = false;
				}
			}
		}
		return nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pFileUpload._find_item_pseudo = function (item) {
		this._editFlag = (item.fileitemedit._pseudo == "focused");
		this._buttonFlag = (item.fileitembutton._pseudo == "focused");
	};



	_pFileUpload._on_focus = function (self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus) {
		nexacro.Component.prototype._on_focus.call(this, self_flag, evt_name, lose_focus, refer_lose_focus, new_focus, refer_new_focus);

		var items = this._items;
		var itemLen = items.length;
		if (itemLen) {
			var focus_dir = null;
			var idx = 0;

			this._want_tab = true;
			focus_dir = evt_name == "shifttabkey";
			if (evt_name == "shifttabkey" || evt_name == "tabkey") {
				this._editFlag = false;
				this._buttonFlag = true;
				if (focus_dir) {
					idx = this.index < 0 ? itemLen - 1 : this.index;
				}
				else {
					idx = this.index < 0 ? 0 : this.index;
					this._first_focus = true;
				}
				this.index = -1;
				this.set_index(idx);
			}
			else if (nexacro._enableaccessibility) {
				focus_dir = evt_name == "upkey";
				this._editFlag = false;
				this._buttonFlag = false;
				this._want_arrow = true;

				var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
				var editaccessibility = this.on_find_CurrentStyle_editaccessibility(this._pseudo);
				var buttonaccessibility = this.on_find_CurrentStyle_buttonaccessibility(this._pseudo);

				if (focus_dir) {
					this.index = -1;
					idx = itemLen - 1;
					if (buttonaccessibility && buttonaccessibility.enable) {
						this._buttonFlag = true;
					}
					else if (editaccessibility && editaccessibility.enable) {
						this._editFlag = true;
					}
				}
				else {
					idx = -1;
					if (accessibility && accessibility.enable == false) {
						idx = 0;
						this.index = -1;
						if (editaccessibility && editaccessibility.enable) {
							this._editFlag = true;
						}
						else if (buttonaccessibility && buttonaccessibility.enable) {
							this._buttonFlag = true;
						}
						this._first_focus = (this._editFlag || this._buttonFlag) ? true : false;
					}
				}
				this.set_index(idx);
			}

			if (nexacro._enableaccessibility) {
				this._first_focus = false;
			}
		}
	};

	_pFileUpload.on_apply_custom_setfocus = function (evt_name) {
		var enableaccessibility = nexacro._enableaccessibility;
		var selffocus = ((evt_name == "lbutton") ? false : enableaccessibility);
		var items = this._items;
		if (items.length < -1 || enableaccessibility) {
			var control_elem = this._control_element;
			if (control_elem) {
				control_elem.setElementFocus(selffocus);
			}
		}
		else {
			var item = items[this.index];
			if (item) {
				item.fileitembutton._control_element.setElementFocus(selffocus);
			}
		}
	};

	_pFileUpload._setParamter = nexacro._emptyFn;
	_pFileUpload._getDataset = nexacro._emptyFn;

	if (nexacro.Browser == "Runtime") {
		_pFileUpload._addCookieToGlobalVariable = function (cookieStr) {
			if (application && cookieStr) {
				var cookielist = cookieStr.split("; ");
				var cookievarCnt = cookielist.length;
				var sep_pos;
				var cookie_id, cookie_value;
				for (var i = 0; i < cookievarCnt; i++) {
					sep_pos = cookielist[i].indexOf("=");
					if (sep_pos <= 0) {
						continue;
					}

					cookie_id = cookielist[i].substr(0, sep_pos);
					cookie_value = cookielist[i].substr(sep_pos + 1);

					if (nexacro._indexOf(application._cookie_variables, cookie_id) >= 0 || nexacro._indexOf(application._secure_cookie_variables, cookie_id) >= 0) {
						application[cookie_id] = cookie_value;
					}
					else {
						if (application.addcookietovariable && (nexacro._indexOf(application._variables, cookie_id) < 0)) {
							application._addVariable(cookie_id, cookie_value, true);
						}
					}
				}
			}
		};

		_pFileUpload.on_load = function (status, data, url, errcode, httpcode, errmsg, cookies) {
			if (cookies) {
				this._addCookieToGlobalVariable(cookies);
			}

			var result, fstr, code = -1, msg = "fail to get", xmldoc = nexacro._getXMLDocument(this._unique_id, data, url);
			if (status < 0) {
				application._onHttpSystemError(this, true, this, errcode, url, httpcode, url, null);
				errmsg = nexacro._GetSystemErrorMsg(this, errcode);
				this.on_fire_onerror(this, "ObjectError", errmsg, this, httpcode, null, null, -1);
			}
			else {
				if (data) {
					fstr = data.substring(0, 3);
					if (fstr != "SSV") {
						fstr = "XML";
					}

					if (fstr == "XML") {
						result = nexacro.Deserializer["XML"](xmldoc);
					}
					else {
						result = nexacro.Deserializer["SSV"](data);
					}

					var error_info = result[0];
					if (error_info) {
						code = error_info["ErrorCode"];
						msg = error_info["ErrorMsg"];
					}

					if (code < 0) {
						this.on_fire_onerror(this, "ObjectError", msg, this, 9901, null, null, -1);
					}
					else {
						this.on_fire_onsuccess(result[1], code, msg, url);
					}
				}
				else {
				}
			}
		};
	}
	else {
		_pFileUpload._bindUploadDataHandler = function (e) {
			var pthis = this._comp, status = this.status, readystate = this.readyState;
			if (readystate == 4) {
				if (status == 200) {
					var result = null;
					var data = this.responseText.trim();
					var date_type = data.substring(0, 3);

					if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
						if (date_type == "SSV") {
							result = nexacro.Deserializer[date_type](data);
						}
						else {
							var response = nexacro._parseXMLDocument(data);
							result = nexacro.Deserializer["XML"](response);
						}
					}
					else {
						if (date_type != "SSV") {
							data = this.responseXML;
							date_type = nexacro._getContentType(data);
						}

						if (nexacro.Deserializer[date_type]) {
							result = nexacro.Deserializer[date_type](data);
						}
					}

					if (result) {
						pthis.on_fire_onsuccess(result[1], result[0]["ErrorCode"], result[0]["ErrorMsg"], this.responseURL);
					}
					else {
						pthis.on_fire_onerror(pthis, "ObjectError", "failed to get", pthis, 9901, null, null, -1);
					}
				}
				else {
					pthis.on_fire_onerror(pthis, "ObjectError", "failed to get", pthis, 9901, null, null, -1);
				}
			}
		};

		_pFileUpload.on_load = function () {
			var result, fstr, url, code = -1, msg = "", data = "";
			try {
				if (nexacro._isCors(this._iscors)) {
					nexacro._setPostMessage(this._unique_id, this._control_element);
					this._iscors = false;
				}
				else {
					var xmldoc = nexacro._getXMLDocument(this._unique_id, this._iscors);
					url = xmldoc.URL ? xmldoc.URL : xmldoc.url;
					if (url == "about:blank") {
						return;
					}

					this.context = this.parent;
					if (nexacro._getContentType(xmldoc) == "XML") {
						fstr = "XML";
					}
					else {
						data = nexacro._getDataFromDOM(xmldoc, this);
						data = data.trim();
						fstr = data.substring(0, 3);
					}

					if (fstr == "XML") {
						result = nexacro.Deserializer["XML"](xmldoc);
					}
					else if (fstr == "SSV") {
						result = nexacro.Deserializer["SSV"](data);
					}

					if (result) {
						var error_info = result[0];
						if (error_info["ErrorCode"] != null) {
							code = error_info["ErrorCode"];
						}
						if (error_info["ErrorMsg"] != null) {
							msg = error_info["ErrorMsg"];
						}
					}
					else {
						msg = data;
					}

					if (code < 0) {
						this.on_fire_onerror(this, "ObjectError", "failed to get", this, 9901, null, null, -1);
					}
					else {
						this.on_fire_onsuccess(result[1], code, msg, url);
					}
					delete this.context;
				}
			}
			catch (e) {
				this.on_fire_onerror(this, "ObjectError", "failed to get", this, 9901, null, null, -1);
			}
		};

		_pFileUpload.on_after_load = function (xmlstr) {
			var result, fstr, url, code = -1, msg = "", data = "";
			try {
				var xmldoc = nexacro._parseXMLDocument(decodeURIComponent(xmlstr.replace(/\+/g, " ")));

				url = xmldoc.URL ? xmldoc.URL : xmldoc.url;
				if (url == "about:blank") {
					return;
				}

				this.context = this.parent;
				if (nexacro._getContentType(xmldoc) == "XML") {
					fstr = "XML";
				}
				else {
					data = nexacro._getDataFromDOM(xmldoc, this);
					data = data.trim();
					fstr = data.substring(0, 3);
				}

				if (fstr == "XML") {
					result = nexacro.Deserializer["XML"](xmldoc);
				}
				else if (fstr == "SSV") {
					result = nexacro.Deserializer["SSV"](data);
				}

				if (result) {
					var error_info = result[0];
					if (error_info["ErrorCode"] != null) {
						code = error_info["ErrorCode"];
					}
					if (error_info["ErrorMsg"] != null) {
						msg = error_info["ErrorMsg"];
					}
				}
				else {
					msg = data;
				}

				if (code < 0) {
					this.on_fire_onerror(this, "ObjectError", "failed to get", this, 9901, null, null, -1);
				}
				else {
					this.on_fire_onsuccess(result[1], code, msg, url);
				}
				delete this.context;
			}
			catch (e) {
				this.on_fire_onerror(this, "ObjectError", "failed to get", this, 9901, null, null, -1);
			}
		};
	}

	_pFileUpload._createFileItem = function (id, left, top, width, height) {
		var unique = this.itemcount < 1 ? this._last_id = 0 : ++this._last_id;
		var name = "upfile" + unique;
		var item = new nexacro.FileItemCtrl(name, "absolute", left, top, width, height, null, null, this);

		item.index = id;
		item.set_name(name);

		item.createComponent();
		item.on_created();

		item._setEventHandler("onfindclick", this.on_notify_onfindclick, this);
		item._setEventHandler("onitemclick", this.on_notify_onitemclick, this);

		return item;
	};

	_pFileUpload.on_apply_prop_enable = function (v) {
		nexacro.Component.prototype.on_apply_prop_enable.call(this, v);

		var items = this._items;
		var item_len = items.length;

		for (var i = 0; i < item_len; i++) {
			items[i]._setEnable(v);
			items[i].fileitemedit._setEnable(v);
			items[i].fileitembutton._setEnable(v);
		}
	};

	_pFileUpload._isPopupFrame = function () {
		return this._onPopupWin;
	};

	_pFileUpload._upadteFileList = function () {
		var file_list = this.filelist = [];

		var items = this._items;

		var item_len = items.length;

		var v_file, files, file;
		for (var i = 0; i < item_len; i++) {
			var item = items[i];
			files = item._files;
			if (files) {
				var files_len = files.length;

				if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
					files_len = files.virtualfiles.length;
				}
				for (var j = 0; j < files_len; j++) {
					var list_len = file_list.length;
					v_file = new nexacro.VirtualFile("uploadfile" + list_len);
					file = files[j];
					if (nexacro.Browser == "Runtime" && nexacro.OS != "Android") {
						var filename = file;
						var nIdx = filename.lastIndexOf("\\");
						if (nIdx > 0) {
							v_file.fullpath = filename;
							v_file.path = filename.substring(0, nIdx + 1);
							v_file.filename = file.substring(nIdx + 1);
						}
						else {
							v_file.filename = filename;
						}
					}
					else if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
						v_file.fullpath = files.virtualfiles[j].fullpath;
						v_file.path = files.virtualfiles[j].path;
						v_file.filename = files.virtualfiles[j].name;
					}
					else {
						v_file._setRefFile(file);
					}

					file_list[list_len] = v_file;
				}
			}
		}
	};

	delete _pFileUpload;

	nexacro.FileUploadCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FileUpload.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};
	var _pFileUploadCtrl = nexacro._createPrototype(nexacro.FileUpload, nexacro.FileUploadCtrl);
	nexacro.FileUploadCtrl.prototype = _pFileUploadCtrl;
	nexacro._setForControlStyleFinder(_pFileUploadCtrl);

	delete _pFileUploadCtrl;

	nexacro.FileItem = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.fileitemedit = null;
		this.fileitembutton = null;
		this.selected = false;

		this.itemheight = 18;
		this.buttontext = "find";
		this.buttonsize = 18;
		this.name = "";
		this.oldvalue = "";
		this.value = "";
		this.index = 0;
		this.components = [];

		this._accessibility_role = "none";

		this._event_list = 
			{
			"onfindclick" : 1, 
			"onitemclick" : 1
		};

		if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;

			var params = '""';
			var jsonstr = '{"id":' + this._id + ', "div":"FileUpload", "method":"constructor", "params":' + params + '}';
			nexacro.Device.exec(jsonstr);
		}
	};

	var _pFileItem = nexacro._createPrototype(nexacro.Component, nexacro.FileItem);
	nexacro.FileItem.prototype = _pFileItem;

	_pFileItem._type_name = "FileItem";

	_pFileItem.on_apply_style_itemheight = function () {
		this.on_change_containerRect(this._client_width, this._client_height);
	};

	_pFileItem.on_apply_style_buttonsize = function () {
		this.on_change_containerRect(this._client_width, this._client_height);
	};

	_pFileItem.on_apply_style_buttontext = function (buttontext) {
		if (this.fileitembutton) {
			this.fileitembutton.set_text(buttontext);
		}
	};

	_pFileItem.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			this.fileitemedit = new nexacro.FileItemEditCtrl("fileitemedit", "absolute", 0, 0, 0, 0, null, null, this);
			this.fileitembutton = new nexacro.FileItemButtonCtrl("fileitembutton", "absolute", 0, 0, 0, 0, null, null, this);

			this.fileitemedit.set_readonly("true");
			this.fileitemedit.style.set_align(this.parent.on_find_CurrentStyle_align());
			this.fileitembutton.set_text("find");

			this.fileitemedit.createComponent();
			this.fileitembutton.createComponent();
		}
	};

	_pFileItem.on_created_contents = function () {
		var parent = this.parent;
		nexacro._append_hidden_item(parent._unique_id, this.name, this.on_fileinput_onchange, this, parent._handle, this.parent._multiselect);

		this.fileitemedit.on_created();
		this.fileitembutton.on_created();

		this.fileitemedit._setEventHandler("oneditclick", this.on_notify_fileitem_oneditclick, this);
		this.fileitembutton._setEventHandler("onclick", this.on_notify_fileitem_onfindclick, this);
		this.fileitemedit._setEventHandler("onlbuttondown", this.on_notify_fileitem_oneditlbuttondown, this);
		this.fileitembutton._setEventHandler("onlbuttondown", this.on_notify_fileitem_onfindlbuttondown, this);

		if (nexacro._enableaccessibility) {
			this.components.push(this.fileitemedit);
			this.components.push(this.fileitembutton);
		}

		this._setAccessibilityActiveDescendant(this.fileitembutton);

		this.on_apply_prop_rtldirection();
	};

	_pFileItem.on_destroy_contents = function () {
		if (this.fileitemedit) {
			this.parent.filepathedits.delete_item(this.id);

			this.fileitemedit.destroy();
			this.fileitemedit = null;
		}
		if (this.fileitembutton) {
			this.parent.filefindbuttons.delete_item(this.id);

			this.fileitembutton.destroy();
			this.fileitembutton = null;
		}

		if (this._files) {
			this._files = null;
		}

		this.components = null;
		var parent = this.parent;
		nexacro._remove_hidden_item(parent._unique_id, this.name, parent._handle);
		if (this._input_node) {
			this._input_node = null;
		}

		if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
			var params = '""';
			delete nexacro.Device._userCreatedObj[this._id];

			var jsonstr = '{"id":' + this._id + ', "div":"FileUpload", "method":"destroy", "params":' + params + '}';
			nexacro.Device.exec(jsonstr);
		}
	};

	_pFileItem.on_change_containerRect = function (width, height) {
		var button_width = parseInt(this.parent.on_find_CurrentStyle_buttonsize(this._pseudo), 10);
		var height = parseInt(this.parent.on_find_CurrentStyle_itemheight(this._pseudo), 10);
		var idx = parseInt(this.index, 10);

		var edit_l = this._client_left;
		var edit_t = this._client_top;
		var edit_w = this._client_width - button_width;
		var edit_h = height;

		var button_l = edit_l + edit_w;
		var button_t = edit_t;
		var button_w = button_width;
		var button_h = edit_h;

		if (this.fileitemedit) {
			this.fileitemedit.move(edit_l, edit_t, edit_w, edit_h, null, null);
		}
		if (this.fileitembutton) {
			this.fileitembutton.move(button_l, button_t, button_w, button_h, null, null);
		}
	};


	_pFileItem.set_value = function (v) {
		if (v != this.value) {
			this.oldvalue = this.value;
			this.value = v;
			this.on_apply_value(v);
			this.parent.set_index(this.index);
			this.parent._setText(v);
			this.parent._setValue(v);
			return true;
		}
		return false;
	};

	_pFileItem.on_apply_value = function (v) {
		if (this.fileitemedit) {
			this.fileitemedit.set_value(v);
		}
	};

	_pFileItem.set_name = function (v) {
		if (v != this.name) {
			this.name = v;
		}
	};

	_pFileItem.set_selected = function (v) {
		if (v != this.selected) {
			this.selected = v;
			this.on_apply_selected(v);
		}
	};

	_pFileItem.on_apply_selected = function (isSelected) {
		if (isSelected) {
			this._stat_change("select", "selected");
		}
		else {
			this._stat_change("notselect", "normal");
		}
	};

	_pFileItem.on_notify_fileitem_oneditclick = function (obj, e) {
		this.parent.set_index(this.index);

		if (this.onitemclick && this.onitemclick._has_handlers) {
			this.onitemclick._fireEvent(this, e);
		}
		return false;
	};

	_pFileItem.on_notify_fileitem_onfindclick = function (obj, e) {
		this.parent.set_index(this.index);

		if (this.onfindclick && this.onfindclick._has_handlers) {
			this.onfindclick._fireEvent(this, e);
		}
		return false;
	};

	_pFileItem.on_notify_fileitem_oneditlbuttondown = function (obj, e) {
		this._accessibility_find_focus_flag(true, false);
		this.parent.set_index(this.index);
	};

	_pFileItem.on_notify_fileitem_onfindlbuttondown = function (obj, e) {
		this._accessibility_find_focus_flag(false, true);
		this.parent.set_index(this.index);
	};

	_pFileItem._accessibility_find_focus_flag = function (editflag, buttonflag) {
		if (nexacro._enableaccessibility) {
			this.parent._editFlag = editflag;
			this.parent._buttonFlag = buttonflag;
		}
	};

	_pFileItem.on_apply_prop_rtldirection = function () {
		var _rtldirection = this._rtldirection = this.parent._rtldirection;
		nexacro.Component.prototype.on_apply_prop_rtldirection.call(this);

		this.on_change_containerRect(this._client_width, this._client_height);

		var itemedit = this.fileitemedit;
		var itembutton = this.fileitembutton;

		if (itemedit) {
			itemedit._setRtlDirection(_rtldirection);
		}
		if (itembutton) {
			itembutton._setRtlDirection(_rtldirection);
		}
	};

	_pFileItem.on_fileinput_onchange = function (value, value2) {
		if (value2) {
			var filename = value2[0];
			var nIdx = filename.lastIndexOf("\\");
			if (nIdx > 0) {
				this.parent.openedpath = filename.substring(0, nIdx + 1);
			}
		}
		if (this.set_value(value)) {
			this.parent.on_fire_onitemchanged(this, this.index, this.oldvalue, this.value, value2);
		}
	};

	_pFileItem._isPopupFrame = function () {
		return this.parent._onPopupWin;
	};

	_pFileItem._changeFiles = function (files) {
		this._files = files;
		this.parent._upadteFileList();
	};

	delete _pFileItem;

	nexacro.FileItemCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.FileItem.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
	};

	var _pFileItemCtrl = nexacro._createPrototype(nexacro.FileItem, nexacro.FileItemCtrl);
	nexacro.FileItemCtrl.prototype = _pFileItemCtrl;

	_pFileItemCtrl._type_name = "FileItemControl";

	delete _pFileItemCtrl;

	nexacro.FileItemEditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.EditCtrl.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._edit = null;
	};

	var _pFileItemEditCtrl = nexacro._createPrototype(nexacro.EditCtrl, nexacro.FileItemEditCtrl);
	nexacro.FileItemEditCtrl.prototype = _pFileItemEditCtrl;


	_pFileItemEditCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("editbackground", pseudo, "background");
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("editgradation", pseudo, "gradation");
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("editborder", pseudo, "border");
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("editbordertype", pseudo, "bordertype");
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_padding = function (pseudo) {
		var padding = this.parent.parent._find_pseudo_obj("editpadding", pseudo, "padding");
		return (padding) ? padding : this._defaultPadding;
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_margin = function (pseudo) {
		var margin = this.parent.parent._find_pseudo_obj("editmargin", pseudo, "margin");
		return (margin) ? margin : this._defaultMargin;
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_font = function (pseudo) {
		var font = this.parent.parent._find_pseudo_obj("editfont", pseudo, "font") || this._find_inherit_pseudo_obj("font", pseudo, "font") || nexacro.Component._default_font;
		return font;
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_color = function (pseudo) {
		var color = this.parent.parent._find_pseudo_obj("editcolor", pseudo, "color") || this._find_inherit_pseudo_obj("color", pseudo, "color") || nexacro.Component._default_color;
		return color;
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		return this.parent.parent.on_find_CurrentStyle_editaccessibility(pseudo);
	};

	_pFileItemEditCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pFileItemEditCtrl._getAccessibilityLabel = function (accessibility) {
		var label = "";
		if (this.parent.parent._first_focus) {
			var comp = this.parent.parent;
			label = comp._control_element._makeAccessibilityLabelbyReadtype();
		}
		label += " " + nexacro.Component.prototype._getAccessibilityLabel.call(this, accessibility);
		return label;
	};

	delete _pFileItemEditCtrl;

	nexacro.FileItemButtonCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Button.call(this, id, position, left, top, width, height, right, bottom, parent);
		this._is_subcontrol = true;
		this._button = null;
	};

	var _pFileItemButtonCtrl = nexacro._createPrototype(nexacro.Button, nexacro.FileItemButtonCtrl);
	nexacro.FileItemButtonCtrl.prototype = _pFileItemButtonCtrl;

	_pFileItemButtonCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("buttonbackground", pseudo, "background");
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_gradation = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("buttongradation", pseudo, "gradation");
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("buttonborder", pseudo, "border");
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_bordertype = function (pseudo) {
		return this.parent.parent._find_pseudo_obj("buttonbordertype", pseudo, "bordertype");
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_padding = function (pseudo) {
		var padding = this.parent.parent._find_pseudo_obj("buttonpadding", pseudo, "padding");
		return (padding) ? padding : this._defaultPadding;
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_margin = function (pseudo) {
		var margin = this.parent.parent._find_pseudo_obj("buttonmargin", pseudo, "margin");
		return (margin) ? margin : this._defaultMargin;
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_font = function (pseudo) {
		var font = this.parent.parent._find_pseudo_obj("buttonfont", pseudo, "font") || this._find_inherit_pseudo_obj("font", pseudo, "font") || nexacro.Component._default_font;
		return font;
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_color = function (pseudo) {
		var color = this.parent.parent._find_pseudo_obj("buttoncolor", pseudo, "color") || this._find_inherit_pseudo_obj("color", pseudo, "color") || nexacro.Component._default_color;
		return color;
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_accessibility = function (pseudo) {
		return this.parent.parent.on_find_CurrentStyle_buttonaccessibility(pseudo);
	};

	_pFileItemButtonCtrl.on_find_CurrentStyle_rtlimagemirroring = function (pseudo) {
		return;
	};

	_pFileItemButtonCtrl._getAccessibilityLabel = function (accessibility) {
		var label = "";
		if (this.parent.parent._first_focus) {
			var comp = this.parent.parent;
			label = comp._control_element._makeAccessibilityLabelbyReadtype();
		}
		label += " " + nexacro.Component.prototype._getAccessibilityLabel.call(this, accessibility);
		return label;
	};

	_pFileItemButtonCtrl.on_fire_sys_onkeyup = function (key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp) {
		var ret = nexacro.Component.prototype.on_fire_onkeyup.call(this, key_code, alt_key, ctrl_key, shift_key, meta_key, from_comp, from_refer_comp);
		if (key_code == 13 || key_code == 32) {
			this.click();
		}
		return ret;
	};

	delete _pFileItemButtonCtrl;
}
;
//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.FlashPlayer) {
	nexacro.FlashPlayer = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._params = new nexacro.Collection();
	};

	var _pFlash = nexacro.FlashPlayer.prototype = nexacro._createPrototype(nexacro.Component, nexacro.FlashPlayer);

	_pFlash._type_name = "FlashPlayer";

	_pFlash.codebase = "";
	_pFlash.mimetype = "";
	_pFlash.movie = "";

	_pFlash.adjustalpha = "";
	_pFlash.alignmode = "";
	_pFlash.framenum = "";
	_pFlash.loop = "";
	_pFlash.playing = "";
	_pFlash.quality = "";
	_pFlash.readstate = "";
	_pFlash.scalemode = "";

	_pFlash._obj_id = "";
	_pFlash._obj_elem = null;
	_pFlash._params = null;

	_pFlash.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var obj_elem = this._obj_elem = new nexacro.PluginElement(control_elem);
			obj_elem.setElementSize(this._client_width, this._client_height);
		}
	};

	_pFlash.on_created_contents = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.component = this;

			var params = this._params;
			var param_cnt = params.length;
			for (var i = 0; i < param_cnt; i++) {
				obj_elem.setElementParam(params.get_id(i), params.get_item(i));
			}

			if (nexacro.Browser == "IE" || nexacro.Browser == "Runtime") {
				this.on_apply_codebase();
				obj_elem.setElementPluginSrc(this.movie);
				if (this.codebase == "") {
					this.codebase = "http://fpdownload.adobe.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0";
					obj_elem.setElementCodebase(this.codebase);
				}
				if (this.mimetype == "") {
					this.mimetype = "application/x-shockwave-flash";
					obj_elem.setElementMIMEType(this.mimetype);
					obj_elem.setElementPluginMIMEType(this.mimetype);
				}
				obj_elem.setElementPluginPage("http://www.adobe.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash");
				obj_elem.setElementClassId("{d27cdb6e-ae6d-11cf-96b8-444553540000}");
			}
			obj_elem.setElementParam("WMode", "Transparent");

			obj_elem.create();
			obj_elem.setElementVisible(this.visible);
			this.on_apply_movie();
		}
	};

	_pFlash.on_destroy_contents = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.destroy();
			this._obj_elem = null;
		}
	};


	_pFlash.on_update_position = function (resize_flag, move_flag) {
		nexacro.Component.prototype.on_update_position.call(this, resize_flag, move_flag);

		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.on_update_position();
		}
	};

	_pFlash.on_change_containerRect = function (width, height) {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.setElementSize(width, height);
		}
	};


	_pFlash.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}
		v = nexacro._toBoolean(v);

		nexacro.Component.prototype.set_visible.call(this, v);

		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.setElementVisible(v);
		}
	};
	_pFlash.set_mimetype = function (v) {
		this.mimetype = v;
		this.on_apply_mimetype();
	};

	_pFlash.on_apply_mimetype = function () {
		var elem = this._obj_elem;
		if (elem) {
			var _type = this.mimetype;
			if (_type) {
				elem.setElementMIMEType(_type);
			}
		}
	};

	_pFlash.set_codebase = function (v) {
		this.codebase = v;
		this.on_apply_codebase();
	};

	_pFlash.on_apply_codebase = function () {
		var elem = this._obj_elem;
		if (elem) {
			var codebase = this.codebase;
			if (codebase) {
				elem.setElementCodebase(codebase);
			}
		}
	};

	_pFlash.set_movie = function (v) {
		var url = v;
		if (url.substring(0, 4).toLowerCase() == "url(") {
			url = url.substring(5, url.length - 2);
		}

		var url = nexacro._getServiceLocation(url, this._getRefFormBaseUrl());

		this.movie = url;
		this.on_apply_movie();
	};

	_pFlash.on_apply_movie = function () {
		var elem = this._obj_elem;
		if (elem) {
			var movie = this.movie;
			if (movie) {
				elem.setElementData(movie);
				elem.setElementParam("Movie", movie);
			}
		}
	};

	_pFlash.set_scalemode = function (v) {
		this.scalemode = v;
		this.on_apply_scalemode();
	};

	_pFlash.on_apply_scalemode = function () {
		var elem = this._obj_elem;
		if (elem) {
			var scalemode = this.scalemode;
			if (scalemode) {
				elem.setElementParam("scale", scalemode);
			}
		}
	};


	_pFlash.set_loop = function (v) {
		this.loop = v;
		this.on_apply_loop();
	};
	_pFlash.on_apply_loop = function () {
		var elem = this._obj_elem;
		if (elem) {
			var loop = this.loop;
			if (loop) {
				elem.setElementParam("loop", loop);
			}
		}
	};


	_pFlash.set_playing = function (v) {
		this.playing = v;
		this.on_apply_playing();
	};
	_pFlash.on_apply_playing = function () {
		var elem = this._obj_elem;
		if (elem) {
			var playing = this.playing;
			if (playing) {
				elem.setElementParam("play", playing);
			}
		}
	};

	_pFlash.set_quality = function (v) {
		this.quality = v;
		this.on_apply_quality();
	};
	_pFlash.on_apply_quality = function () {
		var elem = this._obj_elem;
		if (elem) {
			var quality = this.quality;
			if (quality) {
				elem.setElementParam("quality", quality);
			}
		}
	};




	delete _pFlash;
}



//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.MediaPlayer) {
	nexacro.MediaPlayStateChangedEventInfo = function (obj, id, newvalue) {
		this.id = this.eventid = id || "onplaystatuschanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.newstate = newvalue;
	};
	var _pPlayStatusChangedInfo = nexacro._createPrototype(nexacro.Event, nexacro.MediaPlayStateChangedEventInfo);
	nexacro.MediaPlayStateChangedEventInfo.prototype = _pPlayStatusChangedInfo;
	_pPlayStatusChangedInfo._type_name = "MediaPlayStatusChangedInfo";

	delete _pPlayStatusChangedInfo;

	nexacro.MediaCurrentTimeChangedEventInfo = function (obj, id, currenttime) {
		this.id = this.eventid = id || "oncurrenttimechanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.currenttime = currenttime;
	};
	var _pCurrentTimeChangedInfo = nexacro._createPrototype(nexacro.Event, nexacro.MediaCurrentTimeChangedEventInfo);
	nexacro.MediaCurrentTimeChangedEventInfo.prototype = _pCurrentTimeChangedInfo;
	_pCurrentTimeChangedInfo._type_name = "MediaCurrentTimeChangedInfo";

	delete _pCurrentTimeChangedInfo;


	nexacro.MediaErrorEventInfo = function (obj, id, errortype, errormsg, statuscode) {
		this.id = this.eventid = id || "onerror";
		this.fromobject = this.fromreferenceobject = obj;

		this.errortype = errortype;
		this.errormsg = errormsg;
		this.statuscode = statuscode;
	};
	var _pMediaErrorInfo = nexacro._createPrototype(nexacro.Event, nexacro.MediaErrorEventInfo);
	nexacro.MediaErrorEventInfo.prototype = _pMediaErrorInfo;
	_pMediaErrorInfo._type_name = "MediaErrorInfo";

	delete _pMediaErrorInfo;


	nexacro.MediaPlayer = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.adjustalpha = false;
		this.currenttime = 0;
		this.duration = 0;
		this.mute = false;
		this.loop = false;
		this.controls = false;
		this.autoplay = false;
		this.size = "Not media open";
		this.status = "The playback state is undefined";
		this.url = "";
		this._url = "";
		this.volume = 50;

		this._params = new nexacro.Collection();

		this._event_list = 
			{
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondrop" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmousewheel" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onsuccess" : 1, 
			"onerror" : 1, 
			"onappenditem" : 1, 
			"ondeleteitem" : 1, 
			"onitemclick" : 1, 
			"onfindclick" : 1, 
			"onitemchanged" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onpinchstart" : 1, 
			"onpinch" : 1, 
			"onpinchend" : 1, 
			"onflingstart" : 1, 
			"onfling" : 1, 
			"onflingend" : 1, 
			"onlongpress" : 1, 
			"onslidestart" : 1, 
			"onslide" : 1, 
			"onslideend" : 1, 
			"oncurrenttimechanged" : 1, 
			"onplaystatuschanged" : 1
		};
	};

	var _pMedia = nexacro.MediaPlayer.prototype = nexacro._createPrototype(nexacro.Component, nexacro.MediaPlayer);

	_pMedia._type_name = "MediaPlayer";




	_pMedia._obj_id = "";
	_pMedia._obj_elem = null;
	_pMedia._params = null;

	_pMedia.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var obj_elem = this._obj_elem = new nexacro.MediaPlayerPluginElement(control_elem);
			obj_elem.setElementSize(this._client_width, this._client_height);
		}
	};

	_pMedia.on_created_contents = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			var params = this._params;
			var param_cnt = params.length;
			for (var i = 0; i < param_cnt; i++) {
				obj_elem.setElementParam(params.get_id(i), params.get_item(i));
			}

			obj_elem.create();
			obj_elem.setElementVisible(this.visible);

			this.on_apply_adjustalpha();
			this.on_apply_mute();
			this.on_apply_volume();
			this.on_apply_loop();
			this.on_apply_autoplay();
			this.on_apply_controls();
			this.on_apply_url();
		}
	};

	_pMedia.on_destroy_contents = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.destroy();
			this._obj_elem = null;
		}
	};

	_pMedia.on_update_position = function (resize_flag, move_flag) {
		nexacro.Component.prototype.on_update_position.call(this, resize_flag, move_flag);
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.on_update_position();
		}
	};


	_pMedia.on_change_containerRect = function (width, height) {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem.setElementSize(width, height);
		}
	};

	_pMedia.set_duration = nexacro._emptyFn;
	_pMedia.set_status = nexacro._emptyFn;
	_pMedia.set_size = nexacro._emptyFn;


	_pMedia.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}

		v = nexacro._toBoolean(v);
		nexacro.Component.prototype.set_visible.call(this, v);

		var obj_elem = this._obj_elem;
		if (obj_elem) {
			if (obj_elem.setElementPluginVisible != null) {
				obj_elem.setElementPluginVisible(v);
			}
		}
	};

	_pMedia.set_url = function (v) {
		if (this.url != v) {
			this.url = v;
			v = nexacro._getURIValue(v);
			v = nexacro._getServiceLocation(v, this._getRefFormBaseUrl());

			if (this._url != v) {
				this._url = v;
				this.on_apply_url();
			}
		}
	};
	_pMedia.on_apply_url = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaUrl("URL", this._url);
			this._need_change_event = false;
		}
	};

	_pMedia.set_adjustalpha = function (v) {
		v = nexacro._toBoolean(v);
		if (this.adjustalpha != v) {
			this.adjustalpha = v;
			this.on_apply_adjustalpha();
		}
	};

	_pMedia.on_apply_adjustalpha = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaAdjustAlpha(this.adjustalpha);
		}
	};

	_pMedia.set_currenttime = function (v) {
		v = +v;
		if (isNaN(v)) {
			return;
		}
		if (v < 0) {
			v = 0;
		}
		else if (v > this.duration) {
			v = this.duration;
		}

		this.currenttime = v;
		this.on_apply_currenttime();
	};
	_pMedia.on_apply_currenttime = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaCurrentTime("currentPosition", this.currenttime);
		}
	};

	_pMedia.set_mute = function (v) {
		v = nexacro._toBoolean(v);
		if (this.mute != v) {
			this.mute = v;
			this.on_apply_mute();
		}
	};
	_pMedia.on_apply_mute = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem._setMediaMute("settings", this.mute);
		}
	};

	_pMedia.set_loop = function (v) {
		v = nexacro._toBoolean(v);
		if (this.loop != v) {
			this.loop = v;
			this.on_apply_loop();
		}
	};

	_pMedia.on_apply_loop = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaLoop("AutoRewind", this.loop);
		}
	};

	_pMedia.set_controls = function (v) {
		v = nexacro._toBoolean(v);
		if (this.controls != v) {
			this.controls = v;
			this.on_apply_controls();
		}
	};

	_pMedia.on_apply_controls = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaControl("uiMode", this.controls);
		}
	};

	_pMedia.set_autoplay = function (v) {
		v = nexacro._toBoolean(v);
		if (this.autoplay != v) {
			this.autoplay = v;
			this.on_apply_autoplay();
		}
	};

	_pMedia.on_apply_autoplay = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaAutoPlay("AutoStart", this.autoplay);
		}
	};

	_pMedia.set_volume = function (v) {
		v = +v;
		if (isNaN(v)) {
			return;
		}

		if (v < 0) {
			v = 0;
		}
		else if (v > 100) {
			v = 100;
		}

		if (this.volume != v) {
			this.volume = v;
			this.on_apply_volume();
		}
	};

	_pMedia.on_apply_volume = function () {
		var elem = this._obj_elem;
		if (elem) {
			elem._setMediaVolume("Volume", this.volume);
		}
	};

	_pMedia.on_apply_prop_enable = function () {
		var elem = this._obj_elem;
		if (elem) {
			var enable = this.enable;
			if (enable != null) {
				elem._setMediaEnable("Enabled", enable);
			}
		}
	};


	_pMedia.play = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem._play();
			this._need_change_event = false;
		}
	};

	_pMedia.pause = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem._pause();
		}
	};

	_pMedia.stop = function () {
		var obj_elem = this._obj_elem;
		if (obj_elem) {
			obj_elem._stop();
			this._need_change_event = true;
		}
	};


	_pMedia.on_fire_onerror = function (obj, errortype, errormsg, errorobj, statuscode) {
		if (this.onerror && this.onerror._has_handlers) {
			var evt = new nexacro.MediaErrorEventInfo(obj, "onerror", errortype, errormsg, errorobj, statuscode);
			return this.onerror._fireEvent(this, evt);
		}
	};

	_pMedia.on_fire_oncurrenttimechanged = function (obj, new_pos) {
		if (this.oncurrenttimechanged && this.oncurrenttimechanged._has_handlers) {
			var evt = new nexacro.MediaCurrentTimeChangedEventInfo(obj, "oncurrenttimechanged", new_pos);
			return this.oncurrenttimechanged._fireEvent(this, evt);
		}
	};

	_pMedia.on_fire_onplaystatuschanged = function (obj, new_status) {
		if (this.onplaystatuschanged && this.onplaystatuschanged._has_handlers) {
			var evt = new nexacro.MediaPlayStateChangedEventInfo(obj, "onplaystatuschanged", new_status);
			return this.onplaystatuschanged._fireEvent(this, evt);
		}
	};

	_pMedia._on_currenttimechanged = function (new_pos) {
		var old_pos = this.currenttime;
		if (old_pos != new_pos) {
			this.on_fire_oncurrenttimechanged(this, new_pos);
		}
		this.currenttime = new_pos;
	};

	_pMedia._on_statuschanged = function (new_status) {
		var old_status = this.status;
		if (old_status != new_status) {
			if (this._need_change_event) {
				if (new_status == "pause") {
					new_status = "stop";
				}
			}
			this.status = new_status;
			this.on_fire_onplaystatuschanged(this, new_status);
		}
	};

	_pMedia._on_error = function (errortype, errormsg, statuscode) {
		this.on_fire_onerror(this, errortype, errormsg, statuscode);
	};

	delete _pMedia;
}




//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.WebBrowser) {
	nexacro.WebLoadCompEventInfo = function (obj, url, id) {
		this.id = this.eventid = id || "onloadcompleted";
		this.fromobject = this.fromreferenceobject = obj;
		this.url = url;
	};
	var _pWebLoadCompEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.WebLoadCompEventInfo);
	nexacro.WebLoadCompEventInfo.prototype = _pWebLoadCompEventInfo;
	_pWebLoadCompEventInfo._type_name = "WebLoadCompEventInfo";

	delete _pWebLoadCompEventInfo;

	nexacro.WebUserNotifyEventInfo = function (obj, userdata, id) {
		this.id = this.eventid = id || "onusernotify";
		this.fromobject = this.fromreferenceobject = obj;

		this.userdata = userdata;
	};
	var _pWebUserNotifyEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.WebUserNotifyEventInfo);
	nexacro.WebUserNotifyEventInfo.prototype = _pWebUserNotifyEventInfo;
	_pWebUserNotifyEventInfo._type_name = "WebUserNotifyEventInfo";

	delete _pWebUserNotifyEventInfo;


	nexacro.WebBrowser = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._ifrm_elem = null;

		this.window = null;
		this.document = null;
		this.url = "";
		this._url = "";
		this._blockLoadFlag = false;
		this._current_url = "";
		this._is_emptyurl_based = true;

		this._event_list = {
			"onclick" : 1, 
			"ondblclick" : 1, 
			"onkeypress" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ondrag" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1, 
			"ondrop" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousemove" : 1, 
			"onmove" : 1, 
			"onsize" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onloadcompleted" : 1, 
			"onusernotify" : 1
		};

		this._accessibility_role = "webbrowser";
	};


	var _pWebBrowser = nexacro._createPrototype(nexacro.Component, nexacro.WebBrowser);
	nexacro.WebBrowser.prototype = _pWebBrowser;

	_pWebBrowser._type_name = "WebBrowser";



	_pWebBrowser.on_get_style_accessibility_label = function () {
		return this.id;
	};



	_pWebBrowser.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var curstyle = this.currentstyle;

			this._ifrm_elem = new nexacro.WebBrowserPluginElement(control_elem);
			this._ifrm_elem.setElementSize(this._client_width, this._client_height);
		}
	};

	_pWebBrowser.on_created_contents = function () {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem.component = this;

			ifrm_elem.create();
			ifrm_elem.initEvent();
			this.document = ifrm_elem._document;
			this.window = ifrm_elem._winodw;

			if (!ifrm_elem._block_node) {
				var enable = this._isEnable();
				if (!enable) {
					this._stat_change(enable ? "enable" : "disable", this._pseudo);
					this.on_apply_prop_enable(enable);
					ifrm_elem.setElementEnable(enable);
				}
			}

			nexacro._observeSysEvent(ifrm_elem._handle, "mouseover", "onmouseover", this._webbrowser_mouseover);
		}

		if (this._url) {
			this._is_emptyurl_based = false;
		}

		if (!(nexacro.OS == "Android" && nexacro.Browser == "Runtime")) {
			if (this._url === "") {
				this._url = "about:blank";
			}
		}

		this.on_apply_style_url();
		this._setAccessibilityOutfocusAction();
	};

	_pWebBrowser.on_destroy_contents = function () {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			nexacro._stopSysObserving(ifrm_elem._handle, "mouseover", "onmouseover", this._webbrowser_mouseover);

			this.window = null;
			this.document = null;
			ifrm_elem.destroy();
			this._ifrm_elem = null;
		}

		var text_elem = this._text_elem;
		if (text_elem) {
			text_elem.destroy();
			this._text_elem = null;
		}
	};

	_pWebBrowser.on_update_position = function (resize_flag, move_flag) {
		nexacro.Component.prototype.on_update_position.call(this, resize_flag, move_flag);
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem.on_update_position();
		}
	};


	_pWebBrowser.on_change_containerRect = function (width, height) {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem.setElementSize(width, height);
		}
	};

	_pWebBrowser._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		var _ifrm_elem = this._ifrm_elem;
		if (_ifrm_elem) {
			if ((!_ifrm_elem._prev_outfocus_message_elem || (_ifrm_elem._prev_outfocus_message_elem._killfocus_flag == true && keycode == nexacro.Event.KEY_UP)) || (!_ifrm_elem._next_outfocus_message_elem || (_ifrm_elem._next_outfocus_message_elem._killfocus_flag == true && keycode == nexacro.Event.KEY_DOWN))) {
				this._want_arrow = false;
			}
			else {
				this._want_arrow = true;
			}
		}

		return {
			want_tab : true, 
			want_return : true, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : this._want_arrow
		};
	};

	_pWebBrowser.on_apply_custom_setfocus = function (evt_name) {
		if (nexacro._enableaccessibility) {
			nexacro.Component.prototype.on_apply_custom_setfocus.call(this, evt_name);
		}

		var _win = this._getWindow();
		if (_win && !_win._is_iframe_focus) {
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				_win._block_deactivate = true;
				ifrm_elem._setElementFocus();
			}
		}
	};

	_pWebBrowser.on_fire_onkillfocus = function (newobj, newreferobj) {
		var ret = nexacro.Component.prototype.on_fire_onkillfocus.call(this, newobj, newreferobj);
		if (nexacro._enableaccessibility && this._ifrm_elem) {
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem._prev_outfocus_message_elem && ifrm_elem._prev_outfocus_message_elem._killfocus_flag) {
				ifrm_elem._prev_outfocus_message_elem._killfocus_flag = false;
			}
			if (ifrm_elem._next_outfocus_message_elem && ifrm_elem._next_outfocus_message_elem._killfocus_flag) {
				ifrm_elem._next_outfocus_message_elem._killfocus_flag = false;
			}
		}
		return ret;
	};

	_pWebBrowser.on_fire_onloadcompleted = function (obj, url) {
		if (this.onloadcompleted && this.onloadcompleted._has_handlers) {
			var evt = new nexacro.WebLoadCompEventInfo(obj, url);
			evt.eventid = "onloadcompleted";
			return this.onloadcompleted._fireEvent(this, evt);
		}
		return true;
	};

	_pWebBrowser.on_fire_onusernotify = function (obj, userdata) {
		if (this.onusernotify && this.onusernotify._has_handlers) {
			var evt = new nexacro.WebUserNotifyEventInfo(obj, userdata);
			evt.eventid = "onusernotify";
			return this.onusernotify._fireEvent(this, evt);
		}
		return true;
	};

	_pWebBrowser.on_fire_user_onkeydown = function (keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp) {
		var E = nexacro.Event;
		if (keycode == E.KEY_TAB) {
			this._getWindow()._keydown_element._event_stop = false;
		}
		else if (nexacro._enableaccessibility) {
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				if (keycode == E.KEY_UP) {
					if (ifrm_elem._prev_outfocus_message_elem._killfocus_flag == true) {
						ifrm_elem._prev_outfocus_message_elem._killfocus_flag = false;
					}
					else {
						try {
							ifrm_elem._hanle.contentDocument.body.focus();
						}
						catch (e) {
						}
					}
				}
				else if (keycode == E.KEY_DOWN) {
					if (ifrm_elem._next_outfocus_message_elem._killfocus_flag == true) {
						ifrm_elem._next_outfocus_message_elem._killfocus_flag = false;
					}
					else {
						try {
							ifrm_elem._handle.contentDocument.body.focus();
						}
						catch (e) {
						}
					}
				}
			}
		}
		return nexacro.Component.prototype.on_fire_user_onkeydown.call(this, keycode, alt_key, ctrl_key, shift_key, meta_key, fire_comp, refer_comp);
	};

	_pWebBrowser._webbrowser_mouseover = function (evt) {
		nexacro._cur_drag_info = null;
		nexacro._cur_track_info = null;
	};

	_pWebBrowser.set_text = function (v) {
		v = nexacro._toString(v);

		if (v && v != this.text) {
			this.text = v;
			this._display_text = v.replace(/ /g, "\u00a0");
		}
	};

	_pWebBrowser.set_enable = function (v) {
		v = nexacro._toBoolean(v);
		if (this.enable != v) {
			var control_elem = this._control_element;
			this.enable = v;

			if (this._is_created) {
				var enable_flag = (this.parent._real_enable && v);
				if (this._real_enable != enable_flag) {
					this._real_enable = enable_flag;
					this._stat_change(enable_flag ? "enable" : "disable", this._pseudo);
					this.on_apply_prop_enable(this._real_enable);
					if (this._ifrm_elem) {
						this._ifrm_elem.setElementEnable(enable_flag);
					}
				}
			}
		}
	};

	_pWebBrowser.set_visible = function (v) {
		if (v === undefined || v === null) {
			return;
		}

		v = nexacro._toBoolean(v);

		nexacro.Component.prototype.set_visible.call(this, v);

		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem.setElementVisible(v);
		}
	};

	_pWebBrowser.set_cookiesynctype = function (v) {
	};


	_pWebBrowser.set_url = function (v) {
		if (v == undefined) {
			return;
		}

		var val = v.toString();

		if (val != "about:blank" && val.match(/http:\/\/|file:\/\/|https:\/\//gi) == null) {
			val = "http://" + val;
		}

		this._url = val;
		this.url = v;

		this.on_apply_style_url();
	};

	_pWebBrowser.on_apply_style_url = function () {
		if (this._url === "http://" || this._url === "file://" || this._url === "https://" || this._url === "") {
			return;
		}

		if (nexacro._enableaccessibility && nexacro._accessibilitytype == 4) {
			var control_elem = this.getElement();
			if (control_elem) {
				if (this._url == "about:blank") {
					if (!this._text_elem) {
						this._text_elem = new nexacro.TextBoxElement(this.getElement());
						this._text_elem.setElementSize(this._client_width, this._client_height);
					}

					this._text_elem.create();
					this._text_elem._setElementAccessibilityRole();
					this._text_elem._setElementAccessibilityLabel();
				}
				else {
					if (this._text_elem) {
						this._text_elem.destroy();
						this._text_elem = null;
					}
				}
			}
		}

		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			this._blockLoadFlag = false;
			ifrm_elem._setUrl(this._url);
		}
	};

	_pWebBrowser.on_apply_style_accessibility = function (accessibility) {
		nexacro.Component.prototype.on_apply_style_accessibility.call(this, accessibility);
		this._setAccessibilityOutfocusAction(accessibility);
	};

	_pWebBrowser.stoploading = function () {
		;
	};

	_pWebBrowser._exit = function () {
		this.window = null;
		this.document = null;
		this._blockLoadFlag = false;
		this._current_url = "";
		this._is_emptyurl_based = true;

		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem._setUrl("");
		}
	};

	_pWebBrowser.reload = function () {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			if (this._isCrossDomain(this._current_url) || this._is_emptyurl_based) {
				var tmp_url = this._url;
				ifrm_elem._setUrl("");
				ifrm_elem._setUrl(tmp_url);
			}
			else {
				ifrm_elem._setGo();
			}
		}
	};

	_pWebBrowser.goback = function () {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			if (!this._isCrossDomain(this._current_url)) {
				return ifrm_elem._setBack();
			}
		}
	};

	_pWebBrowser.goforward = function () {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			if (!this._isCrossDomain(this._current_url)) {
				return ifrm_elem._setForward();
			}
		}
	};

	_pWebBrowser.getNativeProperty = function (prop) {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			return ifrm_elem.getNativeProperty(prop);
		}
	};

	_pWebBrowser.on_load_handler = function (docurl) {
		if (this._blockLoadFlag) {
			return;
		}
		this._current_url = docurl;
		this.document = this._ifrm_elem._getDoc();
		if (docurl != "about:blank") {
			this._blockLoadFlag = true;
			this.on_fire_onloadcompleted(this, docurl == "" ? this.url : docurl);
		}
	};

	_pWebBrowser.getProperty = function (prop) {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			return ifrm_elem.getProperty(prop);
		}
	};

	_pWebBrowser.setProperty = function (prop, value) {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem.setProperty(prop, value);
		}
	};

	_pWebBrowser.callMethod = function (func) {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			nexacro.WebBrowserPluginElement.prototype.callMethod.apply(ifrm_elem, arguments);
		}
	};

	_pWebBrowser.addEventHandler = function (evt_id, func, target) {
		if (evt_id in this._event_list == false) {
			this._event_list[evt_id] = 1;
		}
		nexacro.Component.prototype.addEventHandler.call(this, evt_id, func, target);
	};

	_pWebBrowser.removeEventHandler = function (evt_id, func, target) {
		nexacro.Component.prototype.removeEventHandler.call(this, evt_id, func, target);
	};

	_pWebBrowser._isCrossDomain = function (target) {
		if (target == "") {
			return true;
		}

		var base = this._getRefFormBaseUrl();
		if (base.match(/^(file):\/\//)) {
			return false;
		}

		var regExp = /^(https?):\/\/([^:\/\s]+)(:([^\/]*))?((\/[^\s/\/]+)*)?\/?([^#\s\?]*)(\?([^#\s]*))?(#(\w*))?$/;
		var u1 = target.match(regExp);
		var u2 = base.match(regExp);
		if (!u1 || !u2) {
			return true;
		}

		if (u1[2] != u2[2]) {
			return true;
		}
		return false;
	};

	_pWebBrowser._setAccessibilityOutfocusAction = function () {
		var accessibility = this.on_find_CurrentStyle_accessibility("enable");

		if (accessibility) {
			var _ifrm_elem = this._ifrm_elem;
			if (_ifrm_elem) {
				if (_ifrm_elem._prev_outfocus_message_elem) {
					_ifrm_elem._prev_outfocus_message_elem.setElementText(accessibility.action);
				}
				if (_ifrm_elem._next_outfocus_message_elem) {
					_ifrm_elem._next_outfocus_message_elem.setElementText(accessibility.action);
				}
			}
		}
	};

	_pWebBrowser.updateWindow = function () {
		var ifrm_elem = this._ifrm_elem;
		if (ifrm_elem) {
			ifrm_elem.updateWindow();
		}
	};

	delete _pWebBrowser;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.Device && nexacro.OS == "Android") {
	if (!nexacro.Map) {
		nexacro.MapEventInfo = function (obj, id, centerlocation, coordinates, viewmode, zoomlevel, addresses) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.centerlocation = centerlocation;
			this.coordinates = coordinates;
			this.viewmode = viewmode;
			this.zoomlevel = zoomlevel;
			this.addresses = addresses;
		};

		var _pMapEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapEventInfo);
		nexacro.MapEventInfo.prototype = _pMapEventInfo;
		_pMapEventInfo._type_name = "MapEventInfo";

		delete _pMapEventInfo;

		nexacro.MapClickEventInfo = function (obj, id, location) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.location = location;
		};

		var _pMapClickEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapClickEventInfo);
		nexacro.MapClickEventInfo.prototype = _pMapClickEventInfo;
		_pMapClickEventInfo._type_name = "MapClickEventInfo";

		delete _pMapClickEventInfo;

		nexacro.MapDragEventInfo = function (obj, id, location) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.location = location;
		};

		var _pMapDragEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapDragEventInfo);
		nexacro.MapDragEventInfo.prototype = _pMapDragEventInfo;
		_pMapDragEventInfo._type_name = "MapDragEventInfo";

		delete _pMapDragEventInfo;

		nexacro.MapErrorEventInfo = function (obj, id, errorcode, errormsg) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.errortype = "ObjectError";
			this.statuscode = errorcode;
			this.errormsg = errormsg;
		};

		var _pMapErrorEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapErrorEventInfo);
		nexacro.MapErrorEventInfo.prototype = _pMapErrorEventInfo;
		_pMapErrorEventInfo._type_name = "MapErrorEventInfo";

		delete _pMapErrorEventInfo;

		nexacro.Map = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

			this._ifrm_elem = null;
			this.window = null;
			this.document = null;
			this.centerlocation = {
				latitude : 0, 
				longitude : 0
			};
			this.location = {
				latitude : 0, 
				longitude : 0
			};
			this.showmode = 0;
			this.zoomlevel = 15;
			this.showzoom = false;
			this.showmode = false;
			this.shownavigator = false;
			this.viewmode = 0;

			this.apikey = null;

			this.items = new Array();
			this.itemsname = new Array();
			this._itemsname = new Array();
			this._items = new Array();
			this._infowindowname = new Array();
			this._infowindow = new Array();
			this.bSensor = false;
			this.bLoaded = false;

			this._event_list = {
				"onclick" : 1, 
				"ondblclick" : 1, 
				"onkeypress" : 1, 
				"onkeydown" : 1, 
				"onkeyup" : 1, 
				"onkillfocus" : 1, 
				"onsetfocus" : 1, 
				"ondrag" : 1, 
				"ondragenter" : 1, 
				"ondragleave" : 1, 
				"ondragmove" : 1, 
				"ondrop" : 1, 
				"onlbuttondown" : 1, 
				"onlbuttonup" : 1, 
				"onmouseenter" : 1, 
				"onmouseleave" : 1, 
				"onmousemove" : 1, 
				"onmove" : 1, 
				"onsize" : 1, 
				"onrbuttondown" : 1, 
				"onrbuttonup" : 1, 
				"onload" : 1, 
				"onerror" : 1, 
				"onrecvsuccess" : 1, 
				"oncenterchanged" : 1, 
				"onmapdragstart" : 1, 
				"onmapdrag" : 1, 
				"onmapdragend" : 1
			};

			this._location = {
				latitude : 0, 
				longitude : 0
			};
			this._pixel = {
				x : 0, 
				y : 0
			};
		};


		var _pMap = nexacro._createPrototype(nexacro.Component, nexacro.Map);
		nexacro.Map.prototype = _pMap;

		_pMap._type = "nexacroMap";
		_pMap._type_name = "Map";

		_pMap.on_create_contents = function () {
			var control_elem = this.getElement();
			if (control_elem) {
				var curstyle = this.currentstyle;

				this._ifrm_elem = new nexacro.GoogleMapPluginElement(control_elem);
				this._ifrm_elem.setElementSize(this._client_width, this._client_height);
			}
		};

		_pMap.on_created_contents = function () {
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem.create();

				ifrm_elem.initEvent();
				this.document = ifrm_elem._document;
				this.window = ifrm_elem._winodw;
			}
		};

		_pMap.on_destroy_contents = function () {
			var ifrm_elem = this._ifrm_elem;

			if (ifrm_elem) {
				this.window = null;
				this.document = null;
				ifrm_elem.destroy();
				this._ifrm_elem = null;
			}

			this.items = null;
			this.itemsname = null;
			this._itemsname = null;
			this._items = null;
			this._infowindowname = null;
			this._infowindow = null;
		};

		_pMap.on_update_position = function (resize_flag, move_flag) {
			nexacro.Component.prototype.on_update_position.call(this, resize_flag, move_flag);
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem.on_update_position();
			}
		};

		_pMap.on_change_containerRect = function (width, height) {
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem.setElementSize(width, height);
			}
		};

		_pMap.on_fire_onload = function (obj, id, centerlocation, coordinates, viewmode, zoomlevel, addresses) {
			if (this.onload && this.onload._has_handlers) {
				var evt = new nexacro.MapEventInfo(obj, id, centerlocation, coordinates, viewmode, zoomlevel, addresses);
				return this.onload._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_onerror = function (obj, id, errorcode, errormsg) {
			if (this.onerror && this.onerror._has_handlers) {
				var evt = new nexacro.MapErrorEventInfo(obj, id, errorcode, errormsg);
				return this.onerror._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_onrecvsuccess = function (obj, id, centerlocation, coordinates, viewmode, zoomlevel, addresses) {
			if (this.onrecvsuccess && this.onrecvsuccess._has_handlers) {
				var evt = new nexacro.MapEventInfo(obj, id, centerlocation, coordinates, viewmode, zoomlevel, addresses);
				return this.onrecvsuccess._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_oncenterchanged = function () {
			if (this.oncenterchanged && this.oncenterchanged._has_handlers) {
				var evt = new nexacro.MapEventInfo(obj, id, centerlocation, coordinates, viewmode, zoomlevel, addresses);
				return this.oncenterchanged._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_onclick = function (obj, id, location) {
			if (this.onclick && this.onclick._has_handlers) {
				var evt = new nexacro.MapClickEventInfo(obj, id, location);
				return this.onclick._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_ondrag = function (obj, id, location) {
			if (this.ondrag && this.ondrag._has_handlers) {
				var evt = new nexacro.MapDragEventInfo(obj, id, location);
				return this.ondrag._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_onmapdragstart = function (obj, id, location) {
			if (this.onmapdragstart && this.onmapdragstart._has_handlers) {
				var evt = new nexacro.MapDragEventInfo(obj, id, location);
				return this.onmapdragstart._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_onmapdrag = function (obj, id, location) {
			if (this.onmapdrag && this.onmapdrag._has_handlers) {
				var evt = new nexacro.MapDragEventInfo(obj, id, location);
				return this.onmapdrag._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_fire_onmapdragend = function (obj, id, location) {
			if (this.onmapdragend && this.onmapdragend._has_handlers) {
				var evt = new nexacro.MapDragEventInfo(obj, id, location);
				return this.onmapdragend._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_apply_custom_setfocus = function (evt_name) {
			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem.setElementFocus(true);
			}
		};

		_pMap.set_text = function (v) {
			v = nexacro._toString(v);
			if (v && v != this.text) {
				this.text = v;
				this._display_text = v.replace(/ /g, "\u00a0");
			}
		};

		_pMap.set_viewmode = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				this.viewmode = v;

				var ifrm_elem = this._ifrm_elem;
				if (ifrm_elem) {
					var params = '{"value":"' + this.viewmode + '"}';
					ifrm_elem.setElementParam("viewmode", params);
				}
			}
			else {
				return false;
			}
		};

		_pMap.set_zoomlevel = function (v) {
			v = parseInt(v, 10) | 0;
			this.zoomlevel = v;

			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				var params = '{"value":"' + this.zoomlevel + '"}';
				ifrm_elem.setElementParam("zoomlevel", params);
			}
		};

		_pMap.set_showzoom = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.showzoom = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.showzoom = false;
				}
				else {
					return false;
				}

				this.showzoom = v;
				var ifrm_elem = this._ifrm_elem;
				if (ifrm_elem) {
					var params = '{"value":"' + this.showzoom + '"}';
					ifrm_elem.setElementParam("showzoom", params);
				}
				return true;
			}
		};

		_pMap.set_shownavigator = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.shownavigator = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.shownavigator = false;
				}
				else {
					return false;
				}

				var ifrm_elem = this._ifrm_elem;
				if (ifrm_elem) {
					var params = '{"value":"' + this.shownavigator + '"}';
					ifrm_elem.setElementParam("shownavigator", params);
				}

				return true;
			}
		};

		_pMap.set_showmapscale = function () {
		};
		_pMap.set_showmode = function () {
		};

		_pMap.set_showcompass = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.showcompass = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.showcompass = false;
				}
				else {
					return false;
				}

				if (this.bLoaded) {
					var ifrm_elem = this._ifrm_elem;
					if (ifrm_elem) {
						var params = '{"value":"' + this.showcompass + '"}';
						ifrm_elem.setElementParam("showcompass", params);
					}
				}
				return true;
			}
		};

		_pMap.set_apikey = nexacro._emptyFn;

		_pMap.set_enable = function (v) {
			v = nexacro._toBoolean(v);
			if (this.enable != v) {
				var control_elem = this._control_element;
				this.enable = v;

				if (this._is_created) {
					var enable_flag = (this.parent._real_enable && v);
					if (this._ifrm_elem) {
						this._ifrm_elem.setElementEnable(enable_flag);
					}
				}
			}
		};

		_pMap.set_visible = function (v) {
			if (v === undefined || v === null) {
				return;
			}
			v = nexacro._toBoolean(v);

			nexacro.Component.prototype.set_visible.call(this, v);

			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				if (ifrm_elem.setElementPluginVisible != null) {
					ifrm_elem.setElementPluginVisible(v);
				}
			}
		};

		_pMap.load = function (bUseSensor, nLatitude, nLongitude, constViewMode, nZoomLevel) {
			if (nZoomLevel != null) {
				var strlength = 0;
				try {
					strlength = nZoomLevel.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (nZoomLevel.length == 0) {
					return false;
				}

				var nzoom = 0;
				try {
					nzoom = Number(nZoomLevel.toString());
				}
				catch (e) {
					return false;
				}

				if (nzoom >= 0) {
					this.zoomlevel = nzoom;
				}
				else {
					return false;
				}
			}

			if ((nLatitude != null) && (nLongitude != null)) {
				var strlength = 0;
				try {
					strlength = nLatitude.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (strlength.length == 0) {
					return false;
				}

				try {
					strlength = nLongitude.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (strlength.length == 0) {
					return false;
				}

				var nlat = 0;
				var nlon = 0;
				try {
					nlat = Number(nLatitude.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlat) != (+nlat)) {
					return false;
				}
				try {
					nlon = Number(nLongitude.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlon) != (+nlon)) {
					return false;
				}
				this.centerlocation.latitude = nlat;
				this.centerlocation.longitude = nlon;

				_pMap.centerlocation = {
					latitude : nlat, 
					longitude : nlon
				};
			}

			if (constViewMode != null) {
				if (constViewMode == 0 || (typeof (constViewMode) == "string" && constViewMode == "0")) {
					this.viewmode = 0;
				}
				else if (constViewMode == 1 || (typeof (constViewMode) == "string" && constViewMode == "1")) {
					this.viewmode = 1;
				}
				else if (constViewMode == 2 || (typeof (constViewMode) == "string" && constViewMode == "2")) {
					this.viewmode = 2;
				}
				else if (constViewMode == 3 || (typeof (constViewMode) == "string" && constViewMode == "3")) {
					this.viewmode = 3;
				}
				else {
					return false;
				}
			}
			else {
				this.viewmode = 0;
			}

			if (bUseSensor != null) {
				if (bUseSensor == true || (typeof (bUseSensor) == "string" && bUseSensor == "true")) {
					this.bSensor = true;
				}
				else if (bUseSensor == false || (typeof (bUseSensor) == "string" && bUseSensor == "false")) {
					this.bSensor = false;
				}
				else {
					return false;
				}
			}
			else if (bUseSensor == null) {
				this.bSensor = false;
			}
			else {
			}

			var params = '{"bUseSensor":"' + this.bSensor
				 + '","nLatitude":"' + this.centerlocation.latitude + '","nLongitude":"' + this.centerlocation.longitude
				 + '","constViewMode":"' + this.viewmode + '","nZoomLevel":"' + this.zoomlevel
				 + '","showzoom":"' + this.showzoom + '","shownavigator":"' + this.shownavigator + '"}';

			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem._setLoad(params);
			}
			this.bLoaded = true;
			return true;
		};

		_pMap.setMarkerLoc = function (strItemID, lat, lng) {
			this.items[strItemID].location.latitude = lat;

			this.items[strItemID].location.longitude = lng;
		};

		_pMap.getAddress = function (nLatitude, nLongitude, nMaxResultCount, strLocale) {
			if (nLatitude == undefined || nLatitude == null) {
				return false;
			}

			if (nLongitude == undefined || nLongitude == null) {
				return false;
			}

			if (nMaxResultCount < 0) {
				return false;
			}

			if (nMaxResultCount == undefined || nMaxResultCount == null) {
				nMaxResultCount = 1;
			}

			var params = '{"nLatitude":"' + nLatitude
				 + '","nLongitude":"' + nLongitude + '","nMaxResultCount":"' + nMaxResultCount
				 + '","strLocale":"' + strLocale + '"}';

			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem._getAddress(params);
			}
			return true;
		};

		_pMap.getCoordinates = function (straddress) {
			if (straddress == undefined || straddress == null || straddress == "") {
				return false;
			}

			var ifrm_elem = this._ifrm_elem;
			if (ifrm_elem) {
				ifrm_elem._getCoordinates(straddress);
			}
			return true;
		};

		var _itemsname = new Array();
		var _items = new Array();
		var _infowindowname = new Array();
		var _infowindow = new Array();

		_pMap.addItem = function (strItemID, objComponent) {
			var ifrm_elem = this._ifrm_elem;

			if (strItemID == null || objComponent == null) {
				return false;
			}

			if (strItemID == "" || typeof (strItemID) == "undefined" || objComponent == "" || objComponent == "undefined" || strItemID.trim() == "") {
				return false;
			}

			if (typeof (this.items[strItemID]) != "undefined") {
				this.on_fire_onerror(this, "onerror", "1501", "item is already exist.");
				return false;
			}

			if (objComponent instanceof nexacro.MapMarker || objComponent instanceof nexacro.MapPolyline || objComponent instanceof nexacro.MapPolygon) {
				this.items[strItemID] = objComponent;
				this.items.push(strItemID);

				if (this.bLoaded) {
					if (objComponent._type == 0 || objComponent._type == 1) {
						_pMap.addMarker(ifrm_elem, strItemID, objComponent);
					}
					else if (objComponent._type == 2) {
						_pMap.addPolyline(ifrm_elem, strItemID, objComponent);
					}
					else if (objComponent._type == 3) {
						_pMap.addPolygon(ifrm_elem, strItemID, objComponent);
					}
				}
				return true;
			}
			else {
				return false;
			}
		};

		_pMap.addMarker = function (elem, markName, markObj) {
			_itemsname.push(markName);
			_items[markName] = "marker";
			markObj._map = this;
			markObj._name = markName;

			var params = '{"itemName":"' + markName
				 + '","nLatitude":"' + markObj.location.latitude + '","nLongitude":"' + markObj.location.longitude
				 + '","text":"' + markObj.text + '","visible":"' + markObj.visible + '","image":"' + markObj.style.image
				 + '","draggable":"' + markObj.draggable
				 + '"}';

			if (elem) {
				elem._setMarker(params);
			}
		};

		_pMap.addPolygon = function (elem, polygonName, polygonObj) {
			var _lat_lng_arr, _lat, _lng;
			var arr_lat = new Array();
			var arr_lng = new Array();

			_lat_lng_arr = polygonObj.locationdata.toString().split("]");
			for (var i = 0; i < (_lat_lng_arr.length - 1); i++) {
				_lat = _lat_lng_arr[i].toString().split(",")[0].split(" ").join().substring(1);
				_lng = _lat_lng_arr[i].toString().split(",")[1].split(" ").join().substring(1);

				if (_lat.length > 0 && _lng.length > 0) {
					arr_lat.push(_lat);
					arr_lng.push(_lng);
				}
			}



			_itemsname.push(polygonName);
			_items[polygonName] = "polygon";

			polygonObj._map = this;
			polygonObj._name = polygonName;


			var params = '{"itemName":"' + polygonName
				 + '","nLatitude":' + JSON.stringify(arr_lat) + ',"nLongitude":' + JSON.stringify(arr_lng)
				 + ',"visible":"' + polygonObj.visible + '","strokepen_color":"' + polygonObj.style.strokepen.color
				 + '","strokepen_width":"' + polygonObj.style.strokepen.width + '","fillbrush_color":"' + polygonObj.style.fillbrush.color
				 + '"}';

			if (elem) {
				elem._setPolygon(params);
			}
		};

		_pMap.addPolyline = function (elem, polylineName, polylineObj) {
			var _lat_lng_arr, _lat, _lng;
			var arr_lat = new Array();
			var arr_lng = new Array();

			_lat_lng_arr = polylineObj.locationdata.toString().split("]");
			for (var i = 0; i < (_lat_lng_arr.length - 1); i++) {
				_lat = _lat_lng_arr[i].toString().split(",")[0].split(" ").join().substring(1);
				_lng = _lat_lng_arr[i].toString().split(",")[1].split(" ").join().substring(1);

				if (_lat.length > 0 && _lng.length > 0) {
					arr_lat.push(_lat);
					arr_lng.push(_lng);
				}
			}


			_itemsname.push(polylineName);
			_items[polylineName] = "polyline";

			polylineObj._map = this;
			polylineObj._name = polylineName;



			var params = '{"itemName":"' + polylineName
				 + '","nLatitude":' + JSON.stringify(arr_lat) + ',"nLongitude":' + JSON.stringify(arr_lng)
				 + ',"visible":"' + polylineObj.visible + '","strokepen_color":"' + polylineObj.style.strokepen.color
				 + '","strokepen_width":"' + polylineObj.style.strokepen.width
				 + '"}';

			if (elem) {
				elem._setPolyline(params);
			}
		};

		_pMap.removeItem = function (strItemID) {
			var ifrm_elem = this._ifrm_elem;

			if (strItemID == null) {
				return false;
			}

			if (strItemID == "" || typeof (strItemID) == "undefined") {
				return false;
			}

			if (typeof (this.items[strItemID]) == "undefined") {
				this.on_fire_onerror(this, "onerror", "1502", "item is not exist.");
				return false;
			}
			else {
				delete this.items[strItemID];

				for (var i = 0; i < this.items.length; i++) {
					if (this.items[i] == strItemID) {
						var position = this.items.indexOf(this.items[i]);
						this.items.splice(position, i + 1);
					}
				}

				if (this.bLoaded) {
					_pMap._removeItem(ifrm_elem, strItemID);
				}

				return true;
			}
		};

		_pMap._removeItem = function (elem, itemname) {
			var params = '{"item":"' + _items[itemname]
				 + '","itemname":"' + itemname
				 + '"}';

			if (elem) {
				elem._setRemove(params);
			}

			delete _items[itemname];
			for (var i = 0; i < _itemsname.length; i++) {
				if (_itemsname[i] == itemname) {
					_itemsname.splice(i + 1, i + 1);
				}
			}
			return true;
		};

		_pMap.on_load_handler = function (id, centerlocation, coordinates, viewmode, zoomlevel, addresses) {
			this.on_fire_onload(this, id, centerlocation, coordinates, viewmode, zoomlevel, addresses);
		};

		_pMap.on_error_handler = function (id, code, msg) {
			this.on_fire_onerror(this, id, code, msg);
		};

		_pMap.on_recvsuccess_handler = function (id, centerlocation, coordinates, viewmode, zoomlevel, addresses) {
			this.on_fire_onrecvsuccess(this, id, centerlocation, coordinates, viewmode, zoomlevel, addresses);
		};

		_pMap.on_centerchanged_handler = function (id, centerlocation, viewmode, zoomlevel, addresses) {
			this.on_fire_oncenterchanged(this, id, centerlocation, viewmode, zoomlevel, addresses);
		};

		_pMap.on_click_handler = function (id, location) {
			this.on_fire_onclick(this, id, location);
		};

		_pMap.on_drag_handler = function (id, location) {
			this.on_fire_ondrag(this, id, location);
		};

		_pMap.on_mapdragstart_handler = function (id, location) {
			this.on_fire_onmapdragstart(this, id, location);
		};

		_pMap.on_mapdrag_handler = function (id, location) {
			this.on_fire_onmapdrag(this, id, location);
		};

		_pMap.on_mapdragend_handler = function (id, location) {
			this.on_fire_onmapdragend(this, id, location);
		};

		_pMap.callMethod = function (func) {
			if (this._ifrm_elem) {
				this._ifrm_elem.callScriptMethod(func);
			}
		};

		delete _pMap;
	}

	if (!nexacro.MapMarker) {
		nexacro.MapMarker = function (name, obj) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;

			this.name = name || "";
			this._type = 0;
			this.location = {
				_MapMarkerID : "", 
				set_parentID : function (_id) {
					this["_MapMarkerID"] = _id;
				}, 

				latitude : 0, 
				longitude : 0, 
				set_latitude : function (lat) {
					var strlength = 0;
					try {
						strlength = lat.toString().split(" ").join("");
					}
					catch (e) {
						return false;
					}

					if (strlength.length == 0) {
						return false;
					}

					var nlat = 0;
					try {
						nlat = Number(lat.toString());
					}
					catch (e) {
						return false;
					}

					if ((+nlat) != (+nlat)) {
						return false;
					}
					this.latitude = nlat;
					return true;
				}, 

				set_longitude : function (lon) {
					var strlength = 0;
					try {
						strlength = lon.toString().split(" ").join("");
					}
					catch (e) {
						return false;
					}

					if (strlength.length == 0) {
						return false;
					}

					var nlon = 0;
					try {
						nlon = Number(lon.toString());
					}
					catch (e) {
						return false;
					}

					if ((+nlon) != (+nlon)) {
						return false;
					}
					this.longitude = nlon;
					return true;
				}, 

				$s : function (name, fnname, val) {
					this[name] = val;
				}
			};
			this.text = "";
			this.visible = true;
			this.draggable = false;
			this.style = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 
				align : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					halign : "center", 
					valign : "middle", 
					set_halign : function (v) {
						var _v = v.toString().split(" ").join("").toLowerCase();
						if (_v == "left" || _v == "center" || _v == "right") {
							this.halign = _v;

							return true;
						}
						else {
							return false;
						}
					}, 
					set_valign : function (v) {
						var _v = v.toString().split(" ").join("").toLowerCase();
						if (_v == "top" || _v == "middle" || _v == "bottom") {
							this.valign = _v;

							return true;
						}
						else {
							return false;
						}
					}, 
					$s : function (name, fnname, val) {
						this[name] = val;
					}
				}, 
				image : "", 

				set_align : function (v) {
					var v_arr = v.split(" ");
					var ret = true;
					if (v_arr.length != 2) {
						return false;
					}
					ret = this.align.set_halign(v_arr[0]);
					if (!ret) {
						return ret;
					}
					ret = this.align.set_valign(v_arr[1]);

					return ret;
				}, 

				set_image : function (v) {
					this._type = 1;
					this.image = v;
					return true;
				}, 
				$s : function (name, fnname, val) {
					this[name] = val;
				}
			};

			this._name = null;
			this.location.set_parentID(this._id);
		};

		var _pMapMarker = nexacro.MapMarker.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapMarker);
		_pMapMarker._type_name = "MapMarker";

		_pMapMarker.set_location = function (v) {
			if (v != null) {
				var _v_arr = v.split(",");
				if (_v_arr.length != 2) {
					return false;
				}
				var lat = _v_arr[0];
				var lon = _v_arr[1];

				var strlength = 0;
				try {
					strlength = lat.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (strlength.length == 0) {
					return false;
				}

				try {
					strlength = lon.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (strlength.length == 0) {
					return false;
				}

				var nlat = 0;
				var nlon = 0;
				try {
					nlat = Number(lat.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlat) != (+nlat)) {
					return false;
				}
				try {
					nlon = Number(lon.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlon) != (+nlon)) {
					return false;
				}
				this.location.latitude = nlat;
				this.location.longitude = nlon;
			}
			else {
				return false;
			}
			return true;
		};

		_pMapMarker.set_text = function (v) {
			this.text = v;
			return true;
		};

		_pMapMarker.set_draggable = function (v) {
			if (v == null) {
				return false;
			}
			else if (v) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.draggable = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.draggable = false;
				}
			}
			else {
				return false;
			}
		};

		_pMapMarker.set_visible = function (v) {
			if (v == true || (typeof (v) == "string" && v == "true")) {
				this.visible = true;
			}
			else if (v == false || (typeof (v) == "string" && v == "false")) {
				this.visible = false;
			}
			else {
				return false;
			}
			return true;
		};

		_pMapMarker.set_style = function (v) {
			var v_arr = v.split(";");
			var i = 0;
			var _v_arr;
			var ret = true;
			for (i = 0; i < v_arr.length; i++) {
				_v_arr = v_arr[i].split(":");
				if (_v_arr.length != 2) {
					return false;
				}
				switch (_v_arr[0].split(" ").join("").toLowerCase()) {
					case "align":
						ret = this.style.set_align(_v_arr[1]);
						break;
					case "image":
						ret = this.style.set_image(_v_arr[1]);
						break;
					default:
						ret = false;
						break;
				}
				if (!ret) {
					return ret;
				}
			}
			return ret;
		};

		delete _pMapMarker;
	}

	if (!nexacro.MapPolyline) {
		nexacro.MapPolyline = function (name, obj) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;
			this.name = name || "";

			this._type = 2;
			this.locationdata = "";
			this.visible = true;

			this.style = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 

				strokepen : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					width : "", 
					color : "", 
					set_width : function (v) {
						var nWidth = 0;
						try {
							nWidth = Number(v.toString());
						}
						catch (e) {
							return false;
						}

						if ((+nWidth) != (+nWidth)) {
							return false;
						}
						this.width = nWidth;
						return true;
					}, 
					set_color : function (v) {
						if (typeof (nexacro._xreNamedColorList[v]) != "undefined") {
							this.color = nexacro._xreNamedColorList[v] + "FF";
						}
						else {
							this.color = v;
						}
						this.color = v;
						return true;
					}, 
					$s : function (name, fnname, val) {
						this[name] = val;
					}
				}, 

				set_strokepen : function (v) {
					var v_arr = v.split(" ");
					var ret = true;



					if (v_arr.length != 2) {
						ret = false;
					}
					else {
						ret = this.strokepen.set_width(v_arr[0]);
						if (!ret) {
							return ret;
						}
						ret = this.strokepen.set_color(v_arr[1]);
					}

					return ret;
				}, 
				$s : function (name, fnname, val) {
					this[name] = val;
				}
			};

			this._name = null;
			this.style.set_parentID(this._id);
			this.style.strokepen.set_parentID(this._id);
		};

		var _pMapPolyline = nexacro.MapPolyline.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapPolyline);
		_pMapPolyline._type_name = "MapPolyline";

		_pMapPolyline.set_locationdata = function (v) {
			var _lat_lng_arr;

			_lat_lng_arr = v.toString().split("]");
			if (!(_lat_lng_arr.length >= 2)) {
				return false;
			}

			this.locationdata = v;
			return true;
		};

		_pMapPolyline.set_visible = function (v) {
			if (v == true || (typeof (v) == "string" && v == "true")) {
				this.visible = true;
			}
			else if (v == false || (typeof (v) == "string" && v == "false")) {
				this.visible = false;
			}
			else {
				return false;
			}

			return true;
		};

		_pMapPolyline.set_style = function (v) {
			var v_arr = v.split(";");
			var i = 0;
			var _v_arr;
			var ret = true;
			for (i = 0; i < v_arr.length; i++) {
				_v_arr = v_arr[i].split(":");
				if (_v_arr.length != 2) {
					return false;
				}
				switch (_v_arr[0].split(" ").join("").toLowerCase()) {
					case "strokepen":
						ret = this.style.set_strokepen(_v_arr[1]);
						break;
					default:
						ret = false;
						break;
				}

				if (!ret) {
					return ret;
				}
			}
			return ret;
		};

		delete _pMapPolyline;
	}

	if (!nexacro.MapPolygon) {
		nexacro.MapPolygon = function (name, obj) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;
			this.name = name || "";

			this._type = 3;
			this.locationdata = "";
			this.visible = true;
			this.style = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 
				strokepen : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					width : "", 
					color : "", 
					set_width : function (v) {
						var nWidth = 0;
						try {
							nWidth = Number(v.toString());
						}
						catch (e) {
							return false;
						}

						if ((+nWidth) != (+nWidth)) {
							return false;
						}
						this.width = nWidth;

						return true;
					}, 
					set_color : function (v) {
						if (typeof (nexacro._xreNamedColorList[v]) != "undefined") {
							this.color = nexacro._xreNamedColorList[v] + "FF";
						}
						else {
							this.color = v;
						}

						this.color = v;

						return true;
					}, 
					$s : function (name, fnname, val) {
						this[name] = val;
					}
				}, 
				set_strokepen : function (v) {
					var v_arr = v.split(" ");
					var ret = true;
					if (v_arr.length != 2) {
						ret = false;
					}
					else {
						ret = this.strokepen.set_width(v_arr[0]);
						if (!ret) {
							return ret;
						}
						ret = this.strokepen.set_color(v_arr[1]);
					}

					return ret;
				}, 

				fillbrush : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					color : "", 
					set_color : function (v) {
						if (typeof (nexacro._xreNamedColorList[v]) != "undefined") {
							this.color = nexacro._xreNamedColorList[v] + "FF";
						}
						else {
							this.color = v;
						}

						this.color = v;
						return true;
					}, 
					$s : function (name, fnname, val) {
						this[name] = val;
					}
				}, 
				set_fillbrush : function (v) {
					return this.fillbrush.set_color(v);
				}, 
				$s : function (name, fnname, val) {
					this[name] = val;
				}
			};

			this._name = null;

			this.style.set_parentID(this._id);
			this.style.strokepen.set_parentID(this._id);
			this.style.fillbrush.set_parentID(this._id);
		};

		var _pMapPolygon = nexacro.MapPolygon.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapPolygon);
		_pMapPolygon._type_name = "MapPolygon";

		_pMapPolygon.set_locationdata = function (v) {
			var _lat_lng_arr;

			_lat_lng_arr = v.toString().split("]");
			if (!(_lat_lng_arr.length >= 2)) {
				return false;
			}

			this.locationdata = v;
			return true;
		};

		_pMapPolygon.set_visible = function (v) {
			if (v == true || (typeof (v) == "string" && v == "true")) {
				this.visible = true;
			}
			else if (v == false || (typeof (v) == "string" && v == "false")) {
				this.visible = false;
			}
			else {
				return false;
			}
			return true;
		};

		_pMapPolygon.set_style = function (v) {
			var v_arr = v.split(";");
			var i = 0;
			var _v_arr;
			var ret = true;

			for (i = 0; i < v_arr.length; i++) {
				_v_arr = v_arr[i].split(":");
				if (_v_arr.length != 2) {
					return false;
				}
				switch (_v_arr[0].split(" ").join("").toLowerCase()) {
					case "strokepen":
						ret = this.style.set_strokepen(_v_arr[1]);
						break;
					case "fillbrush":
						ret = this.style.set_fillbrush(_v_arr[1]);
						break;
					default:
						ret = false;
						break;
				}
				if (!ret) {
					return ret;
				}
			}
			return ret;
		};

		delete _pMapPolygon;
	}
}
else if (nexacro.Device || nexacro.Browser != "Runtime" && !(nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8)) {
	if (!nexacro.Map) {
		nexacro.MapEventInfo = function (obj, id, centerlocation, viewmode, zoomlevel, addresses, coordinates) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.centerlocation = centerlocation;
			this.viewmode = viewmode;
			this.zoomlevel = zoomlevel;
			this.addresses = addresses;
			this.coordinates = coordinates;
		};

		var _pMapEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapEventInfo);
		nexacro.MapEventInfo.prototype = _pMapEventInfo;
		_pMapEventInfo._type_name = "MapEventInfo";

		delete _pMapEventInfo;

		nexacro.MapErrorEventInfo = function (obj, id, errorcode, errormsg) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.errortype = "ObjectError";
			this.statuscode = errorcode;
			this.errormsg = errormsg;
		};

		var _pMapErrorEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapErrorEventInfo);
		nexacro.MapErrorEventInfo.prototype = _pMapErrorEventInfo;
		_pMapErrorEventInfo._type_name = "MapErrorEventInfo";

		delete _pMapErrorEventInfo;

		nexacro.MapClickEventInfo = function (obj, id, location) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.location = location;
		};

		nexacro.MapDragEventInfo = function (obj, id, location) {
			this.id = this.eventid = id;
			this.fromobject = this.fromreferenceobject = obj;
			this.location = location;
		};

		var _pMapDragEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MapDragEventInfo);
		nexacro.MapDragEventInfo.prototype = _pMapDragEventInfo;
		_pMapDragEventInfo._type_name = "MapDragEventInfo";

		delete _pMapDragEventInfo;

		nexacro.Map_Style = function (target, idx) {
			nexacro.Style.call(this, target, idx);
			if (target) {
				this._target = target;
			}

			this.zoomalign = {
				halign : "", 
				valign : ""
					
			};
			this.zoomalign.halign = "left";
			this.zoomalign.valign = "top";
		};

		var _pMapStyle = nexacro._createPrototype(nexacro.Style, nexacro.Map_Style);
		nexacro.Map_Style.prototype = _pMapStyle;
		_pMapStyle._type_name = "MapStyle";


		eval(nexacro._createAlignAttributeEvalStr("_pMapStyle", "modealign"));
		eval(nexacro._createAlignAttributeEvalStr("_pMapStyle", "zoomalign"));
		eval(nexacro._createAlignAttributeEvalStr("_pMapStyle", "navigatoralign"));
		eval(nexacro._createAlignAttributeEvalStr("_pMapStyle", "mapscalealign"));

		_pMapStyle.set_zoomalign.valign = function (v) {
			_pMap.set_zoomalign("valign", v);
		};

		_pMapStyle.findCurrentZoomalign = function (pseudo) {
		};

		_pMapStyle.__custom_emptyObject = function () {
			this.modealign = null;
			this.navigatoralign = null;
			this.mapscalealign = null;
		};

		_pMapStyle.__get_custom_style_value = function () {
			var val = "";
			if (this.modealign._value.length) {
				val += "modealign:" + this.buttonalign._value + "; ";
			}
			if (this.zoomalign._value.length) {
				val += "zoomalign:" + this.buttonalign._value + "; ";
			}
			if (this.navigatoralign._value.length) {
				val += "navigatoralign:" + this.buttonalign._value + "; ";
			}
			if (this.mapscalealign._value.length) {
				val += "mapscalealign:" + this.buttonalign._value + "; ";
			}

			return val;
		};

		nexacro.Map_CurrentStyle = function () {
			this.modealign = null;
			this.zoomalign = null;
			this.zoomalign = {
				align : "test1", 
				valign : "to44p"
			};
			this.navigatoralign = null;
			this.mapscalealign = null;
		};

		var _pMapCurrentStyle = nexacro._createPrototype(nexacro.CurrentStyle, nexacro.Map_CurrentStyle);
		nexacro.Map_CurrentStyle.prototype = _pMapCurrentStyle;

		_pMapCurrentStyle.__custom_emptyObject = _pMapStyle.__custom_emptyObject;
		_pMapCurrentStyle.__get_custom_style_value = _pMapStyle.__get_custom_style_value;

		delete _pMapStyle;
		delete _pMapCurrentStyle;


		nexacro.googlemaps_loaded = false;
		nexacro.googlemaps_callback = function () {
			nexacro.googlemaps_loaded = true;
		};

		nexacro.load_googlemaps = function (googleapikey) {
			if (nexacro.googlemaps_loaded) {
				return;
			}

			var script = document.createElement("script");
			script.type = "text/javascript";
			if (googleapikey) {
				script.src = "https://maps.googleapis.com/maps/api/js?key=" + googleapikey + "&callback=nexacro.googlemaps_callback";
			}
			else {
				script.src = "https://maps.googleapis.com/maps/api/js?callback=nexacro.googlemaps_callback";
			}
			document.body.appendChild(script);
		};

		nexacro.Map = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;
			this.name = id || "";

			this.centerlocation = {
				latitude : 0, 
				longitude : 0
			};

			this.location = {
				latitude : 0, 
				longitude : 0
			};

			this.coordinates = {
				latitude : 0, 
				longitude : 0
			};


			this._map_elem = null;
			this._google_map = null;
			this.maptype = 0;
			this.viewmode = 0;
			this.zoomlevel = 15;
			this.zoomalign_halign = "left";
			this.zoomalign_valign = "top";
			this.showmode = false;
			this.showzoom = false;
			this.shownavigator = false;
			this.showmapscale = false;
			this.enableevent = true;

			this.apikey = null;

			this.items = new Array();
			this.itemsname = new Array();

			this._itemsname = new Array();
			this._items = new Array();
			this._infowindowname = new Array();
			this._infowindow = new Array();

			this.bSensor = false;

			this.bLoaded = false;
			this.enable = true;
			this.draggable = false;

			this._event_list = {
				"onclick" : 1, 
				"ondblclick" : 1, 
				"onkeypress" : 1, 
				"onkeydown" : 1, 
				"onkeyup" : 1, 
				"onkillfocus" : 1, 
				"onsetfocus" : 1, 
				"ondragstart" : 1, 
				"ondrag" : 1, 
				"ondragenter" : 1, 
				"ondragleave" : 1, 
				"ondragmove" : 1, 
				"ondragend" : 1, 
				"ondrop" : 1, 
				"onlbuttondown" : 1, 
				"onlbuttonup" : 1, 
				"onmouseenter" : 1, 
				"onmouseleave" : 1, 
				"onmousemove" : 1, 
				"onmove" : 1, 
				"onsize" : 1, 
				"onrbuttondown" : 1, 
				"onrbuttonup" : 1, 
				"onload" : 1, 
				"onrecvsuccess" : 1, 
				"onoverlayclick" : 1, 
				"oncenterchanged" : 1, 
				"onviewmodechanged" : 1, 
				"onzoomchanged" : 1, 
				"onmapdragstart" : 1, 
				"onmapdrag" : 1, 
				"onmapdragend" : 1, 
				"onerror" : 1
			};
		};

		var _pMap = nexacro._createPrototype(nexacro.Component, nexacro.Map);
		nexacro.Map.prototype = _pMap;
		_pMap._type_name = "Map";

		_pMap.centerlocation = {
			latitude : 0, 

			longitude : 0
		};

		nexacro.Map._default_text_align = nexacro.Component._default_align;
		nexacro.Map._default_image_align = nexacro.Component._default_buttonimg_align;

		_pMap.on_apply_custom_pseudo = function (pseudo) {
		};

		_pMap.set_draggable = function (v) {
			if (v == null) {
				return false;
			}
			else if (v) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.draggable = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.draggable = false;
				}
			}
			else {
				return false;
			}
		};

		_pMap.set_zoomalign = function (name, val) {
			if (name == "halign") {
				this.zoomalign_halign = val;
			}
			else if (name == "valign") {
				this.zoomalign_valign = val;
			}
			else {
				return false;
			}

			var __zoomalign = google.maps.ControlPosition.LEFT_TOP;
			__zoomalign = this._getalign(this.zoomalign_halign, this.zoomalign_valign);
			this.zoomalign = __zoomalign;

			this._google_map_option_test = {
				zoomControlOptions : {
					position : this.zoomalign, 
					style : google.maps.ZoomControlStyle.DEFAULT
				}
			};

			return true;
		};

		_pMap._getalign = function (h, v) {
			if (h == "left") {
				if (v == "top") {
					return google.maps.ControlPosition.TOP_LEFT;
				}
				else if (v == "middle") {
					return google.maps.ControlPosition.LEFT;
				}
				else if (v == "bottom") {
					return google.maps.ControlPosition.LEFT_BOTTOM;
				}
			}
			else if (h == "center") {
				if (v == "top") {
					return google.maps.ControlPosition.TOP;
				}
				else if (v == "bottom") {
					return google.maps.ControlPosition.BOTTOM;
				}
			}
			else if (h == "right") {
				if (v == "top") {
					return google.maps.ControlPosition.TOP_LEFT;
				}
				else if (v == "middle") {
					return google.maps.ControlPosition.RIGHT;
				}
				else if (v == "bottom") {
					return google.maps.ControlPosition.RIGHT_BOTTOM;
				}
			}
		};

		var _itemsname = new Array();
		var _items = new Array();
		var _infowindowname = new Array();
		var _infowindow = new Array();

		_pMap.set_viewmode = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				this.viewmode = v;
				if (this.bLoaded) {
					this._google_map_option = {
						mapTypeId : this._getMapType(this.viewmode)
					};
					this._google_map.setOptions(this._google_map_option);
				}
				return true;
			}
			else {
				return false;
			}
		};

		_pMap.set_showmode = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.showmode = true;
				}
				else if (v == false
					 || (typeof (v) == "string" && v == "false")) {
					this.showmode = false;
				}
				else {
					return false;
				}

				if (this.bLoaded) {
					var myLatlng = new google.maps.LatLng(37.5640, 126.9751);
					this._google_map_option_test = {
						mapTypeControl : this.showmode, 
						mapTypeControlOptions : {
							style : google.maps.MapTypeControlStyle.DEFAULT, 
							position : this.modealign
						}
					};

					this._google_map.setOptions(this._google_map_option_test);
				}
				return true;
			}
		};

		_pMap.set_showmapscale = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.showmapscale = true;
				}
				else if (v == false
					 || (typeof (v) == "string" && v == "false")) {
					this.showmapscale = false;
				}
				else {
					return false;
				}

				if (this.bLoaded) {
					this._google_map_option_test = {
						mapTypeControl : this.showmapscale
					};

					this._google_map.setOptions(this._google_map_option_test);
				}
				return true;
			}
		};

		_pMap.set_showmapscale = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.showmapscale = true;
				}
				else if (v == false
					 || (typeof (v) == "string" && v == "false")) {
					this.showmapscale = false;
				}
				else {
					return false;
				}

				if (this.bLoaded) {
					this._google_map_option_test = {
						scaleControl : this.showmapscale
					};
					this._google_map.setOptions(this._google_map_option_test);
				}
				return true;
			}
		};

		_pMap.set_shownavigator = function (v) {
			if (v == null) {
				return false;
			}

			if (v != null) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.shownavigator = true;
				}
				else if (v == false
					 || (typeof (v) == "string" && v == "false")) {
					this.shownavigator = false;
				}
				else {
					return false;
				}

				if (this.bLoaded) {
					var myLatlng = new google.maps.LatLng(37.5640, 126.9751);
					this._google_map_option_test = {
						panControl : this.shownavigator
					};
					this._google_map.setOptions(this._google_map_option_test);
				}
				return true;
			}
		};

		_pMap.set_apikey = function (v) {
			if (v == null) {
				return false;
			}

			this.apikey = v;
		};
		_pMap._set_option = function () {
			var _mapType = this._getMapType();


			var myOptions = {
				center : new google.maps.LatLng(this.centerlocation.latitude, this.centerlocation.longitude), 
				mapTypeId : _mapType, 
				zoom : this.zoomlevel, 
				disableDefaultUI : true, 
				mapTypeControl : this.showmode, 
				mapTypeControlOptions : {
					style : google.maps.MapTypeControlStyle.DEFAULT, 
					position : this.modealign
				}, 
				scaleControl : this.showmapscale, 
				scaleControlOptions : {
					position : this.mapscalealign
				}, 
				panControl : this.shownavigator, 
				panControlOptions : {
					position : this.navigatoralign
				}, 
				zoomControl : this.showzoom, 
				zoomControlOptions : {
					position : this.zoomalign, 
					style : google.maps.ZoomControlStyle.SMALL
				}
			};
			return myOptions;
		};

		_pMap._getMapType = function (v) {
			var __maptype = google.maps.MapTypeId.ROADMAP;
			switch (v) {
				default:
				case 0:
					__maptype = google.maps.MapTypeId.ROADMAP;
					break;
				case 1:
					__maptype = google.maps.MapTypeId.SATELLITE;
					break;
				case 2:
					__maptype = google.maps.MapTypeId.HYBRID;
					break;
				case 3:
					__maptype = google.maps.MapTypeId.TERRAIN;
					break;
			}

			return __maptype;
		};

		_pMap.map_starter = function (v) {
			var map_type = this._getMapType();
			this._google_map.setOptions(this.setOptions());
		};

		_pMap.set_zoomlevel = function (v) {
			this.zoomlevel = Number(v.toString());
		};

		_pMap.set_enable = function (v) {
			if (v == null) {
				return false;
			}
			else if (v) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.enable = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.enable = false;
				}
				if (this.bLoaded) {
					this._google_map_option = {
						draggable : this.enable
					};
					this._google_map.setOptions(this._google_map_option);
				}
				return true;
			}
			else {
				return false;
			}
		};

		_pMap.set_visible = function (v) {
			if (v === undefined || v === null) {
				return;
			}
			v = nexacro._toBoolean(v);

			nexacro.Component.prototype.set_visible.call(this, v);

			var map_elem = this._map_elem;
			if (map_elem) {
				map_elem.setElementVisible(v);
			}
		};

		_pMap.set_showzoom = function (v) {
			if (v == null) {
				return false;
			}

			if (v) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.showzoom = true;
				}
				else if (v == false
					 || (typeof (v) == "string" && v == "false")) {
					this.showzoom = false;
				}
				else {
					return false;
				}
				if (this.bLoaded) {
					var myLatlng = new google.maps.LatLng(37.5640, 126.9751);
					this._google_map_option_test = {
						center : google.maps.LatLng(this.centerlocation.latitude, this.centerlocation.longitude), 
						zoomControl : this.showzoom
					};
					this._google_map.setOptions(this._google_map_option_test);
				}
				return true;
			}
		};


		_pMap.on_create_custom_style = function () {
			return new nexacro.Map_Style(this);
		};

		_pMap.on_create_custom_currentStyle = function () {
			return new nexacro.Map_CurrentStyle();
		};

		_pMap.on_apply_text = function () {
			var control_elem = this._control_element;
			if (this._control_element) {
				var text_elem = this._text_elem;
				if (!text_elem) {
					var text_elem = new nexacro.TextBoxElement(control_elem);
					this._text_elem = text_elem;
					text_elem.setElementSize(this._client_width, this._client_height);
					text_elem.setElementColor(this.currentstyle.color);
					text_elem.setElementFont(this.currentstyle.font);
					text_elem.setElementAlign(this.currentstyle.align);

					if (this._is_created) {
						text_elem.create();
					}
				}

				if (this.text != "") {
					text_elem.setElementText(this.text);
					this._text_width = -1;
					this._text_height = -1;
					if (this._img_elem) {
						this._updateElementPositions(this.currentstyle.align, this.currentstyle.imagealign);
					}
				}
				else {
					text_elem.setElementText("");
					this._text_width = 0;
					this._text_height = 0;
					if (this._img_elem) {
						this._updateElementPositions(this.currentstyle.align, this.currentstyle.imagealign);
					}
				}
			}
		};

		_pMap.on_apply_expr = function () {
			var control = this.getElement();
			var expr = this.expr;

			if (control && expr.length > 0) {
				expr = expr.trim().split(":");
				var len = expr.length;
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (len == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				exprfn = nexacro._createInlineFunc(conv_expr, []);

				if (exprfn) {
					try {
						this.set_text(exprfn.call(this));
					}
					catch (e) {
						return;
					}
				}
			}
		};

		_pMap.on_apply_prop_taborder = function () {
			var textElem = this._text_elem;
			if (textElem) {
				if (this.tabstop) {
					textElem.setElementTabIndex(this._taborder);
				}
				else {
					textElem.setElementTabIndex(-1);
				}
			}
		};
		_pMap.on_create_contents = function () {
			var control_elem = this.getElement();
			if (control_elem) {
				var curstyle = this.currentstyle;

				var map_elem = this._map_elem = new nexacro.Element(control_elem);
				map_elem.setElementSize(this._client_width, this._client_height);
				map_elem.setElementFont(curstyle.font);
				map_elem.setElementColor(curstyle.color);
				map_elem.setElementAlign(curstyle.align);
			}
		};

		_pMap.on_created_contents = function () {
			var map_elem = this._map_elem;
			if (map_elem) {
				map_elem.create();
			}

			if (this.expr) {
				this.on_apply_expr();
			}
		};

		_pMap.on_destroy_contents = function () {
			var map_elem = this._map_elem;
			if (map_elem) {
				map_elem.destroy();
				this._map_elem = null;
			}
		};

		_pMap.__onTextchanged = function (obj, e) {
		};

		_pMap.load = function (bUseSensor, nLatitude, nLongitude, constViewMode, nZoomLevel, retry) {
			if (nexacro.googlemaps_loaded == false) {
				if (!retry) {
					nexacro.load_googlemaps(this.apikey);
				}

				var target = this;
				nexacro.OnceCallbackTimer.callonce(target, function () {
					target.load(bUseSensor, nLatitude, nLongitude, constViewMode, nZoomLevel, true);
				}, 500);

				return;
			}

			this._id = nexacro.Device.makeID();
			var parentMap = nexacro.Device._userCreatedObj[this._id] = this;

			if (nZoomLevel) {
				var strlength = 0;
				try {
					strlength = nZoomLevel.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (nZoomLevel.length == 0) {
					return false;
				}

				var nzoom = 0;
				try {
					nzoom = Number(nZoomLevel.toString());
				}
				catch (e) {
					return false;
				}

				if (nzoom >= 0) {
					this.zoomlevel = nzoom;
				}
				else {
					return false;
				}
			}

			if (constViewMode) {
				if (constViewMode == 0
					 || (typeof (constViewMode) == "string" && constViewMode == "0")) {
					this.viewmode = 0;
				}
				else if (constViewMode == 1
					 || (typeof (constViewMode) == "string" && constViewMode == "1")) {
					this.viewmode = 1;
				}
				else if (constViewMode == 2
					 || (typeof (constViewMode) == "string" && constViewMode == "2")) {
					this.viewmode = 2;
				}
				else if (constViewMode == 3
					 || (typeof (constViewMode) == "string" && constViewMode == "3")) {
					this.viewmode = 3;
				}
				else {
					return false;
				}
			}
			else {
				this.viewmode = 0;
			}

			if (nLatitude && nLongitude) {
				var strlength = 0;
				try {
					strlength = nLatitude.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}
				if (strlength.length == 0) {
					return false;
				}
				try {
					strlength = nLongitude.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}
				if (strlength.length == 0) {
					return false;
				}

				var nlat = 0;
				var nlon = 0;
				try {
					nlat = Number(nLatitude.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlat) != (+nlat)) {
					return false;
				}
				try {
					nlon = Number(nLongitude.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlon) != (+nlon)) {
					return false;
				}
				this.centerlocation.latitude = nlat;
				this.centerlocation.longitude = nlon;

				_pMap.centerlocation = {
					latitude : nlat, 
					longitude : nlon
				};
			}

			if (bUseSensor) {
				if (bUseSensor == true
					 || (typeof (bUseSensor) == "string" && bUseSensor == "true")) {
					this.bSensor = true;
				}
				else if (bUseSensor == false
					 || (typeof (bUseSensor) == "string" && bUseSensor == "false")) {
					this.bSensor = false;
				}
				else {
					return false;
				}
			}
			else {
				this.bSensor = false;
			}

			var map_elem = this._map_elem;
			if (map_elem) {
				map_elem.create();
			}

			if (this.bSensor) {
				if (navigator.geolocation) {
					browserSupportFlag = true;
					navigator.geolocation.getCurrentPosition(function (position) {
						initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
						google_map.setCenter(initialLocation);
					}, function () {
						parentMap._apply_onerror({
							errorcode : "1503", 
							errormsg : "Device provider disable"
						});
					});
				}
				else if (google.gears) {
					var geo = google.gears.factory.create('beta.geolocation');
					geo.getCurrentPosition(function (position) {
						initialLocation = new google.maps.LatLng(position.latitude, position.longitude);

						myLatlng = new google.maps.LatLng(position.latitude, position.longitude);
						google_map.setCenter(initialLocation);
					}, function () {
						parentMap._apply_onerror({
							errorcode : "1503", 
							errormsg : "Device provider disable"
						});
					});
				}
			}
			else {
				var myLatlng = new google.maps.LatLng(this.centerlocation.latitude, this.centerlocation.longitude);
			}

			this._google_map_option = {
				center : myLatlng, 
				panControl : this.shownavigator, 
				zoomControl : this.showzoom, 
				mapTypeControl : this.showmode, 
				scaleControl : this.showmapscale, 
				zoom : this.zoomlevel, 
				disableDefaultUI : true, 
				draggable : this.enable, 
				mapTypeId : _pMap._getMapType(this.viewmode)
			};

			var google_map = new google.maps.Map(map_elem._handle, this._google_map_option);

			this._google_map = google_map;

			_pMap._google_map = this._google_map;

			for (var i = 0; i < this.itemsname.length; i++) {
				if (this.items[this.itemsname[i]]._type == 0
					 || this.items[this.itemsname[i]]._type == 1) {
					_pMap.addMarker(this.itemsname[i], this.items[this.itemsname[i]]);
				}
				else if (this.items[this.itemsname[i]]._type == 2) {
					_pMap.addPolyline(this.itemsname[i], this.items[this.itemsname[i]]);
				}
				else if (this.items[this.itemsname[i]]._type == 3) {
					_pMap.addPolygon(this.itemsname[i], this.items[this.itemsname[i]]);
				}
			}

			google.maps.event.addListener(google_map, 'click', function (e) {
				if (parentMap.onclick && parentMap.onclick._has_handlers && parentMap.enableevent) {
					parentMap.location.latitude = e.latLng.lat();
					parentMap.location.longitude = e.latLng.lng();

					var evt = new nexacro.MapClickEventInfo(parentMap, "onclick", parentMap.location);

					parentMap.onclick._fireEvent(this, evt);
				}

				for (var i = 0; i < _infowindowname.length; i++) {
					var markerName = _infowindowname[i];
					_infowindow[markerName].close();
				}

				return true;
			});

			google.maps.event.addListenerOnce(google_map, 'tilesloaded', function () {
				parentMap.bLoaded = true;
				parentMap._apply_onload();

				google.maps.event.addListenerOnce(google_map, 'tilesloaded', function () {
				});
			});

			google.maps.event.addListener(google_map, 'dragstart', function (e) {
			});

			google.maps.event.addListener(google_map, 'mouseout', function (e) {
			});

			google.maps.event.addListener(google_map, 'dragenter', function (e) {
			});

			google.maps.event.addListener(google_map, 'drag', function (e) {
			});

			google.maps.event.addListener(google_map, 'dragend', function (e) {
			});

			google.maps.event.addListener(google_map, 'center_changed', function (e) {
				if (parentMap.oncenterchanged && parentMap.oncenterchanged._has_handlers && parentMap.enableevent) {
					parentMap.centerlocation.latitude = google_map.getCenter().lat();
					parentMap.centerlocation.longitude = google_map.getCenter().lng();

					var evt = new nexacro.MapEventInfo(parentMap, "oncenterchanged", parentMap.centerlocation, parentMap.viewmode, parentMap.zoomlevel, parentMap.addresses, parentMap.coordinates);

					parentMap.oncenterchanged._fireEvent(this, evt);
				}

				return true;
			});

			google.maps.event.addListener(google_map, 'maptypeid_changed', function (e) {
				if (parentMap.onviewmodechanged && parentMap.onviewmodechanged._has_handlers && parentMap.enableevent) {
					var evt = new nexacro.MapEventInfo(parentMap, "onviewmodechanged", parentMap.centerlocation, parentMap.viewmode, parentMap.zoomlevel, parentMap.addresses, parentMap.coordinates);

					parentMap.onviewmodechanged._fireEvent(this, evt);
				}

				return true;
			});

			google.maps.event.addListener(google_map, 'zoom_changed', function (e) {
				if (parentMap.onzoomchanged && parentMap.onzoomchanged._has_handlers && parentMap.enableevent) {
					parentMap.zoomlevel = google_map.getZoom();

					var evt = new nexacro.MapEventInfo(parentMap, "onzoomchanged", parentMap.centerlocation, parentMap.viewmode, parentMap.zoomlevel, parentMap.addresses, parentMap.coordinates);

					parentMap.onzoomchanged._fireEvent(this, evt);
				}

				return true;
			});

			return true;
		};

		_pMap.setMarkerLoc = function (strItemID, lat, lng) {
			this.items[strItemID].location.latitude = lat;

			this.items[strItemID].location.longitude = lng;
		};

		_pMap.getAddress = function (nLatitude, nLongitude, nMaxResultCount, strLocale) {
			if (nLatitude == undefined || nLatitude == null) {
				return false;
			}

			if (nLongitude == undefined || nLongitude == null) {
				return false;
			}

			if (nMaxResultCount < 0) {
				return false;
			}

			if (nMaxResultCount == undefined || nMaxResultCount == null) {
				nMaxResultCount = 1;
			}

			var params = '{"nLatitude":"' + nLatitude
				 + '","nLongitude":"' + nLongitude + '","nMaxResultCount":"' + nMaxResultCount
				 + '","strLocale":"' + strLocale + '"}';

			var jsonstr = '{"id":' + this._id + ', "div":"NexacroMap", "method":"getAddress", "params":' + params + '}';
			nexacro.Device.exec(jsonstr);

			return true;
		};

		_pMap.getCoordinates = function (straddress) {
			if (straddress == undefined || straddress == null || straddress == "") {
				return false;
			}

			var params = '{"straddress":"' + straddress + '"}';
			var jsonstr = '{"id":' + this._id + ', "div":"NexacroMap", "method":"getCoordinates", "params":' + params + '}';

			nexacro.Device.exec(jsonstr);

			return true;
		};

		_pMap.addItem = function (strItemID, objComponent) {
			this._id = nexacro.Device.makeID();
			var parentMap = nexacro.Device._userCreatedObj[this._id] = this;

			if (strItemID == null || objComponent == null) {
				return false;
			}

			if (strItemID == "" || typeof (strItemID) == "undefined"
				 || objComponent == "" || objComponent == "undefined"
				 || strItemID.trim() == "") {
				return false;
			}
			if (typeof (this.items[strItemID]) != "undefined") {
				this._apply_onerror({
					errorcode : "1501", 
					errormsg : "item is already exist."
				});
				return false;
			}

			if (objComponent instanceof nexacro.MapMarker
				 || objComponent instanceof nexacro.MapPolyline
				 || objComponent instanceof nexacro.MapPolygon) {
				this.items[strItemID] = objComponent;
				this.items.push(strItemID);

				if (this.bLoaded) {
					if (objComponent._type == 0 || objComponent._type == 1) {
						_pMap.addMarker(strItemID, objComponent, parentMap, this);
					}
					else if (objComponent._type == 2) {
						_pMap.addPolyline(strItemID, objComponent);
					}
					else if (objComponent._type == 3) {
						_pMap.addPolygon(strItemID, objComponent);
					}
				}
				return true;
			}
			else {
				return false;
			}
		};

		_pMap.setMarkerOptions = function (markName, markObj) {
			if (typeof (_infowindow[markName]) == "undefined") {
				var temp_infowindow = new google.maps.InfoWindow({
					content : ""
				});
				_infowindowname.push(markName);
				_infowindow[markName] = temp_infowindow;
			}

			var markerOpt;
			if (markObj.style.image.length > 0) {
				var _v = markObj.style.image.toString().split(" ").join("");
				var img_path = "";

				if (_v.substring(0, 9).toLowerCase() == "%userapp%") {
					img_path = "../" + _v.substring(9, _v.length);
				}
				else {
					img_path = _v;
				}

				markerOpt = {
					position : new google.maps.LatLng(markObj.location.latitude, markObj.location.longitude), 
					title : markObj.text, 
					visible : markObj.visible, 
					icon : img_path, 
					draggable : markObj.draggable
				};
			}
			else {
				markerOpt = {
					position : new google.maps.LatLng(markObj.location.latitude, markObj.location.longitude), 
					title : markObj.text, 
					visible : markObj.visible, 
					draggable : markObj.draggable
				};
			}

			var contentString = "<div title=\"\" style='width:100%;height:100%;'><div title=\"\" style='vertical-align:" + markObj.style.align.valign + ";text-align:" + markObj.style.align.halign + ";'>" + markObj.text + "</div></div>";
			_infowindow[markName].setContent(contentString);

			google.maps.event.addListener(_items[markName], 'click', function (e) {
				if (_items[markName].title.length > 0) {
					_infowindow[markName].open(_pMap._google_map, _items[markName]);
				}
			});

			google.maps.event.addListener(_items[markName], 'drag', function (e) {
			});

			google.maps.event.addListener(_pMap._google_map, 'click', function (e) {
				_infowindow[markName].close();
			});

			if (!markerOpt.visible && _infowindow[markName] != null) {
				_infowindow[markName].close();
			}
			_items[markName].setOptions(markerOpt);
		};

		_pMap.addMarker = function (markName, markObj, parentMap, obj) {
			if (typeof (_infowindow[markName]) == "undefined") {
				var temp_infowindow = new google.maps.InfoWindow({
					content : ""
				});
				_infowindowname.push(markName);
				_infowindow[markName] = temp_infowindow;
			}

			var contentString = "<div title=\"\" style='width:100%;height:100%;'><div title=\"\" style='vertical-align:"
				 + markObj.style.align.valign
				 + ";text-align:"
				 + markObj.style.align.halign
				 + ";'>"
				 + markObj.text
				 + "</div></div>";
			_infowindow[markName].setContent(contentString);

			var marker;

			if (markObj.style.image.length > 0) {
				var _v = markObj.style.image.toString().split(" ").join("");
				var img_path = "";

				if (_v.substring(0, 9).toLowerCase() == "%userapp%") {
					img_path = _v.substring(9, _v.length);
					if (img_path.charAt(0) != "/") {
						img_path = "/" + img_path;
					}
					img_path = nexacro.System.userapppath + img_path;
				}
				else {
					img_path = _v;
				}

				marker = new google.maps.Marker({
					position : new google.maps.LatLng(markObj.location.latitude, markObj.location.longitude), 
					title : markObj.text, 
					visible : markObj.visible, 
					icon : img_path, 
					draggable : markObj.draggable
				});
			}
			else {
				marker = new google.maps.Marker({
					position : new google.maps.LatLng(markObj.location.latitude, markObj.location.longitude), 
					title : markObj.text, 
					visible : markObj.visible, 
					draggable : markObj.draggable
				});
			}

			google.maps.event.addListener(marker, 'dragstart', function (e) {
				if (parentMap.onmapdragstart && parentMap.onmapdragstart._has_handlers && parentMap.enableevent) {
					markObj.location.latitude = marker.getPosition().lat();
					markObj.location.longitude = marker.getPosition().lng();

					var evt = new nexacro.MapDragEventInfo(parentMap, "onmapdragstart", markObj.location);
					parentMap.onmapdragstart._fireEvent(obj, evt);
				}
			});

			google.maps.event.addListener(marker, 'drag', function (e) {
				if (parentMap.onmapdrag && parentMap.onmapdrag._has_handlers && parentMap.enableevent) {
					markObj.location.latitude = marker.getPosition().lat();
					markObj.location.longitude = marker.getPosition().lng();

					var evt = new nexacro.MapDragEventInfo(parentMap, "onmapdrag", markObj.location);
					parentMap.onmapdrag._fireEvent(obj, evt);
				}
			});

			google.maps.event.addListener(marker, 'dragend', function (e) {
				if (parentMap.onmapdragend && parentMap.onmapdragend._has_handlers && parentMap.enableevent) {
					markObj.location.latitude = marker.getPosition().lat();
					markObj.location.longitude = marker.getPosition().lng();

					var evt = new nexacro.MapDragEventInfo(parentMap, "onmapdragend", markObj.location);
					parentMap.onmapdragend._fireEvent(obj, evt);
				}
			});

			google.maps.event.addListener(marker, 'click', function (e) {
				if (marker.title.length > 0) {
					_infowindow[markName].open(_pMap._google_map, marker);
				}
				_pMap.gmap_onoverlayclick(markObj, e.latLng.lat(), e.latLng.lng(), e.pixel.x, e.pixel.y);
			});

			google.maps.event.addListener(marker, 'drag', function (e) {
			});

			marker.setMap(_pMap._google_map);
			_pMap._google_map.setCenter(marker.getPosition());
			_itemsname.push(markName);
			_items[markName] = marker;
			markObj._map = this;
			markObj._name = markName;
		};

		_pMap.addPolygon = function (polygonName, polygonObj) {
			var _path = new Array();
			var _lat_lng_arr, _lat, _lng;

			_lat_lng_arr = polygonObj.locationdata.toString().split("]");
			for (var i = 0; i < (_lat_lng_arr.length - 1); i++) {
				_lat = _lat_lng_arr[i].toString().split(",")[0].split(" ").join().substring(1);
				_lng = _lat_lng_arr[i].toString().split(",")[1].split(" ").join().substring(1);
				if (_lat.length > 0 && _lng.length > 0) {
					_path.push(new google.maps.LatLng(Number(_lat), Number(_lng)));
				}
			}

			var _color_stroke;
			if (typeof (nexacro._xreNamedColorList[polygonObj.style.strokepen.color]) != "undefined") {
				_color_stroke = nexacro._xreNamedColorList[polygonObj.style.strokepen.color]
					 + "FF";
			}
			else {
				_color_stroke = polygonObj.style.strokepen.color;
			}

			var _color_fill;
			if (typeof (nexacro._xreNamedColorList[polygonObj.style.fillbrush.color]) != "undefined") {
				_color_fill = nexacro._xreNamedColorList[polygonObj.style.fillbrush.color]
					 + "FF";
			}
			else {
				_color_fill = polygonObj.style.fillbrush.color;
			}

			var _alpha_stroke_1;
			var _alpha_stroke = 1.0;
			if (_color_stroke.length > 7) {
				_alpha_stroke_1 = parseInt(_color_stroke.substring(7), 16);
				_alpha_stroke = _alpha_stroke_1 / 255.0;
			}
			var _alpha_fill_1;
			var _alpha_fill = 1.0;
			if (_color_fill.length > 7) {
				_alpha_fill_1 = parseInt(_color_fill.substring(7), 16);
				_alpha_fill = _alpha_fill_1 / 255.0;
			}

			var polygonPath = new google.maps.Polygon({
				paths : _path, 
				strokeColor : _color_stroke.substring(0, 7), 
				strokeOpacity : _alpha_stroke, 
				strokeWeight : polygonObj.style.strokepen.width, 
				fillColor : _color_fill.substring(0, 7), 
				fillOpacity : _alpha_fill, 
				visible : polygonObj.visible
			});

			polygonPath.setMap(_pMap._google_map);

			_itemsname.push(polygonName);
			_items[polygonName] = polygonPath;

			polygonObj._map = this;
			polygonObj._name = polygonName;

			google.maps.event.addListener(_items[polygonName], 'click', function (e) {
				_pMap.gmap_onoverlayclick(polygonObj, e.latLng.lat(), e.latLng.lng(), 0, 0);
			});
		};

		_pMap.setPolylineOptions = function (polylineName, polylineObj) {
			var _path = new Array();
			var _lat_lng_arr, _lat, _lng;

			_lat_lng_arr = polylineObj.locationdata.toString().split("]");
			for (var i = 0; i < (_lat_lng_arr.length - 1); i++) {
				_lat = _lat_lng_arr[i].toString().split(",")[0].split(" ").join().substring(1);
				_lng = _lat_lng_arr[i].toString().split(",")[1].split(" ").join().substring(1);
				if (_lat.length > 0 && _lng.length > 0) {
					_path.push(new google.maps.LatLng(Number(_lat), Number(_lng)));
				}
			}

			var _color;
			if (typeof (this.parent.nexacro._xreNamedColorList[polylineObj.style.strokepen.color]) != "undefined") {
				_color = this.parent.nexacro._xreNamedColorList[polylineObj.style.strokepen.color]
					 + "FF";
			}
			else {
				_color = polylineObj.style.strokepen.color;
			}

			var _alpha_1;
			var _alpha = 1.0;
			if (_color.length > 7) {
				var _alpha_1 = parseInt(_color.substring(7), 16);
				var _alpha = _alpha_1 / 255.0;
			}
			var polyLineOpt = {
				path : _path, 
				strokeColor : _color.substring(0, 7), 
				strokeOpacity : _alpha, 
				strokeWeight : polylineObj.style.strokepen.width, 
				visible : polylineObj.visible
			};

			google.maps.event.addListener(_items[polylineName], 'click', function (e) {
				__parent.gmap_onoverlayclick(_items[polylineName], e.latLng.lat(), e.latLng.lng(), 0, 0);
			});

			_items[polylineName].setOptions(polyLineOpt);
		};

		_pMap.addPolyline = function (polylineName, polylineObj) {
			var _path = new Array();
			var _lat_lng_arr, _lat, _lng;

			_lat_lng_arr = polylineObj.locationdata.toString().split("]");
			for (var i = 0; i < (_lat_lng_arr.length - 1); i++) {
				_lat = _lat_lng_arr[i].toString().split(",")[0].split(" ").join().substring(1);
				_lng = _lat_lng_arr[i].toString().split(",")[1].split(" ").join().substring(1);
				if (_lat.length > 0 && _lng.length > 0) {
					_path.push(new google.maps.LatLng(Number(_lat), Number(_lng)));
				}
			}

			var _color;
			if (typeof (nexacro._xreNamedColorList[polylineObj.style.strokepen.color]) != "undefined") {
				_color = nexacro._xreNamedColorList[polylineObj.style.strokepen.color]
					 + "FF";
			}
			else {
				_color = polylineObj.style.strokepen.color;
			}

			var _alpha_1;
			var _alpha = 1.0;
			if (_color.length > 7) {
				var _alpha_1 = parseInt(_color.substring(7), 16);
				var _alpha = _alpha_1 / 255.0;
			}
			var polyLinePath = new google.maps.Polyline({
				path : _path, 
				strokeColor : _color.substring(0, 7), 
				strokeOpacity : _alpha, 
				strokeWeight : polylineObj.style.strokepen.width, 
				visible : polylineObj.visible
			});

			polyLinePath.setMap(_pMap._google_map);

			_itemsname.push(polylineName);
			_items[polylineName] = polyLinePath;

			polylineObj._map = this;
			polylineObj._name = polylineName;

			google.maps.event.addListener(_items[polylineName], 'click', function (e) {
				_pMap.gmap_onoverlayclick(polylineObj, e.latLng.lat(), e.latLng.lng(), 0, 0);
			});
		};

		_pMap.setPolygonOptions = function (polygonName, polygonObj) {
			var _path = new Array();
			var _lat_lng_arr, _lat, _lng, i;

			_lat_lng_arr = polygonObj.locationdata.toString().split("]");
			for (i = 0; i < (_lat_lng_arr.length - 1); i++) {
				_lat = _lat_lng_arr[i].toString().split(",")[0].split(" ").join().substring(1);
				_lng = _lat_lng_arr[i].toString().split(",")[1].split(" ").join().substring(1);
				if (_lat.length > 0 && _lng.length > 0) {
					_path.push(new google.maps.LatLng(Number(_lat), Number(_lng)));
				}
			}
			var _color_stroke;
			if (typeof (this.parent.nexacro._xreNamedColorList[polygonObj.style.strokepen.color]) != "undefined") {
				_color_stroke = this.parent.nexacro._xreNamedColorList[polygonObj.style.strokepen.color]
					 + "FF";
			}
			else {
				_color_stroke = polygonObj.style.strokepen.color;
			}

			var _color_fill;
			if (typeof (this.parent.nexacro._xreNamedColorList[polygonObj.style.fillbrush.color]) != "undefined") {
				_color_fill = this.parent.nexacro._xreNamedColorList[polygonObj.style.fillbrush.color]
					 + "FF";
			}
			else {
				_color_fill = polygonObj.style.fillbrush.color;
			}

			var _alpha_stroke_1;
			var _alpha_stroke = 1.0;
			if (_color_stroke.length > 7) {
				_alpha_stroke_1 = parseInt(_color_stroke.substring(7), 16);
				_alpha_stroke = _alpha_stroke_1 / 255.0;
			}
			var _alpha_fill_1;
			var _alpha_fill = 1.0;
			if (_color_fill.length > 7) {
				_alpha_fill_1 = parseInt(_color_fill.substring(7), 16);
				_alpha_fill = _alpha_fill_1 / 255.0;
			}
			var polygonOpt = {
				paths : _path, 
				strokeColor : _color_stroke.substring(0, 7), 
				strokeOpacity : _alpha_stroke, 
				strokeWeight : polygonObj.style.strokepen.width, 
				fillColor : _color_fill.substring(0, 7), 
				fillOpacity : _alpha_fill, 
				visible : polygonObj.visible
			};

			google.maps.event.addListener(_items[polygonName], 'click', function (e) {
				__parent.gmap_onoverlayclick(_items[polygonName], e.latLng.lat(), e.latLng.lng(), 0, 0);
			});
			_items[polygonName].setOptions(polygonOpt);
		};

		_pMap.removeItem = function (strItemID) {
			if (strItemID == null) {
				return false;
			}
			if (strItemID == "" || typeof (strItemID) == "undefined") {
				return false;
			}

			if (typeof (this.items[strItemID]) == "undefined") {
				this._apply_onerror({
					errorcode : "1502", 
					errormsg : "item is not exist."
				});
				return false;
			}
			else {
				delete this.items[strItemID];

				for (var i = 0; i < this.items.length; i++) {
					if (this.items[i] == strItemID) {
						var position = this.items.indexOf(this.items[i]);
						this.items.splice(position, i + 1);
					}
				}

				if (this.bLoaded) {
					_pMap._removeItem(strItemID);
				}

				return true;
			}
		};

		_pMap._removeItem = function (itemname) {
			var i = 0;
			_items[itemname].setMap(null);
			if (typeof (_items[itemname].title) != "undefined") {
				delete _infowindow[itemname];
				for (i = 0; i < _infowindow.length; i++) {
					if (_infowindowname[i] == itemname) {
						_infowindowname.splice(i + 1, i + 1);
					}
				}
			}
			delete _items[itemname];
			for (i = 0; i < _itemsname.length; i++) {
				if (_itemsname[i] == itemname) {
					_itemsname.splice(i + 1, i + 1);
				}
			}
			return true;
		};


		_pMap.gmap_ondrag = function (lat, lng) {
			this.on_fire_ondragstart(this, new nexacro.MapDragEventInfo("ondrag"));
		};

		_pMap.gmap_ondragenter = function (objData) {
			this._fire_ondragenter(this, new nexacro.MapDragEventInfo("ondragenter"));
		};

		_pMap.gmap_ondragmove = function (lat, lng) {
			this._location.latitude = lat;
			this._location.longitude = lng;

			this.centerlocation.latitude = this._location.latitude;
			this.centerlocation.longitude = this._location.longitude;
		};

		_pMap.gmap_ondragleave = function (objData) {
			this._fire_ondragleave(this, new nexacro.MapDragEventInfo("ondragleave"));
		};

		_pMap.gmap_dragend = function (lat, lng) {
			this._location.latitude = lat;
			this._location.longitude = lng;
		};


		_pMap.gmap_onclick = function (lat, lng, x, y) {
			this._location.latitude = lat;
			this._location.longitude = lng;
			this._pixel.x = x;
			this._pixel.y = y;
			this.kindClick = "normalclick";
		};

		_pMap.gmap_onoverlayclick = function (fromobj, lat, lng, x, y) {
			this._location.latitude = lat;
			this._location.longitude = lng;
			this._pixel.x = x;
			this._pixel.y = y;
			this.overlayfromobj = fromobj;
			this.kindClick = "overlayclick";
		};

		_pMap._on_click = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY) {
		};

		_pMap._on_sys_click = function (node, e, bubble) {
			var e = e.changedTouches ? e.changedTouches[0] : e;
			nexacro.ajaxlog("_on_sys_click" + e.screenX + "," + e.screenY
				 + ":" + node + ":" + e + ":" + bubble + "]");

			if (this.$IsReadyFireEvent() && this.$isEnable()
				 && this.enableevent) {
				if (this.kindClick == "normalclick") {
					this._fire_onclick(node._comp, e);
				}
				else {
					if (this.kindClick == "overlayclick"
						 && typeof (this.overlayfromobj) != "undefined") {
						this._fire_onoverlayclick(node._comp, e);
					}
				}
			}
			return true;
		};

		_pMap._fire_onclick = function (obj, e) {
			if (this.onclick._has_handlers) {
				this.bClicked = false;
				var evt = new nexacro.MapClickEventInfo(this, obj, "onclick", e, this._location, this._pixel);
				return this.onclick._fireEvent(this, evt);
			}
			else {
				this.bClicked = true;
			}

			return false;
		};

		_pMap._fire_onoverlayclick = function (obj, e) {
			if (this.onoverlayclick && this.onoverlayclick._has_handlers) {
				var evt = new nexacro.MapClickEventInfo(this, this.overlayfromobj, "onoverlayclick", e, this._location, this._pixel);
				return this.onoverlayclick._fireEvent(this, evt);
			}
		};
		_pMap._apply_onload = function () {
			if (this.enable == false) {
			}
			else if (this.enable == true) {
			}
			this.on_fire_onload(this);
		};

		_pMap.on_fire_onload = function (obj) {
			if (this.onload && this.onload._has_handlers) {
				var evt = new nexacro.MapEventInfo(obj, "onload", this.centerlocation, this.viewmode, this.zoomlevel, this.addresses, this.coordinates);
				return this.onload._fireEvent(this, evt);
			}
			return true;
		};

		_pMap._onrecvsuccess = function (objData) {
			if (objData.latitude == undefined || objData.latitude == null || objData.latitude == ""
				 || objData.longitude == undefined || objData.longitude == null || objData.longitude == "") {
				this.on_fire_onrecvsuccess(this, objData.eventid, objData.addresses, this.coordinates);
			}
			else {
				this.coordinates.latitude = objData.latitude;
				this.coordinates.longitude = objData.longitude;

				this.on_fire_onrecvsuccess(this, objData.eventid, objData.addresses, this.coordinates);
			}
		};

		_pMap.on_fire_onrecvsuccess = function (obj, id, addresses, coordinates) {
			var evt = new nexacro.MapEventInfo(obj, id, this.centerlocation, this.viewmode, this.zoomlevel, addresses, this.coordinates);
			return this.onrecvsuccess._fireEvent(this, evt);
		};

		_pMap._apply_onerror = function (objData) {
			var _objData = eval(objData);
			this.on_fire_onerror(this, _objData);
		};

		_pMap.on_fire_onerror = function (obj, e) {
			if (this.onerror && this.onerror._has_handlers) {
				var evt = new nexacro.MapErrorEventInfo(this, "onerror", e.errorcode, e.errormsg);
				return this.onerror._fireEvent(this, evt);
			}
			return true;
		};

		_pMap.on_change_containerRect = function (width, height) {
			var map_elem = this._map_elem;
			if (map_elem) {
				map_elem.setElementSize(width, height);
			}
		};

		_pMap.__onDragEnter = function (obj, e) {
			console.debug("__ondragEnter");
		};

		delete _pMap;
	}


	if (!nexacro.MapMarker) {
		nexacro.MapMarker = function (name, obj) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;
			this.name = name || "";
			this._type = 0;
			this.enableevent = true;

			this.location = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 
				latitude : 0, 
				longitude : 0, 
				set_latitude : function (lat) {
					var strlength = 0;
					try {
						strlength = lat.toString().split(" ").join("");
					}
					catch (e) {
						return false;
					}

					if (strlength.length == 0) {
						return false;
					}

					var nlat = 0;
					try {
						nlat = Number(lat.toString());
					}
					catch (e) {
						return false;
					}

					if ((+nlat) != (+nlat)) {
						return false;
					}
					this.latitude = nlat;

					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setMarkerOptions(__parent._name, __parent);
					}
					return true;
				}, 
				set_longitude : function (lon) {
					var strlength = 0;
					try {
						strlength = lon.toString().split(" ").join("");
					}
					catch (e) {
						return false;
					}

					if (strlength.length == 0) {
						return false;
					}

					var nlon = 0;
					try {
						nlon = Number(lon.toString());
					}
					catch (e) {
						return false;
					}

					if ((+nlon) != (+nlon)) {
						return false;
					}
					this.longitude = nlon;
					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setMarkerOptions(__parent._name, __parent);
					}
					return true;
				}, 
				$s : function (name, fnname, val) {
					var fn = this[fnname];
					if (fn) {
						return fn.call(this, val);
					}

					return (this[name] = val);
				}
			};
			this.text = "";
			this.visible = true;
			this.draggable = false;
			this.style = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 
				align : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					halign : "center", 
					valign : "middle", 
					set_halign : function (v) {
						var _v = v.toString().split(" ").join("").toLowerCase();
						if (_v == "left" || _v == "center" || _v == "right") {
							this.halign = _v;
							var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];

							if (__parent._map != null) {
								__parent._map.setMarkerOptions(__parent._name, __parent);
							}
							return true;
						}
						else {
							return false;
						}
					}, 
					set_valign : function (v) {
						var _v = v.toString().split(" ").join("").toLowerCase();
						if (_v == "top" || _v == "middle" || _v == "bottom") {
							this.valign = _v;
							var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
							if (__parent._map != null) {
								__parent._map.setMarkerOptions(__parent._name, __parent);
							}
							return true;
						}
						else {
							return false;
						}
					}, 
					$s : function (name, fnname, val) {
						var fn = this[fnname];
						if (fn) {
							return fn.call(this, val);
						}

						return (this[name] = val);
					}
				}, 
				image : "", 

				set_align : function (v) {
					var v_arr = v.split(" ");
					var ret = true;
					if (v_arr.length != 2) {
						return false;
					}
					ret = this.align.set_halign(v_arr[0]);
					if (!ret) {
						return ret;
					}
					ret = this.align.set_valign(v_arr[1]);
					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setMarkerOptions(__parent._name, __parent);
					}
					return ret;
				}, 

				set_image : function (v) {
					this._type = 1;
					this.image = v;
					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setMarkerOptions(__parent._name, __parent);
					}
					return true;
				}, 
				$s : function (name, fnname, val) {
					var fn = this[fnname];
					if (fn) {
						return fn.call(this, val);
					}

					return (this[name] = val);
				}
			};

			this._map = null;
			this._name = null;

			this.location.set_parentID(this._id);
			this.style.set_parentID(this._id);
			this.style.align.set_parentID(this._id);
		};
		var _pMapMarker = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapMarker);
		nexacro.MapMarker.prototype = _pMapMarker;
		_pMapMarker._type_name = "MapMarker";

		_pMapMarker.set_location = function (v) {
			if (v != null) {
				var _v_arr = v.split(",");
				if (_v_arr.length != 2) {
					return false;
				}
				var lat = _v_arr[0];
				var lon = _v_arr[1];

				var strlength = 0;
				try {
					strlength = lat.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (strlength.length == 0) {
					return false;
				}

				try {
					strlength = lon.toString().split(" ").join("");
				}
				catch (e) {
					return false;
				}

				if (strlength.length == 0) {
					return false;
				}

				var nlat = 0;
				var nlon = 0;
				try {
					nlat = Number(lat.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlat) != (+nlat)) {
					return false;
				}
				try {
					nlon = Number(lon.toString());
				}
				catch (e) {
					return false;
				}

				if ((+nlon) != (+nlon)) {
					return false;
				}
				this.location.latitude = nlat;
				this.location.longitude = nlon;
			}
			else {
				return false;
			}

			if (this._map != null) {
				this._map.setMarkerOptions(this._name, this);
			}
			return true;
		};

		_pMapMarker.set_text = function (v) {
			this.text = v.replace(new RegExp('\r?\n', 'g'), '<br>');
			if (this._map != null) {
				this._map.setMarkerOptions(this._name, this);
			}
			return true;
		};

		_pMapMarker.set_draggable = function (v) {
			if (v == null) {
				return false;
			}
			else if (v) {
				if (v == true || (typeof (v) == "string" && v == "true")) {
					this.draggable = true;
				}
				else if (v == false || (typeof (v) == "string" && v == "false")) {
					this.draggable = false;
				}
			}
			else {
				return false;
			}
		};

		_pMapMarker.set_visible = function (v) {
			if (v == true || (typeof (v) == "string" && v == "true")) {
				this.visible = true;
			}
			else if (v == false || (typeof (v) == "string" && v == "false")) {
				this.visible = false;
			}
			else {
				return false;
			}
			if (this._map != null) {
				this._map.setMarkerOptions(this._name, this);
			}
			return true;
		};

		_pMapMarker.set_style = function (v) {
			var v_arr = v.split(";");
			var i = 0;
			var _v_arr;
			var ret = true;
			for (i = 0; i < v_arr.length; i++) {
				_v_arr = v_arr[i].split(":");
				if (_v_arr.length != 2) {
					return false;
				}
				switch (_v_arr[0].split(" ").join("").toLowerCase()) {
					case "align":
						ret = this.style.set_align(_v_arr[1]);
						break;
					case "image":
						ret = this.style.set_image(_v_arr[1]);
						break;
					default:
						ret = false;
						break;
				}
				if (!ret) {
					return ret;
				}
			}
			if (this._map != null) {
				this._map.setMarkerOptions(this._name, this);
			}
			return ret;
		};

		delete _pMapMarker;
	}


	if (!nexacro.MapPolyline) {
		nexacro.MapPolyline = function (name, obj) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;
			this.name = name || "";

			this._type = 2;
			this.locationdata = "";
			this.visible = true;
			this.enableevent = true;
			this.style = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 
				strokepen : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					width : "", 
					color : "", 
					set_width : function (v) {
						var nWidth = 0;
						try {
							nWidth = Number(v.toString());
						}
						catch (e) {
							return false;
						}

						if ((+nWidth) != (+nWidth)) {
							return false;
						}
						this.width = nWidth;
						var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
						if (__parent._map != null) {
							__parent._map.setPolylineOptions(__parent._name, __parent);
						}
						return true;
					}, 
					set_color : function (v) {
						this.color = v;

						var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
						if (__parent._map != null) {
							__parent._map.setPolylineOptions(__parent._name, __parent);
						}
						return true;
					}, 
					$s : function (name, fnname, val) {
						var fn = this[fnname];
						if (fn) {
							return fn.call(this, val);
						}

						return (this[name] = val);
					}
				}, 
				set_strokepen_width : function (v) {
					var ret = true;
					ret = this.strokepen.set_width(v);

					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setPolylineOptions(__parent._name, __parent);
					}

					return ret;
				}, 
				set_strokepen_color : function (v) {
					var ret = true;
					ret = this.strokepen.set_color(v);

					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setPolylineOptions(__parent._name, __parent);
					}
					return ret;
				}, 

				$s : function (name, fnname, val) {
					var fn = this[fnname];
					if (fn) {
						return fn.call(this, val);
					}

					return (this[name] = val);
				}
			};

			this._map = null;
			this._name = null;

			this.style.set_parentID(this._id);
			this.style.strokepen.set_parentID(this._id);
		};
		var _pMapPolyline = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapPolyline);
		nexacro.MapPolyline.prototype = _pMapPolyline;
		_pMapPolyline._type_name = "MapPolyline";

		_pMapPolyline.set_locationdata = function (v) {
			var _lat_lng_arr;

			_lat_lng_arr = v.toString().split("]");

			if (!(_lat_lng_arr.length >= 2)) {
				return false;
			}

			this.locationdata = v;
			if (this._map != null) {
				this._map.setPolylineOptions(this._name, this);
			}
			return true;
		};

		_pMapPolyline.set_visible = function (v) {
			if (v == true || (typeof (v) == "string" && v == "true")) {
				this.visible = true;
			}
			else if (v == false || (typeof (v) == "string" && v == "false")) {
				this.visible = false;
			}
			else {
				return false;
			}
			if (this._map != null) {
				this._map.setPolylineOptions(this._name, this);
			}
			return true;
		};

		_pMapPolyline.set_style = function (v) {
			var v_arr = v.split(";");
			var i = 0;
			var _v_arr;
			var ret = true;
			for (i = 0; i < v_arr.length; i++) {
				_v_arr = v_arr[i].split(":");
				if (_v_arr.length != 2) {
					return false;
				}
				switch (_v_arr[0].split(" ").join("").toLowerCase()) {
					case "strokepen":
						ret = this.style.set_strokepen(_v_arr[1]);
						break;
					default:
						ret = false;
						break;
				}

				if (!ret) {
					return ret;
				}
			}
			if (this._map != null) {
				this._map.setPolylineOptions(this._name, this);
			}
			return ret;
		};

		delete _pMapPolyline;
	}


	if (!nexacro.MapPolygon) {
		nexacro.MapPolygon = function (name, obj) {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;
			this.name = name || "";

			this._type = 3;
			this.locationdata = "";
			this.visible = true;
			this.enableevent = true;
			this.style = {
				_MapMarkerID : 0, 
				set_parentID : function (_id) {
					this._MapMarkerID = _id;
				}, 
				strokepen : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					width : "", 
					color : "", 
					set_width : function (v) {
						var nWidth = 0;
						try {
							nWidth = Number(v.toString());
						}
						catch (e) {
							return false;
						}

						if ((+nWidth) != (+nWidth)) {
							return false;
						}
						this.width = nWidth;
						var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
						if (__parent._map != null) {
							__parent._map.setPolygonOptions(__parent._name, __parent);
						}
						return true;
					}, 
					set_color : function (v) {
						this.color = v;
						var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
						if (__parent._map != null) {
							__parent._map.setPolygonOptions(__parent._name, __parent);
						}
						return true;
					}, 
					$s : function (name, fnname, val) {
						var fn = this[fnname];
						if (fn) {
							return fn.call(this, val);
						}

						return (this[name] = val);
					}
				}, 
				set_strokepen : function (v) {
					var v_arr = v.split(" ");
					var ret = true;
					if (v_arr.length != 2) {
						ret = false;
					}
					else {
						ret = this.strokepen.set_width(v_arr[0]);
						if (!ret) {
							return ret;
						}
						ret = this.strokepen.set_color(v_arr[1]);
					}
					var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
					if (__parent._map != null) {
						__parent._map.setPolygonOptions(__parent._name, __parent);
					}
					return ret;
				}, 

				fillbrush : {
					_MapMarkerID : 0, 
					set_parentID : function (_id) {
						this._MapMarkerID = _id;
					}, 
					color : "", 
					set_color : function (v) {
						this.color = v;
						var __parent = nexacro.Device._userCreatedObj[this._MapMarkerID];
						if (__parent._map != null) {
							__parent._map.setPolygonOptions(__parent._name, __parent);
						}
						return true;
					}, 
					$s : function (name, fnname, val) {
						var fn = this[fnname];
						if (fn) {
							return fn.call(this, val);
						}

						return (this[name] = val);
					}
				}, 
				set_fillbrush : function (v) {
					return this.fillbrush.set_color(v);
				}, 
				$s : function (name, fnname, val) {
					var fn = this[fnname];
					if (fn) {
						return fn.call(this, val);
					}

					return (this[name] = val);
				}
			};

			this._map = null;
			this._name = null;

			this.style.set_parentID(this._id);
			this.style.strokepen.set_parentID(this._id);
			this.style.fillbrush.set_parentID(this._id);
		};
		var _pMapPolygon = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapPolygon);
		nexacro.MapPolygon.prototype = _pMapPolygon;
		_pMapPolygon._type_name = "MapPolygon";

		_pMapPolygon.set_locationdata = function (v) {
			var _lat_lng_arr;

			_lat_lng_arr = v.toString().split("]");

			if (!(_lat_lng_arr.length >= 2)) {
				return false;
			}

			this.locationdata = v;
			if (this._map != null) {
				this._map.setPolygonOptions(this._name, this);
			}
			return true;
		};

		_pMapPolygon.set_visible = function (v) {
			if (v == true || (typeof (v) == "string" && v == "true")) {
				this.visible = true;
			}
			else if (v == false || (typeof (v) == "string" && v == "false")) {
				this.visible = false;
			}
			else {
				return false;
			}
			if (this._map != null) {
				this._map.setPolygonOptions(this._name, this);
			}
			return true;
		};

		_pMapPolygon.set_style = function (v) {
			var v_arr = v.split(";");
			var i = 0;
			var _v_arr;
			var ret = true;

			for (i = 0; i < v_arr.length; i++) {
				_v_arr = v_arr[i].split(":");
				if (_v_arr.length != 2) {
					return false;
				}
				switch (_v_arr[0].split(" ").join("").toLowerCase()) {
					case "strokepen":
						ret = this.style.set_strokepen(_v_arr[1]);
						break;
					case "fillbrush":
						ret = this.style.set_fillbrush(_v_arr[1]);
						break;
					default:
						ret = false;
						break;
				}
				if (!ret) {
					return ret;
				}
			}
			if (this._map != null) {
				this._map.setPolygonOptions(this._name, this);
			}
			return ret;
		};

		delete _pMapPolygon;
	}
}

else {
	if (!nexacro.Map) {
		nexacro.Map = function (id, position, left, top, width, height, right, bottom, parent) {
			nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);
		};
		var _pMap = nexacro._createPrototype(nexacro.Component, nexacro.Map);
		nexacro.Map.prototype = _pMap;

		_pMap._type = "nexacroMap";
		_pMap._type_name = "Map";

		_pMap.set_text = function (v) {
		};
		_pMap.set_viewmode = function (v) {
		};
		_pMap.set_zoomlevel = function (v) {
		};
		_pMap.set_showzoom = function (v) {
		};
		_pMap.set_shownavigator = function (v) {
		};
		_pMap.set_showcompass = function (v) {
		};
		_pMap.set_enable = function (v) {
		};
		_pMap.set_visible = function (v) {
		};
		_pMap.set_showmapscale = function (v) {
		};
		_pMap.set_centerlocation = function (v) {
		};
		_pMap.set_showmode = function (v) {
		};
		_pMap.set_zoomalign = function (v) {
		};
		_pMap.set_navigatoralign = function (v) {
		};
		_pMap.set_mapscalealign = function (v) {
		};
		_pMap.set_draggable = function (v) {
		};

		_pMap.load = function (bUseSensor, nLatitude, nLongitude, constViewMode, nZoomLevel) {
		};
		_pMap.setMarkerLoc = function (strItemID, lat, lng) {
		};
		_pMap.getAddress = function (nLatitude, nLongitude, nMaxResultCount, strLocale) {
		};
		_pMap.getCoordinates = function (straddress) {
		};
		_pMap.addItem = function (strItemID, objComponent) {
		};
		_pMap.setMarkerOptions = function (markName, markObj) {
		};
		_pMap.addMarker = function (elem, markName, markObj) {
		};
		_pMap.addPolyline = function (elem, polylineName, polylineObj) {
		};
		_pMap.removeItem = function (strItemID) {
		};
		_pMap._removeItem = function (elem, itemname) {
		};

		delete _pMap;
	}


	if (!nexacro.MapMarker) {
		nexacro.MapMarker = function (name, obj) {
		};

		var _pMapMarker = nexacro.MapMarker.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.MapMarker);
		_pMapMarker._type_name = "MapMarker";

		_pMapMarker.set_location = function (v) {
		};
		_pMapMarker.set_text = function (v) {
		};
		_pMapMarker.set_draggable = function (v) {
		};
		_pMapMarker.set_visible = function (v) {
		};
		_pMapMarker.set_style = function (v) {
		};

		delete _pMapMarker;
	}


	if (!nexacro.MapPolyline) {
	}

	if (!nexacro.MapPolygon) {
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Sketch) {
	nexacro.SketchEventInfo = function (obj, id) {
		nexacro.Event.call(this, obj, id);
	};
	var _pSketchEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.SketchEventInfo);
	nexacro.SketchEventInfo.prototype = _pSketchEventInfo;
	_pSketchEventInfo._type_name = "SketchEventInfo";

	delete _pSketchEventInfo;
	_pSketchEventInfo = null;

	nexacro.SketchLoadEventInfo = function (obj, id, url) {
		this.id = this.eventid = id || "onload";
		this.fromobject = this.fromreferenceobject = obj;
		this.url = url;
	};
	var _pSketchLoadEventInfo = nexacro._createPrototype(nexacro.LoadEventInfo, nexacro.SketchLoadEventInfo);
	nexacro.SketchLoadEventInfo.prototype = _pSketchLoadEventInfo;
	_pSketchLoadEventInfo._type_name = "SketchLoadEventInfo";

	delete _pSketchLoadEventInfo;
	_pSketchLoadEventInfo = null;

	nexacro.SketchErrorEventInfo = function (obj, id, fireerrorcode, errormsg, errortype, locationuri, imageurl, errstatus) {
		this.id = this.eventid = id || "onerror";
		this.errormsg = errormsg;
		this.errorobj = obj;
		this.errortype = errortype;
		this.locationuri = locationuri;
		this.requesturi = imageurl;
		this.statuscode = errstatus;
	};
	var _pSketchErrorEventInfo = nexacro._createPrototype(nexacro.ErrorEventInfo, nexacro.SketchErrorEventInfo);
	nexacro.SketchErrorEventInfo.prototype = _pSketchErrorEventInfo;
	_pSketchErrorEventInfo._type_name = "SketchErrorEventInfo";

	delete _pSketchErrorEventInfo;
	_pSketchErrorEventInfo = null;

	nexacro.SketchSuccessEventInfo = function (obj, id, handle) {
		nexacro.SketchEventInfo.call(this, obj, id || "onsuccess");
		this.handle = handle;
	};
	var _pSketchSuccessEventInfo = nexacro._createPrototype(nexacro.SketchEventInfo, nexacro.SketchSuccessEventInfo);
	nexacro.SketchSuccessEventInfo.prototype = _pSketchSuccessEventInfo;
	_pSketchSuccessEventInfo._type_name = "SketchSuccessEventInfo";

	delete _pSketchSuccessEventInfo;
	_pSketchSuccessEventInfo = null;

	nexacro.SketchCharEventInfo = function (obj, id, chartext, pretext, posttext) {
		this.id = this.eventid = id || "onchar";
		this.fromobject = this.fromreferenceobject = obj;

		this.chartext = chartext;
		this.posttext = posttext;
		this.pretext = pretext;
	};
	var _pSketchCharEventInfo = nexacro._createPrototype(nexacro.CharEventInfo, nexacro.SketchCharEventInfo);
	nexacro.SketchCharEventInfo.prototype = _pSketchCharEventInfo;
	_pSketchCharEventInfo._type_name = "SketchCharEventInfo";

	delete _pSketchCharEventInfo;
	_pSketchCharEventInfo = null;

	nexacro.Sketch = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.Component.call(this, id, position, left, top, width, height, right, bottom, parent);

		this.value = null;
		this.textedit = null;
		this.undoable = false;
		this.redoable = false;
		this.editmode = "stroke";
		this.imemode = "none";
		this.usecontextmenu = true;
		this.text = "";
		this.updatebindingvalue = "default";
		this.readonly = false;

		this._canvas_elem_bg = null;
		this._canvas_elem = null;
		this._canvas_elem_tmp = null;

		this._history = [];
		this._current_state = -1;
		this._freeze_state = -1;
		this._current_strokes = null;

		this._const_stroke = "stroke";
		this._const_stroke_user = "strokeu";
		this._const_text = "text";
		this._const_erase = "erase";
		this._const_none = "none";
		this._const_erase_user = "eras_handleeu";
		this._const_image = "image";
		this._const_composit_source_over = "source-over";
		this._const_composit_destination_out = "destination-out";
		this._const_form = "this.parent";
		this._const_dot = ".";

		this._default_stroke_style = nexacro._getCachedStyleObj("color", "black");
		this._default_line_cap = "round";
		this._default_line_join = "round";
		this._default_line_width = 1;
		this._default_font_size = 9;
		this._default_font_face = "monaco";
		this._default_edit_gap = 0.5;
		this._default_edit_x = 0;
		this._default_edit_y = 0;
		this._default_edit_width = 100;
		this._default_edit_height = 24;
		this._default_edit_border = "1px solid blue";
		this._default_edit_align = "left";
		this._startDrawStroke = true;
		this._startDrawErase = true;
		this._image_format = ["bmp", "gif", "jpeg", "jpg", "png", "tiff", "icon"];
		this._save_image_formattype = ["BMP", "PNG", "JPG", "GIF", "TIF", "BMP,Mono"];
		this._image = null;
		this._clr_history = true;
		this._currentPath = [];
		this._pre_draw_status = "";
		this._butt_count = 0;

		this._const_code_parameter = "0001";
		this._const_code_io = "1101";
		this._const_code_permission = "1102";
		this._const_code_Irregular = "1103";
		this._const_code_target = "1104";
		this._const_code_loadinvalidimage = "1105";
		this._const_code_incorrectfile = "1106";
		this._const_code_savefile = "1107";
		this._const_errortype_obj = "ObjectError";
		this._const_errortype_type = "TypeError";

		this._const_code_parameter_msg = "comp_fail_parameter";
		this._const_code_loadinvalidimage_msg = "comm_fail_loadinvalidimage";
		this._const_code_incorrectfile_msg = "comp_incorrect_file";
		this._const_code_savefile_msg = "comp_fail_save_file";
		this._is_undo = false;
		this._apply_client_padding = true;
		this._is_touch = false;
		this._img_type = "url";
		this._const_textcolor = "#000000ff";

		this._event_list = {
			"oninit" : 1, 
			"onkillfocus" : 1, 
			"onsetfocus" : 1, 
			"ontouch" : 1, 
			"ontouchstart" : 1, 
			"ontouchmove" : 1, 
			"ontouchend" : 1, 
			"onlbuttondown" : 1, 
			"onlbuttonup" : 1, 
			"onmousemove" : 1, 
			"onload" : 1, 
			"onerror" : 1, 
			"onsuccess" : 1, 
			"onsize" : 1, 
			"onmove" : 1, 
			"onrbuttondown" : 1, 
			"onrbuttonup" : 1, 
			"onmousedown" : 1, 
			"onmouseup" : 1, 
			"onmouseenter" : 1, 
			"onmouseleave" : 1, 
			"onmousewheel" : 1, 
			"onkeydown" : 1, 
			"onkeyup" : 1, 
			"onchar" : 1, 
			"ondrag" : 1, 
			"ondrop" : 1, 
			"ondragenter" : 1, 
			"ondragleave" : 1, 
			"ondragmove" : 1
		};


		this._path_style = {
			tool : this._const_stroke, 
			globalCompositeOperation : this._const_composit_source_over, 
			strokeStyle : this._default_stroke_style, 
			lineWidth : this._default_line_width, 
			eraseWidth : this._default_line_width, 
			lineCap : this._default_line_cap, 
			lineJoin : this._default_line_join, 
			fontface : this._default_font_face, 
			fontsize : this._default_font_size, 
			fontfill : this._default_stroke_style, 
			text : ""
		};
		trace("Sketch Component has deprecated");
	};


	var _pSketch = nexacro._createPrototype(nexacro.Component, nexacro.Sketch);
	nexacro.Sketch.prototype = _pSketch;

	_pSketch._type_name = "Sketch";
	_pSketch.touchStatus = 0;

	_pSketch.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			application.addErrorMessage(system._language, this._const_code_parameter_msg, "Parameter Error.");
			application.addErrorMessage(system._language, this._const_code_savefile_msg, "Failed to save file.");

			this._canvas_elem_bg = new nexacro.CanvasElement(control_elem);
			this._canvas_elem = new nexacro.CanvasElement(control_elem);
			this._canvas_elem_tmp = new nexacro.CanvasElement(control_elem);

			this.textedit = new nexacro.SketchEditCtrl("sketchedit", "absolute", this._default_edit_x, this._default_edit_y, this._default_edit_width, this._default_edit_height, null, null, this);

			this.textedit.createComponent();

			this.textedit._setEventHandler("onchar", this.on_notify_onchar, this);
			this.textedit._setEventHandler("onkillfocus", this.on_notify_edit_onkillfocus, this);

			var curstyle = this.currentstyle;
			if (this.text) {
				var text_elem = new nexacro.TextBoxElement(control_elem);
				var halign = ((curstyle.align == null || curstyle.align.halign == "") ? "center" : curstyle.align._halign);
				var valign = ((curstyle.align == null || curstyle.align.valign == "") ? "middle" : curstyle.align._valign);

				text_elem.setElementSize(this._client_width, this._client_height);
				curstyle.font = this.textedit.on_find_CurrentStyle_font(this._pseudo);
				curstyle.color = this.textedit.on_find_CurrentStyle_color(this._pseudo);
				curstyle.letterspace = this.textedit.on_find_CurrentStyle_letterspace(this._pseudo);

				text_elem.setElementFont(curstyle.font);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementText(this.text);
				text_elem.setElementLetterSpace(curstyle.letterspace);
				this._text_elem = text_elem;

				text_elem = null;
				curstyle = null;
				halign = null;
				valign = null;
			}
			curstyle = null;
		}
		control_elem = null;
	};

	_pSketch.on_created_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var args = [this._canvas_elem_bg, this._canvas_elem, this._canvas_elem_tmp];

			for (var i = 0, n = args.length; i < n; i++) {
				var obj = args[i];
				if (obj) {
					obj.create();
					obj.setElementLineCap(this._default_line_cap);
					obj.setElementLineJoin(this._default_line_join);
					obj.setElementSize(this._client_width, this._client_height);
				}
			}
			args = null;

			this.on_apply_applystyletype();

			this.on_apply_text();
			var text_elem = this._text_elem;

			if (text_elem) {
				text_elem.create();
				text_elem = null;
			}

			this.textedit.on_created();
			this.textedit.set_width(this._default_edit_width);
			this.textedit.set_height(this._default_edit_height);
			this.textedit.set_imemode(this.imemode);
			this.textedit.set_usecontextmenu(this.usecontextmenu);
			this.textedit.set_readonly(this.readonly);
			this.textedit.set_visible(false);

			this._canvas_elem.setElementTextBaseline("top");
			this._canvas_elem_tmp.setElementTextBaseline("top");
			this._canvas_elem_bg.setElementTextBaseline("top");
		}

		var elem = this._canvas_elem;
		var _handle = elem._handle;
		if (_handle) {
			var _doc = _handle.ownerDocument || _handle.document;
			var canvas_elem_screenXY = nexacro.__getHTMLNodePositionInFrame(_doc, _handle);
			if (canvas_elem_screenXY) {
				this.m_screenX = canvas_elem_screenXY.x;
				this.m_screenY = canvas_elem_screenXY.y;
			}
		}
		this.on_apply_prop_rtldirection();
	};

	_pSketch.on_destroy_contents = function () {
		var args = [this._canvas_elem_bg, this._canvas_elem, this._canvas_elem_tmp, this.textedit];
		for (var i = 0, n = args.length; i < n; i++) {
			if (args[i]) {
				args[i].destroy();
				args[i] = null;
			}
		}
		args = null;
	};

	_pSketch.on_change_containerRect = function (width, height) {
		var args = [this._canvas_elem, this._canvas_elem_bg, this._canvas_elem_tmp];
		for (var i = 0, n = args.length; i < n; i++) {
			var obj = args[i];
			if (obj) {
				obj.setElementSize(width, height);
			}
		}

		if (this._currentPath.length > 0) {
			this._regenStroke(this._currentPath, this._canvas_elem_tmp);
		}
		args = null;
	};
	_pSketch.on_change_containerPos = function (left, top) {
	};


	_pSketch.on_change_bindSource = function (propid, ds, row, col, index) {
		this.binddataset = ds;
		if (propid == "value") {
			return true;
		}
		return false;
	};


	_pSketch.set_enableredraw = function (v) {
		this.enableredraw = nexacro._toBoolean(v);
		if (this.enableredraw) {
			this._redrawPath();
			this._refresh_style_contents();
		}
		return v;
	};

	_pSketch.set_editmode = function (editmode) {
		var tmp = this._const_stroke;
		switch (editmode) {
			case this._const_text:
			case this._const_erase:
			case this._const_none:
				tmp = editmode;
				break;
			case this._const_stroke:
			default:
				break;
		}
		this.editmode = tmp;
	};

	_pSketch.set_imemode = function (v) {
		if (v != this.imemode) {
			this.imemode = nexacro._toString(v);
			this.on_apply_imemode();
		}
	};

	_pSketch.on_apply_imemode = function () {
		this.textedit.set_imemode(this.imemode);
	};

	_pSketch.set_usecontextmenu = function (v) {
		if (v != this.usecontextmenu) {
			this.usecontextmenu = v;
			this.on_apply_usecontextmenu();
		}
	};

	_pSketch.on_apply_usecontextmenu = function () {
		this.textedit.set_usecontextmenu(this.usecontextmenu);
	};

	_pSketch.set_readonly = function (v) {
		v = nexacro._toBoolean(v);
		if (v != this.readonly) {
			this.readonly = v;
			this.on_apply_readonly(v);
		}
	};

	_pSketch.on_apply_readonly = function (v) {
		if (v) {
			this._stat_change("readonly", this._pseudo);
		}
		else {
			this._stat_change("writable", this._pseudo == "readonly" ? "normal" : this._pseudo);
		}

		this.textedit.set_readonly(this.readonly);
	};

	_pSketch.set_value = function (v) {
	};

	_pSketch._setValue = function (v) {
		if (v != this.value) {
			this.value = v;
		}
	};
	_pSketch.on_apply_value = function (v) {
		this.textedit.set_value(this.value);
	};

	_pSketch.set_updatebindingvalue = function (v) {
		if (v != this.updatebindingvalue) {
			this.updatebindingvalue = v;
		}
		this.on_apply_updatebindingvalue(v);
	};

	_pSketch.set_text = function (v) {
		var val = nexacro._toString(v);
		if (val != this.text && this._current_state == -1) {
			this.text = val;
			this._display_text = val;
			this.on_apply_text();
		}
	};

	_pSketch.on_apply_updatebindingvalue = function (v) {
		switch (v) {
			case "nosetvalue":
				break;
			default:
				this.updateToDataset();
				break;
		}
	};


	_pSketch.on_apply_applystyletype = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			var applystyles = ["align", "background", "border", "bordertype", "color", "cursor", "font", "letterspace", "glow", "gradation", "margin", "opacity", "padding", "shadow", "accessibility"];
			var findstyle;
			if (!this._url || this._url.length == 0) {
				this._oldstyletype = this._styletype;
				this._styletype = 1;
				findstyle = this._find_style(applystyles);
				this._styletype = this._oldstyletype;
				this.cssclass = this._cssclass;
			}
			else {
				switch (this.applystyletype) {
					case "keep":
						this._styletype = 1;
						this.cssclass = this._cssclass;
						break;
					case "apply":
						this._styletype = 4;
						this.cssclass = this._linkedcssclass;
						break;
					case "cascade":
						this._styletype = 5;
						this.cssclass = this._linkedcssclass;
						break;
					case "cascade,keep":
						this._styletype = 3;
						this.cssclass = this._linkedcssclass;
						break;
					default:
						this._styletype = 3;
						this.cssclass = this._linkedcssclass;
						v = "cascade,keep";
						break;
				}
				findstyle = this._find_style(applystyles);
			}
			this._apply_style(findstyle);
			applystyles = null;
			findstyle = null;
		}
		control_elem = null;
	};


	_pSketch.on_apply_text = function () {
		var control_elem = this._control_element;
		if (control_elem) {
			var curstyle = this.currentstyle;
			var text_elem = this._text_elem;
			if (!text_elem) {
				text_elem = new nexacro.TextBoxElement(control_elem);
				this._text_elem = text_elem;
				this.on_apply_wordwrap();

				var halign = (curstyle.align.halign == "" ? "center" : curstyle.align._halign);
				var valign = (curstyle.align.valign == "" ? "middle" : curstyle.align._valign);

				text_elem.setElementSize(this._client_width, this._client_height);
				text_elem.setElementColor(curstyle.color);
				text_elem.setElementFont(curstyle.font);
				text_elem.setElementAlignXY(halign, valign);
				text_elem.setElementLetterSpace(curstyle.letterspace);

				if (this._is_created) {
					text_elem.create();
				}
			}

			var expr = this.expr;
			if (expr && expr.length > 0) {
				expr = expr.trim().split(":");
				var parser = new nexacro.ExprParser();
				var conv_expr, exprfn;
				var str;

				if (expr.length == 1) {
					str = expr[0];
				}
				else {
					if (expr[0].trim().toUpperCase() != "EXPR") {
						str = expr.join(":");
					}
					else {
						str = expr.slice(1).join(":");
					}
				}

				conv_expr = parser.makeExpr(this, str);
				parser = null;
				exprfn = nexacro._createInlineFunc(this._checkExprFunction(conv_expr, this), ["comp"]);

				if (exprfn) {
					try {
						var val = nexacro._toString(exprfn.call(this, this));
						if (val != this.displaytext) {
							this.displaytext = val;
						}
					}
					catch (e) {
						return;
					}
				}
			}
			else {
				this.displaytext = this.text;
			}

			expr = null;

			text_elem.setElementText(this.displaytext);
			if (this.displaytext && this.displaytext != "") {
				this._text_width = -1;
				this._text_height = -1;
			}
			else {
				this._text_width = 0;
				this._text_height = 0;
			}

			if (this._img_elem) {
				this._updateElementPositions(curstyle.align, curstyle.imagealign);
			}
			text_elem = null;
			curstyle = null;
		}
	};

	_pSketch._checkExprFunction = function (conv_expr, comp) {
		try {
			nexacro._executeEvalStr(conv_expr);
			return conv_expr;
		}
		catch (e) {
			try {
				nexacro._executeEvalStr(this._const_form + this._const_dot + conv_expr);
				return conv_expr = this._const_form + this._const_dot + conv_expr;
			}
			catch (e) {
				return conv_expr;
			}
		}
	};
	_pSketch.on_apply_wordwrap = function () {
		if (this._text_elem) {
			this._text_elem.setElementWordWrap(this.wordwrap);
		}
	};

	_pSketch.on_apply_expr = function () {
		if (this._currentPath.length > 0) {
			return;
		}
		this.on_apply_text();
	};

	_pSketch.on_apply_prop_rtldirection = function () {
		var control_element = this.getElement();
		var _rtldirection = this._rtldirection;

		if (control_element) {
			control_element.setElementRtlDirection(_rtldirection);
			control_element.setElementPosition(control_element.left, control_element.top, true);
		}

		var txt_elem = this._text_elem;
		if (txt_elem) {
			txt_elem.setElementRtlDirection(_rtldirection);
			txt_elem.setElementPosition(txt_elem.left, txt_elem.top, true);
		}
	};

	_pSketch.set_cssclass = function (cssname) {
		cssname = cssname.split(",");

		for (var i = 0, n = cssname.length; i < n; i++) {
			if (cssname[i] != this.cssclass) {
				this.className = this.cssclass = cssname[i];

				if (this.parent) {
					if (this._is_created) {
						this.on_apply_prop_class();
					}
				}
				else {
					this.new_class = true;
				}
			}
		}
		this.className = this.cssclass = cssname;
	};

	_pSketch.on_update_style_font = function () {
		var font = this.currentstyle.font = this.on_find_CurrentStyle_font(this._pseudo);
		this.on_apply_style_font(font);
		this.setTextFont(font.face, font.size);
	};
	_pSketch.on_update_style_color = function () {
		var color = this.currentstyle.color = this.on_find_CurrentStyle_color(this._pseudo);
		this.on_apply_style_color(color);
		this.setTextColor(color.value);
	};

	_pSketch._apply_style = function (styleObj) {
		this.on_apply_style_align(styleObj.align);
		this.on_apply_style_background(styleObj.background);
		this.on_apply_style_border(styleObj.border);
		this.on_apply_style_bordertype(styleObj.bordertype);
		this.on_apply_style_color(styleObj.color);
		this.on_apply_style_cursor(styleObj.cursor);
		this.on_apply_style_font(styleObj.font);
		this.on_apply_style_letterspace(styleObj.letterspace);
		this.on_apply_style_glow(styleObj.glow);
		this.on_apply_style_gradation(styleObj.gradation);
		this.on_apply_style_margin(styleObj.margin);
		this.on_apply_style_opacity(styleObj.opacity);
		this.on_apply_style_padding(styleObj.padding);
		this.on_apply_style_shadow(styleObj.shadow);
		this.on_apply_style_accessibility(styleObj.accessibility);
	};


	_pSketch._find_style = function (styleNameArr) {
		var style = {
		};
		var style_len = styleNameArr.length;
		var pseudo = this._pseudo;

		for (var i = 0; i < style_len; i++) {
			var styleName = styleNameArr[i];
			switch (styleName) {
				case "accessibility":
					style["accessibility"] = this._make_accessibility_value(this.on_find_CurrentStyle_accessibility(pseudo));
					if (!style["accessibility"]) {
						style["accessibility"] = nexacro._getCachedAccessibilityObj("");
					}
					break;
				case "align":
					style["align"] = this.on_find_CurrentStyle_align(pseudo);
					if (!style["align"]) {
						style["align"] = nexacro._getCachedAlignObj("");
					}
					break;
				case "background":
					style["background"] = this.on_find_CurrentStyle_background(pseudo);
					if (!style["background"]) {
						style["background"] = nexacro._getCachedBackgroundObj("");
					}
					break;
				case "border":
					style["border"] = this.on_find_CurrentStyle_border(pseudo);
					if (!style["border"]) {
						style["border"] = nexacro._getCachedBorderObj("");
					}
					break;
				case "bordertype":
					style["bordertype"] = this.on_find_CurrentStyle_bordertype(pseudo);
					if (!style["bordertype"]) {
						style["bordertype"] = nexacro._getCachedBordertypeObj("");
					}
					break;
				case "color":
					style["color"] = this.on_find_CurrentStyle_color(pseudo);
					if (!style["color"]) {
						style["color"] = nexacro._getCachedColorObj("");
					}
					break;
				case "cursor":
					style["cursor"] = this.on_find_CurrentStyle_cursor(pseudo);
					if (!style["cursor"]) {
						style["cursor"] = nexacro._getCachedStyleObj("");
					}
				case "font":
					style["font"] = this.on_find_CurrentStyle_font(pseudo);
					if (!style["font"]) {
						style["font"] = nexacro._getCachedFontObj("");
					}
				case "letterspace":
					style["letterspace"] = this.on_find_CurrentStyle_letterspace(pseudo);
					if (!style["letterspace"]) {
						style["letterspace"] = nexacro._getCachedStyleObj("letterspace", "0");
					}
				case "glow":
					style["glow"] = this.on_find_CurrentStyle_glow(pseudo);
					if (!style["glow"]) {
						style["glow"] = nexacro._getCachedGlowObj("");
					}
				case "gradation":
					style["gradation"] = this.on_find_CurrentStyle_gradation(pseudo);
					if (!style["gradation"]) {
						style["gradation"] = nexacro._getCachedGradationObj("");
					}
				case "margin":
					style["margin"] = this.on_find_CurrentStyle_margin(pseudo);
					if (!style["margin"]) {
						style["margin"] = nexacro._getCachedMarginObj("");
					}
				case "opacity":
					style["opacity"] = this.on_find_CurrentStyle_opacity(pseudo);
					if (!style["opacity"]) {
						style["opacity"] = nexacro._getCachedStyleObj("opacity", "100");
					}
				case "padding":
					style["padding"] = this.on_find_CurrentStyle_padding(pseudo);
					if (!style["padding"]) {
						style["padding"] = nexacro._getCachedPaddingObj("");
					}
				case "shadow":
					style["shadow"] = this.on_find_CurrentStyle_shadow(pseudo);
					if (!style["shadow"]) {
						style["shadow"] = nexacro._getCachedShadowObj("");
					}
					break;
			}
			this.currentstyle[styleName] = style[styleName];
		}
		return style;
	};

	_pSketch.loadSketch = function (url) {
		if (this.readonly) {
			return;
		}
		return this._loadSketch(url);
	};

	_pSketch.saveSketch = function () {
		var canvas_elem = this._canvas_elem_tmp;
		if (canvas_elem) {
			if (nexacro.Browser == "Runtime") {
				var handleid = this.saveToImageObject();
				var imgObj = new nexacro.Image();
				imgObj._handle_id = handleid;
				imgObj.width = this.width;
				imgObj.height = this.height;
				this._setValue(imgObj);
				this.on_fire_onsuccess(handleid);
				if (this.updatebindingvalue != "nosetvalue") {
					this.updateToDataset();
				}
				return true;
			}
			else {
				var img = canvas_elem.toDataURL();
				if (img && img.src) {
					img.setBase64String(img.src);
					this._setValue(img);
					if (this.updatebindingvalue != "nosetvalue") {
						this.updateToDataset();
					}
					return true;
				}
			}
		}
		return false;
	};

	_pSketch.saveSketchToFile = function (fileName, fileType, option) {
		if (!fileName) {
			return false;
		}

		fileType = fileType ? fileType : this._save_image_formattype[0];

		if (fileType == this._save_image_formattype[2] && !option) {
			option = 100;
		}

		if (fileName.lastIndexOf(".") < 0) {
			var fileformattype = this._saveImageFileFormatType(fileType);
			fileName = fileName + this._const_dot + fileformattype;
		}

		var rtn = this.parent.saveToImageFile(fileName, fileType, option);
		if (nexacro.Browser == "Runtime") {
			if (rtn) {
				var handleid = this.saveToImageObject();
				var imgObj = new nexacro.Image();
				imgObj._handle_id = handleid;
				this._setValue(imgObj);
				this.on_fire_onsuccess(handleid);
				return true;
			}
			else {
				var errormsg = nexacro._GetSystemErrorMsg(this, this._const_code_savefile_msg);
				this.on_fire_onerror(this, this._const_code_savefile, errormsg, this._const_errortype_obj, this._getRefFormBaseUrl(), url, this._const_code_savefile);
				return false;
			}
		}

		return false;
	};

	_pSketch._saveImageFileFormatType = function (fileType) {
		switch (fileType) {
			case "PNG":
				fileformattype = "png";
				break;
			case "JPG":
				fileformattype = "jpg";
				break;
			case "GIF":
				fileformattype = "gif";
				break;
			case "TIF":
				fileformattype = "tif";
				break;
			case "BMP,Mono":
				fileformattype = "bmp";
				break;
			default:
				fileformattype = "bmp";
				break;
		}
		return fileformattype;
	};
	_pSketch.undo = function () {
		if (this._checkEditmode() == false || this.readonly) {
			return;
		}

		this._undo();
	};

	_pSketch.redo = function () {
		if (this._checkEditmode() == false || this.readonly) {
			return;
		}

		this._redo();
	};

	_pSketch.on_getBindableProperties = function () {
		return "value";
	};

	_pSketch.updateToDataset = function () {
	};

	_pSketch.setBrushType = function (type) {
		if (this._checkEditmode() == false) {
			return;
		}

		switch (type) {
			case "square":
			case "butt":
				this._path_style.lineCap = type;
				break;
			default:
				this._path_style.lineCap = this._default_line_cap;
				break;
		}
	};

	_pSketch.setBrushSize = function (size) {
		if (this._checkEditmode() == false) {
			return;
		}

		if (size > 0) {
			this._path_style.lineWidth = size;
		}
		else {
			this._path_style.lineWidth = this._default_line_width;
		}
	};

	_pSketch.setBrushColor = function (color) {
		if (this._checkEditmode() == false) {
			return;
		}

		this._path_style.strokeStyle = nexacro._getCachedStyleObj("color", color);
	};

	_pSketch.setTextFont = function (fontname, fontsize) {
		if (this._checkEditmode() == false) {
			return;
		}

		fontsize = (fontsize == undefined || fontsize == "") ? this._default_font_size : fontsize;
		this._path_style.fontface = fontname;
		this._path_style.fontsize = fontsize;
		this.style.set_font_face(fontname);
		this.style.set_font_size(fontsize);
		if (this.textedit) {
			this.textedit.style.set_font_face(fontname);
			this.textedit.style.set_font_size(fontsize);
		}
	};

	_pSketch.setTextColor = function (color) {
		if (this._checkEditmode() == false) {
			return;
		}
		color = (this._isCheckColor(color)) ? color : this._const_textcolor;

		this.style.set_color(color);

		if (this.textedit) {
			this.textedit.style.set_color(color);
		}

		this._path_style.fontfill._setValue(color);
	};

	_pSketch._isCheckColor = function (color) {
		color = color.replace(/^'/, "").replace(/'$/, "");

		if (color.substring(1) == "gradation") {
			return true;
		}
		if (color == "transparent") {
			return true;
		}
		if (!color) {
			return false;
		}

		if (nexacro._xreNamedColorList) {
			if (color in nexacro._xreNamedColorList) {
				return true;
			}
		}

		if (color.charAt(0) == "#" && (color.length == 7 || color.length == 9)) {
			return true;
		}
		return false;
	};

	_pSketch.setEraseSize = function (size) {
		if (this._checkEditmode() == false) {
			return;
		}
		this._path_style.eraseWidth = (size > 0) ? size : 1;
	};

	_pSketch.drawText = function (x, y, text, multiline) {
		if (this._checkEditmode() == false) {
			return;
		}
		if (this.readonly) {
			return;
		}

		var canvas_elem = this._canvas_elem;
		if (canvas_elem) {
			this._initPath(this._path_style, this._const_text, x, y, true);

			var coords = this._currentPath[0];
			coords.text = text;
			coords.globalCompositeOperation = this._const_composit_source_over;
			this._drawText(coords, coords.x, coords.y, coords.text, multiline);
		}
	};

	_pSketch.drawStroke = function (x, y, start) {
		if (this._checkEditmode() == false || this.readonly) {
			return;
		}

		if (!x && x == undefined) {
			return;
		}
		if (!y && y == undefined) {
			return;
		}

		x = (x >= 0 || x < 0) ? x : this._default_edit_x;
		y = (y >= 0 || x < 0) ? y : this._default_edit_y;

		start = (!start && start == undefined) ? false : start;

		if (this._startDrawStroke) {
			start = true;
			this._startDrawStroke = false;
		}

		this._drawStroke(this._path_style, this._const_stroke, x, y, start);
	};

	_pSketch.drawErase = function (x, y, start) {
		if (this._checkEditmode() == false || this.readonly) {
			return;
		}

		if (!x && x == undefined) {
			return;
		}
		if (!y && y == undefined) {
			return;
		}

		x = (x >= 0 || x < 0) ? x : this._default_edit_x;
		y = (y >= 0 || x < 0) ? y : this._default_edit_y;

		start = (!start && start == undefined) ? false : start;

		if (this._startDrawErase) {
			start = true;
			this._startDrawErase = false;
		}
		this._drawStroke(this._path_style, this._const_erase, x, y, start);
	};

	_pSketch.clear = function () {
		this._apply_client_padding = true;

		if (this._checkEditmode() == false) {
			return;
		}

		this._clear(this._isEnableRedraw());

		if (this._current_state == -1) {
			this.on_apply_text();
		}
	};

	_pSketch.showTextEditor = function (x, y, width, height, text) {
		if (!(arguments.length >= 4 && arguments.length < 6)) {
			return;
		}
		var multiline = false;

		this._initPath(this._path_style, this._const_text, x, y, null, width, height, text);
		this._drawPath(x - this._default_edit_gap, y);
		this._endPath();

		if (text && text !== undefined && text != "") {
			multiline = true;
		}
		return this._showTextEditor(x, y, width, height, text, multiline);
	};

	_pSketch.hideTextEditor = function (clear) {
		clear = (clear == true || clear == false) ? clear : true;
		return this._hideTextEditor(clear);
	};

	_pSketch.redraw = function () {
		var redraw = this.enableredraw;
		this.enableredraw = true;
		this._refresh_style_contents();
		this._redrawPath();
		this.enableredraw = redraw;
	};

	_pSketch.on_notify_edit_onkillfocus = function (obj, e) {
		var text = obj.text;
		var status = (text.length > 0) ? true : false;
		var multiline = true;
		if (status) {
			var canvas_elem = this._canvas_elem;
			if (canvas_elem) {
				this._initPath(this._path_style, this._const_text, obj._left, obj._top, true);

				var coords = this._currentPath[0];
				coords.text = text;
				coords.globalCompositeOperation = this._const_composit_source_over;
				this._drawText(coords, coords.x, coords.y, coords.text, multiline);
			}
		}
		this._resetTextEdit(status);
		if (this.updatebindingvalue == "nosetvalue") {
			this.updateToDataset();
		}
	};

	_pSketch.on_fire_ontouchmove = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (touchinfos.length == 0) {
			return;
		}

		var evt = touchinfos[0];
		this.on_fire_onmousemove("lbutton", null, null, null, evt.screenX, evt.screenY, evt.canvasX, evt.canvasY, evt.clientX - this.m_screenX, evt.clientY - this.m_screenY, from_comp, from_refer_comp);
	};

	_pSketch.on_fire_sys_ontouchmove = _pSketch.on_fire_ontouchmove;

	_pSketch.on_fire_onmousemove = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this._moveAction(button, clientX, clientY);
	};

	_pSketch.on_fire_sys_ondragmove = function (src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		var retn = nexacro.Component.prototype.on_fire_sys_ondragmove.call(this, src_comp, src_refer_comp, dragdata, userdata, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp);

		this._moveAction(button, clientX, clientY);
		return retn;
	};

	_pSketch.on_fire_sys_onmousemove = _pSketch.on_fire_onmousemove;

	_pSketch._moveAction = function (button, clientX, clientY) {
		if (button == "lbutton" || button == "touch") {
			if (this._checkEditmode() == false || this.readonly) {
				return;
			}

			if (button == "touch") {
				if (this.touchStatus == 3) {
					this.touchStatus = 0;
				}
				else if (this.touchStatus == 1) {
					this.touchStatus = 2;
				}


				if (this.touchStatus != 0) {
					if (this._path_style.lineCap == "butt") {
						if (this._butt_count == 3) {
							this._drawPath(clientX, clientY);
							this._butt_count = 0;
						}
						this._butt_count++;
					}
					else {
						this._drawPath(clientX, clientY);
					}
				}
			}
			else {
				if (this._path_style.lineCap == "butt") {
					if (this._butt_count == 3) {
						this._drawPath(clientX, clientY);
						this._butt_count = 0;
					}
					this._butt_count++;
				}
				else {
					this._drawPath(clientX, clientY);
				}
			}
		}
	};

	_pSketch.on_fire_ontouchstart = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (touchinfos.length == 0) {
			return;
		}

		var evt = touchinfos[0];
		this.on_fire_onlbuttondown("lbutton", null, null, null, evt.screenX, evt.screenY, evt.canvasX, evt.canvasY, evt.clientX - this.m_screenX, evt.clientY - this.m_screenY, from_comp, from_refer_comp);
	};

	_pSketch._on_touch_lbuttondown = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp) {
		nexacro._skipDragEventAfterMsgBox = false;
		var ret;
		var pThis = this._getFromComponent(this);
		if (!pThis.onlbuttondown || (pThis.onlbuttondown && !pThis.onlbuttondown.defaultprevented)) {
			this.on_fire_onlbuttondown(button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, canvasX, canvasY, fire_comp, refer_comp, false);
			ret = this._on_bubble_touch_lbuttondown(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, false);
		}
		return ret;
	};

	_pSketch.on_fire_sys_ontouchstart = _pSketch.on_fire_ontouchstart;

	_pSketch.on_fire_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._checkEditmode() == false) {
			return;
		}
		if (this.readonly) {
			if (this.textedit.visible) {
				this.textedit.set_visible(false);
			}
			return;
		}
		if (button == "touch") {
			this.touchStatus = 1;
			this._is_touch = true;
		}

		this.button == button;
		this._initPath(this._path_style, this.editmode, clientX, clientY);
		if (this._path_style.lineCap != "butt") {
			if (this._isRtl()) {
				this._drawPath(clientX + this._default_edit_gap, clientY);
			}
			else {
				this._drawPath(clientX - this._default_edit_gap, clientY);
			}
			this._endPath();
		}
	};

	_pSketch.on_fire_sys_onlbuttondown = _pSketch.on_fire_onlbuttondown;

	_pSketch.on_fire_ontouchend = function (touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		if (touchinfos.length == 0) {
			return;
		}
		var evt = touchinfos[0];
		this.on_fire_onlbuttonup("lbutton", null, null, null, evt.screenX, evt.screenY, evt.canvasX, evt.canvasY, evt.clientX - this.m_screenX, evt.clientY - this.m_screenY, from_comp, from_refer_comp);
	};

	_pSketch.on_fire_sys_ontouchend = _pSketch.on_fire_ontouchend;

	_pSketch.on_fire_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		if (this._checkEditmode() == false || this.readonly) {
			return;
		}

		if (button == "touch") {
			this.touchStatus = 3;
		}
		this._endPath();

		if (button == "touch") {
			this._delete_text();
			this.displaytext = "";
		}
	};

	_pSketch.on_fire_sys_onlbuttonup = _pSketch.on_fire_onlbuttonup;


	_pSketch._on_touch_lbuttonup = function (elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem) {
		var ret;
		var pThis = this._getFromComponent(this);
		if (pThis && (!pThis.onlbuttonup || (pThis.onlbuttonup && !pThis.onlbuttonup.defaultprevented))) {
			this.on_fire_onlbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, canvasX, canvasY, from_comp, refer_comp);

			ret = this._on_bubble_touch_lbuttonup(elem, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, event_bubbles, fire_comp, refer_comp, from_elem, false);
		}
		return ret;
	};

	_pSketch._endPath = function () {
		var canvas_elem = this._canvas_elem;
		if (!canvas_elem || this._currentPath.length == 0) {
			return;
		}

		var currentpath = this._currentPath[0];
		var pathstyle = this._path_style;
		if (this.editmode == this._const_text && !this.textedit.visible && currentpath) {
			currentpath.fontface = pathstyle.fontface;
			currentpath.fontsize = pathstyle.fontsize;
			currentpath.fontfill._setValue(pathstyle.fontfill.value);
		}
		this._regenStroke(this._currentPath, canvas_elem);
		this._regenStroke(this._currentPath, this._canvas_elem_tmp);
	};

	_pSketch.on_notify_onchar = function (obj, e) {
		return this.on_fire_onchar(obj, e.chartext, e.pretext, e.posttext);
	};

	_pSketch.on_fire_onchar = function (obj, chartext, pretext, posttext) {
		if (this.onchar && this.onchar._has_handlers) {
			var evt = new nexacro.SketchCharEventInfo(this, "onchar", chartext, pretext, posttext);
			return this.onchar._fireCheckEvent(this, evt);
		}
		return true;
	};

	_pSketch.on_fire_onload = function (obj, imageurl) {
		var event = this.onload;
		if (event && event._has_handlers) {
			var evt = new nexacro.SketchLoadEventInfo(this, "onload", imageurl);
			event._fireEvent(this, evt);
		}
	};

	_pSketch.on_fire_onerror = function (obj, fireerrorcode, errormsg, returncode, locationuri, imageurl, errstatus) {
		var event = this.onerror;
		if (event && event._has_handlers) {
			var evt = new nexacro.SketchErrorEventInfo(this, "onerror", fireerrorcode, errormsg, returncode, locationuri, imageurl, errstatus);
			event._fireEvent(this, evt);
		}
	};

	_pSketch.on_fire_onsuccess = function (handle) {
		var event = this.onsuccess;
		if (event && event._has_handlers) {
			var evt = new nexacro.SketchSuccessEventInfo(this, "onsuccess", handle);
			return this.onsuccess._fireEvent(this, evt);
		}
	};

	_pSketch._getDlgCode = function (keycode, altKey, ctrlKey, shiftKey) {
		return {
			want_tab : false, 
			want_return : false, 
			want_escape : false, 
			want_chars : false, 
			want_arrows : false, 
			want_touchstart : true, 
			want_touchmove : true
		};
	};

	_pSketch._refresh_style_contents = function () {
		this.on_update_style_align();
		this.on_update_style_background();
		this.on_update_style_border();
		this.on_update_style_bordertype();
		this.on_update_style_color();
		this.on_update_style_cursor();
		this.on_update_style_font();
		this.on_update_style_gradation();
		this.on_update_style_opacity();
		this.on_update_style_padding();
		this.on_update_style_shadow();
		if (nexacro._enableaccessibility) {
			this.on_update_style_accessibility();
		}
	};

	_pSketch._setImageValue = function (image) {
		if (image instanceof nexacro.ImageSketchBackGround) {
			var base64 = image.getBase64String();
			if (!base64) {
				var image = this._canvas_elem_bg.toDataURL();
				if (image && image.src) {
					image.setBase64String(image.src);
					this.value = this._image = image;
				}
			}
		}
	};


	_pSketch._setImageType = function (v) {
		if (v) {
			if (v instanceof nexacro.Image) {
				v = v._base64str;
				this._img_type = "base64";
			}
			else {
				v = v.toString();

				var isBase64 = nexacro._checkBase64String(v);
				if (isBase64) {
					if (v.substring(0, 10).toLowerCase() == "data:image") {
						if (v.substring(0, 17).toLowerCase() != "data:image;base64") {
							var comma_idx = v.indexOf(",");
							if (comma_idx > -1) {
								var tmp = v.slice(comma_idx + 1, v.legnth);
								v = "data:image;base64," + tmp;
							}
						}
					}
					else {
						v = "data:image;base64," + v;
					}
					this._img_type = "base64";
				}
				else {
					this._img_type = "url";
				}
			}
		}
		else {
			v = "";
			this._img_type = "url";
		}
	};

	_pSketch._loadSketch = function (url) {
		if (this._image) {
			this._image = null;
		}

		var _url = url;

		this._setImageType(_url);

		var img_type = this._img_type;
		if (img_type == "url") {
			_url = nexacro._getURIValue(_url);
			_url = nexacro._getImageLocation(url, this._getRefFormBaseUrl());
		}

		if (_url == undefined || arguments.length > 1) {
			var errormsg = nexacro._GetSystemErrorMsg(this, this._const_code_parameter_msg);
			this.on_fire_onerror(this, this._const_code_parameter, errormsg, this._const_errortype_obj, this._getRefFormBaseUrl(), _url, this._const_code_parameter);
			return false;
		}

		if (_url && _url !== undefined) {
			var imgformat = _url.substring(_url.lastIndexOf(".") + 1).toLowerCase();
			if ((this._image_format).indexOf(imgformat) == -1) {
				var errormsg = nexacro._GetSystemErrorMsg(this, this._const_code_incorrectfile_msg);
				this.on_fire_onerror(this, this._const_code_incorrectfile, errormsg, this._const_errortype_type, this._getRefFormBaseUrl(), _url, this._const_code_incorrectfile);
				return false;
			}
		}

		var imgsize = nexacro._getImageSize(_url, this._imageload, this, this.parent._getRefFormBaseUrl(), url);

		if (imgsize) {
			this._clearCanvas(this._isEnableRedraw());
			return this._drawImage(_url);
		}
	};


	_pSketch._drawImage = function (url) {
		this._image = new nexacro.ImageSketchBackGround(this);
		var retn = this._image.set_src(url);
		if (retn) {
			if (this._apply_client_padding) {
				this._delete_text();
				this.displaytext = "";
			}

			this._setValue(this._image);
			if (this._clr_history) {
				this._initHistory();
				this._setRedoUndo();
			}
			return true;
		}
		return false;
	};

	_pSketch._imageload = function (url, imgsize, size, imgobj, status) {
		if (imgsize <= 0) {
			this._image = null;
			delete nexacro._ImgInfoCacheList[url];
			nexacro._ImgInfoCacheList[url] = null;
			var errormsg = nexacro._GetSystemErrorMsg(this, this._const_code_loadinvalidimage_msg);
			this.on_fire_onerror(this, this._const_code_loadinvalidimage_msg, errormsg, this._const_errortype_type, this._getRefFormBaseUrl(), url, this._const_code_loadinvalidimage_msg);
		}
		else {
			this._clearCanvas(this._isEnableRedraw());
			this._drawImage(url);
		}
	};

	_pSketch._drawText = function (_style, x, y, text, multiline) {
		if (this.readonly) {
			return;
		}
		if (!text || text.length == 0) {
			return;
		}

		var canvas_elem = this._canvas_elem;
		var canvas_elem_tmp = this._canvas_elem_tmp;
		if (canvas_elem) {
			if (this._apply_client_padding) {
				this._delete_text();
				this.displaytext = "";
			}

			x = (x >= 0 || x < 0) ? x : this._default_edit_x;
			y = (y >= 0 || x < 0) ? y : this._default_edit_y;
			var testedit = this.textedit;
			var texteditcurstyle = testedit.currentstyle;
			var font = this.currentstyle.font;

			if (font == null) {
				var font = new nexacro.Style_font();
			}

			var fontsize = font.size;

			font.set_face(_style.fontface);
			font.set_size(_style.fontsize);

			canvas_elem.setElementFont(font);
			canvas_elem.setElementGlobalCompositeOperation(_style.globalCompositeOperation);

			canvas_elem_tmp.setElementFont(font);
			canvas_elem_tmp.setElementGlobalCompositeOperation(_style.globalCompositeOperation);

			var tcolor;
			if (_style.fontfill instanceof nexacro.Style_color) {
				tcolor = _style.fontfill;
			}
			else {
				tcolor = new nexacro.Style_color(_style.fontfill);
			}

			canvas_elem.setElementFillStyle(tcolor);
			canvas_elem_tmp.setElementFillStyle(tcolor);
			var multiliney = Number(y);

			if (multiline) {
				v = nexacro._toString(text);
				if (text && text !== undefined && text != "") {
					text = text.replace(/&quot;/g, "\"");
					if (text.indexOf("\r\n") != -1 || text.indexOf("\n\r") != -1) {
						text = text.replace(/\r\n/g, "\n").replace(/\n\r/g, "\n");
					}
					else {
						if (text.indexOf("\r") != -1) {
							text = text.replace(/\r/g, "");
						}
					}

					var multitext = (text.replace(/\\n/g, '\n')).split("\n");
					var linespace = texteditcurstyle.linespace.value;

					for (var i = 0, n = multitext.length; i < n; i++) {
						if (this._isEnableRedraw()) {
							canvas_elem.drawFillText(multitext[i], x, multiliney);
							canvas_elem_tmp.drawFillText(multitext[i], x, multiliney);
						}
						multiliney += Number(linespace) + Number(fontsize);
					}
				}
			}
			else {
				if (this._isEnableRedraw()) {
					canvas_elem.drawFillText(text, x, multiliney);
					canvas_elem_tmp.drawFillText(text, x, multiliney);
				}
			}
		}
	};

	_pSketch._drawStroke = function (_style, mode, x, y, start) {
		if (this._checkEditmode() == false || this.readonly) {
			return;
		}

		if (this._apply_client_padding) {
			this._delete_text();
			this.displaytext = "";
		}

		var clientX = Number(x);
		var clientY = Number(y);
		if (this._currentPath[0] && this._currentPath[0].tool != mode) {
			start = true;
		}
		switch (start) {
			case true:
				this._initPath(this._path_style, mode, clientX, clientY);
				this._drawPath(clientX - this._default_edit_gap, clientY);
				break;
			default:
				this._drawPath(clientX - this._default_edit_gap, clientY);
				this._endPath();
				break;
		}
	};

	_pSketch._showTextEditor = function (x, y, width, height, text) {
		if (this._checkEditmode() == false) {
			return;
		}
		var caretpos = 0;
		var value = null;
		var rettext = this.textedit.value;
		var textedit = this.textedit;
		var vscrollbarsize = textedit.vscrollbar.scrollbarsize;
		var hscrollbarsize = textedit.hscrollbar.scrollbarsize;

		if (text) {
			value = text;
			caretpos = -1;
		}
		else {
			value = rettext;
		}
		if (x >= 0 || x < 0) {
			this.textedit.set_left(x);
		}
		else {
			this.textedit.set_left(this._default_edit_x);
		}

		if (y >= 0 || x < 0) {
			this.textedit.set_top(y);
		}
		else {
			this.textedit.set_top(this._default_edit_y);
		}

		if (width >= 0 || x < 0) {
			this.textedit.set_width(Number(width) + Number(hscrollbarsize));
		}
		else {
			this.textedit.set_width(Number(this._default_edit_width) + Number(hscrollbarsize));
		}

		if (height >= 0 || x < 0) {
			this.textedit.set_height(Number(height) + Number(vscrollbarsize));
		}
		else {
			this.textedit.set_height(Number(this._default_edit_height) + Number(vscrollbarsize));
		}

		this.textedit.set_value(value);
		if (this._isEnableRedraw()) {
			this.textedit.set_visible(true);
			this.textedit.setFocus(true);
			this.textedit.setCaretPos(caretpos);

			if (text && text !== undefined && text != "") {
				if (text.length > 0) {
					this.textedit.setSelect(0, text.length);
				}
			}
		}
		return rettext;
	};

	_pSketch._hideTextEditor = function (clear) {
		if (this._checkEditmode() == false) {
			return;
		}

		var rettext = this.textedit.value;

		if (clear) {
			this.textedit.set_value(null);
		}

		if (this._isEnableRedraw()) {
			this.textedit.set_visible(false);
			this.textedit.set_left(this._default_edit_x);
			this.textedit.set_top(this._default_edit_y);
			this._control_element.setElementFocus();
		}
		return rettext;
	};

	_pSketch._redrawPathData = function (path) {
		this._clearCanvas(this._isEnableRedraw());

		if (this._image) {
			this._loadSketch(this._image.src);
		}
		var length = path.length;
		for (var n = 0; n < length; n++) {
			this._regenStroke(path[n], this._canvas_elem);
			this._regenStroke(path[n], this._canvas_elem_tmp);
			this._regenStroke(path[n], this._canvas_elem_bg);
		}
	};

	_pSketch._drawBcurve = function (path, ctx) {
		var length = path.length - 1;
		if (length < 1) {
			return;
		}
		for (var n = 0; n < length; n++) {
			var p1 = path[n];
			var p2 = path[n + 1];
			if (n == 0) {
				this._setupCanvasElem(ctx, p1, p1);
			}
			ctx.lineTo(p2.x, p2.y);
		}
		ctx.stroke();
	};

	_pSketch._drawUserStroke = function (path, ctx) {
		var length = path.length - 1;
		if (length < 1) {
			return;
		}
		for (var n = 0; n < length; n++) {
			var p1 = path[n];
			var p2 = path[n + 1];
			if (n == 0) {
				this._setupCanvasElem(ctx, p1, p1);
				ctx.lineTo(p2.x, p2.y);
				ctx.lineTo(p1.x, p1.y);
			}
			ctx.lineTo(p2.x, p2.y);
		}
		ctx.stroke();
	};

	_pSketch._setupCanvasElem = function (ctx, p1, p2) {
		ctx.beginPath();
		ctx.moveTo(p2.x, p2.y);
		ctx.setElementLineCap(p1.lineCap);

		ctx.setElementGlobalCompositeOperation(p1.globalCompositeOperation);

		switch (p1.tool) {
			case this._const_erase:
			case this._const_erase_user:
				ctx.setElementStrokeStyle(this._default_stroke_style);
				ctx.setElementLineWidth(p1.eraseWidth);
				break;
			case this._const_stroke:
			case this._const_stroke_user:
			default:
				ctx.setElementStrokeStyle(p1.strokeStyle);
				ctx.setElementLineWidth(p1.lineWidth);
		}
	};

	_pSketch._regenStroke = function (path, ctx) {
		if (this._isEnableRedraw()) {
			var _path = this._clone(path);

			var tool = (this._is_undo && _path[0].tool != this._const_text) ? this._const_stroke_user : _path[0].tool;
			switch (tool) {
				case this._const_text:
					{

						var tmp = _path[0];
						this._drawText(tmp, tmp.x, tmp.y, tmp.text, true);
					}
					break;
				case this._const_stroke:
				case this._const_erase:
					{

						this._drawBcurve(_path, ctx);
					}
					break;
				case this._const_stroke_user:
				case this._const_erase_user:
					{

						this._drawUserStroke(_path, ctx);
					}
					break;
			}
		}
	};

	_pSketch._clone = function (obj) {
		if (!obj || typeof (obj) !== 'object') {
			return obj;
		}
		var temp = new obj.constructor();
		for (var key in obj) {
			if (!obj[key] || typeof (obj[key]) !== 'object') {
				temp[key] = obj[key];
			}
			else {
				temp[key] = this._clone(obj[key]);
			}
		}
		return temp;
	};

	_pSketch._undo = function () {
		if (this._undoable()) {
			this._current_state--;
			this._current_strokes = null;
			this._is_undo = true;
			this._redrawPath();
			if (this.updatebindingvalue != "nosetvalue") {
				this.updateToDataset();
			}
			this._is_undo = false;

			if (this._current_state == -1) {
				this.on_apply_text();
			}
		}
	};

	_pSketch._redo = function () {
		if (this._redoable()) {
			if (this._current_state == -1) {
				this._delete_text();
				this.displaytext = "";
			}

			this._current_state++;
			this._current_strokes = null;
			this._redrawPath();
			if (this.updatebindingvalue != "nosetvalue") {
				this.updateToDataset();
			}
		}
	};

	_pSketch._redrawPath = function () {
		var path = this._currentStrokes();
		this._clr_history = false;
		this._redrawPathData(path);
		this._setRedoUndo();
		this._clr_history = true;
	};

	_pSketch._checkEditmode = function () {
		if (this.editmode == this._const_none) {
			return false;
		}
		return true;
	};

	_pSketch._clearCanvasElem = function (elem) {
		if (elem) {
			elem.clearRect(elem.left, elem.top, elem.width, elem.height);
		}
	};

	_pSketch._clearCanvas = function (flag) {
		if (flag) {
			var args = [this._canvas_elem, this._canvas_elem_bg, this._canvas_elem_tmp];
			for (var i = 0, n = args.length; i < n; i++) {
				this._clearCanvasElem(args[i]);
			}
			args = null;
		}
	};

	_pSketch._clear = function (flag) {
		this._hideTextEditor(true);
		if (flag) {
			this._clearCanvas(flag);
		}
		this._image = null;
		this._initHistory();
		this._setRedoUndo();
		this._setValue(null);
		if (this.updatebindingvalue != "nosetvalue") {
			this.updateToDataset();
		}
	};

	_pSketch._setRedoUndo = function () {
		this.redoable = this._redoable();
		this.undoable = this._undoable();
	};

	_pSketch._drawPath = function (x, y) {
		if (this._isRtl()) {
			x = this._canvas_elem.width - x;
		}

		var coords = {
		};
		coords.x = x;
		coords.y = y;

		var canvas_elem = this._canvas_elem;
		if (!canvas_elem || !this._currentPath[0]) {
			return;
		}

		var dest = canvas_elem;
		var tool = this._currentPath[0].tool;

		if (tool != this._const_text && !this._is_touch) {
			this._delete_text();
			this.displaytext = "";
		}

		switch (tool) {
			case this._const_text:
				return;
			case this._const_erase:
			case this._const_erase_user:
				{

					dest = canvas_elem;
				}
				break;
		}
		this._currentPath.push(coords);

		this._regenStroke(this._currentPath, dest);
		this._regenStroke(this._currentPath, this._canvas_elem_tmp);
	};

	_pSketch._initPath = function (__style, _editmode, clientX, clientY, opt, clientwidth, clientheight, clienttext) {
		switch (this._currentPath[0] && this._currentPath[0].tool) {
			case this._const_stroke_user:
				this._endPath();
				break;
		}

		if (this._isRtl()) {
			clientX = this._canvas_elem.width - clientX;
		}


		var _style = this._clone(__style);
		var coords = {
		};
		coords.x = clientX;
		coords.y = clientY;

		coords.beginPath = true;
		_style.tool = _editmode;

		var mode = this._const_composit_source_over;
		if (_style.tool != this._const_text && this.textedit.visible) {
			this._resetTextEdit(true);
			return;
		}

		switch (_style.tool) {
			case this._const_erase:
			case this._const_erase_user:
				mode = this._const_composit_destination_out;
				break;
			case this._const_text:
				{

					if (opt == null) {
						if (this.textedit.visible) {
							this._resetTextEdit(true);
							return;
						}
						else {
							this._showTextEditor(coords.x, coords.y, clientwidth, clientheight, clienttext);
						}
					}
				}
				break;
			case this._const_stroke:
			case this._const_stroke_user:
			default:
				break;
		}
		_style.globalCompositeOperation = mode;

		for (var key in _style) {
			coords[key] = _style[key];
		}

		this._currentPath = this._add({
			type : _editmode, 
			stroke : [coords]
		});
		this._setRedoUndo();
	};

	_pSketch._resetTextEdit = function (arg) {
		if (this.textedit.visible == false) {
			return;
		}
		var editval = this.textedit.value;

		if (nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") {
			var elem = this.textedit._input_element;
			editval = elem.getElementValue();
			this.textedit.set_value(editval);
		}

		this._hideTextEditor(true);
		if (editval && arg) {
			this._currentPath[0].text = editval;
		}
		else {
			this._undo();
			this._setRedoUndo();
		}
		this.textedit.set_left(this._default_edit_x);
		this.textedit.set_top(this._default_edit_y);
	};

	_pSketch._initHistory = function () {
		this._history = [];
		this._current_state = -1;
		this._freeze_state = -1;
		this._current_strokes = null;
	};

	_pSketch._add = function (action) {
		if (this._current_state + 1 < this._history.length) {
			this._history.splice(this._current_state + 1, this._history.length - (this._current_state + 1));
		}

		this._history.push(action);
		this._current_state = this._history.length - 1;
		this._current_strokes = null;
		return action.stroke;
	};

	_pSketch._freeze = function (index) {
		if (index === undefined) {
			this._freeze_state = this._current_state;
		}
		else {
			this._freeze_state = index;
		}
	};

	_pSketch._undoable = function () {
		return (this._current_state > -1 && this._current_state > this._freeze_state);
	};

	_pSketch._redoable = function () {
		return this._current_state < this._history.length - 1;
	};

	_pSketch._currentStrokes = function () {
		var cur_strokes = this._current_strokes;
		if (cur_strokes == null) {
			var strokes = [];
			for (var i = 0; i <= this._current_state; i++) {
				var action = this._history[i];
				switch (action.type) {
					case "init":
					case "json":
					case "strokes":
					case "batch":
						break;
					case "clear":
						strokes = [];
						break;
					case this._const_stroke:
					case this._const_stroke_user:
					case this._const_image:
					case this._const_erase:
					case this._const_erase_user:
					case this._const_text:
					default:
						strokes.push(action.stroke);
						break;
				}
			}

			cur_strokes = strokes;
		}
		this._current_strokes = cur_strokes;
		return cur_strokes;
	};


	_pSketch._delete_text = function () {
		this._apply_client_padding = false;

		if (this._text_elem) {
			this._text_elem.destroy();
			this._text_elem = null;
		}
		if (this._control_element) {
			this._control_element.setElementPadding(nexacro.Component._default_padding);
		}
	};

	delete _pSketch;
	_pSketch = null;

	nexacro.SketchEditCtrl = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.TextArea.call(this, id, position, left, top, width, height, right, bottom, parent);
	};

	var _pSketchEditCtrl = nexacro._createPrototype(nexacro.TextArea, nexacro.SketchEditCtrl);
	nexacro.SketchEditCtrl.prototype = _pSketchEditCtrl;

	_pSketchEditCtrl.on_find_CurrentStyle_border = function (pseudo) {
		return this._find_inherit_pseudo_obj("border", pseudo, "border") || this.parent._find_pseudo_obj("border", pseudo, "border") || nexacro.Component._default_color;
	};

	_pSketchEditCtrl.on_find_CurrentStyle_color = function (pseudo) {
		return this.parent._find_pseudo_obj("color", pseudo, "color") || this._find_inherit_pseudo_obj("color", pseudo, "color") || nexacro.Component._default_color;
	};

	_pSketchEditCtrl.on_find_CurrentStyle_font = function (pseudo) {
		return this.parent._find_pseudo_obj("font", pseudo, "font") || this._find_inherit_pseudo_obj("font", pseudo, "font") || nexacro.Component._default_font;
	};

	_pSketchEditCtrl.on_find_CurrentStyle_align = function (pseudo) {
		return this.parent._find_pseudo_obj("align", pseudo, "align") || this._find_pseudo_obj("align", pseudo, "align") || nexacro.Component._default_align;
	};

	_pSketchEditCtrl.on_find_CurrentStyle_background = function (pseudo) {
		return this._find_inherit_pseudo_obj("background", pseudo, "background") || this.parent._find_pseudo_obj("background", pseudo, "background") || nexacro.Component._default_background;
	};

	_pSketchEditCtrl.on_fire_sys_onlbuttondown = function () {
		nexacro.EditCtrl.prototype.on_fire_sys_onlbuttondown.call(this);
		return true;
	};

	_pSketchEditCtrl.on_fire_sys_ontouchstart = function () {
		nexacro.EditCtrl.prototype.on_fire_sys_ontouchstart.call(this);
		return true;
	};

	_pSketchEditCtrl.on_fire_onclick = function () {
		nexacro.EditCtrl.prototype.on_fire_onclick.call(this);
		return true;
	};

	_pSketchEditCtrl.on_fire_ontab = function () {
		nexacro.EditCtrl.prototype.on_fire_ontab.call(this);
		return true;
	};

	delete _pSketchEditCtrl;
	_pSketchEditCtrl = null;

	nexacro.ImageSketchBackGround = function (target) {
		nexacro.Image.call(target);
		this._is_subcontrol = true;
		this.parent = target;
	};

	var _pImageSketchBackGround = nexacro._createPrototype(nexacro.Image, nexacro.ImageSketchBackGround);
	nexacro.ImageSketchBackGround.prototype = _pImageSketchBackGround;

	_pImageSketchBackGround.on_load = function (imageurl, width, height, _handle, errstatus, fireerrorcode, returncode, locationuri) {
		this.width = width;
		this.height = height;

		var sketch = this.parent;
		if (errstatus && errstatus < 0) {
			var errormsg = "";
			if (fireerrorcode) {
				errormsg = nexacro._GetSystemErrorMsg(this, fireerrorcode);
			}
			else {
				errormsg = nexacro._GetSystemErrorMsg(this, sketch._const_code_loadinvalidimage_msg).replace("%0", sketch._const_code_loadinvalidimage);
			}

			if (!locationuri) {
				locationuri = sketch._getRefFormBaseUrl();
			}

			if (sketch._clr_history) {
				sketch.on_fire_onerror(this, fireerrorcode, errormsg, sketch._const_errortype_obj, locationuri, imageurl, sketch._const_code_loadinvalidimage);
			}
		}
		else {
			if (_handle) {
				this._handle = _handle;
			}

			var canvas_elem = sketch._canvas_elem_bg;
			if (canvas_elem && sketch._image) {
				if (sketch._isEnableRedraw()) {
					canvas_elem.drawImage(sketch._image, 0, 0, width, height);
					if (sketch._canvas_elem_tmp) {
						sketch._canvas_elem_tmp.drawImage(sketch._image, 0, 0, width, height);
					}
					sketch._setImageValue(sketch._image);
				}
				if (sketch._clr_history) {
					sketch.on_fire_onload(this, imageurl);
				}
			}
		}
		if (sketch.updatebindingvalue != "nosetvalue") {
			sketch.updateToDataset();
		}
	};

	_pImageSketchBackGround.set_src = function (v) {
		if (this.src != v) {
			this.src = v;
			this._handle = nexacro._getImageObject(v, this.on_load, this, this.parent._getRefFormBaseUrl());
			if (this._handle) {
				return true;
			}
		}
		return false;
	};

	delete _pImageSketchBackGround;
	_pImageSketchBackGround = null;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.ExcelExportObject) {
	nexacro.ExcelExportProgressEventInfo = function (obj, id, itemindex, itemtype, recordindex, errorobj) {
		this.id = this.eventid = id || "onprogress";
		this.fromobject = obj;
		this.fromreferenceobject = errorobj;

		this.itemindex = itemindex;
		this.itemtype = itemtype;
		this.recordindex = recordindex;
	};
	var _pExportEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ExcelExportProgressEventInfo);
	nexacro.ExcelExportProgressEventInfo.prototype = _pExportEventInfo;
	_pExportEventInfo._type_name = "ExcelExportProgressEventInfo";

	delete _pExportEventInfo;

	nexacro.ExcelExportEventInfo = function (obj, id, url, errorobj) {
		this.id = this.eventid = id || "onsuccess";
		this.fromobject = obj;
		this.fromreferenceobject = errorobj;

		this.url = url;
	};
	var _pExcelExportEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ExcelExportEventInfo);
	nexacro.ExcelExportEventInfo.prototype = _pExcelExportEventInfo;
	_pExcelExportEventInfo._type_name = "ExcelExportEventInfo";

	delete _pExcelExportEventInfo;


	nexacro.ExcelExportErrorEventInfo = function (obj, id, errortype, errormsg, errorobj, statuscode) {
		this.id = this.eventid = id || "onerror";
		this.fromobject = obj;
		this.fromreferenceobject = errorobj;

		this.errortype = errortype;
		this.errormsg = errormsg;
		this.statuscode = statuscode;
	};
	var _pExportErrorEventInfo = nexacro._createPrototype(nexacro.ErrorEventInfo, nexacro.ExcelExportErrorEventInfo);
	nexacro.ExcelExportErrorEventInfo.prototype = _pExportErrorEventInfo;
	_pExportErrorEventInfo._type_name = "ExcelExportErrorEventInfo";

	delete _pExportErrorEventInfo;


	nexacro.ExcelExportObject = function (name, parent) {
		this.id = this.name = name;

		if (!parent) {
			parent = application.getActiveForm();
			if (!parent) {
				var popupframes = application.popupframes;
				var frames_len = popupframes ? popupframes.length : 0;
				for (var i = 0; i < frames_len; i++) {
					var currwin = popupframes[i]._window;
					if (currwin) {
						var frame = currwin.getActiveFrame();
						if (frame && frame.form instanceof nexacro.Form) {
							parent = frame.form;
							break;
						}
					}
				}

				if (!parent) {
					currwin = application.mainframe._window;
					var cur_focus_paths = currwin.getCurrentFocusPaths();
					var cur_focus_paths_len = (cur_focus_paths ? cur_focus_paths.length : 0);
					for (i = 0; i < cur_focus_paths_len; i++) {
						var _comp = cur_focus_paths[i];
						if (!_comp) {
							continue;
						}
						if (_comp._is_form) {
							parent = _comp;
							break;
						}
					}
				}
			}
		}
		this.parent = parent;

		this.activepagename = "";
		this.exportactivemode = "noactive";
		this.exporteventtype = "itemrecord";
		this.exportfilename = "";

		this.exportmessagealert = "";
		this.exportmessagecomplete = "";
		this.exportmessageprocess = "";
		this.exportmessageready = "";

		this.exportopenmode = "noopen";

		this._exporttype = nexacro.ExportTypes.EXCEL;
		this.exporttype = nexacro.ExportTypes.EXCEL;
		this.exportuitype = "none";

		this.templatefilename = "";
		this.commdataformat = "";

		this.commcompress = "none";
		this.exporturl = "";

		this.filedialogpath = "";
		this.openedpath = "";

		this.filefilter = "";
		this.filefilterindex = 0;


		this._exportuitype = 0;
		this._exporturl = "";
		this._commcompress = false;
		this._commdataformat = 2;
		this._grids = [];
		this._dataset = [];
		this._xml = [];
		this._allRowCount = 0;
		this._progress_pos = 0;
		this._uniqueIndex = 0;
		this._fileURL = "";
		this._itemsIndex = 0;

		this._argsParam = null;
		this._argsDsParam = null;
		this._is_orgval = false;
		this._file_password = null;
		this._wrap_text = true;
		this._file_download = true;

		this._exportBar;
		this._tempSaveMethod = null;

		this.onsuccess = new nexacro.EventListener("onsuccess");
		this.onprogress = new nexacro.EventListener("onprogress");
		this.onerror = new nexacro.EventListener("onerror");
		this._handle = null;
		nexacro._create_filedownload_handle(this.on_complete_download, this);

		this._event_list = {
			"onsuccess" : 1, 
			"onerror" : 1, 
			"onprogress" : 1
		};
	};

	var _pExcelExport = nexacro.ExcelExportObject.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.ExcelExportObject);
	_pExcelExport._type_name = "ExportObject";

	_pExcelExport.excelTypeTable = 
		{
		EXCEL : 0x0100, 
		EXCEL97 : 0x0110, 
		EXCEL2007 : 0x0120, 
		HANCELL2010 : 0x0400, 
		HANCELL2014 : 0x0410, 
		CSV : 0x0500, 
		256 : 0x0100, 
		272 : 0x0110, 
		288 : 0x0120, 
		1024 : 0x0400, 
		1040 : 0x0410, 
		1280 : 0x0500
	};

	_pExcelExport.on_created = nexacro._emptyFn;
	_pExcelExport.set_templatefilename = function (v) {
		if (v != this.templatefilename) {
			this.templatefilename = v;
		}
		return v;
	};

	_pExcelExport.set_commdataformat = function (v) {
		if (v != this.commdataformat) {
			this.commdataformat = v;
			switch (v.toString().toUpperCase()) {
				case "XML":
					this._commdataformat = 0;
					break;
				case "BINARY":
					this._commdataformat = 1;
					break;
				default:
					this._commdataformat = 2;
					break;
			}
		}
		return v;
	};

	_pExcelExport.set_commcompress = function (v) {
		if (v != this.commcompress) {
			this.commcompress = v;
			switch (v.toString().toUpperCase()) {
				case "COMPRESS":
					this._commcompress = true;
					break;
				default:
					this._commcompress = false;
					break;
			}
		}
		return v;
	};

	_pExcelExport.set_exporturl = function (v) {
		if (v != this.exporturl) {
			this.exporturl = v;
			this._exporturl = nexacro._getServiceLocation(v, this.parent._getFormBaseUrl());
		}
		return v;
	};

	_pExcelExport.set_name = function (v) {
		this.id = this.name = v;
	};

	_pExcelExport.set_exporttype = function (v) {
		if (v != this.exporttype) {
			this.exporttype = v;
			var export_type = this.excelTypeTable[(v + "").toUpperCase()];
			if (!export_type) {
				export_type = 256;
			}
			this._exporttype = export_type;
		}
		return v;
	};

	_pExcelExport.set_activepagename = function (v) {
		if (v != this.activepagename) {
			this.activepagename = v;
		}
		return v;
	};

	_pExcelExport.set_exportactivemode = function (v) {
		if (v != this.exportactivemode) {
			this.exportactivemode = v;
		}
		return v;
	};

	_pExcelExport.set_exporteventtype = function (v) {
		if (v != this.exporteventtype) {
			this.exporteventtype = v;
		}
		return v;
	};


	_pExcelExport.set_exportopenmode = function (v) {
		if (v != this.exportopenmode) {
			this.exportopenmode = v;
		}
		return v;
	};

	_pExcelExport.set_exportfilename = function (v) {
		if (v != this.exportfilename) {
			this.exportfilename = v;
		}
		return v;
	};

	_pExcelExport.set_exportmessagealert = function (v) {
		if (v != this.exportmessagealert) {
			this.exportmessagealert = v;
		}
		return v;
	};

	_pExcelExport.set_exportuitype = function (v) {
		if (v != this.exportuitype) {
			this.exportuitype = v;
			switch (v) {
				case "exportprogress":
					this._exportuitype = 1;
					break;
				case "statusbar":
					this._exportuitype = 2;
					break;
				default:
					this._exportuitype = 0;
					break;
			}
		}
		return v;
	};

	_pExcelExport.set_exportmessageready = function (v) {
		if (v != this.exportmessageready) {
			this.exportmessageready = v;
		}

		return v;
	};

	_pExcelExport.set_exportmessageprocess = function (v) {
		if (v != this.exportmessageprocess) {
			this.exportmessageprocess = v;
		}

		return v;
	};

	_pExcelExport.set_exportmessagecomplete = function (v) {
		if (v != this.exportmessagecomplete) {
			this.exportmessagecomplete = v;
		}

		return v;
	};

	_pExcelExport.set_filedialogpath = function (v) {
		this.filedialogpath = v;
	};

	_pExcelExport.set_openedpath = function (v) {
	};
	_pExcelExport.set_filefilter = function (v) {
		this.filefilter = v;
	};

	_pExcelExport.set_filefilterindex = function (v) {
		this.filefilterindex = v;
	};

	_pExcelExport.addExportItem = function (type, item, range) {
		var size = -1;
		var eItem;
		if (arguments.length == 2) {
			if (type && item && item instanceof nexacro.ExportItem) {
				eItem = item;
				eItem.parent = this;
				eItem._setEventHandler("onprogress", this.on_notify_onprogress, this);
				eItem._setEventHandler("onsuccess", this.on_notify_onsuccess, this);
				eItem._setEventHandler("onerror", this.on_notify_onerror, this);
			}
			else {
				return -1;
			}
		}
		else {
			if (type && item && type == this._getItemType(item)) {
				eItem = new nexacro.ExportItem(this.id + "item" + this._uniqueIndex++, this);

				eItem._setEventHandler("onprogress", this.on_notify_onprogress, this);
				eItem._setEventHandler("onsuccess", this.on_notify_onsuccess, this);
				eItem._setEventHandler("onerror", this.on_notify_onerror, this);

				var len = arguments.length;
				switch (len) {
					case 11:
						arguments[10] && eItem.set_acceptstyle(arguments[10]);
					case 10:
						arguments[9] && eItem.set_exportsize(arguments[9]);
					case 9:
						arguments[8] && eItem["set_exceptstyle"](arguments[8]);
					case 8:
						arguments[7] && eItem["set_exportimage"](arguments[7]);
					case 7:
						arguments[6] && eItem["set_exportvalue"](arguments[6]);
					case 6:
						arguments[5] && eItem["set_exportmerge"](arguments[5]);
					case 5:
						arguments[4] && eItem["set_exportselect"](arguments[4]);
					case 4:
						arguments[3] && eItem["set_exporthead"](arguments[3]);
					case 3:
						arguments[2] && eItem["set_range"](arguments[2]);
					case 2:
						arguments[1] && eItem["set_source"](arguments[1]);
						break;
				}
			}
			else {
				return -1;
			}
		}
		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				eItem.set_type(type);
				size = this._grids.push(eItem) - 1;
				break;
			case nexacro.ExportItemTypes.DATA:
				break;
			case nexacro.ExportItemTypes.XML:
				break;
		}
		return size;
	};

	_pExcelExport.clear = function () {
		var count = 0;

		count += this._grids.length;
		count += this._dataset.length;
		count += this._xml.length;

		this._grids = [];
		this._dataset = [];
		this._xml = [];

		return count;
	};

	_pExcelExport.clearExportItems = function (type) {
		var length;
		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				length = this._grids.length;
				this._grids.length = 0;
				this._grids = [];
				break;
		}

		if (length == 0) {
			this._uniqueIndex = 0;
		}
		return length;
	};

	_pExcelExport.count = function () {
		var count = 0;

		count += this._grids.length;
		count += this._dataset.length;
		count += this._xml.length;

		return count;
	};

	_pExcelExport.countExportItems = function (type) {
		var count = 0;

		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				count += this._grids.length;
				break;
		}

		return count;
	};

	_pExcelExport.delExportItem = function (type, index) {
		var isDelete = false;

		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				if (this._grids.splice(index, 1).length > 0) {
					isDelete = true;
				}
				break;
		}

		return isDelete;
	};

	_pExcelExport.getExportItem = function (type, index) {
		var item = null;

		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				item = this._grids[index];
				break;
		}

		return item ? item : null;
	};

	_pExcelExport.setExportItem = function (type, index, item) {
		if (!item || !(item instanceof nexacro.ExportItem)) {
			return false;
		}

		var reVal = false;

		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				if (index > -1 && index < this._grids.length) {
					item.parent = this;
					this._grids[index] = item;
					reVal = true;
				}
				break;
		}

		return reVal;
	};

	_pExcelExport.exportItems = function (type) {
		var g_len = -1;
		if (!this.exporturl) {
			return g_len;
		}
		switch (type) {
			case nexacro.ExportItemTypes.GRID:
				var grid_items = this._grids;
				var g_len = this._gCount = grid_items.length;
				this._allCount = g_len;

				if (g_len > 0) {
					if (this.exportmessagealert != "") {
						alert(this.exportmessagealert);
					}
					grid_items[0]._gridItemExport(this);
				}
				break;
		}
		return g_len;
	};

	_pExcelExport._partition_size = 100000;
	_pExcelExport.exportData = function (argsParam, argsDsParam, bOrgValue, filedownload) {
		var i = 0;
		this._argsParam = argsParam;
		this._argsDsParam = argsDsParam;
		this._is_orgval = bOrgValue ? true : false;
		this._file_download = (filedownload !== undefined) ? filedownload : true;

		if (argsParam) {
			this._file_password = null;
			var userDatas = argsParam.split(",");
			for (i = userDatas.length - 1, start = 0; i >= start; i--) {
				var dataArr = userDatas[i].split("=");
				if (dataArr[0] == "filepassword") {
					this._file_password = dataArr[1];
					userDatas.splice(i, 1);
				}
				else if (dataArr[0] == "wraptext") {
					this._wrap_text = nexacro._toBoolean(dataArr[1]);
					userDatas.splice(i, 1);
				}
				else if (dataArr[0] == "contenttype") {
					var datatype = dataArr[1].toLowerCase();
					if (datatype == "csv") {
						this._commdataformat = 3;
					}
					else {
						this._commdataformat = 2;
					}
				}
			}
			argsParam = userDatas.join(",");
			this._argsParam = argsParam;
		}

		var ret = -1;
		if (!this.exporturl) {
			return ret;
		}

		var grid_items = this._grids;
		var g_len = this._gCount = grid_items.length;
		this._allCount = g_len;
		if (this._allCount > 0 && this.exportmessagealert != "") {
			alert(this.exportmessagealert);
		}

		for (i = 0; i < g_len; i++) {
			this._allRowCount += grid_items[i].source._getGridRowCount();
		}
		if (g_len > 0) {
			grid_items[0]._gridItemExport(this);
		}

		return this.count();
	};

	_pExcelExport.destroy = function () {
		if (this._exportBar) {
			this._exportBar.destroy();
			this._exportBar = null;
		}
		this._excel_suppress_info = null;
		this._merge_datas = null;
		this._grids.length = 0;
		this._dataset.length = 0;
		this._xml.length = 0;
		this.parent.removeChild(this.id);
		this.parent = null;

		return true;
	};

	_pExcelExport.on_fire_onprogress = function (obj, e) {
		var event = this.onprogress;

		if (event && event._has_handlers) {
			event._fireEvent(this, e);
		}
	};

	_pExcelExport.on_fire_onsuccess = function (obj, e) {
		var event = this.onsuccess;

		if (event && event._has_handlers) {
			event._fireEvent(this, e);
		}
	};

	_pExcelExport.on_fire_onerror = function (obj, e) {
		var event = this.onerror;
		var ret;

		if (event && event._has_handlers) {
			ret = event._fireEvent(this, e);
		}
		return ret;
	};

	_pExcelExport.on_notify_onprogress = function (obj, e) {
		this.on_fire_onprogress(obj, e);
		return false;
	};

	_pExcelExport.on_notify_onsuccess = function (obj, e) {
		this.on_fire_onsuccess(obj, e);
		return false;
	};

	_pExcelExport.on_notify_onerror = function (obj, e) {
		this.on_fire_onerror(obj, e);
		return false;
	};

	_pExcelExport.on_complete_download = function (status, data, url, errcode, httpcode, errmsg) {
		if (status < 0) {
		}
		else {
			if (this.exportactivemode == "active") {
				nexacro._execShell(data);
			}
		}
	};

	_pExcelExport._getItemType = function (item) {
		var rt;
		switch (item && item._type_name) {
			case "Grid":
				rt = nexacro.ExportItemTypes.GRID;
				break;
			case "Dataset":
				break;
			case "Xml":
				break;
		}
		return rt;
	};

	_pExcelExport._getProcessStr = function (item, itemrecord, totalrecord) {
		var str = "";
		str = this.exportmessageprocess.replace("%d", item);
		str = str.replace("%d", itemrecord);
		str = str.replace("%d", totalrecord);

		str = nexacro._replaceAll(str, "%i", item);
		str = nexacro._replaceAll(str, "%r", itemrecord);
		str = nexacro._replaceAll(str, "%t", totalrecord);
		str = nexacro._replaceAll(str, "%p", Math.round(itemrecord / totalrecord * 100) + "%");

		return str;
	};

	_pExcelExport._getForm = function () {
		if (this.parent instanceof nexacro.Form) {
			return this.parent;
		}
		return null;
	};

	_pExcelExport._getExportBar = function (uiType) {
		var form = this._getForm();
		var pbar_name = "_exportBar";
		var obj = form[pbar_name];
		if (obj) {
			obj.destroy();
		}

		obj = new nexacro.ExportProgress(pbar_name, "absolute", 0, 0, 10, 10, null, null, form);
		form.addChild(obj.name, obj);
		obj._uitype = uiType;
		if (obj.createComponent(true)) {
			obj.on_created();
		}
		return obj;
	};

	delete _pExcelExport;

	nexacro.ExportItem = function (name, parent) {
		this.id = this.name = name;
		this.parent = parent || null;

		this.acceptstyle = "";
		this.exceptstyle = "";
		this.exporthead = "allband";
		this._exporthead = "";
		this.exportimage = "none";
		this.exportmerge = "suppress";
		this._exportmerge = 1;
		this.exportselect = "allrecord";
		this.exportvalue = "allstyle";
		this.exportsize = "width";

		this.range = "";
		this.source = "";
		this.type = "";

		this._applyA = true;
		this._applyB = true;
		this._applyC = true;
		this._applyF = true;
		this._applyHead = true;
		this._applySumm = true;
		this._applyL = false;

		this._d_BLColor = "";

		this._seq = 1;
		this._preStartRow = 0;
		this._startRow = 0;
		this._eof = false;
		this._instanceId = "";

		this._a_ct = 0;
		this._bg_ct = 0;
		this._c_ct = 0;
		this._f_ct = 0;
		this._l_ct = 0;
		this._t_ct = 0;
		this._sm_ct = 0;
		this._g_ct = 0;
		this._s_ct = 0;
		this._stylecache = {
		};
		this._selectcount = 0;
		this._merge_datas = null;
		this._excel_suppress_info = {
		};

		this._gridTempInfo = null;

		this._tmpSuppressInfos;
		this._event_list = {
			"onsuccess" : 1, 
			"onprogress" : 1, 
			"onerror" : 1
		};
	};

	var _pItem = nexacro.ExportItem.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.ExportItem);
	_pItem._type_name = "ExportItem";

	_pItem._suppress_align_table = {
		"first" : "top", 
		"first,over" : "top", 
		"middle" : "middle", 
		"middle,over" : "middle", 
		"last" : "bottom", 
		"last,over" : "bottom"
	};


	_pItem.set_acceptstyle = function (v) {
		if (v != this.acceptstyle) {
			this.acceptstyle = v;
			switch (v.toLowerCase()) {
				case "cellline":
					this._applyL = true;
					break;
			}
		}
		return v;
	};
	_pItem.set_exceptstyle = function (v) {
		if (v != this.exceptstyle) {
			this.exceptstyle = v;
			var except = v.replace(/ /g, "").split(",");
			var eLen = except.length;
			for (var i = 0; i < eLen; i++) {
				switch (except[i].toLowerCase()) {
					case "align":
						this._applyA = false;
						break;
					case "background":
						this._applyB = false;
						break;
					case "color":
						this._applyC = false;
						break;
					case "font":
						this._applyF = false;
						break;
				}
			}
		}

		return v;
	};

	_pItem.set_exporthead = function (v) {
		if (v != this.exporthead) {
			this.exporthead = v;
			var except = v.replace(/ /g, "").split(",");
			var eLen = except.length;
			for (var i = 0; i < eLen; i++) {
				switch (except[i].toLowerCase()) {
					case "nohead":
						this._applyHead = false;
						break;
					case "nosumm":
						this._applySumm = false;
						break;
					default:
						this._applySumm = true;
						this._applySumm = true;
						break;
				}
			}
		}

		if (!this._applyHead || !this._applySumm) {
			if (!this._applyHead && !this._applySumm) {
				this._exporthead = "nohead, nosumm";
			}
			else if (!this._applyHead) {
				this._exporthead = "nohead";
			}
			else {
				this._exporthead = "nosumm";
			}
		}
		else {
			this._exporthead = "allband";
		}

		return v;
	};

	_pItem.set_exportimage = function (v) {
		if (v != this.exportimage) {
			this.exportimage = v;
		}

		return v;
	};

	_pItem.set_exportmerge = function (v) {
		if (v != this.exportmerge) {
			this.exportmerge = v;
			switch (v) {
				case "nosuppress":
					this._exportmerge = 0;
					break;
				case "merge":
					this._exportmerge = 2;
					break;
				default:
					this._exportmerge = 1;
					break;
			}
		}

		return v;
	};

	_pItem.set_exportselect = function (v) {
		if (v != this.exportselect) {
			this.exportselect = v;
		}

		return v;
	};

	_pItem.set_exportvalue = function (v) {
		if (v != this.exportvalue) {
			this.exportvalue = v;
		}

		return v;
	};


	_pItem.set_range = function (v) {
		if (v != this.range) {
			this.range = v;
		}

		return v;
	};

	_pItem.set_source = function (v) {
		if (v != this.source) {
			this.source = v;
		}

		return v;
	};

	_pItem.set_type = function (v) {
		if (v != this.type) {
			this.type = v;
		}

		return v;
	};

	_pItem.set_exportsize = function (v) {
		if (v != this.exportsize) {
			this.exportsize = v;
		}
		return v;
	};



	_pItem.on_fire_onprogress = function (obj, itemindex, itemtype, recordindex) {
		var event = this.parent.onprogress;

		if (event && event._has_handlers) {
			var evt = new nexacro.ExcelExportProgressEventInfo(obj, "onprogress", itemindex, itemtype, recordindex, this);
			event._fireEvent(this, evt);
		}
	};

	_pItem.on_fire_onsuccess = function (obj, referObj, url) {
		var event = this.parent.onsuccess;

		if (event && event._has_handlers) {
			var evt = new nexacro.ExcelExportEventInfo(obj, "onsuccess", url, this);
			event._fireEvent(this, evt);
		}
	};


	_pItem.on_fire_onerror = function (obj, errortype, errormsg, statuscode) {
		var event = this.parent.onerror;

		if (event && event._has_handlers) {
			var evt = new nexacro.ExcelExportErrorEventInfo(obj, "onerror", errortype, errormsg, this, statuscode);
			event._fireEvent(this, evt);
		}
	};

	_pItem._getWindow = function () {
		var form = this.parent.parent;
		if (form._is_form) {
			return form._getWindow();
		}
		return null;
	};

	_pItem._getWindowHandle = function () {
		var form = this.parent.parent;
		if (form._is_form) {
			return form._getWindowHandle();
		}
		return null;
	};

	_pItem._getCellStyle = function (cell, rowIdx, odd, sn, pseudo) {
		var cellStyleinfo;
		var selected = pseudo == "selected" ? true : false;

		switch (sn) {
			case "align":
				cellStyleinfo = cell._query_pseudo_align(rowIdx, cell.displaytype, pseudo);
				break;
			case "background":
				cellStyleinfo = cell._query_pseudo_background(rowIdx, odd, selected, pseudo);
				break;
			case "border":
				cellStyleinfo = cell._query_pseudo_border(rowIdx, false, "normal", 0);
				break;
			case "color":
				cellStyleinfo = cell._query_pseudo_color(rowIdx, odd, selected, pseudo);
				break;
			case "font":
				cellStyleinfo = cell._query_pseudo_font(rowIdx, selected, pseudo);
				break;
			case "gradation":
				cellStyleinfo = cell._query_pseudo_gradation(rowIdx, odd, selected, pseudo);
				break;
		}
		return cellStyleinfo;
	};


	_pItem._getCellText = function (source, rowidx, cellidx) {
		var celltext;

		if (source && source instanceof nexacro.Grid) {
			var band;
			if (rowidx == -1) {
				band = "head";
			}
			else if (rowidx == -2) {
				band = "summ";
			}
			else {
				band = "body";
			}

			var export_obj = this.parent;
			var display_type = source.getCellProperty(band, cellidx, "displaytype");

			if (source.getSubCellCount(band, cellidx)) {
				if (export_obj._is_orgval && display_type != "date") {
					celltext = source.getSubCellValue(rowidx, cellidx, 0);
				}
				else {
					celltext = source.getSubCellText(rowidx, cellidx, 0);
				}
			}
			else {
				if (export_obj._is_orgval && display_type != "date") {
					celltext = source.getCellValue(rowidx, cellidx);
				}
				else {
					celltext = source.getCellText(rowidx, cellidx);
				}
			}
		}

		return celltext;
	};

	_pItem._find_styleName = function (dataset, type, value, count, startRow) {
		var style_name = "";
		var s_type = "";
		var r_count = 0;
		var finded_row = -1;
		if (value) {
			finded_row = dataset.findRow("value", value, startRow);
			if (finded_row > -1) {
				s_type = dataset.getColumn(finded_row, 0);
				if (s_type == type) {
					style_name = dataset.getColumn(finded_row, 1);
				}
				else {
					return this._find_styleName(dataset, type, value, count, finded_row + 1);
				}
			}
			else {
				r_count = dataset.getRowCount();
				style_name = type + ++count;
				dataset.addRow();
				dataset.setColumn(r_count, "type", type);
				dataset.setColumn(r_count, "name", style_name);
				dataset.setColumn(r_count, "value", value);
			}
		}
		return [style_name, count];
	};

	_pItem._getFitValue = function (obj) {
		if (!obj) {
			return;
		}
		var val_a = [];
		var value = obj._value;

		val_a = value.split(" ");
		return val_a.join(",");
	};

	_pItem._getFitFontValue = function (obj) {
		if (!obj) {
			return;
		}

		var str, type = obj.type.split(" ").join(",");
		str = type + "," + obj.size + "," + obj.face;

		return str;
	};

	_pItem._getHEXtoRGB = function (color) {
		var rgb;
		if (typeof color == "object") {
			rgb = this._getHexColor(color._value.split(" ")[0]);
		}
		else {
			rgb = this._getHexColor(color);
		}
		var style_a = [];

		if (rgb === "") {
			rgb = color._value;
		}
		else {
			if (rgb.indexOf("#") > -1) {
				style_a.push(parseInt(rgb.substring(1, 3), 16));
				style_a.push(parseInt(rgb.substring(3, 5), 16));
				style_a.push(parseInt(rgb.substring(5, 7), 16));
				rgb = style_a.join(",");
			}
			else {
				var start = rgb.indexOf("(");
				var end = rgb.indexOf(")");
				style_a = rgb.substring(start + 1, end - 1).split(",");
				style_a.pop();
				rgb = style_a.join(",");
			}
		}
		return rgb;
	};

	_pItem._makeforDsStyle = function (ds_style, align, background, color, font, line, cell_type, row_merge, col_merge) {
		var rt;
		var cellStyleinfo = "";

		if (this._applyA) {
			rt = this._find_styleName(ds_style, "align", align, this._a_ct);
			style_name = rt[0];
			this._a_ct = rt[1];
			cellStyleinfo += "align:" + style_name + ",";
		}
		if (this._applyB) {
			rt = this._find_styleName(ds_style, "background", background, this._bg_ct);
			style_name = rt[0];
			this._bg_ct = rt[1];
			cellStyleinfo += "background:" + style_name + ",";
		}
		if (this._applyC) {
			rt = this._find_styleName(ds_style, "color", color, this._c_ct);
			style_name = rt[0];
			this._c_ct = rt[1];
			cellStyleinfo += "color:" + style_name + ",";
		}
		if (this._applyF) {
			rt = this._find_styleName(ds_style, "font", font, this._f_ct);
			style_name = rt[0];
			this._f_ct = rt[1];
			cellStyleinfo += "font:" + style_name + ",";
		}

		rt = this._find_styleName(ds_style, "line", line, this._l_ct);
		style_name = rt[0];
		this._l_ct = rt[1];
		cellStyleinfo += "line:" + style_name + ",";

		rt = this._find_styleName(ds_style, "type", cell_type, this._t_ct);
		style_name = rt[0];
		this._t_ct = rt[1];
		cellStyleinfo += "type:" + style_name;

		if (row_merge > 1) {
			rt = this._find_styleName(ds_style, "rowsuppress", row_merge, this._sm_ct);
			style_name = rt[0];
			this._sm_ct = rt[1];
			cellStyleinfo += ",rowsuppress:" + style_name;
		}
		if (col_merge > 1) {
			rt = this._find_styleName(ds_style, "colsuppress", col_merge, this._sm_ct);
			style_name = rt[0];
			this._sm_ct = rt[1];
			cellStyleinfo += ",colsuppress:" + style_name;
		}

		rt = this._find_styleName(ds_style, "style", cellStyleinfo, this._s_ct);
		style_name = rt[0];
		this._s_ct = rt[1];

		return style_name;
	};

	_pItem._checkExpr = function (obj) {
		if (obj && obj._bindtype != 0) {
			return true;
		}
		return false;
	};

	_pItem._checkGradation = function (background) {
		if (background._value.match(/@gradation/)) {
			return true;
		}
		return false;
	};

	_pItem._getHexColor = function (color) {
		var v = nexacro._xreNamedColorList[color];
		if (v) {
			return v;
		}

		len = color.length;
		if (color.substring(0, 1) == '#') {
			if (len == 7) {
				return color;
			}
			if (len == 9) {
				return color.substr(0, 7);
			}
		}
		if (color.substring(0, 2) == "0x") {
			if (len == 8) {
				return "#" + color.substring(2);
			}
			if (len == 10) {
				return "#" + color.substring(2, 8);
			}
		}
		return "";
	};

	_pItem._getGradationColor = function (gradation) {
		var gColor;
		var gColor2;
		var gArr = [];
		if (gradation) {
			gColor = gradation._value;
			if (gColor != "") {
				gColor = this._getHexColor(gradation.start_color);
				gColor2 = this._getHexColor(gradation.end_color);

				if (gColor.indexOf("#") > -1) {
					var name = gColor + gColor2;
					if (this._stylecache[name]) {
						return this._stylecache[name];
					}
					else {
						gArr.push(Math.round((parseInt(gColor.substring(1, 3), 16) + parseInt(gColor2.substring(1, 3), 16)) / 2));
						gArr.push(Math.round((parseInt(gColor.substring(3, 5), 16) + parseInt(gColor2.substring(3, 5), 16)) / 2));
						gArr.push(Math.round((parseInt(gColor.substring(5), 16) + parseInt(gColor2.substring(5), 16)) / 2));
						gColor = gArr.join(",");
						this._stylecache[name] = gColor;
					}
				}
				return gColor;
			}
		}
		return "";
	};

	_pItem._getCellBodyStyle = function (cell, idx, t) {
		var align, background, background2, color, color2, font, line, gradation, gradation2, c_style, c_style2, _background2, _color2;

		var str = "";
		var ds_style = this._ds_style;
		var flag = false;
		var viewType = cell.displaytype._value;

		align = cell._stylecache["alignnormal" + viewType];
		background = cell._stylecache["backgroundfalsefalsenormal"];
		color = cell._stylecache["colorfalsefalsenormal"];
		font = cell._stylecache["fontfalsenormal"];

		if (this._applyL) {
			line = cell._stylecache["linefalsebothn"];
			if (!line) {
				line = cell.style.line;
				if (!line) {
					line = cell._query_pseudo_border(0, false, "normal", 0);
				}
			}
		}

		background2 = cell._stylecache["backgroundtruefalsenormal"];
		color2 = cell._stylecache["colortruefalsenormal"];

		if (!align && !background && !color && !font) {
			background2 = cell.style.background2;
			if (!background2) {
				background2 = cell._query_pseudo_background(0, true, false, "normal");
			}
			color2 = cell.style.color2;
			if (!color2) {
				color2 = cell._query_pseudo_color(0, true, false, "normal");
			}
		}
		if (!align) {
			align = cell.style.align;
			if (!align) {
				align = cell._query_pseudo_align(0, viewType, "normal");
			}
		}

		if (!background) {
			background = cell.style.background;
			if (!background) {
				background = cell._query_pseudo_background(0, false, false, "normal");
			}
		}

		if (!color) {
			color = cell.style.color;
			if (!color) {
				color = cell._query_pseudo_color(0, false, false, "normal");
			}
		}
		if (!font) {
			font = cell.style.font;
			if (!font) {
				font = cell._query_pseudo_font(0, false, "normal");
			}
		}

		var _align = align ? align._getStyleObject(this.source._isRtl()) : null;
		_align = this._getFitValue(_align);

		if (this._checkGradation(background)) {
			gradation = cell._stylecache["gradationfalsefalsenormal"];
			if (!gradation) {
				gradation = cell.style.gradation;
				if (!gradation) {
					gradation = cell._query_pseudo_gradation(0, false, false, "normal");
				}
			}
			var _background = this._getGradationColor(gradation);
		}
		else {
			var _background = this._getHEXtoRGB(background);
		}

		var _color = this._getHEXtoRGB(color);
		var _font = this._getFitFontValue(font);

		var _linestyle = "empty:empty:empty:empty";
		var linecolor = {
			vertical : "empty", 
			horizon : "empty"
		};
		if (this._applyL && line) {
			if (line.right_style != "none" && line._right_width != 0) {
				linecolor.vertical = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
				linecolor.horizon = this._getHEXtoRGB(line.bottom_color) + (line.bottom_style == "solid" ? "" : "," + line.bottom_style);
				if (this._applyHead) {
					_linestyle = (cell._col == 0 ? linecolor.vertical : "empty") + ":" + "empty" + ":";
				}
				else {
					_linestyle = (cell._col == 0 ? linecolor.vertical : "empty") + ":" + (cell._row == 0 ? linecolor.horizon : "empty") + ":";
				}

				_linestyle += linecolor.vertical + ":" + linecolor.horizon;
			}
		}

		if (this._checkExpr(align)) {
			_align = undefined;
		}
		else {
			this._stylecache[idx + "align"] = _align;
		}
		if (this._checkExpr(background)) {
			_background = undefined;
		}
		else {
			this._stylecache[idx + "background0"] = _background;
		}
		if (this._checkExpr(color)) {
			_color = undefined;
		}
		else {
			this._stylecache[idx + "color0"] = _color;
		}
		if (this._checkExpr(font)) {
			_font = undefined;
		}
		else {
			this._stylecache[idx + "font"] = _font;
		}
		if (this._checkExpr(line)) {
			_line = undefined;
		}
		else {
			this._stylecache[idx + "line"] = _linestyle;
		}

		if (background2) {
			if (this._checkGradation(background2)) {
				gradation2 = cell._stylecache["gradationtruefalsenormal"];
				if (!gradation2) {
					gradation2 = cell.style.gradation2;
					if (!gradation2) {
						gradation2 = cell._query_pseudo_gradation(0, true, false, "normal");
					}
				}
				var _background2 = this._getGradationColor(gradation2);
			}
			else {
				var _background2 = this._getHEXtoRGB(background2);
			}
			if (this._checkExpr(background2)) {
				_background2 = undefined;
			}
			else {
				this._stylecache[idx + "background1"] = _background2;
			}
			if (_background != _background2) {
				flag = true;
			}
		}
		else {
			this._stylecache[idx + "background1"] = _background2 = _background;
		}
		if (color2) {
			var _color2 = this._getHEXtoRGB(color2);
			if (this._checkExpr(color2)) {
				_color2 = undefined;
			}
			else {
				this._stylecache[idx + "color1"] = _color2;
			}
			if (_color != _color2) {
				flag = true;
			}
		}
		else {
			this._stylecache[idx + "color1"] = _color2 = _color;
		}

		var cell_type = this._getFixedCellType(cell, 0);
		c_style = this._makeforDsStyle(ds_style, _align, _background, _color, _font, _linestyle, cell_type);
		if (flag) {
			c_style2 = this._makeforDsStyle(ds_style, _align, _background2, _color2, _font, _linestyle, cell_type);
		}

		subCell = cell._subcells;
		subL = subCell.length;
		if (subL) {
			var subCellFormat = "";
			for (var i = 0; i < subL; i++) {
				subCellFormat += this._modifyFormat(subCell[i], c_style, c_style2, 0, cell);
			}
			return subCellFormat;
		}
		else {
			return this._modifyFormat(cell, c_style, c_style2, 0, undefined, undefined, t);
		}
	};

	_pItem._getFixedCellType = function (cell, rowidx) {
		var cell_type = cell._getDisplaytype(rowidx);
		var displaytype = "";
		switch (cell_type) {
			case "number":
				var format = cell._getAttrValue(cell.mask, rowidx);
				if (format != null && format.length != 0) {
					displaytype = format;
				}
				break;
			case "date":
			case "time":
			case "datetime":
				cell_type = "date";
				var format = cell._getAttrValue(cell.mask, rowidx);
				if (format == null || format.length == 0 || !format.match(/LONGDATE|SHORTDATE|[yMdHhms]/)) {
					format = "yyyy-MM-dd";
				}
				else {
					var locale = cell._getAttrValue(cell.locale, rowidx);
					if (!locale) {
						locale = cell.grid._getLocale();
					}

					if (format == "SHORTDATE") {
						format = nexacro.Locale._makeDateMaskString(locale, format);
						if (format == "") {
							format = nexacro.Locale._default_shortdate_format;
						}
					}
					else if (format == "LONGDATE") {
						format = nexacro.Locale._makeDateMaskString(locale, "SHORTDATE");
						if (format == "") {
							format = nexacro.Locale._default_longdate_format;
						}
					}
				}
				displaytype = format;
				break;
			case "image":
				if (this.exportimage.toLowerCase() == "image") {
					displaytype += "image";
				}
				cell_type = "text";
				break;
			case "text":
				if (cell._getAttrValue(cell.displaytype, rowidx) == "normal") {
					cell_type = "normal";
				}
				else {
					cell_type = "text";
				}
				break;
			default:
				cell_type = "text";
				break;
		}
		return cell_type + (displaytype ? ":" + displaytype : "");
	};
	_pItem._modifyFormat = function (cell, style1, style2, rowidx, mainCell, fake_merge_value, t) {
		var text, temp_str, str;
		temp_str = str = "";
		var subcells = cell._subcells;
		var subLen = subcells ? subcells.length : 0;
		var rowspan = 1;
		var colspan = 1;
		var _colspan = cell._colspan;
		var _rowspan = cell._rowspan;
		var row = cell._row;
		var col = t !== undefined ? t : cell._col;
		var _row = row;
		var _col = col;

		text = rowidx < 0 ? cell._getDisplayText(rowidx) : cell.text._value;
		text = nexacro._encodeXml(text);
		if (mainCell) {
			row = _row + mainCell._row;
			col = _col + mainCell._col;
		}

		rowspan = _rowspan;
		colspan = _colspan;

		str += "<Cell ";
		str += "row=\"" + row + "\" col=\"" + col + "\" ";

		temp_str += "rowspan=\"" + rowspan + "\" ";
		temp_str += "colspan=\"" + colspan + "\" ";


		if (this._exportmerge == 1) {
			if (fake_merge_value != null) {
				text = fake_merge_value;
			}
		}
		else if (this._exportmerge == 2) {
			if (fake_merge_value != null) {
				temp_str = fake_merge_value;
			}
		}

		str += temp_str;

		if (text) {
			str += "text=\"" + text + "\" ";
		}

		var dataType = "";
		var grid = this.source;

		str += "style1=\"" + style1 + "\" ";

		if (style2) {
			str += "style2=\"" + style2 + "\" ";
		}

		var cType = cell.displaytype;
		if (cType) {
			var cTypeVal = cType._value;
			if (cTypeVal == "image" && this.exportimage.toLowerCase() == "image") {
				str += "displaytype=\"image\" ";
			}
			dataType = cell._getDisplaytype(rowidx);
			switch (dataType) {
				case "image":
				case "text":
					dataType = "string";
					break;
				case "number":
					dataType = "int";
					break;
				case "date":
				case "time":
				case "datetime":
					dataType = "date";
					var format = cell._getAttrValue(cell.mask, rowidx);
					if (format == null || format.length == 0 || !format.match(/[yMdHhms]/)) {
						format = "yyyy-MM-dd";
					}
					str += "displaytype=\"" + format + "\" ";
					break;
				default:
					dataType = "text";
					break;
			}
			str += "type=\"" + dataType + "\" ";
		}
		str += "/>";

		return str;
	};

	_pItem._getSubCellLine = function (subCell, defaultColor, linecolor, rowspan, colspan) {
		var lLine, tLine, rLine, bLine;

		var subcell_col = subCell._col;
		var subcell_row = subCell._row;

		if (subcell_col == colspan) {
			rLine = linecolor.vertical;
		}
		else {
			rLine = "empty";
		}

		if (subcell_col == 0) {
			lLine = defaultColor.vertical;
		}
		else {
			lLine = "empty";
		}

		if (subcell_row == rowspan) {
			bLine = linecolor.horizon;
		}
		else {
			bLine = "empty";
		}

		if (subcell_row == 0) {
			tLine = defaultColor.horizon;
		}
		else {
			tLine = "empty";
		}

		return lLine + ":" + tLine + ":" + rLine + ":" + bLine;
	};

	_pItem._makeFakeLine = function (str, color, type) {
		var linestyle_str;
		switch (str) {
			case "topfake":
			case "bottomfake":
				linestyle_str = "empty:empty:" + color.vertical + ":empty";
				break;
			case "rightfake":
				if (type) {
					linestyle_str = "empty:empty:empty:" + color.horizon;
				}
				else {
					linestyle_str = "empty:" + color.horizon + ":empty:empty";
				}
				break;
			case "righttopfake":
			case "rightbottomfake":
				linestyle_str = "empty:empty:empty:empty";
				break;
			default:
				if (type) {
					linestyle_str = "empty:empty:" + color.vertical + ":" + color.horizon;
				}
				else {
					linestyle_str = "empty:" + color.horizon + ":" + color.vertical + ":empty";
				}
				break;
		}
		return linestyle_str;
	};

	_pItem._makeFormat = function (grid) {
		var bg, align, font, color, line, style, cell, subCell, background, gradation;

		var format = grid._curFormat;
		var hCells = format._headcells;
		var hLen = hCells ? hCells.length : 0;
		var bCells = format._bodycells;
		var bLen = bCells ? bCells.length : 0;
		var sCells = format._summcells;
		var sLen = sCells ? sCells.length : 0;
		var str = "";
		var ds_style = this._ds_style;
		var linecolor = {
			vertical : "empty", 
			horizon : "empty"
		};
		var linestyle = "empty:empty:empty:empty";
		var subL = 0;
		var f_cols = format._cols;
		var f_hrows = format._headrows;
		var f_brows = format._bodyrows;
		var f_srows = format._summrows;
		var bRtl = grid._isRtl(grid);

		str = "<Formats><Format><Columns>";
		if (!bRtl) {
			for (var i = 0, fcLen = f_cols.length; i < fcLen; i++) {
				str += '<Column size="' + Math.round(f_cols[i].size) + '" />';
			}
		}
		else {
			for (var fcLen = f_cols.length, i = fcLen - 1; i >= 0; i--) {
				str += '<Column size="' + Math.round(f_cols[i].size) + '" />';
			}
		}

		str += "</Columns><Rows>";
		for (var i = 0, frLen = f_hrows ? f_hrows.length : 0; i < frLen; i++) {
			str += '<Row size="' + Math.round(f_hrows[i].size) + '" band="head" />';
		}
		for (var i = 0, frLen = f_brows ? f_brows.length : 0; i < frLen; i++) {
			str += '<Row size="' + Math.round(f_brows[i].size) + '" />';
		}
		for (var i = 0, frLen = f_srows ? f_srows.length : 0; i < frLen; i++) {
			str += '<Row size="' + Math.round(f_srows[i].size) + '" band="summ" />';
		}
		str += "</Rows>";

		if (hLen > 0 && this._applyHead) {
			str += "<Head>";
			for (var i = 0, t = hLen - 1; i < hLen; i++, t--) {
				cell = hCells[i];
				background = this._getCellStyle(cell, -1, false, "background", "normal");
				if (this._checkGradation(background)) {
					gradation = this._getCellStyle(cell, -1, false, "gradation", "normal");
					bg = this._getGradationColor(gradation);
				}
				else {
					bg = this._getHEXtoRGB(background);
				}

				var _align = this._getCellStyle(cell, -1, false, "align", "normal");
				_align = _align ? _align._getStyleObject(bRtl) : null;

				align = this._getFitValue(_align);
				font = this._getFitFontValue(this._getCellStyle(cell, -1, false, "font", "normal"));
				color = this._getHEXtoRGB(this._getCellStyle(cell, -1, false, "color", "normal"));
				linecolor = {
					vertical : "empty", 
					horizon : "empty"
				};

				if (this._applyL) {
					line = this._getCellStyle(cell, -1, false, "border", "normal");

					if (line) {
						if (line.right_style != "none" && line._right_width != 0) {
							linecolor.vertical = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
						}

						if (line.bottom_style != "none" && line._bottom_width != 0) {
							linecolor.horizon = this._getHEXtoRGB(line.bottom_color) + (line.bottom_style == "solid" ? "" : "," + line.bottom_style);
						}
					}
				}

				var cell_type = this._getFixedCellType(cell, -1);
				subCell = cell._subcells;
				subL = subCell.length;
				if (subL) {
					for (var j = 0; j < subL; j++) {
						linestyle = this._getSubCellLine(subCell[j], linecolor, linecolor, cell._rowspan - 1, cell._colspan - 1);
						style = this._makeforDsStyle(ds_style, align, bg, color, font, linestyle, cell_type);
						str += this._modifyFormat(subCell[j], style, null, -1, cell);
					}
				}
				else {
					linestyle = (cell._col == 0 ? linecolor.vertical : "empty") + ":" + (cell._row == 0 ? linecolor.horizon : "empty") + ":";
					linestyle += linecolor.vertical + ":" + linecolor.horizon;

					var need_merge_cell = false;
					var fake_value = null;
					var row_suppress_count = 0;
					var col_suppress_count = 0;

					if (this._exportmerge == 1) {
						if (!!grid._checkFakeMerge(cell, -1)) {
							linestyle = this._makeFakeLine(cell._fakemerge_infos[1], linecolor, true);
							fake_value = "";

							var merge_data = this._merge_datas && this._merge_datas[-1 + "_" + i];
							if (merge_data) {
								if (merge_data.isFakeStart) {
									fake_value = nexacro._encodeXml(cell._getDisplayText(-1));
									if (align != "left,top") {
										var temp_align = align.split(",");
										var merge_str = merge_data[temp_align[1]] + "_" + merge_data[temp_align[0]];
										if (this._merge_datas[merge_str]) {
											this._merge_datas[merge_str].disPlayText = fake_value;
											this._merge_datas[merge_str].showText = true;
										}
										else {
											this._merge_datas[merge_str] = {
												disPlayText : fake_value, 
												showText : true
											};
										}
									}
									fake_value = "";
								}
								else if (merge_data.showText) {
									fake_value = merge_data.disPlayText;
								}
							}
						}
					}
					else if (this._exportmerge == 2) {
						var merge_data = this._merge_datas && this._merge_datas[-1 + "_" + i];
						if (merge_data) {
							if (merge_data.isFakeStart) {
								fake_value = "rowspan=\"" + merge_data.rowspan + "\" colspan=\"" + merge_data.colspan + "\" ";
							}
							else {
								need_merge_cell = true;
							}
						}
					}

					if (!need_merge_cell) {
						style = this._makeforDsStyle(ds_style, align, bg, color, font, linestyle, cell_type);
						if (!bRtl) {
							str += this._modifyFormat(cell, style, null, -1, false, fake_value);
						}
						else {
							str += this._modifyFormat(cell, style, null, -1, false, fake_value, t);
						}
					}
				}
			}
			str += "</Head>";
		}

		if (bLen > 0) {
			str += "<Body>";
			for (var i = 0, t = bLen - 1; i < bLen; i++, t--) {
				cell = bCells[i];
				if (!bRtl) {
					str += this._getCellBodyStyle(cell, i);
				}
				else {
					str += this._getCellBodyStyle(cell, i, t);
				}
			}
			str += "</Body>";
		}

		if (sLen > 0 && this._applySumm) {
			str += "<Summary>";
			for (var i = 0, t = sLen - 1; i < sLen; i++, t--) {
				cell = sCells[i];
				background = this._getCellStyle(cell, -2, false, "background", "normal");
				if (this._checkGradation(background)) {
					gradation = this._getCellStyle(cell, -2, false, "gradation", "normal");
					bg = this._getGradationColor(gradation);
				}
				else {
					bg = this._getHEXtoRGB(background);
				}
				var _align = this._getCellStyle(cell, -2, false, "align", "normal");
				_align = _align ? _align._getStyleObject(bRtl) : null;
				align = this._getFitValue(_align);
				font = this._getFitFontValue(this._getCellStyle(cell, -2, false, "font", "normal"));
				color = this._getHEXtoRGB(this._getCellStyle(cell, -2, false, "color", "normal"));
				linecolor = {
					vertical : "empty", 
					horizon : "empty"
				};

				if (this._applyL) {
					line = this._getCellStyle(cell, -2, false, "border", "normal");

					if (line) {
						if (line.right_style != "none" && line._right_width != 0) {
							linecolor.vertical = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
						}

						if (grid.summarytype == "default") {
							if (line.top_style != "none" && line._top_width != 0) {
								linecolor.horizon = this._getHEXtoRGB(line.top_color) + (line.top_style == "solid" ? "" : "," + line.top_style);
							}
						}
						else {
							if (line.bottom_style != "none" && line._bottom_width != 0) {
								linecolor.horizon = this._getHEXtoRGB(line.bottom_color) + (line.bottom_style == "solid" ? "" : "," + line.bottom_style);
							}
						}
					}
				}

				var cell_type = this._getFixedCellType(cell, -2);
				subCell = cell._subcells;
				subL = subCell.length;
				if (subL) {
					for (var j = 0; j < subL; j++) {
						linestyle = this._getSubCellLine(subCell[j], linecolor, linecolor, cell._rowspan - 1, cell._colspan - 1);
						style = this._makeforDsStyle(ds_style, align, bg, color, font, linestyle, cell_type);
						str += this._modifyFormat(subCell[j], style, null, -2, cell);
					}
				}
				else {
					var need_merge_cell = false;
					linestyle = linecolor.vertical + ":" + linecolor.horizon + ":" + linecolor.vertical + ":" + linecolor.horizon;
					var fake_value = null;
					if (this._exportmerge == 1) {
						if (!!grid._checkFakeMerge(cell, -2)) {
							linestyle = this._makeFakeLine(cell._fakemerge_infos[0], linecolor);
							fake_value = "";

							var merge_data = this._merge_datas && this._merge_datas[-2 + "_" + i];
							if (merge_data) {
								if (merge_data.isFakeStart) {
									fake_value = nexacro._encodeXml(cell._getDisplayText(-2));
									if (align != "left,top") {
										var temp_align = align.split(",");
										var merge_str = merge_data[temp_align[1]] + "_" + merge_data[temp_align[0]];
										if (this._merge_datas[merge_str]) {
											this._merge_datas[merge_str].disPlayText = fake_value;
											this._merge_datas[merge_str].showText = true;
										}
										else {
											this._merge_datas[merge_str] = {
												disPlayText : fake_value, 
												showText : true
											};
										}
										fake_value = "";
									}
								}
								else if (merge_data.showText) {
									fake_value = merge_data.disPlayText;
								}
							}
						}
					}
					else if (this._exportmerge == 2) {
						if (!!grid._checkFakeMerge(cell, -2)) {
							var merge_data = this._merge_datas && this._merge_datas[-2 + "_" + i];
							if (merge_data) {
								if (merge_data.isFakeStart) {
									fake_value = "rowspan=\"" + merge_data.rowspan + "\" colspan=\"" + merge_data.colspan + "\" ";
								}
								else {
									need_merge_cell = true;
								}
							}
						}
					}

					if (!need_merge_cell) {
						style = this._makeforDsStyle(ds_style, align, bg, color, font, linestyle, cell_type);
						if (!bRtl) {
							str += this._modifyFormat(cell, style, null, -2, false, fake_value);
						}
						else {
							str += this._modifyFormat(cell, style, null, -2, false, fake_value, t);
						}
					}
				}
			}
			str += "</Summary>";
		}

		str += "</Format></Formats>";
		return str;
	};

	_pItem._getForm = function () {
		return this.parent.parent;
	};

	_pItem._eventExport = function (exportObj, type, row_index, selectCnt) {
		var eventtype = exportObj.exporteventtype;
		var itemIndex = exportObj._itemsIndex;
		var exportbar = exportObj._exportBar;
		if (eventtype != "none") {
			var row_num = row_index + 1;
			var processStr = "";
			var is_end = row_num == this._bodyRowCnt;
			var progress_pos = exportObj._progress_pos + row_num;

			if (eventtype == "item" && is_end) {
				this.on_fire_onprogress(exportObj, itemIndex, this.type, selectCnt == null ? row_index : selectCnt);
				if (exportbar) {
					processStr = exportObj._getProcessStr(itemIndex + 1, progress_pos, exportObj._allRowCount);
					exportbar._set_text(processStr);
					exportbar._set_pos((itemIndex + 1) / exportObj._allCount * 100);
				}
			}
			else if (eventtype == "itemrecord") {
				this.on_fire_onprogress(exportObj, itemIndex, this.type, selectCnt == null ? row_index : selectCnt);
				if (exportbar) {
					processStr = exportObj._getProcessStr(itemIndex + 1, row_num, this._bodyRowCnt);
					exportbar._set_text(processStr);
					exportbar._set_pos(row_num / this._bodyRowCnt * 100);
				}
			}
			else if (eventtype == "totalrecord") {
				this.on_fire_onprogress(exportObj, itemIndex, this.type, selectCnt == null ? row_index : selectCnt);
				if (exportbar) {
					processStr = exportObj._getProcessStr(itemIndex + 1, progress_pos, exportObj._allRowCount);
					exportbar._set_text(processStr);
					exportbar._set_pos(progress_pos / exportObj._allRowCount * 100);
				}
			}

			if (progress_pos == exportObj._allRowCount && exportObj.exportmessagecomplete != "") {
				if (exportbar) {
					exportbar._set_text(exportObj.exportmessagecomplete);
				}
			}
			if (is_end && exportbar) {
				exportObj._progress_pos = progress_pos;
			}
		}
	};

	_pItem._updateBarPos = function (exportObj, eventtype) {
		if (eventtype != "none" && exportObj._exportuitype) {
			var itemIndex = exportObj._itemsIndex;
			var exportbar = exportObj._exportBar;
			exportObj._progress_pos += this._startRow - this._preStartRow;
			var processStr = "";
			var is_end = this._startRow == this._bodyRowCnt;
			if (eventtype == "item" && is_end) {
				processStr = exportObj._getProcessStr(itemIndex + 1, exportObj._progress_pos, exportObj._allRowCount);
				exportbar._set_text(processStr);
				exportbar._set_pos((itemIndex + 1) / exportObj._allCount * 100);
			}
			else if (eventtype == "itemrecord") {
				processStr = exportObj._getProcessStr(itemIndex + 1, this._startRow, this._bodyRowCnt);
				exportbar._set_text(processStr);
				exportbar._set_pos(this._startRow / this._bodyRowCnt * 100);
			}
			else if (eventtype == "totalrecord") {
				processStr = exportObj._getProcessStr(itemIndex + 1, exportObj._progress_pos, exportObj._allRowCount);
				exportbar._set_text(processStr);
				exportbar._set_pos(exportObj._progress_pos / exportObj._allRowCount * 100);
			}
			if (exportObj._progress_pos == exportObj._allRowCount && exportObj.exportmessagecomplete != "") {
				exportbar._set_text(exportObj.exportmessagecomplete);
			}
		}
	};
	_pItem._rollbackSuppressInfo = function () {
		var cells = this.source._curFormat._bodycells;
		var supLen = this._tmpSuppressInfos && this._tmpSuppressInfos.length;
		for (var i = 0; i < supLen; i++) {
			cells[i]._suppress_infos = this._tmpSuppressInfos.shift();
		}
	};

	_pItem._gridSuppressUpdate = function (grid, rowcount) {
		var cells = grid._curFormat._bodycells;
		var cLen = cells.length;
		this._tmpSuppressInfos = [];
		for (var i = 0; i < cLen; i++) {
			this._tmpSuppressInfos.push(cells[i]._suppress_infos);
		}

		grid._analyzeSuppress(true);

		for (var i = 0; i < rowcount; i++) {
			grid._suppressUpdateRow(i, 0, rowcount - 1, true);
		}
	};

	_pItem._gridExportContinue = function (exportObj) {
		var grid = this.source;
		var ds_command = this._ds_command;

		ds_command.setColumn(0, "command", "export");
		ds_command.setColumn(0, "type", exportObj._exporttype);
		ds_command.setColumn(0, "item", grid.id);
		ds_command.setColumn(0, "seq", this._seq);
		ds_command.setColumn(0, "startrow", this._startRow);
		ds_command.setColumn(0, "instanceid", this._instanceId);
		ds_command.setColumn(0, "url", exportObj._fileURL);
		ds_command.setColumn(0, "summarytype", grid.summarytype);

		ds_command.setColumn(0, "range", this.range);
		ds_command.setColumn(0, "exportsize", this.exportsize);
		ds_command.setColumn(0, "exporthead", this._exporthead);
		ds_command.setColumn(0, "exportimage", this.exportimage);

		ds_command.setColumn(0, "exportfilename", exportObj.exportfilename);
		ds_command.setColumn(0, "format", "");
		ds_command.setColumn(0, "password", exportObj._file_password);
		ds_command.setColumn(0, "wraptext", exportObj._wrap_text);

		var ds_style = this._ds_style;

		var ds_style2 = this._ds_style2;

		if (!ds_style2) {
			var ds_style2 = new Dataset("STYLE2");
			this._ds_style2 = ds_style2;
			ds_style2.addColumn("type", "String", 10);
			ds_style2.addColumn("name", "String", 32);
			ds_style2.addColumn("value", "String", 1024);
		}
		else {
			this._ds_style2.clearData();
		}

		delete this._ds_cell;
		var ds = new Dataset("CELL");
		this._ds_cell = ds;

		var bodycntcell = grid.getCellCount("body");

		var bodycntrow = this._bodyRowCnt;

		var style_name;
		var rt;

		if (this._exportmerge && grid._is_use_suppress && bodycntrow >= grid._bodyBand._get_rows().length) {
			this._gridSuppressUpdate(grid, bodycntrow);
		}

		var export_param = null;
		var export_dsparam = null;
		if (bodycntcell > 0) {
			var kk = 0;
			var selectedrow = 0;

			for (var jj = 0; jj < bodycntcell; jj++) {
				ds.addColumn("Column" + jj, "String", 256);
			}

			var partitionRow = this._partitionRow + this._startRow;
			if (partitionRow >= bodycntrow) {
				partitionRow = bodycntrow;
				this._eof = true;
				export_param = this.parent._argsParam;
				export_dsparam = this.parent._argsDsParam;
			}

			var cells = grid._curFormat._bodycells;

			var is_selected;
			var rr = 0;
			var subcnt;
			for (var k = this._startRow; k < partitionRow; k++) {
				subcnt = 0;

				var val;

				var selectChk = false;
				for (var j = 0; j < bodycntcell; j++) {
					selectChk = selectChk || grid.isSelectedCell(j, "body", k, -9);
				}
				var is_selectRec = this.exportselect == "selectrecord";
				if (selectChk || !is_selectRec) {
					var idx = ds.addRow();
					if (is_selectRec) {
						this._eventExport(exportObj, this.type, k, this._selectcount++);
					}
					else {
						this._eventExport(exportObj, this.type, k);
					}
				}
				else {
					continue;
				}

				var odd = k % 2;
				var cc = 0;
				is_selected = false;
				var activate_select_style = (this.exportvalue == "selectstyle");
				for (var j = 0; j < bodycntcell; j++) {
					is_selected = grid.isSelectedCell(j, "body", k, -9);
					if (is_selected) {
						var emptyCellFlag = false;
					}
					else {
						if (is_selectRec) {
							emptyCellFlag = true;
						}
					}
					var backgroundCell;
					var alignCell;
					var fontCell;
					var colorCell;
					var lineCell;

					var bodyBand = grid._bodyBand;

					var cell = cells[j];
					var suppress_infos = cell._suppress_infos;
					var cellStyle = "";

					var _pseudo = "normal";
					var cacheA = this._stylecache[j + "align"];
					var cacheL = this._stylecache[j + "line"];
					var cacheB, cacheC, cacheF;

					if (is_selected && activate_select_style) {
						_pseudo = "selected";
						cacheB = "";
						cacheC = "";
						cacheF = "";
					}
					else {
						if (emptyCellFlag) {
							cacheB = "255,255,255";
							cacheC = "255,255,255";
							var d_BLColor = this._d_BLColor;
							cacheL = d_BLColor + ":" + d_BLColor + ":" + d_BLColor + ":" + d_BLColor;
							sFlag = true;
						}
						else {
							cacheB = this._stylecache[j + "background" + odd];
							cacheC = this._stylecache[j + "color" + odd];
						}
						cacheF = this._stylecache[j + "font"];
					}

					var sFlag = false;
					if (cacheB) {
						backgroundCell = cacheB;
					}
					else {
						sFlag = true;
						backgroundCell = nexacro._nvl(this._getHEXtoRGB(this._getCellStyle(cell, k, odd, "background", _pseudo)), "");
					}
					if (cacheA) {
						alignCell = cacheA;
					}
					else {
						sFlag = true;
						alignCell = nexacro._nvl(this._getFitValue(this._getCellStyle(cell, k, odd, "align", _pseudo)), "");
					}
					if (cacheC) {
						colorCell = cacheC;
					}
					else {
						sFlag = true;
						colorCell = nexacro._nvl(this._getHEXtoRGB(this._getCellStyle(cell, k, odd, "color", _pseudo)), "");
					}
					if (cacheF) {
						fontCell = cacheF;
					}
					else {
						sFlag = true;
						fontCell = nexacro._nvl(this._getFitFontValue(this._getCellStyle(cell, k, odd, "font", _pseudo)), "");
					}

					var is_line_changed, d_BLColor, right_linecolor, bottom_linecolor, linecolor;
					is_line_changed = false, right_linecolor = null, bottom_linecolor = null;

					var row_suppress_count = 0;
					var col_suppress_count = 0;
					switch (this._exportmerge) {
						case 0:
							break;
						case 1:
							if (cell.suppress > 0) {
								sFlag = is_line_changed = true;
								if (suppress_infos[k].border_proc) {
									bottom_linecolor = "empty";
								}
							}

							grid._checkFakeMerge(cell, k);
							if (cell._fakemerge_infos) {
								var fake_border_str = cell._fakemerge_infos[k + 2];
								if (fake_border_str) {
									sFlag = is_line_changed = true;
									switch (fake_border_str) {
										case "bottomfake":
											bottom_linecolor = "empty";
											break;
										case "rightbottomfake":
											right_linecolor = bottom_linecolor = "empty";
											break;
										case "rightfake":
											right_linecolor = "empty";
											break;
									}
								}
							}
							break;
						case 2:
							if (cell.suppress > 0) {
								sFlag = is_line_changed = true;
								var column_suppress = j + "count";
								var excel_suppress_info = this._excel_suppress_info;
								if (!excel_suppress_info[column_suppress]) {
									excel_suppress_info[column_suppress] = 0;
									alignCell = alignCell.split(",")[0] + ", " + this._suppress_align_table[cell.suppressalign];
								}

								if (suppress_infos[k].border_proc) {
									this._excel_suppress_info[column_suppress]++;
								}
								else {
									row_suppress_count = ++excel_suppress_info[column_suppress];
									excel_suppress_info[column_suppress] = 0;
								}
							}

							var merge_data = this._merge_datas && this._merge_datas[k + "_" + j];
							if (merge_data && merge_data.isFakeEnd) {
								sFlag = is_line_changed = true;
								row_suppress_count = merge_data.rowspan;
								col_suppress_count = merge_data.colspan;
							}
							break;
					}

					if (!is_line_changed && cacheL) {
						lineCell = cacheL;
					}
					else {
						if (this._applyL) {
							sFlag = true;
							var line = this._getCellStyle(cell, k, odd, "border", _pseudo);
							if (line.right_style != "none" && line._right_width != 0) {
								linecolor = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
								if (!right_linecolor) {
									right_linecolor = linecolor;
								}
							}
							else {
								right_linecolor = "empty";
							}

							if (line.bottom_style != "none" && line._bottom_width != 0) {
								linecolor = this._getHEXtoRGB(line.bottom_color) + (line.bottom_style == "solid" ? "" : "," + line.bottom_style);
								if (!bottom_linecolor) {
									bottom_linecolor = linecolor;
								}
							}
							else {
								bottom_linecolor = "empty";
							}
						}
						else {
							bottom_linecolor = right_linecolor = "empty";
						}
						lineCell = "empty:empty:" + right_linecolor + ":" + bottom_linecolor;
					}

					if (this._applyA) {
						rt = this._find_styleName(ds_style, "align", alignCell, this._a_ct);
						style_name = rt[0];
						if (this._a_ct != rt[1]) {
							rt = this._find_styleName(ds_style2, "align", alignCell, this._a_ct);
						}
						this._a_ct = rt[1];
						cellStyle += "align:" + style_name + ",";
					}

					if (this._applyB) {
						rt = this._find_styleName(ds_style, "background", backgroundCell, this._bg_ct);
						style_name = rt[0];
						if (this._bg_ct != rt[1]) {
							rt = this._find_styleName(ds_style2, "background", backgroundCell, this._bg_ct);
						}
						this._bg_ct = rt[1];
						cellStyle += "background:" + style_name + ",";
					}

					if (this._applyC) {
						rt = this._find_styleName(ds_style, "color", colorCell, this._c_ct);
						style_name = rt[0];
						if (this._c_ct != rt[1]) {
							rt = this._find_styleName(ds_style2, "color", colorCell, this._c_ct);
						}
						this._c_ct = rt[1];
						cellStyle += "color:" + style_name + ",";
					}
					if (this._applyF) {
						rt = this._find_styleName(ds_style, "font", fontCell, this._f_ct);
						style_name = rt[0];
						if (this._f_ct != rt[1]) {
							rt = this._find_styleName(ds_style2, "font", fontCell, this._f_ct);
						}
						this._f_ct = rt[1];
						cellStyle += "font:" + style_name + ",";
					}
					rt = this._find_styleName(ds_style, "line", lineCell, this._l_ct);
					style_name = rt[0];
					if (this._l_ct != rt[1]) {
						rt = this._find_styleName(ds_style2, "line", lineCell, this._l_ct);
					}
					this._l_ct = rt[1];
					cellStyle += "line:" + style_name + ",";

					var cell_type = this._getFixedCellType(cell, k);
					rt = this._find_styleName(ds_style, "type", cell_type, this._t_ct);
					style_name = rt[0];
					if (this._t_ct != rt[1]) {
						rt = this._find_styleName(ds_style2, "type", cell_type, this._t_ct);
					}
					this._t_ct = rt[1];
					cellStyle += "type:" + style_name;

					var longdate_flag = false;
					if (cell_type.indexOf("date") > -1 && (this._checkExpr(cell.locale) || this._checkExpr(cell.mask) || cell.mask == "LONGDATE")) {
						sFlag = true;
						if (cell.mask == "LONGDATE") {
							longdate_flag = true;
						}
					}

					if (row_suppress_count) {
						rt = this._find_styleName(ds_style, "rowsuppress", row_suppress_count, this._sm_ct);
						style_name = rt[0];
						if (this._sm_ct != rt[1]) {
							rt = this._find_styleName(ds_style2, "rowsuppress", row_suppress_count, this._sm_ct);
						}
						this._sm_ct = rt[1];
						cellStyle += ",rowsuppress:" + style_name;
					}
					if (col_suppress_count) {
						rt = this._find_styleName(ds_style, "colsuppress", col_suppress_count, this._sm_ct);
						style_name = rt[0];
						if (this._sm_ct != rt[1]) {
							rt = this._find_styleName(ds_style2, "colsuppress", col_suppress_count, this._sm_ct);
						}
						this._sm_ct = rt[1];
						cellStyle += ",colsuppress:" + style_name;
					}

					rt = this._find_styleName(ds_style, "style", cellStyle, this._s_ct);
					style_name = rt[0];
					if (this._s_ct != rt[1]) {
						rt = this._find_styleName(ds_style2, "style", cellStyle, this._s_ct);
					}
					this._s_ct = rt[1];

					var display_text = this._getCellText(grid, k, j);
					val = emptyCellFlag ? "" : display_text;

					if (longdate_flag) {
						cell.mask = "SHORTDATE";
						val = cell._getDisplayText_date(k);
						cell.mask = "LONGDATE";
					}

					var displaytype = grid.getCellProperty("body", j, "displaytype");
					if (displaytype == "image") {
						var expImg = this.exportimage.toLowerCase();
						if (expImg == "url" || expImg == "image") {
							var path = this._getCellText(grid, k, j);

							if (path) {
								var url = nexacro._getURIValue(path);
								val = nexacro._getImageLocation(url, this._getForm()._getFormBaseUrl());
							}
							else {
								val = path;
							}
						}
						else {
							val = "";
						}
					}


					if (exportObj._commdataformat == 3) {
						var delimiter = "_x001D_";
					}
					else {
						var delimiter = String.fromCharCode(29);
					}

					if (this._exportmerge == 1) {
						if (cell.suppress > 0) {
							if (suppress_infos[k].text_proc) {
								val = "";
							}
						}

						if (!!grid._checkFakeMerge(cell, k)) {
							val = "";
							var merge_data = this._merge_datas && this._merge_datas[k + "_" + j];
							if (merge_data) {
								if (merge_data.isFakeStart) {
									if (alignCell == "left,top") {
										val = display_text;
									}
									else {
										var temp_align = alignCell.split(",");
										var merge_str = merge_data[temp_align[1]] + "_" + merge_data[temp_align[0]];
										if (this._merge_datas[merge_str]) {
											this._merge_datas[merge_str].disPlayText = display_text;
											this._merge_datas[merge_str].showText = true;
										}
										else {
											this._merge_datas[merge_str] = {
												disPlayText : display_text, 
												showText : true
											};
										}
									}
								}
								else if (merge_data.showText) {
									val = merge_data.disPlayText;
								}
							}
						}
					}

					if (exportObj._is_orgval) {
						val = nexacro._isNumber(val) ? val : nexacro._isDecimal(val) ? val : nexacro._nvl(val, "");
					}
					else {
						val = nexacro._nvl(val, "");
					}

					ds.setColumn(idx, "Column" + (j + subcnt), val + delimiter + (sFlag || (is_selected && activate_select_style) ? style_name : ""));

					if (cell._subcells.length) {
						var subcell = cell._subcells;
						var subcell_len = subcell.length;
						var rowspan = cell._rowspan - 1;
						var colspan = cell._colspan - 1;

						var subline = "";
						var line = this._getCellStyle(cell, k, odd, "border", _pseudo);
						var d_BLColor = this._d_BLColor;

						if (this._applyL) {
							linecolor = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
						}
						else {
							linecolor = d_BLColor;
						}

						var lLine, tLine, rLine, bLine;

						for (var i = 0; i < subcell_len; i++) {
							var subcell_col = subcell[i]._col;
							var subcell_row = subcell[i]._row;
							var sub_rowspan = subcell[i]._rowspan - 1;
							var sub_colspan = subcell[i]._colspan - 1;

							if (subcell_col == colspan) {
								rLine = linecolor;
							}
							else {
								rLine = "empty";
							}

							if (subcell_col == 0) {
								if (cell._col == 0) {
									lLine = linecolor;
								}
								else {
									lLine = d_BLColor;
								}
							}
							else {
								lLine = "empty";
							}

							if (subcell_row == rowspan) {
								bLine = linecolor;
							}
							else {
								if (sub_rowspan > 0 && sub_rowspan == rowspan) {
									bLine = linecolor;
								}
								else {
									bLine = "empty";
								}
							}

							if (subcell_row == 0) {
								tLine = d_BLColor;
							}
							else {
								tLine = "empty";
							}

							subline = lLine + ":" + tLine + ":" + rLine + ":" + bLine;

							var cell_type = this._getFixedCellType(subcell[i], 0);
							style_name = this._makeforDsStyle(ds_style, alignCell, backgroundCell, colorCell, fontCell, subline, cell_type);

							if (i != 0) {
								ds.addColumn("Column" + (jj + subcnt), "String", 256);
								subcnt++;
							}

							var val = subcell[i]._getDisplayText(k);
							if (exportObj._is_orgval) {
								var cellinfo = subcell[i]._refobj;
								if (cellinfo && cellinfo._getDisplaytype(k) == "number") {
									val = cellinfo._getValue(k);
								}
							}

							ds.setColumn(idx, "Column" + (j + subcnt), val + delimiter + style_name);
						}
					}
				}
				rr++;
			}
			this._preStartRow = this._startRow;
			this._startRow = partitionRow;
		}

		ds_command.setColumn(0, "eof", this._eof);

		if (this._ds_response) {
			delete this._ds_response;
		}

		this._ds_response = new Dataset("RESPONSE");

		this._rollbackSuppressInfo();

		if (export_dsparam != undefined) {
			this._transaction(this.id, exportObj._exporturl, "COMMAND=_ds_command STYLE=_ds_style2 CELL=_ds_cell" + " " + export_dsparam, "_ds_response=RESPONSE", export_param, "_exportCallback", true, exportObj._commdataformat, exportObj._commcompress);
		}
		else {
			this._transaction(this.id, exportObj._exporturl, "COMMAND=_ds_command STYLE=_ds_style2 CELL=_ds_cell", "_ds_response=RESPONSE", export_param, "_exportCallback", true, exportObj._commdataformat, exportObj._commcompress);
		}
		this._updateBarPos(exportObj, exportObj.exporteventtype);
	};

	_pItem._exportCallback = function (svcid, errstatus, message) {
		var grid = this.source;
		var exportObj = this.parent;
		var exportbar = exportObj._exportBar;
		if (errstatus < 0) {
			message = nexacro._decodeXml(message);
			this.on_fire_onerror(exportObj, "ObjectError", message, errstatus);
			nexacro._stopTransaction(this, 0);
			if (exportbar) {
				exportbar._hide();
				exportbar._set_pos(0);
				exportbar._set_text("");
			}

			if (grid._hasTree && this._gridTempInfo && exportObj._tempSaveMethod) {
				nexacro.Grid.prototype._recreate_contents_all = exportObj._tempSaveMethod;
				exportObj._tempSaveMethod = null;

				grid.set_treeinitstatus(this._gridTempInfo["treeinitstatus"]);
				grid._treeIndexes = this._gridTempInfo["treeIndexes"];
				grid._treeStates = this._gridTempInfo["treeStates"];
				grid.enableevent = this._gridTempInfo["enableevent"];
				this._gridTempInfo = null;
			}
		}
		else {
			var item_id = this._ds_response.getColumn(0, "item");

			this._instanceId = this._ds_response.getColumn(0, "instanceid");
			var excelURL = this._ds_response.getColumn(0, "url");
			if (excelURL != null && excelURL != "") {
				exportObj._fileURL = excelURL;
			}

			var itemIndex = exportObj._itemsIndex;
			var is_finish = itemIndex + 1 == exportObj._allCount;
			var is_end = this._startRow == this._bodyRowCnt;
			this._seq++;

			if (is_end) {
				if (grid._hasTree && this._gridTempInfo && exportObj._tempSaveMethod) {
					nexacro.Grid.prototype._recreate_contents_all = exportObj._tempSaveMethod;
					exportObj._tempSaveMethod = null;

					grid.set_treeinitstatus(this._gridTempInfo["treeinitstatus"]);
					grid._treeIndexes = this._gridTempInfo["treeIndexes"];
					grid._treeStates = this._gridTempInfo["treeStates"];
					grid.enableevent = this._gridTempInfo["enableevent"];
					this._gridTempInfo = null;
				}

				if (is_finish) {
					if (exportbar) {
						exportbar._hide();
						exportbar._set_pos(0);
						exportbar._set_text("");
					}


					this._tmpSuppressInfos = null;
					exportObj._fileURL = "";
					exportObj._allRowCount = 0;
					exportObj._progress_pos = 0;
					exportObj._itemsIndex = 0;

					var exportfilename_;
					switch (exportObj.exporttype) {
						case nexacro.ExportTypes.EXCEL:
						case nexacro.ExportTypes.EXCEL97:
							exportfilename_ = exportObj.exportfilename;
							exportfilename_ += ".xls";
							break;
						case nexacro.ExportTypes.EXCEL2007:
							exportfilename_ = exportObj.exportfilename;
							exportfilename_ += ".xlsx";
							break;
						case nexacro.ExportTypes.HANCELL2010:
						case nexacro.ExportTypes.HANCELL2014:
							exportfilename_ = exportObj.exportfilename;
							exportfilename_ += ".cell";
							break;
						case nexacro.ExportTypes.CSV:
							exportfilename_ = exportObj.exportfilename;
							exportfilename_ += ".csv";
							break;
					}


					var _filename_chk = new RegExp("[\:\@\&\=\+\$\#\,]", "g");
					if (_filename_chk.test(exportObj.exportfilename)) {
						var url_arr = excelURL.split(exportfilename_);
						var _encodefilename = encodeURIComponent(exportfilename_);


						if (url_arr.length <= 1) {
							_encodefilename = encodeURIComponent(exportObj.exportfilename);
							url_arr = excelURL.split(_encodefilename);
							if (nexacro.Browser == "IE") {
								_encodefilename = encodeURI(_encodefilename);
							}
						}

						var temp_url = "";
						for (var i = 0, len = url_arr.length; i < len; i++) {
							temp_url += url_arr[i];
							if (i == 0) {
								temp_url += _encodefilename;
							}
						}

						if (excelURL != temp_url) {
							excelURL = temp_url;
						}

						temp_url = null;
						url_arr = null;
						_encodefilename = null;
					}
					else {
						excelURL = encodeURI(excelURL);
					}

					if (exportObj._file_download) {
						var downloadret = nexacro._download(excelURL, exportObj._handle, exportfilename_, "undefined", exportObj.exportactivemode, this.parent.filedialogpath, exportObj.filefilter, exportObj.filefilterindex, "export");
						if (downloadret != undefined) {
							var nIdx = downloadret.lastIndexOf("\\");
							if (nIdx > 0) {
								exportObj.openedpath = downloadret.substring(0, nIdx + 1);
							}
						}
					}

					this.on_fire_onsuccess(exportObj, this, excelURL);
				}
				else {
					exportObj._itemsIndex++;
					if (exportObj._itemsIndex == exportObj._gCount) {
					}
					else {
						exportObj._grids[exportObj._itemsIndex]._gridItemExport(exportObj);
					}
				}
				this._instanceId = "";
				this._startRow = 0;
				this._seq = 1;
				this._eof = false;
				this._selectcount = 0;
			}
			else {
				this._gridExportContinue(exportObj);
			}
		}
	};

	_pItem._makeMergeDatas = function (grid, format_body_rowcount, col_len) {
		var row_len = format_body_rowcount;
		var merge_datas = this._merge_datas = {
		};
		var merge_end_row, merge_end_col, row_merge_count, col_merge_count;
		var fake_mergecell, end_row, last_row, end_subrow, start_subrow, temp;
		last_row = end_row = end_subrow = start_subrow = temp = 0;
		var rowspan, colspan, top_row, middle_row, bottom_row, left_col, center_col, right_col, start_col, end_col, start_row;
		var rowcount = grid._getGridRowCount() - 1;

		for (var i = 0, len = grid._fake_mergecell_arr.length; i < len; i++) {
			fake_mergecell = grid._fake_mergecell_arr[i];

			if (fake_mergecell.start_subrow != null) {
				start_subrow = fake_mergecell.start_subrow;
			}

			if (fake_mergecell.end_subrow != null) {
				end_subrow = fake_mergecell.end_subrow;
			}

			if (fake_mergecell.end_row > rowcount) {
				last_row = end_row = rowcount;
				end_subrow = row_len - 1;
			}
			else {
				last_row = end_row = fake_mergecell.end_row;
				end_subrow = fake_mergecell.end_subrow;
			}

			if (fake_mergecell.start_row == -1) {
				row_len = grid._curFormat._headrows ? grid._curFormat._headrows.length : 0;
				end_row = start_row = 0;
			}
			else if (fake_mergecell.start_row == -2) {
				row_len = grid._curFormat._summrows ? grid._curFormat._summrows.length : 0;
				end_row = start_row = 0;
			}
			else {
				start_row = fake_mergecell.start_row;
			}

			rowspan = (row_len * end_row + fake_mergecell.end_subrow) - (row_len * start_row + start_subrow) + 1;
			colspan = fake_mergecell.end_column - fake_mergecell.start_column + 1;

			var temp = ((row_len * start_row + start_subrow + 1) + (row_len * end_row + fake_mergecell.end_subrow + 1)) / 2 << 0;
			top_row = fake_mergecell.start_row;
			middle_row = (temp - 1) / row_len << 0;
			bottom_row = last_row;

			start_col = col_len * start_subrow + fake_mergecell.start_column;
			end_col = col_len * fake_mergecell.end_subrow + fake_mergecell.end_column;

			left_col = ((temp - 1) % row_len * col_len + fake_mergecell.start_column) << 0;
			center_col = ((temp - 1) % row_len * col_len + (fake_mergecell.start_column + fake_mergecell.end_column) / 2) << 0;
			right_col = ((temp - 1) % row_len * col_len + fake_mergecell.end_column) << 0;

			if (fake_mergecell.start_row < 0) {
				middle_row = fake_mergecell.start_row;
			}

			merge_datas[top_row + "_" + start_col] = {
				isFakeStart : true, 
				left : left_col, 
				center : center_col, 
				right : right_col, 
				top : top_row, 
				middle : middle_row, 
				bottom : bottom_row, 
				rowspan : rowspan, 
				colspan : colspan
			};

			merge_datas[bottom_row + "_" + end_col] = {
				isFakeEnd : true, 
				rowspan : rowspan, 
				colspan : colspan
			};
		}
	};

	_pItem._gridItemExport = function (exportObj) {
		var uiType = exportObj._exportuitype;
		if (exportObj.exporteventtype != "none" && uiType) {
			var exportbar = exportObj._exportBar;
			if (!exportbar || exportbar._uitype != uiType) {
				exportbar = exportObj._exportBar = exportObj._getExportBar(uiType);

				var font = exportbar.on_find_CurrentStyle_font();
				var letterspace = exportbar.on_find_CurrentStyle_letterspace();
				var str = exportObj._getProcessStr(exportObj.count(), exportObj._allRowCount, exportObj._allRowCount);
				str = nexacro._getLongerStr(str, exportObj.exportmessagecomplete, exportObj.exportmessageready);
				var tSize = nexacro._getTextSize(letterspace, str, font);
				exportbar._textWidth = tSize[0];
				exportbar._textHeight = tSize[1];

				tSize = null, font = null, letterspace = null, str = null;
			}

			if (exportObj._itemsIndex == 0 && exportObj.exportmessageready != "") {
				exportbar._set_text(exportObj.exportmessageready);
			}
			exportbar._show();
		}

		var grid = this.source;
		var cur_fomat_col_len = grid._curFormat._cols ? grid._curFormat._cols.length : 0;
		var cur_fomat_row_len = grid._curFormat._bodyrows ? grid._curFormat._bodyrows.length : 0;

		if (grid._hasTree) {
			this._gridTempInfo = {
			};
			exportObj._tempSaveMethod = nexacro.Grid.prototype._recreate_contents_all;
			nexacro.Grid.prototype._recreate_contents_all = nexacro._emptyFn;
			this._gridTempInfo["enableevent"] = grid.enableevent;
			grid.enableevent = false;
			this._gridTempInfo["treeIndexes"] = grid._treeIndexes.slice(0);
			this._gridTempInfo["treeStates"] = grid._treeStates.slice(0);
			this._gridTempInfo["treeinitstatus"] = grid.treeinitstatus;
			grid.set_treeinitstatus("expand,all");
		}

		if (grid._is_use_fakemerge) {
			this._makeMergeDatas(grid, cur_fomat_row_len, cur_fomat_col_len);
		}

		var ds_style = new Dataset("STYLE");
		this._ds_style = ds_style;

		ds_style.addColumn("type", "String", 10);
		ds_style.addColumn("name", "String", 32);
		ds_style.addColumn("value", "String", 1024);

		var ds_command = new Dataset("COMMAND");
		this._ds_command = ds_command;

		ds_command.addColumn("command", "String", 32);
		ds_command.addColumn("type", "int", 32);
		ds_command.addColumn("item", "String", 256);
		ds_command.addColumn("seq", "int");
		ds_command.addColumn("startrow", "int", 32);
		ds_command.addColumn("eof", "boolean", 32);
		ds_command.addColumn("instanceid", "String", 256);
		ds_command.addColumn("url", "String", 256);
		ds_command.addColumn("summarytype", "String", 256);
		ds_command.addColumn("range", "String", 32);
		ds_command.addColumn("exportsize", "String", 32);
		ds_command.addColumn("exporthead", "String", 32);
		ds_command.addColumn("exportimage", "String", 32);
		ds_command.addColumn("exportfilename", "String", 32);
		ds_command.addColumn("format", "String", 1024 * 1024);
		ds_command.addColumn("password", "String", 256);
		ds_command.addColumn("wraptext", "boolean", 32);

		ds_command.addRow();

		ds_command.setColumn(0, "command", "export");
		ds_command.setColumn(0, "type", exportObj._exporttype);
		ds_command.setColumn(0, "item", grid.id);
		ds_command.setColumn(0, "seq", this._seq);
		ds_command.setColumn(0, "startrow", this._startRow);
		ds_command.setColumn(0, "instanceid", this._instanceId);
		ds_command.setColumn(0, "url", exportObj._fileURL);
		ds_command.setColumn(0, "summarytype", grid.summarytype);

		ds_command.setColumn(0, "range", this.range);
		var is_selectRec = this.exportselect == "selectrecord";
		var is_show_head = grid.selecttype != ("area" || "multiarea" || "treecell") ? true : false;
		if (is_show_head) {
			if (is_selectRec) {
				if (this._exporthead == "") {
					this._exporthead = "nohead, nosumm";
					this._applyHead = false;
					this._applySumm = false;
				}
				this._exportmerge = false;
			}
		}
		else {
			this._exporthead = "nohead, nosumm";
			this._applyHead = false;
			this._applySumm = false;
		}
		ds_command.setColumn(0, "exportsize", this.exportsize);
		ds_command.setColumn(0, "exporthead", this._exporthead);
		ds_command.setColumn(0, "exportimage", this.exportimage);
		ds_command.setColumn(0, "exportfilename", exportObj.exportfilename);

		var madeformat = nexacro._replaceAll(this._makeFormat(grid), "&#13;", "");
		ds_command.setColumn(0, "format", madeformat);
		ds_command.setColumn(0, "password", exportObj._file_password);
		ds_command.setColumn(0, "wraptext", exportObj._wrap_text);

		var ds = new Dataset("CELL");
		this._ds_cell = ds;

		var bodycntcell = grid.getCellCount("body");

		var bodycntrow = this._bodyRowCnt = grid._getGridRowCount();

		var style_name;
		var rt;

		if (this._exportmerge && grid._is_use_suppress && bodycntrow >= grid._bodyBand._get_rows().length) {
			this._gridSuppressUpdate(grid, bodycntrow);
		}

		var export_param = null;
		var export_dsparam = null;

		if (bodycntcell > 0) {
			var kk = 0;

			var str_lenth = "";
			var b_row = (bodycntrow / 5) | 0;
			for (var jj = 0; jj < bodycntcell; jj++) {
				ds.addColumn("Column" + jj, "String", 256);
				str_lenth += this._getCellText(grid, 0, jj);
				str_lenth += this._getCellText(grid, b_row * 2, jj);
				str_lenth += this._getCellText(grid, b_row * 3, jj);
				str_lenth += this._getCellText(grid, b_row * 4, jj);
				str_lenth += this._getCellText(grid, bodycntrow - 1, jj);
			}
			str_lenth = str_lenth.length + 1;
			var partRowCount = this._partitionRow = parseInt(exportObj._partition_size / str_lenth);
			if (partRowCount == 0 && str_lenth > 0) {
				partRowCount = this._partitionRow = 1;
			}


			if (partRowCount >= bodycntrow) {
				partRowCount = bodycntrow;
				this._eof = true;
				export_param = this.parent._argsParam;
				export_dsparam = this.parent._argsDsParam;
			}
			else {
				partRowCount = parseInt(partRowCount / 2);
			}

			var cells = grid._curFormat._bodycells;

			var activate_select_style = (this.exportvalue == "selectstyle");
			var is_selected;
			var subcnt;
			for (var k = 0; k < partRowCount; k++) {
				subcnt = 0;

				var val;
				var selectChk = false;
				for (var j = 0; j < bodycntcell; j++) {
					selectChk = selectChk || grid.isSelectedCell(j, "body", k, -9);
				}

				if (selectChk || !is_selectRec) {
					var idx = ds.addRow();
					if (is_selectRec) {
						this._eventExport(exportObj, this.type, k, this._selectcount++);
					}
					else {
						this._eventExport(exportObj, this.type, k);
					}
				}
				else {
					continue;
				}
				var odd = k % 2;

				is_selected = false;
				for (var j = 0; j < bodycntcell; j++) {
					is_selected = grid.isSelectedCell(j, "body", k, -9);
					if (is_selected) {
						var emptyCellFlag = false;
					}
					else {
						if (is_selectRec) {
							emptyCellFlag = true;
						}
					}
					var backgroundCell, alignCell, fontCell, colorCell, lineCell;

					var bodyBand = grid._bodyBand;

					var cell = cells[j];
					var suppress_infos = cell._suppress_infos;
					var style_name = "";
					var _pseudo = "normal";
					var sFlag = false;

					var cacheA = this._stylecache[j + "align"];

					var cacheL = this._stylecache[j + "line"];
					var cacheB, cacheC, cacheF;


					if (is_selected && activate_select_style) {
						_pseudo = "selected";
						cacheB = "";
						cacheC = "";
						cacheF = "";
					}
					else {
						if (emptyCellFlag) {
							cacheB = "255,255,255";
							cacheC = "255,255,255";
							var d_BLColor = this._d_BLColor;
							cacheL = d_BLColor + ":" + d_BLColor + ":" + d_BLColor + ":" + d_BLColor;
							sFlag = true;
						}
						else {
							cacheB = this._stylecache[j + "background" + odd];
							cacheC = this._stylecache[j + "color" + odd];
						}
						cacheF = this._stylecache[j + "font"];
					}


					if (cacheB) {
						backgroundCell = cacheB;
					}
					else {
						sFlag = true;
						backgroundCell = nexacro._nvl(this._getHEXtoRGB(this._getCellStyle(cell, k, odd, "background", _pseudo)), "");
					}
					if (cacheA) {
						alignCell = cacheA;
					}
					else {
						sFlag = true;
						alignCell = nexacro._nvl(this._getFitValue(this._getCellStyle(cell, k, odd, "align", _pseudo)), "");
					}
					if (cacheC) {
						colorCell = cacheC;
					}
					else {
						sFlag = true;
						colorCell = nexacro._nvl(this._getHEXtoRGB(this._getCellStyle(cell, k, odd, "color", _pseudo)), "");
					}
					if (cacheF) {
						fontCell = cacheF;
					}
					else {
						sFlag = true;
						fontCell = nexacro._nvl(this._getFitFontValue(this._getCellStyle(cell, k, odd, "font", _pseudo)), "");
					}

					var is_line_changed, d_BLColor, right_linecolor, bottom_linecolor, linecolor;
					is_line_changed = false, right_linecolor = null, bottom_linecolor = null;

					var row_suppress_count = 0;
					var col_suppress_count = 0;
					switch (this._exportmerge) {
						case 0:
							break;
						case 1:
							if (cell.suppress > 0) {
								sFlag = is_line_changed = true;
								if (suppress_infos[k].border_proc) {
									bottom_linecolor = "empty";
								}
							}

							grid._checkFakeMerge(cell, k);

							if (cell._fakemerge_infos) {
								var fake_border_str = cell._fakemerge_infos[k + 2];
								if (fake_border_str) {
									sFlag = is_line_changed = true;
									switch (fake_border_str) {
										case "bottomfake":
											bottom_linecolor = "empty";
											break;
										case "rightbottomfake":
											right_linecolor = bottom_linecolor = "empty";
											break;
										case "rightfake":
											right_linecolor = "empty";
											break;
									}
								}
							}
							break;
						case 2:
							if (cell.suppress > 0) {
								sFlag = is_line_changed = true;
								var column_suppress = j + "count";
								var excel_suppress_info = this._excel_suppress_info;
								if (!excel_suppress_info[column_suppress]) {
									excel_suppress_info[column_suppress] = 0;
									alignCell = alignCell.split(",")[0] + ", " + this._suppress_align_table[cell.suppressalign];
								}

								if (suppress_infos[k].border_proc) {
									this._excel_suppress_info[column_suppress]++;
								}
								else {
									row_suppress_count = ++excel_suppress_info[column_suppress];
									excel_suppress_info[column_suppress] = 0;
								}
							}

							var merge_data = this._merge_datas && this._merge_datas[k + "_" + j];
							if (merge_data && merge_data.isFakeEnd) {
								sFlag = is_line_changed = true;
								row_suppress_count = merge_data.rowspan;
								col_suppress_count = merge_data.colspan;
							}
							break;
					}

					if (!is_line_changed && cacheL) {
						lineCell = cacheL;
					}
					else {
						if (this._applyL) {
							sFlag = true;
							var line = this._getCellStyle(cell, k, odd, "border", _pseudo);
							if (line.right_style != "none" && line._right_width != 0) {
								linecolor = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
								if (!right_linecolor) {
									right_linecolor = linecolor;
								}
							}
							else {
								right_linecolor = "empty";
							}

							if (line.bottom_style != "none" && line._bottom_width != 0) {
								linecolor = this._getHEXtoRGB(line.bottom_color) + (line.bottom_style == "solid" ? "" : "," + line.bottom_style);
								if (!bottom_linecolor) {
									bottom_linecolor = linecolor;
								}
							}
							else {
								bottom_linecolor = "empty";
							}
						}
						else {
							bottom_linecolor = right_linecolor = "empty";
						}
						lineCell = "empty:empty:" + right_linecolor + ":" + bottom_linecolor;
					}

					var cell_type = this._getFixedCellType(cell, k);
					style_name = this._makeforDsStyle(ds_style, alignCell, backgroundCell, colorCell, fontCell, lineCell, cell_type, row_suppress_count, col_suppress_count);

					var longdate_flag = false;
					if ((cell_type.indexOf("date") > -1 || cell_type.indexOf("number") > -1) && (this._checkExpr(cell.locale) || this._checkExpr(cell.mask) || cell.mask == "LONGDATE")) {
						sFlag = true;
						if (cell.mask == "LONGDATE") {
							longdate_flag = true;
						}
					}

					var display_text = this._getCellText(grid, k, j);
					val = emptyCellFlag ? "" : display_text;

					if (longdate_flag) {
						cell.mask = "SHORTDATE";
						val = cell._getDisplayText_date(k);
						cell.mask = "LONGDATE";
					}

					var displaytype = grid.getCellProperty("body", j, "displaytype");
					if (displaytype == "image") {
						var expImg = this.exportimage.toLowerCase();
						if (expImg == "url" || expImg == "image") {
							var path = this._getCellText(grid, k, j);

							if (path) {
								var url = nexacro._getURIValue(path);
								val = nexacro._getImageLocation(url, this._getForm()._getFormBaseUrl());
							}
							else {
								val = path;
							}
						}
						else {
							val = "";
						}
					}


					if (exportObj._commdataformat == 3) {
						var delimiter = "_x001D_";
					}
					else {
						var delimiter = String.fromCharCode(29);
					}

					if (this._exportmerge == 1) {
						if (cell.suppress > 0) {
							if (suppress_infos[k].text_proc) {
								val = "";
							}
						}

						if (!!grid._checkFakeMerge(cell, k)) {
							val = "";
							var merge_data = this._merge_datas && this._merge_datas[k + "_" + j];
							if (merge_data) {
								if (merge_data.isFakeStart) {
									if (alignCell == "left,top") {
										val = display_text;
									}
									else {
										var temp_align = alignCell.split(",");
										var merge_str = merge_data[temp_align[1]] + "_" + merge_data[temp_align[0]];
										if (this._merge_datas[merge_str]) {
											this._merge_datas[merge_str].disPlayText = display_text;
											this._merge_datas[merge_str].showText = true;
										}
										else {
											this._merge_datas[merge_str] = {
												disPlayText : display_text, 
												showText : true
											};
										}
									}
								}
								else if (merge_data.showText) {
									val = merge_data.disPlayText;
								}
							}
						}
					}

					if (exportObj._is_orgval) {
						val = nexacro._isNumber(val) ? val : nexacro._isDecimal(val) ? val : nexacro._nvl(val, "");
					}
					else {
						val = nexacro._nvl(val, "");
					}

					ds.setColumn(idx, "Column" + (j + subcnt), val + delimiter + (sFlag || (is_selected && activate_select_style) ? style_name : ""));

					if (cell._subcells.length) {
						var subcell = cell._subcells;
						var subcell_len = subcell.length;
						var rowspan = cell._rowspan - 1;
						var colspan = cell._colspan - 1;

						var subline = "";
						var line = this._getCellStyle(cell, k, odd, "border", _pseudo);
						var d_BLColor = this._d_BLColor;

						if (this._applyL) {
							linecolor = this._getHEXtoRGB(line.right_color) + (line.right_style == "solid" ? "" : "," + line.right_style);
						}
						else {
							linecolor = d_BLColor;
						}

						var lLine, tLine, rLine, bLine;

						for (var i = 0; i < subcell_len; i++) {
							var subcell_col = subcell[i]._col;
							var subcell_row = subcell[i]._row;
							var sub_rowspan = subcell[i]._rowspan - 1;
							var sub_colspan = subcell[i]._colspan - 1;

							if (subcell_col == colspan) {
								rLine = linecolor;
							}
							else {
								rLine = "empty";
							}

							if (subcell_col == 0) {
								if (cell._col == 0) {
									lLine = linecolor;
								}
								else {
									lLine = d_BLColor;
								}
							}
							else {
								lLine = "empty";
							}

							if (subcell_row == rowspan) {
								bLine = linecolor;
							}
							else {
								if (sub_rowspan > 0 && sub_rowspan == rowspan) {
									bLine = linecolor;
								}
								else {
									bLine = "empty";
								}
							}

							if (subcell_row == 0) {
								tLine = d_BLColor;
							}
							else {
								tLine = "empty";
							}

							subline = lLine + ":" + tLine + ":" + rLine + ":" + bLine;

							var cell_type = this._getFixedCellType(subcell[i], 0);
							style_name = this._makeforDsStyle(ds_style, alignCell, backgroundCell, colorCell, fontCell, subline, cell_type);

							if (i != 0) {
								ds.addColumn("Column" + (jj + subcnt), "String", 256);
								subcnt++;
							}

							var val = subcell[i]._getDisplayText(k);
							if (exportObj._is_orgval) {
								var cellinfo = subcell[i]._refobj;
								if (cellinfo && cellinfo._getDisplaytype(k) == "number") {
									val = cellinfo._getValue(k);
								}
							}

							ds.setColumn(idx, "Column" + (j + subcnt), val + delimiter + style_name);
						}
					}
				}
			}
			this._preStartRow = this._startRow;
			this._startRow = partRowCount;
		}
		else {
			this._eof = true;
			export_param = this.parent._argsParam;
			export_dsparam = this.parent._argsDsParam;
		}

		ds_command.setColumn(0, "eof", this._eof);

		if (this._ds_response) {
			delete this._ds_response;
		}

		this._ds_response = new Dataset("RESPONSE");

		this._rollbackSuppressInfo();

		if (export_dsparam != undefined) {
			this._transaction(this.id, exportObj._exporturl, "COMMAND=_ds_command STYLE=_ds_style CELL=_ds_cell" + " " + export_dsparam, "_ds_response=RESPONSE", export_param, "_exportCallback", true, exportObj._commdataformat, exportObj._commcompress);
		}
		else {
			this._transaction(this.id, exportObj._exporturl, "COMMAND=_ds_command STYLE=_ds_style CELL=_ds_cell", "_ds_response=RESPONSE", export_param, "_exportCallback", true, exportObj._commdataformat, exportObj._commcompress);
		}
		return true;
	};

	_pItem._transaction = function (id, url, inDatasetsParam, outDatasetsParam, argsParam, callbackFn, isAsync, datatype, isCompress) {
		this._load_manager = new nexacro.LoadManager(this);
		var service = nexacro._getServiceObject(url, true);
		this._load_manager.loadDataModule(url, id, inDatasetsParam, outDatasetsParam, argsParam, callbackFn, isAsync, datatype, isCompress, service);
	};

	_pItem._stopTransaction = function () {
		nexacro.Form.prototype._stopTransaction.apply(this, arguments);
	};

	_pItem._getDatasetObject = function (queryid) {
		var _ds = this[queryid];
		var form = this.parent.parent;
		if (_ds == null && form) {
			_ds = form._getDatasetObject(queryid);
		}

		if (_ds == null) {
			_ds = application[queryid];
		}

		return _ds;
	};

	_pItem._waitCursor = nexacro._emptyFn;

	_pItem._removeUrl = function (v) {
		if (v && v.length) {
			var index = v.indexOf("'");
			var end = -1;

			if (index > -1) {
				end = v.lastIndexOf("'");
				v = v.substring(index + 1, end);
			}

			index = v.indexOf("(");
			if (index > -1) {
				end = v.lastIndexOf(")");
				v = v.substring(index + 1, end);
			}
		}
		return v;
	};

	delete _pItem;

	nexacro.ExportProgress = function (id, position, left, top, width, height, right, bottom, parent) {
		nexacro.PopupComponent.call(this, id, position, left, top, width, height, right, bottom, parent);

		this._uitype = 0;
		this.visible = false;

		this.progressbar = null;
	};
	var _pExportProgress = nexacro.ExportProgress.prototype = nexacro._createPrototype(nexacro.PopupComponent, nexacro.ExportProgress);
	_pExportProgress._type_name = "ExportProgress";

	_pExportProgress.on_apply_style_color = nexacro._emptyFn;
	_pExportProgress.on_apply_style_font = nexacro._emptyFn;
	_pExportProgress.on_apply_style_align = nexacro._emptyFn;

	_pExportProgress.on_create_contents = function () {
		var control_elem = this.getElement();
		if (control_elem) {
			switch (this._uitype) {
				case 1:
					this.progressbar = new nexacro.ProgressBarCtrl("progressbar", "absolute", 0, 0, 1, 1, null, null, this);
					this.progressbar.createComponent();
					this.progressbar._setRtlDirection(this._rtldirection);
					break;
				case 2:
					this.progressbar = application.mainframe.statusbar;
					break;
			}
		}
	};

	_pExportProgress.on_created_contents = function () {
		switch (this._uitype) {
			case 1:
				if (this.progressbar) {
					this.progressbar.on_created();
				}
			case 2:
				break;
		}
	};

	_pExportProgress.on_change_containerRect = function (width, height) {
		switch (this._uitype) {
			case 1:
				this.progressbar.move(null, null, width, 20, 0, 0);
			case 2:
				break;
		}
	};

	_pExportProgress.on_destroy_contents = function () {
		switch (this._uitype) {
			case 1:
				this.progressbar.destroy();
			case 2:
				this.progressbar = null;
				break;
		}
	};

	_pExportProgress.set_visible = function (v) {
		if (this.visible != v) {
			this.visible = v;

			var control_elem = this._control_element;
			control_elem.setElementVisible(v);

			if (this.visible) {
				var pseudo = this._getResultPseudo(this._status, this._pseudo);
				this._updateControl(control_elem, pseudo);
				this._updateContents(control_elem, pseudo);
			}

			if (this.visible) {
				nexacro._resetVML(this);
			}
		}
	};
	_pExportProgress._getWindow = function () {
		return nexacro.Component.prototype._getWindow.call(this);
	};

	_pExportProgress.on_fire_onlbuttondown = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		return true;
	};

	_pExportProgress._on_keydown = function (elem, key_code, alt_key, ctrl_key, shift_key, meta_key) {
		if (key_code == nexacro.Event.KEY_TAB) {
			elem._event_stop = true;
		}
		else if (key_code == nexacro.Event.KEY_ESC) {
			nexacro._stopTransaction(this, 2);
		}

		return true;
	};


	_pExportProgress._show = function () {
		if (!this._is_created || !this.parent) {
			return;
		}

		var _window = this._getWindow();
		if (_window) {
			var left, top, width, height;

			left = _window.getLeft();
			top = _window.getTop();

			if (_window.frame) {
				var frame = _window.frame;
				width = frame.getOffsetWidth();
				height = frame.getOffsetHeight();
			}
			else {
				width = _window.getClientWidth();
				height = _window.getClientHeight();
			}

			var capture_comp = _window._getCaptureComp(true, true, this);
			if (capture_comp != this) {
				_window._setCaptureLock(this, true, true);
			}

			var cpd = this.currentstyle.padding;
			var pWidth = 0;
			var pHeight = 0;
			var _left = 0;
			var _top = 0;

			if (this._uitype == 1) {
				pWidth = (this._textWidth < 100 ? 100 : this._textWidth) + cpd.left + cpd.right;
				pHeight = this._textHeight + cpd.top + cpd.bottom + 22;
				_left = Math.round((width - pWidth) / 2);
				_top = Math.round((height - pHeight) / 2);
			}

			this._adjustPosition(_left, _top, null, null, pWidth, pHeight);
			this.on_update_position(true, true);

			var control_elem = this._control_element;
			if (control_elem) {
				control_elem.setElementPosition(_left, _top);
				control_elem.setElementSize(pWidth, pHeight);
				this._updateClientSize(control_elem);
			}

			this.set_visible(true);
		}
	};

	_pExportProgress._hide = function () {
		var _window = this.parent._getWindow();
		if (_window) {
			_window._releaseCaptureLock(this);

			if (nexacro._resize_popup_inbound == true) {
				var control_elem = this._control_element;
				if (control_elem) {
					control_elem.setElementSize(1, 1);
					this._updateClientSize(control_elem);
				}
			}
		}
		if (this._is_created && this._is_alive) {
			this.set_visible(false);
		}
	};

	nexacro._getLongerStr = function (str1, str2, str3) {
		var len = arguments.length;
		if (len < 2) {
			return;
		}

		var str = arguments[0];
		for (var i = 1; i < len; i++) {
			if (str.length < arguments[i].length) {
				str = arguments[i];
			}
		}
		return str;
	};

	_pExportProgress._set_text = function (v) {
		switch (this._uitype) {
			case 1:
				this.progressbar.set_text(v);
				break;
			case 2:
				var form = this._getForm();
				form.set_statustext(v);
				break;
		}
	};
	_pExportProgress._set_pos = function (v) {
		switch (this._uitype) {
			case 1:
				this.progressbar.set_pos(v);
				break;
			case 2:
				var comp = this;
				while (comp && !comp._is_top_frame) {
					if (comp._is_frame) {
						comp.statusbar && comp.statusbar.progressbar.set_pos(v);
					}
					comp = comp.parent;
				}
				break;
		}
	};

	delete _pExportProgress;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.ExcelImportObject) {
	nexacro.ExcelImportEventInfo = function (obj, id, url, refferObj) {
		this.id = this.eventid = id || "onsuccess";
		this.fromobject = obj;
		this.fromreferenceobject = refferObj;
		this.url = url;
	};
	var _pExcelImportEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ExcelImportEventInfo, nexacro.ExcelImportEventInfo);
	nexacro.ExcelImportEventInfo.prototype = _pExcelImportEventInfo;
	_pExcelImportEventInfo._type_name = "ExcelImportEventInfo";

	delete _pExcelImportEventInfo;


	nexacro.ExcelImportErrorEventInfo = function (obj, id, errortype, errormsg, errorobj, statuscode) {
		this.id = this.eventid = id || "onerror";
		this.fromobject = obj;
		this.fromreferenceobject = errorobj;
		this.errortype = errortype;
		this.errormsg = errormsg;
		this.statuscode = statuscode;
	};
	var _pExcelImportErrorEventInfo = nexacro._createPrototype(nexacro.ErrorEventInfo, nexacro.ExcelImportErrorEventInfo);
	nexacro.ExcelImportErrorEventInfo.prototype = _pExcelImportErrorEventInfo;
	_pExcelImportErrorEventInfo._type_name = "ExcelImportErrorEventInfo";

	delete _pExcelImportErrorEventInfo;

	nexacro.ExcelImportObject = function (name, parent) {
		this.id = this.name = name;

		if (!parent) {
			parent = this._getForm();
		}
		this.parent = parent;

		this._handle = null;

		this.importfilemode = "local";
		this._importfilemode = 0;
		this.commcompress = "none";
		this._commcompress = false;
		this.importtype = nexacro.ImportTypes.EXCEL;
		this.importurl = "";
		this._importurl = "";
		this._uploadurl = "";
		this._uploadservlet = "";

		this._fileurl = "";
		this._range = "";
		this._applyAllsheet = false;

		this._responseData = "";
		this._responseRVal = null;
		this._responseLVal = null;
		this.userawdatevalue = false;
		this._userawdatevalue = false;
		this.userawnumbervalue = true;
		this._userawnumbervalue = true;
		this._file_password = null;
		this._usehtmltag = true;

		this.usedatevalue = null;

		this._importSheet = "";
		this._importStartCell = null;
		this._importEndCell = null;

		this._tran_item = null;
		this._file_url_ds = null;

		this.filedialogpath = "";
		this.openedpath = "";

		this.filefilter = "";
		this.filefilterindex = 0;

		var unique_id = this._unique_id = this.parent._unique_id + "_" + this.id;
		if (nexacro._get_hidden_frame(unique_id, this._handle)) {
			nexacro._destroy_hidden_frame(unique_id, this._handle);
		}

		var ranid = new Date().valueOf().toString();

		nexacro._create_hidden_frame(unique_id, ranid, this._uploadComplete, this);
		nexacro._append_hidden_item(unique_id, "upfile", this._checkUploadFile, this, this._handle);
		nexacro._append_hidden_textitem(unique_id, "ds_command");

		this.onerror = new nexacro.EventListener("onerror");
		this.onsuccess = new nexacro.EventListener("onsuccess");

		this._event_list = 
			{
			"onerror" : 1, 
			"onsuccess" : 1
		};
	};
	var _pExcelImport = nexacro.ExcelImportObject.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.ExcelImportObject);
	_pExcelImport._type_name = "ExcelImportObject";

	_pExcelImport.on_created = nexacro._emptyFn;

	_pExcelImport.set_name = function (v) {
		this.id = this.name = v;
	};

	_pExcelImport.set_importtype = function (v) {
		switch ((v + "").toUpperCase()) {
			case "EXCEL":
				v = 0x0100;
				break;
			case "EXCEL97":
				v = 0x0110;
				break;
			case "EXCEL2007":
				v = 0x0120;
				break;
			case "HANCELL2010":
				v = 0x0400;
				break;
			case "HANCELL2014":
				v = 0x0410;
				break;
			case "CSV":
				v = 0x0500;
				break;
		}
		if (v != this.importtype) {
			this.importtype = v;
		}
		return v;
	};

	_pExcelImport.set_importurl = function (v) {
		if (v != this.importurl) {
			this.importurl = v;
			if (v == null) {
				this._importurl = "";
			}
			else {
				var uploadservlet = this._uploadservlet = nexacro._getServiceLocation(v, this.parent._getFormBaseUrl());
				var baseurl = uploadservlet.substring(0, uploadservlet.lastIndexOf("/") + 1);
				this._importurl = baseurl + "XExportImport";
			}
		}
		return v;
	};

	_pExcelImport.set_commcompress = function (v) {
		if (v != this.commcompress) {
			this.commcompress = v;
			switch (v.toString().toUpperCase()) {
				case "COMPRESS":
					this._commcompress = true;
					break;
				default:
					this._commcompress = false;
					break;
			}
		}
		return v;
	};

	_pExcelImport.set_importfilemode = function (v) {
		if (this.importfilemode != v) {
			this.importfilemode = v;
			this._importfilemode = v == "server" ? 1 : 0;
		}
		return v;
	};

	_pExcelImport.set_userawdatevalue = function (v) {
		if (this.userawdatevalue != v) {
			this.userawdatevalue = v;
			this._userawdatevalue = nexacro._toBoolean(v);
		}
		return v;
	};

	_pExcelImport.set_userawnumbervalue = function (v) {
		if (this.userawnumbervalue != v) {
			this.userawnumbervalue = v;
			this._userawnumbervalue = nexacro._toBoolean(v);
		}
		return v;
	};

	_pExcelImport.set_filedialogpath = function (v) {
		this.filedialogpath = v;
	};

	_pExcelImport.set_openedpath = function (v) {
	};

	_pExcelImport.set_filefilter = function (v) {
		this.filefilter = v;
	};

	_pExcelImport.set_filefilterindex = function (v) {
		this.filefilterindex = v;
	};



	_pExcelImport._setImportRange = function (range) {
		var obj = {
		};
		if (range) {
			if (range.indexOf("!") > 0) {
				var rg = range.split("!");
				obj["sheet"] = rg[0];
				var cells = rg[1];
				var temp;
				if (cells.indexOf(":") > 0) {
					cells = cells.split(":");
					temp = this._getExcelRowCol(cells[0]);
					obj["startRow"] = temp[1] ? temp[1] : "";
					obj["startCol"] = temp[0] ? temp[0] : "";
					temp = this._getExcelRowCol(cells[1]);
					obj["endRow"] = temp[1] ? temp[1] : "";
					obj["endCol"] = temp[0] ? temp[0] : "";
				}
				else {
					temp = this._getExcelRowCol(cells);
					obj["startRow"] = temp[1] ? temp[1] : "";
					obj["startCol"] = temp[0] ? temp[0] : "";
					obj["endRow"] = "";
					obj["endCol"] = "";
				}
			}
		}
		else {
			obj["sheet"] = "";
			obj["startRow"] = "";
			obj["startCol"] = "";
			obj["endRow"] = "";
			obj["endCol"] = "";
		}
		this._range.push(obj);
	};

	_pExcelImport.importData = function (fileurl, range, responseData, userData) {
		this._file_password = null;
		this._fileurl = "";

		if (arguments.length < 3) {
			return false;
		}

		if (!this.importurl) {
			return false;
		}

		var mode = this.importfilemode.toLowerCase();
		if (mode != "server" || !fileurl) {
			this._importfilemode = 0;
		}
		else {
			this._importfilemode = 1;
		}


		if (range) {
			this._range = range;
		}
		else {
			this._range = "";
		}

		if (responseData) {
			this._responseLVal = [];
			this._responseRVal = [];
			var temp_response = "";

			var responseDatas = responseData.split(",");
			if (responseDatas.length <= 1 && responseDatas[0]) {
				responseDatas = responseDatas[0].split(" ");
			}

			for (var i = 0, r_len = responseDatas.length; i < r_len; i++) {
				if (responseDatas[i].length) {
					var responArr = responseDatas[i].match(/[_A-Za-z0-9]+/g);
					this._responseLVal.push(responArr[0]);
					if (responArr[1] == null) {
						responArr[1] = "output" + (i + 1);
					}
					this._responseRVal.push(responArr[1]);
					temp_response += " " + responArr[0] + "=" + responArr[1];

					responArr = null;
				}
			}
			this._responseData = temp_response;
		}

		if (userData) {
			var userDatas = nexacro.replaceAll(userData, " ", "").split(",");
			for (var i = 0, u_len = userDatas.length; i < u_len; i++) {
				var dataArr = userDatas[i].split("=");
				if (dataArr[0] == "filepassword") {
					this._file_password = dataArr[1];
					userDatas.splice(i, 1);
					userData = userDatas.join(",");
					break;
				}
			}
		}
		this._user_data = userData;

		if (!this._importfilemode) {
			nexacro._change_inputnode_name(this._input_node, "upfile");
			nexacro._findclick(this._unique_id, "upfile", this, this._handle, this.filedialogpath, this.filefilter, this.filefilterindex);
		}
		else {
			nexacro._change_inputnode_name(this._input_node, "");
			if (this._checkFileName(fileurl)) {
				this._fileurl = fileurl;
				this._requestImport(fileurl);
			}
			else {
				var errormsg = "the file extension is wrong";
				var evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", errormsg, this, -1);
				this.on_fire_onerror(this, evt);
				return false;
			}
		}

		return true;
	};

	_pExcelImport.destroy = function () {
		var unique_id = this._unique_id;

		this._responseLVal = [];
		this._responseRVal = [];
		this._range = "";
		if (this._load_manager) {
			this._load_manager.destroy();
			delete this._load_manager;
			this._load_manager = null;
		}

		if (this._file_url_ds) {
			this._file_url_ds.clear();
			this._file_url_ds.destroy();
			delete this._file_url_ds;
			this._file_url_ds = null;
		}

		if (this._ds_command) {
			this._ds_command.clear();
			this._ds_command.destroy();
		}

		nexacro._remove_hidden_item(unique_id, "upfile", this._handle);
		nexacro._remove_hidden_item(unique_id, "ds_command", this._handle);
		nexacro._destroy_hidden_frame(unique_id, this, this._handle);

		delete this._ds_command;
		this._ds_command = null;

		delete this.onerror;
		this.onerror = null;
		delete this.onsuccess;
		this.onsuccess = null;

		if (this.parent) {
			this.parent.removeChild(this.id);
		}
		this._handle = null;
		this.parent = null;
		return true;
	};

	_pExcelImport.on_fire_onerror = function (obj, e) {
		this._setWaitCursor(false);
		var event = this.onerror;
		if (event && event._has_handlers) {
			event._fireEvent(this, e);
		}
	};

	_pExcelImport.on_fire_onsuccess = function (obj, e) {
		this._setWaitCursor(false);
		var event = this.onsuccess;
		if (event && event._has_handlers) {
			event._fireEvent(this, e);
		}
	};


	_pExcelImport._getExcelRowCol = function (cell) {
		var strLen = cell.length;
		var arr = [];
		for (var i = 0; i < strLen; i++) {
			if (!isNaN(cell[i])) {
				arr.push(cell.substring(0, i));
				arr.push(cell.substring(i));
				break;
			}
		}
		return arr;
	};

	_pExcelImport._transaction = function (id, url, inDatasetsParam, outDatasetsParam, userData, callbackFn, isAsync, datatype, isCompress) {
		this._load_manager = new nexacro.LoadManager(this);
		var service = nexacro._getServiceObject(url, true);
		this._load_manager.loadDataModule(url, id, inDatasetsParam, outDatasetsParam, userData, callbackFn, isAsync, datatype, isCompress, service);
	};

	_pExcelImport._getDataset = function (ds_id) {
		var form = this.parent;
		if (!form) {
			form = this._getForm();
		}

		var r_val = this._responseRVal;
		var len = r_val.length;

		for (var i = 0; i < len; i++) {
			if (r_val[i] == ds_id) {
				return form[this._responseLVal[i]];
			}
		}
		return null;
	};

	_pExcelImport._waitCursor = nexacro._emptyFn;
	_pExcelImport._setParamter = nexacro._emptyFn;
	_pExcelImport._getDatasetObject = function (queryid) {
		var _ds = this[queryid];
		if (_ds == null && this.parent && this.parent != application) {
			_ds = this.parent._getDatasetObject(queryid);
		}

		if (_ds == null) {
			_ds = application[queryid];
		}

		return _ds;
	};

	_pExcelImport._getForm = function () {
		var form = null;
		var main_frame = application.mainframe;
		if (main_frame) {
			var frame = main_frame.getActiveFrame();
			while (frame && !frame.form) {
				if (!frame.getActiveFrame) {
					return null;
				}
				frame = frame.getActiveFrame();
			}

			form = frame.form;
		}
		return form;
	};

	_pExcelImport._isPopupFrame = function () {
		return false;
	};


	_pExcelImport._makeImportFormat = function () {
		var str = "<Import>";
		str += "<Sheets>";

		var sheets = this._range;
		if (sheets.indexOf(",") < 0) {
			sheets = nexacro.replaceAll(sheets, "][", ",");
		}

		sheets = sheets.split(",");

		var properties = "";

		for (var i = 0, s_len = sheets.length; i < s_len; i++) {
			sheets[i] = nexacro.replaceAll(sheets[i], "[", "");
			sheets[i] = nexacro.replaceAll(sheets[i], "]", "");

			str += "<Sheet ";

			if (sheets[i].indexOf("=") < 0) {
				var range = sheets[i];
				if (range.indexOf("!") > 0) {
					var range_arr = range.split("!");
					if (range_arr[1].indexOf(":") > 0) {
						var sheet = range_arr[0];
						var range = range_arr[1].split(":");
						var start_row = range[0].match(/[0-9]+/);
						var start_col = range[0].match(/[A-Z]+/);
						var body_start_row = +start_row + 1;

						var end_row = range[1].match(/[0-9]+/);
						var end_col = range[1].match(/[A-Z]+/);

						str += 'command=\"getsheetdata\" output=\"' + this._responseRVal + '\" head=\"' + sheet + '!' + start_col + start_row + ':' + end_col + start_row + '\" body=\"' + sheet + '!' + start_col + (+start_row + 1) + ':' + end_col + end_row + '\" />';
					}
					else {
						str += 'command=\"getsheetdata\" output=\"' + this._responseRVal + '\" Body=\"' + sheets[i] + '\" />';
					}
				}
				else {
					str += 'command=\"getsheetdata\" output=\"' + this._responseRVal + '\" Body=\"' + sheets[i] + '\" />';
				}
			}
			else {
				properties = sheets[i].split(";");

				var tmp_num = 1;
				var flag = false;
				var property = "";
				for (var j = 0, p_len = properties.length; j < p_len; j++) {
					if (!properties[j].length) {
						continue;
					}

					property = properties[j].split("=");

					var property_name = property[0].toLowerCase();

					if (property_name != "command") {
						if (j == 0) {
							str += 'command=\"getsheetdata\" ';
						}
						if (property_name == "output") {
							flag = true;
						}
					}
					str += property_name + "=\"" + property[1] + "\" ";
				}

				if (!flag) {
					str += 'output=\"output' + tmp_num + '\" ';
					tmp_num++;
				}
				str += "/>";
			}
		}

		str += "</Sheets>";
		str += "</Import>";

		return str;
	};

	_pExcelImport._requestImport = function (fileUrl) {
		var ds_command = new Dataset("COMMAND");
		this._ds_command = ds_command;

		ds_command.addColumn("command", "String", 32);
		ds_command.addColumn("type", "int", 32);
		ds_command.addColumn("url", "String", 256);
		ds_command.addColumn("format", "String", 256);
		ds_command.addColumn("filemode", "String", 256);
		ds_command.addColumn("password", "String", 256);
		ds_command.addColumn("rawdatevalue", "String", 256);
		ds_command.addColumn("rawnumbervalue", "String", 256);
		ds_command.addColumn("usehtmltag", "String", 256);

		ds_command.addRow();

		ds_command.setColumn(0, "command", "import");
		ds_command.setColumn(0, "type", this._importType);
		ds_command.setColumn(0, "url", encodeURIComponent(fileUrl));
		ds_command.setColumn(0, "format", this._makeImportFormat());
		ds_command.setColumn(0, "filemode", this._importfilemode ? "server" : "local");
		ds_command.setColumn(0, "password", this._file_password);
		ds_command.setColumn(0, "rawdatevalue", this._userawdatevalue);
		ds_command.setColumn(0, "rawnumbervalue", this._userawnumbervalue);
		ds_command.setColumn(0, "usehtmltag", this._usehtmltag);

		if (this._ds_response) {
			this._ds_response.clear();
			this._ds_response.destroy();
			delete this._ds_response;
		}

		var datasets = this._responseLVal;
		for (var i = 0, d_len = datasets.length; i < d_len; i++) {
			var reponseDS = this.parent[datasets[i]];
			if (reponseDS) {
			}
			else {
				var errormsg = "Dataset is null";
				var evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", errormsg, this, -2011);
				this.on_fire_onerror(this, evt);
				return;
			}
			reponseDS = null;
		}

		this._file_url_ds = new Dataset("_file_url_ds", this);

		this._tran_item = new nexacro.TransactionItem(this._importurl, this, this.id, "COMMAND=_ds_command", this._responseData + ", _file_url_ds=IMPORTFILES", this._user_data, 0, true);
		var tran_item = this._tran_item;

		var send_data = tran_item._sendData;

		nexacro._setImportCommand(this._unique_id, "ds_command", this, this._handle, send_data);
		nexacro._submit(this._unique_id, this._uploadservlet, this._handle, send_data, fileUrl);

		delete ds_command;
		delete tran_item;
	};

	if (nexacro.Browser == "Runtime") {
		_pExcelImport._uploadComplete = function (status, data, url, errcode, httpcode, errmsg) {
			var evt, error_info, fileUrl, unique_id = this._unique_id, code = -1, msg = "", result = null, statuscode = 9901;
			if (status < 0) {
				application._onHttpSystemError(this, true, this, errcode, url, httpcode, url, null);

				var errormsg = nexacro._GetSystemErrorMsg(this, errcode);
				evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", errormsg, this, statuscode);
				this.on_fire_onerror(this, evt);
			}
			else {
				if (data) {
					if (data.indexOf("<noscript>") >= 0) {
						data = data.substr(data.indexOf("<noscript>") + 10);
						data = data.substr(0, data.indexOf("</noscript>"));
					}

					result = this._tran_item._deserializeData(data);

					error_info = result[0];
					if (error_info) {
						code = error_info[0];
						msg = error_info[1];
					}
				}
				this._tran_item = null;
				if (code < 0) {
					if (code <= -2001 && code >= -2020) {
						statuscode = code;
					}
					evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", msg, this, statuscode);
					this.on_fire_onerror(this, evt);
				}
				else {
					fileUrl = this._fileurl = this._file_url_ds ? this._file_url_ds.getColumn(0, 3) : null;
					this._file_url_ds = null;
					var evt = new nexacro.ExcelImportEventInfo(this, "onsuccess", fileUrl, this);
					this.on_fire_onsuccess(this, evt);
				}
			}
			nexacro._remove_hidden_item(unique_id, "upfile", this._handle);
			nexacro._append_hidden_item(unique_id, "upfile", this._checkUploadFile, this, this._handle);
		};
	}
	else {
		var _html_entity = /&amp;|&lt;|&gt;|&nbsp;/g;
		function _replace_text (chr) {
			if (chr == "&amp;") {
				return "&";
			}
			else if (chr == "&lt;") {
				return "<";
			}
			else if (chr == "&gt;") {
				return ">";
			}
			else if (chr == "&nbsp;") {
				return " ";
			}
			else {
				return chr;
			}
		}
		;

		_pExcelImport._uploadComplete = function () {
			var url, error_info, evt, fileUrl, code = -1, msg = "", result = null, unique_id = this._unique_id, statuscode = 9901;
			try {
				var xmldoc = nexacro._getXMLDocument(unique_id);
				url = xmldoc.URL ? xmldoc.URL : xmldoc.url;
				if (url == "about:blank") {
					return;
				}

				var data = nexacro._getDataFromDOM(xmldoc);
				if (!data || data.length <= 0 || data.indexOf("SSV:UTF-8") < 0) {
					var node = xmldoc.childNodes[0];
					if (node) {
						if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
							data = node.innerHTML;
						}
						else {
							data = xmldoc.head.innerHTML;
						}

						data = data.replace(_html_entity, _replace_text);
					}
				}


				if (data.indexOf("<noscript>") >= 0) {
					data = data.substr(data.indexOf("<noscript>") + 10);
					data = data.substr(0, data.indexOf("</noscript>"));
				}

				result = this._tran_item._deserializeData(data);

				if (this._tran_item) {
					this._tran_item.context = null;
					this._tran_item.inputDatasets = null;
					this._tran_item.outputDatasets = null;
					delete this._tran_item;
					this._tran_item = null;
				}

				error_info = result[0];
				if (error_info) {
					code = error_info[0];
					msg = error_info[1];
				}

				if (code < 0) {
					if (code <= -2001 && code >= -2020) {
						statuscode = code;
					}
					evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", msg, this, statuscode);
					this.on_fire_onerror(this, evt);
				}
				else {
					fileUrl = this._fileurl = this._file_url_ds ? this._file_url_ds.getColumn(0, 3) : null;
					this._file_url_ds.clear();
					this._file_url_ds.destroy();
					delete this._file_url_ds;
					this._file_url_ds = null;
					evt = new nexacro.ExcelImportEventInfo(this, "onsuccess", fileUrl, this);
					this.on_fire_onsuccess(this, evt);
					evt = null;
				}
			}
			catch (e) {
				evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", "failed to get", this, statuscode);
				this.on_fire_onerror(this, evt);
			}
			nexacro._remove_hidden_item(unique_id, "upfile", this._handle);
			nexacro._append_hidden_item(unique_id, "upfile", this._checkUploadFile, this, this._handle);

			data = null;
		};
	}

	_pExcelImport._checkFileName = function (str) {
		if (str == null) {
			return false;
		}
		var checkExcel = false;
		var extension = "";
		var index = str.lastIndexOf("\\");
		var filename = str.substring(index + 1);
		var _split = filename.split(".");
		var len = _split.length;
		if (len > 1) {
			extension = _split[len - 1];
			switch (extension.toLowerCase()) {
				case "xls":
					checkExcel = true;
					this._importType = nexacro.ImportTypes.EXCEL97;
					break;
				case "xlsx":
				case "xlsm":
					checkExcel = true;
					this._importType = nexacro.ImportTypes.EXCEL2007;
					break;
				case "cell":
					checkExcel = true;
					this._importType = nexacro.ImportTypes.HANCELL;
					break;
				case "csv":
					checkExcel = true;
					this._importType = nexacro.ImportTypes.CSV;
					break;
				default:
					if (this._importfilemode) {
						checkExcel = true;
						this._importType = this.importtype;
					}
					break;
			}
		}
		else {
			if (this._importfilemode) {
				checkExcel = true;
				this._importType = this.importtype;
			}
		}
		return checkExcel;
	};

	_pExcelImport._checkUploadFile = function (excel) {
		this._setWaitCursor(true);

		var nIdx = excel.lastIndexOf("\\");
		if (nIdx > 0) {
			this.openedpath = excel.substring(0, nIdx + 1);
		}

		if (this._checkFileName(excel)) {
			this._requestImport(excel);
		}
		else {
			var errormsg = "the file extension is wrong";
			var evt = new nexacro.ExcelImportErrorEventInfo(this, "onerror", "ObjectError", errormsg, this, -1);
			this.on_fire_onerror(this, evt);
		}
	};

	_pExcelImport._setWaitCursor = function (wait_flag) {
		var form = this.parent;
		if (!form) {
			form = this._getForm();
		}

		form.setWaitCursor(wait_flag);
	};

	_pExcelImport._getWindow = function () {
		var form = this.parent;
		if (form._is_form) {
			return form._getWindow();
		}
		return null;
	};

	_pExcelImport._getWindowHandle = function () {
		var form = this.parent;
		if (form._is_form) {
			return form._getWindowHandle();
		}
		return null;
	};

	_pExcelImport._changeFiles = nexacro._emptyFn;

	delete _pExcelImport;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro.Tray) {
	nexacro.Tray = function (id, parent) {
		this.id = id;
		this.icon = "default";
		this.tooltip = "";
		this.items = new nexacro.Collection();
		this.name = id;

		this._handle = null;
		this._init_flag = false;

		this._event_list = 
			{
			"onlbuttonup" : 1, 
			"onrbuttonup" : 1, 
			"ondblclick" : 1
		};
	};


	var _pTray = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.Tray);
	nexacro.Tray.prototype = _pTray;

	_pTray._type_name = "Tray";

	_pTray.on_created = function () {
		var iconurl = this.icon;
		if (iconurl && iconurl.indexOf("::") > -1) {
			iconurl = application._getServiceLocation(iconurl);
		}

		this._handle = nexacro._createTrayHandle(iconurl, this.tooltip);

		var cnt = this.items.length;
		for (var i = 0; i < cnt; i++) {
			this.items[i].on_created();
		}
	};

	_pTray._destroy = function () {
		var cnt = this.items.length;
		for (var i = cnt - 1; i >= 0; i--) {
			this.items.delete_item(i);
		}

		nexacro._removeTrayHandle(this._handle);

		application.trays.delete_item(this.id);
		application.all.delete_item(this.id);
	};




	_pTray.set_id = function (v) {
		if (v != this.id) {
			this.id = this.name = v;
		}
	};

	_pTray.set_name = function (v) {
		if (v != this.name) {
			this.id = this.name = v;
		}
	};

	_pTray.set_icon = function (v) {
		if (v != this.icon) {
			this.icon = v;
		}

		if (this._handle) {
			nexacro._setTrayIconHandle(this._handle, this.icon);
		}
	};

	_pTray.set_tooltip = function (v) {
		if (v != this.tooltip) {
			this.tooltip = v;
		}

		if (this._handle) {
			nexacro._setTrayTooltipHandle(this._handle, this.tooltip);
		}
	};





	_pTray.show = function () {
		if (this._init_flag) {
			this.on_created();
		}
	};

	_pTray.destroy = function () {
		this._destroy();
	};

	_pTray.init = function (id, icon, tooltip) {
		var obj = application.trays[id];
		if (obj && obj._handle == null) {
			this.set_id(id);
			this.set_icon(icon);
			this.set_tooltip(tooltip);

			this._init_flag = true;
		}
	};

	_pTray.showBalloonTip = function (titleicon, title, text, nosound) {
		var bRet = false;
		var timeout = -1;
		if (!nosound) {
			nosound = false;
		}

		nexacro._showTrayBalloonTipHandle(this._handle, titleicon, title, text, timeout, nosound);
	};


	_pTray.addItem = function (id, obj) {
		if (obj._type_name == "TrayPopupMenu") {
			if (this.items.indexOf(id) >= 0) {
				return -1;
			}
			else {
				return this.items.add_item(id, obj);
			}
		}
	};

	_pTray.insertItem = function (index, id, obj) {
		if (obj._type_name == "TrayPopupMenu") {
			if (this.items.indexOf(id) >= 0) {
				return -1;
			}
			else {
				return this.items.insert_item(index, id, obj);
			}
		}
	};

	_pTray.deleteItem = function (id) {
		return this.items.delete_item(id);
	};

	_pTray.findItem = function (id) {
		var find_pos = this.items.indexOf(id);

		if (find_pos == undefined) {
			find_pos = -1;
		}

		return find_pos;
	};

	_pTray.getItemCount = function () {
		var count = this.items.size();
		return count;
	};

	_pTray.destroy = function () {
		this._destroy();
	};

	_pTray.on_fire_ondblclick = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY) {
		if (this.ondblclick && this.ondblclick._has_handlers) {
			var evt = new nexacro.ClickEventInfo(this, "ondblclick", "lbutton", alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, -1, -1, -1, -1, this, this);
			return this.ondblclick._fireEvent(this, evt);
		}
		return false;
	};
	_pTray.on_fire_onlbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY) {
		if (this.onlbuttonup && this.onlbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onlbuttonup", "lbutton", alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, -1, -1, -1, -1, this, this);
			return this.onlbuttonup._fireEvent(this, evt);
		}
		return false;
	};

	_pTray.on_fire_onrbuttonup = function (button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY) {
		if (this.onrbuttonup && this.onrbuttonup._has_handlers) {
			var evt = new nexacro.MouseEventInfo(this, "onrbuttonup", "rbutton", alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, -1, -1, -1, -1, this, this);
			return this.onrbuttonup._fireEvent(this, evt);
		}
		return false;
	};

	delete _pTray;
}
;









if (!nexacro.TrayPopupMenu) {
	nexacro.TrayPopupMenu = function (id, parent) {
		this.id = id;
		this.parent = parent;

		this._popupmenu = null;
		this._handle = null;

		this.innerdataset = "";

		this._innerdataset = "";
		this._level = 0;
		this._rowindex = 0;

		this.captioncolumn = "";
		this.checkboxcolumn = "";
		this.enablecolumn = "";
		this.hotkeycolumn = "";
		this.iconcolumn = "";
		this.idcolumn = "";
		this.levelcolumn = "";
		this.userdatacolumn = "";

		this._event_list = 
			{
			"onmenuclick" : 1
		};
	};

	var _pTrayPopupMenu = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.TrayPopupMenu);
	nexacro.TrayPopupMenu.prototype = _pTrayPopupMenu;

	_pTrayPopupMenu._type_name = "TrayPopupMenu";
	_pTrayPopupMenu.set_visible = nexacro._emptyFn;

	_pTrayPopupMenu.on_created = function () {
		if (this._innerdataset == null && this.innerdataset != null) {
			var str = this.innerdataset;
			this._innerdataset = application._getDatasetObject(str);

			this.on_apply_innerdataset();
		}

		this._handle = nexacro._createTrayPopupMenuHandle(this.parent._handle);
		this._createPopupMenu(this._handle);
	};


	_pTrayPopupMenu._createPopupMenu = function (handle) {
		var ds = this._innerdataset;
		if (ds && this.levelcolumn && this.captioncolumn && this.idcolumn) {
			var len = ds.getRowCount();

			for (var rowindex = this._rowindex; rowindex < len; rowindex++) {
				var level = ds.getColumn(rowindex, this.levelcolumn);

				if (level == this._level) {
					var flags = "string";

					var caption = ds.getColumn(rowindex, this.captioncolumn);
					if (caption == "-") {
						flags = "separator";
					}

					var icon = ds.getColumn(rowindex, this.iconcolumn);
					if (icon) {
						flags = "bitmap";
					}

					var enable = ds.getColumn(rowindex, this.enablecolumn);
					if (enable) {
						if (!nexacro._toBoolean(enable)) {
							flags = "disabled";
						}
					}

					var id = ds.getColumn(rowindex, this.idcolumn);
					if (id) {
						id = rowindex;
					}

					var checkbox = ds.getColumn(rowindex, this.checkboxcolumn);
					if (checkbox) {
						if (nexacro._toBoolean(checkbox)) {
							flags = "checked";
						}
					}

					var userdata = ds.getColumn(rowindex, this.userdatacolumn);
					var icon = ds.getColumn(rowindex, this.iconcolumn);

					var nextlevel = ds.getColumn(rowindex + 1, this.levelcolumn);

					if (nextlevel - level == 1) {
						flags = "popup";

						var sub_handle = nexacro._createTrayPopupMenuHandle(this.parent._handle);

						this._level++;
						this._rowindex = rowindex + 1;
						this._createPopupMenu(sub_handle);

						nexacro._setTrayPopupMenuItemHandle(this.parent._handle, handle, flags, sub_handle, caption, icon);
						this._level--;

						nextlevel = ds.getColumn(this._rowindex + 1, this.levelcolumn);
						if (nextlevel - level < 0) {
							break;
						}
					}
					else if (nextlevel - level < 0) {
						nexacro._setTrayPopupMenuItemHandle(this.parent._handle, handle, flags, id, caption, icon);
						this._rowindex = rowindex;
						break;
					}
					else {
						nexacro._setTrayPopupMenuItemHandle(this.parent._handle, handle, flags, id, caption, icon);
					}
				}
			}
		}
	};

	_pTrayPopupMenu._updatePopupMenu = function (handle) {
		this._level = 0;
		this._rowindex = 0;

		nexacro._destroyTrayPopupMenuHandle(this.parent._handle, handle);

		this._handle = nexacro._createTrayPopupMenuHandle(this.parent._handle);
		this._createPopupMenu(this._handle);
	};

	_pTrayPopupMenu.trackPopup = function () {
		if (this._handle) {
			nexacro._displayTrayPopupMenuHandle(this.parent._handle, this._handle);
			application._current_tray_popup = this;
		}
	};




	_pTrayPopupMenu.set_innerdataset = function (str) {
		if (typeof str != "string") {
			this.setInnerDataset(str);
			return;
		}
		if (str != this.innerdataset) {
			if (!str) {
				this._innerdataset = null;
				this.innerdataset = "";
			}
			else {
				str = str.replace("@", "");
				this._innerdataset = application._getDatasetObject(str);
				this.innerdataset = str;
			}
			this.on_apply_innerdataset();
		}
		else if (this.innerdataset && !this._innerdataset) {
			this._setInnerDatasetStr(this.innerdataset);
			this.on_apply_innerdataset();
		}
	};

	_pTrayPopupMenu.on_apply_innerdataset = function () {
		var ds = this._innerdataset;
		if (ds) {
			var callback = this._callbackFromDataset;
			ds._setEventHandler("onrowposchanged", callback, this);
			ds._setEventHandler("oncolumnchanged", callback, this);
			ds._setEventHandler("onrowsetchanged", callback, this);

			if (this._handle) {
				this._updatePopupMenu(this._handle);
			}
		}
	};

	_pTrayPopupMenu._setInnerDatasetStr = function (str) {
		if (!str) {
			this._innerdataset = null;
			this.innerdataset = "";
		}
		else {
			str = str.replace("@", "");
			this._innerdataset = application._getDatasetObject(str);
			this.innerdataset = str;
		}
	};

	_pTrayPopupMenu.getInnerDataset = function () {
		return this._innerdataset;
	};

	_pTrayPopupMenu.setInnerDataset = function (obj) {
		if (!obj) {
			this._innerdataset = null;
			this.innerdataset = "";
			this.on_apply_innerdataset();
		}
		else if (obj instanceof nexacro.Dataset) {
			this._innerdataset = obj;
			this.innerdataset = obj.id;
			this.on_apply_innerdataset();
		}
	};

	_pTrayPopupMenu.set_captioncolumn = function (v) {
		if (v != this.captioncolumn) {
			this.captioncolumn = v;
			this.on_apply_captioncolumn();
		}
	};

	_pTrayPopupMenu.on_apply_captioncolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_checkboxcolumn = function (v) {
		if (v != this.checkboxcolumn) {
			this.checkboxcolumn = v;
			this.on_apply_checkboxcolumn();
		}
	};

	_pTrayPopupMenu.on_apply_checkboxcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_enablecolumn = function (v) {
		if (v != this.enablecolumn) {
			this.enablecolumn = v;
			this.on_apply_enablecolumn();
		}
	};

	_pTrayPopupMenu.on_apply_enablecolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_hotkeycolumn = function (v) {
		if (v != this.hotkeycolumn) {
			this.hotkeycolumn = v;
			this.on_apply_hotkeycolumn();
		}
	};

	_pTrayPopupMenu.on_apply_hotkeycolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_iconcolumn = function (v) {
		if (v != this.iconcolumn) {
			this.iconcolumn = v;
			this.on_apply_iconcolumn();
		}
	};

	_pTrayPopupMenu.on_apply_iconcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_idcolumn = function (v) {
		if (v != this.idcolumn) {
			this.idcolumn = v;
			this.on_apply_idcolumn();
		}
	};

	_pTrayPopupMenu.on_apply_idcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_levelcolumn = function (v) {
		if (v != this.levelcolumn) {
			this.levelcolumn = v;
			this.on_apply_levelcolumn();
		}
	};

	_pTrayPopupMenu.on_apply_levelcolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};

	_pTrayPopupMenu.set_userdatacolumn = function (v) {
		if (v != this.userdatacolumn) {
			this.userdatacolumn = v;
			this.on_apply_userdatacolumn();
		}
	};

	_pTrayPopupMenu.on_apply_userdatacolumn = function () {
		var ds = this._innerdataset;
		if (ds) {
			this._updatePopupMenu(this._handle);
		}
	};


	_pTrayPopupMenu.on_fire_onmenuclick = function (id) {
		var ds = this._innerdataset;
		var index = id;
		var itemid = ds.getColumn(index, this.idcolumn);
		var itemuserdata = ds.getColumn(index, this.userdatacolumn);
		var level = ds.getColumn(index, this.levelcolumn);

		if (this.onmenuclick && this.onmenuclick._has_handlers) {
			var evt = new nexacro.MenuClickEventInfo(this, "onmenuclick", itemid, itemuserdata, index, level);
			this.onmenuclick._fireEvent(this, evt);
		}
	};
	delete _pTrayPopupMenu;
}
;

