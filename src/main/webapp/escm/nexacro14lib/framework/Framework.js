//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!this.nexacro) {
	this.nexacro = {
	};
}

if (!nexacro.Init_systembase) {
	nexacro.Init_systembase = true;

	nexacro.Browser = "";
	nexacro.BrowserVersion = -1;
	nexacro.BrowserType = "";
	nexacro.Browser_RoundBorder = 0;
	nexacro.Browser_BorderImage = 0;
	nexacro.Browser_Gradation = 0;
	nexacro.Browser_RoundShadow = false;
	nexacro.Browser_ColorAlpha = false;

	nexacro.OS = "";
	nexacro.OSVersion = "";
	nexacro.DEVICE = "";
	nexacro.SystemType = "";
	nexacro.BrowserLang = "";

	if (nexacro.__getOSType) {
		nexacro.Browser = "Runtime";
		nexacro.BrowserVersion = 14;
		nexacro.BrowserType = "Runtime";
	}
	else {
		if (navigator.appVersion.indexOf('MSIE') > -1) {
			nexacro.Browser = "IE";
			if (document.documentMode) {
				nexacro.BrowserVersion = document.documentMode;
				nexacro.BrowserType = nexacro.Browser + nexacro.BrowserVersion;
			}
			else {
				var compatMode = document.compatMode;
				if (compatMode && compatMode.toLowerCase() == "backcompat") {
					if (/MSIE\s+7(.+)[;]/.test(navigator.appVersion)) {
						nexacro.BrowserVersion = 7;
						nexacro.BrowserType = "IE7";
					}
					else if (/MSIE\s+6(.+)[;]/.test(navigator.appVersion)) {
						nexacro.BrowserVersion = 6;
						nexacro.BrowserType = "IE6";
					}
					else if (/MSIE\s+5(.+)[;]/.test(navigator.appVersion)) {
						nexacro.BrowserVersion = 5;
						nexacro.BrowserType = "IE6";
					}
				}
				compatMode = null;
			}
		}
		else if (navigator.userAgent.match(/Trident\/.*rv\:(.+?)[\);]/)) {
			nexacro.Browser = "IE";
			if (document.documentMode) {
				nexacro.BrowserVersion = document.documentMode;
				nexacro.BrowserType = nexacro.Browser + nexacro.BrowserVersion;
			}
			else {
				nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			}
		}
		else if (navigator.userAgent.match(/Edge/)) {
			nexacro.Browser = "Edge";
			nexacro.BrowserType = "Edge";
			var versionRegExp = /Edge\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/Edg/)) {
			nexacro.Browser = "Edge";
			nexacro.BrowserType = "Webkit";
			var versionRegExp = /Edg\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (!!window.opera || navigator.userAgent.match(/Opera/)) {
			nexacro.Browser = "Opera";
			nexacro.BrowserType = "Opera";
			var versionRegExp = /Version\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/Chrome/)) {
			nexacro.Browser = "Chrome";
			nexacro.BrowserType = "WebKit";
			var versionRegExp = /Chrome\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/CriOS/)) {
			nexacro.Browser = "Chrome";
			nexacro.BrowserType = "WebKit";
			var versionRegExp = /CriOS\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/Apple.*Mobile/) || (navigator.platform == "MacIntel" && navigator.maxTouchPoints > 1)) {
			nexacro.Browser = "MobileSafari";
			nexacro.BrowserType = "WebKit";
			var versionRegExp = /Version\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/AppleWebKit\//)) {
			nexacro.Browser = "Safari";
			nexacro.BrowserType = "WebKit";
			var versionRegExp = /Version\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/WebKit\//)) {
			nexacro.Browser = "WebKit";
			nexacro.BrowserType = "WebKit";
			var versionRegExp = /WebKit\/([\.\d]+)/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			versionRegExp = null;
		}
		else if (navigator.userAgent.match(/Gecko\//)) {
			nexacro.Browser = "Gecko";
			var versionRegExp = /rv\:(.+?)[\);]/;
			versionRegExp.test(navigator.userAgent);
			nexacro.BrowserVersion = parseInt(RegExp.$1) | 0;
			if (nexacro.BrowserVersion < 2) {
				nexacro.BrowserType = "GeckoOld";
			}
			else if (nexacro.BrowserVersion >= 10) {
				nexacro.BrowserType = "GeckoNew";
			}
			else {
				nexacro.BrowserType = "Gecko";
			}
			versionRegExp = null;

			var eventNames = ["mousedown", "mouseup", "mousemove"];
			GeckoEventListenerCallback = function (e) {
				window.event = e;
			};
			for (var i = 0, n = eventNames.length; i < n; i++) {
				window.addEventListener(eventNames[i], GeckoEventListenerCallback, false);
			}
		}
	}


	nexacro.Version = "14";
	nexacro._framework_libpath = "./nexacro14lib";

	nexacro.ImportTypes = 
		{
		EXCEL : 0x0100, 
		EXCEL97 : 0x0110, 
		EXCEL2007 : 0x0120, 
		HANCELL : 0x0420, 
		HANCELL2014 : 0x0410, 
		CSV : 0x0500
	};

	nexacro.ExportTypes = 
		{
		EXCEL : 0x0100, 
		EXCEL97 : 0x0110, 
		EXCEL2007 : 0x0120, 
		HANCELL2010 : 0x0400, 
		HANCELL2014 : 0x0410, 
		CSV : 0x0500
	};

	nexacro.ExportItemTypes = 
		{
		GRID : 0x0100
	};

	nexacro.DevicePermissionStatus = 
		{
		DENIED : 0, 
		GRANTED : 1
	};

	nexacro.DevicePermissionType = 
		{
		CALENDAR : "calendar", 
		CAMERA : "camera", 
		CONTACTS : "contacts", 
		LOCATION : "location", 
		MICROPHONE : "microphone", 
		PHONE : "phone", 
		SMS : "sms", 
		STORAGE : "storage", 
		PHOTO : "photo", 
		REMINDERS : "reminders"
			
	};

	nexacro.XPushAction = 
		{
		AUTH : 0, 
		BYEC : 1, 
		ADDF : 2, 
		DELF : 3, 
		REQD : 4, 
		RECT : 5, 
		RGST : 6, 
		UNRG : 7, 
		ADUI : 8, 
		UNUI : 9, 
		MSGC : 10
	};

	nexacro.DragDataFormats = 
		{
		FILEDROP : "filedrop", 
		TEXT : "text", 
		UNICODETEXT : "unicodetext", 
		CSV : "csv"
	};

	nexacro._dontenum_descriptor = {
		"writable" : true, 
		"enumerable" : false
	};
	nexacro._dontwritableenum_descriptor = {
		"writable" : false, 
		"enumerable" : false
	};

	nexacro._zindex_popup = 1e6 + 1;
	nexacro._zindex_firstmodal = 1e6 + 2;
	nexacro._zindex_waitcursor = 2e6;
	nexacro._zindex_hide = -2e6;

	nexacro._zoom_factor = 0;

	nexacro._allow_default_pinchzoom = false;
	nexacro._minimum_scale = undefined;
	nexacro._maximum_scale = undefined;

	nexacro._is_attach_childframe = false;
	nexacro._skipDragEventAfterMsgBox = false;
	nexacro._current_popups = [];
	nexacro._parentframe = [];
	nexacro._args = {
	};

	nexacro.Communication_Error = 
		{
		INVALIDURL : 10700, 
		INVALIDIMAGE : 10701, 
		TRANSLATEURL : 10702, 
		LOADDETAIL : 10703, 
		CANCELBYUSER : 10704, 
		STOPTRANSACTIONBYESC : 10705, 
		DUPLICATIONSVCID : 10706, 
		CLIENTTIMEOUT : 11408, 
		INVALIDFORMAT : 10707, 
		NETWORKERROR : 10708
	};

	if (nexacro.__proto__) {
		nexacro._createPrototype = function (super_fn, constructor_fn) {
			var ptype = new Object();
			if ((typeof super_fn) == "function") {
				ptype.__proto__ = super_fn.prototype;
				if (constructor_fn) {
					ptype.constructor = constructor_fn;
				}
			}
			return ptype;
		};
	}
	else {
		nexacro._createPrototype = function (super_fn, constructor_fn) {
			if ((typeof super_fn) == "function") {
				function F () {
				}
				;
				F.prototype = super_fn.prototype;
				var ptype = new F();
				if (constructor_fn) {
					ptype.constructor = constructor_fn;
				}
				return ptype;
			}
			return new Object();
		};
	}

	nexacro.FuncBinder = function (pthis, fn) {
		this.pthis = pthis;
		this.fn = fn;
	};
	var _pFuncBinder = nexacro._createPrototype(Object, nexacro.FuncBinder);
	nexacro.FuncBinder.prototype = _pFuncBinder;

	_pFuncBinder.call = function () {
		var fn = this.fn;
		if (fn) {
			return fn.apply(this.pthis, arguments);
		}
	};
	delete _pFuncBinder;

	nexacro.SetterBinder = function (pthis, prop, fn) {
		this.pthis = pthis;
		this.prop = prop;
		this.fn = fn;
	};
	var _pSetterBinder = nexacro._createPrototype(Object, nexacro.SetterBinder);
	nexacro.SetterBinder.prototype = _pSetterBinder;

	_pSetterBinder.set = function (val) {
		this.fn.call(this.pthis, val);
		return val;
	};
	_pSetterBinder.addset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] + val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.subset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] - val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.mulset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] * val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.divset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] / val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.modset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] % val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.andset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] & val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.orset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] | val;
		this.fn.call(pthis, retval);
		return retval;
	};

	_pSetterBinder.xorset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] ^ val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.lshset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] << val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.rshset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] >> val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pSetterBinder.zrshset = function (val) {
		var pthis = this.pthis;
		var retval = pthis[this.prop] >>> val;
		this.fn.call(pthis, retval);
		return retval;
	};

	_pSetterBinder.preInc = function () {
		var val = this.pthis[this.prop];
		this.fn.call(this.pthis, ++val);
		return val;
	};
	_pSetterBinder.preDec = function () {
		var val = this.pthis[this.prop];
		this.fn.call(this.pthis, --val);
		return val;
	};
	_pSetterBinder.postInc = function () {
		var val = this.pthis[this.prop];
		this.fn.call(this.pthis, +val + 1);
		return val;
	};
	_pSetterBinder.postDec = function () {
		var val = this.pthis[this.prop];
		this.fn.call(this.pthis, +val - 1);
		return val;
	};
	delete _pSetterBinder;

	nexacro.IntSetterBinder = function (pthis, prop, fn) {
		this.pthis = pthis;
		this.prop = prop;
		this.fn = fn;
	};
	var _pIntSetterBinder = nexacro._createPrototype(Object, nexacro.IntSetterBinder);
	nexacro.IntSetterBinder.prototype = _pIntSetterBinder;

	_pIntSetterBinder.set = function (val) {
		this.fn.call(this.pthis, val);
		return val;
	};
	_pIntSetterBinder.addset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) + (val | 0);
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.subset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) - val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.mulset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) * val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.divset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) / val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.modset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) % val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.andset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) & val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.orset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) | val;
		this.fn.call(pthis, retval);
		return retval;
	};

	_pIntSetterBinder.xorset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) ^ val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.lshset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) << val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.rshset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) >> val;
		this.fn.call(pthis, retval);
		return retval;
	};
	_pIntSetterBinder.zrshset = function (val) {
		var pthis = this.pthis;
		var retval = (parseInt(pthis[this.prop]) | 0) >>> val;
		this.fn.call(pthis, retval);
		return retval;
	};

	_pIntSetterBinder.preInc = function () {
		var val = parseInt(this.pthis[this.prop]) | 0;
		this.fn.call(this.pthis, ++val);
		return val;
	};
	_pIntSetterBinder.preDec = function () {
		var val = this.pthis[this.prop];
		this.fn.call(this.pthis, --val);
		return val;
	};
	_pIntSetterBinder.postInc = function () {
		var val = parseInt(this.pthis[this.prop]) | 0;
		this.fn.call(this.pthis, val + 1);
		return val;
	};
	_pIntSetterBinder.postDec = function () {
		var val = parseInt(this.pthis[this.prop]) | 0;
		this.fn.call(this.pthis, val - 1);
		return val;
	};
	delete _pIntSetterBinder;

	nexacro.PropBinder = function (pthis, prop) {
		this.pthis = pthis;
		this.prop = prop;
	};
	var _pPropBinder = nexacro._createPrototype(Object, nexacro.PropBinder);
	nexacro.PropBinder.prototype = _pPropBinder;

	_pPropBinder.set = function (val) {
		return (this.pthis[this.prop] = val);
	};
	_pPropBinder.addset = function (val) {
		return (this.pthis[this.prop] += val);
	};
	_pPropBinder.subset = function (val) {
		return (this.pthis[this.prop] -= val);
	};
	_pPropBinder.mulset = function (val) {
		return (this.pthis[this.prop] *= val);
	};
	_pPropBinder.divset = function (val) {
		return (this.pthis[this.prop] /= val);
	};
	_pPropBinder.modset = function (val) {
		return (this.pthis[this.prop] %= val);
	};
	_pPropBinder.andset = function (val) {
		return (this.pthis[this.prop] &= val);
	};
	_pPropBinder.orset = function (val) {
		return (this.pthis[this.prop] |= val);
	};
	_pPropBinder.xorset = function (val) {
		return (this.pthis[this.prop] ^= val);
	};
	_pPropBinder.lshset = function (val) {
		return (this.pthis[this.prop] <<= val);
	};
	_pPropBinder.rshset = function (val) {
		return (this.pthis[this.prop] >>= val);
	};
	_pPropBinder.zrshset = function (val) {
		return (this.pthis[this.prop] >= val);
	};

	_pPropBinder.preInc = function () {
		return ++this.pthis[this.prop];
	};
	_pPropBinder.preDec = function () {
		return --this.pthis[prop];
	};
	_pPropBinder.postInc = function () {
		return this.pthis[this.prop]++;
	};
	_pPropBinder.postDec = function () {
		return this.pthis[this.prop]--;
	};
	delete _pPropBinder;

	nexacro.NumPropBinder = function (pthis, prop) {
		this.pthis = pthis;
		this.prop = prop;
	};
	var _pNumPropBinder = nexacro._createPrototype(Object, nexacro.NumPropBinder);
	nexacro.NumPropBinder.prototype = _pNumPropBinder;

	_pNumPropBinder.set = function (val) {
		return (this.pthis[this.prop] = val);
	};
	_pNumPropBinder.addset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) + (val | 0));
	};
	_pNumPropBinder.subset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) - val);
	};
	_pNumPropBinder.mulset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) * val);
	};
	_pNumPropBinder.divset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) / val);
	};
	_pNumPropBinder.modset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) % val);
	};
	_pNumPropBinder.andset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) & val);
	};
	_pNumPropBinder.orset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) | val);
	};
	_pNumPropBinder.xorset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) ^ val);
	};
	_pNumPropBinder.lshset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) << val);
	};
	_pNumPropBinder.rshset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) >> val);
	};
	_pNumPropBinder.zrshset = function (val) {
		return (this.pthis[this.prop] = parseFloat(this.pthis[this.prop]) >>> val);
	};

	_pNumPropBinder.preInc = function () {
		var val = this.pthis[this.prop];
		this.pthis[this.prop] = ++val;
		return val;
	};
	_pNumPropBinder.preDec = function () {
		var val = this.pthis[this.prop];
		this.pthis[this.prop] = --val;
		return val;
	};
	_pNumPropBinder.postInc = function () {
		var val = this.pthis[this.prop];
		this.pthis[this.prop] = val + 1;
		return val;
	};
	_pNumPropBinder.postDec = function () {
		var val = this.pthis[this.prop];
		this.pthis[this.prop] = val - 1;
		return val;
	};
	delete _pNumPropBinder;


	Object.prototype.getSetter = function (name, fnname) {
		return new nexacro.PropBinder(this, name);
	};

	if (Object.defineProperty) {
		try {
			Object.defineProperty(Object.prototype, "getSetter", {
				"value" : Object.prototype.getSetter, 
				"writable" : true, 
				"enumerable" : false
			});
		}
		catch (e) {
			;
		}
	}
	Object.prototype.getNumSetter = function (name, fnname) {
		return new nexacro.NumPropBinder(this, name);
	};

	if (Object.defineProperty) {
		try {
			Object.defineProperty(Object.prototype, "getNumSetter", {
				"value" : Object.prototype.getNumSetter, 
				"writable" : true, 
				"enumerable" : false
			});
		}
		catch (e) {
			;
		}
	}


	Array.prototype.indexOf = function (item) {
		var len = this.length;
		for (var i = 0; i < len; i++) {
			if (this[i] == item) {
				return i;
			}
		}
		return -1;
	};

	nexacro._indexOf = function (arr, item) {
		if (arr == null) {
			return -1;
		}
		var len = arr.length;
		for (var i = 0; i < len; i++) {
			if (arr[i] == item) {
				return i;
			}
		}
		return -1;
	};

	if (!String.prototype.trim) {
		String.prototype.trim = function (v) {
			if (v) {
				var len = this.length;
				var s = 0;
				var e = len - 1;
				while (++s < len && this.charAt(s) == v) {
				}
				while (--e > s && this.charAt(e) == v) {
				}
				return this.substring(s, e + 1);
			}
			else {
				var len = this.length;
				var s = -1;
				var e = len;
				var c;
				while (++s < len && ((c = this.charCodeAt(s)) == 32 || (c >= 9 && c <= 13) || 
					c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
					c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288)) {
				}
				while (--e > s && ((c = this.charCodeAt(e)) == 32 || (c >= 9 && c <= 13) || 
					c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
					c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288)) {
				}
				return this.substring(s, e + 1);
			}
		};
	}

	nexacro.replaceAll = function (str, orgStr, repStr) {
		return str.split(orgStr).join(repStr);
	};

	if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
		nexacro._replaceAll = function (str, orgStr, repStr) {
			return str.split(orgStr).join(repStr);
		};
	}
	else {
		nexacro._replaceAll = function (str, orgStr, repStr) {
			return str.replace(new RegExp(orgStr, "g"), repStr);
		};
	}

	String.prototype.padLeft = function (n, pad) {
		var t = [];
		if (n > this.length) {
			for (var i = 0, cnt = n - this.length; i < cnt; i++) {
				t.push(pad);
			}
		}
		t.push(this);
		return t.join('');
	};
	String.prototype.padRight = function (n, pad) {
		var t = [];
		t.push(this);
		if (n > this.length) {
			for (var i = 0, cnt = n - this.length; i < cnt; i++) {
				t.push(pad);
			}
		}
		return t.join('');
	};

	nexacro.isNumeric = function (v) {
		if (v == null || v === "") {
			return false;
		}
		if (typeof (v) == "number") {
			if (v >= 48 && v <= 57) {
				return true;
			}
			return false;
		}
		if (typeof (v) == "string") {
			var len = v.length;
			for (var i = 0; i < len; i++) {
				var c = v.charCodeAt(i);
				if (c >= 48 && c <= 57) {
					continue;
				}
				return false;
			}
			return true;
		}
		if (typeof (v) == "object") {
			if (v instanceof String) {
				var value = v.valueOf();
				if (typeof (value) != "object") {
					return nexacro.isNumeric(value);
				}
			}
		}
		return false;
	};

	nexacro.isAlpha = function (v) {
		if (v == null || v === "") {
			return false;
		}
		if (typeof (v) == "number") {
			if ((v >= 65 && v <= 90) || (v >= 97 && v <= 122)) {
				return true;
			}
			return false;
		}
		if (typeof (v) == "string" || typeof v.valueOf() == "string") {
			var len = v.length;
			for (var i = 0; i < len; i++) {
				var c = v.charCodeAt(i);
				if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) {
					continue;
				}
				return false;
			}
			return true;
		}
		return false;
	};

	nexacro.isAlphaNumeric = function (v) {
		if (v == null || v === "") {
			return false;
		}
		if (typeof (v) == "number") {
			if ((v >= 48 && v <= 57) || (v >= 65 && v <= 90) || (v >= 97 && v <= 122) || (v == 95)) {
				return true;
			}
			return false;
		}
		if (typeof (v) == "string" || typeof v.valueOf() == "string") {
			var len = v.length;
			for (var i = 0; i < len; i++) {
				var c = v.charCodeAt(i);
				if ((c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122) || (c == 95)) {
					continue;
				}
				return false;
			}
			return true;
		}
		return false;
	};

	nexacro.isSpace = function (v) {
		if (v == null) {
			return false;
		}
		if (typeof (v) == "number") {
			if (v == 32 || (v >= 9 && v <= 13) || 
				v == 160 || v == 5760 || v == 6158 || (v >= 8192 && v <= 8202) || 
				v == 8232 || v == 8233 || v == 8239 || v == 8287 || v == 12288) {
				return true;
			}
		}

		if (typeof (v) == "string" || typeof v.valueOf() == "string") {
			var len = v.length;
			if (len > 0) {
				for (var i = 0; i < len; i++) {
					var c = v.charCodeAt(i);
					if (c == 32 || (c >= 9 && c <= 13) || 
						c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
						c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288) {
						continue;
					}
					return false;
				}
				return true;
			}
		}
		return false;
	};

	nexacro.isLower = function (v) {
		if (v == null) {
			return false;
		}
		if (typeof (v) == "number") {
			if (v >= 97 && v <= 122) {
				return true;
			}
		}

		if (typeof (v) == "string" || typeof v.valueOf() == "string") {
			var len = v.length;
			if (len > 0) {
				for (var i = 0; i < len; i++) {
					var c = v.charCodeAt(i);
					if (c >= 97 && c <= 122) {
						continue;
					}
					return false;
				}
				return true;
			}
		}
		return false;
	};

	nexacro.isUpper = function (v) {
		if (v == null) {
			return false;
		}
		if (typeof (v) == "number") {
			if (v >= 65 && v <= 90) {
				return true;
			}
		}
		if (typeof (v) == "string" || typeof v.valueOf() == "string") {
			var len = v.length;
			if (len > 0) {
				for (var i = 0; i < len; i++) {
					var c = v.charCodeAt(i);
					if (c >= 65 && c <= 90) {
						continue;
					}
					return false;
				}
				return true;
			}
		}
		return false;
	};

	if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
		nexacro.wrapQuote = function (str) {
			if (arguments.length == 0) {
				return "";
			}
			if (str == null) {
				return "\"" + str + "\"";
			}

			str = str + "";
			str = str.split(/\\/g).join("\\\\");
			str = str.split(/"/g).join("\\\"");

			return "\"" + str + "\"";
		};

		nexacro.stripQuote = function (v) {
			if (typeof (v) != "string") {
				return v + "";
			}

			if (v.length >= 2 && ((v.substr(0, 1) == "'" && v.substr(v.length - 1, 1) == "'") || (v.substr(0, 1) == '"' && v.substr(v.length - 1, 1) == '"'))) {
				v = v.substring(1, v.length - 1);
			}

			if (v.indexOf("\\") >= 0) {
				v = v.split(/\\\"/g).join("\"");
				v = v.split(/\\\\/g).join("\\");
				return v;
			}

			return v;
		};
	}
	else {
		(function () {
			var re_quot = /"/g, re_esc = /\\/g;
			var un_quot = /\\\"/g, un_esc = /\\\\/g;

			nexacro.wrapQuote = function (str) {
				if (arguments.length == 0) {
					return "";
				}
				if (str == null) {
					return "\"" + str + "\"";
				}

				str = str + "";
				str = str.replace(re_esc, "\\\\").replace(re_quot, "\\\"");

				return "\"" + str + "\"";
			};

			nexacro.stripQuote = function (v) {
				if (typeof (v) != "string") {
					return v + "";
				}

				if (v.length >= 2 && ((v.substr(0, 1) == "'" && v.substr(v.length - 1, 1) == "'") || (v.substr(0, 1) == '"' && v.substr(v.length - 1, 1) == '"'))) {
					v = v.substring(1, v.length - 1);
				}

				if (v.indexOf("\\") >= 0) {
					v = v.replace(un_quot, "\"").replace(un_esc, "\\");
					return v;
				}

				return v;
			};
		})();
	}

	nexacro.trimLeft = function (str, v) {
		if (v) {
			var len = str.length;
			var s = -1;
			while (++s < len && str.charAt(s) !== v) {
			}
			return str.substring(s + 1);
		}
		else {
			var len = str.length;
			var s = -1;
			var c;
			while (++s < len && ((c = str.charCodeAt(s)) == 32 || (c >= 9 && c <= 13) || 
				c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
				c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288)) {
			}
			return str.substring(s);
		}
	};

	nexacro.trimRight = function (str, v) {
		if (v) {
			var len = str.length;
			var e = len;
			while (--e >= 0 && str.charAt(e) !== v) {
			}
			return str.substring(0, e);
		}
		else {
			var len = str.length;
			var e = len;
			var c;
			while (--e >= 0 && ((c = str.charCodeAt(e)) == 32 || (c >= 9 && c <= 13) || 
				c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
				c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288)) {
			}
			return str.substring(0, e + 1);
		}
	};

	nexacro.trim = function (str, v) {
		if (v) {
			var len = str.length;
			var s = 0;
			var e = len - 1;
			while (s < len && str.charAt(s) == v && ++s) {
			}
			while (e > s && str.charAt(e) == v && --e) {
			}
			return str.substring(s, e + 1);
		}
		else {
			var len = str.length;
			var s = -1;
			var e = len;
			var c;
			while (++s < len && ((c = str.charCodeAt(s)) == 32 || (c >= 9 && c <= 13) || 
				c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
				c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288)) {
			}
			while (--e > s && ((c = str.charCodeAt(e)) == 32 || (c >= 9 && c <= 13) || 
				c == 160 || c == 5760 || c == 6158 || (c >= 8192 && c <= 8202) || 
				c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288)) {
			}
			return str.substring(s, e + 1);
		}
	};

	nexacro.toNumber = function (v, NaNval, pinfval, ninfval) {
		var n = (+v);

		if (n != n) {
			return (NaNval !== undefined) ? NaNval : n;
		}
		else if (n == Infinity) {
			return (pinfval !== undefined) ? pinfval : n;
		}
		else if (n == -Infinity) {
			return (ninfval !== undefined) ? ninfval : n;
		}
		return n;
	};

	if (!Date.prototype.addMonth) {
		Date.prototype.addMonth = function (v) {
			return this.setMonth(this.getMonth() + v);
		};

		Date.prototype.addDate = function (v) {
			return this.setDate(this.getDate() + v);
		};

		Date.prototype.addHours = function (v) {
			return this.setHours(this.getHours() + v);
		};

		Date.prototype.addMilliseconds = function (v) {
			return this.setMilliseconds(this.getMilliseconds() + v);
		};

		Date.prototype.addMinutes = function (v) {
			return this.setMinutes(this.getMinutes() + v);
		};

		Date.prototype.addSeconds = function (v) {
			return this.setSeconds(this.getSeconds() + v);
		};

		Date.prototype.addYear = function (v) {
			return this.setFullYear(this.getFullYear() + v);
		};

		Date.prototype.getYear = function () {
			var y = this.getFullYear();
			if (1900 <= y && y <= 1999) {
				return (y - 1900);
			}
			return y;
		};
	}

	nexacro._pow_factors = [1e-30, 1e-29, 1e-28, 1e-27, 1e-26, 1e-25, 1e-24, 1e-23, 1e-22, 1e-21, 1e-20, 1e-19, 1e-18, 1e-17, 1e-16, 1e-15, 1e-14, 1e-13, 1e-12, 1e-11, 1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1, 1e+1, 1e+2, 1e+3, 1e+4, 1e+5, 1e+6, 1e+7, 1e+8, 1e+9, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22, 1e+23, 1e+24, 1e+25, 1e+26, 1e+27, 1e+28, 1e+29, 1e+30];
	if (!nexacro.floor) {
		nexacro.floor = function (v, digit) {
			if (digit == undefined) {
				return Math.floor(v);
			}
			var p = nexacro._pow_factors[digit + 30];
			return Math.floor(v * p) / p;
		};
	}
	;

	if (!nexacro.ceil) {
		nexacro.ceil = function (v, digit) {
			var str_v = v + "";
			var idx_dot = str_v.indexOf(".");
			var str_len = str_v.length;
			var decimal_len = str_len - idx_dot - 1;
			if (digit == undefined) {
				return Math.ceil(v);
			}
			else if (digit && digit >= decimal_len) {
				return v;
			}

			var p = nexacro._pow_factors[digit + 30];
			return Math.ceil(v * p) / p;
		};
	}
	;

	if (!nexacro.round) {
		nexacro.round = function (v, digit) {
			if (digit == undefined) {
				return Math.round(v);
			}
			var p = nexacro._pow_factors[digit + 30];
			return Math.round(v * p) / p;
		};
	}
	;

	if (!nexacro.parseDate) {
		if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			nexacro.parseDate = function (date) {
				if (date && date.length > 0) {
					if (date.length > 10) {
						return nexacro._parseDatetime(date);
					}
					else {
						date = date.split("-").join("/");
						return Date.parse(date);
					}
				}
				else {
					return undefined;
				}
			};
		}
		else {
			(function () {
				var re_minus = /-/g;

				nexacro.parseDate = function (date) {
					if (date && date.length > 0) {
						if (date.length > 10) {
							return nexacro._parseDatetime(date);
						}
						else {
							date = date.replace(re_minus, "/");
							return Date.parse(date);
						}
					}
					else {
						return undefined;
					}
				};
			})();
		}

		nexacro._parseDatetime = function (datetime) {
			if (datetime.length > 0) {
				var parsedStr = "";
				if (datetime.length > 10 && datetime[10] === "T") {
					datetime = datetime.replace("T", " ");
				}
				parsedStr = datetime.split(" ");
				if (parsedStr.length > 2) {
					return Date.parse(datetime);
				}
				var date = parsedStr[0];
				var time = parsedStr[1];
				var newdatetime = nexacro.parseDate(date);
				newdatetime += nexacro._parseTime(time);
				return newdatetime;
			}
			else {
				return undefined;
			}
		};
		nexacro._parseTime = function (time) {
			if (time.length > 0) {
				var parsedStr = "";
				parsedStr = time.split(":");
				var hour = parseInt(parsedStr[0]) | 0;
				var min = parseInt(parsedStr[1]) | 0;
				var sec = parsedStr[2];
				parsedStr = sec.split(".");
				sec = parseInt(parsedStr[0]) | 0;
				var strMillsec = "";
				if (parsedStr[1] != undefined) {
					strMillsec = parsedStr[1];
				}
				var len = strMillsec.length;
				for (var i = len; i < 3; i++) {
					strMillsec += "0";
				}
				var millsec = parseInt(strMillsec) | 0;
				var newtime = (hour * 3600 * 1000) + (min * 60 * 1000) + (sec * 1000) + millsec;
				return newtime;
			}
			else {
				return undefined;
			}
		};
	}

	nexacro._nexacroBind = function (_this, fn) {
		var retfn = function () {
			return fn.apply(_this, arguments);
		};
		retfn._bindthis = _this;
		return retfn;
	};

	if (nexacro.Browser == "Runtime") {
		nexacro._executeEvalStr = function (evalstr, url) {
			try {
				if (url) {
					evalstr += ("\r\n//@ sourceURL=" + encodeURI(url));
				}
				return eval(evalstr);
			}
			catch (e) {
				if (trace) {
					trace(nexacro._getEvalExceptionMessage(e, url));
				}
				return e;
			}
			finally {
				evalstr = null;
			}
		};
		nexacro._executeScript = function (script, url) {
			try {
				return nexacro.__executeScript(url, script);
			}
			catch (e) {
				if (trace) {
					trace(nexacro._getEvalExceptionMessage(e, url));
				}
				return e;
			}
			finally {
				script = null;
			}
		};
	}
	else if (nexacro.Browser == "Gecko") {
		nexacro._executeEvalStr = function (evalstr, url) {
			var err = null;
			try {
				if (url) {
					evalstr += ("\r\n//# sourceURL=" + encodeURI(url));
				}

				err = new Error('at eval script(' + url + ')');
				return eval(evalstr);
			}
			catch (e) {
				if (trace) {
					trace(nexacro._getEvalExceptionMessage(e, url, err.lineNumber));
				}
				return e;
			}
			finally {
				evalstr = null;
			}
		};
		nexacro._executeScript = nexacro._executeEvalStr;
	}
	else {
		nexacro._executeEvalStr = function (evalstr, url) {
			try {
				if (url) {
					evalstr += ("\r\n//# sourceURL=" + encodeURI(url));
				}

				return eval(evalstr);
			}
			catch (e) {
				if (trace) {
					trace(nexacro._getEvalExceptionMessage(e, url));
				}
				return e;
			}
			finally {
				evalstr = null;
			}
		};
		nexacro._executeScript = nexacro._executeEvalStr;
	}

	nexacro._createInlineFunc = function (inline_expr, arglist) {
		var _fn_ = "_fn_ = function(";
		_fn_ += arglist.join(',');
		_fn_ += ") { ";
		_fn_ += "try { return " + inline_expr + "; } ";
		_fn_ += "catch(e) { return undefined; } };";
		return _fn_ = nexacro._executeEvalStr(_fn_);
	};

	nexacro._emptyFn = function () {
	};

	nexacro._emptyFnExistReturn = function () {
		return null;
	};

	nexacro._echoFn = function (v) {
		return v;
	};


	nexacro._isNumber = function (v) {
		return (typeof (v) == "number");
	};

	nexacro._isInt = function (v) {
		if (typeof (v) == "number") {
			return (v == (v | 0));
		}
		return false;
	};

	nexacro._isString = function (v) {
		return typeof (v) == "string";
	};

	nexacro._isUndefined = function (v) {
		return (v === undefined);
	};

	nexacro._isNull = function (v) {
		return (v === undefined || v === null);
	};

	nexacro._isArray = function (v) {
		return (v instanceof Array);
	};

	nexacro._isFunction = function (v) {
		return (typeof (v) == "function");
	};

	nexacro._isObject = function (v) {
		return (typeof (v) == "object");
	};

	nexacro._isDecimal = function (v) {
		return (v instanceof nexacro.Decimal);
	};

	nexacro._nvl = function (v, def) {
		return (v == null || v == "") ? def : v;
	};
	nexacro._parseInt = function (v, def) {
		if (v == null) {
			return def;
		}
		var ret = parseInt(v);
		return (isFinite(ret)) ? ret : def;
	};

	nexacro._toString = function (v) {
		if (v != null && typeof v == "object" && v.toString) {
			return v.toString();
		}

		return (v == null) ? v : v + "";
	};

	nexacro._toInt = function (v) {
		var num = parseInt(v) | 0;

		return (isFinite(num)) ? num : undefined;
	};

	nexacro._toBoolean = function (v) {
		if (typeof v == "number") {
			return (v == v) && v != 0;
		}
		if (typeof v == 'string') {
			if (v == "false" || v == "NaN") {
				return false;
			}
			return (+v) != 0;
		}
		else if (v instanceof nexacro.Decimal) {
			v = (+v);
			return (v == v) && v != 0;
		}
		else {
			return !!v;
		}
	};

	nexacro._convertPtToPx = function (ptsize) {
		ptsize = parseInt(ptsize) | 0;
		if (!isNaN(ptsize)) {
			return (ptsize * (0.35146 / 25.4) * 96);
		}
		return null;
	};

	nexacro._isAbsolutePath = function (url) {
		if (!url) {
			return false;
		}

		var ch = url.charAt(0);
		if (ch == '/' || ch == '\\') {
			return true;
		}

		if (url.indexOf("::") >= 0) {
			return false;
		}

		if (url.substring(0, 8).toLowerCase() != "theme://" && url.indexOf(":\/") >= 0) {
			return true;
		}

		if (url.indexOf("://") < 0) {
			if (url.indexOf(":/") >= 0) {
				return true;
			}
			if (url.indexOf(":\\") >= 0) {
				return true;
			}
		}

		if (url.substring(0, 10).toLowerCase() == "data:image") {
			return true;
		}

		return false;
	};

	if (nexacro.Browser == "Runtime" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
		nexacro._getBaseUrl = function (url) {
			if (!url) {
				return url;
			}
			url = url.split("\\").join("/");
			if (url.charAt(url.length - 1) != '/') {
				url = url.substring(0, url.lastIndexOf("/") + 1);
			}

			return url;
		};
	}
	else {
		(function () {
			var re_backslach = /\\/g;

			nexacro._getBaseUrl = function (url) {
				url = url.replace(re_backslach, "/");
				if (url.charAt(url.length - 1) != '/') {
					url = url.substring(0, url.lastIndexOf("/") + 1);
				}
				return url;
			};
		})();
	}

	if (nexacro.Browser == "IE") {
		nexacro._getRealBrowserVersion = function () {
			var actualVersion, jscriptMap, jscriptVersion;

			jscriptMap = {
				"5.5" : "5.5", 
				"5.6" : "6", 
				"5.7" : "7", 
				"5.8" : "8", 
				"9" : "9", 
				"10" : "10", 
				"11" : "11"
			};
			jscriptVersion = new Function("/*@cc_on return @_jscript_version; @*/")();

			if (jscriptVersion !== undefined) {
				actualVersion = jscriptMap[jscriptVersion];
				if (actualVersion === undefined) {
					actualVersion = jscriptVersion;
				}
			}

			return actualVersion;
		};
	}
	else {
		nexacro._getRealBrowserVersion = nexacro._emptyFn;
	}
	;

	nexacro._getURIValue = function (uristr) {
		if (uristr && uristr.substring(0, 4).toLowerCase() == "url(") {
			if (uristr.charAt(4) == "'" && uristr.charAt(uristr.length - 2) == "'") {
				uristr = uristr.substring(5, uristr.length - 2);
			}
			else if (uristr.charAt(4) == "\"" && uristr.charAt(uristr.length - 2) == "\"") {
				uristr = uristr.substring(5, uristr.length - 2);
			}
			else {
				uristr = uristr.substring(4, uristr.length - 1);
			}

			return nexacro.stripQuote(uristr);
		}

		return uristr;
	};

	nexacro.Object = function (id, parent) {
		this.id = id || "";
		this.parent = parent || null;
	};

	var _pObject = nexacro._createPrototype(Object, nexacro.Object);
	nexacro.Object.prototype = _pObject;
	_pObject._type_name = "Object";

	_pObject._toString_str = "[object Object]";
	_pObject._is_array = false;
	_pObject._is_data = false;
	_pObject._is_event = false;
	_pObject._is_elelemt = false;
	_pObject._is_component = false;
	_pObject._is_context = false;
	_pObject._is_form = false;
	_pObject._is_frame = false;
	_pObject._is_window = false;
	_pObject._is_application = false;

	_pObject.toString = function () {
		return "[object " + this._type_name + "]";
	};

	_pObject.getSetter = function (name, fnname) {
		if (!fnname) {
			fnname = "set_" + name;
		}
		var fn = this[fnname];
		if (fn) {
			return new nexacro.SetterBinder(this, name, fn);
		}
		return new nexacro.PropBinder(this, name);
	};

	if (Object.defineProperty) {
		try {
			Object.defineProperty(_pObject, "getSetter", {
				"value" : _pObject.getSetter, 
				"writable" : true, 
				"enumerable" : false
			});
		}
		catch (e) {
			;
		}
	}

	_pObject.getNumSetter = function (name, fnname) {
		if (!fnname) {
			fnname = "set_" + name;
		}
		var fn = this[fnname];
		if (fn) {
			return new nexacro.IntSetterBinder(this, name, fn);
		}
		return new nexacro.NumPropBinder(this, name);
	};

	if (Object.defineProperty) {
		try {
			Object.defineProperty(_pObject, "getNumSetter", {
				"value" : _pObject.getNumSetter, 
				"writable" : false, 
				"enumerable" : false
			});
		}
		catch (e) {
			;
		}
	}


	_pObject.set_id = function (id) {
		this.id = id;
	};
	_pObject.destroy = function () {
		this.parent = null;
	};

	delete _pObject;

	nexacro.Collection = function () {
		this._idArray = [];
		this._idxMap = {
		};
		this.length = 0;
	};
	var _pCollection = nexacro._createPrototype(Object, nexacro.Collection);
	nexacro.Collection.prototype = _pCollection;
	_pCollection._type_name = "ObjectArray";

	_pCollection._is_array = true;

	_pCollection.toString = function () {
		return "[object " + this._type_name + "]";
	};


	_pCollection.get_id = function (idx) {
		return this._idArray[idx];
	};

	_pCollection.update_id = function (idx, newID) {
		var id_array = this._idArray;
		var oldID = id_array[idx];
		if (oldID != null && oldID != newID) {
			this[newID] = this[oldID];
			delete this[oldID];
			var idx_map = this._idxMap;
			idx_map[newID] = idx;
			delete idx_map[oldID];
			id_array[idx] = newID;
			return true;
		}
		return false;
	};

	_pCollection.indexOf = function (id) {
		return this._idxMap[id];
	};

	_pCollection.get_item = function (key) {
		return this[key];
	};
	_pCollection.getItem = _pCollection.get_item;

	_pCollection.set_item = function (key, val) {
		if (typeof (key) == "number") {
			var id = this._idArray[key];
			if (id != null) {
				return (this[id] = this[key] = val);
			}
		}
		else {
			var idx = this._idxMap[key];
			if (idx != null) {
				return (this[key] = this[idx] = val);
			}
		}
		return undefined;
	};

	_pCollection.setItem = function (key, val) {
		var v = this.get_item(key);
		if (v) {
			return this.set_item(key, val);
		}
		else {
			return this.add_item(key, val);
		}
	};

	_pCollection.clear = function () {
		var id_array = this._idArray;
		var len = id_array.length;
		for (var i = 0; i < len; i++) {
			delete this[id_array[i]];
			this[id_array[i]] = null;
			delete this[i];
			this[i] = null;
		}
		this._idArray = [];
		this._idxMap = {
		};
		this.length = 0;

		id_array = null;
	};

	_pCollection.add_item = function (id, obj) {
		var idx_map = this._idxMap;
		var idx = idx_map[id];
		if (idx != null) {
			this[id] = this[idx] = obj;
		}
		else {
			idx = this.length;
			this[id] = this[idx] = obj;
			this._idArray.push(id);
			this._idxMap[id] = idx;
			this.length = this._idArray.length;
		}
		return idx;
	};
	_pCollection.add = _pCollection.add_item;
	_pCollection.append = _pCollection.add_item;
	_pCollection.appendItem = _pCollection.add_item;

	_pCollection.delete_item = function (key) {
		if (typeof (key) == "number") {
			var id_array = this._idArray;
			var idx_map = this._idxMap;
			var len = id_array.length - 1;
			if (key >= 0 && key <= len) {
				var id = id_array[key];
				delete this[id];

				id_array.splice(key, 1);
				for (var i = key; i < len; i++) {
					idx_map[id_array[i]] = i;
					this[i] = this[i + 1];
				}
				delete this[i];
				delete idx_map[id];

				this.length = id_array.length;
				return key;
			}
			return -1;
		}
		else {
			var id_array = this._idArray;
			var idx_map = this._idxMap;
			var idx = idx_map[key];
			if (idx != null) {
				var len = id_array.length - 1;
				delete this[key];

				id_array.splice(idx, 1);
				for (var i = idx; i < len; i++) {
					idx_map[id_array[i]] = i;
					this[i] = this[i + 1];
				}
				delete this[i];
				delete idx_map[key];

				this.length = id_array.length;
				return idx;
			}
			return -1;
		}
	};
	_pCollection.remove = _pCollection.delete_item;
	_pCollection.remove_item = _pCollection.delete_item;
	_pCollection.removeItem = _pCollection.delete_item;

	_pCollection.insert_item = function (idx, id, obj) {
		idx = (idx | 0);
		var id_array = this._idArray;
		var idx_map = this._idxMap;
		var len = id_array.length;
		if (idx >= len || idx == -1) {
			return this.add_item(id, obj);
		}
		if (id in idx_map) {
			return this.set_item(idx, obj);
		}

		this[id] = obj;
		id_array.splice(idx, 0, id);
		len++;
		for (var i = len - 1; i >= idx + 1; i--) {
			idx_map[id_array[i]] = i;
			this[i] = this[i - 1];
		}
		this[idx] = obj;
		idx_map[id] = idx;
		this.length = len;
		return idx;
	};
	_pCollection.insert = _pCollection.insert_item;

	_pCollection.size = function () {
		return this.length;
	};

	_pCollection.destroy = function () {
		var id_array = this._idArray;
		var len = id_array.length;
		for (var i = 0; i < len; i++) {
			this[id_array[i]] = null;
			this[i] = null;
		}
		this._idArray = null;
		this._idxMap = null;
		this.length = 0;
	};

	_pCollection.set_length = nexacro._emptyFn;

	delete _pCollection;

	nexacro.Error = function (name, except) {
		this.id = this.name = name;
		this.except = except;
	};
	var _pError = nexacro._createPrototype(nexacro.Object, nexacro.Error);
	nexacro.Error.prototype = _pError;

	_pError._type_name = "Error";

	_pError.toString = function () {
		return this.name + ": " + this.except;
	};
	delete _pError;



	nexacro._GetSystemErrorMsg = function (obj, errorcode) {
		var args = [];
		for (var i = 0, n = arguments.length; i < n; i++) {
			args.push(arguments[i]);
		}

		var args = Array.prototype.slice.call(arguments, 1);
		var errormsg = application._getErrorMessge.apply(this, args);

		return errormsg;
	};



	nexacro.EventSinkObject = function (id, parent) {
		this.id = id;
		this.parent = parent || null;
	};

	var _pEventSinkObject = nexacro._createPrototype(nexacro.Object, nexacro.EventSinkObject);
	nexacro.EventSinkObject.prototype = _pEventSinkObject;
	_pEventSinkObject._type_name = "EventSinkObject";

	_pEventSinkObject._event_list = {
	};
	_pEventSinkObject._loading_event_list = null;
	_pEventSinkObject._created_event_list = null;

	_pEventSinkObject.destroy = function () {
		this._clearEventListeners();
		this._event_list = null;
		this._loading_event_list = null;
		this._created_event_list = null;
		nexacro.Object.prototype.destroy.call(this);
	};

	_pEventSinkObject._clearEventListener = function (evt_id) {
		var evt = this[evt_id];
		if (evt && evt._has_handlers) {
			evt._clearAll();
			this[evt_id] = null;
		}
	};
	_pEventSinkObject._clearEventListeners = function () {
		var evt_list = this._created_event_list;
		if (evt_list) {
			var len = evt_list.length;
			if (len > 0) {
				var i = 0;
				while (true) {
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
					if (i >= len) {
						break;
					}
					this._clearEventListener(evt_list[i++]);
				}
			}
		}
	};

	_pEventSinkObject._setEventHandler = function (evt_id, func, target) {
		var listener = this[evt_id];
		var idx = -1;
		if (listener) {
			if (target) {
				idx = listener._setHandler(target, func);
			}
			else {
				idx = listener._setHandler(this, func);
			}
		}
		else if (evt_id in this._event_list) {
			listener = new nexacro.EventListener(evt_id);
			this[evt_id] = listener;
			if (this._created_event_list) {
				if (this._created_event_list.indexOf(evt_id) < 0) {
					this._created_event_list.push(evt_id);
				}
			}
			else {
				this._created_event_list = [];
				this._created_event_list.push(evt_id);
			}
			if (target) {
				idx = listener._setHandler(target, func);
			}
			else {
				idx = listener._setHandler(this, func);
			}
		}
		return idx;
	};

	_pEventSinkObject._addEventHandler = function (evt_id, func, target) {
		var listener = this[evt_id];
		var idx = -1;
		if (listener) {
			if (target) {
				idx = listener._addHandler(target, func);
			}
			else {
				idx = listener._addHandler(this, func);
			}
		}
		else if (evt_id in this._event_list) {
			listener = new nexacro.EventListener(evt_id);
			this[evt_id] = listener;
			if (this._created_event_list) {
				if (this._created_event_list.indexOf(evt_id) < 0) {
					this._created_event_list.push(evt_id);
				}
			}
			else {
				this._created_event_list = [];
				this._created_event_list.push(evt_id);
			}
			if (target) {
				idx = listener._addHandler(target, func);
			}
			else {
				idx = listener._addHandler(this, func);
			}
		}
		return idx;
	};

	_pEventSinkObject._removeEventHandler = function (evt_id, func, target) {
		var listener = this[evt_id];
		var nRemovedEvt = 0;
		if (listener) {
			if (target) {
				nRemovedEvt = listener._removeHandler(target, func);
			}
			else {
				nRemovedEvt = listener._removeHandler(null, func);
			}
		}
		return nRemovedEvt;
	};

	_pEventSinkObject._findEventHandler = function (evt_id, func, target) {
		var listener = this[evt_id];
		var idx = -2;
		if (listener) {
			var handlers = listener._sys_handlers;
			if (target) {
				idx = listener._findHandler(handlers, target, func);
			}
			else {
				idx = listener._findHandler(handlers, null, func);
			}
		}
		return idx;
	};

	_pEventSinkObject.setEventHandler = function (evt_id, func, target) {
		if (!func) {
			return -1;
		}

		if (this._is_loading) {
			if (!this._loading_event_list) {
				this._loading_event_list = [];
			}

			this._loading_event_list.push({
				id : evt_id, 
				func : func, 
				target : target
			});
		}

		var listener = this[evt_id];
		var idx = -1;
		if (listener) {
			if (target) {
				idx = listener._setHandler(target, func, true);
			}
			else {
				idx = listener._setHandler(this, func, true);
			}
		}
		else if (evt_id in this._event_list) {
			listener = new nexacro.EventListener(evt_id);
			this[evt_id] = listener;
			if (this._created_event_list) {
				if (this._created_event_list.indexOf(evt_id) < 0) {
					this._created_event_list.push(evt_id);
				}
			}
			else {
				this._created_event_list = [];
				this._created_event_list.push(evt_id);
			}
			if (target) {
				idx = listener._setHandler(target, func, true);
			}
			else {
				idx = listener._setHandler(this, func, true);
			}
		}
		return idx;
	};

	_pEventSinkObject.addEventHandler = function (evt_id, func, target) {
		if (this._is_loading) {
			if (!this._loading_event_list) {
				this._loading_event_list = [];
			}
			this._loading_event_list.push({
				id : evt_id, 
				func : func, 
				target : target
			});
		}

		var listener = this[evt_id];
		var idx = -1;
		if (listener) {
			if (target) {
				idx = listener._addHandler(target, func, true);
			}
			else {
				idx = listener._addHandler(this, func, true);
			}
		}
		else if (evt_id in this._event_list) {
			listener = new nexacro.EventListener(evt_id);
			this[evt_id] = listener;
			if (this._created_event_list) {
				if (this._created_event_list.indexOf(evt_id) < 0) {
					this._created_event_list.push(evt_id);
				}
			}
			else {
				this._created_event_list = [];
				this._created_event_list.push(evt_id);
			}
			if (target) {
				idx = listener._addHandler(target, func, true);
			}
			else {
				idx = listener._addHandler(this, func, true);
			}
		}
		return idx;
	};

	_pEventSinkObject.removeEventHandler = function (evt_id, func, target) {
		if (!func) {
			return 0;
		}

		var listener = this[evt_id];
		var nRemovedEvt = 0;
		if (listener) {
			if (target) {
				nRemovedEvt = listener._removeHandler(target, func, true);
			}
			else {
				nRemovedEvt = listener._removeHandler(null, func, true);
			}
		}
		return nRemovedEvt;
	};

	_pEventSinkObject.findEventHandler = function (evt_id, func, target) {
		var listener = this[evt_id];
		var idx = -2;
		if (listener) {
			var handlers = listener._user_handlers;
			if (target) {
				idx = listener._findHandler(handlers, target, func);
			}
			else {
				idx = listener._findHandler(handlers, this, func);
			}
		}
		return idx;
	};

	_pEventSinkObject.getEventHandler = function (evt_id, idx) {
		var listener = this[evt_id];
		var fn = "";
		if (listener) {
			var handlers = listener._user_handlers;
			fn = listener._getHandler(handlers, idx);
		}
		return fn;
	};

	_pEventSinkObject.clearEventHandler = function (evt_id) {
		var listener = this[evt_id];
		if (listener) {
			return listener._clearAll(true);
		}
		return 0;
	};

	_pEventSinkObject.setEventHandlerLookup = function (evt_id, funcstr, target) {
		var listener = this[evt_id];
		var idx = -1;
		if (listener) {
			if (target) {
				idx = listener._setHandlerLookup(target, funcstr);
			}
			else {
				idx = listener._setHandlerLookup(this, funcstr);
			}
		}
		else if (evt_id in this._event_list) {
			listener = new nexacro.EventListener(evt_id);
			this[evt_id] = listener;
			if (this._created_event_list) {
				if (this._created_event_list.indexOf(evt_id) < 0) {
					this._created_event_list.push(evt_id);
				}
			}
			else {
				this._created_event_list = [];
				this._created_event_list.push(evt_id);
			}

			if (target) {
				idx = listener._setHandlerLookup(target, funcstr);
			}
			else {
				idx = listener._setHandlerLookup(this, funcstr);
			}
		}
		return idx;
	};

	_pEventSinkObject.addEventHandlerLookup = function (evt_id, funcstr, target) {
		var listener = this[evt_id];
		var idx = -1;
		if (listener) {
			if (target) {
				idx = listener._addHandlerLookup(target, funcstr);
			}
			else {
				idx = listener._addHandlerLookup(this, funcstr);
			}
		}
		else if (evt_id in this._event_list) {
			listener = new nexacro.EventListener(evt_id);
			this[evt_id] = listener;
			if (this._created_event_list) {
				if (this._created_event_list.indexOf(evt_id) < 0) {
					this._created_event_list.push(evt_id);
				}
			}
			else {
				this._created_event_list = [];
				this._created_event_list.push(evt_id);
			}
			if (target) {
				idx = listener._addHandlerLookup(target, funcstr);
			}
			else {
				idx = listener._addHandlerLookup(this, funcstr);
			}
		}
		return idx;
	};

	_pEventSinkObject.removeEventHandlerLookup = function (evt_id, funcstr, target) {
		var listener = this[evt_id];
		var nRemovedEvt = 0;
		if (listener) {
			if (target) {
				nRemovedEvt = listener._removeHandlerLookup(target, funcstr);
			}
			else {
				nRemovedEvt = listener._removeHandlerLookup(this, funcstr);
			}
		}
		return nRemovedEvt;
	};

	_pEventSinkObject.findEventHandlerLookup = function (evt_id, funcstr, target) {
		var listener = this[evt_id];
		var idx = -2;
		if (listener) {
			var handlers = listener._user_handlers;
			if (target) {
				idx = listener._findHandlerLookup(handlers, target, funcstr);
			}
			else {
				idx = listener._findHandlerLookup(handlers, this, funcstr);
			}
		}
		return idx;
	};

	delete _pEventSinkObject;

	nexacro.EventHandler = function (obj, fn) {
		this.target = obj;
		this.handler = fn;
	};

	nexacro.EventListener = function (id) {
		this.id = this.name = id;
		this.length = 0;

		this.defaultprevented = false;
		this.stoppropagation = false;

		this._sys_handlers = [];
		this._user_handlers = [];
		this._has_handlers = false;
	};
	var _pEventListener = nexacro._createPrototype(nexacro.Object, nexacro.EventListener);
	nexacro.EventListener.prototype = _pEventListener;

	_pEventListener._type_name = "EventListener";

	_pEventListener.set_length = nexacro._emptyFn;

	_pEventListener._findByObj = function (handlers, obj) {
		var len = handlers.length;
		for (var i = 0; i < len; i++) {
			if (handlers[i].target == obj) {
				return i;
			}
		}
		return -1;
	};

	_pEventListener._findHandler = function (handlers, obj, fn) {
		var len = handlers.length;
		for (var i = 0; i < len; i++) {
			if (handlers[i].target == obj && handlers[i].handler == fn) {
				return i;
			}
		}
		return -1;
	};

	_pEventListener._getHandler = function (handlers, idx) {
		var len = handlers.length;
		if (idx >= 0 && idx < len) {
			return handlers[idx].handler;
		}
		return undefined;
	};

	_pEventListener._setHandler = function (obj, fn, user_handler) {
		var handlers = this._sys_handlers;
		if (user_handler) {
			handlers = this._user_handlers;
		}

		var target = obj;
		var idx = this._findByObj(handlers, target);
		if (idx < 0) {
			idx = handlers.length;
			handlers.push(new nexacro.EventHandler(target, fn));
		}
		else {
			handlers[idx] = new nexacro.EventHandler(target, fn);
		}
		this._has_handlers |= handlers.length;
		return idx;
	};

	_pEventListener._addHandler = function (obj, fn, user_handler) {
		var handlers = this._sys_handlers;
		if (user_handler) {
			handlers = this._user_handlers;
		}
		var idx = -1;
		if (fn) {
			var target = obj;
			var len = handlers.length;
			var _handler = new nexacro.EventHandler(target, fn);
			for (var i = 0; i < len; i++) {
				if (handlers[i].handler == _handler.handler && handlers[i].target == _handler.target) {
					return i;
				}
			}
			handlers.push(_handler);

			if (user_handler) {
				this.length = handlers.length;
			}

			this._has_handlers |= handlers.length;
			idx = len;
		}
		return idx;
	};

	_pEventListener._removeHandler = function (obj, fn, user_handler) {
		var handlers = this._sys_handlers;
		if (user_handler) {
			handlers = this._user_handlers;
		}
		var len = handlers.length;
		for (var i = len - 1; i >= 0; i--) {
			if (obj == null) {
				if (fn == null) {
					handlers.splice(i, 1);
				}
				else if (handlers[i].handler == fn) {
					handlers.splice(i, 1);
				}
			}
			else {
				if (fn == null) {
					handlers.splice(i, 1);
				}
				else if (handlers[i].target == obj && handlers[i].handler == fn) {
					handlers.splice(i, 1);
				}
			}
		}
		this._has_handlers |= handlers.length;

		if (user_handler) {
			this.length = handlers.length;
		}

		return len - handlers.length;
	};

	_pEventListener._setHandlerLookup = function (obj, fnstr) {
		var handlers = this._user_handlers;
		var idx = -1;
		if (fnstr.length > 0) {
			for (var f = obj; (f != null); f = f.parent) {
				var fn = f[fnstr];
				if (fn) {
					var target = f;
					idx = this._findByObj(handlers, target);
					if (idx < 0) {
						idx = handlers.length;
						handlers.push(new nexacro.EventHandler(target, fn));
					}
					else {
						handlers[idx] = new nexacro.EventHandler(target, fn);
					}
					this._has_handlers |= handlers.length;
					return idx;
				}
				if (f._type_name == "Application") {
					return idx;
				}
			}
		}
		return idx;
	};

	_pEventListener._addHandlerLookup = function (obj, fnstr) {
		var handlers = this._user_handlers;
		var idx = -1;
		if (fnstr.length > 0) {
			for (var f = obj; (f != null); f = f.parent) {
				var fn = f[fnstr];
				if (fn) {
					var target = obj;
					idx = handlers.length;

					for (var i = 0; i < idx; i++) {
						if (handlers[i].handler == f[fnstr]) {
							return i;
						}
					}

					handlers.push(new nexacro.EventHandler(target, f[fnstr]));
					this._has_handlers |= handlers.length;
					return idx;
				}
				if (f._type_name == "Application") {
					return idx;
				}
			}
		}
		return idx;
	};

	_pEventListener._removeHandlerLookup = function (obj, fnstr) {
		var handlers = this._user_handlers;
		var len = handlers.length;
		if (fnstr.length > 0) {
			for (var f = obj; (f != null); f = f.parent) {
				var fn = f[fnstr];
				if (fn) {
					for (var i = len - 1; i >= 0; i--) {
						if (handlers[i] && handlers[i].handler == fn) {
							handlers.splice(i, 1);
						}
					}
					this._has_handlers |= handlers.length;
				}
				if (f._type_name == "Application") {
					return len - handlers.length;
				}
			}
		}
		return 0;
	};

	_pEventListener._findHandlerLookup = function (handlers, obj, fnstr) {
		var len = handlers.length;
		if (fnstr.length > 0) {
			for (var f = obj; (f != null); f = f.parent) {
				var fn = f[fnstr];
				if (fn) {
					for (var i = 0; i < len; i++) {
						if (handlers[i].target == f && handlers[i].handler == fn) {
							return i;
						}
					}
					this._has_handlers |= handlers.length;
				}
				if (f._type_name == "Application") {
					return -1;
				}
			}
		}
		return -1;
	};

	_pEventListener._clearAll = function (user_fire) {
		var numofEvent = this._user_handlers.length;

		var len = 0;
		if (!user_fire) {
			numofEvent += this._sys_handlers.length;
			len = this._sys_handlers.length;
			for (var i = 0; i < len; i++) {
				var handler = this._sys_handlers[i];
				handler.target = null;
				handler.handler = null;
				this._sys_handlers[i] = null;
				delete this._sys_handlers[i];
			}

			this._sys_handlers = [];
		}

		len = this._user_handlers.length;
		for (i = 0; i < len; i++) {
			var handler = this._user_handlers[i];
			handler.target = null;
			handler.handler = null;
			handler = null;
			this._user_handlers[i] = null;
			delete this._user_handlers[i];
		}

		this._user_handlers = [];
		this.length = 0;
		this._has_handlers = this._user_handlers.length + this._sys_handlers.length;
		return numofEvent;
	};

	_pEventListener._fireEvent = function (obj, evt, only_sys) {
		var i, ret;
		var h;
		var handlers = this._user_handlers;
		var len = handlers.length;

		if (!only_sys) {
			try {
				for (var i = 0; i < len; i++) {
					h = handlers[i];
					if (h && obj.enableevent !== false) {
						ret = h.handler.call(h.target, obj, evt);
					}
					if (evt) {
						this.defaultprevented = evt._prevented;
						this.stoppropagation = evt._stoppropagation;
					}
				}
			}
			catch (e) {
				if (e.obj) {
					application._onSystemError(e.obj, e.name, e.message);
				}
				else {
					var msg = nexacro._getExceptionMessage(e);
					application._onSystemError(application, e.name, msg);
				}
			}
		}

		handlers = this._sys_handlers;
		len = handlers.length;

		for (var i = 0; i < len; i++) {
			h = handlers[i];
			if (h && obj.enableevent !== false) {
				ret = h.handler.call(h.target, obj, evt);
			}
			if (evt) {
				this.defaultprevented = evt._prevented;
				this.stoppropagation = evt._stoppropagation;
			}
		}

		return ret;
	};

	_pEventListener._fireSysEvent = function (obj, evt) {
		var i, ret;
		var handlers = this._sys_handlers;
		var len = handlers.length;
		var h;
		for (var i = 0; i < len; i++) {
			h = handlers[i];
			if (obj.enableevent !== false) {
				ret = h.handler.call(h.target, obj, evt);
			}
			if (evt) {
				this.defaultprevented = evt._prevented;
				this.stoppropagation = evt._stoppropagation;
			}
		}
		return ret;
	};

	_pEventListener._fireUserEvent = function (obj, evt) {
		var i, ret;
		var h;
		var handlers = this._user_handlers;
		var len = handlers.length;

		try {
			for (var i = 0; i < len; i++) {
				h = handlers[i];

				if (!h) {
					continue;
				}

				if (obj.enableevent !== false) {
					ret = h.handler.call(h.target, obj, evt);
				}
				if (evt) {
					this.defaultprevented = evt._prevented;
					this.stoppropagation = evt._stoppropagation;
				}
			}
		}
		catch (e) {
			if (e.obj) {
				application._onSystemError(e.obj, e.name, e.message);
			}
			else {
				var msg = nexacro._getExceptionMessage(e);
				application._onSystemError(application, e.name, msg);
			}
		}
		return ret;
	};

	_pEventListener._fireCheckEvent = function (obj, evt) {
		var i, ret;
		var handlers = this._user_handlers;
		var len = handlers.length;
		var h;

		try {
			for (var i = 0; i < len; i++) {
				h = handlers[i];

				if (!h) {
					continue;
				}

				if (obj.enableevent !== false) {
					ret = h.handler.call(h.target, obj, evt);
				}
				if (evt) {
					this.defaultprevented = evt._prevented;
					this.stoppropagation = evt._stoppropagation;
				}

				if (ret) {
					ret = nexacro._toBoolean(ret);
				}

				if (ret != null && (!ret)) {
					return false;
				}
			}
		}
		catch (e) {
			if (e.obj) {
				application._onSystemError(e.obj, e.name, e.message);
			}
			else {
				var msg = nexacro._getExceptionMessage(e);
				application._onSystemError(application, e.name, msg);
			}
		}

		handlers = this._sys_handlers;
		len = handlers.length;
		var ret;
		for (var i = 0; i < len; i++) {
			h = handlers[i];
			if (obj.enableevent) {
				ret = h.handler.call(h.target, obj, evt);
			}
			if (evt) {
				this.defaultprevented = evt._prevented;
				this.stoppropagation = evt._stoppropagation;
			}
			if (ret != null && (!ret)) {
				return false;
			}
		}



		return true;
	};

	_pEventListener.fireEvent = function (obj, evt) {
		evt.eventid = this.name;
		evt.fromobject = obj;
		this._fireEvent(obj, evt);
	};

	_pEventListener.clear = function () {
		var cnt = this._user_handlers.length;
		this._user_handlers = [];
		this.length = 0;
		this._has_handlers = (this.length + this._sys_handlers.length);
		return cnt;
	};

	delete _pEventListener;

	nexacro.Event = function (obj, evt_id) {
		this.id = this.eventid = evt_id || "";
		this.fromobject = this.fromreferenceobject = obj;
		this._prevented = false;
		this._stoppropagation = false;
		this.cancelable = false;
		this.bubbles = false;
	};

	var _pEvent = nexacro._createPrototype(nexacro.Object, nexacro.Event);
	nexacro.Event.prototype = _pEvent;
	_pEvent._type_name = "Event";

	_pEvent._is_event = true;

	_pEvent.preventDefault = function () {
		this._prevented = this.cancelable;
	};

	_pEvent.stopPropagation = function () {
		this._stoppropagation = this.bubbles;
	};

	_pEvent.destroy = function () {
		this.fromobject = null;
		this.fromreferenceobject = null;
	};


	delete _pEvent;

	nexacro.EventInfo = function (obj, evt_id) {
		this.id = this.eventid = evt_id || "";
		this.fromobject = this.fromreferenceobject = obj;
		this._prevented = false;
		this._stoppropagation = false;
		this.cancelable = false;
		this.bubbles = false;
	};

	var _pEventInfo = nexacro._createPrototype(nexacro.Object, nexacro.EventInfo);
	nexacro.EventInfo.prototype = _pEventInfo;
	_pEventInfo._type_name = "EventInfo";

	_pEventInfo._is_event = true;

	_pEventInfo.set_eventid = function (v) {
		if (v && v != this.eventid) {
			this.eventid = v;
		}
	};

	delete _pEventInfo;

	nexacro.Event.KEY_RETURN = 13;
	nexacro.Event.KEY_ENTER = 13;
	nexacro.Event.KEY_TAB = 9;
	nexacro.Event.KEY_UP = 38;
	nexacro.Event.KEY_DOWN = 40;
	nexacro.Event.KEY_LEFT = 37;
	nexacro.Event.KEY_RIGHT = 39;
	nexacro.Event.KEY_SPACE = 32;
	nexacro.Event.KEY_SHIFT = 16;
	nexacro.Event.KEY_CTRL = 17;
	nexacro.Event.KEY_CONTROL = 17;
	nexacro.Event.KEY_ALT = 18;
	nexacro.Event.KEY_ESC = 27;
	nexacro.Event.KEY_F1 = 112;
	nexacro.Event.KEY_F2 = 113;
	nexacro.Event.KEY_F3 = 114;
	nexacro.Event.KEY_F4 = 115;
	nexacro.Event.KEY_F5 = 116;
	nexacro.Event.KEY_F6 = 117;
	nexacro.Event.KEY_F7 = 118;
	nexacro.Event.KEY_F8 = 119;
	nexacro.Event.KEY_F9 = 120;
	nexacro.Event.KEY_F10 = 121;
	nexacro.Event.KEY_F11 = 122;
	nexacro.Event.KEY_F12 = 123;
	nexacro.Event.KEY_DEL = 46;
	nexacro.Event.KEY_DELETE = 46;
	nexacro.Event.KEY_BACKSPACE = 8;
	nexacro.Event.KEY_INSERT = 45;
	nexacro.Event.KEY_HOME = 36;
	nexacro.Event.KEY_END = 35;
	nexacro.Event.KEY_PAGE_UP = 33;
	nexacro.Event.KEY_PAGE_DOWN = 34;
	nexacro.Event.KEY_NUM_LOCK = 144;
	nexacro.Event.KEY_NUMPAD0 = 96;
	nexacro.Event.KEY_NUMPAD1 = 97;
	nexacro.Event.KEY_NUMPAD2 = 98;
	nexacro.Event.KEY_NUMPAD3 = 99;
	nexacro.Event.KEY_NUMPAD4 = 100;
	nexacro.Event.KEY_NUMPAD5 = 101;
	nexacro.Event.KEY_NUMPAD6 = 102;
	nexacro.Event.KEY_NUMPAD7 = 103;
	nexacro.Event.KEY_NUMPAD8 = 104;
	nexacro.Event.KEY_NUMPAD9 = 105;
	nexacro.Event.KEY_NUMPAD_DIVIDE = 111;
	nexacro.Event.KEY_NUMPAD_MULTIPLY = 106;
	nexacro.Event.KEY_NUMPAD_MINUS = 109;
	nexacro.Event.KEY_NUMPAD_PLUS = 107;

	nexacro.TimerEventInfo = function (obj, id, timerid) {
		this.id = this.eventid = id || "ontimer";
		this.fromobject = this.fromreferenceobject = obj;
		this.timerid = timerid;
	};
	var _pTimerEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.TimerEventInfo);
	nexacro.TimerEventInfo.prototype = _pTimerEventInfo;
	_pTimerEventInfo._type_name = "TimerEventInfo";

	delete _pTimerEventInfo;

	nexacro.ErrorEventInfo = function (obj, id, errortype, errormsg, errorobj, statuscode, requesturi, locationuri, reason) {
		this.id = this.eventid = id || "onerror";
		this.fromobject = this.fromreferenceobject = obj;

		this.cancelable = true;
		this.errortype = errortype;
		this.errormsg = errormsg;
		this.errorobj = errorobj;

		if (statuscode) {
			this.statuscode = statuscode;
		}
		else {
			this.statuscode = 0;
		}

		this.requesturi = requesturi;
		this.locationuri = locationuri;
		this.reason = reason ? reason : "0";
	};
	var _pErrorEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ErrorEventInfo);
	nexacro.ErrorEventInfo.prototype = _pErrorEventInfo;
	_pErrorEventInfo._type_name = "ErrorEventInfo";

	_pErrorEventInfo.set_errortype = function (n) {
		if (n && this.errortype != n) {
			this.errortype = n;
		}
	};

	_pErrorEventInfo.set_errormsg = function (v) {
		if (v && this.errormsg != v) {
			this.errormsg = v;
		}
	};

	_pErrorEventInfo.set_errorobj = function (obj) {
		if (obj && this.errorobj != obj) {
			this.errorobj = obj;
		}
	};

	_pErrorEventInfo.set_locationuri = function (v) {
		if (v && this.locationuri != v) {
			this.locationuri = v;
		}
	};

	_pErrorEventInfo.set_requesturi = function (v) {
		if (v && this.requesturi != v) {
			this.requesturi = v;
		}
	};

	_pErrorEventInfo.set_statuscode = function (v) {
		if (v && this.statuscode != v) {
			this.statuscode = v;
		}
	};

	_pErrorEventInfo.getHexaErrorCode = function () {
		return this.errorcode;
	};

	delete _pErrorEventInfo;

	nexacro.ExitEventInfo = function (obj, id) {
		this.id = this.eventid = id || "onexit";
		this.fromobject = this.fromreferenceobject = obj;
	};
	var _pExitEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ExitEventInfo);
	nexacro.ExitEventInfo.prototype = _pExitEventInfo;
	_pExitEventInfo._type_name = "ExitEventInfo";

	delete _pExitEventInfo;

	nexacro.AccessibilityEventInfo = function (obj, id, label, status, value, description) {
		this.id = this.eventid = id || "onaccessibility";
		this.fromobject = this.fromreferenceobject = obj;

		this.label = label;
		this.status = status;
		this.value = value;
		this.description = description;
	};
	var _pAccessibilityEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.AccessibilityEventInfo);
	nexacro.AccessibilityEventInfo.prototype = _pAccessibilityEventInfo;
	_pAccessibilityEventInfo._type_name = "AccessibilityEventInfo";

	delete _pAccessibilityEventInfo;

	nexacro.ActivateEventInfo = function (obj, id, state) {
		nexacro.Event.call(this, obj, id || "onactivate");
		this.fromobject = this.fromreferenceobject = obj;
		this.state = state;

		this.bubbles = true;
	};
	var _pActivateEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ActivateEventInfo);
	nexacro.ActivateEventInfo.prototype = _pActivateEventInfo;
	_pActivateEventInfo._type_name = "ActivateEventInfo";

	delete _pActivateEventInfo;

	nexacro.SysCommandEventInfo = function (obj, id, state) {
		this.id = this.eventid = id || "onsyscommand";
		this.fromobject = this.fromreferenceobject = obj;

		this.bubbles = true;

		this.state = state;
	};
	var _pSysCommandEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.SysCommandEventInfo);
	nexacro.SysCommandEventInfo.prototype = _pSysCommandEventInfo;
	_pSysCommandEventInfo._type_name = "SysCommandEventInfo";

	delete _pSysCommandEventInfo;

	nexacro.CloseEventInfo = function (obj, id, from_comp, refer_comp, root_closing_comp) {
		nexacro.Event.call(this, obj, id || "onclose");
		this.bubbles = true;

		this.fromobject = from_comp || obj;
		this.fromreferenceobject = refer_comp || obj;

		this._root_closing_comp = root_closing_comp;
	};
	var _pCloseEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CloseEventInfo);
	nexacro.CloseEventInfo.prototype = _pCloseEventInfo;
	_pCloseEventInfo._type_name = "CloseEventInfo";

	delete _pCloseEventInfo;

	nexacro.LoadEventInfo = function (obj, id, url) {
		nexacro.Event.call(this, obj, id || "onload");
		this.url = url;
	};
	var _pLoadEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CloseEventInfo);
	nexacro.LoadEventInfo.prototype = _pLoadEventInfo;
	_pLoadEventInfo._type_name = "LoadEventInfo";

	delete _pLoadEventInfo;

	nexacro.SetFocusEventInfo = function (obj, id, oldcomp, oldrefcomp) {
		this.id = this.eventid = id || "onsetfocus";
		this.fromobject = this.fromreferenceobject = obj;

		this.oldcomponent = oldcomp;
		this.oldreferencecomponent = oldrefcomp;
	};
	var _pSetFocusEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.SetFocusEventInfo);
	nexacro.SetFocusEventInfo.prototype = _pSetFocusEventInfo;
	_pSetFocusEventInfo._type_name = "SetFocusEventInfo";

	delete _pSetFocusEventInfo;

	nexacro.KillFocusEventInfo = function (obj, id, newcomp, newrefcomp) {
		nexacro.Event.call(this, obj, id || "onkillfocus");
		this.newcomponent = newcomp;
		this.newreferencecomponent = newrefcomp;
	};
	var _pKillFocusEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.KillFocusEventInfo);
	nexacro.KillFocusEventInfo.prototype = _pKillFocusEventInfo;
	_pKillFocusEventInfo._type_name = "KillFocusEventInfo";

	delete _pKillFocusEventInfo;

	nexacro.MoveEventInfo = function (obj, id, left, top) {
		this.id = this.eventid = id || "onmove";
		this.fromobject = this.fromreferenceobject = obj;

		this.x = left;
		this.y = top;
	};
	var _pMoveEventInfo = nexacro._createPrototype(nexacro.MouseEventInfo, nexacro.MoveEventInfo);
	nexacro.MoveEventInfo.prototype = _pMoveEventInfo;
	_pMoveEventInfo._type_name = "MoveEventInfo";

	delete _pMoveEventInfo;

	nexacro.SizeEventInfo = function (obj, id, width, height) {
		this.id = this.eventid = id || "onsize";
		this.fromobject = this.fromreferenceobject = obj;

		this.cx = width;
		this.cy = height;

		this.reverse = false;

		this._orientation = nexacro._getMobileOrientation();

		switch (this._orientation) {
			case 0:
				this.orientation = "portrait";
				break;
			case 1:
				this.orientation = "portrait";
				this.reverse = true;
				break;
			case 2:
				this.orientation = "landscape";
				this.reverse = true;
				break;
			case 3:
				this.orientation = "landscape";
				break;
			default:
				this.orientation = "resize";
				break;
		}
	};
	var _pSizeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.SizeEventInfo);
	nexacro.SizeEventInfo.prototype = _pSizeEventInfo;
	_pSizeEventInfo._type_name = "SizeEventInfo";

	delete _pSizeEventInfo;

	nexacro.KeyEventInfo = function (obj, id, altKey, ctrlKey, shiftKey, metaKey, key_code, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onkey";

		this.cancelable = true;
		this.bubbles = true;

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = altKey || false;
		this.ctrlKey = ctrlKey || false;
		this.shiftKey = shiftKey || false;
		this.metaKey = metaKey || false;
		this.keycode = key_code;
	};
	var _pKeyEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.KeyEventInfo);
	nexacro.KeyEventInfo.prototype = _pKeyEventInfo;
	_pKeyEventInfo._type_name = "KeyEventInfo";

	delete _pKeyEventInfo;

	nexacro.MouseEventInfo = function (obj, id, strButton, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onmouse";

		this.cancelable = true;
		this.bubbles = true;

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = altKey || false;
		this.ctrlKey = ctrlKey || false;
		this.button = strButton || "";
		this.shiftKey = shiftKey || false;
		this.metaKey = metaKey || false;
		this.screenX = screenX || -1;
		this.screenY = screenY || -1;
		this.canvasX = canvasX || -1;
		this.canvasY = canvasY || -1;
		this.clientX = clientX || -1;
		this.clientY = clientY || -1;
	};

	var _pMouseEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MouseEventInfo);
	nexacro.MouseEventInfo.prototype = _pMouseEventInfo;
	_pMouseEventInfo._type_name = "MouseEventInfo";

	delete _pMouseEventInfo;

	nexacro.ClickEventInfo = function (obj, id, strButton, altKey, ctrlKey, shiftKey, metaKey, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onclick";

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = altKey || false;
		this.ctrlKey = ctrlKey || false;
		this.button = strButton || "";
		this.shiftKey = shiftKey || false;
		this.metaKey = metaKey || false;
		this.screenX = (screenX === undefined ? -1 : screenX);
		this.screenY = (screenY === undefined ? -1 : screenY);
		this.canvasX = (canvasX === undefined ? -1 : canvasX);
		this.canvasY = (canvasY === undefined ? -1 : canvasY);
		this.clientX = (clientX === undefined ? -1 : clientX);
		this.clientY = (clientY === undefined ? -1 : clientY);
	};

	var _pClickEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ClickEventInfo);
	nexacro.ClickEventInfo.prototype = _pClickEventInfo;
	_pClickEventInfo._type_name = "ClickEventInfo";

	delete _pClickEventInfo;
	nexacro.MouseWheelEventInfo = function (obj, id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, delta, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onmousewheel";

		this.bubbles = true;
		this.cancelable = true;

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = alt_key || false;
		this.ctrlKey = ctrl_key || false;
		this.button = button || "";
		this.shiftKey = shift_key || false;
		this.metaKey = meta_key || false;
		this.screenX = screenX || -1;
		this.screenY = screenY || -1;
		this.canvasX = canvasX || -1;
		this.canvasY = canvasY || -1;
		this.clientX = clientX || -1;
		this.clientY = clientY || -1;
		this.amount = delta;
	};
	var _pMouseWheelEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.MouseWheelEventInfo);
	nexacro.MouseWheelEventInfo.prototype = _pMouseWheelEventInfo;
	_pMouseWheelEventInfo._type_name = "MouseWheelEventInfo";

	delete _pMouseWheelEventInfo;

	nexacro.ScrollEventInfo = function (obj, id, pos, type, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onscroll";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;

		this.pos = pos;
		this.type = type;
	};
	var _pScrollEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ScrollEventInfo);
	nexacro.ScrollEventInfo.prototype = _pScrollEventInfo;
	_pScrollEventInfo._type_name = "ScrollEventInfo";

	delete _pScrollEventInfo;

	nexacro.DragEventInfo = function (obj, id, dragdata, userdata, src_comp, src_refer_comp, from_comp, from_refer_comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		this.id = this.eventid = id || "ondrag";
		if (!from_refer_comp) {
			from_refer_comp = from_comp;
		}

		this.cancelable = true;
		this.bubbles = true;

		this.dragdata = dragdata;
		this.userdata = userdata;
		this.sourceobject = src_comp;
		this.sourcereferenceobject = src_refer_comp;
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.altKey = alt_key || false;
		this.ctrlKey = ctrl_key || false;
		this.metaKey = meta_key || false;
		this.button = button || "";
		this.shiftKey = shift_key || false;
		this.screenX = screenX || -1;
		this.screenY = screenY || -1;
		this.canvasX = canvasX || -1;
		this.canvasY = canvasY || -1;
		this.clientX = clientX || -1;
		this.clientY = clientY || -1;
	};

	var _pDragEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DragEventInfo);
	nexacro.DragEventInfo.prototype = _pDragEventInfo;
	_pDragEventInfo._type_name = "DragEventInfo";

	_pDragEventInfo.set_dragdata = function (v) {
		if (this.dragdata != v) {
			this.dragdata = v;
		}
	};
	_pDragEventInfo.set_userdata = function (v) {
		if (this.userdata != v) {
			this.userdata = v;
		}
	};

	delete _pDragEventInfo;

	nexacro.DragDataObject = function (id) {
		this.id = id || "dragdataobject";

		this._data_table = {
		};
	};

	var _pDragDataObject = nexacro._createPrototype(nexacro.Object, nexacro.DragDataObject);
	nexacro.DragDataObject.prototype = _pDragDataObject;
	_pDragDataObject._type_name = "DragDataObject";

	_pDragDataObject.setData = function (type, value) {
		if (this._data_table[type]) {
			delete this._data_table[type];
		}

		this._data_table[type] = value;
	};

	_pDragDataObject.getData = function (type) {
		if (this._data_table[type]) {
			return this._data_table[type];
		}

		return null;
	};

	_pDragDataObject.isAvailableData = function (type) {
		if (this._data_table[type]) {
			return true;
		}

		return false;
	};

	delete _pDragDataObject;

	nexacro.CharEventInfo = function (obj, id, chartext, pretext, posttext) {
		this.id = this.eventid = id || "onchar";
		this.fromobject = this.fromreferenceobject = obj;

		this.chartext = chartext;
		this.posttext = posttext;
		this.pretext = pretext;
	};
	var _pCharEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.CharEventInfo);
	nexacro.CharEventInfo.prototype = _pCharEventInfo;
	_pCharEventInfo._type_name = "CharEventInfo";

	_pCharEventInfo.set_chartext = function (v) {
		this.chartext = v;
	};

	delete _pCharEventInfo;


	nexacro.GestureEventInfo = function (obj, id, pointinfos, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "ongesture";

		this.bubbles = true;

		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.pointinfos = pointinfos;
		this.pointcount = pointinfos ? pointinfos.length : 0;
	};
	var _pGestureEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.GestureEventInfo);
	nexacro.GestureEventInfo.prototype = _pGestureEventInfo;
	_pGestureEventInfo._type_name = "GestureEventInfo";
	delete _pGestureEventInfo;

	nexacro.TapEventInfo = function (obj, id, pointinfos, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "ontap";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.pointinfos = pointinfos;
		this.pointcount = pointinfos ? pointinfos.length : 0;
	};
	var _pTapEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.TapEventInfo);
	nexacro.TapEventInfo.prototype = _pTapEventInfo;
	_pTapEventInfo._type_name = "TapEventInfo";
	delete _pTapEventInfo;

	nexacro.LongPressEventInfo = function (obj, id, pointinfos, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onlongpress";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.pointinfos = pointinfos;
		this.pointcount = pointinfos ? pointinfos.length : 0;

		this.cancelable = true;
		this.bubbles = true;
	};
	var _pLongPressEventInfo = nexacro._createPrototype(nexacro.GestureEventInfo, nexacro.LongPressEventInfo);
	nexacro.LongPressEventInfo.prototype = _pLongPressEventInfo;
	_pLongPressEventInfo._type_name = "LongPressEventInfo";
	delete _pLongPressEventInfo;

	nexacro.SlideEventInfo = function (obj, id, pointinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onslide";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.pointinfos = pointinfos;
		this.pointcount = pointinfos ? pointinfos.length : 0;
		this.xaccvalue = xaccvalue;
		this.yaccvalue = yaccvalue;
		this.xdeltavalue = xdeltavalue;
		this.ydeltavalue = ydeltavalue;

		this.cancelable = true;
		this.bubbles = true;
	};
	var _pSlideEventInfo = nexacro._createPrototype(nexacro.GestureEventInfo, nexacro.SlideEventInfo);
	nexacro.SlideEventInfo.prototype = _pSlideEventInfo;
	_pSlideEventInfo._type_name = "SlideEventInfo";
	delete _pSlideEventInfo;

	nexacro.PinchEventInfo = function (obj, id, pointinfos, accvalue, deltavalue, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onpinch";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.pointinfos = pointinfos;
		this.pointcount = pointinfos ? pointinfos.length : 0;
		this.accvalue = accvalue;
		this.deltavalue = deltavalue;

		this.cancelable = true;
		this.bubbles = true;
	};
	var _pPinchEventInfo = nexacro._createPrototype(nexacro.GestureEventInfo, nexacro.PinchEventInfo);
	nexacro.PinchEventInfo.prototype = _pPinchEventInfo;
	_pPinchEventInfo._type_name = "PinchEventInfo";
	delete _pPinchEventInfo;

	nexacro.FlingEventInfo = function (obj, id, pointinfos, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onfling";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;

		this.pointcount = touchlen;
		this.xstartvalue = xstartvalue;
		this.ystartvalue = ystartvalue;
		this.xdeltavalue = xdeltavalue;
		this.ydeltavalue = ydeltavalue;

		this.cancelable = true;
		this.bubbles = true;
	};
	var _pFlingEventInfo = nexacro._createPrototype(nexacro.GestureEventInfo, nexacro.FlingEventInfo);
	nexacro.FlingEventInfo.prototype = _pFlingEventInfo;
	_pFlingEventInfo._type_name = "FlingEventInfo";
	delete _pFlingEventInfo;

	nexacro.ZoomEventInfo = function (obj, id, zoomfactor, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "onzoom";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.zoom = zoomfactor;
	};
	var _pZoomEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ZoomEventInfo);
	nexacro.ZoomEventInfo.prototype = _pZoomEventInfo;
	_pZoomEventInfo._type_name = "ZoomEventInfo";
	delete _pZoomEventInfo;

	nexacro.OrientationChangeEventInfo = function (obj, id, orientation) {
		this.id = this.eventid = id || "onzoom";
		this.fromobject = null;
		this.fromreferenceobject = null;
		this._orientation = orientation;
		if (orientation == 0 || orientation == 1) {
			this.orientation = "portrait";
		}
		else if (orientation == 2 || orientation == 3) {
			this.orientation = "landscape";
		}
		else {
			this.orientation = "";
		}
	};
	var _pOrientationChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.OrientationChangeEventInfo);
	nexacro.OrientationChangeEventInfo.prototype = _pOrientationChangeEventInfo;
	_pOrientationChangeEventInfo._type_name = "OrientationChangeEventInfo";
	delete _pOrientationChangeEventInfo;

	nexacro.ContextMenuEventInfo = function (obj, id, from_comp, from_refer_comp) {
		this.id = this.eventid = id || "oncontextmenu";
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
		this.cancelable = true;
	};
	var _pContextMenuEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ContextMenuEventInfo);
	nexacro.ContextMenuEventInfo.prototype = _pContextMenuEventInfo;
	_pContextMenuEventInfo._type_name = "ContextMenuEventInfo";
	delete _pContextMenuEventInfo;


	nexacro.TouchInputInfo = function (elem, type, touchid, time, is_first, screenX, screenY, windowX, windowY) {
		this.touchid = touchid;
		this.type = {
			touchstart : 0, 
			touchmove : 1, 
			touchend : 2, 
			touchcancel : 3
		}[type];
		this.time = time;
		this.isfirst = is_first;
		this.screenX = screenX;
		this.screenY = screenY;
		this.canvasX = undefined;
		this.canvasY = undefined;
		this.clientX = undefined;
		this.clientY = undefined;

		this._elem = elem;
		this._current_state = type;
		this._x = this._oldx = this._startx = windowX;
		this._y = this._oldy = this._starty = windowY;
	};
	var _pTouchInputInfo = nexacro._createPrototype(nexacro.Object, nexacro.TouchInputInfo);
	nexacro.TouchInputInfo.prototype = _pTouchInputInfo;
	_pTouchInputInfo._type_name = "TouchInputInfo";

	_pTouchInputInfo._updateInfo = function (elem, type, time, screenX, screenY, windowX, windowY) {
		this.type = {
			touchstart : 0, 
			touchmove : 1, 
			touchend : 2, 
			touchcancel : 3
		}[type];
		this.time = time;
		this.screenX = screenX;
		this.screenY = screenY;

		this._elem = elem;
		this._current_state = type;
		this._oldx = this._x;
		this._oldy = this._y;
		this._x = windowX;
		this._y = windowY;
	};

	delete _pTouchInputInfo;

	nexacro.TouchEventInfo = function (obj, id, touchinfos, changedtouchinfos, from_comp, from_refer_comp) {
		nexacro.Event.call(this, obj, id || "ontouch");

		this.cancelable = true;
		this.bubbles = true;

		this.touchinputinfos = touchinfos;
		this.changedtouchinputinfos = changedtouchinfos;
		this.fromobject = from_comp;
		this.fromreferenceobject = from_refer_comp;
	};
	var _pTouchEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.TouchEventInfo);
	nexacro.TouchEventInfo.prototype = _pTouchEventInfo;
	_pTouchEventInfo._type_name = "TouchEventInfo";
	delete _pTouchEventInfo;

	nexacro.ItemClickEventInfo = function (obj, id, index, itemtext, itemvalue, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY) {
		nexacro.ClickEventInfo.call(this, obj, id || "onitemclick", button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY);
		this.fromobject = this.fromreferenceobject = obj;

		this.index = index;
		this.itemtext = itemtext;
		this.itemvalue = itemvalue;
	};
	var _pItemClickEventInfo = nexacro._createPrototype(nexacro.ClickEventInfo, nexacro.ItemClickEventInfo);
	nexacro.ItemClickEventInfo.prototype = _pItemClickEventInfo;
	_pItemClickEventInfo._type_name = "ItemClickEventInfo";

	delete _pItemClickEventInfo;

	nexacro.ChangeEventInfo = function (obj, id, pretext, prevalue, posttext, postvalue) {
		nexacro.Event.call(this, obj, id || "onchange");

		this.pretext = pretext;
		this.prevalue = prevalue;
		this.posttext = posttext;
		this.postvalue = postvalue;
	};
	var _pChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ChangeEventInfo);
	nexacro.ChangeEventInfo.prototype = _pChangeEventInfo;
	_pChangeEventInfo._type_name = "ChangeEventInfo";

	delete _pChangeEventInfo;

	nexacro.ChangedEventInfo = function (obj, id, pretext, prevalue, posttext, postvalue) {
		this.id = this.eventid = id || "onchanged";
		this.fromobject = this.fromreferenceobject = obj;

		this.pretext = pretext;
		this.prevalue = prevalue;
		this.posttext = posttext;
		this.postvalue = postvalue;
	};
	var _pChangedEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ChangedEventInfo);
	nexacro.ChangedEventInfo.prototype = _pChangedEventInfo;
	_pChangedEventInfo._type_name = "ChangedEventInfo";

	delete _pChangedEventInfo;

	nexacro.ItemChangeEventInfo = function (obj, id, preindex, pretext, prevalue, postindex, posttext, postvalue) {
		this.id = this.eventid = id || "onitemchagne";
		this.fromobject = this.fromreferenceobject = obj;

		this.preindex = preindex;
		this.pretext = pretext;
		this.prevalue = prevalue;
		this.postindex = postindex;
		this.posttext = posttext;
		this.postvalue = postvalue;
	};
	var _pItemChangeEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.ItemChangeEventInfo);
	nexacro.ItemChangeEventInfo.prototype = _pItemChangeEventInfo;
	_pItemChangeEventInfo._type_name = "ItemChangeEventInfo";

	delete _pItemChangeEventInfo;

	nexacro.DuplicateExecutionEventInfo = function (obj, id, _arguments) {
		this.id = this.eventid = id || "onduplicateexecution";
		this.fromobject = this.fromreferenceobject = obj;

		this.arguments = _arguments;
	};
	var _pDuplicateExecutionEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DuplicateExecutionEventInfo);
	nexacro.DuplicateExecutionEventInfo.prototype = _pDuplicateExecutionEventInfo;
	_pDuplicateExecutionEventInfo._type_name = "DuplicateExecutionEventInfo";

	delete _pDuplicateExecutionEventInfo;

	nexacro.UserNotify = function (obj, id, notifyid, message) {
		this.id = this.eventid = id || "onusernotify";
		this.fromobject = this.fromreferenceobject = obj;

		this.notifyid = notifyid;
		this.message = message;
	};
	var _pEventUserNotify = nexacro._createPrototype(nexacro.Event, nexacro.UserNotify);
	nexacro.UserNotify.prototype = _pEventUserNotify;
	_pEventUserNotify._type_name = "UserNotifyEvent";

	delete _pEventUserNotify;

	nexacro.ApplicationUserNotify = function (obj, id, userdata) {
		this.id = this.eventid = id || "onusernotify";
		this.fromobject = this.fromreferenceobject = obj;

		this.userdata = userdata;
	};
	var _pEventAppUserNotify = nexacro._createPrototype(nexacro.Event, nexacro.ApplicationUserNotify);
	nexacro.ApplicationUserNotify.prototype = _pEventAppUserNotify;
	_pEventAppUserNotify._type_name = "ApplicationUserNotifyEvent";
	delete _pEventAppUserNotify;

	nexacro.AddLog = function (obj, id, message) {
		this.id = this.eventid = id || "onaddlog";
		this.fromobject = this.fromreferenceobject = obj;
		this.message = message;
	};
	var _pEventAddLog = nexacro._createPrototype(nexacro.Event, nexacro.AddLog);
	nexacro.AddLog.prototype = _pEventAddLog;
	_pEventAddLog._type_name = "AddLogEvent";
	delete _pEventAddLog;

	nexacro.Communication = function (obj, id, state) {
		this.id = this.eventid = id || "oncommunication";
		this.fromobject = this.fromreferenceobject = obj;
		this.state = state;
	};
	var _pEventCommunication = nexacro._createPrototype(nexacro.Event, nexacro.Communication);
	nexacro.Communication.prototype = _pEventCommunication;
	_pEventCommunication._type_name = "CommunicationEvent";
	delete _pEventCommunication;

	nexacro.NotificationEventInfo = function (obj, id, reason, messages) {
		this.id = this.eventid = id || "onnotification";
		this.fromobject = this.fromreferenceobject = obj;

		this.reason = reason;
		if (this.reason == 200 || this.resaon == '200') {
			this.messages = messages;
		}
	};
	var _pNotificationEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.NotificationEventInfo);
	nexacro.NotificationEventInfo.prototype = _pNotificationEventInfo;
	_pNotificationEventInfo._type_name = "NotificationEventInfo";

	delete _pNotificationEventInfo;

	nexacro.DevicePermissionEventInfo = function (obj, id, reason, status) {
		this.id = this.eventid = id || "ondevicepermission";
		this.fromobject = this.fromreferenceobject = obj;

		this.reason = reason;
		this.status = status;
	};
	var _pDevicePermissionEventInfo = nexacro._createPrototype(nexacro.Event, nexacro.DevicePermissionEventInfo);
	nexacro.DevicePermissionEventInfo.prototype = _pDevicePermissionEventInfo;
	_pDevicePermissionEventInfo._type_name = "DevicePermissionEventInfo";

	delete _pDevicePermissionEventInfo;

	nexacro._gen_arrmap = function (arr) {
		var arr_map = {
		};
		var len = arr.length;
		for (var i = 0; i < len; i++) {
			arr_map[arr[i]] = i;
		}
		return arr_map;
	};


	{
		(function () {
			var _base64keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split('');
			var _base64keys = nexacro._gen_arrmap(_base64keyStr);
			var _re_not_base64Chars = /[^A-Za-z0-9\+\/\=]/g;

			nexacro.base64Encode = function (input) {
				var output = "";
				var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
				var i = 0;

				input = nexacro.utf8Encode(input);

				while (i < input.length) {
					chr1 = input.charCodeAt(i++);
					chr2 = input.charCodeAt(i++);
					chr3 = input.charCodeAt(i++);

					enc1 = chr1 >> 2;
					enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
					enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
					enc4 = chr3 & 63;

					if ((+chr2) != (+chr2)) {
						enc3 = enc4 = 64;
					}
					else if ((+chr3) != (+chr3)) {
						enc4 = 64;
					}

					output = output + _base64keyStr[enc1] + _base64keyStr[enc2] + _base64keyStr[enc3] + _base64keyStr[enc4];
				}

				return output;
			};

			nexacro.base64Decode = function (input) {
				var output = "";
				var chr1, chr2, chr3;
				var enc1, enc2, enc3, enc4;
				var i = 0;

				input = input.replace(_re_not_base64Chars, "");

				while (i < input.length) {
					enc1 = _base64keys[input[i++]];
					enc2 = _base64keys[input[i++]];
					enc3 = _base64keys[input[i++]];
					enc4 = _base64keys[input[i++]];

					chr1 = (enc1 << 2) | (enc2 >> 4);
					chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
					chr3 = ((enc3 & 3) << 6) | enc4;

					output = output + String.fromCharCode(chr1);

					if (enc3 != 64) {
						output = output + String.fromCharCode(chr2);
					}
					if (enc4 != 64) {
						output = output + String.fromCharCode(chr3);
					}
				}
				return nexacro.utf8Decode(output);
			};

			nexacro.utf8Encode = function (string) {
				var utf = "";
				for (var i = 0, n = string.length; i < n; i++) {
					var c = string.charCodeAt(i);

					if (c == 13) {
						if (string.charCodeAt(i + 1) != '\n') {
							utf += String.fromCharCode(c);
						}
					}
					else if (c < 128) {
						utf += String.fromCharCode(c);
					}
					else if ((c > 127) && (c < 2048)) {
						utf += String.fromCharCode((c >> 6) | 192);
						utf += String.fromCharCode((c & 63) | 128);
					}
					else {
						utf += String.fromCharCode((c >> 12) | 224);
						utf += String.fromCharCode(((c >> 6) & 63) | 128);
						utf += String.fromCharCode((c & 63) | 128);
					}
				}
				return utf;
			};

			nexacro.utf8Decode = function (utftext) {
				var i = 0;
				var c = c1 = c2 = 0;

				var string = [];
				while (i < utftext.length) {
					c = utftext.charCodeAt(i);

					if (c < 128) {
						string += String.fromCharCode(c);
						i++;
					}
					else if ((c > 191) && (c < 224)) {
						c2 = utftext.charCodeAt(i + 1);
						string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
						i += 2;
					}
					else {
						c2 = utftext.charCodeAt(i + 1);
						c3 = utftext.charCodeAt(i + 2);
						string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
						i += 3;
					}
				}
				return string;
			};
		})();
	}

	nexacro._checkBase64String = function (str) {
		var regExp = /[^A-Za-z0-9+\/=]/g;

		if (str == "" || str == null) {
			return false;
		}

		if (str.length >= 10 && str.substr(0, 10).toLowerCase() == "data:image") {
			return true;
		}

		if (str.match(regExp) == null) {
			return true;
		}

		regExp = null;

		return false;
	};

	nexacro._inputsetCaretPos = function (input_handle, _doc) {
		var owner_doc = (input_handle.ownerDocument || input_handle.document);
		if (_doc) {
			if (_doc.hasFocus) {
				is_active_window = _doc.hasFocus();

				if (is_active_window && input_handle.setSelectionRange) {
					if (input_handle == _doc.activeElement) {
						_doc.getSelection().removeAllRanges();
					}
				}
				else if (is_active_window && ('selection' in document)) {
					var selection = _doc.selection;
					var range = selection.createRange();
					if (input_handle == range.parentElement()) {
						selection.empty();
					}
				}
			}
		}
	};

	nexacro._mergeUrl = function (left, right) {
		if (left && right) {
			var rpos = right.indexOf("/");
			if (left.charAt(left.length - 1) == '/') {
				if (right.charAt(0) == '/') {
					return left + right.substring(1);
				}
				else {
					return left + right;
				}
			}
			else {
				if (right.charAt(0) == '/') {
					return left + right;
				}
				else {
					return left + '/' + right;
				}
			}
		}
		else {
			return left || right;
		}
	};


	nexacro._findParentComponent = function (elem) {
		var _comp = elem.parent;
		while (_comp && !_comp._is_component) {
			_comp = _comp.parent;
		}
		return _comp;
	};
	nexacro._findParentForm = function (comp) {
		var ctx = comp.parent;
		while (ctx && !ctx._is_form) {
			ctx = ctx.parent;
		}
		return ctx;
	};
	nexacro._findReferenceForm = function (comp) {
		var ctx = comp;
		while (ctx && !ctx._is_form) {
			ctx = ctx.parent;
		}
		return ctx;
	};

	nexacro._findParentContext = function (comp) {
		var ctx = comp.parent;
		while (ctx && !ctx._is_context) {
			ctx = ctx.parent;
		}
		return ctx;
	};
	nexacro._findReferenceContext = function (comp) {
		var ctx = comp;
		while (ctx && !ctx._is_context) {
			ctx = ctx.parent;
		}
		return ctx;
	};

	nexacro._findParentFrame = function (comp) {
		var frame = comp.parent;
		while (frame && !frame._is_frame) {
			frame = frame.parent;
		}
		return frame;
	};
	nexacro._findParentWindow = function (comp) {
		var win = comp.parent;
		while (win && !win._is_window) {
			win = win.parent;
		}
		return win;
	};



	nexacro._setForwardingSystemEventHandlers = function (ptype) {
		var base = nexacro.Component.prototype;
		ptype._on_sys_focus = base._on_sys_focus_forward;
		ptype._on_sys_lbuttondown = base._on_sys_lbuttondown_forward;
		ptype._on_sys_lbuttonup = base._on_sys_lbuttonup_forward;
		ptype._on_sys_rbuttondown = base._on_sys_rbuttondown_forward;
		ptype._on_sys_rbuttonup = base._on_sys_rbuttonup_forward;
		ptype._on_sys_mouseenter = base._on_sys_mouseenter_forward;
		ptype._on_sys_mouseleave = base._on_sys_mouseleave_forward;
		ptype._on_sys_mousemove = base._on_sys_mousemove_forward;
		ptype._on_sys_keydown = base._on_sys_keydown_forward;
		ptype._on_sys_keypress = base._on_sys_keypress_forward;
		ptype._on_sys_keyup = base._on_sys_keyup_forward;
		ptype._on_sys_dblclick = base._on_sys_dblclick_forward;
		ptype._on_sys_mousewheel = base._on_sys_mousewheel_forward;
		ptype._on_sys_dragleave = base._on_sys_dragleave_forward;
		ptype._on_sys_drop = base._on_sys_drop_forward;
		ptype._on_sys_dragenter = base._on_sys_dragenter_forward;
		ptype._on_sys_dragmove = base._on_sys_dragmove_forward;
		ptype._on_sys_touch = base._on_sys_touch_forward;
	};
	nexacro._setForMouseTrackSystemEventHandler = function (ptype) {
		var base = nexacro.Component.prototype;
		ptype._on_sys_lbuttondown = base._on_sys_lbuttondown_simpletrack;
		ptype._on_starttrack = base._on_starttrack_simpletrack;
		ptype._on_movetrack = base._on_movetrack_simpletrack;
		ptype._on_endtrack = base._on_movetrack_simpletrack;
	};

	nexacro._setStyleFinders_ForNonComponent = function (ptype) {
		var base = nexacro.Component.prototype;
		ptype._find_comp_pseudo_obj = base._find_comp_pseudo_obj;
		ptype._find_ctrl_pseudo_obj = base._find_comp_pseudo_obj;
		ptype._find_typedctrl_pseudo_obj = base._find_comp_pseudo_obj;
		ptype._updateCurrentStyle = base._updateCurrentStyle;
		ptype._find_pseudo_obj = base._find_pseudo_obj;
	};
	nexacro._setForComponetStyleFinder = function (ptype) {
		ptype._find_pseudo_obj = nexacro.Component.prototype._find_comp_pseudo_obj;
	};
	nexacro._setForControlStyleFinder = function (ptype) {
		ptype._find_pseudo_obj = nexacro.Component.prototype._find_ctrl_pseudo_obj;
	};
	nexacro._setForTypedControlStyleFinder = function (ptype) {
		ptype._find_pseudo_obj = nexacro.Component.prototype._find_typedctrl_pseudo_obj;
	};

	nexacro._setForEventListeners = function (ptype) {
		ptype._initEventHandlers = ptype._initEventListeners;
		ptype._clearEventHandlers = ptype._clearEventListeners;
	};



	nexacro._getValueForStyleBindExpr = function (comp, propobj, propid, rowidx) {
		if (propobj && propobj._bindtype != 0) {
			var compobj = comp;
			var dataset = comp._innerdataset;
			if (dataset == null) {
				propobj = null;
			}
			else {
				var val;
				if (propobj._bindtype == 1) {
					val = dataset.getColumn(rowidx, propobj._bindexpr);
				}
				else {
					var exprfn = compobj._exprcache[propobj._bindexpr];
					if (exprfn == null) {
						exprfn = dataset._createExprFunc(propobj._bindexpr);
						compobj._exprcache[propobj._bindexpr] = exprfn;
					}

					if ((typeof exprfn) == "function") {
						val = exprfn.call(compobj, rowidx, rowidx, compobj, dataset);
						if (val) {
							val = val.toString();
						}
					}
					else {
						val = propobj._bindexpr;
					}
				}
				if (val != null && val != "") {
					propobj = nexacro._getCachedStyleObj(propid, val);
				}
				else {
					propobj = null;
				}
			}
		}
		return propobj;
	};

	nexacro._communicationStatusTable = 
		{
		"stop" : 499
	};

	nexacro._CommunicationManager = {
	};
	nexacro._CacheList = {
	};
	nexacro._DataCacheList = {
	};

	nexacro._ParametersCache = function (id, value) {
		this.id = id;
		this.value = value;
	};
	nexacro._DataSetCache = function (id, colinfos, constVars, rawRecords) {
		this.id = id;
		this.rawRecords = null;
		this.colinfos = null;
		this.constVars = null;

		if (rawRecords) {
			this.rawRecords = rawRecords.slice(0, rawRecords.length);
		}

		if (colinfos) {
			this.colinfos = new nexacro.DSColumnInfoList();
			for (var i = 0, n = colinfos.length; i < n; i++) {
				this.colinfos.add(colinfos[i].id, colinfos[i]);
			}
		}

		if (constVars) {
			this.constVars = new nexacro.VariableList();
			for (var i = 0, n = constVars.length; i < n; i++) {
				this.constVars.add(constVars[i].id, constVars[i]);
			}
		}
	};

	nexacro._DataCache = function (parametersCaches, datasetCaches, last_modified, version) {
		this.parameters = parametersCaches;
		this.datasets = datasetCaches;
		this.last_modified = last_modified;
		this.version = version;
	};
	var _pDataCache = nexacro._createPrototype(nexacro.Object, nexacro._DataCache);
	nexacro._DataCache.prototype = _pDataCache;
	_pDataCache._type_name = "DataCache";

	_pDataCache._loadData = function (loadItem) {
		var err_info = this._loadParametersFromCache(loadItem);
		this._loadDatasetsFromCache(loadItem);

		return err_info;
	};

	_pDataCache._loadParametersFromCache = function (loadItem) {
		var params = this.parameters;
		var len = params.length;
		var form = loadItem.context;
		var id, val, code, message;

		for (var i = 0; i < len; i++) {
			id = params[i].id;
			val = params[i].value;

			if (id == "ErrorCode") {
				code = parseInt(val) | 0;
				if (isFinite(code) == false) {
					code = -1;
				}

				val = code;
			}
			else if (id == "ErrorMsg") {
				message = val;
			}
			else if (id in form) {
				if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
					form[id] = val;
				}
			}
			else {
				if (application._existVariable(id)) {
					application.setVariable(id, val);
				}
			}
		}

		return [code, message];
	};

	_pDataCache._loadDatasetsFromCache = function (loadItem) {
		var datasets = this.datasets;
		var outputDatasets = loadItem.outputDatasets;

		if (!outputDatasets) {
			return;
		}

		var len = outputDatasets.length;
		var form = loadItem.context;
		var ds_cache, ds;
		var localId, constVars, colinfos, rawRecords;

		for (var i = 0; i < len; i++) {
			localId = outputDatasets[i].lval;
			ds_cache = datasets[localId];
			if (!ds_cache) {
				continue;
			}

			constVars = ds_cache.constVars;
			colinfos = ds_cache.colinfos;
			rawRecords = ds_cache.rawRecords;

			ds = form._getDatasetObject(localId);
			if (ds) {
				var target_colinfos = colinfos;

				if (ds.useclientlayout) {
					ds.clearData();
					target_colinfos = ds.colinfos;
				}
				else {
					ds.clear();
					ds._copyConstColList(constVars);
					ds._appendColList(colinfos);
				}

				if (rawRecords) {
					if (target_colinfos == colinfos) {
						ds._rawRecords = rawRecords.slice(0, rawRecords.length);
					}
					else {
						if (colinfos) {
							var colid, colidx, colinfo, index;
							var expr = "(function(){ return function(arr) { var ret = new Array(); ";
							for (var j = 0, n = colinfos.length; j < n; j++) {
								colid = colinfos[j].id;
								colidx = target_colinfos._idxMap[colid];
								if (colidx >= 0) {
									index = target_colinfos[colidx]._index;
									expr += "ret[" + index + "] = arr[" + index + "];";
								}
							}

							expr += "return ret; };})();";

							var convertFn = nexacro._executeEvalStr(expr);
							for (var k = 0, n = rawRecords.length; k < n; k++) {
								ds._rawRecords[k] = convertFn(rawRecords[k]);
								ds._rawRecords[k]._rawidx = rawRecords[k]._rawidx;
								ds._rawRecords[k]._rtype = rawRecords[k]._rtype;
								if (rawRecords._orgcolstrings[k]) {
									ds._rawRecords._orgcolstrings[k] = convertFn(rawRecords._orgcolstrings[k]);
								}
							}
						}
					}

					ds._reFilter();
					ds._resetSortGroup();

					if (ds._eventstat) {
						ds.on_fire_onload(0, "", 0);
						if (ds._viewRecords.length > 0) {
							ds._forcesetRowPosition(0, 51);
						}
						else {
							ds._forcesetRowPosition(-1, 51);
						}
					}
					else if (ds._viewRecords.length > 0) {
						ds.rowposition = 0;
					}
				}
			}
		}
	};

	delete _pDataCache;

	nexacro._ImgInfoCacheList = {
	};
	nexacro.CommunicationItem = function (path, type, bcache, last_modified, version) {
		this.path = path;
		this._handle = null;
		this.callbackList = [];
		this.type = type;
		this.bcache = bcache;
		this.last_modified = last_modified;
		this.version = version ? version : "0";

		var ar = path.split("://");
		if (ar) {
			this.protocol = ar[0];
			switch (this.protocol) {
				case "http":
					this._protocol = 0;
					break;
				case "https":
					this._protocol = 1;
					break;
				case "file":
					this._protocol = 2;
					break;
				default:
					this._protocol = -1;
					break;
			}
		}

		nexacro._addCookieFromGlobalvariables();

		this._check_responseXML = false;
	};
	var _pCommunicationItem = nexacro.CommunicationItem.prototype;

	_pCommunicationItem.appendCallback = function (pthis, callbackFn) {
		var callbackList = this.callbackList;
		callbackList.push({
			target : pthis, 
			callback : callbackFn
		});
	};

	_pCommunicationItem.removeCallback = function (pthis, callbackFn) {
		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				if (item.pthis == pthis && item.callback == callbackFn) {
					callbackList.splice(i, 1);
					if (callbackList.length == 0) {
						if (this._handle) {
							nexacro.__cancelCommunication(this._handle);
						}
						this._handle = null;
						delete nexacro._CommunicationManager[this.path];
					}
					return true;
				}
			}
		}
		return false;
	};

	_pCommunicationItem._addCookieFromGlobalvariables = function () {
		var varlist = nexacro._getLocalStorage("_cookie_variables", []);
		nexacro._setCookielist(varlist);

		varlist = nexacro._getLocalStorage("_secure_cookie_variables", []);
		nexacro._setCookielist(varlist, true);
	};


	_pCommunicationItem._addCookieFromVariables = function (headers) {
		var len = headers.length;
		for (var i = 0; i < len; i++) {
			nexacro._setCookie(headers[i].id, headers[i].value);
		}
	};

	_pCommunicationItem._addCookieToGlobalVariable = function (cookieStr) {
		if (application && cookieStr) {
			var cookielist = cookieStr.split("; ");
			var cookievarCnt = cookielist.length;
			var sep_pos;
			var cookie_id, cookie_value;
			for (var i = 0; i < cookievarCnt; i++) {
				sep_pos = cookielist[i].indexOf("=");
				if (sep_pos <= 0) {
					continue;
				}

				cookie_id = cookielist[i].substr(0, sep_pos);
				cookie_value = cookielist[i].substr(sep_pos + 1);

				if (nexacro._indexOf(application._cookie_variables, cookie_id) >= 0 || nexacro._indexOf(application._secure_cookie_variables, cookie_id) >= 0) {
					application[cookie_id] = cookie_value;
				}
				else {
					if (application.addcookietovariable && (nexacro._indexOf(application._variables, cookie_id) < 0)) {
						application._addVariable(cookie_id, cookie_value, true, undefined, undefined, undefined, true);
					}
				}
			}
		}
	};

	_pCommunicationItem.on_decrypt = function (data) {
		if (this._protocol < 0) {
			var protocoladp = nexacro._getProtocol(this.protocol);
			if (protocoladp) {
				data = protocoladp.decrypt(this.path, data);
			}
		}
		return data;
	};

	_pCommunicationItem.on_encrypt = function (data) {
		if (this._protocol < 0) {
			var protocoladp = nexacro._getProtocol(this.protocol);
			if (protocoladp) {
				data = protocoladp.encrypt(this.path, data);
			}
		}
		return data;
	};

	_pCommunicationItem.on_start = nexacro._emptyFn;
	_pCommunicationItem.on_load = nexacro._emptyFn;

	_pCommunicationItem.on_load_module = function (data, cookie, last_modified) {
		delete nexacro._CommunicationManager[this.path];

		var module;
		if (typeof (data) == "function") {
			module = data;
		}
		else if (typeof (data) == "undefined") {
			var cache = nexacro._CacheList[this.path];
			module = cache.data;
		}
		else {
			if (this._protocol < 0) {
				data = this.on_decrypt(data);
			}

			this._addCookieToGlobalVariable(cookie);

			module = nexacro._executeEvalStr(data, this.path);
			module.bcache = this.bcache;

			if (this.bcache) {
				var cache = nexacro._CacheList[this.path];
				if (!cache) {
					nexacro._CacheList[this.path] = {
						data : module, 
						last_modified : last_modified, 
						version : this.version
					};
				}
				else {
					cache.data = module;
					cache.last_modified = last_modified;
					cache.version = this.version;
				}
			}
		}

		var callbackList = this.callbackList;
		var item = null;

		if (callbackList.length > 0) {
			while (item = callbackList.pop()) {
				var target = item.target;
				if (target && target.context && target.context.on_fire_oninit) {
					target.context.on_fire_oninit(target.context);
				}

				item.callback.call(target, this.path, 0, module);
			}
		}

		this._handle = null;
	};

	_pCommunicationItem.on_load_text = function (data, cookie, last_modified) {
		delete nexacro._CommunicationManager[this.path];

		if (this._protocol < 0) {
			data = this.on_decrypt(data);
		}

		this._addCookieToGlobalVariable(cookie);

		if (this.bcache) {
			var cache = nexacro._CacheList[this.path];
			if (!cache) {
				nexacro._CacheList[this.path] = {
					data : data, 
					last_modified : last_modified, 
					version : this.version
				};
			}
			else {
				cache.data = data;
				cache.last_modified = last_modified;
				cache.version = this.version;
			}
		}

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, 0, data);
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};
	_pCommunicationItem.on_load_image = function (width, height) {
		delete nexacro._CommunicationManager[this.path];

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, width, height);
				}
				else {
					nexacro._releaseImageUrl(this.path);
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};
	_pCommunicationItem.on_load_update = function (data, cookie) {
		delete nexacro._CommunicationManager[this.path];
		if (this._protocol < 0) {
			data = this.on_decrypt(data);
		}

		this._addCookieToGlobalVariable(cookie);

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, 0, "");
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};
	_pCommunicationItem.on_load_data = function (data, cookie, last_modified) {
		delete nexacro._CommunicationManager[this.path];
		if (this._protocol < 0) {
			data = this.on_decrypt(data);
		}

		this._addCookieToGlobalVariable(cookie);

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, 0, data);
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};

	_pCommunicationItem.on_progress = nexacro._emptyFn;
	_pCommunicationItem.on_progress_data = function (status, data) {
		if (this._protocol < 0) {
			data = this.on_decrypt(data);
		}

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, 1, data);
				}
			}
		}
	};

	_pCommunicationItem.on_error = function (errstatus, fireerrorcode, returncode, locationuri, reason) {
		delete nexacro._CommunicationManager[this.path];

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, errstatus, null, fireerrorcode, returncode, this.path, locationuri, reason);
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};

	_pCommunicationItem.on_error_image = function (width, height, _handle, errstatus, fireerrorcode, returncode, locationuri) {
		delete nexacro._CommunicationManager[this.path];

		var callbackList = this.callbackList;
		var n = callbackList.length;
		if (n > 0) {
			for (var i = 0; i < n; i++) {
				var item = callbackList[i];
				var target = item.target;
				if (target._is_alive != false) {
					item.callback.call(target, this.path, width, height, _handle, errstatus, null, fireerrorcode, returncode, this.path, locationuri);
				}
			}
			callbackList.splice(0, n);
		}
		this._handle = null;
	};

	delete _pCommunicationItem;

	nexacro._loadJSModule = function (path, target, handler, bcache, service, async) {
		var loadItem;
		var last_modified = "";
		if (async) {
			loadItem = nexacro._CommunicationManager[path];
			if (loadItem) {
				loadItem.appendCallback(target, handler);
				return loadItem._handle;
			}
		}

		var cache = nexacro._CacheList[path];

		if (service && cache) {
			if (service.cachelevel == "session" || service.cachelevel == "static") {
				if (!loadItem && cache.version >= service.version) {
					if (nexacro.Browser == "Runtime" && service.cachelevel == "session" && bcache == true) {
						loadItem = new nexacro.CommunicationItem(path, "module", bcache, last_modified, service ? service.version : "0");
						nexacro._CommunicationManager[path] = loadItem;
						loadItem.appendCallback(target, handler);
					}
					else {
						loadItem = new nexacro.CommunicationItem(path, "module", false);
						loadItem.appendCallback(target, handler);
					}
					loadItem._handle = nexacro._startCommunication(loadItem, path, "default", async, service);
					return loadItem._handle;
				}
			}
			cache.version = service.version;
			last_modified = cache.last_modified;
		}

		bcache = true;
		if (!service || service.cachelevel == "none" || nexacro._isSimulator() || (nexacro.Browser == "Runtime" && service.cachelevel == "dynamic")) {
			bcache = false;
		}

		if (!loadItem) {
			loadItem = new nexacro.CommunicationItem(path, "module", bcache, last_modified, service ? service.version : "0");
			nexacro._CommunicationManager[path] = loadItem;
			loadItem.appendCallback(target, handler);
		}
		else {
			loadItem.bcache = bcache;
		}

		loadItem._handle = nexacro._startCommunication(loadItem, path, service ? service.cachelevel : "none", async, service);
		return loadItem._handle;
	};

	nexacro._loadJSText = function (path, target, handler, service, async) {
		var loadItem;
		var last_modified = "";
		if (async) {
			loadItem = nexacro._CommunicationManager[path];
			if (loadItem) {
				loadItem.appendCallback(target, handler);
				return loadItem._handle;
			}
		}

		var cache = nexacro._CacheList[path];

		if (service && cache) {
			if (service.cachelevel == "session" || service.cachelevel == "static") {
				if (!loadItem && cache.version >= service.version) {
					loadItem = new nexacro.CommunicationItem(path, "module", false);
					loadItem.appendCallback(target, handler);

					loadItem.bcache = false;
					loadItem.on_load_module(cache.data, null);
					return loadItem._handle;
				}
			}

			cache.version = servcie.version;
			last_modified = cache.last_modified;
		}

		var bcache = true;
		if (!service || service.cachelevel == "none") {
			bcache = false;
		}

		if (!loadItem) {
			loadItem = new nexacro.CommunicationItem(path, "text", bcache, last_modified, service ? service.version : "0");
			nexacro._CommunicationManager[path] = loadItem;
			loadItem.appendCallback(target, handler);
		}

		loadItem._handle = nexacro._startCommunication(loadItem, path, service ? service.cachelevel : "none", async, service);
		return loadItem._handle;
	};


	nexacro._loadUpdateModule = function (path, target, handler, service, async, type, targetpath, ref, ver, failpass) {
		if (async) {
			var loadItem = nexacro._CommunicationManager[path];
			if (loadItem) {
				loadItem.appendCallback(target, handler);
			}
			else {
				loadItem = new nexacro.CommunicationItem(path, "update");
				nexacro._CommunicationManager[path] = loadItem;
				loadItem.appendCallback(target, handler);
				loadItem._handle = nexacro._startCommunication(loadItem, path, "dynamic", true, service, null, type, targetpath, ref, ver, failpass);
				return loadItem._handle;
			}
		}
		else {
			var loadItem = new nexacro.CommunicationItem(path, "update");
			loadItem.appendCallback(target, handler);
			nexacro._startCommunication(loadItem, path, "dynamic", false, service, null, type, targetpath, ref, ver, failpass);
		}

		handler.call(target, 0);
		return null;
	};

	nexacro._loadData = function (path, target, handler, service, form, svcid, indatasets, outdatasets, parameters, async, datatype, compress, isbulk) {
		var loadItem;
		var last_modified = "";
		var servicecachelevel = service.cachelevel;

		var d_cache = nexacro._DataCacheList[path];
		if (service && d_cache) {
			if (service.cachelevel == "session" || service.cachelevel == "static") {
				if (!service.version || d_cache.version >= service.version) {
					loadItem = new nexacro.TransactionItem(path, form, svcid, indatasets, outdatasets, parameters, datatype, async, undefined, undefined, isbulk);
					loadItem.appendCallback(target, handler);

					loadItem.bcache = false;
					loadItem.on_load_data(d_cache, "", "");
					return loadItem._handle;
				}
			}

			d_cache.version = service.version;
			last_modified = d_cache.last_modified;
		}

		loadItem = new nexacro.TransactionItem(path, form, svcid, indatasets, outdatasets, parameters, datatype, async, last_modified, service.version, isbulk);

		if (service && service.cachelevel != "none") {
			loadItem.bcache = true;
		}

		loadItem.last_modified = last_modified;

		loadItem.appendCallback(target, handler);
		loadItem.on_start();
		target.transactionList.push(loadItem);

		service.cachelevel = servicecachelevel;
		return nexacro._startCommunication(loadItem, path, service.cachelevel, async, service, (form ? form._url : ""), loadItem._sendData, datatype, compress);
	};

	nexacro._preloadData = function (path, target, handler, service, svcid, referer, args, async, datatype, compress) {
		var bcache = false;

		var last_modified = "";
		var d_cache = nexacro._DataCacheList[path];

		if (service && d_cache) {
			if (service.cachelevel == "session" || service.cachelevel == "static") {
				if (!service.version || d_cache.version >= service.version) {
					var loadItem = new nexacro.CommunicationItem(svcid, "data");
					loadItem.bcache = bcache;
					loadItem.appendCallback(target, handler);

					loadItem.bcache = false;
					loadItem.on_load_data(d_cache, "", "");

					return loadItem._handle;
				}
			}

			d_cache.version = servcie.version;
			last_modified = d_cache.last_modified;
		}

		if (service && service.cachelevel != "none") {
			bcache = true;
		}

		var tritem = new nexacro.TransactionItem(path, target.context, svcid, "", "", args, 0, async);

		if (async) {
			var loadItem = new nexacro.CommunicationItem(svcid, "data");
			loadItem.bcache = bcache;
			loadItem.last_modified = last_modified;

			loadItem.appendCallback(target, handler);
			loadItem._handle = nexacro._startCommunication(loadItem, path, "none", true, service, referer, tritem._sendData, datatype, compress);
			return loadItem._handle;
		}
		else {
			var loadItem = new nexacro.CommunicationItem(svcid, "data");
			loadItem.bcache = bcache;
			loadItem.last_modified = last_modified;

			loadItem.appendCallback(target, handler);
			nexacro._startCommunication(loadItem, path, "none", false, service, referer, tritem._sendData, datatype, compress);
		}
	};


	nexacro._startCommunication = function (loadItem, url, cachelevel, async, service, referer, data, ndatatype, compress, ver, failpass) {
		var path = url;
		var senddata = data;
		if (loadItem._protocol < 0) {
			var createadaptor = false;
			var protocoladp = nexacro._getProtocol(loadItem.protocol);
			if (!protocoladp) {
				var isprotocol = application._isProtocol(loadItem.protocol);
				if (isprotocol) {
					var adptorclass = nexacro._executeEvalStr(loadItem.protocol);
					if (adptorclass) {
						protocoladp = new adptorclass;
						createadaptor = true;
					}
				}
			}

			if (protocoladp) {
				if (createadaptor && protocoladp.initialize) {
					protocoladp.initialize(url);
					application._addProtocol(loadItem.protocol, protocoladp);
				}

				var protocol = protocoladp.getUsingProtocol(url);
				var sep = path.split("://");
				if (sep) {
					path = protocol + "://" + sep[1];
				}

				if (data && protocoladp.encrypt) {
					senddata = loadItem.on_encrypt(data);
				}

				if (protocoladp.getCommunicationHeaders) {
					var headers = protocoladp.getCommunicationHeaders(url);
					if (headers) {
						loadItem._addCookieFromVariables(headers);
					}
				}
			}
		}

		return nexacro.__startCommunication(loadItem, path, cachelevel, async, referer, senddata, ndatatype, compress, ver, failpass, service);
	};

	nexacro._removedatalist = function (datalist, index) {
		return (index < 0 || index > datalist.length) ? datalist : datalist.slice(0, index).concat(datalist.slice(index + 1, datalist.length));
	};
	nexacro._cancelLoad = function (_handle) {
		if (_handle) {
			nexacro.__cancelCommunication(_handle);
		}
	};

	nexacro._stopTransaction = function (form, flag) {
		if (!form && flag != 2) {
			return;
		}

		var form_window;
		var ret = 0;
		var contextlist = application._comm_contextlist.slice(0, application._comm_contextlist.length);
		for (var i = 0, n = contextlist.length; i < n; i++) {
			var cur_context = contextlist[i];
			if (flag == 0) {
				if (cur_context == form) {
					return form._stopTransaction();
				}
			}
			else if (flag == 1) {
				if (!form_window) {
					form_window = form._getWindow();
				}
				if (form_window == cur_context._getWindow()) {
					ret = cur_context._stopTransaction();
				}
			}
			else if (flag == 2) {
				ret = cur_context._stopTransaction();
			}
		}
		return ret;
	};

	nexacro._stopTransactionAll = function () {
		nexacro._stopTransaction(null, 2);
	};

	nexacro._registerHotkeyComp = function (base, comp, hotkey, altKey, ctrlKey, shiftKey) {
		if (!hotkey) {
			return;
		}

		if (hotkey instanceof nexacro.HotKey) {
			base._hotkey_list.push([comp, hotkey._keycode, ((hotkey._modifierkey & 0x02) == 0x02), ((hotkey._modifierkey & 0x01) == 0x01), ((hotkey._modifierkey & 0x04) == 0x04)]);
			hotkey._is_registered = true;
		}
		else {
			var keycode = hotkey;
			base._hotkey_list.push([comp, keycode, altKey, ctrlKey, shiftKey]);
		}
	};

	nexacro._unregisterHotkeyComp = function (base, comp, hotkey, altKey, ctrlKey, shiftKey) {
		if (!hotkey) {
			return;
		}

		var keycode;
		if (hotkey instanceof nexacro.HotKey) {
			keycode = hotkey._keycode;
			altKey = ((hotkey._modifierkey & 0x02) == 0x02);
			ctrlKey = ((hotkey._modifierkey & 0x01) == 0x01);
			shiftKey = ((hotkey._modifierkey & 0x04) == 0x04);
		}
		else {
			keycode = hotkey;
		}

		var hotkey_list = base._hotkey_list;
		var cnt = hotkey_list.length;
		for (var i = 0; i < cnt; i++) {
			var hotkey_info = hotkey_list[i];
			if (hotkey_info[1] == keycode && 
				hotkey_info[2] == altKey && 
				hotkey_info[3] == ctrlKey && 
				hotkey_info[4] == shiftKey) {
				for (var j = i; j < cnt - 1; j++) {
					hotkey_list[j] = hotkey_list[j + 1];
				}
				hotkey_list[cnt - 1] = null;
				hotkey_list.length = hotkey_list.length - 1;

				if (hotkey instanceof nexacro.HotKey) {
					hotkey._is_registered = false;
				}
				break;
			}
		}
	};


	nexacro._checkHighContrast = function () {
		return nexacro.__checkHighContrast();
	};

	nexacro._getFirstTouchInfo = function (touchinfos) {
		for (var i = 0, n = touchinfos.length; i < n; i++) {
			if (touchinfos[i].isfirst == true) {
				return touchinfos[i];
			}
		}
		return null;
	};

	nexacro._getElementRootComponent = function (elem) {
		var control_elem = elem;
		if (control_elem) {
			while (control_elem && !control_elem.linkedcontrol) {
				control_elem = control_elem.parent;
			}
			var comp = control_elem.linkedcontrol;
			while (comp && (comp._is_subcontrol || !comp._is_component)) {
				if (comp == comp.parent) {
					break;
				}
				comp = comp.parent;
			}
			return comp;
		}
	};

	nexacro._isDesktop = function () {
		var system_type = nexacro.SystemType.toLowerCase();
		switch (system_type) {
			case "win32":
			case "win64":
			case "mac":
			case "linux":
				return true;
				break;
			case "ipad":
			case "iphone":
			case "winphone":
			case "android":
				return false;
				break;
			default:
				return true;
				break;
		}

		return true;
	};

	nexacro._isPortrait = function () {
		var orientation = nexacro._getMobileOrientation();
		if (orientation == 0 || orientation == 1) {
			return true;
		}
		return false;
	};

	nexacro._enableaccessibility = false;
	nexacro._attachAccessibilityComponentFunctions = function () {
		nexacro._enableaccessibility = true;
		nexacro.__setEnableAccessibility(true);

		var _ptype = nexacro.Component.prototype;
		_ptype._setAccessibilityRole = function (role) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityRole(role);
			}
		};

		_ptype._setAccessibilityLabel = function (label) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityLabel(label);
			}
		};

		_ptype._setAccessibilityEnable = function (enable) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityEnable(enable);
			}
		};

		_ptype._setAccessibilityDescription = function (desc) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityDescription(desc);
			}
		};

		_ptype._setAccessibilityDescLevel = function (desclevel) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityDescLevel(desclevel);
			}
		};

		_ptype._setAccessibilityValue = function (value, bfocus) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityValue(value, this._input_element, bfocus);
			}
		};

		_ptype._setAccessibilityStatDisabled = function (disabled) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatDisabled(disabled);
			}
		};

		_ptype._setAccessibilityStatHidden = function (hidden) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatHidden(hidden);
			}
		};

		_ptype._setAccessibilityHidden = function (hidden) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityHidden(hidden);
			}
		};

		_ptype._setAccessibilityStatChecked = function (checked) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatChecked(checked);
			}
		};

		_ptype._setAccessibilityStatPressed = function (pressed) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatPressed(pressed);
			}
		};

		_ptype._setAccessibilityStatSelected = function (selected) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatSelected(selected);
			}
		};

		_ptype._setAccessibilityStatExpanded = function (expanded) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatExpanded(expanded);
			}
		};

		_ptype._setAccessibilityStatAutoComplete = function (autocomplete) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityStatAutoComplete(autocomplete);
			}
		};

		_ptype._setAccessibilityFlagHasPopup = function (haspopup) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagHasPopup(haspopup);
			}
		};

		_ptype._setAccessibilityFlagFocusable = function (focusable) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagFocusable(focusable);
			}
		};

		_ptype._setAccessibilityFlagReadOnly = function (readonly) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagReadOnly(readonly);
			}
		};

		_ptype._setAccessibilityFlagPassword = function (password) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagPassword(password);
			}
		};

		_ptype._setAccessibilityFlagMultiSelectable = function (multiselectable) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagMultiSelectable(multiselectable);
			}
		};

		_ptype._setAccessibilityFlagSelectable = function (selectable) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagSelectable(selectable);
			}
		};

		_ptype._setAccessibilityFlagDefaultButton = function (defaultbutton) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagDefaultButton(defaultbutton);
			}
		};

		_ptype._setAccessibilityFlagMultiLine = function (multiline) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityFlagMultiLine(multiline);
			}
		};

		_ptype._setAccessibilityInfoCount = function (count) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityInfoCount(count);
			}
		};

		_ptype._setAccessibilityInfoIndex = function (index) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityInfoIndex(index);
			}
		};

		_ptype._setAccessibilityInfoValueMax = function (valuemax) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityInfoValueMax(valuemax);
			}
		};

		_ptype._setAccessibilityInfoValueMin = function (valuemin) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityInfoValueMin(valuemin);
			}
		};

		_ptype._setAccessibilityInfoValueCur = function (valuecur) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityInfoValueCur(valuecur);
			}
		};


		_ptype._setAccessibilityInfoLevel = function (level) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityInfoLevel(level);
			}
		};

		_ptype._setAccessibilityHotKey = function (hotkey) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityHotKey(hotkey);
			}
		};

		_ptype._setAccessibilityActiveDescendant = function (subcomp) {
			if (this._control_element) {
				this._control_element.setElementAccessibilityActiveDescendant(subcomp.getElement(), subcomp._input_element);
			}
		};

		_ptype._notifyAccessibility = function (label, notifyevent) {
			if (this._control_element) {
				this._control_element.notifyAccessibility(label, notifyevent);
			}
		};

		_ptype._setAccessibilityStatFlag = function (status, pseudo) {
			if (status == "enable") {
				this._setAccessibilityStatDisabled(false);
			}
			if (status == "disable") {
				this._setAccessibilityStatDisabled(true);
			}
			else if (status == "readonly") {
				this._setAccessibilityFlagReadOnly(true);
			}
			else if (this._pushed) {
				this._setAccessibilityStatPressed(true);
			}
			else if (pseudo == "selected") {
				this._setAccessibilityStatPressed(false);
			}

			if (!this._pushed) {
				this._setAccessibilityStatPressed(false);
			}

			if (this._selected && status != "focus") {
				this._setAccessibilityStatSelected(true);
				this._setAccessibilityStatFocus();

				var window = this._getWindow();
				if (window && window._keydown_element) {
					this.on_apply_custom_setfocus(true);
				}
			}
		};

		_ptype._isAccessibilityEnable = function () {
			var accessibility = this.on_find_CurrentStyle_accessibility(this._pseudo);
			if (accessibility && !accessibility.enable) {
				return false;
			}
			return true;
		};

		_ptype._isItemAccessibilityEnable = function () {
			if (this.on_find_CurrentStyle_itemaccessibility) {
				var accessibility = this.on_find_CurrentStyle_itemaccessibility(this._pseudo);
				if (accessibility && accessibility.enable) {
					return true;
				}
			}
			return false;
		};

		_ptype._setAccessibilityStatFocus = function (evt_name) {
			if (this._control_element) {
				var _label = "";
				var focusdir = -1;
				if (evt_name == "tabkey") {
					focusdir = 0;
				}
				else if (evt_name == "shifttabkey") {
					focusdir = 1;
				}
				else if (evt_name == "downkey") {
					focusdir = 2;
				}
				else if (evt_name == "upkey") {
					focusdir = 3;
				}
				if (focusdir > -1) {
					var form = this._refform;
					if (form) {
						var current = (this.parent == form) ? this : null;
						if (focusdir > 1) {
							var baccessibility = nexacro._enableaccessibility;
						}

						if (current) {
							if (current == form._getTabOrderFirst(baccessibility)) {
								_label = current._getAccessibilityReadLabel() + " " + application.accessibilityfirstovertext;
							}
							if (current == form._getTabOrderLast(baccessibility)) {
								_label = current._getAccessibilityReadLabel() + " " + application.accessibilitylastovertext;
							}
						}
					}
				}

				this._control_element.setElementAccessibilityStatFocus(_label);
			}

			application._set_accessibility_history(this);
		};
	};

	nexacro._accessibilitytype = 1;
	nexacro._accessibilitydescreadtype = 0x01;
	nexacro._accessibilitywholereadtype = 0;
	nexacro._setAccessibilityType = function (accessibilitytype) {
		if (accessibilitytype == "sensereader") {
			application._accessibilitytype = 2;
			nexacro._accessibilitytype = 2;
		}
		else if (accessibilitytype == "jaws") {
			application._accessibilitytype = 3;
			nexacro._accessibilitytype = 3;
		}
		else if (accessibilitytype == "voiceover") {
			application._accessibilitytype = 4;
			nexacro._accessibilitytype = 4;
		}
		else if (accessibilitytype == "talkback") {
			application._accessibilitytype = 5;
			nexacro._accessibilitytype = 5;
		}

		nexacro.__setAccessibilityType(accessibilitytype);
	};
	nexacro._setAccessibilityDescReadType = function (v) {
		nexacro._accessibilitydescreadtype = 0;
		if (v.match("label")) {
			nexacro._accessibilitydescreadtype |= 0x01;
		}
		if (v.match("action")) {
			nexacro._accessibilitydescreadtype |= 0x02;
		}
		if (v.match("description")) {
			nexacro._accessibilitydescreadtype |= 0x04;
		}
	};
	nexacro._setAccessibilityWholeReadType = function (v) {
		if (v == "load") {
			nexacro._accessibilitywholereadtype = 1;
		}
		else if (v == "change") {
			nexacro._accessibilitywholereadtype = 2;
		}
		else if (v == "load,change") {
			nexacro._accessibilitywholereadtype = 3;
		}
		else {
			nexacro._accessibilitywholereadtype = 0;
		}
	};


	nexacro.ProtocolAdp = function () {
	};

	var _pProtocolAdp = nexacro._createPrototype(nexacro.Object, nexacro.ProtocolAdp);
	nexacro.ProtocolAdp.prototype = _pProtocolAdp;
	_pProtocolAdp._type_name = "ProtocolAdp";

	_pProtocolAdp.encrypt = function (url, data) {
		return data;
	};

	_pProtocolAdp.decrypt = function (url, data) {
		return data;
	};

	_pProtocolAdp.initialize = nexacro._emptyFn;
	_pProtocolAdp.finalize = nexacro._emptyFn;
	_pProtocolAdp.getUsingProtocol = function (url) {
		return "http";
	};

	_pProtocolAdp.getCommunicationHeaders = nexacro._emptyFn;

	delete _pProtocolAdp;


	nexacro.MakeError = function (type, obj, code, arg1) {
		var _args = Array.prototype.slice.call(arguments, 1);
		return nexacro._MakeError(type, _args);
	};

	nexacro.MakeEvalError = function (obj, code, arg1) {
		return nexacro._MakeError(EvalError, arguments);
	};

	nexacro.MakeRangeError = function (obj, code, arg1) {
		return nexacro._MakeError(RangeError, arguments);
	};

	nexacro.MakeReferenceError = function (obj, code, arg1) {
		return nexacro._MakeError(ReferenceError, arguments);
	};

	nexacro.MakeSyntaxError = function (obj, code, arg1) {
		return nexacro._MakeError(SyntaxError, arguments);
	};

	nexacro.MakeTypeError = function (obj, code, arg1) {
		return nexacro._MakeError(TypeError, arguments);
	};

	nexacro.MakeNativeError = function (obj, code, arg1) {
		return nexacro._MakeError(nexacro.NativeError, arguments);
	};

	nexacro.MakeCommunicationError = function (obj, code, arg1) {
		return nexacro._MakeError(nexacro.CommunicationError, arguments);
	};

	nexacro.MakeURIError = function (obj, code, arg1) {
		return nexacro._MakeError(URIError, arguments);
	};

	nexacro._MakeError = function (type, args) {
		var _args = Array.prototype.slice.call(args, 1);
		var str = application._getErrorMessge.apply(this, _args);
		var error;
		if (type && (typeof (type) == "function")) {
			error = new type(str);
		}
		else {
			error = new Error(str);
			error.name = type;
		}

		error.obj = args[0];
		return error;
	};

	nexacro.CommunicationError = function (message) {
		this.name = "CommunicationError";
		this.message = message;
		this.obj = null;
	};

	var _pCommunicationError = nexacro._createPrototype(Error, nexacro.CommunicationError);
	nexacro.CommunicationError.prototype = _pCommunicationError;
	nexacro.CommunicationError._type_name = "CommunicationError";
	delete _pCommunicationError;

	nexacro.NativeError = function (message) {
		this.name = "NativeError";
		this.message = message;
		this.obj = null;
	};
	var _pNativeError = nexacro._createPrototype(Error, nexacro.NativeError);
	nexacro.NativeError.prototype = _pNativeError;
	nexacro.NativeError._type_name = "NativeError";
	delete _pNativeError;

	if (!nexacro.AccessibilityUtil) {
		nexacro.AccessibilityUtil = {
		};
		nexacro.AccessibilityUtil.Hotkey = {
		};
		nexacro.AccessibilityUtil.Hotkey.NONE = 0;
		nexacro.AccessibilityUtil.Hotkey.FIRSTCELL = 1;
		nexacro.AccessibilityUtil.Hotkey.LASTCELL = 2;
		nexacro.AccessibilityUtil.Hotkey.FIRSTCELLINCOLUMN = 3;
		nexacro.AccessibilityUtil.Hotkey.LASTCELLINCOLUMN = 4;
		nexacro.AccessibilityUtil.Hotkey.FIRSTCELLINROW = 5;
		nexacro.AccessibilityUtil.Hotkey.LASTCELLINROW = 6;


		nexacro.AccessibilityUtil.GridHotkeyList = {
		};
		nexacro.AccessibilityUtil.GridHotkeyList[nexacro.Event.KEY_CTRL + " " + nexacro.Event.KEY_ALT + " " + nexacro.Event.KEY_HOME] = nexacro.AccessibilityUtil.Hotkey.FIRSTCELLINROW;
		nexacro.AccessibilityUtil.GridHotkeyList[nexacro.Event.KEY_CTRL + " " + nexacro.Event.KEY_ALT + " " + nexacro.Event.KEY_END] = nexacro.AccessibilityUtil.Hotkey.LASTCELLINROW;
		nexacro.AccessibilityUtil.GridHotkeyList[nexacro.Event.KEY_CTRL + " " + nexacro.Event.KEY_ALT + " " + nexacro.Event.KEY_PAGE_UP] = nexacro.AccessibilityUtil.Hotkey.FIRSTCELLINCOLUMN;
		nexacro.AccessibilityUtil.GridHotkeyList[nexacro.Event.KEY_CTRL + " " + nexacro.Event.KEY_ALT + " " + nexacro.Event.KEY_PAGE_DOWN] = nexacro.AccessibilityUtil.Hotkey.LASTCELLINCOLUMN;

		nexacro.AccessibilityUtil.getAccessibilityLabel = nexacro._emptyFn;
		nexacro.AccessibilityUtil.getAccessibilityAction = nexacro._emptyFn;
		nexacro.AccessibilityUtil.getAccessibilityDescription = nexacro._emptyFn;
		nexacro.AccessibilityUtil.setDOMNodeLabel = nexacro._emptyFn;
		nexacro.AccessibilityUtil.supportMobileApplicationAccessibility = nexacro._emptyFn;
		nexacro.AccessibilityUtil.unsupportMobileApplicationAccessibility = nexacro._emptyFn;
		nexacro.AccessibilityUtil.cancelTouchEvent = nexacro._emptyFn;
		nexacro.AccessibilityUtil.isUseTooltipText = function () {
			return true;
		};
		nexacro.AccessibilityUtil.init = function () {
			if (nexacro._accessibilitytype !== undefined) {
				var accessibilityjs = ["./nexacro14lib/framework/Accessibility.js"];
				nexacro.loadJSLibraries(accessibilityjs);
			}
		};
		nexacro.AccessibilityUtil.checkComponentHotkey = function (obj, keyCode, altKey, ctrlKey, shiftKey) {
			var strHotkey = "";
			var hotkeyList = null;

			if (ctrlKey) {
				strHotkey = strHotkey + nexacro.Event.KEY_CTRL + " ";
			}
			if (altKey) {
				strHotkey = strHotkey + nexacro.Event.KEY_ALT + " ";
			}
			if (shiftKey) {
				strHotkey = strHotkey + nexacro.Event.KEY_SHIFT + " ";
			}

			strHotkey = strHotkey + keyCode;

			if (obj instanceof nexacro.Grid) {
				hotkeyList = nexacro.AccessibilityUtil.GridHotkeyList;
			}

			if (hotkeyList) {
				return hotkeyList[strHotkey];
			}

			return nexacro.AccessibilityUtil.Hotkey.NONE;
		};
	}

	nexacro.loadJSLibraries = function (accessibilityjs) {
		if (accessibilityjs) {
			if (typeof accessibilityjs == "object") {
				for (var i = 0, n = accessibilityjs.length; i < n; i++) {
					var strSource = accessibilityjs[i];
					var script = document.createElement("script");
					script.type = "text/javascript";
					script.src = strSource;
					document.getElementsByTagName('HEAD')[0].appendChild(script);
				}
				return true;
			}
			else if (typeof accessibilityjs == "string") {
				var strSource = accessibilityjs;
				var script = document.createElement("script");
				script.type = "text/javascript";
				script.src = strSource;
				document.getElementsByTagName('HEAD')[0].appendChild(script);
				return true;
			}
		}
		return false;
	};

	if (!nexacro.Locale) {
		nexacro.Locale = function () {
		};

		nexacro.Locale._type_name = "Locale";

		nexacro.Locale.getLocaleInfo = function (locale, default_flag) {
			if (locale) {
				locale = locale.toLowerCase();
				locale = locale.replace(/-/g, "_");
			}

			switch (locale) {
				case "aa_DJ":
				case "aa_dj":
					{

						if (!nexacro.Locale.aa_DJ) {
							nexacro.Locale.aa_DJ = {
								name : "aa_DJ", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0044\u004A\u0046\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 

								weekday_names_long : ["\u0041\u0063\u0061\u0061\u0064\u0061", "\u0045\u0074\u006C\u0065\u0065\u006E\u0069", "\u0054\u0061\u006C\u0061\u0061\u0074\u0061", "\u0041\u0072\u0062\u0061\u0071\u0061", "\u004B\u0061\u006D\u0069\u0069\u0073\u0069", "\u0047\u0075\u006D\u0071\u0061\u0074\u0061", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0061\u0063\u0061", "\u0065\u0074\u006C", "\u0074\u0061\u006C", "\u0061\u0072\u0062", "\u006B\u0061\u006D", "\u0067\u0075\u006D", "\u0073\u0061\u0062"], 
								weekday_names_narrow : ["\u0061\u0063\u0061", "\u0065\u0074\u006C", "\u0074\u0061\u006C", "\u0061\u0072\u0062", "\u006B\u0061\u006D", "\u0067\u0075\u006D", "\u0073\u0061\u0062"], 
								month_names_long : ["\u0051\u0075\u006E\u0078\u0061\u0020\u0047\u0061\u0072\u0061\u0062\u006C\u0075", "\u004B\u0075\u0064\u006F", "\u0043\u0069\u0067\u0067\u0069\u006C\u0074\u0061\u0020\u004B\u0075\u0064\u006F", "\u0041\u0067\u0064\u0061\u0020\u0042\u0061\u0078\u0069\u0073\u0073\u006F", "\u0043\u0061\u0078\u0061\u0068\u0020\u0041\u006C\u0073\u0061", "\u0051\u0061\u0073\u0061\u0020\u0044\u0069\u0072\u0072\u0069", "\u0051\u0061\u0064\u006F\u0020\u0044\u0069\u0072\u0072\u0069", "\u004C\u0069\u0069\u0071\u0065\u006E", "\u0057\u0061\u0079\u0073\u0075", "\u0044\u0069\u0074\u0065\u006C\u0069", "\u0058\u0069\u006D\u006F\u006C\u0069", "\u004B\u0061\u0078\u0078\u0061\u0020\u0047\u0061\u0072\u0061\u0062\u006C\u0075"], 
								month_names_short : ["\u0071\u0075\u006E", "\u006E\u0061\u0068", "\u0063\u0069\u0067", "\u0061\u0067\u0064", "\u0063\u0061\u0078", "\u0071\u0061\u0073", "\u0071\u0061\u0064", "\u006C\u0065\u0071", "\u0077\u0061\u0079", "\u0064\u0069\u0074", "\u0078\u0069\u006D", "\u006B\u0061\u0078"], 
								month_names_narrow : ["\u0071\u0075\u006E", "\u006E\u0061\u0068", "\u0063\u0069\u0067", "\u0061\u0067\u0064", "\u0063\u0061\u0078", "\u0071\u0061\u0073", "\u0071\u0061\u0064", "\u006C\u0065\u0071", "\u0077\u0061\u0079", "\u0064\u0069\u0074", "\u0078\u0069\u006D", "\u006B\u0061\u0078"], 
								ampm : ["\u0073\u0061\u0061\u006B\u0075", "\u0063\u0061\u0072\u0072\u0061"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.aa_DJ;
					}
					break;
				case "aa_ER":
				case "aa_er":
					{

						if (!nexacro.Locale.aa_ER) {
							nexacro.Locale.aa_ER = {
								name : "aa_ER", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0052\u004E\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 0, 
								frac_digits : 0, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0041\u0063\u0061\u0061\u0064\u0061", "\u0045\u0074\u006C\u0065\u0065\u006E\u0069", "\u0054\u0061\u006C\u0061\u0061\u0074\u0061", "\u0041\u0072\u0062\u0061\u0071\u0061", "\u004B\u0061\u006D\u0069\u0069\u0073\u0069", "\u0047\u0075\u006D\u0071\u0061\u0074\u0061", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0041\u0063\u0061", "\u0045\u0074\u006C", "\u0054\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0061\u006D", "\u0047\u0075\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u0041\u0063\u0061", "\u0045\u0074\u006C", "\u0054\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0061\u006D", "\u0047\u0075\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u0051\u0075\u006E\u0078\u0061\u0020\u0047\u0061\u0072\u0061\u0062\u006C\u0075", "\u004E\u0061\u0068\u0061\u0072\u0073\u0069\u0020\u004B\u0075\u0064\u006F", "\u0043\u0069\u0067\u0067\u0069\u006C\u0074\u0061\u0020\u004B\u0075\u0064\u006F", "\u0041\u0067\u0064\u0061\u0020\u0042\u0061\u0078\u0069\u0073\u0073\u006F", "\u0043\u0061\u0078\u0061\u0068\u0020\u0041\u006C\u0073\u0061", "\u0051\u0061\u0073\u0061\u0020\u0044\u0069\u0072\u0072\u0069", "\u0051\u0061\u0064\u006F\u0020\u0044\u0069\u0072\u0072\u0069", "\u004C\u0065\u0071\u0065\u0065\u006E\u0069", "\u0057\u0061\u0079\u0073\u0075", "\u0044\u0069\u0074\u0065\u006C\u0069", "\u0058\u0069\u006D\u006F\u006C\u0069", "\u004B\u0061\u0078\u0078\u0061\u0020\u0047\u0061\u0072\u0061\u0062\u006C\u0075"], 
								month_names_short : ["\u0051\u0075\u006E", "\u004E\u0061\u0068", "\u0043\u0069\u0067", "\u0041\u0067\u0064", "\u0043\u0061\u0078", "\u0051\u0061\u0073", "\u0051\u0061\u0064", "\u004C\u0065\u0071", "\u0057\u0061\u0079", "\u0044\u0069\u0074", "\u0058\u0069\u006D", "\u004B\u0061\u0078"], 
								month_names_narrow : ["\u0051\u0075\u006E", "\u004E\u0061\u0068", "\u0043\u0069\u0067", "\u0041\u0067\u0064", "\u0043\u0061\u0078", "\u0051\u0061\u0073", "\u0051\u0061\u0064", "\u004C\u0065\u0071", "\u0057\u0061\u0079", "\u0044\u0069\u0074", "\u0058\u0069\u006D", "\u004B\u0061\u0078"], 
								ampm : ["\u0073\u0061\u0061\u006B\u0075", "\u0063\u0061\u0072\u0072\u0061"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.aa_ER;
					}
					break;
				case "aa_ET":
				case "aa_et":
					{

						if (!nexacro.Locale.aa_ET) {
							nexacro.Locale.aa_ET = {
								name : "aa_ET", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0054\u0042\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0041\u0063\u0061\u0061\u0064\u0061", "\u0045\u0074\u006C\u0065\u0065\u006E\u0069", "\u0054\u0061\u006C\u0061\u0061\u0074\u0061", "\u0041\u0072\u0062\u0061\u0071\u0061", "\u004B\u0061\u006D\u0069\u0069\u0073\u0069", "\u0047\u0075\u006D\u0071\u0061\u0074\u0061", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0041\u0063\u0061", "\u0045\u0074\u006C", "\u0054\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0061\u006D", "\u0047\u0075\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u0041\u0063\u0061", "\u0045\u0074\u006C", "\u0054\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0061\u006D", "\u0047\u0075\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u0051\u0075\u006E\u0078\u0061\u0020\u0047\u0061\u0072\u0061\u0062\u006C\u0075", "\u004B\u0075\u0064\u006F", "\u0043\u0069\u0067\u0067\u0069\u006C\u0074\u0061\u0020\u004B\u0075\u0064\u006F", "\u0041\u0067\u0064\u0061\u0020\u0042\u0061\u0078\u0069\u0073\u0073\u006F", "\u0043\u0061\u0078\u0061\u0068\u0020\u0041\u006C\u0073\u0061", "\u0051\u0061\u0073\u0061\u0020\u0044\u0069\u0072\u0072\u0069", "\u0051\u0061\u0064\u006F\u0020\u0044\u0069\u0072\u0072\u0069", "\u004C\u0069\u0069\u0071\u0065\u006E", "\u0057\u0061\u0079\u0073\u0075", "\u0044\u0069\u0074\u0065\u006C\u0069", "\u0058\u0069\u006D\u006F\u006C\u0069", "\u004B\u0061\u0078\u0078\u0061\u0020\u0047\u0061\u0072\u0061\u0062\u006C\u0075"], 
								month_names_short : ["\u0051\u0075\u006E", "\u004B\u0075\u0064", "\u0043\u0069\u0067", "\u0041\u0067\u0064", "\u0043\u0061\u0078", "\u0051\u0061\u0073", "\u0051\u0061\u0064", "\u004C\u0065\u0071", "\u0057\u0061\u0079", "\u0044\u0069\u0074", "\u0058\u0069\u006D", "\u004B\u0061\u0078"], 
								month_names_narrow : ["\u0051\u0075\u006E", "\u004B\u0075\u0064", "\u0043\u0069\u0067", "\u0041\u0067\u0064", "\u0043\u0061\u0078", "\u0051\u0061\u0073", "\u0051\u0061\u0064", "\u004C\u0065\u0071", "\u0057\u0061\u0079", "\u0044\u0069\u0074", "\u0058\u0069\u006D", "\u004B\u0061\u0078"], 
								ampm : ["\u0073\u0061\u0061\u006B\u0075", "\u0063\u0061\u0072\u0072\u0061"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.aa_ET;
					}
					break;
				case "af":
				case "af_ZA":
				case "af_za":
					{

						if (!nexacro.Locale.af_ZA) {
							nexacro.Locale.af_ZA = {
								name : "af_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u006F\u006E\u0064\u0061\u0067", "\u004D\u0061\u0061\u006E\u0064\u0061\u0067", "\u0044\u0069\u006E\u0073\u0064\u0061\u0067", "\u0057\u006F\u0065\u006E\u0073\u0064\u0061\u0067", "\u0044\u006F\u006E\u0064\u0065\u0072\u0064\u0061\u0067", "\u0056\u0072\u0079\u0064\u0061\u0067", "\u0053\u0061\u0074\u0065\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u0053\u006F", "\u004D\u0061", "\u0044\u0069", "\u0057\u006F", "\u0044\u006F", "\u0056\u0072", "\u0053\u0061"], 
								weekday_names_narrow : ["\u0053\u006F", "\u004D\u0061", "\u0044\u0069", "\u0057\u006F", "\u0044\u006F", "\u0056\u0072", "\u0053\u0061"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0069\u0065", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0069\u0065", "\u004D\u0061\u0061\u0072\u0074", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0065\u0069", "\u004A\u0075\u006E\u0069\u0065", "\u004A\u0075\u006C\u0069\u0065", "\u0041\u0075\u0067\u0075\u0073\u0074\u0075\u0073", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0072\u0074", "\u0041\u0070\u0072", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0072\u0074", "\u0041\u0070\u0072", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								ampm : ["\u0056\u004D", "\u004E\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002F\u0025\u006D\u002F\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.af_ZA;
					}
					break;
				case "ar_AE":
				case "ar_ae":
					{

						if (!nexacro.Locale.ar_AE) {
							nexacro.Locale.ar_AE = {
								name : "ar_AE", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0041\u0045\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0625\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A\u0020"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl", 
								locale_digits : ["\u0660", "\u0661", "\u0662", "\u0663", "\u0664", "\u0665", "\u0666", "\u0667", "\u0668", "\u0669"]
							};
						}

						return nexacro.Locale.ar_AE;
					}
					break;
				case "ar_BH":
				case "ar_bh":
					{

						if (!nexacro.Locale.ar_BH) {
							nexacro.Locale.ar_BH = {
								name : "ar_BH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0042\u0048\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0628\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_BH;
					}
					break;
				case "ar_DZ":
				case "ar_dz":
					{

						if (!nexacro.Locale.ar_DZ) {
							nexacro.Locale.ar_DZ = {
								name : "ar_DZ", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0044\u005A\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u062C\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_DZ;
					}
					break;
				case "ar_EG":
				case "ar_eg":
					{

						if (!nexacro.Locale.ar_EG) {
							nexacro.Locale.ar_EG = {
								name : "ar_EG", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0045\u0047\u0050\u0020", 
								currency_symbol : "\u062C\u002E\u0645\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_EG;
					}
					break;
				case "ar_IN":
				case "ar_in":
					{

						if (!nexacro.Locale.ar_IN) {
							nexacro.Locale.ar_IN = {
								name : "ar_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u20A8", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_IN;
					}
					break;
				case "ar_IQ":
				case "ar_iq":
					{

						if (!nexacro.Locale.ar_IQ) {
							nexacro.Locale.ar_IQ = {
								name : "ar_IQ", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0049\u0051\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0639\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644	", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_IQ;
					}
					break;
				case "ar_JO":
				case "ar_jo":
					{

						if (!nexacro.Locale.ar_JO) {
							nexacro.Locale.ar_JO = {
								name : "ar_JO", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004A\u004F\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0623\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_narrow : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								month_names_long : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_short : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_narrow : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_JO;
					}
					break;
				case "ar_KW":
				case "ar_kw":
					{

						if (!nexacro.Locale.ar_KW) {
							nexacro.Locale.ar_KW = {
								name : "ar_KW", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004B\u0057\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0643\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_KW;
					}
					break;
				case "ar_LB":
				case "ar_lb":
					{

						if (!nexacro.Locale.ar_LB) {
							nexacro.Locale.ar_LB = {
								name : "ar_LB", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004C\u0042\u0050\u0020", 
								currency_symbol : "\u0644\u002E\u0644\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_narrow : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								month_names_long : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_short : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_narrow : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_LB;
					}
					break;
				case "ar_LY":
				case "ar_ly":
					{

						if (!nexacro.Locale.ar_LY) {
							nexacro.Locale.ar_LY = {
								name : "ar_LY", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004C\u0059\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0644\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_LY;
					}
					break;
				case "ar_MA":
				case "ar_ma":
					{

						if (!nexacro.Locale.ar_MA) {
							nexacro.Locale.ar_MA = {
								name : "ar_MA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004D\u0041\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u0645\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_MA;
					}
					break;
				case "ar_OM":
				case "ar_om":
					{

						if (!nexacro.Locale.ar_OM) {
							nexacro.Locale.ar_OM = {
								name : "ar_OM", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004F\u004D\u0052\u0020", 
								currency_symbol : "\u0631\u002E\u0639\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_OM;
					}
					break;
				case "ar_QA":
				case "ar_qa":
					{

						if (!nexacro.Locale.ar_QA) {
							nexacro.Locale.ar_QA = {
								name : "ar_QA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0051\u0041\u0052\u0020", 
								currency_symbol : "\u0631\u002E\u0642\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627	", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_QA;
					}
					break;
				case "ar":
				case "ar_SA":
				case "ar_sa":
					{

						if (!nexacro.Locale.ar_SA) {
							nexacro.Locale.ar_SA = {
								name : "ar_SA", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [3], 
								int_curr_symbol : "\u0053\u0041\u0052\u0020", 
								currency_symbol : "\u0631\u064A\u0627\u0644", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "", 
								mon_grouping : [-1], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0625\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0640\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0640\u0627\u0646", "\u0623\u064A\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0640\u0645\u0640\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0041\u0020\u0025\u002E\u0031\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								time_format : "\u0025\u002E\u0031\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u002E\u0031\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0025\u0041\u0020\u0025\u002E\u0031\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0020\u0025\u002E\u0031\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u002F\u0025\u0042\u002F\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_SA;
					}
					break;
				case "ar_SD":
				case "ar_sd":
					{

						if (!nexacro.Locale.ar_SD) {
							nexacro.Locale.ar_SD = {
								name : "ar_SD", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0053\u0044\u0044\u0020", 
								currency_symbol : "\u062C\u002E\u0633\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_SD;
					}
					break;
				case "ar_SY":
				case "ar_sy":
					{

						if (!nexacro.Locale.ar_SY) {
							nexacro.Locale.ar_SY = {
								name : "ar_SY", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0053\u0059\u0050\u0020", 
								currency_symbol : "\u0644\u002E\u0633\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_narrow : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								month_names_long : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631\u0627\u0646", "\u062D\u0632\u064A\u0631", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_short : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631\u0627\u0646", "\u062D\u0632\u064A\u0631", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								month_names_narrow : ["\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u0648\u0627\u0631\u0627\u0646", "\u062D\u0632\u064A\u0631", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646\u0020\u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646\u0020\u0627\u0644\u0623\u0648\u0644"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_SY;
					}
					break;
				case "ar_TN":
				case "ar_tn":
					{

						if (!nexacro.Locale.ar_TN) {
							nexacro.Locale.ar_TN = {
								name : "ar_TN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0054\u004E\u0044\u0020", 
								currency_symbol : "\u062F\u002E\u062A\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_TN;
					}
					break;
				case "ar_YE":
				case "ar_ye":
					{

						if (!nexacro.Locale.ar_YE) {
							nexacro.Locale.ar_YE = {
								name : "ar_YE", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0059\u0045\u0052\u0020", 
								currency_symbol : "\u0631\u002E\u064A\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], 
								weekday_names_short : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								weekday_names_narrow : ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"], 
								month_names_long : ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								month_names_narrow : ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631", "\u0623\u0628\u0631", "\u0645\u0627\u064A", "\u064A\u0648\u0646", "\u064A\u0648\u0644", "\u0623\u063A\u0633", "\u0633\u0628\u062A", "\u0623\u0643\u062A", "\u0646\u0648\u0641", "\u062F\u064A\u0633"], 
								ampm : ["\u0635", "\u0645"], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020", 
								time_format_ampm : "\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0064\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u005A\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ar_YE;
					}
					break;
				case "as":
				case "as_IN":
				case "as_in":
					{

						if (!nexacro.Locale.as_IN) {
							nexacro.Locale.as_IN = {
								name : "as_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u099F", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u09A6\u09C7\u0993\u09AC\u09BE\u09F0", "\u09B8\u09CB\u09AE\u09AC\u09BE\u09F0", "\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09F0", "\u09AC\u09C1\u09A7\u09AC\u09BE\u09F0", "\u09AC\u09C3\u09B9\u09B7\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09F0", "\u09B6\u09C1\u0995\u09CD\u09F0\u09AC\u09BE\u09F0", "\u09B6\u09A8\u09BF\u09AC\u09BE\u09F0"], 
								weekday_names_short : ["\u09A6\u09C7\u0993", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9\u09B7\u09CD\u09AA\u09A4\u09BF", "\u09B6\u09C1\u0995\u09CD\u09F0", "\u09B6\u09A8\u09BF"], 
								weekday_names_narrow : ["\u09A6\u09C7\u0993", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9\u09B7\u09CD\u09AA\u09A4\u09BF", "\u09B6\u09C1\u0995\u09CD\u09F0", "\u09B6\u09A8\u09BF"], 
								month_names_long : ["\u099C\u09BE\u09A8\u09C1\u09F1\u09BE\u09F0\u09C0", "\u09AB\u09C7\u09AC\u09CD\u09F0\u09C1\u09F1\u09BE\u09F0\u09C0", "\u09AE\u09BE\u09F0\u09CD\u099A", "\u098F\u09AA\u09CD\u09F0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B7\u09CD\u099F", "\u099A\u09C7\u09AA\u09CD\u09A4\u09C7\u09AE\u09CD\u09AC\u09F0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09F0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09F0", "\u09A1\u09BF\u099A\u09C7\u09AE\u09CD\u09AC\u09F0"], 
								month_names_short : ["\u099C\u09BE\u09A8\u09C1\u09F1\u09BE\u09F0\u09C0", "\u09AB\u09C7\u09AC\u09CD\u09F0\u09C1\u09F1\u09BE\u09F0\u09C0", "\u09AE\u09BE\u09F0\u09CD\u099A", "\u098F\u09AA\u09CD\u09F0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997", "\u099A\u09C7\u09AA\u09CD\u09A4\u09C7\u09AE\u09CD\u09AC\u09F0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09F0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09F0", "\u09A1\u09BF\u099A\u09C7\u09AE\u09CD\u09AC\u09F0"], 
								month_names_narrow : ["\u099C\u09BE\u09A8\u09C1\u09F1\u09BE\u09F0\u09C0", "\u09AB\u09C7\u09AC\u09CD\u09F0\u09C1\u09F1\u09BE\u09F0\u09C0", "\u09AE\u09BE\u09F0\u09CD\u099A", "\u098F\u09AA\u09CD\u09F0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997", "\u099A\u09C7\u09AA\u09CD\u09A4\u09C7\u09AE\u09CD\u09AC\u09F0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09F0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09F0", "\u09A1\u09BF\u099A\u09C7\u09AE\u09CD\u09AC\u09F0"], 
								ampm : ["\u09AA\u09C2\u09F0\u09CD\u09AC\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8", "\u0985\u09AA\u09F0\u09BE\u09B9\u09CD\u09A8"], 
								date_format : "\u0025\u0065\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u0070", 
								time_format_ampm : "\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0065\u0020\u0025\u0042\u002C\u0020\u0025\u0059\u0020\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u002C\u0025\u0042\u0020\u0025\u0064\u002C\u0020\u0025\u0041", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.as_IN;
					}
					break;
				case "az":
				case "az_AZ":
				case "az_az":
					{

						if (!nexacro.Locale.az_AZ) {
							nexacro.Locale.az_AZ = {
								name : "az_AZ", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0041\u005A\u004D\u0020", 
								currency_symbol : "\u006D\u0061\u006E\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0062\u0061\u007A\u0061\u0072\u0020\u0067\u00FC\u006E\u00FC", "\u0062\u0061\u007A\u0061\u0072\u0020\u0065\u0072\u0074\u0259\u0073\u0069", "\u00E7\u0259\u0072\u015F\u0259\u006E\u0062\u0259\u0020\u0061\u0078\u015F\u0061\u006D\u0131", "\u00E7\u0259\u0072\u015F\u0259\u006E\u0062\u0259", "\u0063\u00FC\u006D\u0259\u0020\u0061\u0078\u015F\u0061\u006D\u0131", "\u0063\u00FC\u006D\u0259", "\u015F\u0259\u006E\u0062\u0259"], 
								weekday_names_short : ["\u0062\u0061\u007A", "\u0062\u0065\u0072", "\u00E7\u0061\u0078", "\u00E7\u0259\u0072", "\u0063\u0061\u0078", "\u0063\u00FC\u006D", "\u015F\u006E\u0062"], 
								weekday_names_narrow : ["\u0062\u0061\u007A", "\u0062\u0065\u0072", "\u00E7\u0061\u0078", "\u00E7\u0259\u0072", "\u0063\u0061\u0078", "\u0063\u00FC\u006D", "\u015F\u006E\u0062"], 
								month_names_long : ["\u0079\u0061\u006E\u0076\u0061\u0072", "\u0066\u0065\u0076\u0072\u0061\u006C", "\u006D\u0061\u0072\u0074", "\u0061\u0070\u0072\u0065\u006C", "\u006D\u0061\u0079", "\u0069\u0079\u0075\u006E", "\u0069\u0079\u0075\u006C", "\u0061\u0076\u0071\u0075\u0073\u0074", "\u0073\u0065\u006E\u0074\u0079\u0061\u0062\u0072", "\u006F\u006B\u0074\u0079\u0061\u0062\u0072", "\u006E\u006F\u0079\u0061\u0062\u0072", "\u0064\u0065\u006B\u0061\u0062\u0072"], 
								month_names_short : ["\u0059\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u0130\u0079\u006E", "\u0130\u0079\u006C", "\u0041\u0076\u0071", "\u0053\u0065\u006E", "\u004F\u006B\u0074", "\u004E\u006F\u0079", "\u0044\u0065\u006B"], 
								month_names_narrow : ["\u0059\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u0130\u0079\u006E", "\u0130\u0079\u006C", "\u0041\u0076\u0071", "\u0053\u0065\u006E", "\u004F\u006B\u0074", "\u004E\u006F\u0079", "\u0044\u0065\u006B"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.az_AZ;
					}
					break;
				case "be":
				case "be_BY":
				case "be_by":
					{

						if (!nexacro.Locale.be_BY) {
							nexacro.Locale.be_BY = {
								name : "be_BY", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0042\u0059\u0052\u0020", 
								currency_symbol : "\u0440\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u041D\u044F\u0434\u0437\u0435\u043B\u044F", "\u041F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0410\u045E\u0442\u043E\u0440\u0430\u043A", "\u0421\u0435\u0440\u0430\u0434\u0430", "\u0427\u0430\u0446\u0432\u0435\u0440", "\u041F\u044F\u0442\u043D\u0456\u0446\u0430", "\u0421\u0443\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u041D\u044F\u0434", "\u041F\u0430\u043D", "\u0410\u045E\u0442", "\u0421\u0440\u0434", "\u0427\u0446\u0432", "\u041F\u044F\u0442", "\u0421\u0443\u0431"], 
								weekday_names_narrow : ["\u041D\u044F\u0434", "\u041F\u0430\u043D", "\u0410\u045E\u0442", "\u0421\u0440\u0434", "\u0427\u0446\u0432", "\u041F\u044F\u0442", "\u0421\u0443\u0431"], 
								month_names_long : ["\u0421\u0442\u0443\u0434\u0437\u0435\u043D\u044C", "\u041B\u044E\u0442\u044B", "\u0421\u0430\u043A\u0430\u0432\u0456\u043A", "\u041A\u0440\u0430\u0441\u0430\u0432\u0456\u043A", "\u0422\u0440\u0430\u0432\u0435\u043D\u044C", "\u0427\u044D\u0440\u0432\u0435\u043D\u044C", "\u041B\u0456\u043F\u0435\u043D\u044C", "\u0416\u043D\u0456\u0432\u0435\u043D\u044C", "\u0412\u0435\u0440\u0430\u0441\u0435\u043D\u044C", "\u041A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A", "\u041B\u0456\u0441\u0442\u0430\u043F\u0430\u0434", "\u0421\u043D\u0435\u0436\u0430\u043D\u044C"], 
								month_names_short : ["\u0421\u0442\u0434", "\u041B\u044E\u0442", "\u0421\u0430\u043A", "\u041A\u0440\u0441", "\u0422\u0440\u0430", "\u0427\u044D\u0440", "\u041B\u0456\u043F", "\u0416\u043D\u0432", "\u0412\u0440\u0441", "\u041A\u0441\u0442", "\u041B\u0456\u0441", "\u0421\u043D\u0436"], 
								month_names_narrow : ["\u0421\u0442\u0434", "\u041B\u044E\u0442", "\u0421\u0430\u043A", "\u041A\u0440\u0441", "\u0422\u0440\u0430", "\u0427\u044D\u0440", "\u041B\u0456\u043F", "\u0416\u043D\u0432", "\u0412\u0440\u0441", "\u041A\u0441\u0442", "\u041B\u0456\u0441", "\u0421\u043D\u0436"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.be_BY;
					}
					break;
				case "bg":
				case "bg_BG":
				case "bg_bg":
					{

						if (!nexacro.Locale.bg_BG) {
							nexacro.Locale.bg_BG = {
								name : "bg_BG", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0042\u0047\u004E\u0020", 
								currency_symbol : "\u043B\u0432", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u043D\u0435\u0434\u0435\u043B\u044F", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u044F\u0434\u0430", "\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A", "\u043F\u0435\u0442\u044A\u043A", "\u0441\u044A\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u043D\u0434", "\u043F\u043D", "\u0432\u0442", "\u0441\u0440", "\u0447\u0442", "\u043F\u0442", "\u0441\u0431"], 
								weekday_names_narrow : ["\u043D\u0434", "\u043F\u043D", "\u0432\u0442", "\u0441\u0440", "\u0447\u0442", "\u043F\u0442", "\u0441\u0431"], 
								month_names_long : ["\u044F\u043D\u0443\u0430\u0440\u0438", "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0439", "\u044E\u043D\u0438", "\u044E\u043B\u0438", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438", "\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438", "\u043D\u043E\u0435\u043C\u0432\u0440\u0438", "\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438"], 
								month_names_short : ["\u044F\u043D\u0443", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0439", "\u044E\u043D\u0438", "\u044E\u043B\u0438", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0435", "\u0434\u0435\u043A"], 
								month_names_narrow : ["\u044F\u043D\u0443", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0439", "\u044E\u043D\u0438", "\u044E\u043B\u0438", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0435", "\u0434\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0065\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u006B\u002C\u0025\u004D\u002C\u0025\u0053", 
								time_format_ampm : "\u0025\u006C\u002C\u0025\u004D\u002C\u0025\u0053", 
								date_time_format : "\u0025\u0078\u0020\u0028\u0025\u0061\u0029\u0020\u0025\u0058\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 1, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0433\u002E", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059\u0020\u0433\u002E", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.bg_BG;
					}
					break;
				case "bn_BD":
				case "bn_bd":
					{

						if (!nexacro.Locale.bn_BD) {
							nexacro.Locale.bn_BD = {
								name : "bn_BD", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0042\u0044\u0054\u0020", 
								currency_symbol : "\u09F3", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0", "\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0", "\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0", "\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0", "\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09B0", "\u09B6\u09C1\u0995\u09CD\u09B0\u09AC\u09BE\u09B0", "\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0"], 
								weekday_names_short : ["\u09B0\u09AC\u09BF", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9\u0983", "\u09B6\u09C1\u0995\u09CD\u09B0", "\u09B6\u09A8\u09BF"], 
								weekday_names_narrow : ["\u09B0\u09AC\u09BF", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9\u0983", "\u09B6\u09C1\u0995\u09CD\u09B0", "\u09B6\u09A8\u09BF"], 
								month_names_long : ["\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0", "\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0"], 
								month_names_short : ["\u099C\u09BE\u09A8\u09C1", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2", "\u0986\u0997", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7", "\u0985\u0995\u09CD\u099F\u09CB", "\u09A8\u09AD\u09C7", "\u09A1\u09BF\u09B8\u09C7"], 
								month_names_narrow : ["\u099C\u09BE\u09A8\u09C1", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2", "\u0986\u0997", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7", "\u0985\u0995\u09CD\u099F\u09CB", "\u09A8\u09AD\u09C7", "\u09A1\u09BF\u09B8\u09C7"], 
								ampm : ["\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A3", "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A3"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.bn_BD;
					}
					break;
				case "bn":
				case "bn_IN":
				case "bn_in":
					{

						if (!nexacro.Locale.bn_IN) {
							nexacro.Locale.bn_IN = {
								name : "bn_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u099F\u09BE\u0995\u09BE", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0", "\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0", "\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0", "\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0", "\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09B0", "\u09B6\u09C1\u0995\u09CD\u09B0\u09AC\u09BE\u09B0", "\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0"], 
								weekday_names_short : ["\u09B0\u09AC\u09BF", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF", "\u09B6\u09C1\u0995\u09CD\u09B0", "\u09B6\u09A8\u09BF"], 
								weekday_names_narrow : ["\u09B0\u09AC\u09BF", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF", "\u09B6\u09C1\u0995\u09CD\u09B0", "\u09B6\u09A8\u09BF"], 
								month_names_long : ["\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0", "\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0"], 
								month_names_short : ["\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0", "\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0"], 
								month_names_narrow : ["\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0", "\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0"], 
								ampm : ["\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A3", "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A3"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.bn_IN;
					}
					break;
				case "br":
				case "br_FR":
				case "br_fr":
					{

						if (!nexacro.Locale.br_FR) {
							nexacro.Locale.br_FR = {
								name : "br_FR", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0073\u0075\u006C", "\u006C\u0075\u006E", "\u006D\u0065\u0075\u0072\u007A\u0068", "\u006D\u0065\u0072\u0063\u0027\u0068\u0065\u0072", "\u0079\u0061\u006F\u0075", "\u0067\u0077\u0065\u006E\u0065\u0072", "\u0073\u0061\u0064\u006F\u0072\u006E"], 
								weekday_names_short : ["\u0073\u0075\u006C", "\u006C\u0075\u006E", "\u006D\u0065\u0075", "\u006D\u0065\u0072", "\u0079\u0061\u006F", "\u0067\u0077\u0065", "\u0073\u0061\u0064"], 
								weekday_names_narrow : ["\u0073\u0075\u006C", "\u006C\u0075\u006E", "\u006D\u0065\u0075", "\u006D\u0065\u0072", "\u0079\u0061\u006F", "\u0067\u0077\u0065", "\u0073\u0061\u0064"], 
								month_names_long : ["\u0047\u0065\u006E\u0076\u0065\u0072", "\u0043\u0027\u0068\u0077\u0065\u0076\u0072\u0065\u0072", "\u004D\u0065\u0075\u0072\u007A\u0068", "\u0045\u0062\u0072\u0065\u006C", "\u004D\u0061\u0065", "\u004D\u0065\u007A\u0068\u0065\u0076\u0065\u006E", "\u0047\u006F\u0075\u0065\u0072\u0065", "\u0045\u006F\u0073\u0074", "\u0047\u0077\u0065\u006E\u0067\u006F\u006C\u006F", "\u0048\u0065\u0072\u0065", "\u0044\u0075", "\u004B\u0065\u0072\u007A\u0075"], 
								month_names_short : ["\u0047\u0065\u006E\u0020", "\u0043\u0027\u0068\u0077", "\u004D\u0065\u0075\u0020", "\u0045\u0062\u0072\u0020", "\u004D\u0061\u0065\u0020", "\u0045\u0076\u0065\u0020", "\u0047\u006F\u0075\u0020", "\u0045\u006F\u0073\u0020", "\u0047\u0077\u0065\u0020", "\u0048\u0065\u0072\u0020", "\u0044\u0075\u0020\u0020", "\u004B\u0065\u0072\u0020"], 
								month_names_narrow : ["\u0047\u0065\u006E\u0020", "\u0043\u0027\u0068\u0077", "\u004D\u0065\u0075\u0020", "\u0045\u0062\u0072\u0020", "\u004D\u0061\u0065\u0020", "\u0045\u0076\u0065\u0020", "\u0047\u006F\u0075\u0020", "\u0045\u006F\u0073\u0020", "\u0047\u0077\u0065\u0020", "\u0048\u0065\u0072\u0020", "\u0044\u0075\u0020\u0020", "\u004B\u0065\u0072\u0020"], 
								ampm : ["\u0020", "\u0020"], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u0065\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0044\u0027\u0061\u0072\u0020\u0025\u0041\u0020\u0025\u0064\u0020\u0061\u0020\u0076\u0069\u007A\u0020\u0025\u0042\u0020\u0025\u0059", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.br_FR;
					}
					break;
				case "bs":
				case "bs_BA":
				case "bs_ba":
					{

						if (!nexacro.Locale.bs_BA) {
							nexacro.Locale.bs_BA = {
								name : "bs_BA", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0042\u0041\u004D\u0020", 
								currency_symbol : "\u004B\u004D", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004E\u0065\u0064\u006A\u0065\u006C\u006A\u0061", "\u0050\u006F\u006E\u0065\u0064\u006A\u0065\u006C\u006A\u0061\u006B", "\u0055\u0074\u006F\u0072\u0061\u006B", "\u0053\u0072\u0069\u006A\u0065\u0064\u0061", "\u010C\u0065\u0074\u0076\u0072\u0074\u0061\u006B", "\u0050\u0065\u0074\u0061\u006B", "\u0053\u0075\u0062\u006F\u0074\u0061"], 
								weekday_names_short : ["\u004E\u0065\u0064", "\u0050\u006F\u006E", "\u0055\u0074\u006F", "\u0053\u0072\u0069", "\u010C\u0065\u0074", "\u0050\u0065\u0074", "\u0053\u0075\u0062"], 
								weekday_names_narrow : ["\u004E\u0065\u0064", "\u0050\u006F\u006E", "\u0055\u0074\u006F", "\u0053\u0072\u0069", "\u010C\u0065\u0074", "\u0050\u0065\u0074", "\u0053\u0075\u0062"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072", "\u004D\u0061\u0072\u0074", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u006A", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0061\u0072", "\u004F\u006B\u0074\u006F\u0062\u0061\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0061\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0061\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u006A", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u006A", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.bs_BA;
					}
					break;
				case "ca_AD":
				case "ca_ad":
					{

						if (!nexacro.Locale.ca_AD) {
							nexacro.Locale.ca_AD = {
								name : "ca_AD", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u0075\u006D\u0065\u006E\u0067\u0065", "\u0064\u0069\u006C\u006C\u0075\u006E\u0073", "\u0064\u0069\u006D\u0061\u0072\u0074\u0073", "\u0064\u0069\u006D\u0065\u0063\u0072\u0065\u0073", "\u0064\u0069\u006A\u006F\u0075\u0073", "\u0064\u0069\u0076\u0065\u006E\u0064\u0072\u0065\u0073", "\u0064\u0069\u0073\u0073\u0061\u0062\u0074\u0065"], 
								weekday_names_short : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								weekday_names_narrow : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								month_names_long : ["\u0067\u0065\u006E\u0065\u0072", "\u0066\u0065\u0062\u0072\u0065\u0072", "\u006D\u0061\u0072\u00E7", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0069\u0067", "\u006A\u0075\u006E\u0079", "\u006A\u0075\u006C\u0069\u006F\u006C", "\u0061\u0067\u006F\u0073\u0074", "\u0073\u0065\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0065\u0073\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ca_AD;
					}
					break;
				case "ca":
				case "ca_ES":
				case "ca_es":
					{

						if (!nexacro.Locale.ca_ES) {
							nexacro.Locale.ca_ES = {
								name : "ca_ES", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u0075\u006D\u0065\u006E\u0067\u0065", "\u0064\u0069\u006C\u006C\u0075\u006E\u0073", "\u0064\u0069\u006D\u0061\u0072\u0074\u0073", "\u0064\u0069\u006D\u0065\u0063\u0072\u0065\u0073", "\u0064\u0069\u006A\u006F\u0075\u0073", "\u0064\u0069\u0076\u0065\u006E\u0064\u0072\u0065\u0073", "\u0064\u0069\u0073\u0073\u0061\u0062\u0074\u0065"], 
								weekday_names_short : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								weekday_names_narrow : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								month_names_long : ["\u0067\u0065\u006E\u0065\u0072", "\u0066\u0065\u0062\u0072\u0065\u0072", "\u006D\u0061\u0072\u00E7", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0069\u0067", "\u006A\u0075\u006E\u0079", "\u006A\u0075\u006C\u0069\u006F\u006C", "\u0061\u0067\u006F\u0073\u0074", "\u0073\u0065\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0065\u0073\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u002F\u0020\u0025\u0042\u0020\u002F\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ca_ES;
					}
					break;
				case "ca_FR":
				case "ca_fr":
					{

						if (!nexacro.Locale.ca_FR) {
							nexacro.Locale.ca_FR = {
								name : "ca_FR", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u0075\u006D\u0065\u006E\u0067\u0065", "\u0064\u0069\u006C\u006C\u0075\u006E\u0073", "\u0064\u0069\u006D\u0061\u0072\u0074\u0073", "\u0064\u0069\u006D\u0065\u0063\u0072\u0065\u0073", "\u0064\u0069\u006A\u006F\u0075\u0073", "\u0064\u0069\u0076\u0065\u006E\u0064\u0072\u0065\u0073", "\u0064\u0069\u0073\u0073\u0061\u0062\u0074\u0065"], 
								weekday_names_short : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								weekday_names_narrow : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								month_names_long : ["\u0067\u0065\u006E\u0065\u0072", "\u0066\u0065\u0062\u0072\u0065\u0072", "\u006D\u0061\u0072\u00E7", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0069\u0067", "\u006A\u0075\u006E\u0079", "\u006A\u0075\u006C\u0069\u006F\u006C", "\u0061\u0067\u006F\u0073\u0074", "\u0073\u0065\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0065\u0073\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ca_FR;
					}
					break;
				case "ca_IT":
				case "ca_it":
					{

						if (!nexacro.Locale.ca_IT) {
							nexacro.Locale.ca_IT = {
								name : "ca_IT", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u0075\u006D\u0065\u006E\u0067\u0065", "\u0064\u0069\u006C\u006C\u0075\u006E\u0073", "\u0064\u0069\u006D\u0061\u0072\u0074\u0073", "\u0064\u0069\u006D\u0065\u0063\u0072\u0065\u0073", "\u0064\u0069\u006A\u006F\u0075\u0073", "\u0064\u0069\u0076\u0065\u006E\u0064\u0072\u0065\u0073", "\u0064\u0069\u0073\u0073\u0061\u0062\u0074\u0065"], 
								weekday_names_short : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								weekday_names_narrow : ["\u0064\u0067", "\u0064\u006C", "\u0064\u0074", "\u0064\u0063", "\u0064\u006A", "\u0064\u0076", "\u0064\u0073"], 
								month_names_long : ["\u0067\u0065\u006E\u0065\u0072", "\u0066\u0065\u0062\u0072\u0065\u0072", "\u006D\u0061\u0072\u00E7", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0069\u0067", "\u006A\u0075\u006E\u0079", "\u006A\u0075\u006C\u0069\u006F\u006C", "\u0061\u0067\u006F\u0073\u0074", "\u0073\u0065\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0065\u0073\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ca_IT;
					}
					break;
				case "cs":
				case "cs_CZ":
				case "cs_cz":
					{

						if (!nexacro.Locale.cs_CZ) {
							nexacro.Locale.cs_CZ = {
								name : "cs_CZ", 
								decimal_point : "\u002C", 
								thousands_sep : "\u00A0", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0043\u005A\u004B\u0020", 
								currency_symbol : "\u004B\u010D", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004E\u0065\u0064\u011B\u006C\u0065", "\u0050\u006F\u006E\u0064\u011B\u006C\u00ED", "\u00DA\u0074\u0065\u0072\u00FD", "\u0053\u0074\u0159\u0065\u0064\u0061", "\u010C\u0074\u0076\u0072\u0074\u0065\u006B", "\u0050\u00E1\u0074\u0065\u006B", "\u0053\u006F\u0062\u006F\u0074\u0061"], 
								weekday_names_short : ["\u004E\u0065", "\u0050\u006F", "\u00DA\u0074", "\u0053\u0074", "\u010C\u0074", "\u0050\u00E1", "\u0053\u006F"], 
								weekday_names_narrow : ["\u004E\u0065", "\u0050\u006F", "\u00DA\u0074", "\u0053\u0074", "\u010C\u0074", "\u0050\u00E1", "\u0053\u006F"], 
								month_names_long : ["\u006C\u0065\u0064\u0065\u006E", "\u00FA\u006E\u006F\u0072", "\u0062\u0159\u0065\u007A\u0065\u006E", "\u0064\u0075\u0062\u0065\u006E", "\u006B\u0076\u011B\u0074\u0065\u006E", "\u010D\u0065\u0072\u0076\u0065\u006E", "\u010D\u0065\u0072\u0076\u0065\u006E\u0065\u0063", "\u0073\u0072\u0070\u0065\u006E", "\u007A\u00E1\u0159\u00ED", "\u0159\u00ED\u006A\u0065\u006E", "\u006C\u0069\u0073\u0074\u006F\u0070\u0061\u0064", "\u0070\u0072\u006F\u0073\u0069\u006E\u0065\u0063"], 
								month_names_short : ["\u006C\u0065\u0064", "\u00FA\u006E\u006F", "\u0062\u0159\u0065", "\u0064\u0075\u0062", "\u006B\u0076\u011B", "\u010D\u0065\u006E", "\u010D\u0065\u0063", "\u0073\u0072\u0070", "\u007A\u00E1\u0159", "\u0159\u00ED\u006A", "\u006C\u0069\u0073", "\u0070\u0072\u006F"], 
								month_names_narrow : ["\u006C\u0065\u0064", "\u00FA\u006E\u006F", "\u0062\u0159\u0065", "\u0064\u0075\u0062", "\u006B\u0076\u011B", "\u010D\u0065\u006E", "\u010D\u0065\u0063", "\u0073\u0072\u0070", "\u007A\u00E1\u0159", "\u0159\u00ED\u006A", "\u006C\u0069\u0073", "\u0070\u0072\u006F"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0025\u0061\u00A0\u0025\u0065\u002E\u00A0\u0025\u0042\u00A0\u0025\u0059\u002C\u00A0\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u00A0\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 1, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.cs_CZ;
					}
					break;
				case "cy":
				case "cy_GB":
				case "cy_gb":
					{

						if (!nexacro.Locale.cy_GB) {
							nexacro.Locale.cy_GB = {
								name : "cy_GB", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0047\u0042\u0050\u0020", 
								currency_symbol : "\u00A3", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006C", "\u004C\u006C\u0075\u006E", "\u004D\u0061\u0077\u0072\u0074\u0068", "\u004D\u0065\u0072\u0063\u0068\u0065\u0072", "\u0049\u0061\u0075", "\u0047\u0077\u0065\u006E\u0065\u0072", "\u0053\u0061\u0064\u0077\u0072\u006E"], 
								weekday_names_short : ["\u0053\u0075\u006C", "\u004C\u006C\u0075", "\u004D\u0061\u0077", "\u004D\u0065\u0072", "\u0049\u0061\u0075", "\u0047\u0077\u0065", "\u0053\u0061\u0064"], 
								weekday_names_narrow : ["\u0053\u0075\u006C", "\u004C\u006C\u0075", "\u004D\u0061\u0077", "\u004D\u0065\u0072", "\u0049\u0061\u0075", "\u0047\u0077\u0065", "\u0053\u0061\u0064"], 
								month_names_long : ["\u0049\u006F\u006E\u0061\u0077\u0072", "\u0043\u0068\u0077\u0065\u0066\u0072\u006F\u0072", "\u004D\u0061\u0077\u0072\u0074\u0068", "\u0045\u0062\u0072\u0069\u006C\u006C", "\u004D\u0061\u0069", "\u004D\u0065\u0068\u0065\u0066\u0069\u006E", "\u0047\u006F\u0072\u0066\u0066\u0065\u006E\u006E\u0061\u0066", "\u0041\u0077\u0073\u0074", "\u004D\u0065\u0064\u0069", "\u0048\u0079\u0064\u0072\u0065\u0066", "\u0054\u0061\u0063\u0068\u0077\u0065\u0064\u0064", "\u0052\u0068\u0061\u0067\u0066\u0079\u0072"], 
								month_names_short : ["\u0049\u006F\u006E", "\u0043\u0068\u0077", "\u004D\u0061\u0077", "\u0045\u0062\u0072", "\u004D\u0061\u0069", "\u004D\u0065\u0068", "\u0047\u006F\u0072", "\u0041\u0077\u0073", "\u004D\u0065\u0064", "\u0048\u0079\u0064", "\u0054\u0061\u0063\u0068", "\u0052\u0068\u0061"], 
								month_names_narrow : ["\u0049\u006F\u006E", "\u0043\u0068\u0077", "\u004D\u0061\u0077", "\u0045\u0062\u0072", "\u004D\u0061\u0069", "\u004D\u0065\u0068", "\u0047\u006F\u0072", "\u0041\u0077\u0073", "\u004D\u0065\u0064", "\u0048\u0079\u0064", "\u0054\u0061\u0063\u0068", "\u0052\u0068\u0061"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0050\u0020\u0025\u005A", 
								date_time_format : "\u0044\u0079\u0064\u0064\u0020\u0025\u0041\u0020\u0025\u0064\u0020\u006d\u0069\u0073\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.cy_GB;
					}
					break;
				case "da":
				case "da_DK":
				case "da_dk":
					{

						if (!nexacro.Locale.da_DK) {
							nexacro.Locale.da_DK = {
								name : "da_DK", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0044\u004B\u004B\u0020", 
								currency_symbol : "\u006B\u0072\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 2, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u00F8\u006E\u0064\u0061\u0067", "\u006D\u0061\u006E\u0064\u0061\u0067", "\u0074\u0069\u0072\u0073\u0064\u0061\u0067", "\u006F\u006E\u0073\u0064\u0061\u0067", "\u0074\u006F\u0072\u0073\u0064\u0061\u0067", "\u0066\u0072\u0065\u0064\u0061\u0067", "\u006C\u00F8\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u0073\u00F8\u006E", "\u006D\u0061\u006E", "\u0074\u0069\u0072", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F8\u0072"], 
								weekday_names_narrow : ["\u0073\u00F8\u006E", "\u006D\u0061\u006E", "\u0074\u0069\u0072", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F8\u0072"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u0061\u0072\u0074\u0073", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u006A", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.da_DK;
					}
					break;
				case "de_AT":
				case "de_at":
					{

						if (!nexacro.Locale.de_AT) {
							nexacro.Locale.de_AT = {
								name : "de_AT", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u006F\u006E\u006E\u0074\u0061\u0067", "\u004D\u006F\u006E\u0074\u0061\u0067", "\u0044\u0069\u0065\u006E\u0073\u0074\u0061\u0067", "\u004D\u0069\u0074\u0074\u0077\u006F\u0063\u0068", "\u0044\u006F\u006E\u006E\u0065\u0072\u0073\u0074\u0061\u0067", "\u0046\u0072\u0065\u0069\u0074\u0061\u0067", "\u0053\u0061\u006D\u0073\u0074\u0061\u0067"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u006F\u006E", "\u0044\u0069\u0065", "\u004D\u0069\u0074", "\u0044\u006F\u006E", "\u0046\u0072\u0065", "\u0053\u0061\u006D"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u006F\u006E", "\u0044\u0069\u0065", "\u004D\u0069\u0074", "\u0044\u006F\u006E", "\u0046\u0072\u0065", "\u0053\u0061\u006D"], 
								month_names_long : ["\u004A\u00E4\u006E\u006E\u0065\u0072", "\u0046\u0065\u0062\u0065\u0072", "\u004D\u00E4\u0072\u007A", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u007A\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u00E4\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u00E4\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.de_AT;
					}
					break;
				case "de_BE":
				case "de_be":
					{

						if (!nexacro.Locale.de_BE) {
							nexacro.Locale.de_BE = {
								name : "de_BE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0053\u006F\u006E\u006E\u0074\u0061\u0067", "\u004D\u006F\u006E\u0074\u0061\u0067", "\u0044\u0069\u0065\u006E\u0073\u0074\u0061\u0067", "\u004D\u0069\u0074\u0074\u0077\u006F\u0063\u0068", "\u0044\u006F\u006E\u006E\u0065\u0072\u0073\u0074\u0061\u0067", "\u0046\u0072\u0065\u0069\u0074\u0061\u0067", "\u0053\u0061\u006D\u0073\u0074\u0061\u0067"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u006F\u006E", "\u0044\u0069\u0065", "\u004D\u0069\u0074", "\u0044\u006F\u006E", "\u0046\u0072\u0065", "\u0053\u0061\u006D"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u006F\u006E", "\u0044\u0069\u0065", "\u004D\u0069\u0074", "\u0044\u006F\u006E", "\u0046\u0072\u0065", "\u0053\u0061\u006D"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072", "\u004D\u00E4\u0072\u007A", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u007A\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.de_BE;
					}
					break;
				case "de_CH":
				case "de_ch":
					{

						if (!nexacro.Locale.de_CH) {
							nexacro.Locale.de_CH = {
								name : "de_CH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u0027", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0043\u0048\u0046\u0020", 
								currency_symbol : "\u0046\u0072\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0027", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0053\u006F\u006E\u006E\u0074\u0061\u0067", "\u004D\u006F\u006E\u0074\u0061\u0067", "\u0044\u0069\u0065\u006E\u0073\u0074\u0061\u0067", "\u004D\u0069\u0074\u0074\u0077\u006F\u0063\u0068", "\u0044\u006F\u006E\u006E\u0065\u0072\u0073\u0074\u0061\u0067", "\u0046\u0072\u0065\u0069\u0074\u0061\u0067", "\u0053\u0061\u006D\u0073\u0074\u0061\u0067"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u006F\u006E", "\u0044\u0069\u0065", "\u004D\u0069\u0074", "\u0044\u006F\u006E", "\u0046\u0072\u0065", "\u0053\u0061\u006D"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u006F\u006E", "\u0044\u0069\u0065", "\u004D\u0069\u0074", "\u0044\u006F\u006E", "\u0046\u0072\u0065", "\u0053\u0061\u006D"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072", "\u004D\u00E4\u0072\u007A", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u007A\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.de_CH;
					}
					break;
				case "de":
				case "de_DE":
				case "de_de":
					{

						if (!nexacro.Locale.de_DE) {
							nexacro.Locale.de_DE = {
								name : "de_DE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u006F\u006E\u006E\u0074\u0061\u0067", "\u004D\u006F\u006E\u0074\u0061\u0067", "\u0044\u0069\u0065\u006E\u0073\u0074\u0061\u0067", "\u004D\u0069\u0074\u0074\u0077\u006F\u0063\u0068", "\u0044\u006F\u006E\u006E\u0065\u0072\u0073\u0074\u0061\u0067", "\u0046\u0072\u0065\u0069\u0074\u0061\u0067", "\u0053\u0061\u006D\u0073\u0074\u0061\u0067"], 
								weekday_names_short : ["\u0053\u006F", "\u004D\u006F", "\u0044\u0069", "\u004D\u0069", "\u0044\u006F", "\u0046\u0072", "\u0053\u0061"], 
								weekday_names_narrow : ["\u0053\u006F", "\u004D\u006F", "\u0044\u0069", "\u004D\u0069", "\u0044\u006F", "\u0046\u0072", "\u0053\u0061"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072", "\u004D\u00E4\u0072\u007A", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u007A\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0064\u002E\u0020\u0025\u0062\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 1, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.de_DE;
					}
					break;
				case "de_LU":
				case "de_lu":
					{

						if (!nexacro.Locale.de_LU) {
							nexacro.Locale.de_LU = {
								name : "de_LU", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u006F\u006E\u006E\u0074\u0061\u0067", "\u004D\u006F\u006E\u0074\u0061\u0067", "\u0044\u0069\u0065\u006E\u0073\u0074\u0061\u0067", "\u004D\u0069\u0074\u0074\u0077\u006F\u0063\u0068", "\u0044\u006F\u006E\u006E\u0065\u0072\u0073\u0074\u0061\u0067", "\u0046\u0072\u0065\u0069\u0074\u0061\u0067", "\u0053\u0061\u006D\u0073\u0074\u0061\u0067"], 
								weekday_names_short : ["\u0053\u006F", "\u004D\u006F", "\u0044\u0069", "\u004D\u0069", "\u0044\u006F", "\u0046\u0072", "\u0053\u0061"], 
								weekday_names_narrow : ["\u0053\u006F", "\u004D\u006F", "\u0044\u0069", "\u004D\u0069", "\u0044\u006F", "\u0046\u0072", "\u0053\u0061"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072", "\u004D\u00E4\u0072\u007A", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u007A\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u00E4\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.de_LU;
					}
					break;
				case "dz":
				case "dz_BT":
				case "dz_bt":
					{

						if (!nexacro.Locale.dz_BT) {
							nexacro.Locale.dz_BT = {
								name : "dz_BT", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0042\u0054\u004E\u0020", 
								currency_symbol : "\u0F51\u0F44\u0F74\u0F63\u0F0B\u0F40\u0FB2\u0F58\u0F0B", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0F42\u0F5F\u0F60\u0F0B\u0F5F\u0FB3\u0F0B\u0F56\u0F0B", "\u0F42\u0F5F\u0F60\u0F0B\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B", "\u0F42\u0F5F\u0F60\u0F0B\u0F63\u0FB7\u0F42\u0F0B\u0F55\u0F0B", "\u0F42\u0F5F\u0F60\u0F0B\u0F54\u0F74\u0F62\u0F0B\u0F56\u0F74\u0F0B", "\u0F42\u0F5F\u0F60\u0F0B\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B", "\u0F42\u0F5F\u0F60\u0F0B\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F55\u0F0B", "\u0F42\u0F5F\u0F60\u0F0B\u0F49\u0F72\u0F0B\u0F58\u0F0B"], 
								weekday_names_short : ["\u0F5F\u0FB3\u0F0B", "\u0F58\u0F72\u0F62\u0F0B", "\u0F63\u0FB7\u0F42\u0F0B", "\u0F54\u0F74\u0F62\u0F0B", "\u0F66\u0F44\u0F66\u0F0B", "\u0F66\u0FA4\u0F7A\u0F53\u0F0B", "\u0F49\u0F72\u0F0B"], 
								weekday_names_narrow : ["\u0F5F\u0FB3\u0F0B", "\u0F58\u0F72\u0F62\u0F0B", "\u0F63\u0FB7\u0F42\u0F0B", "\u0F54\u0F74\u0F62\u0F0B", "\u0F66\u0F44\u0F66\u0F0B", "\u0F66\u0FA4\u0F7A\u0F53\u0F0B", "\u0F49\u0F72\u0F0B"], 
								month_names_long : ["\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F44\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F66\u0F74\u0F58\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F5E\u0F72\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F63\u0F94\u0F0B\u0F55\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0FB2\u0F74\u0F42\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F51\u0F74\u0F53\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F62\u0F92\u0FB1\u0F51\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F42\u0F74\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F45\u0F72\u0F42\u0F0B\u0F54\u0F0B", "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54\u0F0B"], 
								month_names_short : ["\u0F5F\u0FB3\u0F0B\u0F21", "\u0F5F\u0FB3\u0F0B\u0F22", "\u0F5F\u0FB3\u0F0B\u0F23", "\u0F5F\u0FB3\u0F0B\u0F24", "\u0F5F\u0FB3\u0F0B\u0F25", "\u0F5F\u0FB3\u0F0B\u0F26", "\u0F5F\u0FB3\u0F0B\u0F27", "\u0F5F\u0FB3\u0F0B\u0F28", "\u0F5F\u0FB3\u0F0B\u0F29", "\u0F5F\u0FB3\u0F0B\u0F21\u0F20", "\u0F5F\u0FB3\u0F0B\u0F21\u0F21", "\u0F5F\u0FB3\u0F0B\u0F21\u0F22"], 
								month_names_narrow : ["\u0F5F\u0FB3\u0F0B\u0F21", "\u0F5F\u0FB3\u0F0B\u0F22", "\u0F5F\u0FB3\u0F0B\u0F23", "\u0F5F\u0FB3\u0F0B\u0F24", "\u0F5F\u0FB3\u0F0B\u0F25", "\u0F5F\u0FB3\u0F0B\u0F26", "\u0F5F\u0FB3\u0F0B\u0F27", "\u0F5F\u0FB3\u0F0B\u0F28", "\u0F5F\u0FB3\u0F0B\u0F29", "\u0F5F\u0FB3\u0F0B\u0F21\u0F20", "\u0F5F\u0FB3\u0F0B\u0F21\u0F21", "\u0F5F\u0FB3\u0F0B\u0F21\u0F22"], 
								ampm : ["\u0F44\u0F66\u0F0B\u0F46", "\u0F55\u0FB1\u0F72\u0F0B\u0F46"], 
								date_format : "\u0F54\u0F66\u0FB1\u0F72\u0F0B\u0F63\u0F7C%y\u0F5F\u0F63%m\u0F5A\u0F7A\u0F66%d", 
								time_format : "\u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51%   H\u0F40\u0F66\u0F62\u0F0B\u0F58%M\u0F40\u0F66\u0F62\u0F0B\u0F46%S", 
								time_format_ampm : "\u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51%I\u0F40\u0F66\u0F62\u0F0B\u0F58%M\u0F40\u0F66\u0F62\u0F0B\u0F46%S %p", 
								date_time_format : "\u0F54\u0F66\u0FB1\u0F72\u0F0B\u0F63\u0F7C%y\u0F5F\u0F63%m\u0F5A\u0F7A\u0F66%d\u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51%H\u0F40\u0F66\u0F62\u0F0B\u0F58%M\u0F40\u0F66\u0F62\u0F0B\u0F46%S", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.dz_BT;
					}
					break;
				case "el_CY":
				case "el_cy":
					{

						if (!nexacro.Locale.el_CY) {
							nexacro.Locale.el_CY = {
								name : "el_CY", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0043\u0059\u0050\u0020", 
								currency_symbol : "\u00A3", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 4, 
								frac_digits : 4, 
								p_cs_precedes : 0, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE", "\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1", "\u03A4\u03C1\u03AF\u03C4\u03B7", "\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7", "\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7", "\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE", "\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF"], 
								weekday_names_short : ["\u039A\u03C5\u03C1", "\u0394\u03B5\u03C5", "\u03A4\u03C1\u03B9", "\u03A4\u03B5\u03C4", "\u03A0\u03B5\u03BC", "\u03A0\u03B1\u03C1", "\u03A3\u03B1\u03B2"], 
								weekday_names_narrow : ["\u039A\u03C5\u03C1", "\u0394\u03B5\u03C5", "\u03A4\u03C1\u03B9", "\u03A4\u03B5\u03C4", "\u03A0\u03B5\u03BC", "\u03A0\u03B1\u03C1", "\u03A3\u03B1\u03B2"], 
								month_names_long : ["\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2", "\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2", "\u039C\u03AC\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2", "\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2", "\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2"], 
								month_names_short : ["\u0399\u03B1\u03BD", "\u03A6\u03B5\u03B2", "\u039C\u03AC\u03C1", "\u0391\u03C0\u03C1", "\u039C\u03AC\u03B9", "\u0399\u03BF\u03CD\u03BD", "\u0399\u03BF\u03CD\u03BB", "\u0391\u03CD\u03B3", "\u03A3\u03B5\u03C0", "\u039F\u03BA\u03C4", "\u039D\u03BF\u03AD", "\u0394\u03B5\u03BA"], 
								month_names_narrow : ["\u0399\u03B1\u03BD", "\u03A6\u03B5\u03B2", "\u039C\u03AC\u03C1", "\u0391\u03C0\u03C1", "\u039C\u03AC\u03B9", "\u0399\u03BF\u03CD\u03BD", "\u0399\u03BF\u03CD\u03BB", "\u0391\u03CD\u03B3", "\u03A3\u03B5\u03C0", "\u039F\u03BA\u03C4", "\u039D\u03BF\u03AD", "\u0394\u03B5\u03BA"], 
								ampm : ["\u03C0\u03BC", "\u03BC\u03BC"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.el_CY;
					}
					break;
				case "el":
				case "el_GR":
				case "el_gr":
					{

						if (!nexacro.Locale.el_GR) {
							nexacro.Locale.el_GR = {
								name : "el_GR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 4, 
								frac_digits : 4, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE", "\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1", "\u03A4\u03C1\u03AF\u03C4\u03B7", "\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7", "\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7", "\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE", "\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF"], 
								weekday_names_short : ["\u039A\u03C5\u03C1", "\u0394\u03B5\u03C5", "\u03A4\u03C1\u03B9", "\u03A4\u03B5\u03C4", "\u03A0\u03B5\u03BC", "\u03A0\u03B1\u03C1", "\u03A3\u03B1\u03B2"], 
								weekday_names_narrow : ["\u039A\u03C5\u03C1", "\u0394\u03B5\u03C5", "\u03A4\u03C1\u03B9", "\u03A4\u03B5\u03C4", "\u03A0\u03B5\u03BC", "\u03A0\u03B1\u03C1", "\u03A3\u03B1\u03B2"], 
								month_names_long : ["\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2", "\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2", "\u039C\u03AC\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2", "\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2", "\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2"], 
								month_names_short : ["\u0399\u03B1\u03BD", "\u03A6\u03B5\u03B2", "\u039C\u03AC\u03C1", "\u0391\u03C0\u03C1", "\u039C\u03AC\u03B9", "\u0399\u03BF\u03CD\u03BD", "\u0399\u03BF\u03CD\u03BB", "\u0391\u03CD\u03B3", "\u03A3\u03B5\u03C0", "\u039F\u03BA\u03C4", "\u039D\u03BF\u03AD", "\u0394\u03B5\u03BA"], 
								month_names_narrow : ["\u0399\u03B1\u03BD", "\u03A6\u03B5\u03B2", "\u039C\u03AC\u03C1", "\u0391\u03C0\u03C1", "\u039C\u03AC\u03B9", "\u0399\u03BF\u03CD\u03BD", "\u0399\u03BF\u03CD\u03BB", "\u0391\u03CD\u03B3", "\u03A3\u03B5\u03C0", "\u039F\u03BA\u03C4", "\u039D\u03BF\u03AD", "\u0394\u03B5\u03BA"], 
								ampm : ["\u03C0\u03BC", "\u03BC\u03BC"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.el_GR;
					}
					break;
				case "en_AU":
				case "en_au":
					{

						if (!nexacro.Locale.en_AU) {
							nexacro.Locale.en_AU = {
								name : "en_AU", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0041\u0055\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_AU;
					}
					break;
				case "en_BW":
				case "en_bw":
					{

						if (!nexacro.Locale.en_BW) {
							nexacro.Locale.en_BW = {
								name : "en_BW", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0042\u0057\u0050\u0020", 
								currency_symbol : "\u0050\u0075", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_BW;
					}
					break;
				case "en_CA":
				case "en_ca":
					{

						if (!nexacro.Locale.en_CA) {
							nexacro.Locale.en_CA = {
								name : "en_CA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0043\u0041\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0042\u002D\u0025\u0064\u002D\u0025\u0079", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_CA;
					}
					break;
				case "en_DK":
				case "en_dk":
					{

						if (!nexacro.Locale.en_DK) {
							nexacro.Locale.en_DK = {
								name : "en_DK", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0044\u004B\u004B\u0020", 
								currency_symbol : "\u00A4", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064\u0054\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_DK;
					}
					break;
				case "en_GB":
				case "en_gb":
					{

						if (!nexacro.Locale.en_GB) {
							nexacro.Locale.en_GB = {
								name : "en_GB", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0047\u0042\u0050\u0020", 
								currency_symbol : "\u00A3", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0050\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_GB;
					}
					break;
				case "en_HK":
				case "en_hk":
					{

						if (!nexacro.Locale.en_HK) {
							nexacro.Locale.en_HK = {
								name : "en_HK", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0048\u004B\u0044\u0020", 
								currency_symbol : "\u0048\u004B\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0070\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u002C\u0020\u0025\u0059\u0020\u0025\u0070\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_HK;
					}
					break;
				case "en_IE":
				case "en_ie":
					{

						if (!nexacro.Locale.en_IE) {
							nexacro.Locale.en_IE = {
								name : "en_IE", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_IE;
					}
					break;
				case "en_IN":
				case "en_in":
					{

						if (!nexacro.Locale.en_IN) {
							nexacro.Locale.en_IN = {
								name : "en_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u20A8\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_IN;
					}
					break;
				case "en_JM":
				case "en_jm":
					{

						if (!nexacro.Locale.en_JM) {
							nexacro.Locale.en_JM = {
								name : "en_JM", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004A\u004D\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0065\u0020\u0025\u0062\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_JM;
					}
					break;
				case "en_MY":
				case "en_my":
					{

						if (!nexacro.Locale.en_MY) {
							nexacro.Locale.en_MY = {
								name : "en_MY", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u0053\u0044\u0020", 
								currency_symbol : "\u0052\u004D", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u006D\u002F\u0025\u0064\u002F\u0025\u0059", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u006E\u002F\u0025\u0065\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_MY;
					}
					break;
				case "en_NZ":
				case "en_nz":
					{

						if (!nexacro.Locale.en_NZ) {
							nexacro.Locale.en_NZ = {
								name : "en_NZ", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004E\u005A\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "U0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_NZ;
					}
				case "en_PH":
				case "en_ph":
					{

						if (!nexacro.Locale.en_PH) {
							nexacro.Locale.en_PH = {
								name : "en_PH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0050\u0048\u0050\u0020", 
								currency_symbol : "\u0050\u0068\u0070", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u0020\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_PH;
					}
					break;
				case "en_SG":
				case "en_sg":
					{

						if (!nexacro.Locale.en_SG) {
							nexacro.Locale.en_SG = {
								name : "en_SG", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0053\u0047\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u002C\u0025\u0042\u002C\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u002C\u0025\u0042\u002C\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u0020\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006E\u002D\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_SG;
					}
					break;
				case "en":
				case "en_US":
				case "en_us":
					{

						if (!nexacro.Locale.en_US) {
							nexacro.Locale.en_US = {
								name : "en_US", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u0053\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u006D\u002F\u0025\u0064\u002F\u0025\u0059", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u0020\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u006E\u002F\u0025\u0065\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_US;
					}
					break;
				case "en_ZA":
				case "en_za":
					{

						if (!nexacro.Locale.en_ZA) {
							nexacro.Locale.en_ZA = {
								name : "en_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002F\u0025\u006D\u002F\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_ZA;
					}
					break;
				case "en_ZW":
				case "en_zw":
					{

						if (!nexacro.Locale.en_ZW) {
							nexacro.Locale.en_ZW = {
								name : "en_ZW", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0057\u0044\u0020", 
								currency_symbol : "\u005A\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0053\u0075\u006E\u0064\u0061\u0079", "\u004D\u006F\u006E\u0064\u0061\u0079", "\u0054\u0075\u0065\u0073\u0064\u0061\u0079", "\u0057\u0065\u0064\u006E\u0065\u0073\u0064\u0061\u0079", "\u0054\u0068\u0075\u0072\u0073\u0064\u0061\u0079", "\u0046\u0072\u0069\u0064\u0061\u0079", "\u0053\u0061\u0074\u0075\u0072\u0064\u0061\u0079"], 
								weekday_names_short : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								weekday_names_narrow : ["\u0053\u0075\u006E", "\u004D\u006F\u006E", "\u0054\u0075\u0065", "\u0057\u0065\u0064", "\u0054\u0068\u0075", "\u0046\u0072\u0069", "\u0053\u0061\u0074"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0079", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0079", "\u004D\u0061\u0072\u0063\u0068", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0079", "\u004A\u0075\u006E\u0065", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u0063\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u0063\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u0020\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u006E\u002F\u0025\u0065\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.en_ZW;
					}
					break;
				case "es_AR":
				case "es_ar":
					{

						if (!nexacro.Locale.es_AR) {
							nexacro.Locale.es_AR = {
								name : "es_AR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0041\u0052\u0053\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_AR;
					}
					break;
				case "es_BO":
				case "es_bo":
					{

						if (!nexacro.Locale.es_BO) {
							nexacro.Locale.es_BO = {
								name : "es_BO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0042\u004F\u0042\u0020", 
								currency_symbol : "\u0024\u0062", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_BO;
					}
					break;
				case "es_CL":
				case "es_cl":
					{

						if (!nexacro.Locale.es_CL) {
							nexacro.Locale.es_CL = {
								name : "es_CL", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0043\u004C\u0050\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_CL;
					}
					break;
				case "es_CO":
				case "es_co":
					{

						if (!nexacro.Locale.es_CO) {
							nexacro.Locale.es_CO = {
								name : "es_CO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0043\u004F\u0050\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_CO;
					}
					break;
				case "es_CR":
				case "es_cr":
					{

						if (!nexacro.Locale.es_CR) {
							nexacro.Locale.es_CR = {
								name : "es_CR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0043\u0052\u0043\u0020", 
								currency_symbol : "\u20A1", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_CR;
					}
					break;
				case "es_DO":
				case "es_do":
					{

						if (!nexacro.Locale.es_DO) {
							nexacro.Locale.es_DO = {
								name : "es_DO", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0044\u004F\u0050\u0020", 
								currency_symbol : "\u0052\u0044\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_DO;
					}
					break;
				case "es_EC":
				case "es_ec":
					{

						if (!nexacro.Locale.es_EC) {
							nexacro.Locale.es_EC = {
								name : "es_EC", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0055\u0053\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_EC;
					}
					break;
				case "es":
				case "es_ES":
				case "es_es":
					{

						if (!nexacro.Locale.es_ES) {
							nexacro.Locale.es_ES = {
								name : "es_ES", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_ES;
					}
					break;
				case "es_GT":
				case "es_gt":
					{

						if (!nexacro.Locale.es_GT) {
							nexacro.Locale.es_GT = {
								name : "es_GT", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0047\u0054\u0051\u0020", 
								currency_symbol : "\u0051", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_GT;
					}
					break;
				case "es_HN":
				case "es_hn":
					{

						if (!nexacro.Locale.es_HN) {
							nexacro.Locale.es_HN = {
								name : "es_HN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0048\u004E\u004C\u0020", 
								currency_symbol : "\u004C\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 999], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_HN;
					}
					break;
				case "es_MX":
				case "es_mx":
					{

						if (!nexacro.Locale.es_MX) {
							nexacro.Locale.es_MX = {
								name : "es_MX", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u004D\u0058\u004E\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_MX;
					}
					break;
				case "es_NI":
				case "es_ni":
					{

						if (!nexacro.Locale.es_NI) {
							nexacro.Locale.es_NI = {
								name : "es_NI", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u004E\u0049\u004F\u0020", 
								currency_symbol : "\u0024\u0043", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_NI;
					}
					break;
				case "es_PA":
				case "es_pa":
					{

						if (!nexacro.Locale.es_PA) {
							nexacro.Locale.es_PA = {
								name : "es_PA", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0050\u0041\u0042\u0020", 
								currency_symbol : "\u0042\u002F", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_PA;
					}
					break;
				case "es_PE":
				case "es_pe":
					{

						if (!nexacro.Locale.es_PE) {
							nexacro.Locale.es_PE = {
								name : "es_PE", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0050\u0045\u004E\u0020", 
								currency_symbol : "\u0053\u002F\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_PE;
					}
					break;
				case "es_PR":
				case "es_pr":
					{

						if (!nexacro.Locale.es_PR) {
							nexacro.Locale.es_PR = {
								name : "es_PR", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0055\u0053\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 999], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_PR;
					}
					break;
				case "es_PY":
				case "es_py":
					{

						if (!nexacro.Locale.es_PY) {
							nexacro.Locale.es_PY = {
								name : "es_PY", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0050\u0059\u0047\u0020", 
								currency_symbol : "\u0047\u0073", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_PY;
					}
					break;
				case "es_SV":
				case "es_sv":
					{

						if (!nexacro.Locale.es_SV) {
							nexacro.Locale.es_SV = {
								name : "es_SV", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0053\u0056\u0043\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 999], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_SV;
					}
					break;
				case "es_US":
				case "es_us":
					{

						if (!nexacro.Locale.es_US) {
							nexacro.Locale.es_US = {
								name : "es_US", 
								name : "es_US", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 999], 
								int_curr_symbol : "\u0055\u0053\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u0020\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u006E\u002F\u0025\u0065\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_US;
					}
					break;
				case "es_UY":
				case "es_uy":
					{

						if (!nexacro.Locale.es_UY) {
							nexacro.Locale.es_UY = {
								name : "es_UY", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0055\u0059\u0055\u0020", 
								currency_symbol : "\u0024\u0055", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_UY;
					}
					break;
				case "es_VE":
				case "es_ve":
					{

						if (!nexacro.Locale.es_VE) {
							nexacro.Locale.es_VE = {
								name : "es_VE", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0056\u0045\u0042\u0020", 
								currency_symbol : "\u0042\u0073\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u006C\u0075\u006E\u0065\u0073", "\u006D\u0061\u0072\u0074\u0065\u0073", "\u006D\u0069\u00E9\u0072\u0063\u006F\u006C\u0065\u0073", "\u006A\u0075\u0065\u0076\u0065\u0073", "\u0076\u0069\u0065\u0072\u006E\u0065\u0073", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0069\u00E9", "\u006A\u0075\u0065", "\u0076\u0069\u0065", "\u0073\u00E1\u0062"], 
								month_names_long : ["\u0065\u006E\u0065\u0072\u006F", "\u0066\u0065\u0062\u0072\u0065\u0072\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0079\u006F", "\u006A\u0075\u006E\u0069\u006F", "\u006A\u0075\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0070\u0074\u0069\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u0075\u0062\u0072\u0065", "\u006E\u006F\u0076\u0069\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0069\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0065\u006E\u0065", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0079", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u006F", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.es_VE;
					}
					break;
				case "et":
				case "et_EE":
				case "et_ee":
					{

						if (!nexacro.Locale.et_EE) {
							nexacro.Locale.et_EE = {
								name : "et_EE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u00A0", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0045\u004B\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0070\u00FC\u0068\u0061\u0070\u00E4\u0065\u0076", "\u0065\u0073\u006D\u0061\u0073\u0070\u00E4\u0065\u0076", "\u0074\u0065\u0069\u0073\u0069\u0070\u00E4\u0065\u0076", "\u006B\u006F\u006C\u006D\u0061\u0070\u00E4\u0065\u0076", "\u006E\u0065\u006C\u006A\u0061\u0070\u00E4\u0065\u0076", "\u0072\u0065\u0065\u0064\u0065", "\u006C\u0061\u0075\u0070\u00E4\u0065\u0076"], 
								weekday_names_short : ["\u0050", "\u0045", "\u0054", "\u004B", "\u004E", "\u0052", "\u004C"], 
								weekday_names_narrow : ["\u0050", "\u0045", "\u0054", "\u004B", "\u004E", "\u0052", "\u004C"], 
								month_names_long : ["\u006A\u0061\u0061\u006E\u0075\u0061\u0072", "\u0076\u0065\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u00E4\u0072\u0074\u0073", "\u0061\u0070\u0072\u0069\u006C\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u0075\u006E\u0069", "\u006A\u0075\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0074\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u0061\u006E\u0020", "\u0076\u0065\u0065\u0062\u0072", "\u006D\u00E4\u0072\u0074\u0073", "\u0061\u0070\u0072\u0020\u0020", "\u006D\u0061\u0069\u0020\u0020", "\u006A\u0075\u0075\u006E\u0069", "\u006A\u0075\u0075\u006C\u0069", "\u0061\u0075\u0067\u0020\u0020", "\u0073\u0065\u0070\u0074\u0020", "\u006F\u006B\u0074\u0020\u0020", "\u006E\u006F\u0076\u0020\u0020", "\u0064\u0065\u0074\u0073\u0020"], 
								month_names_narrow : ["\u006A\u0061\u0061\u006E\u0020", "\u0076\u0065\u0065\u0062\u0072", "\u006D\u00E4\u0072\u0074\u0073", "\u0061\u0070\u0072\u0020\u0020", "\u006D\u0061\u0069\u0020\u0020", "\u006A\u0075\u0075\u006E\u0069", "\u006A\u0075\u0075\u006C\u0069", "\u0061\u0075\u0067\u0020\u0020", "\u0073\u0065\u0070\u0074\u0020", "\u006F\u006B\u0074\u0020\u0020", "\u006E\u006F\u0076\u0020\u0020", "\u0064\u0065\u0074\u0073\u0020"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059\u002E\u0020\u0020\\\u0061\u002E", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.et_EE;
					}
					break;
				case "eu":
				case "eu_ES":
				case "eu_es":
					{

						if (!nexacro.Locale.eu_ES) {
							nexacro.Locale.eu_ES = {
								name : "eu_ES", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0069\u0067\u0061\u006E\u0064\u0065\u0061", "\u0061\u0073\u0074\u0065\u006C\u0065\u0068\u0065\u006E\u0061", "\u0061\u0073\u0074\u0065\u0061\u0072\u0074\u0065\u0061", "\u0061\u0073\u0074\u0065\u0061\u007A\u006B\u0065\u006E\u0061", "\u006F\u0073\u0074\u0065\u0067\u0075\u006E\u0061", "\u006F\u0073\u0074\u0069\u0072\u0061\u006C\u0061", "\u006C\u0061\u0072\u0075\u006E\u0062\u0061\u0074\u0061"], 
								weekday_names_short : ["\u0069\u0067\u002E", "\u0061\u006C\u002E", "\u0061\u0072\u002E", "\u0061\u007A\u002E", "\u006F\u0067\u002E", "\u006F\u0072\u002E", "\u006C\u0072\u002E"], 
								weekday_names_narrow : ["\u0069\u0067\u002E", "\u0061\u006C\u002E", "\u0061\u0072\u002E", "\u0061\u007A\u002E", "\u006F\u0067\u002E", "\u006F\u0072\u002E", "\u006C\u0072\u002E"], 
								month_names_long : ["\u0075\u0072\u0074\u0061\u0072\u0072\u0069\u006C\u0061", "\u006F\u0074\u0073\u0061\u0069\u006C\u0061", "\u006D\u0061\u0072\u0074\u0078\u006F\u0061", "\u0061\u0070\u0069\u0072\u0069\u006C\u0061", "\u006D\u0061\u0069\u0061\u0074\u007A\u0061", "\u0065\u006B\u0061\u0069\u006E\u0061", "\u0075\u007A\u0074\u0061\u0069\u006C\u0061", "\u0061\u0062\u0075\u007A\u0074\u0075\u0061", "\u0069\u0072\u0061\u0069\u006C\u0061", "\u0075\u0072\u0072\u0069\u0061", "\u0061\u007A\u0061\u0072\u006F\u0061", "\u0061\u0062\u0065\u006E\u0064\u0075\u0061"], 
								month_names_short : ["\u0075\u0072\u0074", "\u006F\u0074\u0073", "\u006D\u0061\u0072", "\u0061\u0070\u0069", "\u006D\u0061\u0069", "\u0065\u006B\u0061", "\u0075\u007A\u0074", "\u0061\u0062\u0075", "\u0069\u0072\u0061", "\u0075\u0072\u0072", "\u0061\u007A\u0061", "\u0061\u0062\u0065"], 
								month_names_narrow : ["\u0075\u0072\u0074", "\u006F\u0074\u0073", "\u006D\u0061\u0072", "\u0061\u0070\u0069", "\u006D\u0061\u0069", "\u0065\u006B\u0061", "\u0075\u007A\u0074", "\u0061\u0062\u0075", "\u0069\u0072\u0061", "\u0075\u0072\u0072", "\u0061\u007A\u0061", "\u0061\u0062\u0065"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0061\u002C\u0020\u0025\u0059\u002E\u0065\u006B\u006F\u0020\u0025\u0062\u0072\u0065\u006E\u0020\u0025\u0064\u0061", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0079\u002D\u0025\u006D\u002D\u0025\u0064\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0059\u002E\u0065\u006B\u006F\u0020\u0025\u0042\u0020\u0025\u0065", 
								shortdate_format : "\u0025\u0059\u002F\u0025\u006D\u002F\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.eu_ES;
					}
					break;
				case "fa":
				case "fa_IR":
				case "fa_ir":
					{

						if (!nexacro.Locale.fa_IR) {
							nexacro.Locale.fa_IR = {
								name : "fa_IR", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0049\u0052\u0052\u0020", 
								currency_symbol : "\u0631\u06CC\u0627\u0644", 
								mon_decimal_point : "\u066B", 
								mon_thousands_sep : "\u066C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 0, 
								frac_digits : 0, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u06CC\u06A9\u0634\u0646\u0628\u0647", "\u062F\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200C\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067E\u0646\u062C\u0634\u0646\u0628\u0647", "\u062C\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647"], 
								weekday_names_short : ["\u06CC\u06A9\u0634\u0646\u0628\u0647", "\u062F\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200C\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067E\u0646\u062C\u0634\u0646\u0628\u0647", "\u062C\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647"], 
								weekday_names_narrow : ["\u06CC\u06A9\u0634\u0646\u0628\u0647", "\u062F\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200C\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067E\u0646\u062C\u0634\u0646\u0628\u0647", "\u062C\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647"], 
								month_names_long : ["\u0698\u0627\u0646\u0648\u06CC\u0647", "\u0641\u0648\u0631\u06CC\u0647", "\u0645\u0627\u0631\u0633", "\u0622\u0648\u0631\u06CC\u0644", "\u0645\u0647", "\u0698\u0648\u0626\u0646", "\u0698\u0648\u0626\u06CC\u0647", "\u0627\u0648\u062A", "\u0633\u067E\u062A\u0627\u0645\u0628\u0631", "\u0627\u0643\u062A\u0628\u0631", "\u0646\u0648\u0627\u0645\u0628\u0631", "\u062F\u0633\u0627\u0645\u0628\u0631"], 
								month_names_short : ["\u0698\u0627\u0646\u0648\u06CC\u0647", "\u0641\u0648\u0631\u06CC\u0647", "\u0645\u0627\u0631\u0633", "\u0622\u0648\u0631\u06CC\u0644", "\u0645\u0647", "\u0698\u0648\u0626\u0646", "\u0698\u0648\u0626\u06CC\u0647", "\u0627\u0648\u062A", "\u0633\u067E\u062A\u0627\u0645\u0628\u0631", "\u0627\u0643\u062A\u0628\u0631", "\u0646\u0648\u0627\u0645\u0628\u0631", "\u062F\u0633\u0627\u0645\u0628\u0631"], 
								month_names_narrow : ["\u0698\u0627\u0646\u0648\u06CC\u0647", "\u0641\u0648\u0631\u06CC\u0647", "\u0645\u0627\u0631\u0633", "\u0622\u0648\u0631\u06CC\u0644", "\u0645\u0647", "\u0698\u0648\u0626\u0646", "\u0698\u0648\u0626\u06CC\u0647", "\u0627\u0648\u062A", "\u0633\u067E\u062A\u0627\u0645\u0628\u0631", "\u0627\u0643\u062A\u0628\u0631", "\u0646\u0648\u0627\u0645\u0628\u0631", "\u062F\u0633\u0627\u0645\u0628\u0631"], 
								ampm : ["", ""], 
								date_format : "\u0025\u004F\u0079\u002F\u0025\u004F\u006D\u002F\u0025\u004F\u0064", 
								time_format : "\u0025\u004F\u0048\u003A\u0025\u004F\u004D\u003A\u0025\u004F\u0053", 
								time_format_ampm : "", 
								date_time_format : "\u202B\u0025\u0041\u0020\u0025\u004F\u0065\u0020\u0025\u0042\u0020\u0025\u004F\u0079\u060C\u0020\u0025\u004F\u0048\u003A\u0025\u004F\u004D\u003A\u0025\u004F\u0053\u202C", 
								full_date_time_format : "\u202B\u0025\u0041\u0020\u0025\u004F\u0065\u0020\u0025\u0042\u0020\u0025\u004F\u0079\u060C\u0020\u0633\u0627\u0639\u062A\u0020\u0025\u004F\u0048\u003A\u0025\u004F\u004D\u003A\u0025\u004F\u0053\u0020\u0028\u0025\u005A\u0029\u202C", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.fa_IR;
					}
					break;
				case "fi":
				case "fi_FI":
				case "fi_fi":
					{

						if (!nexacro.Locale.fi_FI) {
							nexacro.Locale.fi_FI = {
								name : "fi_FI", 
								decimal_point : "\u002C", 
								thousands_sep : "\u00A0", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 2, 
								n_cs_precedes : 0, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0073\u0075\u006E\u006E\u0075\u006E\u0074\u0061\u0069", "\u006D\u0061\u0061\u006E\u0061\u006E\u0074\u0061\u0069", "\u0074\u0069\u0069\u0073\u0074\u0061\u0069", "\u006B\u0065\u0073\u006B\u0069\u0076\u0069\u0069\u006B\u006B\u006F", "\u0074\u006F\u0072\u0073\u0074\u0061\u0069", "\u0070\u0065\u0072\u006A\u0061\u006E\u0074\u0061\u0069", "\u006C\u0061\u0075\u0061\u006E\u0074\u0061\u0069"], 
								weekday_names_short : ["\u0073\u0075", "\u006D\u0061", "\u0074\u0069", "\u006B\u0065", "\u0074\u006F", "\u0070\u0065", "\u006C\u0061"], 
								weekday_names_narrow : ["\u0073\u0075", "\u006D\u0061", "\u0074\u0069", "\u006B\u0065", "\u0074\u006F", "\u0070\u0065", "\u006C\u0061"], 
								month_names_long : ["\u0074\u0061\u006D\u006D\u0069\u006B\u0075\u0075", "\u0068\u0065\u006C\u006D\u0069\u006B\u0075\u0075", "\u006D\u0061\u0061\u006C\u0069\u0073\u006B\u0075\u0075", "\u0068\u0075\u0068\u0074\u0069\u006B\u0075\u0075", "\u0074\u006F\u0075\u006B\u006F\u006B\u0075\u0075", "\u006B\u0065\u0073\u00E4\u006B\u0075\u0075", "\u0068\u0065\u0069\u006E\u00E4\u006B\u0075\u0075", "\u0065\u006C\u006F\u006B\u0075\u0075", "\u0073\u0079\u0079\u0073\u006B\u0075\u0075", "\u006C\u006F\u006B\u0061\u006B\u0075\u0075", "\u006D\u0061\u0072\u0072\u0061\u0073\u006B\u0075\u0075", "\u006A\u006F\u0075\u006C\u0075\u006B\u0075\u0075"], 
								month_names_short : ["\u0074\u0061\u006D\u006D\u0069\u00A0", "\u0068\u0065\u006C\u006D\u0069\u00A0", "\u006D\u0061\u0061\u006C\u0069\u0073", "\u0068\u0075\u0068\u0074\u0069\u00A0", "\u0074\u006F\u0075\u006B\u006F\u00A0", "\u006B\u0065\u0073\u00E4\u00A0\u00A0", "\u0068\u0065\u0069\u006E\u00E4\u00A0", "\u0065\u006C\u006F\u00A0\u00A0\u00A0", "\u0073\u0079\u0079\u0073\u00A0\u00A0", "\u006C\u006F\u006B\u0061\u00A0\u00A0", "\u006D\u0061\u0072\u0072\u0061\u0073", "\u006A\u006F\u0075\u006C\u0075\u00A0"], 
								month_names_narrow : ["\u0074\u0061\u006D\u006D\u0069\u00A0", "\u0068\u0065\u006C\u006D\u0069\u00A0", "\u006D\u0061\u0061\u006C\u0069\u0073", "\u0068\u0075\u0068\u0074\u0069\u00A0", "\u0074\u006F\u0075\u006B\u006F\u00A0", "\u006B\u0065\u0073\u00E4\u00A0\u00A0", "\u0068\u0065\u0069\u006E\u00E4\u00A0", "\u0065\u006C\u006F\u00A0\u00A0\u00A0", "\u0073\u0079\u0079\u0073\u00A0\u00A0", "\u006C\u006F\u006B\u0061\u00A0\u00A0", "\u006D\u0061\u0072\u0072\u0061\u0073", "\u006A\u006F\u0075\u006C\u0075\u00A0"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0065\u002E\u0020\u0025\u0042\u0074\u0061\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0064\u002E\u0025\u002D\u006D\u002E\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u007A", 
								first_weekday : 1, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fi_FI;
					}
					break;
				case "fo":
				case "fo_FO":
				case "fo_fo":
					{

						if (!nexacro.Locale.fo_FO) {
							nexacro.Locale.fo_FO = {
								name : "fo_FO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0044\u004B\u004B\u0020", 
								currency_symbol : "\u006B\u0072\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 2, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u0075\u006E\u006E\u0075\u0064\u0061\u0067\u0075\u0072", "\u006D\u00E1\u006E\u0061\u0064\u0061\u0067\u0075\u0072", "\u0074\u00FD\u0073\u0064\u0061\u0067\u0075\u0072", "\u006D\u0069\u006B\u0075\u0064\u0061\u0067\u0075\u0072", "\u0068\u00F3\u0073\u0064\u0061\u0067\u0075\u0072", "\u0066\u0072\u00ED\u0067\u0067\u006A\u0061\u0064\u0061\u0067\u0075\u0072", "\u006C\u0065\u0079\u0067\u0061\u0072\u0064\u0061\u0067\u0075\u0072"], 
								weekday_names_short : ["\u0073\u0075\u006E", "\u006D\u00E1\u006E", "\u0074\u00FD\u0073", "\u006D\u0069\u006B", "\u0068\u00F3\u0073", "\u0066\u0072\u00ED", "\u006C\u0065\u0079"], 
								weekday_names_narrow : ["\u0073\u0075\u006E", "\u006D\u00E1\u006E", "\u0074\u00FD\u0073", "\u006D\u0069\u006B", "\u0068\u00F3\u0073", "\u0066\u0072\u00ED", "\u006C\u0065\u0079"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u00ED\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fo_FO;
					}
					break;
				case "fr_BE":
				case "fr_be":
					{

						if (!nexacro.Locale.fr_BE) {
							nexacro.Locale.fr_BE = {
								name : "fr_BE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0064\u0069\u006D\u0061\u006E\u0063\u0068\u0065", "\u006C\u0075\u006E\u0064\u0069", "\u006D\u0061\u0072\u0064\u0069", "\u006D\u0065\u0072\u0063\u0072\u0065\u0064\u0069", "\u006A\u0065\u0075\u0064\u0069", "\u0076\u0065\u006E\u0064\u0072\u0065\u0064\u0069", "\u0073\u0061\u006D\u0065\u0064\u0069"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								month_names_long : ["\u006A\u0061\u006E\u0076\u0069\u0065\u0072", "\u0066\u00E9\u0076\u0072\u0069\u0065\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0076\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u0069\u006E", "\u006A\u0075\u0069\u006C\u006C\u0065\u0074", "\u0061\u006F\u00FB\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u00E9\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fr_BE;
					}
					break;
				case "fr_CA":
				case "fr_ca":
					{

						if (!nexacro.Locale.fr_CA) {
							nexacro.Locale.fr_CA = {
								name : "fr_CA", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0043\u0041\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u0064\u0069\u006D\u0061\u006E\u0063\u0068\u0065", "\u006C\u0075\u006E\u0064\u0069", "\u006D\u0061\u0072\u0064\u0069", "\u006D\u0065\u0072\u0063\u0072\u0065\u0064\u0069", "\u006A\u0065\u0075\u0064\u0069", "\u0076\u0065\u006E\u0064\u0072\u0065\u0064\u0069", "\u0073\u0061\u006D\u0065\u0064\u0069"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								month_names_long : ["\u006A\u0061\u006E\u0076\u0069\u0065\u0072", "\u0066\u00E9\u0076\u0072\u0069\u0065\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0076\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u0069\u006E", "\u006A\u0075\u0069\u006C\u006C\u0065\u0074", "\u0061\u006F\u00FB\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u00E9\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fr_CA;
					}
					break;
				case "fr_CH":
				case "fr_ch":
					{

						if (!nexacro.Locale.fr_CH) {
							nexacro.Locale.fr_CH = {
								name : "fr_CH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u0027", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0043\u0048\u0046\u0020", 
								currency_symbol : "\u0066\u0072\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0027", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0064\u0069\u006D\u0061\u006E\u0063\u0068\u0065", "\u006C\u0075\u006E\u0064\u0069", "\u006D\u0061\u0072\u0064\u0069", "\u006D\u0065\u0072\u0063\u0072\u0065\u0064\u0069", "\u006A\u0065\u0075\u0064\u0069", "\u0076\u0065\u006E\u0064\u0072\u0065\u0064\u0069", "\u0073\u0061\u006D\u0065\u0064\u0069"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								month_names_long : ["\u006A\u0061\u006E\u0076\u0069\u0065\u0072", "\u0066\u00E9\u0076\u0072\u0069\u0065\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0076\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u0069\u006E", "\u006A\u0075\u0069\u006C\u006C\u0065\u0074", "\u0061\u006F\u00FB\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u00E9\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0020\u0025\u006D\u002E\u0020\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fr_CH;
					}
					break;
				case "fr":
				case "fr_FR":
				case "fr_fr":
					{

						if (!nexacro.Locale.fr_FR) {
							nexacro.Locale.fr_FR = {
								name : "fr_FR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u006D\u0061\u006E\u0063\u0068\u0065", "\u006C\u0075\u006E\u0064\u0069", "\u006D\u0061\u0072\u0064\u0069", "\u006D\u0065\u0072\u0063\u0072\u0065\u0064\u0069", "\u006A\u0065\u0075\u0064\u0069", "\u0076\u0065\u006E\u0064\u0072\u0065\u0064\u0069", "\u0073\u0061\u006D\u0065\u0064\u0069"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								month_names_long : ["\u006A\u0061\u006E\u0076\u0069\u0065\u0072", "\u0066\u00E9\u0076\u0072\u0069\u0065\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0076\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u0069\u006E", "\u006A\u0075\u0069\u006C\u006C\u0065\u0074", "\u0061\u006F\u00FB\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u00E9\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fr_FR;
					}
					break;
				case "fr_LU":
				case "fr_lu":
					{

						if (!nexacro.Locale.fr_LU) {
							nexacro.Locale.fr_LU = {
								name : "fr_LU", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u006D\u0061\u006E\u0063\u0068\u0065", "\u006C\u0075\u006E\u0064\u0069", "\u006D\u0061\u0072\u0064\u0069", "\u006D\u0065\u0072\u0063\u0072\u0065\u0064\u0069", "\u006A\u0065\u0075\u0064\u0069", "\u0076\u0065\u006E\u0064\u0072\u0065\u0064\u0069", "\u0073\u0061\u006D\u0065\u0064\u0069"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006A\u0065\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u006D"], 
								month_names_long : ["\u006A\u0061\u006E\u0076\u0069\u0065\u0072", "\u0066\u00E9\u0076\u0072\u0069\u0065\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0076\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u0069\u006E", "\u006A\u0075\u0069\u006C\u006C\u0065\u0074", "\u0061\u006F\u00FB\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u00E9\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u00E9\u0076", "\u006D\u0061\u0072", "\u0061\u0076\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u0069", "\u0061\u006F\u00FB", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u00E9\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fr_LU;
					}
					break;
				case "fy":
				case "fy_NL":
				case "fy_nl":
					{

						if (!nexacro.Locale.fy_NL) {
							nexacro.Locale.fy_NL = {
								name : "fy_NL", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u0053\u006E\u0065\u0069\u006E", "\u004D\u006F\u0061\u006E\u0064\u0065\u0069", "\u0054\u0069\u0069\u0073\u0064\u0065\u0069", "\u0057\u006F\u0061\u006E\u0073\u0064\u0065\u0069", "\u0054\u006F\u006E\u0067\u0065\u0072\u0073\u0064\u0065\u0069", "\u0046\u0072\u0065\u0065\u0064", "\u0053\u006E\u0065\u006F\u006E"], 
								weekday_names_short : ["\u0053\u006E", "\u004D\u006F", "\u0054\u0069", "\u0057\u006F", "\u0054\u006F", "\u0046\u0072", "\u0053\u006E"], 
								weekday_names_narrow : ["\u0053\u006E", "\u004D\u006F", "\u0054\u0069", "\u0057\u006F", "\u0054\u006F", "\u0046\u0072", "\u0053\u006E"], 
								month_names_long : ["\u004A\u0061\u006E\u0061\u0072\u0069\u0073", "\u0046\u0065\u0062\u0072\u0065\u0077\u0061\u0072\u0069\u0073", "\u004D\u0061\u0061\u0072\u0074", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0061\u0061\u0069\u0065", "\u004A\u0075\u006E\u0079", "\u004A\u0075\u006C\u0079", "\u0041\u0075\u0067\u0075\u0073\u0074\u0075\u0073", "\u0053\u0065\u0070\u0074\u0069\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0069\u006D\u0062\u0065\u0072", "\u0044\u0065\u0073\u0069\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0061", "\u0041\u0070\u0072", "\u004D\u0061\u0061", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0061", "\u0041\u0070\u0072", "\u004D\u0061\u0061", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0075\u0067", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.fy_NL;
					}
					break;
				case "ga":
				case "ga_IE":
				case "ga_ie":
					{

						if (!nexacro.Locale.ga_IE) {
							nexacro.Locale.ga_IE = {
								name : "ga_IE", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0044\u00E9\u0020\u0044\u006F\u006D\u0068\u006E\u0061\u0069\u0067\u0068", "\u0044\u00E9\u0020\u004C\u0075\u0061\u0069\u006E", "\u0044\u00E9\u0020\u004D\u00E1\u0069\u0072\u0074", "\u0044\u00E9\u0020\u0043\u00E9\u0061\u0064\u0061\u006F\u0069\u006E", "\u0044\u00E9\u0061\u0072\u0064\u0061\u006F\u0069\u006E", "\u0044\u00E9\u0020\u0068\u0041\u006F\u0069\u006E\u0065", "\u0044\u00E9\u0020\u0053\u0061\u0074\u0068\u0061\u0069\u0072\u006E"], 
								weekday_names_short : ["\u0044\u006F\u006D\u0068", "\u004C\u0075\u0061\u006E", "\u004D\u00E1\u0069\u0072\u0074", "\u0043\u00E9\u0061\u0064", "\u0044\u00E9\u0061\u0072", "\u0041\u006F\u0069\u006E\u0065", "\u0053\u0061\u0074\u0068"], 
								weekday_names_narrow : ["\u0044\u006F\u006D\u0068", "\u004C\u0075\u0061\u006E", "\u004D\u00E1\u0069\u0072\u0074", "\u0043\u00E9\u0061\u0064", "\u0044\u00E9\u0061\u0072", "\u0041\u006F\u0069\u006E\u0065", "\u0053\u0061\u0074\u0068"], 
								month_names_long : ["\u0045\u0061\u006E\u00E1\u0069\u0072", "\u0046\u0065\u0061\u0062\u0068\u0072\u0061", "\u004D\u00E1\u0072\u0074\u0061", "\u0041\u0069\u0062\u0072\u0065\u00E1\u006E", "\u004D\u00ED\u0020\u006E\u0061\u0020\u0042\u0065\u0061\u006C\u0074\u0061\u0069\u006E\u0065", "\u004D\u0065\u0069\u0074\u0068", "\u0049\u00FA\u0069\u006C", "\u004C\u00FA\u006E\u0061\u0073\u0061", "\u004D\u0065\u00E1\u006E\u0020\u0046\u00F3\u006D\u0068\u0061\u0069\u0072", "\u0044\u0065\u0069\u0072\u0065\u0061\u0064\u0068\u0020\u0046\u00F3\u006D\u0068\u0061\u0069\u0072", "\u004D\u00ED\u0020\u006E\u0061\u0020\u0053\u0061\u006D\u0068\u006E\u0061", "\u004D\u00ED\u0020\u006E\u0061\u0020\u004E\u006F\u006C\u006C\u0061\u0067"], 
								month_names_short : ["\u0045\u0061\u006E", "\u0046\u0065\u0061\u0062\u0068", "\u004D\u00E1\u0072\u0074\u0061", "\u0041\u0069\u0062", "\u0042\u0065\u0061\u006C", "\u004D\u0065\u0069\u0074\u0068", "\u0049\u00FA\u0069\u006C", "\u004C\u00FA\u006E", "\u004D\u0046\u00F3\u006D\u0068", "\u0044\u0046\u00F3\u006D\u0068", "\u0053\u0061\u006D\u0068", "\u004E\u006F\u006C\u006C"], 
								month_names_narrow : ["\u0045\u0061\u006E", "\u0046\u0065\u0061\u0062\u0068", "\u004D\u00E1\u0072\u0074\u0061", "\u0041\u0069\u0062", "\u0042\u0065\u0061\u006C", "\u004D\u0065\u0069\u0074\u0068", "\u0049\u00FA\u0069\u006C", "\u004C\u00FA\u006E", "\u004D\u0046\u00F3\u006D\u0068", "\u0044\u0046\u00F3\u006D\u0068", "\u0053\u0061\u006D\u0068", "\u004E\u006F\u006C\u006C"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ga_IE;
					}
					break;
				case "gd":
				case "gd_GB":
				case "gd_gb":
					{

						if (!nexacro.Locale.gd_GB) {
							nexacro.Locale.gd_GB = {
								name : "gd_GB", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0047\u0042\u0050\u0020", 
								currency_symbol : "\u00A3", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0044\u0069\u0064\u00F2\u006D\u0068\u006E\u0061\u0069\u0063\u0068", "\u0044\u0069\u006C\u0075\u0061\u0069\u006E", "\u0044\u0069\u006D\u00E0\u0069\u0072\u0074", "\u0044\u0069\u0063\u0069\u0061\u0064\u0061\u0069\u006E", "\u0044\u0069\u0061\u0072\u0064\u0061\u006F\u0069\u006E", "\u0044\u0069\u0068\u0061\u006F\u0069\u006E\u0065", "\u0044\u0069\u0073\u0061\u0074\u0068\u0061\u0069\u0072\u006E\u0065"], 
								weekday_names_short : ["\u0044\u0069\u0064\u006F", "\u0044\u0069\u006C\u0075", "\u0044\u0069\u006D", "\u0044\u0069\u0063", "\u0044\u0069\u0061\u0072", "\u0044\u0069\u0068\u0061", "\u0044\u0069\u0073\u0061"], 
								weekday_names_narrow : ["\u0044\u0069\u0064\u006F", "\u0044\u0069\u006C\u0075", "\u0044\u0069\u006D", "\u0044\u0069\u0063", "\u0044\u0069\u0061\u0072", "\u0044\u0069\u0068\u0061", "\u0044\u0069\u0073\u0061"], 
								month_names_long : ["\u0041\u006D\u0020\u0046\u0061\u006F\u0069\u006C\u0074\u0065\u0061\u0063\u0068", "\u0041\u006E\u0020\u0047\u0065\u0061\u0072\u0072\u0061\u006E", "\u0041\u006D\u0020\u004D\u00E0\u0072\u0074", "\u0041\u006E\u0020\u0047\u0069\u0062\u006C\u0065\u0061\u006E", "\u0041\u0027\u0020\u004D\u0068\u00E0\u0069\u0067\u0068", "\u0041\u006E\u0020\u0074\u002D\u004D\u0068\u00EC\u006F\u0073", "\u0041\u006E\u0020\u0074\u002D\u006C\u0075\u0063\u0068\u0061\u0072", "\u0041\u006E\u0020\u004C\u00F9\u006E\u0061\u0073\u0064\u0061\u006C", "\u0041\u006E\u0020\u0074\u002D\u0053\u0075\u006C\u0074\u0061\u0069\u006E", "\u0041\u006E\u0020\u0044\u0061\u006D\u0068\u0061\u0069\u0072", "\u0041\u006E\u0020\u0074\u002D\u0053\u0061\u006D\u0068\u0061\u0069\u006E", "\u0041\u006E\u0020\u0044\u00F9\u0062\u0068\u006C\u0061\u0063\u0068\u0064"], 
								month_names_short : ["\u0046\u0061\u006F", "\u0047\u0065\u0061", "\u004D\u00E0\u0072", "\u0047\u0069\u0062", "\u004D\u0068\u00E0", "\u004F\u0067\u004D", "\u006C\u0075\u0063", "\u004C\u00F9\u006E", "\u0053\u0075\u006C", "\u0044\u0061\u006D", "\u0053\u0061\u006D", "\u0044\u00F9\u0062"], 
								month_names_narrow : ["\u0046\u0061\u006F", "\u0047\u0065\u0061", "\u004D\u00E0\u0072", "\u0047\u0069\u0062", "\u004D\u0068\u00E0", "\u004F\u0067\u004D", "\u006C\u0075\u0063", "\u004C\u00F9\u006E", "\u0053\u0075\u006C", "\u0044\u0061\u006D", "\u0053\u0061\u006D", "\u0044\u00F9\u0062"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.gd_GB;
					}
					break;
				case "gl":
				case "gl_ES":
				case "gl_es":
					{

						if (!nexacro.Locale.gl_ES) {
							nexacro.Locale.gl_ES = {
								name : "gl_ES", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0044\u006F\u006D\u0069\u006E\u0067\u006F", "\u004C\u0075\u006E\u0073", "\u004D\u0061\u0072\u0074\u0065\u0073", "\u004D\u00E9\u0072\u0063\u006F\u0072\u0065\u0073", "\u0058\u006F\u0076\u0065\u0073", "\u0056\u0065\u006E\u0072\u0065\u0073", "\u0053\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0044\u006F\u006D", "\u004C\u0075\u006E", "\u004D\u0061\u0072", "\u004D\u00E9\u0072", "\u0058\u006F\u0076", "\u0056\u0065\u006E", "\u0053\u00E1\u0062"], 
								weekday_names_narrow : ["\u0044\u006F\u006D", "\u004C\u0075\u006E", "\u004D\u0061\u0072", "\u004D\u00E9\u0072", "\u0058\u006F\u0076", "\u0056\u0065\u006E", "\u0053\u00E1\u0062"], 
								month_names_long : ["\u0058\u0061\u006E\u0065\u0069\u0072\u006F", "\u0046\u0065\u0062\u0072\u0065\u0069\u0072\u006F", "\u004D\u0061\u0072\u007A\u006F", "\u0041\u0062\u0072\u0069\u006C", "\u004D\u0061\u0069\u006F", "\u0058\u0075\u00F1\u006F", "\u0058\u0075\u006C\u006C\u006F", "\u0041\u0067\u006F\u0073\u0074\u006F", "\u0053\u0065\u0074\u0065\u006D\u0062\u0072\u006F", "\u004F\u0075\u0074\u0075\u0062\u0072\u006F", "\u004E\u006F\u0076\u0065\u006D\u0062\u0072\u006F", "\u0044\u0065\u0063\u0065\u006D\u0062\u0072\u006F"], 
								month_names_short : ["\u0058\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0069", "\u0058\u0075\u00F1", "\u0058\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0074", "\u004F\u0075\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								month_names_narrow : ["\u0058\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0069", "\u0058\u0075\u00F1", "\u0058\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0074", "\u004F\u0075\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.gl_ES;
					}
					break;
				case "gu":
				case "gu_IN":
				case "gu_in":
					{

						if (!nexacro.Locale.gu_IN) {
							nexacro.Locale.gu_IN = {
								name : "gu_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0AB0\u0AC2", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0AB0\u0AB5\u0ABF\u0AB5\u0ABE\u0AB0", "\u0AB8\u0ACB\u0AAE\u0AB5\u0ABE\u0AB0", "\u0AAE\u0A82\u0A97\u0AB3\u0AB5\u0ABE\u0AB0", "\u0AAC\u0AC1\u0AA7\u0AB5\u0ABE\u0AB0", "\u0A97\u0AC1\u0AB0\u0AC1\u0AB5\u0ABE\u0AB0", "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0\u0AB5\u0ABE\u0AB0", "\u0AB6\u0AA8\u0ABF\u0AB5\u0ABE\u0AB0"], 
								weekday_names_short : ["\u0AB0\u0AB5\u0ABF", "\u0AB8\u0ACB\u0AAE", "\u0AAE\u0A82\u0A97\u0AB3", "\u0AAC\u0AC1\u0AA7", "\u0A97\u0AC1\u0AB0\u0AC1", "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0", "\u0AB6\u0AA8\u0ABF"], 
								weekday_names_narrow : ["\u0AB0\u0AB5\u0ABF", "\u0AB8\u0ACB\u0AAE", "\u0AAE\u0A82\u0A97\u0AB3", "\u0AAC\u0AC1\u0AA7", "\u0A97\u0AC1\u0AB0\u0AC1", "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0", "\u0AB6\u0AA8\u0ABF"], 
								month_names_long : ["\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1\u0A86\u0AB0\u0AC0", "\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1\u0A86\u0AB0\u0AC0", "\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A", "\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF\u0AB2", "\u0AAE\u0AC7", "\u0A9C\u0AC1\u0AA8", "\u0A9C\u0AC1\u0AB2\u0ABE\u0A87", "\u0A93\u0A97\u0AB8\u0ACD\u0A9F", "\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0", "\u0A93\u0A95\u0ACD\u0A9F\u0ACB\u0AAC\u0AB0", "\u0AA8\u0AB5\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0", "\u0AA1\u0ABF\u0AB8\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0"], 
								month_names_short : ["\u0A9C\u0ABE\u0AA8", "\u0AAB\u0AC7\u0AAC", "\u0AAE\u0ABE\u0AB0", "\u0A8F\u0AAA\u0ACD\u0AB0", "\u0AAE\u0AC7", "\u0A9C\u0AC1\u0AA8", "\u0A9C\u0AC1\u0AB2", "\u0A93\u0A97", "\u0AB8\u0AAA\u0ACD\u0A9F", "\u0A93\u0A95\u0ACD\u0A9F", "\u0AA8\u0ACB\u0AB5", "\u0AA1\u0ABF\u0AB8"], 
								month_names_narrow : ["\u0A9C\u0ABE\u0AA8", "\u0AAB\u0AC7\u0AAC", "\u0AAE\u0ABE\u0AB0", "\u0A8F\u0AAA\u0ACD\u0AB0", "\u0AAE\u0AC7", "\u0A9C\u0AC1\u0AA8", "\u0A9C\u0AC1\u0AB2", "\u0A93\u0A97", "\u0AB8\u0AAA\u0ACD\u0A9F", "\u0A93\u0A95\u0ACD\u0A9F", "\u0AA8\u0ACB\u0AB5", "\u0AA1\u0ABF\u0AB8"], 
								ampm : ["\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7", "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.gu_IN;
					}
					break;
				case "gv":
				case "gv_GB":
				case "gv_gb":
					{

						if (!nexacro.Locale.gv_GB) {
							nexacro.Locale.gv_GB = {
								name : "gv_GB", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0047\u0042\u0050\u0020", 
								currency_symbol : "\u00A3", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004A\u0065\u0064\u006F\u006F\u006E\u0065\u0065", "\u004A\u0065\u006C\u0068\u0065\u0069\u006E", "\u004A\u0065\u006D\u0061\u0079\u0072\u0074", "\u004A\u0065\u0072\u0063\u0065\u0061\u006E", "\u004A\u0065\u0072\u0064\u0065\u0069\u006E", "\u004A\u0065\u0068\u0065\u0069\u006E\u0065\u0079", "\u004A\u0065\u0073\u0061\u0072\u006E"], 
								weekday_names_short : ["\u004A\u0065\u0064", "\u004A\u0065\u006C", "\u004A\u0065\u006D", "\u004A\u0065\u0072\u0063", "\u004A\u0065\u0072\u0064", "\u004A\u0065\u0068", "\u004A\u0065\u0073"], 
								weekday_names_narrow : ["\u004A\u0065\u0064", "\u004A\u0065\u006C", "\u004A\u0065\u006D", "\u004A\u0065\u0072\u0063", "\u004A\u0065\u0072\u0064", "\u004A\u0065\u0068", "\u004A\u0065\u0073"], 
								month_names_long : ["\u004A\u0065\u0072\u0072\u0065\u0079\u002D\u0067\u0065\u0075\u0072\u0065\u0065", "\u0054\u006F\u0073\u0068\u0069\u0061\u0067\u0068\u0074\u002D\u0061\u0072\u0072\u0065\u0065", "\u004D\u0061\u0079\u0072\u006E\u0074", "\u0041\u0076\u0065\u0072\u0069\u006C", "\u0042\u006F\u0061\u006C\u0064\u0079\u006E", "\u004D\u0065\u0061\u006E\u002D\u0073\u006F\u0075\u0072\u0065\u0065", "\u004A\u0065\u0072\u0072\u0065\u0079\u002D\u0073\u006F\u0075\u0072\u0065\u0065", "\u004C\u0075\u0061\u006E\u0069\u0073\u0074\u0079\u006E", "\u004D\u0065\u0061\u006E\u002D\u0066\u006F\u0075\u0079\u0069\u0072", "\u004A\u0065\u0072\u0072\u0065\u0079\u002D\u0066\u006F\u0075\u0079\u0069\u0072", "\u004D\u0065\u0065\u0020\u0048\u006F\u0075\u006E\u0065\u0079", "\u004D\u0065\u0065\u0020\u006E\u0079\u0020\u004E\u006F\u006C\u006C\u0069\u0063\u006B"], 
								month_names_short : ["\u004A\u002D\u0067\u0075\u0065\u0072", "\u0054\u002D\u0061\u0072\u0072\u0065\u0065", "\u004D\u0061\u0079\u0072\u006E\u0074", "\u0041\u0076\u0072\u0072\u0069\u006C", "\u0042\u006F\u0061\u006C\u0064\u0079\u006E", "\u004D\u002D\u0073\u006F\u0075\u0072\u0065\u0065", "\u004A\u002D\u0073\u006F\u0075\u0072\u0065\u0065", "\u004C\u0075\u0061\u006E\u0069\u0073\u0074\u0079\u006E", "\u004D\u002D\u0066\u006F\u0075\u0079\u0069\u0072", "\u004A\u002D\u0066\u006F\u0075\u0079\u0069\u0072", "\u004D\u002E\u0048\u006F\u0075\u006E\u0065\u0079", "\u004D\u002E\u004E\u006F\u006C\u006C\u0069\u0063\u006B"], 
								month_names_narrow : ["\u004A\u002D\u0067\u0075\u0065\u0072", "\u0054\u002D\u0061\u0072\u0072\u0065\u0065", "\u004D\u0061\u0079\u0072\u006E\u0074", "\u0041\u0076\u0072\u0072\u0069\u006C", "\u0042\u006F\u0061\u006C\u0064\u0079\u006E", "\u004D\u002D\u0073\u006F\u0075\u0072\u0065\u0065", "\u004A\u002D\u0073\u006F\u0075\u0072\u0065\u0065", "\u004C\u0075\u0061\u006E\u0069\u0073\u0074\u0079\u006E", "\u004D\u002D\u0066\u006F\u0075\u0079\u0069\u0072", "\u004A\u002D\u0066\u006F\u0075\u0079\u0069\u0072", "\u004D\u002E\u0048\u006F\u0075\u006E\u0065\u0079", "\u004D\u002E\u004E\u006F\u006C\u006C\u0069\u0063\u006B"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.gv_GB;
					}
					break;
				case "he":
				case "he_IL":
				case "he_il":
					{

						if (!nexacro.Locale.he_IL) {
							nexacro.Locale.he_IL = {
								name : "he_IL", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0049\u004C\u0053\u0020", 
								currency_symbol : "\u20AA", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 2, 
								n_sign_posn : 2, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u05E8\u05D0\u05E9\u05D5\u05DF", "\u05E9\u05E0\u05D9", "\u05E9\u05DC\u05D9\u05E9\u05D9", "\u05E8\u05D1\u05D9\u05E2\u05D9", "\u05D7\u05DE\u05D9\u05E9\u05D9", "\u05E9\u05D9\u05E9\u05D9", "\u05E9\u05D1\u05EA"], 
								weekday_names_short : ["\u05D0\u0027", "\u05D1\u0027", "\u05D2\u0027", "\u05D3\u0027", "\u05D4\u0027", "\u05D5\u0027", "\u05E9\u0027"], 
								weekday_names_narrow : ["\u05D0\u0027", "\u05D1\u0027", "\u05D2\u0027", "\u05D3\u0027", "\u05D4\u0027", "\u05D5\u0027", "\u05E9\u0027"], 
								month_names_long : ["\u05D9\u05E0\u05D5\u05D0\u05E8", "\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8\u05D9\u05DC", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8", "\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8", "\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8", "\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8", "\u05D3\u05E6\u05DE\u05D1\u05E8"], 
								month_names_short : ["\u05D9\u05E0\u05D5", "\u05E4\u05D1\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05D5\u05D2", "\u05E1\u05E4\u05D8", "\u05D0\u05D5\u05E7", "\u05E0\u05D5\u05D1", "\u05D3\u05E6\u05DE"], 
								month_names_narrow : ["\u05D9\u05E0\u05D5", "\u05E4\u05D1\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05D5\u05D2", "\u05E1\u05E4\u05D8", "\u05D0\u05D5\u05E7", "\u05E0\u05D5\u05D1", "\u05D3\u05E6\u05DE"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0050", 
								date_time_format : "\u0025\u005A\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0059\u0020\u0025\u0062\u0020\u0025\u0064\u0020\u0025\u0061", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.he_IL;
					}
					break;
				case "hi":
				case "hi_IN":
				case "hi_in":
					{

						if (!nexacro.Locale.hi_IN) {
							nexacro.Locale.hi_IN = {
								name : "hi_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0930\u0942", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0930\u0935\u093F\u0935\u093E\u0930\u0020", "\u0938\u094B\u092E\u0935\u093E\u0930\u0020", "\u092E\u0902\u0917\u0932\u0935\u093E\u0930\u0020", "\u092C\u0941\u0927\u0935\u093E\u0930\u0020", "\u0917\u0941\u0930\u0941\u0935\u093E\u0930\u0020", "\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930\u0020", "\u0936\u0928\u093F\u0935\u093E\u0930\u0020"], 
								weekday_names_short : ["\u0930\u0935\u093F\u0020", "\u0938\u094B\u092E\u0020", "\u092E\u0902\u0917\u0932\u0020", "\u092C\u0941\u0927\u0020", "\u0917\u0941\u0930\u0941\u0020", "\u0936\u0941\u0915\u094D\u0930\u0020", "\u0936\u0928\u093F\u0020"], 
								weekday_names_narrow : ["\u0930\u0935\u093F\u0020", "\u0938\u094B\u092E\u0020", "\u092E\u0902\u0917\u0932\u0020", "\u092C\u0941\u0927\u0020", "\u0917\u0941\u0930\u0941\u0020", "\u0936\u0941\u0915\u094D\u0930\u0020", "\u0936\u0928\u093F\u0020"], 
								month_names_long : ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0947\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u092E\u094D\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u092E\u094D\u092C\u0930", "\u0926\u093F\u0938\u092E\u094D\u092C\u0930"], 
								month_names_short : ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0947\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u092E\u094D\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u092E\u094D\u092C\u0930", "\u0926\u093F\u0938\u092E\u094D\u092C\u0930"], 
								month_names_narrow : ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0947\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u092E\u094D\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u092E\u094D\u092C\u0930", "\u0926\u093F\u0938\u092E\u094D\u092C\u0930"], 
								ampm : ["\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928", "\u0905\u092A\u0930\u093E\u0939\u094D\u0928"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.hi_IN;
					}
					break;
				case "hr":
				case "hr_HR":
				case "hr_hr":
					{

						if (!nexacro.Locale.hr_HR) {
							nexacro.Locale.hr_HR = {
								name : "hr_HR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0048\u0052\u004B\u0020", 
								currency_symbol : "\u004B\u006E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004E\u0065\u0064\u006A\u0065\u006C\u006A\u0061", "\u0050\u006F\u006E\u0065\u0064\u006A\u0065\u006C\u006A\u0061\u006B", "\u0055\u0074\u006F\u0072\u0061\u006B", "\u0053\u0072\u0069\u006A\u0065\u0064\u0061", "\u010C\u0065\u0074\u0076\u0072\u0074\u0061\u006B", "\u0050\u0065\u0074\u0061\u006B", "\u0053\u0075\u0062\u006F\u0074\u0061"], 
								weekday_names_short : ["\u004E\u0065\u0064", "\u0050\u006F\u006E", "\u0055\u0074\u006F", "\u0053\u0072\u0069", "\u010C\u0065\u0074", "\u0050\u0065\u0074", "\u0053\u0075\u0062"], 
								weekday_names_narrow : ["\u004E\u0065\u0064", "\u0050\u006F\u006E", "\u0055\u0074\u006F", "\u0053\u0072\u0069", "\u010C\u0065\u0074", "\u0050\u0065\u0074", "\u0053\u0075\u0062"], 
								month_names_long : ["\u0053\u0069\u006A\u0065\u010D\u0061\u006E\u006A", "\u0056\u0065\u006C\u006A\u0061\u010D\u0061", "\u004F\u017E\u0075\u006A\u0061\u006B", "\u0054\u0072\u0061\u0076\u0061\u006E\u006A", "\u0053\u0076\u0069\u0062\u0061\u006E\u006A", "\u004C\u0069\u0070\u0061\u006E\u006A", "\u0053\u0072\u0070\u0061\u006E\u006A", "\u004B\u006F\u006C\u006F\u0076\u006F\u007A", "\u0052\u0075\u006A\u0061\u006E", "\u004C\u0069\u0073\u0074\u006F\u0070\u0061\u0064", "\u0053\u0074\u0075\u0064\u0065\u006E\u0069", "\u0050\u0072\u006F\u0073\u0069\u006E\u0061\u0063"], 
								month_names_short : ["\u0053\u0069\u006A", "\u0056\u0065\u006C", "\u004F\u017E\u0075", "\u0054\u0072\u0061", "\u0053\u0076\u0069", "\u004C\u0069\u0070", "\u0053\u0072\u0070", "\u004B\u006F\u006C", "\u0052\u0075\u006A", "\u004C\u0069\u0073", "\u0053\u0074\u0075", "\u0050\u0072\u006F"], 
								month_names_narrow : ["\u0053\u0069\u006A", "\u0056\u0065\u006C", "\u004F\u017E\u0075", "\u0054\u0072\u0061", "\u0053\u0076\u0069", "\u004C\u0069\u0070", "\u0053\u0072\u0070", "\u004B\u006F\u006C", "\u0052\u0075\u006A", "\u004C\u0069\u0073", "\u0053\u0074\u0075", "\u0050\u0072\u006F"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059\u002E", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059\u002E", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.hr_HR;
					}
					break;
				case "hu":
				case "hu_HU":
				case "hu_hu":
					{

						if (!nexacro.Locale.hu_HU) {
							nexacro.Locale.hu_HU = {
								name : "hu_HU", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0048\u0055\u0046\u0020", 
								currency_symbol : "\u0046\u0074", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0076\u0061\u0073\u00E1\u0072\u006E\u0061\u0070", "\u0068\u00E9\u0074\u0066\u0151", "\u006B\u0065\u0064\u0064", "\u0073\u007A\u0065\u0072\u0064\u0061", "\u0063\u0073\u00FC\u0074\u00F6\u0072\u0074\u00F6\u006B", "\u0070\u00E9\u006E\u0074\u0065\u006B", "\u0073\u007A\u006F\u006D\u0062\u0061\u0074"], 
								weekday_names_short : ["\u0076", "\u0068", "\u006B", "\u0073\u007A\u0065", "\u0063\u0073", "\u0070", "\u0073\u007A\u006F"], 
								weekday_names_narrow : ["\u0076", "\u0068", "\u006B", "\u0073\u007A\u0065", "\u0063\u0073", "\u0070", "\u0073\u007A\u006F"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u00E1\u0072", "\u0066\u0065\u0062\u0072\u0075\u00E1\u0072", "\u006D\u00E1\u0072\u0063\u0069\u0075\u0073", "\u00E1\u0070\u0072\u0069\u006C\u0069\u0073", "\u006D\u00E1\u006A\u0075\u0073", "\u006A\u00FA\u006E\u0069\u0075\u0073", "\u006A\u00FA\u006C\u0069\u0075\u0073", "\u0061\u0075\u0067\u0075\u0073\u007A\u0074\u0075\u0073", "\u0073\u007A\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u00F3\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062\u0072", "\u006D\u00E1\u0072\u0063", "\u00E1\u0070\u0072", "\u006D\u00E1\u006A", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u0061\u0075\u0067", "\u0073\u007A\u0065\u0070\u0074", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062\u0072", "\u006D\u00E1\u0072\u0063", "\u00E1\u0070\u0072", "\u006D\u00E1\u006A", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u0061\u0075\u0067", "\u0073\u007A\u0065\u0070\u0074", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053", 
								time_format_ampm : "\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053", 
								date_time_format : "\u0025\u0059\u002E\u0020\u0025\u0062\u002E\u0020\u0025\u0065\u002E\u002C\u0020\u0025\u0041\u002C\u0020\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0059\u002E\u0020\u0025\u0062\u002E\u0020\u0025\u0065\u002E\u002C\u0020\u0025\u0041\u002C\u0020\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u002E\u0020\u0025\u0042\u0020\u0025\u0065", 
								shortdate_format : "\u0025\u0059\u002E\u0025\u006D\u002E\u0025\u0064\u002E", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.hu_HU;
					}
					break;
				case "hy":
				case "hy_AM":
				case "hy_am":
					{

						if (!nexacro.Locale.hy_AM) {
							nexacro.Locale.hy_AM = {
								name : "hy_AM", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0041\u004D\u0044\u0020", 
								currency_symbol : "\u0564\u0580\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u053F\u056B\u0580\u0561\u056F\u056B", "\u0535\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B", "\u0535\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B", "\u0549\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B", "\u0540\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B", "\u0548\u0582\u0580\u0562\u0561\u0569", "\u0547\u0561\u0562\u0561\u0569"], 
								weekday_names_short : ["\u053F\u0580\u056F", "\u0535\u0580\u056F", "\u0535\u0580\u0584", "\u0549\u0580\u0584", "\u0540\u0576\u0563", "\u0548\u0582\u0580", "\u0547\u0562\u0569"], 
								weekday_names_narrow : ["\u053F\u0580\u056F", "\u0535\u0580\u056F", "\u0535\u0580\u0584", "\u0549\u0580\u0584", "\u0540\u0576\u0563", "\u0548\u0582\u0580", "\u0547\u0562\u0569"], 
								month_names_long : ["\u0540\u0578\u0582\u0576\u057E\u0561\u0580\u056B", "\u0553\u0565\u057F\u0580\u057E\u0561\u0580\u056B", "\u0544\u0561\u0580\u057F\u056B", "\u0531\u057A\u0580\u056B\u056C\u056B", "\u0544\u0561\u0575\u056B\u057D\u056B", "\u0540\u0578\u0582\u0576\u056B\u057D\u056B", "\u0540\u0578\u0582\u056C\u056B\u057D\u056B", "\u0555\u0563\u0578\u057D\u057F\u0578\u057D\u056B", "\u054D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580\u056B", "\u0540\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B", "\u0546\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056B", "\u0534\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B"], 
								month_names_short : ["\u0540\u0576\u057E", "\u0553\u057F\u0580", "\u0544\u0561\u0580", "\u0531\u057A\u0580", "\u0544\u0561\u0575", "\u0540\u0576\u057D", "\u0540\u056C\u057D", "\u0555\u0563\u057D", "\u054D\u0565\u057A", "\u0540\u0578\u056F", "\u0546\u0574\u0562", "\u0534\u0565\u056F"], 
								month_names_narrow : ["\u0540\u0576\u057E", "\u0553\u057F\u0580", "\u0544\u0561\u0580", "\u0531\u057A\u0580", "\u0544\u0561\u0575", "\u0540\u0576\u057D", "\u0540\u056C\u057D", "\u0555\u0563\u057D", "\u054D\u0565\u057A", "\u0540\u0578\u056F", "\u0546\u0574\u0562", "\u0534\u0565\u056F"], 
								ampm : ["", ""], 
								date_format : "\u0025\u006D\u002F\u0025\u0064\u002F\u0025\u0079", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.hy_AM;
					}
					break;
				case "id":
				case "id_ID":
				case "id_id":
					{

						if (!nexacro.Locale.id_ID) {
							nexacro.Locale.id_ID = {
								name : "id_ID", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0049\u0044\u0052\u0020", 
								currency_symbol : "\u0052\u0070", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u004D\u0069\u006E\u0067\u0067\u0075", "\u0053\u0065\u006E\u0069\u006E", "\u0053\u0065\u006C\u0061\u0073\u0061", "\u0052\u0061\u0062\u0075", "\u004B\u0061\u006D\u0069\u0073", "\u004A\u0075\u006D\u0061\u0074", "\u0053\u0061\u0062\u0074\u0075"], 
								weekday_names_short : ["\u004D\u0069\u006E", "\u0053\u0065\u006E", "\u0053\u0065\u006C", "\u0052\u0061\u0062", "\u004B\u0061\u006D", "\u004A\u0075\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u004D\u0069\u006E", "\u0053\u0065\u006E", "\u0053\u0065\u006C", "\u0052\u0061\u0062", "\u004B\u0061\u006D", "\u004A\u0075\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0050\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u004D\u0061\u0072\u0065\u0074", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0065\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0069", "\u0041\u0067\u0075\u0073\u0074\u0075\u0073", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0050\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u0075", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0050\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u0075", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.id_ID;
					}
					break;
				case "is":
				case "is_IS":
				case "is_is":
					{

						if (!nexacro.Locale.is_IS) {
							nexacro.Locale.is_IS = {
								name : "is_IS", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0049\u0053\u004B\u0020", 
								currency_symbol : "\u006B\u0072\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 0, 
								frac_digits : 0, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0073\u0075\u006E\u006E\u0075\u0064\u0061\u0067\u0075\u0072", "\u006D\u00E1\u006E\u0075\u0064\u0061\u0067\u0075\u0072", "\u00FE\u0072\u0069\u00F0\u006A\u0075\u0064\u0061\u0067\u0075\u0072", "\u006D\u0069\u00F0\u0076\u0069\u006B\u0075\u0064\u0061\u0067\u0075\u0072", "\u0066\u0069\u006D\u006D\u0074\u0075\u0064\u0061\u0067\u0075\u0072", "\u0066\u00F6\u0073\u0074\u0075\u0064\u0061\u0067\u0075\u0072", "\u006C\u0061\u0075\u0067\u0061\u0072\u0064\u0061\u0067\u0075\u0072"], 
								weekday_names_short : ["\u0073\u0075\u006E", "\u006D\u00E1\u006E", "\u00FE\u0072\u0069", "\u006D\u0069\u00F0", "\u0066\u0069\u006D", "\u0066\u00F6\u0073", "\u006C\u0061\u0075"], 
								weekday_names_narrow : ["\u0073\u0075\u006E", "\u006D\u00E1\u006E", "\u00FE\u0072\u0069", "\u006D\u0069\u00F0", "\u0066\u0069\u006D", "\u0066\u00F6\u0073", "\u006C\u0061\u0075"], 
								month_names_long : ["\u006A\u0061\u006E\u00FA\u0061\u0072", "\u0066\u0065\u0062\u0072\u00FA\u0061\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u00ED\u006C", "\u006D\u0061\u00ED", "\u006A\u00FA\u006E\u00ED", "\u006A\u00FA\u006C\u00ED", "\u00E1\u0067\u00FA\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u00F3\u0062\u0065\u0072", "\u006E\u00F3\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u00ED", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u00E1\u0067\u00FA", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u00F3\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u00ED", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u00E1\u0067\u00FA", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u00F3\u0076", "\u0064\u0065\u0073"], 
								ampm : ["\u0066\u0068", "\u0065\u0068"], 
								date_format : "\u0025\u0061\u0020\u0025\u0065\u002E\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0065\u002E\u0025\u0062\u0020\u0025\u0059\u002C\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.is_IS;
					}
					break;
				case "it_CH":
				case "it_ch":
					{

						if (!nexacro.Locale.it_CH) {
							nexacro.Locale.it_CH = {
								name : "it_CH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u0027", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0043\u0048\u0046\u0020", 
								currency_symbol : "\u0046\u0072\u002E", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0027", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0064\u006F\u006D\u0065\u006E\u0069\u0063\u0061", "\u006C\u0075\u006E\u0065\u0064\u00EC", "\u006D\u0061\u0072\u0074\u0065\u0064\u00EC", "\u006D\u0065\u0072\u0063\u006F\u006C\u0065\u0064\u00EC", "\u0067\u0069\u006F\u0076\u0065\u0064\u00EC", "\u0076\u0065\u006E\u0065\u0072\u0064\u00EC", "\u0073\u0061\u0062\u0061\u0074\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006D\u0065\u0072", "\u0076\u0065\u006E", "\u0073\u0061\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u006D\u0065\u0072", "\u0076\u0065\u006E", "\u0073\u0061\u0062"], 
								month_names_long : ["\u0067\u0065\u006E\u006E\u0061\u0069\u006F", "\u0066\u0065\u0062\u0062\u0072\u0061\u0069\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0070\u0072\u0069\u006C\u0065", "\u006D\u0061\u0067\u0067\u0069\u006F", "\u0067\u0069\u0075\u0067\u006E\u006F", "\u006C\u0075\u0067\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0074\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0074\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0067", "\u0067\u0069\u0075", "\u006C\u0075\u0067", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0074\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0067", "\u0067\u0069\u0075", "\u006C\u0075\u0067", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0074\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0020\u0025\u006D\u002E\u0020\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.it_CH;
					}
					break;
				case "it":
				case "it_IT":
				case "it_it":
					{

						if (!nexacro.Locale.it_IT) {
							nexacro.Locale.it_IT = {
								name : "it_IT", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0065\u006E\u0069\u0063\u0061", "\u006C\u0075\u006E\u0065\u0064\u00EC", "\u006D\u0061\u0072\u0074\u0065\u0064\u00EC", "\u006D\u0065\u0072\u0063\u006F\u006C\u0065\u0064\u00EC", "\u0067\u0069\u006F\u0076\u0065\u0064\u00EC", "\u0076\u0065\u006E\u0065\u0072\u0064\u00EC", "\u0073\u0061\u0062\u0061\u0074\u006F"], 
								weekday_names_short : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u0067\u0069\u006F", "\u0076\u0065\u006E", "\u0073\u0061\u0062"], 
								weekday_names_narrow : ["\u0064\u006F\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0072", "\u0067\u0069\u006F", "\u0076\u0065\u006E", "\u0073\u0061\u0062"], 
								month_names_long : ["\u0067\u0065\u006E\u006E\u0061\u0069\u006F", "\u0066\u0065\u0062\u0062\u0072\u0061\u0069\u006F", "\u006D\u0061\u0072\u007A\u006F", "\u0061\u0070\u0072\u0069\u006C\u0065", "\u006D\u0061\u0067\u0067\u0069\u006F", "\u0067\u0069\u0075\u0067\u006E\u006F", "\u006C\u0075\u0067\u006C\u0069\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0074\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0074\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0069\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0067", "\u0067\u0069\u0075", "\u006C\u0075\u0067", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0074\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0067", "\u0067\u0069\u0075", "\u006C\u0075\u0067", "\u0061\u0067\u006F", "\u0073\u0065\u0074", "\u006F\u0074\u0074", "\u006E\u006F\u0076", "\u0064\u0069\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.it_IT;
					}
					break;
				case "iw":
				case "iw_IL":
				case "iw_il":
					{

						if (!nexacro.Locale.iw_IL) {
							nexacro.Locale.iw_IL = {
								name : "iw_IL", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0049\u004C\u0053\u0020", 
								currency_symbol : "\u05E9\u05D7", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 2, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u05E8\u05D0\u05E9\u05D5\u05DF", "\u05E9\u05E0\u05D9", "\u05E9\u05DC\u05D9\u05E9\u05D9", "\u05E8\u05D1\u05D9\u05E2\u05D9", "\u05D7\u05DE\u05D9\u05E9\u05D9", "\u05E9\u05D9\u05E9\u05D9", "\u05E9\u05D1\u05EA"], 
								weekday_names_short : ["\u05D0\u0027", "\u05D1\u0027", "\u05D2\u0027", "\u05D3\u0027", "\u05D4\u0027", "\u05D5\u0027", "\u05E9\u0027"], 
								weekday_names_narrow : ["\u05D0\u0027", "\u05D1\u0027", "\u05D2\u0027", "\u05D3\u0027", "\u05D4\u0027", "\u05D5\u0027", "\u05E9\u0027"], 
								month_names_long : ["\u05D9\u05E0\u05D5\u05D0\u05E8", "\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8\u05D9\u05DC", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8", "\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8", "\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8", "\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8", "\u05D3\u05E6\u05DE\u05D1\u05E8"], 
								month_names_short : ["\u05D9\u05E0\u05D5", "\u05E4\u05D1\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05D5\u05D2", "\u05E1\u05E4\u05D8", "\u05D0\u05D5\u05E7", "\u05E0\u05D5\u05D1", "\u05D3\u05E6\u05DE"], 
								month_names_narrow : ["\u05D9\u05E0\u05D5", "\u05E4\u05D1\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05D5\u05D2", "\u05E1\u05E4\u05D8", "\u05D0\u05D5\u05E7", "\u05E0\u05D5\u05D1", "\u05D3\u05E6\u05DE"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0050", 
								date_time_format : "\u0025\u005A\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0059\u0020\u0025\u0062\u0020\u0025\u0064\u0020\u0025\u0061", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "rtl"
							};
						}


						return nexacro.Locale.iw_IL;
					}
					break;
				case "ja":
				case "ja_JP":
				case "ja_jp":
					{

						if (!nexacro.Locale.ja_JP) {
							nexacro.Locale.ja_JP = {
								name : "ja_JP", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004A\u0050\u0059\u0020", 
								currency_symbol : "\uFFE5", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 0, 
								frac_digits : 0, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								mon_n_sign_posn : 1, 
								weekday_names_long : ["\u65E5\u66DC\u65E5", "\u6708\u66DC\u65E5", "\u706B\u66DC\u65E5", "\u6C34\u66DC\u65E5", "\u6728\u66DC\u65E5", "\u91D1\u66DC\u65E5", "\u571F\u66DC\u65E5"], 
								weekday_names_short : ["\u65E5", "\u6708", "\u706B", "\u6C34", "\u6728", "\u91D1", "\u571F"], 
								weekday_names_narrow : ["\u65E5", "\u6708", "\u706B", "\u6C34", "\u6728", "\u91D1", "\u571F"], 
								month_names_long : ["\u0031\u6708", "\u0032\u6708", "\u0033\u6708", "\u0034\u6708", "\u0035\u6708", "\u0036\u6708", "\u0037\u6708", "\u0038\u6708", "\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								month_names_short : ["\u0020\u0031\u6708", "\u0020\u0032\u6708", "\u0020\u0033\u6708", "\u0020\u0034\u6708", "\u0020\u0035\u6708", "\u0020\u0036\u6708", "\u0020\u0037\u6708", "\u0020\u0038\u6708", "\u0020\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								month_names_narrow : ["\u0020\u0031\u6708", "\u0020\u0032\u6708", "\u0020\u0033\u6708", "\u0020\u0034\u6708", "\u0020\u0035\u6708", "\u0020\u0036\u6708", "\u0020\u0037\u6708", "\u0020\u0038\u6708", "\u0020\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								ampm : ["\u5348\u524D", "\u5348\u5F8C"], 
								date_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5", 
								time_format : "\u0025\u0048\u6642\u0025\u004D\u5206\u0025\u0053\u79D2", 
								time_format_ampm : "\u0025\u0070\u0025\u0049\u6642\u0025\u004D\u5206\u0025\u0053\u79D2", 
								date_time_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5\u0020\u0025\u0048\u6642\u0025\u004D\u5206\u0025\u0053\u79D2", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u5E74\u0025\u006E\u6708\u0025\u0065\u65E5", 
								shortdate_format : "\u0025\u0059\u002F\u0025\u006D\u002F\u0025\u0064", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ja_JP;
					}
					break;
				case "ka":
				case "ka_GE":
				case "ka_ge":
					{

						if (!nexacro.Locale.ka_GE) {
							nexacro.Locale.ka_GE = {
								name : "ka_GE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0047\u0045\u004C\u0020", 
								currency_symbol : "\u004C\u0061\u0072\u0069", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u10D9\u10D5\u10D8\u10E0\u10D0", "\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10D8", "\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8"], 
								weekday_names_short : ["\u10D9\u10D5\u10D8", "\u10DD\u10E0\u10E8", "\u10E1\u10D0\u10DB", "\u10DD\u10D7\u10EE", "\u10EE\u10E3\u10D7", "\u10DE\u10D0\u10E0", "\u10E8\u10D0\u10D1"], 
								weekday_names_narrow : ["\u10D9\u10D5\u10D8", "\u10DD\u10E0\u10E8", "\u10E1\u10D0\u10DB", "\u10DD\u10D7\u10EE", "\u10EE\u10E3\u10D7", "\u10DE\u10D0\u10E0", "\u10E8\u10D0\u10D1"], 
								month_names_long : ["\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10D8", "\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10D8", "\u10DB\u10D0\u10E0\u10E2\u10D8", "\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8", "\u10DB\u10D0\u10D8\u10E1\u10D8", "\u10D8\u10D5\u10DC\u10D8\u10E1\u10D8", "\u10D8\u10D5\u10DA\u10D8\u10E1\u10D8", "\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10DD", "\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8", "\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10D8", "\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8", "\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8"], 
								month_names_short : ["\u10D8\u10D0\u10DC", "\u10D7\u10D4\u10D1", "\u10DB\u10D0\u10E0", "\u10D0\u10DE\u10E0", "\u10DB\u10D0\u10D8", "\u10D8\u10D5\u10DC", "\u10D8\u10D5\u10DA", "\u10D0\u10D2\u10D5", "\u10E1\u10D4\u10E5", "\u10DD\u10E5\u10E2", "\u10DC\u10DD\u10D4", "\u10D3\u10D4\u10D9"], 
								month_names_narrow : ["\u10D8\u10D0\u10DC", "\u10D7\u10D4\u10D1", "\u10DB\u10D0\u10E0", "\u10D0\u10DE\u10E0", "\u10DB\u10D0\u10D8", "\u10D8\u10D5\u10DC", "\u10D8\u10D5\u10DA", "\u10D0\u10D2\u10D5", "\u10E1\u10D4\u10E5", "\u10DD\u10E5\u10E2", "\u10DC\u10DD\u10D4", "\u10D3\u10D4\u10D9"], 
								ampm : ["", ""], 
								date_format : "\u0025\u006D\u002F\u0025\u0064\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0059\u0020\u10EC\u10DA\u10D8\u10E1\u0020\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u0020\u10EC\u10DA\u10D8\u10E1\u0020\u0025\u0064\u0020\u0025\u006D\u002C\u0020\u0025\u0041", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ka_GE;
					}
					break;
				case "kk":
				case "kk_KZ":
				case "kk_kz":
					{

						if (!nexacro.Locale.kk_KZ) {
							nexacro.Locale.kk_KZ = {
								name : "kk_KZ", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004B\u005A\u0054\u0020", 
								currency_symbol : "\u0422", 
								mon_decimal_point : "\u002D", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0416\u0435\u043A\u0441\u0435\u043D\u0431\u0456", "\u0414\u04AF\u0439\u0441\u0435\u043D\u0431\u0456", "\u0421\u0435\u0439\u0441\u0435\u043D\u0431\u0456", "\u0421\u04D9\u0440\u0441\u0435\u043D\u0431\u0456", "\u0411\u0435\u0439\u0441\u0435\u043D\u0431\u0456", "\u0416\u04B1\u043C\u0430", "\u0421\u0435\u043D\u0431\u0456"], 
								weekday_names_short : ["\u0416\u043A", "\u0414\u0441", "\u0421\u0441", "\u0421\u0440", "\u0411\u0441", "\u0416\u043C", "\u0421\u043D"], 
								weekday_names_narrow : ["\u0416\u043A", "\u0414\u0441", "\u0421\u0441", "\u0421\u0440", "\u0411\u0441", "\u0416\u043C", "\u0421\u043D"], 
								month_names_long : ["\u049A\u0430\u04A3\u0442\u0430\u0440", "\u0410\u049B\u043F\u0430\u043D", "\u041D\u0430\u0443\u0440\u044B\u0437", "\u0421\u04D9\u0443\u0456\u0440", "\u041C\u0430\u043C\u044B\u0440", "\u041C\u0430\u0443\u0441\u044B\u043C", "\u0428\u0456\u043B\u0434\u0435", "\u0422\u0430\u043C\u044B\u0437", "\u049A\u044B\u0440\u043A\u04AF\u0439\u0435\u043A", "\u049A\u0430\u0437\u0430\u043D", "\u049A\u0430\u0440\u0430\u0448\u0430", "\u0416\u0435\u043B\u0442\u043E\u049B\u0441\u0430\u043D"], 
								month_names_short : ["\u049A\u0430\u04A3", "\u0410\u049B\u043F", "\u041D\u0430\u0443", "\u0421\u04D9\u0443", "\u041C\u0430\u043C", "\u041C\u0430\u0443", "\u0428\u0456\u043B", "\u0422\u0430\u043C", "\u049A\u044B\u0440", "\u049A\u0430\u0437", "\u049A\u0430\u0440", "\u0416\u0435\u043B"], 
								month_names_narrow : ["\u049A\u0430\u04A3", "\u0410\u049B\u043F", "\u041D\u0430\u0443", "\u0421\u04D9\u0443", "\u041C\u0430\u043C", "\u041C\u0430\u0443", "\u0428\u0456\u043B", "\u0422\u0430\u043C", "\u049A\u044B\u0440", "\u049A\u0430\u0437", "\u049A\u0430\u0440", "\u0416\u0435\u043B"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0041\u0020\u0436\u002E", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.kk_KZ;
					}
					break;
				case "kl":
				case "kl_GL":
				case "kl_gl":
					{

						if (!nexacro.Locale.kl_GL) {
							nexacro.Locale.kl_GL = {
								name : "kl_GL", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0044\u004B\u004B\u0020", 
								currency_symbol : "\u006B\u0072", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 2, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u0061\u0062\u0061\u0061\u0074", "\u0061\u0074\u0061\u0061\u0073\u0069\u006E\u006E\u0067\u006F\u0072\u006E\u0065\u0071", "\u006D\u0061\u0072\u006C\u0075\u006E\u006E\u0067\u006F\u0072\u006E\u0065\u0071", "\u0070\u0069\u006E\u0067\u0061\u0073\u0075\u006E\u006E\u0067\u006F\u0072\u006E\u0065\u0071", "\u0073\u0069\u0073\u0061\u006D\u0061\u006E\u006E\u0067\u006F\u0072\u006E\u0065\u0071", "\u0074\u0061\u006C\u006C\u0069\u006D\u0061\u006E\u006E\u0067\u006F\u0072\u006E\u0065\u0071", "\u0061\u0072\u0066\u0069\u006E\u0069\u006E\u006E\u0067\u006F\u0072\u006E\u0065\u0071"], 
								weekday_names_short : ["\u0073\u0061\u0062", "\u0061\u0074\u0061", "\u006D\u0061\u0072", "\u0070\u0069\u006E", "\u0073\u0069\u0073", "\u0074\u0061\u006C", "\u0061\u0072\u0066"], 
								weekday_names_narrow : ["\u0073\u0061\u0062", "\u0061\u0074\u0061", "\u006D\u0061\u0072", "\u0070\u0069\u006E", "\u0073\u0069\u0073", "\u0074\u0061\u006C", "\u0061\u0072\u0066"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u006D\u0061\u0072\u0074\u0073\u0069", "\u0061\u0070\u0072\u0069\u006C\u0069", "\u006D\u0061\u006A\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074\u0075\u0073\u0069", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072\u0069", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072\u0069", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072\u0069", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072\u0069"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.kl_GL;
					}
					break;
				case "km":
				case "km_KH":
				case "km_kh":
					{

						if (!nexacro.Locale.km_KH) {
							nexacro.Locale.km_KH = {
								name : "km_KH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004B\u0048\u0052\u0020", 
								currency_symbol : "\u17DB", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 0, 
								n_cs_precedes : 0, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u1790\u17D2\u1784\u17C3\u200B\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799", "\u1790\u17D2\u1784\u17C3\u200B\u1785\u17D0\u1793\u17D2\u1791", "\u1790\u17D2\u1784\u17C3\u200B\u17A2\u1784\u17D2\u1782\u17B6\u179A", "\u1790\u17D2\u1784\u17C3\u200B\u1796\u17BB\u1792", "\u1790\u17D2\u1784\u17C3\u200B\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD", "\u1790\u17D2\u1784\u17C3\u200B\u179F\u17BB\u1780\u17D2\u179A", "\u1790\u17D2\u1784\u17C3\u200B\u179F\u17C5\u179A\u17CD"], 
								weekday_names_short : ["\u17A2\u17B6", "\u1785", "\u17A2", "\u1796\u17BB", "\u1796\u17D2\u179A", "\u179F\u17BB", "\u179F"], 
								weekday_names_narrow : ["\u17A2\u17B6", "\u1785", "\u17A2", "\u1796\u17BB", "\u1796\u17D2\u179A", "\u179F\u17BB", "\u179F"], 
								month_names_long : ["\u1798\u1780\u179A\u17B6", "\u1780\u17BB\u1798\u17D2\u1797\u17C8", "\u1798\u17B7\u1793\u17B6", "\u1798\u17C1\u179F\u17B6", "\u17A7\u179F\u1797\u17B6", "\u1798\u17B7\u1790\u17BB\u1793\u17B6", "\u1780\u1780\u17D2\u1780\u178A\u17B6", "\u179F\u17B8\u17A0\u17B6", "\u1780\u1789\u17D2\u1789\u17B6", "\u178F\u17BB\u179B\u17B6", "\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6", "\u1792\u17D2\u1793\u17BC"], 
								month_names_short : ["\u17E1", "\u17E2", "\u17E3", "\u17E4", "\u17E5", "\u17E6", "\u17E7", "\u17E8", "\u17E9", "\u17E1\u17E0", "\u17E1\u17E1", "\u17E1\u17E2"], 
								month_names_narrow : ["\u17E1", "\u17E2", "\u17E3", "\u17E4", "\u17E5", "\u17E6", "\u17E7", "\u17E8", "\u17E9", "\u17E1\u17E0", "\u17E1\u17E1", "\u17E1\u17E2"], 
								ampm : ["\u1796\u17D2\u179A\u17B9\u1780", "\u179B\u17D2\u1784\u17B6\u1785"], 
								date_format : "%e %B %Y", 
								time_format : "%H:%M:%S", 
								time_format_ampm : "%I\u003A%M\u003A%S\u0020%p", 
								date_time_format : "%A \u1790\u17D2\u1784\u17C3 %e \u1781\u17C2 %B \u1786\u17D2\u1793\u17B6\u17C6  %Y, %H \u1798\u17C9\u17C4\u1784 m \u1793\u17B6\u1791\u17B8 %S \u179C\u17B7\u1793\u17B6\u1791\u17B8\u200B", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0065\u0020\u0025\u0062%\u0020\u0025\u0045\u0079\u0020\u0025\u0048\u003A\u0025\u004D%\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.km_KH;
					}
					break;
				case "kn":
				case "kn_IN":
				case "kn_in":
					{

						if (!nexacro.Locale.kn_IN) {
							nexacro.Locale.kn_IN = {
								name : "kn_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0CB0\u0CC2", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0CB0\u0CB5\u0CBF\u0CB5\u0CBE\u0CB0", "\u0CB8\u0CCB\u0CAE\u0CB5\u0CBE\u0CB0", "\u0CAE\u0C82\u0C97\u0CB3\u0CB5\u0CBE\u0CB0", "\u0CAC\u0CC1\u0CA7\u0CB5\u0CBE\u0CB0", "\u0C97\u0CC1\u0CB0\u0CC1\u0CB5\u0CBE\u0CB0", "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0\u0CB5\u0CBE\u0CB0", "\u0CB6\u0CA8\u0CBF\u0CB5\u0CBE\u0CB0"], 
								weekday_names_short : ["\u0CB0", "\u0CB8\u0CCB", "\u0CAE\u0C82", "\u0CAC\u0CC1", "\u0C97\u0CC1", "\u0CB6\u0CC1", "\u0CB6"], 
								weekday_names_narrow : ["\u0CB0", "\u0CB8\u0CCB", "\u0CAE\u0C82", "\u0CAC\u0CC1", "\u0C97\u0CC1", "\u0CB6\u0CC1", "\u0CB6"], 
								month_names_long : ["\u0C9C\u0CA8\u0CB5\u0CB0\u0CBF", "\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0\u0CB5\u0CB0\u0CBF", "\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A", "\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF\u0CB2\u0CCD", "\u0CAE\u0CC7", "\u0C9C\u0CC2\u0CA8\u0CCD", "\u0C9C\u0CC1\u0CB2\u0CBE\u0CAF\u0CBF", "\u0C86\u0C97\u0CB8\u0CCD\u0CA4\u0CC1", "\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82\u0CAC\u0CB0", "\u0C85\u0C95\u0CCD\u0CA4\u0CC2\u0CAC\u0CB0", "\u0CA8\u0CB5\u0CC6\u0C82\u0CAC\u0CB0", "\u0CA6\u0CB6\u0C82\u0CAC\u0CB0"], 
								month_names_short : ["\u0C9C", "\u0CAB\u0CC6", "\u0CAE\u0CBE", "\u0C8F", "\u0CAE\u0CC7", "\u0C9C\u0CC2", "\u0C9C\u0CC1", "\u0C86", "\u0CB8\u0CC6", "\u0C85", "\u0CA8", "\u0CA6"], 
								month_names_narrow : ["\u0C9C", "\u0CAB\u0CC6", "\u0CAE\u0CBE", "\u0C8F", "\u0CAE\u0CC7", "\u0C9C\u0CC2", "\u0C9C\u0CC1", "\u0C86", "\u0CB8\u0CC6", "\u0C85", "\u0CA8", "\u0CA6"], 
								ampm : ["\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8", "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.kn_IN;
					}
					break;
				case "ko":
				case "ko_KR":
				case "ko_kr":
					{

						if (!nexacro.Locale.ko_KR) {
							nexacro.Locale.ko_KR = {
								name : "ko_KR", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004B\u0052\u0057\u0020", 
								currency_symbol : "\uFFE6", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 0, 
								frac_digits : 0, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\uC77C\uC694\uC77C", "\uC6D4\uC694\uC77C", "\uD654\uC694\uC77C", "\uC218\uC694\uC77C", "\uBAA9\uC694\uC77C", "\uAE08\uC694\uC77C", "\uD1A0\uC694\uC77C"], 
								weekday_names_short : ["\uC77C", "\uC6D4", "\uD654", "\uC218", "\uBAA9", "\uAE08", "\uD1A0"], 
								weekday_names_narrow : ["\uC77C", "\uC6D4", "\uD654", "\uC218", "\uBAA9", "\uAE08", "\uD1A0"], 
								month_names_long : ["\u0031\uC6D4", "\u0032\uC6D4", "\u0033\uC6D4", "\u0034\uC6D4", "\u0035\uC6D4", "\u0036\uC6D4", "\u0037\uC6D4", "\u0038\uC6D4", "\u0039\uC6D4", "\u0031\u0030\uC6D4", "\u0031\u0031\uC6D4", "\u0031\u0032\uC6D4"], 
								month_names_short : ["\u0020\u0031\uC6D4", "\u0020\u0032\uC6D4", "\u0020\u0033\uC6D4", "\u0020\u0034\uC6D4", "\u0020\u0035\uC6D4", "\u0020\u0036\uC6D4", "\u0020\u0037\uC6D4", "\u0020\u0038\uC6D4", "\u0020\u0039\uC6D4", "\u0031\u0030\uC6D4", "\u0031\u0031\uC6D4", "\u0031\u0032\uC6D4"], 
								month_names_narrow : ["\u0020\u0031\uC6D4", "\u0020\u0032\uC6D4", "\u0020\u0033\uC6D4", "\u0020\u0034\uC6D4", "\u0020\u0035\uC6D4", "\u0020\u0036\uC6D4", "\u0020\u0037\uC6D4", "\u0020\u0038\uC6D4", "\u0020\u0039\uC6D4", "\u0031\u0030\uC6D4", "\u0031\u0031\uC6D4", "\u0031\u0032\uC6D4"], 
								ampm : ["\uC624\uC804", "\uC624\uD6C4"], 
								date_format : "\u0025\u0059\uB144\u0020\u0025\u006D\uC6D4\u0020\u0025\u0064\uC77C", 
								time_format : "\u0025\u0048\uC2DC\u0020\u0025\u004D\uBD84\u0020\u0025\u0053\uCD08", 
								time_format_ampm : "\u0025\u0070\u0020\u0025\u0049\uC2DC\u0020\u0025\u004D\uBD84\u0020\u0025\u0053\uCD08", 
								date_time_format : "\u0025\u0078\u0020\u0028\u0025\u0061\u0029\u0020\u0025\u0072", 
								full_date_time_format : "\u0025\u0059\u002E\u0020\u0025\u006D\u002E\u0020\u0025\u0064\u002E\u0020\u0028\u0025\u0061\u0029\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\uB144\u0020\u0025\u006E\uC6D4\u0020\u0025\u0065\uC77C\u0020\u0025\u0041", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ko_KR;
					}
					break;
				case "ku":
				case "ku_TR":
				case "ku_tr":
					{

						if (!nexacro.Locale.ku_TR) {
							nexacro.Locale.ku_TR = {
								name : "ku_TR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0054\u0052\u0059\u0020", 
								currency_symbol : "\u0059\u0054\u004C", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0079\u00EA\u006B\u0073\u00EA\u006D", "\u0064\u0075\u0073\u00EA\u006D", "\u0073\u00EA\u0073\u00EA\u006D", "\u00E7\u0061\u0072\u0073\u00EA\u006D", "\u0070\u00EA\u006E\u0063\u0073\u00EA\u006D", "\u00EE\u006E\u00EE", "\u0073\u0065\u0070\u0074"], 
								weekday_names_short : ["\u0079\u00EA\u006B", "\u0064\u0075\u0073", "\u0073\u00EA\u0073", "\u00E7\u0061\u0072", "\u0070\u00EA\u006E", "\u00EE\u006E\u00EE", "\u0073\u0065\u0070"], 
								weekday_names_narrow : ["\u0079\u00EA\u006B", "\u0064\u0075\u0073", "\u0073\u00EA\u0073", "\u00E7\u0061\u0072", "\u0070\u00EA\u006E", "\u00EE\u006E\u00EE", "\u0073\u0065\u0070"], 
								month_names_long : ["\u00C7\u0069\u006C\u0065", "\u0053\u0069\u0062\u0061\u0074", "\u0041\u0064\u0061\u0072", "\u004E\u00EE\u0073\u0061\u006E", "\u0047\u0075\u006C\u0061\u006E", "\u0048\u0065\u007A\u00EE\u0072\u0061\u006E", "\u0054\u00EE\u0072\u006D\u0065\u0068", "\u0054\u0065\u0062\u0061\u0078", "\u00CE\u006C\u006F\u006E", "\u0043\u006F\u0074\u006D\u0065\u0068", "\u004D\u0069\u006A\u0064\u0061\u0072", "\u004B\u0061\u006E\u00FB\u006E"], 
								month_names_short : ["\u00C7\u0069\u006C", "\u0053\u0069\u0062", "\u0041\u0064\u0061", "\u004E\u00EE\u0073", "\u0047\u0075\u006C", "\u0048\u0065\u007A", "\u0054\u00EE\u0072", "\u0054\u0065\u0062", "\u00CE\u006C\u006F", "\u0043\u006F\u0074", "\u004D\u0069\u006A", "\u004B\u0061\u006E"], 
								month_names_narrow : ["\u00C7\u0069\u006C", "\u0053\u0069\u0062", "\u0041\u0064\u0061", "\u004E\u00EE\u0073", "\u0047\u0075\u006C", "\u0048\u0065\u007A", "\u0054\u00EE\u0072", "\u0054\u0065\u0062", "\u00CE\u006C\u006F", "\u0043\u006F\u0074", "\u004D\u0069\u006A", "\u004B\u0061\u006E"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ku_TR;
					}
					break;
				case "kw":
				case "kw_GB":
				case "kw_gb":
					{

						if (!nexacro.Locale.kw_GB) {
							nexacro.Locale.kw_GB = {
								name : "kw_GB", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0047\u0042\u0050\u0020", 
								currency_symbol : "\u00A3", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0044\u0065\u0020\u0053\u0075\u006C", "\u0044\u0065\u0020\u004C\u0075\u006E", "\u0044\u0065\u0020\u004D\u0065\u0072\u0074\u0068", "\u0044\u0065\u0020\u004D\u0065\u0072\u0068\u0065\u0072", "\u0044\u0065\u0020\u0059\u006F\u0077", "\u0044\u0065\u0020\u0047\u0077\u0065\u006E\u0065\u0072", "\u0044\u0065\u0020\u0053\u0061\u0064\u006F\u0072\u006E"], 
								weekday_names_short : ["\u0053\u0075\u006C", "\u004C\u0075\u006E", "\u004D\u0074\u0068", "\u004D\u0068\u0072", "\u0059\u006F\u0077", "\u0047\u0077\u0065", "\u0053\u0061\u0064"], 
								weekday_names_narrow : ["\u0053\u0075\u006C", "\u004C\u0075\u006E", "\u004D\u0074\u0068", "\u004D\u0068\u0072", "\u0059\u006F\u0077", "\u0047\u0077\u0065", "\u0053\u0061\u0064"], 
								month_names_long : ["\u004D\u0079\u0073\u0020\u0047\u0065\u006E\u0076\u0065\u0072", "\u004D\u0079\u0073\u0020\u0057\u0068\u0065\u0076\u0072\u0065\u006C", "\u004D\u0079\u0073\u0020\u004D\u0065\u0072\u0074\u0068", "\u004D\u0079\u0073\u0020\u0045\u0062\u0072\u0065\u006C", "\u004D\u0079\u0073\u0020\u004D\u0065", "\u004D\u0079\u0073\u0020\u0045\u0076\u0061\u006E", "\u004D\u0079\u0073\u0020\u0047\u006F\u0072\u0074\u0068\u0065\u0072\u0065\u006E", "\u004D\u0079\u0065\u0020\u0045\u0073\u0074", "\u004D\u0079\u0073\u0020\u0047\u0077\u0079\u006E\u0067\u0061\u006C\u0061", "\u004D\u0079\u0073\u0020\u0048\u0065\u0064\u0072\u0061", "\u004D\u0079\u0073\u0020\u0044\u0075", "\u004D\u0079\u0073\u0020\u004B\u0065\u0076\u0061\u0072\u0064\u0068\u0075"], 
								month_names_short : ["\u0047\u0065\u006E", "\u0057\u0068\u0065", "\u004D\u0065\u0072", "\u0045\u0062\u0072", "\u004D\u0065", "\u0045\u0076\u006E", "\u0047\u006F\u0072", "\u0045\u0073\u0074", "\u0047\u0077\u006E", "\u0048\u0065\u0064", "\u0044\u0075", "\u004B\u0065\u0076"], 
								month_names_narrow : ["\u0047\u0065\u006E", "\u0057\u0068\u0065", "\u004D\u0065\u0072", "\u0045\u0062\u0072", "\u004D\u0065", "\u0045\u0076\u006E", "\u0047\u006F\u0072", "\u0045\u0073\u0074", "\u0047\u0077\u006E", "\u0048\u0065\u0064", "\u0044\u0075", "\u004B\u0065\u0076"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.kw_GB;
					}
					break;
				case "ky":
				case "ky_KG":
				case "ky_kg":
					{

						if (!nexacro.Locale.ky_KG) {
							nexacro.Locale.ky_KG = {
								name : "ky_KG", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004B\u0047\u0053\u0020", 
								currency_symbol : "\u0441\u043E\u043C", 
								mon_decimal_point : "\u002D", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0436\u0435\u043A\u0448\u0435\u043C\u0431\u0438", "\u0434\u04AF\u0439\u0448\u04E9\u043C\u0431\u04AF", "\u0448\u0435\u0439\u0448\u0435\u043C\u0431\u0438", "\u0448\u0430\u0440\u0448\u0435\u043C\u0431\u0438", "\u0431\u0435\u0439\u0448\u0435\u043C\u0431\u0438", "\u0436\u0443\u043C\u0430", "\u0438\u0448\u0435\u043C\u0431\u0438"], 
								weekday_names_short : ["\u0436\u043A", "\u0434\u0448", "\u0448\u0435", "\u0448\u0430", "\u0431\u0448", "\u0436\u043C", "\u0438\u0448"], 
								weekday_names_narrow : ["\u0436\u043A", "\u0434\u0448", "\u0448\u0435", "\u0448\u0430", "\u0431\u0448", "\u0436\u043C", "\u0438\u0448"], 
								month_names_long : ["\u044F\u043D\u0432\u0430\u0440\u044C", "\u0444\u0435\u0432\u0440\u0430\u043B\u044C", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0435\u043B\u044C", "\u043C\u0430\u0439", "\u0438\u044E\u043D\u044C", "\u0438\u044E\u043B\u044C", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C", "\u043E\u043A\u0442\u044F\u0431\u0440\u044C", "\u043D\u043E\u044F\u0431\u0440\u044C", "\u0434\u0435\u043A\u0430\u0431\u0440\u044C"], 
								month_names_short : ["\u044F\u043D\u0432", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0439", "\u0438\u044E\u043D", "\u0438\u044E\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043D", "\u043E\u043A\u0442", "\u043D\u043E\u044F", "\u0434\u0435\u043A"], 
								month_names_narrow : ["\u044F\u043D\u0432", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0439", "\u0438\u044E\u043D", "\u0438\u044E\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043D", "\u043E\u043A\u0442", "\u043D\u043E\u044F", "\u0434\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u002C\u0020\u0025\u0065\u002D\u0025\u0062\u0020\u0025\u0059\u0020\u0436\u002C\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002D\u0025\u0042\u0020\u0025\u0059\u002D\u0025\u0041\u0020\u0436\u002E", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0079", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ky_KG;
					}
					break;
				case "lg":
				case "lg_UG":
				case "lg_ug":
					{

						if (!nexacro.Locale.lg_UG) {
							nexacro.Locale.lg_UG = {
								name : "lg_UG", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u0047\u0058\u0020", 
								currency_symbol : "\u002F\u002D", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 0, 
								n_cs_precedes : 0, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0061\u0062\u0069\u0069\u0074\u0069", "\u0042\u0061\u006C\u0061\u007A\u0061", "\u004C\u0077\u0061\u006B\u0075\u0062\u0069\u0072\u0069", "\u004C\u0077\u0061\u006B\u0075\u0073\u0061\u0074\u0075", "\u004C\u0077\u0061\u006B\u0075\u006E\u0061", "\u004C\u0077\u0061\u006B\u0075\u0074\u0061\u0061\u006E\u006F", "\u004C\u0077\u0061\u006D\u0075\u006B\u0061\u0061\u0067\u0061"], 
								weekday_names_short : ["\u0053\u0061\u0062", "\u0042\u0061\u006C", "\u004C\u0077\u0032", "\u004C\u0077\u0033", "\u004C\u0077\u0034", "\u004C\u0077\u0035", "\u004C\u0077\u0036"], 
								weekday_names_narrow : ["\u0053\u0061\u0062", "\u0042\u0061\u006C", "\u004C\u0077\u0032", "\u004C\u0077\u0033", "\u004C\u0077\u0034", "\u004C\u0077\u0035", "\u004C\u0077\u0036"], 
								month_names_long : ["\u004A\u0061\u006E\u0077\u0061\u006C\u0069\u0079\u006F", "\u0046\u0065\u0062\u0077\u0061\u006C\u0069\u0079\u006F", "\u004D\u0061\u0072\u0069\u0073\u0069", "\u0041\u0070\u0075\u006C\u0069", "\u004D\u0061\u0061\u0079\u0069", "\u004A\u0075\u0075\u006E\u0069", "\u004A\u0075\u006C\u0061\u0061\u0069", "\u0041\u0067\u0075\u0073\u0069\u0074\u006F", "\u0053\u0065\u0062\u0075\u0074\u0074\u0065\u006D\u0062\u0061", "\u004F\u006B\u0069\u0074\u006F\u0062\u0062\u0061", "\u004E\u006F\u0076\u0065\u006D\u0062\u0061", "\u0044\u0065\u0073\u0065\u006D\u0062\u0061"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0075", "\u004D\u0061\u0061", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u0075", "\u0053\u0065\u0062", "\u004F\u006B\u0069", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0070\u0075", "\u004D\u0061\u0061", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u0075", "\u0053\u0065\u0062", "\u004F\u006B\u0069", "\u004E\u006F\u0076", "\u0044\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.lg_UG;
					}
					break;
				case "lo":
				case "lo_LA":
				case "lo_la":
					{

						if (!nexacro.Locale.lo_LA) {
							nexacro.Locale.lo_LA = {
								name : "lo_LA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004C\u0041\u004B\u0020", 
								currency_symbol : "\u20AD", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 2, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0EAD\u0EB2\u0E97\u0EB4\u0E94", "\u0E88\u0EB1\u0E99", "\u0EAD\u0EB1\u0E87\u0E84\u0EB2\u0E99", "\u0E9E\u0EB8\u0E94", "\u0E9E\u0EB0\u0EAB\u0EB1\u0E94", "\u0EAA\u0EB8\u0E81", "\u0EC0\u0EAA\u0EBB\u0EB2"], 
								weekday_names_short : ["\u0EAD\u0EB2\u002E", "\u0E88\u002E", "\u0E84\u002E", "\u0E9E\u002E", "\u0E9E\u0EAB\u002E", "\u0EAA\u002E", "\u0EAA\u002E"], 
								weekday_names_narrow : ["\u0EAD\u0EB2\u002E", "\u0E88\u002E", "\u0E84\u002E", "\u0E9E\u002E", "\u0E9E\u0EAB\u002E", "\u0EAA\u002E", "\u0EAA\u002E"], 
								month_names_long : ["\u0EA1\u0EB1\u0E87\u0E81\u0EAD\u0E99", "\u0E81\u0EB8\u0EA1\u0E9F\u0EB2", "\u0EA1\u0EB5\u0E99\u0EB2", "\u0EC0\u0EA1\u0EAA\u0EB2", "\u0E9E\u0EB6\u0E94\u0EAA\u0EB0\u0E9E\u0EB2", "\u0EA1\u0EB4\u0E96\u0EB8\u0E99\u0EB2", "\u0E81\u0ECD\u0EA5\u0EB0\u0E81\u0EBB\u0E94", "\u0EAA\u0EB4\u0E87\u0EAB\u0EB2", "\u0E81\u0EB1\u0E99\u0E8D\u0EB2", "\u0E95\u0EB8\u0EA5\u0EB2", "\u0E9E\u0EB0\u0E88\u0EB4\u0E81", "\u0E97\u0EB1\u0E99\u0EA7\u0EB2"], 
								month_names_short : ["\u0EA1\u002E\u0E81\u002E", "\u0E81\u002E\u0E9E\u002E", "\u0EA1\u002E\u0E99\u002E", "\u0EA1\u002E\u0EAA\u002E", "\u0E9E\u002E\u0E9E\u002E", "\u0EA1\u0EB4\u002E\u0E96\u002E", "\u0E81\u002E\u0EA5\u002E", "\u0EAA\u002E\u0EAB\u002E", "\u0E81\u002E\u0E8D\u002E", "\u0E95\u002E\u0EA5\u002E", "\u0E9E\u002E\u0E88\u002E", "\u0E97\u002E\u0EA7\u002E"], 
								month_names_narrow : ["\u0EA1\u002E\u0E81\u002E", "\u0E81\u002E\u0E9E\u002E", "\u0EA1\u002E\u0E99\u002E", "\u0EA1\u002E\u0EAA\u002E", "\u0E9E\u002E\u0E9E\u002E", "\u0EA1\u0EB4\u002E\u0E96\u002E", "\u0E81\u002E\u0EA5\u002E", "\u0EAA\u002E\u0EAB\u002E", "\u0E81\u002E\u0E8D\u002E", "\u0E95\u002E\u0EA5\u002E", "\u0E9E\u002E\u0E88\u002E", "\u0E97\u002E\u0EA7\u002E"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "%d\u002F%m\u002F%Ey", 
								time_format : "%H\u003A%M\u003A%S", 
								time_format_ampm : "%I\u003A%M\u003A%S\u0020%p", 
								date_time_format : "%a\u0020%e\u0020%b\u0020%Ey\u002C\u0020%H\u003A%M\u003A%S", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0065\u0020\u0025\u0062\u0020\u0025\u0045\u0079\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.lo_LA;
					}
					break;
				case "lt":
				case "lt_LT":
				case "lt_lt":
					{

						if (!nexacro.Locale.lt_LT) {
							nexacro.Locale.lt_LT = {
								name : "lt_LT", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004C\u0054\u004C\u0020", 
								currency_symbol : "\u004C\u0074", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0065\u006B\u006D\u0061\u0064\u0069\u0065\u006E\u0069\u0073", "\u0050\u0069\u0072\u006D\u0061\u0064\u0069\u0065\u006E\u0069\u0073", "\u0041\u006E\u0074\u0072\u0061\u0064\u0069\u0065\u006E\u0069\u0073", "\u0054\u0072\u0065\u010D\u0069\u0061\u0064\u0069\u0065\u006E\u0069\u0073", "\u004B\u0065\u0074\u0076\u0069\u0072\u0074\u0061\u0064\u0069\u0065\u006E\u0069\u0073", "\u0050\u0065\u006E\u006B\u0074\u0061\u0064\u0069\u0065\u006E\u0069\u0073", "\u0160\u0065\u0161\u0074\u0061\u0064\u0069\u0065\u006E\u0069\u0073"], 
								weekday_names_short : ["\u0053\u006B", "\u0050\u0072", "\u0041\u006E", "\u0054\u0072", "\u004B\u0074", "\u0050\u006E", "\u0160\u0074"], 
								weekday_names_narrow : ["\u0053\u006B", "\u0050\u0072", "\u0041\u006E", "\u0054\u0072", "\u004B\u0074", "\u0050\u006E", "\u0160\u0074"], 
								month_names_long : ["\u0073\u0061\u0075\u0073\u0069\u006F", "\u0076\u0061\u0073\u0061\u0072\u0069\u006F", "\u006B\u006F\u0076\u006F", "\u0062\u0061\u006C\u0061\u006E\u0064\u017E\u0069\u006F", "\u0067\u0065\u0067\u0075\u017E\u0117\u0073", "\u0062\u0069\u0072\u017E\u0065\u006C\u0069\u006F", "\u006C\u0069\u0065\u0070\u006F\u0073", "\u0072\u0075\u0067\u0070\u006A\u016B\u010D\u0069\u006F", "\u0072\u0075\u0067\u0073\u0117\u006A\u006F", "\u0073\u0070\u0061\u006C\u0069\u006F", "\u006C\u0061\u0070\u006B\u0072\u0069\u010D\u0069\u006F", "\u0067\u0072\u0075\u006F\u0064\u017E\u0069\u006F"], 
								month_names_short : ["\u0053\u0061\u0075", "\u0056\u0061\u0073", "\u004B\u006F\u0076", "\u0042\u0061\u006C", "\u0047\u0065\u0067", "\u0042\u0069\u0072", "\u004C\u0069\u0065", "\u0052\u0067\u0070", "\u0052\u0067\u0073", "\u0053\u0070\u0061", "\u004C\u0061\u0070", "\u0047\u0072\u0064"], 
								month_names_narrow : ["\u0053\u0061\u0075", "\u0056\u0061\u0073", "\u004B\u006F\u0076", "\u0042\u0061\u006C", "\u0047\u0065\u0067", "\u0042\u0069\u0072", "\u004C\u0069\u0065", "\u0052\u0067\u0070", "\u0052\u0067\u0073", "\u0053\u0070\u0061", "\u004C\u0061\u0070", "\u0047\u0072\u0064"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002E\u0025\u006D\u002E\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0059\u0020\u006D\u002E\u0020\u0025\u0042\u0020\u0025\u0064\u0020\u0064\u002E\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u0020\\\u006D\u002E\u0020\u0025\u0042\u0020\u0025\u0065\u0020\\\u0064\u002E", 
								shortdate_format : "\u0025\u0059\u002E\u0025\u006D\u002E\u0025\u0064", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.lt_LT;
					}
					break;
				case "lv":
				case "lv_LV":
				case "lv_lv":
					{

						if (!nexacro.Locale.lv_LV) {
							nexacro.Locale.lv_LV = {
								name : "lv_LV", 
								decimal_point : "\u002C", 
								thousands_sep : "\u00A0", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004C\u0056\u004C\u0020", 
								currency_symbol : "\u004C\u0073", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 3, 
								n_sign_posn : 3, 
								weekday_names_long : ["\u0073\u0076\u0113\u0074\u0064\u0069\u0065\u006E\u0061", "\u0070\u0069\u0072\u006D\u0064\u0069\u0065\u006E\u0061", "\u006F\u0074\u0072\u0064\u0069\u0065\u006E\u0061", "\u0074\u0072\u0065\u0161\u0064\u0069\u0065\u006E\u0061", "\u0063\u0065\u0074\u0075\u0072\u0074\u0064\u0069\u0065\u006E\u0061", "\u0070\u0069\u0065\u006B\u0074\u0064\u0069\u0065\u006E\u0061", "\u0073\u0065\u0073\u0074\u0064\u0069\u0065\u006E\u0061"], 
								weekday_names_short : ["\u0053\u0076", "\u0050\u00A0", "\u004F\u00A0", "\u0054\u00A0", "\u0043\u00A0", "\u0050\u006B", "\u0053\u00A0"], 
								weekday_names_narrow : ["\u0053\u0076", "\u0050\u00A0", "\u004F\u00A0", "\u0054\u00A0", "\u0043\u00A0", "\u0050\u006B", "\u0053\u00A0"], 
								month_names_long : ["\u006A\u0061\u006E\u0076\u0101\u0072\u0069\u0073", "\u0066\u0065\u0062\u0072\u0075\u0101\u0072\u0069\u0073", "\u006D\u0061\u0072\u0074\u0073", "\u0061\u0070\u0072\u012B\u006C\u0069\u0073", "\u006D\u0061\u0069\u006A\u0073", "\u006A\u016B\u006E\u0069\u006A\u0073", "\u006A\u016B\u006C\u0069\u006A\u0073", "\u0061\u0075\u0067\u0075\u0073\u0074\u0073", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0069\u0073", "\u006F\u006B\u0074\u006F\u0062\u0072\u0069\u0073", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0069\u0073", "\u0064\u0065\u0063\u0065\u006D\u0062\u0072\u0069\u0073"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u016B\u006E", "\u006A\u016B\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u016B\u006E", "\u006A\u016B\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002E\u0025\u006D\u002E\u0025\u0064\u002E", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "%A\u002C %Y\u002E \u0067\u0061\u0064\u0061 %e\u002E %B\u002C \u0070\u006C\u006B\u0073\u0074\u002E %H \u0075\u006E %M", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0059\u002E\u0020\u0067\u0061\\\u0064\u0061\u0020\u0025\u0065\u002E\u0020\u0025\u0042", 
								shortdate_format : "\u0025\u0059\u002E\u0025\u006D\u002E\u0025\u0064\u002E", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.lv_LV;
					}
					break;
				case "mg":
				case "mg_MG":
				case "mg_mg":
					{

						if (!nexacro.Locale.mg_MG) {
							nexacro.Locale.mg_MG = {
								name : "mg_MG", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u004D\u0047\u0041\u0020", 
								currency_symbol : "\u0041\u0052", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0061\u006C\u0061\u0068\u0061\u0064\u0079", "\u0061\u006C\u0061\u0074\u0073\u0069\u006E\u0061\u0069\u006E\u0079", "\u0074\u0061\u006C\u0061\u0074\u0061", "\u0061\u006C\u0061\u0072\u006F\u0062\u0069\u0061", "\u0061\u006C\u0061\u006B\u0061\u006D\u0069\u0073\u0079", "\u007A\u006F\u006D\u0061", "\u0073\u0061\u0062\u006F\u0074\u0073\u0079"], 
								weekday_names_short : ["\u006C\u0068\u0064", "\u006C\u0074\u0073", "\u0074\u006C\u0074", "\u006C\u0072\u0062", "\u006C\u006B\u006D", "\u007A\u006F\u006D", "\u0073\u0061\u0062"], 
								weekday_names_narrow : ["\u006C\u0068\u0064", "\u006C\u0074\u0073", "\u0074\u006C\u0074", "\u006C\u0072\u0062", "\u006C\u006B\u006D", "\u007A\u006F\u006D", "\u0073\u0061\u0062"], 
								month_names_long : ["\u006A\u0061\u006E\u006F\u0061\u0072\u0079", "\u0066\u0065\u0062\u0072\u006F\u0061\u0072\u0079", "\u006D\u0061\u0072\u0074\u0073\u0061", "\u0061\u0070\u0072\u0069\u006C\u0079", "\u006D\u0065\u0079", "\u006A\u006F\u006E\u0061", "\u006A\u006F\u006C\u0061\u0079", "\u0061\u006F\u0067\u006F\u0073\u0069\u0074\u0072\u0061", "\u0073\u0065\u0070\u0074\u0061\u006D\u0062\u0072\u0061", "\u006F\u006B\u0074\u006F\u0062\u0072\u0061", "\u006E\u006F\u0076\u0061\u006D\u0062\u0072\u0061", "\u0064\u0065\u0073\u0061\u006D\u0062\u0072\u0061"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0065\u0079", "\u006A\u006F\u006E", "\u006A\u006F\u006C", "\u0061\u006F\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0065\u0079", "\u006A\u006F\u006E", "\u006A\u006F\u006C", "\u0061\u006F\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.mg_MG;
					}
					break;
				case "mi":
				case "mi_NZ":
				case "mi_nz":
					{

						if (!nexacro.Locale.mi_NZ) {
							nexacro.Locale.mi_NZ = {
								name : "mi_NZ", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004E\u005A\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0052\u0101\u0074\u0061\u0070\u0075", "\u004D\u0061\u006E\u0065", "\u0054\u016B\u0072\u0065\u0069", "\u0057\u0065\u006E\u0065\u0072\u0065\u0069", "\u0054\u0101\u0069\u0074\u0065", "\u0050\u0061\u0072\u0061\u0069\u0072\u0065", "\u0048\u0101\u0074\u0061\u0072\u0065\u0069"], 
								weekday_names_short : ["\u0054\u0061", "\u004D\u0061", "\u0054\u016B", "\u0057\u0065", "\u0054\u0101\u0069", "\u0050\u0061", "\u0048\u0101"], 
								weekday_names_narrow : ["\u0054\u0061", "\u004D\u0061", "\u0054\u016B", "\u0057\u0065", "\u0054\u0101\u0069", "\u0050\u0061", "\u0048\u0101"], 
								month_names_long : ["\u004B\u006F\u0068\u0069\u002D\u0074\u0101\u0074\u0065\u0061", "\u0048\u0075\u0069\u002D\u0074\u0061\u006E\u0067\u0075\u0072\u0075", "\u0050\u006F\u0075\u0074\u016B\u002D\u0074\u0065\u002D\u0072\u0061\u006E\u0067\u0069", "\u0050\u0061\u0065\u006E\u0067\u0061\u002D\u0077\u0068\u0101\u0077\u0068\u0101", "\u0048\u0061\u0072\u0061\u0074\u0075\u0061", "\u0050\u0069\u0070\u0069\u0072\u0069", "\u0048\u014D\u006E\u0067\u006F\u0069\u006E\u0067\u006F\u0069", "\u0048\u0065\u0072\u0065\u002D\u0074\u0075\u0072\u0069\u002D\u006B\u014D\u006B\u0101", "\u004D\u0061\u0068\u0075\u0072\u0075", "\u0057\u0068\u0069\u0072\u0069\u006E\u0067\u0061\u002D\u0101\u002D\u006E\u0075\u006B\u0075", "\u0057\u0068\u0069\u0072\u0069\u006E\u0067\u0061\u002D\u0101\u002D\u0072\u0061\u006E\u0067\u0069", "\u0048\u0061\u006B\u0069\u0068\u0065\u0061"], 
								month_names_short : ["\u004B\u006F\u0068\u0069", "\u0048\u0075\u0069", "\u0050\u006F\u0075", "\u0050\u0061\u0065", "\u0048\u0061\u0072\u0061", "\u0050\u0069\u0070\u0069", "\u0048\u014D\u006E\u0067\u006F\u0069", "\u0048\u0065\u0072\u0065", "\u004D\u0061\u0068\u0075", "\u0057\u0068\u0069\u002D\u006E\u0075", "\u0057\u0068\u0069\u002D\u0072\u0061", "\u0048\u0061\u006B\u0069"], 
								month_names_narrow : ["\u004B\u006F\u0068\u0069", "\u0048\u0075\u0069", "\u0050\u006F\u0075", "\u0050\u0061\u0065", "\u0048\u0061\u0072\u0061", "\u0050\u0069\u0070\u0069", "\u0048\u014D\u006E\u0067\u006F\u0069", "\u0048\u0065\u0072\u0065", "\u004D\u0061\u0068\u0075", "\u0057\u0068\u0069\u002D\u006E\u0075", "\u0057\u0068\u0069\u002D\u0072\u0061", "\u0048\u0061\u006B\u0069"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0054\u0065\u0020\u0025\u0041\u002C\u0020\u0074\u0065\u0020\u0025\u0064\u0020\u006F\u0020\u0025\u0042\u002C\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.mi_NZ;
					}
					break;
				case "mk":
				case "mk_MK":
				case "mk_mk":
					{

						if (!nexacro.Locale.mk_MK) {
							nexacro.Locale.mk_MK = {
								name : "mk_MK", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004D\u004B\u0044\u0020", 
								currency_symbol : "\u0434\u0435\u043D\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u043D\u0435\u0434\u0435\u043B\u0430", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A", "\u043F\u0435\u0442\u043E\u043A", "\u0441\u0430\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0432\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0430\u0431"], 
								weekday_names_narrow : ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0432\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0430\u0431"], 
								month_names_long : ["\u0458\u0430\u043D\u0443\u0430\u0440\u0438", "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0458", "\u0458\u0443\u043D\u0438", "\u0458\u0443\u043B\u0438", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438", "\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438", "\u043D\u043E\u0435\u043C\u0432\u0440\u0438", "\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438"], 
								month_names_short : ["\u0458\u0430\u043D", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0435", "\u0434\u0435\u043A"], 
								month_names_narrow : ["\u0458\u0430\u043D", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0435", "\u0434\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u002C\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u002C\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.mk_MK;
					}
					break;
				case "ml":
				case "ml_IN":
				case "ml_in":
					{

						if (!nexacro.Locale.ml_IN) {
							nexacro.Locale.ml_IN = {
								name : "ml_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0D15", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0D1E\u0D3E\u0D2F\u0D30\u0D4D\u200D", "\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D33\u0D4D\u200D", "\u0D1A\u0D4A\u0D35\u0D4D\u0D35", "\u0D2C\u0D41\u0D27\u0D28\u0D4D\u200D", "\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D02", "\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F", "\u0D36\u0D28\u0D3F"], 
								weekday_names_short : ["\u0D1E\u0D3E", "\u0D24\u0D3F", "\u0D1A\u0D4A", "\u0D2C\u0D41", "\u0D35\u0D4D\u0D2F\u0D3E", "\u0D35\u0D46", "\u0D36"], 
								weekday_names_narrow : ["\u0D1E\u0D3E", "\u0D24\u0D3F", "\u0D1A\u0D4A", "\u0D2C\u0D41", "\u0D35\u0D4D\u0D2F\u0D3E", "\u0D35\u0D46", "\u0D36"], 
								month_names_long : ["\u0D1C\u0D28\u0D41\u0D35\u0D30\u0D3F", "\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41\u0D35\u0D30\u0D3F", "\u0D2E\u0D3E\u0D30\u0D4D\u200D\u0D1A\u0D4D\u0D1A\u0D4D", "\u0D0F\u0D2A\u0D4D\u0D30\u0D3F\u0D32\u0D4D\u200D\u0020", "\u0D2E\u0D46\u0D2F\u0D4D", "\u0D1C\u0D42\u0D23\u0D4D\u200D", "\u0D1C\u0D42\u0D32\u0D48", "\u0D06\u0D17\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D4D", "\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31\u0D02\u0D2C\u0D30\u0D4D\u200D", "\u0D12\u0D15\u0D4D\u0D1F\u0D4B\u0D2C\u0D30\u0D4D\u200D", "\u0D28\u0D35\u0D02\u0D2C\u0D30\u0D4D\u200D", "\u0D21\u0D3F\u0D38\u0D02\u0D2C\u0D30\u0D4D\u200D"], 
								month_names_short : ["\u0D1C\u0D28\u0D41", "\u0D2B\u0D46\u0D2C\u0D4D", "\u0D2E\u0D3E\u0D30\u0D4D\u200D", "\u0D0F\u0D2A\u0D4D\u0D30", "\u0D2E\u0D46", "\u0D1C\u0D42\u0D23\u0D4D\u200D", "\u0D1C\u0D42\u0D32\u0D48", "\u0D06\u0D17\u0D4D", "\u0D38\u0D46\u0D2A\u0D4D", "\u0D12\u0D15\u0D4D\u0D1F\u0D4B", "\u0D28\u0D35\u0D02", "\u0D21\u0D3F\u0D38\u0D02"], 
								month_names_narrow : ["\u0D1C\u0D28\u0D41", "\u0D2B\u0D46\u0D2C\u0D4D", "\u0D2E\u0D3E\u0D30\u0D4D\u200D", "\u0D0F\u0D2A\u0D4D\u0D30", "\u0D2E\u0D46", "\u0D1C\u0D42\u0D23\u0D4D\u200D", "\u0D1C\u0D42\u0D32\u0D48", "\u0D06\u0D17\u0D4D", "\u0D38\u0D46\u0D2A\u0D4D", "\u0D12\u0D15\u0D4D\u0D1F\u0D4B", "\u0D28\u0D35\u0D02", "\u0D21\u0D3F\u0D38\u0D02"], 
								ampm : ["\u0D30\u0D3E\u0D35\u0D3F\u0D32\u0D46", "\u0D35\u0D48\u0D15\u0D41"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ml_IN;
					}
					break;
				case "mn":
				case "mn_MN":
				case "mn_mn":
					{

						if (!nexacro.Locale.mn_MN) {
							nexacro.Locale.mn_MN = {
								name : "mn_MN", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004D\u004E\u0054\u0020", 
								currency_symbol : "\u20AE", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u041D\u044F\u043C", "\u0414\u0430\u0432\u0430\u0430", "\u041C\u044F\u0433\u043C\u0430\u0440", "\u041B\u0445\u0430\u0433\u0432\u0430", "\u041F\u04AF\u0440\u044D\u0432", "\u0411\u0430\u0430\u0441\u0430\u043D", "\u0411\u044F\u043C\u0431\u0430"], 
								weekday_names_short : ["\u041D\u044F", "\u0414\u0430", "\u041C\u044F", "\u041B\u0445", "\u041F\u04AF", "\u0411\u0430", "\u0411\u044F"], 
								weekday_names_narrow : ["\u041D\u044F", "\u0414\u0430", "\u041C\u044F", "\u041B\u0445", "\u041F\u04AF", "\u0411\u0430", "\u0411\u044F"], 
								month_names_long : ["\u0425\u0443\u043B\u0433\u0430\u043D\u0430\u0020\u0441\u0430\u0440\u044B\u043D", "\u04AE\u0445\u044D\u0440\u0020\u0441\u0430\u0440\u044B\u043D", "\u0411\u0430\u0440\u0020\u0441\u0430\u0440\u044B\u043D", "\u0422\u0443\u0443\u043B\u0430\u0439\u0020\u0441\u0430\u0440\u044B\u043D", "\u041B\u0443\u0443\u0020\u0441\u0430\u0440\u044B\u043D", "\u041C\u043E\u0433\u043E\u0439\u0020\u0441\u0430\u0440\u044B\u043D", "\u041C\u043E\u0440\u044C\u0020\u0441\u0430\u0440\u044B\u043D", "\u0425\u043E\u043D\u044C\u0020\u0441\u0430\u0440\u044B\u043D", "\u0411\u0438\u0447\u0020\u0441\u0430\u0440\u044B\u043D", "\u0422\u0430\u0445\u0438\u0430\u0020\u0441\u0430\u0440\u044B\u043D", "\u041D\u043E\u0445\u043E\u0439\u0020\u0441\u0430\u0440\u044B\u043D", "\u0413\u0430\u0445\u0430\u0439\u0020\u0441\u0430\u0440\u044B\u043D"], 
								month_names_short : ["\u0425\u0443\u043B", "\u04AE\u0445\u044D", "\u0411\u0430\u0440", "\u0422\u0443\u0443", "\u041B\u0443\u0443", "\u041C\u043E\u0433", "\u041C\u043E\u0440", "\u0425\u043E\u043D", "\u0411\u0438\u0447", "\u0422\u0430\u0445", "\u041D\u043E\u0445", "\u0413\u0430\u0445"], 
								month_names_narrow : ["\u0425\u0443\u043B", "\u04AE\u0445\u044D", "\u0411\u0430\u0440", "\u0422\u0443\u0443", "\u041B\u0443\u0443", "\u041C\u043E\u0433", "\u041C\u043E\u0440", "\u0425\u043E\u043D", "\u0411\u0438\u0447", "\u0422\u0430\u0445", "\u041D\u043E\u0445", "\u0413\u0430\u0445"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002E\u0025\u006D\u002E\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0059\u0020\u0025\u0062\u0020\u0025\u0064\u002C\u0020\u0025\u0061\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u005A\u0020\u0025\u0059\u0020\u043E\u043D\u044B\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0061\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.mn_MN;
					}
					break;
				case "mr":
				case "mr_IN":
				case "mr_in":
					{

						if (!nexacro.Locale.mr_IN) {
							nexacro.Locale.mr_IN = {
								name : "mr_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0930\u0941", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0930\u0935\u093F\u0935\u093E\u0930", "\u0938\u094B\u092E\u0935\u093E\u0930", "\u092E\u0902\u0917\u0933\u0935\u093E\u0930", "\u092E\u0902\u0917\u0933\u0935\u093E\u0930", "\u0917\u0941\u0930\u0941\u0935\u093E\u0930", "\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930", "\u0936\u0928\u093F\u0935\u093E\u0930"], 
								weekday_names_short : ["\u0930\u0935\u093F", "\u0938\u094B\u092E", "\u092E\u0902\u0917\u0933", "\u092C\u0941\u0927", "\u0917\u0941\u0930\u0941", "\u0936\u0941\u0915\u094D\u0930", "\u0936\u0928\u093F"], 
								weekday_names_narrow : ["\u0930\u0935\u093F", "\u0938\u094B\u092E", "\u092E\u0902\u0917\u0933", "\u092C\u0941\u0927", "\u0917\u0941\u0930\u0941", "\u0936\u0941\u0915\u094D\u0930", "\u0936\u0928\u093F"], 
								month_names_long : ["\u091C\u093E\u0928\u0947\u0935\u093E\u0930\u0940", "\u092B\u0947\u092C\u0943\u0935\u093E\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u090F\u092A\u094D\u0930\u093F\u0932", "\u092E\u0947", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u0948", "\u0913\u0917\u0938\u094D\u091F", "\u0938\u0947\u092A\u094D\u091F\u0947\u0902\u092C\u0930", "\u0913\u0915\u094D\u091F\u094B\u092C\u0930", "\u0928\u094B\u0935\u094D\u0939\u0947\u0902\u092C\u0930", "\u0921\u093F\u0938\u0947\u0902\u092C\u0930"], 
								month_names_short : ["\u091C\u093E\u0928\u0947\u0935\u093E\u0930\u0940", "\u092B\u0947\u092C\u0943\u0935\u093E\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u090F\u092A\u094D\u0930\u093F\u0932", "\u092E\u0947", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u0948", "\u0913\u0917\u0938\u094D\u091F", "\u0938\u0947\u092A\u094D\u091F\u0947\u0902\u092C\u0930", "\u0913\u0915\u094D\u091F\u094B\u092C\u0930", "\u0928\u094B\u0935\u094D\u0939\u0947\u0902\u092C\u0930", "\u0921\u093F\u0938\u0947\u0902\u092C\u0930"], 
								month_names_narrow : ["\u091C\u093E\u0928\u0947\u0935\u093E\u0930\u0940", "\u092B\u0947\u092C\u0943\u0935\u093E\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u090F\u092A\u094D\u0930\u093F\u0932", "\u092E\u0947", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u0948", "\u0913\u0917\u0938\u094D\u091F", "\u0938\u0947\u092A\u094D\u091F\u0947\u0902\u092C\u0930", "\u0913\u0915\u094D\u091F\u094B\u092C\u0930", "\u0928\u094B\u0935\u094D\u0939\u0947\u0902\u092C\u0930", "\u0921\u093F\u0938\u0947\u0902\u092C\u0930"], 
								ampm : ["\u092E\u002E\u092A\u0942\u002E", "\u092E\u002E\u0928\u0902\u002E"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.mr_IN;
					}
					break;
				case "ms":
				case "ms_MY":
				case "ms_my":
					{

						if (!nexacro.Locale.ms_MY) {
							nexacro.Locale.ms_MY = {
								name : "ms_MY", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004D\u0059\u0052\u0020", 
								currency_symbol : "\u0052\u004D", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 0, 
								weekday_names_long : ["\u0041\u0068\u0061\u0064", "\u0049\u0073\u006E\u0069\u006E", "\u0053\u0065\u006C\u0061\u0073\u0061", "\u0052\u0061\u0062\u0075", "\u004B\u0068\u0061\u006D\u0069\u0073", "\u004A\u0075\u006D\u0061\u0061\u0074", "\u0053\u0061\u0062\u0074\u0075"], 
								weekday_names_short : ["\u0041\u0068\u0064", "\u0049\u0073\u006E", "\u0053\u0065\u006C", "\u0052\u0061\u0062", "\u004B\u0068\u0061", "\u004A\u0075\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u0041\u0068\u0064", "\u0049\u0073\u006E", "\u0053\u0065\u006C", "\u0052\u0061\u0062", "\u004B\u0068\u0061", "\u004A\u0075\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u004A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0046\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u004D\u0061\u0063", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C\u0061\u0069", "\u004F\u0067\u006F\u0073", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u004F\u006B\u0074\u006F\u0062\u0065\u0072", "\u004E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0044\u0069\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0063", "\u0041\u0070\u0072", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u004F\u0067\u006F\u0073", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0069\u0073"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0063", "\u0041\u0070\u0072", "\u004D\u0065\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u004F\u0067\u006F\u0073", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0076", "\u0044\u0069\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ms_MY;
					}
					break;
				case "mt":
				case "mt_MT":
				case "mt_mt":
					{

						if (!nexacro.Locale.mt_MT) {
							nexacro.Locale.mt_MT = {
								name : "mt_MT", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004D\u0054\u004C\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0069\u006C\u002D\u0126\u0061\u0064\u0064", "\u0069\u0074\u002D\u0054\u006E\u0065\u006A\u006E", "\u0069\u0074\u002D\u0054\u006C\u0069\u0065\u0074\u0061", "\u006C\u002D\u0045\u0072\u0062\u0067\u0127\u0061", "\u0069\u006C\u002D\u0126\u0061\u006D\u0069\u0073", "\u0069\u006C\u002D\u0120\u0069\u006D\u0067\u0127\u0061", "\u0069\u0073\u002D\u0053\u0069\u0062\u0074"], 
								weekday_names_short : ["\u0126\u0061\u0064", "\u0054\u006E\u0065", "\u0054\u006C\u0069", "\u0045\u0072\u0062", "\u0126\u0061\u006D", "\u0120\u0069\u006D", "\u0053\u0069\u0062"], 
								weekday_names_narrow : ["\u0126\u0061\u0064", "\u0054\u006E\u0065", "\u0054\u006C\u0069", "\u0045\u0072\u0062", "\u0126\u0061\u006D", "\u0120\u0069\u006D", "\u0053\u0069\u0062"], 
								month_names_long : ["\u004A\u0061\u006E\u006E\u0061\u0072", "\u0046\u0072\u0061\u0072", "\u004D\u0061\u0072\u007A\u0075", "\u0041\u0070\u0072\u0069\u006C", "\u004D\u0065\u006A\u006A\u0075", "\u0120\u0075\u006E\u006A\u0075", "\u004C\u0075\u006C\u006A\u0075", "\u0041\u0077\u0069\u0073\u0073\u0075", "\u0053\u0065\u0074\u0074\u0065\u006D\u0062\u0072\u0075", "\u004F\u0074\u0074\u0075\u0062\u0072\u0075", "\u004E\u006F\u0076\u0065\u006D\u0062\u0072\u0075", "\u0044\u0069\u010B\u0065\u006D\u0062\u0072\u0075\u0020"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0072\u0061", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0065\u006A", "\u0120\u0075\u006E", "\u004C\u0075\u006C", "\u0041\u0077\u0069", "\u0053\u0065\u0074", "\u004F\u0074\u0074", "\u004E\u006F\u0076", "\u0044\u0069\u010B"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0072\u0061", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0065\u006A", "\u0120\u0075\u006E", "\u004C\u0075\u006C", "\u0041\u0077\u0069", "\u0053\u0065\u0074", "\u004F\u0074\u0074", "\u004E\u006F\u0076", "\u0044\u0069\u010B"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0074\u0061\u0020\u0025\u0062\u002C\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0074\u0061\u0020\u0025\u0062\u002C\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u0074\u0061\u0027\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.mt_MT;
					}
					break;
				case "nb":
				case "nb_NO":
				case "nb_no":
					{

						if (!nexacro.Locale.nb_NO) {
							nexacro.Locale.nb_NO = {
								name : "nb_NO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004E\u004F\u004B\u0020", 
								currency_symbol : "\u006B\u0072", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u00F8\u006E\u0064\u0061\u0067", "\u006D\u0061\u006E\u0064\u0061\u0067", "\u0074\u0069\u0072\u0073\u0064\u0061\u0067", "\u006F\u006E\u0073\u0064\u0061\u0067", "\u0074\u006F\u0072\u0073\u0064\u0061\u0067", "\u0066\u0072\u0065\u0064\u0061\u0067", "\u006C\u00F8\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u0073\u00F8\u006E", "\u006D\u0061\u006E", "\u0074\u0069\u0072", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F8\u0072"], 
								weekday_names_narrow : ["\u0073\u00F8\u006E", "\u006D\u0061\u006E", "\u0074\u0069\u0072", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F8\u0072"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.nb_NO;
					}
					break;
				case "ne":
				case "ne_NP":
				case "ne_np":
					{

						if (!nexacro.Locale.ne_NP) {
							nexacro.Locale.ne_NP = {
								name : "ne_NP", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0930\u0942", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0906\u0907\u0924\u092C\u093E\u0930\u0020", "\u0938\u094B\u092E\u092C\u093E\u0930\u0020", "\u092E\u0902\u0917\u0932\u092C\u093E\u0930\u0020", "\u092C\u0941\u0927\u092C\u093E\u0930\u0020", "\u092C\u093F\u0939\u093F\u092C\u093E\u0930\u0020", "\u0936\u0941\u0915\u094D\u0930\u092C\u093E\u0930\u0020", "\u0936\u0928\u093F\u092C\u093E\u0930\u0020"], 
								weekday_names_short : ["\u0906\u0907\u0924\u0020", "\u0938\u094B\u092E\u0020", "\u092E\u0902\u0917\u0932\u0020", "\u092C\u0941\u0927\u0020", "\u092C\u093F\u0939\u093F\u0020", "\u0936\u0941\u0915\u094D\u0930\u0020", "\u0936\u0928\u093F\u0020"], 
								weekday_names_narrow : ["\u0906\u0907\u0924\u0020", "\u0938\u094B\u092E\u0020", "\u092E\u0902\u0917\u0932\u0020", "\u092C\u0941\u0927\u0020", "\u092C\u093F\u0939\u093F\u0020", "\u0936\u0941\u0915\u094D\u0930\u0020", "\u0936\u0928\u093F\u0020"], 
								month_names_long : ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0947\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u092E\u094D\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u092E\u094D\u092C\u0930", "\u0926\u093F\u0938\u092E\u094D\u092C\u0930"], 
								month_names_short : ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0947\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u092E\u094D\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u092E\u094D\u092C\u0930", "\u0926\u093F\u0938\u092E\u094D\u092C\u0930"], 
								month_names_narrow : ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0947\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u092E\u094D\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u092E\u094D\u092C\u0930", "\u0926\u093F\u0938\u092E\u094D\u092C\u0930"], 
								ampm : ["\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928", "\u0905\u092A\u0930\u093E\u0939\u094D\u0928"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u002C\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u006E\u002F\u0025\u0065\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ne_NP;
					}
					break;
				case "nl_BE":
				case "nl_be":
					{

						if (!nexacro.Locale.nl_BE) {
							nexacro.Locale.nl_BE = {
								name : "nl_BE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u007A\u006F\u006E\u0064\u0061\u0067", "\u006D\u0061\u0061\u006E\u0064\u0061\u0067", "\u0064\u0069\u006E\u0073\u0064\u0061\u0067", "\u0077\u006F\u0065\u006E\u0073\u0064\u0061\u0067", "\u0064\u006F\u006E\u0064\u0065\u0072\u0064\u0061\u0067", "\u0076\u0072\u0069\u006A\u0064\u0061\u0067", "\u007A\u0061\u0074\u0065\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u007A\u006F", "\u006D\u0061", "\u0064\u0069", "\u0077\u006F", "\u0064\u006F", "\u0076\u0072", "\u007A\u0061"], 
								weekday_names_narrow : ["\u007A\u006F", "\u006D\u0061", "\u0064\u0069", "\u0077\u006F", "\u0064\u006F", "\u0076\u0072", "\u007A\u0061"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u006D\u0061\u0061\u0072\u0074", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0065\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074\u0075\u0073", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0072\u0074", "\u0061\u0070\u0072", "\u006D\u0065\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0072\u0074", "\u0061\u0070\u0072", "\u006D\u0065\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.nl_BE;
					}
					break;
				case "nl":
				case "nl_NL":
				case "nl_nl":
					{

						if (!nexacro.Locale.nl_NL) {
							nexacro.Locale.nl_NL = {
								name : "nl_NL", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 2, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u007A\u006F\u006E\u0064\u0061\u0067", "\u006D\u0061\u0061\u006E\u0064\u0061\u0067", "\u0064\u0069\u006E\u0073\u0064\u0061\u0067", "\u0077\u006F\u0065\u006E\u0073\u0064\u0061\u0067", "\u0064\u006F\u006E\u0064\u0065\u0072\u0064\u0061\u0067", "\u0076\u0072\u0069\u006A\u0064\u0061\u0067", "\u007A\u0061\u0074\u0065\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u007A\u006F", "\u006D\u0061", "\u0064\u0069", "\u0077\u006F", "\u0064\u006F", "\u0076\u0072", "\u007A\u0061"], 
								weekday_names_narrow : ["\u007A\u006F", "\u006D\u0061", "\u0064\u0069", "\u0077\u006F", "\u0064\u006F", "\u0076\u0072", "\u007A\u0061"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u006D\u0061\u0061\u0072\u0074", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0065\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074\u0075\u0073", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0072\u0074", "\u0061\u0070\u0072", "\u006D\u0065\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0072\u0074", "\u0061\u0070\u0072", "\u006D\u0065\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002D\u0025\u006E\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.nl_NL;
					}
					break;
				case "nn":
				case "nn_NO":
				case "nn_no":
					{

						if (!nexacro.Locale.nn_NO) {
							nexacro.Locale.nn_NO = {
								name : "nn_NO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004E\u004F\u004B\u0020", 
								currency_symbol : "\u006B\u0072", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 3, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u0075\u006E\u0064\u0061\u0067\u0020", "\u006D\u00E5\u006E\u0064\u0061\u0067\u0020", "\u0074\u0079\u0073\u0064\u0061\u0067\u0020", "\u006F\u006E\u0073\u0064\u0061\u0067\u0020", "\u0074\u006F\u0072\u0073\u0064\u0061\u0067\u0020", "\u0066\u0072\u0065\u0064\u0061\u0067\u0020", "\u006C\u0061\u0075\u0072\u0064\u0061\u0067\u0020"], 
								weekday_names_short : ["\u0073\u0075\u0020", "\u006D\u00E5\u0020", "\u0074\u0079\u0020", "\u006F\u006E\u0020", "\u0074\u006F\u0020", "\u0066\u0072\u0020", "\u006C\u0061\u0075\u0020"], 
								weekday_names_narrow : ["\u0073\u0075\u0020", "\u006D\u00E5\u0020", "\u0074\u0079\u0020", "\u006F\u006E\u0020", "\u0074\u006F\u0020", "\u0066\u0072\u0020", "\u006C\u0061\u0075\u0020"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u006B\u006C\u0020\u0025\u0048\u002E\u0025\u004D\u0020\u0025\u005A", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0064\u002E\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u006B\u006C\u0020\u0025\u0048\u002E\u0025\u004D\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u002E\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.nn_NO;
					}
					break;
				case "no":
				case "no_NO":
				case "no_no":
					{

						if (!nexacro.Locale.no_NO) {
							nexacro.Locale.no_NO = {
								name : "no_NO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004E\u004F\u004B\u0020", 
								currency_symbol : "\u006B\u0072", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u00F8\u006E\u0064\u0061\u0067", "\u006D\u0061\u006E\u0064\u0061\u0067", "\u0074\u0069\u0072\u0073\u0064\u0061\u0067", "\u006F\u006E\u0073\u0064\u0061\u0067", "\u0074\u006F\u0072\u0073\u0064\u0061\u0067", "\u0066\u0072\u0065\u0064\u0061\u0067", "\u006C\u00F8\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u0073\u00F8\u006E", "\u006D\u0061\u006E", "\u0074\u0069\u0072", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F8\u0072"], 
								weekday_names_narrow : ["\u0073\u00F8\u006E", "\u006D\u0061\u006E", "\u0074\u0069\u0072", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F8\u0072"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0073\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.no_NO;
					}
					break;
				case "nr":
				case "nr_ZA":
				case "nr_za":
					{

						if (!nexacro.Locale.nr_ZA) {
							nexacro.Locale.nr_ZA = {
								name : "nr_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0075\u0053\u006F\u006E\u0074\u006F", "\u0075\u004D\u0076\u0075\u006C\u006F", "\u0075\u004C\u0065\u0073\u0069\u0062\u0069\u006C\u0069", "\u006C\u0065\u0073\u0069\u0074\u0068\u0061\u0074\u0068\u0075", "\u0075\u004C\u0065\u0073\u0069\u006E\u0065", "\u006E\u0067\u006F\u004C\u0065\u0073\u0069\u0068\u006C\u0061\u006E\u0075", "\u0075\u006D\u0047\u0071\u0069\u0062\u0065\u006C\u006F"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u0076\u0075", "\u0042\u0069\u006C", "\u0054\u0068\u0061", "\u004E\u0065", "\u0048\u006C\u0061", "\u0047\u0071\u0069"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u0076\u0075", "\u0042\u0069\u006C", "\u0054\u0068\u0061", "\u004E\u0065", "\u0048\u006C\u0061", "\u0047\u0071\u0069"], 
								month_names_long : ["\u004A\u0061\u006E\u0061\u0062\u0061\u0072\u0069", "\u0075\u0046\u0065\u0062\u0065\u0072\u0062\u0061\u0072\u0069", "\u0075\u004D\u0061\u0074\u006A\u0068\u0069", "\u0075\u002D\u0041\u0070\u0072\u0065\u006C\u0069", "\u004D\u0065\u0079\u0069", "\u004A\u0075\u006E\u0069", "\u004A\u0075\u006C\u0061\u0079\u0069", "\u0041\u0072\u0068\u006F\u0073\u0074\u006F\u0073\u0069", "\u0053\u0065\u0070\u0074\u0065\u006D\u0062\u0061", "\u004F\u006B\u0074\u006F\u0062\u0061", "\u0055\u0073\u0069\u006E\u0079\u0069\u006B\u0068\u0061\u0062\u0061", "\u0044\u0069\u0073\u0065\u006D\u0062\u0061"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0074", "\u0041\u0070\u0072", "\u004D\u0065\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0072\u0068", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u0055\u0073\u0069", "\u0044\u0069\u0073"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0062", "\u004D\u0061\u0074", "\u0041\u0070\u0072", "\u004D\u0065\u0079", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0072\u0068", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u0055\u0073\u0069", "\u0044\u0069\u0073"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u002D\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.nr_ZA;
					}
					break;
				case "oc":
				case "oc_FR":
				case "oc_fr":
					{

						if (!nexacro.Locale.oc_FR) {
							nexacro.Locale.oc_FR = {
								name : "oc_FR", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u006D\u0065\u006E\u0067\u0065", "\u0064\u0069\u006C\u0075\u006E\u0073", "\u0064\u0069\u006D\u0061\u0072\u0073", "\u0064\u0069\u006D\u0065\u0063\u0072\u0065\u0073", "\u0064\u0069\u006A\u00F3\u0075\u0073", "\u0064\u0069\u0076\u0065\u006E\u0064\u0072\u0065\u0073", "\u0064\u0069\u0073\u0061\u0062\u0074\u0065"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0063", "\u006A\u00F3\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u0062"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u0075\u006E", "\u006D\u0061\u0072", "\u006D\u0065\u0063", "\u006A\u00F3\u0075", "\u0076\u0065\u006E", "\u0073\u0061\u0062"], 
								month_names_long : ["\u0067\u0065\u006E\u0069\u00E8\u0072", "\u0066\u0065\u0062\u0072\u0069\u00E8\u0072", "\u006D\u0061\u0072\u00E7", "\u0061\u0062\u0072\u0069\u0061\u006C", "\u006D\u0061\u0069", "\u006A\u0075\u006E\u0068", "\u006A\u0075\u006C\u0068\u0065\u0074", "\u0061\u0067\u00F3\u0073\u0074", "\u0073\u0065\u0074\u0065\u006D\u0062\u0072\u0065", "\u006F\u0063\u0074\u006F\u0062\u0072\u0065", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u0065", "\u0064\u0065\u0063\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u00F3", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u0067\u0065\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0062\u0072", "\u006D\u0061\u0069", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0067\u00F3", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.oc_FR;
					}
					break;
				case "om":
				case "om_ET":
				case "om_et":
					{

						if (!nexacro.Locale.om_ET) {
							nexacro.Locale.om_ET = {
								name : "om_ET", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0054\u0042\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0044\u0069\u006C\u0062\u0061\u0074\u0061", "\u0057\u0069\u0069\u0078\u0061\u0074\u0061", "\u0051\u0069\u0062\u0078\u0061\u0074\u0061", "\u0052\u006F\u006F\u0062\u0069\u0069", "\u004B\u0061\u006D\u0069\u0069\u0073\u0061", "\u004A\u0069\u006D\u0061\u0061\u0074\u0061", "\u0053\u0061\u006E\u0062\u0061\u0074\u0061"], 
								weekday_names_short : ["\u0044\u0069\u006C", "\u0057\u0069\u0078", "\u0051\u0069\u0062", "\u0052\u006F\u0062", "\u004B\u0061\u006D", "\u004A\u0069\u006D", "\u0053\u0061\u006E"], 
								weekday_names_narrow : ["\u0044\u0069\u006C", "\u0057\u0069\u0078", "\u0051\u0069\u0062", "\u0052\u006F\u0062", "\u004B\u0061\u006D", "\u004A\u0069\u006D", "\u0053\u0061\u006E"], 
								month_names_long : ["\u0041\u006D\u0061\u006A\u006A\u0069\u0069", "\u0047\u0075\u0072\u0061\u0061\u006E\u0064\u0068\u0061\u006C\u0061", "\u0042\u0069\u0074\u006F\u006F\u0074\u0065\u0065\u0073\u0073\u0061", "\u0045\u006C\u0062\u0061", "\u0043\u0061\u0061\u006D\u0073\u0061", "\u0057\u0061\u0078\u0061\u0062\u0061\u006A\u006A\u0069\u0069", "\u0041\u0064\u006F\u006F\u006C\u0065\u0065\u0073\u0073\u0061", "\u0048\u0061\u0067\u0061\u0079\u0079\u0061", "\u0046\u0075\u0075\u006C\u0062\u0061\u006E\u0061", "\u004F\u006E\u006B\u006F\u006C\u006F\u006C\u0065\u0065\u0073\u0073\u0061", "\u0053\u0061\u0064\u0061\u0061\u0073\u0061", "\u004D\u0075\u0064\u0064\u0065\u0065"], 
								month_names_short : ["\u0041\u006D\u0061", "\u0047\u0075\u0072", "\u0042\u0069\u0074", "\u0045\u006C\u0062", "\u0043\u0061\u006D", "\u0057\u0061\u0078", "\u0041\u0064\u006F", "\u0048\u0061\u0067", "\u0046\u0075\u006C", "\u004F\u006E\u006B", "\u0053\u0061\u0064", "\u004D\u0075\u0064"], 
								month_names_narrow : ["\u0041\u006D\u0061", "\u0047\u0075\u0072", "\u0042\u0069\u0074", "\u0045\u006C\u0062", "\u0043\u0061\u006D", "\u0057\u0061\u0078", "\u0041\u0064\u006F", "\u0048\u0061\u0067", "\u0046\u0075\u006C", "\u004F\u006E\u006B", "\u0053\u0061\u0064", "\u004D\u0075\u0064"], 
								ampm : ["\u0057\u0044", "\u0057\u0042"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.om_ET;
					}
					break;
				case "om_KE":
				case "om_ke":
					{

						if (!nexacro.Locale.om_KE) {
							nexacro.Locale.om_KE = {
								name : "om_KE", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004B\u0045\u0053\u0020", 
								currency_symbol : "\u004B\u0073\u0068", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0044\u0069\u006C\u0062\u0061\u0074\u0061", "\u0057\u0069\u0069\u0078\u0061\u0074\u0061", "\u0051\u0069\u0062\u0078\u0061\u0074\u0061", "\u0052\u006F\u006F\u0062\u0069\u0069", "\u004B\u0061\u006D\u0069\u0069\u0073\u0061", "\u004A\u0069\u006D\u0061\u0061\u0074\u0061", "\u0053\u0061\u006E\u0062\u0061\u0074\u0061"], 
								weekday_names_short : ["\u0044\u0069\u006C", "\u0057\u0069\u0078", "\u0051\u0069\u0062", "\u0052\u006F\u0062", "\u004B\u0061\u006D", "\u004A\u0069\u006D", "\u0053\u0061\u006E"], 
								weekday_names_narrow : ["\u0044\u0069\u006C", "\u0057\u0069\u0078", "\u0051\u0069\u0062", "\u0052\u006F\u0062", "\u004B\u0061\u006D", "\u004A\u0069\u006D", "\u0053\u0061\u006E"], 
								month_names_long : ["\u0041\u006D\u0061\u006A\u006A\u0069\u0069", "\u0047\u0075\u0072\u0061\u0061\u006E\u0064\u0068\u0061\u006C\u0061", "\u0042\u0069\u0074\u006F\u006F\u0074\u0065\u0065\u0073\u0073\u0061", "\u0045\u006C\u0062\u0061", "\u0043\u0061\u0061\u006D\u0073\u0061", "\u0057\u0061\u0078\u0061\u0062\u0061\u006A\u006A\u0069\u0069", "\u0041\u0064\u006F\u006F\u006C\u0065\u0065\u0073\u0073\u0061", "\u0048\u0061\u0067\u0061\u0079\u0079\u0061", "\u0046\u0075\u0075\u006C\u0062\u0061\u006E\u0061", "\u004F\u006E\u006B\u006F\u006C\u006F\u006C\u0065\u0065\u0073\u0073\u0061", "\u0053\u0061\u0064\u0061\u0061\u0073\u0061", "\u004D\u0075\u0064\u0064\u0065\u0065"], 
								month_names_short : ["\u0041\u006D\u0061", "\u0047\u0075\u0072", "\u0042\u0069\u0074", "\u0045\u006C\u0062", "\u0043\u0061\u006D", "\u0057\u0061\u0078", "\u0041\u0064\u006F", "\u0048\u0061\u0067", "\u0046\u0075\u006C", "\u004F\u006E\u006B", "\u0053\u0061\u0064", "\u004D\u0075\u0064"], 
								month_names_narrow : ["\u0041\u006D\u0061", "\u0047\u0075\u0072", "\u0042\u0069\u0074", "\u0045\u006C\u0062", "\u0043\u0061\u006D", "\u0057\u0061\u0078", "\u0041\u0064\u006F", "\u0048\u0061\u0067", "\u0046\u0075\u006C", "\u004F\u006E\u006B", "\u0053\u0061\u0064", "\u004D\u0075\u0064"], 
								ampm : ["\u0057\u0044", "\u0057\u0042"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.om_KE;
					}
					break;
				case "or":
				case "or_IN":
				case "or_in":
					{

						if (!nexacro.Locale.or_IN) {
							nexacro.Locale.or_IN = {
								name : "or_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0B1F", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0B30\u0B2C\u0B3F\u0B2C\u0B3E\u0B30", "\u0B38\u0B4B\u0B2E\u0B2C\u0B3E\u0B30", "\u0B2E\u0B19\u0B4D\u0B17\u0B33\u0B2C\u0B3E\u0B30", "\u0B2C\u0B41\u0B27\u0B2C\u0B3E\u0B30", "\u0B17\u0B41\u0B30\u0B41\u0B2C\u0B3E\u0B30", "\u0B36\u0B41\u0B15\u0B4D\u0B30\u0B2C\u0B3E\u0B30", "\u0B36\u0B28\u0B3F\u0B2C\u0B3E\u0B30"], 
								weekday_names_short : ["\u0B30\u0B2C\u0B3F", "\u0B38\u0B4B\u0B2E", "\u0B2E\u0B19\u0B4D\u0B17\u0B33", "\u0B2C\u0B41\u0B27", "\u0B17\u0B41\u0B30\u0B41", "\u0B36\u0B41\u0B15\u0B4D\u0B30", "\u0B36\u0B28\u0B3F"], 
								weekday_names_narrow : ["\u0B30\u0B2C\u0B3F", "\u0B38\u0B4B\u0B2E", "\u0B2E\u0B19\u0B4D\u0B17\u0B33", "\u0B2C\u0B41\u0B27", "\u0B17\u0B41\u0B30\u0B41", "\u0B36\u0B41\u0B15\u0B4D\u0B30", "\u0B36\u0B28\u0B3F"], 
								month_names_long : ["\u0B1C\u0B3E\u0B28\u0B41\u0B06\u0B30\u0B40", "\u0B2B\u0B47\u0B2C\u0B43\u0B06\u0B30\u0B40", "\u0B2E\u0B3E\u0B30\u0B4D\u0B1A\u0B4D\u0B1A", "\u0B05\u0B2A\u0B4D\u0B30\u0B47\u0B32", "\u0B2E\u0B07", "\u0B1C\u0B41\u0B28", "\u0B1C\u0B41\u0B32\u0B3E\u0B07", "\u0B05\u0B17\u0B37\u0B4D\u0B1F", "\u0B38\u0B47\u0B2A\u0B4D\u0B1F\u0B47\u0B2E\u0B4D\u0B2C\u0B30", "\u0B05\u0B15\u0B4D\u0B1F\u0B4B\u0B2C\u0B30", "\u0B28\u0B2D\u0B47\u0B2E\u0B4D\u0B2C\u0B30", "\u0B21\u0B3F\u0B38\u0B47\u0B2E\u0B4D\u0B2C\u0B30"], 
								month_names_short : ["\u0031", "\u0033", "\u0034", "\u0035", "\u0036", "\u0037", "\u0038", "\u0039", "\u0031\u0030", "\u0031\u0030", "\u0031\u0031", "\u0031\u0032"], 
								month_names_narrow : ["\u0031", "\u0033", "\u0034", "\u0035", "\u0036", "\u0037", "\u0038", "\u0039", "\u0031\u0030", "\u0031\u0030", "\u0031\u0031", "\u0031\u0032"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u004F\u0064\u002D\u0025\u004F\u006D\u002D\u0025\u004F\u0079", 
								time_format : "\u0025\u004F\u0049\u003A\u0025\u004F\u004D\u003A\u0025\u004F\u0053\u0020\u0025\u0070", 
								time_format_ampm : "\u0025\u004F\u0049\u003A\u0025\u004F\u004D\u003A\u0025\u004F\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u004F\u0065\u0020\u0025\u0042\u0020\u0025\u004F\u0079\u0020\u0025\u004F\u0049\u003A\u0025\u004F\u004D\u003A\u0025\u004F\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.or_IN;
					}
					break;
				case "pa":
				case "pa_IN":
				case "pa_in":
					{

						if (!nexacro.Locale.pa_IN) {
							nexacro.Locale.pa_IN = {
								name : "pa_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0A30\u0A41", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0A10\u0A24\u0A35\u0A3E\u0A30\u0020", "\u0A38\u0A4B\u0A2E\u0A35\u0A3E\u0A30\u0020", "\u0A2E\u0A70\u0A17\u0A32\u0A35\u0A3E\u0A30\u0020", "\u0A2C\u0A41\u0A71\u0A27\u0A35\u0A3E\u0A30\u0020", "\u0A35\u0A40\u0A30\u0A35\u0A3E\u0A30\u0020", "\u0A36\u0A41\u0A71\u0A15\u0A30\u0A35\u0A3E\u0A30\u0020", "\u0A36\u0A28\u0A3F\u0A71\u0A1A\u0A30\u0A35\u0A3E\u0A30\u0020"], 
								weekday_names_short : ["\u0A10\u0A24\u0020", "\u0A38\u0A4B\u0A2E\u0020", "\u0A2E\u0A70\u0A17\u0A32\u0020", "\u0A2C\u0A41\u0A71\u0A27\u0020", "\u0A35\u0A40\u0A30\u0020", "\u0A36\u0A41\u0A71\u0A15\u0A30\u0020", "\u0A36\u0A28\u0A3F\u0A71\u0A1A\u0A30\u0020"], 
								weekday_names_narrow : ["\u0A10\u0A24\u0020", "\u0A38\u0A4B\u0A2E\u0020", "\u0A2E\u0A70\u0A17\u0A32\u0020", "\u0A2C\u0A41\u0A71\u0A27\u0020", "\u0A35\u0A40\u0A30\u0020", "\u0A36\u0A41\u0A71\u0A15\u0A30\u0020", "\u0A36\u0A28\u0A3F\u0A71\u0A1A\u0A30\u0020"], 
								month_names_long : ["\u0A1C\u0A28\u0A35\u0A30\u0A40", "\u0A5E\u0A30\u0A35\u0A30\u0A40", "\u0A2E\u0A3E\u0A30\u0A1A", "\u0A05\u0A2A\u0A30\u0A48\u0A32", "\u0A2E\u0A08", "\u0A1C\u0A42\u0A28", "\u0A1C\u0A41\u0A32\u0A3E\u0A08", "\u0A05\u0A17\u0A38\u0A24", "\u0A38\u0A24\u0A70\u0A2C\u0A30", "\u0A05\u0A15\u0A24\u0A42\u0A2C\u0A30", "\u0A28\u0A35\u0A70\u0A2C\u0A30", "\u0A26\u0A38\u0A70\u0A2C\u0A30"], 
								month_names_short : ["\u0A1C\u0A28\u0A35\u0A30\u0A40", "\u0A5E\u0A30\u0A35\u0A30\u0A40", "\u0A2E\u0A3E\u0A30\u0A1A", "\u0A05\u0A2A\u0A30\u0A48\u0A32", "\u0A2E\u0A08", "\u0A1C\u0A42\u0A28", "\u0A1C\u0A41\u0A32\u0A3E\u0A08", "\u0A05\u0A17\u0A38\u0A24", "\u0A38\u0A24\u0A70\u0A2C\u0A30", "\u0A05\u0A15\u0A24\u0A42\u0A2C\u0A30", "\u0A28\u0A35\u0A70\u0A2C\u0A30", "\u0A26\u0A38\u0A70\u0A2C\u0A30"], 
								month_names_narrow : ["\u0A1C\u0A28\u0A35\u0A30\u0A40", "\u0A5E\u0A30\u0A35\u0A30\u0A40", "\u0A2E\u0A3E\u0A30\u0A1A", "\u0A05\u0A2A\u0A30\u0A48\u0A32", "\u0A2E\u0A08", "\u0A1C\u0A42\u0A28", "\u0A1C\u0A41\u0A32\u0A3E\u0A08", "\u0A05\u0A17\u0A38\u0A24", "\u0A38\u0A24\u0A70\u0A2C\u0A30", "\u0A05\u0A15\u0A24\u0A42\u0A2C\u0A30", "\u0A28\u0A35\u0A70\u0A2C\u0A30", "\u0A26\u0A38\u0A70\u0A2C\u0A30"], 
								ampm : ["\u0A38\u0A35\u0A47\u0A30\u0A47", "\u0A36\u0A3E\u0A2E"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0041", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.pa_IN;
					}
					break;
				case "pa_PK":
				case "pa_pk":
					{

						if (!nexacro.Locale.pa_PK) {
							nexacro.Locale.pa_PK = {
								name : "pa_PK", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0050\u004B\u0052\u0020", 
								currency_symbol : "\u0052\u0073", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 2, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u064A\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u0647", "\u0647\u0641\u062A\u0647"], 
								weekday_names_short : ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u064A\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u0647", "\u0647\u0641\u062A\u0647"], 
								weekday_names_narrow : ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u064A\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u0647", "\u0647\u0641\u062A\u0647"], 
								month_names_long : ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0653\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u064A", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0653\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u064A", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], 
								month_names_narrow : ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0653\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u064A", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], 
								ampm : ["\u0635", "\u0634"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0050\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0648\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u062A\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.pa_PK;
					}
					break;
				case "pl":
				case "pl_PL":
				case "pl_pl":
					{

						if (!nexacro.Locale.pl_PL) {
							nexacro.Locale.pl_PL = {
								name : "pl_PL", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0050\u004C\u004E\u0020", 
								currency_symbol : "\u007A\u0142", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u006E\u0069\u0065\u0064\u007A\u0069\u0065\u006C\u0061", "\u0070\u006F\u006E\u0069\u0065\u0064\u007A\u0069\u0061\u0142\u0065\u006B", "\u0077\u0074\u006F\u0072\u0065\u006B", "\u015B\u0072\u006F\u0064\u0061", "\u0063\u007A\u0077\u0061\u0072\u0074\u0065\u006B", "\u0070\u0069\u0105\u0074\u0065\u006B", "\u0073\u006F\u0062\u006F\u0074\u0061"], 
								weekday_names_short : ["\u006E\u0069\u0065", "\u0070\u006F\u006E", "\u0077\u0074\u006F", "\u015B\u0072\u006F", "\u0063\u007A\u0077", "\u0070\u0069\u0105", "\u0073\u006F\u0062"], 
								weekday_names_narrow : ["\u006E\u0069\u0065", "\u0070\u006F\u006E", "\u0077\u0074\u006F", "\u015B\u0072\u006F", "\u0063\u007A\u0077", "\u0070\u0069\u0105", "\u0073\u006F\u0062"], 
								month_names_long : ["\u0073\u0074\u0079\u0063\u007A\u0065\u0144", "\u006C\u0075\u0074\u0079", "\u006D\u0061\u0072\u007A\u0065\u0063", "\u006B\u0077\u0069\u0065\u0063\u0069\u0065\u0144", "\u006D\u0061\u006A", "\u0063\u007A\u0065\u0072\u0077\u0069\u0065\u0063", "\u006C\u0069\u0070\u0069\u0065\u0063", "\u0073\u0069\u0065\u0072\u0070\u0069\u0065\u0144", "\u0077\u0072\u007A\u0065\u0073\u0069\u0065\u0144", "\u0070\u0061\u017A\u0064\u007A\u0069\u0065\u0072\u006E\u0069\u006B", "\u006C\u0069\u0073\u0074\u006F\u0070\u0061\u0064", "\u0067\u0072\u0075\u0064\u007A\u0069\u0065\u0144"], 
								month_names_short : ["\u0073\u0074\u0079", "\u006C\u0075\u0074", "\u006D\u0061\u0072", "\u006B\u0077\u0069", "\u006D\u0061\u006A", "\u0063\u007A\u0065", "\u006C\u0069\u0070", "\u0073\u0069\u0065", "\u0077\u0072\u007A", "\u0070\u0061\u017A", "\u006C\u0069\u0073", "\u0067\u0072\u0075"], 
								month_names_narrow : ["\u0073\u0074\u0079", "\u006C\u0075\u0074", "\u006D\u0061\u0072", "\u006B\u0077\u0069", "\u006D\u0061\u006A", "\u0063\u007A\u0065", "\u006C\u0069\u0070", "\u0073\u0069\u0065", "\u0077\u0072\u007A", "\u0070\u0061\u017A", "\u006C\u0069\u0073", "\u0067\u0072\u0075"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.pl_PL;
					}
					break;
				case "pt_BR":
				case "pt_br":
					{

						if (!nexacro.Locale.pt_BR) {
							nexacro.Locale.pt_BR = {
								name : "pt_BR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0042\u0052\u004C\u0020", 
								currency_symbol : "\u0052\u0024", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u0073\u0065\u0067\u0075\u006E\u0064\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0074\u0065\u0072\u00E7\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0071\u0075\u0061\u0072\u0074\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0071\u0075\u0069\u006E\u0074\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0073\u0065\u0078\u0074\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0044\u006F\u006D", "\u0053\u0065\u0067", "\u0054\u0065\u0072", "\u0051\u0075\u0061", "\u0051\u0075\u0069", "\u0053\u0065\u0078", "\u0053\u00E1\u0062"], 
								weekday_names_narrow : ["\u0044\u006F\u006D", "\u0053\u0065\u0067", "\u0054\u0065\u0072", "\u0051\u0075\u0061", "\u0051\u0075\u0069", "\u0053\u0065\u0078", "\u0053\u00E1\u0062"], 
								month_names_long : ["\u006A\u0061\u006E\u0065\u0069\u0072\u006F", "\u0066\u0065\u0076\u0065\u0072\u0065\u0069\u0072\u006F", "\u006D\u0061\u0072\u00E7\u006F", "\u0061\u0062\u0072\u0069\u006C", "\u006D\u0061\u0069\u006F", "\u006A\u0075\u006E\u0068\u006F", "\u006A\u0075\u006C\u0068\u006F", "\u0061\u0067\u006F\u0073\u0074\u006F", "\u0073\u0065\u0074\u0065\u006D\u0062\u0072\u006F", "\u006F\u0075\u0074\u0075\u0062\u0072\u006F", "\u006E\u006F\u0076\u0065\u006D\u0062\u0072\u006F", "\u0064\u0065\u007A\u0065\u006D\u0062\u0072\u006F"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0074", "\u004F\u0075\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0074", "\u004F\u0075\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.pt_BR;
					}
					break;
				case "pt":
				case "pt_PT":
				case "pt_pt":
					{

						if (!nexacro.Locale.pt_PT) {
							nexacro.Locale.pt_PT = {
								name : "pt_PT", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u006F\u006D\u0069\u006E\u0067\u006F", "\u0073\u0065\u0067\u0075\u006E\u0064\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0074\u0065\u0072\u00E7\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0071\u0075\u0061\u0072\u0074\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0071\u0075\u0069\u006E\u0074\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0073\u0065\u0078\u0074\u0061\u002D\u0066\u0065\u0069\u0072\u0061", "\u0073\u00E1\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u0044\u006F\u006D", "\u0053\u0065\u0067", "\u0054\u0065\u0072", "\u0051\u0075\u0061", "\u0051\u0075\u0069", "\u0053\u0065\u0078", "\u0053\u00E1\u0062"], 
								weekday_names_narrow : ["\u0044\u006F\u006D", "\u0053\u0065\u0067", "\u0054\u0065\u0072", "\u0051\u0075\u0061", "\u0051\u0075\u0069", "\u0053\u0065\u0078", "\u0053\u00E1\u0062"], 
								month_names_long : ["\u004A\u0061\u006E\u0065\u0069\u0072\u006F", "\u0046\u0065\u0076\u0065\u0072\u0065\u0069\u0072\u006F", "\u004D\u0061\u0072\u00E7\u006F", "\u0041\u0062\u0072\u0069\u006C", "\u004D\u0061\u0069\u006F", "\u004A\u0075\u006E\u0068\u006F", "\u004A\u0075\u006C\u0068\u006F", "\u0041\u0067\u006F\u0073\u0074\u006F", "\u0053\u0065\u0074\u0065\u006D\u0062\u0072\u006F", "\u004F\u0075\u0074\u0075\u0062\u0072\u006F", "\u004E\u006F\u0076\u0065\u006D\u0062\u0072\u006F", "\u0044\u0065\u007A\u0065\u006D\u0062\u0072\u006F"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0074", "\u004F\u0075\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0069", "\u004A\u0075\u006E", "\u004A\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0074", "\u004F\u0075\u0074", "\u004E\u006F\u0076", "\u0044\u0065\u007A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0041\u002C\u0020\u0025\u0065\u0020\u0064\u0065\u0020\u0025\u0042\u0020\u0064\u0065\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.pt_PT;
					}
					break;
				case "ro":
				case "ro_RO":
				case "ro_ro":
					{

						if (!nexacro.Locale.ro_RO) {
							nexacro.Locale.ro_RO = {
								name : "ro_RO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0052\u004F\u004E\u0020", 
								currency_symbol : "\u006C\u0065\u0069", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0075\u006D\u0069\u006E\u0069\u0063\u0103", "\u006C\u0075\u006E\u0069", "\u006D\u0061\u0072\u0163\u0069", "\u006D\u0069\u0065\u0072\u0063\u0075\u0072\u0069", "\u006A\u006F\u0069", "\u0076\u0069\u006E\u0065\u0072\u0069", "\u0073\u00E2\u006D\u0062\u0103\u0074\u0103"], 
								weekday_names_short : ["\u0044\u0075", "\u004C\u0075", "\u004D\u0061", "\u004D\u0069", "\u004A\u006F", "\u0056\u0069", "\u0053\u0062"], 
								weekday_names_narrow : ["\u0044\u0075", "\u004C\u0075", "\u004D\u0061", "\u004D\u0069", "\u004A\u006F", "\u0056\u0069", "\u0053\u0062"], 
								month_names_long : ["\u0069\u0061\u006E\u0075\u0061\u0072\u0069\u0065", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0069\u0065", "\u006D\u0061\u0072\u0074\u0069\u0065", "\u0061\u0070\u0072\u0069\u006C\u0069\u0065", "\u006D\u0061\u0069", "\u0069\u0075\u006E\u0069\u0065", "\u0069\u0075\u006C\u0069\u0065", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0072\u0069\u0065", "\u006F\u0063\u0074\u006F\u006D\u0062\u0072\u0069\u0065", "\u006E\u006F\u0069\u0065\u006D\u0062\u0072\u0069\u0065", "\u0064\u0065\u0063\u0065\u006D\u0062\u0072\u0069\u0065"], 
								month_names_short : ["\u0069\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u0069\u0075\u006E", "\u0069\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u0069\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u0069", "\u0069\u0075\u006E", "\u0069\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u0063\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u007A", 
								full_date_time_format : "\u0025\u0041\u0020\u0025\u002D\u0065\u0020\u0025\u0042\u0020\u0025\u0059\u002C\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u007A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ro_RO;
					}
					break;
				case "ru":
				case "ru_RU":
				case "ru_ru":
					{

						if (!nexacro.Locale.ru_RU) {
							nexacro.Locale.ru_RU = {
								name : "ru_RU", 
								decimal_point : "\u002C", 
								thousands_sep : "\u2002", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0052\u0055\u0042\u0020", 
								currency_symbol : "\u0440\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u2002", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 0, 
								n_cs_precedes : 0, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0412\u0442\u043E\u0440\u043D\u0438\u043A", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u0412\u0441\u043A", "\u041F\u043D\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0431\u0442"], 
								weekday_names_narrow : ["\u0412\u0441\u043A", "\u041F\u043D\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0431\u0442"], 
								month_names_long : ["\u042F\u043D\u0432\u0430\u0440\u044C", "\u0424\u0435\u0432\u0440\u0430\u043B\u044C", "\u041C\u0430\u0440\u0442", "\u0410\u043F\u0440\u0435\u043B\u044C", "\u041C\u0430\u0439", "\u0418\u044E\u043D\u044C", "\u0418\u044E\u043B\u044C", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C", "\u041E\u043A\u0442\u044F\u0431\u0440\u044C", "\u041D\u043E\u044F\u0431\u0440\u044C", "\u0414\u0435\u043A\u0430\u0431\u0440\u044C"], 
								month_names_short : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								month_names_narrow : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0041\u0020\u0433\u002E", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ru_RU;
					}
					break;
				case "ru_UA":
				case "ru_ua":
					{

						if (!nexacro.Locale.ru_UA) {
							nexacro.Locale.ru_UA = {
								name : "ru_UA", 
								decimal_point : "\u002C", 
								thousands_sep : "\u2002", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u0041\u0048\u0020", 
								currency_symbol : "\u0433\u0440", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0412\u0442\u043E\u0440\u043D\u0438\u043A", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u0412\u0441\u043A", "\u041F\u043D\u0434", "\u0412\u0442\u043E", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0443\u0431"], 
								weekday_names_narrow : ["\u0412\u0441\u043A", "\u041F\u043D\u0434", "\u0412\u0442\u043E", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0443\u0431"], 
								month_names_long : ["\u042F\u043D\u0432\u0430\u0440\u044C", "\u0424\u0435\u0432\u0440\u0430\u043B\u044C", "\u041C\u0430\u0440\u0442", "\u0410\u043F\u0440\u0435\u043B\u044C", "\u041C\u0430\u0439", "\u0418\u044E\u043D\u044C", "\u0418\u044E\u043B\u044C", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C", "\u041E\u043A\u0442\u044F\u0431\u0440\u044C", "\u041D\u043E\u044F\u0431\u0440\u044C", "\u0414\u0435\u043A\u0430\u0431\u0440\u044C"], 
								month_names_short : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								month_names_narrow : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ru_UA;
					}
					break;
				case "rw":
				case "rw_RW":
				case "rw_rw":
					{

						if (!nexacro.Locale.rw_RW) {
							nexacro.Locale.rw_RW = {
								name : "rw_RW", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [3], 
								int_curr_symbol : "\u0052\u0057\u0046\u0020", 
								currency_symbol : "\u0046\u0072\u0077", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004B\u0075\u0020\u0063\u0079\u0075\u006D\u0077\u0065\u0072\u0075", "\u004B\u0075\u0077\u0061\u0020\u006D\u0062\u0065\u0072\u0065", "\u004B\u0075\u0077\u0061\u0020\u006B\u0061\u0062\u0069\u0072\u0069", "\u004B\u0075\u0077\u0061\u0020\u0067\u0061\u0074\u0061\u0074\u0075", "\u004B\u0075\u0077\u0061\u0020\u006B\u0061\u006E\u0065", "\u004B\u0075\u0077\u0061\u0020\u0067\u0061\u0074\u0061\u006E\u0075", "\u004B\u0075\u0077\u0061\u0020\u0067\u0061\u0074\u0061\u006E\u0064\u0061\u0074\u0075"], 
								weekday_names_short : ["\u004D\u0077\u0065", "\u004D\u0062\u0065", "\u004B\u0061\u0062", "\u0047\u0074\u0075", "\u004B\u0061\u006E", "\u0047\u006E\u0075", "\u0047\u006E\u0064"], 
								weekday_names_narrow : ["\u004D\u0077\u0065", "\u004D\u0062\u0065", "\u004B\u0061\u0062", "\u0047\u0074\u0075", "\u004B\u0061\u006E", "\u0047\u006E\u0075", "\u0047\u006E\u0064"], 
								month_names_long : ["\u004D\u0075\u0074\u0061\u0072\u0061\u006D\u0061", "\u0047\u0061\u0073\u0068\u0079\u0061\u006E\u0074\u0061\u0072\u0065", "\u0057\u0065\u0072\u0075\u0072\u0077\u0065", "\u004D\u0061\u0074\u0061", "\u0047\u0069\u0063\u0075\u0072\u0061\u006E\u0073\u0069", "\u004B\u0061\u006D\u0065\u006E\u0061", "\u004E\u0079\u0061\u006B\u0061\u006E\u0067\u0061", "\u004B\u0061\u006E\u0061\u006D\u0061", "\u004E\u007A\u0065\u006C\u0069", "\u0055\u006B\u0077\u0061\u006B\u0069\u0072\u0061", "\u0055\u0067\u0075\u0073\u0068\u0079\u0069\u006E\u0067\u006F", "\u0055\u006B\u0075\u0062\u006F\u007A\u0061"], 
								month_names_short : ["\u004D\u0075\u0074", "\u0047\u0061\u0073", "\u0057\u0065\u0072", "\u004D\u0061\u0074", "\u0047\u0069\u0063", "\u004B\u0061\u006D", "\u004E\u0079\u0061", "\u004B\u0061\u006E", "\u004E\u007A\u0065", "\u0055\u006B\u0077", "\u0055\u0067\u0075", "\u0055\u006B\u0075"], 
								month_names_narrow : ["\u004D\u0075\u0074", "\u0047\u0061\u0073", "\u0057\u0065\u0072", "\u004D\u0061\u0074", "\u0047\u0069\u0063", "\u004B\u0061\u006D", "\u004E\u0079\u0061", "\u004B\u0061\u006E", "\u004E\u007A\u0065", "\u0055\u006B\u0077", "\u0055\u0067\u0075", "\u0055\u006B\u0075"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.rw_RW;
					}
					break;
				case "se":
				case "se_NO":
				case "se_no":
					{

						if (!nexacro.Locale.se_NO) {
							nexacro.Locale.se_NO = {
								name : "se_NO", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u004E\u004F\u004B\u0020", 
								currency_symbol : "\u0020\u0072\u0075", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u0073\u006F\u0074\u006E\u0061\u0062\u0065\u0061\u0069\u0076\u0069", "\u0076\u0075\u006F\u0073\u0073\u00E1\u0072\u0067\u0061", "\u006D\u0061\u014B\u014B\u0065\u0062\u0061\u0072\u0067\u0061", "\u0067\u0061\u0073\u006B\u0061\u0076\u0061\u0068\u006B\u006B\u0075", "\u0064\u0075\u006F\u0072\u0061\u0073\u0064\u0061\u0074", "\u0062\u0065\u0061\u0072\u006A\u0061\u0064\u0061\u0074", "\u006C\u00E1\u0076\u0076\u0061\u0072\u0064\u0061\u0074"], 
								weekday_names_short : ["\u0073\u006F\u0074\u006E", "\u0076\u0075\u006F\u0073", "\u006D\u0061\u014B", "\u0067\u0061\u0073\u006B", "\u0064\u0075\u006F\u0072", "\u0062\u0065\u0061\u0072", "\u006C\u00E1\u0076"], 
								weekday_names_narrow : ["\u0073\u006F\u0074\u006E", "\u0076\u0075\u006F\u0073", "\u006D\u0061\u014B", "\u0067\u0061\u0073\u006B", "\u0064\u0075\u006F\u0072", "\u0062\u0065\u0061\u0072", "\u006C\u00E1\u0076"], 
								month_names_long : ["\u006F\u0111\u0111\u0061\u006A\u0061\u0067\u0065\u006D\u00E1\u006E\u0075", "\u0067\u0075\u006F\u0076\u0076\u0061\u006D\u00E1\u006E\u0075", "\u006E\u006A\u0075\u006B\u010D\u0061\u006D\u00E1\u006E\u0075", "\u0063\u0075\u006F\u014B\u006F\u006D\u00E1\u006E\u0075", "\u006D\u0069\u0065\u0073\u0073\u0065\u006D\u00E1\u006E\u0075", "\u0067\u0065\u0061\u0073\u0073\u0065\u006D\u00E1\u006E\u0075", "\u0073\u0075\u006F\u0069\u0064\u006E\u0065\u006D\u00E1\u006E\u0075", "\u0062\u006F\u0072\u0067\u0065\u006D\u00E1\u006E\u0075", "\u010D\u0061\u006B\u010D\u0061\u006D\u00E1\u006E\u0075", "\u0067\u006F\u006C\u0067\u0067\u006F\u0074\u006D\u00E1\u006E\u0075", "\u0073\u006B\u00E1\u0062\u006D\u0061\u006D\u00E1\u006E\u0075", "\u006A\u0075\u006F\u0076\u006C\u0061\u006D\u00E1\u006E\u0075"], 
								month_names_short : ["\u006F\u0111\u0111\u006A", "\u0067\u0075\u006F\u0076", "\u006E\u006A\u0075\u006B", "\u0063\u0075\u006F\u014B", "\u006D\u0069\u0065\u0073", "\u0067\u0065\u0061\u0073", "\u0073\u0075\u006F\u0069", "\u0062\u006F\u0072\u0067", "\u010D\u0061\u006B\u010D", "\u0067\u006F\u006C\u0067", "\u0073\u006B\u00E1\u0062", "\u006A\u0075\u006F\u0076"], 
								month_names_narrow : ["\u006F\u0111\u0111\u006A", "\u0067\u0075\u006F\u0076", "\u006E\u006A\u0075\u006B", "\u0063\u0075\u006F\u014B", "\u006D\u0069\u0065\u0073", "\u0067\u0065\u0061\u0073", "\u0073\u0075\u006F\u0069", "\u0062\u006F\u0072\u0067", "\u010D\u0061\u006B\u010D", "\u0067\u006F\u006C\u0067", "\u0073\u006B\u00E1\u0062", "\u006A\u0075\u006F\u0076"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u002C\u0020\u0025\u0062\u0020\u0025\u0065\u002E\u0020\u0062\u002E\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0064\u002E\u0020\u0062\u002E\u0020\u0025\u0059\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.se_NO;
					}
					break;
				case "si":
				case "si_LK":
				case "si_lk":
					{

						if (!nexacro.Locale.si_LK) {
							nexacro.Locale.si_LK = {
								name : "si_LK", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u004C\u004B\u0052\u0020", 
								currency_symbol : "\u20A8", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0D89\u0DBB\u0DD2\u0DAF\u0DCF", "\u0DC3\u0DB3\u0DD4\u0DAF\u0DCF", "\u0D85\u0D9F\u0DC4\u0DBB\u0DD4\u0DC0\u0DCF\u0DAF\u0DCF", "\u0DB6\u0DAF\u0DCF\u0DAF\u0DCF", "\u0DB6\u0DCA\u200D\u0DBB\u0DC4\u0DC3\u0DCA\u0DB4\u0DAD\u0DD2\u0DB1\u0DCA\u0DAF\u0DCF", "\u0DC3\u0DD2\u0D9A\u0DD4\u0DBB\u0DCF\u0DAF\u0DCF", "\u0DC3\u0DD9\u0DB1\u0DC3\u0DD4\u0DBB\u0DCF\u0DAF\u0DCF"], 
								weekday_names_short : ["\u0D89", "\u0DC3", "\u0D85", "\u0DB6", "\u0DB6\u0DCA\u200D\u0DBB", "\u0DC3\u0DD2", "\u0DC3\u0DD9"], 
								weekday_names_narrow : ["\u0D89", "\u0DC3", "\u0D85", "\u0DB6", "\u0DB6\u0DCA\u200D\u0DBB", "\u0DC3\u0DD2", "\u0DC3\u0DD9"], 
								month_names_long : ["\u0DA2\u0DB1\u0DC0\u0DCF\u0DBB\u0DD2", "\u0DB4\u0DD9\u0DB6\u0DBB\u0DC0\u0DCF\u0DBD\u0DD2", "\u0DB8\u0DCF\u0DBB\u0DCA\u0DAD\u0DD4", "\u0D85\u0DB4\u0DCA\u200D\u0DBB\u0DD2\u0DBA\u0DD9\u0DBD\u0DCA", "\u0DB8\u0DD0\u0DBA\u0DD2", "\u0DA2\u0DD6\u0DB1\u0DD2", "\u0DA2\u0DD6\u0DBD\u0DD2", "\u0D85\u0D9C\u0DDD\u0DC3\u0DCA\u0DAD\u0DD4", "\u0DC3\u0DD0\u0DB4\u0DCA\u0DAD\u0DD0\u0DB8\u0DCA\u0DB6\u0DBB\u0DCA", "\u0D94\u0D9A\u0DCA\u0DAD\u0DDD\u0DB6\u0DBB\u0DCA", "\u0DB1\u0DD9\u0DC0\u0DD0\u0DB8\u0DCA\u0DB6\u0DBB\u0DCA", "\u0DAF\u0DD9\u0DC3\u0DD0\u0DB8\u0DCA\u0DB6\u0DBB\u0DCA"], 
								month_names_short : ["\u0DA2\u0DB1", "\u0DB4\u0DD9\u0DB6", "\u0DB8\u0DCF\u0DBB\u0DCA", "\u0D85\u0DB4\u0DCA\u200D\u0DBB\u0DD2", "\u0DB8\u0DD0\u0DBA\u0DD2", "\u0DA2\u0DD6\u0DB1\u0DD2", "\u0DA2\u0DD6\u0DBD\u0DD2", "\u0D85\u0D9C\u0DDD", "\u0DC3\u0DD0\u0DB4\u0DCA", "\u0D94\u0D9A\u0DCA", "\u0DB1\u0DD9\u0DC0\u0DD0", "\u0DAF\u0DD9\u0DC3\u0DD0"], 
								month_names_narrow : ["\u0DA2\u0DB1", "\u0DB4\u0DD9\u0DB6", "\u0DB8\u0DCF\u0DBB\u0DCA", "\u0D85\u0DB4\u0DCA\u200D\u0DBB\u0DD2", "\u0DB8\u0DD0\u0DBA\u0DD2", "\u0DA2\u0DD6\u0DB1\u0DD2", "\u0DA2\u0DD6\u0DBD\u0DD2", "\u0D85\u0D9C\u0DDD", "\u0DC3\u0DD0\u0DB4\u0DCA", "\u0D94\u0D9A\u0DCA", "\u0DB1\u0DD9\u0DC0\u0DD0", "\u0DAF\u0DD9\u0DC3\u0DD0"], 
								ampm : ["\u0DB4\u0DD9\u002E\u0DC0\u002E", "\u0DB4\u002E\u0DC0\u002E"], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0070\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u007A", 
								full_date_time_format : "\u0025\u0059\u0020\u0025\u0042\u0020\u0025\u0065\u0020\u0DC0\u0DD0\u0DB1\u0DD2\u0020\u0025\u0041\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u007A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.si_LK;
					}
					break;
				case "sk":
				case "sk_SK":
				case "sk_sk":
					{

						if (!nexacro.Locale.sk_SK) {
							nexacro.Locale.sk_SK = {
								name : "sk_SK", 
								decimal_point : "\u002C", 
								thousands_sep : "\u00A0", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0053\u004B\u004B\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004E\u0065\u0064\u0065\u013E\u0061", "\u0050\u006F\u006E\u0064\u0065\u006C\u006F\u006B", "\u0055\u0074\u006F\u0072\u006F\u006B", "\u0053\u0074\u0072\u0065\u0064\u0061", "\u0160\u0074\u0076\u0072\u0074\u006F\u006B", "\u0050\u0069\u0061\u0074\u006F\u006B", "\u0053\u006F\u0062\u006F\u0074\u0061"], 
								weekday_names_short : ["\u004E\u0065", "\u0050\u006F", "\u0055\u0074", "\u0053\u0074", "\u0160\u0074", "\u0050\u0069", "\u0053\u006F"], 
								weekday_names_narrow : ["\u004E\u0065", "\u0050\u006F", "\u0055\u0074", "\u0053\u0074", "\u0160\u0074", "\u0050\u0069", "\u0053\u006F"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u00E1\u0072", "\u0066\u0065\u0062\u0072\u0075\u00E1\u0072", "\u006D\u0061\u0072\u0065\u0063", "\u0061\u0070\u0072\u00ED\u006C", "\u006D\u00E1\u006A", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u0061\u0075\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u00F3\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u00E1\u006A", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u00E1\u006A", "\u006A\u00FA\u006E", "\u006A\u00FA\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0025\u0061\u00A0\u0025\u0065\u002E\u00A0\u0025\u0042\u00A0\u0025\u0059\u002C\u00A0\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u00A0\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002E\u0020\u0025\u006E\u002E\u0020\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.sk_SK;
					}
					break;
				case "sl":
				case "sl_SI":
				case "sl_si":
					{

						if (!nexacro.Locale.sl_SI) {
							nexacro.Locale.sl_SI = {
								name : "sl_SI", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u006E\u0065\u0064\u0065\u006C\u006A\u0061", "\u0070\u006F\u006E\u0065\u0064\u0065\u006C\u006A\u0065\u006B", "\u0074\u006F\u0072\u0065\u006B", "\u0073\u0072\u0065\u0064\u0061", "\u010D\u0065\u0074\u0072\u0074\u0065\u006B", "\u0070\u0065\u0074\u0065\u006B", "\u0073\u006F\u0062\u006F\u0074\u0061"], 
								weekday_names_short : ["\u006E\u0065\u0064", "\u0070\u006F\u006E", "\u0074\u006F\u0072", "\u0073\u0072\u0065", "\u010D\u0065\u0074", "\u0070\u0065\u0074", "\u0073\u006F\u0062"], 
								weekday_names_narrow : ["\u006E\u0065\u0064", "\u0070\u006F\u006E", "\u0074\u006F\u0072", "\u0073\u0072\u0065", "\u010D\u0065\u0074", "\u0070\u0065\u0074", "\u0073\u006F\u0062"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072", "\u006D\u0061\u0072\u0065\u0063", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u006A", "\u006A\u0075\u006E\u0069\u006A", "\u006A\u0075\u006C\u0069\u006A", "\u0061\u0076\u0067\u0075\u0073\u0074", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0076\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0076\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0020\u0025\u006D\u002E\u0020\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.sl_SI;
					}
					break;
				case "so_DJ":
				case "so_dj":
					{

						if (!nexacro.Locale.so_DJ) {
							nexacro.Locale.so_DJ = {
								name : "so_DJ", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0044\u004A\u0046\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0041\u0078\u0061\u0064", "\u0049\u0073\u006E\u0069\u0069\u006E", "\u0053\u0061\u006C\u0061\u0061\u0073\u006F", "\u0041\u0072\u0062\u0061\u0063\u006F", "\u004B\u0068\u0061\u006D\u0069\u0069\u0073", "\u004A\u0069\u006D\u0063\u006F", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0061\u0078\u0061", "\u0069\u0073\u006E", "\u0073\u0061\u006C", "\u0061\u0072\u0062", "\u006B\u0068\u0061", "\u006A\u0069\u006D", "\u0073\u0061\u0062"], 
								weekday_names_narrow : ["\u0061\u0078\u0061", "\u0069\u0073\u006E", "\u0073\u0061\u006C", "\u0061\u0072\u0062", "\u006B\u0068\u0061", "\u006A\u0069\u006D", "\u0073\u0061\u0062"], 
								month_names_long : ["\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0041\u0066\u0072\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0068\u0061\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0068\u0061\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0069\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0064\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0069\u0064\u0065\u0065\u0064\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0067\u0061\u0061\u006C\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u0077 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064"], 
								month_names_short : ["\u006B\u006F\u0062", "\u006C\u0061\u0062", "\u0073\u0061\u0064", "\u0061\u0066\u0072", "\u0073\u0068\u0061", "\u006C\u0069\u0078", "\u0074\u006F\u0064", "\u0073\u0069\u0064", "\u0073\u0061\u0067", "\u0074\u006F\u0062", "\u006B\u0069\u0074", "\u006C\u0069\u0074"], 
								month_names_narrow : ["\u006B\u006F\u0062", "\u006C\u0061\u0062", "\u0073\u0061\u0064", "\u0061\u0066\u0072", "\u0073\u0068\u0061", "\u006C\u0069\u0078", "\u0074\u006F\u0064", "\u0073\u0069\u0064", "\u0073\u0061\u0067", "\u0074\u006F\u0062", "\u006B\u0069\u0074", "\u006C\u0069\u0074"], 
								ampm : ["\u0073\u0075\u0062\u0061\u0078\u006E\u0069\u006D\u006F", "\u0067\u0061\u006C\u0061\u0062\u006E\u0069\u006D\u006F"], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.so_DJ;
					}
					break;
				case "so_ET":
				case "so_et":
					{

						if (!nexacro.Locale.so_ET) {
							nexacro.Locale.so_ET = {
								name : "so_ET", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0054\u0042\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0041\u0078\u0061\u0064", "\u0049\u0073\u006E\u0069\u0069\u006E", "\u0053\u0061\u006C\u0061\u0061\u0073\u006F", "\u0041\u0072\u0062\u0061\u0063\u006F", "\u004B\u0068\u0061\u006D\u0069\u0069\u0073", "\u004A\u0069\u006D\u0063\u006F", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0041\u0078\u0061", "\u0049\u0073\u006E", "\u0053\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0068\u0061", "\u004A\u0069\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u0041\u0078\u0061", "\u0049\u0073\u006E", "\u0053\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0068\u0061", "\u004A\u0069\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0064\u0064\u0065\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0041\u0066\u0072\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0068\u0061\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0069\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0064\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0069\u0064\u0065\u0065\u0064\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0067\u0061\u0061\u006C\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u0077 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064"], 
								month_names_short : ["\u004B\u006F\u0062", "\u004C\u0061\u0062", "\u0053\u0061\u0064", "\u0041\u0066\u0072", "\u0053\u0068\u0061", "\u004C\u0069\u0078", "\u0054\u006F\u0064", "\u0053\u0069\u0064", "\u0053\u0061\u0067", "\u0054\u006F\u0062", "\u004B\u0049\u0054", "\u004C\u0049\u0054"], 
								month_names_narrow : ["\u004B\u006F\u0062", "\u004C\u0061\u0062", "\u0053\u0061\u0064", "\u0041\u0066\u0072", "\u0053\u0068\u0061", "\u004C\u0069\u0078", "\u0054\u006F\u0064", "\u0053\u0069\u0064", "\u0053\u0061\u0067", "\u0054\u006F\u0062", "\u004B\u0049\u0054", "\u004C\u0049\u0054"], 
								ampm : ["\u0073\u0075\u0062\u0061\u0078\u006E\u0069\u006D\u006F", "\u0067\u0061\u006C\u0061\u0062\u006E\u0069\u006D\u006F"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.so_ET;
					}
					break;
				case "so_KE":
				case "so_ke":
					{

						if (!nexacro.Locale.so_KE) {
							nexacro.Locale.so_KE = {
								name : "so_KE", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0054\u0042\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0041\u0078\u0061\u0064", "\u0049\u0073\u006E\u0069\u0069\u006E", "\u0053\u0061\u006C\u0061\u0061\u0073\u006F", "\u0041\u0072\u0062\u0061\u0063\u006F", "\u004B\u0068\u0061\u006D\u0069\u0069\u0073", "\u004A\u0069\u006D\u0063\u006F", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0041\u0078\u0061", "\u0049\u0073\u006E", "\u0053\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0068\u0061", "\u004A\u0069\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u0041\u0078\u0061", "\u0049\u0073\u006E", "\u0053\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0068\u0061", "\u004A\u0069\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0064\u0064\u0065\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0041\u0066\u0072\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0068\u0061\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0069\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0064\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0069\u0064\u0065\u0065\u0064\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0067\u0061\u0061\u006C\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u0077 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064"], 
								month_names_short : ["\u004B\u006F\u0062", "\u004C\u0061\u0062", "\u0053\u0061\u0064", "\u0041\u0066\u0072", "\u0053\u0068\u0061", "\u004C\u0069\u0078", "\u0054\u006F\u0064", "\u0053\u0069\u0064", "\u0053\u0061\u0067", "\u0054\u006F\u0062", "\u004B\u0049\u0054", "\u004C\u0049\u0054"], 
								month_names_narrow : ["\u004B\u006F\u0062", "\u004C\u0061\u0062", "\u0053\u0061\u0064", "\u0041\u0066\u0072", "\u0053\u0068\u0061", "\u004C\u0069\u0078", "\u0054\u006F\u0064", "\u0053\u0069\u0064", "\u0053\u0061\u0067", "\u0054\u006F\u0062", "\u004B\u0049\u0054", "\u004C\u0049\u0054"], 
								ampm : ["\u0073\u0075\u0062\u0061\u0078\u006E\u0069\u006D\u006F", "\u0067\u0061\u006C\u0061\u0062\u006E\u0069\u006D\u006F"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.so_KE;
					}
					break;
				case "so":
				case "so_SO":
				case "so_so":
					{

						if (!nexacro.Locale.so_SO) {
							nexacro.Locale.so_SO = {
								name : "so_SO", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0053\u004F\u0053\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0041\u0078\u0061\u0064", "\u0049\u0073\u006E\u0069\u0069\u006E", "\u0053\u0061\u006C\u0061\u0061\u0073\u006F", "\u0041\u0072\u0062\u0061\u0063\u006F", "\u004B\u0068\u0061\u006D\u0069\u0069\u0073", "\u004A\u0069\u006D\u0063\u006F", "\u0053\u0061\u0062\u0074\u0069"], 
								weekday_names_short : ["\u0041\u0078\u0061", "\u0049\u0073\u006E", "\u0053\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0068\u0061", "\u004A\u0069\u006D", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u0041\u0078\u0061", "\u0049\u0073\u006E", "\u0053\u0061\u006C", "\u0041\u0072\u0062", "\u004B\u0068\u0061", "\u004A\u0069\u006D", "\u0053\u0061\u0062"], 
								month_names_long : ["\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0064\u0064\u0065\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0041\u0066\u0072\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0068\u0061\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0069\u0078\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0064\u006F\u0062\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0069\u0064\u0065\u0065\u0064\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0053\u0061\u0067\u0061\u0061\u006C\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004B\u006F\u0077 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064", "\u0042\u0069\u0073\u0068\u0061 \u004C\u0061\u0062\u0061 \u0069\u0079\u006F \u0054\u006F\u0062\u006E\u0061\u0061\u0064"], 
								month_names_short : ["\u004B\u006F\u0062", "\u004C\u0061\u0062", "\u0053\u0061\u0064", "\u0041\u0066\u0072", "\u0053\u0068\u0061", "\u004C\u0069\u0078", "\u0054\u006F\u0064", "\u0053\u0069\u0064", "\u0053\u0061\u0067", "\u0054\u006F\u0062", "\u004B\u0049\u0054", "\u004C\u0049\u0054"], 
								month_names_narrow : ["\u004B\u006F\u0062", "\u004C\u0061\u0062", "\u0053\u0061\u0064", "\u0041\u0066\u0072", "\u0053\u0068\u0061", "\u004C\u0069\u0078", "\u0054\u006F\u0064", "\u0053\u0069\u0064", "\u0053\u0061\u0067", "\u0054\u006F\u0062", "\u004B\u0049\u0054", "\u004C\u0049\u0054"], 
								ampm : ["\u0073\u0075\u0062\u0061\u0078\u006E\u0069\u006D\u006F", "\u0067\u0061\u006C\u0061\u0062\u006E\u0069\u006D\u006F"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0042\u0020\u0025\u0065\u002C\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.so_SO;
					}
					break;
				case "sq":
				case "sq_AL":
				case "sq_al":
					{

						if (!nexacro.Locale.sq_AL) {
							nexacro.Locale.sq_AL = {
								name : "sq_AL", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3], 
								int_curr_symbol : "\u0041\u004C\u004C\u0020", 
								currency_symbol : "\u004C\u0065\u006B", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 3, 
								frac_digits : 3, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0065\u0020\u0064\u0069\u0065\u006C\u0020", "\u0065\u0020\u0068\u00EB\u006E\u00EB\u0020", "\u0065\u0020\u006D\u0061\u0072\u0074\u00EB\u0020", "\u0065\u0020\u006D\u00EB\u0072\u006B\u0075\u0072\u00EB\u0020", "\u0065\u0020\u0065\u006E\u006A\u0074\u0065\u0020", "\u0065\u0020\u0070\u0072\u0065\u006D\u0074\u0065\u0020", "\u0065\u0020\u0073\u0068\u0074\u0075\u006E\u00EB\u0020"], 
								weekday_names_short : ["\u0044\u0069\u0065\u0020", "\u0048\u00EB\u006E\u0020", "\u004D\u0061\u0072\u0020", "\u004D\u00EB\u0072\u0020", "\u0045\u006E\u006A\u0020", "\u0050\u0072\u0065\u0020", "\u0053\u0068\u0074\u0020"], 
								weekday_names_narrow : ["\u0044\u0069\u0065\u0020", "\u0048\u00EB\u006E\u0020", "\u004D\u0061\u0072\u0020", "\u004D\u00EB\u0072\u0020", "\u0045\u006E\u006A\u0020", "\u0050\u0072\u0065\u0020", "\u0053\u0068\u0074\u0020"], 
								month_names_long : ["\u006A\u0061\u006E\u0061\u0072", "\u0073\u0068\u006B\u0075\u0072\u0074", "\u006D\u0061\u0072\u0073", "\u0070\u0072\u0069\u006C\u006C", "\u006D\u0061\u006A", "\u0071\u0065\u0072\u0073\u0068\u006F\u0072", "\u006B\u006F\u0072\u0072\u0069\u006B", "\u0067\u0075\u0073\u0068\u0074", "\u0073\u0068\u0074\u0061\u0074\u006F\u0072", "\u0074\u0065\u0074\u006F\u0072", "\u006E\u00EB\u006E\u0074\u006F\u0072", "\u0064\u0068\u006A\u0065\u0074\u006F\u0072"], 
								month_names_short : ["\u004A\u0061\u006E", "\u0053\u0068\u006B", "\u004D\u0061\u0072", "\u0050\u0072\u0069", "\u004D\u0061\u006A", "\u0051\u0065\u0072", "\u004B\u006F\u0072", "\u0047\u0073\u0068", "\u0053\u0068\u0074", "\u0054\u0065\u0074", "\u004E\u00EB\u006E", "\u0044\u0068\u006A"], 
								month_names_narrow : ["\u004A\u0061\u006E", "\u0053\u0068\u006B", "\u004D\u0061\u0072", "\u0050\u0072\u0069", "\u004D\u0061\u006A", "\u0051\u0065\u0072", "\u004B\u006F\u0072", "\u0047\u0073\u0068", "\u0053\u0068\u0074", "\u0054\u0065\u0074", "\u004E\u00EB\u006E", "\u0044\u0068\u006A"], 
								ampm : ["\u0050\u0044", "\u004D\u0044"], 
								date_format : "\u0025\u0059\u002D\u0025\u0062\u002D\u0025\u0064", 
								time_format : "\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u002E\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u002E\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0059\u002D\u0025\u0062\u002D\u0025\u0064\u0020\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u002E\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.sq_AL;
					}
					break;
				case "sr_ME":
				case "sr_me":
					{

						if (!nexacro.Locale.sr_ME) {
							nexacro.Locale.sr_ME = {
								name : "sr_ME", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u043D\u0435\u0434\u0458\u0435\u0459\u0430", "\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A", "\u0443\u0442\u043E\u0440\u0430\u043A", "\u0441\u0440\u0438\u0458\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A", "\u043F\u0435\u0442\u0430\u043A", "\u0441\u0443\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0443\u0442\u043E", "\u0441\u0440\u0438", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0443\u0431"], 
								weekday_names_narrow : ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0443\u0442\u043E", "\u0441\u0440\u0438", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0443\u0431"], 
								month_names_long : ["\u0458\u0430\u043D\u0443\u0430\u0440", "\u0444\u0435\u0431\u0440\u0443\u0430\u0440", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440", "\u043E\u043A\u0442\u043E\u0431\u0430\u0440", "\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440", "\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440"], 
								month_names_short : ["\u0458\u0430\u043D", "\u0444\u0435\u0431", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0432", "\u0434\u0435\u0446"], 
								month_names_narrow : ["\u0458\u0430\u043D", "\u0444\u0435\u0431", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0432", "\u0434\u0435\u0446"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059\u002E", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0054", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u002E\u0020\u0025\u0042\u0020\u0025\u0059\u002E\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u002c\u0020\u0025\u0065\u002E\u0020\u0025\u0062\u0020\u0025\u0059\u002E\u0020\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u000A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.sr_ME;
					}
					break;
				case "sr":
				case "sr_RS":
				case "sr_rs":
					{

						if (!nexacro.Locale.sr_RS) {
							nexacro.Locale.sr_RS = {
								name : "sr_RS", 
								decimal_point : "\u002C", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0052\u0053\u0044\u0020", 
								currency_symbol : "\u0434\u0438\u043D", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u043D\u0435\u0434\u0435\u0459\u0430", "\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A", "\u0443\u0442\u043E\u0440\u0430\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A", "\u043F\u0435\u0442\u0430\u043A", "\u0441\u0443\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0443\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0443\u0431"], 
								weekday_names_narrow : ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0443\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0443\u0431"], 
								month_names_long : ["\u0458\u0430\u043D\u0443\u0430\u0440", "\u0444\u0435\u0431\u0440\u0443\u0430\u0440", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440", "\u043E\u043A\u0442\u043E\u0431\u0430\u0440", "\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440", "\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440"], 
								month_names_short : ["\u0458\u0430\u043D", "\u0444\u0435\u0431", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0432", "\u0434\u0435\u0446"], 
								month_names_narrow : ["\u0458\u0430\u043D", "\u0444\u0435\u0431", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0432", "\u0434\u0435\u0446"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059\u002E", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0054", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u002E\u0020\u0025\u0042\u0020\u0025\u0059\u002E\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u002C\u0020\u0025\u0065\u002E\u0020\u0025\u0062\u0020\u0025\u0059\u002E\u0020\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u000A", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.sr_RS;
					}
					break;
				case "ss":
				case "ss_ZA":
				case "ss_za":
					{

						if (!nexacro.Locale.ss_ZA) {
							nexacro.Locale.ss_ZA = {
								name : "ss_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004C\u0069\u0073\u006F\u006E\u0074\u0066\u006F", "\u0075\u004D\u0073\u006F\u006D\u0062\u0075\u006C\u0075\u006B\u006F", "\u004C\u0065\u0073\u0069\u0062\u0069\u006C\u0069", "\u004C\u0065\u0073\u0069\u0074\u0073\u0061\u0074\u0066\u0075", "\u004C\u0065\u0073\u0069\u006E\u0065", "\u004C\u0065\u0073\u0069\u0068\u006C\u0061\u006E\u0075", "\u0075\u004D\u0067\u0063\u0069\u0062\u0065\u006C\u006F"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u0073\u006F", "\u0042\u0069\u006C", "\u0054\u0073\u0061", "\u004E\u0065", "\u0048\u006C\u0061", "\u004D\u0067\u0063"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u0073\u006F", "\u0042\u0069\u006C", "\u0054\u0073\u0061", "\u004E\u0065", "\u0048\u006C\u0061", "\u004D\u0067\u0063"], 
								month_names_long : ["\u0042\u0068\u0069\u006D\u0062\u0069\u0064\u0076\u0077\u0061\u006E\u0065", "\u0069\u004E\u0064\u006C\u006F\u0076\u0061\u006E\u0065", "\u0069\u004E\u0064\u006C\u006F\u0076\u0075\u006C\u0065\u006E\u006B\u0068\u0075\u006C\u0075", "\u004D\u0061\u0062\u0061\u0073\u0061", "\u0049\u006E\u006B\u0068\u0077\u0065\u006E\u006B\u0068\u0077\u0065\u0074\u0069", "\u0069\u004E\u0068\u006C\u0061\u0062\u0061", "\u004B\u0068\u006F\u006C\u0077\u0061\u006E\u0065", "\u0069\u004E\u0067\u0063\u0069", "\u0069\u004E\u0079\u006F\u006E\u0069", "\u0049\u006D\u0070\u0061\u006C\u0061", "\u004C\u0077\u0065\u0074\u0069", "\u0069\u004E\u0067\u006F\u006E\u0067\u006F\u006E\u0069"], 
								month_names_short : ["\u0042\u0068\u0069", "\u0056\u0061\u006E", "\u0056\u0075\u006C", "\u004D\u0061\u0062", "\u004B\u0068\u006B", "\u004E\u0068\u006C", "\u004B\u0068\u006F", "\u004E\u0067\u0063", "\u004E\u0079\u006F", "\u0049\u006D\u0070", "\u004C\u0077\u0065", "\u004E\u0067\u006F"], 
								month_names_narrow : ["\u0042\u0068\u0069", "\u0056\u0061\u006E", "\u0056\u0075\u006C", "\u004D\u0061\u0062", "\u004B\u0068\u006B", "\u004E\u0068\u006C", "\u004B\u0068\u006F", "\u004E\u0067\u0063", "\u004E\u0079\u006F", "\u0049\u006D\u0070", "\u004C\u0077\u0065", "\u004E\u0067\u006F"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u002D\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.ss_ZA;
					}
					break;
				case "st":
				case "st_ZA":
				case "st_za":
					{

						if (!nexacro.Locale.st_ZA) {
							nexacro.Locale.st_ZA = {
								name : "st_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u006F\u006E\u0074\u0061\u0068\u0061", "\u004D\u0061\u006E\u0074\u0061\u0068\u0061", "\u004C\u0061\u0062\u006F\u0062\u0065\u0064\u0069", "\u004C\u0061\u0062\u006F\u0072\u0061\u0072\u006F", "\u004C\u0061\u0062\u006F\u006E\u0065", "\u004C\u0061\u0062\u006F\u0068\u006C\u0061\u006E\u006F", "\u004D\u006F\u0071\u0065\u0062\u0065\u006C\u006F"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u006D\u0061", "\u0042\u0065\u0064", "\u0052\u0061\u0072", "\u004E\u0065", "\u0048\u006C\u0061", "\u004D\u006F\u0071"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u006D\u0061", "\u0042\u0065\u0064", "\u0052\u0061\u0072", "\u004E\u0065", "\u0048\u006C\u0061", "\u004D\u006F\u0071"], 
								month_names_long : ["\u0050\u0068\u0065\u0072\u0065\u006B\u0067\u006F\u006E\u0067", "\u0048\u006C\u0061\u006B\u006F\u006C\u0061", "\u0054\u006C\u0068\u0061\u006B\u0075\u0062\u0065\u006C\u0065", "\u004D\u006D\u0065\u0073\u0065", "\u004D\u006F\u0074\u0073\u0068\u0065\u0061\u006E\u006F\u006E\u0067", "\u0050\u0068\u0075\u0070\u006A\u0061\u006E\u0065", "\u0050\u0068\u0075\u0070\u0075", "\u0050\u0068\u0061\u0074\u006F", "\u004C\u0065\u006F\u0074\u0073\u0065", "\u004D\u0070\u0068\u0061\u006C\u0061\u006E\u0065", "\u0050\u0075\u0064\u0075\u006E\u0067\u0077\u0061\u006E\u0061", "\u0054\u0073\u0068\u0069\u0074\u0077\u0065"], 
								month_names_short : ["\u0050\u0068\u0065", "\u0048\u006C\u0061", "\u0054\u006C\u0048", "\u004D\u006D\u0065", "\u004D\u006F\u0074", "\u004A\u0061\u006E", "\u0055\u0070\u0075", "\u0050\u0068\u0061", "\u004C\u0065\u006F", "\u004D\u0070\u0068", "\u0050\u0075\u0064", "\u0054\u0073\u0068"], 
								month_names_narrow : ["\u0050\u0068\u0065", "\u0048\u006C\u0061", "\u0054\u006C\u0048", "\u004D\u006D\u0065", "\u004D\u006F\u0074", "\u004A\u0061\u006E", "\u0055\u0070\u0075", "\u0050\u0068\u0061", "\u004C\u0065\u006F", "\u004D\u0070\u0068", "\u0050\u0075\u0064", "\u0054\u0073\u0068"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u002D\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}


						return nexacro.Locale.st_ZA;
					}
					break;
				case "sv_FI":
				case "sv_fi":
					{

						if (!nexacro.Locale.sv_FI) {
							nexacro.Locale.sv_FI = {
								name : "sv_FI", 
								decimal_point : "\u002C", 
								thousands_sep : "\u00A0", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u00A0", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 2, 
								n_cs_precedes : 0, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0073\u00F6\u006E\u0064\u0061\u0067", "\u006D\u00E5\u006E\u0064\u0061\u0067", "\u0074\u0069\u0073\u0064\u0061\u0067", "\u006F\u006E\u0073\u0064\u0061\u0067", "\u0074\u006F\u0072\u0073\u0064\u0061\u0067", "\u0066\u0072\u0065\u0064\u0061\u0067", "\u006C\u00F6\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u0073\u00F6\u006E", "\u006D\u00E5\u006E", "\u0074\u0069\u0073", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F6\u0072"], 
								weekday_names_narrow : ["\u0073\u00F6\u006E", "\u006D\u00E5\u006E", "\u0074\u0069\u0073", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F6\u0072"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u006A", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074\u0069", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 1, 
								longdate_format : "\\\u0064\u0065\u006E\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002E\u0025\u006E\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.sv_FI;
					}
					break;
				case "sv":
				case "sv_SE":
				case "sv_se":
					{

						if (!nexacro.Locale.sv_SE) {
							nexacro.Locale.sv_SE = {
								name : "sv_SE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0053\u0045\u004B\u0020", 
								currency_symbol : "\u006B\u0072", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0073\u00F6\u006E\u0064\u0061\u0067", "\u006D\u00E5\u006E\u0064\u0061\u0067", "\u0074\u0069\u0073\u0064\u0061\u0067", "\u006F\u006E\u0073\u0064\u0061\u0067", "\u0074\u006F\u0072\u0073\u0064\u0061\u0067", "\u0066\u0072\u0065\u0064\u0061\u0067", "\u006C\u00F6\u0072\u0064\u0061\u0067"], 
								weekday_names_short : ["\u0073\u00F6\u006E", "\u006D\u00E5\u006E", "\u0074\u0069\u0073", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F6\u0072"], 
								weekday_names_narrow : ["\u0073\u00F6\u006E", "\u006D\u00E5\u006E", "\u0074\u0069\u0073", "\u006F\u006E\u0073", "\u0074\u006F\u0072", "\u0066\u0072\u0065", "\u006C\u00F6\u0072"], 
								month_names_long : ["\u006A\u0061\u006E\u0075\u0061\u0072\u0069", "\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0069", "\u006D\u0061\u0072\u0073", "\u0061\u0070\u0072\u0069\u006C", "\u006D\u0061\u006A", "\u006A\u0075\u006E\u0069", "\u006A\u0075\u006C\u0069", "\u0061\u0075\u0067\u0075\u0073\u0074\u0069", "\u0073\u0065\u0070\u0074\u0065\u006D\u0062\u0065\u0072", "\u006F\u006B\u0074\u006F\u0062\u0065\u0072", "\u006E\u006F\u0076\u0065\u006D\u0062\u0065\u0072", "\u0064\u0065\u0063\u0065\u006D\u0062\u0065\u0072"], 
								month_names_short : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u006A\u0061\u006E", "\u0066\u0065\u0062", "\u006D\u0061\u0072", "\u0061\u0070\u0072", "\u006D\u0061\u006A", "\u006A\u0075\u006E", "\u006A\u0075\u006C", "\u0061\u0075\u0067", "\u0073\u0065\u0070", "\u006F\u006B\u0074", "\u006E\u006F\u0076", "\u0064\u0065\u0063"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								time_format : "\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0048\u002E\u0025\u004D\u002E\u0025\u0053", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 1, 
								longdate_format : "\\\u0064\u0065\u006E\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0059\u002D\u0025\u006D\u002D\u0025\u0064", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.sv_SE;
					}
					break;
				case "ta":
				case "ta_IN":
				case "ta_in":
					{

						if (!nexacro.Locale.ta_IN) {
							nexacro.Locale.ta_IN = {
								name : "ta_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0BB0\u0BC2", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BC1", "\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0BB3\u0BCD", "\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD", "\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD", "\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0BA9\u0BCD", "\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF", "\u0B9A\u0BA9\u0BBF"], 
								weekday_names_short : ["\u0B9E\u0BBE", "\u0BA4\u0BBF", "\u0B9A\u0BC6", "\u0BAA\u0BC1", "\u0BB5\u0BBF", "\u0BB5\u0BC6", "\u0B9A"], 
								weekday_names_narrow : ["\u0B9E\u0BBE", "\u0BA4\u0BBF", "\u0B9A\u0BC6", "\u0BAA\u0BC1", "\u0BB5\u0BBF", "\u0BB5\u0BC6", "\u0B9A"], 
								month_names_long : ["\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF", "\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF", "\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD", "\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD", "\u0BAE\u0BC7", "\u0B9C\u0BC2\u0BA9\u0BCD", "\u0B9C\u0BC2\u0BB2\u0BC8", "\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD", "\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD", "\u0B85\u0B95\u0BCD\u0B9F\u0BCB\u0BAA\u0BB0\u0BCD", "\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD", "\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD"], 
								month_names_short : ["\u0B9C\u0BA9", "\u0BAA\u0BBF\u0BAA\u0BCD", "\u0BAE\u0BBE\u0BB0\u0BCD", "\u0B8F\u0BAA\u0BCD", "\u0BAE\u0BC7", "\u0B9C\u0BC2\u0BA9\u0BCD", "\u0B9C\u0BC2\u0BB2\u0BC8", "\u0B86\u0B95", "\u0B9A\u0BC6\u0BAA\u0BCD", "\u0B85\u0B95\u0BCD", "\u0BA8\u0BB5", "\u0B9F\u0BBF\u0B9A"], 
								month_names_narrow : ["\u0B9C\u0BA9", "\u0BAA\u0BBF\u0BAA\u0BCD", "\u0BAE\u0BBE\u0BB0\u0BCD", "\u0B8F\u0BAA\u0BCD", "\u0BAE\u0BC7", "\u0B9C\u0BC2\u0BA9\u0BCD", "\u0B9C\u0BC2\u0BB2\u0BC8", "\u0B86\u0B95", "\u0B9A\u0BC6\u0BAA\u0BCD", "\u0B85\u0B95\u0BCD", "\u0BA8\u0BB5", "\u0B9F\u0BBF\u0B9A"], 
								ampm : ["\u0B95\u0BBE\u0BB2\u0BC8", "\u0BAE\u0BBE\u0BB2\u0BC8"], 
								date_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								time_format : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0041\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ta_IN;
					}
					break;
				case "te":
				case "te_IN":
				case "te_in":
					{

						if (!nexacro.Locale.te_IN) {
							nexacro.Locale.te_IN = {
								name : "te_IN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 2], 
								int_curr_symbol : "\u0049\u004E\u0052\u0020", 
								currency_symbol : "\u0C30\u0C42", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 2], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 2, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 4, 
								weekday_names_long : ["\u0C06\u0C26\u0C3F\u0C35\u0C3E\u0C30\u0C02", "\u0C38\u0C4b\u0C2E\u0C35\u0C3E\u0C30\u0C02", "\u0C2E\u0C02\u0C17\u0C33\u0C35\u0C3E\u0C30\u0C02", "\u0C2C\u0C41\u0C27\u0C35\u0C3E\u0C30\u0C02", "\u0C17\u0C41\u0C30\u0C41\u0C35\u0C3E\u0C30\u0C02", "\u0C36\u0C41\u0C15\u0C4d\u0C30\u0C35\u0C3E\u0C30\u0C02", "\u0C36\u0C28\u0C3F\u0C35\u0C3E\u0C30\u0C02"], 
								weekday_names_short : ["\u0C06\u0C26\u0C3F", "\u0C38\u0C4b\u0C2E", "\u0C2E\u0C02\u0C17\u0C33", "\u0C2C\u0C41\u0C27", "\u0C17\u0C41\u0C30\u0C41", "\u0C36\u0C41\u0C15\u0C4D\u0C30", "\u0C36\u0C28\u0C3F"], 
								weekday_names_narrow : ["\u0C06\u0C26\u0C3F", "\u0C38\u0C4b\u0C2E", "\u0C2E\u0C02\u0C17\u0C33", "\u0C2C\u0C41\u0C27", "\u0C17\u0C41\u0C30\u0C41", "\u0C36\u0C41\u0C15\u0C4D\u0C30", "\u0C36\u0C28\u0C3F"], 
								month_names_long : ["\u0C1C\u0C28\u0C35\u0C30\u0C3F", "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30\u0C35\u0C30\u0C3F", "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F", "\u0C0F\u0C2A\u0C4D\u0C30\u0C3F\u0C32\u0C4D", "\u0C2E\u0C47", "\u0C1C\u0C42\u0C28\u0C4D", "\u0C1C\u0C42\u0C32\u0C48", "\u0C06\u0C17\u0C38\u0C4D\u0C1F\u0C41", "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02\u0C2C\u0C30\u0C41", "\u0C05\u0C15\u0C4D\u0C1F\u0C4B\u0C2C\u0C30\u0C41", "\u0C28\u0C35\u0C02\u0C2C\u0C30\u0C41", "\u0C21\u0C3F\u0C38\u0C46\u0C02\u0C2C\u0C30\u0C41"], 
								month_names_short : ["\u0C1C\u0C28\u0C35\u0C30\u0C3F", "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30\u0C35\u0C30\u0C3F", "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F", "\u0C0F\u0C2a\u0C4D\u0C30\u0C3F\u0C32\u0C4D", "\u0C2E\u0C47", "\u0C1C\u0C42\u0C28\u0C4D", "\u0C1C\u0C42\u0C32\u0C48", "\u0C06\u0C17\u0C38\u0C4D\u0C1F\u0C41", "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02\u0C2C\u0C30\u0C41", "\u0C05\u0C15\u0C4D\u0C1F\u0C4B\u0C2C\u0C30\u0C41", "\u0C28\u0C35\u0C02\u0C2C\u0C30\u0C41", "\u0C21\u0C3F\u0C38\u0C46\u0C02\u0C2C\u0C30\u0C41"], 
								month_names_narrow : ["\u0C1C\u0C28\u0C35\u0C30\u0C3F", "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30\u0C35\u0C30\u0C3F", "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F", "\u0C0F\u0C2a\u0C4D\u0C30\u0C3F\u0C32\u0C4D", "\u0C2E\u0C47", "\u0C1C\u0C42\u0C28\u0C4D", "\u0C1C\u0C42\u0C32\u0C48", "\u0C06\u0C17\u0C38\u0C4D\u0C1F\u0C41", "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02\u0C2C\u0C30\u0C41", "\u0C05\u0C15\u0C4D\u0C1F\u0C4B\u0C2C\u0C30\u0C41", "\u0C28\u0C35\u0C02\u0C2C\u0C30\u0C41", "\u0C21\u0C3F\u0C38\u0C46\u0C02\u0C2C\u0C30\u0C41"], 
								ampm : ["\u0C09\u002E", "\u0C38\u0C3E\u002E"], 
								date_format : "\u0025\u0042\u0020\u0025\u0064\u0020\u0025\u0041\u0020\u0025\u0059", 
								time_format : "\u0025\u0070\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0070\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u005A", 
								date_time_format : "\u0025\u0042\u0020\u0025\u0064\u0020\u0025\u0041\u0020\u0025\u0059\u0020\u0025\u0070\u0025\u0049\u002E\u0025\u004D\u002E\u0025\u0053\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0079", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.te_IN;
					}
					break;
				case "tg":
				case "tg_TJ":
				case "tg_tj":
					{

						if (!nexacro.Locale.tg_TJ) {
							nexacro.Locale.tg_TJ = {
								name : "tg_TJ", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0054\u004A\u0053\u0020", 
								currency_symbol : "\u0440\u0443\u0431", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0412\u0442\u043E\u0440\u043D\u0438\u043A", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u0412\u0441\u043A", "\u041F\u043D\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0431\u0442"], 
								weekday_names_narrow : ["\u0412\u0441\u043A", "\u041F\u043D\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0431\u0442"], 
								month_names_long : ["\u042F\u043D\u0432\u0430\u0440\u044F", "\u0424\u0435\u0432\u0440\u0430\u043B\u044F", "\u041C\u0430\u0440\u0442\u0430", "\u0410\u043F\u0440\u0435\u043B\u044F", "\u041C\u0430\u044F", "\u0418\u044E\u043D\u044F", "\u0418\u044E\u043B\u044F", "\u0410\u0432\u0433\u0443\u0441\u0442\u0430", "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044F", "\u041E\u043A\u0442\u044F\u0431\u0440\u044F", "\u041D\u043E\u044F\u0431\u0440\u044F", "\u0414\u0435\u043A\u0430\u0431\u0440\u044F"], 
								month_names_short : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								month_names_narrow : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.tg_TJ;
					}
					break;
				case "th":
				case "th_TH":
				case "th_th":
					{

						if (!nexacro.Locale.th_TH) {
							nexacro.Locale.th_TH = {
								name : "th_TH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0054\u0048\u0042\u0020", 
								currency_symbol : "\u0E3F", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								mon_n_sign_posn : 1, 
								weekday_names_long : ["\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C", "\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C", "\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23", "\u0E1E\u0E38\u0E18", "\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35", "\u0E28\u0E38\u0E01\u0E23\u0E4C", "\u0E40\u0E2A\u0E32\u0E23\u0E4C"], 
								weekday_names_short : ["\u0E2D\u0E32\u002E", "\u0E08\u002E", "\u0E2D\u002E", "\u0E1E\u002E", "\u0E1E\u0E24\u002E", "\u0E28\u002E", "\u0E2A\u002E"], 
								weekday_names_narrow : ["\u0E2D\u0E32\u002E", "\u0E08\u002E", "\u0E2D\u002E", "\u0E1E\u002E", "\u0E1E\u0E24\u002E", "\u0E28\u002E", "\u0E2A\u002E"], 
								month_names_long : ["\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21", "\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C", "\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21", "\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19", "\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21", "\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19", "\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21", "\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21", "\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19", "\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21", "\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19", "\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21"], 
								month_names_short : ["\u0E21\u002E\u0E04\u002E", "\u0E01\u002E\u0E1E\u002E", "\u0E21\u0E35\u002E\u0E04\u002E", "\u0E40\u0E21\u002E\u0E22\u002E", "\u0E1E\u002E\u0E04\u002E", "\u0E21\u0E34\u002E\u0E22\u002E", "\u0E01\u002E\u0E04\u002E", "\u0E2A\u002E\u0E04\u002E", "\u0E01\u002E\u0E22\u002E", "\u0E15\u002E\u0E04\u002E", "\u0E1E\u002E\u0E22\u002E", "\u0E18\u002E\u0E04\u002E"], 
								month_names_narrow : ["\u0E21\u002E\u0E04\u002E", "\u0E01\u002E\u0E1E\u002E", "\u0E21\u0E35\u002E\u0E04\u002E", "\u0E40\u0E21\u002E\u0E22\u002E", "\u0E1E\u002E\u0E04\u002E", "\u0E21\u0E34\u002E\u0E22\u002E", "\u0E01\u002E\u0E04\u002E", "\u0E2A\u002E\u0E04\u002E", "\u0E01\u002E\u0E22\u002E", "\u0E15\u002E\u0E04\u002E", "\u0E1E\u002E\u0E22\u002E", "\u0E18\u002E\u0E04\u002E"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "%d\u002F%m\u002F%Ey", 
								time_format : "%H\u003A%M\u003A%S", 
								time_format_ampm : "%I\u003A%M\u003A%S\u0020%p", 
								date_time_format : "%a\u0020%e\u0020%b\u0020%Ey\u002C\u0020%H\u003A%M\u003A%S", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0065\u0020\u0025\u0062\u0020\u0025\u0045\u0079\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0020\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.th_TH;
					}
					break;
				case "ti_ER":
				case "ti_er":
					{

						if (!nexacro.Locale.ti_ER) {
							nexacro.Locale.ti_ER = {
								name : "ti_ER", 
								decimal_point : "\u002E", 
								thousands_sep : "", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0052\u004E\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 0, 
								frac_digits : 0, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u1230\u1295\u1260\u1275", "\u1230\u1291\u12ED", "\u1230\u1209\u1235", "\u1228\u1261\u12D5", "\u1213\u1219\u1235", "\u12D3\u122D\u1262", "\u1240\u12F3\u121D"], 
								weekday_names_short : ["\u1230\u1295\u1260", "\u1230\u1291\u12ED", "\u1230\u1209\u1235", "\u1228\u1261\u12D5", "\u1213\u1219\u1235", "\u12D3\u122D\u1262", "\u1240\u12F3\u121D"], 
								weekday_names_narrow : ["\u1230\u1295\u1260", "\u1230\u1291\u12ED", "\u1230\u1209\u1235", "\u1228\u1261\u12D5", "\u1213\u1219\u1235", "\u12D3\u122D\u1262", "\u1240\u12F3\u121D"], 
								month_names_long : ["\u1325\u122A", "\u1208\u12AB\u1272\u1275", "\u1218\u130B\u1262\u1275", "\u121A\u12EB\u12DD\u12EB", "\u130D\u1295\u1266\u1275", "\u1230\u1290", "\u1213\u121D\u1208", "\u1290\u1213\u1230", "\u1218\u1235\u12A8\u1228\u121D", "\u1325\u1245\u121D\u1272", "\u1215\u12F3\u122D", "\u1273\u1215\u1233\u1235"], 
								month_names_short : ["\u1325\u122A\u0020", "\u1208\u12AB\u1272", "\u1218\u130B\u1262", "\u121A\u12EB\u12DD", "\u130D\u1295\u1266", "\u1230\u1290\u0020", "\u1213\u121D\u1208", "\u1290\u1213\u1230", "\u1218\u1235\u12A8", "\u1325\u1245\u121D", "\u1215\u12F3\u122D", "\u1273\u1215\u1233"], 
								month_names_narrow : ["\u1325\u122A\u0020", "\u1208\u12AB\u1272", "\u1218\u130B\u1262", "\u121A\u12EB\u12DD", "\u130D\u1295\u1266", "\u1230\u1290\u0020", "\u1213\u121D\u1208", "\u1290\u1213\u1230", "\u1218\u1235\u12A8", "\u1325\u1245\u121D", "\u1215\u12F3\u122D", "\u1273\u1215\u1233"], 
								ampm : ["\u1295\u1309\u1206> <U1230\u12D3\u1270", "\u12F5\u1215\u122D> <U1230\u12D3\u1275"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u1361\u0020\u0025\u0042\u0020\u0025\u0065\u0020\u1218\u12D3\u120D\u1272\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u1361\u0020\u0025\u0042\u0020\u0025\u0065\u0020\u1218\u12D3\u120D\u1272\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059\u0020\u12D3\u002F\u121D", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ti_ER;
					}
					break;
				case "ti":
				case "ti_ET":
				case "ti_et":
					{

						if (!nexacro.Locale.ti_ET) {
							nexacro.Locale.ti_ET = {
								name : "ti_ET", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0045\u0054\u0042\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u1230\u1295\u1260\u1275", "\u1230\u1291\u12ED", "\u1230\u1209\u1235", "\u1228\u1261\u12D5", "\u1213\u1219\u1235", "\u12D3\u122D\u1262", "\u1240\u12F3\u121D"], 
								weekday_names_short : ["\u1230\u1295\u1260", "\u1230\u1291\u12ED", "\u1230\u1209\u1235", "\u1228\u1261\u12D5", "\u1213\u1219\u1235", "\u12D3\u122D\u1262", "\u1240\u12F3\u121D"], 
								weekday_names_narrow : ["\u1230\u1295\u1260", "\u1230\u1291\u12ED", "\u1230\u1209\u1235", "\u1228\u1261\u12D5", "\u1213\u1219\u1235", "\u12D3\u122D\u1262", "\u1240\u12F3\u121D"], 
								month_names_long : ["\u1303\u1295\u12E9\u12C8\u122A", "\u134C\u1265\u1229\u12C8\u122A", "\u121B\u122D\u127D", "\u12A4\u1355\u1228\u120D", "\u121C\u12ED", "\u1301\u1295", "\u1301\u120B\u12ED", "\u12A6\u1308\u1235\u1275", "\u1234\u1355\u1274\u121D\u1260\u122D", "\u12A6\u12AD\u1270\u12CD\u1260\u122D", "\u1296\u126C\u121D\u1260\u122D", "\u12F2\u1234\u121D\u1260\u122D"], 
								month_names_short : ["\u1303\u1295\u12E9", "\u134C\u1265\u1229", "\u121B\u122D\u127D", "\u12A4\u1355\u1228", "\u121C\u12ED\u0020", "\u1301\u1295\u0020", "\u1301\u120B\u12ED", "\u12A6\u1308\u1235", "\u1234\u1355\u1274", "\u12A6\u12AD\u1270", "\u1296\u126C\u121D", "\u12F2\u1234\u121D"], 
								month_names_narrow : ["\u1303\u1295\u12E9", "\u134C\u1265\u1229", "\u121B\u122D\u127D", "\u12A4\u1355\u1228", "\u121C\u12ED\u0020", "\u1301\u1295\u0020", "\u1301\u120B\u12ED", "\u12A6\u1308\u1235", "\u1234\u1355\u1274", "\u12A6\u12AD\u1270", "\u1296\u126C\u121D", "\u12F2\u1234\u121D"], 
								ampm : ["\u1295\u1309\u1206> <U1230\u12D3\u1270", "\u12F5\u1215\u122D> <U1230\u12D3\u1275"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u006C\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0058\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u1363\u0020\u0025\u0042\u0020\u0025\u0065\u0020\u1218\u12D3\u120D\u1272\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u1363\u0020\u0025\u0042\u0020\u0025\u0065\u0020\u1218\u12D3\u120D\u1272\u0020\u0025\u0072\u0020\u0025\u005A\u0020\u0025\u0059\u0020\u12D3\u002F\u121D", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ti_ET;
					}
					break;
				case "tl":
				case "tl_PH":
				case "tl_ph":
					{

						if (!nexacro.Locale.tl_PH) {
							nexacro.Locale.tl_PH = {
								name : "tl_PH", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0050\u0048\u0050\u0020", 
								currency_symbol : "\u0050\u0068\u0050", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u004C\u0069\u006E\u0067\u0067\u006F", "\u004C\u0075\u006E\u0065\u0073", "\u004D\u0061\u0072\u0074\u0065\u0073", "\u004D\u0069\u0079\u0065\u0072\u006B\u006F\u006C\u0065\u0073", "\u0048\u0075\u0077\u0065\u0062\u0065\u0073", "\u0042\u0069\u0079\u0065\u0072\u006E\u0065\u0073", "\u0053\u0061\u0062\u0061\u0064\u006F"], 
								weekday_names_short : ["\u004C\u0069\u006E", "\u004C\u0075\u006E", "\u004D\u0061\u0072", "\u004D\u0069\u0079", "\u0048\u0075\u0077", "\u0042\u0069\u0079", "\u0053\u0061\u0062"], 
								weekday_names_narrow : ["\u004C\u0069\u006E", "\u004C\u0075\u006E", "\u004D\u0061\u0072", "\u004D\u0069\u0079", "\u0048\u0075\u0077", "\u0042\u0069\u0079", "\u0053\u0061\u0062"], 
								month_names_long : ["\u0045\u006E\u0065\u0072\u006F", "\u0050\u0065\u0062\u0072\u0065\u0072\u006F", "\u004D\u0061\u0072\u0073\u006F", "\u0041\u0062\u0072\u0069\u006C", "\u004D\u0061\u0079\u006F", "\u0048\u0075\u006E\u0079\u006F", "\u0048\u0075\u006C\u0079\u006F", "\u0041\u0067\u006F\u0073\u0074\u006F", "\u0053\u0065\u0070\u0074\u0069\u0079\u0065\u006D\u0062\u0072\u0065", "\u004F\u006B\u0074\u0075\u0062\u0072\u0065", "\u004E\u006F\u0062\u0069\u0079\u0065\u006D\u0062\u0072\u0065", "\u0044\u0069\u0073\u0079\u0065\u006D\u0062\u0072\u0065"], 
								month_names_short : ["\u0045\u006E\u0065", "\u0050\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0079", "\u0048\u0075\u006E", "\u0048\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0062", "\u0044\u0069\u0073"], 
								month_names_narrow : ["\u0045\u006E\u0065", "\u0050\u0065\u0062", "\u004D\u0061\u0072", "\u0041\u0062\u0072", "\u004D\u0061\u0079", "\u0048\u0075\u006E", "\u0048\u0075\u006C", "\u0041\u0067\u006F", "\u0053\u0065\u0070", "\u004F\u006B\u0074", "\u004E\u006F\u0062", "\u0044\u0069\u0073"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u006D\u002F\u0025\u0064\u002F\u0025\u0079", 
								time_format : "\u0025\u0072", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0072\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.tl_PH;
					}
					break;
				case "tn":
				case "tn_ZA":
				case "tn_za":
					{

						if (!nexacro.Locale.tn_ZA) {
							nexacro.Locale.tn_ZA = {
								name : "tn_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u006C\u0061\u0054\u0073\u0068\u0069\u0070\u0069", "\u004D\u006F\u0073\u0075\u0070\u006F\u006C\u006F\u0067\u006F", "\u004C\u0061\u0062\u006F\u0062\u0065\u0064\u0069", "\u004C\u0061\u0062\u006F\u0072\u0061\u0072\u006F", "\u004C\u0061\u0062\u006F\u006E\u0065", "\u004C\u0061\u0062\u006F\u0074\u006C\u0068\u0061\u006E\u006F", "\u004C\u0061\u006D\u0061\u0074\u006C\u0068\u0061\u0074\u0073\u006F"], 
								weekday_names_short : ["\u0054\u0073\u0068", "\u004D\u006F\u0073", "\u0042\u0065\u0064", "\u0052\u0061\u0072", "\u004E\u0065", "\u0054\u006C\u0068", "\u004D\u0061\u0074"], 
								weekday_names_narrow : ["\u0054\u0073\u0068", "\u004D\u006F\u0073", "\u0042\u0065\u0064", "\u0052\u0061\u0072", "\u004E\u0065", "\u0054\u006C\u0068", "\u004D\u0061\u0074"], 
								month_names_long : ["\u0046\u0065\u0072\u0069\u006B\u0067\u006F\u006E\u0067", "\u0054\u006C\u0068\u0061\u006B\u006F\u006C\u0065", "\u004D\u006F\u0070\u0069\u0074\u006C\u0077\u0065", "\u004D\u006F\u0072\u0061\u006E\u0061\u006E\u0067", "\u004D\u006F\u0074\u0073\u0068\u0065\u0067\u0061\u006E\u006F\u006E\u0067", "\u0053\u0065\u0065\u0074\u0065\u0062\u006F\u0073\u0069\u0067\u006F", "\u0050\u0068\u0075\u006B\u0077\u0069", "\u0050\u0068\u0061\u0074\u0077\u0065", "\u004C\u0077\u0065\u0074\u0073\u0065", "\u0044\u0069\u0070\u0068\u0061\u006C\u0061\u006E\u0065", "\u004E\u0067\u0077\u0061\u006E\u0061\u0074\u0073\u0065\u006C\u0065", "\u0053\u0065\u0064\u0069\u006D\u006F\u006E\u0074\u0068\u006F\u006C\u0065"], 
								month_names_short : ["\u0046\u0065\u0072", "\u0054\u006C\u0068", "\u004D\u006F\u0070", "\u004D\u006F\u0072", "\u004D\u006F\u0074", "\u0053\u0065\u0065", "\u0050\u0068\u0075", "\u0050\u0068\u0061", "\u004C\u0077\u0065", "\u0044\u0069\u0070", "\u004E\u0067\u0077", "\u0053\u0065\u0064"], 
								month_names_narrow : ["\u0046\u0065\u0072", "\u0054\u006C\u0068", "\u004D\u006F\u0070", "\u004D\u006F\u0072", "\u004D\u006F\u0074", "\u0053\u0065\u0065", "\u0050\u0068\u0075", "\u0050\u0068\u0061", "\u004C\u0077\u0065", "\u0044\u0069\u0070", "\u004E\u0067\u0077", "\u0053\u0065\u0064"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u002D\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.tn_ZA;
					}
					break;
				case "tr_CY":
				case "tr_cy":
					{

						if (!nexacro.Locale.tr_CY) {
							nexacro.Locale.tr_CY = {
								name : "tr_CY", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0054\u0052\u0059\u0020", 
								currency_symbol : "\u0059\u0054\u004C", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0050\u0061\u007A\u0061\u0072", "\u0050\u0061\u007A\u0061\u0072\u0074\u0065\u0073\u0069", "\u0053\u0061\u006C\u0131", "\u00C7\u0061\u0072\u015F\u0061\u006D\u0062\u0061", "\u0050\u0065\u0072\u015F\u0065\u006D\u0062\u0065", "\u0043\u0075\u006D\u0061", "\u0043\u0075\u006D\u0061\u0072\u0074\u0065\u0073\u0069"], 
								weekday_names_short : ["\u0050\u0061\u007A", "\u0050\u007A\u0074", "\u0053\u0061\u006C", "\u00C7\u0072\u015F", "\u0050\u0072\u015F", "\u0043\u0075\u006D", "\u0043\u0074\u0073"], 
								weekday_names_narrow : ["\u0050\u0061\u007A", "\u0050\u007A\u0074", "\u0053\u0061\u006C", "\u00C7\u0072\u015F", "\u0050\u0072\u015F", "\u0043\u0075\u006D", "\u0043\u0074\u0073"], 
								month_names_long : ["\u004F\u0063\u0061\u006B", "\u015E\u0075\u0062\u0061\u0074", "\u004D\u0061\u0072\u0074", "\u004E\u0069\u0073\u0061\u006E", "\u004D\u0061\u0079\u0131\u0073", "\u0048\u0061\u007A\u0069\u0072\u0061\u006E", "\u0054\u0065\u006D\u006D\u0075\u007A", "\u0041\u011F\u0075\u0073\u0074\u006F\u0073", "\u0045\u0079\u006C\u00FC\u006C", "\u0045\u006B\u0069\u006D", "\u004B\u0061\u0073\u0131\u006D", "\u0041\u0072\u0061\u006C\u0131\u006B"], 
								month_names_short : ["\u004F\u0063\u0061", "\u015E\u0075\u0062", "\u004D\u0061\u0072", "\u004E\u0069\u0073", "\u004D\u0061\u0079", "\u0048\u0061\u007A", "\u0054\u0065\u006D", "\u0041\u011F\u0075", "\u0045\u0079\u006C", "\u0045\u006B\u0069", "\u004B\u0061\u0073", "\u0041\u0072\u0061"], 
								month_names_narrow : ["\u004F\u0063\u0061", "\u015E\u0075\u0062", "\u004D\u0061\u0072", "\u004E\u0069\u0073", "\u004D\u0061\u0079", "\u0048\u0061\u007A", "\u0054\u0065\u006D", "\u0041\u011F\u0075", "\u0045\u0079\u006C", "\u0045\u006B\u0069", "\u004B\u0061\u0073", "\u0041\u0072\u0061"], 
								ampm : ["\u00D6\u00D6", "\u00D6\u0053"], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.tr_CY;
					}
					break;
				case "tr":
				case "tr_TR":
				case "tr_tr":
					{

						if (!nexacro.Locale.tr_TR) {
							nexacro.Locale.tr_TR = {
								name : "tr_TR", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0054\u0052\u0059\u0020", 
								currency_symbol : "\u0054\u004C", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0050\u0061\u007A\u0061\u0072", "\u0050\u0061\u007A\u0061\u0072\u0074\u0065\u0073\u0069", "\u0053\u0061\u006C\u0131", "\u00C7\u0061\u0072\u015F\u0061\u006D\u0062\u0061", "\u0050\u0065\u0072\u015F\u0065\u006D\u0062\u0065", "\u0043\u0075\u006D\u0061", "\u0043\u0075\u006D\u0061\u0072\u0074\u0065\u0073\u0069"], 
								weekday_names_short : ["\u0050\u0061\u007A", "\u0050\u007A\u0074", "\u0053\u0061\u006C", "\u00C7\u0072\u015F", "\u0050\u0072\u015F", "\u0043\u0075\u006D", "\u0043\u0074\u0073"], 
								weekday_names_narrow : ["\u0050\u0061\u007A", "\u0050\u007A\u0074", "\u0053\u0061\u006C", "\u00C7\u0072\u015F", "\u0050\u0072\u015F", "\u0043\u0075\u006D", "\u0043\u0074\u0073"], 
								month_names_long : ["\u004F\u0063\u0061\u006B", "\u015E\u0075\u0062\u0061\u0074", "\u004D\u0061\u0072\u0074", "\u004E\u0069\u0073\u0061\u006E", "\u004D\u0061\u0079\u0131\u0073", "\u0048\u0061\u007A\u0069\u0072\u0061\u006E", "\u0054\u0065\u006D\u006D\u0075\u007A", "\u0041\u011F\u0075\u0073\u0074\u006F\u0073", "\u0045\u0079\u006C\u00FC\u006C", "\u0045\u006B\u0069\u006D", "\u004B\u0061\u0073\u0131\u006D", "\u0041\u0072\u0061\u006C\u0131\u006B"], 
								month_names_short : ["\u004F\u0063\u0061", "\u015E\u0075\u0062", "\u004D\u0061\u0072", "\u004E\u0069\u0073", "\u004D\u0061\u0079", "\u0048\u0061\u007A", "\u0054\u0065\u006D", "\u0041\u011F\u0075", "\u0045\u0079\u006C", "\u0045\u006B\u0069", "\u004B\u0061\u0073", "\u0041\u0072\u0061"], 
								month_names_narrow : ["\u004F\u0063\u0061", "\u015E\u0075\u0062", "\u004D\u0061\u0072", "\u004E\u0069\u0073", "\u004D\u0061\u0079", "\u0048\u0061\u007A", "\u0054\u0065\u006D", "\u0041\u011F\u0075", "\u0045\u0079\u006C", "\u0045\u006B\u0069", "\u004B\u0061\u0073", "\u0041\u0072\u0061"], 
								ampm : ["\u00D6\u00D6", "\u00D6\u0053"], 
								date_format : "\u0025\u0064\u002D\u0025\u006D\u002D\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0041", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.tr_TR;
					}
					break;
				case "ts":
				case "ts_ZA":
				case "ts_za":
					{

						if (!nexacro.Locale.ts_ZA) {
							nexacro.Locale.ts_ZA = {
								name : "ts_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u006F\u006E\u0074\u006F", "\u004D\u0075\u0073\u0075\u006D\u0062\u0068\u0075\u006E\u0075\u006B\u0075", "\u0052\u0061\u0076\u0075\u006D\u0062\u0069\u0072\u0068\u0069", "\u0052\u0061\u0076\u0075\u006E\u0068\u0061\u0072\u0068\u0075", "\u0052\u0061\u0076\u0075\u006D\u0075\u006E\u0065", "\u0052\u0061\u0076\u0075\u006E\u0074\u006C\u0068\u0061\u006E\u0075", "\u004D\u0075\u0067\u0071\u0069\u0076\u0065\u006C\u0061"], 
								weekday_names_short : ["\u0053\u006F\u006E", "\u004D\u0075\u0073", "\u0042\u0069\u0072", "\u0048\u0061\u0072", "\u004E\u0065", "\u0054\u006C\u0068", "\u004D\u0075\u0067"], 
								weekday_names_narrow : ["\u0053\u006F\u006E", "\u004D\u0075\u0073", "\u0042\u0069\u0072", "\u0048\u0061\u0072", "\u004E\u0065", "\u0054\u006C\u0068", "\u004D\u0075\u0067"], 
								month_names_long : ["\u0053\u0075\u006E\u0067\u0075\u0074\u0069", "\u004E\u0079\u0065\u006E\u0079\u0065\u006E\u0079\u0061\u006E\u0069", "\u004E\u0079\u0065\u006E\u0079\u0061\u006E\u006B\u0075\u006C\u0075", "\u0044\u007A\u0069\u0076\u0061\u006D\u0069\u0073\u006F\u006B\u006F", "\u004D\u0075\u0064\u0079\u0061\u0078\u0069\u0068\u0069", "\u004B\u0068\u006F\u0074\u0061\u0076\u0075\u0078\u0069\u006B\u0061", "\u004D\u0061\u0077\u0075\u0077\u0061\u006E\u0069", "\u004D\u0068\u0061\u0077\u0075\u0072\u0069", "\u004E\u0064\u007A\u0068\u0061\u0074\u0069", "\u004E\u0068\u006C\u0061\u006E\u0067\u0075\u006C\u0061", "\u0048\u0075\u006B\u0075\u0072\u0069", "\u004E\u0027\u0077\u0065\u006E\u0064\u007A\u0061\u006D\u0068\u0061\u006C\u0061"], 
								month_names_short : ["\u0053\u0075\u006E", "\u0059\u0061\u006E", "\u004B\u0075\u006C", "\u0044\u007A\u0069", "\u004D\u0075\u0064", "\u004B\u0068\u006F", "\u004D\u0061\u0077", "\u004D\u0068\u0061", "\u004E\u0064\u007A", "\u004E\u0068\u006C", "\u0048\u0075\u006B", "\u004E\u0027\u0077"], 
								month_names_narrow : ["\u0053\u0075\u006E", "\u0059\u0061\u006E", "\u004B\u0075\u006C", "\u0044\u007A\u0069", "\u004D\u0075\u0064", "\u004B\u0068\u006F", "\u004D\u0061\u0077", "\u004D\u0068\u0061", "\u004E\u0064\u007A", "\u004E\u0068\u006C", "\u0048\u0075\u006B", "\u004E\u0027\u0077"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u002D\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ts_ZA;
					}
					break;
				case "tt":
				case "tt_RU":
				case "tt_ru":
					{

						if (!nexacro.Locale.tt_RU) {
							nexacro.Locale.tt_RU = {
								name : "tt_RU", 
								decimal_point : "\u002C", 
								thousands_sep : "\u2002", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0052\u0055\u0042\u0020", 
								currency_symbol : "\u0440\u002E", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u042F\u043A\u0448\u04D9\u043C\u0431\u0435", "\u0414\u044B\u0448\u04D9\u043C\u0431\u0435", "\u0421\u0438\u0448\u04D9\u043C\u0431\u0435", "\u0427\u04D9\u0440\u0448\u04D9\u04D9\u043C\u0431\u0435", "\u041F\u04D9\u043D\u0497\u0435\u0448\u043C\u0431\u0435", "\u0496\u043E\u043C\u0433\u0430", "\u0428\u0438\u043C\u0431\u04D9"], 
								weekday_names_short : ["\u042F\u043A\u0448", "\u0414\u044B\u0448", "\u0421\u0438\u0448", "\u0427\u04D9\u0440\u0448", "\u041F\u04D9\u043D\u0497", "\u0496\u043E\u043C", "\u0428\u0438\u043C"], 
								weekday_names_narrow : ["\u042F\u043A\u0448", "\u0414\u044B\u0448", "\u0421\u0438\u0448", "\u0427\u04D9\u0440\u0448", "\u041F\u04D9\u043D\u0497", "\u0496\u043E\u043C", "\u0428\u0438\u043C"], 
								month_names_long : ["\u042F\u043D\u0432\u0430\u0440\u044F", "\u0424\u0435\u0432\u0440\u0430\u043B\u044F", "\u041C\u0430\u0440\u0442\u0430", "\u0410\u043F\u0440\u0435\u043B\u044F", "\u041C\u0430\u044F", "\u0418\u044E\u043D\u044F", "\u0418\u044E\u043B\u044F", "\u0410\u0432\u0433\u0443\u0441\u0442\u0430", "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044F", "\u041E\u043A\u0442\u044F\u0431\u0440\u044F", "\u041D\u043E\u044F\u0431\u0440\u044F", "\u0414\u0435\u043A\u0430\u0431\u0440\u044F"], 
								month_names_short : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								month_names_narrow : ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "\u041C\u0430\u0440", "\u0410\u043F\u0440", "\u041C\u0430\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "\u0410\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.tt_RU;
					}
					break;
				case "uk":
				case "uk_UA":
				case "uk_ua":
					{

						if (!nexacro.Locale.uk_UA) {
							nexacro.Locale.uk_UA = {
								name : "uk_UA", 
								decimal_point : "\u002C", 
								thousands_sep : "\u0020", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u0041\u0048\u0020", 
								currency_symbol : "\u20B4", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u0020", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 0, 
								n_cs_precedes : 0, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u041D\u0435\u0434\u0456\u043B\u044F", "\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A", "\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A", "\u0421\u0435\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440", "\u041F\u0027\u044F\u0442\u043D\u0438\u0446\u044F", "\u0421\u0443\u0431\u043E\u0442\u0430"], 
								weekday_names_short : ["\u041D\u0434\u043B", "\u041F\u043D\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0431\u0442"], 
								weekday_names_narrow : ["\u041D\u0434\u043B", "\u041F\u043D\u0434", "\u0412\u0442\u0440", "\u0421\u0440\u0434", "\u0427\u0442\u0432", "\u041F\u0442\u043D", "\u0421\u0431\u0442"], 
								month_names_long : ["\u0421\u0456\u0447\u0435\u043D\u044C", "\u041B\u044E\u0442\u0438\u0439", "\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C", "\u041A\u0432\u0456\u0442\u0435\u043D\u044C", "\u0422\u0440\u0430\u0432\u0435\u043D\u044C", "\u0427\u0435\u0440\u0432\u0435\u043D\u044C", "\u041B\u0438\u043F\u0435\u043D\u044C", "\u0421\u0435\u0440\u043F\u0435\u043D\u044C", "\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C", "\u0416\u043E\u0432\u0442\u0435\u043D\u044C", "\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434", "\u0413\u0440\u0443\u0434\u0435\u043D\u044C"], 
								month_names_short : ["\u0421\u0456\u0447", "\u041B\u044E\u0442", "\u0411\u0435\u0440", "\u041A\u0432\u0456", "\u0422\u0440\u0430", "\u0427\u0435\u0440", "\u041B\u0438\u043F", "\u0421\u0435\u0440", "\u0412\u0435\u0440", "\u0416\u043E\u0432", "\u041B\u0438\u0441", "\u0413\u0440\u0443"], 
								month_names_narrow : ["\u0421\u0456\u0447", "\u041B\u044E\u0442", "\u0411\u0435\u0440", "\u041A\u0432\u0456", "\u0422\u0440\u0430", "\u0427\u0435\u0440", "\u041B\u0438\u043F", "\u0421\u0435\u0440", "\u0412\u0435\u0440", "\u0416\u043E\u0432", "\u041B\u0438\u0441", "\u0413\u0440\u0443"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0065\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0070\u002E", 
								shortdate_format : "\u0025\u0064\u002E\u0025\u006D\u002E\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.uk_UA;
					}
					break;
				case "ur":
				case "ur_PK":
				case "ur_pk":
					{

						if (!nexacro.Locale.ur_PK) {
							nexacro.Locale.ur_PK = {
								name : "ur_PK", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0050\u004B\u0052\u0020", 
								currency_symbol : "\u0052\u0073", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 2, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u064A\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u0647", "\u0647\u0641\u062A\u0647"], 
								weekday_names_short : ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u064A\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u0647", "\u0647\u0641\u062A\u0647"], 
								weekday_names_narrow : ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u064A\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u0647", "\u0647\u0641\u062A\u0647"], 
								month_names_long : ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0653\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u064A", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], 
								month_names_short : ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0653\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u064A", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], 
								month_names_narrow : ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0653\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u064A", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], 
								ampm : ["\u0635", "\u0634"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0050\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0648\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u062A\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "rtl"
							};
						}

						return nexacro.Locale.ur_PK;
					}
					break;
				case "uz":
				case "uz_UZ":
				case "uz_uz":
					{

						if (!nexacro.Locale.uz_UZ) {
							nexacro.Locale.uz_UZ = {
								name : "uz_UZ", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u005A\u0053\u0020", 
								currency_symbol : "\u0073\u006F\u0027\u006D", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0059\u0061\u006B\u0073\u0068\u0061\u006E\u0062\u0061", "\u0044\u0075\u0073\u0068\u0061\u006E\u0062\u0061", "\u0053\u0065\u0073\u0068\u0061\u006E\u0062\u0061", "\u0043\u0068\u006F\u0072\u0073\u0068\u0061\u006E\u0062\u0061", "\u0050\u0061\u0079\u0073\u0068\u0061\u006E\u0062\u0061", "\u004A\u0075\u006D\u0061", "\u0053\u0068\u0061\u006E\u0062\u0061"], 
								weekday_names_short : ["\u0059\u0061\u006B", "\u0044\u0075", "\u0053\u0065", "\u0043\u0068\u006F", "\u0050\u0061\u0079", "\u004A\u0075", "\u0053\u0068\u0061"], 
								weekday_names_narrow : ["\u0059\u0061\u006B", "\u0044\u0075", "\u0053\u0065", "\u0043\u0068\u006F", "\u0050\u0061\u0079", "\u004A\u0075", "\u0053\u0068\u0061"], 
								month_names_long : ["\u0059\u0061\u006E\u0076\u0061\u0072", "\u0046\u0065\u0076\u0072\u0061\u006C", "\u004D\u0061\u0072\u0074", "\u0041\u0070\u0072\u0065\u006C", "\u004D\u0061\u0079", "\u0049\u0079\u0075\u006E", "\u0049\u0079\u0075\u006C", "\u0041\u0076\u0067\u0075\u0073\u0074", "\u0053\u0065\u006E\u0074\u0079\u0061\u0062\u0072", "\u004F\u006B\u0074\u0079\u0061\u0062\u0072", "\u004E\u006F\u0079\u0061\u0062\u0072", "\u0044\u0065\u006B\u0061\u0062\u0072"], 
								month_names_short : ["\u0059\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u0049\u0079\u006E", "\u0049\u0079\u006C", "\u0041\u0076\u0067", "\u0053\u0065\u006E", "\u004F\u006B\u0074", "\u004E\u006F\u0079", "\u0044\u0065\u006B"], 
								month_names_narrow : ["\u0059\u0061\u006E", "\u0046\u0065\u0076", "\u004D\u0061\u0072", "\u0041\u0070\u0072", "\u004D\u0061\u0079", "\u0049\u0079\u006E", "\u0049\u0079\u006C", "\u0041\u0076\u0067", "\u0053\u0065\u006E", "\u004F\u006B\u0074", "\u004E\u006F\u0079", "\u0044\u0065\u006B"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0054\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059\u0020\u0079\u0069\u006C\u002C\u0020\u0025\u0041", 
								full_date_time_format : "\u0025\u0064\u0020\u0025\u0042\u002C\u0020\u0025\u0059\u0020\u0079\u0069\u006C\u002C\u0020\u0025\u0041", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.uz_UZ;
					}
					break;
				case "ve":
				case "ve_ZA":
				case "ve_za":
					{

						if (!nexacro.Locale.ve_ZA) {
							nexacro.Locale.ve_ZA = {
								name : "ve_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0053\u0077\u006F\u006E\u0064\u0061\u0068\u0061", "\u004D\u0075\u0073\u0075\u006D\u0062\u0075\u006C\u0075\u0077\u006F", "\u1E3C\u0061\u0076\u0068\u0075\u0076\u0068\u0069\u006C\u0069", "\u1E3C\u0061\u0076\u0068\u0075\u0072\u0061\u0072\u0075", "\u1E3C\u0061\u0076\u0068\u0075\u1E4B\u0061", "\u1E3C\u0061\u0076\u0068\u0075\u1E71\u0061\u006E\u0075", "\u004D\u0075\u0067\u0069\u0076\u0068\u0065\u006C\u0061"], 
								weekday_names_short : ["\u0053\u0077\u006F", "\u004D\u0075\u0073", "\u0056\u0068\u0069", "\u0052\u0061\u0072", "\u1E4B\u0061", "\u1E70\u0061\u006E", "\u004D\u0075\u0067"], 
								weekday_names_narrow : ["\u0053\u0077\u006F", "\u004D\u0075\u0073", "\u0056\u0068\u0069", "\u0052\u0061\u0072", "\u1E4B\u0061", "\u1E70\u0061\u006E", "\u004D\u0075\u0067"], 
								month_names_long : ["\u0050\u0068\u0061\u006E\u0064\u006F", "\u004C\u0075\u0068\u0075\u0068\u0069", "\u1E70\u0068\u0061\u0066\u0061\u006D\u0075\u0068\u0077\u0065", "\u004C\u0061\u006D\u0062\u0061\u006D\u0061\u0069", "\u0053\u0068\u0075\u006E\u0064\u0075\u006E\u0074\u0068\u0075\u006C\u0065", "\u0046\u0075\u006C\u0077\u0069", "\u0046\u0075\u006C\u0077\u0061\u006E\u0061", "\u1E70\u0068\u0061\u006E\u0067\u0075\u006C\u0065", "\u004B\u0068\u0075\u0062\u0076\u0075\u006D\u0065\u0064\u007A\u0069", "\u0054\u0073\u0068\u0069\u006D\u0065\u0064\u007A\u0069", "\u1E3C\u0061\u0072\u0061", "\u004E\u0079\u0065\u006E\u0064\u0061\u0076\u0068\u0075\u0073\u0069\u006B\u0075"], 
								month_names_short : ["\u0050\u0068\u0061", "\u004C\u0075\u0068", "\u0046\u0061\u006D", "\u004C\u0061\u006D", "\u0053\u0068\u0075", "\u004C\u0077\u0069", "\u004C\u0077\u0061", "\u004E\u0067\u0075", "\u004B\u0068\u0075", "\u0054\u0073\u0068", "\u1E3C\u0061\u0072", "\u004E\u0079\u0065"], 
								month_names_narrow : ["\u0050\u0068\u0061", "\u004C\u0075\u0068", "\u0046\u0061\u006D", "\u004C\u0061\u006D", "\u0053\u0068\u0075", "\u004C\u0077\u0069", "\u004C\u0077\u0061", "\u004E\u0067\u0075", "\u004B\u0068\u0075", "\u0054\u0073\u0068", "\u1E3C\u0061\u0072", "\u004E\u0079\u0065"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u0064\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.ve_ZA;
					}
					break;
				case "vi":
				case "vi_VN":
				case "vi_vn":
					{

						if (!nexacro.Locale.vi_VN) {
							nexacro.Locale.vi_VN = {
								name : "vi_VN", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0056\u004E\u0044\u0020", 
								currency_symbol : "\u20AB", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0043\u0068\u1EE7\u0020\u006E\u0068\u1EAD\u0074", "\u0054\u0068\u1EE9\u0020\u0068\u0061\u0069", "\u0054\u0068\u1EE9\u0020\u0062\u0061", "\u0054\u0068\u1EE9\u0020\u0074\u01B0", "\u0054\u0068\u1EE9\u0020\u006E\u0103\u006D", "\u0054\u0068\u1EE9\u0020\u0073\u00E1\u0075", "\u0054\u0068\u1EE9\u0020\u0062\u1EA3\u0079"], 
								weekday_names_short : ["\u0043\u004E", "\u0054\u0032", "\u0054\u0033", "\u0054\u0034", "\u0054\u0035", "\u0054\u0036", "\u0054\u0037"], 
								weekday_names_narrow : ["\u0043\u004E", "\u0054\u0032", "\u0054\u0033", "\u0054\u0034", "\u0054\u0035", "\u0054\u0036", "\u0054\u0037"], 
								month_names_long : ["\u0054\u0068\u00E1\u006E\u0067\u0020\u006D\u1ED9\u0074", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0068\u0061\u0069", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0062\u0061", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0074\u01B0", "\u0054\u0068\u00E1\u006E\u0067\u0020\u006E\u0103\u006D", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0073\u00E1\u0075", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0062\u1EA3\u0079", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0074\u00E1\u006D", "\u0054\u0068\u00E1\u006E\u0067\u0020\u0063\u0068\u00ED\u006E", "\u0054\u0068\u00E1\u006E\u0067\u0020\u006D\u01B0\u1EDD\u0069", "\u0054\u0068\u00E1\u006E\u0067\u0020\u006D\u01B0\u1EDD\u0069\u0020\u006D\u1ED9\u0074", "\u0054\u0068\u00E1\u006E\u0067\u0020\u006D\u01B0\u1EDD\u0069\u0020\u0068\u0061\u0069"], 
								month_names_short : ["\u0054\u0068\u0030\u0031", "\u0054\u0068\u0030\u0032", "\u0054\u0068\u0030\u0033", "\u0054\u0068\u0030\u0034", "\u0054\u0068\u0030\u0035", "\u0054\u0068\u0030\u0036", "\u0054\u0068\u0030\u0037", "\u0054\u0068\u0030\u0038", "\u0054\u0068\u0030\u0039", "\u0054\u0068\u0031\u0030", "\u0054\u0068\u0031\u0031", "\u0054\u0068\u0031\u0032"], 
								month_names_narrow : ["\u0054\u0068\u0030\u0031", "\u0054\u0068\u0030\u0032", "\u0054\u0068\u0030\u0033", "\u0054\u0068\u0030\u0034", "\u0054\u0068\u0030\u0035", "\u0054\u0068\u0030\u0036", "\u0054\u0068\u0030\u0037", "\u0054\u0068\u0030\u0038", "\u0054\u0068\u0030\u0039", "\u0054\u0068\u0031\u0030", "\u0054\u0068\u0031\u0031", "\u0054\u0068\u0031\u0032"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u0020\u0025\u0070", 
								date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u004E\u0103\u006D\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0041\u002C\u0020\u0025\u0064\u0020\u0025\u0042\u0020\u006E\u0103\u006D\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059", 
								shortdate_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.vi_VN;
					}
					break;
				case "wa":
				case "wa_BE":
				case "wa_be":
					{

						if (!nexacro.Locale.wa_BE) {
							nexacro.Locale.wa_BE = {
								name : "wa_BE", 
								decimal_point : "\u002C", 
								thousands_sep : "\u002E", 
								grouping : [0, 0], 
								int_curr_symbol : "\u0045\u0055\u0052\u0020", 
								currency_symbol : "\u20AC", 
								mon_decimal_point : "\u002C", 
								mon_thousands_sep : "\u002E", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 0, 
								p_sep_by_space : 1, 
								n_cs_precedes : 0, 
								n_sep_by_space : 1, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0064\u0069\u006D\u0065\u0067\u006E\u0065", "\u006C\u006F\u006E\u0064\u0069", "\u006D\u00E5\u0072\u0064\u0069", "\u006D\u0069\u0065\u0072\u006B\u0069\u0064\u0069", "\u0064\u006A\u0075\u0064\u0069", "\u0076\u00E9\u006E\u0072\u0064\u0069", "\u0073\u0065\u006D\u0064\u0069"], 
								weekday_names_short : ["\u0064\u0069\u006D", "\u006C\u006F\u006E", "\u006D\u00E5\u0072", "\u006D\u0069\u0065", "\u0064\u006A\u0075", "\u0076\u00E9\u006E", "\u0073\u0065\u006D"], 
								weekday_names_narrow : ["\u0064\u0069\u006D", "\u006C\u006F\u006E", "\u006D\u00E5\u0072", "\u006D\u0069\u0065", "\u0064\u006A\u0075", "\u0076\u00E9\u006E", "\u0073\u0065\u006D"], 
								month_names_long : ["\u0064\u006A\u0061\u006E\u0076\u00EE", "\u0066\u0065\u0076\u0072\u00EE", "\u006D\u00E5\u0073\u0073", "\u0061\u0076\u0072\u0069", "\u006D\u0061\u0079", "\u0064\u006A\u0075\u006E", "\u0064\u006A\u0075\u006C\u0065\u0074\u0065", "\u0061\u0077\u006F\u0075\u0073\u0073\u0065", "\u0073\u0065\u0074\u0069\u006D\u0062\u0065", "\u006F\u0063\u0074\u00F4\u0062\u0065", "\u006E\u00F4\u0076\u0069\u006D\u0062\u0065", "\u0064\u0065\u0063\u0069\u006D\u0062\u0065"], 
								month_names_short : ["\u0064\u006A\u0061", "\u0066\u0065\u0076", "\u006D\u00E5\u0073", "\u0061\u0076\u0072", "\u006D\u0061\u0079", "\u0064\u006A\u006E", "\u0064\u006A\u006C", "\u0061\u0077\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u00F4\u0076", "\u0064\u0065\u0063"], 
								month_names_narrow : ["\u0064\u006A\u0061", "\u0066\u0065\u0076", "\u006D\u00E5\u0073", "\u0061\u0076\u0072", "\u006D\u0061\u0079", "\u0064\u006A\u006E", "\u0064\u006A\u006C", "\u0061\u0077\u006F", "\u0073\u0065\u0074", "\u006F\u0063\u0074", "\u006E\u00F4\u0076", "\u0064\u0065\u0063"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0070", 
								date_time_format : "\u004C\u0069\u0020\u0025\u0041\u0020\u0025\u0064\u0020\u0064\u0069\u0020\u0025\u0042\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.wa_BE;
					}
					break;
				case "xh":
				case "xh_ZA":
				case "xh_za":
					{

						if (!nexacro.Locale.xh_ZA) {
							nexacro.Locale.xh_ZA = {
								name : "xh_ZA", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u005A\u0041\u0052\u0020", 
								currency_symbol : "\u0052", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u0069\u0043\u0061\u0077\u0061", "\u0075\u004D\u0076\u0075\u006C\u006F", "\u006C\u0077\u0065\u0073\u0069\u0042\u0069\u006E\u0069", "\u006C\u0077\u0065\u0073\u0069\u0054\u0068\u0061\u0074\u0068\u0075", "\u0075\u006C\u0077\u0065\u0053\u0069\u006E\u0065", "\u006C\u0077\u0065\u0073\u0069\u0048\u006C\u0061\u006E\u0075", "\u0075\u004D\u0067\u0071\u0069\u0062\u0065\u006C\u006F"], 
								weekday_names_short : ["\u0043\u0061\u0077", "\u004D\u0076\u0075", "\u0042\u0069\u006E", "\u0054\u0068\u0061", "\u0053\u0069\u006E", "\u0048\u006C\u0061", "\u004D\u0067\u0071"], 
								weekday_names_narrow : ["\u0043\u0061\u0077", "\u004D\u0076\u0075", "\u0042\u0069\u006E", "\u0054\u0068\u0061", "\u0053\u0069\u006E", "\u0048\u006C\u0061", "\u004D\u0067\u0071"], 
								month_names_long : ["\u0065\u0079\u006F\u004D\u0071\u0075\u006E\u0067\u0075", "\u0065\u0079\u006F\u004D\u0064\u0075\u006D\u0062\u0061", "\u0065\u0079\u006F\u004B\u0077\u0069\u006E\u0064\u006C\u0061", "\u0075\u0054\u0073\u0068\u0061\u007A\u0069\u006D\u0070\u0075\u007A\u0069", "\u0075\u0043\u0061\u006E\u007A\u0069\u0062\u0065", "\u0065\u0079\u0065\u0053\u0069\u006C\u0069\u006D\u0065\u006C\u0061", "\u0065\u0079\u0065\u004B\u0068\u0061\u006C\u0061", "\u0065\u0079\u0065\u0054\u0068\u0075\u0070\u0061", "\u0065\u0079\u006F\u004D\u0073\u0069\u006E\u0074\u0073\u0069", "\u0065\u0079\u0065\u0044\u0077\u0061\u0072\u0068\u0061", "\u0065\u0079\u0065\u004E\u006B\u0061\u006E\u0067\u0061", "\u0065\u0079\u006F\u004D\u006E\u0067\u0061"], 
								month_names_short : ["\u004D\u0071\u0075", "\u004D\u0064\u0075", "\u004B\u0077\u0069", "\u0054\u0073\u0068", "\u0043\u0061\u006E", "\u0053\u0069\u006C", "\u004B\u0068\u0061", "\u0054\u0068\u0075", "\u004D\u0073\u0069", "\u0044\u0077\u0061", "\u004E\u006B\u0061", "\u004D\u006E\u0067"], 
								month_names_narrow : ["\u004D\u0071\u0075", "\u004D\u0064\u0075", "\u004B\u0077\u0069", "\u0054\u0073\u0068", "\u0043\u0061\u006E", "\u0053\u0069\u006C", "\u004B\u0068\u0061", "\u0054\u0068\u0075", "\u004D\u0073\u0069", "\u0044\u0077\u0061", "\u004E\u006B\u0061", "\u004D\u006E\u0067"], 
								ampm : ["", ""], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059", 
								time_format : "\u0025\u0054", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0061\u0020\u0025\u002D\u0065\u0020\u0025\u0062\u0020\u0025\u0059\u0020\u0025\u0054\u0020\u0025\u005A", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u002D\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.xh_ZA;
					}
					break;
				case "yi":
				case "yi_US":
				case "yi_us":
					{

						if (!nexacro.Locale.yi_US) {
							nexacro.Locale.yi_US = {
								name : "yi_US", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3, 3], 
								int_curr_symbol : "\u0055\u0053\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3, 3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 1, 
								n_cs_precedes : 1, 
								n_sep_by_space : 1, 
								p_sign_posn : 2, 
								n_sign_posn : 2, 
								weekday_names_long : ["\u05D6\u05D5\u05E0\u05D8\u05D9\u05E7", "\u05DE\u05D0\u05B8\u05E0\u05D8\u05D9\u05E7", "\u05D3\u05D9\u05E0\u05E1\u05D8\u05D9\u05E7", "\u05DE\u05D9\u05D8\u05F0\u05D0\u05B8\u05DA", "\u05D3\u05D0\u05B8\u05E0\u05E2\u05E8\u05E9\u05D8\u05D9\u05E7", "\u05E4\u05BF\u05E8\u05F2\u05B7\u05D8\u05D9\u05E7", "\u05E9\u05D1\u05EA"], 
								weekday_names_short : ["\u05D6\u05D5\u05E0\u0027", "\u05DE\u05D0\u05B8\u05E0\u0027", "\u05D3\u05D9\u05E0\u0027", "\u05DE\u05D9\u05D8\u0027", "\u05D3\u05D0\u05B8\u05E0\u0027", "\u05E4\u05BF\u05E8\u05F2\u05B7\u0027", "\u05E9\u05D1\u05EA"], 
								weekday_names_narrow : ["\u05D6\u05D5\u05E0\u0027", "\u05DE\u05D0\u05B8\u05E0\u0027", "\u05D3\u05D9\u05E0\u0027", "\u05DE\u05D9\u05D8\u0027", "\u05D3\u05D0\u05B8\u05E0\u0027", "\u05E4\u05BF\u05E8\u05F2\u05B7\u0027", "\u05E9\u05D1\u05EA"], 
								month_names_long : ["\u05D9\u05D0\u05B7\u05E0\u05D5\u05D0\u05B7\u05E8", "\u05E4\u05BF\u05E2\u05D1\u05E8\u05D5\u05D0\u05B7\u05E8", "\u05DE\u05D0\u05B7\u05E8\u05E5", "\u05D0\u05B7\u05E4\u05BC\u05E8\u05D9\u05DC", "\u05DE\u05F2\u05B7", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05F1\u05D2\u05D5\u05E1\u05D8", "\u05E1\u05E2\u05E4\u05BC\u05D8\u05E2\u05DE\u05D1\u05E2\u05E8", "\u05D0\u05B8\u05E7\u05D8\u05D0\u05B8\u05D1\u05E2\u05E8", "\u05E0\u05D0\u05B8\u05F0\u05E2\u05DE\u05D1\u05E2\u05E8", "\u05D3\u05E2\u05E6\u05E2\u05DE\u05D1\u05E2\u05E8"], 
								month_names_short : ["\u05D9\u05D0\u05B7\u05E0", "\u05E4\u05BF\u05E2\u05D1", "\u05DE\u05D0\u05B7\u05E8", "\u05D0\u05B7\u05E4\u05BC\u05E8", "\u05DE\u05F2\u05B7\u0020", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05F1\u05D2", "\u05E1\u05E2\u05E4\u05BC", "\u05D0\u05B8\u05E7\u05D8", "\u05E0\u05D0\u05B8\u05F0", "\u05D3\u05E2\u05E6"], 
								month_names_narrow : ["\u05D9\u05D0\u05B7\u05E0", "\u05E4\u05BF\u05E2\u05D1", "\u05DE\u05D0\u05B7\u05E8", "\u05D0\u05B7\u05E4\u05BC\u05E8", "\u05DE\u05F2\u05B7\u0020", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05F1\u05D2", "\u05E1\u05E2\u05E4\u05BC", "\u05D0\u05B8\u05E7\u05D8", "\u05E0\u05D0\u05B8\u05F0", "\u05D3\u05E2\u05E6"], 
								ampm : ["\u0041\u004D", "\u0050\u004D"], 
								date_format : "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0079", 
								time_format : "\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								time_format_ampm : "\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0050", 
								date_time_format : "\u0025\u005A\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u0059\u0020\u0025\u0062\u0020\u0025\u0064\u0020\u0025\u0061", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "", 
								shortdate_format : "", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.yi_US;
					}
					break;
				case "zh":
				case "zh_CN":
				case "zh_cn":
					{

						if (!nexacro.Locale.zh_CN) {
							nexacro.Locale.zh_CN = {
								name : "zh_CN", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0043\u004E\u0059\u0020", 
								currency_symbol : "\uFFE5", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 4, 
								n_sign_posn : 4, 
								weekday_names_long : ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"], 
								weekday_names_short : ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], 
								weekday_names_narrow : ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], 
								month_names_long : ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], 
								month_names_short : ["\u0020\u0031\u6708", "\u0020\u0032\u6708", "\u0020\u0033\u6708", "\u0020\u0034\u6708", "\u0020\u0035\u6708", "\u0020\u0036\u6708", "\u0020\u0037\u6708", "\u0020\u0038\u6708", "\u0020\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								month_names_narrow : ["\u0020\u0031\u6708", "\u0020\u0032\u6708", "\u0020\u0033\u6708", "\u0020\u0034\u6708", "\u0020\u0035\u6708", "\u0020\u0036\u6708", "\u0020\u0037\u6708", "\u0020\u0038\u6708", "\u0020\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								ampm : ["\u4E0A\u5348", "\u4E0B\u5348"], 
								date_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5", 
								time_format : "\u0025\u0048\u65F6\u0025\u004D\u5206\u0025\u0053\u79D2", 
								time_format_ampm : "\u0025\u0070\u0020\u0025\u0049\u65F6\u0025\u004D\u5206\u0025\u0053\u79D2", 
								date_time_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5\u0020\u0025\u0041\u0020\u0025\u0048\u65F6\u0025\u004D\u5206\u0025\u0053\u79D2", 
								full_date_time_format : "\u0025\u0059\u5E74\u0020\u0025\u006D\u6708\u0020\u0025\u0064\u65E5\u0020\u0025\u0041\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u5E74\u0025\u006E\u6708\u0025\u0065\u65E5", 
								shortdate_format : "\u0025\u0059\u002F\u0025\u006E\u002F\u0025\u0065", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.zh_CN;
					}
					break;
				case "zh_HK":
				case "zh_hk":
					{

						if (!nexacro.Locale.zh_HK) {
							nexacro.Locale.zh_HK = {
								name : "zh_HK", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0048\u004B\u0044\u0020", 
								currency_symbol : "\u0048\u004B\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"], 
								weekday_names_short : ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], 
								weekday_names_narrow : ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], 
								month_names_long : ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], 
								month_names_short : ["\u0031\u6708", "\u0032\u6708", "\u0033\u6708", "\u0034\u6708", "\u0035\u6708", "\u0036\u6708", "\u0037\u6708", "\u0038\u6708", "\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								month_names_narrow : ["\u0031\u6708", "\u0032\u6708", "\u0033\u6708", "\u0034\u6708", "\u0035\u6708", "\u0036\u6708", "\u0037\u6708", "\u0038\u6708", "\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								ampm : ["\u4E0A\u5348", "\u4E0B\u5348"], 
								date_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5\u0020\u0025\u0041", 
								time_format : "\u0025\u0049\u6642\u0025\u004D\u5206\u0025\u0053\u79D2\u0020\u0025\u005A", 
								time_format_ampm : "\u0025\u0070\u0020\u0025\u0049\u003A\u0025\u004D\u003A\u0025\u0053", 
								date_time_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5\u0020\u0025\u0041\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u5E74\u0025\u006E\u6708\u0025\u0065\u65E5", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.zh_HK;
					}
					break;
				case "zh_SG":
				case "zh_sg":
					{

						if (!nexacro.Locale.zh_SG) {
							nexacro.Locale.zh_SG = {
								name : "zh_SG", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0053\u0047\u0044\u0020", 
								currency_symbol : "\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								mon_n_sign_posn : 0, 
								weekday_names_long : ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"], 
								weekday_names_short : ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"], 
								weekday_names_narrow : ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"], 
								month_names_long : ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], 
								month_names_short : ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], 
								month_names_narrow : ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], 
								ampm : ["\u4E0A\u5348", "\u4E0B\u5348"], 
								date_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5", 
								time_format : "\u0025\u0048\u65F6\u0025\u004D\u5206\u0025\u0053\u79D2\u0020\u0025\u005A", 
								time_format_ampm : "", 
								date_time_format : "\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5\u0020\u0025\u0048\u65F6\u0025\u004D\u5206\u0025\u0053\u79D2\u0020\u0025\u005A", 
								full_date_time_format : "", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u5E74\u0025\u006E\u6708\u0025\u0065\u65E5", 
								shortdate_format : "\u0025\u0065\u002F\u0025\u006E\u002F\u0025\u0059", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.zh_SG;
					}
					break;
				case "zh_TW":
				case "zh_tw":
					{

						if (!nexacro.Locale.zh_TW) {
							nexacro.Locale.zh_TW = {
								name : "zh_TW", 
								decimal_point : "\u002E", 
								thousands_sep : "\u002C", 
								grouping : [3], 
								int_curr_symbol : "\u0054\u0057\u0044\u0020", 
								currency_symbol : "\u004E\u0054\u0024", 
								mon_decimal_point : "\u002E", 
								mon_thousands_sep : "\u002C", 
								mon_grouping : [3], 
								positive_sign : "", 
								negative_sign : "\u002D", 
								int_frac_digits : 2, 
								frac_digits : 2, 
								p_cs_precedes : 1, 
								p_sep_by_space : 0, 
								n_cs_precedes : 1, 
								n_sep_by_space : 0, 
								p_sign_posn : 1, 
								n_sign_posn : 1, 
								weekday_names_long : ["\u9031\u65E5", "\u9031\u4E00", "\u9031\u4E8C", "\u9031\u4E09", "\u9031\u56DB", "\u9031\u4E94", "\u9031\u516D"], 
								weekday_names_short : ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], 
								weekday_names_narrow : ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], 
								month_names_long : ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], 
								month_names_short : ["\u0020\u0031\u6708", "\u0020\u0032\u6708", "\u0020\u0033\u6708", "\u0020\u0034\u6708", "\u0020\u0035\u6708", "\u0020\u0036\u6708", "\u0020\u0037\u6708", "\u0020\u0038\u6708", "\u0020\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								month_names_narrow : ["\u0020\u0031\u6708", "\u0020\u0032\u6708", "\u0020\u0033\u6708", "\u0020\u0034\u6708", "\u0020\u0035\u6708", "\u0020\u0036\u6708", "\u0020\u0037\u6708", "\u0020\u0038\u6708", "\u0020\u0039\u6708", "\u0031\u0030\u6708", "\u0031\u0031\u6708", "\u0031\u0032\u6708"], 
								ampm : ["\u4E0A\u5348", "\u4E0B\u5348"], 
								date_format : "\u897F\u5143\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5", 
								time_format : "\u0025\u0048\u6642\u0025\u004D\u5206\u0025\u0053\u79D2", 
								time_format_ampm : "\u0025\u0070\u0020\u0025\u0049\u6642\u0025\u004D\u5206\u0025\u0053\u79D2", 
								date_time_format : "\u897F\u5143\u0025\u0059\u5E74\u0025\u006D\u6708\u0025\u0064\u65E5\u0020\u0028\u0025\u0041\u0029\u0020\u0025\u0048\u6642\u0025\u004D\u5206\u0025\u0053\u79D2", 
								full_date_time_format : "\u0025\u0061\u0020\u0025\u0062\u0020\u0025\u0065\u0020\u0025\u0048\u003A\u0025\u004D\u003A\u0025\u0053\u0020\u0025\u005A\u0020\u0025\u0059", 
								first_weekday : 0, 
								longdate_format : "\u0025\u0059\u5E74\u0025\u006E\u6708\u0025\u0065\u65E5", 
								shortdate_format : "\u0025\u0059\u002F\u0025\u006E\u002F\u0025\u0065", 
								direction : "ltr"
							};
						}

						return nexacro.Locale.zh_TW;
					}
					break;
				default:
					{

						if (default_flag) {
							return nexacro.Locale.getLocaleInfo("en");
						}
						else {
							return nexacro.Locale.getLocaleInfo(nexacro._getLocale(), true);
						}
					}
					break;
			}
		};

		nexacro.Locale._replaceLocaleDigits = function (locale, str) {
			var locale_info = nexacro.Locale.getLocaleInfo(locale);

			if (locale_info.locale_digits) {
				var locale_digits = locale_info.locale_digits;

				str = str.replace(/0/g, locale_digits[0]);
				str = str.replace(/1/g, locale_digits[1]);
				str = str.replace(/2/g, locale_digits[2]);
				str = str.replace(/3/g, locale_digits[3]);
				str = str.replace(/4/g, locale_digits[4]);
				str = str.replace(/5/g, locale_digits[5]);
				str = str.replace(/6/g, locale_digits[6]);
				str = str.replace(/7/g, locale_digits[7]);
				str = str.replace(/8/g, locale_digits[8]);
				str = str.replace(/9/g, locale_digits[9]);
			}

			return str;
		};

		nexacro.Locale._makeDateMaskString = function (locale, opt) {
			var locale_info = nexacro.Locale.getLocaleInfo(locale);
			var format_string = "";

			if (opt == "SHORTDATE") {
				format_string = locale_info.shortdate_format;
			}
			else if (opt == "LONGDATE") {
				format_string = locale_info.longdate_format;
			}

			if (format_string == "") {
				return "yyyy-MM-dd";
			}

			format_string = format_string.replace(/%a/g, "ddd");
			format_string = format_string.replace(/%A/g, "dddd");
			format_string = format_string.replace(/%b/g, "MMMM");
			format_string = format_string.replace(/%B/g, "MMMM");

			format_string = format_string.replace(/%y/g, "yy");
			format_string = format_string.replace(/%Y/g, "yyyy");
			format_string = format_string.replace(/%n/g, "M");
			format_string = format_string.replace(/%m/g, "MM");
			format_string = format_string.replace(/%d/g, "dd");
			format_string = format_string.replace(/%e/g, "d");

			return format_string;
		};

		nexacro.Locale._default_longdate_format = "\u0025\u0064\u0020\u0025\u0042\u0020\u0025\u0059";
		nexacro.Locale._default_shortdate_format = "\u0025\u0064\u002F\u0025\u006D\u002F\u0025\u0059";

		nexacro.makeLocaleFormatString = function (obj, locale) {
			var locale_string = "";

			if (obj instanceof Number) {
				var new_obj = new nexacro.Number(obj);
				locale_string = new_obj.toLocaleString(locale);
			}
			else if (obj instanceof nexacro.Number) {
				locale_string = obj.toLocaleString(locale);
			}
			else if (obj instanceof Date) {
				var new_obj = new nexacro.Date(obj);
				locale_string = new_obj.toLocaleString(locale);
			}
			else if (obj instanceof nexacro.Date) {
				locale_string = obj.toLocaleString(locale);
			}
			else if (obj instanceof nexacro.Decimal) {
				locale_string = obj.toLocaleString(locale);
			}
			else {
				locale_string = obj.toLocaleString();
			}

			return locale_string;
		};
	}



	nexacro._setTrackInfo = function (targetwin, target, windowX, windowY) {
		var trackData = target._on_starttrack();
		nexacro._cur_track_info = {
			"targetwin" : targetwin, 
			"target" : target, 
			"startX" : windowX, 
			"startY" : windowY, 
			"distX" : 0, 
			"distY" : 0, 
			"data" : trackData
		};
	};

	nexacro._setExtraTrackInfo = function (targetwin, target, windowX, windowY, screenX, screenY, keepstart) {
		var trackData = target._on_start_extratrack(windowX, windowY, screenX, screenY, keepstart);
		nexacro._cur_extra_track_info = {
			"targetwin" : targetwin, 
			"target" : target, 
			"startX" : windowX, 
			"startY" : windowY, 
			"screenX" : screenX, 
			"screenY" : screenY, 
			"distX" : 0, 
			"distY" : 0, 
			"data" : trackData
		};
	};

	nexacro._setDragInfo = function (targetwin, target_elem, windowX, windowY, dragimage, imagealign) {
		nexacro._cur_drag_info = {
			"targetwin" : targetwin, 
			"isDragging" : false, 
			"target_elem" : target_elem, 
			"target" : null, 
			"referTarget" : null, 
			"startX" : windowX, 
			"startY" : windowY, 
			"image" : dragimage, 
			"imagealign" : imagealign, 
			"data" : null, 
			"userdata" : null
		};
	};

	nexacro._setRepeatInfo = function (target, win, refer_comp, windowX, windowY, canvasX, canvasY) {
		var _handle = nexacro._getWindowHandle(win._handle);
		var repeatData = target._on_startrepeat(refer_comp, canvasX, canvasY);

		nexacro._cur_repeat_info = {
			"targetwin" : win, 
			"target" : target, 
			"startX" : windowX, 
			"startY" : windowY, 
			"distX" : 0, 
			"distY" : 0, 
			"startCanvasX" : canvasX, 
			"startCanvasY" : canvasY, 
			"canvasX" : canvasX, 
			"canvasY" : canvasY, 
			"data" : repeatData, 
			"refer_comp" : refer_comp, 
			"step" : "first", 
			"_repeatfunc" : null, 
			"_timer" : null
		};

		if (!nexacro._cur_repeat_info._repeatfunc) {
			nexacro._cur_repeat_info._repeatfunc = nexacro._nexacroBind(win, win._on_sys_repeat);
		}

		nexacro._cur_repeat_info._timer = nexacro._setSystemTimer(_handle, nexacro._cur_repeat_info._repeatfunc, 500);
	};

	nexacro._getImageLocation = function (str, baseurl) {
		var _images = nexacro._getLocalStorage("images");
		var _url, _image;
		if (_images) {
			_image = _images[str];
			if (_image) {
				baseurl = nexacro._getLocalStorage("_project_uri", "") + nexacro._getLocalStorage("_globalvar_uri", "");
			}
		}
		_url = _image ? _image : str;

		return nexacro._getServiceLocation(_url, baseurl);
	};

	nexacro._hasLocalThemeCacheUrl = function (url) {
		return (url in application._localthemecaches);
	};

	nexacro._clearLocalThemeCache = function () {
		application._localthemecaches = {
		};
	};

	nexacro._getLocalCacheUrl = function (url) {
		return nexacro._getLocalStorage("_localcaches", {
		})[url];
	};

	nexacro._addLocalThemeCacheUrl = function (url, localurl) {
		application._addlocalthemecacheurl = true;
		if (localurl) {
			localurl = localurl.replace(/\\/g, "/");
		}
		application._localthemecaches[url] = localurl;
	};

	nexacro._getLocalThemeCacheUrl = function (url) {
		return application._localthemecaches[url];
	};


	nexacro._transfullurl = function (baseurl, url) {
		if (nexacro._isAbsolutePath(url) == true) {
			return url;
		}

		baseurl = nexacro._getBaseUrl(baseurl);

		var fullurl = null;

		if (baseurl.indexOf("?") >= 0) {
			fullurl = baseurl + url;
		}
		else {
			fullurl = nexacro._mergeUrl(baseurl, url);
		}

		var urlarr = fullurl.split("/");

		var n = urlarr.length;

		var realpath = [];

		var i = 0;
		while (i < n) {
			if (urlarr[i] != "." && urlarr[i] != "..") {
				break;
			}
			realpath.push(urlarr[i]);
			i++;
		}

		while (i < n) {
			if (urlarr[i] != ".") {
				if (urlarr[i] == "..") {
					realpath.pop();
				}
				else {
					realpath.push(urlarr[i]);
				}
			}
			i++;
		}

		return realpath.join("/");
	};

	nexacro._addLocalCacheUrl = function (url, localurl) {
		if (localurl) {
			localurl = localurl.replace(/\\/g, "/");
		}
		application._localcaches[url] = localurl;
		nexacro._setLocalStorage("_localcaches", application._localcaches, "array");
	};

	nexacro._hasLocalCacheUrl = function (url) {
		var _caches = nexacro._getLocalStorage("_localcaches", {
		});
		return (url in _caches);
	};

	nexacro._getService = function (prefix, typedefintion_url) {
		return application.services[prefix];
	};

	nexacro._getServiceObject = function (url, bDefaultNone) {
		var serviceprefix = url.split("::");

		if (serviceprefix.length >= 2) {
			var service = nexacro._getService(serviceprefix[0]);
			if (service) {
				return service;
			}
		}

		var _defaultservice = application._defaultservice;
		if (!_defaultservice) {
			_defaultservice = new nexacro.ServiceItem();
			_defaultservice.cachelevel = "session";
			_defaultservice.version = "0.0";
		}

		if (url.toLowerCase().indexOf("file://") >= 0 || bDefaultNone) {
			_defaultservice.cachelevel = "none";
		}
		else {
			_defaultservice.cachelevel = "session";
		}

		application._defaultservice = _defaultservice;

		return _defaultservice;
	};

	nexacro._transurl = function (baseurl, typedefintionurl, url) {
		var exturl = url;
		var service_ver = null;
		if (exturl.indexOf("theme://") >= 0) {
			var bLocalCacheType = false;
			if (nexacro._hasLocalCacheUrl(url)) {
				var local_url = nexacro._getLocalCacheUrl(url);
				if (local_url) {
					return local_url;
				}

				bLocalCacheType = true;
			}

			var strA = exturl.split("://");
			var name = strA[0];
			var suburl = strA[1];

			var realpath = [];
			var separator = "/";

			var theme_uri = nexacro._getLocalStorage("_theme_uri", "./_theme_/default");
			realpath.push(theme_uri);

			if (theme_uri.charAt(theme_uri.length - 1) == "/") {
				separator = "";
			}
			realpath.push(suburl);

			exturl = realpath.join(separator).replace(/\\/g, "/");
			if (nexacro._isAbsolutePath(exturl) != true) {
				if (bLocalCacheType) {
					exturl = exturl = nexacro._transfullurl(nexacro._getLocalStorage("_localcache_path", ""), exturl);
				}
				else {
					exturl = nexacro._transfullurl(nexacro._getLocalStorage("_project_uri", ""), exturl);
				}
			}

			if (bLocalCacheType) {
				nexacro._addLocalCacheUrl(url, exturl);
			}
		}
		else {
			var bLocalCacheType = false;
			if (nexacro._hasLocalCacheUrl(url)) {
				var local_url = nexacro._getLocalCacheUrl(url);
				if (local_url) {
					return local_url;
				}

				bLocalCacheType = true;
			}

			if (exturl.indexOf("::") < 0) {
				if (bLocalCacheType) {
					baseurl = nexacro._getLocalStorage("_localcache_path", "");
				}
				exturl = nexacro._transfullurl(baseurl, exturl);
			}
			else {
				var strA = exturl.split("::");
				var prefix = strA[0];
				var suburl = strA[1];
				var service = nexacro._getService(prefix, typedefintionurl);
				if (service != null) {
					service_ver = service.version;
					var serviceurl = service.url;

					if (serviceurl.charAt(serviceurl.length - 1) != "/") {
						serviceurl = serviceurl + "/";
					}

					if (suburl.charAt(0) == "/") {
						suburl = suburl.substring(1);
					}

					if (nexacro._isAbsolutePath(serviceurl) == true) {
						exturl = nexacro._transfullurl(serviceurl, suburl);
					}
					else {
						var basepath;
						if (bLocalCacheType) {
							basepath = nexacro._transfullurl(nexacro._getLocalStorage("_localcache_path", ""), serviceurl);
						}
						else {
							basepath = nexacro._transfullurl(typedefintionurl, serviceurl);
						}
						exturl = nexacro._transfullurl(basepath, suburl);
					}
				}
				else {
					exturl = exturl.replace(/\\/g, "/");
				}
			}

			if (bLocalCacheType) {
				nexacro._addLocalCacheUrl(url, exturl);
			}
		}

		if (exturl.indexOf("?") < 0) {
			var checkversion = nexacro._getLocalStorage("checkversion", false);
			var _appversion = nexacro._getLocalStorage("appversion", "");
			if (checkversion) {
				var type = "appversion";
				if (exturl.match('.xfdl') || exturl.match('.xjs') || exturl.match('.css')) {
					exturl += ".js";
				}

				if (service_ver != undefined || service_ver != null) {
					type = "serviceversion";
				}

				exturl += application._addcachequerystring(url, type);
			}
			else if (_appversion) {
				if (service_ver != undefined || service_ver != null) {
					exturl += ".js?version=" + service_ver;
				}
				else {
					exturl += ".js?version=" + _appversion;
				}
			}
		}

		return exturl;
	};

	nexacro._getServiceLocation = function (url, baseurl, typedefinition_url) {
		if (!typedefinition_url) {
			typedefinition_url = nexacro._getLocalStorage("_typedefinition_url", "");
		}

		if (!baseurl) {
			baseurl = nexacro._getLocalStorage("_project_uri", "");
		}

		return nexacro._transurl(baseurl, typedefinition_url, url);
	};

	nexacro._getFDLLocation = function (fdlurl, baseurl) {
		if (!fdlurl || fdlurl.length <= 0) {
			return fdlurl;
		}

		var url = nexacro._getServiceLocation(fdlurl, baseurl);
		if (url.length > 5) {
			if (url.substring(url.length - 5) == ".xfdl") {
				url = url + ".js";
			}
		}
		return url;
	};

	nexacro._isPopupFrame = function (id) {
		if (application.popupframes.get_item(id) != null) {
			return true;
		}
		return false;
	};

	nexacro._registerPopupFrame = function (id, frame) {
		var _popupframes = application.popupframes;
		if (_popupframes.get_item(id) != null) {
			return -1;
		}

		return _popupframes.add_item(id, frame);
	};

	nexacro._unregisterPopupFrame = function (id) {
		application.popupframes.delete_item(id);

		application._activeform = null;
	};

	nexacro._div_property_list = ["_accessibility_role", "_adjust_height", "_adjust_left", "_adjust_left_ltr", "_adjust_top", "_adjust_width", "_apply_client_border", "_apply_client_padding", "_attached_comp", "_base_url", "_bind_manager", "_bottom", "_callclasscnt", "_callstylecnt", "_child_count", "_child_list", "_client_height", "_client_width", "_contents_pseudo", "_control_element", "_control_pseudo", "_css_finder", "_css_selectors", "_cssfinder_cache", "_cssclass", "_cur_real_layout", "_default_zindex", "_display_text", "_event_list", "_executescriptlist", "_find_csslist", "_has_dirty_rect", "_has_parent", "_hotkey_list", "_height", "_hittest_type", "_includescriptlist", "_index", "_init_height", "_init_width", "_is_async", "_is_completed", "_is_created", "_is_created_contents", "_is_form", "_is_init", "_is_loaded", "_isLoaded", "_is_loading", "_is_popup_control", "_is_reference_control", "_is_scrollable", "_is_selfclose", "_isSelfClass", "_isSelfStyle", "_is_window", "_last_focused", "_layout_list", "_left", "_linkedcssclass", "_linkstyles", "_load_callbacklist", "_load_manager", "_margin", "_oldstyletype", "_originStyles", "_pseudo", "_real_enable", "_real_visible", "_ref_css_finder", "_refcssid", "_refcssobj", "_refform", "_right", "_rtldirection", "_scrollbars", "_setclasscomplete", "_setstylecomplete", "_style", "_styles", "_styletype", "_taborder", "_text_elem", "_timerManager", "_top", "_track_on", "_track_capture", "_type_name", "_unique_id", "_user_property_list", "_url", "_urlloading", "_variables", "_want_tab", "_want_arrow", "_wait_pop_position", "_width", "_zoomFactor", "all", "applystyletype", "async", "binds", "bottom", "classname", "components", "cssclass", "currentstyle", "dragscrolltype", "enable", "enableflag", "enableevent", "height", "hscrollbar", "id", "layout", "left", "name", "objects", "on_create", "on_initEvent", "parent", "position", "positionstep", "right", "returnvalue", "rtldirection", "scrollbars", "style", "taborder", "text", "top", "url", "version", "visible", "vscrollbar", "width", "tabstop"
	];

	nexacro._pluginCallMethod = function (obj, args) {
		return nexacro.__pluginCallMethod(obj, args);
	};

	nexacro._openSystemCalendar = function (calendar, v) {
		nexacro.__openSystemCalendar(calendar, v);
	};

	nexacro._closeSystemCalendar = function () {
		nexacro.__closeSystemCalendar();
	};

	nexacro.Deserializer = {
		"SSV" : function (strRecvData, target) {
			var variablelist = {
			};
			var datasetlist = [];

			var _rs_ = String.fromCharCode(30);
			var _cs_ = String.fromCharCode(31);

			var code = 0;
			var message = "SUCCESS";

			if (!strRecvData) {
				return [-1, "Stream Data is null!"];
			}

			var form = this.context;

			var ssvLines = strRecvData.split(_rs_);
			var lineCnt = ssvLines.length;
			var curIdx = 0;
			curIdx++;

			var curStr;

			for (; curIdx < lineCnt; curIdx++) {
				curStr = ssvLines[curIdx];
				if (curStr.substring(0, 7) != "Dataset") {
					var paramArr = curStr.split(_cs_);
					var paramCnt = paramArr.length;
					for (var i = 0; i < paramCnt; i++) {
						var paramStr = paramArr[i];
						var varInfo = paramStr;
						var val = undefined;
						var sep_pos = paramStr.indexOf("=");
						if (sep_pos >= 0) {
							varInfo = paramStr.substring(0, sep_pos);
							val = paramStr.substring(sep_pos + 1);
							if (val == String.fromCharCode(3)) {
								val = undefined;
							}
						}

						if (varInfo) {
							var id = varInfo;
							var sep_pos = varInfo.indexOf(":");
							if (sep_pos >= 0) {
								id = varInfo.substring(0, sep_pos);
							}

							if (id == "ErrorCode") {
								code = parseInt(val) | 0;
								if (isFinite(code) == false) {
									code = -1;
								}
								variablelist[id] = code;
							}
							else if (id == "ErrorMsg") {
								variablelist[id] = val;
							}
							else if (id in form) {
								if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
									form[id] = val;
								}
							}
							else {
								if (application._existVariable(id)) {
									application.setVariable(id, val);
								}
							}
						}
					}
				}
				else {
					if (code < 0) {
						return [variablelist, null];
					}
					var sep_pos = curStr.indexOf(":");
					if (sep_pos >= 0) {
						var remoteId = curStr.substring(sep_pos + 1);
						if (remoteId && remoteId.length) {
							var ds = target && target._getDataset(remoteId);
							if (!ds) {
								ds = new nexacro.Dataset(remoteId);
							}
							if (ds) {
								ds.rowposition = -1;
								curIdx = ds.loadFromSSVArray(ssvLines, lineCnt, curIdx, true);
								datasetlist.push(ds);
							}
						}
					}
				}
			}
			return [variablelist, datasetlist];
		}, 
		"XML" : function (doc, target) {
			var variablelist = {
			};
			var paramElems = doc.getElementsByTagName("Parameter");
			var code = 0;
			if (paramElems && paramElems.length) {
				var varCnt = paramElems.length;
				for (var i = 0; i < varCnt; i++) {
					var paramElem = paramElems[i];
					var id = paramElem.getAttribute("id");
					if (id && id.length) {
						var val = (paramElem.textContent || (paramElem.firstChild ? paramElem.firstChild.nodeValue : ""));

						if (id == "ErrorCode") {
							code = parseInt(val) | 0;
							if (isFinite(code) == false) {
								code = -1;
							}
							variablelist[id] = code;
						}
						else if (id == "ErrorMsg") {
							variablelist[id] = val;
						}
						else {
							target && target._setParamter(id, val);
						}
					}
				}
			}
			if (code < 0) {
				return [variablelist, null];
			}
			var datasetlist = [];
			var datasets = doc.getElementsByTagName("Dataset");
			if (datasets && datasets.length) {
				var dataCnt = datasets.length;
				for (var i = 0; i < dataCnt; i++) {
					var remoteId = datasets[i].getAttribute("id");
					if (remoteId && remoteId.length) {
						var ds = target && target._getDataset(remoteId);
						if (!ds) {
							ds = new nexacro.Dataset(remoteId);
						}
						if (ds) {
							ds.rowposition = -1;
							ds.loadFromDOM(datasets[i]);
							datasetlist.push(ds);
						}
					}
				}
			}
			return [variablelist, datasetlist];
		}
	};

	nexacro._removeLastPopupComponent = function () {
		nexacro._current_popups.pop();
	};

	nexacro._removePopupComponent = function (popup_comp) {
		if (!popup_comp || !popup_comp._is_popup_control) {
			nexacro._current_popups = [];
		}
		else {
			var popups = nexacro._current_popups;
			var cnt = popups.length;
			if (cnt > 0) {
				var cur_popup = null;
				var last_popup = null;
				var root_comp = popup_comp._getRootComponent(popup_comp);
				for (var i = cnt; i > 0; i--) {
					cur_popup = popups[i - 1];
					if (!cur_popup) {
						break;
					}
					if (cur_popup == popup_comp) {
						nexacro._current_popups = popups.slice(0, i - 1);
						break;
					}

					last_popup = cur_popup;
					cur_popup = null;
				}
			}
		}
	};

	nexacro._appendPopupComponent = function (popup_comp) {
		if (!popup_comp || !popup_comp._is_popup_control) {
			cur_popup = nexacro._current_popups[0];
			if (cur_popup) {
				cur_popup._closePopup();
			}
			nexacro._current_popups = [];
		}
		else {
			var root_comp = popup_comp._getRootComponent(popup_comp);
			var popups = nexacro._current_popups;
			var cnt = popups.length;
			if (cnt > 0) {
				var is_contain = false;
				var cur_popup = null;
				var last_popup = null;
				for (var i = cnt; i > 0; i--) {
					cur_popup = popups[i - 1];
					if (!cur_popup) {
						break;
					}
					if (cur_popup._contains(popup_comp)) {
						is_contain = true;
						if (last_popup) {
							last_popup._closePopup();
						}
						nexacro._current_popups = popups.slice(0, i);
						break;
					}

					last_popup = cur_popup;
				}
				if (!is_contain) {
					var len = nexacro._current_popups.length;
					for (var i = len - 1; i >= 0; i--) {
						last_popup = nexacro._current_popups[i];
						if (last_popup) {
							last_popup._closePopup();
						}
					}
					nexacro._current_popups = [];
				}
			}
			nexacro._current_popups.push(popup_comp);
		}
	};

	nexacro._checkClosePopupComponent = function (target_comp, bCheckSameParent, over_elem) {
		if (!target_comp) {
			var len = nexacro._current_popups.length;
			for (var i = len - 1; i >= 0; i--) {
				cur_popup = nexacro._current_popups[i];
				if (cur_popup) {
					if (over_elem && cur_popup._contains(nexacro._getElementRootComponent(over_elem))) {
						return;
					}

					cur_popup._closePopup();
				}
			}

			nexacro._current_popups = [];
		}
		else {
			var popups = nexacro._current_popups;
			var cnt = popups.length;
			if (cnt > 0) {
				var is_contain = false;
				var cur_popup = null;
				var last_popup = null;
				var child_popups = [];
				for (var i = cnt; i > 0; i--) {
					cur_popup = popups[i - 1];
					if (!cur_popup) {
						break;
					}
					if (bCheckSameParent) {
						if (cur_popup._contains(target_comp)) {
							is_contain = true;

							for (var j = cnt; j >= i; j--) {
								var popup = popups[j - 1];
								if (cur_popup != popup && cur_popup._contains(popup)) {
									child_popups.push(popups[j - 1]);
									popups.splice(j - 1);
								}
							}
						}
						else {
							var root_comp = cur_popup._getPopupRootComponent(cur_popup);
							is_contain = root_comp._contains(target_comp);
						}
					}
					else {
						is_contain = cur_popup._contains(target_comp);
					}

					if (is_contain) {
						break;
					}
				}

				if (!is_contain) {
					var len = nexacro._current_popups.length;
					for (var i = len - 1; i >= 0; i--) {
						last_popup = nexacro._current_popups[i];
						if (last_popup) {
							if (nexacro.OS == "iOS") {
								last_popup._is_ios = true;
								last_popup._closePopup();
								last_popup._is_ios = false;
							}
							else {
								last_popup._closePopup();
							}
						}
					}
					nexacro._current_popups = [];
				}
				else if (child_popups.length > 0) {
					while (child_popups.length > 0) {
						var popup = child_popups.shift();
						if (popup) {
							popup._closePopup();
						}
					}
				}
			}
		}
	};

	nexacro._addRegisterClass = function (registername, classname) {
		application._registerclass.push({
			id : registername, 
			classname : classname
		});
		nexacro._setLocalStorage("_registerclass", application._registerclass, "json");
	};


	nexacro._registerClass = function (_jsContext) {
		var registerclass = nexacro._getLocalStorage("_registerclass", []);
		var len = registerclass.length;

		for (var i = 0; i < len; i++) {
			var item = registerclass[i];
			if (item) {
				if (!_jsContext[item.id]) {
					_jsContext[item.id] = _jsContext.eval(item.classname);
				}
			}
		}
	};

	nexacro._setOpenFrame = function (name, child, parent_frame, arr_args, left, top, width, height, formurl, openstyles) {
		if (parent_frame) {
			parent_frame.addChild(name, child);
		}

		if (arr_args) {
			for (var param in arr_args) {
				child._addVariable(param, arr_args[param]);
			}
		}

		if (width <= 0) {
			width = child._defaultWidth;
		}
		if (height <= 0) {
			height = child._defaultHeight;
		}

		child.init(name, "absolute", left, top, width, height, null, null, formurl);

		if (formurl) {
			child.set_formurl(formurl);
		}

		if (openstyles) {
			var openlist = openstyles.split(" ");
			var stylelist = [];

			var delayedOpenstatus = false;
			var delayedOpenstatusValue;

			for (var i = 0, n = openlist.length; i < n; i++) {
				var style = openlist[i].split("=");

				if (style.length > 1) {
					stylelist.push({
						property : style[0], 
						value : style[1]
					});
				}
				else {
					style = stylelist[stylelist.length - 1];
					style.value += " " + openlist[i];
				}
			}

			if (stylelist.length > 0) {
				for (var i = 0, n = stylelist.length; i < n; i++) {
					style = stylelist[i];
					if (style.value.charAt(0) == "'" && style.value.charAt(style.value.length - 1)) {
						style.value = style.value.substring(1, style.value.length - 1);
					}

					if (style.property == "openstatus") {
						delayedOpenstatus = true;
						delayedOpenstatusValue = style.value;
						continue;
					}

					if (child["set_" + style.property]) {
						child["set_" + style.property](style.value);
					}
				}

				if (delayedOpenstatus) {
					if (!child.autosize) {
						child.set_openstatus(delayedOpenstatusValue);
					}
				}
			}
		}
	};

	nexacro._getProtocol = function (name) {
		return application._protocols[name];
	};

	nexacro._addCookieFromGlobalvariables = function () {
		var varlist = nexacro._getLocalStorage("_cookie_variables", []);
		nexacro._setCookielist(varlist);

		varlist = nexacro._getLocalStorage("_secure_cookie_variables", []);
		nexacro._setCookielist(varlist, true);
	};

	nexacro._setCookielist = function (varlist, bsecure) {
		var cookievarCnt = 0;
		if (varlist) {
			cookievarCnt = varlist.length;
		}

		if (cookievarCnt <= 0) {
			return;
		}

		for (var i = 0; i < cookievarCnt; i++) {
			var cookieid = varlist[i];
			var curCookieValue = nexacro._getCookie(cookieid);
			var cookieValue = application[cookieid];
			if (curCookieValue != cookieValue) {
				nexacro._setCookie(cookieid, cookieValue, "", bsecure);
			}
		}
	};

	nexacro._compare = function (a, b) {
		var i = 0, j;
		if (typeof a == "object" && a) {
			if (a instanceof Array) {
				if (!b instanceof Array || a.length != b.length) {
					return false;
				}
				for (j = a.length; i < j; i++) {
					if (!nexacro._compare(a[i], b[i])) {
						return false;
					}
				}
				return true;
			}
			else {
				for (j in b) {
					if (b.hasOwnProperty(j)) {
						i++;
					}
				}
				for (j in a) {
					if (a.hasOwnProperty(j)) {
						if (!nexacro._compare(a[j], b[j])) {
							return false;
						}
						i--;
					}
				}
				return !i;
			}
		}
		return a === b;
	};

	nexacro._makeurl = function (url) {
		url = nexacro._getServiceLocation(url);

		var includeurl = [];
		includeurl.push(url);

		var checkversion = nexacro._getLocalStorage("checkversion", false);
		if (!checkversion && url.indexOf(".js") <= 0) {
			includeurl.push(".js");
		}

		return includeurl.join("");
	};

	nexacro._obj_strcompare = function (v1, v2) {
		if (v1 instanceof v2 || v1.toString() == v2.toString()) {
			return true;
		}
		return false;
	};
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (nexacro.Browser != "Runtime") {
	if (window._popup && window.opener && window.opener != window) {
		window.application = window.opener.application;

		if (window.opener.nexacro.Application) {
			window._pApplication = window.opener.nexacro.Application;
		}
		else {
			var _parent = window.opener;
			while (!_parent.nexacro.Application) {
				_parent = _parent.opener;
			}

			if (_parent) {
				window._pApplication = _parent.nexacro.Application;
			}
		}
	}


	if (!nexacro.Init_systembase_html) {
		nexacro.Init_systembase_html = true;

		if (window.console) {
			trace = function () {
				var a = arguments;
				var n = arguments.length;
				switch (n) {
					case 1:
						window.console.log(a[0] + '');
						break;
					case 2:
						window.console.log(a[0], ' ', a[1]);
						break;
					case 3:
						window.console.log(a[0], ' ', a[1], ' ', a[2]);
						break;
					case 4:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3]);
						break;
					case 5:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3], ' ', a[4]);
						break;
					case 6:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3], ' ', a[4], ' ', a[5]);
						break;
					case 7:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3], ' ', a[4], ' ', a[5], ' ', a[6]);
						break;
					case 8:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3], ' ', a[4], ' ', a[5], ' ', a[6], ' ', a[7]);
						break;
					case 9:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3], ' ', a[4], ' ', a[5], ' ', a[6], ' ', a[7], ' ', a[8]);
						break;
					case 10:
						window.console.log(a[0], ' ', a[1], ' ', a[2], ' ', a[3], ' ', a[4], ' ', a[5], ' ', a[6], ' ', a[7], ' ', a[8], ' ', a[9]);
						break;
				}
			};
		}
		else {
			trace = function () {
				if (nexacro.OS == "Windows Phone") {
					var str = arguments[0];
					var params = '{"message":"' + str + '"}';
					var jsonstr = 'DebugConsole,Debug,' + this._id + ',' + params;
					window.external.Notify(jsonstr);
				}
				else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
					var str = "";
					var a = arguments;
					for (var i = 0, n = a.length; i < n; i++) {
						str += a[i];
						str += ' ';
					}

					var aa = 0;
				}
			};
		}

		nexacro._updateWindow = nexacro._emptyFn;

		nexacro._nexacroconsole = function (str, w, h) {
			var target = document.getElementById("mainframe_childframe_form");
			var console = document.getElementById("nexacroconsole");
			if (!console) {
				console = document.createElement("div");
				console.id = "nexacroconsole";
				console.className = "nexacroconsole";

				if (w) {
					console.style.width = (parseInt(w) | 0) + "%";
				}
				if (h) {
					console.style.height = (parseInt(h) | 0) + "%";
				}

				target && target.appendChild(console);
			}
			console.innerHTML += str + "<br>";
		};

		nexacro.Browser_RoundBorder = 0;
		nexacro.Browser_BorderImage = 0;
		nexacro.Browser_Gradation = 0;
		nexacro.Browser_RoundShadow = false;
		nexacro.Browser_ColorAlpha = false;
		nexacro.Browser_Transform = 0;
		nexacro.Browser_Transform3d = 0;

		nexacro.OS = "";
		nexacro.OSVersion = "";
		nexacro.DEVICE = "";
		nexacro.SystemType = "";
		nexacro.BrowserLang = "";

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion >= 9) {
				nexacro.Browser_RoundBorder = 1;
				nexacro.Browser_BorderImage = 1;
				nexacro.Browser_RoundShadow = true;
				nexacro.Browser_ColorAlpha = true;
				nexacro.Browser_Transform = 2;

				if (nexacro.BrowserVersion >= 10) {
					nexacro.Browser_Transform = 1;
					nexacro.Browser_Transform3d = 1;
				}
			}
			else {
				nexacro.Browser_RoundBorder = 0;
				nexacro.Browser_BorderImage = 0;
				nexacro.Browser_RoundShadow = false;
				nexacro.Browser_ColorAlpha = false;
			}
			nexacro.Browser_Gradation = 2;
		}
		else if (nexacro.Browser == "Opera") {
			nexacro.Browser_RoundBorder = 1;
			nexacro.Browser_BorderImage = 1;
			nexacro.Browser_RoundShadow = true;
			nexacro.Browser_ColorAlpha = true;
			nexacro.Browser_Gradation = 1;
			nexacro.Browser_Transform = 2;
		}
		else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			nexacro.Browser_RoundBorder = 1;
			nexacro.Browser_BorderImage = 2;
			nexacro.Browser_Gradation = 2;
			nexacro.Browser_RoundShadow = true;
			nexacro.Browser_ColorAlpha = true;

			if (nexacro.BrowserVersion >= 4) {
				nexacro.Browser_Transform = 2;
			}
			if (nexacro.BrowserVersion >= 12) {
				nexacro.Browser_Transform3d = 2;
			}
			if (nexacro.BrowserVersion >= 36) {
				nexacro.Browser_Transform = 1;
				nexacro.Browser_Transform3d = 1;
			}
		}
		else if (nexacro.Browser == "MobileSafari") {
			nexacro.Browser_RoundBorder = 1;
			nexacro.Browser_BorderImage = 2;
			nexacro.Browser_Gradation = 2;
			nexacro.Browser_RoundShadow = true;
			nexacro.Browser_ColorAlpha = true;
			nexacro.Browser_Transform = 1;
			nexacro.Browser_Transform3d = 2;
		}
		else if (nexacro.Browser == "Safari") {
			nexacro.Browser_RoundBorder = 4;
			nexacro.Browser_BorderImage = 2;
			nexacro.Browser_Gradation = 1;
			nexacro.Browser_RoundShadow = true;
			nexacro.Browser_ColorAlpha = true;
			nexacro.Browser_Transform = 2;

			if (nexacro.BrowserVersion >= 3) {
				nexacro.Browser_Transform = 2;
			}
			if (nexacro.BrowserVersion >= 4) {
				nexacro.Browser_Transform3d = 2;
			}
		}
		else if (nexacro.Browser == "WebKit") {
			nexacro.Browser_RoundBorder = 1;
			nexacro.Browser_BorderImage = 2;
			nexacro.Browser_Gradation = 2;
			nexacro.Browser_RoundShadow = true;
			nexacro.Browser_ColorAlpha = true;
			nexacro.Browser_Transform = 2;
		}
		else if (nexacro.Browser == "Gecko") {
			if (nexacro.BrowserVersion < 2) {
				nexacro.Browser_RoundBorder = 4;
			}
			else if (nexacro.BrowserVersion >= 10) {
				nexacro.Browser_RoundBorder = 1;
			}
			else {
				nexacro.Browser_RoundBorder = 1;
			}

			if (nexacro.BrowserVersion >= 3) {
				nexacro.Browser_Transform = 2;
			}
			if (nexacro.BrowserVersion >= 4) {
				nexacro.Browser_Transform3d = 2;
			}
			if (nexacro.BrowserVersion >= 16) {
				nexacro.Browser_Transform = 1;
				nexacro.Browser_Transform3d = 1;
			}

			nexacro.Browser_BorderImage = 3;
			nexacro.Browser_Gradation = 3;
			nexacro.Browser_RoundShadow = true;
			nexacro.Browser_ColorAlpha = true;
		}
		(function () {
			var _regexp_detectos = [{
				OS : "Windows", 
				systype : "win32", 
				expr : "Windows\\sNT\\s([0-9\\.]*)"
			}, {
				OS : "Windows Phone", 
				systype : "win32", 
				expr : "Windows Phone.*OS\\s([\\d_]+)"
			}, {
				OS : "Mac OS", 
				systype : "mac", 
				expr : "Mac\\sOS[\\s|a-z|A-Z]+\\s([\\d_]+)"
			}, {
				OS : "iOS", 
				systype : "ipad", 
				expr : "iPad[\\s|a-z|A-Z|;]+OS\\s([\\d_]+)"
			}, {
				OS : "iOS", 
				systype : "iphone", 
				expr : "iPhone\\sOS\\s([\\d_]+)"
			}, {
				OS : "Android", 
				systype : "android", 
				expr : "Android\\s+([\\d.]+)"
			}, {
				OS : "Linux", 
				systype : "linux", 
				expr : "Linux\\s+([\\w]+)"
			}
			];

			var cnt = _regexp_detectos.length;
			for (var i = 0; i < cnt; i++) {
				var info = _regexp_detectos[i];
				var version = navigator.userAgent.match(new RegExp(info.expr, 'i'));
				if (version) {
					nexacro.OSVersion = version[1].replace(/_/g, '.');
					if (info.OS == "Mac OS" && navigator.platform == "MacIntel" && navigator.maxTouchPoints > 1) {
						nexacro.OS = "iOS";
						nexacro.SystemType = "ipad";
						if (parseFloat(nexacro.OSVersion) < 13) {
							nexacro.OSVersion = "13";
						}
					}
					else {
						nexacro.OS = info.OS;
						nexacro.SystemType = info.systype;
						if (nexacro.OS == "iOS") {
							nexacro._num_osversion = parseFloat(nexacro.OSVersion);
						}
					}
					break;
				}
			}

			if (nexacro.OS == "") {
				var version = navigator.userAgent.match("Android");

				if (version) {
					nexacro.OS = version[0];
				}
			}
		})();


		if (navigator) {
			nexacro.BrowserLang = (navigator.language || navigator.browserLanguage || navigator.systemLanguage || navigator.userLanguage);
			nexacro.SystemLang = (navigator.systemLanguage || navigator.BrowserLang || nexacro.BrowserLang);
		}

		nexacro.checkDocument = 
			{
			hasInnerText : document.documentElement.innerText !== undefined, 
			hasTextContent : document.documentElement.textContent !== undefined, 
			hasElementFromPoint : document.documentElement.elementFromPoint !== undefined, 
			hasScreenLeftTop : (document.defaultView || document.parentWindow).screenLeft !== undefined, 
			hasGetBoxObjectFor : document.getBoxObjectFor !== undefined, 
			hasGetBoundingClientRect : document.documentElement.getBoundingClientRect !== undefined, 
			hasOnInput : document.documentElement.oninput !== undefined, 
			quirksMode : document.compatMode === "BackCompat", 
			strictMode : document.compatMode === "CSS1Compat"
		};

		if (nexacro.Browser == "MobileSafari") {
			nexacro.KeyCode_ImeInput = 0;
		}
		else {
			nexacro.KeyCode_ImeInput = 229;
		}

		nexacro._error = function (e, at) {
			var msg = [];
			msg.push(e.toString());
			if (at && at.length) {
				msg.push("at : " + at);
			}
			if (e.fileName) {
				msg.push("at : " + e.fileName + ": " + e.lineNumber);
			}
			if (self.__debuginfo) {
				msg.push("at : " + self.__debuginfo);
			}
			alert(msg.join('\n'));
		};


		nexacro._alert = function (cur_frame, str, caption, type) {
			var _handle, _window;
			if (cur_frame instanceof nexacro.Frame) {
				_window = cur_frame._getWindow();
				if (_window) {
					_window._cancelEvent();
					_handle = _window._handle;
				}
				else {
					_handle = nexacro._getMainWindowHandle();
				}
			}
			else {
				_handle = nexacro._getMainWindowHandle();
			}

			str = nexacro._toString(str);
			_handle.alert(str);

			if (nexacro.BrowserType == "Edge") {
				if (_window && _window._last_focused_elem && _window._last_focused_elem.setElementBlur) {
					_window._last_focused_elem.setElementBlur();
				}
			}
			else if (nexacro.Browser == "IE" || nexacro.Browser == "Gecko") {
				if (nexacro.OSVersion == "6.1" && nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
					var comp = _window.findComponent(nexacro._getHoverElement(_window), 0, 0);
					if (comp) {
						comp = comp[0];

						var input_elem = (comp && comp._input_element) ? comp._input_element : null;
						if (input_elem && input_elem._is_mousedown) {
							input_elem._is_mousedown = false;
						}
					}
				}
			}
			else {
				if (_handle._linked_window) {
					_handle._linked_window._is_active_window = true;
				}
			}
		};

		nexacro._confirm = function (cur_frame, str, caption, type) {
			var _handle, _window;
			if (cur_frame instanceof nexacro.Frame) {
				_window = cur_frame._getWindow();
				if (_window) {
					_window._cancelEvent();
					_handle = _window._handle;
				}
				else {
					_handle = nexacro._getMainWindowHandle();
				}
			}
			else {
				_handle = nexacro._getMainWindowHandle();
			}

			var ret = _handle.confirm(str);

			if (nexacro.BrowserType == "Edge" && _window && _window._last_focused_elem && _window._last_focused_elem.setElementBlur) {
				_window._last_focused_elem.setElementBlur();
			}

			return ret;
		};

		nexacro._setCookie = function (name, value, days, bsecure) {
			var expires = "";
			if (days) {
				if (typeof (days) == "string") {
					expires = "; expires=" + days;
				}
				else if ((typeof days) == "object" && (days instanceof Date)) {
					expires = "; expires=" + days.toGMTString();
				}
			}
			else {
				expires = "";
			}

			var cookiestr = name + "=" + value + expires + "; path=/";

			if (bsecure) {
				cookiestr += "; secure";
			}

			document.cookie = cookiestr;
		};

		nexacro._getCookie = function (name) {
			var nameEQ = name + "=";
			var ca = document.cookie.split(';');

			for (var i = 0, n = ca.length; i < n; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') {
					c = c.substring(1);
				}
				if (c.indexOf(nameEQ) == 0) {
					return c.substring(nameEQ.length);
				}
			}
			return null;
		};

		nexacro._removeCookie = function (name) {
			this.setCookie(name, "", -1);
		};

		nexacro._setFileSecureLevel = function (lvl) {
			application.filesecurelevel = nexacro._parseInt(lvl);
		};

		nexacro._setNetworkSecureLevel = function (lvl) {
			var val = application.networksecurelevel = nexacro._parseInt(lvl);
			nexacro._setLocalStorage("networksecurelevel", val, "int");
		};

		nexacro._setEnableScreenCapture = function (enable) {
			application.enablescreencapture = enable;
		};
		nexacro._setEnableCookie = function (enable) {
			application.enablecookie = enable;
		};
		nexacro._setEnableCache = function (enable) {
			application.enablecache = enable;
		};
		nexacro._setEnableClipboard = function (enable) {
			application.enableclipboard = enable;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._getExceptionMessage = function (e) {
				var msg = e.message;
				if (e.stack) {
					msg += "\r\n" + e.stack;
				}

				return msg;
			};
			nexacro._getEvalExceptionMessage = function (e, src_url, base_line) {
				var msg = e.toString() + '\r\nin eval script(' + decodeURI(src_url) + ')';
				return msg;
			};
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro._getExceptionMessage = function (e) {
				var msg = e.toString() + "\r\n";
				msg += "\r\n" + e.stack;

				return msg;
			};
			nexacro._getEvalExceptionMessage = function (e, src_url, base_line) {
				var msg = e.toString() + '\r\nat line ' + (e.lineNumber - base_line);
				msg += ', in eval script(' + decodeURI(src_url) + ')';
				return msg;
			};
		}
		else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			Error.prepareStackTrace = function (error, stack) {
				return stack;
			};

			nexacro._getExceptionMessage = function (e) {
				var msg = e.toString();

				if (e.stack && e.stack.length > 0) {
					for (var i = 0; i < e.stack.length; i++) {
						var frame = e.stack[i];
						var url = frame.getEvalOrigin();
						var method = frame.toString().split(" (")[0];
						if (!method) {
							break;
						}

						msg += "\r\nat line " + frame.getLineNumber() + ", in function: " + method + " in " + decodeURI(url);
					}
				}

				return msg;
			};
			nexacro._getEvalExceptionMessage = function (e, src_url, base_line) {
				var msg = e.toString() + '\r\nin eval script(' + decodeURI(src_url) + ')';
				return msg;
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro._getExceptionMessage = function (e) {
				var sourceName = e.sourceURL ? decodeURI(e.sourceURL) : "(anonymous)";
				var lineNumber = e.line;

				var msg = e.toString() + "\r\n" + sourceName + ' (at line ' + lineNumber + ')';
				if (e.stack) {
					msg += "\r\n" + e.stack;
				}
				return msg;
			};
			nexacro._getEvalExceptionMessage = function (e, src_url, base_line) {
				var msg = e.toString() + '\r\nin eval script(' + decodeURI(src_url) + ')';
				return msg;
			};
		}
		else {
			nexacro._getExceptionMessage = function (e) {
				var msg = e.toString();
				if (e.stack) {
					msg += "\r\n" + e.stack;
				}
				return msg;
			};
			nexacro._getEvalExceptionMessage = function (e, src_url, base_line) {
				var msg = e.toString() + '\r\nin eval script(' + decodeURI(src_url) + ')';
				return msg;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__pseudoGarbageCollector = function () {
				this._handle = null;
				this._hasGargageNode = false;
			};
			var _pGarbageCollector = nexacro.__pseudoGarbageCollector.prototype;
			_pGarbageCollector.init = function (_cur_doc, id) {
				if (_cur_doc) {
					var gc = _cur_doc.getElementById(id);
					if (!gc) {
						gc = _cur_doc.createElement('div');
						gc.id = id;
						gc.style.display = 'none';
						_cur_doc.body.appendChild(gc);
						this._hasGargageNode = false;
					}
					this._handle = gc;
				}
			};
			_pGarbageCollector.append = function (node) {
				if (this._handle && node) {
					this._handle.appendChild(node);
					this._hasGargageNode = true;
				}
			};
			_pGarbageCollector.clear = function () {
				if (this._handle && this._hasGargageNode) {
					this._handle.innerText = "";
					this._hasGargageNode = false;
				}
			};
			_pGarbageCollector.destroy = function () {
				if (this._handle) {
					this.clear();
					this._handle = null;
				}
			};

			delete _pGarbageCollector;

			nexacro._createWindowGC_Funcs = function (_cur_win) {
				_cur_win.__createGC = function () {
					var _doc = _cur_win.document;
					var gc = new nexacro.__pseudoGarbageCollector();
					gc.init(_doc, 'nexacro__pseudoGarbageCollector');
					_doc.__nexacro_gc = gc;

					var unlinkgc = new nexacro.__pseudoGarbageCollector();
					unlinkgc.init(_doc, 'nexacro__unlinkGarbageCollector');
					_doc.__nexacro_unlinkgc = unlinkgc;
				};
				_cur_win.__clearGC = function () {
					var _doc = _cur_win.document;
					var gc = _doc.__nexacro_gc;
					if (gc) {
						gc.clear();
					}
				};
				_cur_win.__destroyGC = function () {
					var _doc = _cur_win.document;

					var unlinkgc = _doc.__nexacro_unlinkgc;
					if (unlinkgc && unlinkgc._handle) {
						var node = unlinkgc._handle.firstChild;
						while (node) {
							var next = node.nextSibling;
							var elem = node._linked_element;
							if (elem) {
								if (elem.linkedcontrol) {
									elem.linkedcontrol.destroy();
								}
								else {
									elem.destroy();
								}
							}
							node = next;
						}
						unlinkgc.destroy();
					}
					_doc.__nexacro_unlinkgc = null;

					var gc = _doc.__nexacro_gc;
					if (gc) {
						gc.destroy();
					}
					_doc.__nexacro_gc = null;
				};
			};

			nexacro.__appendDOMNode = function (parent_node, node) {
				parent_node.appendChild(node);
			};
			nexacro.__insertDOMNode = function (parent_node, node, before_node) {
				if (before_node) {
					parent_node.insertBefore(node, before_node);
				}
				else {
					parent_node.appendChild(node);
				}
			};

			nexacro.__removeAllDOMNode = function (nodes) {
				if (nodes) {
					var node = nodes.childNodes;
					var len = node ? node.length : 0;
					while (len-- > 0) {
						nexacro.__removeAllDOMNode(node[len]);
						nexacro.__removeDOMNode(nodes, node[len]);

						if (node[len]) {
							node[len] = null;
						}
					}
				}
			};

			nexacro.__removeDOMNode = function (parent_node, node) {
				if (node) {
					if (!parent_node) {
						parent_node = node.parentNode;
					}

					try {
						parent_node.removeChild(node);
						var gc = node.ownerDocument.__nexacro_gc;
						if (gc) {
							gc.append(node);
						}
						else {
							gc = document.__nexacro_gc;
							if (gc) {
								gc.append(node);
							}
						}
					}
					catch (e) {
					}
				}
			};
			nexacro.__unlinkDOMNode = function (parent_node, node) {
				if (node) {
					if (!parent_node) {
						parent_node = node.parentNode;
					}
					parent_node.removeChild(node);
					var gc = node.ownerDocument.__nexacro_unlinkgc;
					if (gc) {
						gc.append(node);
					}
				}
			};
		}
		else {
			nexacro._createWindowGC_Funcs = function (_cur_win) {
				_cur_win.__createGC = nexacro._emptyFn;
				_cur_win.__clearGC = nexacro._emptyFn;
				_cur_win.__destroyGC = nexacro._emptyFn;
			};

			nexacro.__appendDOMNode = function (parent_node, node) {
				parent_node.appendChild(node);
			};
			nexacro.__insertDOMNode = function (parent_node, node, before_node) {
				if (before_node) {
					parent_node.insertBefore(node, before_node);
				}
				else {
					parent_node.appendChild(node);
				}
			};

			nexacro.__removeAllDOMNode = function (nodes) {
				if (nodes) {
					var _nodes = nodes.childNodes;
					var len = _nodes ? _nodes.length : 0;
					while (len-- > 0) {
						nexacro.__removeAllDOMNode(_nodes[len]);
						nexacro.__removeDOMNode(nodes, _nodes[len]);
						_nodes[len] = null;
					}
				}
			};

			nexacro.__removeDOMNode = function (parent_node, node) {
				if (node && parent_node) {
					try {
						parent_node.removeChild(node);
					}
					catch (e) {
						trace(e);
					}
				}
			};
			nexacro.__unlinkDOMNode = function (parent_node, node) {
				if (node && parent_node) {
					parent_node.removeChild(node);
				}
			};
		}

		nexacro.__getPrevDOMNode = function (node) {
			do {
				node = node.prevSibling;
			} while (node && node.nodeType != 1);
			return node;
		};
		nexacro.__getNextDOMNode = function (node) {
			do {
				node = node.nextSibling;
			} while (node && node.nodeType != 1);
			return node;
		};

		nexacro.__getFirstChildDOMNode = function (node) {
			var child_node = node.firstChild;
			while (child_node && child_node.nodeType != 1) {
				child_node = child_node.nextSibling;
			}
			return child_node;
		};
		nexacro.__getLastChildDOMNode = function (node) {
			var child_node = node.lastChild;
			while (child_node && child_node.nodeType != 1) {
				child_node = child_node.prevSibling;
			}
			return child_node;
		};

		nexacro.__bringDOMNodeToFront = function (node) {
			var parent_node = node.parentNode;
			if (parent_node) {
				var last_node = nexacro.__getLastChildDOMNode(parent_node);
				if (node != last_node) {
					parent_node.appendChild(node);
				}
			}
		};
		nexacro.__sendDOMNodeToBack = function (node) {
			var parent_node = node.parentNode;
			if (parent_node) {
				var first_node = parent_node.firstChild;
				if (node != first_node) {
					parent_node.insertBefore(node, first_node);
				}
			}
		};

		nexacro.__moveDOMNodeToPrev = function (node, target_node) {
			if (target_node && target_node != node) {
				var parent_node = node.parentNode;
				if (parent_node && parent_node == target_node.parentNode) {
					var next_node = nexacro.__getNextDOMNode(target_node);
					if (next_node != node) {
						if (next_node) {
							parent_node.insertBefore(node, next_node);
						}
						else {
							parent_node.appendChild(node);
						}
					}
				}
			}
		};
		nexacro.__moveDOMNodeToNext = function (node, target_node) {
			if (target_node && target_node != node) {
				var parent_node = node.parentNode;
				if (parent_node && parent_node == target_node.parentNode) {
					var target_prev_node = nexacro.__getPrevDOMNode(target_node);
					if (target_prev_node != node) {
						parent_node.insertBefore(node, target_node);
					}
				}
			}
		};

		nexacro.__setDOMNodeStyleFilterTransparent = function (node_style) {
			node_style.filter = "alpha(Opacity=0)";
			node_style.backgroundColor = "#FFFFFF";
		};
		nexacro.__setDOMNodeStyleAbsolute = function (node_style) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
		};
		nexacro.__setDOMNodeStyleRelative = function (node_style) {
			node_style.position = "relative";
			node_style.overflow = "hidden";
		};
		nexacro.__setDOMNodeStyleFixed = function (node_style) {
			node_style.position = "fixed";
			node_style.overflow = "hidden";
		};

		nexacro.__setDOMNodeStyleAbsoluteTransparent = function (node_style) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";

			node_style.overflowX = "hidden";
			node_style.overflowY = "hidden";

			node_style.backgroundColor = "transparent";
		};
		nexacro.__setDOMNodeStyleTextOverFlow = function (node_style) {
			node_style.textOverflow = "ellipsis";
			node_style.whiteSpace = "nowrap";
			node_style.overflow = "hidden";
		};
		nexacro.__setDOMNodeStyleOverFlow = function (node_style, val) {
			node_style.overflow = val;
		};

		if (nexacro.OS == "Android") {
			nexacro.__setDOMNodeStyleTouchAction = function (node, val) {
				node.setAttribute("style", "touch-action:" + val);
			};
		}
		else {
			nexacro.__setDOMNodeStyleTouchAction = nexacro._emptyFn;
		}

		if ((nexacro.Browser == "IE" && nexacro.BrowserVersion == 11)
			 || (nexacro._isDesktop() && nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit"))
			 || nexacro.OS == "Android" || nexacro.Browser == "Opera") {
			nexacro.__setTextAreaDOMNodeStyleAbsoluteTransparent = function (node_style) {
				node_style.position = "absolute";
				node_style.overflow = "hidden";
				node_style.backgroundColor = "transparent";
			};
		}
		else {
			nexacro.__setTextAreaDOMNodeStyleAbsoluteTransparent = function (node_style) {
				node_style.position = "absolute";
				node_style.overflow = "scroll";
				node_style.backgroundColor = "transparent";
			};
		}

		nexacro.__setMobileIframeDOMNodeStyleScroll = function (node_style) {
			node_style.overflow = "auto";
			node_style.webkitOverflowScrolling = "touch";
		};

		if (nexacro.OS == "Android" && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion >= 63) {
			nexacro.__setDOMNodeStyleOverscrollBehavior = function (node_style) {
				node_style.overscrollBehavior = "contain";
			};
		}
		else {
			nexacro.__setDOMNodeStyleOverscrollBehavior = nexacro._emptyFn;
		}

		nexacro.__setDOMNodeStylePosLeftTop = function (node_style, left, top) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
			node_style.left = (left | 0) + "px";
			node_style.top = (top | 0) + "px";
		};
		nexacro.__setDOMNodeStylePosRightTop = function (node_style, right, top) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
			node_style.right = (right | 0) + "px";
			node_style.top = (top | 0) + "px";
		};
		nexacro.__setDOMNodeStylePosLeftBottom = function (node_style, left, bottom) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
			node_style.left = (left | 0) + "px";
			node_style.bottom = (bottom | 0) + "px";
		};
		nexacro.__setDOMNodeStylePosRightBottom = function (node_style, right, bottom) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
			node_style.right = (right | 0) + "px";
			node_style.bottom = (bottom | 0) + "px";
		};

		nexacro.__setDOMNodeStylePosSize = function (node_style, left, top, width, height) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
			node_style.left = (left | 0) + "px";
			node_style.top = (top | 0) + "px";
			node_style.width = (width | 0) + "px";
			node_style.height = (height | 0) + "px";
		};
		nexacro.__setDOMNodeStylePosUnitSize = function (node_style, left, top, width, height) {
			node_style.position = "absolute";
			node_style.overflow = "hidden";
			node_style.left = (left | 0) + "px";
			node_style.top = (top | 0) + "px";
			node_style.width = width;
			node_style.height = height;
		};

		nexacro.__setDOMNodeStylePos = function (node_style, left, top, bRtl) {
			if (bRtl) {
				node_style.right = (left | 0) + "px";
				node_style.left = "";
			}
			else {
				node_style.left = (left | 0) + "px";
				node_style.right = "";
			}
			node_style.top = (top | 0) + "px";
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__setCanvasNodeStylePos = function (node_style, left, top) {
				node_style.left = (left | 0) + "px";
				node_style.top = (top | 0) + "px";
			};
		}
		else {
			nexacro.__setCanvasNodeStylePos = function (node_style, left, top) {
				node_style.left = (left | 0);
				node_style.top = (top | 0);
			};
		}
		;
		nexacro.__setDOMNodeStyleSize = function (node_style, width, height) {
			if (width >= 0 && height >= 0) {
				node_style.width = (width | 0) + "px";
				node_style.height = (height | 0) + "px";
			}
		};
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			nexacro.__setDOMNodeStyleTextSize = function (node_style, height) {
				node_style.maxHeight = (height | 0) + "px";
				node_style.height = (height | 0) + "px";
			};
		}
		else {
			nexacro.__setDOMNodeStyleTextSize = function (node_style, height) {
				node_style.maxHeight = (height | 0) + "px";
			};
		}
		;
		nexacro.__setDOMNodeStyleUnitSize = function (node_style, width, height) {
			node_style.width = width;
			node_style.height = height;
		};

		nexacro.__setDOMNodeStyleDirection = function (node_style, direction) {
			if (direction) {
				node_style.direction = direction;
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 10) {
			if (nexacro.BrowserVersion == 9) {
				nexacro.__setDOMNodeStyleTransformMirror = function (node_style, bMirror) {
					var value = "";
					if (bMirror) {
						value = "ScaleX(-1)";
					}
					node_style.msTransform = value;
				};
				nexacro.__setDOMNodeStyleTransformScale = function (node_style, scale) {
					node_style.MsTransformOrigin = "0 0";
					node_style.MsTransform = "scale(" + scale + ", " + scale + ")";
				};
			}
			else {
				nexacro.__setDOMNodeStyleTransformMirror = function (node_style, bMirror) {
					var value = "";

					value = "progid:DXImageTransform.Microsoft.BasicImage(mirror=1)";
					var str = node_style.filter;
					if (bMirror) {
						if (str) {
							value = (str.indexOf(value) > -1) ? str : str + "," + value;
						}
					}
					else {
						if (str) {
							value = str.replace(value, "");
						}
						else {
							value = "";
						}
					}
					node_style.filter = value;
				};
				nexacro.__setDOMNodeStyleTransformScale = function (node_style, scale) {
					nexacro.__setDOMNodeZoom(node_style, scale * 100);
				};
			}
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__setDOMNodeStyleTransformMirror = function (node_style, bMirror) {
				var value = "";
				if (bMirror) {
					value = "ScaleX(-1)";
				}
				node_style.WebkitTransform = value;
			};
			nexacro.__setDOMNodeStyleTransformScale = function (node_style, scale) {
				node_style.WebkitTransformOriginX = 0;
				node_style.WebkitTransformOriginY = 0;
				node_style.WebkitTransform = "scale(" + scale + ", " + scale + ")";
			};
		}
		else if (nexacro.BrowserType == "Gecko") {
			nexacro.__setDOMNodeStyleTransformMirror = function (node_style, bMirror) {
				var value = "";
				if (bMirror) {
					value = "ScaleX(-1)";
				}
				node_style.MozTransform = value;
			};
			nexacro.__setDOMNodeStyleTransformScale = function (node_style, scale) {
				node_style.MozTransformOrigin = "0px 0px";
				node_style.MozTransform = "scale(" + scale + ", " + scale + ")";
			};
		}
		else if (nexacro.BrowserType == "Opera") {
			nexacro.__setDOMNodeStyleTransformMirror = function (node_style, bMirror) {
				var value = "";
				if (bMirror) {
					value = "ScaleX(-1)";
				}
				node_style.OTransform = value;
			};
			nexacro.__setDOMNodeStyleTransformScale = function (node_style, scale) {
				node_style.OTransformOriginX = 0;
				node_style.OTransformOriginY = 0;
				node_style.OTransform = "scale(" + scale + ", " + scale + ")";
			};
		}
		else {
			nexacro.__setDOMNodeStyleTransformMirror = function (node_style, bMirror) {
				var value = "";
				if (bMirror) {
					value = "ScaleX(-1)";
				}
				node_style.transform = value;
			};
			nexacro.__setDOMNodeStyleTransformScale = function (node_style, scale) {
				node_style.transformOriginX = 0;
				node_style.transformOriginY = 0;
				node_style.transformOrigin = "0 0";
				node_style.transform = "scale(" + scale + ", " + scale + ")";
			};
		}

		nexacro.__setDOMNodeStylePointerEvents = function (node_style, value) {
			node_style.pointerEvents = value;
		};
		nexacro.__setDOMNodeSize = function (node, width, height) {
			if (width >= 0 && height >= 0) {
				node.width = width + "px";
				node.height = height + "px";
			}
		};
		nexacro.__setCanvasNodeSize = function (node, width, height) {
			if (width >= 0 && height >= 0) {
				node.width = width;
				node.height = height;
			}
		};

		nexacro.__setDOMNodeOffset = function (node, offset_x, offset_y) {
			node.scrollLeft = offset_x;
			node.scrollTop = offset_y;
		};
		nexacro.__setDOMNodeHScrollPos = function (node, pos) {
			node.scrollLeft = pos;
		};
		nexacro.__setDOMNodeVScrollPos = function (node, pos) {
			node.scrollTop = pos;
		};

		if (nexacro.Browser_Transform3d === 0) {
			nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y, bRtl) {
				nexacro.__setDOMNodeStylePos(node_style, offset_x, offset_y, bRtl);
			};
			nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos, bRtl) {
				if (bRtl) {
					node_style.right = (pos | 0) + "px";
					node_style.left = "";
				}
				else {
					node_style.left = (pos | 0) + "px";
					node_style.right = "";
				}
			};
			nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
				node_style.top = pos + "px";
			};
		}
		else if (nexacro.Browser_Transform3d == 1) {
			nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
				node_style.transform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
			};
			nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
				node_style.transform = "translateX(" + pos + "px)";
			};
			nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
				node_style.transform = "translateY(" + pos + "px)";
			};
		}
		else if (nexacro.Browser_Transform3d == 2) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
					node_style.msTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
				};
				nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
					node_style.msTransform = "translateX(" + pos + "px)";
				};
				nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
					node_style.msTransform = "translateY(" + pos + "px)";
				};
			}
			else if (nexacro.BrowserType == "WebKit") {
				nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
					node_style.WebkitTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
				};
				nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
					node_style.WebkitTransform = "translateX(" + pos + "px)";
				};
				nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
					node_style.WebkitTransform = "translateY(" + pos + "px)";
				};
			}
			else if (nexacro.Browser == "Gecko") {
				nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
					node_style.MozTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
				};
				nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
					node_style.MozTransform = "translateX(" + pos + "px)";
				};
				nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
					node_style.MozTransform = "translateY(" + pos + "px)";
				};
			}
			else if (nexacro.Browser == "Opera") {
				nexacro.__setDOMNodeStyleTranslate = function (node_style, offset_x, offset_y) {
					node_style.OTransform = "translate3d(" + offset_x + "px, " + offset_y + "px, 0)";
				};
				nexacro.__setDOMNodeStyleTranslateX = function (node_style, pos) {
					node_style.OTransform = "translateX(" + pos + "px)";
				};
				nexacro.__setDOMNodeStyleTranslateY = function (node_style, pos) {
					node_style.OTransform = "translateY(" + pos + "px)";
				};
			}
		}

		nexacro.__setDOMNodeStyleZindex = function (node_style, zindex) {
			node_style.zIndex = zindex;
		};

		nexacro.__getDOMNodeZoom = function (node_style) {
			return node_style.zoom;
		};

		nexacro.__setDOMNodeZoom = function (node_style, zoomFactor) {
			node_style.zoom = zoomFactor + "%";
		};

		if (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") {
			if (nexacro.BrowserVersion > 8) {
				nexacro.__convertScrollLeftFromDOMNode = function (node, v) {
					var scrollLeft = v;
					if (v === undefined) {
						scrollLeft = node.scrollLeft;
					}
					return scrollLeft;
				};
			}
			else {
				nexacro.__convertScrollLeftFromDOMNode = function (node, v) {
					var scrollLeft = v;
					if (v === undefined) {
						scrollLeft = node.scrollLeft;
					}
					if (node._linked_element && node._linked_element instanceof nexacro.InputElement && node._linked_element._isRtl()) {
						scrollLeft = node.scrollWidth - node.clientWidth - scrollLeft;
					}
					return scrollLeft;
				};
			}
		}
		else {
			nexacro.__convertScrollLeftFromDOMNode = function (node, v) {
				var scrollLeft = v;
				if (v === undefined) {
					scrollLeft = node.scrollLeft;
				}

				if (node._linked_element && node._linked_element._isRtl()) {
					scrollLeft = node.scrollWidth - node.clientWidth - scrollLeft;
				}
				return scrollLeft;
			};
		}

		nexacro.__setDOMNodeStyleVisible = function (node_style, visible_flag) {
			node_style.visibility = (visible_flag == true) ? "" : "hidden";
		};
		nexacro.__setDOMNodeStyleForceVisibility = function (node_style, visible_flag) {
			node_style.visibility = (visible_flag == true) ? "visible" : "hidden";
		};
		nexacro.__setDOMNodeStyleDisplay = function (node_style, v) {
			node_style.display = v;
		};

		nexacro.__setDOMNodeEnable = function (node, enable_flag) {
			node.disabled = (enable_flag ? false : true);
		};
		nexacro.__setTextAreaDOMNodeEnable = function (node, enable_flag) {
			node.disabled = (enable_flag ? false : true);
			nexacro.__setDOMNodeSelectable(node, enable_flag);
		};
		nexacro.__setDOMNodeReadOnly = function (node, readonly_flag) {
			node.readOnly = readonly_flag;
		};
		nexacro.__setDOMNodeTabIndex = function (node, index) {
			node.tabIndex = index;
		};
		nexacro.__setDOMNodeId = function (node, parentid, id) {
			node.id = parentid + id;
		};
		nexacro.__setDOMNodeToolTip = function (node, tooltiptext, tooltiptype) {
			node.title = tooltiptext;
		};

		nexacro.__getDOMNodeToolTip = function (node) {
			if (node) {
				return node.title;
			}
			return "";
		};
		if ((nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) || nexacro.Browser == "Opera") {
			nexacro.__setDOMNodeSelectable = function (node, selectable_flag) {
				node.unselectable = selectable_flag ? "off" : "on";
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 9) {
			nexacro.__setDOMNodeSelectable = function (node, selectable_flag) {
				node.style.msUserSelect = selectable_flag ? "text" : "none";
			};
		}
		else if (nexacro.BrowserType == "Gecko") {
			nexacro.__setDOMNodeSelectable = function (node, selectable_flag) {
				node.style.MozUserSelect = selectable_flag ? "" : "none";
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__setDOMNodeSelectable = function (node, selectable_flag) {
				node.style.webkitUserSelect = selectable_flag ? "" : "none";
			};
		}
		else {
			nexacro.__setDOMNodeSelectable = function (node, selectable_flag) {
				node.style.userSelect = selectable_flag ? "" : "none";
			};
		}

		if ((nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) || nexacro.Browser == "Opera") {
			nexacro.__isDOMNodeSelectable = function (node) {
				return (node.unselectable == "off");
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 9) {
			nexacro.__isDOMNodeSelectable = function (node) {
				return (node.style.msUserSelect == "");
			};
		}
		else if (nexacro.BrowserType == "Gecko") {
			nexacro.__isDOMNodeSelectable = function (node) {
				return (node.style.MozUserSelect == "");
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__isDOMNodeSelectable = function (node) {
				return (node.style.webkitUserSelect == "");
			};
		}
		else {
			nexacro.__isDOMNodeSelectable = function (node) {
				return (node.style.userSelect == "");
			};
		}

		nexacro.__setDOMNodeTitle = function (node, text) {
			if (!text) {
				text = "";
			}

			if (!node.title || node.title != text) {
				return node.title = text;
			}
		};

		nexacro.__setDOMNodeAlt = function (node, text) {
			if (!text) {
				text = "";
			}

			if (!node.alt || node.alt != text) {
				return node.alt = text;
			}
		};

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			nexacro.__setImageDOMNodeImageUrl = function (node, imageurl) {
				if (imageurl && imageurl.substring(0, 17) == "data:image;base64") {
					var frontStr = imageurl.substr(0, 10);
					var rearStr = imageurl.substr(10, imageurl.length - 1);

					imageurl = frontStr + "/*" + rearStr;
				}
				node.src = imageurl;
			};
		}
		else {
			nexacro.__setImageDOMNodeImageUrl = function (node, imageurl) {
				if (!imageurl && nexacro.Browser == "Safari") {
					node.src = null;
				}
				else {
					node.src = imageurl;
				}
			};
		}
		nexacro.__setBKImageDOMNodeStyleImageUrl = function (node_style, imageurl) {
			node_style.backgroundImage = imageurl ? "url(\"" + imageurl + "\")" : "";
		};

		nexacro.__setDOMNodeValue = function (node, value) {
			node.value = value;
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			(function () {
				var re_check = /\r|\n/;
				var re_newline = /\r\n|\n|\r/g;

				nexacro.__setDOMNodeSinglelineText = function (node, text) {
					if (re_check.test(text)) {
						node.innerText = text.replace(re_newline, " ");
					}
					else {
						node.innerText = text;
					}
				};
				nexacro.__setDOMNodeMultilineText = function (node, text) {
					node.innerText = text;
				};
				nexacro.__setDOMNodeDecorateText = function (node, text) {
					node.innerHTML = nexacro._decorateString(text);
				};
			})();
		}
		else {
			(function () {
				var re_check = /\r|\n/;
				var re_newline = /\r\n|\n|\r/g;

				nexacro.__setDOMNodeSinglelineText = function (node, text) {
					if (re_check.test(text)) {
						node.textContent = text.replace(re_newline, " ");
					}
					else {
						node.textContent = text;
					}
				};
				nexacro.__setDOMNodeMultilineText = function (node, text) {
					node.textContent = text;
				};
				nexacro.__setDOMNodeDecorateText = function (node, text) {
					node.innerHTML = nexacro._decorateString(text);
				};
			})();
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" || nexacro.Browser == "Gecko") {
			(function () {
				var re_check = /\r|\n/;
				var re_amp = /&/g;
				var re_lt = /</g;
				var re_gt = />/g;
				var re_quat = /\"/g;
				var re_apos = /\'/g;
				var re_newline = /\r\n|\r|\n/g;
				var re_space = / /g;

				if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
					nexacro.__setDOMNodeMultilineTextWithoutWordwrap = function (node, text) {
						var ch = text.charAt(text.length - 1);
						if (ch == "\n" || ch == "\r") {
							text += "\n";
						}

						node.innerHTML = text.replace(re_amp, "&amp;").replace(re_lt, "&lt;").replace(re_gt, "&gt;").replace(re_quat, "&quot;").replace(re_apos, "&#39;").replace(re_newline, "<br/>").replace(re_space, "&nbsp;");
					};
				}
				else {
					nexacro.__setDOMNodeMultilineTextWithoutWordwrap = function (node, text) {
						var ch = text.charAt(text.length - 1);
						if (ch == "\n" || ch == "\r") {
							text += "\n";
						}

						node.innerHTML = text.replace(re_amp, "&amp;").replace(re_lt, "&lt;").replace(re_gt, "&gt;").replace(re_quat, "&quot;").replace(re_apos, "&#39;").replace(re_newline, "<br/>");
					};
				}
			})();
		}
		else {
			nexacro.__setDOMNodeMultilineTextWithoutWordwrap = function (node, text) {
				var ch = text.charAt(text.length - 1);
				if (ch == "\n" || ch == "\r") {
					text += "\n";
				}

				node.innerText = text;
			};
		}

		nexacro.__setDOMNodeText = function (node, text, _multi_line, _wordwrap) {
			if (_multi_line) {
				if (_wordwrap != "none") {
					nexacro.__setDOMNodeMultilineText(node, text);
				}
				else {
					nexacro.__setDOMNodeMultilineTextWithoutWordwrap(node, text);
				}
			}
			else {
				nexacro.__setDOMNodeSinglelineText(node, text);
			}
		};

		nexacro.__setDOMNodeStyleDecorateText = function (node, text) {
			node.innerHTML = nexacro._decorateString(text);
		};

		nexacro.__setDOMNodeMaxLength = function (node, maxlength) {
			node.maxLength = (maxlength > 0) ? maxlength : 65535;
		};
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__setDOMNodeStyleBorderType = nexacro._emptyFn;
			nexacro.__clearDOMNodeStyleBorderType = nexacro._emptyFn;
		}
		else if (nexacro.Browser == "Gecko" && nexacro.BrowserVersion < 2) {
			nexacro.__setDOMNodeStyleBorderType = function (node_style, bordertype) {
				if (bordertype.type != "normal" && bordertype.type != "") {
					var radius_str = bordertype._radiusx + "px " + bordertype._radiusy + "px";
					if (bordertype._lefttop && bordertype._righttop && bordertype._rightbottom && bordertype._leftbottom && bordertype._radiusx == bordertype._radiusy) {
						node_style.MozBorderRadius = radius_str;
					}
					else {
						if (bordertype._lefttop) {
							node_style.MozBorderRadiusTopleft = radius_str;
						}
						else {
							node_style.MozBorderRadiusTopleft = "0px";
						}
						if (bordertype._righttop) {
							node_style.MozBorderRadiusTopright = radius_str;
						}
						else {
							node_style.MozBorderRadiusTopright = "0px";
						}
						if (bordertype._rightbottom) {
							node_style.MozBorderRadiusBottomright = radius_str;
						}
						else {
							node_style.MozBorderRadiusBottomright = "0px";
						}
						if (bordertype._leftbottom) {
							node_style.MozBorderRadiusBottomleft = radius_str;
						}
						else {
							node_style.MozBorderRadiusBottomleft = "0px";
						}
					}
				}
				else {
					nexacro.__clearDOMNodeStyleBorderType(node_style);
				}
			};
			nexacro.__clearDOMNodeStyleBorderType = function (node_style) {
				node_style.MozBorderRadius = "0px";
			};
		}
		else if (nexacro.BrowserType == "WebKit" && nexacro.Browser != "MobileSafari") {
			nexacro.__setDOMNodeStyleTransformItem = function (node_style, itemname, itemvalue) {
				var cur_transform = node_style.webkitTransform;
				cur_transform = cur_transform.split(" ");
				for (var i = 0; i < cur_transform.length; i++) {
					var item = cur_transform[i];
					if (item.indexOf(itemname) >= 0) {
						cur_transform[i] = null;
						cur_transform.splice(i, 1);
						break;
					}
				}

				if (itemvalue !== null) {
					cur_transform.push(itemname + "(" + itemvalue + ")");
				}
				cur_transform = cur_transform.join(" ");
				node_style.webkitTransform = cur_transform;
			};

			nexacro.__setDOMNodeStyleBorderType = function (node_style, bordertype) {
				if (bordertype.type != "normal" && bordertype.type != "") {
					var radius_str = bordertype._radiusx + "px " + bordertype._radiusy + "px";
					if (bordertype._lefttop && bordertype._righttop && bordertype._rightbottom && bordertype._leftbottom && bordertype._radiusx == bordertype._radiusy) {
						node_style.borderRadius = radius_str;
						node_style.webkitBorderRadius = radius_str;

						if (bordertype._radiusx > 0 && bordertype._radiusy > 0) {
							if (nexacro._isMobile && nexacro._isMobile()) {
								nexacro.__setDOMNodeStyleTransformItem(node_style, "translateZ", 0);
								node_style.webkitMaskImage = "-webkit-radial-gradient(circle, white, black)";
							}
						}
					}
					else {
						if (bordertype._lefttop) {
							node_style.borderTopLeftRadius = radius_str;
						}
						else {
							node_style.borderTopLeftRadius = "0px";
						}
						if (bordertype._righttop) {
							node_style.borderTopRightRadius = radius_str;
						}
						else {
							node_style.borderTopRightRadius = "0px";
						}
						if (bordertype._rightbottom) {
							node_style.borderBottomRightRadius = radius_str;
						}
						else {
							node_style.borderBottomRightRadius = "0px";
						}
						if (bordertype._leftbottom) {
							node_style.borderBottomLeftRadius = radius_str;
						}
						else {
							node_style.borderBottomLeftRadius = "0px";
						}

						if (bordertype._radiusx > 0 && bordertype._radiusy > 0) {
							if (nexacro._isMobile && nexacro._isMobile()) {
								nexacro.__setDOMNodeStyleTransformItem(node_style, "translateZ", 0);
								node_style.webkitMaskImage = "-webkit-radial-gradient(circle, white, black)";
							}
						}
					}
				}
				else {
					nexacro.__clearDOMNodeStyleBorderType(node_style);
				}
			};

			nexacro.__clearDOMNodeStyleBorderType = function (node_style) {
				node_style.borderRadius = "0px";


				nexacro.__setDOMNodeStyleTransformItem(node_style, "translateZ", null);

				node_style.webkitMaskImage = "";
			};
		}
		else if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9)) {
			nexacro.__setDOMNodeStyleBorderType = function (node_style, bordertype) {
				if (bordertype.type != "normal" && bordertype.type != "") {
					var radius_str = bordertype._radiusx + "px " + bordertype._radiusy + "px";
					if (bordertype._lefttop && bordertype._righttop && bordertype._rightbottom && bordertype._leftbottom && bordertype._radiusx == bordertype._radiusy) {
						node_style.borderRadius = radius_str;
					}
					else {
						if (bordertype._lefttop) {
							node_style.borderTopLeftRadius = radius_str;
						}
						else {
							node_style.borderTopLeftRadius = "0px";
						}
						if (bordertype._righttop) {
							node_style.borderTopRightRadius = radius_str;
						}
						else {
							node_style.borderTopRightRadius = "0px";
						}
						if (bordertype._rightbottom) {
							node_style.borderBottomRightRadius = radius_str;
						}
						else {
							node_style.borderBottomRightRadius = "0px";
						}
						if (bordertype._leftbottom) {
							node_style.borderBottomLeftRadius = radius_str;
						}
						else {
							node_style.borderBottomLeftRadius = "0px";
						}
					}
				}
				else {
					nexacro.__clearDOMNodeStyleBorderType(node_style);
				}
			};
			nexacro.__clearDOMNodeStyleBorderType = function (node_style) {
				node_style.borderRadius = "0px";
			};
		}

		nexacro.__setDOMNodeStyleBorder = function (node_style, border) {
			if (border && !border._is_real_empty()) {
				if (border._linecnt == 1) {
					node_style.border = border._systop;
				}
				else {
					node_style.borderTop = border._systop;
					node_style.borderRight = border._sysright;
					node_style.borderBottom = border._sysbottom;
					node_style.borderLeft = border._sysleft;
				}
			}
			else {
				node_style.border = "";
			}
		};

		nexacro.__setDOMNodeStyleBackgroundColor = function (node_style, color) {
			node_style.backgroundColor = (color ? color : "transparent");
		};
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__setDOMNodeStyleBackgroundImage = function (node_style, url, repeat, bkpos) {
				if (url) {
					node_style.backgroundImage = "url(\"" + url + "\")";
					node_style.backgroundRepeat = repeat;
					node_style.backgroundPosition = bkpos;
				}
				else {
					node_style.backgroundImage = "";
				}
			};
			nexacro.__setDOMNodeStyleBackgroundGradation = function (node_style, sysgradation) {
			};
			nexacro.__setDOMNodeStyleBackgroundImageGradation = function (node_style, url, sysgradation, repeat, bkpos) {
				if (url) {
					node_style.backgroundImage = "url(\"" + url + "\")";
					node_style.backgroundRepeat = repeat;
					node_style.backgroundPosition = bkpos;
				}
				else {
					node_style.backgroundImage = "";
				}
			};
		}
		else {
			nexacro.__setDOMNodeStyleBackgroundImage = function (node_style, url, repeat, bkpos) {
				if (url) {
					if (repeat == "stretch") {
						node_style.backgroundImage = "url(\"" + url + "\")";
						node_style.backgroundRepeat = "";
						node_style.backgroundPosition = "";
						node_style.backgroundSize = "100% 100%";
					}
					else {
						node_style.backgroundImage = "url(\"" + url + "\")";
						node_style.backgroundRepeat = repeat;
						node_style.backgroundPosition = bkpos;
					}
				}
				else {
					node_style.backgroundImage = "";
				}
			};
			nexacro.__setDOMNodeStyleBackgroundGradation = function (node_style, sysgradation) {
				if (sysgradation) {
					node_style.backgroundImage = sysgradation;
					node_style.backgroundRepeat = "";
					node_style.backgroundPosition = "";
					node_style.backgroundSize = "";
				}
				else {
					node_style.backgroundImage = "";
				}
			};
			nexacro.__setDOMNodeStyleBackgroundImageGradation = function (node_style, url, sysgradation, repeat, bkpos) {
				if (url && sysgradation) {
					if (repeat == "stretch") {
						node_style.backgroundImage = "url(\"" + url + "\")," + sysgradation;
						node_style.backgroundRepeat = "no-repeat";
						node_style.backgroundPosition = "";
						node_style.backgroundSize = "100% 100%";
					}
					else {
						node_style.backgroundImage = "url(\"" + url + "\")," + sysgradation;
						node_style.backgroundRepeat = repeat;
						node_style.backgroundPosition = bkpos;
						node_style.backgroundSize = "";
					}
				}
				else if (url) {
					if (repeat == "stretch") {
						node_style.backgroundImage = "url(\"" + url + "\")";
						node_style.backgroundRepeat = "no-repeat";
						node_style.backgroundPosition = "";
						node_style.backgroundSize = "100% 100%";
					}
					else {
						node_style.backgroundImage = "url(\"" + url + "\")";
						node_style.backgroundRepeat = repeat;
						node_style.backgroundPosition = bkpos;
						node_style.backgroundSize = "";
					}
				}
				else if (sysgradation) {
					node_style.backgroundImage = sysgradation;
					node_style.backgroundRepeat = "no-repeat";
					node_style.backgroundPosition = "";
					node_style.backgroundSize = "";
				}
				else {
					node_style.backgroundImage = "";
				}
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
			nexacro.__setDOMNodeStyleEdgeBorder = nexacro._emptyFn;
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro.__setDOMNodeStyleEdgeBorder = function (node_style, url, edgex, edgey, zoomedgex, zoomedgey) {
				var edge = (zoomedgex != undefined && zoomedgey != undefined) ? zoomedgey + ' ' + zoomedgex : (edgey + 'px') + ' ' + (edgex + 'px');
				node_style.borderWidth = edge;
				node_style.backgroundImage = "";
				node_style.backgroundSize = "";
				node_style.borderStyle = "solid";
				edge = edgey + ' ' + edgex;
				node_style.MozBorderImage = "url(\"" + url + "\") " + edge + " stretch";
				node_style.borderImageSlice = edge + " fill";
			};
		}
		else if (nexacro.Browser == "WebKit" || nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") {
			nexacro.__setDOMNodeStyleEdgeBorder = function (node_style, url, edgex, edgey, zoomedgex, zoomedgey) {
				var edge = (zoomedgex != undefined && zoomedgey != undefined) ? zoomedgey + ' ' + zoomedgex : (edgey + 'px') + ' ' + (edgex + 'px');
				node_style.borderWidth = edge;
				node_style.backgroundImage = "";
				node_style.backgroundSize = "";
				node_style.borderStyle = "solid";
				edge = edgey + ' ' + edgex;
				node_style.webkitBorderImage = "url(\"" + url + "\") " + edge + " stretch";
				node_style.webkitBorderImageSlice = edge + " fill";
			};
		}
		else if (nexacro.Browser == "Opera") {
			nexacro.__setDOMNodeStyleEdgeBorder = function (node_style, url, edgex, edgey, zoomedgex, zoomedgey) {
				var edge = (zoomedgex != undefined && zoomedgey != undefined) ? zoomedgey + ' ' + zoomedgex : (edgey + 'px') + ' ' + (edgex + 'px');
				node_style.borderWidth = edge;
				node_style.backgroundImage = "";
				node_style.backgroundSize = "";
				node_style.borderStyle = "solid";
				edge = edgey + ' ' + edgex;
				node_style.OBorderImage = "url(\"" + url + "\") " + edge + " stretch";
			};
		}
		else {
			nexacro.__setDOMNodeStyleEdgeBorder = function (node_style, url, edgex, edgey, zoomedgex, zoomedgey) {
				var edge = (zoomedgex != undefined && zoomedgey != undefined) ? zoomedgey + ' ' + zoomedgex : (edgey + 'px') + ' ' + (edgex + 'px');
				node_style.borderWidth = edge;
				node_style.backgroundImage = "";
				node_style.backgroundSize = "";
				node_style.borderStyle = "solid";
				edge = edgey + ' ' + edgex;
				node_style.borderImage = "url(\"" + url + "\") " + edge + " stretch";
				node_style.borderImageSlice = edge + " fill";
			};
		}

		nexacro.__setDomNodeStyleBoxSizing = function (node_style, boxsizing) {
			node_style.boxSizing = boxsizing;
		};

		nexacro.__setDOMNodeStyleAlign = function (node_style, align) {
			node_style.textAlign = align._halign;
			node_style.verticalAlign = align._valign;
		};
		nexacro.__setDOMNodeStyleAlignXY = function (node_style, halign, valign) {
			if (halign) {
				node_style.textAlign = halign;
			}
			if (valign) {
				node_style.verticalAlign = valign;
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
			nexacro.__setTextDOMNodeStyleAlign = function (node_style, align) {
				if (node_style.textAlign == align._halign) {
					node_style.textAlign = "";
				}
				node_style.textAlign = align._halign;
				node_style.verticalAlign = align._valign;
			};
			nexacro.__setTextDOMNodeStyleAlignXY = function (node_style, halign, valign) {
				if (halign != node_style.textAlign) {
					node_style.textAlign = "";
					if (halign) {
						node_style.textAlign = halign;
					}
				}
				if (valign) {
					node_style.verticalAlign = valign;
				}
			};
		}
		else {
			nexacro.__setTextDOMNodeStyleAlign = nexacro.__setDOMNodeStyleAlign;
			nexacro.__setTextDOMNodeStyleAlignXY = nexacro.__setDOMNodeStyleAlignXY;
		}



		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion < 9) {
				nexacro.__setInputDOMNodeStyleAlignXY = function (node_style, halign, valign, parent_height, parent_width, txt_height) {
					if (halign != node_style.textAlign) {
						node_style.textAlign = "";
						if (halign) {
							node_style.textAlign = halign;
						}
					}
					var offset_top = 0;
					if (valign && parent_height && txt_height) {
						switch (valign) {
							case "middle":
								if (parent_height <= txt_height) {
									break;
								}
								offset_top = ((parent_height - txt_height) / 2);
								break;
							case "bottom":
								offset_top = (parent_height - txt_height);
								break;
						}
						node_style.paddingTop = offset_top + "px";
						node_style.paddingBottom = "";
						node_style.height = (parent_height - offset_top) + "px";
						node_style.width = parent_width + "px";
					}
				};
			}
			else if (nexacro.BrowserVersion < 11) {
				nexacro.__setInputDOMNodeStyleAlignXY = function (node_style, halign, valign, parent_height, parent_width, txt_height) {
					node_style.textAlign = halign;
					if (valign && parent_height && txt_height) {
						var offset_top = 0, offset_bottom = 0;
						switch (valign) {
							case "top":
								offset_bottom = (parent_height - txt_height);
								break;
							case "bottom":
								offset_top = (parent_height - txt_height);
								break;
						}
						node_style.paddingTop = offset_top + "px";
						node_style.paddingBottom = offset_bottom + "px";
						node_style.height = (parent_height - offset_top - offset_bottom) + "px";
						node_style.width = parent_width + "px";
					}
				};
			}
			else {
				nexacro.__setInputDOMNodeStyleAlignXY = function (node_style, halign, valign, parent_height, parent_width, txt_height) {
					node_style.textAlign = halign;
					if (valign && parent_height && txt_height) {
						switch (valign) {
							case "top":
								node_style.paddingTop = "0px";
								node_style.paddingBottom = (parent_height - txt_height) > 0 ? (parent_height - txt_height) + "px" : "0px";
								break;
							case "middle":
								node_style.paddingTop = "0px";
								node_style.paddingBottom = "0px";
								break;
							case "bottom":
								node_style.paddingTop = (parent_height - txt_height) + "px";
								node_style.paddingBottom = "0px";
								break;
						}
					}
				};
			}
		}
		else if (nexacro.Browser == "WebKit" || nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") {
			nexacro.__setInputDOMNodeStyleAlignXY = function (node_style, halign, valign, parent_height, parent_width, txt_height) {
				node_style.textAlign = halign;
				if (valign && parent_height && txt_height) {
					switch (valign) {
						case "top":
							node_style.top = "0px";
							node_style.height = txt_height + "px";
							break;
						case "middle":
							node_style.top = "0px";
							node_style.height = parent_height + "px";
							break;
						case "bottom":
							node_style.top = (parent_height - txt_height) + "px";
							node_style.height = txt_height + "px";
							break;
					}
				}
			};
		}
		else {
			nexacro.__setInputDOMNodeStyleAlignXY = function (node_style, halign, valign, parent_height, parent_width, txt_height) {
				node_style.textAlign = halign;
				if (valign && parent_height && txt_height) {
					switch (valign) {
						case "top":
							node_style.paddingTop = "0px";
							node_style.paddingBottom = (parent_height - txt_height) > 0 ? (parent_height - txt_height) + "px" : "0px";
							break;
						case "middle":
							node_style.paddingTop = "0px";
							node_style.paddingBottom = "0px";
							break;
						case "bottom":
							node_style.paddingTop = (parent_height - txt_height) + "px";
							node_style.paddingBottom = "0px";
							break;
					}
				}
			};
		}

		nexacro.__setTextAreaDOMNodeStyleAlignXY = function (node_style, halign, valign, blank_height, padding) {
			node_style.textAlign = halign;

			var padding_top = 0;
			var padding_bottom = 0;

			if (padding) {
				padding_top = padding.top;
				padding_bottom = padding.bottom;
			}

			switch (valign) {
				case "top":
					node_style.paddingTop = padding_top + "px";
					node_style.paddingBottom = padding_bottom + "px";
					break;
				case "middle":
					node_style.paddingTop = (padding_top + (blank_height / 2)) + "px";
					node_style.paddingBottom = padding_bottom + "px";
					break;
				case "bottom":
					node_style.paddingTop = padding_top + blank_height + "px";
					node_style.paddingBottom = padding_bottom + "px";
					break;
			}
		};

		nexacro.__setBKImageDOMNodeStyleAlign = function (node_style, align) {
			node_style.backgroundPosition = align.halign + ' ' + (align.valign == "middle" ? "center" : align.valign);
		};
		nexacro.__setBKImageDOMNodeStyleAlignXY = function (node_style, halign, valign) {
			node_style.backgroundPosition = halign + ' ' + (valign == "middle" ? "center" : valign);
		};

		nexacro.__setDOMNodeStyleColor = function (node_style, color) {
			node_style.color = color._syscolor;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__setDOMNodeStyleFont = function (node_style, font) {
				if (font._bold) {
					node_style.fontWeight = "bold";
				}
				else {
					node_style.fontWeight = "normal";
				}

				if (font._italic) {
					node_style.fontStyle = "italic";
				}
				else {
					node_style.fontStyle = "normal";
				}

				node_style.fontFamily = font.face;
				node_style.fontSize = font.size >= 0 ? font.size + "pt" : Math.abs(font.size) + "px";
				node_style.textDecoration = font._sysdecoration;
			};
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro.__setDOMNodeStyleFont = function (node_style, font) {
				node_style.font = font._sysvalue;
				node_style.textDecoration = font._sysdecoration;


				node_style.lineHeight = nexacro._getFontHeight(font) + "px";
			};
		}
		else {
			nexacro.__setDOMNodeStyleFont = function (node_style, font) {
				node_style.font = font._sysvalue;
				node_style.textDecoration = font._sysdecoration;
			};
		}

		nexacro.__setDOMNodeStylePadding = function (node_style, padding) {
			if (padding) {
				node_style.paddingLeft = ((padding.left < 0) ? 0 : padding.left) + "px";
				node_style.paddingTop = ((padding.top < 0) ? 0 : padding.top) + "px";
				node_style.paddingRight = ((padding.right < 0) ? 0 : padding.right) + "px";
				node_style.paddingBottom = ((padding.bottom < 0) ? 0 : padding.bottom) + "px";
			}
			else {
				node_style.padding = "0px";
			}
		};
		nexacro.__setDOMNodeStylePaddingXY = function (node_style, left, top, right, bottom) {
			node_style.paddingLeft = left + "px";
			node_style.paddingTop = top + "px";
			node_style.paddingRight = right + "px";
			node_style.paddingBottom = bottom + "px";
		};

		nexacro.__setDOMNodeStyleMargin = function (node_style, margin) {
			if (margin) {
			}
			else {
				node_style.margin = "0px";
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__setDOMNodeStyleCursor = function (node_style, cursor, deftype) {
				var cur_type = (cursor && !cursor._is_empty) ? cursor._value : (deftype ? deftype : "arrow");
				if (cur_type == "auto") {
					cur_type = "default";
				}
				else if (cur_type == "no") {
					cur_type = "not-allowed";
				}
				else if (cur_type == "pointer") {
					cur_type = "hand";
				}
				else if (cur_type == "arrowwait") {
					cur_type = "progress";
				}
				else if (cur_type == "arrow") {
					cur_type = "default";
				}
				else if (cur_type == "coll-resize" || cur_type == "colr-resize") {
					cur_type = "col-resize";
				}
				else if (cur_type == "rowt-resize" || cur_type == "rowb-resize") {
					cur_type = "row-resize";
				}

				node_style.cursor = cur_type;
			};
		}
		else if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9)) {
			nexacro.__setDOMNodeStyleCursor = function (node_style, cursor, deftype) {
				var cur_type = (cursor && !cursor._is_empty) ? cursor._value : (deftype ? deftype : "arrow");
				if (cur_type == "auto") {
					cur_type = "default";
				}
				else if (cur_type == "no") {
					cur_type = "not-allowed";
				}
				else if (cur_type == "hand") {
					cur_type = "pointer";
				}
				else if (cur_type == "text") {
					cur_type = "text";
				}
				else if (cur_type == "arrow") {
					cur_type = "default";
				}
				else if (cur_type == "arrowwait") {
					cur_type = "progress";
				}
				else if (cur_type == "coll-resize" || cur_type == "colr-resize") {
					cur_type = "col-resize";
				}
				else if (cur_type == "rowt-resize" || cur_type == "rowb-resize") {
					cur_type = "row-resize";
				}

				node_style.cursor = cur_type;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__setDOMNodeStyleShadow = function (node_style, shadow) {
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) {
			nexacro.__setDOMNodeStyleShadow = function (node_style, shadow) {
				node_style.boxShadow = shadow._sysvalue;
			};
		}
		else if (nexacro.Browser == "Gecko" && nexacro.BrowserVersion < 2) {
			nexacro.__setDOMNodeStyleShadow = function (node_style, shadow) {
				node_style.MozBoxShadow = shadow._sysvalue;
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__setDOMNodeStyleShadow = function (node_style, shadow) {
				node_style.webkitBoxShadow = shadow._sysvalue;
			};
		}
		else {
			nexacro.__setDOMNodeStyleShadow = function (node_style, shadow) {
				node_style.boxShadow = shadow._sysvalue;
			};
		}

		nexacro.__setDOMNodeStyleLineSpace = function (node_style, linespace) {
			node_style.lineHeight = (linespace < 0) ? "" : linespace + "px";
		};

		if ((nexacro.Browser != "IE") || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9)) {
			nexacro.__setDOMNodeStyleLetterSpace = function (node_style, letterspace) {
				node_style.letterSpacing = letterspace + "px";
			};
		}
		else {
			nexacro.__setDOMNodeStyleLetterSpace = nexacro._emptyFn;
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			nexacro.__setDOMNodeWordWrap = function (node, use_wordwrap) {
				var node_style = node.style;

				if (use_wordwrap == "char") {
					node_style.whiteSpace = "pre";
					node_style.wordWrap = "break-word";
					node_style.wordBreak = "break-all";
				}
				else if (use_wordwrap == "english") {
					node_style.whiteSpace = "pre";
					node_style.wordWrap = "break-word";
					node_style.wordBreak = "";
				}
				else {
					node_style.whiteSpace = "pre";
					node_style.wordWrap = "normal";
				}
			};
		}
		else {
			nexacro.__setDOMNodeWordWrap = function (node, use_wordwrap) {
				var node_style = node.style;

				if (use_wordwrap == "char") {
					node_style.whiteSpace = "pre-wrap";
					node_style.wordWrap = "break-word";
					node_style.wordBreak = "break-all";
				}
				else if (use_wordwrap == "english") {
					node_style.whiteSpace = "pre-wrap";
					node_style.wordWrap = "break-word";
					node_style.wordBreak = "";
				}
				else {
					node_style.whiteSpace = "pre";
					node_style.wordWrap = "normal";
					node_style.wordBreak = "";
				}
			};
		}

		nexacro.__setTextAreaDOMNodeWordWrap = function (node, use_wordwrap) {
			var node_style = node.style;

			if (use_wordwrap == "char" || use_wordwrap == "english") {
				node.wrap = "hard";
			}
			else {
				node.wrap = "off";
			}

			nexacro.__setDOMNodeWordWrap(node, use_wordwrap);
		};

		nexacro.__setDOMNodeFocusBorder = function (node, border) {
		};

		nexacro.__setDOMNodeTabIndentSize = function (node, nTabSize) {
			var node_style = node.style;

			node_style.tabSize = nTabSize;
		};

		nexacro.__setDOMNodeSelectBackgroundColor = function (node, color) {
		};
		nexacro.__setDOMNodeSelectColor = function (node, color) {
		};
		nexacro.__setDOMNodeCaretColor = function (node, color) {
		};
		nexacro.__setDOMNodeCompositeColor = function (node, color) {
		};


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__changeInputDOMNodeType = function (node, type) {
				if (node.type == type) {
					return node;
				}

				var doc = node.ownerDocument;
				var parent = (node.parentNode || node.parentElement);
				var outerHTML = node.outerHTML;

				outerHTML = outerHTML.replace(/type=[a-z]*/, "");
				outerHTML = outerHTML.replace(/value=""/, "value=\"" + node.value + "\"");

				var new_node = doc.createElement(outerHTML);
				new_node.setAttribute("type", type ? type : "text");

				nexacro.__insertDOMNode(parent, new_node, node);
				nexacro.__removeDOMNode(parent, node);

				return new_node;
			};
		}
		else {
			nexacro.__changeInputDOMNodeType = function (node, type) {
				if (node.type != type) {
					node.type = type;
				}
				return node;
			};
		}

		nexacro.__setDOMNodeImeMode = function (node, mode) {
			var imemodestr = null;
			if (mode == "alpha" || mode == "alpha,full") {
				imemodestr = "inactive";
			}
			else if (mode == "hangul" || mode == "hangul,full") {
				imemodestr = "active";
			}
			else if (mode == "katakana" || mode == "katakana,full") {
				imemodestr = "auto";
			}
			else if (mode == "hiragana") {
				imemodestr = "active";
			}
			else if (mode == "direct") {
				imemodestr = "inactive";
			}
			else if (mode == "disabled") {
				imemodestr = "disabled";
			}
			else {
				imemodestr = "";
			}
			node.style.imeMode = imemodestr;
		};

		nexacro.__setDOMNodeSelect = function (_doc, node) {
			node.select();
		};

		if (nexacro.Browser == "IE") {
			nexacro.__setDOMNodeSetSelect = function (_doc, node, start, end) {
				if (typeof start == 'number') {
					end = (typeof end == 'number') ? end : start;
					if (node.createTextRange) {
						var range = node.createTextRange();
						range.collapse(true);
						range.moveEnd('character', end);
						range.moveStart('character', start);
						range.select();
					}
				}
			};

			nexacro.__setTextAreaDOMNodeSetSelect = function (_doc, node, start, end, no_focus) {
				if (typeof start == 'number') {
					if (no_focus && node.setSelectionRange) {
						node.setSelectionRange(start, end);
					}
					else if (node.createTextRange) {
						var range = node.createTextRange();
						range.collapse(true);
						range.moveEnd('character', end);
						range.moveStart('character', start);
						range.select();
					}
				}
			};
		}
		else {
			nexacro.__setDOMNodeSetSelect = function (_doc, node, start, end) {
				if (node.type == "date") {
					return;
				}

				if (typeof start == 'number') {
					end = (typeof end == 'number') ? end : start;
					if (node.setSelectionRange) {
						var elem = nexacro.__findParentElement(node);
						var comp = nexacro._findParentComponent(elem);
						var api = comp._edit_base_api;
						var data = api._stat_composition.getData();
						if (nexacro.OS == "Mac OS" && nexacro.Browser == "Safari" && api._is_composition() && !api._is_hangul(data)) {
							nexacro.OnceCallbackTimer.callonce(comp, function () {
								if (api instanceof nexacro.EditMaskNumber || api instanceof nexacro.EditMaskString) {
									api._bStatChangeOnly = true;
								}
								node.setSelectionRange(start, end);
								if (api._bStatChangeOnly) {
									api._stat_composition.init();
								}
								api._bStatChangeOnly = false;
							});
						}
						else {
							node.setSelectionRange(start, end);
						}
					}
					else if (node.createTextRange) {
						var range = node.createTextRange();
						range.collapse(true);
						range.moveEnd('character', end);
						range.moveStart('character', start);
						range.select();
					}
				}
			};

			nexacro.__setTextAreaDOMNodeSetSelect = function (_doc, node, start, end) {
				if (typeof start == 'number') {
					if (node.setSelectionRange) {
						node.setSelectionRange(start, end);
					}
					else if (node.createTextRange) {
						var range = node.createTextRange();
						range.collapse(true);
						range.moveEnd('character', end);
						range.moveStart('character', start);
						range.select();
					}
				}
			};
		}

		nexacro.__getNodeSelectionStart = function (node) {
			try {
				return node.selectionStart;
			}
			catch (e) {
				return 0;
			}
		};
		nexacro.__getNodeSelectionEnd = function (node) {
			try {
				return node.selectionEnd;
			}
			catch (e) {
				return 0;
			}
		};

		nexacro.__getDOMNodeCaretPos = function (_doc, node) {
			if (node.type === "date") {
				return -1;
			}

			var begin = 0, end = 0;

			if (node.setSelectionRange) {
				begin = nexacro.__getNodeSelectionStart(node);
				end = nexacro.__getNodeSelectionEnd(node);
			}
			else if (_doc.selection && _doc.selection.createRange) {
				var range = _doc.selection.createRange();
				begin = 0 - range.duplicate().moveStart('character', -100000);
				end = begin + range.text.length;
			}

			return {
				begin : begin, 
				end : end
			};
		};

		nexacro.__getTextAreaDOMNodeCaretPos = function (_doc, node) {
			var begin = 0, end = 0;
			var value = node.value;

			if (node.setSelectionRange) {
				begin = nexacro.__getNodeSelectionStart(node);
				end = nexacro.__getNodeSelectionEnd(node);

				if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
					var len = value.length;
					if (begin > len) {
						begin = len;
					}
					if (end > len) {
						end = len;
					}
				}
			}
			else if (_doc.selection && _doc.selection.createRange) {
				var range = _doc.selection.createRange();
				var n_value = value.replace(/\r\n/g, '\n');
				var len = n_value.length;

				var txtRange = node.createTextRange();
				txtRange.moveToBookmark(range.getBookmark());
				var endRange = node.createTextRange();
				endRange.collapse(false);

				if (txtRange.compareEndPoints('StartToEnd', endRange) > -1) {
					begin = end = len;
				}
				else {
					begin = -txtRange.moveStart('character', -len);
					if (txtRange.compareEndPoints('EndToEnd', endRange) > -1) {
						end = len;
					}
					else {
						end = -txtRange.moveEnd('character', -len);
					}
				}
			}

			return {
				begin : begin, 
				end : end
			};
		};

		nexacro.__getDOMNodeCaretLine = function (_doc, node) {
			var start = 0, end = 0, normalizedValue, range, textInputRange, len, endRange;
			var selectionStart = nexacro.__getNodeSelectionStart(node);
			var selectionEnd = nexacro.__getNodeSelectionEnd(node);

			if (typeof selectionStart == "number" && typeof selectionEnd == "number") {
				if (nexacro.Browser != "IE" && node.selectionDirection == "forward") {
					start = selectionEnd;
				}
				else {
					start = selectionStart;
				}

				var text = node.value.slice(0, start);
				var textarr = text.split("\n");
				var line = textarr.length;
				var element = node._linked_element;

				if (element.wordwrap != "none") {
					var i = 0;
					var curline = 0;
					var checkline = 0;
					var subline = 0;
					for (i = 0; i < line; i++) {
						var t = textarr[i];
						curline = nexacro._getLineCountWithWordwrap(element, element.letterspace, t, element.wordwrap);
						subline += curline;
					}


					if (line == textarr.length) {
						textarr = node.value.slice(0, start + 2).split("\n");

						var text_temp = textarr[line - 1];
						checkline = nexacro._getLineCountWithWordwrap(element, element.letterspace, text_temp, element.wordwrap);
						if (checkline > curline) {
							subline++;
						}
					}
					line = subline;
				}
				return line;
			}
			else {
				node.setActive();

				var element = node._linked_element;
				var line = 0;
				range = _doc.selection.createRange();
				if (range && range.parentElement() == node) {
					len = node.value.length;
					normalizedValue = node.value.replace(/\r\n/g, "\n");

					textInputRange = node.createTextRange();
					textInputRange.moveToBookmark(range.getBookmark());

					endRange = node.createTextRange();
					endRange.collapse(false);

					var text;

					if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
						textarr = normalizedValue.slice(0, len).split("\n");
					}
					else {
						start = -textInputRange.moveStart("character", -len);
						textarr = normalizedValue.slice(0, start).split("\n");
					}

					if (textarr === undefined || textarr == null) {
						return 1;
					}

					line = textarr.length;

					if (element.wordwrap != "none") {
						var i = 0;
						var curline = 0;
						var checkline = 0;
						var subline = 0;
						for (i = 0; i < line; i++) {
							var t = textarr[i];
							curline = nexacro._getLineCountWithWordwrap(element, element.letterspace, t, element.wordwrap);
							subline += curline;
						}

						var text_temp;
						if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
							textarr = normalizedValue.slice(0, len + 2).split("\n");
						}
						else {
							textarr = normalizedValue.slice(0, start + 2).split("\n");
						}

						if (line == textarr.length) {
							text_temp = textarr[line - 1];
							checkline = nexacro._getLineCountWithWordwrap(element, element.letterspace, text_temp, element.wordwrap);
							if (checkline > curline) {
								subline++;
							}
						}

						line = subline;
					}
				}
				return line;
			}
		};

		nexacro.__getDOMNodeValue = function (node) {
			if (node) {
				return node.value;
			}
		};



		nexacro.__getHTMLStyleAbsolute = function () {
			return "position:absolute;overflow:hidden;";
		};
		nexacro.__getHTMLStyleRelative = function () {
			return "position:relative;overflow:hidden;";
		};
		nexacro.__getHTMLStyleAbsoluteTransparent = function () {
			return "position:absolute;overflow:hidden;background-color:transparent;";
		};


		nexacro.__getTextAreaHTMLStyleAbsoluteTransparent = function () {
			return "position:relative;overflow:scroll;background-color:transparent;";
		};


		nexacro.__getMobileIframeHTMLStyleScroll = function () {
			return "overflow:auto;-webkit-overflow-scrolling:touch;";
		};

		nexacro.__getHTMLStylePosLeftTop = function (left, top) {
			return "position:absolute;overflow:hidden;left:" + (left | 0) + "px;top:" + (top | 0) + "px;";
		};
		nexacro.__getHTMLStylePosRightTop = function (right, top) {
			return "position:absolute;overflow:hidden;right:" + (right | 0) + "px;top:" + (top | 0) + "px;";
		};
		nexacro.__getHTMLStylePosLeftBottom = function (left, bottom) {
			return "position:absolute;overflow:hidden;left:" + (left | 0) + "px;bottom:" + (bottom | 0) + "px;";
		};
		nexacro.__getHTMLStylePosRightBottom = function (right, bottom) {
			return "position:absolute;overflow:hidden;right:" + (right | 0) + "px;bottom:" + (bottom | 0) + "px;";
		};

		nexacro.__getHTMLStylePosSize = function (left, top, width, height) {
			return "position:absolute;overflow:hidden;" + 
				"left:" + (left | 0) + "px;" + "top:" + (top | 0) + "px;" + 
				"width:" + (width | 0) + "px;" + "height:" + (height | 0) + "px;";
		};
		nexacro.__getHTMLStylePosUnitSize = function (left, top, width, height) {
			return "position:absolute;overflow:hidden;" + 
				"left:" + (left | 0) + "px;" + "top:" + (top | 0) + "px;" + 
				"width:" + width + ";" + "height:" + height + ";";
		};

		nexacro.__getHTMLStylePos = function (left, top) {
			return "left:" + (left | 0) + "px;" + "top:" + (top | 0) + "px;";
		};
		nexacro.__getHTMLStyleSize = function (width, height) {
			if (width >= 0 && height >= 0) {
				return "width:" + (width | 0) + "px;" + "height:" + (height | 0) + "px;";
			}
			return "";
		};
		nexacro.__getHTMLStyleUnitSize = function (width, height) {
			return "width:" + (width | 0) + ";" + "height:" + (height | 0) + ";";
		};

		nexacro.__getHTMLAttrSize = function (width, height) {
			if (width >= 0 && height >= 0) {
				return " width='" + width + "px' height='" + height + "px'";
			}
			return "";
		};
		nexacro.__getHTMLCanvasAttrSize = function (width, height) {
			if (width >= 0 && height >= 0) {
				return " width='" + width + "' height='" + height + "'";
			}
			return "";
		};

		nexacro.__getHTMLStyleVisible = function (width, height) {
			return (visible_flag == true) ? "" : "visibility:hidden;";
		};
		nexacro.__getHTMLStyleDisplay = function (width, height) {
			return "display:" + v + ";";
		};

		nexacro.__getHTMLAttrEnable = function (enable_flag) {
			return enable_flag ? "" : " disabled='true'";
		};
		nexacro.__getTextAreaHTMLAttrEnable = function (enable_flag) {
			return enable_flag ? nexacro.__getHTMLAttrSelectable(enable_flag) : (" disabled='true'" + nexacro.__getHTMLAttrSelectable(enable_flag));
		};

		nexacro.__getHTMLAttrReadOnly = function (readonly_flag) {
			return readonly_flag ? " readOnly='true'" : "";
		};
		nexacro.__getHTMLAttrTabIndex = function (index) {
			return index > -1 ? " tabIndex='" + index + "'" : "";
		};
		nexacro.__getHTMLAttrToolTip = function (tooltiptext, tooltiptype) {
			return " title='" + nexacro._encodeXML(tooltiptext) + "'";
		};

		if ((nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) || nexacro.Browser == "Opera") {
			nexacro.__getHTMLAttrSelectable = function (selectable_flag) {
				return " unselectable=" + (selectable_flag ? "'off'" : "'on'");
			};
			nexacro.__getHTMLStyleSelectable = function (selectable_flag) {
				return "";
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 9) {
			nexacro.__getHTMLAttrSelectable = function (selectable_flag) {
				return "";
			};
			nexacro.__getHTMLStyleSelectable = function (selectable_flag) {
				return selectable_flag ? "" : "-ms-user-select:none;";
			};
		}
		else if (nexacro.BrowserType == "Gecko") {
			nexacro.__getHTMLAttrSelectable = function (selectable_flag) {
				return "";
			};
			nexacro.__getHTMLStyleSelectable = function (selectable_flag) {
				return selectable_flag ? "" : "-moz-user-select:none;";
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__getHTMLAttrSelectable = function (selectable_flag) {
				return "";
			};
			nexacro.__getHTMLStyleSelectable = function (selectable_flag) {
				return selectable_flag ? "" : "-webkit-user-select:none;";
			};
		}
		else {
			nexacro.__getHTMLAttrSelectable = function (selectable_flag) {
				return "";
			};
			nexacro.__getHTMLStyleSelectable = function (selectable_flag) {
				return selectable_flag ? "" : "user-select:none;";
			};
		}

		nexacro.__getImageHTMLImageUrl = function (imageurl) {
			return " src='" + nexacro._encodeXML(imageurl) + "'";
		};
		nexacro.__getBKImageHTMLStyleImageUrl = function (imageurl) {
			return "background-image:url(" + nexacro._encodeXML(imageurl) + ");";
		};
		nexacro.__getHTMLAttrValue = function (value) {
			return " value='" + nexacro._encodeXML(value) + "'";
		};
		(function () {
			var re_check = /\r|\n/;
			var re_newline = /\r\n|\n|\r/g;
			nexacro.__getSinglelineText = function (text) {
				if (re_check.test(text)) {
					return text.replace(re_newline, " ");
				}
				else {
					return text;
				}
			};
		})();
		nexacro.__getHTMLText = function (text, _new_line) {
			if (_new_line) {
				return nexacro.__toInnerHTMLText(nexacro.__getSinglelineText(text));
			}
			else {
				return nexacro.__toInnerHTMLText(text);
			}
		};
		nexacro.__getHTMLStyleDecorateText = function (text, _new_line) {
			return "text-decoration:" + nexacro._encodeXML(nexacro._decorateString(text));
		};
		nexacro.__getHTMLAttrMaxLength = function (maxlength) {
			return " maxlength='" + ((maxlength > 0) ? maxlength : 65535) + "'";
		};
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__getHTMLStyleBorderType = function (bordertype) {
				return "";
			};
		}
		else if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9)) {
			if (nexacro.Browser == "Gecko" && nexacro.BrowserVersion < 2) {
				nexacro.__getHTMLStyleBorderType = function (bordertype) {
					if (bordertype.type != "normal" && bordertype.type != "") {
						var radius_str = bordertype._radiusx + "px " + bordertype._radiusy + "px";
						if (bordertype._lefttop && bordertype._righttop && bordertype._rightbottom && bordertype._leftbottom) {
							return "-moz-border-radius:" + radius_str + ";";
						}
						else {
							return "-moz-border-radius-topleft:" + ((bordertype._lefttop) ? radius_str : "0px") + ";" + 
								"-moz-border-radius-topright:" + ((bordertype._righttop) ? radius_str : "0px") + ";" + 
								"-moz-border-radius-bottomright:" + ((bordertype._rightbottom) ? radius_str : "0px") + ";" + 
								"-moz-border-radius-bottomleft:" + ((bordertype._leftbottom) ? radius_str : "0px") + ";";
						}
					}
					else {
						return "";
					}
				};
			}
			else {
				nexacro.__getHTMLStyleBorderType = function (bordertype) {
					if (bordertype.type != "normal" && bordertype.type != "") {
						var radius_str = bordertype._radiusx + "px " + bordertype._radiusy + "px";
						if (bordertype._lefttop && bordertype._righttop && bordertype._rightbottom && bordertype._leftbottom) {
							return "border-radius:" + radius_str + ";";
						}
						else {
							return "border-top-left-radius:" + ((bordertype._lefttop) ? radius_str : "0px") + ";" + 
								"border-top-right-radius:" + ((bordertype._righttop) ? radius_str : "0px") + ";" + 
								"border-bottom-right-radius:" + ((bordertype._rightbottom) ? radius_str : "0px") + ";" + 
								"border-bottom-left-radius:" + ((bordertype._leftbottom) ? radius_str : "0px") + ";";
						}
					}
					else {
						return "";
					}
				};
			}
		}

		nexacro.__getHTMLStyleBorder = function (border) {
			if (border && !border._is_real_empty()) {
				if (border._linecnt == 1) {
					return "border:" + border._systop + ";";
				}
				else {
					return "border-top:" + border._systop + ";" + 
						"border-right:" + border._sysright + ";" + 
						"border-bottom:" + border._sysbottom + ";" + 
						"border-left:" + border._sysleft + ";";
				}
			}
			else {
				return "";
			}
		};

		nexacro.__getHTMLStyleBackgroundColor = function (color) {
			if (color) {
				return "background-color:" + color + ";";
			}
			else {
				return "";
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__getHTMLStyleBackgroundImage = function (url, repeat, bkpos) {
				if (url) {
					return "background-image:" + "url(\"" + url + "\")" + ";" + 
						"background-repeat:" + repeat + ";" + 
						"background-position:" + bkpos + ";";
				}
				else {
					return "";
				}
			};
			nexacro.__getHTMLStyleBackgroundGradation = function (sysgradation) {
				return "";
			};
			nexacro.__getHTMLStyleBackgroundImageGradation = function (url, sysgradation, repeat, bkpos) {
				if (url) {
					return "background-image:" + "url(\"" + url + "\")" + ";" + 
						"background-repeat:" + repeat + ";" + 
						"background-position:" + bkpos + ";";
				}
				else {
					return "";
				}
			};
		}
		else {
			nexacro.__getHTMLStyleBackgroundImage = function (url, repeat, bkpos) {
				if (url) {
					if (repeat == "stretch") {
						return "background-image:" + "url(\"" + url + "\")" + ";" + 
							"background-size:100% 100%;";
					}
					else {
						return "background-image:" + "url(\"" + url + "\")" + ";" + 
							"background-repeat:" + repeat + ";" + 
							"background-position:" + bkpos + ";";
					}
				}
				else {
					return "";
				}
			};
			nexacro.__getHTMLStyleBackgroundGradation = function (sysgradation) {
				if (sysgradation) {
					return "background-image:" + sysgradation + ";";
				}
				else {
					return "";
				}
			};
			nexacro.__getHTMLStyleBackgroundImageGradation = function (url, sysgradation, repeat, bkpos) {
				if (url && sysgradation) {
					if (repeat == "stretch") {
						return "background-image:" + "url(\"" + url + "\")," + sysgradation + ";" + 
							"background-size:100% 100%;";
					}
					else {
						return "background-image:" + "url(\"" + url + "\")," + sysgradation + ";" + 
							"background-repeat:" + repeat + ";" + 
							"background-position:" + bkpos + ";";
					}
				}
				else if (url) {
					if (repeat == "stretch") {
						return "background-image:" + "url(\"" + url + "\");" + 
							"background-size:100% 100%;";
					}
					else {
						return "background-image:" + "url(\"" + url + "\");" + 
							"background-repeat:" + repeat + ";" + 
							"background-position:" + bkpos + ";";
					}
				}
				else if (sysgradation) {
					return "background-image:" + sysgradation + ";";
				}
				else {
					return "";
				}
			};
		}
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
			nexacro.__getHTMLStyleOpacity = function (sysopacity) {
				"";
			};
		}
		else {
			nexacro.__getHTMLStyleOpacity = function (sysopacity) {
				if (sysopacity < 100) {
					return "opacity:" + (sysopacity / 100) + ";";
				}
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
			nexacro.__getHTMLStyleEdgeBorder = function (url, edgex, edgey) {
				return "";
			};
		}
		else {
			if (nexacro.Browser == "Gecko") {
				nexacro.__getHTMLStyleEdgeBorder = function (node_style, url, edgex, edgey) {
					var edge = edgey + ' ' + edgex;
					return "border-style:solid;" + 
						"border-width:" + edge + ";" + 
						"-moz-border-image:" + "url(\"" + url + "\") " + edge + " stretch;" + 
						"border-border-image-slice:" + edge + " fill;";
				};
			}
			else if (nexacro.Browser == "WebKit" || nexacro.Browser == "Safari" || nexacro.Browser == "MobileSafari") {
				nexacro.__getHTMLStyleEdgeBorder = function (node_style, url, edgex, edgey) {
					var edge = edgey + ' ' + edgex;
					return "border-style:solid;" + 
						"border-width:" + edge + ";" + 
						"-webkit-border-image:" + "url(\"" + url + "\") " + edge + " stretch;" + 
						"-webkit-border-image-slice:" + edge + " fill;";
				};
			}
			else if (nexacro.Browser == "Opera") {
				nexacro.__getHTMLStyleEdgeBorder = function (node_style, url, edgex, edgey) {
					var edge = edgey + ' ' + edgex;
					return "border-style:solid;" + 
						"border-width:" + edge + ";" + 
						"-o-border-image:" + "url(\"" + url + "\") " + edge + " stretch;";
				};
			}
			else {
				nexacro.__getHTMLStyleEdgeBorder = function (node_style, url, edgex, edgey) {
					var edge = edgey + ' ' + edgex;
					return "border-style:solid;" + 
						"border-width:" + edge + ";" + 
						"border-image:" + "url(\"" + url + "\") " + edge + " stretch;" + 
						"border-image-slice:" + edge + " fill;";
				};
			}
		}

		nexacro.__getHTMLStyleAlign = function (align) {
			return "text-align:" + align._halign + ";vertical-align:" + align._valign + ";";
		};
		nexacro.__getHTMLStyleAlignXY = function (halign, valign) {
			return ((halign) ? ("text-align:" + halign + ";") : "") + ((valign) ? ("vertical-align:" + align._valign + ";") : "");
		};

		nexacro.__getBKImageHTMLStyleAlign = function (align) {
			return (align) ? ("background-position:" + align._halign + ' ' + (align.valign == "middle" ? "center" : align.valign) + ";") : "";
		};
		nexacro.__getBKImageHTMLStyleAlignXY = function (halign, valign) {
			return "background-position:" + halign + ' ' + (valign == "middle" ? "center" : valign) + ";";
		};

		nexacro.__getHTMLStyleColor = function (color) {
			return (color) ? ("color:" + color._syscolor + ";") : "";
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__getHTMLStyleFont = function (font) {
				return (font) ? ((font._bold ? "font-weight:bold;" : "") + (font._italic ? "font-style:italic;" : "") + "font-family:" + font.face + ";" + "font-size:" + (font.size >= 0 ? font.size + "pt;" : Math.abs(font.size) + "px;") + (font._sysdecoration ? ("text-decoration:" + font._sysdecoration + ";") : "")) : "";
			};
		}
		else {
			nexacro.__getHTMLStyleFont = function (font) {
				return (font) ? ("font:" + font._sysvalue + ";" + (font._sysdecoration ? ("text-decoration:" + font._sysdecoration + ";") : "")) : "";
			};
		}

		nexacro.__getHTMLStylePadding = function (padding) {
			return (padding) ? ("padding:" + padding.top + "px " + padding.right + "px " + padding.bottom + "px " + padding.left + "px;") : 
				"padding:0px;";
		};

		nexacro.__getHTMLStylePaddingXY = function (left, top, right, bottom) {
			return "padding:" + top + "px " + right + "px " + bottom + "px " + left + "px;";
		};

		nexacro.__getHTMLStyleMargin = function (margin) {
			if (margin) {
				return "";
			}
			else {
				return "";
			}
		};

		nexacro.__getHTMLStyleHAlign = function (halign) {
			return "text-align:" + halign + ";";
		};
		nexacro.__getHTMLStyleAlign = function (align) {
			return "text-align:" + align._halign + ";vertical-align:" + align._valign + ";";
		};
		nexacro.__getHTMLStyleAlignXY = function (halign, valign) {
			return "text-align:" + halign + ";vertical-align:" + valign + ";";
		};

		nexacro.__getHTMLStyleBoxSizing = function (boxsizing) {
			return "box-sizing:" + boxsizing + ";";
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			nexacro.__getInputHTMLStyleAlignXY = function (halign, valign, container_height, txt_height) {
				var halign_str = "text-align:" + halign + ";";
				if (valign == "top") {
					return halign_str + "padding-top:0px;";
				}
				else if (valign == "middle") {
					return halign_str + ((container_height > txt_height) ? 
						"padding-top:" + ((container_height - txt_height) / 2) + "px;" : "");
				}
				else if (valign == "bottom") {
					return halign_str + ((container_height - txt_height) ? 
						"padding-top:" + (container_height - txt_height) + "px;" : "");
				}
				return halign_str;
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__getInputHTMLStyleAlignXY = function (halign, valign, container_height, txt_height) {
				var halign_str = "text-align:" + halign + ";";
				if (valign == "top") {
					return halign_str + "top:0px;height:" + txt_height + "px;";
				}
				else if (valign == "middle") {
					return halign_str + "top:0px;height:" + container_height + "px;";
				}
				else if (valign == "bottom") {
					return halign_str + "top:" + (container_height - txt_height) + "px;height:" + txt_height + "px;";
				}
				return halign_str;
			};
		}
		else {
			nexacro.__getInputHTMLStyleAlignXY = function (halign, valign, container_height, txt_height) {
				var halign_str = "text-align:" + halign + ";";
				if (valign == "top") {
					return halign_str + "padding-top:0px;padding-bottom:" + (container_height - txt_height) + "px;";
				}
				else if (valign == "middle") {
					return halign_str + "padding-top:0px;padding-bottom:0px;";
				}
				else if (valign == "bottom") {
					return halign_str + "padding-top:" + (container_height - txt_height) + "px;padding-bottom:0px;";
				}
				return halign_str;
			};
		}

		nexacro.__getTextAreaHTMLStyleAlignXY = function (halign, valign, blank_height) {
			blank_height = blank_height >= 0 ? blank_height : 0;
			if (valign == "top") {
				return "text-align:" + halign + ";padding-top:0px;padding-bottom:0px;";
			}
			else if (valign == "middle") {
				return "text-align:" + halign + ";padding-top:" + (blank_height / 2) + "px;padding-bottom:0px;";
			}
			else if (valign == "bottom") {
				return "text-align:" + halign + ";padding-top:" + blank_height + "px;padding-bottom:0px;";
			}
			return "text-align:" + halign + ";";
		};

		nexacro.__getHTMLStyleVAlignMargin = function (valign, container_height, txt_height) {
			var offset = 0;
			if (valign == "middle") {
				offset = (container_height - txt_height) / 2;
			}
			else if (valign == "bottom") {
				offset = (container_height - txt_height);
			}
			return "margin-top:" + offset + "px;";
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__getHTMLStyleCursor = function (cursor, deftype) {
				var cur_type = (cursor && !cursor._is_empty) ? cursor._value : (deftype ? deftype : "arrow");
				if (cur_type == "no") {
					cur_type = "not-allowed";
				}
				else if (cur_type == "pointer") {
					cur_type = "hand";
				}
				else if (cur_type == "arrowwait") {
					cur_type = "progress";
				}
				else if (cur_type == "arrow") {
					cur_type = "default";
				}
				return "cursor:" + cur_type + ";";
			};
		}
		else if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9)) {
			nexacro.__getHTMLStyleCursor = function (cursor, deftype) {
				var cur_type = (cursor && !cursor._is_empty) ? cursor._value : (deftype ? deftype : "arrow");
				if (cur_type == "no") {
					cur_type = "not-allowed";
				}
				else if (cur_type == "hand") {
					cur_type = "pointer";
				}
				else if (cur_type == "text") {
					cur_type = "text";
				}
				else if (cur_type == "arrow") {
					cur_type = "default";
				}
				else if (cur_type == "arrowwait") {
					cur_type = "progress";
				}
				return "cursor:" + cur_type + ";";
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__getHTMLStyleShadow = function (shadow) {
				return "";
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) {
			nexacro.__getHTMLStyleShadow = function (shadow) {
				return "box-shadow:" + shadow._sysvalue + ";";
			};
		}
		else if (nexacro.Browser == "Gecko" && nexacro.BrowserVersion < 2) {
			nexacro.__getHTMLStyleShadow = function (shadow) {
				return "-moz-box-shadow:" + shadow._sysvalue + ";";
			};
		}
		else if (nexacro.BrowserType == "WebKit") {
			nexacro.__getHTMLStyleShadow = function (shadow) {
				return "-webkit-box-shadow:" + shadow._sysvalue + ";";
			};
		}
		else {
			nexacro.__getHTMLStyleShadow = function (shadow) {
				return "box-shadow:" + shadow._sysvalue + ";";
			};
		}

		nexacro.__getHTMLStyleLineSpace = function (linespace) {
			return (linespace < 0) ? "" : "line-height:" + linespace;
		};

		nexacro.__getHTMLStyleLetterSpace = function (letterspace) {
			return "letter-spacing:" + letterspace + ";";
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__getHTMLAttrWordWrap = function (use_wordwrap) {
				if (use_wordwrap != "none") {
					return " wrap='hard'";
				}
				else {
					return " wrap='off'";
				}
			};
		}
		else {
			nexacro.__getHTMLAttrWordWrap = function (use_wordwrap) {
				return "";
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			nexacro.__getHTMLStyleWordWrap = function (use_wordwrap) {
				if (use_wordwrap == "char" || use_wordwrap == "english") {
					return "white-space:pre;word-wrap:break-word;";
				}
				else {
					return "white-space:pre;word-wrap:normal;";
				}
			};
		}
		else {
			nexacro.__getHTMLStyleWordWrap = function (use_wordwrap) {
				if (use_wordwrap == "char") {
					return "white-space:pre;word-wrap:break-word;";
				}
				else if (use_wordwrap == "english") {
					return "white-space:pre-wrap;word-wrap:break-word;";
				}
				else {
					return "white-space:pre;word-wrap:normal;";
				}
			};
		}

		nexacro.__getHTMLAttrFocusBorder = function (shadow) {
			return "";
		};

		nexacro.__getHTMLAttrTabIndentSize = function (nTabSize) {
			return "";
		};

		nexacro.__getHTMLStyleDecorateText = function (text) {
			"text-decoration:" + nexacro._encodeXML(nexacro._decorateString(text)) + ";";
		};

		nexacro.__getHTMLStylemeMode = function (mode) {
			var imemodestr = null;
			if (mode == "alpha" || mode == "alpha,full") {
				imemodestr = "inactive";
			}
			else if (mode == "hangul" || mode == "hangul,full") {
				imemodestr = "active";
			}
			else if (mode == "katakana" || mode == "katakana,full") {
				imemodestr = "auto";
			}
			else if (mode == "hiragana") {
				imemodestr = "active";
			}
			else if (mode == "direct") {
				imemodestr = "inactive";
			}
			else if (mode == "disabled") {
				imemodestr = "disabled";
			}
			else {
				return "";
			}
			return "ime-mode:" + imemodestr + ";";
		};

		nexacro.__getHTMLAttrSelectBackgroundColor = function (color) {
			return "";
		};
		nexacro.__getHTMLAttrSelectColor = function (color) {
			return "";
		};
		nexacro.__getHTMLAttrCaretColor = function (color) {
			return "";
		};
		nexacro.__getHTMLAttrCompositeColor = function (color) {
			return "";
		};


		nexacro._firstLoadFocus = true;
		nexacro.__isActiveWindow = function (_doc) {
			if (_doc.hasFocus) {
				return _doc.hasFocus();
			}
		};

		nexacro._checkWindowActive = function (_window) {
			var is_active;
			var _doc = _window._doc;
			if (_doc) {
				if (_doc.hasFocus) {
					is_active = _doc.hasFocus();
					_window._is_active_window = is_active;
				}

				if (is_active === undefined) {
					is_active = _window._is_active_window;
				}
			}

			return is_active;
		};


		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion <= 8) {
				nexacro.__setDOMNodeFocus = function (node) {
					var is_active_window;
					var owner_doc = (node.ownerDocument || node.document);
					if (owner_doc.hasFocus) {
						is_active_window = owner_doc.hasFocus();
					}
					if (is_active_window === undefined) {
						if (!node || !node._linked_element || !node._linked_element._parent_elem) {
							return;
						}

						var comp = node._linked_element._parent_elem.linkedcontrol;
						var _window = comp ? comp._getWindow() : null;
						if (_window) {
							is_active_window = _window._is_active_window;
						}
					}

					if (is_active_window) {
						owner_doc.focus();

						if (node.unselectable == "on") {
							node.unselectable == "off";
							try {
								node.setActive();
							}
							catch (e) {
							}
							node.unselectable == "on";
						}
						else {
							node.setActive();
						}
					}
				};
				nexacro.__setInputDOMNodeFocus = function (node) {
					var is_active_window;
					var owner_doc = (node.ownerDocument || node.document);
					if (owner_doc.hasFocus) {
						is_active_window = owner_doc.hasFocus();
					}
					if (is_active_window === undefined) {
						if (!node || !node._linked_element || !node._linked_element._parent_elem) {
							return;
						}

						var comp = node._linked_element._parent_elem.linkedcontrol;
						var _window = comp ? comp._getWindow() : null;
						if (_window) {
							is_active_window = _window._is_active_window;
						}
					}

					if (is_active_window) {
						owner_doc.focus();

						if (node.style.visibility == "hidden" || node.style.display == "none") {
							node.setActive();
						}
						else if (node.offsetWidth == 0 || node.offsetHeight == 0) {
							node.setActive();
						}
						else if (node.readOnly || node.disabled) {
							node.setActive();
						}
						else {
							node.setActive();
							node.blur();

							try {
								node.focus();
							}
							catch (e) {
								;
							}
						}
					}
				};
			}
			else {
				nexacro.__setDOMNodeFocus = function (node, selffocus) {
					var is_active_window;
					var owner_doc = (node.ownerDocument || node.document);

					if (!node || !node._linked_element || !node._linked_element._parent_elem) {
						return;
					}

					var comp = node._linked_element._parent_elem.linkedcontrol;
					var _window = comp ? comp._getWindow() : null;

					is_active_window = nexacro.__isActiveWindow(owner_doc);
					if (is_active_window === undefined && _window) {
						is_active_window = _window._is_active_window;
					}

					if (is_active_window) {
						if (selffocus) {
							owner_doc.focus();
							node.focus();
						}
						else {
							if (nexacro.BrowserType == "Edge") {
								owner_doc.focus();
								node.focus();
							}
							else {
								var owner_bodynode = owner_doc.body;
								if (owner_bodynode) {
									owner_bodynode.focus();
								}
							}
						}
					}
				};
				nexacro.__setInputDOMNodeFocus = function (node) {
					var is_active_window;
					var owner_doc = (node.ownerDocument || node.document);
					if (owner_doc.hasFocus && nexacro.BrowserType != "Edge") {
						is_active_window = owner_doc.hasFocus();
					}
					if (is_active_window === undefined) {
						if (!node || !node._linked_element || !node._linked_element._parent_elem) {
							return;
						}

						var comp = node._linked_element._parent_elem.linkedcontrol;
						var _window = comp ? comp._getWindow() : null;
						if (_window) {
							is_active_window = _window._is_active_window;
						}
					}

					if (is_active_window) {
						owner_doc.focus();
						node.focus();
					}

					if (nexacro.BrowserVersion >= 10) {
						if (!is_active_window && nexacro._firstLoadFocus) {
							owner_doc.focus();
							node.focus();
							nexacro._firstLoadFocus = false;
						}
					}
				};
			}
		}
		else {
			nexacro.__setDOMNodeFocus = function (node, selffocus) {
				var is_active_window;

				var owner_doc = (node.ownerDocument || node.document);

				if (!node || !node._linked_element || !node._linked_element._parent_elem) {
					return;
				}

				var comp = node._linked_element._parent_elem.linkedcontrol;
				var _window = comp ? comp._getWindow() : null;
				if (_window) {
					if (owner_doc.hasFocus) {
						is_active_window = _window._is_active_window || owner_doc.hasFocus();
					}
					else {
						is_active_window = _window._is_active_window;
					}
				}

				if (is_active_window || (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid())) {
					if (selffocus) {
						node.focus();
					}
					else {
						var owner_body = owner_doc.body;
						if (owner_body) {
							owner_body.focus();
						}
					}
				}
			};
			nexacro.__setInputDOMNodeFocus = function (node) {
				var is_active_window;

				var owner_doc = (node.ownerDocument || node.document);

				if (!node || !node._linked_element || !node._linked_element._parent_elem) {
					return;
				}

				var comp = node._linked_element._parent_elem.linkedcontrol;
				var _window = comp ? comp._getWindow() : null;
				if (_window) {
					if (owner_doc.hasFocus) {
						is_active_window = _window._is_active_window || owner_doc.hasFocus();
					}
					else {
						is_active_window = _window._is_active_window;
					}
				}

				if (is_active_window || (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid())) {
					node.focus();
				}
			};
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion <= 8) {
				nexacro.__setDOMNodeBlur = function (node) {
					try {
						node.blur();
					}
					catch (e) {
					}
				};
			}
			else {
				nexacro.__setDOMNodeBlur = function (node) {
					node.blur();
				};
			}
		}
		else {
			nexacro.__setDOMNodeBlur = function (node) {
				node.blur();
			};
		}


		nexacro._setDOMNodeRemoveCaret = function () {
			document.selection.empty();
		};


		nexacro._degreesToRadians = function (degrees) {
			return degrees * (Math.PI / 180);
		};

		nexacro._radiansToDegrees = function (radians) {
			return radians * (180 / Math.PI);
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._createMatrixIdentity = function () {
				return [[1, 0, 0], [0, 1, 0], [0, 0, 1]
				];
			};

			nexacro._matrixMultiply = function (m1, m2) {
				var result = nexacro._createMatrixIdentity();

				for (var x = 0; x < 3; x++) {
					for (var y = 0; y < 3; y++) {
						var sum = 0;

						for (var z = 0; z < 3; z++) {
							sum += m1[x][z] * m2[z][y];
						}
						result[x][y] = sum;
					}
				}
				return result;
			};

			nexacro._setMatrix = function (canvas, m, updateLineScale) {
				if (!nexacro._matrixIsFinite(m)) {
					return;
				}
				canvas._matrix = m;

				if (updateLineScale) {
					var det = m[0][0] * m[1][1] - m[0][1] * m[1][0];
					canvas._line_scale = Math.sqrt(Math.abs(det));
				}
			};

			nexacro._matrixIsFinite = function (m) {
				for (var i = 0; i < 3; i++) {
					for (var j = 0; j < 2; j++) {
						if (!isFinite(m[i][j]) || isNaN(m[i][j])) {
							return false;
						}
					}
				}
				return true;
			};

			nexacro._isPointInPath = function (path, pt) {
				for (var c = false, i = -1, l = path.length, j = l - 1; ++i < l; j = i) {
					if (((path[i].y <= pt.y && pt.y < path[j].y) || (path[j].y <= pt.y && pt.y < path[i].y))
						 && (pt.x < (path[j].x - path[i].x) * (pt.y - path[i].y) / (path[j].y - path[i].y) + path[i].x)
						 && (c = !c)) {
						c = true;
					}
				}
				return c;
			};

			nexacro.CanvasGradient = function (type) {
				this.type_ = type;
				this.x0 = 0;
				this.y0 = 0;
				this.r0 = 0;
				this.x1 = 0;
				this.y1 = 0;
				this.r1 = 0;
				this.colors = [];
			};

			var _pCanvasGradient = nexacro.CanvasGradient.prototype;

			_pCanvasGradient.addColorStop = function (aOffset, aColor) {
				var color = nexacro._getWebColorFromXreColor(aColor);
				var alpha = nexacro._getXreColorAlpha(aColor) / 255;
				this.colors.push({
					offset : aOffset, 
					color : color, 
					alpha : alpha
				});
			};

			delete _pCanvasGradient;

			nexacro.__setCanvasFillStyle = function (canvas, clrrgb, clra) {
			};
			nexacro.__setCanvasStrokeStyle = function (canvas, strokecolor) {
				canvas._stroke_color = nexacro._getWebColorFromXreColor(strokecolor.value);
				canvas._stroke_alpha = nexacro._getXreColorAlpha(strokecolor.value) / 255;
			};
			nexacro.__setCanvasLineCap = function (canvas, eCapType) {
			};
			nexacro.__setCanvasLineJoin = function (canvas, eJoinType) {
			};
			nexacro.__setCanvasLineWidth = function (canvas, nSize) {
			};
			nexacro.__setCanvasMiterLimit = function (canvas, nLimit) {
			};
			nexacro.__setCanvasShadowColor = function (canvas, clrRGA, clrA) {
			};
			nexacro.__setCanvasShadowOffsetX = function (canvas, sX) {
			};
			nexacro.__setCanvasShadowOffsetY = function (canvas, sY) {
			};
			nexacro.__setCanvasShadowBlur = function (canvas, nFact) {
			};
			nexacro.__setCanvasFont = function (canvas, font, sysvalue) {
			};

			nexacro.__setCanvasFillColor = function (canvas, fillstyle) {
				canvas._fill_type = 1;
				canvas._fill_color = nexacro._getWebColorFromXreColor(fillstyle.value);
				canvas._fill_alpha = nexacro._getXreColorAlpha(fillstyle.value) / 255;
			};

			nexacro.__setCanvasFillGradation = function (canvas, fillstyle) {
				canvas._fill_type = 2;
				canvas._fill_gradation = fillstyle;
			};

			nexacro.__setCanvasTextAlign = function (canvas, eAlignValue) {
				if (eAlignValue == "center") {
					canvas._textAlign = 0;
				}
				else if (eAlignValue == "end") {
					canvas._textAlign = 1;
				}
				else if (eAlignValue == "start") {
					canvas._textAlign = 2;
				}
				else if (eAlignValue == "right") {
					canvas._textAlign = 3;
				}
				else if (eAlignValue == "left") {
					canvas._textAlign = 4;
				}
			};
			nexacro.__setCanvasTextBaseline = function (canvas, eBaseValue) {
				if (eBaseValue == "alphabetic") {
					canvas._textBaseline = 0;
				}
				else if (eBaseValue == "hanging") {
					canvas._textBaseline = 1;
				}
				else if (eBaseValue == "top") {
					canvas._textBaseline = 2;
				}
				else if (eBaseValue == "bottom") {
					canvas._textBaseline = 3;
				}
				else if (eBaseValue == "middle") {
					canvas._textBaseline = 4;
				}
			};

			nexacro.__drawCanvasBeginPath = function (canvas) {
				canvas._path_str = "";
			};
			nexacro.__drawCanvasClosePath = function (canvas) {
				canvas._path_str += 'x ';
			};

			nexacro.__drawCanvasStrokeRect = function (canvas, x, y, dx, dy) {
				nexacro.__rectCanvas(canvas, x, y, dx, dy, true);
				nexacro.__strokeCanvas(canvas);
				nexacro.__drawCanvasBeginPath(canvas);
			};
			nexacro.__drawCanvasFillRect = function (canvas, x, y, dx, dy) {
				nexacro.__drawCanvasmoveTo(canvas, x, y);
				nexacro.__drawCanvaslineTo(canvas, x + dx, y);
				nexacro.__drawCanvaslineTo(canvas, x + dx, y + dy);
				nexacro.__drawCanvaslineTo(canvas, x, y + dy);
				nexacro.__drawCanvasClosePath(canvas);
				nexacro.__fillCanvas(canvas);
			};
			nexacro.__drawCanvasRect = nexacro.__drawCanvasStrokeRect;
			nexacro.__drawCanvasClearRect = function (canvas) {
			};

			nexacro.__drawCanvaslineTo = function (canvas, x, y) {
				var elem = canvas._linked_element;
				var pt = elem._getCoordSize(x, y);
				canvas._pathArray.push({
					x : canvas._curx, 
					y : canvas._cury
				});
				canvas._pathArray.push({
					x : pt.x, 
					y : pt.y
				});
				var sub = 'l ' + pt.x + ',' + pt.y + ' ';
				canvas._path_str += sub;
				canvas._curx = pt.x;
				canvas._cury = pt.y;
			};
			nexacro.__drawCanvasmoveTo = function (canvas, x, y) {
				var elem = canvas._linked_element;
				var pt = elem._getCoordSize(x, y);
				var sub = 'm ' + pt.x + ',' + pt.y + ' ';
				canvas._path_str += sub;
				canvas._curx = pt.x;
				canvas._cury = pt.y;
			};
			nexacro.__drawCanvasQuadraticCurveTo = function (canvas, cp1x, cp1y, cp2x, cp2y) {
				if (!canvas._curx) {
					nexacro.__drawCanvasmoveTo(canvas, cp1x, cp1y);
				}
				var elem = canvas._linked_element;
				var cp = elem._getCoordSize(cp1x, cp1y);
				var p = elem._getCoordSize(cp2x, cp2y);

				var cp1 = {
					x : Math.round(canvas._curx + 2.0 / 3.0 * (cp.x - canvas._curx)), 
					y : Math.round(canvas._cury + 2.0 / 3.0 * (cp.y - canvas._cury))
				};
				var cp2 = {
					x : Math.round(cp1.x + (p.x - canvas._curx) / 3.0), 
					y : Math.round(cp1.y + (p.y - canvas._cury) / 3.0)
				};

				canvas._pathArray.push({
					x : cp1.x, 
					y : cp1.y
				});
				canvas._pathArray.push({
					x : cp2.x, 
					y : cp2.y
				});
				canvas._pathArray.push({
					x : p.x, 
					y : p.y
				});

				var sub = 'c ' + cp1.x + ',' + cp1.y + ',' + cp2.x + ',' + cp2.y + ',' + p.x + ',' + p.y + ' ';

				canvas._path_str += sub;
				canvas._curx = p.x;
				canvas._cury = p.y;
			};
			nexacro.__drawCanvasBezierCurveTo = function (canvas, cp1x, cp1y, cp2x, cp2y, x, y) {
				if (!canvas._curx) {
					nexacro.__drawCanvasmoveTo(canvas, cp1x, cp1y);
				}
				var elem = canvas._linked_element;
				var p = elem._getCoordSize(cp1x, cp1y);
				canvas._pathArray.push({
					x : p.x, 
					y : p.y
				});
				var cp1 = elem._getCoordSize(cp2x, cp2y);
				canvas._pathArray.push({
					x : cp1.x, 
					y : cp1.y
				});
				var cp2 = elem._getCoordSize(x, y);
				canvas._pathArray.push({
					x : cp2.x, 
					y : cp2.y
				});
				var sub = 'c ' + p.x + ',' + p.y + ',' + cp1.x + ',' + cp1.y + ',' + cp2.x + ',' + cp2.y + ' ';

				canvas._path_str += sub;
				canvas._curx = cp2.x;
				canvas._cury = cp2.y;
			};
			nexacro.__darwCanvasArc = function (canvas, x, y, r, sA, eA, eCw) {
				var _canvas = canvas;
				var scale = canvas._scale;
				var hscale = canvas._half_scale;
				var _r = r * scale;
				var arcType = eCw ? 'at' : 'wa';
				var xStart = x + Math.cos(sA) * _r - hscale;
				var yStart = y + Math.sin(sA) * _r - hscale;
				var xEnd = x + Math.cos(eA) * _r - hscale;
				var yEnd = y + Math.sin(eA) * _r - hscale;
				var elem = canvas._linked_element;
				var p = elem._getCoordSize(x, y);
				var pStart = elem._getCoordSize(xStart, yStart);
				var pEnd = elem._getCoordSize(xEnd, yEnd);

				if (parseInt(xStart) == parseInt(xStart) && eCw) {
					pStart.x -= 1;
					pStart.y -= 1;
				}
				else {
					pStart.x += 1;
					pStart.y += 1;
				}
				var sub = arcType + ' ' + (p.x - _r) + ',' + (p.y - _r) + ' ' + (p.x + _r) + ',' + (p.y + _r) + ' ' + 
					parseInt(pStart.x) + ',' + parseInt(pStart.y) + ' ' + parseInt(pEnd.x) + ',' + parseInt(pEnd.y) + ' ';

				canvas._curx = pEnd.x;
				canvas._cury = pEnd.y;
				canvas._path_str += sub;
			};
			nexacro.__drawCanvasArcTo = function (canvas, x, y, x2, y2, r) {
				if (canvas._curx) {
					var p0 = {
						x : canvas._curx / 10, 
						y : canvas._cury / 10
					};
					var p1 = {
						x : x, 
						y : y
					};
					var p2 = {
						x : x2, 
						y : y2
					};

					var radius = r;

					if ((p1.x == p0.x && p1.y == p0.y) || (p1.x == p2.x && p1.y == p2.y) || radius == 0) {
						nexacro.__drawCanvaslineTo(canvas, p1.x, p1.y);
						return true;
					}

					var p1p0 = {
						x : (p0.x - p1.x), 
						y : (p0.y - p1.y)
					};
					var p1p2 = {
						x : (p2.x - p1.x), 
						y : (p2.y - p1.y)
					};
					var p1p0_length = Math.sqrt(p1p0.x * p1p0.x + p1p0.y * p1p0.y);
					var p1p2_length = Math.sqrt(p1p2.x * p1p2.x + p1p2.y * p1p2.y);

					var cos_phi = (p1p0.x * p1p2.x + p1p0.y * p1p2.y) / (p1p0_length * p1p2_length);
					if (-1 == cos_phi) {
						element.lineTo(p1.x, p1.y);
						return true;
					}

					if (1 == cos_phi) {
						var max_length = 65535;
						var factor_max = max_length / p1p0_length;
						var ep = {
							x : (p0.x + factor_max * p1p0.x), 
							y : (p0.y + factor_max * p1p0.y)
						};
						nexacro.__drawCanvaslineTo(canvas, Math.round(ep.x), Math.round(ep.y));
						return true;
					}

					var tangent = radius / Math.tan(Math.acos(cos_phi) / 2);
					var factor_p1p0 = tangent / p1p0_length;
					var t_p1p0 = {
						x : (p1.x + factor_p1p0 * p1p0.x), 
						y : (p1.y + factor_p1p0 * p1p0.y)
					};

					var orth_p1p0 = {
						x : p1p0.y, 
						y : -p1p0.x
					};
					var orth_p1p0_length = Math.sqrt(orth_p1p0.x * orth_p1p0.x + orth_p1p0.y * orth_p1p0.y);
					var factor_ra = radius / orth_p1p0_length;

					var cos_alpha = (orth_p1p0.x * p1p2.x + orth_p1p0.y * p1p2.y) / (orth_p1p0_length * p1p2_length);
					if (cos_alpha < 0) {
						orth_p1p0.x = -orth_p1p0.x;
						orth_p1p0.y = -orth_p1p0.y;
					}

					var p = {
						x : (t_p1p0.x + factor_ra * orth_p1p0.x), 
						y : (t_p1p0.y + factor_ra * orth_p1p0.y)
					};

					orth_p1p0.x = -orth_p1p0.x;
					orth_p1p0.y = -orth_p1p0.y;

					var sa = Math.acos(orth_p1p0.x / orth_p1p0_length);
					if (orth_p1p0.y < 0) {
						sa = 2 * Math.PI - sa;
					}

					var anticlockwise = false;

					var factor_p1p2 = tangent / p1p2_length;
					var t_p1p2 = {
						x : p1.x + factor_p1p2 * p1p2.x, 
						y : p1.y + factor_p1p2 * p1p2.y
					};
					var orth_p1p2 = {
						x : t_p1p2.x - p.x, 
						y : t_p1p2.y - p.y
					};
					var orth_p1p2_length = Math.sqrt(orth_p1p2.x * orth_p1p2.x + orth_p1p2.y * orth_p1p2.y);
					var ea = Math.acos(orth_p1p2.x / orth_p1p2_length);

					if (orth_p1p2.y < 0) {
						ea = 2 * Math.PI - ea;
					}
					if ((sa > ea) && ((sa - ea) < Math.PI)) {
						anticlockwise = true;
					}
					if ((sa < ea) && ((ea - sa) > Math.PI)) {
						anticlockwise = true;
					}

					nexacro.__drawCanvaslineTo(canvas, Math.round(t_p1p0.x), Math.round(t_p1p0.y));
					nexacro.__darwCanvasArc(canvas, Math.round(p.x), Math.round(p.y), radius, sa, ea, anticlockwise);
					return true;
				}
				else {
					nexacro.__drawCanvasmoveTo(canvas, x, y);
				}
			};

			nexacro.__isPointInCanvasPath = function (canvas, x, y) {
				if (canvas) {
					var elem = canvas._linked_element;
					var p = elem._getCoordSize(x, y);
					return nexacro._isPointInPath(canvas._pathArray, p);
				}
			};
			nexacro.__clipCanvas = function (canvas) {
			};
			nexacro.__setCanvasTransform = function (canvas, a, b, c, d, e, f) {
				var m = [[a, b, 0], [c, d, 0], [e, f, 1]
				];

				nexacro._setMatrix(canvas, m, true);
			};
			nexacro.__measureCanvas = function (canvas, text) {
			};

			nexacro.__createCanvasLinearGradient = function (canvas, aX0, aY0, aX1, aY1) {
				var gradient = new nexacro.CanvasGradient('gradient');
				gradient.x0 = aX0;
				gradient.y0 = aY0;
				gradient.x1 = aX1;
				gradient.y1 = aY1;
				return gradient;
			};
			nexacro.__createCanvasRadialGradient = function (canvas, x0, y0, x1, y1, r0, r1) {
				var gradient = new nexacro.CanvasGradient('gradientradial');
				gradient.x0 = x0;
				gradient.y0 = y0;
				gradient.r0 = r0;
				gradient.x1 = x1;
				gradient.y1 = y1;
				gradient.r1 = r1;
				return gradient;
			};

			nexacro.__rectCanvas = function (canvas, x, y, w, h) {
				var element = canvas._linked_element;
				if (canvas._path_str) {
					var gap = element.lineOffset;
					var gap2 = (h > 0) ? gap : -gap;
					element.moveTo(x - gap, y - gap2);
					element.lineTo(x + w + gap, y - gap2);
					element.lineTo(x + w + gap, y + h + gap2);
					element.lineTo(x - gap, y + h + gap2);
					element.closePath();
					element.moveTo(x + gap, y + gap2);
					element.lineTo(x + w - gap, y + gap2);
					element.lineTo(x + w - gap, y + h - gap2);
					element.lineTo(x + gap, y + h - gap2);
					element.closePath();
				}
				else {
					element.moveTo(x, y);
					element.lineTo(x + w, y);
					element.lineTo(x + w, y + h);
					element.lineTo(x, y + h);
					element.closePath();
				}
			};
			nexacro.__fillCanvas = function (canvas) {
				var elem = canvas._linked_element;

				if (canvas && canvas._path_str) {
					var vml_str = "<v:shape filled='t' stroked='f' style='position:absolute;width:10px;height:10px;' " + 
						"coordorigin='0 0' coordsize='" + canvas._scale * 10 + ' ' + canvas._scale * 10 + "' ";
					if (canvas._fill_type == 2) {
						var gradation = canvas._fill_gradation;
						var angle = Math.atan2(gradation._end_x - gradation._start_x, gradation._end_y - gradation._start_y) * 180 / Math.PI;
						var start_color = nexacro._getWebColorFromXreColor(gradation.start_color);
						var end_color = nexacro._getWebColorFromXreColor(gradation.end_color);

						vml_str += "fillcolor='red' path='" + canvas._path_str + "'>" + 
							"<v:fill type ='gradient' color= '" + end_color + "' color2 = '" + start_color + "' colors = ' 0 " + end_color + "; 1 " + start_color + "' " + 
							"opacity = '1' " + "angle = '" + angle + "'/>";
					}
					else {
						vml_str += "fillcolor='" + canvas._fill_color + "' ";
						if (canvas._fill_alpha != 1) {
							vml_str += "opacity='" + canvas._fill_alpha + "' ";
						}
						vml_str += "path='" + canvas._path_str + "' />";
					}

					canvas._vml_str += vml_str;
					canvas._draw_node.innerHTML = canvas._vml_str;
				}
			};
			nexacro.__strokeCanvas = function (canvas) {
				var elem = canvas._linked_element;
				if (canvas._path_str) {
					var lineWidth = canvas._line_scale * elem.lineWidth;
					var vml_str = "";
					vml_str += "<v:shape filled='f' stroked='t' style='position:absolute;width:10px;height:10px;' ";
					vml_str += "coordorigin='0 0' coordsize='" + canvas._scale * 10 + ' ' + canvas._scale * 10 + "' ";
					vml_str += "strokeweight='" + lineWidth + "px" + "' ";
					vml_str += "strokecolor='" + canvas._stroke_color + "' ";
					vml_str += "path='" + canvas._path_str + "' >";

					vml_str += "<v:stroke ";
					if (canvas._stroke_alpha && canvas._stroke_alpha != 1) {
						vml_str += "opacity='" + canvas._stroke_alpha + "' ";
					}

					vml_str += "joinstyle='" + elem.lineJoin + "' ";
					vml_str += "miterlimit='" + elem.miterLimit + "' ";
					vml_str += "endcap='" + elem._getLineCapStr() + "'  />";
					vml_str += "</v:shape>";
					canvas._vml_str += vml_str;
					canvas._draw_node.innerHTML = canvas._vml_str;
				}
			};
			nexacro.__fillCanvasRect = function (canvas, x, y, dx, dy) {
				var elem = canvas._linked_element;

				elem.beginPath();
				elem.moveTo(x, y);
				elem.lineTo(x + dx, y);
				elem.lineTo(x + dx, y + dy);
				elem.lineTo(x, y + dy);
				elem.closePath();
				elem.fill();
			};
			nexacro.__scaleCanvas = function (canvas, dx, dy) {
				canvas._scale *= dx;
				canvas._half_scale *= dy;
				var m1 = [[dx, 0, 0], [0, dy, 0], [0, 0, 1]
				];

				nexacro._setMatrix(canvas, nexacro._matrixMultiply(m1, canvas._matrix), true);
			};
			nexacro.__rotateCanvas = function (canvas, angle) {
				var c = Math.cos(angle);
				var s = Math.sin(angle);
				var m1 = [[c, s, 0], [-s, c, 0], [0, 0, 1]
				];

				nexacro._setMatrix(canvas, nexacro._matrixMultiply(m1, canvas._matrix), false);
			};
			nexacro.__translateCanvas = function (canvas, dX, dY) {
				var m1 = [[1, 0, 0], [0, 1, 0], [dX, dY, 1]
				];

				nexacro._setMatrix(canvas, nexacro._matrixMultiply(m1, canvas._matrix), false);
			};
			nexacro.__transformCanvas = function (canvas, a, b, c, d, e, f) {
				var m1 = [[a, b, 0], [c, d, 0], [e, f, 1]
				];

				nexacro._setMatrix(canvas, nexacro._matrixMultiply(m1, canvas._matrix), true);
			};


			nexacro.__drawCanvasFillText = function (canvas, text, x, y, maxwidth) {
				var element = canvas._linked_element;
				if (typeof text == "string") {
					text = nexacro._encodeXml(text);
				}
				var textAlign = canvas._textAlign;
				var font = element.font;
				var color = canvas._fill_color;
				var letterspace = element.letterspace;
				var textsize = nexacro._getTextSize(letterspace, text, font);
				var textwidth = textsize[0];
				var textheight = textsize[1];
				var conY = nexacro._getTextBaseline(canvas._textBaseline, y, textheight);
				var carlen = (textwidth / text.length);
				if (nexacro.BrowserVersion == 8) {
					carlen *= 1.5;
				}
				var x1, y1 = conY, x2, y2 = conY + 0.125;
				var vtextAlign = "left";
				if (textAlign == 2 || textAlign == 4 || textAlign === undefined) {
					x1 = x;
					x2 = x1 + textwidth;
				}
				else if (textAlign == 1 || textAlign == 3) {
					x1 = x - textwidth - carlen;
					x2 = x;
					vtextAlign = "right";
				}
				else {
					x1 = (x - textwidth / 2) - carlen;
					x2 = (x + textwidth / 2);
				}

				var bpt = element._getCoordPos(x1, y1);
				var ept = element._getCoordPos(x2, y2);
				var vml_str = "<v:line from='" + bpt.x + " " + bpt.y + "' to='" + ept.x + " " + ept.y + "' filled='t' stroked='f' "
					 + "fillcolor='" + color + "'><v:path textpathok='t'/>"
					 + "<v:textpath on='t' fitpath='True' style=\"v-text-align: " + vtextAlign + "; font:" + font._sysvalue + ";\" "
					 + "string='" + text + "'/></v:line>";
				canvas._vml_str += vml_str;
				canvas._draw_node.innerHTML = canvas._vml_str;
			};
			nexacro.__drawCanvasStrokeText = function (canvas, text, x, y) {
				var element = canvas._linked_element;
				if (typeof text == "string") {
					text = nexacro._encodeXml(text);
				}

				var vml_str = "";
				var pt = element._getCoordPos(x, y);
				if (canvas) {
					var strokecolor = canvas._stroke_color;

					var font = element._font;

					vml_str += "<v:line from='" + x + " " + y + "' to='" + (pt.x + 100) + " " + (pt.y + 0.125) + "' filled='t' stroked='f' ";
					vml_str += "fillcolor='" + strokecolor + "'><v:path textpathok='t'/>";
					vml_str += "<v:textpath on='t' style=\"v-text-align:left; font:" + font + ";\" ";
					vml_str += "string='" + text + "'/></v:line>";
				}
				canvas._vml_str += vml_str;
				canvas._draw_node.innerHTML = canvas._vml_str;
			};

			nexacro.__drawCanvasImage = function (canvas, image, x, y, imgWidth, imgHeight) {
				var dx, dy, dw, dh, sx, sy, sw, sh;
				var elem = canvas._linked_element;

				var w = image.width;
				var h = image.height;

				if (arguments.length == 4) {
					dx = x;
					dy = y;
					sx = sy = 0;
					sw = dw = w;
					sh = dh = h;
				}
				else if (arguments.length == 6) {
					dx = x;
					dy = y;
					dw = imgWidth;
					dh = imgHeight;
					sx = sy = 0;
					sw = w;
					sh = h;
				}
				else {
					throw Error('Invalid number of arguments');
				}

				var d = elem._getCoordSize(dx, dy);

				var w2 = sw / 2;
				var h2 = sh / 2;

				var vmlStr = [];

				vmlStr.push(' <v:group', ' coordsize="', 100, ',', 100, '"', ' coordorigin="0,0"', ' style="width:', 10, 'px;height:', 10, 'px;position:absolute;');


				if (canvas._matrix[0][0] != 1 || canvas._matrix[0][1]) {
					var filter = [];

					filter.push('M11=', canvas._matrix[0][0], ',', 'M12=', canvas._matrix[1][0], ',', 'M21=', canvas._matrix[0][1], ',', 'M22=', canvas._matrix[1][1], ',', 'Dx=', Math.round(d.x / 10), ',', 'Dy=', Math.round(d.y / 10), '');

					var max = d;
					var c2 = elem._getCoordSize(dx + dw, dy);
					var c3 = elem._getCoordSize(dx, dy + dh);
					var c4 = elem._getCoordSize(dx + dw, dy + dh);

					max.x = Math.max(max.x, c2.x, c3.x, c4.x);
					max.y = Math.max(max.y, c2.y, c3.y, c4.y);

					vmlStr.push('padding:0 ', Math.round(max.x / 10), 'px ', Math.round(max.y / 10), 'px 0;filter:progid:DXImageTransform.Microsoft.Matrix(', filter.join(''), ", sizingmethod='clip');");
				}
				else {
					vmlStr.push('top:', Math.round(d.y / 10), 'px;left:', Math.round(d.x / 10), 'px;');
				}

				vmlStr.push(' ">', '<v:image src="', image.src, '"', ' style="width:', 10 * dw, 'px;', ' height:', 10 * dh, 'px;"', ' cropleft="', sx / w, '"', ' croptop="', sy / h, '"', ' cropright="', (w - sx - sw) / w, '"', ' cropbottom="', (h - sy - sh) / h, '"', ' />', '</v:group>');

				canvas.insertAdjacentHTML('BeforeEnd', vmlStr.join(''));
				canvas._vml_str += vmlStr;
			};
			nexacro.__setCanvasGlobalAlpha = function (canvas, f) {
			};
			nexacro.__setCanvasGlobalCompositeOperation = function (canvas, eOperation) {
			};
			nexacro.__toDataURLCanvas = function (_handle) {
			};
			nexacro.__restoreCanvas = function (canvas) {
				var element = canvas._linked_element;
				var cur_status = element._status_stack.pop();
				if (cur_status) {
					element.setElementStrokeStyle(nexacro._getCachedStyleObj("color", cur_status.strokeStyle));
					element.setElementFillStyle(nexacro._getCachedStyleObj("color", cur_status.fillStyle));
					element.setElementGlobalAlpha(cur_status.globalAlpha);
					element.setElementLineWidth(cur_status.lineWidth);
					element.setElementLineCap(cur_status.lineCap);
					element.setElementLineJoin(cur_status.lineJoin);
					element.setElementMiterLimit(cur_status.miterLimit);
					element.setElementShadowOffsetX(cur_status.shadowOffsetX);
					element.setElementShadowOffsetY(cur_status.shadowOffsetY);
					element.setElementShadowBlur(cur_status.shadowBlur);
					element.setElementShadowColor(nexacro._getCachedStyleObj("color", cur_status.shadowColor));
					element.setElementGlobalCompositeOperation(cur_status.globalCompositeOperation);
					element.setElementFont(cur_status.font);
					element.setElementTextAlign(cur_status.textAlign);
					element.setElementTextBaseline(cur_status.textBaseline);
					element.setElementStrokeStyle(cur_status.strokeColor);
				}

				canvas._matrix = element._matrix_stack.pop();
			};
			nexacro.__saveCanvas = function (canvas) {
				var elem = canvas._linked_element;
				var cur_status = {
					"strokeStyle" : elem.strokeStyle, 
					"fillStyle" : elem.fillStyle, 
					"globalAlpha" : elem.globalAlpha, 
					"lineWidth" : elem.lineWidth, 
					"lineCap" : elem.lineCap, 
					"lineJoin" : elem.lineJoin, 
					"miterLimit" : elem.miterLimit, 
					"shadowOffsetX" : elem.shadowOffsetX, 
					"shadowOffsetY" : elem.shadowOffsetY, 
					"shadowBlur" : elem.shadowBlur, 
					"shadowColor" : elem.shadowColor, 
					"globalCompositeOperation" : elem.globalCompositeOperation, 
					"font" : elem.font, 
					"textAlign" : elem.textAlign, 
					"textBaseline" : elem.textBaseline, 
					"strokeColor" : elem.strokeColor, 
					"lineScale" : canvas._line_scale
				};
				elem._status_stack.push(cur_status);
				elem._matrix_stack.push(canvas._matrix);
				canvas._matrix = nexacro._matrixMultiply(nexacro._createMatrixIdentity(), canvas._matrix);
			};
		}
		else {
			nexacro.__setCanvasFillColor = function (canvas, color) {
				canvas._draw_ctx.fillStyle = nexacro._getWebColorFromXreColor(color.value);
			};

			nexacro.__setCanvasFillGradation = function (canvas, fillstyle) {
				var gradation = nexacro.__createCanvasLinearGradient(canvas, fillstyle._start_x, fillstyle._start_y, fillstyle._end_x, fillstyle._end_y);
				gradation.addColorStop(0, fillstyle.start_color);
				gradation.addColorStop(1, fillstyle.end_color);
				canvas._draw_ctx.fillStyle = gradation;
			};
			nexacro.__setCanvasFillStyle = function (canvas, clrrgb, clra) {
				canvas._draw_ctx.fillStyle = clrrgb;
			};
			nexacro.__setCanvasStrokeStyle = function (canvas, color) {
				canvas._draw_ctx.strokeStyle = color._syscolor;
			};
			nexacro.__setCanvasLineCap = function (canvas, eCapType) {
				canvas._draw_ctx.lineCap = eCapType;
			};
			nexacro.__setCanvasLineJoin = function (canvas, eJoinType) {
				canvas._draw_ctx.lineJoin = eJoinType;
			};
			nexacro.__setCanvasLineWidth = function (canvas, nSize) {
				canvas._draw_ctx.lineWidth = nSize;
			};
			nexacro.__setCanvasMiterLimit = function (canvas, nLimit) {
				canvas._draw_ctx.miterLimit = nLimit;
			};
			nexacro.__setCanvasShadowColor = function (canvas, clrRGA, clrA) {
				canvas._draw_ctx.shadowColor = canvas._shadowColor;
			};
			nexacro.__setCanvasShadowOffsetX = function (canvas, sX) {
				canvas._draw_ctx.shadowOffsetX = sX;
			};
			nexacro.__setCanvasShadowOffsetY = function (canvas, sY) {
				canvas._draw_ctx.shadowOffsetY = sY;
			};
			nexacro.__setCanvasShadowBlur = function (canvas, nFact) {
				canvas._draw_ctx.shadowBlur = nFact;
			};
			nexacro.__setCanvasFont = function (canvas, font, sysvalue) {
				canvas._draw_ctx.font = sysvalue;
			};
			nexacro.__setCanvasTextAlign = function (canvas, eAlignValue) {
				canvas._draw_ctx.textAlign = eAlignValue;
			};
			nexacro.__setCanvasTextBaseline = function (canvas, eBaseValue) {
				canvas._draw_ctx.textBaseline = eBaseValue;
			};

			nexacro.__drawCanvasBeginPath = function (canvas) {
				canvas._draw_ctx.beginPath();
			};
			nexacro.__drawCanvasClosePath = function (canvas) {
				canvas._draw_ctx.closePath();
			};
			nexacro.__drawCanvasFillRect = function (canvas, x, y, dx, dy) {
				var ctx = canvas._draw_ctx;
				ctx.rect(x, y, dx, dy);
				ctx.fill();
				ctx.beginPath();
			};
			nexacro.__drawCanvasStrokeRect = function (canvas, x, y, dx, dy) {
				canvas._draw_ctx.strokeRect(x, y, dx, dy);
			};
			nexacro.__drawCanvasRect = function (canvas, x, y, dx, dy) {
				var ctx = canvas._draw_ctx;
				crx.rect(x, y, dx, dy);
				ctx.stroke();
				ctx.beginPath();
			};
			nexacro.__drawCanvasClearRect = function (canvas, x, y, dx, dy) {
				canvas._draw_ctx.clearRect(x, y, dx, dy);
			};

			nexacro.__drawCanvaslineTo = function (canvas, x, y) {
				canvas._draw_ctx.lineTo(x, y);
			};
			nexacro.__drawCanvasmoveTo = function (canvas, x, y) {
				canvas._draw_ctx.moveTo(x, y);
			};
			nexacro.__drawCanvasQuadraticCurveTo = function (canvas, cp1x, cp1y, cp2x, cp2y) {
				canvas._draw_ctx.quadraticCurveTo(cp1x, cp1y, cp2x, cp2y);
			};
			nexacro.__drawCanvasBezierCurveTo = function (canvas, cp1x, cp1y, cp2x, cp2y, x, y) {
				canvas._draw_ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
			};
			nexacro.__darwCanvasArc = function (canvas, x, y, r, sA, eA, eCw) {
				canvas._draw_ctx.arc(x, y, r, sA, eA, eCw);
			};
			nexacro.__drawCanvasArcTo = function (canvas, x, y, x2, y2, r) {
				canvas._draw_ctx.arcTo(x, y, x2, y2, r);
			};

			nexacro.__isPointInCanvasPath = function (canvas, x, y) {
				return canvas._draw_ctx.isPointInPath(x, y);
			};
			nexacro.__clipCanvas = function (canvas) {
				canvas._draw_ctx.clip();
			};
			nexacro.__setCanvasTransform = function (canvas, a, b, c, d, e, f) {
				canvas._draw_ctx.setTransform(a, b, c, d, e, f);
			};
			nexacro.__measureCanvas = function (canvas, text) {
				canvas._draw_ctx.measureText(text);
			};

			nexacro.__createCanvasLinearGradient = function (canvas, aX0, aY0, aX1, aY1) {
				return canvas._draw_ctx.createLinearGradient(aX0, aY0, aX1, aY1);
			};
			nexacro.__createCanvasRadialGradient = function (canvas, x0, y0, x1, y1, r0, r1) {
				return canvas._draw_ctx.createRadialGradient(x0, y0, x1, y1, r0, r1);
			};
			nexacro.__rectCanvas = function (canvas, x, y, w, h) {
				canvas._draw_ctx.rect(x, y, w, h);
			};
			nexacro.__fillCanvas = function (canvas) {
				canvas._draw_ctx.fill();
			};
			nexacro.__strokeCanvas = function (canvas) {
				canvas._draw_ctx.stroke();
			};
			nexacro.__fillCanvasRect = function (canvas, x, y, dx, dy) {
				canvas._draw_ctx.fillRect(x, y, dx, dy);
			};
			nexacro.__scaleCanvas = function (canvas, dx, dy) {
				canvas._draw_ctx.scale(dx, dy);
			};
			nexacro.__rotateCanvas = function (canvas, angle) {
				canvas._draw_ctx.rotate(angle);
			};
			nexacro.__translateCanvas = function (canvas, dX, dY) {
				canvas._draw_ctx.translate(dX, dY);
			};
			nexacro.__transformCanvas = function (canvas, a, b, c, d, e, f) {
				canvas._draw_ctx.transform(a, b, c, d, e, f);
			};
			nexacro.__drawCanvasFillText = function (canvas, text, x, y, maxWidth) {
				if (maxWidth) {
					canvas._draw_ctx.fillText(text, x, y, maxWidth);
				}
				else {
					canvas._draw_ctx.fillText(text, x, y);
				}
			};
			nexacro.__drawCanvasStrokeText = function (canvas, text, x, y, maxWidth) {
				if (maxWidth) {
					canvas._draw_ctx.strokeText(text, x, y, maxWidth);
				}
				else {
					canvas._draw_ctx.strokeText(text, x, y);
				}
			};

			nexacro.__drawCanvasImage = function (canvas, image, x, y, imgWidth, imgHeight) {
				canvas._draw_ctx.drawImage(image, x, y, imgWidth, imgHeight);
			};
			nexacro.__setCanvasGlobalAlpha = function (canvas, f) {
				canvas._draw_ctx.globalAlpha = f;
			};
			nexacro.__setCanvasGlobalCompositeOperation = function (canvas, eOperation) {
				canvas._draw_ctx.globalCompositeOperation = eOperation;
			};
			nexacro.__toDataURLCanvas = function (canvas) {
				var url = canvas._draw_node.toDataURL();
				if (url) {
					var imgObj = new nexacro.Image();
					imgObj.set_src(url);
					return imgObj;
				}
			};
			nexacro.__restoreCanvas = function (canvas) {
				canvas._draw_ctx.restore();
			};
			nexacro.__saveCanvas = function (canvas) {
				canvas._draw_ctx.save();
			};
		}




		if (nexacro.Browser == "MobileSafari") {
			nexacro.__setDOMNodeAccessibilityEnable = function (node, enable) {
				if (enable == false) {
					node.setAttribute("role", "none");
					node.setAttribute("aria-label", " ");
					node.setAttribute("aria-description", "");
				}
			};

			nexacro.__setDOMNodeAccessibilityLabel = function (node, label) {
				if (label) {
					node.setAttribute("aria-label", label);
				}
			};

			nexacro.__setDOMNodeAccessibilityLabelBy = nexacro._emptyFn;
			nexacro.__setDOMNodeAccessibilityDescription = nexacro._emptyFn;
			nexacro.__setDOMNodeAccessibilityDescriptionBy = nexacro._emptyFn;
		}
		else {
			nexacro.__setDOMNodeAccessibilityEnable = function (node, enable) {
				if (enable == false) {
					node.setAttribute("role", "document");
					node.setAttribute("aria-label", " ");
					node.setAttribute("aria-description", "");
					node.setAttribute("aria-labelledby", "accessibility_notify_0");
				}
			};

			nexacro.__setDOMNodeAccessibilityLabel = function (node, label) {
				if (label) {
					node.setAttribute("aria-label", label);
				}
				node.setAttribute("aria-labelledby", "accessibility_notify_0");
			};

			nexacro.__setDOMNodeAccessibilityLabelBy = function (node, id) {
				node.setAttribute("aria-labelledby", id);
			};

			nexacro.__setDOMNodeAccessibilityDescription = function (node, desc) {
				node.setAttribute("aria-description", desc);
			};

			nexacro.__setDOMNodeAccessibilityDescriptionBy = function (node, id) {
				node.setAttribute("aria-describedby", id);
			};
		}


		nexacro.__setDOMNodeAccessibilityDescLevel = function (node, level) {
		};

		nexacro.__setDOMNodeAccessibilityStatNormal = function (node, normal) {
		};

		nexacro.__setDOMNodeAccessibilityStatDisabled = function (node, disable) {
			node.setAttribute("aria-disabled", disable);
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__setDOMNodeAccessibilityStatHidden = function (node, hidden) {
				node.setAttribute("aria-hidden", hidden);
			};
		}
		else {
			nexacro.__setDOMNodeAccessibilityStatHidden = nexacro._emptyFn;
		}

		nexacro.__setDOMNodeAccessibilityHidden = function (node, hidden) {
			if (hidden) {
				node.setAttribute("aria-hidden", hidden);
			}
			else {
				node.removeAttribute("aria-hidden");
			}
		};

		nexacro.__setDOMNodeAccessibilityStatChecked = function (node, check) {
			node.setAttribute("aria-checked", check);
		};

		nexacro.__setDOMNodeAccessibilityStatPressed = function (node, press) {
			if (press) {
				node.setAttribute("aria-pressed", press);
			}
			else {
				node.removeAttribute("aria-pressed");
			}
		};

		nexacro.__setDOMNodeAccessibilityStatSelected = function (node, select) {
			node.setAttribute("aria-selected", select);
		};

		nexacro.__setDOMNodeAccessibilityStatExpanded = function (node, expanded) {
			node.setAttribute("aria-expanded", expanded);
		};

		nexacro.__setDOMNodeAccessibilityStatAutoComplete = function (node, autocomplete) {
			node.setAttribute("aria-autocomplete", autocomplete);
		};

		nexacro.__setDOMNodeAccessibilityStatHasPopup = function (node, haspopup) {
			node.setAttribute("aria-haspopup", haspopup);
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__setDOMNodeAccessibilityStatFocus = function (node, label) {
				var acclabel = label;
				if (!label) {
					acclabel = node.getAttribute("aria-label");
				}
				nexacro.__notifyAccessibility(node, acclabel, "focus");
			};
		}
		else {
			nexacro.__setDOMNodeAccessibilityStatFocus = function (node, label) {
				var acclabel = label;
				if (!label) {
					acclabel = node.getAttribute("aria-label");
				}
				nexacro.__notifyAccessibility(node, acclabel, "focus");
			};
		}

		nexacro.__setDOMNodeAccessibilityFlagDefaultButton = function (node, button) {
		};

		nexacro.__setDOMNodeAccessibilityFlagFocusable = function (node, focus) {
		};

		nexacro.__setDOMNodeAccessibilityFlagReadOnly = function (node, readonly) {
			node.setAttribute("aria-readonly", readonly);
		};

		nexacro.__setDOMNodeAccessibilityFlagPassword = function (node, password) {
		};

		nexacro.__setDOMNodeAccessibilityFlagMultiLine = function (node, multiline) {
			node.setAttribute("aria-multiline", multiline);
		};

		nexacro.__setDOMNodeAccessibilityFlagMultiSelectable = function (node, multiselectable) {
			node.setAttribute("aria-multiselectable", multiselectable);
		};

		nexacro.__setDOMNodeAccessibilityFlagSelectable = function (node, selectable) {
			node.setAttribute("aria-selected", selectable);
		};

		nexacro.__setDOMNodeAccessibilityInfoCount = function (node, count) {
			node.setAttribute("aria-setsize", count);
		};

		nexacro.__setDOMNodeAccessibilityInfoIndex = function (node, index) {
			node.setAttribute("aria-posinset", index);
		};

		nexacro.__setDOMNodeAccessibilityInfoValueMax = function (node, maxvalue) {
			node.setAttribute("aria-valuemax", maxvalue);
		};

		nexacro.__setDOMNodeAccessibilityInfoValueMin = function (node, minvalue) {
			node.setAttribute("aria-valuemin", minvalue);
		};

		nexacro.__setDOMNodeAccessibilityInfoValueCur = function (node, value) {
			node.setAttribute("aria-valuenow", value);
		};

		nexacro.__setDOMNodeAccessibilityInfoValueText = function (node, text) {
			node.setAttribute("aria-valuetext", text);
		};

		nexacro.__setDOMNodeAccessibilityInfoLevel = function (node, level) {
			if (level) {
				node.setAttribute("aria-level", level);
			}
		};

		nexacro.__setDOMNodeAccessibilitySelection = function (node, select) {
		};

		nexacro.__setDOMNodeAccessibilityRole = function (node, role) {
			if (role) {
				node.setAttribute("role", role);
			}
			else {
				node.removeAttribute("role");
			}
		};

		nexacro.__setDOMNodeAccessibilityHotKey = function (node, select) {
		};

		nexacro.__setDOMNodeAccessibilityActiveDescendant = function (node, id) {
			node.setAttribute("aria-activedescendant", id);
		};

		nexacro.__setDOMNodeAccessibilityTabStop = function (node, id) {
		};

		nexacro.__setDOMNodeAccessibilityLive = function (node) {
			node.innerHTML = "accessibilityLiveNode";
			node.setAttribute("aria-relevant", "text");
			node.setAttribute("aria-live", "assertive");
			node.setAttribute("aria-atomic", "false");
		};

		nexacro.__setDOMNodeAccessibilityValue = function (node, value, elem, bfocus) {
			nexacro.__notifyAccessibility(node, value, "valuechange", elem, bfocus);
		};



		nexacro._AccessibilityNotifyManager = function () {
			this._nodes = [];
			this._index = -1;
			this._count = 0;
		};

		var _pAccessibilityNotifyManager = nexacro._createPrototype(Object, nexacro._AccessibilityNotifyManager);
		nexacro._AccessibilityNotifyManager.prototype = _pAccessibilityNotifyManager;

		if (nexacro.Browser == "Gecko") {
			_pAccessibilityNotifyManager._getNotifyNode = function () {
				if (this._index == -1) {
					var _doc = document;
					var node = _doc.createElement("div");
					node.id = "accessibility_notify_" + this._count;

					var node_style = node.style;
					nexacro.__setDOMNodeStyleAbsolute(node_style);
					nexacro.__setDOMNodeStyleSize(node_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node, -1);
					nexacro.__setDOMNodeAccessibilityRole(node, "document");
					_doc.body.appendChild(node);


					this._nodes.push(node);

					this._count = this._count + 1;

					var node2 = _doc.createElement("div");
					node2.id = "accessibility_notify_" + this._count;

					var node2_style = node2.style;
					nexacro.__setDOMNodeStyleAbsolute(node2_style);
					nexacro.__setDOMNodeStyleSize(node2_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node2, -1);

					_doc.body.appendChild(node2);
					nexacro.__setDOMNodeAccessibilityRole(node2, "document");
					this._nodes.push(node2);
					this._index = 0;
				}

				return this._nodes;
			};

			_pAccessibilityNotifyManager._notify = function (_handle, label, notifyevent, elem) {
				var nodes = this._getNotifyNode();
				if (nodes) {
					if (notifyevent == "notify") {
						var node = nodes[this._index];
						node.innerText = label;
						nexacro.__setDOMNodeTitle(node, label);
						node.focus();
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else {
						var node = nodes[0];
						node.innerText = label;
						nexacro.__setDOMNodeTitle(node, label);
					}
				}
				this._index = this._index ^ 1;
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion == 11) {
			_pAccessibilityNotifyManager._getNotifyNode = function () {
				if (this._index == -1) {
					var _doc = document;
					var node = _doc.createElement("div");
					node.id = "accessibility_notify_" + this._count;

					var node_style = node.style;
					nexacro.__setDOMNodeStyleAbsolute(node_style);
					nexacro.__setDOMNodeStyleSize(node_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node, -1);
					nexacro.__setDOMNodeAccessibilityRole(node, "document");
					_doc.body.appendChild(node);


					this._nodes.push(node);

					this._count = this._count + 1;

					var node2 = _doc.createElement("div");
					node2.id = "accessibility_notify_" + this._count;

					var node2_style = node2.style;
					nexacro.__setDOMNodeStyleAbsolute(node2_style);
					nexacro.__setDOMNodeStyleSize(node2_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node2, -1);

					_doc.body.appendChild(node2);
					nexacro.__setDOMNodeAccessibilityRole(node2, "document");
					this._nodes.push(node2);
					this._index = 0;
				}

				return this._nodes;
			};

			_pAccessibilityNotifyManager._notify = function (_handle, label, notifyevent, elem, bfocus) {
				var nodes = this._getNotifyNode();
				if (nodes) {
					if (notifyevent == "notify") {
						var node = nodes[this._index];
						node.innerText = label;
						if (elem) {
							if (elem.accessibility_role != "textbox") {
								nexacro.__setDOMNodeAccessibilityRole(node, elem.accessibility_role);
							}
							else {
								nexacro.__setDOMNodeAccessibilityRole(node, "document");
							}
							nexacro.__setDOMNodeStylePos(node.style, elem.left, elem.top);
						}
						else {
							nexacro.__setDOMNodeAccessibilityRole(node, _handle.getAttribute('role'));
						}
						node.focus();
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "valuechange") {
						var node = nodes[0];
						node.innerText = "";
						if (elem && elem._input_handle) {
							var linkedcontrol = _handle._linked_element.linkedcontrol;
							var comp = linkedcontrol._getRootComponent(linkedcontrol);

							var _is_popup_frame = nexacro._isPopupFrame(comp._getOwnerFrame().id);

							if (_is_popup_frame) {
								nexacro.__setDOMNodeAccessibilityRole(elem._input_handle, "document");
								_handle.focus();
							}
						}
						else {
							if (bfocus) {
								node.focus();
							}
						}
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "daychange") {
						var node = nodes[0];
						node.innerText = label;
						node.focus();
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "wholeread") {
						var node = nodes[0];
						node.innerText = label;
						nexacro.__setDOMNodeAccessibilityRole(node, "document");
						node.focus();
					}
					else {
						var node = nodes[0];
						node.innerText = label;
					}
				}
				this._index = this._index ^ 1;
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) {
			_pAccessibilityNotifyManager._getNotifyNode = function () {
				if (this._index == -1) {
					var _doc = document;
					var node = _doc.createElement("div");
					node.id = "accessibility_notify_" + this._count;

					var node_style = node.style;
					nexacro.__setDOMNodeStyleAbsolute(node_style);
					nexacro.__setDOMNodeStyleSize(node_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node, -1);
					nexacro.__setDOMNodeAccessibilityRole(node, "document");
					_doc.body.appendChild(node);


					this._nodes.push(node);

					this._count = this._count + 1;

					var node2 = _doc.createElement("div");
					node2.id = "accessibility_notify_" + this._count;

					var node2_style = node2.style;
					nexacro.__setDOMNodeStyleAbsolute(node2_style);
					nexacro.__setDOMNodeStyleSize(node2_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node2, -1);

					_doc.body.appendChild(node2);
					nexacro.__setDOMNodeAccessibilityRole(node2, "document");
					this._nodes.push(node2);
					this._index = 0;
				}

				return this._nodes;
			};

			_pAccessibilityNotifyManager._notify = function (_handle, label, notifyevent, elem, bfocus) {
				var nodes = this._getNotifyNode();
				if (nodes) {
					if (notifyevent == "notify") {
						var node = nodes[this._index];
						node.innerText = label;

						if (elem) {
							if (elem.accessibility_role != "textbox") {
								nexacro.__setDOMNodeAccessibilityRole(node, elem.accessibility_role);
							}
							else {
								nexacro.__setDOMNodeAccessibilityRole(node, "document");
							}
							nexacro.__setDOMNodeStylePos(node.style, elem.left, elem.top);
						}
						else {
							nexacro.__setDOMNodeAccessibilityRole(node, _handle.getAttribute('role'));
						}
						node.focus();
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "valuechange") {
						var node = nodes[0];
						node.innerText = "";

						if (elem && elem._input_handle) {
						}
						if (bfocus) {
							node.focus();
						}
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "daychange") {
						var node = nodes[0];
						node.innerText = label;
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "wholeread") {
						var node = nodes[0];
						node.innerText = label;
						nexacro.__setDOMNodeAccessibilityRole(node, "document");
						node.focus();
					}
					else {
						var node = nodes[0];
						node.innerText = label;
					}
				}
				this._index = this._index ^ 1;
			};
		}
		else if (nexacro.Browser == "MobileSafari") {
			_pAccessibilityNotifyManager._getNotifyNode = nexacro._emptyFn;
			_pAccessibilityNotifyManager._notify = function (_handle, label, notifyevent, elem, bfocus) {
			};
		}

		else if (true) {
			_pAccessibilityNotifyManager._getNotifyNode = function () {
				if (this._index == -1) {
					var _doc = document;
					var node = _doc.createElement("div");
					node.id = "accessibility_notify_" + this._count;

					var node_style = node.style;
					nexacro.__setDOMNodeStyleAbsolute(node_style);
					nexacro.__setDOMNodeStyleSize(node_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node, -1);
					nexacro.__setDOMNodeAccessibilityRole(node, "document");
					_doc.body.appendChild(node);


					this._nodes.push(node);

					this._count = this._count + 1;

					var node2 = _doc.createElement("div");
					node2.id = "accessibility_notify_" + this._count;

					var node2_style = node2.style;
					nexacro.__setDOMNodeStyleAbsolute(node2_style);
					nexacro.__setDOMNodeStyleSize(node2_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node2, -1);

					_doc.body.appendChild(node2);
					nexacro.__setDOMNodeAccessibilityRole(node2, "document");
					this._nodes.push(node2);
					this._index = 0;
				}

				return this._nodes;
			};

			_pAccessibilityNotifyManager._notify = function (_handle, label, notifyevent, elem, bfocus) {
				var nodes = this._getNotifyNode();
				if (nodes) {
					if (notifyevent == "notify") {
						var node = nodes[this._index];
						node.innerText = label;

						if (elem) {
							if (elem.accessibility_role != "textbox") {
								nexacro.__setDOMNodeAccessibilityRole(node, elem.accessibility_role);
							}
							else {
								nexacro.__setDOMNodeAccessibilityRole(node, "document");
							}
							nexacro.__setDOMNodeStylePos(node.style, elem.left, elem.top);
						}
						else {
							nexacro.__setDOMNodeAccessibilityRole(node, _handle.getAttribute('role'));
						}
						node.focus();
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "valuechange") {
						var node = nodes[0];
						if (label == "#textarea:msg_accessibility_emptyline") {
							label = application._getErrorMessge("msg_accessibility_emptyline");
						}
						node.innerText = label;
						nexacro.__setDOMNodeAccessibilityRole(node, "listitem");
						nexacro.__setDOMNodeAccessibilityActiveDescendant(_handle, node.id);

						if (elem && elem._input_handle) {
						}
						if (bfocus) {
							node.focus();
						}
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "daychange") {
						var node = nodes[0];
						node.innerText = label;
						nexacro.__setDOMNodeAccessibilityActiveDescendant(_handle, node.id);
						nexacro.__setDOMNodeStylePos(node.style, 0, 0);
					}
					else if (notifyevent == "wholeread") {
						var node = nodes[0];
						node.innerText = label;
						nexacro.__setDOMNodeAccessibilityRole(node, "document");
						node.focus();
					}
					else {
						var node = nodes[0];
						node.innerText = label;
					}
				}
				this._index = this._index ^ 1;
			};
		}
		else {
			_pAccessibilityNotifyManager._getNotifyNode = function () {
				if (this._index == -1) {
					var _doc = document;
					var node = _doc.createElement("div");
					node.id = "accessibility_notify_" + this._count;

					var node_style = node.style;
					nexacro.__setDOMNodeStyleAbsolute(node_style);
					nexacro.__setDOMNodeStyleSize(node_style, 0, 0);
					nexacro.__setDOMNodeTabIndex(node, -1);
					_doc.body.appendChild(node);

					node_style.background = "transparent";
					nexacro.__setDOMNodeAccessibilityRole(node, "log");
					nexacro.__setDOMNodeAccessibilityLabel(node, "temporary");
					nexacro.__setDOMNodeAccessibilityLive(node);

					this._nodes.push(node);

					this._count = this._count + 1;

					this._index = 0;
				}

				return this._nodes;
			};

			_pAccessibilityNotifyManager._notify = function (_handle, label) {
				var nodes = this._getNotifyNode();
				if (nodes) {
					var node = nodes[this._index];
					nexacro.AccessibilityUtil.setDOMNodeLabel(node, label);
				}
			};
		}

		delete _pAccessibilityNotifyManager;

		nexacro.__notifyAccessibility = function (node, label, notifyevent, elem, bfocus) {
			if (!nexacro._AccessibilityNotifyNode) {
				nexacro._AccessibilityNotifyNode = new nexacro._AccessibilityNotifyManager();
			}
			nexacro._AccessibilityNotifyNode._notify(node, label, notifyevent, elem, bfocus);
		};

		nexacro._notifyAccessibilityValue = function (elem, label, notifyevent) {
			if (!nexacro._AccessibilityNotifyNode) {
				nexacro._AccessibilityNotifyNode = new nexacro._AccessibilityNotifyManager();
			}
			var _handle = elem._handle;
			if (_handle) {
				nexacro._AccessibilityNotifyNode._notify(_handle, label, notifyevent, elem);
			}
		};


		nexacro.__createLabelElementHandle = function (_doc, name, value) {
			var handle = _doc.createElement("label");
			var handle_style = handle.style;
			handle.setAttribute("for", name);
			handle.textContent = value;
			handle.id = name + ":label";

			nexacro.__setDOMNodeStyleAbsolute(handle_style);
			nexacro.__setDOMNodeStyleSize(handle_style, 0, 0);
			nexacro.__setDOMNodeAccessibilityStatHidden(handle, true);
			return handle;
		};

		nexacro.__getDOMNodeAccessibilityStrLabelfor = function (name, value) {
			return "<label for= '" + name + "' style='position:absolute;width:0px;overflow:hidden;' aria-hidden=true>" + value + "</label>";
		};





		(function () {
			var re_special_htmlchar = /&|"|'|\<|\>|\r|\n/g;
			function _replace_htmlChar (chr) {
				if (chr == "&") {
					return "&amp;";
				}
				else if (chr == "'") {
					return "&#39;";
				}
				else if (chr == '"') {
					return "&quot;";
				}
				else if (chr == "<") {
					return "&lt;";
				}
				else if (chr == ">") {
					return "&gt;";
				}
				else if (chr == "\r") {
					return "";
				}
				else if (chr == "\n") {
					return "<br/>";
				}
				else {
					return chr;
				}
			}
			nexacro.__toInnerHTMLText = function (text) {
				return text.replace(re_special_htmlchar, _replace_htmlChar);
			};
		})();
		(function () {
			var re_special_xmlchar = /[&"'\<\>\r\n\t ]/g;
			function _encode_xmlChar (chr) {
				if (chr == "&") {
					return "&amp;";
				}
				else if (chr == "'") {
					return "&#39;";
				}
				else if (chr == '"') {
					return "&quot;";
				}
				else if (chr == "<") {
					return "&lt;";
				}
				else if (chr == ">") {
					return "&gt;";
				}
				else if (chr == "\r") {
					return "&#13;";
				}
				else if (chr == "\n") {
					return "&#10;";
				}
				else if (chr == "\t") {
					return "&#9;";
				}
				else if (chr == " ") {
					return "&#32;";
				}
				else {
					return chr;
				}
			}
			nexacro._encodeXml = function (str) {
				if (!nexacro._isNull(str)) {
					var tempStr = "";
					var l = str.length;
					for (var i = 0; i < l; i++) {
						var charCode = str.charCodeAt(i);
						if ((charCode & 0x80) != 0x00 || charCode >= 0x20 || charCode == 0xA || charCode == 0xD || charCode == 0x9) {
							tempStr += String.fromCharCode(charCode);
						}
					}
					str = tempStr;

					return str.replace(re_special_xmlchar, _encode_xmlChar);
				}
			};

			var re_encoded_xmlchar = /&#[0-9]+;|&[a-z]+;/g;
			function _decode_xmlStr (str) {
				if (str.charAt(1) == "#") {
					return String.fromCharCode(str.substring(2, str.length - 1) | 0);
				}
				else {
					var code = str.substring(1, str.length - 1);
					if (code == "amp") {
						return "&";
					}
					else if (code == "quot") {
						return "\"";
					}
					else if (code == "apos") {
						return "\'";
					}
					else if (code == "lt") {
						return "<";
					}
					else if (code == "gt") {
						return ">";
					}
					else {
						return "";
					}
				}
			}
			nexacro._decodeXml = function (str) {
				if (!nexacro._isNull(str)) {
					var tempStr = "";
					var l = str.length;
					for (var i = 0; i < l; i++) {
						var charCode = str.charCodeAt(i);
						if ((charCode & 0x80) != 0x00 || charCode >= 0x20 || charCode == 0xA || charCode == 0xD || charCode == 0x9) {
							tempStr += String.fromCharCode(charCode);
						}
					}
					str = tempStr;

					if (str.indexOf("&") >= 0) {
						return str.replace(re_encoded_xmlchar, _decode_xmlStr);
					}
				}
				return str;
			};
		})();

		nexacro._getDisplayText = function (text, _type) {
			return text;
		};

		nexacro._getHTMLOuter = function (node, doc) {
			if (!node || !node.tagName) {
				return '';
			}
			var txt = node.outerHTML;
			if (!txt) {
				var el = doc.createElement("div");

				el.appendChild(node);
				txt = el.innerHTML;
				el = null;
			}

			return txt;
		};

		if (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") {
			if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
				nexacro._getCloneNode = function (node) {
					var clone = document.createElement("div");
					clone.innerHTML = node.innerHTML;
					return clone;
				};

				nexacro._makeFakePrintNode = function (comps) {
					var remove_targets = [];


					for (var i = 0, len = comps.length; i < len; i++) {
						if (comps[i]._type_name == "WebBrowser") {
							var doc = comps[i].document;
							if (doc) {
								var fake_chart_node = document.createElement("div");
								fake_chart_node.innerHTML = doc.body.innerHTML;

								var style = comps[i]._control_element._client_element._handle.style;
								fake_chart_node.style.position = "absolute";
								fake_chart_node.style.left = style.left;
								fake_chart_node.style.top = style.top;
								fake_chart_node.style.width = style.width;
								fake_chart_node.style.height = style.height;
								comps[i]._control_element._handle.appendChild(fake_chart_node);
								remove_targets.push(fake_chart_node);
							}
						}
					}

					return remove_targets;
				};
			}
			else {
				nexacro._getCloneNode = function (node) {
					return node.cloneNode(true);
				};

				nexacro._makeFakePrintNode = function (comps) {
					var remove_targets = [];


					for (var i = 0, len = comps.length; i < len; i++) {
						var doc = comps[i].document;
						if (doc) {
							var canvases = doc.getElementsByTagName("canvas");
							if (canvases && canvases.length) {
								var cv = doc.createElement("canvas");
								var context = cv.getContext("2d");

								var w, h;
								w = h = 0;

								for (var j = 0, cv_len = canvases.length; j < cv_len; j++) {
									if (w < canvases[j].clientWidth) {
										w = canvases[j].clientWidth;
									}

									if (h < canvases[j].clientHeight) {
										h = canvases[j].clientHeight;
									}
								}
								cv.width = w;
								cv.height = h;

								for (var j = 0, cv_len = canvases.length; j < cv_len; j++) {
									context.drawImage(canvases[j], parseInt(canvases[j].style.left), parseInt(canvases[j].style.top), canvases[j].clientWidth, canvases[j].clientHeight);
								}

								var fake_chart_node = document.createElement("img");
								fake_chart_node.src = cv.toDataURL("image/png");

								var style = comps[i]._control_element._client_element._handle.style;
								fake_chart_node.style.position = style.position;
								fake_chart_node.style.left = style.left;
								fake_chart_node.style.top = style.top;
								fake_chart_node.style.width = style.width;
								fake_chart_node.style.height = style.height;
								comps[i]._control_element._handle.appendChild(fake_chart_node);
								remove_targets.push(fake_chart_node);
							}
						}
					}

					return remove_targets;
				};
			}
		}
		else {
			nexacro._getCloneNode = function (node) {
				return node.cloneNode(true);
			};

			nexacro._makeFakePrintNode = nexacro._emptyFn;
		}

		nexacro._beforePrintCheckPlugin = function (comp, refform, defaultprint, valign, halign, is_recursive) {
			var remove_targets = [];

			if (comp._is_form) {
				var check_comp = comp._getTabOrderFirst();
				while (check_comp) {
					if (check_comp instanceof nexacro.WebBrowser) {
						var _win_handle = comp._getWindowHandle();
						if (_win_handle) {
							_win_handle.print();
						}
						return;
					}
					else {
						check_comp = comp._getTabOrderNext(check_comp, true, undefined, undefined, undefined, undefined, undefined, true);
					}
				}
			}
			else if (comp instanceof nexacro.WebBrowser) {
				var make_targets = [];

				make_targets.push(comp);
				remove_targets = nexacro._makeFakePrintNode(make_targets);

				make_targets = null;


				if (!remove_targets || remove_targets.length < 1) {
					nexacro._printInnerContents(comp);
					return;
				}
			}

			nexacro._print(comp, comp._refform, defaultprint, valign, halign);

			for (var i = 0, len = remove_targets.length; i < len; i++) {
				remove_targets[i].parentNode.removeChild(remove_targets[i]);
			}

			remove_targets = null;
		};


		nexacro.__makePrintHandle = function (pThis) {
			var _control_element = pThis._control_element;
			if (!_control_element) {
				return;
			}

			var clone_handle = nexacro._getCloneNode(_control_element._handle);
			if (!clone_handle) {
				return;
			}

			if (_control_element.container_maxwidth && _control_element.container_maxwidth > _control_element.client_width) {
				clone_handle.style.width = _control_element.container_maxwidth + "px";
				if (clone_handle.firstChild) {
					clone_handle.firstChild.style.width = _control_element.container_maxwidth + "px";
				}
			}
			if (_control_element.container_maxheight && _control_element.container_maxheight > _control_element.client_height) {
				clone_handle.style.height = _control_element.container_maxheight + "px";
				if (clone_handle.firstChild) {
					clone_handle.firstChild.style.height = _control_element.container_maxheight + "px";
				}
			}

			if (clone_handle.lastChild && clone_handle.lastChild.id == clone_handle.id + "_vscrollbar") {
				clone_handle.removeChild(clone_handle.lastChild);
			}
			if (clone_handle.lastChild && clone_handle.lastChild.id == clone_handle.id + "_hscrollbar") {
				clone_handle.removeChild(clone_handle.lastChild);
			}

			clone_handle.style.left = "0px";
			clone_handle.style.top = "0px";
			clone_handle.style.overflow = "";

			var obj = clone_handle.firstChild;
			while (obj) {
				if (obj.style && obj.style.transform) {
					obj.style.transform = "";
					break;
				}
				else {
					obj = obj.firstChild;
				}
			}

			if (nexacro._scrolled_elem_list) {
				var child_nodes = clone_handle.getElementsByTagName('div');
				var node_id = "";
				var node = null, item = null;

				if (child_nodes) {
					for (var i = 0; i < nexacro._scrolled_elem_list.length; i++) {
						node_id = nexacro._scrolled_elem_list.get_id(i);
						item = nexacro._scrolled_elem_list.get_item(i);
						node = child_nodes[node_id];
						if (node) {
							if (item.hpos) {
								node.style.width = (parseInt(node.style.width) + item.hpos) + "px";
								nexacro.__setDOMNodeStyleTranslateX(node.style, -item.hpos);
							}

							if (item.vpos) {
								node.style.height = (parseInt(node.style.height) + item.vpos) + "px";
								nexacro.__setDOMNodeStyleTranslateY(node.style, -item.vpos);
							}
						}
					}
					node = null;
					item = null;
					child_nodes = null;
				}
			}

			if (clone_handle.getElementsByTagName != null) {
				var inputTags = clone_handle.getElementsByTagName("input");
				var temp = _control_element._handle.getElementsByTagName("input");
				for (var i = 0, n = inputTags.length; i < n; i++) {
					inputTags[i].setAttribute("value", temp[i].value);
				}

				inputTags = clone_handle.getElementsByTagName("textarea");
				temp = _control_element._handle.getElementsByTagName("textarea");
				for (var i = 0, n = inputTags.length; i < n; i++) {
					inputTags[i].overflow = "hidden";
					if (temp[i].value && inputTags[i].outerHTML.indexOf("></textarea>") > -1) {
						inputTags[i].insertAdjacentText("afterBegin", temp[i].value);
					}
				}
			}

			return clone_handle;
		};

		nexacro._print = function (pThis, refform, defaultprint, valign, halign) {
			var form_elem = refform.getElement();
			var doc = form_elem.getRootWindowHandle();
			var _print_handle = nexacro.__makePrintHandle(pThis);


			var html = '<HTML lang=\"' + nexacro.BrowserLang.substr(0, 2) + '\">\n<HEAD>\n';
			if (doc.getElementsByTagName != null) {
				var meta_tags = doc.getElementsByTagName("META");
				if (meta_tags.length) {
					var meta = null;
					for (var i = 0, len = meta_tags.length; i < len; i++) {
						html += meta_tags[i].outerHTML;
					}
				}

				var style_tags = doc.getElementsByTagName("STYLE");
				if (style_tags.length > 0) {
					html += style_tags[0].outerHTML;
				}
			}
			html += '\n</HEAD>\n\n';


			if (nexacro.Browser == "MobileSafari") {
				html += '<BODY onload="self.print();">\n';
			}
			else {
				html += '<BODY onload="self.print(); self.close();">\n';
			}
			html += nexacro._getHTMLOuter(_print_handle, doc);
			html += '</BODY>\n\n</HTML>\n\n';

			var wnd = window;
			if (refform && refform._control_element && refform._control_element.linkedcontrol && refform._control_element.linkedcontrol._getWindow()._doc.parentWindow) {
				wnd = doc.parentWindow;
			}

			if (nexacro.Browser == "MobileSafari") {
				var _iframe_handle = nexacro._print_node;
				if (!_iframe_handle) {
					_iframe_handle = doc.createElement("IFRAME");
					_iframe_handle.id = "print_node";
					_iframe_handle.frameborder = 0;

					_iframe_handle.style.border = 'none';
					_iframe_handle.style.visibility = "hidden";

					nexacro.__appendDOMNode(doc.body, _iframe_handle);
					nexacro._print_node = _iframe_handle;
				}

				var printdoc = _iframe_handle.contentDocument;
			}
			else {
				var printWin = window.open("", "printSpecial", "top=" + wnd.screenTop + ",left=" + wnd.screenLeft + ", width=auto, height=auto");
				var printdoc = printWin.document;
			}

			printdoc.open();
			printdoc.write(html);
			printdoc.close();
		};


		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._printInnerContents = function (comp) {
				try {
					var current_focus = document.activeElement;
					var win = comp._ifrm_elem._handle.contentWindow;
					if (!win.onafterprint) {
						win.onafterprint = function () {
							current_focus.focus();
						};
					}
					win.document.body.focus();
					win.print();

					return true;
				}
				catch (e) {
					return false;
				}
			};
		}
		else {
			nexacro._printInnerContents = function (comp) {
				try {
					comp.callMethod("print");
					return true;
				}
				catch (e) {
					return false;
				}
			};
		}

		nexacro._managerFrameDoc = null;
		nexacro._managerFrameNode = null;
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._managerFrameSrc = "<html>\n"
				 + "<head>\n"
				 + "<meta http-equiv='X-UA-Compatible' content='IE=Edge' />\n"
				 + "<style> .calculate_image { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "<style> .calculate_text { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;width:65535px;position:absolute'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + 'nexacro._imgloadhandler_onload_forward = function() { nexacro._imgloadhandler_onload(window.event.srcElement); };'
				 + 'nexacro._imgloadhandler_onerror_forward = function () { nexacro._imgloadhandler_onerror(window.event.srcElement); };'
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 9) {
			nexacro._managerFrameSrc = "<html>\n"
				 + "<head>\n"
				 + "<meta http-equiv='X-UA-Compatible' content='IE=Edge' />\n"
				 + "<style> .calculate_image { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "<style> .calculate_text { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + 'nexacro._imgloadhandler_onload_forward = function(e) { nexacro._imgloadhandler_onload(e.target); };'
				 + 'nexacro._imgloadhandler_onerror_forward = function (e) { nexacro._imgloadhandler_onerror(e.target); };'
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 9) {
			nexacro._managerFrameSrc = "<html>\n"
				 + "<head>\n"
				 + "<meta http-equiv='X-UA-Compatible' content='IE=Edge' />\n"
				 + "<style> .calculate_image { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "<style> .calculate_text { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + 'nexacro._imgloadhandler_onload_forward = function(e) { nexacro._imgloadhandler_onload(e.srcElement); };'
				 + 'nexacro._imgloadhandler_onerror_forward = function (e) { nexacro._imgloadhandler_onerror(e.srcElement); };'
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else {
			nexacro._managerFrameSrc = "<html>\n"
				 + "<head>\n"
				 + "<style> .calculate_image { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "<style> .calculate_text { position: absolute; height: auto; width: auto; left: 0px; top: 0px; } </style>"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + 'nexacro._imgloadhandler_onload_forward = function(e) { nexacro._imgloadhandler_onload(e.target); };'
				 + 'nexacro._imgloadhandler_onerror_forward = function (e) { nexacro._imgloadhandler_onerror(e.target); };'
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._managerPopupFrameSrc = "<html>\n"
				 + "<head>\n"
				 + "<meta http-equiv='X-UA-Compatible' content='IE=Edge' />\n"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else {
			nexacro._managerPopupFrameSrc = "<html>\n"
				 + "<head/>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}

		nexacro._preparePopupManagerFrame = function (popupWin) {
			var _doc = popupWin.document;
			var iframeobj = _doc.createElement("IFRAME");
			iframeobj.frameborder = "0";
			iframeobj.scrolling = "no";
			iframeobj.style.visibility = 'hidden';
			iframeobj.style.position = 'absolute';
			iframeobj.style.border = 'none';

			var str_title = application._getErrorMessge("msg_accessibility_emptyframe");
			nexacro.__setDOMNodeTitle(iframeobj, str_title);

			_doc.body.appendChild(iframeobj);
			iframeobj.src = "about:blank";
			var _frame_doc;
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				_frame_doc = iframeobj.contentWindow.document;
			}
			else {
				_frame_doc = iframeobj.contentDocument;
			}
			_frame_doc.open();
			_frame_doc.write(nexacro._managerPopupFrameSrc);
			_frame_doc.close();
			nexacro._managerPopupFrameNode = iframeobj;
			nexacro._managerPopupFrameDoc = _frame_doc;
		};

		nexacro._prepareManagerFrame = function (web_font) {
			var _doc = document;
			var iframeobj = _doc.createElement("IFRAME");
			iframeobj.frameborder = "0";
			iframeobj.scrolling = "no";

			iframeobj.style.visibility = 'hidden';
			iframeobj.style.position = 'absolute';
			iframeobj.style.border = 'none';
			if (nexacro.OS == "iOS") {
				iframeobj.style.display = 'none';
			}

			if (nexacro._enableaccessibility) {
				nexacro.__setDOMNodeTitle(iframeobj, application._getErrorMessge("msg_accessibility_emptyframe"));
				nexacro.__setDOMNodeAccessibilityHidden(iframeobj, true);
			}

			_doc.body.appendChild(iframeobj);

			iframeobj.src = "about:blank";
			var _frame_doc;
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				_frame_doc = iframeobj.contentWindow.document;
			}
			else {
				_frame_doc = iframeobj.contentDocument;
			}

			var frame_src = "";
			if (web_font) {
				var _fontfamily = [];
				var v = JSON.parse(web_font);
				var l = "";
				var font_idx = 0;
				for (var i = 0, len = v.length; i < len; i++) {
					for (var val in v[i]) {
						if (val == "href") {
							l += "<link ";
						}
						else if (val && (val.substr(0, 4) == "font")) {
							_fontfamily[font_idx++] = v[i][val];
							continue;
						}
						l += val;
						l += "=";
						l += ("\"" + v[i][val] + "\" ");
					}
					l += "/>\n";
				}

				var head_tag = "<head>\n";
				var head_tag_len = head_tag.length;
				var idx = nexacro._managerFrameSrc.indexOf(head_tag);
				var frame_f = nexacro._managerFrameSrc.substr(0, idx + head_tag_len);
				var frame_r = nexacro._managerFrameSrc.substr(idx + head_tag_len);
				frame_src = frame_f + l + frame_r;
			}
			else {
				frame_src = nexacro._managerFrameSrc;
			}

			_frame_doc.open();
			_frame_doc.write(frame_src);
			_frame_doc.close();
			nexacro._managerFrameNode = iframeobj;
			nexacro._managerFrameDoc = _frame_doc;

			var len = _fontfamily ? _fontfamily.length : 0;
			for (var i = 0; i < len; i++) {
				nexacro._dummy_getTextSize(_fontfamily[i]);
			}
		};

		nexacro._dummy_getTextSize = function (font_family) {
			var letterspace = nexacro._getCachedStyleObj("letterspace", "0");
			var font = nexacro._getCachedStyleObj("font", "10 " + font_family);
			nexacro._getTextSize2(letterspace, "A", font, true, 10);
		};

		nexacro._destroyManagerFrame = function (_win_handle) {
			var dest_handle = nexacro._getWindowDestinationHandle(_win_handle);
			if (nexacro._managerFrameNode && dest_handle) {
				nexacro.__removeDOMNode(dest_handle, nexacro._managerFrameNode);
			}
			nexacro._managerFrameNode = null;
			nexacro._managerFrameDoc = null;
		};


		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._createFrameNode = function (node, left, top, _doc) {
				var framehandle = _doc.createElement("iframe");
				framehandle.id = node.id + "_iframe";
				framehandle.frameborder = 0;
				framehandle.scrolling = "no";
				framehandle.style.border = 'none';
				framehandle.style.filter = "Alpha(Opacity=0);";

				framehandle.left = left;
				framehandle.top = top;

				framehandle.style.width = "100%";
				framehandle.style.height = "100%";
				nexacro.__appendDOMNode(node, framehandle);

				return framehandle;
			};

			nexacro._destroyFrameNode = function (node, framehandle) {
				if (framehandle) {
					nexacro.__removeDOMNode(node, framehandle);
				}
				framehandle = null;
			};
		}
		else {
			nexacro._createFrameNode = nexacro._destroyFrameNode = nexacro._emptyFn;
		}


		if (nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") {
			nexacro._TextCacheNodeCnt = 0;
			nexacro._TextInfoCacheManager = function (font, letterspace, rtldirection, usedecorate) {
				nexacro._checkFontFaceAndAttachFunctions(this, font);

				this.font = font;
				this.letterspace = letterspace;
				this.nowrapnode_arr = [];
				this.font_height = 0;
				this.space_width = 0;
				this.space_width1 = 0;
				this.cache = {
				};
				this._getFontInfo();
				this.wordwrapnode = null;
				this.rtldirection = rtldirection;
				this.usedecorate = usedecorate;
			};
			_pTextInfoCacheManager = nexacro._createPrototype(Object, nexacro._TextInfoCacheManager);
			nexacro._TextInfoCacheManager.prototype = _pTextInfoCacheManager;


			_pTextInfoCacheManager.getNowrapTextNode = function () {
				var node = this.nowrapnode_arr.pop();
				if (node == null) {
					var _doc = nexacro._managerFrameDoc;
					node = _doc.createElement("div");
					node.id = "calculate_text_" + nexacro._TextCacheNodeCnt;

					var node_style = node.style;
					node_style.position = "absolute";
					node_style.height = "auto";
					node_style.width = "auto";
					node_style.left = "0px";
					node_style.top = "0px";
					node_style.visibility = "hidden";
					this._setStyleFont(node_style, this.font);

					_doc.body.appendChild(node);
					nexacro._TextCacheNodeCnt++;
				}

				return node;
			};

			_pTextInfoCacheManager.restoreNode = function (node) {
				this.restoreNowrapTextNode(node);
			};
			_pTextInfoCacheManager.restoreNowrapTextNode = function (node) {
				this.nowrapnode_arr.push(node);
			};

			_pTextInfoCacheManager._getFontInfo = function () {
				var node = this.getNowrapTextNode();
				nexacro.__setDOMNodeSinglelineText(node, "gH");
				this.font_height = node.clientHeight;
				var font_width = node.clientWidth;
				nexacro.__setDOMNodeSinglelineText(node, "g H");
				var font_total_width = node.clientWidth;
				this.space_width = font_total_width - font_width;
				nexacro.__setDOMNodeSinglelineText(node, "　");
				this.space_width1 = node.clientWidth;
				this.restoreNowrapTextNode(node);
			};

			_pTextInfoCacheManager.getWordTextWidth = function (word) {
				var text_width = this.cache[word];
				if (text_width == null) {
					var textnode = this.getNowrapTextNode();

					try {
						nexacro.__setDOMNodeSinglelineText(textnode, word);
					}
					catch (e) {
					}
					text_width = textnode.clientWidth;

					this.restoreNowrapTextNode(textnode);
					this.cache[word] = text_width;
				}

				return text_width;
			};

			if (nexacro.BrowserVersion >= 9) {
				nexacro._is_hangul = function (v) {
					var r = new RegExp("[\\uac00-\\ud7af\\u3130-\\u318f\\u1100-\\u11ff]");
					if (r.test(v)) {
						return true;
					}

					return false;
				};

				nexacro._is_english = function (v) {
					var r = new RegExp("[\\u0041-\\u007a]");
					if (r.test(v)) {
						return true;
					}

					return false;
				};

				nexacro._checkFontFaceAndAttachFunctions = function (target, font) {
					var _font_face = font.face ? font.face : font._default_face;
					if (nexacro._is_english(_font_face) || nexacro._is_hangul(_font_face)) {
						var _p = target;

						_p.canvas_arr = [];

						_p.getCanvasNode = function () {
							var canvasinfo = this.canvas_arr.pop();
							if (canvasinfo == null) {
								var node = document.createElement("canvas");
								var ctx = node.getContext('2d');
								this._setCanvasStyleFont(ctx, this.font);

								canvasinfo = {
									node : node, 
									ctx : ctx
								};
							}
							return canvasinfo;
						};

						_p.restoreNode = function (node) {
							this.restoreCanvasNode(node);
						};

						_p.restoreCanvasNode = function (canvas_info) {
							this.canvas_arr.push(canvas_info);
						};

						_p._getFontInfo = function () {
							var _doc = nexacro._managerFrameDoc;
							var node = _doc.createElement("div");
							node.id = "calculate_text_" + nexacro._TextCacheNodeCnt;

							var node_style = node.style;
							node_style.position = "absolute";
							node_style.height = "auto";
							node_style.width = "auto";
							node_style.left = "0px";
							node_style.top = "0px";
							node_style.visibility = "hidden";
							this._setStyleFont(node_style, this.font);

							_doc.body.appendChild(node);
							nexacro._TextCacheNodeCnt++;

							nexacro.__setDOMNodeSinglelineText(node, "gH");
							this.font_height = node.clientHeight;
							_doc.body.removeChild(node);

							var node = document.createElement("canvas");
							var ctx = node.getContext('2d');
							this._setCanvasStyleFont(ctx, this.font);

							this.space_width = ctx.measureText(" ").width;
							this.space_width1 = ctx.measureText("　").width;

							this.restoreCanvasNode({
								node : node, 
								ctx : ctx
							});
						};

						_p.getWordTextWidth = function (word) {
							var text_width = this.cache[word];
							if (text_width == null) {
								var canvasinfo = this.getCanvasNode();
								text_width = canvasinfo.ctx.measureText(word).width;

								this.restoreCanvasNode(canvasinfo);
								this.cache[word] = text_width;
							}
							return text_width;
						};
					}
				};
			}
			else {
				nexacro._checkFontFaceAndAttachFunctions = nexacro._emptyFn;
			}
		}
		else {
			nexacro._TextCacheNodeCnt = 0;
			nexacro._TextInfoCacheManager = function (font, letterspace, rtldirection, usedecorate) {
				this.font = font;
				this.letterspace = letterspace;
				this.canvas_arr = [];
				this.font_height = 0;
				this.space_width = 0;
				this.space_width1 = 0;
				this.cache = {
				};
				this._getFontInfo();
				this.wordwrapnode = null;
				this.rtldirection = rtldirection;
				this.usedecorate = usedecorate;
			};
			_pTextInfoCacheManager = nexacro._createPrototype(Object, nexacro._TextInfoCacheManager);
			nexacro._TextInfoCacheManager.prototype = _pTextInfoCacheManager;

			if (nexacro.Browser == "Gecko") {
				nexacro._HTMLNodeSizeGap = 1;
			}
			else {
				nexacro._HTMLNodeSizeGap = 0;
			}


			_pTextInfoCacheManager.getCanvasNode = function () {
				var canvasinfo = this.canvas_arr.pop();
				if (canvasinfo == null) {
					var node = document.createElement("canvas");
					var ctx = node.getContext('2d');
					this._setCanvasStyleFont(ctx, this.font);

					canvasinfo = {
						node : node, 
						ctx : ctx
					};
				}
				return canvasinfo;
			};

			_pTextInfoCacheManager.restoreNode = function (node) {
				this.restoreCanvasNode(node);
			};

			_pTextInfoCacheManager.restoreCanvasNode = function (canvas_info) {
				this.canvas_arr.push(canvas_info);
			};

			_pTextInfoCacheManager._getFontInfo = function () {
				var _doc = nexacro._managerFrameDoc;
				var node = _doc.createElement("div");
				node.id = "calculate_text_" + nexacro._TextCacheNodeCnt;

				var node_style = node.style;
				node_style.position = "absolute";
				node_style.height = "auto";
				node_style.width = "auto";
				node_style.left = "0px";
				node_style.top = "0px";
				node_style.visibility = "hidden";
				this._setStyleFont(node_style, this.font);

				_doc.body.appendChild(node);
				nexacro._TextCacheNodeCnt++;

				nexacro.__setDOMNodeSinglelineText(node, "gH");
				var _clientheight = node.clientHeight;
				this.font_height = _clientheight - nexacro._HTMLNodeSizeGap;
				_doc.body.removeChild(node);
				var node = document.createElement("canvas");
				var ctx = node.getContext('2d');
				this._setCanvasStyleFont(ctx, this.font);

				this.space_width = ctx.measureText(" ").width;
				this.space_width1 = ctx.measureText("　").width;

				this.restoreCanvasNode({
					node : node, 
					ctx : ctx
				});
			};

			_pTextInfoCacheManager.getWordTextWidth = function (word) {
				var text_width = this.cache[word];
				if (text_width == null) {
					var canvasinfo = this.getCanvasNode();
					text_width = canvasinfo.ctx.measureText(word).width;

					this.restoreCanvasNode(canvasinfo);
					this.cache[word] = text_width;
				}
				return text_width;
			};
		}

		_pTextInfoCacheManager.getWordwrapTextNode = function (width, wordwrap) {
			var node = this.wordwrapnode;
			if (node == null) {
				var _doc = nexacro._managerFrameDoc;
				node = _doc.createElement("div");
				node.id = "calculate_wraptext_" + nexacro._TextCacheNodeCnt;

				var node_style = node.style;
				node_style.position = "absolute";
				node_style.height = "auto";
				node_style.width = width + "px";
				node_style.left = "0px";
				node_style.top = "0px";
				node_style.visibility = "hidden";
				this._setStyleFont(node_style, this.font);

				if (wordwrap == undefined || wordwrap == true || wordwrap == "true") {
					wordwrap = "char";
				}
				else if (wordwrap == false || wordwrap == "false") {
					wordwrap = "none";
				}

				nexacro.__setDOMNodeWordWrap(node, wordwrap);

				_doc.body.appendChild(node);

				this.wordwrapnode = node;
				nexacro._TextCacheNodeCnt++;
			}
			else {
				var node_style = node.style;
				node_style.width = width + "px";

				if (wordwrap == undefined || wordwrap == true || wordwrap == "true") {
					wordwrap = "char";
				}
				else if (wordwrap == false || wordwrap == "false") {
					wordwrap = "none";
				}

				if (this._isChangeStyleWordWrap(node_style, wordwrap)) {
					nexacro.__setDOMNodeWordWrap(node, wordwrap);
				}
			}

			return node;
		};

		_pTextInfoCacheManager.getWordWrapTextSize = function (text, width, wordwrap, letterspace, usedecorate) {
			var strw = letterspace !== undefined ? text + "#width" + width + "#letterspace" + letterspace : text + "#width" + width;
			var strh = strw + "#height";

			var text_width = this.cache[strw];
			var text_height = this.cache[strh];
			if (text_width == null) {
				var textnode = this.getWordwrapTextNode(width, wordwrap);

				try {
					var ch = text.charAt(text.length - 1);
					if (ch == "\n") {
						text += ch;
					}

					if (usedecorate) {
						nexacro.__setDOMNodeDecorateText(textnode, text);
					}
					else {
						nexacro.__setDOMNodeMultilineText(textnode, text);
					}
				}
				catch (e) {
				}

				text_width = textnode.clientWidth;
				if (letterspace !== undefined) {
					nexacro.__setDOMNodeStyleLetterSpace(textnode.style, letterspace);

					var sline = "", max_width = 0, len = text.length, node_width = textnode.clientWidth, letterspace_size;
					for (var i = 0; i < len; i++) {
						sline += text[i];
						letterspace_size = sline.length * letterspace;
						letterspace_size = letterspace < 0 ? letterspace_size - (letterspace * 2) : letterspace_size;
						text_width = this.getWordTextWidth(sline);
						text_width += (parseInt(letterspace_size));
						if (text_width >= node_width) {
							text_width = 0;
							sline = "";
							i--;
						}
						if (text_width > max_width && text_width <= node_width) {
							max_width = text_width;
						}
					}
					text_width = max_width;

					delete sline, max_width, len, node_width, letterspace_size;
					sline = max_width = len = node_width = letterspace_size = null;
				}

				text_height = textnode.clientHeight;

				this.cache[strw] = text_width;
				this.cache[strh] = text_height;

				delete textnode;
				textnode = null;
			}
			delete strw, strh;
			strw = strh = null;
			return [text_width, text_height];
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pTextInfoCacheManager._setStyleFont = function (node_style, font) {
				if (font._bold) {
					node_style.fontWeight = "bold";
				}
				else {
					node_style.fontWeight = "normal";
				}

				if (font._italic) {
					node_style.fontStyle = "italic";
				}
				else {
					node_style.fontStyle = "normal";
				}

				node_style.fontFamily = font.face;
				node_style.fontSize = font.size >= 0 ? font.size + "pt" : Math.abs(font.size) + "px";
			};
		}
		else {
			_pTextInfoCacheManager._setStyleFont = function (node_style, font) {
				node_style.font = font._sysvalue;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			_pTextInfoCacheManager._isChangeStyleWordWrap = function (node_style, use_wordwrap) {
				if (use_wordwrap == "char") {
					if (node_style.whiteSpace != "pre" || node_style.wordWrap != "break-word" || node_style.wordBreak != "break-all") {
						return true;
					}
				}
				else if (use_wordwrap == "english") {
					if (node_style.whiteSpace != "pre" || node_style.wordWrap != "break-word" || node_style.wordBreak != "") {
						return true;
					}
				}
				else {
					if (node_style.whiteSpace != "pre" || node_style.wordWrap != "normal") {
						return true;
					}
				}

				return false;
			};
		}
		else {
			_pTextInfoCacheManager._isChangeStyleWordWrap = function (node_style, use_wordwrap) {
				if (use_wordwrap == "char") {
					if (node_style.whiteSpace != "pre-wrap" || node_style.wordWrap != "break-word" || node_style.wordBreak != "break-all") {
						return true;
					}
				}
				else if (use_wordwrap == "english") {
					if (node_style.whiteSpace != "pre-wrap" || node_style.wordWrap != "break-word" || node_style.wordBreak != "") {
						return true;
					}
				}
				else {
					if (node_style.whiteSpace != "pre" || node_style.wordWrap != "normal" || node_style.wordBreak != "") {
						return true;
					}
				}

				return false;
			};
		}

		_pTextInfoCacheManager._setCanvasStyleFont = function (node_style, font) {
			node_style.font = font._sysvalue;
		};

		delete _pTextInfoCacheManager;

		nexacro._TextSizeCacheManagers = {
		};
		(function () {
			var re_newline = /\r\n|\n|\r/;
			var re_space = /\s/;

			nexacro.__getSinglelineTextSize = function (manager, letterspace, text, rtldirection) {
				var words = text.split(re_space);
				var wcnt = words.length;
				var text_size = 0;
				var letterspace_size = 0;


				for (var i = 0; i < wcnt; i++) {
					var word = words[i];
					if (word) {
						letterspace_size = word.length * letterspace;
						letterspace_size = letterspace < 0 ? letterspace_size - (letterspace * 2) : letterspace_size;

						text_size += manager.getWordTextWidth(word);
						text_size += (parseInt(letterspace_size));
					}
				}
				var idx_space = text.indexOf("　");
				if (idx_space > -1) {
					text_size += (wcnt - 1) * manager.space_width1;
					text_size += (wcnt - 1) * (parseInt(letterspace_size));
				}
				else {
					text_size += (wcnt - 1) * manager.space_width;
					text_size += (wcnt - 1) * (parseInt(letterspace_size));
				}

				return text_size;
			};

			nexacro._getSinglelineTextSize = function (manager, letterspace, text) {
				var text_width = nexacro.__getSinglelineTextSize(manager, letterspace, text.replace(/\r\n|\n|\r/, ' '));
				return [text_width, manager.font_height];
			};

			nexacro._getMultilineTextSize = function (manager, letterspace, text) {
				var lines = text.split(re_newline);
				var lcnt = lines.length;
				var text_width = 0;
				for (var i = 0; i < lcnt; i++) {
					var line_width = nexacro.__getSinglelineTextSize(manager, letterspace, lines[i]);
					if (line_width > text_width) {
						text_width = line_width;
					}
				}
				return [text_width, manager.font_height * lcnt];
			};



			nexacro._getWordwrapTextSize = function (manager, letterspace, text, content_width, wordwrap, bgettextsize, usedecorate) {
				if (bgettextsize !== undefined) {
					var text_size = manager.getWordWrapTextSize(text, content_width, wordwrap, letterspace, usedecorate);
				}
				else {
					var text_size = manager.getWordWrapTextSize(text, content_width, wordwrap, undefined, usedecorate);
					var letterspace_size = text.length * letterspace;
					letterspace_size = letterspace < 0 ? letterspace_size - (letterspace * 2) : letterspace_size;
					text_size[0] += parseInt(letterspace_size);
				}
				return text_size;
			};
		})();

		nexacro._getFontHeight = function (font) {
			var cacheManager = nexacro._TextSizeCacheManagers[font._sysvalue];
			if (cacheManager == null) {
				cacheManager = new nexacro._TextInfoCacheManager(font);
				nexacro._TextSizeCacheManagers[font._sysvalue] = cacheManager;
			}
			return cacheManager.font_height;
		};

		nexacro._getTextSize = function (letterspace, text, font, multiline, content_width, wordwrap, rtldirection, bgettextsize, usedecorate) {
			if (text && text.length > 0 && font && !font._is_empty) {
				var cacheManager = nexacro._TextSizeCacheManagers[font._sysvalue];
				if (cacheManager == null) {
					cacheManager = new nexacro._TextInfoCacheManager(font, letterspace, rtldirection, usedecorate);
					nexacro._TextSizeCacheManagers[font._sysvalue] = cacheManager;
				}

				if (multiline) {
					if (content_width != null) {
						return nexacro._getWordwrapTextSize(cacheManager, letterspace, text, content_width, wordwrap, bgettextsize, usedecorate);
					}
					else {
						return nexacro._getMultilineTextSize(cacheManager, letterspace, text);
					}
				}
				else {
					return nexacro._getSinglelineTextSize(cacheManager, letterspace, text);
				}
			}
			return [0, 0];
		};
		nexacro._getTextSize2 = nexacro._getTextSize;

		nexacro.getTextSize = function (text, font, width, wordwrap, letterspace, rtldirection) {
			if (typeof (wordwrap) == "string") {
				wordwrap = wordwrap.toLowerCase();
			}

			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			var line = true;

			if (wordwrap == "none") {
				line = false;
			}
			else if (wordwrap == "line") {
				width = null;
			}

			if (!letterspace) {
				letterspace = 0;
			}


			var usedecorate = nexacro._checkDecorateString(text);

			var retn = nexacro._getTextSize(letterspace, text, font, line, width, wordwrap, rtldirection, true, usedecorate);
			var obj = {
				nx : retn[0], 
				ny : retn[1]
			};

			return obj;
		};

		nexacro._getTextBaseline = function (textBaseline, y, h) {
			var cony = y;
			var s = h / 7;
			if (textBaseline == 3) {
				cony -= h / 3 - s;
			}
			else if (textBaseline == 2) {
				cony += h / 2;
			}
			else if (textBaseline == 0) {
				cony = y - h / 3 + s;
			}
			else if (textBaseline == 1) {
				cony = y + h / 2 + s;
			}
			return cony;
		};
		nexacro._getLineCountWithWordwrap = function (elem, letterspace, text, wordwrap) {
			var gap = (parseInt(elem._handle.style.paddingLeft) | 0) + (parseInt(elem._handle.style.paddingRight) | 0);
			var content_width = parseInt(elem.width) - gap - 2;

			var cacheManager = nexacro._TextSizeCacheManagers[elem.font._sysvalue];
			if (cacheManager == null) {
				cacheManager = new nexacro._TextInfoCacheManager(elem.font, letterspace);
				nexacro._TextSizeCacheManagers[elem.font._sysvalue] = cacheManager;
			}

			var text_size = nexacro._getWordwrapTextSize(cacheManager, elem.letterspace, text, content_width, wordwrap);
			var linecount = Math.round(text_size[1] / cacheManager.font_height);
			return Math.max(linecount, 1);
		};




		nexacro._ImgInfoCacheManager = 
			{
			cnt : 0, 
			ready : [], 
			loadinglist : {
			}, 
			get_imgnode : function () {
				var node = this.ready.pop();
				if (node == null) {
					var _doc = nexacro._managerFrameDoc;
					node = _doc.createElement("img");
					node.id = "calculate_img_" + this.cnt;
					nexacro.__setDOMNodeAlt(node, "");

					if (nexacro._allow_default_pinchzoom) {
						var imgcontainer = _doc.getElementById("calculate_img_container");
						if (!imgcontainer) {
							imgcontainer = _doc.createElement("div");
							imgcontainer.id = "calculate_img_container";
							imgcontainer.style.position = 'absolute';
							imgcontainer.style.overflow = 'hidden';
							imgcontainer.style.width = "1px";
							imgcontainer.style.height = "1px";
							_doc.body.appendChild(imgcontainer);
						}

						imgcontainer.appendChild(node);
					}
					else {
						_doc.body.appendChild(node);
					}

					this.cnt++;
				}
				return node;
			}, 
			restore_imgnode : function (node) {
				if (nexacro.Browser != "Edge" && !(nexacro.Browser == "IE" && nexacro.BrowserVersion >= 10)) {
					var src = node.getAttributeNode("src");
					if (src) {
						node.removeAttributeNode(src);
					}
				}
				this.ready.push(node);
			}, 
			clear_imgnode : function () {
				var _doc = nexacro._managerFrameDoc;
				var node = null;
				while (this.ready.length > 0) {
					node = this.ready.pop();
					nexacro.__removeDOMNode(_doc.body, node);
					node = null;
				}
				this.ready = null;
			}
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9) {
			nexacro._bind_imgloadhandler_onload_recall = function (node) {
				return function () {
					if (node) {
						nexacro._imgloadhandler_onload(node);
					}
				};
			};
		}

		nexacro._imgloadhandler_onload = function (node) {
			var img_url = node._cacheurl;
			node._cacheurl = null;

			var width = node.naturalWidth || node.width;
			var height = node.naturalHeight || node.height;

			nexacro._ImgInfoCacheList[img_url] = {
				width : width, 
				height : height
			};
			delete nexacro._ImgInfoCacheManager.loadinglist[img_url];

			nexacro._stopSysObserving(node, "load", "onload", nexacro._imgloadhandler_onload_forward);
			nexacro._stopSysObserving(node, "error", "onerror", nexacro._imgloadhandler_onerror_forward);

			if (node._callbackList) {
				var callbacklist = node._callbackList;
				var cnt = callbacklist.length;
				for (var i = 0; i < cnt; i++) {
					callbacklist[i].callback.call(callbacklist[i].target, img_url, width, height);
					callbacklist[i].target = null;
				}
				node._callbackList = null;
			}
			nexacro._ImgInfoCacheManager.restore_imgnode(node);
		};

		nexacro._imgloadhandler_onerror = function (node) {
			var img_url = node._cacheurl;
			delete node._cacheurl;
			node._cacheurl = null;

			nexacro._ImgInfoCacheList[img_url] = {
				width : 0, 
				height : 0
			};
			delete nexacro._ImgInfoCacheManager.loadinglist[img_url];

			nexacro._stopSysObserving(node, "load", "onload", nexacro._imgloadhandler_onload_forward);
			nexacro._stopSysObserving(node, "error", "onerror", nexacro._imgloadhandler_onerror_forward);

			if (node._callbackList) {
				var callbacklist = node._callbackList;
				var cnt = callbacklist.length;
				for (var i = 0; i < cnt; i++) {
					callbacklist[i].callback.call(callbacklist[i].target, img_url, 0, 0, node, -1);
				}
				delete node._callbackList;
				node._callbackList = null;
			}
			nexacro._ImgInfoCacheManager.restore_imgnode(node);
		};

		nexacro._getImageSize = function (src, callbackFn, pThis, base_url) {
			if (!src) {
				return null;
			}
			if (src.substring(0, 4).toLowerCase() == "url(") {
				src = src.substring(5, src.length - 2);
			}

			if (!src) {
				return null;
			}

			var img_url = src;
			if (img_url.substring(0, 17) == "data:image;base64") {
				var frontStr = img_url.substr(0, 10);
				var rearStr = img_url.substr(10, img_url.length - 1);
				if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
					img_url = frontStr + "/*" + rearStr;
				}
			}
			else {
				img_url = nexacro._getImageLocation(src, base_url);
			}

			var retval = nexacro._ImgInfoCacheList[img_url];
			if (retval) {
				return retval;
			}

			if (img_url) {
				var imgnode = nexacro._ImgInfoCacheManager.loadinglist[img_url];
				if (imgnode) {
					imgnode._callbackList.push({
						target : pThis, 
						callback : callbackFn
					});
				}
				else {
					imgnode = nexacro._ImgInfoCacheManager.get_imgnode();
					nexacro._ImgInfoCacheManager.loadinglist[img_url] = imgnode;
					imgnode._callbackList = [{
						target : pThis, 
						callback : callbackFn
					}];
					imgnode._cacheurl = img_url;
					nexacro._observeSysEvent(imgnode, "load", "onload", nexacro._imgloadhandler_onload_forward);
					nexacro._observeSysEvent(imgnode, "error", "onerror", nexacro._imgloadhandler_onerror_forward);
					imgnode.src = img_url;
				}
				retval = nexacro._ImgInfoCacheList[img_url];

				imgnode = null;
			}
			return retval ? retval : null;
		};

		nexacro._getImageObject = function (src, callbackFn, pThis, base_url) {
			if (src.substring(0, 4).toLowerCase() == "url(") {
				src = src.substring(5, src.length - 2);
			}

			if (!src) {
				return null;
			}


			var img_url = nexacro._getImageLocation(src, base_url);

			if (img_url) {
				var retval = nexacro._ImgInfoCacheList[img_url];

				var imgnode = nexacro._ImgInfoCacheManager.loadinglist[img_url];
				if (imgnode) {
					imgnode._callbackList.push({
						target : pThis, 
						callback : callbackFn
					});
					var retval = nexacro._ImgInfoCacheList[img_url];
					if (retval) {
						nexacro._imgloadhandler_onload_forward(imgnode);
					}
				}
				else {
					imgnode = nexacro._ImgInfoCacheManager.get_imgnode();

					var imagesize = nexacro._ImgInfoCacheList[img_url];
					if (imagesize) {
						imgnode.src = img_url;
						callbackFn.call(pThis, img_url, imagesize.width, imagesize.height, imgnode);
					}
					else {
						nexacro._ImgInfoCacheManager.loadinglist[img_url] = imgnode;
						imgnode._callbackList = [{
							target : pThis, 
							callback : callbackFn
						}];
						imgnode._cacheurl = img_url;
						nexacro._observeSysEvent(imgnode, "load", "onload", nexacro._imgloadhandler_onload_forward);
						nexacro._observeSysEvent(imgnode, "error", "onerror", nexacro._imgloadhandler_onerror_forward);
						imgnode.src = img_url;
					}
				}
				return imgnode;
			}

			return null;
		};



		nexacro._IframeManager = 
			{
			formlist : [], 
			create_form : function (name, iframe_id, pThis) {
				var _doc = nexacro._managerFrameDoc;
				var node = _doc.createElement("FORM");
				node.id = name;
				node.name = name;
				node.enctype = "multipart/form-data";
				node.encoding = "multipart/form-data";
				node.method = "post";
				node.target = iframe_id;

				var uploadiframe;
				if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
					uploadiframe = _doc.createElement("<IFRAME name='" + node.target + "'/>");
				}
				else {
					uploadiframe = _doc.createElement("IFRAME");
					uploadiframe.name = node.target;
				}
				uploadiframe.id = node.target;

				var str_title = application._getErrorMessge("msg_accessibility_emptyframe");
				nexacro.__setDOMNodeTitle(uploadiframe, str_title);

				var inputlist = [];

				nexacro._observeSysEvent(uploadiframe, "load", "onload", nexacro._fileinputhandler_onload_forward);
				this.formlist.push({
					form : node, 
					inputlist : inputlist, 
					uploadiframe : uploadiframe
				});

				node.appendChild(uploadiframe);
				_doc.body.appendChild(node);
				return uploadiframe;
			}, 
			search_form : function (form_id) {
				var form = null;
				for (var i = 0, n = this.formlist.length; i < n; i++) {
					if (this.formlist[i].form.id == form_id) {
						form = this.formlist[i].form;
						return {
							idx : i, 
							node : form
						};
					}
				}
				return form;
			}, 
			search_iframe : function (form_target) {
				var iframe = null;
				for (var i = 0, n = this.formlist.length; i < n; i++) {
					if (this.formlist[i].uploadiframe.id == form_target) {
						iframe = this.formlist[i].uploadiframe;
						return {
							idx : i, 
							node : iframe
						};
					}
				}
				return iframe;
			}, 
			search_input : function (form, input_id) {
				var input = null;
				var idx = 0;

				for (var j = 0, n = form.node.length; j < n; j++) {
					if (form.node[j].name == input_id) {
						input = form.node[j];
						return {
							idx : j, 
							node : input
						};
					}
				}
				return input;
			}, 
			get_node : function (id) {
				var form = this.search_form(id);
				var iframe = this.search_iframe(form.node.target);
				return iframe.node.contentWindow.document;
			}, 
			get_window : function (id) {
				var form = this.search_form(id);
				var iframe = this.search_iframe(form.node.target);
				return iframe.node.contentWindow;
			}, 
			get_doc : function (node) {
				var xmlDoc = node;
				if (node.XMLDocument) {
					xmlDoc = node.XMLDocument;
				}
				return xmlDoc;
			}
		};

		nexacro._getXMLDocument = function (id) {
			var manager = nexacro._IframeManager;
			var node = null, xmldoc = null;
			if (manager) {
				var node = manager.get_node(id);
				if (node) {
					xmldoc = manager.get_doc(node);
				}
			}
			return xmldoc;
		};
		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._findclick = function (comp_name, item_comp_name, item_comp) {
				if (item_comp._isPopupFrame()) {
					item_comp._getWindow()._handle._inputDOM_nodeClick(item_comp._input_node);
				}
				else {
					var manager = nexacro._IframeManager;
					if (manager) {
						var input = manager.search_input(manager.search_form(comp_name), item_comp_name);
						if (input) {
							input.node.click();
						}
					}
				}
			};
		}
		else {
			nexacro._findclick = function (comp_name, item_comp_name, item_comp) {
				var manager = nexacro._IframeManager;
				if (manager) {
					var input = manager.search_input(manager.search_form(comp_name), item_comp_name);
					if (input) {
						input.node.click();
					}
				}
			};
		}

		nexacro._file_changed = nexacro._emptyFn;

		nexacro._setMultipleFile = function (comp_name, item_comp_name, flag) {
			var manager = nexacro._IframeManager;
			if (manager) {
				var input = manager.search_input(manager.search_form(comp_name), item_comp_name);
				if (input) {
					input.node.multiple = flag;
				}
			}
		};

		nexacro._randomId = function (_window) {
			var rid = "";
			var doc = nexacro._getWindowDocumentHandle(_window._handle);
			do {
				rid = Math.random().toString().substr(2, 30);
			} while (doc.getElementById(rid));
			return rid;
		};

		nexacro._get_hidden_frame = function (form_id) {
			var manager = nexacro._IframeManager;
			return manager.search_form(form_id);
		};

		nexacro._create_hidden_frame = function (name, iframe_id, callback_fn, pThis) {
			var iframe = nexacro._IframeManager.create_form(name, iframe_id, pThis);
			iframe._callbackList = [{
				target : pThis, 
				callback : callback_fn
			}];
		};

		nexacro._destroy_hidden_frame = function (form_id, pThis) {
			var _doc = nexacro._managerFrameDoc;
			var manager = nexacro._IframeManager;
			var form = manager.search_form(form_id);
			var inputlist = manager.formlist[form.idx].inputlist;

			var inputnode = null;
			if (form && form.node) {
				while (inputlist.length > 0) {
					inputnode = inputlist.pop();
					delete inputnode._callbackList;
					inputnode._callbackList = null;
					nexacro.__removeDOMNode(form.node, inputnode);
					inputnode = null;
				}
				var ret_iframe = manager.formlist[form.idx].uploadiframe;
				if (ret_iframe) {
					nexacro._stopSysObserving(ret_iframe, "load", "onload", nexacro._fileinputhandler_onload_forward);
					delete ret_iframe._callbackList;
					ret_iframe._callbackList = null;
					nexacro.__removeDOMNode(form.node, ret_iframe);
					ret_iframe = null;
				}

				if (_doc && _doc.body) {
					nexacro.__removeDOMNode(_doc.body, form.node);
				}

				manager.formlist.splice(form.idx, 1);
				form.node = null;
			}
		};

		nexacro._create_filedownload_handle = nexacro._emptyFn;
		nexacro._destroy_filedownload_handle = nexacro._emptyFn;

		nexacro._getDataFromDOM = function (doc) {
			return doc.body.innerHTML;
		};

		nexacro._getContentType = function (doc) {
			if (doc.contentType) {
				return doc.contentType.split("/")[1].toUpperCase();
			}
			else {
				if (doc.xml || doc.xmlVersion) {
					return "XML";
				}
				else {
					return "HTML";
				}
			}
		};


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			nexacro._download = function (url) {
				var index = url.lastIndexOf(".");
				var extension;
				if (index > 0) {
					extension = url.substr(index + 1);
					if (extension == "xlsx") {
						window.location.href = url;
						return;
					}
				}
				window.open(url);
			};
		}
		else if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			nexacro._download = function (url) {
				var new_win = window.open(url);
				if (new_win) {
					new_win.addEventListener("focus", function () {
						if (this._use_filedialog) {
							this.close();
						}
					}, false);
					new_win.addEventListener("blur", function () {
						this._use_filedialog = true;
					}, false);
				}
			};
		}
		else if (nexacro.Browser == "Safari") {
			nexacro._download = function (url) {
				download = window.open('');
				download.location.href = url;
				download.setTimeout('window.close();', 500);
			};
		}
		else if (nexacro.Browser == "MobileSafari" && nexacro.OS == "iOS") {
			nexacro._download = function (url) {
				if (nexacro._isHybrid()) {
					var params = '{"url":"' + url + '"}';
					var jsonstr = '{"id":"", "div":"Browser", "method":"execBrowser", "params":' + params + '}';

					nexacro.Device.exec(jsonstr);
				}
				else {
					var bChange = false;

					var version_arr = nexacro.OSVersion.split(".");
					var major_version = version_arr[0];
					var minor_version = version_arr[1];
					var third_version = version_arr.length == 3 ? version_arr[2] : null;

					if (major_version >= 8 && minor_version >= 1) {
						if (minor_version == 1) {
							if (third_version && third_version >= 3) {
								bChange = true;
							}
						}
						else {
							bChange = true;
						}
					}

					if (bChange) {
						var download = window.open('');
						setTimeout(function () {
							download.location = url;
						}, 1200);
					}
					else {
						window.open(url);
					}
				}
			};
		}
		else {
			nexacro._download = function (url) {
				window.open(url);
			};
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 8) {
			nexacro._append_hidden_item = function (form_id, input_id, callback_fn, pThis, handle, multiselect) {
				var _doc;
				_doc = nexacro._managerFrameDoc;

				var manager = nexacro._IframeManager;
				var form = manager.search_form(form_id);
				var input = null;
				if (form && form.node) {
					var node = form.node;
					input = _doc.createElement("INPUT");
					input.type = "file";
					if (multiselect && nexacro.BrowserVersion > 9) {
						input.multiple = multiselect;
					}
					input.name = input_id;
					input._callbackList = [{
						target : pThis, 
						callback : callback_fn
					}];
					manager.formlist[form.idx].inputlist.push(input);

					node.appendChild(input);
					nexacro._observeSysEvent(input, "change", "onchange", nexacro._fileinputhandler_onchange_forward);
				}
				pThis._input_node = input;
			};

			nexacro._remove_hidden_item = function (form_id, input_id) {
				var manager = nexacro._IframeManager;
				var form = manager.search_form(form_id);
				if (form && form.node) {
					var input = manager.search_input(form, input_id);
					if (input && input.node) {
						nexacro._stopSysObserving(input.node, "propertychanage", "onpropertychange", nexacro._fileinputhandler_onchange_forward);
						nexacro.__removeDOMNode(form.node, input.node);
						manager.formlist[form.idx].inputlist.splice(input.idx, 1);
					}
				}
			};
		}
		else {
			nexacro._append_hidden_item = function (form_id, input_id, callback_fn, pThis, handle, multiselect) {
				var _doc;
				_doc = nexacro._managerFrameDoc;
				var manager = nexacro._IframeManager;
				var form = manager.search_form(form_id);
				var input = null;
				if (form && form.node) {
					var node = form.node;
					input = _doc.createElement("INPUT");
					input.type = "file";
					if (multiselect && (nexacro.BrowserType != "Edge" && nexacro.Browser != "IE")) {
						input.multiple = multiselect;
					}
					input.name = input_id;

					input._callbackList = [{
						target : pThis, 
						callback : callback_fn
					}];
					manager.formlist[form.idx].inputlist.push(input);

					node.appendChild(input);
					nexacro._observeSysEvent(input, "change", "onchange", nexacro._fileinputhandler_onchange_forward);
				}
				pThis._input_node = input;
			};

			nexacro._remove_hidden_item = function (form_id, input_id) {
				var manager = nexacro._IframeManager;
				var form = manager.search_form(form_id);
				if (form && form.node) {
					var input = manager.search_input(form, input_id);
					if (input && input.node) {
						nexacro._stopSysObserving(input.node, "change", "onchange", nexacro._fileinputhandler_onchange_forward);
						nexacro.__removeDOMNode(form.node, input.node);
						manager.formlist[form.idx].inputlist.splice(input.idx, 1);
					}
				}
			};
		}

		nexacro._change_inputnode_name = function (node, name) {
			if (node) {
				node.name = name;
			}
		};

		nexacro._submit = function (form_id, action) {
			var manager = nexacro._IframeManager;
			var form = manager.search_form(form_id);
			if (form && form.node) {
				var node = form.node;
				node.action = action;
				node.submit();
			}
		};


		nexacro._request_submit = function (form_id, action, pthis, item_value) {
			if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
				var ajax = nexacro.__createFakeHttpRequest(4, false, true);
				ajax = ajax._handle;

				try {
					ajax.open("POST", action, true);

					ajax._comp = pthis;
					ajax.onreadystatechange = pthis._bindUploadDataHandler;

					ajax.fileupload(item_value);
				}
				catch (e) {
					pthis.on_fire_onerror(pthis, "ObjectError", "failed to get", pthis, 9901, null, null, -1);
				}
			}
			else {
				var manager = nexacro._IframeManager;
				var form = manager.search_form(form_id);
				if (form && form.node) {
					var node = form.node;
					var httprequest = nexacro.__createHttpRequest();

					var _handle = httprequest._handle;
					if (_handle && _handle.upload) {
						var formdata = new FormData(node);

						_handle._comp = pthis;
						_handle.ontimeout = pthis._bindUploadDataHandler;
						_handle.onreadystatechange = pthis._bindUploadDataHandler;
						_handle.open("POST", action);
						_handle.send(formdata);
					}
				}
			}
		};

		nexacro._setImportCommand = function (comp_name, item_comp_name, item_comp, handle, value) {
			var manager = nexacro._IframeManager;
			if (manager) {
				var input = manager.search_input(manager.search_form(comp_name), item_comp_name);
				if (input) {
					input.node.value = value;
				}
				else {
					return false;
				}
			}
			return true;
		};

		nexacro._append_hidden_textitem = function (form_id, input_id) {
			var _doc;
			_doc = nexacro._managerFrameDoc;
			var manager = nexacro._IframeManager;
			var form = manager.search_form(form_id);
			var input = null;
			if (form && form.node) {
				var node = form.node;
				input = _doc.createElement("INPUT");
				input.type = "text";
				input.name = input_id;

				manager.formlist[form.idx].inputlist.push(input);

				node.appendChild(input);
			}
		};

		nexacro._fileinputhandler_onchange = function (node) {
			var value = "";
			var index = -1;
			var node_value = node.value;
			var files = node.files;
			var value2 = [];
			if (node.multiple) {
				var fLen = files.length;
				if (fLen > 0) {
					value = files[0].name;
					value2[0] = files[0].name;
					for (var j = 1; j < fLen; j++) {
						value += ", " + files[j].name;
						value2[j] = files[j].name;
					}
				}
			}
			else {
				value = node_value;
				value2[0] = node_value;
			}

			if (node._callbackList) {
				var cnt = 0, callbackitem = null;
				var callbacklist = node._callbackList;
				if (callbacklist) {
					cnt = callbacklist.length;
				}
				for (var i = 0; i < cnt; i++) {
					callbackitem = callbacklist[i];
					if (files) {
						callbackitem.target._changeFiles(files);
					}
					callbackitem.callback.call(callbackitem.target, value, value2);
				}
			}
		};

		nexacro._fileinputhandler_onload = function (node) {
			if (node._callbackList) {
				var cnt = 0;
				var callbacklist = node._callbackList;
				if (callbacklist) {
					cnt = callbacklist.length;
				}
				for (var i = 0; i < cnt; i++) {
					callbacklist[i].callback.call(callbacklist[i].target);
				}
			}
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion <= "8") {
				nexacro._fileinputhandler_onchange_forward = function (evt) {
					var target = evt.srcElement;
					nexacro._fileinputhandler_onchange(target);
				};
			}
			else {
				nexacro._fileinputhandler_onchange_forward = function (evt) {
					var target = evt.srcElement;
					nexacro._fileinputhandler_onchange(target);
				};
			}

			nexacro._fileinputhandler_onload_forward = function (evt) {
				var target = evt.srcElement;
				nexacro._fileinputhandler_onload(target);
			};
		}
		else {
			nexacro._fileinputhandler_onchange_forward = function (evt) {
				var target = evt.target;
				nexacro._fileinputhandler_onchange(target);
			};
			nexacro._fileinputhandler_onload_forward = function (evt) {
				var target = evt.target;
				nexacro._fileinputhandler_onload(target);
			};
		}

		nexacro._filedownload_iframe = null;

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__createHttpRequest = function (win_handle) {
				var _ajax = {
				};
				_ajax._destroy = nexacro._emptyFn;
				var obj = new nexacro._getXmlParser();
				_ajax._handle = obj ? obj : (win_handle ? new win_handle.XMLHttpRequest() : new XMLHttpRequest());

				return _ajax;
			};
		}
		else {
			nexacro.__createHttpRequest = function (win_handle) {
				var _ajax = {
				};
				_ajax._destroy = nexacro._emptyFn;
				if (win_handle) {
					_ajax._handle = new win_handle.XMLHttpRequest();
				}
				else {
					_ajax._handle = new XMLHttpRequest();
				}

				return _ajax;
			};
		}

		nexacro.__createFakeHttpRequest = function (ndatatype, compress, async) {
			if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
				var _ajax = {
				};
				_ajax._destroy = function () {
					if (this._handle) {
						this._handle.destory();
					}
				};
				_ajax._handle = new nexacro.FakeXMLHttpRequest("FakeXMLHttpRequest", this, ndatatype, compress, async);
				return _ajax;
			}
		};
		nexacro.__checkAjaxSuccess = function (ajax) {
			var ajax_handle = ajax._handle;
			if (ajax_handle.readyState == 4) {
				var statusNum = ajax_handle.status || 200;
				return (statusNum >= 200 && statusNum < 300) ? statusNum : -statusNum;
			}
			ajax_handle = null;
			return 0;
		};
		nexacro.__checkAjaxStatus = function (ajax) {
			var ajax_handle = ajax._handle;
			var ajaxstatus = ajax_handle.readyState;
			if (ajaxstatus == 4) {
				if (ajax._protocol != 2) {
					if (ajax_handle.status == 0 && ajax_handle.statusText == "") {
						return 0;
					}
				}

				var statusNum = ajax_handle.status || 200;
				ajax_handle = null;
				return (statusNum >= 200 && statusNum < 300) ? statusNum : -statusNum;
			}
			else {
				ajax_handle = null;
				return ajaxstatus == 0 ? 1 : ajaxstatus;
			}
		};

		nexacro.__httpErrorTable = 
			{
			301 : -0x1004A, 
			302 : -0x1004B, 
			305 : -0x1004D, 
			307 : -0x1004E, 
			400 : -0x1003B, 
			401 : -0x10042, 
			402 : -0x10043, 
			403 : -0x10044, 
			404 : -0x1003C, 
			405 : -0x1003D, 
			406 : -0x10045, 
			407 : -0x10046, 
			408 : -0x10047, 
			500 : -0x1003E, 
			503 : -0x1003F, 
			499 : -0x10040, 
			599 : -0x10041, 
			0 : 0
		};

		nexacro.__getHttpErrorCode = function (statuscode) {
			var errorcode = this.__httpErrorTable[statuscode];
			if (!errorcode) {
				if (statuscode < 500) {
					errorcode = "0x80010040";
				}
				else {
					errorcode = "0x80010041";
				}
			}
			return errorcode;
		};

		nexacro.__bindLoadModuleHandler = function (_ajax, pthis) {
			return function (e) {
				if (!_ajax || !_ajax._handle) {
					return;
				}
				var ajax_handle = _ajax._handle;
				var is_abort = _ajax.aborted;
				var status = (is_abort ? -1 : nexacro.__checkAjaxStatus(_ajax));
				if (status > 0) {
					if (status >= 4) {
						var cookie = "";
						if (pthis.context) {
							if (pthis.context._is_component) {
								cookie = pthis.context._getWindow()._doc.cookie;
							}
							else {
								cookie = document ? document.cookie : null;
							}
						}
						var data = ajax_handle.responseText;
						var last_modified = ajax_handle.getResponseHeader("Last-Modified");
						pthis.on_load_module(data, cookie, last_modified);
						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
				}
				else {
					if (status == -304) {
						var cookie = "";
						if (pthis.context) {
							if (pthis.context._is_component) {
								cookie = pthis.context._getWindow()._doc.cookie;
							}
							else {
								cookie = document ? document.cookie : null;
							}
						}

						pthis.bcache = false;
						var m_cache = nexacro._CacheList[pthis.path];
						pthis.on_load_module(m_cache.data, cookie, m_cache.last_modified);

						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
					else {
						var errcode = nexacro.__getHttpErrorCode(-status);

						var locationurl = "";
						var _statuscode = -status;
						if (!ajax_handle.ontimeout || !e || e.type == "load") {
							var _resoncode = "10" + _statuscode;

							if (_statuscode < 301 || _statuscode > 599) {
								_resoncode = nexacro.Communication_Error.LOADDETAIL;
							}

							pthis.on_error(errcode, "comm_fail_loaddetail", _statuscode, locationurl, _resoncode);

							_ajax._destroy();
							_ajax = null;
							pthis = null;
						}
						else {
							if (e) {
								if (e.type == "error" || e.type == "timeout" || status == -408 || status == -504) {
									if (_ajax.httpretry >= 1) {
										var ret = nexacro.__retryCommunication(_ajax, pthis);
										if (ret !== false) {
											return;
										}
									}
								}

								if (e.type == "timeout" || status == -408 || status == -504) {
									if (status == -504) {
										_statuscode = 504;
									}
									else {
										_statuscode = 408;
									}

									pthis.on_error(errcode, "comm_http_" + _statuscode, _statuscode, locationurl, nexacro.Communication_Error.CLIENTTIMEOUT);

									_ajax._destroy();
									_ajax = null;
									pthis = null;
								}
								else if (e.type == "error") {
									pthis.on_error(errcode, "comm_fail_networkerror", _statuscode, locationurl, nexacro.Communication_Error.NETWORKERROR);

									_ajax._destroy();
									_ajax = null;
									pthis = null;
								}
							}
							else {
								pthis.on_error(-1, "comm_fail_loaddetail", _statuscode, locationurl, nexacro.Communication_Error.LOADDETAIL);
								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
						}
					}
				}
				ajax_handle = null;
			};
		};
		nexacro.__bindLoadTextHandler = function (_ajax, pthis) {
			return function (e) {
				if (!_ajax || !_ajax._handle) {
					return;
				}
				var ajax_handle = _ajax._handle;
				var is_abort = _ajax.aborted;
				var status = (is_abort ? -1 : nexacro.__checkAjaxStatus(_ajax));
				if (status > 0) {
					if (status >= 4) {
						var cookie = "";
						if (pthis.context) {
							if (pthis.context._is_component) {
								cookie = pthis.context._getWindow()._doc.cookie;
							}
							else {
								cookie = document ? document.cookie : null;
							}
						}
						var data = ajax_handle.responseText;
						var last_modified = ajax_handle.getResponseHeader("Last-Modified");
						pthis.on_load_text(data, cookie, last_modified);
						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
				}
				else {
					if (_ajax._user_aborted) {
						pthis.on_error(0, "comm_cancel_byuser", 499, "", nexacro.Communication_Error.CANCELBYUSER);

						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
					else if (status == -304) {
						var cookie = "";
						if (pthis.context) {
							if (pthis.context._is_component) {
								cookie = pthis.context._getWindow()._doc.cookie;
							}
							else {
								cookie = document ? document.cookie : null;
							}
						}

						pthis.bcache = false;
						var m_cache = nexacro._CacheList[pthis.path];
						pthis.on_load_text(m_cache.data, cookie, m_cache.last_modified);

						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
					else {
						var errcode = nexacro.__getHttpErrorCode(-status);
						var locationurl = "";
						var _statuscode = -status;

						if (!ajax_handle.ontimeout || !e || e.type == "load") {
							var _resoncode = "10" + _statuscode;

							if (_statuscode < 301 && _statuscode > 599) {
								_resoncode = nexacro.Communication_Error.LOADDETAIL;
							}

							pthis.on_error(errcode, "comm_fail_loaddetail", _statuscode, locationurl, _resoncode);

							_ajax._destroy();
							_ajax = null;
							pthis = null;
						}
						else {
							if (e) {
								if (e.type == "error" || e.type == "timeout" || status == -408 || status == -504) {
									if (_ajax.httpretry >= 1) {
										var ret = nexacro.__retryCommunication(_ajax, pthis);
										if (ret !== false) {
											return;
										}
									}
								}

								if (e.type == "timeout" || status == -408 || status == -504) {
									if (status == -504) {
										_statuscode = 504;
									}
									else {
										_statuscode = 408;
									}

									pthis.on_error(errcode, "comm_http_" + _statuscode, _statuscode, locationurl, nexacro.Communication_Error.CLIENTTIMEOUT);

									_ajax._destroy();
									_ajax = null;
									pthis = null;
								}
								else if (e.type == "error") {
									pthis.on_error(errcode, "comm_fail_networkerror", _statuscode, locationurl, nexacro.Communication_Error.NETWORKERROR);

									_ajax._destroy();
									_ajax = null;
									pthis = null;
								}
							}
							else {
								pthis.on_error(-1, "comm_fail_loaddetail", _statuscode, locationurl, nexacro.Communication_Error.LOADDETAIL);
								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
						}
					}
				}
				ajax_handle = null;
			};
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 9) {
			nexacro.__checkloadData = function (xmlstr) {
				if (xmlstr) {
					var chkstr = xmlstr.substring(0, 5);
					if (chkstr.indexOf("xml") >= 0) {
						return true;
					}
				}
				return false;
			};

			nexacro.__bindLoadDataHandler = function (_ajax, pthis) {
				return function () {
					if (!_ajax || !_ajax._handle) {
						return;
					}
					var ajax_handle = _ajax._handle;
					var is_abort = _ajax.aborted;
					var status = (is_abort ? -1 : nexacro.__checkAjaxStatus(_ajax));
					if (status > 0) {
						try {
							if (status >= 4) {
								clearInterval(_ajax._timer_id);

								var _doc = null;
								var cookie = "";
								var last_modified = ajax_handle.getResponseHeader("Last-Modified");

								if (pthis.context) {
									if (pthis.context._is_component) {
										cookie = pthis.context._getWindow()._doc.cookie;
									}
									else {
										cookie = document ? document.cookie : null;
									}
								}
								if (pthis._check_responseXML) {
									_doc = ajax_handle.responseXML;
									if (_doc && _doc.childNodes && _doc.childNodes.length > 0) {
										pthis.on_load_xmldom(_doc, cookie, last_modified);
									}
									else {
										var data = ajax_handle.responseText;
										if (data) {
											pthis.on_load_data(data, cookie, last_modified);
										}
										else {
											pthis.on_load_data("", cookie, last_modified);
										}
									}
								}
								else {
									var data = ajax_handle.responseText;
									if (data) {
										pthis.on_load_data(data, cookie, last_modified);
									}
									else {
										pthis.on_load_data("", cookie, last_modified);
									}
								}

								_doc = null;
								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
						}
						catch (e) {
							clearInterval(_ajax._timer_id);

							var err_code = -1;
							var err_message = "";
							var err_type = "comm_fail_unknown";

							if (e) {
								err_code = e.number;
								err_message = e.message;
							}

							application.addErrorMessage(system._language, err_type, err_message);

							pthis.on_error(err_code, err_type, err_code, "");
							_ajax._destroy();
							_ajax = null;
							pthis = null;
						}
					}
					else {
						clearInterval(_ajax._timer_id);

						if (_ajax._user_aborted) {
							pthis.on_error(0, "comm_cancel_byuser", 499, "", nexacro.Communication_Error.CANCELBYUSER);
						}
						else {
							var errcode = nexacro.__getHttpErrorCode(-status);
							var locationurl = "";

							var _statuscode = -status;
							var _resoncode = "10" + _statuscode;

							if (_statuscode < 301 || _statuscode > 599) {
								_resoncode = nexacro.Communication_Error.LOADDETAIL;
							}

							pthis.on_error(errcode, "comm_fail_loaddetail", _statuscode, locationurl, _resoncode);
						}
						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}

					ajax_handle = null;
				};
			};
		}
		else {
			nexacro.__bindLoadDataHandler = function (_ajax, pthis) {
				return function (e) {
					if (!_ajax || !_ajax._handle) {
						return;
					}
					var ajax_handle = _ajax._handle;
					var is_abort = _ajax.aborted;

					var status = (is_abort ? -1 : nexacro.__checkAjaxStatus(_ajax));

					if (pthis._is_bulk) {
						status = status == 3 ? 2 : status;
					}

					if (status > 0) {
						try {
							if (status >= 4) {
								var _doc = null;
								var cookie = "";
								var last_modified = ajax_handle.getResponseHeader("Last-Modified");

								if (pthis.context) {
									if (pthis.context._is_component) {
										cookie = pthis.context._getWindow()._doc.cookie;
									}
									else {
										cookie = document ? document.cookie : null;
									}
								}
								var data = ajax_handle.responseText;
								if (!data) {
									data = "";
								}

								if (!data && pthis._check_responseXML) {
									_doc = ajax_handle.responseXML;
									if (_doc) {
										pthis.on_load_xmldom(_doc, cookie, last_modified);
									}
									else {
										pthis.on_load_data("", cookie, last_modified);
									}
								}
								else {
									pthis.on_load_data(data, cookie, last_modified);
								}
								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
							else if (status == 3) {
								if (pthis instanceof nexacro.TransactionItem) {
									if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 10) {
										return;
									}

									if (pthis._is_unknowntype_data) {
										return;
									}

									if (pthis._progress_data && !pthis._progress_data._needParseForFirstCount()) {
										return;
									}

									if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
										pthis._progress_cnt++;
										if (pthis._progress_cnt > 3 && (pthis._progress_cnt % 30) != 3) {
											return;
										}
									}

									var data = ajax_handle.responseText;
									if (!data) {
										data = "";
									}

									pthis.on_progress_data(data, false);
								}
							}
							else {
								if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 9) {
									if (e && e.type == "timeout") {
										if (_ajax.httpretry >= 1) {
											var ret = nexacro.__retryCommunication(_ajax, pthis);
											if (ret !== false) {
												return;
											}
										}

										status = 408;
										var errcode = nexacro.__getHttpErrorCode(status);
										pthis.on_error(errcode, "comm_http_408", status, "", nexacro.Communication_Error.CLIENTTIMEOUT);

										_ajax._destroy();
										_ajax = null;
										pthis = null;
									}
								}
								else {
									if (ajax_handle.readyState > 1 && (ajax_handle.status == 408 || ajax_handle.status == 504)) {
										status = ajax_handle.status;

										var locationurl = "";
										var errcode = nexacro.__getHttpErrorCode(status);

										if (status == 408) {
											pthis.on_error(errcode, "comm_http_408", status, locationurl);
										}
										else {
											pthis.on_error(errcode, "comm_http_504", status, locationurl);
										}

										_ajax._destroy();
										_ajax = null;
										pthis = null;
									}
								}
							}
						}
						catch (e) {
							var err_code = -1;
							var err_message = "";
							var err_type = "comm_fail_unknown";

							if (e) {
								err_code = e.number;
								err_message = e.message;
							}

							application.addErrorMessage(system._language, err_type, err_message);

							pthis.on_error(err_code, err_type, err_code, "");
							_ajax._destroy();
							_ajax = null;
							pthis = null;
						}
					}
					else {
						if (_ajax._user_aborted) {
							pthis.on_error(0, "comm_cancel_byuser", 499, "", nexacro.Communication_Error.CANCELBYUSER);

							_ajax._destroy();
							_ajax = null;
							pthis = null;
						}
						else {
							var errcode = nexacro.__getHttpErrorCode(-status);
							var locationurl = "";
							var _statuscode = -status;
							if (!ajax_handle.ontimeout || !e || e.type == "load") {
								var _resoncode = "10" + _statuscode;

								if (_statuscode < 301 || _statuscode > 599) {
									_resoncode = nexacro.Communication_Error.LOADDETAIL;
								}

								pthis.on_error(errcode, "comm_fail_loaddetail", _statuscode, locationurl, _resoncode);

								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
							else {
								if (e) {
									if (e.type == "error" || e.type == "timeout" || status == -408 || status == -504) {
										if (_ajax.httpretry >= 1) {
											var ret = nexacro.__retryCommunication(_ajax, pthis);
											if (ret !== false) {
												return;
											}
										}
									}

									if (e.type == "timeout" || status == -408 || status == -504) {
										if (status == -504) {
											_statuscode = 504;
										}
										else {
											_statuscode = 408;
										}

										pthis.on_error(errcode, "comm_http_" + _statuscode, _statuscode, locationurl, nexacro.Communication_Error.CLIENTTIMEOUT);

										_ajax._destroy();
										_ajax = null;
										pthis = null;
									}
									else if (e.type == "error") {
										pthis.on_error(errcode, "comm_fail_networkerror", _statuscode, locationurl, nexacro.Communication_Error.NETWORKERROR);

										_ajax._destroy();
										_ajax = null;
										pthis = null;
									}
								}
								else {
									pthis.on_error(-1, "comm_fail_loaddetail", _statuscode, locationurl, nexacro.Communication_Error.LOADDETAIL);
									_ajax._destroy();
									_ajax = null;
									pthis = null;
								}
							}
						}
					}

					ajax_handle = null;
				};
			};
		}

		nexacro.__bindLoadUpdateHandler = function (_ajax, pthis) {
			return function (e) {
				if (!_ajax || !_ajax._handle) {
					return;
				}
				var ajax_handle = _ajax._handle;
				var is_abort = _ajax.aborted;
				var status = (is_abort ? -1 : nexacro.__checkAjaxStatus(_ajax));
				if (status > 0) {
					if (status >= 4) {
						var cookie = "";
						if (pthis.context) {
							if (pthis.context._is_component) {
								cookie = pthis.context._getWindow()._doc.cookie;
							}
							else {
								cookie = document ? document.cookie : null;
							}
						}

						var data = ajax_handle.responseText;
						pthis.on_load_update(data, cookie);
						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
				}
				else {
					var errcode = nexacro.__getHttpErrorCode(-status);

					var locationurl = "";
					var _statuscode = -status;

					if (!ajax_handle.ontimeout || !e || e.type == "load") {
						var _resoncode = "10" + _statuscode;

						if (_statuscode < 301 || _statuscode > 599) {
							_resoncode = nexacro.Communication_Error.LOADDETAIL;
						}

						pthis.on_error(errcode, "comm_fail_loaddetail", _statuscode, locationurl, _resoncode);

						_ajax._destroy();
						_ajax = null;
						pthis = null;
					}
					else {
						if (e) {
							if (e.type == "error" || e.type == "timeout" || status == -408 || status == -504) {
								if (_ajax.httpretry >= 1) {
									var ret = nexacro.__retryCommunication(_ajax, pthis);
									if (ret !== false) {
										return;
									}
								}
							}

							if (e.type == "timeout" || status == -408 || status == -504) {
								if (status == -504) {
									_statuscode = 504;
								}
								else {
									_statuscode = 408;
								}

								pthis.on_error(errcode, "comm_http_" + _statuscode, _statuscode, locationurl, nexacro.Communication_Error.CLIENTTIMEOUT);

								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
							else if (e.type == "error") {
								errcode = nexacro.__getHttpErrorCode(status);

								pthis.on_error(errcode, "comm_fail_networkerror", _statuscode, locationurl, nexacro.Communication_Error.NETWORKERROR);

								_ajax._destroy();
								_ajax = null;
								pthis = null;
							}
						}
						else {
							pthis.on_error(-1, "comm_fail_loaddetail", _statuscode, locationurl, nexacro.Communication_Error.LOADDETAIL);
							_ajax._destroy();
							_ajax = null;
							pthis = null;
						}
					}
				}
				ajax_handle = null;
			};
		};

		nexacro.__retryCommunication = function (_ajax, loaditem) {
			if (!_ajax || !loaditem) {
				return false;
			}

			var method = _ajax.method;
			var path = _ajax.path;
			var async = _ajax.async;
			var senddata = _ajax.senddata;
			var bindfn = _ajax.bindfn;
			var referer = _ajax.referer;
			var service = _ajax.service;
			var cachelevel = _ajax.cachelevel;
			var ndatatype = _ajax.ndatatype;
			var compress = _ajax.compress;
			var ver = _ajax.ver;
			var failpass = _ajax.failpass;
			var httpretry = _ajax.httpretry;

			loaditem._httpretry = --httpretry;
			_ajax._handle.abort();

			if (async && nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
				clearInterval(_ajax._timer_id);
			}

			_ajax._destroy();
			_ajax = null;

			nexacro.__startCommunication(loaditem, path, cachelevel, async, referer, senddata, ndatatype, compress, ver, failpass, service);

			return true;
		};

		nexacro._on_load_loadItem = function (loadItem, path) {
			var cache = nexacro._CacheList[path];
			if (loadItem.type == "module") {
				loadItem.on_load_module(cache.data, null);
			}
			else if (loadItem.type == "text") {
				loadItem.on_load_text(cache.data, null);
			}
			else {
				loadItem.on_load_update(cache.data, null);
			}
		};

		nexacro.__startCommunication = function (loadItem, path, cachelevel, async, referer, senddata, ndatatype, compress, ver, failpass, service, httpretry) {
			var _ajax;
			if (cachelevel == "default" && loadItem.type != "data") {
				if (async) {
					_ajax = {
					};
					_ajax._destroy = function () {
						if (this._handle) {
							this._handle = null;
						}
						if (this.timerid) {
							clearTimeout(this.timerid);
						}
						this.timerid = undefined;
					};
					_ajax._handle = {
						timerid : (setTimeout(function () {
							nexacro._on_load_loadItem(loadItem, path);
						})), 
						abort : function () {
							if (this.timerid) {
								clearTimeout(this.timerid);
							}
							this.timerid = undefined;
						}
					};
					return _ajax._handle;
				}
				else {
					nexacro._on_load_loadItem(loadItem, path);
					return null;
				}
			}
			else if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
				if ((loadItem.type == "data" && ndatatype == 1) || (document.location.href.indexOf("file://") == 0)) {
					_ajax = nexacro.__createFakeHttpRequest(ndatatype, compress, async);
				}
				else {
					_ajax = nexacro.__createHttpRequest();
				}
			}
			else {
				_ajax = nexacro.__createHttpRequest();
			}

			var ajax_handle = _ajax._handle;

			if (path.indexOf("://") > -1) {
				var ar = path.split("://");
				var protocol = ar[0];
				switch (protocol) {
					case "http":
						_ajax._protocol = 0;
						break;
					case "https":
						_ajax._protocol = 1;
						break;
					case "file":
						_ajax._protocol = 2;
						break;
					default:
						_ajax._protocol = -1;
						break;
				}
			}

			var bindfn = null;
			var method = "GET";
			var mime_xml = false;

			if (loadItem.type == "module") {
				bindfn = nexacro.__bindLoadModuleHandler(_ajax, loadItem);
			}
			else if (loadItem.type == "data") {
				bindfn = nexacro.__bindLoadDataHandler(_ajax, loadItem);
				method = loadItem._http_method ? loadItem._http_method : "POST";
				mime_xml = true;
				if (nexacro.Browser == "IE") {
					path = encodeURI(path.trim());
				}
			}
			else if (loadItem.type == "text") {
				bindfn = nexacro.__bindLoadTextHandler(_ajax, loadItem);
			}
			else {
				bindfn = nexacro.__bindLoadUpdateHandler(_ajax, loadItem);
			}

			if (async) {
				ajax_handle.onreadystatechange = bindfn;
			}

			if (ajax_handle.onerror !== undefined) {
				ajax_handle.onerror = bindfn;
			}

			httpretry = (loadItem._httpretry !== undefined) ? loadItem._httpretry : nexacro._getLocalStorage("httpretry", 0);
			if (httpretry >= 1) {
				_ajax.path = path;
				_ajax.cachelevel = cachelevel;
				_ajax.async = async;
				_ajax.referer = referer;
				_ajax.senddata = senddata;
				_ajax.ndatatype = ndatatype;
				_ajax.compress = compress;
				_ajax.ver = ver;
				_ajax.failpass = failpass;
				_ajax.service = service;

				_ajax.httpretry = httpretry;
				_ajax.method = method;
				_ajax.bindfn = bindfn;
			}

			try {
				ajax_handle.open(method, path, !!async);
			}
			catch (e) {
				var _statuscode = e.number;
				var _resoncode = "10" + _statuscode;

				if (_statuscode < 301 || _statuscode > 599) {
					_resoncode = nexacro.Communication_Error.LOADDETAIL;
				}

				loadItem.on_error(e.number, "comm_fail_loaddetail", _statuscode, "", _resoncode);

				_ajax = null;
				return null;
			}

			if (async && nexacro._getLocalStorage("networksecurelevel", 0) == 0) {
				if ((nexacro.Browser == "IE" && nexacro.BrowserVersion > 9) || nexacro.Browser != "IE") {
					ajax_handle.withCredentials = true;
				}
			}

			if (loadItem._protocol == -1) {
				var protocoladp = nexacro._getProtocol(loadItem.protocol);
				if (protocoladp && protocoladp.version) {
					var protocolver = protocoladp.version();
					if (protocolver > "1.0") {
						var httpheaders = protocoladp.getHTTPHeader();

						for (var i = 0, n = httpheaders.length; i < n; i++) {
							ajax_handle.setRequestHeader(httpheaders[i].id, httpheaders[i].value);
						}
					}
				}
			}
			else {
				if (mime_xml) {
					ajax_handle.setRequestHeader("X-Requested-With", "XMLHttpRequest");
					ajax_handle.setRequestHeader("Accept", "application/xml, text/xml, */*");
					ajax_handle.setRequestHeader("Content-Type", "text/xml");
				}
			}

			var header_vars = nexacro._getLocalStorage("_header_variables", []);
			var header_vars_len = header_vars.length;
			if (header_vars_len > 0) {
				var header_id, header_value;
				for (var i = 0; i < header_vars_len; i++) {
					header_id = header_vars[i];
					header_value = application[header_id];
					if (header_id && header_value) {
						ajax_handle.setRequestHeader(header_id, header_value);
					}
				}
			}

			if (service) {
				if (service.cachelevel == "none") {
					ajax_handle.setRequestHeader("cache-control", "no-cache, no-store");
					ajax_handle.setRequestHeader("Pragma", "no-cache");
					ajax_handle.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
					ajax_handle.setRequestHeader("Expires", -1);
				}
				else {
					if (loadItem.last_modified) {
						ajax_handle.setRequestHeader("cache-control", "no-cache");
						ajax_handle.setRequestHeader("If-Modified-Since", loadItem.last_modified);
					}
				}
			}

			try {
				var tout = nexacro._getLocalStorage("httptimeout", 0);
				if (async) {
					if (ajax_handle.timeout != undefined && tout >= 0 && tout <= 2147483) {
						ajax_handle.timeout = tout * 1000;

						ajax_handle.ontimeout = bindfn;
						ajax_handle.onload = bindfn;
					}
				}

				ajax_handle.send(senddata ? senddata : null);
				if (!async) {
					bindfn(_ajax, loadItem);
				}
				else if (async && nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
					if (ajax_handle.timeout === undefined && tout > 0 && tout <= 2147483 && loadItem.type == "data") {
						_ajax._timer_id = setInterval(function () {
							if (_ajax.httpretry >= 1) {
								var ret = nexacro.__retryCommunication(_ajax, loadItem);
							}
							else {
								clearInterval(_ajax._timer_id);

								var locationurl = "";
								var status = 408;
								var errcode = nexacro.__getHttpErrorCode(status);

								loadItem.on_error(errcode, "comm_http_408", status, locationurl, nexacro.Communication_Error.CLIENTTIMEOUT);

								_ajax._destroy();
								_ajax = null;
								loadItem = null;
							}
						}, application.httptimeout * 1000);
					}
				}
			}
			catch (e) {
				if (_ajax._user_aborted) {
					loadItem.on_error(e.number, "comm_stop_transaction_byesc", 499, "", nexacro.Communication_Error.STOPTRANSACTIONBYESC);
				}
				else {
					var _statuscode = e.number;
					var _resoncode = _statuscode ? "10" + _statuscode : "0";

					if (_statuscode < 301 || _statuscode > 599) {
						_resoncode = nexacro.Communication_Error.LOADDETAIL;
					}

					loadItem.on_error(e.number, "comm_fail_loaddetail", _statuscode, "", _resoncode);
				}
				return null;
			}
			ajax_handle = null;
			return _ajax;
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 6) {
			nexacro.__cancelCommunication = function (_ajax) {
				var ajax_handle = _ajax._handle;
				_ajax.aborted = true;
				ajax_handle.abort();
				ajax_handle = null;
				return false;
			};
		}
		else {
			nexacro.__cancelCommunication = function (_ajax) {
				var ajax_handle = _ajax._handle;
				_ajax.aborted = true;
				ajax_handle.abort();
				ajax_handle = null;
				return false;
			};
		}

		nexacro._convertDatasetSSVToBIN = function (ssvdata) {
		};
		nexacro._convertDatasetBINToSSV = function (bindata) {
		};

		nexacro._convertStreamSSVToBIN = function (ssvdata) {
		};
		nexacro._convertStreamBINToSSV = function (bindata) {
		};

		nexacro._completedUpdateResource = nexacro._emptyFn;
		nexacro.__plugincallMethod = nexacro._emptyFn;

		nexacro.__openSystemCalendar = nexacro._emptyFn;
		nexacro.__closeSystemCalendar = nexacro._emptyFn;

		nexacro._ProgressData = function (parent) {
			this._data_buffer = "";
			this._cur_idx = 0;

			this._received_data_length = 0;
			this._parent = parent;
			this._rs;
			this._cs;

			this._data_type = null;
			this._parse_mode = 0;
			this._load_completed = false;

			this._parameters = [];
			this._datasets = {
			};
			this._cur_dataset_id = "";

			this._error_info = [0, "SUCCESS"];

			this._parsing_min_size = 1024 * 4;

			this._init();
		};

		var _pProgressData = nexacro._createPrototype(nexacro.Object, nexacro._ProgressData);
		nexacro._ProgressData.prototype = _pProgressData;

		_pProgressData._init = function () {
			var out_datasets = this._parent.outputDatasets;
			var form = this._parent.context;

			if (out_datasets && out_datasets.length) {
				var outDataCnt = out_datasets.length;

				for (var i = 0; i < outDataCnt; i++) {
					var param = out_datasets[i];
					if (!this._datasets[param.rval]) {
						var ds = form._getDatasetObject(param.lval);
						if (ds) {
							this._datasets[param.rval] = {
								_isEnable : false, 
								_target_ds : ds, 
								_firefirstcount : ds.firefirstcount, 
								_is_loaded : false, 
								_is_loaded_firstcount : (ds.firefirstcount > 0) ? false : true, 
								_is_first_load : true, 
								_useclientlayout : ds.useclientlayout, 
								_viewrecords_length : 0, 

								_next_record_idx : 0, 

								_ds_start_idx : -1, 
								_ds_end_idx : -1, 

								_row_start_idx : -1, 
								_firstrow_end_idx : -1, 
								_row_end_idx : -1, 

								_colinfo_start_idx : -1, 
								_colinfo_end_idx : -1
							};
						}
					}
				}
			}
		};

		_pProgressData._applyChange_inputDataset = function () {
			var in_datasets = this._parent.inputDatasets;
			var form = this._parent.context;

			if (in_datasets && in_datasets.length) {
				var in_ds_cnt = in_datasets.length;
				for (var i = 0; i < in_ds_cnt; i++) {
					var param = in_datasets[i];
					var ds = form._getDatasetObject(param.rval);
					if (ds) {
						ds.applyChange();
					}
				}
			}
		};

		_pProgressData._on_progress = function (data, bFinal) {
			var received_len = data.length - this._received_data_length;

			if (!bFinal && (received_len <= this._parsing_min_size)) {
				return;
			}

			this._received_data_length = data.length;
			var error_cd = this._error_info[0];
			var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
			if (error_cd <= -1 && type == "onsuccess") {
				return;
			}

			this._parse(data, bFinal);
		};

		_pProgressData._needParseForFirstCount = function () {
			for (var buff_ds in this._datasets) {
				if (!this._datasets[buff_ds]._is_loaded_firstcount) {
					return true;
				}
			}
			return false;
		};

		_pProgressData._appendData = function (data) {
			if (!data) {
				return;
			}

			if (nexacro.Browser == "Runtime") {
				this._data_buffer[this._data_buffer.length] = data;
				this._received_data_length += data.length;
			}
		};

		_pProgressData._parseHeader = function (data) {
			var n = -1;
			var rs_len = 0;

			if (this._rs instanceof Array) {
				var rss = this._rs;
				var i;
				for (i = 0, n = rss.length; i < n; i++) {
					var rs = rss[i];
					n = data.indexOf(rs, this._cur_idx);
					if (n >= 0) {
						rs_len = this._rs[i].length;
						this._rs = this._rs[i];
						break;
					}
				}
			}
			else {
				n = data.indexOf(this._rs, this._cur_idx);
				rs_len = this._rs.length;
			}

			if (n >= 0) {
				this._cur_idx = n + rs_len;
			}
			else {
				return false;
			}

			return true;
		};

		_pProgressData._parseParameters = function (data) {
			var line = "";
			var n = -1;
			var rs_len = 0;

			if (this._rs instanceof Array) {
				var rss = this._rs;
				var i;
				for (i = 0, n = rss.length; i < n; i++) {
					var rs = rss[i];
					n = data.indexOf(rs, this._cur_idx);
					if (n >= 0) {
						rs_len = this._rs[i].length;
						break;
					}
				}
			}
			else {
				n = data.indexOf(this._rs, this._cur_idx);
				rs_len = this._rs.length;
			}

			if (n >= 0) {
				line = data.substring(this._cur_idx);
			}
			else {
				return false;
			}

			var param_arr = line.split(this._rs);
			var param_cnt = param_arr.length;
			var form = this._parent.context;

			for (var i = 0; i < param_cnt; i++) {
				var param_str = param_arr[i];
				if (this._data_type == "CSV") {
					if (param_str.charAt(0) == "\"" || param_str.charAt(0) == "\'") {
						param_str = param_str.substring(1, param_str.length - 1);
					}
				}
				var varInfo = param_str;
				var val = undefined;
				var sep_pos = param_str.indexOf("=");
				if (sep_pos >= 0) {
					varInfo = param_str.substring(0, sep_pos);
					val = param_str.substring(sep_pos + 1);
					if (val == String.fromCharCode(3)) {
						val = undefined;
					}
				}

				if (varInfo) {
					var id = varInfo;
					var sep_pos = varInfo.indexOf(":");
					if (sep_pos >= 0) {
						id = varInfo.substring(0, sep_pos);
					}

					if (id == "Dataset") {
						break;
					}
					else if (id == "ErrorCode") {
						var code = parseInt(val) | 0;
						if (isFinite(code) == false) {
							val = -1;
						}
						else {
							val = code;
						}

						this._error_info[0] = val;
						this._cur_idx += param_str.length + rs_len;
					}
					else if (id == "ErrorMsg") {
						this._error_info[1] = val;
						this._cur_idx += param_str.length + rs_len;
					}
					else if (id in form) {
						if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
							form[id] = val;
						}
						this._cur_idx += param_str.length + rs_len;
					}
					else {
						if (application._existVariable(id)) {
							application.setVariable(id, val);
						}
						this._cur_idx += param_str.length + rs_len;
					}
					this._parameters[this._parameters.length] = {
						id : id, 
						value : val
					};
				}
			}

			if (this._error_info[0] >= 0) {
				this._applyChange_inputDataset();
			}

			return true;
		};

		_pProgressData._parseDataset = function (data) {
			var line = "";
			var rs_len = 0;
			if (this._rs instanceof Array) {
				var rss = this._rs;
				var i;
				for (i = 0, n = rss.length; i < n; i++) {
					var rs = rss[i];
					n = data.indexOf(rs, this._cur_idx);
					if (n >= 0) {
						rs_len = this._rs[i].length;
						break;
					}
				}
			}
			else {
				n = data.indexOf(this._rs, this._cur_idx);
				rs_len = this._rs.length;
			}

			if (n >= 0) {
				line = data.substring(this._cur_idx, n);
			}
			else {
				return false;
			}

			if (this._cur_dataset_id) {
				var cur_buffer_obj = this._datasets[this._cur_dataset_id];
				cur_buffer_obj._row_end_idx = this._cur_idx - rs_len;
			}

			var sep_pos = line.indexOf(":");
			if (sep_pos > 0) {
				var remoteId = line.substring(sep_pos + 1);
				if (remoteId && remoteId.length) {
					var buffer_obj = this._datasets[remoteId];
					if (buffer_obj) {
						buffer_obj._isEnable = true;
						this._cur_dataset_id = remoteId;

						buffer_obj._ds_start_idx = this._cur_idx;
						buffer_obj._ds_end_idx = this._cur_idx + n;
					}
					else {
						this._cur_dataset_id = "";
						this._parse_mode = 9;
					}
				}
			}

			this._cur_idx = n + rs_len;
			return true;
		};

		_pProgressData._parseColInfo = function (data) {
			var rs_len = 0;
			if (this._rs instanceof Array) {
				var rss = this._rs;
				var i;
				for (i = 0, n = rss.length; i < n; i++) {
					var rs = rss[i];
					n = data.indexOf(rs, this._cur_idx);
					if (n >= 0) {
						rs_len = this._rs[i].length;
						break;
					}
				}
			}
			else {
				n = data.indexOf(this._rs, this._cur_idx);
				rs_len = this._rs.length;
			}


			if (n > 0) {
				if (this._cur_dataset_id) {
					var buffer_obj = this._datasets[this._cur_dataset_id];
					if (buffer_obj._colinfo_start_idx < 0) {
						buffer_obj._colinfo_start_idx = this._cur_idx;
					}

					buffer_obj._colinfo_end_idx = n;
				}
			}
			else {
				this._parse_mode = 3;
				return false;
			}

			this._cur_idx = n + rs_len;

			return true;
		};

		_pProgressData._parseRecord = function (data) {
			var n = -1;
			var rs_len = 0;
			if (this._rs instanceof Array) {
				var rss = this._rs;
				var i;
				for (i = 0, n = rss.length; i < n; i++) {
					var rs = rss[i];
					n = data.indexOf(rs, this._cur_idx);
					if (n >= 0) {
						rs_len = rs.length;
						break;
					}
				}
			}
			else {
				n = data.indexOf(this._rs, this._cur_idx);
				rs_len = this._rs.length;
			}

			if (n < 0) {
				return false;
			}

			var buffer_obj;
			if (this._cur_dataset_id) {
				buffer_obj = this._datasets[this._cur_dataset_id];
				var firstcount = buffer_obj._firefirstcount;

				if (buffer_obj._row_start_idx < 0) {
					buffer_obj._row_start_idx = this._cur_idx;
				}

				if (this._data_type == "SSV" || this._data_type == "PPX") {
					var rowtype = data.charAt(this._cur_idx);
					if (rowtype != "d" || rowtype != "D") {
						buffer_obj._viewrecords_length++;
					}
				}
				else {
					buffer_obj._viewrecords_length++;
				}
			}

			this._cur_idx = n + rs_len;

			if (buffer_obj && buffer_obj._viewrecords_length == firstcount && firstcount > 0) {
				buffer_obj._firstrow_end_idx = n;
				return false;
			}

			return true;
		};


		_pProgressData._parse = function (data, bFinal) {
			var bLoop = true;
			var pre_parse_mode;
			var rows_buffer, buffer_obj, ds, lines, line_idx;

			while (bLoop) {
				pre_parse_mode = this._parse_mode;
				bLoop = this._setNextParseMode(data);
				if (pre_parse_mode == 2 && this._parse_mode != 2) {
					var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
					if (this._error_info[0] < 0 && type == "onsuccess") {
						bLoop = false;
					}
				}

				if (!bLoop) {
					break;
				}

				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						bLoop = this._parseHeader(data);
						break;
					case 2:
						bLoop = this._parseParameters(data);
						break;
					case 3:
						bLoop = this._parseDataset(data);
						break;
					case 4:
					case 5:
						bLoop = this._parseColInfo(data);
						break;
					case 6:
						bLoop = this._parseRecord(data);

						if (!bLoop) {
							var buffer_obj = this._datasets[this._cur_dataset_id];
							if (buffer_obj && buffer_obj._viewrecords_length == buffer_obj._firefirstcount && !buffer_obj._is_loaded_firstcount) {
								this._on_fire_onload(data, buffer_obj, 1);

								buffer_obj._is_loaded_firstcount = true;
								bLoop = true;
							}
						}
						break;
					case 9:
						break;
					case 10:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (!buffer_obj._isEnable) {
							continue;
						}

						this._on_fire_onload(data, buffer_obj, 0);
						buffer_obj._is_loaded = true;
						this._parse_mode = 9;
						break;
					default:
						break;
				}
			}

			if (bFinal) {
				for (var val in this._datasets) {
					buffer_obj = this._datasets[val];
					if (!buffer_obj._isEnable || buffer_obj._is_loaded) {
						if (!this._parent.bcache) {
							this._datasets[val] = null;
						}
						continue;
					}

					this._on_fire_onload(data, buffer_obj, 0);
					if (!this._parent.bcache) {
						this._datasets[val] = null;
					}
				}

				this._data_buffer = null;
			}
		};

		_pProgressData._on_fire_onload = function (data, bufferObj, nLoadType) {
			var ds = bufferObj._target_ds, buff;
			if (nLoadType == 1) {
				buff = data.slice(bufferObj._colinfo_start_idx, bufferObj._firstrow_end_idx);
			}
			else {
				if (bufferObj._row_end_idx < 0) {
					bufferObj._row_end_idx = data.length - 1;
				}

				buff = data.slice(bufferObj._colinfo_start_idx, bufferObj._row_end_idx);
			}

			var rs = (this._rs instanceof Array) ? this._rs.join("|") : this._rs;

			var lines = buff.split(new RegExp(rs));
			buff = null;

			ds.rowposition = -1;
			switch (this._data_type) {
				case "CSV":
					var colLine = lines[0];
					lines.splice(0, 1);
					line_idx = ds._loadFromCSVArray(colLine, lines, bufferObj._next_record_idx, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
					break;
				case "SSV":
					var colLines = ds._getColLinesFromSSVLines(lines, 0);
					lines.splice(0, colLines.length);
					line_idx = ds._loadFromSSVArray(colLines, lines, bufferObj._next_record_idx, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
					break;
				case "PPX":
					var colLines = ds._getColLinesFromPPXLines(lines, 0);
					lines.splice(0, colLines.length);
					line_idx = ds._loadFromPPXArray(colLines, lines, bufferObj._next_record_idx, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
					break;
				default:
					break;
			}
			bufferObj._is_first_load = false;

			if (nLoadType == 0 && !bufferObj._is_loaded_firstcount) {
				bufferObj._is_loaded_firstcount = true;
			}
			lines = null;

			if (ds.colinfos) {
				ds._reFilter();
				ds._resetSortGroup();
			}

			if (ds._eventstat) {
				ds.on_fire_onload(0, "", nLoadType);
				if (ds._viewRecords && ds._viewRecords.length > 0) {
					ds._forcesetRowPosition(0, 51);
				}
				else {
					ds._forcesetRowPosition(-1, 51);
				}
			}
			else if (ds._viewRecords && ds._viewRecords.length > 0) {
				ds.rowposition = 0;
			}

			bufferObj._next_record_idx = line_idx;
		};

		_pProgressData._parseConstColInfo = nexacro._emptyFn;
		_pProgressData._setNextParseMode = nexacro._emptyFn;

		delete _pProgressData;

		nexacro._ProgressDataCSV = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "CSV";

			this._rs = ["\r\n", "\n"];
			this._cs = ",";
		};

		var _pProgressDataCSV = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataCSV);
		nexacro._ProgressDataCSV.prototype = _pProgressDataCSV;

		_pProgressDataCSV._setNextParseMode = function (data) {
			var sec_type_max_len = 10;
			var sec = data.substr(this._cur_idx, sec_type_max_len).toUpperCase();

			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else if (sec.indexOf("DATASET") == 0) {
				this._parse_mode = 3;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						this._parse_mode = 2;
						break;
					case 2:
						break;
					case 3:
						this._parse_mode = 5;
						break;
					case 5:
						this._parse_mode = 6;
						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];

						if (buffer_obj._is_loaded_firstcount) {
							var buff = data.slice(this._cur_idx, data.length);
							var n = -1;
							var rss = this._rs;
							for (var i = 0, n = rss.length; i < n; i++) {
								var rs = rss[i];
								var regexp = new RegExp(rs + "dataset", "gi");
								n = buff.search(regexp);
								if (n >= 0) {
									break;
								}
							}

							if (n >= 0) {
								buffer_obj._row_end_idx = this._cur_idx + n;
								this._cur_idx += n + rs.length;
								this._parse_mode = 10;
							}
							else {
								this._cur_idx = data.length - 1;
								buffer_obj._row_end_idx = this._cur_idx - 1;
								return false;
							}
						}
						break;
					case 9:
						var buff = data.slice(this._cur_idx, data.length);
						var rss = this._rs;
						for (var i = 0, n = rss.length; i < n; i++) {
							var rs = rss[i];
							var regexp = new RegExp(rs + "dataset", "gi");
							n = buff.search(regexp);
							if (n >= 0) {
								break;
							}
						}

						if (n >= 0) {
							this._cur_idx += n + rs.length;
							this._parse_mode = 3;
						}
						else {
							return false;
						}
						break;
					default:
						return false;
				}
			}
			return true;
		};

		delete _pProgressDataCSV;

		nexacro._ProgressDataSSV = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "SSV";

			this._rs = String.fromCharCode(30);
			this._cs = String.fromCharCode(31);
		};

		var _pProgressDataSSV = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataSSV);
		nexacro._ProgressDataSSV.prototype = _pProgressDataSSV;

		_pProgressDataSSV._setNextParseMode = function (data) {
			var sec_type_max_len = 10;
			var sec = data.substr(this._cur_idx, sec_type_max_len).toUpperCase();

			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else if (sec.indexOf("DATASET") == 0) {
				this._parse_mode = 3;
			}
			else if (sec.indexOf("JSONOBJECT") == 0) {
				this._parse_mode = 7;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						this._parse_mode = 2;
						break;
					case 2:
						break;
					case 3:
						if (sec.indexOf("_CONST_") == 0) {
							this._parse_mode = 4;
						}
						else {
							this._parse_mode = 5;
						}
						break;
					case 4:
						this._parse_mode = 5;
						break;
					case 5:
						this._parse_mode = 6;
						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (buffer_obj._is_loaded_firstcount) {
							var buff = data.slice(this._cur_idx, data.length);
							var regexp = new RegExp(this._rs + "dataset", "gi");
							var n = buff.search(regexp);
							if (n >= 0) {
								buffer_obj._row_end_idx = this._cur_idx + n;
								this._cur_idx += n + this._rs.length;
								this._parse_mode = 10;
							}
							else {
								var data_len = data.length - 1;
								var last_index = data.lastIndexOf(this._rs);


								if (data_len != last_index) {
									this._cur_idx = last_index;
								}
								else {
									this._cur_idx = data_len;
								}
								return false;
							}
						}
						break;
					case 7:
						this._parse_mode = 8;
						break;
					case 8:
						break;
					case 9:
						var buff = data.slice(this._cur_idx, data.length);
						var regexp = new RegExp(this._rs + "dataset", "gi");
						var n = buff.search(regexp);
						if (n >= 0) {
							this._cur_idx += n + this._rs.length;
							this._parse_mode = 3;
						}
						else {
							this._cur_idx = data.length - 1;
							return false;
						}
						break;
					default:
						return false;
				}
			}
			return true;
		};

		delete _pProgressDataSSV;

		nexacro._ProgressDataPPX = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "PPX";

			this._rs = String.fromCharCode(30);
			this._cs = String.fromCharCode(31);
		};

		var _pProgressDataPPX = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataPPX);
		nexacro._ProgressDataPPX.prototype = _pProgressDataPPX;

		_pProgressDataPPX._parseParameters = function (data) {
			var line = "";
			var n = -1;

			n = data.indexOf(this._rs, this._cur_idx);

			if (n >= 0) {
				line = data.substring(this._cur_idx, n);
			}
			else {
				return false;
			}

			this._cur_idx = n + this._rs.length;

			var form = this._parent.context;
			var param_arr = line.split(this._cs);
			var id = param_arr[1];
			var val = param_arr[2];

			if (val == String.fromCharCode(3)) {
				val = undefined;
			}

			if (id == "ErrorCode") {
				code = parseInt(val) | 0;
				if (isFinite(code) == false) {
					val = -1;
				}
				else {
					val = code;
				}

				this._error_info[0] = val;
			}
			else if (id == "ErrorMsg") {
				this._error_info[1] = param_arr[2];
			}
			else if (id in form) {
				if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
					form[id] = val;
				}
			}
			else {
				if (application._existVariable(id)) {
					application.setVariable(id, val);
				}
			}

			this._parameters[this._parameters.length] = {
				id : id, 
				value : val
			};

			if (this._error_info[0] >= 0) {
				this._applyChange_inputDataset();
			}

			return true;
		};

		_pProgressDataPPX._parseDataset = function (data) {
			var line = "";

			var n = data.indexOf(this._rs, this._cur_idx);
			if (n > 0) {
				line = data.substring(this._cur_idx, n);
			}
			else {
				return false;
			}

			if (this._cur_dataset_id) {
				var cur_buffer_obj = this._datasets[this._cur_dataset_id];
				cur_buffer_obj._row_end_idx = this._cur_idx - this._rs.length;
			}

			var remoteId = line.split(this._cs)[1];
			if (remoteId && remoteId.length) {
				var buffer_obj = this._datasets[remoteId];
				if (buffer_obj) {
					buffer_obj._isEnable = true;
					this._cur_dataset_id = remoteId;

					buffer_obj._ds_start_idx = this._cur_idx;
					buffer_obj._ds_end_idx = this._cur_idx + n;
				}
				else {
					this._cur_dataset_id = "";
					this._parse_mode = 9;
				}
			}

			this._cur_idx = n + this._rs.length;
			return true;
		};

		_pProgressDataPPX._setNextParseMode = function (data) {
			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else if (data.charAt(this._cur_idx) == "D") {
				this._parse_mode = 3;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						this._parse_mode = 2;
						break;
					case 2:
						break;
					case 3:
					case 4:
					case 5:
						if (data.charAt(this._cur_idx) == "V") {
							this._parse_mode = 4;
						}
						else if (data.charAt(this._cur_idx) == "C") {
							this._parse_mode = 5;
						}
						else {
							this._parse_mode = 6;
						}
						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (buffer_obj._is_loaded_firstcount) {
							var buff = data.slice(this._cur_idx, data.length);
							var regexp = new RegExp(this._rs + "D", "gi");
							var n = buff.search(regexp);
							if (n >= 0) {
								buffer_obj._row_end_idx = this._cur_idx + n;
								this._cur_idx += n + this._rs.length;
								this._parse_mode = 10;
							}
							else {
								return false;
							}
						}
						break;
					case 9:
						var buff = data.slice(this._cur_idx, data.length);
						var regexp = new RegExp(this._rs + "D", "gi");
						var n = buff.search(regexp);
						if (n >= 0) {
							this._cur_idx += n + this._rs.length;
							this._parse_mode = 3;
						}
						else {
							this._cur_idx = data.length - 1;
							return false;
						}
						break;
					default:
						return false;
				}
			}

			return true;
		};

		delete _pProgressDataPPX;

		nexacro._ProgressDataXML = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "XML";

			this._rs = String.fromCharCode(30);
			this._cs = String.fromCharCode(31);

			this._parameters_start_idx = -1;
			this._parameters_end_idx = -1;

			this._parameters_tag = ["<Parameters>", "</Parameters>", "<Parameters/>"];
			this._dataset_tag = ["<Dataset", "</Dataset>", "<Dataset/>"];
			this._colinfo_tag = ["<ColumnInfo>", "</ColumnInfo>", "<ColumnInfo/>"];
			this._col_tag = ["<Col ", "</Col>", "<Col/>"];
			this._rows_tag = ["<Rows>", "</Rows>", "<Rows/>"];
			this._row_tag = ["<Row", "</Row>", "<Row/>"];
		};

		var _pProgressDataXML = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataXML);
		nexacro._ProgressDataXML.prototype = _pProgressDataXML;

		_pProgressDataXML._setNextParseMode = function (data) {
			var start_idx, end_idx;

			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						start_idx = data.indexOf(this._parameters_tag[0], this._cur_idx);

						if (start_idx > -1) {
							this._parameters_start_idx = start_idx;
							this._cur_idx = start_idx;

							var end_idx = data.indexOf(this._parameters_tag[1], this._cur_idx);

							if (end_idx > -1) {
								this._parameters_end_idx = end_idx + this._parameters_tag[1].length;
								this._cur_idx = end_idx + this._parameters_tag[1].length;
								this._parse_mode = 2;
							}
							else {
								return false;
							}
						}
						else {
							start_idx = data.indexOf(this._parameters_tag[2], this._cur_idx);

							if (start_idx > -1) {
								this._parameters_start_idx = start_idx;
								this._parameters_end_idx = start_idx + this._parameters_tag[2].length;
								this._cur_idx += this._parameters_tag[2].length;
							}

							this._parse_mode = 3;
						}
						break;
					case 2:
						start_idx = data.indexOf(this._dataset_tag[0], this._cur_idx);

						if (start_idx > -1) {
							this._parse_mode = 3;
						}
						else {
							return false;
						}

						break;
					case 3:
						start_idx = data.indexOf(this._colinfo_tag[0], this._cur_idx);

						if (start_idx > -1) {
							this._parse_mode = 5;
						}
						else {
							return false;
						}

						break;
					case 4:
					case 5:
						start_idx = data.indexOf(this._rows_tag[0], this._cur_idx);
						if (start_idx > -1) {
							this._cur_idx = start_idx + this._rows_tag[0].length;
							this._parse_mode = 6;
						}
						else {
							return false;
						}

						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (buffer_obj._is_loaded_firstcount) {
							start_idx = data.indexOf(this._dataset_tag[0], this._cur_idx);
							if (start_idx >= 0) {
								buffer_obj._row_end_idx = start_idx - 1;
								this._cur_idx = start_idx;
								this._parse_mode = 10;
							}
							else {
								return false;
							}
						}
						break;
					case 9:
						start_idx = data.indexOf(this._dataset_tag[0], this._cur_idx);
						if (start_idx > -1) {
							this._cur_idx = start_idx;
							this._parse_mode = 3;
						}
						else {
							this._cur_idx = data.length - 1;
							return false;
						}
						break;
					case 33:
						this._parse_mode = 3;
						break;
					default:
						return false;
				}
			}

			return true;
		};

		_pProgressDataXML._parseHeader = function (data) {
			return true;
		};

		_pProgressDataXML._parseParameters = function (data) {
			var form = this._parent.context;

			var parameter_str = data.slice(this._parameters_start_idx, this._parameters_end_idx);
			var params_info = nexacro._getXMLTagData(parameter_str, 0, "<Parameters>", "</Parameters>");

			if (params_info) {
				var paramsData = params_info[0];
				var param_parse_pos = 0;

				var varInfo = nexacro._getXMLTagData2(paramsData, param_parse_pos, "<Parameter ", "</Parameter>");
				while (varInfo) {
					param_parse_pos = varInfo[3];
					var attrStr = varInfo[1];
					var id = nexacro._getXMLAttributeID(attrStr);
					if (id && id.length) {
						var val = varInfo[0];

						if (id == "ErrorCode") {
							var code = parseInt(val) | 0;
							if (isFinite(code) == false) {
								val = -1;
							}
							else {
								val = code;
							}

							this._error_info[0] = val;
						}
						else if (id == "ErrorMsg") {
							val = nexacro._decodeXml(val);
							this._error_info[1] = val;
						}
						else if (id in form) {
							if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
								val = nexacro._decodeXml(val);

								if (form._is_application && application._existVariable(id)) {
									application.setVariable(id, val);
								}
								else {
									form[id] = val;
								}
							}
						}
						else {
							if (application._existVariable(id)) {
								val = nexacro._decodeXml(val);
								application.setVariable(id, val);
							}
						}

						this._parameters[this._parameters.length] = {
							id : id, 
							value : val
						};
					}
					varInfo = nexacro._getXMLTagData2(paramsData, param_parse_pos, "<Parameter ", "</Parameter>");
				}
			}

			if (this._error_info[0] >= 0) {
				this._applyChange_inputDataset();
			}

			return true;
		};

		_pProgressDataXML._parseDataset = function (data) {
			var start_idx = data.indexOf(this._dataset_tag[0], this._cur_idx);

			if (start_idx < 0) {
				this._parse_mode = 9;
				return false;
			}

			var end_idx = data.indexOf(">", start_idx);

			if (end_idx > -1) {
				var attstr = data.slice(start_idx, end_idx + 1);
				var remoteId = nexacro._getXMLAttributeData(attstr, "id");

				if (this._cur_dataset_id) {
					var cur_buffer_obj = this._datasets[this._cur_dataset_id];
					cur_buffer_obj._row_end_idx = this._cur_idx;
				}

				if (remoteId && remoteId.length) {
					var buffer_obj = this._datasets[remoteId];
					if (buffer_obj) {
						buffer_obj._isEnable = true;
						this._cur_dataset_id = remoteId;

						buffer_obj._ds_start_idx = start_idx;
						buffer_obj._ds_end_idx = end_idx + 1;
					}
					else {
						this._cur_dataset_id = "";
						this._parse_mode = 9;
					}
				}

				this._cur_idx = end_idx + 1;
			}
			else {
				this._parse_mode = 9;
				return false;
			}

			return true;
		};

		_pProgressDataXML._parseColInfo = function (data) {
			var start_idx = data.indexOf(this._colinfo_tag[0], this._cur_idx);

			if (start_idx < 0) {
				return false;
			}

			var end_idx = data.indexOf(this._colinfo_tag[1], start_idx);

			if (end_idx > 0) {
				if (this._cur_dataset_id) {
					var buffer_obj = this._datasets[this._cur_dataset_id];
					if (buffer_obj._colinfo_start_idx < 0) {
						buffer_obj._colinfo_start_idx = start_idx;
					}

					buffer_obj._colinfo_end_idx = end_idx + 1;
				}
			}
			else {
				this._parse_mode = 3;
				return false;
			}

			this._cur_idx = end_idx + 1;

			return true;
		};


		_pProgressDataXML._parseRecord = function (data) {
			var start_idx = data.indexOf(this._row_tag[0], this._cur_idx);
			var end_idx;

			var next_ds_start_idx = data.indexOf(this._dataset_tag[0], this._cur_idx);

			if (next_ds_start_idx > -1 && start_idx > next_ds_start_idx) {
				this._parse_mode = 33;
				return true;
			}

			if (start_idx < 0) {
				start_idx = data.indexOf(this._row_tag[2], this._cur_idx);

				if (start_idx > -1) {
					end_idx = start_idx + this._row_tag[2].length;
				}
				else {
					return false;
				}
			}
			else {
				end_idx = data.indexOf(this._row_tag[1], start_idx);

				if (end_idx > -1) {
					end_idx += this._row_tag[1].length;
				}
				else {
					return false;
				}
			}

			var buffer_obj;
			if (this._cur_dataset_id) {
				buffer_obj = this._datasets[this._cur_dataset_id];
				var firstcount = buffer_obj._firefirstcount;

				if (buffer_obj._row_start_idx < 0) {
					buffer_obj._row_start_idx = start_idx;
				}

				var attr_end_idx = data.indexOf(">", start_idx);
				var attstr = data.slice(start_idx, attr_end_idx + 1);

				var type = nexacro._getXMLAttributeType(attstr);
				if (type) {
					var typeChar = type.charAt(0);
					if (!(typeChar == "d" || typeChar == "D")) {
						buffer_obj._viewrecords_length++;
					}
				}
				else {
					buffer_obj._viewrecords_length++;
				}
			}

			this._cur_idx = end_idx;

			if (buffer_obj && buffer_obj._viewrecords_length == firstcount && firstcount > 0) {
				buffer_obj._firstrow_end_idx = end_idx;
				return false;
			}

			return true;
		};

		_pProgressDataXML._on_fire_onload = function (data, bufferObj, nLoadType) {
			var ds = bufferObj._target_ds;
			var xml_str;

			if (nLoadType == 1) {
				xml_str = data.slice(bufferObj._colinfo_start_idx, bufferObj._firstrow_end_idx);
			}
			else {
				if (bufferObj._row_end_idx < 0) {
					bufferObj._row_end_idx = data.length - 1;
				}
				xml_str = data.slice(bufferObj._colinfo_start_idx, bufferObj._row_end_idx);
			}

			ds.rowposition = -1;
			var xml_parse_pos = ds._loadFromXMLStr(xml_str, bufferObj._next_record_idx, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
			bufferObj._is_first_load = false;

			if (ds.colinfos) {
				ds._reFilter();
				ds._resetSortGroup();
			}

			if (ds._eventstat) {
				ds.on_fire_onload(0, "", nLoadType);

				if (ds._viewRecords && ds._viewRecords.length > 0) {
					ds._forcesetRowPosition(0, 51);
				}
				else {
					ds._forcesetRowPosition(-1, 51);
				}
			}
			else if (ds._viewRecords && ds._viewRecords.length > 0) {
				ds.rowposition = 0;
			}

			bufferObj._next_record_idx = xml_parse_pos;
		};

		delete _pProgressDataXML;

		if (nexacro.Browser != "IE") {
			nexacro._parseXMLDocument = function (str) {
				return (new DOMParser()).parseFromString(str, "text/xml");
			};
			nexacro._documentToXml = function (xmldoc) {
				return (new XMLSerializer()).serializeToString(xmldoc);
			};

			if (nexacro.Browser == "Gecko") {
				nexacro._getParserError = function (xmldoc) {
					var node = xmldoc.documentElement;
					if (node.nodeName == "parsererror") {
						var msg = "", desc = "";

						var childs = node.childNodes;
						msg = nexacro._decodeXml(childs[0].nodeValue);
						desc = childs[1].textContent;

						return {
							"line" : undefined, 
							"column" : undefined, 
							"message" : msg, 
							"desc" : desc
						};
					}
					return null;
				};
			}
			else {
				nexacro._getParserError = function (xmldoc) {
					var errors = xmldoc.getElementsByTagName("parsererror");
					if (errors.length > 0) {
						var msg = "";
						var node = errors[0].firstChild;
						while (node) {
							if (node.nodeName == "div") {
								msg = node.textContent;
								break;
							}
							node = node.nextSibling;
						}
						return {
							"line" : undefined, 
							"column" : undefined, 
							"message" : msg, 
							"desc" : ""
						};
					}
					return null;
				};
			}
		}
		else {
			nexacro._getXmlDom = function () {
				var xmlDomProgIDs;
				if (nexacro.BrowserVersion <= 8) {
					xmlDomProgIDs = ["Microsoft.XmlDom", "MSXML2.DOMDocument", "MSXML2.DOMDocument.3.0", "MSXML2.DOMDocument.6.0", "MSXML2.DOMDocument.5.0", "MSXML2.DOMDocument.4.0"];
				}
				else {
					xmlDomProgIDs = ["MSXML2.DOMDocument", "MSXML2.DOMDocument.3.0", "MSXML2.DOMDocument.6.0", "MSXML2.DOMDocument.5.0", "MSXML2.DOMDocument.4.0", "Microsoft.XmlDom"];
				}

				for (var i = 0, n = xmlDomProgIDs.length; i < n; i++) {
					try {
						var progObj = new ActiveXObject(xmlDomProgIDs[i]);
						return progObj;
					}
					catch (e) {
					}
				}
				return null;
			};
			nexacro._getXmlParser = function () {
				var xmlDomProgIDs = ['Microsoft.XMLHTTP', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.5.0', 'MSXML2.XMLHTTP.6.0'];

				for (var i = xmlDomProgIDs.length - 1; i >= 0; i--) {
					try {
						var progObj = new ActiveXObject(xmlDomProgIDs[i]);
						return progObj;
					}
					catch (e) {
					}
				}
				return null;
			};

			nexacro._parseXMLDocument = function (str) {
				try {
					var XMLDom = nexacro._getXmlDom();
					XMLDom.async = false;
					XMLDom.loadXML(str);
					return XMLDom;
				}
				catch (e) {
					return (new DOMParser()).parseFromString(str, "text/xml");
				}
			};
			nexacro._documentToXml = function (document) {
				try {
					return document.xml;
				}
				catch (e) {
					return (new XMLSerializer()).serializeToString(xmldoc);
				}
			};

			nexacro._getParserError = function (xmldoc) {
				var error = xmldoc.parseError;
				if (error && error.errorCode != 0) {
					var infos = ["Error on line ", error.line, " at column ", error.linepos, ": ", error.errorCode, " ", error.reason];

					var msg = infos.join('');
					var desc = error.srcText || "";

					return {
						"line" : error.line, 
						"column" : error.linepos, 
						"message" : msg, 
						"desc" : desc
					};
				}
				else {
					var errors = xmldoc.getElementsByTagName("parsererror");
					if (errors.length > 0) {
						var msg = "";
						var node = errors[0].firstChild;
						while (node) {
							if (node.nodeName == "div") {
								msg = node.textContent;
								break;
							}
							node = node.nextSibling;
						}
					}
					return {
						"line" : undefined, 
						"column" : undefined, 
						"message" : msg, 
						"desc" : ""
					};
				}
				return null;
			};
		}

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
			(function () {
				var re_newline = /\r\n|\n/;

				nexacro.__toInnerHTMLText = function (text) {
					return text.split("&").join("&amp;").split("\"").join("&quot;").split("'").join("&#39;").replace("<", "&lt;").split(">").join("&gt;").split(re_newline).join("<br/>");
				};
			})();
		}
		else if (nexacro.Browser == "Gecko") {
			(function () {
				var re_special = /[&"'\<\>]/g;
				var re_newline = /\r\n|\n/g;
				var _map = {
					"&" : "&amp;", 
					"'" : "&#39;", 
					'"' : "&quot;", 
					"<" : "&lt;", 
					">" : "&gt;"
				};
				function _replaceEntity (chr) {
					return _map[chr];
				}

				nexacro.__toInnerHTMLText = function (text) {
					return text.replace(re_special, _replaceEntity).replace(re_newline, "<br/>");
				};
			})();
		}
		else {
			(function () {
				var re_amp = /&/g;
				var re_apos = /'/g;
				var re_quot = /"/g;
				var re_lt = /</g;
				var re_gt = />/g;
				var re_newline = /\r\n|\n|\r/g;

				nexacro.__toInnerHTMLText = function (text) {
					return text.replace(re_amp, "&amp;").replace(re_apos, "&#39;").replace(re_quot, "&quot;").replace(re_lt, "&lt;").replace(re_gt, "&gt;").replace(re_newline, "<br/>");
				};
			})();
		}

		nexacro._convertDecorateString = function (str) {
			var tempstr = str;
			var expPrefixMap = [/<\/?ff\s+[v]\s*=(\'|\")/g, /<\/?fs\s+[v]\s*=(\'|\")/g, /<\/?fc\s+[v]\s*=(\'|\")/g, /<\/?b\s+[v].*?>/g, /<\/?i\s+[v].*?>/g, /<\/?u\s+[v].*?>/g, /<\/?s\s+[v].*?>/g, /<\/?l\s+[v]\s*=(\'|\")/g];
			var expSufixMap = [/<\/ff>/g, /<\/fs>/g, /<\/fc>/g, /<\/b>/g, /<\/i>/g, /<\/u>/g, /<\/s>/g, /<\/l>/g];
			var bunderline = false;
			var n = expPrefixMap.length;
			var preexp, sufexp, preexec, sufexec;
			var startidx, endidx;
			var starttag, endtag;
			var bcontain = false;

			for (var i = 0; i <= n - 1; i++) {
				preexp = expPrefixMap[i];
				sufexp = expSufixMap[i];

				preexec = preexp.exec(tempstr);
				sufexec = sufexp.exec(tempstr);
				if (preexec || sufexec) {
					starttag = preexec ? preexec[0] : null;
					endtag = sufexec ? sufexec[0] : null;

					switch (i) {
						case 0:
							tempstr = tempstr.replace(starttag, "<span style=\"font-family:").replace(/(\'|\")>/, "\">").replace(endtag, "</span>");
							bcontain = true;
							break;
						case 1:
							tempstr = tempstr.replace(starttag, "<span style=\"font-size:").replace(/(\'|\")>/, "pt\">").replace(endtag, "</span>");
							bcontain = true;
							break;
						case 2:
							tempstr = tempstr.replace(starttag, "<span style=\"color:").replace(/(\'|\")>/, "\">").replace(endtag, "</span>");
							startidx = tempstr.indexOf("\"color:");
							startidx = startidx > -1 ? startidx + 6 : startidx;
							endidx = tempstr.indexOf("\">");
							var colorstr = tempstr.substring(startidx + 1, endidx);
							tempstr = tempstr.replace(colorstr, nexacro._getWebColorFromXreColor(colorstr));
							bcontain = true;
							break;
						case 3:
							if (starttag && starttag.indexOf("false") < 0) {
								tempstr = tempstr.replace(starttag, "<b>");
							}
							else {
								tempstr = tempstr.replace(starttag, "").replace(endtag, "</b>");
							}
							bcontain = true;
							break;
						case 4:
							if (starttag && starttag.indexOf("false") < 0) {
								tempstr = tempstr.replace(starttag, "<i>");
							}
							else {
								tempstr = tempstr.replace(starttag, "").replace(endtag, "</i>");
							}
							bcontain = true;
							break;
						case 5:
							if (starttag && starttag.indexOf("false") < 0) {
								tempstr = tempstr.replace(starttag, "<u>");
								bunderline = true;
							}
							else {
								tempstr = tempstr.replace(starttag, "<u style='text-decoration:none'>").replace(endtag, "</u>");
								bunderline = false;
							}
							bcontain = true;
							break;
						case 6:
							if (starttag && starttag.indexOf("false") < 0) {
								tempstr = tempstr.replace(starttag, "<s>");
							}
							else {
								tempstr = tempstr.replace(starttag, "<s style='text-decoration:none'>").replace(endtag, "</s>");
							}
							bcontain = true;
							break;
						case 7:
							if (tempstr.indexOf("tel:") < 0 && tempstr.indexOf("mailto:") < 0) {
								if (!bunderline) {
									tempstr = tempstr.replace(starttag, "<a style='text-decoration:none;' target=\"_blank\" href=\"");
								}
								else {
									tempstr = tempstr.replace(starttag, "<a target=\"_blank\" href=\"");
								}

								tempstr = tempstr.replace("\'>", "\">").replace(endtag, "</a>");
							}
							else {
								if (tempstr.indexOf("tel:") >= 0) {
									tempstr = tempstr.replace(starttag, "<span v=\"").replace("\'>", "\">").replace(endtag, "</span>");
								}
								else {
									if (!bunderline) {
										tempstr = tempstr.replace(starttag, "<a style='text-decoration:none;' href=\"");
									}
									else {
										tempstr = tempstr.replace(starttag, "<a href=\"");
									}

									tempstr = tempstr.replace("\'>", "\">").replace(endtag, "</a>");
								}
							}
							bcontain = true;
							break;
						default:
							break;
					}
				}
			}

			if (!bcontain) {
				tempstr = nexacro.__toInnerHTMLText(tempstr);
			}
			else {
				tempstr = tempstr.replace(/\&lt;/g, "&amp;lt;").replace(/\&gt;/g, "&amp;gt;").replace(/\&quot;/g, "&amp;quot;").replace(/\&apos;/g, "&amp;apos;");
			}
			return tempstr;
		};

		nexacro._decorateString = function (str) {
			if (!str) {
				return "";
			}

			var temp = "", strmidtemp = "", strtemp = "", tempchar, idx;
			var arr = str.split("<");
			var len = arr.length;
			if (len > 0) {
				strtemp = "";
				for (var i = 0; i < len; i++) {
					temp = arr[i];
					idx = str.indexOf(temp);
					if (idx > 0) {
						tempchar = str.charAt(idx - 1);
						if (tempchar == "<") {
							temp = "<" + temp;
						}
					}

					if (temp.indexOf(">") >= 0) {
						temp = nexacro._convertDecorateString(temp);
					}

					strtemp += temp;
				}
			}
			return strtemp;
		};




		nexacro._unDecorateString = function (text) {
			var strtemp = text;

			var expPrefixMap = [/<\/?ff\s+[v]\s*=(\'|\").*?>/g, /<\/?fs\s+[v]\s*=(\'|\").*?>/g, /<\/?fc\s+[v]\s*=(\'|\").*?>/g, /<\/?b\s+[v].*?>/g, /<\/?i\s+[v].*?>/g, /<\/?u\s+[v].*?>/g, /<\/?s\s+[v].*?>/g, /<\/?l\s+[v]\s*=(\'|\").*?>/g];
			var expSufixMap = [/<\/ff>/g, /<\/fs>/g, /<\/fc>/g, /<\/b>/g, /<\/i>/g, /<\/u>/g, /<\/s>/g, /<\/l>/g];

			for (var i = 0, n = expPrefixMap.length; i <= n - 1; i++) {
				var idx = 0;
				var preexp = expPrefixMap[i];
				var sufexp = expSufixMap[i];
				var preexec = preexp.exec(strtemp);

				while (preexec) {
					var sufexec = sufexp.exec(strtemp);
					if (!sufexec) {
						break;
					}

					var startidx = preexec.index;
					var endidx = sufexp.lastIndex;

					var frontstr = strtemp.substring(0, startidx);
					var endstr = strtemp.substring(endidx, strtemp.length);
					var changestr = strtemp.substring(startidx, endidx);


					if (startidx > endidx) {
						break;
					}

					changestr = changestr.replace(preexec[0], "");
					if (sufexec[0]) {
						changestr = changestr.replace(sufexec[0], "");
					}

					strtemp = frontstr + changestr + endstr;

					preexp.lastIndex = 0;
					sufexp.lastIndex = 0;
					preexec = preexp.exec(strtemp);


					if (preexec) {
						sufexp.lastIndex = preexp.lastIndex;
					}
				}
			}
			return strtemp;
		};


		nexacro._checkDecorateString = function (text) {
			var strtemp = text;

			var preexp = null;
			var expPrefixMap = [/<\/?ff\s+[v]\s*=(\'|\").*?>/g, /<\/?fs\s+[v]\s*=(\'|\").*?>/g, /<\/?fc\s+[v]\s*=(\'|\").*?>/g, /<\/?b\s+[v].*?>/g, /<\/?i\s+[v].*?>/g, /<\/?u\s+[v].*?>/g, /<\/?s\s+[v].*?>/g, /<\/?l\s+[v]\s*=(\'|\").*?>/g];
			for (var i = 0, n = expPrefixMap.length; i <= n - 1; i++) {
				preexp = expPrefixMap[i];
				if (preexp.exec(strtemp)) {
					return true;
				}
			}
			return false;
		};

		nexacro._quoteStr = function (str) {
			if (/[\r\n\"\t]/.test(str)) {
				return "\"" + str.replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\"/g, "\\\"") + "\"";
			}
			else if (/[,\']/.test(str)) {
				return "\"" + str + "\"";
			}
			else {
				return str;
			}
		};
		nexacro._unQuoteStr = function (str) {
			if (str.charAt(0) != "\"" && str.charAt(0) != "\'") {
				return str;
			}
			else if (str.indexOf("\\") >= 0) {
				str = str.replace(/\\r/g, "\r").replace(/\\n/g, "\n").replace(/\\t/g, "\t").replace(/\\/g, "");
				return str.substring(1, str.length - 1);
			}
			else {
				return str.substring(1, str.length - 1);
			}
		};

		if (nexacro.checkDocument.hasGetBoundingClientRect) {
			if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
				nexacro._getElementXYInWindow = function (node, id) {
					var point_x, point_y;
					var _doc = (node.ownerDocument || node.document);
					var doc_elem = _doc.documentElement;
					var body = id ? _doc.getElementById(id) : _doc.body;
					var box = node.getBoundingClientRect();
					point_x = Math.round(box.left) - doc_elem.clientLeft;
					point_y = Math.round(box.top) - doc_elem.clientTop;

					var docBox = body.getBoundingClientRect();
					var physicalW = docBox.right - docBox.left;
					var logicalW = body.offsetWidth;
					if (physicalW != logicalW) {
						var factor = Math.round((physicalW / logicalW) * 100) / 100;
						point_x = Math.round(point_x / factor);
						point_y = Math.round(point_y / factor);
					}

					return [point_x, point_y];
				};
			}
			else {
				nexacro._getElementXYInWindow = function (node) {
					var point_x, point_y;

					if (nexacro._allow_default_pinchzoom) {
						if (!node) {
							return [0, 0];
						}
						var _doc = (node.ownerDocument || node.document);
						var elem_pos = nexacro.__getHTMLNodePositionInFrame(_doc, node);
						if (elem_pos) {
							return [elem_pos.x, elem_pos.y];
						}
					}

					if (node) {
						var box = node.getBoundingClientRect();
						point_x = Math.round(box.left);
						point_y = Math.round(box.top);
					}
					else {
						trace("error (nexacro._getElementXYInWindow)");
					}

					return [point_x, point_y];
				};
			}
		}
		else {
			nexacro._getElementXYInWindow = function (node) {
				var point_x = 0, point_y = 0;
				point_x += node.offsetLeft;
				point_y += node.offsetTop;

				var pnode = node.offsetParent;
				while (pnode) {
					point_x += (pnode.offsetLeft + (pnode.clientLeft | 0) - pnode.scrollLeft);
					point_y += (pnode.offsetTop + (pnode.clientTop | 0) - pnode.scrollTop);
					pnode = pnode.offsetParent;
				}

				var doc_elem = document.documentElement;
				point_x += doc_elem.scrollLeft;
				point_y += doc_elem.scrollTop;

				return [point_x, point_y];
			};
		}
		nexacro._getElementPositionInFrame = function (elem) {
			var node = elem._handle;
			if (!node) {
				return {
					x : 0, 
					y : 0
				};
			}

			var _doc = (node.ownerDocument || node.document);
			return nexacro.__getHTMLNodePositionInFrame(_doc, node);
		};

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "MobileSafari") {
			nexacro._getBoundingClientRect = function (node) {
				var box, x = 0, y = 0, border = 0;
				var comp = node._linked_element.linkedcontrol;

				if (comp && comp.visible === false) {
					node.style.display = "";
					node.style.visibility = "hidden";
					box = node.getBoundingClientRect();
					node.style.visibility = "";
					node.style.display = "none";
				}
				else {
					box = node.getBoundingClientRect();
				}
				return box;
			};
		}
		else {
			nexacro._getBoundingClientRect = function (node) {
				return node.getBoundingClientRect();
			};
		}

		nexacro.__getHTMLNodePositionInFrame = function (_doc, node, id) {
			var p = {
				x : 0, 
				y : 0
			};
			if (!_doc || !node) {
				return p;
			}

			if (nexacro.checkDocument.hasGetBoundingClientRect) {
				var box = nexacro._getBoundingClientRect(node);
				p.x = box.left + (_doc.scrollLeft || _doc.body.scrollLeft || _doc.documentElement.scrollLeft);
				p.y = box.top + (_doc.scrollTop || _doc.body.scrollTop || _doc.documentElement.scrollTop);

				var pt = nexacro.__adjustBoundingClientRect(_doc);
				p.x -= pt[0];
				p.y -= pt[1];

				p.x = Math.round(p.x);
				p.y = Math.round(p.y);
			}
			else {
				if (nexacro.checkDocument.hasGetBoxObjectFor) {
					var box = _doc.getBoxObjectFor(node);
					p.x = box.x;
					p.y = box.y;
					var style = _doc.defaultView.getComputedStyle(node, "");
					p.x -= parseInt(style.borderLeftWidth) | 0;
					p.y -= parseInt(style.borderTopWidth) | 0;
					node = node.parentNode;
					while (node.nodeType == 1) {
						p.x -= node.scrollLeft;
						p.y -= node.scrollTop;
						node = node.parentNode;
					}
				}
				else {
					p.x = node.offsetLeft;
					p.y = node.offsetTop;
					var pnode = node.offsetParent;
					while (pnode) {
						p.x += pnode.offsetLeft;
						p.y += pnode.offsetTop;
						pnode = pnode.offsetParent;
					}
					var body = id ? _doc.getElementById(id) : (_doc.body || _doc.getElementsByTagName("body")[0]);
					node = node.parentNode || body;
					while (node.nodeType == 1 && node != body) {
						p.x -= node.scrollLeft;
						p.y -= node.scrollTop;
						node = node.parentNode;
					}
				}
			}
			return p;
		};

		if (nexacro.Browser == "IE") {
			nexacro._getElementScreenPosition = function (elem) {
				var _handle = elem._handle;
				if (_handle) {
					var _doc = _handle.ownerDocument || _handle.document;
					var p = nexacro.__getHTMLNodePositionInFrame(_doc, _handle);

					var win = _doc.parentWindow;
					p.x += win.screenLeft;
					p.y += win.screenTop;

					return p;
				}
				return {
					x : 0, 
					y : 0
				};
			};
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro._getElementScreenPosition = function (elem) {
				var _handle = elem._handle;
				if (_handle) {
					var _doc = _handle.ownerDocument || _handle.document;
					var p = nexacro.__getHTMLNodePositionInFrame(_doc, _handle);

					var win = _doc.defaultView;
					p.x += win.mozInnerScreenX;
					p.y += win.mozInnerScreenY;

					return p;
				}
				return {
					x : 0, 
					y : 0
				};
			};
		}
		else {
			nexacro._getElementScreenPosition = function (elem) {
				var _handle = elem._handle;
				if (_handle) {
					var _doc = _handle.ownerDocument || _handle.document;
					var p = nexacro.__getHTMLNodePositionInFrame(_doc, _handle);

					var win = _doc.defaultView;
					if (win) {
						var ratio = win.devicePixelRatio ? win.devicePixelRatio : 1;

						if (ratio > 1) {
							p.x = (p.x + win.screenLeft / ratio);
							p.y = (p.y + win.screenTop / ratio);
						}
						else {
							p.x += nexacro._gap_client_width;
							p.y += nexacro._gap_client_height;
						}
					}

					return p;
				}
				return {
					x : 0, 
					y : 0
				};
			};
		}

		nexacro.__getHTMLElementPosition = function (node, id) {
			var top = 0;
			var left = 0;
			var skipTd = false;
			while (node.parentNode && node != (id ? window.document.getElementById(id) : window.document.body)) {
				var nodetagname = node.tagName;
				if (skipTd && nodetagname == "TABLE") {
					skipTd = false;
				}
				if ((skipTd && nodetagname == "TD") || nodetagname == "TR" || nodetagname == "TBODY") {
					node = node.parentNode;
					continue;
				}

				var node_style = node.style;
				if (node_style.position == "absolute") {
					skipTd = true;
				}

				left -= (node.scrollLeft | 0);
				top -= (node.scrollTop | 0);
				var borderWidth = (node_style.borderLeftWidth | 0);
				var borderHeight = (node_style.borderTopWidth | 0);
				if ((nexacro.Browser == "Gecko" || nexacro.Browser == "KHTML") && node.tagName != "TABLE") {
					left += borderWidth * 2;
					top += borderWidth * 2;
				}
				else if (nexacro.Browser == "IE" || nexacro.Browser == "WebKit") {
					top += borderWidth;
					left += borderWidth;
				}
				top += (node.offsetTop | 0);
				left += (node.offsetLeft | 0);
				node = node.parentNode;
			}
			return {
				top : top, 
				left : left
			};
		};

		nexacro.__getHTMLPageSize = function () {
			var xScroll, yScroll;
			if (window.innerHeight && window.scrollMaxY) {
				xScroll = document.body.scrollWidth;
				yScroll = window.innerHeight + window.scrollMaxY;
			}
			else {
				if (document.body.scrollHeight > document.body.offsetHeight) {
					xScroll = document.body.scrollWidth;
					yScroll = document.body.scrollHeight;
				}
				else {
					if (document.documentElement && document.documentElement.scrollHeight > document.documentElement.offsetHeight) {
						xScroll = document.documentElement.scrollWidth;
						yScroll = document.documentElement.scrollHeight;
					}
					else {
						xScroll = document.body.offsetWidth;
						yScroll = document.body.offsetHeight;
					}
				}
			}
			var windowWidth, windowHeight;
			if (self.innerHeight) {
				windowWidth = self.innerWidth;
				windowHeight = self.innerHeight;
			}
			else {
				if (document.documentElement && document.documentElement.clientHeight) {
					windowWidth = document.documentElement.clientWidth;
					windowHeight = document.documentElement.clientHeight;
				}
				else {
					if (document.body) {
						windowWidth = document.body.clientWidth;
						windowHeight = document.body.clientHeight;
					}
				}
			}
			if (yScroll < windowHeight) {
				pageHeight = windowHeight;
			}
			else {
				pageHeight = yScroll;
			}
			if (xScroll < windowWidth) {
				pageWidth = windowWidth;
			}
			else {
				pageWidth = xScroll;
			}
			return [pageWidth, pageHeight, windowWidth, windowHeight];
		};


		nexacro.__findParentElement = function (node) {
			if (node) {
				while (node) {
					var elem = node._linked_element;
					if (elem) {
						return elem;
					}
					node = node.parentNode;
				}
			}
			return;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__findParentElementForKeyEvent = function (node, win) {
				var active_node = win._dest_doc.activeElement;
				if (active_node.tagName == "OBJECT") {
					win._last_focused_elem = null;
				}

				if (win && win._last_focused_elem) {
					var focused_elem = win._last_focused_elem;
					if (!focused_elem.visible || focused_elem._handle == null) {
						win._last_focused_elem = null;
					}
					else {
						return win._last_focused_elem;
					}
				}

				return nexacro.__findParentElement(node);
			};
		}
		else {
			nexacro.__findParentElementForKeyEvent = function (node, win) {
				if (win && win._last_focused_elem) {
					var focused_elem = win._last_focused_elem;
					if (!focused_elem.visible || focused_elem._handle == null) {
						win._last_focused_elem = null;
					}
					else {
						return win._last_focused_elem;
					}
				}

				return nexacro.__findParentElement(node);
			};
		}

		nexacro.__getWheelDelta = nexacro.__getWheelDeltaY;

		if (nexacro.Browser == "Gecko") {
			nexacro.__getWheelDeltaX = function (e) {
				if (e.axis === 2) {
					var wheel_deltax = 0;
				}
				else {
					var wheel_deltax = -40 * e.detail;
				}
				return wheel_deltax;
			};

			nexacro.__getWheelDeltaY = function (e) {
				if (e.axis === 2) {
					var wheel_deltay = -40 * e.detail;
				}
				else {
					var wheel_deltay = 0;
				}
				return wheel_deltay;
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__getWheelDeltaX = function (e) {
				return 0;
			};

			nexacro.__getWheelDeltaY = function (e) {
				return e.wheelDelta;
			};
		}
		else {
			nexacro.__getWheelDeltaX = function (e) {
				return e.wheelDeltaX;
			};

			nexacro.__getWheelDeltaY = function (e) {
				return e.wheelDeltaY;
			};
		}

		if (nexacro.BrowserType != "Edge" && nexacro.Browser != "IE") {
			nexacro._getSysEventElement = function (sysevt) {
				var node = sysevt.target;
				return (node) ? nexacro.__findParentElement(node) : null;
			};
			nexacro._getSysEventKey = function (sysevt) {
				return sysevt.charCode || sysevt.keyCode;
			};

			if (nexacro.Browser == "Gecko") {
				nexacro._getSysEventKeyCode = function (sysevt) {
					var k = sysevt.keyCode;
					return ((k > 0 && k <= 46) ? k : sysevt.charCode == 0 ? k : sysevt.charCode);
				};
			}
			else {
				nexacro._getSysEventKeyCode = function (sysevt) {
					return sysevt.keyCode;
				};
			}

			nexacro._getSysEventX = function (sysevt) {
				return sysevt.pageX + document.body.scrollLeft;
			};
			nexacro._getSysEventY = function (sysevt) {
				return sysevt.pageY + document.body.scrollTop;
			};

			nexacro._getSysEventBtnCode = function (sysevt, code) {
				return sysevt.which ? (sysevt.which - 1) : (sysevt.button);
			};


			nexacro._stopSysEvent = function (sysevt) {
				sysevt.preventDefault();
				sysevt.stopPropagation();
				sysevt.stopped = true;
				return false;
			};

			nexacro._stopPropagation = function (sysevt) {
				sysevt.stopPropagation();
				return false;
			};

			nexacro._observeSysEvent = function (node, name, onname, callback) {
				if (((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion >= 56)
					 || (nexacro.OS == "iOS" && nexacro._num_osversion >= 11) || nexacro.Browser == "Gecko") {
					node.addEventListener(name, callback, {
						passive : false, 
						capture : false
					});
				}
				else {
					node.addEventListener(name, callback, false);
				}
			};
			nexacro._stopSysObserving = function (node, name, onname, callback) {
				node.removeEventListener(name, callback, false);
				callback = null;
			};
		}
		else {
			nexacro._getSysEventElement = function (sysevt) {
				var node = sysevt.srcElement;
				return node ? nexacro.__findParentElement(node) : null;
			};
			nexacro._getSysEventKey = function (sysevt) {
				return sysevt.charCode || sysevt.keyCode;
			};
			nexacro._getSysEventKeyCode = function (sysevt) {
				return sysevt.keyCode;
			};

			nexacro._getSysEventX = function (sysevt) {
				return sysevt.clientX + document.body.scrollLeft;
			};
			nexacro._getSysEventY = function (sysevt) {
				return sysevt.clientY + document.body.scrollTop;
			};
			if (nexacro.BrowserVersion < 11) {
				nexacro._getSysEventBtnCode = function (sysevt, code) {
					return sysevt.button;
				};
			}
			else {
				nexacro._getSysEventBtnCode = function (sysevt, code) {
					return sysevt.which ? (sysevt.which - 1) : (sysevt.button);
				};
			}


			nexacro._stopSysEvent = function (sysevt) {
				sysevt.returnValue = false;
				sysevt.cancelBubble = true;
				sysevt.stopped = true;


				if (sysevt.preventDefault) {
					sysevt.preventDefault();
				}
				if (sysevt.stopPropagation) {
					sysevt.stopPropagation();
				}
				return false;
			};

			nexacro._stopPropagation = function (sysevt) {
				sysevt.cancelBubble = true;
				return false;
			};

			if (nexacro.BrowserVersion > 8) {
				nexacro._observeSysEvent = function (node, name, onname, callback) {
					node.addEventListener(name, callback);
				};
				nexacro._stopSysObserving = function (node, name, onname, callback) {
					node.removeEventListener(name, callback, false);
					callback = null;
				};
			}
			else {
				nexacro._observeSysEvent = function (node, name, onname, callback) {
					if (onname in node) {
						node.attachEvent(onname, callback);
					}
				};
				nexacro._stopSysObserving = function (node, name, onname, callback) {
					if (onname in node) {
						node.detachEvent(onname, callback);
					}
					callback = null;
				};
			}
			;
		}

		nexacro._getSysEventBtnString = function (sysevt) {
			switch (nexacro._getSysEventBtnCode(sysevt)) {
				case nexacro_HTMLSysEvent.MOUSE_LBUTTON:
					return "lbutton";
				case nexacro_HTMLSysEvent.MOUSE_MBUTTON:
					return "mbutton";
				case nexacro_HTMLSysEvent.MOUSE_RBUTTON:
					return "rbutton";
				default:
					return "none";
			}
		};

		nexacro._observeEvent = nexacro._observeSysEvent;
		nexacro._stopObserving = nexacro._stopSysObserving;

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro.__fireHTMLEvent = function (node, name, onname) {
				if (node.fireEvent) {
					node.fireEvent(onname);
				}
			};
		}
		else {
			nexacro.__fireHTMLEvent = function (node, name, onname) {
				var doc = node.ownerDocument || node.document;

				if (doc.createEvent) {
					var evt = doc.createEvent('HTMLEvents');
					evt.initEvent(name, true, true);
					node.dispatchEvent(evt);
				}
			};
		}

		nexacro._xreNamedColorList = 
			{
			"" : "", 
			"@gradation" : "", 
			"aliceblue" : "#F0F8FF", 
			"antiquewhite" : "#FAEBD7", 
			"aqua" : "#00FFFF", 
			"aquamarine" : "#7FFFD4", 
			"azure" : "#F0FFFF", 
			"beige" : "#F5F5DC", 
			"bisque" : "#FFE4C4", 
			"black" : "#000000", 
			"blanchedalmond" : "#FFEBCD", 
			"blue" : "#0000FF", 
			"blueviolet" : "#8A2BE2", 
			"brown" : "#A52A2A", 
			"burlywood" : "#DEB887", 
			"cadetblue" : "#5F9EA0", 
			"chartreuse" : "#7FFF00", 
			"chocolate" : "#D2691E", 
			"coral" : "#FF7F50", 
			"cornflowerblue" : "#6495ED", 
			"cornsilk" : "#FFF8DC", 
			"crimson" : "#DC143C", 
			"cyan" : "#00FFFF", 
			"darkblue" : "#00008B", 
			"darkcyan" : "#008B8B", 
			"darkgoldenrod" : "#B8860B", 
			"darkgray" : "#A9A9A9", 
			"darkgreen" : "#006400", 
			"darkgrey" : "#A9A9A9", 
			"darkkhaki" : "#BDB76B", 
			"darkmagenta" : "#8B008B", 
			"darkolivegreen" : "#556B2F", 
			"darkorange" : "#FF8C00", 
			"darkorchid" : "#9932CC", 
			"darkred" : "#8B0000", 
			"darksalmon" : "#E9967A", 
			"darkseagreen" : "#8FBC8F", 
			"darkslateblue" : "#483D8B", 
			"darkslategray" : "#2F4F4F", 
			"darkslategrey" : "#2F4F4F", 
			"darkturquoise" : "#00CED1", 
			"darkviolet" : "#9400D3", 
			"deeppink" : "#FF1493", 
			"deepskyblue" : "#00BFFF", 
			"dimgray" : "#696969", 
			"dimgrey" : "#696969", 
			"dodgerblue" : "#1E90FF", 
			"firebrick" : "#B22222", 
			"floralwhite" : "#FFFAF0", 
			"forestgreen" : "#228B22", 
			"fuchsia" : "#FF00FF", 
			"gainsboro" : "#DCDCDC", 
			"ghostwhite" : "#F8F8FF", 
			"gold" : "#FFD700", 
			"goldenrod" : "#DAA520", 
			"gray" : "#808080", 
			"green" : "#008000", 
			"greenyellow" : "#ADFF2F", 
			"grey" : "#808080", 
			"honeydew" : "#F0FFF0", 
			"hotpink" : "#FF69B4", 
			"indianred" : "#CD5C5C", 
			"indigo" : "#4B0082", 
			"ivory" : "#FFFFF0", 
			"khaki" : "#F0E68C", 
			"lavender" : "#E6E6FA", 
			"lavenderblush" : "#FFF0F5", 
			"lawngreen" : "#7CFC00", 
			"lemonchiffon" : "#FFFACD", 
			"lightblue" : "#ADD8E6", 
			"lightcoral" : "#F08080", 
			"lightcyan" : "#E0FFFF", 
			"lightgoldenrodyellow" : "#FAFAD2", 
			"lightgray" : "#D3D3D3", 
			"lightgreen" : "#90EE90", 
			"lightgrey" : "#D3D3D3", 
			"lightpink" : "#FFB6C1", 
			"lightsalmon" : "#FFA07A", 
			"lightseagreen" : "#20B2AA", 
			"lightskyblue" : "#87CEFA", 
			"lightslategray" : "#778899", 
			"lightslategrey" : "#778899", 
			"lightsteelblue" : "#B0C4DE", 
			"lightyellow" : "#FFFFE0", 
			"lime" : "#00FF00", 
			"limegreen" : "#32CD32", 
			"linen" : "#FAF0E6", 
			"magenta" : "#FF00FF", 
			"maroon" : "#800000", 
			"mediumaquamarine" : "#66CDAA", 
			"mediumblue" : "#0000CD", 
			"mediumorchid" : "#BA55D3", 
			"mediumpurple" : "#9370DB", 
			"mediumseagreen" : "#3CB371", 
			"mediumslateblue" : "#7B68EE", 
			"mediumspringgreen" : "#00FA9A", 
			"mediumturquoise" : "#48D1CC", 
			"mediumvioletred" : "#C71585", 
			"midnightblue" : "#191970", 
			"mintcream" : "#F5FFFA", 
			"mistyrose" : "#FFE4E1", 
			"moccasin" : "#FFE4B5", 
			"navajowhite" : "#FFDEAD", 
			"navy" : "#000080", 
			"oldlace" : "#FDF5E6", 
			"olive" : "#808000", 
			"olivedrab" : "#6B8E23", 
			"orange" : "#FFA500", 
			"orangered" : "#FF4500", 
			"orchid" : "#DA70D6", 
			"palegoldenrod" : "#EEE8AA", 
			"palegreen" : "#98FB98", 
			"paleturquoise" : "#AFEEEE", 
			"palevioletred" : "#DB7093", 
			"papayawhip" : "#FFEFD5", 
			"peachpuff" : "#FFDAB9", 
			"peru" : "#CD853F", 
			"pink" : "#FFC0CB", 
			"plum" : "#DDA0DD", 
			"powderblue" : "#B0E0E6", 
			"purple" : "#800080", 
			"red" : "#FF0000", 
			"rosybrown" : "#BC8F8F", 
			"royalblue" : "#4169E1", 
			"saddlebrown" : "#8B4513", 
			"salmon" : "#FA8072", 
			"sandybrown" : "#F4A460", 
			"seagreen" : "#2E8B57", 
			"seashell" : "#FFF5EE", 
			"sienna" : "#A0522D", 
			"silver" : "#C0C0C0", 
			"skyblue" : "#87CEEB", 
			"slateblue" : "#6A5ACD", 
			"slategray" : "#708090", 
			"slategrey" : "#708090", 
			"snow" : "#FFFAFA", 
			"springgreen" : "#00FF7F", 
			"steelblue" : "#4682B4", 
			"tan" : "#D2B48C", 
			"teal" : "#008080", 
			"thistle" : "#D8BFD8", 
			"tomato" : "#FF6347", 
			"turquoise" : "#40E0D0", 
			"violet" : "#EE82EE", 
			"wheat" : "#F5DEB3", 
			"white" : "#FFFFFF", 
			"whitesmoke" : "#F5F5F5", 
			"yellow" : "#FFFF00", 
			"yellowgreen" : "#9ACD32"
		};

		if (nexacro.Browser_ColorAlpha) {
			nexacro._getWebColorFromXreColor = function (color) {
				var v = nexacro._xreNamedColorList[color];
				if (v) {
					return v;
				}

				if (color == "transparent") {
					return color;
				}

				len = color.length;


				if (color.substring(0, 1) == '#') {
					if (len == 7) {
						return color;
					}
					if (len == 9) {
						var alpha = color.substring(7);
						if (alpha == "00") {
							return "transparent";
						}
						else {
							var str = "rgba(";
							str += parseInt(color.substring(1, 3), 16) + ',';
							str += parseInt(color.substring(3, 5), 16) + ',';
							str += parseInt(color.substring(5, 7), 16) + ',';
							str += (parseInt(alpha, 16) / 255);
							str += ")";
							return str;
						}
					}
				}
				if (color.substring(0, 2) == "0x") {
					if (len == 8) {
						return "#" + color.substring(2);
					}
					if (len == 10) {
						var alpha = color.substring(8);
						if (alpha == "00") {
							return "transparent";
						}
						else {
							var str = "rgba(";
							str += parseInt(color.substring(2, 4), 16) + ',';
							str += parseInt(color.substring(4, 6), 16) + ',';
							str += parseInt(color.substring(6, 8), 16) + ',';
							str += (parseInt(alpha, 16) / 255);
							str += ")";
							return str;
						}
					}
				}
				return "";
			};
		}
		else {
			nexacro._getWebColorFromXreColor = function (color) {
				var v = nexacro._xreNamedColorList[color];
				if (v) {
					return v;
				}

				if (color == "transparent") {
					return color;
				}

				len = color.length;


				if (color.substring(0, 1) == '#') {
					if (len == 7) {
						return color;
					}
					if (len == 9) {
						var alpha = color.substring(7);
						if (alpha == "00") {
							return "transparent";
						}
						return "#" + color.substr(1, 6);
					}
				}
				if (color.substring(0, 2) == "0x") {
					if (len == 8) {
						return "#" + color.substring(2);
					}
					if (len == 10) {
						var alpha = color.substring(8);
						if (alpha == "00") {
							return "transparent";
						}
						return "#" + color.substring(2, 8);
					}
				}
				return "";
			};
		}

		nexacro._getXreColorAlpha = function (color) {
			if (!color) {
				return 255;
			}
			if (typeof color != "string") {
				color = color.toString();
			}
			var v = nexacro._xreNamedColorList[color], len;
			if (v) {
				return 255;
			}
			len = color.length;
			if (len == 7) {
				return 255;
			}
			if (len == 9) {
				return parseInt(color.substr(7), 16);
			}
			if (len == 8) {
				return 255;
			}
			if (len == 10) {
				return parseInt(color.substr(8), 16);
			}
			return 255;
		};

		nexacro._getXreColorOpacity = function (color) {
			if (!color) {
				return 100;
			}
			if (typeof color != "string") {
				color = color.toString();
			}
			var v = nexacro._xreNamedColorList[color];
			if (v) {
				return 100;
			}
			len = color.length;
			if (len == 7) {
				return 100;
			}
			if (len == 9) {
				return Math.round(parseInt(color.substring(7), 16) * 100 / 255);
			}
			if (len == 8) {
				return 100;
			}
			if (len == 10) {
				return Math.round(parseInt(color.substring(8), 16) * 100 / 255);
			}
			return 100;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._getFilterColorFromXreColor = function (color) {
				if (color == undefined) {
					return;
				}
				if (typeof color != "string") {
					color = color.toString();
				}
				var v = nexacro._xreNamedColorList[color];
				if (v) {
					return v;
				}
				len = color.length;
				if (len == 7) {
					return "#" + color.substring(1);
				}
				if (len == 9) {
					var alpha = color.substring(7);
					if (alpha == "00") {
						return;
					}
					return "#" + alpha + color.substr(1, 6);
				}
				if (len == 8) {
					return "#" + color.substring(2);
				}
				if (len == 10) {
					var alpha = color.substring(8);
					if (alpha == "00") {
						return;
					}
					return "#" + alpha + color.substring(2, 8);
				}
				return;
			};

			nexacro._getOpacityFilterFromXreColor = function (color) {
				var filterColor = nexacro._getFilterColorFromXreColor(color);
				if (filterColor) {
					return ("progid:DXImageTransform.Microsoft.gradient(startColorStr=" + filterColor + ",endColorStr=" + filterColor + ")");
				}
				return "";
			};
		}
		else {
			nexacro._getOpacityFilterFromXreColor = function (color) {
				return "";
			};
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.BrowserVersion <= 8) {
				nexacro._makeGradationSysValue = function (cssobj) {
					if (cssobj.style == "linear") {
						var start_color = nexacro._getFilterColorFromXreColor(cssobj.start_color);
						var end_color = nexacro._getFilterColorFromXreColor(cssobj.end_color);
						var vml_start_color = nexacro._getWebColorFromXreColor(cssobj.start_color);
						var vml_end_color = nexacro._getWebColorFromXreColor(cssobj.end_color);
						var start_x = cssobj._start_x, start_y = cssobj._start_y;
						var end_x = cssobj._end_x, end_y = cssobj._end_y;

						if (!start_color && !end_color) {
							var val = "";
							var val2 = "";
						}
						else {
							if (start_color && start_x != null && start_y != null) {
								cssobj.start = start_x + "%, " + start_y + "% " + cssobj.start_color;
							}
							if (end_color && end_x != null && end_y != null) {
								cssobj.end = end_x + "%, " + end_y + "% " + cssobj.end_color;
							}

							if (start_color && !end_color) {
								end_color = "black";
							}
							else if (!start_color && end_color) {
								start_color = "white";
							}

							if (vml_start_color && !vml_end_color) {
								vml_end_color = "black";
							}
							else if (!vml_start_color && vml_end_color) {
								vml_start_color = "white";
							}

							var val = "progid:DXImageTransform.Microsoft.gradient(";
							var val2 = "type='gradient' ";
							var direction = 0;
							if (cssobj._start_y == cssobj._end_y) {
								val += "GradientType=1";
								val2 += "angle='90' ";
								if (cssobj._start_x > 50) {
									direction = 1;
								}
							}
							else if (cssobj._start_x == cssobj._end_x) {
								val += "GradientType=0";
								val2 += "angle='0' ";
								if (cssobj._start_y > 50) {
									direction = 1;
								}
							}
							else if (cssobj._start_x != cssobj._end_x && cssobj._start_y != cssobj._end_y && cssobj._start_x != cssobj._start_y) {
								val += "GradientType=1";
								val2 += "angle='135' ";
								if (cssobj._start_x > 50) {
									direction = 1;
								}
							}
							else {
								val += "GradientType=0";
								val2 += "angle='45' ";
								if (cssobj._start_x > 50) {
									direction = 1;
								}
							}

							if (direction == 0) {
								val += ",startColorStr=" + start_color;
								val += ",endColorStr=" + end_color;
								val += ")";

								val2 += "color = '" + vml_end_color + "' ";
								val2 += "colors = '0% " + vml_end_color + ", 100% " + vml_start_color + "' ";
								val2 += "color2 = '" + vml_start_color + "' ";
								val2 += "opacity = '" + (nexacro._getXreColorOpacity(cssobj.start_color)) / 100 + "' ";
								val2 += "o:opacity2 = '" + (nexacro._getXreColorOpacity(cssobj.end_color)) / 100 + "'";
							}
							else {
								val += ",startColorStr=" + end_color;
								val += ",endColorStr=" + start_color;
								val += ")";

								val2 += "color = '" + vml_start_color + "' ";
								val2 += "colors = '0% " + vml_start_color + ", 100% " + vml_end_color + "' ";
								val2 += "color2 = '" + vml_end_color + "' ";
								val2 += "opacity = '" + (nexacro._getXreColorOpacity(cssobj.end_color)) / 100 + "' ";
								val2 += "o:opacity2 = '" + (nexacro._getXreColorOpacity(cssobj.start_color)) / 100 + "'";
							}
						}

						cssobj._sysvalue = val;
						cssobj._sysvalue2 = val2;
					}
					else {
						cssobj._sysvalue = "";
						cssobj._sysvalue2 = "";
					}
				};
			}
			else if (nexacro.BrowserVersion == 9) {
				nexacro._makeGradationSysValue = function (cssobj) {
					if (cssobj.style == "linear" && (cssobj.start_color || cssobj.end_color)) {
						var start_color = nexacro._getWebColorFromXreColor(cssobj.start_color);
						var end_color = nexacro._getWebColorFromXreColor(cssobj.end_color);
						var start_x = cssobj._start_x, start_y = cssobj._start_y;
						var end_x = cssobj._end_x, end_y = cssobj._end_y;

						if (start_color && start_x != null && start_y != null) {
							cssobj.start = start_x + "%, " + start_y + "% " + cssobj.start_color;
						}
						if (end_color && end_x != null && end_y != null) {
							cssobj.end = end_x + "%, " + end_y + "% " + cssobj.end_color;
						}

						if (start_color && !end_color) {
							end_color = "black";
						}
						else if (!start_color && end_color) {
							start_color = "white";
						}

						var direction = "x1='" + start_x + "%' y1='" + start_y + "%' ";
						direction += "x2='" + end_x + "%' y2='" + end_y + "%'";

						var svgstr = "<svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 1 1' preserveAspectRatio='none'>";
						svgstr += "<linearGradient id='_sysgradation' gradientUnits='userSpaceOnUse' " + direction + ">";
						svgstr += "<stop stop-color='" + start_color + "' offset='0'/><stop stop-color='" + end_color + "' offset='1'/></linearGradient>";
						svgstr += "<rect width='1' height='1' fill='url(#_sysgradation)' />";
						svgstr += "</svg>";

						cssobj._sysvalue = "url(data:image/svg+xml;base64," + nexacro.base64Encode(svgstr) + ")";
					}
					else {
						cssobj._sysvalue = "";
					}
				};
			}
			else {
				nexacro._makeGradationSysValue = function (cssobj) {
					if (cssobj.style == "linear" && (cssobj.start_color || cssobj.end_color)) {
						var start_color = nexacro._getWebColorFromXreColor(cssobj.start_color);
						var end_color = nexacro._getWebColorFromXreColor(cssobj.end_color);
						var start_x = cssobj._start_x, start_y = cssobj._start_y;
						var end_x = cssobj._end_x, end_y = cssobj._end_y;

						if (start_color && start_x != null && start_y != null) {
							cssobj.start = start_x + "%, " + start_y + "% " + cssobj.start_color;
						}
						if (end_color && end_x != null && end_y != null) {
							cssobj.end = end_x + "%, " + end_y + "% " + cssobj.end_color;
						}

						if (start_color && !end_color) {
							end_color = "black";
						}
						else if (!start_color && end_color) {
							start_color = "white";
						}

						var val = "linear-gradient(to ";
						if (start_x == end_x) {
							if (start_y > end_y) {
								val += "top, ";
							}
							else if (start_y < end_y) {
								val += "bottom, ";
							}
						}
						else if (start_x > end_x) {
							if (start_y == end_y) {
								val += "left, ";
							}
							else if (start_y > end_y) {
								val += "top left, ";
							}
							else if (start_y < end_y) {
								val += "bottom left, ";
							}
						}
						else if (start_x < end_x) {
							if (start_y == end_y) {
								val += "right, ";
							}
							else if (start_y > end_y) {
								val += "top right, ";
							}
							else if (start_y < end_y) {
								val += "bottom right, ";
							}
						}

						val += start_color;
						val += " " + start_y + "%,";
						if (cssobj.peglist.length) {
							var arr = cssobj._parsePegList(cssobj.peglist);
							var len = arr.length;
							var valarr;
							for (var i = 0; i < len; i++) {
								valarr = arr[i];
								val += nexacro._getWebColorFromXreColor(valarr[1]) + " " + valarr[0] + "%,";
							}
						}
						val += end_color;
						val += " " + end_y + "%)";

						cssobj._sysvalue = val;
					}
					else {
						cssobj._sysvalue = "";
					}
				};
			}
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro._makeGradationSysValue = function (cssobj) {
				if (cssobj.style == "linear" && (cssobj.start_color || cssobj.end_color)) {
					var start_color = nexacro._getWebColorFromXreColor(cssobj.start_color);
					var end_color = nexacro._getWebColorFromXreColor(cssobj.end_color);
					var start_x = cssobj._start_x, start_y = cssobj._start_y;
					var end_x = cssobj._end_x, end_y = cssobj._end_y;

					if (start_color && start_x != null && start_y != null) {
						cssobj.start = start_x + "%, " + start_y + "% " + cssobj.start_color;
					}
					if (end_color && end_x != null && end_y != null) {
						cssobj.end = end_x + "%, " + end_y + "% " + cssobj.end_color;
					}

					if (start_color && !end_color) {
						end_color = "black";
					}
					else if (!start_color && end_color) {
						start_color = "white";
					}

					var val = "-moz-linear-gradient(";
					if (start_x == end_x) {
						if (start_y > end_y) {
							val += "to top, ";
						}
						else if (start_y < end_y) {
							val += "to bottom, ";
						}
						else if (start_y == end_y) {
							val += "center, ";
						}
					}
					else if (start_x > end_x) {
						if (start_y == end_y) {
							val += "to left, ";
						}
						else if (start_y > end_y) {
							val += "to top left, ";
						}
						else if (start_y < end_y) {
							val += "to bottom left, ";
						}
						else {
							val += "center, ";
						}
					}
					else if (start_x < end_x) {
						if (start_y == end_y) {
							val += "to right, ";
						}
						else if (start_y > end_y) {
							val += "to top right, ";
						}
						else if (start_y < end_y) {
							val += "to bottom right, ";
						}
						else {
							val += "center, ";
						}
					}

					val += start_color;
					val += " " + start_y + "%,";
					if (cssobj.peglist.length) {
						var arr = cssobj._parsePegList(cssobj.peglist);
						var len = arr.length;
						var valarr;
						for (var i = 0; i < len; i++) {
							valarr = arr[i];
							val += nexacro._getWebColorFromXreColor(valarr[1]) + " " + valarr[0] + "%,";
						}
					}
					val += end_color;
					val += " " + end_y + "%)";

					cssobj._sysvalue = val;
				}
				else {
					cssobj._sysvalue = "";
				}
			};
		}
		else if (nexacro.Browser == "WebKit" || nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.Browser == "MobileSafari" || nexacro.Browser == "Safari") {
			nexacro._makeGradationSysValue = function (cssobj) {
				if (cssobj.style == "linear" && (cssobj.start_color || cssobj.end_color)) {
					var start_color = nexacro._getWebColorFromXreColor(cssobj.start_color);
					var end_color = nexacro._getWebColorFromXreColor(cssobj.end_color);
					var start_x = cssobj._start_x, start_y = cssobj._start_y;
					var end_x = cssobj._end_x, end_y = cssobj._end_y;

					if (start_color && start_x != null && start_y != null) {
						cssobj.start = start_x + "%, " + start_y + "% " + cssobj.start_color;
					}
					if (end_color && end_x != null && end_y != null) {
						cssobj.end = end_x + "%, " + end_y + "% " + cssobj.end_color;
					}

					if (start_color && !end_color) {
						end_color = "black";
					}
					else if (!start_color && end_color) {
						start_color = "white";
					}

					var val = "-webkit-gradient(linear,";
					val += start_x + "% " + start_y + "%,";
					val += end_x + "% " + end_y + "%,";
					val += "from(";
					val += start_color;
					val += "),";
					if (cssobj.peglist.length) {
						var arr = cssobj._parsePegList(cssobj.peglist);
						var len = arr.length;
						var valarr;
						for (var i = 0; i < len; i++) {
							valarr = arr[i];
							val += "color-stop(" + valarr[0] + "%," + nexacro._getWebColorFromXreColor(valarr[1]) + "),";
						}
					}
					val += "to(";
					val += end_color;
					val += "))";
					cssobj._sysvalue = val;
				}
				else {
					cssobj._sysvalue = "";
				}
			};
		}
		else if (nexacro.Browser == "Opera") {
			nexacro._makeGradationSysValue = function (cssobj) {
				if (cssobj.style == "linear" && (cssobj.start_color || cssobj.end_color)) {
					var start_color = nexacro._getWebColorFromXreColor(cssobj.start_color);
					var end_color = nexacro._getWebColorFromXreColor(cssobj.end_color);
					var start_x = cssobj._start_x, start_y = cssobj._start_y;
					var end_x = cssobj._end_x, end_y = cssobj._end_y;

					if (start_color && start_x != null && start_y != null) {
						cssobj.start = start_x + "%, " + start_y + "% " + cssobj.start_color;
					}
					if (end_color && end_x != null && end_y != null) {
						cssobj.end = end_x + "%, " + end_y + "% " + cssobj.end_color;
					}

					var dx = end_x - start_x;
					var dy = end_y - start_y;
					var ang = (((Math.atan2(dx, dy)) * 180) / Math.PI) - 90;
					if (ang == NaN) {
						ang = 45;
					}

					if (start_color && !end_color) {
						end_color = "black";
					}
					else if (!start_color && end_color) {
						start_color = "white";
					}

					var val = "-o-linear-gradient(";
					val += ang + "deg, ";

					val += start_color;
					val += " " + start_y + "%,";

					if (cssobj.peglist.length) {
						var arr = cssobj._parsePegList(cssobj.peglist);
						var len = arr.length;
						var valarr;
						for (var i = 0; i < len; i++) {
							valarr = arr[i];
							val += nexacro._getWebColorFromXreColor(valarr[1]) + " " + valarr[0] + "%,";
						}
					}
					val += end_color;
					val += " " + end_y + "%)";

					cssobj._sysvalue = val;
				}
				else {
					cssobj._sysvalue = "";
				}
			};
		}
		else {
			nexacro._makeGradationSysValue = nexacro._emptyFn;
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 10) {
			nexacro._initHTMLSysTimerManager = function (_cur_win) {
				nexacro._createSysTimer_CallbackFuncs(_cur_win);
				_cur_win.nexacro_HTMLSysTimerManager = new nexacro.HTMLSysTimerManager(_cur_win);
			};
			nexacro._finalizeHTMLSysTimerManager = function (_cur_win) {
				_cur_win.nexacro_HTMLSysTimerManager = null;
			};

			nexacro.HTMLSysTimerManager = function (_cur_win) {
				this._cur_win = _cur_win;
				this._timer_idno = 0;
				this._timers = [];

				this._syshandler_timercallback = _cur_win._syshandler_timercallback;
				_cur_win._syshandler_timercallback = null;
			};
			var _pHTMLSysTimerManager = nexacro.HTMLSysTimerManager.prototype;

			_pHTMLSysTimerManager.setInterval = function (timerfn, interval) {
				var timeritem = null;
				var tid = Math.max((this._timer_idno + 1) | 0, 1);
				while ((timeritem = this._timers[tid])) {
					tid = Math.max((tid + 1) | 0, 1);
				}
				;

				this._timer_idno = tid;
				this._timers[tid] = {
					"id" : "", 
					"callback" : timerfn
				};

				var sys_tid = this._cur_win.setInterval("nexacro_HTMLSysTimerManager._syshandler_timercallback(" + tid + ")", interval);
				this._timers[tid].id = sys_tid;
				return tid;
			};
			_pHTMLSysTimerManager.clearInterval = function (timerid) {
				var sys_tid = this._timers[timerid].id;
				this._cur_win.clearInterval(sys_tid);

				delete this._timers[timerid];
			};
			delete _pHTMLSysTimerManager;

			nexacro._createSysTimer_CallbackFuncs = function (_cur_win) {
				_cur_win._syshandler_timercallback = function () {
					if (arguments.length > 0) {
						var tid = arguments[0];
						var callback = _cur_win.nexacro_HTMLSysTimerManager._timers[tid].callback;
						if (callback) {
							try {
								callback.apply(null, arguments);
							}
							catch (e) {
								var sys_tid = _cur_win.nexacro_HTMLSysTimerManager._timers[tid].id;
								_cur_win.clearInterval(sys_tid);
								delete _cur_win.nexacro_HTMLSysTimerManager._timers[tid];
							}
						}
					}
				};
			};

			nexacro._setSystemTimer = function (_win_handle, timerfn, interval) {
				if (_win_handle) {
					return _win_handle.nexacro_HTMLSysTimerManager.setInterval(timerfn, interval);
				}
				return null;
			};
			nexacro._clearSystemTimer = function (_win_handle, timer_handle) {
				if (_win_handle) {
					_win_handle.nexacro_HTMLSysTimerManager.clearInterval(timer_handle);
				}
			};
		}
		else {
			nexacro._initHTMLSysTimerManager = nexacro._emptyFn;
			nexacro._finalizeHTMLSysTimerManager = nexacro._emptyFn;

			nexacro._setSystemTimer = function (_win_handle, timerfn, interval) {
				if (_win_handle) {
					return _win_handle.setInterval(timerfn, interval);
				}
				return null;
			};
			nexacro._clearSystemTimer = function (_win_handle, timer_handle) {
				if (_win_handle) {
					_win_handle.clearInterval(timer_handle);
				}
			};
		}

		nexacro._getProjectBaseURL = function (url) {
			var location = window.location.href;
			if (location.length > 0) {
				return location.substring(0, location.lastIndexOf("/") + 1);
			}

			return "";
		};

		nexacro._checkLicense = nexacro._emptyFn;
		nexacro._updateEngine = nexacro._emptyFn;
		nexacro._addUpdateResoruce = nexacro._emptyFn;
		nexacro._updateResource = nexacro._emptyFn;

		nexacro._checkActiveElement = function (element) {
			var _doc = element.getRootWindowHandle();
			if (!_doc) {
				return false;
			}

			if (!element || !element._parent_elem || !element._parent_elem.linkedcontrol) {
				return false;
			}

			var comp = element._parent_elem.linkedcontrol;
			var win = comp._getWindow();
			if (!win) {
				return false;
			}

			if (!win._is_active_window) {
				return false;
			}

			return (_doc.activeElement == element._input_handle) ? true : false;
		};

		nexacro._loadImageBase64 = function (source, target, handler) {
			var data = source.toString();
			var _handle = nexacro.ImageElement(target.getElement());

			if (data.substring(0, 5) == "data:") {
				data = source;
			}
			else {
				data = "data:image/png;base64," + source;
			}

			_handle.setElementImageUrl(data);

			handler.call(target, errorcode, errormsg, source, data);
			return _handle;
		};

		nexacro._convertRealPath = function (path) {
		};

		nexacro._execBrowser = function (url) {
			var _url = url.toLowerCase();

			var prefix = "mailto:";
			var reg = new RegExp(prefix);
			if (reg.test(_url)) {
				var iframe = document.createElement("iframe");
				var body = document.body;
				iframe.src = prefix + url.substring(7, url.length);
				iframe.style.display = "none";

				var str_title = application._getErrorMessge("msg_accessibility_emptyframe");
				nexacro.__setDOMNodeTitle(iframe, str_title);

				body.appendChild(iframe);
				nexacro.__removeDOMNode(body, iframe);
				iframe = null;
				return 0;
			}

			reg = new RegExp("tel:");
			if (reg.test(_url)) {
				window.open(url);
				return 0;
			}

			var checkversion = application.checkversion;
			application.checkversion = false;
			url = nexacro._getImageLocation(nexacro._checkDomain(url));
			application.checkversion = checkversion;
			window.open(url);
			return 0;
		};

		nexacro._checkDomain = function (url) {
			var expr = new RegExp("^(https?:\\/\\/)");
			if (url.indexOf("::") < 0 && !expr.test(url)) {
				return "http://" + url;
			}
			return url;
		};
		nexacro._execShell = function () {
		};

		nexacro._execNexacro = function (command) {
		};

		nexacro._setClipboard = function (format, data) {
			if (window.clipboardData) {
				if (format == "CF_TEXT") {
					window.clipboardData.setData("text", data);
				}
			}
		};

		nexacro._getClipboard = function (format) {
			var retVal = "";
			if (window.clipboardData) {
				if (format == "CF_TEXT") {
					retVal = window.clipboardData.getData("text");
				}
				return retVal;
			}
		};

		nexacro._clearClipboard = function () {
			if (window.clipboardData) {
				window.clipboardData.clearData("text");
			}
		};

		nexacro._getScreenWidth = function (monitor_index) {
			if (!nexacro._isDesktop() && nexacro.OS == "Android" && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit"))) {
				var is_portrait_device = nexacro._searchDeviceExceptionValue("is_portrait_device");
				if (is_portrait_device === true) {
					var orientation = nexacro._getMobileOrientation();
					var is_swap_screen = nexacro._searchDeviceExceptionValue("swap_screen");
					var is_delayed_swap_screen = nexacro._searchDeviceExceptionValue("delayed_swap_screen");
					if (orientation == 2 || orientation == 3) {
						if (is_swap_screen === true && !is_delayed_swap_screen) {
							if (screen.width < screen.height) {
								return screen.height;
							}
						}
					}
				}
			}

			return screen.width;
		};

		nexacro._getScreenHeight = function (monitor_index) {
			if (!nexacro._isDesktop() && nexacro.OS == "Android" && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit"))) {
				var is_portrait_device = nexacro._searchDeviceExceptionValue("is_portrait_device");
				if (is_portrait_device === true) {
					var orientation = nexacro._getMobileOrientation();
					var is_swap_screen = nexacro._searchDeviceExceptionValue("swap_screen");
					var is_delayed_swap_screen = nexacro._searchDeviceExceptionValue("delayed_swap_screen");
					if (orientation == 2 || orientation == 3) {
						if (is_swap_screen === true && !is_delayed_swap_screen) {
							if (screen.width < screen.height) {
								return screen.width;
							}
						}
					}
				}
			}

			return screen.height;
		};

		nexacro._getScreenAvailWidth = function (monitor_index) {
			return screen.availWidth;
		};

		nexacro._getScreenAvailHeight = function (monitor_index) {
			return screen.availHeight;
		};

		nexacro._getScreenRect = function (monitor_index) {
			return new nexacro.Rect(0, 0, screen.width, screen.height);
		};

		nexacro._isPrimaryMonitor = function (monitor_index) {
		};

		nexacro._getMonitorIndex = function (cursorX, cursorY) {
		};

		nexacro._getOS = function () {
			return nexacro.OS;
		};

		nexacro._getOSVersion = function () {
			if (nexacro.OS.indexOf("Win") >= 0) {
				switch (nexacro.OSVersion) {
					case "5.0":
						return "Windows 2000";
					case "5.01":
						return "Windows 2000, Service Pack 1 (SP1)";
					case "5.1":
						return "Windows XP";
					case "5.2":
						return "Windows Server 2003 / Windows XP 64-bit";
					case "6.0":
						return "Windows Vista";
					case "6.1":
						return "Windows 7";
					case "6.2":
						return "Windows 8";
					case "6.3":
						return "Windows 8.1";
					case "10.0":
						return "Windows 10";
				}
			}

			if (!nexacro.OS) {
				return;
			}
			return (nexacro.OSVersion ? (nexacro.OS + " " + nexacro.OSVersion) : nexacro.OS);
		};

		nexacro._getTaskbarSize = function () {
			return 0;
		};

		nexacro._getComputerName = function () {
			return "";
		};

		nexacro._getCPUArchitecture = function () {
			return "UNKNOWN";
		};

		nexacro._getCPUCount = function () {
			return 1;
		};

		nexacro._getCPUType = function () {
			return "UNKNOWN PROCESSOR";
		};

		nexacro._getLocale = function () {
			return nexacro.BrowserLang;
		};
		nexacro._getLanguage = function () {
			var arr = nexacro.BrowserLang.split('-');
			return arr ? arr[0] : 'en';
		};

		nexacro._getLoginUser = function () {
			return "";
		};

		nexacro._getMobileOrientation = function () {
			var orientation;
			if (!nexacro.isTouchInteraction) {
				orientation = 4;
			}
			else {
				var o = window ? window.orientation : 0;
				if (o == 90) {
					orientation = 3;
				}
				else if (o == -90) {
					orientation = 2;
				}
				else if (o == 180) {
					orientation = 1;
				}
				else {
					orientation = 0;
				}
			}

			return orientation;
		};



		nexacro._getMobilePhoneNumber = function () {
			return "";
		};

		nexacro._getMobileProductType = function () {
			return nexacro.DEVICE;
		};

		nexacro._getMobileUniqueID = function () {
			return "";
		};

		nexacro._getAccessibilityStatus = function () {
			var accessibility = false;
			var queries = location.search.substring(1).split('&');
			for (var i = 0; i < queries.length; i++) {
				var query = queries[i].split('=');
				if (decodeURIComponent(query[0]) == "accessibility") {
					accessibility = nexacro._toBoolean(decodeURIComponent(query[1]));
					break;
				}
			}
			return accessibility;
		};

		nexacro._getMonitorCount = function () {
			return 1;
		};

		nexacro._getNavigatorName = function () {
			return nexacro.Browser;
		};

		nexacro._getCurrentScreenID = function () {
			if (application._curscreen) {
				return application._curscreen.name;
			}

			return application._simulator_screenid;
		};

		nexacro._getCursorX = function (e) {
			var x;
			if (window.event) {
				if (window.event.type == "touchend") {
					x = application._lastTouchEndX;
				}
				else {
					x = window.event.screenX;
				}
			}
			else {
				return e ? e.screenX : undefined;
			}
			return x;
		};

		nexacro._getCursorY = function (e) {
			var y;
			if (window.event) {
				if (window.event.type == "touchend") {
					y = application._lastTouchEndY;
				}
				else {
					y = window.event.screenY;
				}
			}
			else {
				return e ? e.screenY : undefined;
			}
			return y;
		};

		nexacro._getUserAppPath = function () {
			return "";
		};

		nexacro._checkDevicePermission = nexacro._emptyFn;
		nexacro._requestDevicePermission = nexacro._emptyFn;

		if ((nexacro.Browser == "IE" && nexacro.BrowserVersion < 9)) {
			nexacro._fireBeforeDblclick = function (comp, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp) {
				var win = comp._getWindow();
				comp._is_dblclick = true;
				comp._on_lbuttondown(comp._control_element, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, undefined, from_comp, from_refer_comp);
				win._on_default_sys_lbuttonup(comp._control_element, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY);
				comp._on_lbuttonup(comp._control_element, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY, undefined, from_comp, from_refer_comp, comp._control_element);
				comp._on_click(comp._control_element, button, alt_key, ctrl_key, shift_key, meta_key, canvasX, canvasY, screenX, screenY);
				comp._is_dblclick = false;
			};
		}
		else {
			nexacro._fireBeforeDblclick = nexacro._emptyFn;
		}

		nexacro._getCompOffsetSize = function (comp) {
			var elem = comp._control_element;
			var offs = {
			};
			if (!comp || !comp._control_element) {
				offs.width = 0;
				offs.height = 0;
			}
			else {
				var w = comp._getWindow();
				offs.width = w.getWidth() - (parseInt(elem.left) | 0);
				offs.height = w.getHeight() - ((parseInt(elem.top) | 0) + (parseInt(elem.height) | 0));
			}
			return offs;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion > 9) {
			nexacro.__checkHighContrast = function () {
				if (window.matchMedia("screen and (-ms-high-contrast)").matches) {
					return true;
				}
				else {
					return false;
				}
			};
		}
		else if (nexacro.Browser == "IE") {
			nexacro.__checkHighContrast = function () {
				var _doc = window.document;
				if (_doc) {
					var _usehighcontrast = false;
					if (!_doc.getElementById('styleTest')) {
						var css = _doc.createElement("style");
						css.type = "text/css";
						css.id = "styleTest";
						var styles = ".checkHighContrast {background : red;}";
						styles += "@media screen and (-ms-high-contrast:active) {.checkHighContrast  { background : white;}}";
						if (css.styleSheet) {
							css.styleSheet.cssText = styles;
						}
						else {
							css.appendChild(_doc.createTextNode(styles));
						}
						var headRef = _doc.getElementsByTagName('head')[0];
						if (headRef) {
							headRef.appendChild(css);
						}
					}
					var _handle = _doc.createElement("div");
					if (_handle && _doc.body) {
						_doc.body.appendChild(_handle);
						_handle.className = "checkHighContrast";
						var color = _handle.currentStyle.getAttribute("backgroundColor");
						if (color != "red") {
							_usehighcontrast = true;
						}

						_doc.body.removeChild(_handle);
					}
					return _usehighcontrast;
				}

				return false;
			};
		}
		else {
			nexacro.__checkHighContrast = function () {
				return false;
			};
		}

		nexacro._adjustPopupPosition = function (comp, x, y, align) {
			var alignPosition = comp._getAlignPosition(x, y, align);

			var _width = comp._width;
			var _height = comp._height;
			var _left = alignPosition[0];
			var _top = alignPosition[1];
			var mainframe = comp._getMainFrame();
			var screenXY = nexacro._getElementScreenPosition(mainframe._control_element);
			var m_screenX = screenXY.x;
			var m_screenY = screenXY.y;

			var m_c_width = mainframe._adjust_width;
			var m_c_height = mainframe._adjust_height;

			if (_left < m_screenX) {
				_left = m_screenX;
			}
			else if (_left + _width >= m_screenX + m_c_width) {
				_left = m_screenX + m_c_width - _width;
			}

			if (_top < m_screenY) {
				_top = m_screenY;
			}
			else if (_top + _height >= m_screenY + m_c_height) {
				_top = m_screenY + m_c_height - _height;
			}
			comp._popup(_left, _top, _width, _height);
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._redrawVMLBorder = function (comp) {
				if (!comp) {
					return;
				}
				var control_elem = comp.getElement();
				if (control_elem && control_elem._vml_elem) {
					var pseudo = comp._getResultPseudo(comp._status, comp._pseudo);
					var border = comp.on_find_CurrentStyle_border(pseudo);
					var bordertype = comp.on_find_CurrentStyle_bordertype(pseudo);
					control_elem.setElementBorder(border, bordertype);
				}
			};

			nexacro._refreshVMLContainerElement = function (control_elem, target_elem) {
				if (control_elem && target_elem && control_elem._dest_handle && target_elem._dest_handle && control_elem._client_element && control_elem._client_element._dest_handle) {
					var target_owner_elem = target_elem._owner_elem;
					nexacro.__unlinkDOMNode(control_elem._handle, target_elem._dest_handle);
					nexacro.__insertDOMNode(control_elem._dest_handle, target_elem._dest_handle, control_elem._client_element._dest_handle);
					target_elem._owner_elem = target_owner_elem;
					return true;
				}
				return false;
			};

			nexacro._refreshVMLContainerElement2 = function (control_elem, target_elem) {
				if (control_elem && control_elem._dest_handle && target_elem && target_elem._dest_handle) {
					var _parent_handle = target_elem._dest_handle.parentNode;
					var _first_handle = nexacro.__getLastChildDOMNode(_parent_handle);

					if (_first_handle && target_elem._dest_handle != _first_handle) {
						nexacro.__unlinkDOMNode(_parent_handle, target_elem._dest_handle);
						_parent_handle.insertBefore(target_elem._dest_handle, _first_handle);
						return true;
					}
				}
				return false;
			};
		}
		else {
			nexacro._redrawVMLBorder = nexacro._emptyFn;
			nexacro._refreshVMLContainerElement = nexacro._emptyFn;
			nexacro._refreshVMLContainerElement2 = nexacro._emptyFn;
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
			nexacro._updateTextElementPositions = function (comp) {
				if (!comp) {
					return;
				}
				var align = comp.on_find_CurrentStyle_align(comp._pseudo);
				var textElem = comp._text_elem;
				if (textElem && align) {
					var client_height = comp._client_height;

					var halign = (align.halign == "" ? "center" : align.halign);
					var valign = (align.valign == "" ? "middle" : align.valign);

					var tw, th;
					var font = comp.currentstyle.font;
					var letterspace = comp.currentstyle.letterspace;
					var size = nexacro._getTextSize(letterspace, comp.text, font, /\r\n|\n/.test(comp.text));
					tw = comp._text_width = size[0];
					var textline = 1;
					if (comp.wordwrap != "none" && comp.wordwrap != "false" && comp.wordwrap != false) {
						textline += parseInt(tw / comp._client_width) | 0;
					}
					th = comp._text_height = size[1] * textline;

					var pos;

					var textpos_y;
					switch (valign) {
						case "top":
							pos = 0;
							textpos_y = pos;
							break;
						case "bottom":
							pos = client_height - th;
							textpos_y = pos;
							break;
						default:
							pos = (client_height - th - 2) / 2 | 0;
							textpos_y = pos;
							break;
					}
					textpos_y = textpos_y < 0 ? 0 : textpos_y;
					textElem.setElementAlignXY(halign, "top");
					textElem.setElementPaddingXY(0, textpos_y, 0, 0);
				}
			};

			nexacro._resetVML = function (comp) {
				if (!comp) {
					return;
				}
				var control_elem = comp._control_element;
				if (comp && comp._isVisible && comp._isVisible()) {
					if (control_elem && control_elem._vml_elem) {
						comp._vml_visible = control_elem._refreshVMLContainerElement(control_elem, control_elem._vml_elem);
					}

					var objs = [];
					if (comp._is_form) {
						objs = comp.components;
					}

					if (objs) {
						var len = 0;
						len = objs.length;
						for (var i = 0; i < len; i++) {
							nexacro._resetVML(objs[i]);
						}
					}

					objs = comp._subctrlitems;
					if (objs) {
						var len = 0;
						len = objs.length;
						for (var i = 0; i < len; i++) {
							nexacro._resetVML(objs[i]);
						}
					}
				}
			};

			nexacro._addSubComponent = function (comp, item) {
				if (!comp) {
					return;
				}
				var parent;
				if (!item) {
					if (comp.parent) {
						parent = comp.parent;
					}
					else {
						return;
					}
					if (comp._popup_window) {
						item = comp._popup_window;
					}
					else {
						item = comp;
					}
				}
				else {
					parent = comp;
				}
				if (!parent._subctrlitems) {
					parent._subctrlitems = [];
				}
				comp._vml_visible = false;
				parent._subctrlitems.push(item);
			};

			nexacro._addSubComponents = function () {
				var len = arguments.length;
				if (len < 2) {
					return;
				}
				var i = 0;
				var parent = arguments[0];
				if (!parent._subctrlitems) {
					parent._subctrlitems = [];
				}
				for (var i = 1; i < len; i++) {
					var comp = arguments[i];
					comp._vml_visible = false;
					parent._subctrlitems.push(comp);
				}
			};

			nexacro._deleteAllSubComponent = function (comp) {
				var components = comp._subctrlitems;
				for (var i = 0, len = components.length; i < len; i++) {
					var obj = components.pop();
					obj = null;
				}
				components = null;
				comp._subctrlitems = null;
			};

			nexacro._deleteSubComponent = function (comp, parent) {
				var components = parent._subctrlitems;
				if (components) {
					for (var i = 0, len = components.length; i < len; i++) {
						var obj = components[i];
						if (obj === comp) {
							obj = components.splice(i, 1);
							obj = null;
							break;
						}
					}
				}

				components = null;
				comp._subctrlitems = null;
			};
		}
		else {
			nexacro._addSubComponent = nexacro._emptyFn;
			nexacro._addSubComponents = nexacro._emptyFn;
			nexacro._deleteAllSubComponent = nexacro._emptyFn;
			nexacro._deleteSubComponent = nexacro._emptyFn;
			nexacro._updateTextElementPositions = nexacro._emptyFn;
			nexacro._resetVML = nexacro._emptyFn;
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			if (nexacro.OSVersion >= 6.0) {
				if (nexacro.BrowserVersion >= 11) {
					nexacro._roleList = 
						{
						"alert" : "alert", 
						"application" : "application", 
						"button" : "button", 
						"calendar" : "option", 
						"checkbox" : "checkbox", 
						"columnheader" : "option", 
						"combobox" : "combobox", 
						"datepicker" : "option", 
						"dialog" : "dialog", 
						"edit" : "textbox", 
						"fileupload" : "option", 
						"form" : "option", 
						"frame" : "option", 
						"grid" : "option", 
						"gridcell" : "option", 
						"groupbox" : "group", 
						"image" : "img", 
						"listbox" : "listbox", 
						"listitem" : "listitem", 
						"menubar" : "option", 
						"menu" : "menu", 
						"menuitem" : "menuitem", 
						"none" : "option", 
						"progressbar" : "option", 
						"radio" : "option", 
						"radioitem" : "radio", 
						"rowheader" : "option", 
						"scrollbar" : "scrollbar", 
						"slider" : "slider", 
						"spin" : "spinbutton", 
						"splitter" : "option", 
						"static" : "option", 
						"statusbar" : "status", 
						"step" : "option", 
						"tab" : "tablist", 
						"tabitem" : "tab", 
						"tabpage" : "tabpanel", 
						"textbox" : "textbox", 
						"titlebar" : "region", 
						"toolbar" : "toolbar", 
						"tooltip" : "tooltip", 
						"treegrid" : "tree", 
						"treeitem" : "treeitem", 
						"webbrowser" : "option", 
						"link" : "link", 
						"heading" : "option"
					};
				}
				else {
					nexacro._roleList = 
						{
						"alert" : "alert", 
						"application" : "application", 
						"button" : "button", 
						"calendar" : "option", 
						"checkbox" : "checkbox", 
						"columnheader" : "option", 
						"combobox" : "combobox", 
						"datepicker" : "option", 
						"dialog" : "dialog", 
						"edit" : "textbox", 
						"fileupload" : "option", 
						"form" : "option", 
						"frame" : "option", 
						"grid" : "option", 
						"gridcell" : "gridcell", 
						"groupbox" : "group", 
						"image" : "img", 
						"listbox" : "listbox", 
						"listitem" : "listitem", 
						"menubar" : "option", 
						"menu" : "menu", 
						"menuitem" : "menuitem", 
						"none" : "option", 
						"progressbar" : "option", 
						"radio" : "option", 
						"radioitem" : "radio", 
						"rowheader" : "option", 
						"scrollbar" : "scrollbar", 
						"slider" : "slider", 
						"spin" : "spinbutton", 
						"splitter" : "option", 
						"static" : "option", 
						"statusbar" : "status", 
						"step" : "option", 
						"tab" : "tablist", 
						"tabitem" : "tab", 
						"tabpage" : "tabpanel", 
						"textbox" : "textbox", 
						"titlebar" : "region", 
						"toolbar" : "toolbar", 
						"tooltip" : "tooltip", 
						"treegrid" : "tree", 
						"treeitem" : "treeitem", 
						"webbrowser" : "option", 
						"link" : "link", 
						"heading" : "option"
					};
				}
			}
			else {
				nexacro._roleList = 
					{
					"alert" : "alert", 
					"application" : "application", 
					"button" : "button", 
					"calendar" : "alert", 
					"checkbox" : "checkbox", 
					"columnheader" : "alert", 
					"combobox" : "combobox", 
					"datepicker" : "alert", 
					"dialog" : "dialog", 
					"edit" : "textbox", 
					"fileupload" : "alert", 
					"form" : "alert", 
					"frame" : "alert", 
					"grid" : "alert", 
					"gridcell" : "gridcell", 
					"groupbox" : "group", 
					"image" : "img", 
					"listbox" : "listbox", 
					"listitem" : "listitem", 
					"menubar" : "menubar", 
					"menu" : "menu", 
					"menuitem" : "menuitem", 
					"none" : "alert", 
					"progressbar" : "alert", 
					"radio" : "alert", 
					"radioitem" : "radio", 
					"rowheader" : "alert", 
					"scrollbar" : "scrollbar", 
					"slider" : "slider", 
					"spin" : "spinbutton", 
					"splitter" : "alert", 
					"static" : "alert", 
					"statusbar" : "status", 
					"step" : "alert", 
					"tab" : "tablist", 
					"tabitem" : "tab", 
					"tabpage" : "tabpanel", 
					"textbox" : "textbox", 
					"titlebar" : "region", 
					"toolbar" : "toolbar", 
					"tooltip" : "tooltip", 
					"treegrid" : "tree", 
					"treeitem" : "treeitem", 
					"webbrowser" : "alert", 
					"link" : "link", 
					"heading" : "alert"
				};
			}
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro._roleList = 
				{
				"alert" : "alert", 
				"application" : "application", 
				"button" : "button", 
				"calendar" : "", 
				"checkbox" : "checkbox", 
				"columnheader" : "", 
				"combobox" : "combobox", 
				"datepicker" : "", 
				"dialog" : "dialog", 
				"fileupload" : "", 
				"form" : "", 
				"frame" : "", 
				"grid" : "", 
				"gridcell" : "gridcell", 
				"groupbox" : "group", 
				"image" : "img", 
				"listbox" : "listbox", 
				"listitem" : "option", 
				"menubar" : "menubar", 
				"menu" : "menu", 
				"menuitem" : "menuitem", 
				"none" : "", 
				"progressbar" : "", 
				"radio" : "document", 
				"radioitem" : "radio", 
				"rowheader" : "", 
				"scrollbar" : "scrollbar", 
				"slider" : "slider", 
				"spin" : "spinbutton", 
				"splitter" : "", 
				"static" : "", 
				"statusbar" : "status", 
				"step" : "", 
				"tab" : "tablist", 
				"tabitem" : "tab", 
				"tabpage" : "tabpanel", 
				"textbox" : "textbox", 
				"titlebar" : "region", 
				"toolbar" : "toolbar", 
				"tooltip" : "tooltip", 
				"treegrid" : "treegrid", 
				"treeitem" : "treeitem", 
				"webbrowser" : "", 
				"link" : "link", 
				"heading" : ""
			};
		}
		else if (nexacro.Browser == "MobileSafari") {
			nexacro._roleList = 
				{
				"alert" : "alert", 
				"application" : "application", 
				"button" : "button", 
				"calendar" : "textbox", 
				"checkbox" : "checkbox", 
				"columnheader" : "option", 
				"combobox" : "combobox", 
				"datepicker" : "", 
				"dialog" : "dialog", 
				"edit" : "textbox", 
				"fileupload" : "", 
				"form" : "", 
				"frame" : "", 
				"grid" : "", 
				"gridcell" : "option", 
				"groupbox" : "group", 
				"image" : "img", 
				"listbox" : "listbox", 
				"listitem" : "option", 
				"menubar" : "menubar", 
				"menu" : "menu", 
				"menuitem" : "menuitem", 
				"none" : "", 
				"progressbar" : "", 
				"radio" : "radiogroup", 
				"radioitem" : "radio", 
				"rowheader" : "option", 
				"scrollbar" : "scrollbar", 
				"slider" : "slider", 
				"spin" : "spinbutton", 
				"splitter" : "", 
				"static" : "option", 
				"statusbar" : "status", 
				"step" : "", 
				"tab" : "tablist", 
				"tabitem" : "tab", 
				"tabpage" : "tabpanel", 
				"textbox" : "textbox", 
				"titlebar" : "region", 
				"toolbar" : "toolbar", 
				"tooltip" : "tooltip", 
				"treegrid" : "", 
				"treeitem" : "option", 
				"webbrowser" : "", 
				"link" : "link", 
				"heading" : ""
			};
		}
		else {
			nexacro._roleList = 
				{
				"alert" : "alert", 
				"application" : "application", 
				"button" : "button", 
				"calendar" : "document", 
				"checkbox" : "checkbox", 
				"columnheader" : "", 
				"combobox" : "combobox", 
				"datepicker" : "", 
				"dialog" : "dialog", 
				"fileupload" : "", 
				"form" : "", 
				"frame" : "", 
				"grid" : "", 
				"gridcell" : "gridcell", 
				"groupbox" : "group", 
				"image" : "img", 
				"listbox" : "listbox", 
				"listitem" : "option", 
				"menubar" : "menubar", 
				"menu" : "menu", 
				"menuitem" : "menuitem", 
				"none" : "", 
				"progressbar" : "", 
				"radio" : "document", 
				"radioitem" : "radio", 
				"rowheader" : "", 
				"scrollbar" : "scrollbar", 
				"slider" : "slider", 
				"spin" : "spinbutton", 
				"splitter" : "", 
				"static" : "", 
				"statusbar" : "status", 
				"step" : "", 
				"tab" : "tablist", 
				"tabitem" : "tab", 
				"tabpage" : "tabpanel", 
				"titlebar" : "region", 
				"toolbar" : "toolbar", 
				"tooltip" : "tooltip", 
				"treegrid" : "treegrid", 
				"treeitem" : "treeitem", 
				"webbrowser" : "", 
				"link" : "link", 
				"heading" : ""
			};
		}

		nexacro.__setEnableAccessibility = nexacro._emptyFn;
		nexacro.__setAccessibilityType = nexacro._emptyFn;
		nexacro._observeGlobalEvent = nexacro._emptyFn;
		nexacro._stopGlobalEvent = nexacro._emptyFn;
		nexacro._setBrowserErrorMsg = nexacro._emptyFn;
		nexacro._initApplication = nexacro._emptyFn;

		nexacro._AppliedTitleBarHeight = function (frame, h) {
			return (frame && frame._is_window) ? 0 : h;
		};

		nexacro._AppliedStatusBarHeight = function (frame, h) {
			return (frame && frame._is_window) ? 0 : h;
		};

		nexacro._isPluginMode = function () {
			return false;
		};

		nexacro._isMobile = function () {
			var uA = navigator.userAgent.toLowerCase();
			if (uA.indexOf("mobile") >= 0) {
				return true;
			}
			return false;
		};

		nexacro._isHybrid = function () {
			return false;
		};
		nexacro._useFakeXHR = function () {
			return false;
		};
		nexacro._getUserAgent = function () {
			return navigator.userAgent;
		};

		nexacro._refreshCaret = function (comp) {
			var refresh_node = document.createElement("div");
			refresh_node.id = "iOS_refesh_node";
			document.body.appendChild(refresh_node);
			nexacro.OnceCallbackTimer.callonce(comp, function () {
				document.body.removeChild(refresh_node);
				refresh_node = null;
			});
		};

		nexacro._deleteRefreshNode = function () {
			var refresh_node = document.getElementById("iOS_refresh_node");
			if (refresh_node) {
				document.body.removeChild(refresh_node);
				refresh_node = null;
			}
		};

		nexacro._applyZoomEdge = function (control_elem, v) {
			var edge = control_elem._bkimage_elem;

			if (edge) {
				var x = edge._edgex, y = edge._edgey;
				var edgewidth = 0, edgeheight = 0;

				x = Math.ceil(x * v / 100);
				y = Math.ceil(y * v / 100);
				if (edge.parent) {
					edgewidth = edge.parent._node_width;
					edgeheight = edge.parent._node_height;
				}
				nexacro.__setDOMNodeStyleEdgeBorder(edge._handle.style, edge._img_url, edge._edgex, edge._edgey, x, y);
				nexacro.__setDOMNodeStyleSize(edge._handle.style, edgewidth - x * 2, edgeheight - y * 2);
			}
		};

		nexacro._applyScreenAutozoom = function () {
			var curscreen = application._curscreen;
			if (!curscreen) {
				return;
			}

			if (curscreen._cur_type != "phone" && curscreen._cur_type != "tablet") {
				return;
			}

			if (window._popup && window.opener && window.opener != window) {
				nexacro._maximum_scale = curscreen._zoommax;
				nexacro._minimum_scale = curscreen._zoommin;
			}

			if (curscreen.screenwidth !== undefined && nexacro._toBoolean(curscreen.autozoom) == true) {
				if (parseInt(curscreen.screenwidth) <= 320 && 
					nexacro.OS == "Android" && nexacro.Browser != "Chrome" && nexacro.BrowserType != "Edg") {
					curscreen.screenwidth = "321";
				}

				var zoom_fitting_width = Math.abs(parseInt(curscreen.screenwidth));

				nexacro._zoom_factor = curscreen._device_width * 100 / zoom_fitting_width;
			}
		};

		nexacro._isRuntimeProtocol = function () {
			return false;
		};
		nexacro._setProtocolVar = nexacro._emptyFn;

		nexacro._isSimulator = function () {
			return false;
		};
		nexacro._releaseImageUrl = nexacro._emptyFn;

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8) {
			nexacro._getWindowkey = function (win) {
				var winkey = win._localStorage_key;
				if (!winkey) {
					winkey = win.location.href + new Date().getTime();
					win._localStorage_key = winkey;
				}

				return winkey;
			};

			nexacro._setLocalStorage = function (key, value, type) {
				var storage = nexacro._getLocalStorageObject();
				if (!storage) {
					return;
				}

				var winkey = nexacro._getWindowkey(window);
				var storagekey = key;
				var jsondata, idx;
				var storagedata = storage.getItem(winkey);
				if (storagedata) {
					storagedata = storagedata.split(",--boundary--");
					idx = nexacro._findLocalStorage(winkey, key, storagedata);
					if (idx != undefined) {
						jsondata = storagedata[idx];
					}
				}
				else {
					storagedata = [];
				}

				if (!jsondata) {
					jsondata = {
					};
					jsondata.id = key;
					jsondata.type = type;
					jsondata.value = value;
				}
				else {
					jsondata = JSON.parse(jsondata);
					jsondata.value = value;
				}

				var jsonstr = JSON.stringify(jsondata);

				if (idx != undefined) {
					storagedata.splice(idx, 1, jsonstr);
				}
				else {
					storagedata.push(jsonstr);
				}

				for (var i = 1, n = storagedata.length; i < n; i++) {
					storagedata[i] = "--boundary--" + storagedata[i];
				}

				var str = this._storagedata_for_exception = storagedata.toString();
				storage.setItem(winkey, str);
			};

			nexacro._copyLocalStorage = function (parentwin, bExceptionCopy) {
				var storage = nexacro._getLocalStorageObject();
				if (storage) {
					var winkey = nexacro._getWindowkey(window);

					while (parentwin.parent != null) {
						parentwin = parentwin.parent;
					}

					var _localstorage_key = nexacro._getWindowkey(parentwin._handle);
					var storagedata = storage.getItem(_localstorage_key);

					if (!storagedata || bExceptionCopy) {
						if (parentwin._handle) {
							var p_win = parentwin._handle;

							if (!bExceptionCopy && nexacro._isLocalStorageSupport(p_win)) {
								var parent_storage = nexacro._getLocalStorageObject(p_win);
								storagedata = parent_storage.getItem(_localstorage_key);
							}

							if (!storagedata || bExceptionCopy) {
								storagedata = p_win.nexacro._storagedata_for_exception;
							}
						}
					}

					if (storagedata) {
						storage.setItem(winkey, storagedata);
					}
				}
			};

			nexacro._deleteLocalStorage = function (key, win_handle) {
				var storage = nexacro._getLocalStorageObject(win_handle ? win_handle : window);
				if (storage) {
					storage.removeItem(key);
				}
			};

			nexacro._findLocalStorage = function (winkey, key, storagedata) {
				var idx, data;
				if (!storagedata || storagedata.length <= 0) {
					return idx;
				}

				for (var i = 0, n = storagedata.length; i < n; i++) {
					data = JSON.parse(storagedata[i]);

					if (key == data.id) {
						idx = i;
						break;
					}
				}

				return idx;
			};

			nexacro._getLocalStorageObject = function (win_handle) {
				var _win = win_handle ? win_handle : window;

				if (nexacro._isLocalStorageSupport(_win)) {
					return _win.localStorage;
				}
				else {
					var nexacro_obj = _win.nexacro;

					if (!nexacro_obj) {
						return null;
					}

					if (!nexacro_obj._enginevar) {
						nexacro_obj._enginevar = new nexacro.Collection();
					}

					return nexacro_obj._enginevar;
				}
			};

			nexacro._getLocalStorage = function (key, defaultvalue) {
				if (!(window._linked_window && window._linked_window._is_popup_window)) {
					return application[key];
				}

				var storage = nexacro._getLocalStorageObject();

				if (storage && storage.length > 0) {
					var winkey = nexacro._getWindowkey(window);
					var storagekey = key;
					var retvalue = defaultvalue;
					var value, type;
					var storagedata = storage.getItem(winkey);

					if (storagedata) {
						storagedata = storagedata.split(",--boundary--");
						var idx = nexacro._findLocalStorage(winkey, key, storagedata);
						var keyvalue = idx >= 0 ? storagedata[idx] : null;

						if (keyvalue) {
							keyvalue = JSON.parse(keyvalue);
							value = keyvalue.value;
							type = keyvalue.type;

							if (type == "boolean") {
								retvalue = nexacro._toBoolean(value);
							}
							else if (type == "int") {
								retvalue = parseInt(value);
							}
							else {
								retvalue = value;
							}
						}
					}
					else {
						return defaultvalue;
					}

					return retvalue;
				}
				else {
					return application[key];
				}
			};
		}
		else {
			nexacro._getWindowkey = nexacro._emptyFn;
			nexacro._setLocalStorage = nexacro._emptyFn;
			nexacro._copyLocalStorage = nexacro._emptyFn;
			nexacro._deleteLocalStorage = nexacro._emptyFn;
			nexacro._findLocalStorage = nexacro._emptyFn;

			nexacro._getLocalStorage = function (key, defaultvalue) {
				return application[key];
			};
		}

		nexacro._isLocalStorageSupport = function (win_handle) {
			try {
				var storage = win_handle.localStorage;
				storage.getItem("__test__");

				return true;
			}
			catch (e) {
				return false;
			}
		};

		nexacro._setRunBaseWindow = nexacro._emptyFn;

		nexacro._getDisplayScale = function () {
			return "UNKNOWN";
		};

		nexacro._sleep = function (delaytime) {
			var then = new Date().getTime();
			var now = then;

			while ((now - then) < delaytime) {
				now = new Date().getTime();
			}
		};

		nexacro.__setCheckVersion = function (v) {
			application.checkversion = v;
		};

		nexacro._recordHeapSnapshot = nexacro._emptyFn;

		nexacro._findComponentForID = function (id) {
			var comp = null;
			var obj = document.getElementById(id);
			if (obj) {
				comp = obj._linked_element.linkedcontrol;
			}
			return comp;
		};

		nexacro._isCors = function (iscors) {
			return iscors;
		};

		nexacro._setPostMessage = function (id, control) {
			var manager = nexacro._IframeManager;
			var _win = null;
			if (manager) {
				_win = manager.get_window(id);
			}

			if (_win) {
				if (_win.postMessage) {
					_win.postMessage(control._handle.id + "--boundary--", "*");
				}
			}
		};
	}
}
;

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (nexacro.Browser == "Runtime") {
	if (!nexacro.Init_systembase_runtime) {
		nexacro.Init_systembase_runtime = true;

		nexacro._trace = function () {
			var msg = "";
			var cnt = arguments.length;
			for (var i = 0; i < cnt; i++) {
				if (i > 0) {
					msg += " ";
				}

				if (arguments[i] === undefined) {
					msg += "undefined";
				}
				else if (arguments[i] === null) {
					msg += "null";
				}
				else {
					msg += arguments[i];
				}
			}

			nexacro._writeTraceLog(4, msg, false, application._loglevel);

			if (nexacro.System.navigatorname != "nexacro" && nexacro.Browser == "Runtime") {
				application.on_fire_onaddlog(application, msg);
			}
		};
		trace = nexacro._trace;

		nexacro._updateWindow = function (hWnd) {
			nexacro.__updateWrapperBitmap(hWnd);
		};

		nexacro._nexacroconsole = function () {
		};

		nexacro._traceV8CallStack = function () {
			try {
				var e = new Error();
				var stack = e.stack;
				var str = "";

				for (var i = 1; i < stack.length; i++) {
					var frame = stack[i];
					var func = frame.getFunction();
					var argstr = "";
					for (var j = 0; j < func.arguments.length; j++) {
						var tempstr = (j != 0 ? ", " : "") + func.arguments[j];
						if (tempstr.length > 30) {
							argstr += "[LONG STR]";
						}
						else {
							argstr += tempstr;
						}
					}

					var _this = frame.getThis();
					var _funcname = frame.getFunctionName();
					str += _this + "." + _funcname;
					if (argstr.length > 0) {
						str += "(arg: " + argstr + ")";
					}
					str += " " + frame.getFileName() + " (" + frame.getLineNumber() + ")";
					str += "\n";
				}

				var mode = 0;
				switch (mode) {
					case 0:
						trace("\n===[callstack(" + (stack.length - 1) + ")]==============================\n" + str + "============================================");
						break;
					case 1:
						{

							trace("\n===[callstack(" + (stack.length - 1) + ")]==============================");
							var strlist = str.split("\n");
							for (var i = 0; i < strlist.length; i++) {
								trace(strlist[i]);
							}
							trace("============================================");
						}
						break;
				}
			}
			catch (e) {
			}
		};

		nexacro.Browser_RoundBorder = 9;
		nexacro.Browser_BorderImage = 9;
		nexacro.Browser_Gradation = 9;
		nexacro.Browser_RoundShadow = true;
		nexacro.Browser_ColorAlpha = true;

		nexacro._getOSVersion = function () {
			return nexacro.__getOSVersion();
		};

		nexacro._getPackageVersion = function () {
			return nexacro.__getPackageVersion();
		};

		nexacro._getSystemType = function () {
			return nexacro.__getSystemType();
		};

		nexacro._getOS = function () {
			return nexacro.__getOSType();
		};

		nexacro._getSystemLanguage = function () {
			return nexacro.__getSystemLanguage();
		};

		nexacro._isPhone = function () {
			return nexacro.__isPhone();
		};

		nexacro._setOrientation = function (orientation) {
			return nexacro.__setOrientation(orientation);
		};

		nexacro.OS = nexacro._getOS();
		nexacro.OSVersion = nexacro._getOSVersion();
		nexacro.DEVICE = "";
		nexacro.SystemType = nexacro._getSystemType();
		nexacro.BrowserLang = nexacro._getSystemLanguage();
		nexacro.SystemLang = nexacro._getSystemLanguage();

		nexacro.KeyCode_ImeInput = 229;

		nexacro._error = function (e, at) {
			str = e.toString();
			if (at && at.length) {
				str += "\nat : " + at;
			}
			if (e.fileName) {
				str += "\nat : " + e.fileName + ": " + e.lineNumber;
			}
			if (self.__debuginfo) {
				str += "\nat : " + __debuginfo;
			}
			nexacro._trace(str);
		};

		nexacro._alert = function (curFrame, str, caption, type) {
			var _handle;
			if (curFrame._window) {
				curFrame._window._cancelEvent();
				_handle = curFrame._window._handle;
			}
			else {
				_handle = nexacro._getMainWindowHandle();
			}

			str = nexacro._toString(str);
			nexacro.__alert(_handle, str, caption, type);
		};
		alert = function (text) {
			var frm = application.alert(text, application.key, 0);
		};

		nexacro._confirm = function (curFrame, str, caption, type) {
			var _handle;
			if (curFrame._window) {
				curFrame._window._cancelEvent();
				_handle = curFrame._window._handle;
			}
			else {
				_handle = nexacro._getMainWindowHandle();
			}

			return nexacro.__confirm(_handle, str, caption, type);
		};
		confirm = function (text) {
			return application.confirm(text, application.key, 0);
		};


		nexacro._setCookie = function (name, value, days, bsecure) {
			return nexacro.__setCookie(name, value, days, bsecure);
		};
		nexacro._getCookie = function (name) {
			return nexacro.__getCookie(name);
		};
		nexacro._removeCookie = function (name) {
			return nexacro.__removeCookie(name);
		};
		nexacro._setSharedVariablesToCookie = function (url, cookies) {
			return nexacro.__setSharedVariablesToCookie(url, cookies);
		};

		nexacro._setFileSecureLevel = function (lvl) {
			return nexacro.__setFileSecureLevel(lvl);
		};

		nexacro._setNetworkSecureLevel = function (lvl) {
			application.networksecurelevel = nexacro._parseInt(lvl);
			return nexacro.__setNetworkSecureLevel(lvl);
		};

		nexacro._setEnableScreenCapture = function (enable) {
			application.enablescreencapture = enable;
			return nexacro.__setEnableScreenCapture(application.enablescreencapture);
		};
		nexacro._setEnableCookie = function (enable) {
			application.enablecookie = enable;
			return nexacro.__setEnableCookie(application.enablecookie);
		};
		nexacro._setEnableCache = function (enable) {
			application.enablecache = enable;
			return nexacro.__setEnableCache(application.enablecache);
		};
		nexacro._setEnableClipboard = function (enable) {
			application.enableclipboard = enable;
			return nexacro.__setEnableClipboard(application.enableclipboard);
		};

		Error.prepareStackTrace = function (error, stack) {
			return stack;
		};

		nexacro._getExceptionMessage = function (e) {
			var msg = e.toString();
			if (e.stack && e.stack.length > 0) {
				for (var i = 0; i < e.stack.length; i++) {
					var frame = e.stack[i];

					var method = frame.toString().split(" (")[0];
					if (!method) {
						break;
					}

					if (frame.getEvalOrigin) {
						var url = frame.getEvalOrigin();
						msg += "\r\nat line " + frame.getLineNumber() + ", in function: " + method + " in " + decodeURI(url);
					}
					else {
						msg += "\r\nat line " + frame.getLineNumber() + ", in function: " + method;
					}
				}
			}
			return msg;
		};
		nexacro._getEvalExceptionMessage = function (e, src_url) {
			var msg = "======================================================================================================================\r\n";
			msg += e.toString();
			if (e.stack && e.stack.length > 0) {
				var frame = e.stack[0];
				if (frame.getEvalOrigin) {
					var url = frame.getEvalOrigin();
					msg += " \r\nsource     : " + decodeURI(url) + " at line:" + frame.getLineNumber() + "\r\nfunction   : " + frame.getMethodName() + " ( " + decodeURI(src_url) + " )";
				}
				else {
					msg += " \r\nsource     : " + decodeURI(url) + " at line:" + frame.getLineNumber() + "\r\nfunction   : " + frame.getMethodName();
				}
				msg += "\r\n======================================================================================================================================";
			}
			return msg;
		};


		nexacro._encodeXml = function (str) {
			if (!nexacro._isNull(str)) {
				return nexacro.__encodeXml(str);
			}
		};
		nexacro._decodeXml = function (str) {
			if (!nexacro._isNull(str)) {
				if (str.indexOf("&") >= 0) {
					return nexacro.__decodeXml(str);
				}
			}
			return str;
		};

		nexacro._getDisplayText = function (text, _type) {
			return text;
		};

		nexacro._print = function (pThis, refform, defaultprint, valign, halign, fitonepage) {
			var elem = pThis.getElement();
			if (elem && elem._handle) {
				var form_elem = refform.getElement();
				if (pThis._is_scrollable && elem._client_element && elem._client_element._handle && !(pThis instanceof nexacro.Grid)) {
					nexacro.__print(elem._client_element._handle, form_elem._handle, defaultprint, valign, halign, fitonepage);
				}
				else {
					nexacro.__print(elem._handle, form_elem._handle, defaultprint, valign, halign, fitonepage);
				}
			}
		};
		nexacro._printInnerContents = function (comp) {
			var doc = comp.getProperty("document");
			if (doc) {
				comp.callMethod("print");
				return true;
			}
		};
		nexacro._beforePrintCheckPlugin = nexacro._print;

		nexacro._prepareManagerFrame = nexacro._emptyFn;
		nexacro._destroyManagerFrame = nexacro._emptyFn;

		nexacro._TextInfoCacheManager = function (font, letterspace, rtldirection, usedecorate) {
			this.font = font;
			this.letterspace = letterspace;
			this.font_height = 0;
			this.space_width = 0;
			this.space_width1 = 0;
			this.cache = {
			};
			this._getFontInfo();
			this.rtldirection = rtldirection;
			this.usedecorate = usedecorate;
		};
		_pTextInfoCacheManager = nexacro._createPrototype(Object, nexacro._TextInfoCacheManager);
		nexacro._TextInfoCacheManager.prototype = _pTextInfoCacheManager;

		_pTextInfoCacheManager._getFontInfo = function () {
			var font = this.font;
			var letterspace = this.letterspace;
			var size = nexacro.__getTextSize(letterspace, "gH", font.face, font.size, font._antialias, font._bold, font._italic, font._underline, font._strikeout, "none");
			var space_size = nexacro.__getTextSize(letterspace, " ", font.face, font.size, font._antialias, font._bold, font._italic, font._underline, font._strikeout, "none");
			var space_size1 = nexacro.__getTextSize(letterspace, "　", font.face, font.size, font._antialias, font._bold, font._italic, font._underline, font._strikeout, "none");

			this.font_height = size[1];
			this.space_width = space_size[0];
			this.space_width1 = space_size1[0];
		};

		_pTextInfoCacheManager.getWordTextWidth = function (letterspace, word, rtldirection) {
			var strw = word + "#letterspace" + letterspace + "#rtldirection" + rtldirection;
			var text_width = this.cache[strw];

			if (text_width == null) {
				var font = this.font;
				var size = nexacro.__getTextSize(letterspace, word, font.face, font.size, font._antialias, font._bold, font._italic, font._underline, font._strikeout, "none", 0, rtldirection);
				this.cache[strw] = text_width = size[0];
			}
			return text_width;
		};

		_pTextInfoCacheManager.getWordWrapTextSize = function (letterspace, text, width, wordwrap, rtldirection, usedecorate) {
			var strw = text + "#width" + width + "#letterspace" + letterspace + "#rtldirection" + rtldirection;
			var strh = strw + "#height";

			var text_width = this.cache[strw];
			var text_height = this.cache[strh];

			if (text_width == null) {
				var font = this.font;
				var size = nexacro.__getTextSize(letterspace, text, font.face, font.size, font._antialias, font._bold, font._italic, font._underline, font._strikeout, wordwrap, width, rtldirection, usedecorate);

				this.cache[strw] = text_width = size[0];
				this.cache[strh] = text_height = size[1];
			}
			return [text_width, text_height];
		};

		delete _pTextInfoCacheManager;

		nexacro._TextSizeCacheManagers = {
		};
		(function () {
			var re_newline = /\r\n|\n|\r/;
			var re_space = /\s/;

			nexacro.__getSinglelineTextSize = function (manager, letterspace, text, rtldirection) {
				var words = text.split(re_space);
				var wcnt = words.length;
				var text_size = 0;
				var letterspace_size = text.length * letterspace;
				for (var i = 0; i < wcnt; i++) {
					var word = words[i];
					if (word) {
						text_size += manager.getWordTextWidth(letterspace, word, rtldirection);
					}
				}
				var idx_space = text.indexOf("　");
				if (idx_space > -1) {
					text_size += (wcnt - 1) * manager.space_width1;
				}
				else {
					text_size += (wcnt - 1) * manager.space_width;
				}
				return text_size;
			};

			nexacro._getSinglelineTextSize = function (manager, letterspace, text, rtldirection) {
				var text_width = nexacro.__getSinglelineTextSize(manager, letterspace, text.replace(/\r\n|\n|\r/, ' '), rtldirection);
				return [text_width, manager.font_height];
			};

			nexacro._getMultilineTextSize = function (manager, letterspace, text, rtldirection) {
				var lines = text.split(re_newline);
				var lcnt = lines.length;
				var text_width = 0;
				for (var i = 0; i < lcnt; i++) {
					var line_width = nexacro.__getSinglelineTextSize(manager, letterspace, lines[i], rtldirection);
					if (line_width > text_width) {
						text_width = line_width;
					}
				}
				return [text_width, manager.font_height * lcnt];
			};

			nexacro._getWordwrapTextSize = function (manager, letterspace, text, content_width, wordwrap, rtldirection, usedecorate) {
				if (typeof (wordwrap) == "string") {
					wordwrap = wordwrap.toLowerCase();
				}

				if (wordwrap == true || wordwrap == "true") {
					wordwrap = "char";
				}
				else if (wordwrap == false || wordwrap == "false") {
					wordwrap = "none";
				}

				var text_size = manager.getWordWrapTextSize(letterspace, text, content_width, wordwrap, rtldirection, usedecorate);
				return text_size;
			};
		})();

		nexacro._getTextSize = function (letterspace, text, font, multiline, content_width, wordwrap, rtldirection, bgettextsize, usedecorate) {
			if (text && text.length > 0 && font && !font._is_empty) {
				var cacheManager = nexacro._TextSizeCacheManagers[font._sysvalue];
				if (cacheManager == null) {
					cacheManager = new nexacro._TextInfoCacheManager(font, letterspace, rtldirection, usedecorate);
					nexacro._TextSizeCacheManagers[font._sysvalue] = cacheManager;
				}

				if (multiline) {
					if (content_width != null) {
						return nexacro._getWordwrapTextSize(cacheManager, letterspace, text, content_width, wordwrap, rtldirection, usedecorate);
					}
					else {
						return nexacro._getMultilineTextSize(cacheManager, letterspace, text, rtldirection);
					}
				}
				else {
					return nexacro._getSinglelineTextSize(cacheManager, letterspace, text, rtldirection);
				}
			}
			return [0, 0];
		};
		nexacro._getTextSize2 = nexacro._getTextSize;

		nexacro.getTextSize = function (text, font, width, wordwrap, letterspace, rtldirection) {
			if (typeof (wordwrap) == "string") {
				wordwrap = wordwrap.toLowerCase();
			}

			if (wordwrap == true || wordwrap == "true") {
				wordwrap = "char";
			}
			else if (wordwrap == false || wordwrap == "false") {
				wordwrap = "none";
			}

			var line = true;

			if (wordwrap == "none") {
				line = false;
			}
			else if (wordwrap == "line") {
				wordwrap = null;
			}

			if (!letterspace) {
				letterspace = 0;
			}


			var usedecorate = nexacro._checkDecorateString(text);

			var retn = nexacro._getTextSize(letterspace, text, font, line, width, wordwrap, rtldirection, undefined, usedecorate);
			var obj = {
				nx : retn[0], 
				ny : retn[1]
			};

			return obj;
		};

		nexacro._getLineCountWithWordwrap = function (elem, letterspace, text, wordwrap) {
			var gap = (parseInt(elem.padding.left) | 0) + (parseInt(elem.padding.right) | 0);
			var content_width = parseInt(elem.width) - gap - 2;

			var cacheManager = nexacro._TextSizeCacheManagers[elem.font._sysvalue];
			if (cacheManager == null) {
				cacheManager = new nexacro._TextInfoCacheManager(elem.font, letterspace);
				nexacro._TextSizeCacheManagers[elem.font._sysvalue] = cacheManager;
			}

			var text_size = nexacro._getWordwrapTextSize(cacheManager, elem.letterspace, text, content_width, wordwrap);
			var linecount = Math.round(text_size[1] / cacheManager.font_height);
			return Math.max(linecount, 1);
		};

		nexacro._bind_imgloadhandler_onload_recall = nexacro._emptyFn;
		nexacro._imgloadhandler_onload = nexacro._emptyFn;
		nexacro._imgloadhandler_onerror = nexacro._emptyFn;

		nexacro._getImageSize = function (src, callbackFn, pThis, base_url, org_src) {
			if (!src) {
				return null;
			}
			if (src.substring(0, 4).toLowerCase() == "url(") {
				src = src.substring(5, src.length - 2);
			}

			var imgurl;
			if (src.substring(0, 10).toLowerCase() == "data:image") {
				var comma_idx = src.indexOf(",");
				if (comma_idx > -1) {
					var tmp = src.slice(comma_idx + 1, src.legnth);
					src = "data:image;base64," + tmp;
				}
				imgurl = src;
			}
			else {
				imgurl = nexacro._getImageLocation(src, base_url);
			}

			if (imgurl) {
				if (org_src) {
					org_src = org_src.toString();
					org_src = nexacro._getURIValue(org_src);
				}

				var service = nexacro._getServiceObject(org_src ? org_src : src);
				var servicecachelevel = "none";
				var serviceversion = service.version;
				if (service.cachelevel == "static" || service.cachelevel == "session") {
					var retval = nexacro._ImgInfoCacheList[imgurl];
					if (retval) {
						return retval;
					}
				}

				var loadItem = nexacro._CommunicationManager[imgurl];
				if (loadItem) {
					loadItem.appendCallback(pThis, callbackFn);
				}
				else {
					loadItem = new nexacro.CommunicationItem(imgurl, "image", false);
					nexacro._CommunicationManager[imgurl] = loadItem;
					loadItem.appendCallback(pThis, callbackFn);

					if (service) {
						if (service.cachelevel == "session") {
							servicecachelevel = "dynamic";
						}
						else {
							servicecachelevel = service.cachelevel;
						}
					}

					loadItem._handle = nexacro.__getImageSize(imgurl, nexacro.__bindLoadImageHandler(loadItem), servicecachelevel, serviceversion);
				}
				return null;
			}
		};

		nexacro._getImageObject = function (src, callbackFn, pThis, base_url) {
			if (src.substring(0, 4).toLowerCase() == "url(") {
				src = src.substring(5, src.length - 2);
			}

			if (!src) {
				return null;
			}

			var imgurl = nexacro._getImageLocation(src, base_url);

			if (imgurl) {
				var retval = nexacro._ImgInfoCacheList[imgurl];
				if (retval) {
					callbackFn.call(pThis, imgurl, retval.width, retval.height);
					return;
				}

				var loadItem = nexacro._CommunicationManager[imgurl];
				if (loadItem) {
					loadItem.appendCallback(pThis, callbackFn);
				}
				else {
					loadItem = new nexacro.CommunicationItem(imgurl, "image", false);
					nexacro._CommunicationManager[imgurl] = loadItem;
					loadItem.appendCallback(pThis, callbackFn);
					var service = nexacro._getServiceObject(application.xadl);
					var servicecachelevel = "none";
					var serviceversion = service.version;
					if (service) {
						if (service.cachelevel == "session") {
							servicecachelevel = "dynamic";
						}
						else {
							servicecachelevel = service.cachelevel;
						}
					}
					loadItem._handle = nexacro.__getImageSize(imgurl, nexacro.__bindLoadImageHandler(loadItem), servicecachelevel, serviceversion);
				}

				return loadItem._handle;
			}

			return null;
		};

		nexacro._getXMLDocument = function (id, data, url) {
			var xmldoc = nexacro._parseXMLDocument(data);
			if (xmldoc.URL == undefined) {
				xmldoc.URL = url;
			}
			return xmldoc;
		};

		nexacro._findclick = function (comp_name, item_comp_name, item_comp, handle, filedialogpath, filefilter, filefilterindex) {
			var item_value = nexacro.__findclickFileUploadHandle(comp_name, item_comp_name, handle, item_comp._multiselect, item_comp, filedialogpath, filefilter, filefilterindex);
			if (item_comp && item_value) {
				var value = "";
				var fLen = item_value.length;
				if (fLen > 0) {
					value = item_value[0];
					for (var j = 1; j < fLen; j++) {
						value += ", " + item_value[j];
					}
				}

				if (item_comp._changeFiles) {
					item_comp._changeFiles(item_value);
				}

				item_comp._file_changed(value, item_value);
			}
		};

		nexacro._file_changed = function (item_value, item_comp) {
			if (item_comp) {
				item_comp._file_changed(item_value);
			}
		};

		nexacro._setMultipleFile = function (comp_name, item_comp_name, multi_select, item_comp) {
			if (item_comp) {
				item_comp._multiselect = multi_select;
			}
		};

		nexacro._randomId = nexacro._emptyFn;

		nexacro._get_hidden_frame = function (form_id, handle) {
			return handle;
		};

		nexacro._create_hidden_frame = function (name, iframe_id, callback_fn, pThis) {
			if (pThis.parent) {
				var curFrame = pThis.parent._getOwnerFrame();
				if (curFrame._window) {
					pThis._winhandle = curFrame._window._handle;
				}
				else {
					pThis._winhandle = nexacro._getMainWindowHandle();
				}
			}

			var handle = nexacro.__createFileUploadHandle(name, iframe_id, callback_fn, pThis, pThis._winhandle);
			if (handle) {
				pThis._handle = handle;
			}
		};

		nexacro._destroy_hidden_frame = function (form_id, pThis, handle) {
			handle = null;
		};

		nexacro._create_filedownload_handle = function (callback_fn, pThis) {
			if (pThis.parent) {
				var curFrame = pThis.parent._getOwnerFrame();
				if (curFrame._window) {
					pThis._winhandle = curFrame._window._handle;
				}
				else {
					pThis._winhandle = nexacro._getMainWindowHandle();
				}
			}

			var handle = nexacro.__createFileDownloadHandle(callback_fn, pThis, pThis._winhandle);
			if (handle) {
				pThis._handle = handle;
			}
		};

		nexacro._destroy_filedownload_handle = function (handle) {
			if (handle) {
				nexacro.__destroyFileDownloadHandle(handle);
				handle = null;
			}
		};

		nexacro._download = function (url, handle, initname, targetpath, activemode, filedialogpath, filefilter, filefilterindex, action) {
			var httpheaderstr = "";
			var header_vars = application._header_variables;
			var header_vars_len = header_vars.length;
			if (header_vars_len > 0) {
				var header_id, header_value;
				for (var i = 0; i < header_vars_len; i++) {
					header_id = header_vars[i];
					header_value = application[header_id];
					if (header_id && header_value) {
						httpheaderstr += header_id;
						httpheaderstr += ":";
						httpheaderstr += header_value;
						httpheaderstr += "\r\n";
					}
				}
			}

			nexacro._addCookieFromGlobalvariables();

			application._beginCommProgress();
			var retArr = nexacro.__downloadFileDownloadHandle(url, handle, initname, targetpath, httpheaderstr, activemode, filedialogpath, filefilter, filefilterindex, action);
			if (retArr == null) {
				application._endCommProgress();
				return null;
			}
			return retArr[1].length > 0 ? retArr[1] : null;
		};
		nexacro._append_hidden_item = function (form_id, input_id, callback_fn, pThis, handle, multiselect) {
			pThis._file_changed = callback_fn;
			nexacro.__appendFileUploadItem(form_id, input_id, callback_fn, pThis, handle);
			if (pThis) {
				pThis._multiselect = multiselect;
			}
		};

		nexacro._append_hidden_textitem = nexacro._setImportCommand = nexacro._change_inputnode_name = nexacro._emptyFn;

		nexacro._remove_hidden_item = function (form_id, input_id, handle, idx_del) {
			nexacro.__removeFileUploadItem(form_id, input_id, handle, idx_del);
		};

		nexacro._submit = function (form_id, action, handle, exp_info_data, item_value, item_files) {
			var httpheaderstr = "";
			var header_vars = application._header_variables;
			var header_vars_len = header_vars.length;
			if (header_vars_len > 0) {
				var header_id, header_value;
				for (var i = 0; i < header_vars_len; i++) {
					header_id = header_vars[i];
					header_value = application[header_id];
					if (header_id && header_value) {
						httpheaderstr += header_id;
						httpheaderstr += ":";
						httpheaderstr += header_value;
						httpheaderstr += "\r\n";
					}
				}
			}

			nexacro._addCookieFromGlobalvariables();

			application._beginCommProgress();

			if (item_files) {
				var handle = nexacro.__submitFileUploadHandle(form_id, action, handle, exp_info_data, item_value, httpheaderstr, item_files);
				if (handle == null) {
					application._endCommProgress();
				}
			}
			else {
				var handle = nexacro.__submitFileUploadHandle(form_id, action, handle, exp_info_data, item_value, httpheaderstr);
				if (handle == null) {
					application._endCommProgress();
				}
			}
		};


		nexacro._request_submit = nexacro._emptyFn;
		nexacro._fileinputhandler_onchange = nexacro._emptyFn;
		nexacro._fileinputhandler_onload = nexacro._emptyFn;
		nexacro._fileinputhandler_onchange_forward = nexacro._emptyFn;
		nexacro._getDataFromDOM = nexacro._emptyFn;
		nexacro._getContentType = nexacro._emptyFn;


		nexacro.__createFakeHttpRequest = nexacro._emptyFn;
		nexacro.__checkAjaxSuccess = nexacro._emptyFn;
		nexacro.__checkAjaxStatus = nexacro._emptyFn;
		nexacro.__getHttpErrorCode = nexacro._emptyFn;
		nexacro.__createHttpRequest = nexacro._emptyFn;

		nexacro.__bindLoadModuleHandler = function (pthis) {
			return function (status, data, fireerrorcode, returncode, locationurl) {
				if (status < 0) {
					pthis.on_error(status, fireerrorcode, returncode, locationurl);
					pthis = null;
				}
				else if (status == 0) {
					pthis.on_load_module(data);
					nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
					pthis = null;
				}
			};
		};
		nexacro.__bindLoadTextHandler = function (pthis) {
			return function (status, data, fireerrorcode, returncode, locationurl) {
				if (status < 0) {
					pthis.on_error(status, fireerrorcode, returncode, locationurl);
					pthis = null;
				}
				else if (status == 0) {
					pthis.on_load_text(data);
					nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
					pthis = null;
				}
			};
		};
		nexacro.__checkloadData = nexacro._emptyFn;
		nexacro.__bindLoadDataHandler = function (pthis) {
			return function (status, data, cookie, fireerrorcode, returncode, locationurl) {
				if (status < 0) {
					if (status == -9) {
						pthis.on_error(0, "comm_cancel_byuser", 499, "", nexacro.Communication_Error.CANCELBYUSER);
					}
					else {
						if (pthis) {
							pthis.on_error(status, fireerrorcode, returncode, locationurl);
						}
					}
					pthis = null;
				}
				else if (status == 0) {
					if (pthis instanceof nexacro.TransactionItem) {
						pthis.on_load_data(data, cookie);
						nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
					}
					else if (pthis instanceof nexacro.CommunicationItem) {
						if (!pthis._progress_data) {
							pthis.on_load_data(data, cookie);
							nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
						}
						else {
							data = data ? (pthis._progress_data + data) : pthis._progress_data;

							pthis.on_load_data(data, cookie);
							pthis._progress_data = null;

							nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
						}
					}
				}
				else if (status > 0) {
					if (pthis instanceof nexacro.TransactionItem) {
						pthis.on_progress_data(data, false);

						if (data && !pthis._progress_data) {
							if (pthis._protocol < 0) {
								data = pthis.on_decrypt(data);
								if (data) {
									pthis.on_progress_data(data, false);
								}
							}
						}

						nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
					}
					else if (pthis instanceof nexacro.CommunicationItem) {
						if (!pthis._progress_data) {
							pthis._progress_data = data;
						}
						else {
							pthis._progress_data += data;
						}
					}
				}
				data = null;
			};
		};
		nexacro.__bindLoadImageHandler = function (pthis) {
			return function (status, width, height, fireerrorcode, returncode, locationurl) {
				if (pthis) {
					if (status < 0) {
						delete nexacro._ImgInfoCacheList[pthis.path];
						pthis.on_error_image(0, 0, null, status, fireerrorcode, returncode, locationurl);
						pthis = null;
					}
					else if (status == 0) {
						var target_wins = [];
						var callbackList = pthis.callbackList;
						var n = callbackList ? callbackList.length : 0;
						for (var i = 0; i < n; i++) {
							var item = callbackList[i];
							var target = item.target;
							var target_handle = (target._getWindowHandle ? target._getWindowHandle() : null);
							if (target._is_alive != false && target_handle) {
								if (nexacro._indexOf(target_wins, target_handle) < 0) {
									target_wins.push(target_handle);
								}
							}
						}

						nexacro._ImgInfoCacheList[pthis.path] = {
							width : width, 
							height : height
						};
						pthis.on_load_image(width, height);

						n = target_wins.length;
						if (n > 0) {
							for (var i = 0; i < n; i++) {
								var target_win = target_wins[i];
								if (target_win) {
									nexacro.__refreshDirtyWindow(target_win);
								}
							}
							delete target_wins;
						}
						else {
							nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
						}
						pthis = null;
					}
				}
			};
		};

		nexacro.__bindLoadUpdateHandler = function (pthis) {
			return function (status, data, fireerrorcode, returncode, locationurl) {
				if (status < 0) {
					pthis.on_error(status, fireerrorcode, returncode, locationurl);
					pthis = null;
				}
				else if (status == 0) {
					pthis.on_load_update(data);
					nexacro.__refreshDirtyWindow(pthis.context ? (pthis.context._is_component ? pthis.context._getWindowHandle() : null) : null);
					pthis = null;
				}
			};
		};

		nexacro.__retryCommunication = nexacro._emptyFn;

		nexacro.__startCommunication = function (loadItem, path, cachelevel, async, referer, senddata, ndatatype, compress, ver, failpass, service) {
			var handlewrap = {
			};

			if (path.indexOf("://") > -1) {
				var ar = path.split("://");
				var protocol = ar[0];
				switch (protocol) {
					case "http":
						handlewrap._protocol = 0;
						break;
					case "https":
						handlewrap._protocol = 1;
						break;
					case "file":
						handlewrap._protocol = 2;
						break;
					default:
						handlewrap._protocol = -1;
						break;
				}
			}

			var bindfn = null;
			if (loadItem.type == "module") {
				bindfn = nexacro.__bindLoadModuleHandler(loadItem);
			}
			else if (loadItem.type == "data") {
				bindfn = nexacro.__bindLoadDataHandler(loadItem);
			}
			else if (loadItem.type == "image") {
				bindfn = nexacro.__bindLoadImageHandler(loadItem);
			}
			else if (loadItem.type == "text") {
				bindfn = nexacro.__bindLoadTextHandler(loadItem);
			}
			else {
				bindfn = nexacro.__bindLoadUpdateHandler(loadItem);
			}

			var url = decodeURI(path);
			var refer_url = decodeURI(referer);

			var servicecachelevel = "none";
			if (service) {
				if ((service.cachelevel == "session" || service.cachelevel == "static") && cachelevel == "default") {
					servicecachelevel = cachelevel;
				}
				else {
					servicecachelevel = service.cachelevel;
				}
			}

			if (!ver) {
				ver = service.version;
			}

			var httpheaderstr = "";
			var protocoladp = nexacro._getProtocol(loadItem.protocol);

			if (protocoladp && protocoladp.version) {
				var protocolver = protocoladp.version();
				if (protocolver > "1.0") {
					var httpheaders = protocoladp.getHTTPHeader();

					for (var i = 0; i < httpheaders.length; i++) {
						httpheaderstr += httpheaders[i].id;
						httpheaderstr += ":";
						httpheaderstr += httpheaders[i].value;
						httpheaderstr += "\r\n";
					}
				}
			}

			var header_vars = application._header_variables;
			var header_vars_len = header_vars.length;
			if (header_vars_len > 0) {
				var header_id, header_value;
				for (var i = 0; i < header_vars_len; i++) {
					header_id = header_vars[i];
					header_value = application[header_id];
					if (header_id && header_value) {
						httpheaderstr += header_id;
						httpheaderstr += ":";
						httpheaderstr += header_value;
						httpheaderstr += "\r\n";
					}
				}
			}

			handlewrap._handle = nexacro.__startLoad(url, bindfn, loadItem.type, servicecachelevel, async, refer_url, senddata, ndatatype, compress, ver, failpass, httpheaderstr, application._com_waiting);
			return handlewrap;
		};

		nexacro.__cancelCommunication = function (handle) {
			var _handle = handle._handle;
			return nexacro.__cancelLoad(_handle);
		};
		nexacro._convertDatasetSSVToBIN = function (ssvdata) {
			return nexacro.__convertDatasetSSVToBIN(ssvdata);
		};
		nexacro._convertDatasetBINToSSV = function (bindata) {
			return nexacro.__convertDatasetBINToSSV(bindata);
		};
		nexacro._convertStreamSSVToBIN = function (ssvdata) {
			return nexacro.__convertStreamSSVToBIN(ssvdata);
		};
		nexacro._convertStreamBINToSSV = function (bindata) {
			return nexacro.__convertStreamBINToSSV(bindata);
		};
		nexacro._completedUpdateResource = function (target, url, type, targetpath, ref, failpass, index, count) {
			nexacro.__completedUpdateResource(target, url, type, targetpath, ref, failpass, index, count);
		};
		nexacro._ProgressData = function (parent) {
			this._data_buffer = new Array();
			this._data_buffer._data_length = 0;

			this._cur_idx = [0, 0];

			this._received_data_length = 0;
			this._parent = parent;
			this._rs;
			this._cs;

			this._data_type = null;
			this._parse_mode = 0;
			this._load_completed = false;

			this._parameters = [];
			this._datasets = {
			};
			this._datasets_in_seq = [];
			this._cur_dataset_id = "";

			this._error_info = [0, "SUCCESS"];

			this._parsing_min_size = 1024 * 4;

			this._init();
		};

		var _pProgressData = nexacro._createPrototype(nexacro.Object, nexacro._ProgressData);
		nexacro._ProgressData.prototype = _pProgressData;

		_pProgressData._init = function () {
			var out_datasets = this._parent.outputDatasets;
			var form = this._parent.context;

			if (out_datasets && out_datasets.length) {
				var outDataCnt = out_datasets.length;

				for (var i = 0; i < outDataCnt; i++) {
					var param = out_datasets[i];
					if (!this._datasets[param.rval]) {
						var ds = form._getDatasetObject(param.lval);
						if (ds) {
							this._datasets[param.rval] = {
								_isEnable : false, 
								_target_ds : ds, 
								_firefirstcount : ds.firefirstcount, 
								_is_loaded : false, 
								_is_loaded_firstcount : (ds.firefirstcount > 0) ? false : true, 
								_is_first_load : true, 
								_useclientlayout : ds.useclientlayout, 
								_viewrecords_length : 0, 
								_colLines : null, 
								_next_line_idx : 0, 

								_ds_start_idx : null, 
								_ds_end_idx : null, 

								_row_start_idx : null, 
								_firstrow_end_idx : null, 
								_row_end_idx : null, 

								_colinfo_start_idx : null, 
								_colinfo_end_idx : null, 

								_next_load_idx : null
							};
						}
					}
				}
			}
		};

		_pProgressData._applyChange_inputDataset = function () {
			var in_datasets = this._parent.inputDatasets;
			var form = this._parent.context;

			if (in_datasets && in_datasets.length) {
				var in_ds_cnt = in_datasets.length;
				for (var i = 0; i < in_ds_cnt; i++) {
					var param = in_datasets[i];
					var ds = form._getDatasetObject(param.rval);
					if (ds) {
						ds.applyChange();
					}
				}
			}
		};

		_pProgressData._on_progress = function (data, bFinal) {
			if (data) {
				var len = this._data_buffer.length;
				this._data_buffer[len] = data;
				this._data_buffer._data_length += data.length;
			}

			var received_len = this._data_buffer._data_length - this._received_data_length;
			if (!bFinal && (received_len < this._parsing_min_size)) {
				return;
			}

			this._received_data_length = this._data_buffer._data_length;

			if (!bFinal && !this._needParseForFirstCount()) {
				return;
			}

			var error_cd = this._error_info[0];
			var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
			if (error_cd <= -1 && type == "onsuccess") {
				return;
			}

			this._parse(bFinal);
		};

		_pProgressData._needParseForFirstCount = function () {
			for (var buff_ds in this._datasets) {
				if (!this._datasets[buff_ds]._is_loaded_firstcount) {
					return true;
				}
			}
			return false;
		};

		_pProgressData._parseHeader = function () {
			var nrp = this._getNextRecordPos(this._cur_idx);

			var n = nrp[0];
			var next_buffer_idx = nrp[1];
			var rs_len = nrp[2];

			if (n >= 0) {
				this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
			}
			else {
				return false;
			}

			return true;
		};

		_pProgressData._getNextRecordPos = function (baseIdx) {
			var buff_len = this._data_buffer.length;
			var rs_len = 0;
			var idx0 = baseIdx[0];
			var idx1 = baseIdx[1];
			var n = -1;

			if (this._data_buffer[idx0]) {
				if (this._rs instanceof Array) {
					var rss = this._rs;
					var i;
					for (i = 0; i < rss.length; i++) {
						var rs = rss[i];

						while (true) {
							if (!this._data_buffer[idx0]) {
								break;
							}

							n = this._data_buffer[idx0].indexOf(rs, idx1);
							if (n >= 0 || !this._data_buffer[idx0 + 1]) {
								break;
							}

							idx0++;
							idx1 = 0;
						}

						if (n >= 0) {
							rs_len = this._rs[i].length;
							this._rs = this._rs[i];
							break;
						}
					}
				}
				else {
					while (true) {
						if (!this._data_buffer[idx0]) {
							break;
						}

						n = this._data_buffer[idx0].indexOf(this._rs, idx1);
						if (n >= 0 || !this._data_buffer[idx0 + 1]) {
							break;
						}

						idx0++;
						idx1 = 0;
					}
					rs_len = this._rs.length;
				}
			}

			return [n, idx0, rs_len];
		};

		_pProgressData._parseParameters = function () {
			var line = "";

			var nrp = this._getNextRecordPos(this._cur_idx);

			var n = nrp[0];
			var next_buffer_idx = nrp[1];
			var rs_len = nrp[2];
			var change_idx = false;

			if (n >= 0) {
				if (this._cur_idx[0] != next_buffer_idx) {
					change_idx = true;
					var buff = this._data_buffer[this._cur_idx[0]];
					line = buff.substring(this._cur_idx[1], buff.length);

					for (var i = this._cur_idx[0] + 1; i <= next_buffer_idx; i++) {
						buff = this._data_buffer[i];
						if (i == next_buffer_idx) {
							line += buff.substring(i, n);
						}
						else {
							line += buff.substring(i, buff.length);
						}
					}
				}
				else {
					line = this._data_buffer[this._cur_idx[0]].substring(this._cur_idx[1]);
				}
			}
			else {
				return false;
			}

			if (change_idx) {
				var param_arr = line.split(this._cs);
			}
			else {
				var nrp_temp = null;
				var param_arr = line.split(this._rs);
			}

			var param_cnt = param_arr.length;
			var form = this._parent.context;

			for (var i = 0; i < param_cnt; i++) {
				var param_str = param_arr[i];
				if (this._data_type == "CSV") {
					if (param_str.charAt(0) == "\"" || param_str.charAt(0) == "\'") {
						param_str = param_str.substring(1, param_str.length - 1);
					}
				}
				var varInfo = param_str;
				var val = undefined;
				var sep_pos = param_str.indexOf("=");
				if (sep_pos >= 0) {
					varInfo = param_str.substring(0, sep_pos);
					val = param_str.substring(sep_pos + 1);
					if (val == String.fromCharCode(3)) {
						val = undefined;
					}
				}

				if (varInfo) {
					var id = varInfo;
					var sep_pos = varInfo.indexOf(":");
					if (sep_pos >= 0) {
						id = varInfo.substring(0, sep_pos);
					}

					if (id == "Dataset") {
						break;
					}
					else if (id == "ErrorCode") {
						var code = parseInt(val) | 0;
						if (isFinite(code) == false) {
							code = -1;
						}

						val = code;

						this._error_info[0] = val;
						nrp_temp = this._getNextRecordPos(this._cur_idx);
						this._cur_idx = this._getNextIdx([nrp_temp[1], nrp_temp[0] + nrp_temp[2]]);
					}
					else if (id == "ErrorMsg") {
						this._error_info[1] = val;
						nrp_temp = this._getNextRecordPos(this._cur_idx);
						this._cur_idx = this._getNextIdx([nrp_temp[1], nrp_temp[0] + nrp_temp[2]]);
					}
					else if (id in form) {
						if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
							form[id] = val;
						}

						nrp_temp = this._getNextRecordPos(this._cur_idx);
						this._cur_idx = this._getNextIdx([nrp_temp[1], nrp_temp[0] + nrp_temp[2]]);
					}
					else {
						if (application._existVariable(id)) {
							application.setVariable(id, val);
						}

						nrp_temp = this._getNextRecordPos(this._cur_idx);
						this._cur_idx = this._getNextIdx([nrp_temp[1], nrp_temp[0] + nrp_temp[2]]);
					}

					this._parameters[this._parameters.length] = {
						id : id, 
						value : val
					};
				}
			}

			if (change_idx) {
				this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
			}

			if (this._error_info[0] >= 0) {
				this._applyChange_inputDataset();
			}

			return true;
		};

		_pProgressData._parseDataset = function () {
			var line = "";
			var nrp = this._getNextRecordPos(this._cur_idx);

			var n = nrp[0];
			var next_buffer_idx = nrp[1];
			var rs_len = nrp[2];

			if (n >= 0) {
				line = this._getBufferDataByIdx(this._cur_idx, [next_buffer_idx, n]);
			}
			else {
				return false;
			}

			if (this._cur_dataset_id) {
				var cur_buffer_obj = this._datasets[this._cur_dataset_id];
				cur_buffer_obj._row_end_idx = this._cur_idx;
			}

			var sep_pos = line.indexOf(":");
			if (sep_pos > 0) {
				var remoteId = line.substring(sep_pos + 1);

				if (this._cur_dataset_id) {
					var cur_buffer_obj = this._datasets[this._cur_dataset_id];
					cur_buffer_obj._row_end_idx = this._cur_idx;
				}

				if (remoteId && remoteId.length) {
					var buffer_obj = this._datasets[remoteId];
					if (buffer_obj) {
						buffer_obj._isEnable = true;
						this._cur_dataset_id = remoteId;

						this._datasets_in_seq[this._datasets_in_seq.length] = remoteId;
						buffer_obj._ds_start_idx = new Array(this._cur_idx[0], this._cur_idx[1]);
						buffer_obj._ds_end_idx = new Array(this._cur_idx[0], this._cur_idx[1] + n);
					}
					else {
						this._cur_dataset_id = "";
						this._parse_mode = 9;
					}
				}
			}

			this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);

			return true;
		};

		_pProgressData._parseColInfo = function () {
			var nrp = this._getNextRecordPos(this._cur_idx);

			var n = nrp[0];
			var next_buffer_idx = nrp[1];
			var rs_len = nrp[2];

			if (n >= 0) {
				if (this._cur_dataset_id) {
					var buffer_obj = this._datasets[this._cur_dataset_id];
					if (!buffer_obj._colinfo_start_idx) {
						buffer_obj._colinfo_start_idx = new Array(this._cur_idx[0], this._cur_idx[1]);
					}

					buffer_obj._colinfo_end_idx = new Array(next_buffer_idx, n);
				}
			}
			else {
				this._parse_mode = 3;
				return false;
			}

			this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);

			return true;
		};

		_pProgressData._getNextIdx = function (idx) {
			var bufferIdx = idx[0];
			var dataIdx = idx[1];
			var bufferlength = this._data_buffer.length;
			var nextIdx = bufferIdx;

			if (!this._data_buffer[nextIdx]) {
				while (nextIdx < bufferlength) {
					if (this._data_buffer[nextIdx]) {
						break;
					}

					nextIdx++;
				}

				bufferIdx = nextIdx;
			}

			if (this._data_buffer[bufferIdx] && this._data_buffer[bufferIdx].length <= (dataIdx + 1)) {
				if (this._data_buffer[bufferIdx + 1]) {
					bufferIdx += 1;
					dataIdx = 0;
				}
			}

			return [bufferIdx, dataIdx];
		};

		_pProgressData._parseRecord = function () {
			var nrp = this._getNextRecordPos(this._cur_idx);

			var n = nrp[0];
			var next_buffer_idx = nrp[1];
			var rs_len = nrp[2];

			if (n < 0) {
				return false;
			}

			var buffer_obj;
			if (this._cur_dataset_id) {
				buffer_obj = this._datasets[this._cur_dataset_id];
				var firstcount = buffer_obj._firefirstcount;

				if (!buffer_obj._row_start_idx) {
					buffer_obj._row_start_idx = new Array(this._cur_idx[0], this._cur_idx[1]);
				}
				if (this._data_type == "SSV" || this._data_type == "PPX") {
					var rowtype = this._data_buffer[this._cur_idx[0]].charAt(this._cur_idx[1]);
					if (rowtype != "d" || rowtype != "D") {
						buffer_obj._viewrecords_length++;
					}
				}
				else {
					buffer_obj._viewrecords_length++;
				}
			}

			this._cur_idx = this._getNextIdx([next_buffer_idx, (n + rs_len)]);

			if (buffer_obj && buffer_obj._viewrecords_length == firstcount && firstcount > 0) {
				buffer_obj._firstrow_end_idx = new Array(next_buffer_idx, n);
				return false;
			}

			return true;
		};

		_pProgressData._parse = function (bFinal) {
			var bLoop = true;
			var pre_parse_mode;
			var rows_buffer, buffer_obj, ds, lines, line_idx, val;

			while (bLoop) {
				pre_parse_mode = this._parse_mode;
				bLoop = this._setNextParseMode();
				if (pre_parse_mode == 2 && this._parse_mode != 2) {
					var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");
					if (this._error_info[0] < 0 && type == "onsuccess") {
						bLoop = false;
					}
				}

				if (!bLoop) {
					break;
				}

				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						bLoop = this._parseHeader();
						break;
					case 2:
						bLoop = this._parseParameters();
						break;
					case 3:
						bLoop = this._parseDataset();
						break;
					case 4:
					case 5:
						bLoop = this._parseColInfo();
						break;
					case 6:
						bLoop = this._parseRecord();

						if (!bLoop) {
							var buffer_obj = this._datasets[this._cur_dataset_id];
							if (buffer_obj && buffer_obj._viewrecords_length == buffer_obj._firefirstcount && !buffer_obj._is_loaded_firstcount) {
								this._on_fire_onload(buffer_obj, 1);

								buffer_obj._is_loaded_firstcount = true;
								bLoop = true;
							}
						}
						break;
					case 9:
						break;
					case 10:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (!buffer_obj._isEnable) {
							continue;
						}

						this._on_fire_onload(buffer_obj, 0);
						buffer_obj._is_loaded = true;
						this._parse_mode = 9;
						break;
					default:
						break;
				}
			}

			if (bFinal) {
				for (var i = 0; i < this._datasets_in_seq.length; i++) {
					val = this._datasets_in_seq[i];
					buffer_obj = this._datasets[val];
					if (!buffer_obj._isEnable || buffer_obj._is_loaded) {
						if (!this._parent.bcache) {
							this._datasets[val] = null;
						}
						continue;
					}

					this._on_fire_onload(buffer_obj, 0);
					if (!this._parent.bcache) {
						this._datasets[val] = null;
					}
				}

				while (this._data_buffer && this._data_buffer.length) {
					this._data_buffer[this._data_buffer.length - 1] = null;
					this._data_buffer.pop();
				}

				this._data_buffer = null;
			}
		};

		_pProgressData._getBufferDataByIdx = function (startIdx, endIdx, bBufferClear) {
			var data = "";

			if (!startIdx || !endIdx) {
				return data;
			}

			if (startIdx[0] < endIdx[0]) {
				var idx = startIdx[0];
				if (this._data_buffer[idx]) {
					data = this._data_buffer[idx].slice(startIdx[1], this._data_buffer[idx].length);
					if (bBufferClear) {
						this._data_buffer[idx] = null;
					}
				}

				idx++;
				while (true) {
					if (idx < endIdx[0]) {
						if (this._data_buffer[idx]) {
							data += this._data_buffer[idx].slice(0, this._data_buffer[idx].length);
							if (bBufferClear) {
								this._data_buffer[idx] = null;
							}
						}
						idx++;
					}
					else {
						data += this._data_buffer[idx].slice(0, endIdx[1]);
						break;
					}
				}
			}
			else {
				if (this._data_buffer[startIdx[0]]) {
					data = this._data_buffer[startIdx[0]].slice(startIdx[1], endIdx[1]);
				}
			}

			return data;
		};

		_pProgressData._getBufferData = function (bufferObj, nLoadType) {
			var data = "";
			var start_idx = [];
			var end_idx = [];

			if (!bufferObj._next_load_idx) {
				bufferObj._next_load_idx = bufferObj._row_start_idx;
			}

			var next_load_idx = bufferObj._next_load_idx;
			if (!next_load_idx || next_load_idx.length == 0 || next_load_idx[0] < 0 || next_load_idx[1] < 0) {
				return data;
			}

			start_idx[0] = next_load_idx[0];
			start_idx[1] = next_load_idx[1];

			end_idx[0] = start_idx[0] + 1;
			end_idx[1] = 0;

			if (bufferObj._row_end_idx && (bufferObj._row_end_idx[0] <= end_idx[0])) {
				end_idx = bufferObj._row_end_idx;
				bufferObj._next_load_idx = [-1, -1];
			}
			else {
				var nrp = this._getNextRecordPos(end_idx);
				if (nrp[0] < 0) {
					end_idx[0] = start_idx[0];
					end_idx[1] = this._data_buffer[start_idx[0]].length - 1;
				}
				else {
					end_idx[0] = nrp[1];
					end_idx[1] = nrp[0];
				}

				bufferObj._next_load_idx = this._getNextIdx([end_idx[0], end_idx[1] + nrp[2]]);
			}

			data = this._getBufferDataByIdx(start_idx, end_idx);

			return data;
		};

		_pProgressData._getNextDatasetPos = function (baseIdx) {
			var idx = baseIdx;
			var regexp = new RegExp(this._rs + "dataset", "gi");
			var n = -1;
			if (this._data_buffer[idx[0]]) {
				if (this._data_buffer[idx[0] - 1] && idx[1] == 0) {
					idx[1] = this._data_buffer[idx[0] - 1].length - this._rs.length;
					idx[0] = idx[0] - 1;
				}

				while (true) {
					var len = this._data_buffer[idx[0]].length;
					var buff = this._data_buffer[idx[0]].slice(idx[1], this._data_buffer[idx[0]].length);
					if (this._data_buffer[idx[0] + 1]) {
						buff += this._data_buffer[idx[0] + 1].slice(0, 7);
					}

					n = buff.search(regexp);

					if (n >= 0) {
						if (baseIdx[0] == idx[0]) {
							n += baseIdx[1];
						}

						break;
					}
					if (!this._data_buffer[idx[0] + 1]) {
						break;
					}

					idx[0]++;
					idx[1] = 0;
				}
			}

			return [n, idx[0], this._rs.length];
		};

		_pProgressData._on_fire_onload = function (bufferObj, nLoadType) {
			var ds = bufferObj._target_ds;
			var data = "";
			var line_idx;
			var rs = this._rs;

			ds._bWorkingstatus = true;

			if (!bufferObj._colLines) {
				var colInfoData = this._getBufferDataByIdx(bufferObj._colinfo_start_idx, bufferObj._colinfo_end_idx);
				bufferObj._colLines = colInfoData.split(rs);
			}

			var cnt = 0;
			var bLoop = true;
			while (bLoop) {
				if (nLoadType == 1) {
					data = this._getBufferDataByIdx(bufferObj._row_start_idx, bufferObj._firstrow_end_idx);
					var nrp = this._getNextRecordPos(bufferObj._firstrow_end_idx);

					bufferObj._next_load_idx = [];

					if (nrp[0] >= 0) {
						var tIdx = [nrp[1], nrp[0] + nrp[2]];
						bufferObj._next_load_idx = this._getNextIdx([tIdx[0], tIdx[1]]);
					}
					else {
						bufferObj._next_load_idx = [-1, -1];
					}

					bLoop = false;
				}
				else {
					data = this._getBufferData(bufferObj, nLoadType);
				}

				if (data.length == 0) {
					bLoop = false;
				}

				var lines = data.split(new RegExp(rs));
				ds.rowposition = -1;
				switch (this._data_type) {
					case "CSV":
						line_idx = ds._loadFromCSVArray(bufferObj._colLines[0], lines, 0, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
						break;
					case "SSV":
						line_idx = ds._loadFromSSVArray(bufferObj._colLines, lines, 0, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
						break;
					case "PPX":
						line_idx = ds._loadFromPPXArray(bufferObj._colLines, lines, 0, -1, bufferObj._useclientlayout, bufferObj._is_first_load);
						break;
					default:
						break;
				}
				bufferObj._is_first_load = false;

				if (nLoadType == 0 && !bufferObj._is_loaded_firstcount) {
					bufferObj._is_loaded_firstcount = true;
				}
			}

			if (ds.colinfos) {
				ds._reFilter();
				ds._resetSortGroup();
			}

			if (ds._eventstat) {
				ds.on_fire_onload(0, "", nLoadType);
				if (ds._viewRecords && ds._viewRecords.length > 0) {
					ds._forcesetRowPosition(0, 51);
				}
				else {
					ds._forcesetRowPosition(-1, 51);
				}
			}
			else if (ds._viewRecords.length > 0) {
				ds.rowposition = 0;
			}
			ds._bWorkingstatus = false;
		};

		_pProgressData._parseConstColInfo = nexacro._emptyFn;
		_pProgressData._setNextParseMode = nexacro._emptyFn;

		delete _pProgressData;

		nexacro._ProgressDataCSV = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "CSV";

			this._rs = ["\r\n", "\n"];
			this._cs = ",";
		};

		var _pProgressDataCSV = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataCSV);
		nexacro._ProgressDataCSV.prototype = _pProgressDataCSV;

		_pProgressDataCSV._setNextParseMode = function () {
			var sec_type_max_len = 10;
			var sec = "";
			if (this._data_buffer[this._cur_idx[0]]) {
				sec = this._data_buffer[this._cur_idx[0]].substr(this._cur_idx[1], sec_type_max_len);
			}


			sec = sec.toUpperCase();

			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else if (sec.indexOf("DATASET") == 0) {
				this._parse_mode = 3;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						this._parse_mode = 2;
						break;
					case 2:
						break;
					case 3:
						this._parse_mode = 5;
						break;
					case 5:
						this._parse_mode = 6;
						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];

						if (buffer_obj._is_loaded_firstcount) {
							var ndp = this._getNextDatasetPos(this._cur_idx);
							var n = ndp[0];
							var next_buffer_idx = ndp[1];
							var rs_len = ndp[2];
							if (n >= 0) {
								buffer_obj._row_end_idx = [next_buffer_idx, n];
								this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
								this._parse_mode = 10;
							}
							else {
								this._cur_idx = this._getNextIdx([next_buffer_idx, this._data_buffer[next_buffer_idx].length - 1]);
								return false;
							}
						}
						break;
					case 9:
						var ndp = this._getNextDatasetPos(this._cur_idx);
						var n = ndp[0];
						var next_buffer_idx = ndp[1];
						var rs_len = ndp[2];
						if (n >= 0) {
							this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
							this._parse_mode = 3;
						}
						else {
							this._cur_idx = this._getNextIdx([next_buffer_idx, this._data_buffer[next_buffer_idx].length - 1]);
							return false;
						}
						break;
					default:
						return false;
				}
			}
			return true;
		};

		delete _pProgressDataCSV;

		nexacro._ProgressDataSSV = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "SSV";

			this._rs = String.fromCharCode(30);
			this._cs = String.fromCharCode(31);
		};

		var _pProgressDataSSV = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataSSV);
		nexacro._ProgressDataSSV.prototype = _pProgressDataSSV;

		_pProgressDataSSV._setNextParseMode = function () {
			var sec_type_max_len = 10;
			var sec = "";
			if (this._data_buffer[this._cur_idx[0]]) {
				sec = this._data_buffer[this._cur_idx[0]].substr(this._cur_idx[1], sec_type_max_len);
			}
			sec = sec.toUpperCase();

			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else if (sec.indexOf("DATASET") == 0) {
				this._parse_mode = 3;
			}
			else if (sec.indexOf("JSONOBJECT") == 0) {
				this._parse_mode = 7;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						this._parse_mode = 2;
						break;
					case 2:
						break;
					case 3:
						if (sec.indexOf("_CONST_") == 0) {
							this._parse_mode = 4;
						}
						else {
							this._parse_mode = 5;
						}
						break;
					case 4:
						this._parse_mode = 5;
						break;
					case 5:
						this._parse_mode = 6;
						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (buffer_obj._is_loaded_firstcount) {
							var ndp = this._getNextDatasetPos(this._cur_idx);
							var n = ndp[0];
							var next_buffer_idx = ndp[1];
							var rs_len = ndp[2];
							if (n >= 0) {
								buffer_obj._row_end_idx = [next_buffer_idx, n];
								this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
								this._parse_mode = 10;
							}
							else {
								this._cur_idx = this._getNextIdx([next_buffer_idx, this._data_buffer[next_buffer_idx].length - 1]);
								return false;
							}
						}
						break;
					case 7:
						this._parse_mode = 8;
						break;
					case 8:
						break;
					case 9:
						var ndp = this._getNextDatasetPos(this._cur_idx);
						var n = ndp[0];
						var next_buffer_idx = ndp[1];
						var rs_len = ndp[2];
						if (n >= 0) {
							this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
							this._parse_mode = 3;
						}
						else {
							this._cur_idx = this._getNextIdx([next_buffer_idx, this._data_buffer[next_buffer_idx].length - 1]);
							return false;
						}
						break;
					default:
						return false;
				}
			}
			return true;
		};

		delete _pProgressDataSSV;

		nexacro._ProgressDataPPX = function (parent) {
			nexacro._ProgressData.call(this, parent);
			this._data_type = "PPX";

			this._rs = String.fromCharCode(30);
			this._cs = String.fromCharCode(31);
		};

		var _pProgressDataPPX = nexacro._createPrototype(nexacro._ProgressData, nexacro._ProgressDataPPX);
		nexacro._ProgressDataPPX.prototype = _pProgressDataPPX;

		_pProgressDataPPX._setNextParseMode = function () {
			var sec_type_max_len = 10;
			var sec = "";
			if (this._data_buffer[this._cur_idx[0]]) {
				sec = this._data_buffer[this._cur_idx[0]].substr(this._cur_idx[1], sec_type_max_len);
			}

			sec = sec.toUpperCase();

			if (this._parse_mode == 0) {
				this._parse_mode = 1;
			}
			else if (sec.charAt(0) == "D") {
				this._parse_mode = 3;
			}
			else {
				switch (this._parse_mode) {
					case 0:
						break;
					case 1:
						this._parse_mode = 2;
						break;
					case 2:
						break;
					case 3:
					case 4:
					case 5:
						if (sec.charAt(this._cur_idx) == "V") {
							this._parse_mode = 4;
						}
						else if (sec.charAt(this._cur_idx) == "C") {
							this._parse_mode = 5;
						}
						else {
							this._parse_mode = 6;
						}
						break;
					case 6:
						var buffer_obj = this._datasets[this._cur_dataset_id];
						if (buffer_obj._is_loaded_firstcount) {
							var ndp = this._getNextDatasetPos(this._cur_idx);
							var n = ndp[0];
							var next_buffer_idx = ndp[1];
							var rs_len = ndp[2];

							if (n >= 0) {
								buffer_obj._row_end_idx = [next_buffer_idx, n];
								this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
								this._parse_mode = 10;
							}
							else {
								this._cur_idx = this._getNextIdx([next_buffer_idx, this._data_buffer[next_buffer_idx].length - 1]);
								return false;
							}
						}
						break;
					case 9:
						var ndp = this._getNextDatasetPos(this._cur_idx);
						var n = ndp[0];
						var next_buffer_idx = ndp[1];
						var rs_len = ndp[2];

						if (n >= 0) {
							this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);
							this._parse_mode = 3;
						}
						else {
							this._cur_idx = this._getNextIdx([next_buffer_idx, this._data_buffer[next_buffer_idx].length - 1]);
							return false;
						}
						break;
					default:
						return false;
				}
			}

			return true;
		};

		_pProgressDataPPX._getNextDatasetPos = function (baseIdx) {
			var idx = baseIdx;
			var regexp = new RegExp(this._rs + "D", "gi");
			var n = -1;

			if (this._data_buffer[idx[0]]) {
				if (this._data_buffer[idx[0] - 1] && idx[1] == 0) {
					idx[1] = this._data_buffer[idx[0] - 1].length - this._rs.length;
					idx[0] = idx[0] - 1;
				}

				while (true) {
					var len = this._data_buffer[idx[0]].length;
					var buff = this._data_buffer[idx[0]].slice(idx[1], this._data_buffer[idx[0]].length);
					if (this._data_buffer[idx[0] + 1]) {
						buff += this._data_buffer[idx[0] + 1].slice(0, 3);
					}

					n = buff.search(regexp);

					if (n >= 0) {
						if (baseIdx[0] == idx[0]) {
							n += baseIdx[1];
						}
						break;
					}
					if (!this._data_buffer[idx[0] + 1]) {
						break;
					}

					idx[0]++;
					idx[1] = 0;
				}
			}

			return [n, idx[0], this._rs.length];
		};

		_pProgressDataPPX._parseParameters = function () {
			var bRet = true;
			do {
				var line = "";
				var nrp = this._getNextRecordPos(this._cur_idx);

				var n = nrp[0];
				var next_buffer_idx = nrp[1];
				var rs_len = nrp[2];

				if (n >= 0) {
					if (this._cur_idx[0] != next_buffer_idx) {
						var buff = this._data_buffer[this._cur_idx[0]];
						line = buff.substring(this._cur_idx[1], buff.length);

						for (var i = this._cur_idx[0] + 1; i <= next_buffer_idx; i++) {
							buff = this._data_buffer[i];
							if (i == next_buffer_idx) {
								line += buff.substring(i, n);
							}
							else {
								line += buff.substring(i, buff.length);
							}
						}
					}
					else {
						line = this._data_buffer[this._cur_idx[0]].substring(this._cur_idx[1], n);
					}
				}
				else {
					bRet = false;
					break;
				}

				this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);

				var form = this._parent.context;
				var param_arr = line.split(this._cs);
				var id = param_arr[1];
				var val = param_arr[2];
				if (val == String.fromCharCode(3)) {
					val = undefined;
				}

				if (id == "ErrorCode") {
					code = parseInt(val) | 0;
					if (isFinite(code) == false) {
						code = -1;
					}

					val = code;
					this._error_info[0] = val;
				}
				else if (id == "ErrorMsg") {
					this._error_info[1] = param_arr[2];
				}
				else if (id in form) {
					if (nexacro._isNull(form[id]) || !nexacro._isObject(form[id])) {
						form[id] = val;
					}
				}
				else {
					if (application._existVariable(id)) {
						application.setVariable(id, val);
					}

					if (id == "JSESSIONID") {
						continue;
					}
				}

				this._parameters[this._parameters.length] = {
					id : id, 
					value : val
				};
				bRet = this._setNextParseMode();
			} while (this._parse_mode == 2);

			var type = nexacro._getLocalStorage("datasetloadtype", "onsuccess");

			if (this._error_info[0] >= 0) {
				this._applyChange_inputDataset();
			}
			else if (type == "errorallow") {
				return true;
			}
			else {
				return false;
			}

			return bRet;
		};

		_pProgressDataPPX._parseDataset = function () {
			var line = "";
			var nrp = this._getNextRecordPos(this._cur_idx);

			var n = nrp[0];
			var next_buffer_idx = nrp[1];
			var rs_len = nrp[2];

			if (n >= 0) {
				line = this._getBufferDataByIdx(this._cur_idx, [next_buffer_idx, n]);
			}
			else {
				return false;
			}

			if (this._cur_dataset_id) {
				var cur_buffer_obj = this._datasets[this._cur_dataset_id];
				cur_buffer_obj._row_end_idx = this._cur_idx;
			}

			var remoteId = line.split(this._cs)[1];
			if (remoteId && remoteId.length) {
				var buffer_obj = this._datasets[remoteId];
				if (buffer_obj) {
					buffer_obj._isEnable = true;
					this._cur_dataset_id = remoteId;

					this._datasets_in_seq[this._datasets_in_seq.length] = remoteId;
					buffer_obj._ds_start_idx = new Array(this._cur_idx[0], this._cur_idx[1]);
					buffer_obj._ds_end_idx = new Array(this._cur_idx[0], this._cur_idx[1] + n);
				}
				else {
					this._cur_dataset_id = "";
					this._parse_mode = 9;
				}
			}

			this._cur_idx = this._getNextIdx([next_buffer_idx, n + rs_len]);

			return true;
		};

		delete _pProgressDataPPX;


		nexacro._getXmlDom = nexacro._emptyFn;
		nexacro._getXmlParser = nexacro._emptyFn;

		nexacro._parseXMLDocument = function (str) {
			var handle = nexacro.__parseXMLDocument(str);
			var xmldoc = new nexacro.XmlDocument();
			if (xmldoc) {
				xmldoc._handle = handle;
			}
			return xmldoc;
		};
		nexacro._documentToXml = function (xmldoc) {
			if (xmldoc) {
				return nexacro.__documentToXml(xmldoc._handle);
			}
			return "";
		};

		nexacro._getParserError = function () {
			var line, column, msg = "", desc = "";
			var error = nexacro.__getLastXmlError();
			if (error) {
				line = error.line;
				column = error.column;
				msg = error.message;
				return {
					"line" : line, 
					"column" : column, 
					"message" : msg, 
					"desc" : desc
				};
			}
			return null;
		};


		nexacro._decorateString = function (str) {
			var strtemp = str;
			var ltidx = 0, gtidx = 0;
			var prefix = null;

			if ((strtemp.indexOf('&lt;') >= 0 && strtemp.indexOf('&gt;') >= 0) || (strtemp.indexOf("<") >= 0 && strtemp.indexOf(">") >= 0)) {
				strtemp = strtemp.replace(/\&lt;/g, "<").replace(/\&gt;/g, ">");
				strtemp = strtemp.replace(/<\/?ff\s+[v]\s*=/g, "<font face =").replace(/ff\s*>/g, "font>");
				strtemp = strtemp.replace(/<\/?fs\s*[v]\s*=/gi, "<font size =").replace(/fs\s*>/g, "font>");
				strtemp = strtemp.replace(/<\/?fc\s+[v]\s*=/g, "<font color =").replace(/fc\s*>/g, "font>");
				strtemp = strtemp.replace(/<\/?b\s+[v].*?>/g, "<b>");
				strtemp = strtemp.replace(/<\/?i\s+[v].*?>/g, "<i>");
				strtemp = strtemp.replace(/<\/?u\s+[v].*?>/g, "<u>");
				strtemp = strtemp.replace(/<\/?s\s+[v].*?>/g, "<s>");
				if (strtemp.indexOf("\"") || strtemp.indexOf("\'")) {
					strtemp = nexacro._replaceAll(strtemp, "\"", "");
					strtemp = nexacro._replaceAll(strtemp, "\'", "");
				}
			}
			return strtemp;
		};


		nexacro._unDecorateString = function (text) {
			var strtemp = text;

			var expPrefixMap = [/<\/?ff\s+[v]\s*=(\'|\").*?>/g, /<\/?fs\s+[v]\s*=(\'|\").*?>/g, /<\/?fc\s+[v]\s*=(\'|\").*?>/g, /<\/?b\s+[v].*?>/g, /<\/?i\s+[v].*?>/g, /<\/?u\s+[v].*?>/g, /<\/?s\s+[v].*?>/g, /<\/?l\s+[v]\s*=(\'|\").*?>/g];
			var expSufixMap = [/<\/ff>/g, /<\/fs>/g, /<\/fc>/g, /<\/b>/g, /<\/i>/g, /<\/u>/g, /<\/s>/g, /<\/l>/g];

			for (var i = 0, n = expPrefixMap.length; i <= n - 1; i++) {
				var idx = 0;
				var preexp = expPrefixMap[i];
				var sufexp = expSufixMap[i];
				var preexec = preexp.exec(strtemp);

				while (preexec) {
					var sufexec = sufexp.exec(strtemp);
					if (!sufexec) {
						break;
					}

					var startidx = preexec.index;
					var endidx = sufexp.lastIndex;

					var frontstr = strtemp.substring(0, startidx);
					var endstr = strtemp.substring(endidx, strtemp.length);
					var changestr = strtemp.substring(startidx, endidx);


					if (startidx > endidx) {
						break;
					}

					changestr = changestr.replace(preexec[0], "");
					if (sufexec[0]) {
						changestr = changestr.replace(sufexec[0], "");
					}

					strtemp = frontstr + changestr + endstr;

					preexp.lastIndex = 0;
					sufexp.lastIndex = 0;
					preexec = preexp.exec(strtemp);


					if (preexec) {
						sufexp.lastIndex = preexp.lastIndex;
					}
				}
			}
			return strtemp;
		};

		nexacro._checkDecorateString = function (text) {
			var strtemp = text;

			var preexp = null;
			var expPrefixMap = [/<\/?ff\s+[v]\s*=(\'|\").*?>/g, /<\/?fs\s+[v]\s*=(\'|\").*?>/g, /<\/?fc\s+[v]\s*=(\'|\").*?>/g, /<\/?b\s+[v].*?>/g, /<\/?i\s+[v].*?>/g, /<\/?u\s+[v].*?>/g, /<\/?s\s+[v].*?>/g, /<\/?l\s+[v]\s*=(\'|\").*?>/g];
			for (var i = 0, n = expPrefixMap.length; i <= n - 1; i++) {
				preexp = expPrefixMap[i];
				if (preexp.exec(strtemp)) {
					return true;
				}
			}
			return false;
		};

		nexacro._quoteStr = function (str) {
			if (/[\r\n\"\t]/.test(str)) {
				return nexacro.__quoteStr(str);
			}
			else if (/[,\']/.test(str)) {
				return "\"" + str + "\"";
			}
			else {
				return str;
			}
		};

		nexacro._unQuoteStr = function (str) {
			if (str.charAt(0) != "\"" && str.charAt(0) != "\'") {
				return str;
			}
			else if (str.indexOf("\\") > -1) {
				return nexacro.__unquoteStr(str);
			}
			else {
				return str.substring(1, str.length - 1);
			}
		};

		nexacro._getElementXYInWindow = function (_handle) {
			if (_handle) {
				return nexacro.__getElementXYInWindow(_handle);
			}
			return [0, 0];
		};

		nexacro._getElementPositionInFrame = function (elem) {
			if (elem && elem._handle) {
				var pt = nexacro.__getElementPositionInFrame(elem._handle);
				return {
					x : pt[0], 
					y : pt[1]
				};
			}
			return {
				x : 0, 
				y : 0
			};
		};

		nexacro.__getHTMLNodePositionInFrame = nexacro._emptyFn;

		nexacro._getElementScreenPosition = function (elem) {
			if (elem && elem._handle) {
				var pt = nexacro.__getElementScreenPosition(elem._handle);
				return {
					x : pt[0], 
					y : pt[1]
				};
			}
			return {
				x : 0, 
				y : 0
			};
		};

		nexacro.__getHTMLElementPosition = nexacro._emptyFn;
		nexacro.__getHTMLPageSize = nexacro._emptyFn;


		nexacro.__findParentElement = nexacro._emptyFn;
		nexacro.__findParentElementForKeyEvent = nexacro._emptyFn;
		nexacro.__getWheelDelta = nexacro._emptyFn;
		nexacro._getSysEventElement = nexacro._emptyFn;
		nexacro._getSysEventKey = nexacro._emptyFn;
		nexacro._getSysEventKeyCode = nexacro._emptyFn;
		nexacro._getSysEventX = nexacro._emptyFn;
		nexacro._getSysEventY = nexacro._emptyFn;
		nexacro._getSysEventBtnCode = nexacro._emptyFn;
		nexacro._getSysEventBtnString = nexacro._emptyFn;
		nexacro._stopSysEvent = nexacro._emptyFn;

		nexacro._observeSysEvent = function (_handle, name, onname, callback) {
			return nexacro.__observeSysEvent(_handle, name, onname, callback);
		};
		nexacro._stopSysObserving = function (_handle, name, onname, callback) {
			return nexacro.__stopSysObserving(_handle, name, onname, callback);
		};
		nexacro._observeInputEvent = function (_handle, name, onname, callback) {
			return nexacro.__observeInputEvent(_handle, name, onname, callback);
		};
		nexacro._stopInputObserving = function (_handle, name, onname, callback) {
			return nexacro.__stopInputObserving(_handle, name, onname, callback);
		};
		nexacro._observeWrapperEvent = function (_handle, name, onname, callback, frmidx, compid) {
			return nexacro.__observeWrapperEvent(_handle, name, onname, callback, frmidx, compid);
		};
		nexacro._stopWrapperObserving = function (_handle, name, onname, callback) {
			return nexacro.__stopWrapperObserving(_handle, name, onname, callback);
		};

		nexacro._observeGlobalEvent = function (_handle, name, onname, callback) {
			return nexacro.__observeGlobalEvent(_handle, name, onname, callback);
		};
		nexacro._stopGlobalEvent = function (_handle, name, onname, callback) {
			return nexacro.__stopGlobalEvent(_handle, name, onname, callback);
		};


		nexacro._observeEvent = nexacro._observeSysEvent;
		nexacro._stopObserving = nexacro._stopSysObserving;

		nexacro.__refreshDirtyWindow = function (_win_handle) {
			var win_handle = _win_handle;
			if (!win_handle) {
				win_handle = nexacro._getMainWindowHandle();
			}
			nexacro.__refreshDirtyRect(win_handle);
		};
		Object.defineProperty(nexacro, "__refreshDirtyWindow", {
			"writable" : false, 
			"enumerable" : false
		});




		nexacro._xreNamedColorList = 
			{
			"" : "", 
			"@gradation" : "", 
			"aliceblue" : "#F0F8FF", 
			"antiquewhite" : "#FAEBD7", 
			"aqua" : "#00FFFF", 
			"aquamarine" : "#7FFFD4", 
			"azure" : "#F0FFFF", 
			"beige" : "#F5F5DC", 
			"bisque" : "#FFE4C4", 
			"black" : "#000000", 
			"blanchedalmond" : "#FFEBCD", 
			"blue" : "#0000FF", 
			"blueviolet" : "#8A2BE2", 
			"brown" : "#A52A2A", 
			"burlywood" : "#DEB887", 
			"cadetblue" : "#5F9EA0", 
			"chartreuse" : "#7FFF00", 
			"chocolate" : "#D2691E", 
			"coral" : "#FF7F50", 
			"cornflowerblue" : "#6495ED", 
			"cornsilk" : "#FFF8DC", 
			"crimson" : "#DC143C", 
			"cyan" : "#00FFFF", 
			"darkblue" : "#00008B", 
			"darkcyan" : "#008B8B", 
			"darkgoldenrod" : "#B8860B", 
			"darkgray" : "#A9A9A9", 
			"darkgreen" : "#006400", 
			"darkgrey" : "#A9A9A9", 
			"darkkhaki" : "#BDB76B", 
			"darkmagenta" : "#8B008B", 
			"darkolivegreen" : "#556B2F", 
			"darkorange" : "#FF8C00", 
			"darkorchid" : "#9932CC", 
			"darkred" : "#8B0000", 
			"darksalmon" : "#E9967A", 
			"darkseagreen" : "#8FBC8F", 
			"darkslateblue" : "#483D8B", 
			"darkslategray" : "#2F4F4F", 
			"darkslategrey" : "#2F4F4F", 
			"darkturquoise" : "#00CED1", 
			"darkviolet" : "#9400D3", 
			"deeppink" : "#FF1493", 
			"deepskyblue" : "#00BFFF", 
			"dimgray" : "#696969", 
			"dimgrey" : "#696969", 
			"dodgerblue" : "#1E90FF", 
			"firebrick" : "#B22222", 
			"floralwhite" : "#FFFAF0", 
			"forestgreen" : "#228B22", 
			"fuchsia" : "#FF00FF", 
			"gainsboro" : "#DCDCDC", 
			"ghostwhite" : "#F8F8FF", 
			"gold" : "#FFD700", 
			"goldenrod" : "#DAA520", 
			"gray" : "#808080", 
			"green" : "#008000", 
			"greenyellow" : "#ADFF2F", 
			"grey" : "#808080", 
			"honeydew" : "#F0FFF0", 
			"hotpink" : "#FF69B4", 
			"indianred" : "#CD5C5C", 
			"indigo" : "#4B0082", 
			"ivory" : "#FFFFF0", 
			"khaki" : "#F0E68C", 
			"lavender" : "#E6E6FA", 
			"lavenderblush" : "#FFF0F5", 
			"lawngreen" : "#7CFC00", 
			"lemonchiffon" : "#FFFACD", 
			"lightblue" : "#ADD8E6", 
			"lightcoral" : "#F08080", 
			"lightcyan" : "#E0FFFF", 
			"lightgoldenrodyellow" : "#FAFAD2", 
			"lightgray" : "#D3D3D3", 
			"lightgreen" : "#90EE90", 
			"lightgrey" : "#D3D3D3", 
			"lightpink" : "#FFB6C1", 
			"lightsalmon" : "#FFA07A", 
			"lightseagreen" : "#20B2AA", 
			"lightskyblue" : "#87CEFA", 
			"lightslategray" : "#778899", 
			"lightslategrey" : "#778899", 
			"lightsteelblue" : "#B0C4DE", 
			"lightyellow" : "#FFFFE0", 
			"lime" : "#00FF00", 
			"limegreen" : "#32CD32", 
			"linen" : "#FAF0E6", 
			"magenta" : "#FF00FF", 
			"maroon" : "#800000", 
			"mediumaquamarine" : "#66CDAA", 
			"mediumblue" : "#0000CD", 
			"mediumorchid" : "#BA55D3", 
			"mediumpurple" : "#9370DB", 
			"mediumseagreen" : "#3CB371", 
			"mediumslateblue" : "#7B68EE", 
			"mediumspringgreen" : "#00FA9A", 
			"mediumturquoise" : "#48D1CC", 
			"mediumvioletred" : "#C71585", 
			"midnightblue" : "#191970", 
			"mintcream" : "#F5FFFA", 
			"mistyrose" : "#FFE4E1", 
			"moccasin" : "#FFE4B5", 
			"navajowhite" : "#FFDEAD", 
			"navy" : "#000080", 
			"oldlace" : "#FDF5E6", 
			"olive" : "#808000", 
			"olivedrab" : "#6B8E23", 
			"orange" : "#FFA500", 
			"orangered" : "#FF4500", 
			"orchid" : "#DA70D6", 
			"palegoldenrod" : "#EEE8AA", 
			"palegreen" : "#98FB98", 
			"paleturquoise" : "#AFEEEE", 
			"palevioletred" : "#DB7093", 
			"papayawhip" : "#FFEFD5", 
			"peachpuff" : "#FFDAB9", 
			"peru" : "#CD853F", 
			"pink" : "#FFC0CB", 
			"plum" : "#DDA0DD", 
			"powderblue" : "#B0E0E6", 
			"purple" : "#800080", 
			"red" : "#FF0000", 
			"rosybrown" : "#BC8F8F", 
			"royalblue" : "#4169E1", 
			"saddlebrown" : "#8B4513", 
			"salmon" : "#FA8072", 
			"sandybrown" : "#F4A460", 
			"seagreen" : "#2E8B57", 
			"seashell" : "#FFF5EE", 
			"sienna" : "#A0522D", 
			"silver" : "#C0C0C0", 
			"skyblue" : "#87CEEB", 
			"slateblue" : "#6A5ACD", 
			"slategray" : "#708090", 
			"slategrey" : "#708090", 
			"snow" : "#FFFAFA", 
			"springgreen" : "#00FF7F", 
			"steelblue" : "#4682B4", 
			"tan" : "#D2B48C", 
			"teal" : "#008080", 
			"thistle" : "#D8BFD8", 
			"tomato" : "#FF6347", 
			"turquoise" : "#40E0D0", 
			"violet" : "#EE82EE", 
			"wheat" : "#F5DEB3", 
			"white" : "#FFFFFF", 
			"whitesmoke" : "#F5F5F5", 
			"yellow" : "#FFFF00", 
			"yellowgreen" : "#9ACD32"
		};

		nexacro._getWebColorFromXreColor = function (color) {
			var v = nexacro._xreNamedColorList[color];
			if (v) {
				color = v;
			}

			len = color.length;
			if (len > 0) {
				if (color.charAt(0) == '#') {
					if (len == 7) {
						color += "FF";
					}
					return parseInt(color.substring(1), 16);
				}
				else {
					return parseInt(color, 16);
				}
			}
			return 0;
		};

		nexacro._getXreColorAlpha = function (color) {
			return 255;
		};
		nexacro._getXreColorOpacity = function (color) {
			if (!color) {
				return 100;
			}
			if (typeof color != "string") {
				color = color.toString();
			}
			var v = nexacro._xreNamedColorList[color];
			if (v) {
				return 100;
			}
			len = color.length;
			if (len == 7) {
				return 100;
			}
			if (len == 9) {
				return Math.round(parseInt(color.substring(7), 16) * 100 / 255);
			}
			if (len == 8) {
				return 100;
			}
			if (len == 10) {
				return Math.round(parseInt(color.substring(8), 16) * 100 / 255);
			}
			return 100;
		};
		nexacro._getOpacityFilterFromXreColor = nexacro._emptyFn;


		nexacro._makeGradationSysValue = function (cssobj) {
			if (cssobj.style == "linear" && (cssobj.start_color || cssobj.end_color)) {
				cssobj._start_syscolor = nexacro._getWebColorFromXreColor(cssobj.start_color);
				cssobj._end_syscolor = nexacro._getWebColorFromXreColor(cssobj.end_color);

				if (cssobj.peglist.length) {
					var peglist = [];
					var arr = cssobj._parsePegList(cssobj.peglist);
					var len = arr.length;
					var valarr;
					for (var i = 0; i < len; i++) {
						valarr = arr[i];
						peglist.push(valarr[0]);
						peglist.push(nexacro._getWebColorFromXreColor(valarr[1]));
					}
					cssobj._sysvalue = peglist;
				}
			}
			else {
				cssobj._sysvalue = [];
			}
		};



		nexacro._setSystemTimer = function (_win_handle, timerfn, interval) {
			return nexacro.__setSystemTimer(_win_handle, timerfn, interval);
		};
		nexacro._clearSystemTimer = function (_win_handle, timer_handle) {
			return nexacro.__clearSystemTimer(_win_handle, timer_handle);
		};

		nexacro._getProjectBaseURL = function (url) {
			var location = url;
			return location.substring(0, location.lastIndexOf("/") + 1);
		};

		nexacro._checkLicense = function (licenseurl, xadl) {
			return nexacro.__checkLicense(licenseurl, xadl);
		};

		nexacro._updateEngine = function (key, url, version) {
			return nexacro.__updateEngine(key, url, version);
		};

		nexacro._addUpdateResoruce = function (type, updateurl, file, targetpath, ref, version, desc, failpass) {
			return nexacro.__addUpdateResource(type, updateurl, file, targetpath, ref, version, desc, failpass);
		};

		nexacro._updateResource = function () {
			return nexacro.__updateResource();
		};

		nexacro._checkActiveElement = function (element) {
			var handle = element._handle;
			if (!handle) {
				return false;
			}
			return nexacro.__checkActiveElement(handle);
		};


		nexacro._loadImageURL = function (source, target, handler) {
		};

		nexacro._loadImageBase64 = function (source, target, handler) {
		};



		nexacro._convertRealPath = function (path) {
			return nexacro.__convertRealPath(path);
		};

		nexacro._execBrowser = function (url, browserOption) {
			return nexacro.__execBrowser(url, browserOption);
		};

		nexacro._execShell = function (exeUrl) {
			return nexacro.__execShell(exeUrl);
		};

		nexacro._execNexacro = function (command) {
			return nexacro.__execNexacro(command);
		};

		nexacro._setClipboard = function (format, data) {
			return nexacro.__setClipboard(format, data);
		};

		nexacro._getClipboard = function (format) {
			return nexacro.__getClipboard(format);
		};

		nexacro._clearClipboard = function () {
			return nexacro.__clearClipboard();
		};

		nexacro._getScreenWidth = function (monitor_index) {
			return nexacro.__getScreenWidth(monitor_index);
		};

		nexacro._getScreenHeight = function (monitor_index) {
			return nexacro.__getScreenHeight(monitor_index);
		};

		nexacro._getScreenAvailWidth = function (monitor_index) {
			return nexacro.__getScreenAvailWidth(monitor_index);
		};

		nexacro._getScreenAvailHeight = function (monitor_index) {
			return nexacro.__getScreenAvailHeight(monitor_index);
		};

		nexacro._getScreenRect = function (monitor_index) {
			var rect = nexacro.__getScreenRect(monitor_index);
			return new nexacro.Rect(rect[0], rect[1], rect[2], rect[3]);
		};

		nexacro._isPrimaryMonitor = function (monitor_index) {
			if (monitor_index) {
				return nexacro.__isPrimaryMonitor(monitor_index);
			}
			return null;
		};

		nexacro._getMonitorIndex = function (cursorX, cursorY) {
			return nexacro.__getMonitorIndex(cursorX, cursorY);
		};

		nexacro._getTaskbarSize = function () {
			return nexacro.__getTaskbarSize();
		};

		nexacro._getComputerName = function () {
			return nexacro.__getComputerName();
		};

		nexacro._getCPUArchitecture = function () {
			return nexacro.__getCPUArchitecture();
		};

		nexacro._getCPUCount = function () {
			return nexacro.__getCPUCount();
		};

		nexacro._getCPUType = function () {
			return nexacro.__getCPUType();
		};

		nexacro._getLocale = function () {
			return nexacro.BrowserLang;
		};
		nexacro._getLanguage = function () {
			var arr = nexacro.BrowserLang.split('_');
			return arr ? arr[0] : 'en';
		};

		nexacro._getLoginUser = function () {
			return nexacro.__getLoginUser();
		};

		nexacro._getMobileOrientation = function () {
			return nexacro.__getMobileOrientation();
		};

		nexacro._getMobilePhoneNumber = function () {
			return nexacro.__getMobilePhoneNumber();
		};

		nexacro._getMobileProductType = function () {
			return nexacro.__getMobileProductType();
		};

		nexacro._getAccessibilityStatus = function () {
			return nexacro.__getAccessibilityStatus();
		};

		nexacro._getMobileUniqueID = function () {
			return nexacro.__getMobileUniqueID();
		};

		nexacro._getMonitorCount = function () {
			return nexacro.__getMonitorCount();
		};

		nexacro._getNavigatorName = function () {
			return nexacro.__getNavigatorName();
		};

		nexacro._getCurrentScreenID = function () {
			if (application._curscreen) {
				return application._curscreen.name;
			}

			return nexacro.__getCurrentScreenID();
		};

		nexacro._getCursorX = function () {
			return nexacro.__getCursorX();
		};

		nexacro._getCursorY = function () {
			return nexacro.__getCursorY();
		};

		nexacro._getUserAppPath = function () {
			return nexacro.__getUserAppPath();
		};

		nexacro._checkDevicePermission = function (permission_types, description) {
			return nexacro.__checkDevicePermission(permission_types);
		};

		nexacro._requestDevicePermission = function (permission_types, description) {
			return nexacro.__requestDevicePermission(permission_types, description);
		};

		nexacro._fireBeforeDblclick = nexacro._emptyFn;
		nexacro._getCompOffsetSize = function (comp) {
			var elem = comp._control_element;
			var offs = {
			};
			if (!comp || !comp._control_element) {
				offs.width = 0;
				offs.height = 0;
			}
			else {
				var w = comp._getWindow();
				offs.width = w.getWidth() - parseInt(elem.left) | 0;
				offs.height = w.getHeight() - ((parseInt(elem.top) | 0) + (parseInt(elem.height) | 0));
			}
			return offs;
		};

		nexacro._updateTextElementPositions = nexacro._emptyFn;
		nexacro._redrawVMLBorder = nexacro._emptyFn;
		nexacro._addSubComponent = nexacro._emptyFn;
		nexacro._addSubComponents = nexacro._emptyFn;
		nexacro._deleteSubComponent = nexacro._emptyFn;
		nexacro._deleteAllSubComponent = nexacro._emptyFn;
		nexacro._resetVML = nexacro._emptyFn;
		nexacro._refreshVMLContainerElement = nexacro._emptyFn;
		nexacro._refreshVMLContainerElement2 = nexacro._emptyFn;
		nexacro._notifyAccessibilityValue = nexacro._emptyFn;
		nexacro.__createLabelElementHandle = nexacro._emptyFn;
		nexacro.__getDOMNodeAccessibilityStrLabelfor = nexacro._emptyFn;

		nexacro.__createNodeObjectByType = function (doc, type) {
			switch (type) {
				case 1:
					return new nexacro.XmlElement(doc);
				case 2:
					return new nexacro.XmlAttribute(doc);
				case 3:
					return new nexacro.XmlText(doc);
				case 4:
					return new nexacro.XmlCDATASection(doc);
				case 5:
				case 6:
				case 7:
					{

						var node = new nexacro.XmlNode(doc);
						node._node_type = type;
						return node;
					}
					break;
				case 8:
					return new nexacro.XmlComment(doc);
				case 9:
					return new nexacro.XmlDocument();
				case 10:
					return new nexacro.XmlDocumentType(doc);
				case 11:
				case 12:
					{

						var node = new nexacro.XmlNode(doc);
						node._node_type = type;
						return node;
					}
					break;
			}
			return null;
		};

		if (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser == "Runtime") {
			nexacro.__openSystemCalendar = function (calendar, value) {
				nexacro.__showAndroidCalendar(calendar, value);
			};

			nexacro.__closeSystemCalendar = function () {
				nexacro.__dismissAndroidCalendar();
			};
		}
		else {
			nexacro.__openSystemCalendar = nexacro._emptyFn;
			nexacro.__closeSystemCalendar = nexacro._emptyFn;
		}

		nexacro.__pluginCallMethod = function (obj, args) {
			if (nexacro.OS == "Android" && nexacro.Browser == "Runtime") {
				var str = args[0];

				str += "(";
				for (var i = 1; i < args.length; i++) {
					if (typeof (args[i]) == "string") {
						args[i] = nexacro.replaceAll(args[i], "'", "\\'");
					}

					str += "'";
					str += args[i];
					str += "'";

					if (i + 1 < args.length) {
						str += ",";
					}
				}
				str += ")";
				if (obj) {
					obj._setUrl("javascript:" + str);
				}
			}
			else {
				var value;
				var _document = obj._plugin_object.getProperty("document");
				if (_document) {
					var _script = _document.getProperty("script");
					if (_script) {
						value = _script.callScriptMethod.apply(_script, args);
						_script.destroy();
					}
					_document.destroy();
				}
			}
			return value;
		};

		nexacro.__convertScrollLeftByRtl = function (element, v) {
			var scrollLeft = v;
			if (v === undefined) {
				scrollLeft = element._scroll_left;
			}

			if (element._isRtl(true)) {
				scrollLeft = element._parent_elem.container_maxwidth - element.width - scrollLeft;
			}
			return scrollLeft;
		};

		nexacro.__setDOMNodeStyleOverscrollBehavior = nexacro._emptyFn;


		nexacro.XmlNodeList = function () {
		};
		var _pXmlNodeList = nexacro._createPrototype(Array, nexacro.XmlNodeList);
		nexacro.XmlNodeList.prototype = _pXmlNodeList;

		_pXmlNodeList._type_name = "XmlNodeList";

		_pXmlNodeList._setFromHandleArray = function (node_hanldes, node_type, doc, parent_node, is_sibling) {
			if (node_hanldes) {
				var prev_node = null;
				for (var i = 0, n = node_hanldes.length; i < n; i++) {
					var node_handle = node_hanldes[i];
					if (node_type < 1) {
						node_type = nexacro.__xmlGetNodeType(node_handle);
					}
					var node = nexacro.__createNodeObjectByType(doc, node_type);
					if (node) {
						node._handle = node_handle;
						if (parent_node) {
							node._parent_node = parent_node;
						}
						if (prev_node) {
							prev_node._next_sibling = node;
							node._previous_sibling = prev_node;
						}
						this.push(node);

						if (is_sibling) {
							prev_node = node;
						}
					}
				}
			}
		};
		_pXmlNodeList.item = function (index) {
			if (index > -1 && this.length > index) {
				return this[index];
			}
			return null;
		};

		_pXmlNodeList._appendItem = function (new_item) {
			if (!new_item) {
				return 0;
			}

			var last_node = null;
			if (this.length) {
				last_node = this[this.length - 1];
			}

			this.push(new_item);

			if (last_node) {
				last_node._next_sibling = new_item;
				new_item._previous_sibling = last_node;
			}

			return nodes.length;
		};
		_pXmlNodeList._insertBefore = function (new_item, ref_item) {
			if (!new_item || !ref_item) {
				return 0;
			}

			var insertAt = this.indexOf(ref_item);
			if (insertAt == 0) {
				this.unshift(new_item);
			}
			else if (insertAt > 0) {
				this.splice(insertAt, 1, new_item);
			}
			else {
				this.push(new_item);
			}

			var prev_node = ref_item._previous_sibling;
			if (prev_node) {
				prev_node._next_sibling = new_item;
				new_item._previous_sibling = prev_node;
			}
			ref_item._previous_sibling = new_item;
			new_item._next_sibling = ref_item;

			return this.length;
		};
		_pXmlNodeList._insertAfter = function (new_item, ref_item) {
			if (!new_item || !ref_item) {
				return 0;
			}

			var length = this.length;
			var insertAt = this.indexOf(ref_item);
			if (insertAt >= 0 && insertAt < (length - 1)) {
				this.splice(insertAt + 1, 1, new_item);
			}
			else {
				this.push(new_item);
			}

			var next_node = ref_item._next_sibling;
			if (next_node) {
				next_node._previous_sibling = new_item;
				new_item._next_sibling = next_node;
			}
			ref_item._next_sibling = new_item;
			new_item._previous_sibling = ref_item;

			return this.length;
		};
		_pXmlNodeList._removeItem = function (item) {
			if (!item) {
				return;
			}

			var idx = this.indexOf(item);
			if (idx > -1) {
				this.splice(idx, 1);
			}

			var prev_node = item._previous_sibling;
			var next_node = item._next_sibling;
			if (prev_node) {
				prev_node._next_sibling = next_node;
			}
			if (next_node) {
				next_node._previous_sibling = prev_node;
			}
			item._previous_sibling = null;
			item._next_sibling = null;
		};
		_pXmlNodeList._replaceItem = function (new_item, old_item) {
			if (!new_item || !old_item) {
				return;
			}

			var idx = this.indexOf(old_item);
			if (idx > -1) {
				this.splice(idx, 1);
				this.splice(idx, 1, new_item);
			}

			var prev_node = old_item._previous_sibling;
			var next_node = old_item._next_sibling;
			if (prev_node) {
				prev_node._next_sibling = new_item;
			}
			if (next_node) {
				next_node._previous_sibling = new_item;
			}
			new_item._previous_sibling = prev_node;
			new_item._next_sibling = next_node;
			old_item._previous_sibling = null;
			old_item._next_sibling = null;
		};

		delete _pXmlNodeList;


		nexacro.XmlNamedNodeMap = function () {
		};
		var _pXmlNamedNodeMap = nexacro._createPrototype(nexacro.Object, nexacro.XmlNamedNodeMap);
		nexacro.XmlNamedNodeMap.prototype = _pXmlNamedNodeMap;

		_pXmlNamedNodeMap._type_name = "XmlNamedNodeMap";

		_pXmlNamedNodeMap._node_map = {
			names : [], 
			nodes : []
		};


		_pXmlNamedNodeMap.get_length = function () {
			if (!this._node_map) {
				return 0;
			}

			return this._node_map.names.length;
		};
		Object.defineProperty(_pXmlNamedNodeMap, "length", {
			get : _pXmlNamedNodeMap.get_length, 
			configurable : false
		});

		_pXmlNamedNodeMap._setFromHandleMap = function (handle_namedmap, node_type, doc, parent_node) {
			if (handle_namedmap) {
				if (this._node_map) {
					var cnt = this._node_map.names.length;
					for (var i = 0; i < cnt; i++) {
						delete this[i];
					}
				}

				var node_map = this._node_map = {
					names : [], 
					nodes : []
				};
				for (var i = 0, n = handle_namedmap.length; i < n; i++) {
					var node_name = handle_namedmap[i][0];
					var node_handle = handle_namedmap[i][1];
					if (node_type < 1) {
						node_type = nexacro.__xmlGetNodeType(node_handle);
					}
					var node = nexacro.__createNodeObjectByType(doc, node_type);
					if (node) {
						node._handle = node_handle;
						if (parent_node) {
							node._parent_node = parent_node;
						}

						node_map.names.push(node_name);
						node_map.nodes.push(node);
						this[i] = node;
					}
				}
			}
		};
		_pXmlNamedNodeMap._clear = function () {
			if (this._node_map) {
				var cnt = this._node_map.names.length;
				for (var i = 0; i < cnt; i++) {
					delete this[i];
				}
				this._node_map.names = null;
				this._node_map.nodes = null;
			}
		};
		_pXmlNamedNodeMap.getNamedItem = function (nodename) {
			var node_map = this._node_map;
			if (node_map) {
				var idx = nexacro._indexOf(node_map.names, nodename);
				if (idx > -1) {
					return node_map.nodes[idx];
				}
			}
			return null;
		};
		_pXmlNamedNodeMap.item = function (index) {
			var node_map = this._node_map;
			if (index > -1 && node_map && node_map.nodes.length > index) {
				return node_map.nodes[index];
			}
			return null;
		};
		_pXmlNamedNodeMap.removeNamedItem = function (nodename) {
			var node_map = this._node_map;
			if (node_map) {
				var idx = nexacro._indexOf(node_map.names, nodename);
				var cnt = node_map.names.length;
				if (idx > -1 && idx < cnt) {
					var remove_node = node_map.nodes[idx];
					node_map.names.splice(idx, 1);
					node_map.nodes.splice(idx, 1);
					cnt--;

					for (var i = idx; i < cnt; i++) {
						this[i] = this[i + 1];
					}
					delete this[i];

					return remove_node;
				}
			}
			return null;
		};
		_pXmlNamedNodeMap._setNamedItem = function (nodename, node) {
			var node_map = this._node_map;
			if (node_map) {
				var idx = nexacro._indexOf(node_map.names, nodename);
				if (idx > -1) {
					var rep_node = node_map.nodes.splice(idx, 1);
					node_map.nodes.splice(idx, 1, node);
					this[i] = node;
					return rep_node;
				}
				else {
					var len = node_map.names.push(nodename);
					node_map.nodes.push(node);
					this[len - 1] = node;
				}
			}
			return null;
		};

		delete _pXmlNamedNodeMap;

		nexacro.XmlNode = function (doc) {
			this._owner_document = doc;
		};

		var _pXmlNode = nexacro._createPrototype(nexacro.Object, nexacro.XmlNode);
		nexacro.XmlNode.prototype = _pXmlNode;

		_pXmlNode._type_name = "XmlNode";

		_pXmlNode._handle = null;

		_pXmlNode._owner_document = null;
		_pXmlNode._parent_node = null;
		_pXmlNode._first_child = null;
		_pXmlNode._last_child = null;
		_pXmlNode._previous_sibling = null;
		_pXmlNode._next_sibling = null;
		_pXmlNode._child_nodes = null;
		_pXmlNode._node_name = "";
		_pXmlNode._node_type = "";
		_pXmlNode._node_value = undefined;
		_pXmlNode._namespace_uri = "";
		_pXmlNode._prefix = "";
		_pXmlNode._text_content = "";


		_pXmlNode._destroy = function () {
			var handle = this._handle;
			if (handle) {
				this._handle = null;
			}
			;

			this._child_nodes = null;
			this._owner_document = null;
			this._parent_node = null;
			this._first_child = null;
			this._last_child = null;
			this._previous_sibling = null;
			this._next_sibling = null;
		};
		_pXmlNode._unlink = function () {
			this._parent_node = null;
			this._previous_sibling = null;
			this._next_sibling = null;
		};

		_pXmlNode.get_ownerDocument = function () {
			if (!this._handle) {
				return null;
			}

			var owner_document = this._owner_document;
			if (owner_document) {
				return owner_document;
			}
		};
		Object.defineProperty(_pXmlNode, "ownerDocument", {
			get : _pXmlNode.get_ownerDocument, 
			configurable : false
		});

		_pXmlNode.get_childeNodes = function () {
			if (!this._handle) {
				return null;
			}

			var childs = this._child_nodes;
			if (!childs) {
				childs = this._child_nodes = new nexacro.XmlNodeList();
				var child_handles = nexacro.__xmlGetChildNodes(this._handle);
				if (child_handles) {
					childs._setFromHandleArray(child_handles, 0, this._owner_document, this, true);
					if (childs.length) {
						this._first_child = childs[0];
						this._last_child = childs[childs.length - 1];
					}
					child_handles = null;
				}
			}
			return childs;
		};
		Object.defineProperty(_pXmlNode, "childNodes", {
			get : _pXmlNode.get_childeNodes, 
			configurable : false
		});

		_pXmlNode.get_firstChild = function () {
			if (!this._handle) {
				return null;
			}

			var first_child = this._first_child;
			if (!first_child) {
				var child_nodes = this._child_nodes;
				if (child_nodes && child_nodes.length) {
					return child_nodes.item(0);
				}

				var child_handle = nexacro.__xmlGetFirstNode(this._handle);
				if (child_handle) {
					var node_type = nexacro.__xmlGetNodeType(child_handle);
					first_child = this._first_child = nexacro.__createNodeObjectByType(this._owner_document, node_type);
					first_child._handle = child_handle;
					first_child._parent_node = this;
				}
			}
			return first_child;
		};
		Object.defineProperty(_pXmlNode, "firstChild", {
			get : _pXmlNode.get_firstChild, 
			configurable : false
		});

		_pXmlNode.get_lastChild = function () {
			if (!this._handle) {
				return null;
			}

			var last_child = this._last_child;
			if (!last_child) {
				var child_nodes = this._child_nodes;
				if (child_nodes && child_nodes.length) {
					return child_nodes.item(child_nodes.length - 1);
				}

				var child_handle = nexacro.__xmlGetLastChildNode(this._handle);
				if (child_handle) {
					var node_type = nexacro.__xmlGetNodeType(child_handle);
					last_child = this._last_child = nexacro.__createNodeObjectByType(this._owner_document, node_type);
					last_child._handle = child_handle;
					last_child._parent_node = this;
				}
			}
			return last_child;
		};
		Object.defineProperty(_pXmlNode, "lastChild", {
			get : _pXmlNode.get_lastChild, 
			configurable : false
		});

		_pXmlNode.get_nextSibling = function () {
			if (!this._handle) {
				return null;
			}

			var next_node = this._next_sibling;
			if (!next_node) {
				var next_handle = nexacro.__xmlGetNextSiblingNode(this._handle);
				if (next_handle) {
					var node_type = nexacro.__xmlGetNodeType(next_handle);
					next_node = this._next_sibling = nexacro.__createNodeObjectByType(this._owner_document, node_type);
					next_node._handle = next_handle;
					next_node._previous_sibling = this;
				}
			}
			return next_node;
		};
		Object.defineProperty(_pXmlNode, "nextSibling", {
			get : _pXmlNode.get_nextSibling, 
			configurable : false
		});

		_pXmlNode.get_previousSibling = function () {
			if (!this._handle) {
				return null;
			}

			var prev_node = this._previous_sibling;
			if (!prev_node) {
				var prev_handle = nexacro.__xmlGetPrevSiblingNode(this._handle);
				if (prev_handle) {
					var node_type = nexacro.__xmlGetNodeType(prev_handle);
					prev_node = this._previous_sibling = nexacro.__createNodeObjectByType(this._owner_document, node_type);
					prev_node._handle = prev_handle;
					prev_node._next_sibling = this;
				}
			}
			return prev_node;
		};
		Object.defineProperty(_pXmlNode, "previousSibling", {
			get : _pXmlNode.get_previousSibling, 
			configurable : false
		});

		_pXmlNode.get_parentNode = function () {
			if (!this._handle) {
				return null;
			}

			var parnet_node = this._parent_node;
			if (!parnet_node) {
				var parent_handle = nexacro.__xmlGetParentNode(this._handle);
				if (parent_handle) {
					var node_type = nexacro.__xmlGetNodeType(parent_handle);
					parnet_node = this._parent_node = nexacro.__createNodeObjectByType(this._owner_document, node_type);
					parnet_node._handle = parent_handle;
				}
			}
			return parnet_node;
		};
		Object.defineProperty(_pXmlNode, "parentNode", {
			get : _pXmlNode.get_parentNode, 
			configurable : false
		});

		_pXmlNode.get_namespaceURI = function () {
			if (!this._handle) {
				return "";
			}

			var namespace_uri = this._namespace_uri;
			if (!namespace_uri) {
				namespace_uri = this._namespace_uri = nexacro.__xmlGetNamespaceURI(this._handle);
			}
			return namespace_uri;
		};
		_pXmlNode.set_namespaceURI = function (new_nsuri) {
			if (!this._handle) {
				return;
			}

			if (nexacro.__xmlSetNamespaceURI(this._handle, new_nsuri)) {
				this._namespace_uri = new_nsuri;
			}
		};
		Object.defineProperty(_pXmlNode, "namespaceURI", {
			get : _pXmlNode.get_namespaceURI, 
			set : _pXmlNode.set_namespaceURI, 
			configurable : false
		});

		_pXmlNode.get_prefix = function () {
			if (!this._handle) {
				return "";
			}

			var prefix = this._prefix;
			if (!prefix) {
				prefix = this._prefix = nexacro.__xmlGetPrefix(this._handle);
			}
			return prefix;
		};
		_pXmlNode.set_prefix = function (new_nsprefix) {
			if (!this._handle) {
				return;
			}

			if (nexacro.__xmlSetPrefix(this._handle, new_nsprefix)) {
				this._prefix = new_nsprefix;
			}
		};
		Object.defineProperty(_pXmlNode, "prefix", {
			get : _pXmlNode.get_prefix, 
			set : _pXmlNode.set_prefix, 
			configurable : false
		});

		_pXmlNode.get_nodeName = function () {
			if (!this._handle) {
				return "";
			}

			var node_name = this._node_name;
			if (!node_name) {
				node_name = this._node_name = nexacro.__xmlGetNodeName(this._handle);
			}
			return node_name;
		};
		Object.defineProperty(_pXmlNode, "nodeName", {
			get : _pXmlNode.get_nodeName, 
			configurable : false
		});

		_pXmlNode.get_nodeType = function () {
			return this._node_type;
		};
		Object.defineProperty(_pXmlNode, "nodeType", {
			get : _pXmlNode.get_nodeType, 
			configurable : false
		});

		_pXmlNode.get_nodeValue = function () {
			if (!this._handle) {
				return undefined;
			}

			var node_value = this._node_value;
			if (node_value == undefined) {
				node_value = this._node_value = nexacro.__xmlGetNodeValue(this._handle);
			}
			return node_value;
		};
		_pXmlNode.set_nodeValue = function (new_value) {
			if (!this._handle) {
				return;
			}

			if (nexacro.__xmlSetNodeValue(this._handle, new_value)) {
				this._node_value = new_value;
			}
		};
		Object.defineProperty(_pXmlNode, "nodeValue", {
			get : _pXmlNode.get_nodeValue, 
			set : _pXmlNode.set_nodeValue, 
			configurable : false
		});


		_pXmlNode.appendChild = function (node) {
			if (!this._handle || !node || !node._handle || !(node instanceof nexacro.XmlNode)) {
				return null;
			}

			var append_handle = nexacro.__xmlAppendChild(this._handle, node._handle);
			if (append_handle) {
				var child_nodes = this._child_nodes;
				if (child_nodes) {
					child_nodes._appendItem(node);
				}
				node._parent_node = this;
				this._last_child = node;

				if (node._owner_document != this._owner_document) {
					node._owner_document = this._owner_document;
				}
				return node;
			}
			return null;
		};

		_pXmlNode.cloneNode = function (include_all) {
			if (!this._handle) {
				return null;
			}

			var clone_handle = nexacro.__xmlCloneNode(this._handle, include_all);
			if (clone_handle) {
				var node_type = this.get_nodeType();
				var clone_node = nexacro.__createNodeObjectByType(this._owner_document, node_type);
				if (clone_node) {
					clone_node._handle = clone_handle;
					clone_node._node_type = node_type;
				}
				return clone_node;
			}
			return null;
		};

		_pXmlNode.hasAttributes = function () {
			if (!this._handle) {
				return false;
			}

			return nexacro.__xmlHasAttributes(this._handle);
		};

		_pXmlNode.hasChildNodes = function () {
			if (!this._handle) {
				return false;
			}

			if (this._child_nodes && this._child_nodes.length > 0) {
				return true;
			}

			return nexacro.__xmlHasChildNodes(this._handle);
		};

		_pXmlNode.insertBefore = function (newchild, refchild) {
			if (!this._handle) {
				return null;
			}

			if (!newchild || !newchild._handle || !(newchild instanceof nexacro.XmlNode)) {
				return null;
			}

			if (!refchild || !refchild._handle || !(refchild instanceof nexacro.XmlNode)) {
				return null;
			}

			var insert_handle = nexacro.__xmlInsertBefore(this._handle, newchild._handle, refchild._handle);
			if (insert_handle) {
				var child_nodes = this._child_nodes;
				if (child_nodes) {
					child_nodes._insertBefore(newchild, refchild);
				}
				newchild._parent_node = this;

				var first_child = this._first_child;
				if (newchild == first_child) {
					this._first_child = newchild;
				}

				if (newchild._owner_document != this._owner_document) {
					newchild._owner_document = this._owner_document;
				}

				return node;
			}
			return null;
		};

		_pXmlNode.lookupNamespaceURI = function (prefix) {
			if (!this._handle) {
				return "";
			}

			return nexacro.__xmlLookupNamespaceURI(this._handle, prefix);
		};
		_pXmlNode.lookupPrefix = function (uri) {
			if (!this._handle) {
				return "";
			}

			return nexacro.__xmlLookupPrefix(this._handle, uri);
		};

		_pXmlNode.removeChild = function (node) {
			if (!this._handle || !node || !node._handle || !(node instanceof nexacro.XmlNode)) {
				return null;
			}

			var rem_handle = nexacro.__xmlRemoveChild(this._handle, node._handle);
			if (rem_handle) {
				var child_nodes = this._child_nodes;
				if (child_nodes) {
					child_nodes._removeItem(node);
				}

				var first_child = this._first_child;
				var last_child = this._last_child;
				if (node == first_child) {
					this._first_child = next_node;
				}
				if (node == last_child) {
					this._last_child = prev_node;
				}
				node._unlink();
				return node;
			}
			return null;
		};
		_pXmlNode.replaceChild = function (new_node, old_node) {
			if (!this._handle) {
				return null;
			}
			if (!new_node || !new_node._handle || !(new_node instanceof nexacro.XmlNode)) {
				return null;
			}
			if (!old_node || !old_node._handle || !(old_node instanceof nexacro.XmlNode)) {
				return null;
			}

			var rep_handle = nexacro.__xmlReplaceChild(this._handle, new_node._handle, old_node._handle);
			if (rep_handle) {
				var child_nodes = this._child_nodes;
				if (child_nodes) {
					child_nodes._replaceItem(new_node, old_node);
				}
				new_node._parent_node = this;

				var first_child = this._first_child;
				var last_child = this._last_child;
				if (old_node == first_child) {
					this._first_child = new_node;
				}
				if (old_node == last_child) {
					this._last_child = new_node;
				}

				if (new_node._owner_document != this._owner_document) {
					new_node._owner_document = this._owner_document;
				}

				old_node._unlink();
				return old_node;
			}
			return null;
		};

		delete _pXmlNode;


		nexacro.XmlElement = function (doc) {
			this._owner_document = doc;
		};

		var _pXmlElement = nexacro._createPrototype(nexacro.XmlNode, nexacro.XmlElement);
		nexacro.XmlElement.prototype = _pXmlElement;

		_pXmlElement._type_name = "XmlElement";

		_pXmlElement._attributes = null;
		_pXmlElement._base_uri = "";
		_pXmlElement._node_type = 1;


		_pXmlElement.get_attributes = function () {
			if (!this._handle) {
				return null;
			}

			var attributes = this._attributes;
			if (!attributes) {
				attributes = this.attributes = new nexacro.XmlNamedNodeMap();
				var attr_handle_map = nexacro.__xmlGetAttributes(this._handle);
				if (attr_handle_map) {
					attributes._setFromHandleMap(attr_handle_map, 1, this._owner_document, this);
					attr_handle_map = null;
				}
			}
			return attributes;
		};
		Object.defineProperty(_pXmlElement, "attributes", {
			get : _pXmlElement.get_attributes, 
			configurable : false
		});

		_pXmlElement.get_baseURI = function () {
			if (!this._handle) {
				return null;
			}

			var base_uri = this._base_uri;
			if (!base_uri) {
				base_uri = this._base_uri = nexacro.__xmlGetBaseURI(this._handle);
			}
			return base_uri;
		};
		Object.defineProperty(_pXmlElement, "baseURI", {
			get : _pXmlElement.get_baseURI, 
			configurable : false
		});

		Object.defineProperty(_pXmlElement, "tagName", {
			get : _pXmlElement.get_nodeName, 
			configurable : false
		});



		_pXmlElement._unlink = function () {
			this._parent_node = null;
			this._previous_sibling = null;
			this._attributes._clear();
			this._attributes = null;
		};

		_pXmlElement.getAttribute = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			return nexacro.__xmlGetAttribute(this._handle, name);
		};
		_pXmlElement.getAttributeNS = function (ns, name) {
			if (!this._handle || !name) {
				return null;
			}

			return nexacro.__xmlGetAttribute(this._handle, name, ns);
		};
		_pXmlElement.getAttributeNode = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			var attributes = this._attributes;
			if (!attributes) {
				attributes = this.get_attributes();
			}
			return attributes.getNamedItem(name);
		};
		_pXmlElement.getElementsByTagName = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			var elem_nodes = new nexacro.XmlNodeList();
			var elem_handles = nexacro.__xmlGetElementsByTagName(this._handle, name);
			if (elem_handles) {
				elem_nodes._setFromHandleArray(elem_handles, 1, this._owner_document);
				elem_handles = null;
			}
			return elem_nodes;
		};
		_pXmlElement.getElementsByTagNameNS = function (ns, name) {
			if (!this._handle || !name) {
				return null;
			}

			var elem_nodes = new nexacro.XmlNodeList();
			var elem_handles = nexacro.__xmlGetElementsByTagName(this._handle, name, ns);
			if (elem_handles) {
				elem_nodes._setFromHandleArray(elem_handles, 1, this._owner_document);
				elem_handles = null;
			}
			return elem_nodes;
		};

		_pXmlElement.hasAttribute = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			return nexacro.__xmlHasAttribute(this._handle, name);
		};
		_pXmlElement.hasAttributeNS = function (ns, name) {
			if (!this._handle || !name) {
				return null;
			}

			return nexacro.__xmlHasAttribute(this._handle, name, ns);
		};

		_pXmlElement.removeAttribute = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			var rem_handle = nexacro.__xmlRemoveAttribute(this._handle, name);
			if (rem_handle) {
				var attributes = this._attributes;
				if (attributes) {
					var rem_node = attributes.removeNamedItem(name);
					if (rem_node) {
						rem_node._unlink();
					}
					return rem_node;
				}
			}
			return null;
		};
		_pXmlElement.removeAttributeNS = function (ns, name) {
			if (!this._handle || !name) {
				return null;
			}

			var rem_handle = nexacro.__xmlRemoveAttribute(this._handle, name, ns);
			if (rem_handle) {
				var attributes = this._attributes;
				if (attributes) {
					var rem_node = attributes.removeNamedItem(name);
					if (rem_node) {
						rem_node._unlink();
					}
					return rem_node;
				}
			}
			return null;
		};
		_pXmlElement.removeAttributeNode = function (node) {
			if (!this._handle || !node || !node._handle || !(node instanceof nexacro.XmlAttribute)) {
				return null;
			}

			var node_name = node.get_nodeName();
			var rem_handle = nexacro.__xmlRemoveAttributeNode(this._handle, node._handle);
			if (rem_handle) {
				var attributes = this._attributes;
				if (attributes) {
					attributes.removeNamedItem(node_name);
					node._unlink();
					return node;
				}
			}
			return null;
		};

		_pXmlElement.setAttribute = function (name, value) {
			if (!this._handle || !name) {
				return;
			}

			var attributes = this._attributes;
			if (attributes) {
				var attr_node = attributes.getNamedItem(name);
				if (attr_node) {
					attr_node.set_value(value);
					return;
				}

				var attr_handle = nexacro.__xmlSetAttribute(this._handle, name, value);
				if (attr_handle) {
					attr_node = nexacro.__createNodeObjectByType(this._owner_document, 1);
					attr_node._handle = attr_handle;
					attr_node._parent_node = this;
					attributes._setNamedItem(name, attr_node);
				}
			}
			else {
				nexacro.__xmlSetAttribute(this._handle, name, value);
			}
		};
		_pXmlElement.setAttributeNS = function (ns, name, value) {
			if (!this._handle || !name) {
				return;
			}

			var attributes = this._attributes;
			if (attributes) {
				var attr_node = attributes.getNamedItem(name);
				if (attr_node) {
					attr_node.set_value(value);
					return;
				}

				var attr_handle = nexacro.__xmlSetAttribute(this._handle, name, value, ns);
				if (attr_handle) {
					attr_node = nexacro.__createNodeObjectByType(this._owner_document, 1);
					attr_node._handle = attr_handle;
					attr_node._parent_node = this;
					attributes._setNamedItem(name, attr_node);
				}
			}
			else {
				nexacro.__xmlSetAttribute(this._handle, name, value, ns);
			}
		};
		_pXmlElement.setAttributeNode = function (node) {
			if (!this._handle || !node || !node._handle || !(node instanceof nexacro.XmlAttribute)) {
				return;
			}

			var attr_name = node.get_name();
			if (!attr_name) {
				return;
			}

			var attr_handle = nexacro.__xmlSetAttributeNode(this._handle, node._handle);
			if (attr_handle) {
				node._parent_node = this;
				var attributes = this._attributes;
				if (attributes) {
					var rep_node = attributes._setNamedItem(name, node);
					if (rep_node) {
						rep_node._unlink();
						return rep_node;
					}
				}
			}
		};

		delete _pXmlElement;


		nexacro.XmlAttribute = function (doc) {
			this._owner_document = doc;
		};

		var _pXmlAttribute = nexacro._createPrototype(nexacro.XmlNode, nexacro.XmlAttribute);
		nexacro.XmlAttribute.prototype = _pXmlAttribute;

		_pXmlAttribute._type_name = "XmlAttribute";

		_pXmlAttribute._name = "";
		_pXmlAttribute._node_type = 2;


		Object.defineProperty(_pXmlAttribute, "name", {
			get : _pXmlAttribute.get_nodeName, 
			configurable : false
		});
		Object.defineProperty(_pXmlAttribute, "value", {
			get : _pXmlAttribute.get_nodeValue, 
			set : _pXmlAttribute.set_nodeValue, 
			configurable : false
		});

		delete _pXmlAttribute;


		nexacro.XmlText = function (doc) {
			this._owner_document = doc;
		};

		var _pXmlText = nexacro._createPrototype(nexacro.XmlNode, nexacro.XmlText);
		nexacro.XmlText.prototype = _pXmlText;

		_pXmlText._type_name = "XmlText";

		_pXmlText._node_type = 3;
		_pXmlText._node_name = "#text";


		Object.defineProperty(_pXmlText, "data", {
			get : _pXmlText.get_nodeValue, 
			configurable : false
		});

		_pXmlText.get_length = function () {
			if (!this._handle) {
				return null;
			}

			return nexacro.__xmlGetContentsLength(this._handle);
		};
		Object.defineProperty(_pXmlText, "length", {
			get : _pXmlText.get_length, 
			configurable : false
		});


		_pXmlText.appendData = function (string) {
			if (!this._handle) {
				return;
			}

			nexacro.__xmlAppendContentsData(this._handle, string);
			this._node_value = undefined;
		};
		_pXmlText.deleteData = function (start, length) {
			if (!this._handle) {
				return;
			}

			nexacro.__xmlDeleteContentsData(this._handle, start, length);
			this._node_value = undefined;
		};
		_pXmlText.insertData = function (start, string) {
			if (!this._handle) {
				return;
			}

			nexacro.__xmlInsertContentsData(this._handle, start, string);
			this._node_value = undefined;
		};
		_pXmlText.replaceData = function (start, length, string) {
			if (!this._handle) {
				return;
			}

			nexacro.__xmlReplaceContentsData(this._handle, start, length, string);
			this._node_value = undefined;
		};
		_pXmlText.splitText = function (offset) {
			if (!this._handle) {
				return;
			}

			var new_handle = nexacro.__xmlSplitContentsText(this._handle, offset);
			if (new_handle) {
				var text_node = nexacro.__createNodeObjectByType(this._owner_document, 3);
				text_node._handle = new_handle;

				var parent_node = this._parent_node;
				if (parent_node && parent_node._child_nodes) {
					parent_node._child_nodes._insertAfter(text_node, this);
				}
				text_node._parent_node = this._parent_node;
			}
			this._node_value = undefined;
		};

		delete _pXmlText;


		nexacro.XmlCDATASection = function (doc) {
			this._owner_document = doc;
		};

		var _pXmlCDATASection = nexacro._createPrototype(nexacro.XmlText, nexacro.XmlCDATASection);
		nexacro.XmlCDATASection.prototype = _pXmlCDATASection;

		_pXmlCDATASection._type_name = "XmlCDATASection";

		_pXmlCDATASection._node_type = 4;
		_pXmlCDATASection._node_name = "#cdata-section";

		delete _pXmlCDATASection;

		nexacro.XmlComment = function (doc) {
			this._owner_document = doc;
		};

		var _pXmlComment = nexacro._createPrototype(nexacro.XmlText, nexacro.XmlComment);
		nexacro.XmlComment.prototype = _pXmlComment;

		_pXmlComment._type_name = "XmlComment";

		_pXmlComment._node_type = 8;
		_pXmlComment._node_name = "#comment";

		_pXmlComment.splitText = null;

		delete _pXmlComment;


		nexacro.XmlDocument = function () {
		};

		var _pXmlDocument = nexacro._createPrototype(nexacro.XmlNode, nexacro.XmlDocument);
		nexacro.XmlDocument.prototype = _pXmlDocument;

		_pXmlDocument._type_name = "XmlDocument";

		_pXmlDocument._node_type = 9;
		_pXmlDocument._node_name = "#document";



		_pXmlDocument._doc_type = null;
		_pXmlDocument._document_element = null;
		_pXmlDocument._document_uri = "";

		_pXmlDocument.get_docType = function () {
			if (!this._handle) {
				return null;
			}

			var doc_type = this._doc_type;
			if (doc_type) {
				return doc_type;
			}

			var type_handle = nexacro.__xmlGetDocType(this._handle);
			if (type_handle) {
				doc_type = this._doc_type = nexacro.__createNodeObjectByType(this, 10);
				doc_type._handle = type_handle;
			}
			return doc_type;
		};
		Object.defineProperty(_pXmlDocument, "docType", {
			get : _pXmlDocument.get_docType, 
			configurable : false
		});

		_pXmlDocument.get_documentElement = function () {
			if (!this._handle) {
				return null;
			}

			var document_element = this._document_element;
			if (document_element) {
				return document_element;
			}

			var node_handle = nexacro.__xmlGetDocumentElement(this._handle);
			if (node_handle) {
				document_element = this._document_element = nexacro.__createNodeObjectByType(this, 1);
				document_element._handle = node_handle;
			}
			return document_element;
		};
		Object.defineProperty(_pXmlDocument, "documentElement", {
			get : _pXmlDocument.get_documentElement, 
			configurable : false
		});

		_pXmlDocument.get_documentURI = function () {
			if (!this._handle) {
				return null;
			}

			var doc_uri = this._document_uri;
			if (!doc_uri) {
				doc_uri = this._document_uri = nexacro.__xmlGetDocumentURI(this._handle);
			}
			return doc_uri;
		};
		Object.defineProperty(_pXmlDocument, "documentURI", {
			get : _pXmlDocument.get_documentURI, 
			configurable : false
		});


		_pXmlDocument.createAttribute = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			var new_handle = nexacro.__xmlCreateAttribute(this._handle, name);
			if (new_handle) {
				var new_node = nexacro.__createNodeObjectByType(this, 2);
				new_node._handle = new_handle;
				return new_node;
			}
			return null;
		};
		_pXmlDocument.createCDATASection = function (data) {
			if (!this._handle) {
				return null;
			}

			var new_handle = nexacro.__xmlCreateCDATASection(this._handle, data);
			if (new_handle) {
				var new_node = nexacro.__createNodeObjectByType(this, 4);
				new_node._handle = new_handle;
				return new_node;
			}
			return null;
		};
		_pXmlDocument.createComment = function (data) {
			if (!this._handle) {
				return null;
			}

			var new_handle = nexacro.__xmlCreateComment(this._handle, data);
			if (new_handle) {
				var new_node = nexacro.__createNodeObjectByType(this, 8);
				new_node._handle = new_handle;
				return new_node;
			}
			return null;
		};
		_pXmlDocument.createDocumentFragment = function (data) {
			return null;
		};
		_pXmlDocument.createElement = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			var new_handle = nexacro.__xmlCreateElement(this._handle, name);
			if (new_handle) {
				var new_node = nexacro.__createNodeObjectByType(this, 1);
				new_node._handle = new_handle;
				return new_node;
			}
			return null;
		};
		_pXmlDocument.createTextNode = function (text) {
			if (!this._handle) {
				return null;
			}

			var new_handle = nexacro.__xmlCreateTextNode(this._handle, text);
			if (new_handle) {
				var new_node = nexacro.__createNodeObjectByType(this, 3);
				new_node._handle = new_handle;
				return new_node;
			}
			return null;
		};
		_pXmlDocument.getElementsByTagName = function (name) {
			if (!this._handle || !name) {
				return null;
			}

			var elem_nodes = new nexacro.XmlNodeList();
			var elem_handles = nexacro.__xmlGetElementsByTagName(this._handle, name);
			if (elem_handles) {
				elem_nodes._setFromHandleArray(elem_handles, 1, this);
				delete elem_handles;
			}
			return elem_nodes;
		};
		_pXmlDocument.getElementsByTagNameNS = function (ns, name) {
			if (!this._handle || !name) {
				return null;
			}

			var elem_nodes = new nexacro.XmlNodeList();
			var elem_handles = nexacro.__xmlGetElementsByTagName(this._handle, name, ns);
			if (elem_handles) {
				elem_nodes._setFromHandleArray(elem_handles, 1, this);
				elem_handles = null;
			}
			return elem_nodes;
		};

		delete _pXmlDocument;


		nexacro.XmlDocumentType = function () {
		};

		var _pXmlDocumentType = nexacro._createPrototype(nexacro.XmlNode, nexacro.XmlDocumentType);
		nexacro.XmlDocumentType.prototype = _pXmlDocumentType;

		_pXmlDocumentType._type_name = "XmlDocumentType";

		_pXmlDocumentType._node_type = 10;

		delete _pXmlDocumentType;

		if (nexacro.OS != "Android") {
			nexacro._roleList = 
				{
				"alert" : "0x08", 
				"application" : "0x0e", 
				"button" : "0x2b", 
				"calendar" : "0x09", 
				"checkbox" : "0x2c", 
				"columnheader" : "0x09", 
				"combobox" : "0x2e", 
				"datepicker" : "0x09", 
				"dialog" : "0x12", 
				"edit" : "0x2a", 
				"fileupload" : "0x09", 
				"form" : "0x09", 
				"frame" : "0x09", 
				"grid" : "0x09", 
				"gridcell" : "0x1d", 
				"groupbox" : "0x09", 
				"image" : "0x09", 
				"listbox" : "0x21", 
				"listitem" : "0x22", 
				"menubar" : "0x02", 
				"menu" : "0x0b", 
				"menuitem" : "0x0c", 
				"none" : "0x09", 
				"progressbar" : "0x09", 
				"radio" : "0x09", 
				"radioitem" : "0x2d", 
				"rowheader" : "0x09", 
				"scrollbar" : "0x03", 
				"slider" : "0x33", 
				"spin" : "0x34", 
				"splitter" : "0x15", 
				"static" : "0x29", 
				"statusbar" : "0x17", 
				"tab" : "0x3c", 
				"tabitem" : "0x25", 
				"tabpage" : "0x25", 
				"textbox" : "0x2a", 
				"titlebar" : "0x01", 
				"toolbar" : "0x16", 
				"tooltip" : "0x0d", 
				"treegrid" : "0x09", 
				"treeitem" : "0x24", 
				"link" : "0x1e"
			};
		}
		else {
			nexacro._roleList = 
				{
				"alert" : "0x08", 
				"application" : "0x0e", 
				"button" : "0x2b", 
				"calendar" : "0x09", 
				"checkbox" : "0x2c", 
				"columnheader" : "0x19", 
				"combobox" : "0x2e", 
				"datepicker" : "0x09", 
				"dialog" : "0x12", 
				"edit" : "0x2a", 
				"fileupload" : "0x09", 
				"form" : "0x09", 
				"frame" : "0x09", 
				"grid" : "0x09", 
				"gridcell" : "0x1d", 
				"groupbox" : "0x09", 
				"image" : "0x28", 
				"listbox" : "0x21", 
				"listitem" : "0x22", 
				"menubar" : "0x02", 
				"menu" : "0x0b", 
				"menuitem" : "0x0c", 
				"none" : "0x09", 
				"progressbar" : "0x09", 
				"radio" : "0x2d", 
				"radioitem" : "0x2d", 
				"rowheader" : "0x09", 
				"scrollbar" : "0x03", 
				"slider" : "0x33", 
				"spin" : "0x34", 
				"splitter" : "0x15", 
				"static" : "0x29", 
				"statusbar" : "0x17", 
				"tab" : "0x3c", 
				"tabitem" : "0x25", 
				"tabpage" : "0x25", 
				"textbox" : "0x2a", 
				"titlebar" : "0x01", 
				"toolbar" : "0x16", 
				"tooltip" : "0x0d", 
				"treegrid" : "0x09", 
				"treeitem" : "0x24", 
				"link" : "0x1e", 
				"webbrowser" : "0x50"
			};
		}

		nexacro.__checkHighContrast = function () {
			return false;
		};

		nexacro._setBrowserErrorMsg = function () {
			var errorcode = ["comm_http_400", "comm_http_404", "comm_http_405", "comm_http_500", "comm_http_503", "comm_http_499", "comm_http_599", "comm_http_401", "comm_http_402", "comm_http_403", "comm_http_406", "comm_http_407", "comm_http_408", "comm_http_301", "comm_http_302", "comm_http_305", "comm_http_307", "native_notexist_licensefile", "native_expire_license", "native_invalid_licensefile", "native_license_invaliddomain", "native_license_fail_parse", "native_license_invalidservice", "native_check_loadmodule", "msg_access_invalid_file", "msg_access_invalid_domain", "msg_permit_folder", "msg_permit_domain", "range_argument", "msg_elevation_required", "msg_access_invalid_object", "msg_permit_object"
			];

			var cnt = errorcode.length;
			var error = [];
			for (var i = 0; i < cnt; i++) {
				errormsg = application._getErrorMessge(errorcode[i]);
				nexacro.__setBrowserErrorMsg(errorcode[i], errormsg);
			}
		};

		nexacro._adjustPopupPosition = function (comp, x, y, align) {
			var alignPosition = comp._getAlignPosition(x, y, align);

			var _left = alignPosition[0];
			var _top = alignPosition[1];

			comp._popup(_left, _top, comp._width, comp._height);
		};

		nexacro._initApplication = function () {
			nexacro.__initApplication();
		};

		nexacro._AppliedTitleBarHeight = function (frame, h) {
			if (nexacro.isPluginMode == true) {
				if (frame instanceof nexacro.MainFrame) {
					return 0;
				}
			}

			return h;
		};

		nexacro._AppliedStatusBarHeight = function (frame, h) {
			if (nexacro.isPluginMode == true) {
				if (frame instanceof nexacro.MainFrame) {
					return 0;
				}
			}

			return h;
		};

		nexacro._isPluginMode = function () {
			return nexacro.__isPluginMode();
		};

		nexacro._getUserAgent = function () {
			return "";
		};

		nexacro._refreshCaret = function () {
		};

		nexacro._deleteRefreshNode = function () {
		};

		nexacro._applyZoomEdge = function () {
		};

		nexacro._applyScreenAutozoom = function () {
			var curscreen = application._curscreen;
			if (!curscreen) {
				return;
			}

			if (curscreen._cur_type != "phone" && curscreen._cur_type != "tablet") {
				return;
			}

			if (curscreen.screenwidth !== undefined && nexacro._toBoolean(curscreen.autozoom) == true) {
				var zoom_factor = 0;

				if (nexacro.__setCurrentScreenInfo && nexacro.__getCurrentScreenScale) {
					nexacro.__setCurrentScreenInfo(curscreen.name, curscreen.screenwidth, curscreen.sizeorientation, curscreen.autozoom, nexacro._minimum_scale, nexacro._maximum_scale, curscreen._device_width);
					var scale = nexacro.__getCurrentScreenScale();
					if (scale) {
						zoom_factor = scale * 100;
					}
				}

				if (zoom_factor == 0) {
					var zoom_fitting_width = Math.abs(parseInt(curscreen.screenwidth));
					zoom_factor = curscreen._device_width * 100 / zoom_fitting_width;
				}

				nexacro._zoom_factor = zoom_factor;
			}
		};

		nexacro._isRuntimeProtocol = function (name) {
			return nexacro.__isRuntimeProtocol(name);
		};

		nexacro._setProtocolVar = function (name, key, val) {
			nexacro.__setProtocolVar(name, key, val);
		};

		nexacro._isSimulator = function () {
			return nexacro.__isSimulator();
		};

		nexacro._releaseImageUrl = function (url) {
			return nexacro.__releaseImageUrl(url);
		};

		nexacro._setLocalStorage = nexacro._emptyFn;
		nexacro._copyLocalStorage = nexacro._emptyFn;
		nexacro._deleteLocalStorage = nexacro._emptyFn;
		nexacro._findLocalStorage = nexacro._emptyFn;

		nexacro._getLocalStorage = function (key, defaultvalue) {
			return application[key];
		};

		nexacro._setRunBaseWindow = function (_window) {
			if (application._runbase_window) {
				return false;
			}
			application._runbase_window = _window;
			return true;
		};

		nexacro._getDisplayScale = function () {
			return nexacro.__getDisplayScale();
		};

		nexacro._sleep = function (delaytime) {
			if (nexacro.Browser == "Runtime") {
				nexacro.__sleep(delaytime);
			}
			else {
				var then = new Date().getTime();
				var now = then;

				while ((now - then) < delaytime) {
					now = new Date().getTime();
				}
			}
		};

		nexacro.__setCheckVersion = nexacro._emptyFn;

		nexacro._recordHeapSnapshot = function (v) {
			var bWrite = (v != undefined) ? nexacro._toBoolean(v) : true;
			nexacro.__recordHeapSnapshot(bWrite);
		};

		nexacro._findComponentForID = nexacro._emptyFn;
		nexacro._isCors = function (iscors) {
			return false;
		};

		nexacro._setPostMessage = nexacro._emptyFn;
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.Point) {
	nexacro.Point = function (x, y) {
		this.x = (x | 0);
		this.y = (y | 0);
	};
	var _pPoint = nexacro.Point.prototype;

	_pPoint.copy = function () {
		return new nexacro.Point(this.x, this.y);
	};
	_pPoint.equals = function (p) {
		return (this.x == p.x && this.y == p.y);
	};
	_pPoint.isWithin = function (p, threshold) {
		if (!threshold) {
			threshold = {
				x : threshold
			};
			threshold.y = threshold.x;
		}
		return (this.x <= p.x + threshold.x && this.x >= p.x - threshold.x && 
			this.y <= p.y + threshold.y && this.y >= p.y - threshold.y);
	};

	_pPoint.translate = function (x, y) {
		this.x += (x | 0);
		this.y += (x | 0);
	};

	_pPoint.roundedEquals = function (p) {
		return (Math.round(this.x) == Math.round(p.x) && Math.round(this.y) == Math.round(p.y));
	};

	delete _pPoint;

	nexacro.Point.fromEvent = function (x, y) {
		return new nexacro.Point(x, y);
	};
}

if (!nexacro.Offset) {
	nexacro.Offset = function (x, y) {
		this.x = (x | 0);
		this.y = (y | 0);
	};

	var _pOffset = nexacro.Offset.prototype;

	_pOffset.copy = function () {
		return new nexacro.Offset(this.x, this.y);
	};

	_pOffset.copyFrom = function (p) {
		this.x = p.x;
		this.y = p.y;
	};

	_pOffset.equals = function (offset) {
		if (!(offset instanceof nexacro.Offset)) {
			throw new Error('offset must be an instance of nexacro.Offset');
		}
		return (this.x == offset.x && this.y == offset.y);
	};

	_pOffset.round = function (to) {
		if (!((+to) != (+to))) {
			var factor = Math.pow(10, to);
			this.x = Math.round(this.x * factor) / factor;
			this.y = Math.round(this.y * factor) / factor;
		}
		else {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
		}
	};

	_pOffset.isZero = function () {
		return (this.x == 0 && this.y == 0);
	};

	nexacro.Offset.fromObject = function (obj) {
		return new nexacro.Offset(obj.x, obj.y);
	};

	delete _pOffset;
}

if (!nexacro.Region) {
	nexacro.Region = function (t, r, b, l) {
		var me = this;
		me.top = t;
		me.right = r;
		me.bottom = b;
		me.left = l;
		me[0] = l;
		me[1] = t;
	};
	var _pRegion = nexacro.Region.prototype;

	_pRegion.contains = function (region) {
		var me = this;
		return (region.left >= me.left && region.right <= me.right
			 && region.top >= me.top && region.bottom <= me.bottom);
	};

	_pRegion.intersect = function (region) {
		var me = this, t = Math.max(me.top, region.top), r = Math.min(me.right, region.right), b = Math.min(me.bottom, region.bottom), l = Math.max(me.left, region.left);

		if (b > t && r > l) {
			return new nexacro.Region(t, r, b, l);
		}
		else {
			return false;
		}
	};

	_pRegion.union = function (region) {
		var me = this, t = Math.min(me.top, region.top), r = Math.max(me.right, region.right), b = Math.max(me.bottom, region.bottom), l = Math.min(me.left, region.left);

		return new nexacro.Region(t, r, b, l);
	};

	_pRegion.constrainTo = function (region) {
		var me = this;
		me.top = this.constrain(me.top, r.top, r.bottom);
		me.bottom = this.constrain(me.bottom, r.top, r.bottom);
		me.left = this.constrain(me.left, r.left, r.right);
		me.right = this.constrain(me.right, r.left, r.right);
		return me;
	};

	_pRegion.constrain = function (num, minV, maxV) {
		num = parseFloat(num);
		if (!((+minV) != (+minV))) {
			num = Math.max(num, minV);
		}
		if (!((+maxV) != (+maxV))) {
			num = Math.min(num, maxV);
		}
		return num;
	};

	_pRegion.adjust = function (t, r, b, l) {
		var me = this;
		me.top += t;
		me.left += l;
		me.right += r;
		me.bottom += b;
		return me;
	};

	_pRegion.getOutOfBoundOffset = function (axis, p) {
		if (!(axis instanceof nexacro.Offset)) {
			if (axis == 'x') {
				return this.getOutOfBoundOffsetX(p);
			}
			else {
				return this.getOutOfBoundOffsetY(p);
			}
		}
		else {
			p = axis;
			var d = new nexacro.Offset();
			d.x = this.getOutOfBoundOffsetX(p.x);
			d.y = this.getOutOfBoundOffsetY(p.y);
			return d;
		}
	};

	_pRegion.getOutOfBoundOffsetX = function (p) {
		if (p <= this.left) {
			return this.left - p;
		}
		else if (p >= this.right) {
			return this.right - p;
		}
		return 0;
	};

	_pRegion.getOutOfBoundOffsetY = function (p) {
		if (p <= this.top) {
			return this.top - p;
		}
		else if (p >= this.bottom) {
			return this.bottom - p;
		}
		return 0;
	};
	_pRegion.isOutOfBound = function (axis, p) {
		if (!(axis instanceof nexacro.Offset)) {
			if (axis == 'x') {
				return this.isOutOfBoundX(p);
			}
			else {
				return this.isOutOfBoundY(p);
			}
		}
		else {
			p = axis;
			return (this.isOutOfBoundX(p.x) || this.isOutOfBoundY(p.y));
		}
	};

	_pRegion.isOutOfBoundX = function (p) {
		return (p < this.left || p > this.right);
	};

	_pRegion.isOutOfBoundY = function (p) {
		return (p < this.top || p > this.bottom);
	};

	_pRegion.restrict = function (axis, p, factor) {
		if (axis instanceof nexacro.Offset) {
			var newP;
			factor = p;
			p = axis;
			if (p.copy) {
				newP = p.copy();
			}
			else {
				newP = {
					x : p.x, 
					y : p.y
				};
			}
			newP.x = this.restrictX(p.x, factor);
			newP.y = this.restrictY(p.y, factor);
			return newP;
		}
		else {
			if (axis == 'x') {
				return this.restrictX(p, factor);
			}
			else {
				return this.restrictY(p, factor);
			}
		}
	};
	_pRegion.restrictX = function (p, factor) {
		if (!factor) {
			factor = 1;
		}

		if (p <= this.left) {
			p -= (p - this.left) * factor;
		}
		else if (p >= this.right) {
			p -= (p - this.right) * factor;
		}
		return p;
	};

	_pRegion.restrictY = function (p, factor) {
		if (!factor) {
			factor = 1;
		}
		if (p <= this.top) {
			p -= (p - this.top) * factor;
		}
		else if (p >= this.bottom) {
			p -= (p - this.bottom) * factor;
		}
		return p;
	};

	_pRegion.getSize = function () {
		return {
			width : this.right - this.left, 
			height : this.bottom - this.top
		};
	};

	_pRegion.copy = function () {
		return new nexacro.Region(this.top, this.right, this.bottom, this.left);
	};

	_pRegion.translateBy = function (offset) {
		this.left += offset.x;
		this.right += offset.x;
		this.top += offset.y;
		this.bottom += offset.y;
	};

	_pRegion.round = function () {
		this.top = Math.round(this.top);
		this.right = Math.round(this.right);
		this.bottom = Math.round(this.bottom);
		this.left = Math.round(this.left);
		return this;
	};

	_pRegion.equals = function (region) {
		return (this.top == region.top && this.right == region.right
			 && this.bottom == region.bottom && this.left == region.left);
	};

	delete _pRegion;
}

if (!nexacro.Rect) {
	nexacro.Rect = function (left, top, right, bottom) {
		this.left = (left | 0);
		this.top = (top | 0);
		this.right = (right | 0);
		this.bottom = (bottom | 0);

		this.width = this.right - this.left;
		this.height = this.bottom - this.top;
	};

	var _pRect = nexacro.Rect.prototype;
	_pRect.clear = function () {
		this.left = this.top = this.right = this.bottom = 0;
		this.width = this.height = 0;
	};
	_pRect.copy = function (rc) {
		this.left = rc.left;
		this.top = rc.top;
		this.right = rc.right;
		this.bottom = rc.bottom;
		this.width = rc.width;
		this.height = rc.height;
	};
	_pRect.set = function (left, top, right, bottom) {
		if (left != this.left || top != this.top || right != this.right || bottom != this.bottom) {
			this.left = (left | 0);
			this.top = (top | 0);
			this.right = (right | 0);
			this.bottom = (bottom | 0);

			this.width = this.right - this.left;
			this.height = this.bottom - this.top;
			return true;
		}
		return false;
	};
	_pRect.clone = function () {
		return new nexacro.Rect(this.left, this.top, this.right, this.bottom);
	};
	_pRect.isSame = function (rc) {
		return (this.left == rc.left) && (this.top == rc.top) && (this.right == rc.right) && (this.bottom == rc.bottom);
	};
	_pRect.isSameSize = function (rc) {
		return (this.width == rc.width) && (this.height == rc.height);
	};
	_pRect.getWidth = function () {
		return this.width;
	};
	_pRect.getHeight = function () {
		return this.height;
	};
	_pRect = null;
}

if (!nexacro.SizeRect) {
	nexacro.SizeRect = function (left, top, width, height) {
		this.left = (left | 0);
		this.top = (top | 0);
		this.width = (width | 0);
		this.height = (height | 0);
	};

	_pSizeRect = {
	};
	nexacro.SizeRect.prototype = _pSizeRect;

	_pSizeRect.clear = function () {
		this.left = this.top = this.width = this.height = 0;
	};

	_pSizeRect.copy = function (rc) {
		this.left = rc.left;
		this.top = rc.top;
		this.width = rc.width;
		this.height = rc.height;
	};

	_pSizeRect.set = function (left, top, width, height) {
		if (left != this.left || top != this.top || width != this.width || height != this.height) {
			this.left = (left | 0);
			this.top = (top | 0);
			this.width = (width | 0);
			this.height = (height | 0);
			return true;
		}
		return false;
	};

	_pSizeRect.clone = function () {
		return new nexacro.SizeRect(this.left, this.top, this.width, this.height);
	};

	_pSizeRect.isSame = function (rc) {
		return (this.left == rc.left) && (this.top == rc.top) && (this.width == rc.width) && (this.height == rc.height);
	};

	_pSizeRect.isSameSize = function (rc) {
		return ((this.width == rc.width) && (this.height == rc.height));
	};

	_pSizeRect = null;
}

if (!nexacro.Decimal) {
	nexacro.Decimal = function (v1, v2) {
		if (!(this instanceof nexacro.Decimal)) {
			return new nexacro.Decimal(v1, v2);
		}

		this.hi = 0.0;
		this.lo = 0.0;
		if (v2 == null) {
			if (typeof v1 == "boolean") {
				if (v1) {
					this.hi = 1;
				}
				else {
					this.hi = 0;
				}
			}
			else if (typeof v1 == "number") {
				this._parse(v1.toString());
			}
			else if (typeof v1 == 'object' && nexacro._obj_strcompare(v1.constructor, nexacro.Decimal)) {
				this.hi = v1.hi;
				this.lo = v1.lo;
			}
			else if (v1 != null) {
				this._parse(v1);
			}
		}
		else {
			this.hi = (v1 - 0.0);
			this.lo = (v2 - 0.0);
		}

		return this;
	};
	nexacro.Decimal._fraction_10 = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22, 1e23, 1e24, 1e25, 1e26, 1e27, 1e28, 1e29, 1e30, 1e31, 1e32, 1e33, 1e34, 1e35, 1e36, 1e37, 1e38, 1e39, 1e40, 1e41, 1e42, 1e43, 1e44, 1e45, 1e46, 1e47, 1e48, 1e49, 1e50, 1e51, 1e52, 1e53, 1e54, 1e55, 1e56, 1e57, 1e58, 1e59, 1e60, 1e61, 1e62, 1e63, 1e64, 1e65, 1e66, 1e67, 1e68, 1e69, 1e70, 1e71, 1e72, 1e73, 1e74, 1e75, 1e76, 1e77, 1e78, 1e79, 1e80, 1e81, 1e82, 1e83, 1e84, 1e85, 1e86, 1e87, 1e88, 1e89, 1e90, 1e91, 1e92, 1e93, 1e94, 1e95, 1e96, 1e97, 1e98, 1e99, 1e100, 1e101, 1e102, 1e103, 1e104, 1e105, 1e106, 1e107, 1e108, 1e109, 1e110, 1e111, 1e112, 1e113, 1e114, 1e115, 1e116, 1e117, 1e118, 1e119, 1e120, 1e121, 1e122, 1e123, 1e124, 1e125, 1e126, 1e127, 1e128, 1e129, 1e130, 1e131, 1e132, 1e133, 1e134, 1e135, 1e136, 1e137, 1e138, 1e139, 1e140, 1e141, 1e142, 1e143, 1e144, 1e145, 1e146, 1e147, 1e148, 1e149, 1e150, 1e151, 1e152, 1e153, 1e154, 1e155, 1e156, 1e157, 1e158, 1e159, 1e160, 1e161, 1e162, 1e163, 1e164, 1e165, 1e166, 1e167, 1e168, 1e169, 1e170, 1e171, 1e172, 1e173, 1e174, 1e175, 1e176, 1e177, 1e178, 1e179, 1e180, 1e181, 1e182, 1e183, 1e184, 1e185, 1e186, 1e187, 1e188, 1e189, 1e190, 1e191, 1e192, 1e193, 1e194, 1e195, 1e196, 1e197, 1e198, 1e199, 1e200, 1e201, 1e202, 1e203, 1e204, 1e205, 1e206, 1e207, 1e208, 1e209, 1e210, 1e211, 1e212, 1e213, 1e214, 1e215, 1e216, 1e217, 1e218, 1e219, 1e220, 1e221, 1e222, 1e223, 1e224, 1e225, 1e226, 1e227, 1e228, 1e229, 1e230, 1e231, 1e232, 1e233, 1e234, 1e235, 1e236, 1e237, 1e238, 1e239, 1e240, 1e241, 1e242, 1e243, 1e244, 1e245, 1e246, 1e247, 1e248, 1e249, 1e250, 1e251, 1e252, 1e253, 1e254, 1e255, 1e256, 1e257, 1e258, 1e259, 1e260, 1e261, 1e262, 1e263, 1e264, 1e265, 1e266, 1e267, 1e268, 1e269, 1e270, 1e271, 1e272, 1e273, 1e274, 1e275, 1e276, 1e277, 1e278, 1e279, 1e280, 1e281, 1e282, 1e283, 1e284, 1e285, 1e286, 1e287, 1e288, 1e289, 1e290, 1e291, 1e292, 1e293, 1e294, 1e295, 1e296, 1e297, 1e298, 1e299, 1e300, 1e301, 1e302, 1e303, 1e304, 1e305, 1e306, 1e307, 1e308
	];
	nexacro.Decimal._fraction_10_n = [1e0, 1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11, 1e-12, 1e-13, 1e-14, 1e-15, 1e-16, 1e-17, 1e-18, 1e-19, 1e-20, 1e-21, 1e-22, 1e-23, 1e-24, 1e-25, 1e-26, 1e-27, 1e-28, 1e-29, 1e-30, 1e-31, 1e-32, 1e-33, 1e-34, 1e-35, 1e-36, 1e-37, 1e-38, 1e-39, 1e-40, 1e-41, 1e-42, 1e-43, 1e-44, 1e-45, 1e-46, 1e-47, 1e-48, 1e-49, 1e-50, 1e-51, 1e-52, 1e-53, 1e-54, 1e-55, 1e-56, 1e-57, 1e-58, 1e-59, 1e-60, 1e-61, 1e-62, 1e-63, 1e-64, 1e-65, 1e-66, 1e-67, 1e-68, 1e-69, 1e-70, 1e-71, 1e-72, 1e-73, 1e-74, 1e-75, 1e-76, 1e-77, 1e-78, 1e-79, 1e-80, 1e-81, 1e-82, 1e-83, 1e-84, 1e-85, 1e-86, 1e-87, 1e-88, 1e-89, 1e-90, 1e-91, 1e-92, 1e-93, 1e-94, 1e-95, 1e-96, 1e-97, 1e-98, 1e-99, 1e-100, 1e-101, 1e-102, 1e-103, 1e-104, 1e-105, 1e-106, 1e-107, 1e-108, 1e-109, 1e-110, 1e-111, 1e-112, 1e-113, 1e-114, 1e-115, 1e-116, 1e-117, 1e-118, 1e-119, 1e-120, 1e-121, 1e-122, 1e-123, 1e-124, 1e-125, 1e-126, 1e-127, 1e-128, 1e-129, 1e-130, 1e-131, 1e-132, 1e-133, 1e-134, 1e-135, 1e-136, 1e-137, 1e-138, 1e-139, 1e-140, 1e-141, 1e-142, 1e-143, 1e-144, 1e-145, 1e-146, 1e-147, 1e-148, 1e-149, 1e-150, 1e-151, 1e-152, 1e-153, 1e-154, 1e-155, 1e-156, 1e-157, 1e-158, 1e-159, 1e-160, 1e-161, 1e-162, 1e-163, 1e-164, 1e-165, 1e-166, 1e-167, 1e-168, 1e-169, 1e-170, 1e-171, 1e-172, 1e-173, 1e-174, 1e-175, 1e-176, 1e-177, 1e-178, 1e-179, 1e-180, 1e-181, 1e-182, 1e-183, 1e-184, 1e-185, 1e-186, 1e-187, 1e-188, 1e-189, 1e-190, 1e-191, 1e-192, 1e-193, 1e-194, 1e-195, 1e-196, 1e-197, 1e-198, 1e-199, 1e-200, 1e-201, 1e-202, 1e-203, 1e-204, 1e-205, 1e-206, 1e-207, 1e-208, 1e-209, 1e-210, 1e-211, 1e-212, 1e-213, 1e-214, 1e-215, 1e-216, 1e-217, 1e-218, 1e-219, 1e-220, 1e-221, 1e-222, 1e-223, 1e-224, 1e-225, 1e-226, 1e-227, 1e-228, 1e-229, 1e-230, 1e-231, 1e-232, 1e-233, 1e-234, 1e-235, 1e-236, 1e-237, 1e-238, 1e-239, 1e-240, 1e-241, 1e-242, 1e-243, 1e-244, 1e-245, 1e-246, 1e-247, 1e-248, 1e-249, 1e-250, 1e-251, 1e-252, 1e-253, 1e-254, 1e-255, 1e-256, 1e-257, 1e-258, 1e-259, 1e-260, 1e-261, 1e-262, 1e-263, 1e-264, 1e-265, 1e-266, 1e-267, 1e-268, 1e-269, 1e-270, 1e-271, 1e-272, 1e-273, 1e-274, 1e-275, 1e-276, 1e-277, 1e-278, 1e-279, 1e-280, 1e-281, 1e-282, 1e-283, 1e-284, 1e-285, 1e-286, 1e-287, 1e-288, 1e-289, 1e-290, 1e-291, 1e-292, 1e-293, 1e-294, 1e-295, 1e-296, 1e-297, 1e-298, 1e-299, 1e-300, 1e-301, 1e-302, 1e-303, 1e-304, 1e-305, 1e-306, 1e-307, 1e-308
	];
	nexacro.Decimal._QD_SPLITTER = 134217729.0;
	nexacro.Decimal._QD_SPLIT_THRESH = 6.69692879491417e+299;
	nexacro.Decimal._zero_strs = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000'];
	nexacro.Decimal._opt_precision = 19;

	nexacro.Decimal._getPow = function (n, dec) {
		if (n == 0) {
			dec.setDouble(1.0);
			return;
		}

		var s = new nexacro.Decimal();
		s.setDouble(1.0);
		dec.setDouble(10.0);

		var N = Math.abs(n) | 0;
		if (N > 1) {
			while (N > 0) {
				if ((N % 2) | 0 == 1) {
					s.mulDecimal(dec);
				}

				N = (N / 2) | 0;
				if (N > 0) {
					dec.sqr();
				}
			}
		}
		else {
			s.setDouble(10.0);
		}

		if (n < 0) {
			dec.setDouble(1.0);
			dec.divDecimal(s);
		}
		else {
			dec.setDecimal(s);
		}

		return;
	};

	var _pDecimal = nexacro.Decimal.prototype;

	_pDecimal._parse = function (numstr) {
		this.hi = 0;
		this.lo = 0;

		var pos = 0;

		if (!numstr) {
			return;
		}

		var len = numstr.length;

		var ch;
		while (pos < len) {
			ch = numstr.charAt(pos);
			if (ch != ' ' && ch != '\t') {
				break;
			}
			pos++;
		}

		if (pos >= len) {
			this.hi = Number.NaN;
			return;
		}

		var sign = 0;
		ch = numstr.charAt(pos);
		if (ch == '-') {
			sign = 1;
			pos++;
		}
		else if (ch == '+') {
			pos++;
		}

		var ipos = pos;
		var fpos = pos;
		while (fpos < len) {
			ch = numstr.charAt(fpos);
			if (ch < '0' || ch > '9') {
				break;
			}
			fpos++;
		}

		var digits;
		var frac_offset = 0;

		var tpos = ipos;
		while (tpos < fpos) {
			pos = tpos;
			tpos += 9;
			if (tpos > fpos) {
				tpos = fpos;
				frac_offset = tpos - pos;
			}
			else {
				frac_offset = 9;
			}

			digits = 0;
			while (pos < tpos) {
				ch = numstr.charAt(pos++);
				this.mulDouble(10.0);
				this.addDouble((ch - '0') | 0);
			}
		}

		var epos, dfrac = 0;
		ch = numstr.charAt(fpos);
		if (ch == '.') {
			fpos++;
			pos = fpos;
			while (pos < len) {
				ch = numstr.charAt(pos);
				if (ch < '0' || ch > '9') {
					break;
				}
				pos++;
			}
			epos = pos;

			tpos = fpos;
			while (tpos < epos) {
				pos = tpos;
				tpos += 9;
				if (tpos > epos) {
					tpos = epos;
					frac_offset = tpos - pos;
				}
				else {
					frac_offset = 9;
				}

				digits = 0;
				while (pos < tpos) {
					ch = numstr.charAt(pos++);
					this.mulDouble(10.0);
					this.addDouble((ch - '0') | 0);
				}
				dfrac += frac_offset;
			}
		}
		else {
			epos = fpos;
		}

		var negf;
		ch = numstr.charAt(epos);
		digits = 0;
		if (ch == 'e' || ch == 'E') {
			epos++;
			ch = numstr.charAt(epos);
			if (ch == '-') {
				negf = 1;
				epos++;
			}
			else if (ch == '+') {
				negf = 0;
				epos++;
			}
			else {
				negf = 0;
			}

			pos = epos;
			while (pos < len) {
				ch = numstr.charAt(pos);
				if (ch < '0' || ch > '9') {
					break;
				}
				pos++;
			}
			len = pos + 1;
			if (len > numstr.length) {
				len = numstr.length;
			}

			pos = epos;

			while (pos < len) {
				digits *= 10;
				ch = numstr.charAt(pos++);
				digits += (ch - '0');
			}

			if (digits >= 308) {
				if (negf) {
					this.hi = 0.0;
					this.lo = 0.0;
				}
				else {
					this.hi = (sign ? -Infinity : Infinity);
					this.lo = 0.0;
				}
				return;
			}
			if (negf) {
				digits = -digits;
			}
		}

		var scale = new nexacro.Decimal();
		if (dfrac > 0) {
			digits -= dfrac;
		}

		if (digits != 0) {
			nexacro.Decimal._getPow(digits, scale);
			this.mulDecimal(scale);
		}

		if (this.hi == Infinity) {
			this.lo = 0.0;
		}

		if (sign) {
			this.hi = -this.hi;
			this.lo = -this.lo;
		}
	};

	_pDecimal.setDouble = function (hi) {
		if (typeof hi != 'number') {
			throw new TypeError("Invalid arguments type!");
		}

		this.hi = hi;
		this.lo = 0.0;
	};

	_pDecimal.setDecimal = function (dec) {
		if (!(dec instanceof nexacro.Decimal)) {
			throw new TypeError("Invalid arguments type!");
		}

		this.hi = dec.hi;
		this.lo = dec.lo;
	};

	_pDecimal.setString = function (numstr) {
		if (typeof numstr != 'string') {
			throw new TypeError("Invalid arguments type!");
		}

		this._parse(numstr);
	};

	_pDecimal.isZero = function () {
		return (this.hi == 0.0 && this.lo == 0.0);
	};
	_pDecimal.isEqual = function (dec) {
		if (!(dec instanceof nexacro.Decimal)) {
			throw new TypeError("Invalid arguments type!");
		}

		return (this.hi == dec.hi && this.lo == dec.lo);
	};
	_pDecimal.isInfinity = function () {
		return (this.hi == Infinity || this.hi == -Infinity);
	};
	_pDecimal.isNaN = function () {
		return (this.hi != this.hi);
	};
	_pDecimal.isNaNOrInf = function () {
		return (this.hi == Infinity || this.hi == -Infinity || this.hi != this.hi);
	};
	_pDecimal.isNegative = function () {
		return this.hi < 0.0 || (this.hi == 0.0 && this.lo < 0.0);
	};

	_pDecimal.addDouble = function (dval) {
		var H, S, s, e;
		S = this.hi + dval;
		e = S - this.hi;
		s = S - e;
		s = (dval - e) + (this.hi - s);
		e = s + this.lo;
		H = S + e;
		e = e + (S - H);

		this.hi = H + e;
		this.lo = e + (H - this.hi);
	};

	_pDecimal.addDecimal = function (dec) {
		var H, h, T, t, S, s, e, f;
		S = this.hi + dec.hi;
		T = this.lo + dec.lo;
		e = S - this.hi;
		f = T - this.lo;
		s = S - e;
		t = T - f;
		s = (dec.hi - e) + (this.hi - s);
		t = (dec.lo - f) + (this.lo - t);
		e = s + T;
		H = S + e;
		h = e + (S - H);
		e = t + h;

		this.hi = H + e;
		this.lo = e + (H - this.hi);
	};

	_pDecimal.subDouble = function (dval) {
		var H, S, s, e;
		S = this.hi - dval;
		e = S - this.hi;
		s = S - e;
		s = (-dval - e) + (this.hi - s);
		e = s + this.lo;
		H = S + e;
		e = e + (S - H);

		this.hi = H + e;
		this.lo = e + (H - this.hi);
	};

	_pDecimal.subDecimal = function (dec) {
		var H, h, T, t, S, s, e, f;
		S = this.hi - dec.hi;
		T = this.lo - dec.lo;
		e = S - this.hi;
		f = T - this.lo;
		s = S - e;
		t = T - f;
		s = (-dec.hi - e) + (this.hi - s);
		t = (-dec.lo - f) + (this.lo - t);
		e = s + T;
		H = S + e;
		h = e + (S - H);
		e = t + h;

		this.hi = H + e;
		this.lo = e + (H - this.hi);
	};

	_pDecimal.mulDouble = function (dval) {
		var hx, tx, hy, ty, C, c;

		var hi;
		hi = this.hi;
		if (hi > nexacro.Decimal._QD_SPLIT_THRESH || hi < -nexacro.Decimal._QD_SPLIT_THRESH) {
			hi *= 3.7252902984619140625e-09;
			C = nexacro.Decimal._QD_SPLITTER * hi;
			hx = C - hi;
			hx = C - hx;
			tx = hi - hx;
			hx = hx * 268435456.0;
			tx = tx * 268435456.0;
		}
		else {
			C = nexacro.Decimal._QD_SPLITTER * hi;
			hx = C - hi;
			hx = C - hx;
			tx = hi - hx;
		}

		hi = dval;
		if (hi > nexacro.Decimal._QD_SPLIT_THRESH || hi < -nexacro.Decimal._QD_SPLIT_THRESH) {
			hi *= 3.7252902984619140625e-09;
			c = nexacro.Decimal._QD_SPLITTER * hi;
			hy = c - hi;
			hy = c - hy;
			ty = hi - hy;
			hy = hy * 268435456.0;
			ty = ty * 268435456.0;
		}
		else {
			c = nexacro.Decimal._QD_SPLITTER * hi;
			hy = c - hi;
			hy = c - hy;
			ty = hi - hy;
		}

		C = this.hi * dval;
		c = hx * hy;
		if ((c == Infinity || c == -Infinity) && C != Infinity && C != -Infinity) {
			var tC = C * 3.7252902984619140625e-09;
			var tc = hx * 3.7252902984619140625e-09 * hy;
			c = ((((tc - tC) * 268435456.0 + hx * ty) + tx * hy) + tx * ty) + (this.lo * dval);
		}
		else {
			c = ((((c - C) + hx * ty) + tx * hy) + tx * ty) + (this.lo * dval);
		}

		this.hi = C + c;
		hx = C - this.hi;
		this.lo = c + hx;
	};

	_pDecimal.mulDecimal = function (dec) {
		var hx, tx, hy, ty, C, c;

		var hi;
		hi = this.hi;
		if (hi > nexacro.Decimal._QD_SPLIT_THRESH || hi < -nexacro.Decimal._QD_SPLIT_THRESH) {
			hi *= 3.7252902984619140625e-09;
			C = nexacro.Decimal._QD_SPLITTER * hi;
			hx = C - hi;
			hx = C - hx;
			tx = hi - hx;
			hx = hx * 268435456.0;
			tx = tx * 268435456.0;
		}
		else {
			C = nexacro.Decimal._QD_SPLITTER * hi;
			hx = C - hi;
			hx = C - hx;
			tx = hi - hx;
		}

		hi = dec.hi;
		if (hi > nexacro.Decimal._QD_SPLIT_THRESH || hi < -nexacro.Decimal._QD_SPLIT_THRESH) {
			hi *= 3.7252902984619140625e-09;
			c = nexacro.Decimal._QD_SPLITTER * hi;
			hy = c - hi;
			hy = c - hy;
			ty = hi - hy;
			hy = hy * 268435456.0;
			ty = ty * 268435456.0;
		}
		else {
			c = nexacro.Decimal._QD_SPLITTER * hi;
			hy = c - hi;
			hy = c - hy;
			ty = hi - hy;
		}

		C = this.hi * dec.hi;
		c = hx * hy;
		if ((c == Infinity || c == -Infinity) && C != Infinity && C != -Infinity) {
			var tC = C * 3.7252902984619140625e-09;
			var tc = hx * 3.7252902984619140625e-09 * hy;
			c = ((((tc - tC) * 268435456.0 + hx * ty) + tx * hy) + tx * ty) + (this.hi * dec.lo + this.lo * dec.hi);
		}
		else {
			c = ((((c - C) + hx * ty) + tx * hy) + tx * ty) + (this.hi * dec.lo + this.lo * dec.hi);
		}

		this.hi = C + c;
		hx = C - this.hi;
		this.lo = c + hx;
	};

	_pDecimal.divDouble = function (dval) {
		var q1, q2, p1, p2, s, e, h1, l1, h2, l2;

		q1 = this.hi / dval;
		p1 = q1 * dval;

		var temp, tempe;
		if (q1 > nexacro.Decimal._QD_SPLIT_THRESH || q1 < -nexacro.Decimal._QD_SPLIT_THRESH) {
			q1 *= 3.7252902984619140625e-09;
			temp = nexacro.Decimal._QD_SPLITTER * q1;
			h1 = temp - (temp - q1);
			l1 = q1 - h1;
			h1 *= 268435456.0;
			l1 *= 268435456.0;
		}
		else {
			temp = nexacro.Decimal._QD_SPLITTER * q1;
			h1 = temp - (temp - q1);
			l1 = q1 - h1;
		}

		var q2 = dval;
		if (q2 > nexacro.Decimal._QD_SPLIT_THRESH || q2 < -nexacro.Decimal._QD_SPLIT_THRESH) {
			q2 *= 3.7252902984619140625e-09;
			temp = nexacro.Decimal._QD_SPLITTER * q2;
			h2 = temp - (temp - q2);
			l2 = q2 - h2;
			h2 *= 268435456.0;
			l2 *= 268435456.0;
		}
		else {
			temp = nexacro.Decimal._QD_SPLITTER * q2;
			h2 = temp - (temp - q2);
			l2 = q2 - h2;
		}
		p2 = ((h1 * h2 - p1) + h1 * l2 + l1 * h2) + l1 * l2;

		s = this.hi - p1;
		tempe = s - this.hi;
		e = (this.hi - (s - tempe)) - (p1 + tempe) + this.lo - p2;

		q2 = (s + e) / dval;

		this.hi = q1 + q2;
		this.lo = q2 - (this.hi - q1);
	};

	_pDecimal.divDecimal = function (dec) {
		var C, c, tc;
		var r = new nexacro.Decimal(this);

		C = this.hi / dec.hi;
		var rx = new nexacro.Decimal(C, 0.0);
		rx.mulDecimal(dec);
		r.subDecimal(rx);

		c = r.hi / dec.hi;
		var ry = new nexacro.Decimal(c, 0.0);
		ry.mulDecimal(dec);
		r.subDecimal(ry);

		tc = r.hi / dec.hi;

		this.hi = C + c;
		this.lo = c - (this.hi - C);
		this.addDouble(tc);
	};

	_pDecimal.modDouble = function (dval) {
		var r = new nexacro.Decimal(this);
		r.divDouble(dval);
		r.floor();
		r.mulDouble(dval);
		this.subDecimal(r);
	};
	_pDecimal.modDecimal = function (dec) {
		var r = new nexacro.Decimal(this);
		r.divDecimal(dec);
		r.floor();
		r.mulDecimal(dec);
		this.subDecimal(r);
	};

	_pDecimal.abs = function () {
		if (this.isNegative()) {
			var s1 = -this.hi;
			var s2 = -this.lo;

			this.hi = s1 + s2;
			this.lo = s2 - (this.hi - s1);
		}
		return this;
	};

	_pDecimal.floor = function () {
		var fhi = Math.floor(this.hi);
		if (fhi == this.hi) {
			this.lo = Math.floor(this.lo);
		}
		else {
			this.hi = fhi;
			this.lo = 0.0;
		}
		return this;
	};
	_pDecimal.ceil = function () {
		var fhi = Math.ceil(this.hi);
		if (fhi == this.hi) {
			this.lo = Math.ceil(this.lo);
		}
		else {
			this.hi = fhi;
			this.lo = 0.0;
		}
		return this;
	};
	_pDecimal.round = function () {
		this.addDouble(0.5);
		return this.floor();
	};
	_pDecimal.trunc = function () {
		if (this.hi > 0.0) {
			return this.floor();
		}
		else {
			return this.ceil();
		}
	};
	_pDecimal.sqr = function () {
		var p1, p2;
		var hi = this.hi, lo = this.lo;
		var temp, ht, lt;

		p1 = hi * hi;
		if (hi > nexacro.Decimal._QD_SPLIT_THRESH || hi < -nexacro.Decimal._QD_SPLIT_THRESH) {
			hi *= 3.7252902984619140625e-09;
			temp = nexacro.Decimal._QD_SPLITTER * hi;
			ht = temp - (temp - hi);
			lt = hi - ht;
			hi = ht * 268435456.0;
			lo = lt * 268435456.0;
		}
		else {
			temp = nexacro.Decimal._QD_SPLITTER * hi;
			hi = temp - (temp - hi);
			lo = this.hi - hi;
		}

		p2 = ((hi * hi - p1) + 2.0 * hi * lo) + lo * lo;
		p2 += 2.0 * this.hi * this.lo;
		p2 += this.lo * this.lo;

		this.hi = p1 + p2;
		this.lo = p2 - (this.hi - p1);
	};

	_pDecimal.toString = function () {
		if (this.isZero()) {
			return "0";
		}

		if (this.isNaN()) {
			return "NaN";
		}

		if (this.isInfinity()) {
			return "Infinity";
		}

		var _cvt = this._getCVT();
		if (_cvt.exp >= -5 && _cvt.exp <= 24) {
			return this._toStandardStr(_cvt);
		}

		return this._toScientificStr(_cvt);
	};

	_pDecimal.valueOf = function () {
		return this.hi + this.lo;
	};
	_pDecimal._getCVT = function () {
		var sign = 0;
		var y = new nexacro.Decimal(this);

		if (this.hi < 0.0 || this.hi == 0.0 && this.lo < 0.0) {
			sign = 1;
			y.abs();
		}


		var dAbs = Math.abs(y.hi);
		var dec, off, exp = Math.floor(Math.log(dAbs) * Math.LOG10E) | 0;


		var scale = new nexacro.Decimal();
		if (exp < -300) {
			nexacro.Decimal._getPow(300, scale);
			y.mulDecimal(scale);

			nexacro.Decimal._getPow(exp + 300, scale);
			y.divDecimal(scale);
		}
		else if (exp > 300) {
			y.hi *= Math.pow(2, -53);
			y.lo *= Math.pow(2, -53);
			nexacro.Decimal._getPow(exp, scale);
			y.divDecimal(scale);
			y.hi *= Math.pow(2, 53);
			y.lo *= Math.pow(2, 53);
		}
		else {
			nexacro.Decimal._getPow(exp, scale);
			y.divDecimal(scale);
		}


		if ((y.hi > 10.0 || (y.hi == 10.0 && y.lo >= 0.0))) {
			y.divDouble(10.0);
			exp++;
		}
		else if ((y.hi < 1.0 || (y.hi == 1.0 && y.lo < 0.0))) {
			y.mulDouble(10.0);
			exp--;
		}

		var pos = 0, digit, buf = [];
		var precision = 0;

		while (pos < 32) {
			digit = y.hi | 0;

			y.subDouble(digit);
			y.mulDouble(10.0);
			buf[pos++] = digit;
		}

		var len = buf.length;


		for (var i = len - 1; i > 0; i--) {
			if (buf[i] < 0) {
				buf[i - 1]--;
				buf[i] += 10;
			}
			else if (buf[i] > 9) {
				buf[i - 1]++;
				buf[i] -= 10;
			}
		}

		if (exp < -5 || exp > 24) {
			var precision = nexacro.Decimal._opt_precision;
			if (len > precision) {
				len = buf.length = precision;
			}
		}

		if (buf[len - 1] >= 5) {
			buf[len - 2]++;
			buf[len - 1] = 0;

			i = len - 2;
			while (i > 0 && buf[i] > 9) {
				buf[i] -= 10;
				buf[--i]++;
			}
		}

		len = buf.length;


		if (buf[0] > 9) {
			exp++;
			for (i = len - 1; i >= 2; i--) {
				buf[i] = buf[i - 1];
			}

			buf[0] = 1;
			buf[1] = 0;
		}

		pos = buf.length - 1;
		while (pos > 0 && buf[pos - 1] == 0) {
			--pos;
		}

		var _cvt_info = new Object;
		_cvt_info.dec = exp + 1;
		_cvt_info.exp = exp;
		_cvt_info.sign = sign;
		_cvt_info.pos = pos;
		_cvt_info.buf = buf.join('').substr(0, pos);
		return _cvt_info;
	};

	_pDecimal._toScientificStr = function (cvt) {
		var str = '', digits = 0;
		var _cvt = cvt;
		if (_cvt == null || _cvt.pos == 0) {
			return '0';
		}

		digits = _cvt.pos;
		if (_cvt.sign) {
			str = '-';
		}

		str += _cvt.buf.charAt(0);
		if (digits > 1) {
			str += '.';
			str += _cvt.buf.substring(1);
		}

		var exp = _cvt.exp;
		if (exp != 0) {
			str += ((exp > 0) ? 'e+' : 'e');
			str += exp;
		}

		return str;
	};

	_pDecimal._toStandardStr = function (cvt) {
		var str = '', digits = 0, dec = 0;
		var _cvt = cvt;
		if (_cvt == null || _cvt.pos == 0) {
			return '0';
		}

		if (_cvt.sign) {
			str = '-';
		}

		dec = _cvt.dec;
		digits = _cvt.pos;
		var buf = _cvt.buf;
		if (dec <= 0) {
			str += '0.';
			for (var i = dec; i < 0; i++) {
				str += '0';
			}
			str += buf;
		}
		else if (digits > dec) {
			str += buf.substring(0, dec);
			str += '.';
			str += buf.substring(dec);
		}
		else {
			str += buf;
			if ((dec - digits) > 0) {
				for (var i = 0; i < (dec - digits); i++) {
					str += '0';
				}
			}
		}
		return str;
	};

	_pDecimal.toFixed = function (fractionDigits) {
		var decimal_point = ".";
		var thousands_sep = ",";
		var grouping = 0;
		var positive_sign = "";
		var negative_sign = "-";
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this, decimal_point, thousands_sep, grouping, fractionDigits, true);

		if (isNegative) {
			locale_string = negative_sign + locale_string;
		}
		else {
			locale_string = positive_sign + locale_string;
		}

		return locale_string;
	};

	_pDecimal.toExponential = function (fractionDigits) {
	};

	_pDecimal.toPrecision = function (precision) {
	};

	_pDecimal.toLocaleString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var decimal_point = locale_info.decimal_point;
		var thousands_sep = locale_info.thousands_sep;
		var grouping = locale_info.grouping;
		var positive_sign = locale_info.positive_sign;
		var negative_sign = locale_info.negative_sign;
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this, decimal_point, thousands_sep, grouping, 3);


		if (isNegative) {
			locale_string = negative_sign + locale_string;
		}
		else {
			locale_string = positive_sign + locale_string;
		}

		return locale_string;
	};

	_pDecimal.toLocaleCurrencyString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var mon_decimal_point = locale_info.mon_decimal_point;
		var mon_thousands_sep = locale_info.mon_thousands_sep;
		var int_currency_code = locale_info.int_curr_symbol;
		var currency_symbol = locale_info.currency_symbol.trim();
		var mon_grouping = locale_info.mon_grouping;
		var int_frac_digits = locale_info.int_frac_digits;
		var positive_sign = locale_info.positive_sign;
		var negative_sign = locale_info.negative_sign;
		var p_cs_precedes = locale_info.p_cs_precedes;
		var p_sep_by_space = locale_info.p_sep_by_space;
		var n_cs_precedes = locale_info.n_cs_precedes;
		var n_sep_by_space = locale_info.n_sep_by_space;
		var p_sign_position = locale_info.p_sign_posn;
		var n_sign_position = locale_info.n_sign_posn;
		var mon_n_sign_position = locale_info.mon_n_sign_posn;
		if (mon_n_sign_position != undefined) {
			n_sign_position = mon_n_sign_position;
		}

		var space_char = "\u0020";
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this, mon_decimal_point, mon_thousands_sep, mon_grouping, int_frac_digits, true);

		if (isNegative) {
			if (n_cs_precedes) {
				switch (n_sign_position) {
					case 0:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + currency_symbol + space_char + locale_string + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = negative_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = negative_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = negative_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + locale_string + negative_sign;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + space_char + locale_string + negative_sign;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + locale_string + space_char + negative_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = negative_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = negative_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = negative_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + negative_sign + locale_string;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + negative_sign + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + space_char + negative_sign + locale_string;
									}
									break;
							}
						}
						break;
				}
			}
			else {
				switch (n_sign_position) {
					case 0:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = "(" + locale_string + currency_symbol + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = negative_sign + locale_string + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = negative_sign + locale_string + space_char + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = negative_sign + locale_string + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + negative_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + negative_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + negative_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + negative_sign + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + negative_sign + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = locale_string + negative_sign + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + negative_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + negative_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + negative_sign;
									}
									break;
							}
						}
						break;
				}
			}
		}
		else {
			if (p_cs_precedes) {
				switch (p_sign_position) {
					case 0:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + currency_symbol + space_char + locale_string + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = positive_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = positive_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = positive_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + locale_string + positive_sign;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + space_char + locale_string + positive_sign;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + locale_string + space_char + positive_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = positive_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = positive_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = positive_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + positive_sign + locale_string;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + positive_sign + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + space_char + positive_sign + locale_string;
									}
									break;
							}
						}
						break;
				}
			}
			else {
				switch (p_sign_position) {
					case 0:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = "(" + locale_string + currency_symbol + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = positive_sign + locale_string + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = positive_sign + locale_string + space_char + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = positive_sign + locale_string + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + positive_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + positive_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + positive_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + positive_sign + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + positive_sign + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = locale_string + positive_sign + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + positive_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + positive_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + positive_sign;
									}
									break;
							}
						}
						break;
				}
			}
		}

		return locale_string;
	};

	_pDecimal.toFixedLocaleString = function (locale, fractionDigits) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var decimal_point = locale_info.decimal_point;
		var thousands_sep = locale_info.thousands_sep;
		var grouping = locale_info.grouping;
		var positive_sign = locale_info.positive_sign;
		var negative_sign = locale_info.negative_sign;
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this, decimal_point, thousands_sep, grouping, fractionDigits, true);

		if (isNegative) {
			locale_string = negative_sign + locale_string;
		}
		else {
			locale_string = positive_sign + locale_string;
		}

		return locale_string;
	};

	_pDecimal._getFormattedStringValue = function (value, decimal_point, thousands_sep, grouping, frac_digits, use_fraction_digits) {
		var hi = this.hi;
		var lo = this.lo;
		var value_string = value.abs().toString().split(".");
		var integer_string = value_string[0];
		var decimal_string = value_string[1];

		if (!decimal_string) {
			decimal_string = "";
		}

		var locale_string = "";
		var grouping_value;

		if (!decimal_point) {
			decimal_point = ".";
		}

		if (!thousands_sep) {
			thousands_sep = ",";
		}

		if (grouping && grouping.length > 0) {
			grouping_value = grouping[0];
		}

		if (grouping_value <= 0) {
			grouping_value = 3;
		}

		if (integer_string.length >= grouping_value && grouping_value > 0) {
			if (integer_string.length == grouping_value) {
				locale_string = integer_string.substr(integer_string.length - grouping_value, grouping_value) + locale_string;
			}
			else {
				locale_string = thousands_sep + integer_string.substr(integer_string.length - grouping_value, grouping_value) + locale_string;
			}
			integer_string = integer_string.slice(0, integer_string.length - grouping_value);
		}

		if (grouping.length > 1) {
			grouping_value = grouping[1];
		}

		if (grouping_value <= 0) {
			grouping_value = 3;
		}

		while (integer_string.length > grouping_value && grouping_value > 0) {
			locale_string = thousands_sep + integer_string.substr(integer_string.length - grouping_value, grouping_value) + locale_string;
			integer_string = integer_string.slice(0, integer_string.length - grouping_value);
		}

		locale_string = integer_string + locale_string;

		if (use_fraction_digits) {
			var i = decimal_string.length;
			var fraction_string = "";
			while (i < frac_digits) {
				fraction_string = fraction_string + "0";
				i++;
			}

			decimal_string = decimal_string + fraction_string;
			decimal_string = decimal_string.slice(0, frac_digits);
		}

		if (decimal_string) {
			locale_string = locale_string + decimal_point + decimal_string;
		}

		this.hi = hi;
		this.lo = lo;
		return locale_string;
	};

	nexacro.Decimal.MAX_VALUE = new nexacro.Decimal(1.79769313486231570815e+308, 9.97920154767359795037e+291);

	delete _pDecimal;
}

if (!nexacro.Number) {
	nexacro.Number = function (v) {
		{

			this.value = new Number(v);
		}
	};
	var _pNumber = nexacro._createPrototype(nexacro.Object, nexacro.Number);

	nexacro.Number.prototype = _pNumber;

	_pNumber.toString = function (locale) {
		return this.value.toString();
	};

	_pNumber.valueOf = function () {
		return this.value.valueOf();
	};

	_pNumber.isNegative = function () {
		return this.value < 0;
	};

	_pNumber._getFormattedStringValue = function (value, decimal_point, thousands_sep, grouping, frac_digits, use_fraction_digits) {
		var value_string = Math.abs(value).toString().split(".");

		var integer_string = value_string[0];
		var decimal_string = value_string[1];

		if (!decimal_string) {
			decimal_string = "";
		}

		var locale_string = "";
		var grouping_value;

		if (!decimal_point) {
			decimal_point = ".";
		}

		if (!thousands_sep) {
			thousands_sep = ",";
		}

		if (grouping && grouping.length > 0) {
			grouping_value = grouping[0];
		}

		if (grouping_value <= 0) {
			grouping_value = 3;
		}

		if (integer_string.length >= grouping_value && grouping_value > 0) {
			if (integer_string.length == grouping_value) {
				locale_string = integer_string.substr(integer_string.length - grouping_value, grouping_value) + locale_string;
			}
			else {
				locale_string = thousands_sep + integer_string.substr(integer_string.length - grouping_value, grouping_value) + locale_string;
			}
			integer_string = integer_string.slice(0, integer_string.length - grouping_value);
		}

		if (grouping.length > 1) {
			grouping_value = grouping[1];
		}

		if (grouping_value <= 0) {
			grouping_value = 3;
		}

		while (integer_string.length > grouping_value && grouping_value > 0) {
			locale_string = thousands_sep + integer_string.substr(integer_string.length - grouping_value, grouping_value) + locale_string;
			integer_string = integer_string.slice(0, integer_string.length - grouping_value);
		}

		locale_string = integer_string + locale_string;

		if (use_fraction_digits) {
			var i = decimal_string.length;
			var fraction_string = "";
			while (i < frac_digits) {
				fraction_string = fraction_string + "0";
				i++;
			}

			decimal_string = decimal_string + fraction_string;
			decimal_string = decimal_string.slice(0, frac_digits);
		}

		if (decimal_string) {
			locale_string = locale_string + decimal_point + decimal_string;
		}

		return locale_string;
	};

	_pNumber.toLocaleString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var decimal_point = locale_info.decimal_point;
		var thousands_sep = locale_info.thousands_sep;
		var grouping = locale_info.grouping;
		var positive_sign = locale_info.positive_sign;
		var negative_sign = locale_info.negative_sign;
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this.value, decimal_point, thousands_sep, grouping, 3);


		if (isNegative) {
			locale_string = negative_sign + locale_string;
		}
		else {
			locale_string = positive_sign + locale_string;
		}

		return locale_string;
	};

	_pNumber.toLocaleCurrencyString = function (locale) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var mon_decimal_point = locale_info.mon_decimal_point;
		var mon_thousands_sep = locale_info.mon_thousands_sep;
		var int_currency_code = locale_info.int_curr_symbol;
		var currency_symbol = locale_info.currency_symbol.trim();
		var mon_grouping = locale_info.mon_grouping;
		var int_frac_digits = locale_info.int_frac_digits;
		var positive_sign = locale_info.positive_sign;
		var negative_sign = locale_info.negative_sign;
		var p_cs_precedes = locale_info.p_cs_precedes;
		var p_sep_by_space = locale_info.p_sep_by_space;
		var n_cs_precedes = locale_info.n_cs_precedes;
		var n_sep_by_space = locale_info.n_sep_by_space;
		var p_sign_position = locale_info.p_sign_posn;
		var n_sign_position = locale_info.n_sign_posn;
		var mon_n_sign_position = locale_info.mon_n_sign_posn;
		if (mon_n_sign_position != undefined) {
			n_sign_position = mon_n_sign_position;
		}

		var space_char = "\u0020";
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this.value, mon_decimal_point, mon_thousands_sep, mon_grouping, int_frac_digits, true);

		if (isNegative) {
			if (n_cs_precedes) {
				switch (n_sign_position) {
					case 0:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + currency_symbol + space_char + locale_string + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = negative_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = negative_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = negative_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + locale_string + negative_sign;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + space_char + locale_string + negative_sign;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + locale_string + space_char + negative_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = negative_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = negative_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = negative_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + negative_sign + locale_string;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + negative_sign + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + space_char + negative_sign + locale_string;
									}
									break;
							}
						}
						break;
				}
			}
			else {
				switch (n_sign_position) {
					case 0:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = "(" + locale_string + currency_symbol + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = negative_sign + locale_string + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = negative_sign + locale_string + space_char + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = negative_sign + locale_string + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + negative_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + negative_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + negative_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + negative_sign + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + negative_sign + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = locale_string + negative_sign + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (n_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + negative_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + negative_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + negative_sign;
									}
									break;
							}
						}
						break;
				}
			}
		}
		else {
			if (p_cs_precedes) {
				switch (p_sign_position) {
					case 0:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + currency_symbol + space_char + locale_string + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + currency_symbol + locale_string + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = positive_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = positive_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = positive_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + locale_string + positive_sign;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + space_char + locale_string + positive_sign;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + locale_string + space_char + positive_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = positive_sign + currency_symbol + locale_string;
									}
									break;
								case 1:
									{

										locale_string = positive_sign + currency_symbol + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = positive_sign + space_char + currency_symbol + locale_string;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = currency_symbol + positive_sign + locale_string;
									}
									break;
								case 1:
									{

										locale_string = currency_symbol + positive_sign + space_char + locale_string;
									}
									break;
								case 2:
									{

										locale_string = currency_symbol + space_char + positive_sign + locale_string;
									}
									break;
							}
						}
						break;
				}
			}
			else {
				switch (p_sign_position) {
					case 0:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = "(" + locale_string + currency_symbol + ")";
									}
									break;
								case 1:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
								case 2:
									{

										locale_string = "(" + locale_string + space_char + currency_symbol + ")";
									}
									break;
							}
						}
						break;
					case 1:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = positive_sign + locale_string + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = positive_sign + locale_string + space_char + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = positive_sign + locale_string + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 2:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + positive_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + positive_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + positive_sign;
									}
									break;
							}
						}
						break;
					case 3:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + positive_sign + currency_symbol;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + positive_sign + currency_symbol;
									}
									break;
								case 2:
									{

										locale_string = locale_string + positive_sign + space_char + currency_symbol;
									}
									break;
							}
						}
						break;
					case 4:
						{

							switch (p_sep_by_space) {
								case 0:
									{

										locale_string = locale_string + currency_symbol + positive_sign;
									}
									break;
								case 1:
									{

										locale_string = locale_string + space_char + currency_symbol + positive_sign;
									}
									break;
								case 2:
									{

										locale_string = locale_string + currency_symbol + space_char + positive_sign;
									}
									break;
							}
						}
						break;
				}
			}
		}

		return locale_string;
	};

	_pNumber.toFixed = function (fractionDigits) {
		var decimal_point = ".";
		var thousands_sep = ",";
		var grouping = 0;
		var positive_sign = "";
		var negative_sign = "-";
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this.value, decimal_point, thousands_sep, grouping, fractionDigits, true);

		if (isNegative) {
			locale_string = negative_sign + locale_string;
		}
		else {
			locale_string = positive_sign + locale_string;
		}

		return locale_string;
	};

	_pNumber.toFixedLocaleString = function (locale, fractionDigits) {
		var locale_info = nexacro.Locale.getLocaleInfo(locale);
		var decimal_point = locale_info.decimal_point;
		var thousands_sep = locale_info.thousands_sep;
		var grouping = locale_info.grouping;
		var positive_sign = locale_info.positive_sign;
		var negative_sign = locale_info.negative_sign;
		var isNegative = this.isNegative();

		var locale_string = this._getFormattedStringValue(this.value, decimal_point, thousands_sep, grouping, fractionDigits, true);

		if (isNegative) {
			locale_string = negative_sign + locale_string;
		}
		else {
			locale_string = positive_sign + locale_string;
		}

		return locale_string;
	};

	_pNumber.toPrecesion = function (precision) {
	};

	_pNumber.toExponential = function () {
	};

	delete _pNumber;
}
if (!nexacro.BindableValue) {
	nexacro.BindableValue = function (def) {
		this._bindtype = 0;
		this._default = def;
		this._value = def;
	};
	var _pBindableValue = nexacro._createPrototype(nexacro.Object, nexacro.BindableValue);
	nexacro.BindableValue.prototype = _pBindableValue;
	_pBindableValue._type_name = "BindableValue";

	_pBindableValue.valueOf = function () {
		return this._value;
	};
	_pBindableValue.toString = function () {
		return this._value + "";
	};
	_pBindableValue._set = function (v) {
		var str = this._default;
		if (v) {
			str = v.toString();
		}

		if (v !== this._value) {
			if (v === "") {
				this._value = this._default;
				this._bindtype = 0;
			}
			else if (!v) {
				this._bindtype = 0;
				this._value = v;
			}
			else {
				this._bindtype = 0;
				var tag = str.substr(0, 4);
				tag = tag.toUpperCase();
				if (tag == "EXPR" || tag == "BIND") {
					var chk = str.substr(4, 1);
					if (tag == "EXPR" && chk == "(") {
						str = str.substr(0, 4) + ":" + str.substr(4);
					}
					else if (chk != ":") {
						this._value = v;
						return;
					}

					var expr = str.substr(4).trim();
					if (tag == "BIND") {
						this._bindtype = 1;
					}
					else {
						this._bindtype = 2;
					}
					this._bindexpr = expr.substr(1);
					this._value = str.substr(0, 4) + ":" + this._bindexpr;
				}
				else {
					this._value = v;
				}
			}
		}
	};
	_pBindableValue._set_intval = function (v) {
		var str = v.toString();
		if (v != this._value) {
			if (v == "") {
				this._value = this._default;
				this._bindtype = 0;
			}
			else {
				this._bindtype = 0;
				var tag = str.substr(0, 4);
				tag = tag.toUpperCase();
				if (tag == "EXPR" || tag == "BIND") {
					var chk = str.substr(4, 1);
					if (tag == "EXPR" && chk == "(") {
						str = str.substr(0, 4) + ":" + str.substr(4);
					}
					if (tag == "BIND") {
						this._bindtype = 1;
					}
					else {
						this._bindtype = 2;
					}

					var expr = str.substr(4).trim();
					if (/^expr(\s*):|^bind(\s*):/.test(str)) {
						this._bindexpr = expr.substr(1);
					}
					else {
						this._bindexpr = expr.substr(1, expr.length - 1);
					}
					this._value = str;
				}
				else {
					this._value = (v | 0);
				}
			}
		}
	};

	_pBindableValue._set_enumval = function (v, enumvals) {
		var str = v.toString();
		if (v != this._value) {
			if (v == "") {
				this._value = this._default;
				this._bindtype = 0;
			}
			else {
				this._bindtype = 0;
				var tag = str.substr(0, 4);
				tag = tag.toUpperCase();
				if (tag == "EXPR" || tag == "BIND") {
					var chk = str.substr(4, 1);
					if (tag == "EXPR" && chk == "(") {
						str = str.substr(0, 4) + ":" + str.substr(4);
					}
					if (tag == "BIND") {
						this._bindtype = 1;
					}
					else {
						this._bindtype = 2;
					}

					var expr = str.substr(4).trim();
					if (/^expr(\s*):|^bind(\s*):/.test(str)) {
						this._bindexpr = expr.substr(1);
					}
					else {
						this._bindexpr = expr.substr(1, expr.length - 1);
					}
					this._value = str;
				}
				else {
					var len = enumvals.length;
					for (var i = 0; i < len; i++) {
						if (v == enumvals[i]) {
							this._value = v;
							return;
						}
					}
					this._value = this._default;
				}
			}
		}
	};
}


if (!nexacro.Image) {
	nexacro.Image = function (target) {
		if (target) {
			this._target = target;
		}

		this._event_list = {
			"onload" : 1, 
			"onerror" : 1
		};
	};

	_pImageObject = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.Image);
	nexacro.Image.prototype = _pImageObject;
	_pImageObject._type_name = "Image";

	_pImageObject.height = 0;
	_pImageObject.width = 0;
	_pImageObject.src = "";
	_pImageObject._base64str = "";
	_pImageObject._handle = null;

	_pImageObject.setBase64String = function (v) {
		if (typeof v != "string") {
			return;
		}

		if (v == "") {
			this._base64str = v;
		}
		else if (v.substring(0, 10).toLowerCase() != "data:image") {
			this._base64str = "data:image;base64," + v;
		}
		else if (v.substring(0, 17).toLowerCase() != "data:image;base64") {
			var comma_idx = v.indexOf(",");
			if (comma_idx > -1) {
				var tmp = v.slice(comma_idx + 1, v.legnth);
				this._base64str = "data:image;base64," + tmp;
			}
		}
	};

	_pImageObject.getBase64String = function () {
		return this._base64str;
	};

	_pImageObject.set_src = function (v) {
		if (this.src != v) {
			this.src = v;
			this._handle = nexacro._getImageObject(v, this.on_load, this);
		}
	};

	_pImageObject.on_load = function (imageurl, width, height, _handle, errstatus, fireerrorcode, returncode, locationurl) {
		this.width = width;
		this.height = height;

		if (errstatus && errstatus < 0) {
			var errormsg;
			if (fireerrorcode) {
				errormsg = nexacro._GetSystemErrorMsg(this, fireerrorcode);
			}

			this.on_fire_onerror(this, fireerrorcode, errormsg, returncode, imageurl, locationurl);
		}
		else {
			if (_handle) {
				this._handle = _handle;
			}
			this.on_fire_onload(this, imageurl);
		}
	};

	_pImageObject.on_fire_onload = function (obj, url) {
		if (this.onload && this.onload._has_handlers) {
			var evt = new nexacro.LoadEventInfo(obj, "onload", url);
			this.onload._fireEvent(obj, evt);
		}
	};

	_pImageObject.on_fire_onerror = function (obj, errorcode, errormsg, statuscode, requesturi, locationuri, reason) {
		if (this.onerror && this.onerror._has_handlers) {
			var evt = new nexacro.ErrorEventInfo(obj, "onerror", errorcode, errormsg, this, statuscode, requesturi, locationuri, reason);
			this.onerror._fireEvent(this, evt);
		}
	};
	delete _pImageObject;
}

if (!nexacro.HotKey) {
	nexacro.HotKey = function (value) {
		this._load(value);
	};

	var _pHotKey = nexacro._createPrototype(nexacro.Object, nexacro.HotKey);
	nexacro.HotKey.prototype = _pHotKey;

	_pHotKey._modifierkey = 0;
	_pHotKey._keycode = 0;
	_pHotKey._is_registered = false;

	_pHotKey._type_name = "HotKey";

	_pHotKey._keytable = {
		"BACK" : 0x08, 
		"TAB" : 0x09, 
		"RETURN" : 0x0d, 
		"PAUSE" : 0x13, 
		"CAPITAL" : 0x14, 
		"ESCAPE" : 0x1b, 
		"SPACE" : 0x20, 
		"PRIOR" : 0x21, 
		"NEXT" : 0x22, 
		"END" : 0x23, 
		"HOME" : 0x24, 
		"LEFT" : 0x25, 
		"UP" : 0x26, 
		"RIGHT" : 0x27, 
		"DOWN" : 0x28, 
		"INSERT" : 0x2d, 
		"DELETE" : 0x2e, 
		"NUMPAD0" : 0x60, 
		"NUMPAD1" : 0x61, 
		"NUMPAD2" : 0x62, 
		"NUMPAD3" : 0x63, 
		"NUMPAD4" : 0x64, 
		"NUMPAD5" : 0x65, 
		"NUMPAD6" : 0x66, 
		"NUMPAD7" : 0x67, 
		"NUMPAD8" : 0x68, 
		"NUMPAD9" : 0x69, 
		"MULTIPLY" : 0x6a, 
		"ADD" : 0x6b, 
		"SEPARATOR" : 0x6c, 
		"SUBTRACT" : 0x6d, 
		"DECIMAL" : 0x6e, 
		"DIVIDE" : 0x6f, 
		"F1" : 0x70, 
		"F2" : 0x71, 
		"F3" : 0x72, 
		"F4" : 0x73, 
		"F5" : 0x74, 
		"F6" : 0x75, 
		"F7" : 0x76, 
		"F8" : 0x77, 
		"F9" : 0x78, 
		"F10" : 0x79, 
		"F11" : 0x7a, 
		"F12" : 0x7b, 
		"NUMLOCK" : 0x90, 
		"SCROLL" : 0x91
	};

	_pHotKey._clear = function () {
		this._modifierkey = 0;
		this._keycode = 0;
	};
	_pHotKey._load = function (value) {
		this._clear();
		if (value && value != "") {
			var ar = value.split("+");
			for (var i = 0; i < ar.length - 1; i++) {
				var token = ar[i].toUpperCase().trim();
				if (token == "CTRL" || token == "CONTROL") {
					this._modifierkey += 0x01;
				}
				if (token == "ALT") {
					this._modifierkey += 0x02;
				}
				if (token == "SHIFT") {
					this._modifierkey += 0x04;
				}
			}
			var keycode_str = ar[ar.length - 1].toUpperCase().trim();
			var keycode = this._convToKeyCode(keycode_str);
			if (keycode < 0) {
				this._clear();
				return;
			}

			this._keycode = keycode;
		}
	};
	_pHotKey._isEmpty = function () {
		if (this._keycode == 0) {
			return true;
		}
		return false;
	};
	_pHotKey._convToKeyCode = function (value) {
		var ret = -1;
		if (!value) {
			return ret;
		}

		if (value.length == 1) {
			if ((value >= 'A' && value <= 'Z') || (value >= '0' && value <= '9')) {
				ret = value.charCodeAt(0);
			}
			else if (value >= 'a' && value <= 'z') {
				ret = value.toUpperCase().charCodeAt(0);
			}
		}
		else {
			if (this._keytable[value]) {
				ret = this._keytable[value];
			}
		}

		return ret;
	};
	_pHotKey._convToKeyString = function (value) {
		var ret = -1;
		if (!value) {
			return ret;
		}

		if ((value >= 65 && value <= 90) || (value >= 48 && value <= 57)) {
			ret = String.fromCharCode(value);
		}
		else {
			for (var keystr in this._keytable) {
				if (value == this._keytable[keystr]) {
					ret = keystr;
					break;
				}
			}
		}

		return ret;
	};
	_pHotKey._toString = function () {
		var ret = "";
		if ((this._modifierkey & 0x01) == 0x01) {
			ret += "CTRL";
		}
		if ((this._modifierkey & 0x02) == 0x02) {
			if (ret.length != 0) {
				ret += "+";
			}
			ret += "ALT";
		}
		if ((this._modifierkey & 0x04) == 0x04) {
			if (ret.length != 0) {
				ret += "+";
			}
			ret += "SHIFT";
		}
		if (ret.length != 0) {
			ret += "+";
		}
		ret += this._convToKeyString(this._keycode);

		return ret;
	};

	delete _pHotKey;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (this.nexacro) {
	nexacro._errortable = 
		{
		"ko" : 
			{
			"reference_not_define" : ["%0", "가 정의되지 않았습니다. "], 
			"reference_fail_findcolumn" : ["Dataset에서 지정한 Column[", "%0", "] 을 찾지 못했습니다."], 
			"syntax_fail_parse_xml" : ["파싱 중 에러가 발생되었습니다.[", "%0", "]"], 
			"syntax_not_set_samepath" : ["form과 같은 경로로 설정할수 없습니다.[", "%0", "]"], 
			"type_invalid" : ["추가할수 없는 타입입니다.[", "%0", "]"], 
			"type_mismatch" : ["입력 파라미터의 데이터 형식이 일치하지 않습니다. [", "%0", "]"], 

			"range_argument" : ["Argument가 맞지 않습니다.[", "%0", ".", "%1", "]"], 
			"range_outof" : ["입력 파라미터가 유효 범위를 벗어났습니다. [", "%0", "]"], 
			"range_invalide" : ["입력 파라미터가 유효한 값이 아닙니다. [", "%0", "]"], 

			"native_notimplemented" : ["구현되지 않은 기능입니다. [", "%0", "]"], 
			"native_notsupport" : ["HTML5에서 지원되지 않는 객체 또는 속성입니다.", "%0", "[", "%1", "]"], 
			"native_deprecate" : ["해당 기능은 Deprecate 된 기능입니다. [", "%0", "]"], 

			"native_fail_dataset_head" : ["데이타셋의 헤더정보를 로딩하는 중 실패하였습니다."], 
			"native_fail_dataset_recode" : ["데이타셋의 레코드 정보를 로딩하는 중 실패하였습니다."], 
			"native_exist_id" : ["해당 ID를 갖는 Object 가 존재합니다. id = [", "%0", "]"], 
			"native_exist_parent" : ["parent가 이미 존재합니다. "], 
			"native_notexist_parent" : ["parent 가 존재하지 않습니다."], 
			"native_notexist_licensefile" : ["라이센스 화일이 존재하지 않습니다. "], 
			"native_expire_license" : ["라이센스 기간이 [", "%0", "]로 만료되었습니다.    "], 
			"native_invalid_licensefile" : ["라이센스 정보가 유효하지 않습니다. 라이센스를 확인하시기 바랍니다."], 
			"native_license_invaliddomain" : ["라이센스 도메인 정보가 정확하지 않습니다. 도메인 확인이 필요합니다.  [", "%0", "]"], 
			"native_license_fail_parse" : ["라이센스 도메인 정보가 정확하지 않습니다. 라이센스 화일을 분석하는 도중 에러가 발생하였습니다.  [", "%0", "]"], 
			"native_fail_openfile" : ["파일을 열지 못했습니다. [", "%0", "]"], 
			"native_license_invalidservice" : ["해당 서비스를 지원하지 않는 라이센스입니다. 라이센스를 확인하시기 바랍니다. "], 
			"native_check_loadmodule" : ["내부에 로딩되는 모듈은 인증서가 포함되어 있어야 하나 찾을 수 없습니다.\n그래도 로딩을 허용하시겠습니까?"], 

			"comm_fail_loadinvalidurl" : ["로딩하는 중에 에러가 발생하였습니다. 주소가 정확한지 확인하고 다시 시도하십시오. [", "%0", "]"], 
			"comm_fail_loadinvalidimage" : ["이미지 정보를 찾을 수 없습니다.[", "%0", "]"], 
			"comm_fail_translate_url" : ["경로를 변경하는데 오류가 발생하였습니다.[", "%0", "]"], 
			"comm_fail_loaddetail" : ["로딩하는 중에 에러가 발생하였습니다. 주소가 정확한지 확인하고 다시 시도하십시오. 경로 [", "%0", "] HTTP 에러코드 [", "%1", "]"], 
			"comm_cancel_byuser" : ["사용자에 의해 통신이 중지 되었습니다. [", "%0", "]"], 
			"comm_stop_transaction_byesc" : ["Transaction이 Esc Key에 의해 중단됩니다.  ( 표준이 아닙니다. )"], 
			"comm_fail_duplication_svcid" : ["처리중인 동일한 서비스 아이디가 있습니다. 서비스 아이디 [", "%0", "]"], 
			"comm_invalid_communication_format" : ["유효하지 않은 통신 포멧입니다."], 
			"comm_fail_networkerror" : ["네트워크 에러가 발생하였습니다. 네트워크 연결 상태를 확인하세요. 경로 [", "%0", "] HTTP 에러코드 [", "%1", "]"], 
			"comm_http_301" : ["요청한 URI가 새 URI로 변경되었습니다."], 
			"comm_http_302" : ["요청한 URI가 일시적으로 변경되었습니다."], 
			"comm_http_305" : ["요청한 자원은 반드시 Proxy Location을 사용하여 접근해야 합니다."], 
			"comm_http_307" : ["요청한 URI가 일시적으로 변경되었습니다."], 
			"comm_http_400" : ["클라이언트의 잘못된 요청으로 처리할 수 없습니다.\n 주소가 정확한지 확인하고 다시 시도하십시오.  "], 
			"comm_http_401" : ["서버에 로그온 하려는 요청사항이 서버에 들어있는 권한과 맞지 않습니다.    "], 
			"comm_http_402" : ["예약되어 있습니다.   "], 
			"comm_http_403" : ["브라우저가 접근한 디렉토리에 가용한 디폴트 페이지가 없습니다.   "], 
			"comm_http_404" : ["요청한 경로에서 문서를 찾을 수 없습니다.\n 주소가 정확한지 확인하고 다시 시도하십시오. "], 
			"comm_http_405" : ["사이트에서 페이지를 표시할 수 없습니다.  "], 
			"comm_http_406" : ["받아들일 수 없는 요청입니다.  "], 
			"comm_http_407" : ["Proxy 인증이 필요합니다.   "], 
			"comm_http_408" : ["요청시간이 지났습니다."], 
			"comm_http_500" : ["내부서버 오류입니다.   "], 
			"comm_http_503" : ["외부 서비스가 죽었거나 현재 멈춤 상태 입니다.  "], 
			"comm_http_504" : ["게이트웨이의 요청 대기시간을 초과 하였습니다."], 
			"comm_http_499" : ["요청 오류입니다.    "], 
			"comm_http_599" : ["서버 에러입니다.   "], 

			"comm_https_500" : ["SSL VerifyCert 에 실패하였습니다."], 
			"comm_https_501" : ["SSL ProxyInfo 가 변경되었거나 GetProxyInfo 에 실패하였습니다."], 
			"comm_https_502" : ["하나 이상의 오류가 서버에 의해 송신 된 보안 소켓 레이어 (SSL) 인증서에 발견되었습니다."], 
			"comm_https_503" : ["HTTP 프록시 서버는 요청을 처리 할 수 ​​없습니다."], 

			"script_error" : ["스크립트 오류입니다.[", "%[0]", "] "], 

			"msg_access_invalid_file" : ["안전하지 않은 파일에 접근합니다.\n계속 진행하시겠습니까?\n\n[", "%0", "]"], 
			"msg_access_invalid_domain" : ["안전하지 않은 도메인에 접근합니다.\n계속 진행하시겠습니까?\n\n[", "%0", "]"], 
			"msg_permit_folder" : ["이 폴더 및 하위 폴더는 항상 허용"], 
			"msg_permit_domain" : ["이 도메인은 항상 허용"], 
			"msg_access_invalid_object" : ["해당 오브젝트는 임의 명령어 실행 취약점을 유발할 수 있습니다. \n계속 진행하시겠습니까?\n"], 
			"msg_permit_object" : ["이 오브젝트는 항상 허용"], 

			"msg_update_processing" : ["실행중인 Process[", "%0", "] 가 있어서 Update가 실패하였습니다. \nProcess를 자동 종료하려면 Yes, 직접 종료 후 계속 진행은 No, Restart 후에 Update 적용은 Cancel를 선택합니다."], 
			"msg_reset_sandboxdialog" : ["프로그램 개선에 따라 폴더/도메인 접근 경고창에서 기존에 설정 하였던 허용 여부를 재설정 하여야만 합니다. 고객님의 많은 양해 부탁드립니다."], 

			"msg_start" : ["nexacro platform 을 시작합니다."], 
			"msg_search_proxyserver" : ["프록시 서버 설정 검색중."], 
			"msg_update_engine" : ["엔진 파트를 업데이트 합니다."], 
			"msg_download" : ["ADL 컨텐츠를 다운로딩 합니다."], 
			"msg_elevation_required" : ["요청한 작업을 수행하려면 권한상승이 필요합니다."], 

			"comp_incorrect_file" : ["지정된 화일이 올바르지 않습니다.  "], 
			"comp_fail_loadactivex" : ["ActiveX / Applet 수행시 에러가 발생하였습니다. [", "%0", "]"], 

			"object_push_send_byec" : ["Push 서버가 “Byec”를 보냈거나 서버와의 규약에 따라 종료되었습니다."], 
			"object_push_socket_timeout" : ["타임아웃 처리되었습니다."], 
			"object_push_fail_command_auth" : ["Command Auth Error. 현재 선택된 IP에 대해인증에 오류가 발생하였습니다."], 
			"object_push_fail_all_command_auth" : ["iplist 속성에 등록되어 있는 Push 서버로의 접속이 모두 실패했습니다."], 
			"object_push_fail_data_auth" : ["데이터 전송 채널 인증(authentication)에 오류가 발생하였습니다."], 
			"object_push_fail_connect" : ["서버로의 접속에 실패했습니다."], 
			"object_push_fail_send_receive" : ["패킷 전송(send/recv) 오류가 발생하였습니다."], 
			"object_push_connected_already" : ["이미 서버에 접속되어 있습니다."], 
			"object_push_fail_disconnect" : ["X-PUSH 서버와 접속해제(disconnect) 요청을 실패했습니다."], 
			"object_push_fail_suspend" : ["X-PUSH 서버로부터 메시지 수신중단(suspend) 요청을 실패했습니다."], 
			"object_push_fail_resume" : ["X-PUSH 서버로부터 메시지 수신 재시작(resume) 요청을 실패했습니다."], 
			"object_push_fail_command" : ["X-PUSH 서버로 topic 등록/등록해제 요청을 실패했습니다."], 
			"object_push_notfound_layouturl" : ["메시지 레이아웃 정의 파일을 찾을 수 없습니다."], 
			"object_push_invalid_layouturl" : ["메시지 레이아웃 정의 파일이 유효하지 않습니다."], 
			"object_push_fail_protocol_version" : ["메시지 포맷 버전 정보가 일치하지 않습니다."], 
			"object_push_fail_rect" : ["신뢰성 메시지에 대한 수신응답 전송에 실패했습니다."], 
			"object_push_fail_reqd" : ["미수신 메시지 요청을 실패했습니다."], 
			"object_push_fail_rgst_unrg" : ["X-PUSH 서버로 모바일 DeviceToken 정보 등록요청을 실패했습니다."], 
			"object_push_fail_adui" : ["X-PUSH 서버로 유저 topic 정보 등록요청(reqisterUser)이 실패했습니다."], 
			"object_push_fail_unui" : ["X-PUSH 서버로 유저 topic 정보 등록해제(unregisterUser)요청이 실패했습니다."], 
			"object_push_fail_msgc" : ["미수신 메시지 정보요청을 실패했습니다."], 
			"msg_accessibility_emptyline" : ["빈줄"], 
			"msg_accessibility_emptyframe" : ["빈 프레임"]
		}, 
		"en" : 
			{
			"reference_not_define" : ["%0", "is undefined identifier."], 
			"reference_fail_findcolumn" : ["Cannot found the specified column [", "%0", "] in Dataset."], 
			"syntax_fail_parse_xml" : ["error has occurred while parsing [", "%0", "]"], 
			"syntax_not_set_samepath" : ["Cannot set same path with form.[", "%0", "]"], 
			"type_invalid" : ["Type mismatch.[", "%0", "]"], 
			"type_mismatch" : ["The input parameter type is mismatch. [", "%0", "]"], 

			"range_argument" : ["The input parameter is incorrect.[", "%0", ".", "%1", "]"], 
			"range_outof" : ["The input parameter value is out of range [", "%0", "]"], 
			"range_invalide" : ["The input parameter value is wrong. [", "%0", "]"], 

			"native_notimplemented" : ["not implemented. [", "%0", "]"], 
			"native_notsupport" : ["The [", "%0", "[ object or property does not support in HTML5. [", "%1", "]"], 
			"native_deprecate" : ["Deprecated with . [", "%0", "]"], 

			"native_fail_dataset_head" : ["An error has occurred while loading Dataset header information."], 
			"native_fail_dataset_recode" : ["An error has occurred while loading record information."], 
			"native_exist_id" : ["Object with the ID [", "%0", "] already exists."], 
			"native_exist_parent" : ["parent already exists."], 
			"native_notexist_parent" : ["parent not exist."], 
			"native_notexist_licensefile" : ["not exist license file of application."], 
			"native_expire_license" : ["License period is expired for [", "%0", "]."], 
			"native_invalid_licensefile" : ["invalid license format."], 
			"native_license_invaliddomain" : ["invalid license domain.  [", "%0", "]"], 
			"native_license_fail_parse" : ["An error has occurred while analyzing License file."], 
			"native_fail_openfile" : ["fail open file. [", "%0", "]"], 
			"native_license_invalidservice" : ["check license. "], 
			"native_check_loadmodule" : ["No certificate has been found in the loaded module.\n Are you sure you continue with the loading?"], 

			"comm_fail_loadinvalidurl" : ["fail to invalid url. check url. [", "%0", "]"], 
			"comm_fail_loadinvalidimage" : ["Image Info [", "%0", "] is not found."], 
			"comm_fail_translate_url" : ["URL Translation Failed .[", "%0", "]"], 
			"comm_fail_loaddetail" : ["[", "%0", "] loading has been failed due to following http or socket error code [", "%1", "] "], 
			"comm_cancel_byuser" : ["canceled communication by user. [", "%0", "]"], 
			"comm_stop_transaction_byesc" : ["stop Transaction by esc key. ( no standard ) "], 
			"comm_fail_duplication_svcid" : ["The same service ID is running. service ID [", "%0", "]"], 
			"comm_invalid_communication_format" : ["invalid nexacro communication format."], 
			"comm_fail_networkerror" : ["A network error has occurred. Check your network connection. url [", "%0", "] HTTP error code [", "%1", "]"], 
			"comm_http_301" : ["Moved Permanently."], 
			"comm_http_302" : ["The requested resource resides temporarily under a different URI."], 
			"comm_http_305" : ["The requested resource MUST be accessed through the proxy given by the Location field."], 
			"comm_http_307" : ["The requested resource resides temporarily under a different URI."], 
			"comm_http_400" : ["Unintelligible Request.  "], 
			"comm_http_401" : ["Unauthorized.    "], 
			"comm_http_402" : ["Payment Required.  "], 
			"comm_http_403" : ["Forbidden.   "], 
			"comm_http_404" : ["failed to find the file in appropriate path. "], 
			"comm_http_405" : ["Server does not support requested method.  "], 
			"comm_http_406" : ["Not Acceptable.  "], 
			"comm_http_407" : ["Proxy authentication required  "], 
			"comm_http_408" : ["Request timeout. "], 
			"comm_http_500" : ["Internal Server Error.  "], 
			"comm_http_503" : ["Service unavailable.  "], 
			"comm_http_504" : ["timed out waiting for gateway"], 
			"comm_http_499" : ["Request Error.    "], 
			"comm_http_599" : ["Server Error.   "], 

			"comm_https_500" : ["SSL VerifyCert failed."], 
			"comm_https_501" : ["SSL ProxyInfo changed or GetProxyInfo failed."], 
			"comm_https_502" : ["One or more errors were found in the Secure Sockets Layer (SSL) certificate sent by the server."], 
			"comm_https_503" : ["HTTP proxy server was unable to process the request."], 

			"script_error" : ["script error.[", "%[0]", "] "], 

			"msg_access_invalid_file" : ["Access to unsafe file. \n Do you want to proceed?\n\n[", "%0", "]"], 
			"msg_access_invalid_domain" : ["Access to unsafe domain. \n Do you want to proceed?\n\n[", "%0", "]"], 
			"msg_permit_folder" : ["Always allow this folder and its subfolders."], 
			"msg_permit_domain" : ["Always allow this domain."], 
			"msg_access_invalid_object" : ["The object may cause weaknesses in executing arbitrary commands. \nDo you want to proceed?\n"], 
			"msg_permit_object" : ["Always allow this object."], 

			"msg_update_processing" : ["Update has failed as there is a Process [", "%0", "] in execution. Select 'Yes' to quit the Process automatically, 'Retry' to quit the Process manually and preceed, or 'Cancel' to apply the Update after Restart. "], 
			"msg_reset_sandboxdialog" : ["Improve the program based on the folder / domain in Approach Warning windows were previously set should satisfy themselves whether to allow the reset. Thank you for your patience."], 

			"msg_start" : ["Starting nexacro platform"], 
			"msg_search_proxyserver" : ["Searching Proxy Server Settings."], 
			"msg_update_engine" : ["Updating Engine Parts."], 
			"msg_download" : ["Downloading ADL Contents."], 
			"msg_elevation_required" : ["To perform the requested operation, you will need the elevation of privilege."], 

			"comp_incorrect_file" : ["The file is not correct. "], 
			"comp_fail_loadactivex" : ["Failed to execute ActiveX / Applet  [", "%0", "]"], 

			"object_push_send_byec" : ["The push server has sent “Byec”message or the connection has been terminated according to the server protocol."], 
			"object_push_socket_timeout" : ["The connection has been terminated as the timeout for the connection with the server has elapsed."], 
			"object_push_fail_command_auth" : ["The command socket authentication error occurred to the currently selected IP."], 
			"object_push_fail_all_command_auth" : ["All the push servers registered in the iplist attribution has failed to be connected."], 
			"object_push_fail_data_auth" : ["An error occurred in the authentication of the data transfer channel."], 
			"object_push_fail_connect" : ["Connection to the server has failed."], 
			"object_push_fail_send_receive" : ["An error occurred in sending and receiving packets."], 
			"object_push_connected_already" : ["You are already connected with the server."], 
			"object_push_fail_disconnect" : ["Request for disconnecting with the X-PUSH server (disconnect) has failed."], 
			"object_push_fail_suspend" : ["Request for suspending the reception of the message from the X-PUSH server (suspend) has failed."], 
			"object_push_fail_resume" : ["Request for resuming the reception of the message from the X-PUSH server (resume) has failed."], 
			"object_push_fail_command" : ["Request for registering a topic to the X-PUSH server or withdrawing a topic from the X-PUSH server (command) has failed."], 
			"object_push_notfound_layouturl" : ["The message layout definition file cannot found."], 
			"object_push_invalid_layouturl" : ["The message layout definition file is invalid."], 
			"object_push_fail_protocol_version" : ["The information on the message format version does not match."], 
			"object_push_fail_rect" : ["The response to the reliable message has failed to be transmitted."], 
			"object_push_fail_reqd" : ["Request for undelivered messages has failed."], 
			"msg_accessibility_emptyline" : ["empty line"], 
			"msg_accessibility_emptyframe" : ["empty frame"]
		}, 
		"ja" : 
			{
			"reference_not_define" : ["%0", "が定義されていません。"], 
			"reference_fail_findcolumn" : ["Datasetで指定したColumn[", "%0", "]が見つかりません。"], 
			"syntax_fail_parse_xml" : ["構文解析(Parsing)中にエラーが発生しました。[", "%0", "]"], 
			"syntax_not_set_samepath" : ["formと同じパスでは設定できません。[", "%0", "]"], 
			"type_invalid" : ["追加できないタイプです。[", "%0", "]"], 
			"type_mismatch" : ["入力パラメータのデータタイプが一致しません。[", "%0", "]"], 

			"range_argument" : ["引数に誤りがあります。[", "%0", ".", "%1", "]"], 
			"range_outof" : ["入力パラメータが有効範囲を超えています。 [", "%0", "]"], 
			"range_invalide" : ["入力パラメータが不正です。 [", "%0", "]"], 

			"native_notimplemented" : ["サポートされていない機能です。[", "%0", "]"], 
			"native_notsupport" : ["HTML5でサポートされていないオブジェクトまたはプロパティです。", "%0", "[", "%1", "]"], 
			"native_deprecate" : ["該当機能はDeprecateされた機能です。[", "%0", "]"], 

			"native_fail_dataset_head" : ["データセットのヘッダ情報のローディングに失敗しました。"], 
			"native_fail_dataset_recode" : ["データセットのレコード情報のローディングに失敗しました。"], 
			"native_exist_id" : ["該当idを持つオブジェクトが存在します。id = [", "%0", "]"], 
			"native_exist_parent" : ["parentが既に存在します。"], 
			"native_notexist_parent" : ["parentが存在しません。"], 
			"native_notexist_licensefile" : ["ライセンスファイルが存在しません。"], 
			"native_expire_license" : ["ライセンスの有効期間が[", "%0", "]で切れました。"], 
			"native_invalid_licensefile" : ["ライセンス情報が無効です。ライセンスを確認してください。"], 
			"native_license_invaliddomain" : ["ライセンスのドメイン情報が無効です。ドメインを確認してください。　[", "%0", "]"], 
			"native_license_fail_parse" : ["ライセンスのドメイン情報が無効です。ライセンスファイルの分析中にエラーが発生しました。[", "%0", "]"], 
			"native_fail_openfile" : ["ファイルが開けません。[", "%0", "]"], 
			"native_license_invalidservice" : ["該当サービスをサポートしていないライセンスです。ライセンスを確認してください。"], 
			"native_check_loadmodule" : ["内部にロードされるモジュールは、証明書が含まれている必要がありますが、見つかりません。\nそれでもロードを許可しますか？"], 

			"comm_fail_loadinvalidurl" : ["ローディング中にエラーが発生しました。パスを確認してください。 [", "%0", "]"], 
			"comm_fail_loadinvalidimage" : ["イメージ情報が見つかりません。[", "%0", "]"], 
			"comm_fail_translate_url" : ["パスの変更中にエラーが発生しました。[", "%0", "]"], 
			"comm_fail_loaddetail" : ["ローディング中にエラーが発生しました。パスを確認してください。パス [", "%0", "] HTTP エラーコード [", "%1", "]"], 
			"comm_cancel_byuser" : ["ユーザーにより通信がキャンセルされました。[", "%0", "]"], 
			"comm_stop_transaction_byesc" : ["TransactionがEsc Keyにより中断中です。( 標準ではありません。)"], 
			"comm_fail_duplication_svcid" : ["The same service ID is running. service ID [", "%0", "]"], 
			"comm_invalid_communication_format" : ["無効な通信のフォーマットです。"], 
			"comm_fail_networkerror" : ["ネットワークエラーが発生しました。ネットワークの接続状態をご確認ください。url [", "%0", "] HTTP error code [", "%1", "]"], 
			"comm_http_301" : ["リクエストされたURIが新しいURIに変更されました。"], 
			"comm_http_302" : ["リクエストされたURIが一時的に変更されました。"], 
			"comm_http_305" : ["リクエストされたリソースは、必ずProxy Locationを使用してアクセスする必要があります。"], 
			"comm_http_307" : ["リクエストされたURIが一時的に変更されました。"], 
			"comm_http_400" : ["クライアントの不正なリクエストのため、処理することができません。\n アドレスが正しいことを確認して、再試行してください。"], 
			"comm_http_401" : ["サーバーにログオンするためのリクエストが、サーバーに設定されている権限と一致しません。"], 
			"comm_http_402" : ["予約されています。"], 
			"comm_http_403" : ["ブラウザがアクセスしたディレクトリに利用可能なデフォルトページがありません。"], 
			"comm_http_404" : ["リクエストされたパスでドキュメントが見つけられません。\n アドレスが正しいことを確認して、再試行してください。"], 
			"comm_http_405" : ["サイトでページを表示することができません。"], 
			"comm_http_406" : ["許可されていないリクエストです。"], 
			"comm_http_407" : ["プロキシ認証が必要になります。"], 
			"comm_http_408" : ["リクエスト時間が経ちました。"], 
			"comm_http_500" : ["内部サーバーエラーです。 "], 
			"comm_http_503" : ["外部サービスが起動しないか、現在停止状態です。"], 
			"comm_http_504" : ["ゲートウェイを待ってタイムアウトしました。"], 
			"comm_http_499" : ["リクエストエラーです。"], 
			"comm_http_599" : ["サーバーエラーです。"], 

			"comm_https_500" : ["SSL VerifyCertに失敗しました。"], 
			"comm_https_501" : ["SSL ProxyInfoは変更またはGetProxyInfoに失敗しました。"], 
			"comm_https_502" : ["一つ以上のエラーが、サーバによって送信されたセキュア・ソケット・レイヤー（ SSL）証明書に見出されました。"], 
			"comm_https_503" : ["HTTPプロキシサーバがリクエストを処理できませんでした。"], 

			"script_error" : ["スクリプトエラーです。[", "%[0]", "] "], 

			"msg_access_invalid_file" : ["信用できないファイルにアクセスします。\n続けますか？\n\n[", "%0", "]"], 
			"msg_access_invalid_domain" : ["信用できないドメインにアクセスします。\n続けますか？\n\n[", "%0", "]"], 
			"msg_permit_folder" : ["このフォルダ配下のファイルは、常にアクセス許可"], 
			"msg_permit_domain" : ["このドメインは常にアクセス許容"], 
			"msg_access_invalid_object" : ["The object may cause weaknesses in executing arbitrary commands. \nDo you want to proceed?\n"], 
			"msg_permit_object" : ["Always allow this object."], 

			"msg_update_processing" : ["実行中のプロセス[", "%0", "]があるため、Updateに失敗しました。実行中のプロセスを自動終了する場合はYes(はい)、実行中のプロセスを直接終了させてから続ける場合はNo(いいえ), 再起動後にアップデートを適用する場合はキャンセルを選択します。"], 
			"msg_reset_sandboxdialog" : ["プログラム改善によりフォルダやドメインへのアクセス警告ウィンドウで設定したアクセス可否の設定値を再設定する必要があります。\nご了承ください。"], 

			"msg_start" : ["nexacro platformをスタートします。"], 
			"msg_search_proxyserver" : ["プロキシサーバー設定を検索中。"], 
			"msg_update_engine" : ["エンジンをアップデートします。"], 
			"msg_download" : ["ADLコンテンツをダウンロードします。"], 
			"msg_elevation_required" : ["要求された操作を実行するには、特権の昇格が必要になります。"], 

			"comp_incorrect_file" : ["指定されたファイルが不正です。"], 
			"comp_fail_loadactivex" : ["ActiveX/Appletの実行時にエラーが発生しました。[", "%0", "]"], 

			"object_push_send_byec" : ["Pushサーバーが “Byec”メッセージを送信したり、サーバーとの規約によって終了しました。"], 
			"object_push_socket_timeout" : ["サーバーとの接続時間が指定された時間を超過して接続が終了しました。"], 
			"object_push_fail_command_auth" : ["Command Auth Error、 現在選択されたIPのCommand socket認証エラーが発生しました。"], 
			"object_push_fail_all_command_auth" : ["iplist属性に登録されたすべてのPushサーバへの接続が失敗しました。"], 
			"object_push_fail_data_auth" : ["データ伝送チャネル認証(authentication)エラーが発生しました。"], 
			"object_push_fail_connect" : ["サーバー接続に失敗しました。"], 
			"object_push_fail_send_receive" : ["パケット送信(send/recv)エラーが発生しました。"], 
			"object_push_connected_already" : ["すでにサーバーに接続されています。"], 
			"object_push_fail_disconnect" : ["X-PUSHサーバーとの接続解除(disconnect)要求に失敗しました。"], 
			"object_push_fail_suspend" : ["X-PUSHサーバーからメッセージ受信停止(suspend)要求に失敗しました。"], 
			"object_push_fail_resume" : ["X-PUSHサーバーからメッセージ受信再開(resume)要求に失敗しました。"], 
			"object_push_fail_command" : ["X-PUSHサーバーでtopic登録/登録解除(command)要求に失敗しました。"], 
			"object_push_notfound_layouturl" : ["メッセージレイアウト定義ファイルを見つけられません。"], 
			"object_push_invalid_layouturl" : ["メッセージレイアウト定義ファイルが有効ではありません。"], 
			"object_push_fail_protocol_version" : ["メッセージフォーマットのバージョン情報が一致しません。"], 
			"object_push_fail_rect" : ["信頼性メッセージの受信応答の送信に失敗しました。"], 
			"object_push_fail_reqd" : ["未受信メッセージの要求に失敗しました。"], 

			"msg_accessibility_emptyline" : ["空行"], 
			"msg_accessibility_emptyframe" : ["空のフレーム"]
		}
	};
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.Browser != "Runtime") {
	if (!nexacro._init_platform_HTML5) {
		nexacro._init_platform_HTML5 = true;
		nexacro.isTouchInteraction = (nexacro.Browser == "MobileSafari" || nexacro.OS == "Android" || nexacro.OS == "iOS" || nexacro.OS == "Windows Phone");
		nexacro.SupportOrientation = ((typeof window.orientation != 'undefined') && ('onorientationchange' in window));
		nexacro.SupportTouch = ("ontouchstart" in window || ((window.navigator.pointerEnabled || window.navigator.msPointerEnabled || window.PointerEvent) && window.navigator.maxTouchPoints > 0));

		nexacro.SupportAnimationFrame = (window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame) ? true : false;
		nexacro._resize_popup_inbound = true;

		nexacro._custom_node_id = null;

		nexacro._deactivate = false;

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._createSysEvent_ForwardFuncs = function (_cur_win) {
				_cur_win._syshandler_onmessage_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmessage(htmlSysEvent, evt.target, evt);
				};

				_cur_win._is_capture = false;
				_cur_win._syshandler_onmousedown_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var elem = nexacro.__findParentElement(evt.srcElement);
					if (nexacro.Browser != "Edge" && evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON) && !_cur_win._is_capture && !(elem instanceof nexacro.InputElement)) {
						var body = id ? _cur_win.document.getElementById(id) : _cur_win.document.body;
						body.setCapture(false);
						nexacro._observeSysEvent(body, "losecapture", "onlosecapture", _cur_win._syshandler_onlosecapture_forward);
						_cur_win._is_capture = true;
					}

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);

					return nexacro._syshandler_onmousedown(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_onmouseup_forward = function (evt) {
					evt = _cur_win.event ? _cur_win.event : evt;
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					if (_cur_win._is_capture) {
						var body = id ? _cur_win.document.getElementById(id) : _cur_win.document.body;
						_cur_win._is_capture = false;
						body.releaseCapture();
						nexacro._stopSysObserving(body, "losecapture", "onlosecapture", _cur_win._syshandler_onlosecapture_forward);
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmouseup(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_onlosecapture_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					if (_cur_win._is_capture) {
						_cur_win._is_capture = false;
						var body = id ? _cur_win.document.getElementById(id) : _cur_win.document.body;
						var win = nexacro._findWindow(nexacro._is_attach_childframe ? _cur_win.nexacro_HTMLSysEvent[id]._cur_win : _cur_win.nexacro_HTMLSysEvent._cur_win, id);
						var elem = nexacro.__findParentElement(evt.srcElement);
						body.releaseCapture();

						_cur_win.__clearGC();

						nexacro._stopSysObserving(body, "losecapture", "onlosecapture", _cur_win._syshandler_onlosecapture_forward);

						var ret = win._on_sys_lbuttonup(win._cur_ldown_elem, evt.button, evt.alt, evt.ctrl, evt.shift, evt.wx, evt.wy, evt.sx, evt.sy);

						if (!(elem instanceof nexacro.InputElement)) {
							nexacro._stopSysEvent(evt);
						}

						return ret;
					}
					return true;
				};

				_cur_win._syshandler_lock_onmouseup_forward = nexacro._emptyFn;
				_cur_win._syshandler_onmousemove_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmousemove(htmlSysEvent, evt.srcElement, evt);
				};
				_cur_win._syshandler_lock_onmousemove_forward = nexacro._emptyFn;

				_cur_win._syshandler_ontouchstart_forward = function (evt) {
					if (evt.pointerType == evt.MSPOINTER_TYPE_MOUSE || evt.pointerType == "mouse") {
						return;
					}
					if (evt.pointerType == evt.MSPOINTER_TYPE_PEN || evt.pointerType == "pen") {
						var id = nexacro._getEvtId(evt);
						var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
						return htmlSysEvent._syshandler_onmousedown_forward(evt);
					}

					var id = nexacro._getEvtId(evt);

					var orgevt = evt;

					var evt2 = {
					};
					evt2.srcElement = evt.srcElement;
					evt2.changedTouches = [];

					var touch = {
					};
					touch.clientX = evt.clientX;
					touch.clientY = evt.clientY;
					touch.screenX = evt.screenX;
					touch.screenY = evt.screenY;
					touch.timeStamp = evt.timeStamp;
					touch.identifier = evt.pointerId;
					touch.isPrimary = evt.isPrimary;

					if (nexacro._is_attach_childframe) {
						touch.currentTarget = evt.currentTarget;
					}

					evt2.changedTouches.push(touch);
					evt = evt2;

					var elem = nexacro.__findParentElement(evt.srcElement);
					if ((elem instanceof nexacro.InputElement) && elem.enable) {
						elem._is_input_touchstart = true;
						elem._on_sys_touchstart();
					}

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchstart(htmlSysEvent, evt.srcElement, evt, orgevt);
				};
				_cur_win._syshandler_ontouchend_forward = function (evt) {
					if (evt.pointerType == evt.MSPOINTER_TYPE_MOUSE || evt.pointerType == "mouse") {
						return;
					}
					if (evt.pointerType == evt.MSPOINTER_TYPE_PEN || evt.pointerType == "pen") {
						var id = nexacro._getEvtId(evt);
						var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
						return htmlSysEvent._syshandler_onmouseup_forward(evt);
					}

					var id = nexacro._getEvtId(evt);

					var orgevt = evt;

					var evt2 = {
					};
					evt2.srcElement = evt.srcElement;
					evt2.changedTouches = [];

					var touch = {
					};
					touch.clientX = evt.clientX;
					touch.clientY = evt.clientY;
					touch.screenX = evt.screenX;
					touch.screenY = evt.screenY;
					touch.timeStamp = evt.timeStamp;
					touch.identifier = evt.pointerId;

					if (nexacro._is_attach_childframe) {
						touch.currentTarget = evt.currentTarget;
					}

					evt2.changedTouches.push(touch);
					evt = evt2;

					var elem = nexacro.__findParentElement(evt.srcElement);
					if ((elem instanceof nexacro.InputElement) && elem.enable) {
						elem._on_sys_touchend();
					}

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchend(htmlSysEvent, evt.srcElement, evt, orgevt);
				};
				_cur_win._syshandler_ontouchmove_forward = function (evt) {
					if (evt.pointerType == evt.MSPOINTER_TYPE_MOUSE || evt.pointerType == "mouse") {
						return;
					}
					if (evt.pointerType == evt.MSPOINTER_TYPE_PEN || evt.pointerType == "pen") {
						var id = nexacro._getEvtId(evt);
						var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
						return htmlSysEvent._syshandler_onmousemove_forward(evt);
					}

					var id = nexacro._getEvtId(evt);

					var orgevt = evt;

					var evt2 = {
					};
					evt2.srcElement = evt.srcElement;
					evt2.changedTouches = [];

					var touch = {
					};
					touch.clientX = evt.clientX;
					touch.clientY = evt.clientY;
					touch.screenX = evt.screenX;
					touch.screenY = evt.screenY;
					touch.timeStamp = evt.timeStamp;
					touch.identifier = evt.pointerId;

					if (nexacro._is_attach_childframe) {
						touch.currentTarget = evt.currentTarget;
					}

					evt2.changedTouches.push(touch);
					evt = evt2;

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchmove(htmlSysEvent, evt.srcElement, evt, orgevt);
				};
				_cur_win._syshandler_ontouchcancel_forward = function (evt) {
					if (evt.pointerType == evt.MSPOINTER_TYPE_MOUSE || evt.pointerType == "mouse") {
						return;
					}
					if (evt.pointerType == evt.MSPOINTER_TYPE_PEN || evt.pointerType == "pen") {
						return;
					}

					var evt2 = {
					};
					evt2.srcElement = evt.srcElement;
					evt2.changedTouches = [];

					var id = nexacro._getEvtId(evt);

					var touch = {
					};
					touch.clientX = evt.clientX;
					touch.clientY = evt.clientY;
					touch.screenX = evt.screenX;
					touch.screenY = evt.screenY;
					touch.timeStamp = evt.timeStamp;
					touch.identifier = evt.pointerId;

					if (nexacro._is_attach_childframe) {
						touch.currentTarget = evt.currentTarget;
					}

					evt2.changedTouches.push(touch);
					evt = evt2;

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchcancel(htmlSysEvent, evt.srcElement, evt);
				};



				_cur_win._syshandler_ondblclick_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ondblclick(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_onmouseover_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmouseover(htmlSysEvent, evt.srcElement, evt.fromElement, evt);
				};
				_cur_win._syshandler_onmouseout_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmouseout(htmlSysEvent, evt.srcElement, evt.toElement, evt);
				};

				_cur_win._syshandler_onkeydown_forward = function (evt) {
					if (_cur_win.event) {
						evt = _cur_win.event;
					}
					var id = nexacro._getEvtId(evt);
					var linked_window = nexacro._is_attach_childframe ? _cur_win._linked_window[id] : _cur_win._linked_window;
					if (linked_window && linked_window.frame._is_popup_frame && nexacro._getSysEventKeyCode(evt) == 116) {
						evt.keyCode = 0;
						evt.cancelBubble = true;
						evt.returnValue = false;
					}

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onkeydown(htmlSysEvent, evt.srcElement, evt);
				};


				_cur_win._syshandler_onkeypress_forward = function (evt) {
					if (_cur_win.event) {
						evt = _cur_win.event;
					}

					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onkeypress(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_onkeyup_forward = function (evt) {
					if (_cur_win.event) {
						evt = _cur_win.event;
					}

					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onkeyup(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_onmousewheel_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmousewheel(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_oncontextmenu_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_oncontextmenu(htmlSysEvent, evt.srcElement, evt);
				};
				_cur_win._syshandler_dragstart_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_dragstart(htmlSysEvent, evt.srcElement, evt);
				};
				_cur_win._syshandler_onselectstart_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onselectstart(htmlSysEvent, evt.srcElement, evt);
				};

				_cur_win._syshandler_onactivate_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);

					if (nexacro._is_attach_childframe) {
						if (id == 0) {
							var sysEvents = _cur_win.nexacro_HTMLSysEvent;
							var len = sysEvents.length;
							for (var i = 0; i < len; i++) {
								var sysEvent = sysEvents[i];
								var e_id = sysEvent._custom_node_id;
								var win = nexacro._findWindow(sysEvent._win_win, e_id);
								if (win._is_active_window) {
									id = e_id;
									break;
								}
							}
						}
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onactivate(htmlSysEvent, evt);
				};

				if (nexacro.BrowserVersion <= 8) {
					_cur_win._syshandler_ondeactivate_forward = function (evt) {
						try {
							evt = _cur_win.event;
							var id = nexacro._getEvtId(evt);
							if (evt.toElement || evt.relatedTarget) {
								return true;
							}
							var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
							return nexacro._syshandler_ondeactivate(htmlSysEvent, evt);
						}
						catch (e) {
						}
					};
				}
				else {
					_cur_win._syshandler_ondeactivate_forward = function (evt) {
						evt = _cur_win.event;
						var id = nexacro._getEvtId(evt);
						if (evt.toElement || evt.relatedTarget) {
							return true;
						}
						var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
						return nexacro._syshandler_ondeactivate(htmlSysEvent, evt);
					};
				}

				_cur_win._syshandler_onbeforeclose_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onbeforeclose(htmlSysEvent, evt);
				};

				_cur_win._syshandler_onclose_forward = function (evt) {
					nexacro._deleteLocalStorage(nexacro._getWindowkey(window));

					if (nexacro._t_mgr) {
						application._touch_manager = nexacro._t_mgr;
					}

					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onclose(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onresize_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onresize(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onorientationchange_forward = function (evt) {
					evt = _cur_win.event;
					return nexacro._syshandler_onorientationchange(nexacro._is_attach_childframe ? _cur_win.nexacro_HTMLSysEvent[evt.currentTarget.id] : _cur_win.nexacro_HTMLSysEvent, evt);
				};
				_cur_win._syshandler_onmove_forward = function (evt) {
					try {
						var oldX = _cur_win._old_screenx;
						var oldY = _cur_win._old_screeny;

						if (oldX != _cur_win.screenLeft || oldY != _cur_win.screenTop) {
							_cur_win._old_screenx = _cur_win.screenLeft;
							_cur_win._old_screeny = _cur_win.screenTop;

							evt = _cur_win.event;
							var id = nexacro._getEvtId(evt);
							var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
							return nexacro._syshandler_onmove(htmlSysEvent, evt);
						}
					}
					catch (e) {
					}
				};
				_cur_win._syshandler_onload_forward = function (evt) {
					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onload(htmlSysEvent, evt);
				};
			};
		}
		else if (nexacro.Browser != "IE") {
			nexacro._createSysEvent_ForwardFuncs = function (_cur_win) {
				_cur_win._syshandler_onmessage_forward = function (evt) {
					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}

					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmessage(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_onmousedown_forward = function (evt) {
					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					if (nexacro.isTouchInteraction) {
						if (nexacro.OS == "Android") {
							var win = nexacro._findWindow(_cur_win, id);
							var elem = nexacro.__findParentElement(evt.target);

							if (elem) {
								if ((elem instanceof nexacro.InputElement) && elem.enable) {
									if (elem._checkInputAutoSelect()) {
									}
								}
								else {
									var last_focused_elem = win._last_focused_elem;
									if (last_focused_elem && (last_focused_elem instanceof nexacro.InputElement)) {
									}
									evt.preventDefault();
								}
							}
						}
						else {
							if (elem && !(elem instanceof nexacro.InputElement)) {
								evt.stopPropagation();
								evt.preventDefault();
							}
						}

						if (nexacro.OS == "Android" && nexacro.BrowserVersion < 58 || nexacro._is_touch_flag) {
							nexacro._is_touch_flag = false;
							return false;
						}
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmousedown(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_onmouseup_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					if (nexacro.isTouchInteraction) {
						if (nexacro.OS == "Android") {
						}
						else {
							evt.stopPropagation();
							evt.preventDefault();
						}
						return false;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmouseup(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_lock_onmouseup_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_lock_onmouseup(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_onmousemove_forward = function (evt) {
					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					if (nexacro.isTouchInteraction) {
						if (nexacro.OS == "Android") {
						}
						else {
							evt.stopPropagation();
							evt.preventDefault();
						}
						return false;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmousemove(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_lock_onmousemove_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_lock_onmousemove(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_ontouchstart_forward = function (evt) {
					nexacro._is_touch_flag = true;
					var id = nexacro._getEvtId(evt);
					var elem = nexacro.__findParentElement(evt.target);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					var win = nexacro._findWindow(htmlSysEvent._win_win, htmlSysEvent._custom_node_id);
					var comp = win.findComponent(elem, 0, 0);

					if ((elem instanceof nexacro.InputElement) && elem.enable) {
						elem._is_input_touchstart = true;
						elem._on_sys_touchstart();
					}
					else if (comp[0] && (comp[0]._edit_base_api || comp[0]._input_element)) {
						var inputelem = comp[0]._input_element;
						if (inputelem) {
							inputelem._is_input_touchstart = true;
							inputelem._on_sys_touchstart();
						}
					}
					return nexacro._syshandler_ontouchstart(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_ontouchend_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var elem = nexacro.__findParentElement(evt.target);
					if ((elem instanceof nexacro.InputElement) && elem.enable) {
						elem._on_sys_touchend();
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchend(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_ontouchmove_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var elem = nexacro.__findParentElement(evt.target);
					if ((elem instanceof nexacro.InputElement) && elem.enable) {
						elem._on_sys_touchmove();
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchmove(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_ontouchcancel_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var elem = nexacro.__findParentElement(evt.target);
					if ((elem instanceof nexacro.InputElement) && elem.enable) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ontouchcancel(htmlSysEvent, evt.target, evt);
				};


				_cur_win._syshandler_ondblclick_forward = function (evt) {
					var id = nexacro._getEvtId(evt);

					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					if (nexacro.isTouchInteraction) {
						if (nexacro.OS == "Android") {
						}
						else {
							evt.stopPropagation();
							evt.preventDefault();
						}
						return false;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ondblclick(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_onmouseover_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmouseover(htmlSysEvent, evt.target, evt.relatedTarget, evt);
				};
				_cur_win._syshandler_onmouseout_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmouseout(htmlSysEvent, evt.target, evt.relatedTarget, evt);
				};

				_cur_win._syshandler_onkeydown_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var linked_window = nexacro._is_attach_childframe ? _cur_win._linked_window[id] : _cur_win._linked_window;
					if (!nexacro.__getWindowHandleEnable(_cur_win, id) || (linked_window.frame._is_popup_frame && nexacro._getSysEventKeyCode(evt) == 116)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onkeydown(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_onkeypress_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onkeypress(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_onkeyup_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onkeyup(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_onmousewheel_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					if (!nexacro.__getWindowHandleEnable(_cur_win, id)) {
						nexacro._stopSysEvent(evt);
						return;
					}
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onmousewheel(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_oncontextmenu_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_oncontextmenu(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_dragstart_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_dragstart(htmlSysEvent, evt.target, evt);
				};
				_cur_win._syshandler_onselectstart_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onselectstart(htmlSysEvent, evt.target, evt);
				};

				_cur_win._syshandler_onactivate_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onactivate(htmlSysEvent, evt);
				};
				_cur_win._syshandler_ondeactivate_forward = function (evt) {
					nexacro._deactivate = true;

					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_ondeactivate(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onbeforeclose_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onbeforeclose(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onclose_forward = function (evt) {
					if (nexacro._t_mgr) {
						application._touch_manager = nexacro._t_mgr;
					}

					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onclose(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onresize_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onresize(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onorientationchange_forward = function (evt) {
					var reset_viewport = nexacro._searchDeviceExceptionValue("orientationchange_reset_viewport");
					if (nexacro.OS == "Android" && reset_viewport) {
						var _tester = nexacro._device_exception_tester;
						if (_tester.screen_checked && _tester.screen_swap_checked == false) {
							if (_tester.is_init_screen_portrait != nexacro._isPortrait()) {
								if (_tester.init_screen_width == nexacro._getScreenWidth()) {
									_tester.swap_screen = false;
								}
								else {
									_tester.swap_screen = true;
								}
								_tester.screen_swap_checked = true;
							}
						}

						var delayed_swap_screen = _tester.delayed_swap_screen;
						if (delayed_swap_screen === undefined) {
							delayed_swap_screen = nexacro._searchDeviceExceptionValue("delayed_swap_screen");
						}
						if (delayed_swap_screen == true) {
							_tester.swap_screen_timer = setInterval(function () {
								var p_w = _tester["portrait_screen_width"];
								var l_w = _tester["landscape_screen_width"];
								var is_changed = false;
								if (!nexacro._isPortrait() && ((p_w && p_w != nexacro._getScreenWidth()) || (l_w && l_w == nexacro._getScreenWidth()))) {
									is_changed = true;
								}
								else if (nexacro._isPortrait() && ((l_w && l_w != nexacro._getScreenWidth()) || (p_w && p_w == nexacro._getScreenWidth()))) {
									is_changed = true;
								}
								if (is_changed) {
									clearInterval(_tester.swap_screen_timer);
									_tester.swap_screen_timer = null;

									nexacro.__setViewportScale();
								}
							}, 100);
						}
						else {
							var reset_viewport_delay = nexacro._searchDeviceExceptionValue("reset_viewport_delay");
							if (reset_viewport_delay <= 0) {
								nexacro.__setViewportScale();
							}
							else {
								setTimeout(function () {
									nexacro.__setViewportScale();
								}, parseInt(reset_viewport_delay));
							}

							if (_tester.swap_screen == false && _tester.delayed_swap_screen_checked == false) {
								_tester.delayed_swap_screen_check_cnt = 0;
								if (_tester.swap_screen_timer) {
									clearInterval(_tester.swap_screen_timer);
								}
								_tester.swap_screen_timer = setInterval(function () {
									var p_w = _tester["portrait_screen_width"];
									var l_w = _tester["landscape_screen_width"];
									var is_changed = false;
									if (!nexacro._isPortrait() && ((p_w && p_w != nexacro._getScreenWidth()) || (l_w && l_w == nexacro._getScreenWidth()))) {
										is_changed = true;
									}
									else if (nexacro._isPortrait() && ((l_w && l_w != nexacro._getScreenWidth()) || (p_w && p_w == nexacro._getScreenWidth()))) {
										is_changed = true;
									}
									if (is_changed || _tester.delayed_swap_screen_check_cnt == 10) {
										clearInterval(_tester.swap_screen_timer);
										_tester.swap_screen_timer = null;
										_tester.delayed_swap_screen = is_changed;
										_tester.delayed_swap_screen_checked = true;

										if (is_changed) {
											nexacro.__setViewportScale();
										}
										return;
									}

									_tester.delayed_swap_screen_check_cnt++;
								}, 100);
							}
						}
					}

					evt = _cur_win.event;
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onorientationchange(htmlSysEvent, evt);
				};
				_cur_win._syshandler_onmove_forward = function (evt) {
					try {
						var oldX = _cur_win._old_screenx;
						var oldY = _cur_win._old_screeny;

						if (oldX != _cur_win.screenX || oldY != _cur_win.screenY) {
							if (nexacro._deactivate) {
								_cur_win._old_screenx = _cur_win.screenX;
								_cur_win._old_screeny = _cur_win.screenY;

								nexacro._deactivate = false;
								return;
							}

							_cur_win._old_screenx = _cur_win.screenX;
							_cur_win._old_screeny = _cur_win.screenY;

							evt = _cur_win.event;
							var id = nexacro._getEvtId(evt);
							var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
							return nexacro._syshandler_onmove(htmlSysEvent, evt);
						}
					}
					catch (e) {
					}
				};
				_cur_win._syshandler_onload_forward = function (evt) {
					var id = nexacro._getEvtId(evt);
					var htmlSysEvent = nexacro._getHtmlSysEvent(_cur_win.nexacro_HTMLSysEvent, id);
					return nexacro._syshandler_onload(htmlSysEvent, evt);
				};
			};
		}


		nexacro.HTMLSysEvent = function (_win_win, _win_doc, _cur_win, _cur_doc) {
			this._win_win = _win_win;
			this._win_doc = _win_doc;
			this._cur_win = _cur_win;
			this._cur_doc = _cur_doc;

			this._cur_over_elem = null;

			this._custom_node_id = null;

			this._syshandler_onmessage_forward = _cur_win._syshandler_onmessage_forward;
			this._syshandler_onmousedown_forward = _cur_win._syshandler_onmousedown_forward;
			this._syshandler_onmouseup_forward = _cur_win._syshandler_onmouseup_forward;
			this._syshandler_lock_onmouseup_forward = _cur_win._syshandler_lock_onmouseup_forward;
			this._syshandler_onmousemove_forward = _cur_win._syshandler_onmousemove_forward;
			this._syshandler_lock_onmousemove_forward = _cur_win._syshandler_lock_onmousemove_forward;
			this._syshandler_ontouchstart_forward = _cur_win._syshandler_ontouchstart_forward;
			this._syshandler_ontouchend_forward = _cur_win._syshandler_ontouchend_forward;
			this._syshandler_ontouchmove_forward = _cur_win._syshandler_ontouchmove_forward;
			this._syshandler_ontouchcancel_forward = _cur_win._syshandler_ontouchcancel_forward;
			this._syshandler_ondblclick_forward = _cur_win._syshandler_ondblclick_forward;
			this._syshandler_onmouseover_forward = _cur_win._syshandler_onmouseover_forward;
			this._syshandler_onmouseout_forward = _cur_win._syshandler_onmouseout_forward;
			this._syshandler_onkeydown_forward = _cur_win._syshandler_onkeydown_forward;
			this._syshandler_onkeypress_forward = _cur_win._syshandler_onkeypress_forward;
			this._syshandler_onkeyup_forward = _cur_win._syshandler_onkeyup_forward;
			this._syshandler_onmousewheel_forward = _cur_win._syshandler_onmousewheel_forward;
			this._syshandler_oncontextmenu_forward = _cur_win._syshandler_oncontextmenu_forward;
			this._syshandler_dragstart_forward = _cur_win._syshandler_dragstart_forward;
			this._syshandler_onselectstart_forward = _cur_win._syshandler_onselectstart_forward;
			this._syshandler_onactivate_forward = _cur_win._syshandler_onactivate_forward;
			this._syshandler_ondeactivate_forward = _cur_win._syshandler_ondeactivate_forward;
			this._syshandler_onbeforeclose_forward = _cur_win._syshandler_onbeforeclose_forward;
			this._syshandler_onclose_forward = _cur_win._syshandler_onclose_forward;
			this._syshandler_onresize_forward = _cur_win._syshandler_onresize_forward;
			this._syshandler_onorientationchange_forward = _cur_win._syshandler_onorientationchange_forward;
			this._syshandler_onmove_forward = _cur_win._syshandler_onmove_forward;
			this._syshandler_onload_forward = _cur_win._syshandler_onload_forward;

			_cur_win._syshandler_onmessage_forward = null;
			_cur_win._syshandler_onmousedown_forward = null;
			_cur_win._syshandler_onmouseup_forward = null;
			_cur_win._syshandler_lock_onmouseup_forward = null;
			_cur_win._syshandler_onmousemove_forward = null;
			_cur_win._syshandler_lock_onmousemove_forward = null;
			_cur_win._syshandler_ontouchstart_forward = null;
			_cur_win._syshandler_ontouchend_forward = null;
			_cur_win._syshandler_ontouchmove_forward = null;
			_cur_win._syshandler_ontouchcancel_forward = null;
			_cur_win._syshandler_ondblclick_forward = null;
			_cur_win._syshandler_onmouseover_forward = null;
			_cur_win._syshandler_onmouseout_forward = null;
			_cur_win._syshandler_onkeydown_forward = null;
			_cur_win._syshandler_onkeypress_forward = null;
			_cur_win._syshandler_onkeyup_forward = null;
			_cur_win._syshandler_onmousewheel_forward = null;
			_cur_win._syshandler_oncontextmenu_forward = null;
			_cur_win._syshandler_dragstart_forward = null;
			_cur_win._syshandler_onselectstart_forward = null;
			_cur_win._syshandler_onactivate_forward = null;
			_cur_win._syshandler_ondeactivate_forward = null;
			_cur_win._syshandler_onbeforeclose_forward = null;
			_cur_win._syshandler_onclose_forward = null;
			_cur_win._syshandler_onresize_forward = null;
			_cur_win._syshandler_onorientationchange_forward = null;
			_cur_win._syshandler_onmove_forward = null;
			_cur_win._syshandler_onload_forward = null;
		};
		var _pHTMLSysEvent = nexacro.HTMLSysEvent.prototype;

		_pHTMLSysEvent.KEY_BACKSPACE = 8;
		_pHTMLSysEvent.KEY_TAB = 9;
		_pHTMLSysEvent.KEY_RETURN = 13;
		_pHTMLSysEvent.KEY_ESC = 27;
		_pHTMLSysEvent.KEY_SPACE = 32;
		_pHTMLSysEvent.KEY_LEFT = 37;
		_pHTMLSysEvent.KEY_UP = 38;
		_pHTMLSysEvent.KEY_RIGHT = 39;
		_pHTMLSysEvent.KEY_DOWN = 40;
		_pHTMLSysEvent.KEY_DELETE = 46;
		_pHTMLSysEvent.KEY_HOME = 36;
		_pHTMLSysEvent.KEY_END = 35;
		_pHTMLSysEvent.KEY_PAGEUP = 33;
		_pHTMLSysEvent.KEY_PAGEDOWN = 34;
		_pHTMLSysEvent.KEY_INSERT = 45;

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 11) {
			_pHTMLSysEvent.MOUSE_LBUTTON = 1;
			_pHTMLSysEvent.MOUSE_MBUTTON = 4;
			_pHTMLSysEvent.MOUSE_RBUTTON = 2;
		}
		else {
			_pHTMLSysEvent.MOUSE_LBUTTON = 0;
			_pHTMLSysEvent.MOUSE_MBUTTON = 1;
			_pHTMLSysEvent.MOUSE_RBUTTON = 2;
		}

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			_pHTMLSysEvent._initDocEventHandler = function () {
				var _cur_win = this._cur_win;
				var _cur_doc = this._cur_doc;
				var body = this._custom_node_id ? this._cur_doc.getElementById(this._custom_node_id) : this._cur_doc.body;
				nexacro._observeSysEvent(_cur_win, "message", "onmessage", this._syshandler_onmessage_forward);
				nexacro._observeSysEvent(body, "mousedown", "onmousedown", this._syshandler_onmousedown_forward);
				nexacro._observeSysEvent(body, "mouseup", "onmouseup", this._syshandler_onmouseup_forward);
				nexacro._observeSysEvent(body, "mousemove", "onmousemove", this._syshandler_onmousemove_forward);
				if (nexacro.SupportTouch) {
					if (nexacro.BrowserType == "Edge") {
						nexacro._observeSysEvent(_cur_win, "pointerdown", "ontouchstart", this._syshandler_ontouchstart_forward);
						nexacro._observeSysEvent(_cur_win, "pointerup", "ontouchend", this._syshandler_ontouchend_forward);
						nexacro._observeSysEvent(_cur_win, "pointermove", "ontouchmove", this._syshandler_ontouchmove_forward);
						nexacro._observeSysEvent(_cur_win, "pointercancel", "ontouchcancel", this._syshandler_ontouchcancel_forward);
					}
					else {
						nexacro._observeSysEvent(_cur_win, "MSPointerDown", "ontouchstart", this._syshandler_ontouchstart_forward);
						nexacro._observeSysEvent(_cur_win, "MSPointerUp", "ontouchend", this._syshandler_ontouchend_forward);
						nexacro._observeSysEvent(_cur_win, "MSPointerMove", "ontouchmove", this._syshandler_ontouchmove_forward);
						nexacro._observeSysEvent(_cur_win, "MSPointerCancel", "ontouchcancel", this._syshandler_ontouchcancel_forward);
					}
				}
				nexacro._observeSysEvent(body, "dblclick", "ondblclick", this._syshandler_ondblclick_forward);
				nexacro._observeSysEvent(body, "mouseover", "onmouseover", this._syshandler_onmouseover_forward);
				nexacro._observeSysEvent(body, "mouseout", "onmouseout", this._syshandler_onmouseout_forward);
				nexacro._observeSysEvent(body, "keydown", "onkeydown", this._syshandler_onkeydown_forward);
				nexacro._observeSysEvent(body, "keypress", "onkeypress", this._syshandler_onkeypress_forward);
				nexacro._observeSysEvent(body, "keyup", "onkeyup", this._syshandler_onkeyup_forward);
				nexacro._observeSysEvent(body, "mousewheel", "onmousewheel", this._syshandler_onmousewheel_forward);
				if (!nexacro.isTouchInteraction) {
					nexacro._observeSysEvent(body, "contextmenu", "oncontextmenu", this._syshandler_oncontextmenu_forward);
				}
				nexacro._observeSysEvent(body, "dragstart", "ondragstart", this._syshandler_dragstart_forward);
				nexacro._observeSysEvent(body, "selectstart", "onselectstart", this._syshandler_onselectstart_forward);
				nexacro._observeSysEvent(body, "select", "onselect", this._syshandler_onselectstart_forward);

				nexacro._observeSysEvent(_cur_win, "focus", "onfocus", this._syshandler_onactivate_forward);
				nexacro._observeSysEvent(_cur_doc, "focusout", "onfocusout", this._syshandler_ondeactivate_forward);
				nexacro._observeSysEvent(_cur_win, "beforeunload", "onbeforeunload", this._syshandler_onbeforeclose_forward);
				nexacro._observeSysEvent(_cur_win, "unload", "onunload", this._syshandler_onclose_forward);
				nexacro._observeSysEvent(_cur_win, "resize", "onresize", this._syshandler_onresize_forward);
				nexacro._observeSysEvent(_cur_win, "orientationchange", "onorientationchange", this._syshandler_onorientationchange_forward);

				nexacro._observeSysEvent(body, "load", "onload", this._syshandler_onload_forward);

				this._startDetectWindowMove();
			};
			_pHTMLSysEvent._stopDocEventHandler = function () {
				var _cur_win = this._cur_win;
				var _cur_doc = this._cur_doc;
				var body = this._custom_node_id ? this._cur_doc.getElementById(this._custom_node_id) : this._cur_doc.body;

				this._stopDetectWindowMove();

				nexacro._stopSysObserving(_cur_win, "message", "onmessage", this._syshandler_onmessage_forward);
				nexacro._stopSysObserving(body, "mousedown", "onmousedown", this._syshandler_onmousedown_forward);
				nexacro._stopSysObserving(body, "mouseup", "onmouseup", this._syshandler_onmouseup_forward);
				nexacro._stopSysObserving(body, "mousemove", "onmousemove", this._syshandler_onmousemove_forward);
				if (nexacro.SupportTouch) {
					if (nexacro.BrowserType == "Edge") {
						nexacro._stopSysObserving(_cur_win, "pointerdown", "ontouchstart", this._syshandler_ontouchstart_forward);
						nexacro._stopSysObserving(_cur_win, "pointerup", "ontouchend", this._syshandler_ontouchend_forward);
						nexacro._stopSysObserving(_cur_win, "pointermove", "ontouchmove", this._syshandler_ontouchmove_forward);
						nexacro._stopSysObserving(_cur_win, "pointercancel", "ontouchcancel", this._syshandler_ontouchcancel_forward);
					}
					else {
						nexacro._stopSysObserving(_cur_win, "MSPointerDown", "ontouchstart", this._syshandler_ontouchstart_forward);
						nexacro._stopSysObserving(_cur_win, "MSPointerUp", "ontouchend", this._syshandler_ontouchend_forward);
						nexacro._stopSysObserving(_cur_win, "MSPointerMove", "ontouchmove", this._syshandler_ontouchmove_forward);
						nexacro._stopSysObserving(_cur_win, "MSPointerCancel", "ontouchcancel", this._syshandler_ontouchcancel_forward);
					}
				}
				nexacro._stopSysObserving(body, "dblclick", "ondblclick", this._syshandler_ondblclick_forward);
				nexacro._stopSysObserving(body, "mouseover", "onmouseover", this._syshandler_onmouseover_forward);
				nexacro._stopSysObserving(body, "mouseout", "onmouseout", this._syshandler_onmouseout_forward);
				nexacro._stopSysObserving(body, "keydown", "onkeydown", this._syshandler_onkeydown_forward);
				nexacro._stopSysObserving(body, "keypress", "onkeypress", this._syshandler_onkeypress_forward);
				nexacro._stopSysObserving(body, "keyup", "onkeyup", this._syshandler_onkeyup_forward);
				nexacro._stopSysObserving(body, "mousewheel", "onmousewheel", this._syshandler_onmousewheel_forward);
				if (!nexacro.isTouchInteraction) {
					nexacro._stopSysObserving(body, "contextmenu", "oncontextmenu", this._syshandler_oncontextmenu_forward);
				}
				nexacro._stopSysObserving(body, "dragstart", "ondragstart", this._syshandler_dragstart_forward);
				nexacro._stopSysObserving(body, "select", "onselect", this._syshandler_onselectstart_forward);
				nexacro._stopSysObserving(body, "selectstart", "onselectstart", this._syshandler_onselectstart_forward);

				nexacro._stopSysObserving(_cur_win, "focus", "onfocus", this._syshandler_onactivate_forward);
				nexacro._stopSysObserving(_cur_doc, "focusout", "onfocusout", this._syshandler_ondeactivate_forward);
				nexacro._stopSysObserving(_cur_win, "beforeunload", "onbeforeunload", this._syshandler_onbeforeclose_forward);
				nexacro._stopSysObserving(_cur_win, "unload", "onunload", this._syshandler_onclose_forward);
				nexacro._stopSysObserving(_cur_win, "resize", "onresize", this._syshandler_onresize_forward);
				nexacro._stopSysObserving(_cur_win, "orientationchange", "onorientationchange", this._syshandler_onorientationchange_forward);

				nexacro._stopSysObserving(body, "load", "onload", this._syshandler_onload_forward);
			};

			_pHTMLSysEvent.lockMouseMove = function (node) {
			};
			_pHTMLSysEvent.unloackMouseMove = function (node) {
			};
		}
		else if (nexacro.Browser != "IE") {
			_pHTMLSysEvent._initDocEventHandler = function () {
				var _cur_win = this._cur_win;
				var body = this._custom_node_id ? this._cur_doc.getElementById(this._custom_node_id) : this._cur_doc.body;

				nexacro._observeSysEvent(_cur_win, "message", "onmessage", this._syshandler_onmessage_forward);
				nexacro._observeSysEvent(body, "mousedown", "onmousedown", this._syshandler_onmousedown_forward);
				nexacro._observeSysEvent(body, "mouseup", "onmouseup", this._syshandler_onmouseup_forward);
				nexacro._observeSysEvent(body, "mousemove", "onmousemove", this._syshandler_onmousemove_forward);
				if (nexacro.SupportTouch) {
					nexacro._observeSysEvent(body, "touchstart", "ontouchstart", this._syshandler_ontouchstart_forward);
					nexacro._observeSysEvent(body, "touchend", "ontouchend", this._syshandler_ontouchend_forward);
					nexacro._observeSysEvent(body, "touchmove", "ontouchmove", this._syshandler_ontouchmove_forward);
					nexacro._observeSysEvent(body, "touchcancel", "ontouchcancel", this._syshandler_ontouchcancel_forward);
				}
				nexacro._observeSysEvent(body, "dblclick", "ondblclick", this._syshandler_ondblclick_forward);
				nexacro._observeSysEvent(body, "mouseover", "onmouseover", this._syshandler_onmouseover_forward);
				nexacro._observeSysEvent(body, "mouseout", "onmouseout", this._syshandler_onmouseout_forward);
				nexacro._observeSysEvent(body, "keydown", "onkeydown", this._syshandler_onkeydown_forward);
				nexacro._observeSysEvent(body, "keypress", "onkeypress", this._syshandler_onkeypress_forward);
				nexacro._observeSysEvent(body, "keyup", "onkeyup", this._syshandler_onkeyup_forward);
				nexacro._observeSysEvent(body, "mousewheel", "onmousewheel", this._syshandler_onmousewheel_forward);
				nexacro._observeSysEvent(body, "DOMMouseScroll", "onDOMMouseScroll", this._syshandler_onmousewheel_forward);
				if (!nexacro.isTouchInteraction) {
					nexacro._observeSysEvent(body, "contextmenu", "oncontextmenu", this._syshandler_oncontextmenu_forward);
				}
				nexacro._observeSysEvent(body, "dragstart", "ondragstart", this._syshandler_dragstart_forward);
				nexacro._observeSysEvent(body, "select", "onselect", this._syshandler_onselectstart_forward);
				nexacro._observeSysEvent(body, "selectstart", "onselectstart", this._syshandler_onselectstart_forward);

				nexacro._observeSysEvent(_cur_win, "focus", "onfocus", this._syshandler_onactivate_forward);
				nexacro._observeSysEvent(_cur_win, "blur", "onblur", this._syshandler_ondeactivate_forward);
				nexacro._observeSysEvent(_cur_win, "unload", "onunload", this._syshandler_onclose_forward);
				nexacro._observeSysEvent(_cur_win, "beforeunload", "onbeforeunload", this._syshandler_onbeforeclose_forward);
				if (nexacro.SupportOrientation) {
					nexacro._observeSysEvent(_cur_win, "orientationchange", "onorientationchange", this._syshandler_onorientationchange_forward);
					nexacro._observeSysEvent(_cur_win, "resize", "onresize", this._syshandler_onresize_forward);
				}
				else {
					nexacro._observeSysEvent(_cur_win, "resize", "onresize", this._syshandler_onresize_forward);
				}

				nexacro._observeSysEvent(body, "load", "onload", this._syshandler_onload_forward);

				this._startDetectWindowMove();
			};
			_pHTMLSysEvent._stopDocEventHandler = function () {
				var _cur_win = this._cur_win;
				var body = this._custom_node_id ? this._cur_doc.getElementById(this._custom_node_id) : this._cur_doc.body;

				this._stopDetectWindowMove();

				nexacro._stopSysObserving(_cur_win, "message", "onmessage", this._syshandler_onmessage_forward);
				nexacro._stopSysObserving(body, "mousedown", "onmousedown", this._syshandler_onmousedown_forward);
				nexacro._stopSysObserving(body, "mouseup", "onmouseup", this._syshandler_onmouseup_forward);
				nexacro._stopSysObserving(body, "mousemove", "onmousemove", this._syshandler_onmousemove_forward);

				if (navigator.userAgent.match(/Gecko\//)) {
					var eventNames = ["mousedown", "mouseup", "mousemove"];
					for (var i = 0; i < eventNames.length; i++) {
						nexacro._stopSysObserving(window, eventNames[i], "", GeckoEventListenerCallback);
					}
				}

				if (nexacro.SupportTouch) {
					nexacro._stopSysObserving(body, "touchstart", "ontouchstart", this._syshandler_ontouchstart_forward);
					nexacro._stopSysObserving(body, "touchend", "ontouchend", this._syshandler_ontouchend_forward);
					nexacro._stopSysObserving(body, "touchmove", "ontouchmove", this._syshandler_ontouchmove_forward);
					nexacro._stopSysObserving(body, "touchcancel", "ontouchcancel", this._syshandler_ontouchcancel_forward);
				}
				nexacro._stopSysObserving(body, "dblclick", "ondblclick", this._syshandler_ondblclick_forward);
				nexacro._stopSysObserving(body, "mouseover", "onmouseover", this._syshandler_onmouseover_forward);
				nexacro._stopSysObserving(body, "mouseout", "onmouseout", this._syshandler_onmouseout_forward);
				nexacro._stopSysObserving(body, "keydown", "onkeydown", this._syshandler_onkeydown_forward);
				nexacro._stopSysObserving(body, "keypress", "onkeypress", this._syshandler_onkeypress_forward);
				nexacro._stopSysObserving(body, "keyup", "onkeyup", this._syshandler_onkeyup_forward);
				nexacro._stopSysObserving(body, "mousewheel", "onmousewheel", this._syshandler_onmousewheel_forward);
				nexacro._stopSysObserving(body, "DOMMouseScroll", "onDOMMouseScroll", this._syshandler_onmousewheel_forward);
				if (!nexacro.isTouchInteraction) {
					nexacro._stopSysObserving(body, "contextmenu", "oncontextmenu", this._syshandler_oncontextmenu_forward);
				}
				nexacro._stopSysObserving(body, "dragstart", "ondragstart", this._syshandler_dragstart_forward);
				nexacro._stopSysObserving(body, "select", "onselect", this._syshandler_onselectstart_forward);
				nexacro._stopSysObserving(body, "selectstart", "onselectstart", this._syshandler_onselectstart_forward);

				nexacro._stopSysObserving(_cur_win, "focus", "onfocus", this._syshandler_onactivate_forward);
				nexacro._stopSysObserving(_cur_win, "blur", "onblur", this._syshandler_ondeactivate_forward);
				nexacro._stopSysObserving(_cur_win, "unload", "onunload", this._syshandler_onclose_forward);
				if (nexacro.SupportOrientation) {
					nexacro._stopSysObserving(_cur_win, "orientationchange", "onorientationchange", this._syshandler_onorientationchange_forward);
					nexacro._stopSysObserving(_cur_win, "resize", "onresize", this._syshandler_onresize_forward);
				}
				else {
					nexacro._stopSysObserving(_cur_win, "resize", "onresize", this._syshandler_onresize_forward);
				}

				nexacro._stopSysObserving(body, "load", "onload", this._syshandler_onload_forward);
			};

			_pHTMLSysEvent.lockMouseMove = function (node) {
				var _cur_body = this._custom_node_id ? this._cur_doc.getElementById(this._custom_node_id) : this._cur_doc.body;
				nexacro._stopSysObserving(_cur_body, "mousemove", "onmousemove", this._syshandler_onmousemove_forward);
				nexacro._stopSysObserving(_cur_body, "mouseup", "onmouseup", this._syshandler_onmouseup_forward);
				nexacro._observeSysEvent(this._custom_node_id ? _cur_body : this._win_win, "mousemove", "onmousemove", this._syshandler_lock_onmousemove_forward, true);
				nexacro._observeSysEvent(this._custom_node_id ? _cur_body : this._win_win, "mouseup", "onmouseup", this._syshandler_lock_onmouseup_forward, true);
			};
			_pHTMLSysEvent.unlockMouseMove = function (node) {
				var _cur_body = this._custom_node_id ? this._cur_doc.getElementById(this._custom_node_id) : this._cur_doc.body;
				nexacro._stopSysObserving(this._custom_node_id ? _cur_body : this._win_win, "mousemove", "onmousemove", this._syshandler_lock_onmousemove_forward, true);
				nexacro._stopSysObserving(this._custom_node_id ? _cur_body : this._win_win, "mouseup", "onmouseup", this._syshandler_lock_onmouseup_forward, true);
				nexacro._observeSysEvent(_cur_body, "mousemove", "onmousemove", this._syshandler_onmousemove_forward);
				nexacro._observeSysEvent(_cur_body, "mouseup", "onmouseup", this._syshandler_onmouseup_forward);
			};
		}

		_pHTMLSysEvent._move_detect_timer = -1;
		_pHTMLSysEvent._startDetectWindowMove = function () {
			var _cur_win = this._cur_win;
			_cur_win._old_screenx = _cur_win.screenX ? _cur_win.screenX : _cur_win.screenLeft;
			_cur_win._old_screeny = _cur_win.screenY ? _cur_win.screenY : _cur_win.screenTop;

			var interval = setInterval(this._syshandler_onmove_forward, 500);
			this._move_detect_timer = interval;
		};
		_pHTMLSysEvent._stopDetectWindowMove = function () {
			if (this._move_detect_timer) {
				clearInterval(this._move_detect_timer);
				this._move_detect_timer = null;
			}
		};

		_pHTMLSysEvent.clearAll = function () {
			this._stopDetectWindowMove();

			this._win_win = null;
			this._win_doc = null;
			this._cur_win = null;
			this._cur_doc = null;

			this._cur_over_elem = null;

			this._custom_node_id = null;

			this._syshandler_onmessage_forward = null;
			this._syshandler_onmousedown_forward = null;
			this._syshandler_onmouseup_forward = null;
			this._syshandler_lock_onmouseup_forward = null;
			this._syshandler_onmousemove_forward = null;
			this._syshandler_lock_onmousemove_forward = null;
			this._syshandler_ontouchstart_forward = null;
			this._syshandler_ontouchend_forward = null;
			this._syshandler_ontouchmove_forward = null;
			this._syshandler_ontouchcancel_forward = null;
			this._syshandler_ondblclick_forward = null;
			this._syshandler_onmouseover_forward = null;
			this._syshandler_onmouseout_forward = null;
			this._syshandler_onkeydown_forward = null;
			this._syshandler_onkeypress_forward = null;
			this._syshandler_onkeyup_forward = null;
			this._syshandler_onmousewheel_forward = null;
			this._syshandler_oncontextmenu_forward = null;
			this._syshandler_dragstart_forward = null;
			this._syshandler_onselectstart_forward = null;
			this._syshandler_onactivate_forward = null;
			this._syshandler_ondeactivate_forward = null;
			this._syshandler_onbeforeclose_forward = null;
			this._syshandler_onclose_forward = null;
			this._syshandler_onresize_forward = null;
			this._syshandler_onorientationchange_forward = null;
			this._syshandler_onmove_forward = null;
			this._syshandler_onload_forward = null;
		};

		delete _pHTMLSysEvent;

		nexacro.__getRealWindowHandle = function (_cur_win) {
			var _cur_nexacro = _cur_win.nexacro;
			var p = _cur_win;
			try {
				while (true) {
					if (p.parent && p != p.parent && p.parent.nexacro && p.parent.nexacro == _cur_nexacro) {
						p = p.parent;
					}
					else {
						break;
					}
				}
			}
			catch (e) {
			}

			return p;
		};

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 6) {
			nexacro._initHTMLSysEvent = function (_cur_win, _cur_doc) {
				document.execCommand('BackgroundImageCache', false, true);

				if (nexacro._is_attach_childframe) {
					if (!_cur_win.nexacro_HTMLSysEvent) {
						_cur_win.nexacro_HTMLSysEvent = new nexacro.Collection();
					}
				}

				var _win_win = nexacro.__getRealWindowHandle(_cur_win);
				var _win_doc = _win_win ? _win_win.document : document;

				nexacro._createWindowGC_Funcs(_cur_win);
				_cur_win.__createGC();

				nexacro._createSysEvent_ForwardFuncs(_cur_win);
				var _sysEvent;
				if (nexacro._is_attach_childframe) {
					var _sysEvent = new nexacro.HTMLSysEvent(_win_win, _win_doc, _cur_win, _cur_doc);
					_cur_win.nexacro_HTMLSysEvent.add_item(nexacro._custom_node_id, _sysEvent);
				}
				else {
					_sysEvent = _cur_win.nexacro_HTMLSysEvent = new nexacro.HTMLSysEvent(_win_win, _win_doc, _cur_win, _cur_doc);
				}
				_sysEvent._custom_node_id = nexacro._custom_node_id;
				_sysEvent._initDocEventHandler();
			};
		}
		else {
			nexacro._initHTMLSysEvent = function (_cur_win, _cur_doc) {
				if (nexacro._is_attach_childframe) {
					if (!_cur_win.nexacro_HTMLSysEvent) {
						_cur_win.nexacro_HTMLSysEvent = new nexacro.Collection();
					}
				}
				else {
					_cur_win.nexacro_HTMLSysEvent = [];
				}
				var _win_win = nexacro.__getRealWindowHandle(_cur_win);
				var _win_doc = _win_win ? _win_win.document : document;

				nexacro._createWindowGC_Funcs(_cur_win);
				_cur_win.__createGC();

				nexacro._initHTMLSysTimerManager(_cur_win);

				nexacro.__setDOMNodeStyleOverscrollBehavior(nexacro._getWindowDestinationHandle(_win_win).style);

				nexacro._createSysEvent_ForwardFuncs(_cur_win);

				var _sysEvent;
				if (nexacro._is_attach_childframe) {
					_sysEvent = new nexacro.HTMLSysEvent(_win_win, _win_doc, _cur_win, _cur_doc);
					_cur_win.nexacro_HTMLSysEvent.add_item(nexacro._custom_node_id, _sysEvent);
				}
				else {
					_sysEvent = _cur_win.nexacro_HTMLSysEvent = new nexacro.HTMLSysEvent(_win_win, _win_doc, _cur_win, _cur_doc);
				}
				_sysEvent._custom_node_id = nexacro._custom_node_id;
				_sysEvent._initDocEventHandler();
			};
		}

		nexacro._finalizeHTMLSysEvent = function (_cur_win, id) {
			_cur_win.__createGC = null;
			_cur_win.__clearGC = null;
			_cur_win.__destroyGC = null;

			if (nexacro && nexacro._is_attach_childframe) {
				var htmlsysevent = _cur_win.nexacro_HTMLSysEvent;
				htmlsysevent.delete_item(id);
				if (htmlsysevent && htmlsysevent.length == 0) {
					htmlsysevent = null;
				}
			}
			else {
				_cur_win.nexacro_HTMLSysEvent = null;
			}
		};

		nexacro._preparePopupFrame = function (_cur_win, _cur_doc) {
			var parent_win = nexacro._findWindow(_cur_win.opener || parent);
			nexacro._copyLocalStorage(parent_win);
			nexacro._initHTMLSysEvent(_cur_win, _cur_doc);
			nexacro._prepareManagerFrame();
			nexacro._initializeGlobalObjects(_cur_win);
			nexacro._registerClass(_cur_win);
		};

		nexacro._createPopupFrame = function (_cur_win, urlparams) {
			nexacro._t_mgr = application._touch_manager;
			application._touch_manager = null;

			var name = urlparams["framename"];

			var parent_win = nexacro._findWindow(_cur_win.opener || parent);
			var _win = new nexacro.Window(name, parent_win);

			_win.setLinkedWindow(_cur_win);
			_win._is_popup_window = true;
			if (parent_win) {
				parent_win.addChild(_win);
			}

			nexacro._applyScreenAutozoom();
			nexacro.__setViewportScale();
			nexacro._skipDragEventAfterMsgBox = false;

			if (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8) {
				var popupframeoption = nexacro._getLocalStorage(name);
				if (!popupframeoption) {
					nexacro._copyLocalStorage(parent_win, true);
				}
			}

			var childframe = new nexacro.ChildFrame(name);
			childframe._showModeless(name, _win);
		};

		nexacro.__attachChildFrame = function (_cur_win, _doc, key, adl_url, div_id, fdl_url) {
			var name = div_id + "_userframe";

			if (_doc.getElementById(name)) {
				return;
			}

			if (!nexacro._is_attach_childframe) {
				nexacro._prepareManagerFrame();
			}

			nexacro._is_attach_childframe = true;

			nexacro._custom_node_id = div_id;
			nexacro._initHTMLSysEvent(_cur_win, _doc);

			application.load(key, adl_url);

			var obj_div = _doc.getElementById(div_id);
			nexacro.__setDOMNodeStyleAbsolute(obj_div.style);

			var width = obj_div.offsetWidth;
			var height = obj_div.offsetHeight;

			var childframe = new nexacro.ChildFrame(name);
			childframe._is_main = true;
			childframe._is_window = true;
			childframe._window_type = 0;
			childframe.showtitlebar = false;
			childframe.showstatusbar = false;


			var _win = childframe._window = new nexacro.Window(name, null, true);
			_win._custom_node = obj_div;
			_win._custom_node_id = div_id;
			_win._custom_node_left = obj_div.offsetLeft;
			_win._custom_node_top = obj_div.offsetTop;

			_win.create(null, name, width, height, 0, 0);
			_win.attachFrame(childframe, false);

			childframe.createComponent();

			setTimeout(function () {
				childframe.init(name, "absolute", 0, 0, width, height, null, null, fdl_url);
				childframe.on_created();
				obj_div.appendChild(childframe._control_element._handle);
			}, 500);
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._syshandler_onmessage = function (_sysEvent, node, evt) {
				var id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, id);

				win._on_sys_message(evt.data);
			};

			nexacro._syshandler_onmousedown = function (_sysEvent, node, evt) {
				var id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, id);
				var elem = nexacro.__findParentElement(node);
				elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(evt.clientX, evt.clientY) : elem;

				var comp = nexacro._findParentComponent(elem);
				var input_elem = (comp && comp._input_element) ? comp._input_element : null;
				if (nexacro.Browser == "IE" && input_elem) {
					if (input_elem._is_mousedown === false) {
						input_elem._is_mousedown = true;
					}
				}

				if (nexacro._is_attach_childframe) {
					var len = nexacro_HTMLSysEvent.length;
					for (var i = 0; i < len; i++) {
						var sysEvent = nexacro_HTMLSysEvent[i];
						if (sysEvent._custom_node_id == id) {
							continue;
						}

						var w1 = nexacro._findWindow(sysEvent._win_win, sysEvent._custom_node_id);
						if (w1._is_active_window) {
							w1._is_active_window = false;
							w1._on_sys_deactivate(_sysEvent._cur_over_elem);
						}
					}
				}

				if (win && elem) {
					_sysEvent._cur_win.__clearGC();
					if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
						if (win._is_active_window == false) {
							win._on_sys_activate();
						}

						if (_sysEvent._cur_win.document.hasFocus) {
							if (false == _sysEvent._cur_win.document.hasFocus()) {
								_sysEvent._cur_win.focus();
							}
						}

						var ret = win._on_sys_lbuttondown(elem, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);

						if ((nexacro.SystemLang != "ja") || (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 9)) {
							if ((!input_elem || (input_elem && input_elem._is_mousedown))
								 && win._last_focused_elem != elem && win._last_focused_elem instanceof nexacro.InputElement && win._last_focused_elem.parent) {
								win._last_focused_elem._on_sys_mousedown(evt.keyCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
							}
						}

						if (!(elem instanceof nexacro.InputElement && elem.enable)) {
							nexacro._stopSysEvent(evt);
						}


						return ret;
					}
					else if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_RBUTTON : nexacro_HTMLSysEvent.MOUSE_RBUTTON) || evt.button == 0) {
						if (win._is_active_window == false) {
							win._on_sys_activate();
						}

						if (_sysEvent._cur_win.document.hasFocus) {
							if (false == _sysEvent._cur_win.document.hasFocus()) {
								_sysEvent._cur_win.focus();
							}
						}

						var ret = win._on_sys_rbuttondown(elem, "rbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);

						if ((!input_elem || (input_elem && input_elem._is_mousedown))
							 && win._last_focused_elem != elem && win._last_focused_elem instanceof nexacro.InputElement && win._last_focused_elem.parent) {
							win._last_focused_elem._on_sys_mousedown(evt.keyCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
						}

						if (!(elem instanceof nexacro.InputElement && elem.enable)) {
							nexacro._stopSysEvent(evt);
						}


						return ret;
					}
					else {
						var ret = win._on_sys_mousedown(elem, "mbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);

						if (nexacro.SystemLang != "ja" && nexacro.OSVersion >= 6.0) {
							if (win._last_focused_elem != elem && win._last_focused_elem instanceof nexacro.InputElement && win._last_focused_elem.parent) {
								win._last_focused_elem._on_sys_mousedown(evt.keyCode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
							}
						}


						if (!(elem instanceof nexacro.InputElement && elem.enable)) {
							nexacro._stopSysEvent(evt);
						}


						return ret;
					}
				}
				return false;
			};
			nexacro._syshandler_onmouseup = function (_sysEvent, node, evt) {
				var id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._cur_win, id);
				var elem = nexacro.__findParentElement(node);
				var ret = false;

				if (nexacro.OS == "Windows" && nexacro.BrowserType == "Edge") {
					var hover_elem = nexacro.__getElementFromPoint(win._handle, evt.clientX, evt.clientY);
					if (elem != hover_elem) {
						elem = hover_elem;
					}
				}

				if (win && elem) {
					var comp = nexacro._findParentComponent(elem);
					var input_elem = (comp && comp._input_element) ? comp._input_element : null;
					if (nexacro.Browser == "IE" && input_elem) {
						if (input_elem._is_mousedown === true) {
							input_elem._is_mousedown = false;
						}
					}

					if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
						var doc = _sysEvent._cur_doc;
						var _win = _sysEvent._cur_win;

						ret = win._on_sys_lbuttonup(elem, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					}
					else if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_RBUTTON : nexacro_HTMLSysEvent.MOUSE_RBUTTON)) {
						ret = win._on_sys_rbuttonup(elem, "rbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					}
					else {
						ret = win._on_sys_mouseup(elem, "mbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					}
					var last_focused_elem = win._last_focused_elem;
					if (last_focused_elem && (win._last_focused_elem instanceof nexacro.InputElement) && last_focused_elem != elem) {
						var comp = last_focused_elem._parent_elem.linkedcontrol;
						if (comp && comp._edit_base_api) {
							comp._edit_base_api._on_input_mouseup(last_focused_elem, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
						}
						comp = null;
					}
					last_focused_elem = null;
				}
				else if ((win && elem == undefined) && nexacro.Browser == "IE" && nexacro._getRealBrowserVersion() == 11) {
					var last_focused_elem = win._last_focused_elem;
					if (last_focused_elem && (win._last_focused_elem instanceof nexacro.InputElement) && last_focused_elem != elem) {
						var comp = last_focused_elem._parent_elem.linkedcontrol;
						if (comp && comp._edit_base_api) {
							comp._edit_base_api._on_input_mouseup(last_focused_elem, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
						}
						comp = null;
					}
					last_focused_elem = null;
				}
				return ret;
			};

			nexacro._syshandler_lock_onmouseup = nexacro._emptyFn;
			nexacro._syshandler_onmousemove = function (_sysEvent, node, evt) {
				var id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._cur_win, id);
				var elem = nexacro.__findParentElement(node);
				if (!win) {
					return false;
				}


				elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(evt.clientX, evt.clientY) : elem;
				var w_x = nexacro._getWindowHandlePosX(win._handle, id);
				var w_y = nexacro._getWindowHandlePosY(win._handle, id);
				var w_width = nexacro._getMainWindowWidth(win, id);
				var w_height = nexacro._getMainWindowHeight(win, id);

				if (win._cur_screen_pos.x == evt.screenX && win._cur_screen_pos.y == evt.screenY) {
					return false;
				}
				else if (evt.screenX < w_x || evt.screenX > (w_x + w_width) || evt.screenY < w_y || evt.screenY > (w_y + w_height)) {
					if (nexacro._cur_track_info && nexacro._cur_track_info.target instanceof nexacro.TitleBar) {
						return false;
					}
				}

				win._cur_screen_pos.x = evt.screenX;
				win._cur_screen_pos.y = evt.screenY;
				win._cur_client_pos.x = evt.clientX;
				win._cur_client_pos.y = evt.clientY;

				var button = (win._cur_ldown_elem ? "lbutton" : (win._cur_rdown_elem ? "rbutton" : (win._cur_mdown_elem ? "mbutton" : "none")));
				_sysEvent._cur_win.__clearGC();
				if (elem) {
					win._on_sys_mousemove(elem, button, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					return true;
				}
				else if (win._cur_ldown_elem) {
					win._on_sys_mousemove(null, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
				}
				return false;
			};
			nexacro._syshandler_lock_onmousemove = nexacro._emptyFn;

			nexacro._syshandler_onmousewheel = function (_sysEvent, node, evt) {
				var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
				var elem = nexacro.__findParentElement(node);
				if (win && elem) {
					_sysEvent._cur_win.__clearGC();

					var ret = win._on_sys_mousewheel(elem, nexacro.__getWheelDeltaX(evt), nexacro.__getWheelDeltaY(evt), nexacro._getSysEventBtnString({
						button : 4, 
						which : 2
					}), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					if (ret === false) {
						var target = evt.target || evt.srcElement;
						var isIframeEvent = (win._doc != target.ownerDocument);
						if (!isIframeEvent) {
							nexacro._stopSysEvent(evt);
						}
					}
					return;
				}
				return false;
			};
		}
		else if (nexacro.Browser != "IE") {
			nexacro._syshandler_onmessage = function (_sysEvent, node, evt) {
				var id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, id);

				win._on_sys_message(evt.data);
			};

			nexacro._syshandler_onmousedown = function (_sysEvent, node, evt) {
				var id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, id);

				if (nexacro._is_attach_childframe) {
					var len = nexacro_HTMLSysEvent.length;
					for (var i = 0; i < len; i++) {
						var sysEvent = nexacro_HTMLSysEvent[i];
						if (sysEvent._custom_node_id == id) {
							continue;
						}

						var w1 = nexacro._findWindow(sysEvent._win_win, sysEvent._custom_node_id);
						if (w1._is_active_window) {
							w1._is_active_window = false;
							w1._on_sys_deactivate(_sysEvent._cur_over_elem);
						}
					}
				}

				var elem = nexacro.__findParentElement(node);
				if (win && elem) {
					if (win._is_active_window == false) {
						win._on_sys_activate();
					}

					if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
						var ret = win._on_sys_lbuttondown(elem, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
						_sysEvent.lockMouseMove(node);


						if (!(elem instanceof nexacro.InputElement && elem.enable)) {
							nexacro._stopSysEvent(evt);
						}

						return ret;
					}
					else if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[id].MOUSE_RBUTTON : nexacro_HTMLSysEvent.MOUSE_RBUTTON)) {
						var ret = win._on_sys_rbuttondown(elem, "rbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
						if (!(elem instanceof nexacro.InputElement && elem.enable)) {
							nexacro._stopSysEvent(evt);
						}

						return ret;
					}
					else {
						var ret = win._on_sys_mousedown(elem, "mbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
						if (!(elem instanceof nexacro.InputElement && elem.enable)) {
							nexacro._stopSysEvent(evt);
						}

						return ret;
					}
				}
				return false;
			};
			nexacro._syshandler_onmouseup = function (_sysEvent, node, evt) {
				var node_id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, node_id);
				var elem = nexacro.__findParentElement(node);
				var ret = false;
				if (win && elem) {
					var down_elem = win._cur_ldown_elem;
					if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[node_id].MOUSE_RBUTTON : nexacro_HTMLSysEvent.MOUSE_RBUTTON)) {
						ret = win._on_sys_rbuttonup(elem, "rbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					}
					else {
						ret = win._on_sys_mouseup(elem, "mbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					}
					var last_focused_elem = win._last_focused_elem;
					if (down_elem instanceof nexacro.InputElement && 
						last_focused_elem && (win._last_focused_elem instanceof nexacro.InputElement) && last_focused_elem != elem) {
						var comp = last_focused_elem._parent_elem.linkedcontrol;
						if (comp && comp._edit_base_api) {
							comp._edit_base_api._on_input_mouseup(last_focused_elem, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
						}
						comp = null;
					}
					last_focused_elem = null;
				}
				return ret;
			};
			nexacro._syshandler_lock_onmouseup = function (_sysEvent, node, evt) {
				var node_id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, node_id);
				var elem = nexacro.__findParentElement(node);

				var ret = false;
				if (win) {
					var down_elem = win._cur_ldown_elem;
					if (evt.button == (nexacro._is_attach_childframe ? nexacro_HTMLSysEvent[node_id].MOUSE_LBUTTON : nexacro_HTMLSysEvent.MOUSE_LBUTTON)) {
						_sysEvent.unlockMouseMove(node);
						ret = win._on_sys_lbuttonup(elem, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					}
					var last_focused_elem = win._last_focused_elem;
					if (down_elem instanceof nexacro.InputElement && 
						last_focused_elem && (win._last_focused_elem instanceof nexacro.InputElement) && last_focused_elem != elem) {
						var comp = last_focused_elem._parent_elem.linkedcontrol;
						if (comp && comp._edit_base_api) {
							comp._edit_base_api._on_input_mouseup(last_focused_elem, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
						}
						comp = null;
					}
					last_focused_elem = null;
				}
				return ret;
			};
			nexacro._syshandler_onmousemove = function (_sysEvent, node, evt) {
				var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
				var elem = nexacro.__findParentElement(node);
				if (!win) {
					return false;
				}



				if (win._cur_screen_pos.x == evt.screenX && win._cur_screen_pos.y == evt.screenY) {
					return false;
				}

				win._cur_screen_pos.x = evt.screenX;
				win._cur_screen_pos.y = evt.screenY;
				win._cur_client_pos.x = evt.clientX;
				win._cur_client_pos.y = evt.clientY;

				var button = (win._cur_rdown_elem ? "rbutton" : (win._cur_mdown_elem ? "mbutton" : "none"));

				if (elem) {
					win._on_sys_mousemove(elem, button, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					return true;
				}
				return false;
			};
			nexacro._syshandler_lock_onmousemove = function (_sysEvent, node, evt) {
				var node_id = _sysEvent._custom_node_id;
				var win = nexacro._findWindow(_sysEvent._win_win, node_id);
				var elem = nexacro.__findParentElement(node);
				if (!win) {
					return false;
				}


				var w_x = nexacro._getWindowHandlePosX(win._handle, node_id);
				var w_y = nexacro._getWindowHandlePosY(win._handle, node_id);
				var w_width = nexacro._getMainWindowWidth(win, node_id);
				var w_height = nexacro._getMainWindowHeight(win, node_id);

				if (win._cur_screen_pos.x == evt.screenX && win._cur_screen_pos.y == evt.screenY) {
					return false;
				}
				else if (evt.screenX < w_x || evt.screenX > (w_x + w_width) || evt.screenY < w_y || evt.screenY > (w_y + w_height)) {
					if (nexacro._cur_track_info && nexacro._cur_track_info.target instanceof nexacro.TitleBar) {
						return false;
					}
				}

				win._cur_screen_pos.x = evt.screenX;
				win._cur_screen_pos.y = evt.screenY;
				win._cur_client_pos.x = evt.clientX;
				win._cur_client_pos.y = evt.clientY;

				if (elem) {
					win._on_sys_mousemove(elem, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					return true;
				}
				else {
					win._on_sys_mousemove(null, "lbutton", evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
				}
				return false;
			};

			nexacro._syshandler_onmousewheel = function (_sysEvent, node, evt) {
				var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
				var elem = nexacro.__findParentElement(node);
				if (win && elem) {
					var ret = win._on_sys_mousewheel(elem, nexacro.__getWheelDeltaX(evt), nexacro.__getWheelDeltaY(evt), nexacro._getSysEventBtnString({
						button : 1, 
						which : 2
					}), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
					if (ret === false) {
						var isIframeEvent = (win._doc != evt.target.ownerDocument);
						if (!isIframeEvent) {
							nexacro._stopSysEvent(evt);
						}
					}
					return;
				}
				return false;
			};
		}

		nexacro._syshandler_ontouchstart = function (_sysEvent, node, evt, orgevt) {
			if (evt.stopped === true) {
				return;
			}

			if (orgevt && orgevt.stopped === true) {
				return;
			}


			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			if (!win || win._isFrozen) {
				return;
			}



			{

				if (evt.touches && evt.changedTouches && 
					evt.touches.length == 1 && evt.changedTouches.length == 1 && 
					evt.touches.length == evt.changedTouches.length) {
					var manager = win._getTouchManager();
					var curTouches = manager._currentTouches;
					var curTime = (evt.timeStamp || new Date().getTime());
					var len = curTouches ? curTouches.length : 0;
					if (len > 0) {
						if (len >= 2) {
							if (!manager._ignore_touchstart) {
								manager._ignore_touchstart = true;
							}
							else {
								for (var i = len - 1; i >= 0; i--) {
									win._on_sys_touchcancel(elem, curTouches[i].touchid.slice(1), 0, 0, 0, 0, (evt.timeStamp || new Date().getTime()), (evt.originalTimeStamp) ? evt.originalTimeStamp : curTime, (i == 0));
								}

								manager._ignore_touchstart = false;
							}
						}
						else if (len == 1) {
							for (var i = len - 1; i >= 0; i--) {
								win._on_sys_touchcancel(elem, curTouches[i].touchid.slice(1), 0, 0, 0, 0, (evt.timeStamp || new Date().getTime()), (evt.originalTimeStamp) ? evt.originalTimeStamp : curTime, (i == 0));
							}

							manager._ignore_touchstart = false;
						}
					}
				}
			}

			if (elem) {
				if (nexacro.OS == "iOS" && nexacro._isHybrid()) {
					var ver = parseInt(nexacro.OSVersion);
					if (win._is_active_window === false && ver >= 13) {
						win._on_sys_activate();
					}
				}

				var touchlen = evt.changedTouches ? evt.changedTouches.length : 1;
				var ret = false;

				var manager = win._getTouchManager();
				var curTouches = manager._currentTouches;

				var first_touchid = evt.touches ? evt.touches[0].identifier : null;
				for (var i = 0; i < touchlen; i++) {
					var touch = evt.changedTouches ? evt.changedTouches[i] : (evt.touches ? evt.touches[0] : evt);
					var clientX = touch.pageX || touch.clientX;
					var clientY = touch.pageY || touch.clientY;
					var screenX = touch.screenX || clientX;
					var screenY = touch.screenY || clientY;
					var curTime = (evt.timeStamp || new Date().getTime());
					var orgTime = (evt.originalTimeStamp) ? evt.originalTimeStamp : curTime;
					var touchid = touch.identifier;
					var isPrimary = touch.isPrimary;
					if (isPrimary && touchlen > 0) {
						curTouches.clear();
					}
					ret |= win._on_sys_touchstart(elem, touchid, clientX, clientY, screenX, screenY, curTime, orgTime, (i == touchlen - 1), first_touchid);
				}

				if (ret) {
					if (orgevt) {
						evt = orgevt;
					}
					nexacro._stopSysEvent(evt);
					return true;
				}
			}

			return false;
		};
		nexacro._syshandler_ontouchend = function (_sysEvent, node, evt, orgevt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			if (!win || win._isFrozen) {
				return;
			}

			var touchlen = evt.changedTouches ? evt.changedTouches.length : 1;
			var ret = false;
			for (var i = 0; i < touchlen; i++) {
				var touch = evt.changedTouches ? evt.changedTouches[i] : evt;
				var clientX = touch.pageX || touch.clientX;
				var clientY = touch.pageY || touch.clientY;
				var screenX = touch.screenX || clientX;
				var screenY = touch.screenY || clientY;
				var curTime = (evt.timeStamp || new Date().getTime());
				var orgTime = (evt.originalTimeStamp) ? evt.originalTimeStamp : curTime;
				var touchid = touch.identifier;
				var pointX = clientX;
				var pointY = clientY;

				if (!((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion > 42)) {
					if (window.pageXOffset > 0) {
						pointX -= window.pageXOffset;
					}
					if (window.pageYOffset > 0) {
						pointY -= window.pageYOffset;
					}
				}

				if (nexacro._cur_drag_info && nexacro._cur_drag_info.data) {
					var hover_elem = nexacro.__getElementFromPoint(win._handle, pointX, pointY);
					if (hover_elem) {
						elem = hover_elem;
					}
				}

				nexacro._pointerType = orgevt ? orgevt.pointerType : null;
				ret |= win._on_sys_touchend(elem, touchid, clientX, clientY, screenX, screenY, curTime, orgTime, (i == touchlen - 1));
				nexacro._pointerType = null;
			}

			if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
				var comp = nexacro._findParentComponent(elem);
				if (comp && comp._has_inputElement) {
					if (nexacro._last_touchend_time && (curTime - nexacro._last_touchend_time) < 400) {
						evt.preventDefault();
						if (evt.srcElement instanceof HTMLInputElement) {
							if (!evt.srcElement.readOnly) {
								evt.srcElement.focus();
							}
						}
					}
					nexacro._last_touchend_time = curTime;
				}
			}

			if (ret) {
				if (nexacro.OS == "iOS" && nexacro.OSVersion.split(".")[0] >= 13) {
					var old_comp;
					var cur_focus_paths = win.getCurrentFocusPaths();
					if (cur_focus_paths) {
						old_comp = cur_focus_paths[cur_focus_paths.length - 1];
					}

					if ((old_comp && old_comp._input_element && old_comp._input_element._is_ios_composition_returned) || elem._is_ios_composition_returned) {
						return;
					}
				}

				if (orgevt) {
					evt = orgevt;
				}
				nexacro._stopSysEvent(evt);
				return true;
			}
		};
		nexacro._syshandler_ontouchmove = function (_sysEvent, node, evt, orgevt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			if (!win || win._isFrozen) {
				return;
			}

			var touchlen = evt.changedTouches ? evt.changedTouches.length : 1;
			var ret = false;
			for (var i = 0; i < touchlen; i++) {
				var touch = evt.changedTouches ? evt.changedTouches[i] : evt;
				var clientX = touch.pageX || touch.clientX;
				var clientY = touch.pageY || touch.clientY;
				var screenX = touch.screenX || clientX;
				var screenY = touch.screenY || clientY;
				var curTime = (evt.timeStamp || new Date().getTime());
				var orgTime = (evt.originalTimeStamp) ? evt.originalTimeStamp : curTime;
				var touchid = touch.identifier;
				var pointX = clientX;
				var pointY = clientY;

				if (!((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion > 42)) {
					if (window.pageXOffset > 0) {
						pointX -= window.pageXOffset;
					}
					if (window.pageYOffset > 0) {
						pointY -= window.pageYOffset;
					}
				}

				var hover_elem = nexacro.__getElementFromPoint(win._handle, pointX, pointY);
				if (hover_elem) {
					elem = hover_elem;
				}

				ret |= win._on_sys_touchmove(elem, touchid, clientX, clientY, screenX, screenY, curTime, orgTime, (i == touchlen - 1));
			}

			if (ret) {
				if (orgevt) {
					evt = orgevt;
				}
				nexacro._stopSysEvent(evt);
				return true;
			}
		};
		nexacro._syshandler_ontouchcancel = function (_sysEvent, node, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			if (!win || win._isFrozen) {
				return;
			}

			var touchlen = evt.changedTouches ? evt.changedTouches.length : 1;
			var ret = false;
			for (var i = 0; i < touchlen; i++) {
				var touch = evt.changedTouches ? evt.changedTouches[i] : evt;
				var clientX = touch.pageX || touch.clientX;
				var clientY = touch.pageY || touch.clientY;
				var screenX = touch.screenX || clientX;
				var screenY = touch.screenY || clientY;
				var curTime = (evt.timeStamp || new Date().getTime());
				var orgTime = (evt.originalTimeStamp) ? evt.originalTimeStamp : curTime;
				var touchid = touch.identifier;
				var pointX = clientX;
				var pointY = clientY;

				if (!((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion > 42)) {
					if (window.pageXOffset > 0) {
						pointX -= window.pageXOffset;
					}
					if (window.pageYOffset > 0) {
						pointY -= window.pageYOffset;
					}
				}

				var hover_elem = nexacro.__getElementFromPoint(win._handle, pointX, pointY);
				if (hover_elem) {
					elem = hover_elem;
				}

				ret |= win._on_sys_touchcancel(elem, touchid, clientX, clientY, screenX, screenY, curTime, orgTime, (i == touchlen - 1));
			}
		};

		nexacro._syshandler_ondblclick = function (_sysEvent, node, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			if (win && elem) {
				_sysEvent._cur_win.__clearGC();
				var ret = win._on_sys_dblclick(elem, nexacro._getSysEventBtnString({
					button : 1, 
					which : 1
				}), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);

				if (elem._event_stop) {
					elem._event_stop = false;
					nexacro._stopSysEvent(evt);
					return false;
				}
				return ret;
			}
			return false;
		};

		nexacro._syshandler_onmouseover = function (_sysEvent, node, fromnode, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			if (!application) {
				return false;
			}


			elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(evt.clientX, evt.clientY) : elem;
			var from_elem = _sysEvent._cur_over_elem;

			var elem_comp = win ? win.findComponent(elem, 0, 0)[0] : null;
			var from_elem_comp = win ? win.findComponent(from_elem, 0, 0)[0] : null;

			if (win && elem && from_elem != elem && from_elem_comp != elem_comp) {
				var button = (win._cur_ldown_elem ? "lbutton" : (win._cur_rdown_elem ? "rbutton" : (win._cur_mdown_elem ? "mbutton" : "none")));

				if (from_elem && from_elem._handle) {
					win._on_sys_mouseleave(from_elem, elem, button, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);
				}
				else {
					from_elem = nexacro.__findParentElement(fromnode);
				}
				_sysEvent._cur_over_elem = elem;
				var ret = win._on_sys_mouseenter(elem, from_elem, button, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);

				return ret;
			}
			return false;
		};
		nexacro._syshandler_onmouseout = function (_sysEvent, node, tonode, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElement(node);
			elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(evt.clientX, evt.clientY) : elem;
			if (win && elem && _sysEvent._cur_over_elem == elem) {
				if (nexacro.OS == "Windows" && nexacro.BrowserType == "Edge") {
					var dragInfo = nexacro._cur_drag_info;
					if (dragInfo && dragInfo.isDragging && win._touched_elem) {
						elem = win._touched_elem;
					}
				}
				var to_elem = nexacro.__findParentElement(tonode);
				if (to_elem && to_elem.setSelectEventPassElement) {
					to_elem = to_elem.setSelectEventPassElement(evt.clientX, evt.clientY);
				}
				var elem_comp = win.findComponent(elem, 0, 0)[0];
				var to_elem_comp = win.findComponent(to_elem, 0, 0)[0];

				if (to_elem != elem && to_elem_comp != elem_comp) {
					_sysEvent._cur_over_elem = null;
					var button = (win._cur_ldown_elem ? "lbutton" : (win._cur_rdown_elem ? "rbutton" : (win._cur_mdown_elem ? "mbutton" : "none")));
					var ret = win._on_sys_mouseleave(elem, to_elem, button, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey, evt.clientX, evt.clientY, evt.screenX, evt.screenY);

					return ret;
				}
			}
			return false;
		};

		if (nexacro.Browser != "IE" || (nexacro.Browser == "IE" && nexacro.OSVersion >= 6.0)) {
			nexacro._syshandler_onkeydown = function (_sysEvent, node, evt) {
				var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
				var elem = nexacro.__findParentElementForKeyEvent(node, win);
				var keycode = nexacro._getSysEventKeyCode(evt);
				if (win && elem) {
					_sysEvent._cur_win.__clearGC();
					win._on_sys_keydown(elem, nexacro._getSysEventKeyCode(evt), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
					if (elem._event_stop) {
						nexacro._stopSysEvent(evt);
						elem._event_stop = false;
					}
					else if ((nexacro.Browser == "IE" || nexacro.BrowserType == "Edge") && keycode == nexacro.Event.KEY_BACKSPACE) {
						if (!(elem instanceof nexacro.InputElement || elem instanceof nexacro.TextAreaElement) || ((elem instanceof nexacro.InputElement || elem instanceof nexacro.TextAreaElement) && elem.readonly)) {
							nexacro._stopSysEvent(evt);
						}
					}


					return true;
				}
				return false;
			};
		}
		else {
			nexacro._syshandler_onkeydown = function (_sysEvent, node, evt) {
				var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
				var elem = nexacro.__findParentElementForKeyEvent(node, win);
				if (win && elem) {
					_sysEvent._cur_win.__clearGC();
					var keycode = nexacro._getSysEventKeyCode(evt);
					win._on_sys_keydown(elem, keycode, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
					if (elem._event_stop) {
						nexacro._stopSysEvent(evt, evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
						elem._event_stop = false;
					}


					return true;
				}
				return false;
			};
		}
		nexacro._syshandler_onkeypress = function (_sysEvent, node, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElementForKeyEvent(node, win);
			if (win && elem) {
				_sysEvent._cur_win.__clearGC();
				var ret = win._on_sys_keypress(elem, nexacro._getSysEventKeyCode(evt), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);

				return ret;
			}
			return false;
		};
		nexacro._syshandler_onkeyup = function (_sysEvent, node, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			var elem = nexacro.__findParentElementForKeyEvent(node, win);
			if (win && elem) {
				return win._on_sys_keyup(elem, nexacro._getSysEventKeyCode(evt), evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
			}
			return false;
		};

		nexacro._syshandler_onactivate = function (_sysEvent, evt) {
			var id = _sysEvent._custom_node_id;
			var win = nexacro._findWindow(_sysEvent._win_win, id);

			if (nexacro._is_attach_childframe) {
				var len = nexacro_HTMLSysEvent.length;
				for (var i = 0; i < len; i++) {
					var sysEvent = nexacro_HTMLSysEvent[i];
					if (sysEvent._custom_node_id == id) {
						continue;
					}

					var w1 = nexacro._findWindow(sysEvent._win_win, sysEvent._custom_node_id);
					if (w1._is_active_window) {
						w1._is_active_window = false;
						w1._on_sys_deactivate(_sysEvent._cur_over_elem);
					}
				}
			}

			if (win && win._on_sys_activate) {
				_sysEvent._cur_win.__clearGC();
				var ret = win._on_sys_activate();

				return ret;
			}
			return false;
		};

		nexacro._syshandler_ondeactivate = function (_sysEvent, evt) {
			var id = _sysEvent._custom_node_id;
			var win = nexacro._findWindow(_sysEvent._win_win, id);

			if (win) {
				if (win._on_sys_deactivate) {
					_sysEvent._cur_win.__clearGC();
					var ret = win._on_sys_deactivate(_sysEvent._cur_over_elem);

					return ret;
				}
			}
			return false;
		};

		nexacro._syshandler_onbeforeclose = function (_sysEvent, evt) {
			var win = nexacro._findWindow(_sysEvent._cur_win, _sysEvent._custom_node_id);
			var confirm_message;
			if (win && win._on_sys_beforeclose) {
				confirm_message = win._on_sys_beforeclose();
			}

			if (confirm_message !== undefined && confirm_message != "" && confirm_message !== null) {
				if (evt) {
					evt.returnValue = confirm_message;
				}
				return confirm_message;
			}
		};

		nexacro._syshandler_onclose = function (_sysEvent, evt) {
			_sysEvent._stopDetectWindowMove();

			var id = _sysEvent._custom_node_id;
			var win = nexacro._findWindow(_sysEvent._cur_win, id);
			if (win) {
				var _cur_win = _sysEvent._cur_win;
				_sysEvent._stopDocEventHandler();
				_sysEvent.clearAll();

				var ret = false;
				if (win._on_sys_close) {
					ret = win._on_sys_close();
				}

				if (_cur_win.__destroyGC) {
					_cur_win.__destroyGC();
				}

				nexacro._finalizeHTMLSysTimerManager(_cur_win);
				nexacro._finalizeHTMLSysEvent(_cur_win, id);
				nexacro._finalizeGlobalObjects(_cur_win);


				return ret;
			}
			return false;
		};

		nexacro._syshandler_onresize = function (_sysEvent, evt) {
			nexacro._checkClosePopupComponent();

			var id = _sysEvent._custom_node_id;
			var win = nexacro._findWindow(_sysEvent._win_win, id);
			if (win) {
				var w = nexacro._getWindowHandleClientWidth(win._handle, id);
				var h = nexacro._getWindowHandleClientHeight(win._handle, id);


				var is_force_change = false;
				var modal_stack = win._modal_frame_stack;
				if (modal_stack && modal_stack.length) {
					var overlay_elem = null;
					var modal_info = null, modal_frame = null;
					for (var i = 0, n = modal_stack.length; i < n; i++) {
						modal_info = modal_stack[i];
						modal_frame = modal_info[0];
						overlay_elem = modal_frame._modal_overlay_elem;

						if (overlay_elem && (overlay_elem.width != win.clientWidth || overlay_elem.height != win.clientHeight)) {
							is_force_change = true;
							break;
						}
					}
				}

				if (w != win.clientWidth || h != win.clientHeight || is_force_change) {
					var _is_webbrowser = win._doc ? win._doc.activeElement._linked_element instanceof nexacro.WebBrowserPluginElement : null;
					if (nexacro.OS == "Android" && (win._is_active_window || _is_webbrowser)) {
						var is_input_focused = false;
						var last_focused_elem = win._last_focused_elem;
						if (last_focused_elem && (last_focused_elem instanceof nexacro.InputElement || last_focused_elem instanceof nexacro.TextAreaElement)) {
							is_input_focused = true;
						}

						if ((is_input_focused || _is_webbrowser) && (w == win.clientWidth && h < win.clientHeight)) {
							if (is_input_focused) {
								var handle = last_focused_elem._input_handle;
								if (handle && handle.scrollIntoView) {
									handle.scrollIntoView(false);
								}
							}
							return false;
						}
					}

					_sysEvent._cur_win.__clearGC();
					var ret = win._on_sys_resize(w, h);

					if (nexacro.OS == "iOS" && parseFloat(nexacro.OSVersion) >= 8) {
						if (window.innerWidth == nexacro._getWindowHandleClientWidth(win._handle) && 
							window.innerHeight == nexacro._getWindowHandleClientHeight(win._handle)) {
							document.body.scrollLeft = 0;
						}
					}

					return ret;
				}
			}

			return false;
		};

		nexacro._syshandler_onmove = function (_sysEvent, evt) {
			var id = _sysEvent._custom_node_id;
			var win = nexacro._findWindow(_sysEvent._win_win, id);
			if (win) {
				var x = nexacro._getWindowHandlePosX(win._handle, id);
				var y = nexacro._getWindowHandlePosY(win._handle, id);

				if (x != win.left || y != win.top) {
					return win._on_sys_move(x, y);
				}
			}
			return false;
		};

		nexacro._syshandler_onload = function (_sysEvent, evt) {
			var win = nexacro._findWindow(_sysEvent._cur_win, _sysEvent._custom_node_id);
			if (win) {
				var _cur_win = _sysEvent._cur_win;

				var ret = false;
				if (win._on_sys_load) {
					ret = win._on_sys_load(_cur_win);
				}
				_cur_win.__destroyGC();
				return ret;
			}
			return false;
		};


		if (!nexacro.isTouchInteraction) {
			nexacro._syshandler_oncontextmenu = function (_sysEvent, node, evt) {
				var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
				var elem = nexacro.__findParentElement(node);
				var ret = true;
				if (win && elem) {
					var comp = win.findComponent(elem);

					if (application.usecontextmenu == "edit" && comp._edit_base_api && !(elem instanceof nexacro.InputElement)) {
						ret = false;
					}
					else {
						ret = win._on_sys_contextmenu(elem);
					}

					if (!ret) {
						ret = nexacro._stopSysEvent(evt);
					}
				}
				return ret;
			};
		}
		else {
			nexacro._syshandler_oncontextmenu = nexacro._emptyFn;
		}

		nexacro._syshandler_onorientationchange = function (_sysEvent, evt) {
			var win = nexacro._findWindow(_sysEvent._win_win, _sysEvent._custom_node_id);
			if (win && win.frame) {
				var o = nexacro._getMobileOrientation();
				nexacro.System._setOrientation(o);
				win.frame._on_orientationchange(o);
			}
		};

		nexacro._syshandler_onselectstart = function (_sysEvent, node, evt) {
			if (node && ((node.tagName == "INPUT" && (node.type == "text" || node.type == "password" || node.type == "search" || node.type == "tel" || node.type == "number")) || 
				node.tagName == "TEXTAREA")) {
				return true;
			}
			return nexacro._stopSysEvent(evt);
		};
		nexacro._syshandler_dragstart = function (_sysEvent, node, evt) {
			return nexacro._stopSysEvent(evt);
		};


		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._doc_init_html = "<html lang=\"" + nexacro.BrowserLang.substr(0, 2) + "\" xmlns:v='urn:schemas-microsoft-com:vml' xmlns:o='urn:schemas-microsoft-com:office:office'>\n"
				 + "<head>\n"
				 + "<meta http-equiv='X-UA-Compatible' content='IE=Edge' />\n"
				 + "<style>\n"
				 + "v\\:shape{behavior:url(#default#VML);}\n"
				 + "v\\:fill{behavior:url(#default#VML);}\n"
				 + "v\\:path{behavior:url(#default#VML);}\n"
				 + "v\\:line{behavior:url(#default#VML);}\n"
				 + "v\\:textpath{behavior:url(#default#VML);}\n"
				 + "o\\:opacity2{behavior:url(#default#VML);}\n"
				 + "</style>\n"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;background:transparent;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "var nexacro;"
				 + "if (window.dialogArguments) nexacro = window.dialogArguments.nexacro;\n"
				 + "if (!nexacro) nexacro = parent.nexacro; if (!nexacro) nexacro = window.nexacro; if (!nexacro && window.opener) nexacro = window.opener.nexacro;"
				 + "nexacro_HTMLSysEvent={};\n"
				 + "nexacro._initHTMLSysEvent(window, document);"
				 + "nexacro._preparePopupManagerFrame(window);"
				 + 'function _inputDOM_nodeClick(_input){ _input.click();}'
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 9) {
			nexacro._doc_init_html = "<html lang=\"" + nexacro.BrowserLang.substr(0, 2) + "\">\n"
				 + "<head>\n"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro; if (!nexacro) nexacro = window.nexacro; if (!nexacro) nexacro = window.opener.nexacro;"
				 + "nexacro_HTMLSysEvent={};\n"
				 + "nexacro._initHTMLSysEvent(window, document);"
				 + "nexacro._preparePopupManagerFrame(window);"
				 + 'function _inputDOM_nodeClick(_input){ _input.click();}'
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else if (nexacro.isTouchInteraction) {
			nexacro._doc_init_html = "<html lang=\"" + nexacro.BrowserLang.substr(0, 2) + "\">\n"
				 + "<head>\n"
				 + "<style>\n"
				 + "div {\n"
				 + "-moz-user-select:none;\n"
				 + "-webkit-user-select:none;\n"
				 + "-webkit-touch-callout:none;\n"
				 + "-webkit-appearance:none;\n"
				 + "-webkit-tap-highlight-color:rgba(0,0,0,0);\n"
				 + "outline: none;\n"
				 + "}\n"
				 + "</style>\n"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro;"
				 + "window.nexacro_HTMLSysEvent={};\n"
				 + "nexacro._initHTMLSysEvent(window, document);"
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}
		else {
			nexacro._doc_init_html = "<html lang=\"" + nexacro.BrowserLang.substr(0, 2) + "\">\n"
				 + "<head>\n"
				 + "<style>\n"
				 + "div {\n"
				 + "outline: none;\n"
				 + "}\n"
				 + "</style>\n"
				 + "</head>\n"
				 + "<body style='margin:0;border:none;'>\n"
				 + "<script type='text/javascript'>\n"
				 + "nexacro = parent.nexacro; if (!nexacro) nexacro = window.nexacro; if (!nexacro) nexacro = window.opener.nexacro;"
				 + "window.nexacro_HTMLSysEvent={};\n"
				 + "nexacro._initHTMLSysEvent(window, document);"
				 + "nexacro._preparePopupManagerFrame(window);"
				 + "</script>\n"
				 + "</body>\n"
				 + "</html>";
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._doc_head_style = "v\\:shape{behavior:url(#default#VML);}\n"
				 + "v\\:fill{behavior:url(#default#VML);}\n"
				 + "v\\:path{behavior:url(#default#VML);}\n"
				 + "v\\:line{behavior:url(#default#VML);}\n"
				 + "v\\:textpath{behavior:url(#default#VML);}\n"
				 + "o\\:opacity2{behavior:url(#default#VML);}\n";
		}
		else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 9) {
			nexacro._doc_head_style = "";
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE" && nexacro.BrowserVersion >= 10) {
			nexacro._doc_head_style = " body { \n"
				 + "touch-action: none;\n"
				 + "}\n"
				 + "input::-ms-clear { display: none; }\n"
				 + "input::-ms-reveal { display: none; }\n";
		}
		else if (nexacro.isTouchInteraction) {
			nexacro._doc_head_style = "div {\n"
				 + "-moz-user-select:none;\n"
				 + "-webkit-user-select:none;\n"
				 + "-webkit-touch-callout:none;\n"
				 + "-webkit-appearance:none;\n"
				 + "-webkit-tap-highlight-color:rgba(0,0,0,0);\n"
				 + "outline: none;\n"
				 + "}\n";
		}
		else {
			nexacro._doc_head_style = "div {\n"
				 + "outline: none;\n"
				 + "}\n"
				 + "Textarea::-webkit-scrollbar {\n"
				 + "display: none; }";
		}

		nexacro._createWindowHandle = function (parent_win, target_win, name, left, top, width, height, resizable, layered, taskbar, is_main) {
			var _win_handle = null;
			if (is_main == true) {
				_win_handle = nexacro._getMainWindowHandle();
				application._mainwindow_handle = _win_handle;
			}
			else {
				var parent_handle = null;
				if (parent_win) {
					parent_handle = parent_win._dest_handle;
				}
				_win_handle = nexacro.__createWindowHandle(parent_handle, target_win, name, left, top, width, height, resizable, layered, taskbar);

				if (!_win_handle) {
					return;
				}
			}

			nexacro.__setViewportScale();

			_win_handle.document.body.style.overflow = "visible";

			var head = _win_handle.document.head;
			if (head && head.children) {
				var child = head.children;
				for (var i = 0, n = child.length; i < n; i++) {
					if (child[i].nodeName == "STYLE") {
						if (!target_win._custom_node_id) {
							child[i].innerHTML = nexacro._doc_head_style;
						}
						else {
							child[i].innerHTML += nexacro._doc_head_style;
						}
						break;
					}
				}
			}

			if (nexacro._is_attach_childframe) {
				if (!_win_handle._linked_window) {
					_win_handle._linked_window = new nexacro.Collection();
				}
				_win_handle._linked_window.add_item(target_win._custom_node_id, target_win);
			}
			else {
				_win_handle._linked_window = target_win;
			}
			target_win.attachHandle(_win_handle);
			if (!is_main) {
				setTimeout(function () {
					nexacro.__fireHTMLEvent(_win_handle.document.body, 'load', 'onload');
				}, 10);
			}
		};

		nexacro._setLinkedWindow = function (_handle, target_win) {
			_handle._linked_window = target_win;
		};
		nexacro._createOpenWindowHandle = function (parent_win, name, formurl, left, top, width, height, resizable, layered, taskbar, location) {
			var _win_handle = null;
			var parent_handle = null;
			if (parent_win) {
				parent_handle = parent_win._dest_handle;
			}
			return nexacro.__createOpenWindowHandle(parent_handle, name, formurl, left, top, width, height, resizable, layered, taskbar, location);
		};

		nexacro.__createOpenWindowHandle = function (_handleParent, name, formurl, left, top, width, height, resizable, layered, taskbar, location) {
			if (left == null) {
				left = Math.floor((nexacro._getScreenAvailWidth() - width) / 2);
			}

			if (top == null) {
				top = Math.floor((nexacro._getScreenAvailHeight() - height) / 2);
			}

			var dochandle = _handleParent ? _handleParent.ownerDocument : null;
			var _parent_win = dochandle ? (dochandle.defaultView || dochandle.parentWindow) : window;
			var _win_handle;

			var opt = "left=" + left + ",top=" + top + ",width=" + width + ",height=" + height + ","
				 + "toolbar=no,directories=no,status=yes,menubar=no,scrollbars=no,"
				 + "location=" + (location ? "yes" : "no") + ","
				 + "resizable=" + (resizable ? "yes" : "no");

			var popupurl = "./popup.html";

			if (formurl) {
				popupurl += "?formname=" + encodeURIComponent(formurl);
				popupurl += "&framename=" + name;
			}

			var url = nexacro._transfullurl(application._project_uri, popupurl);
			_win_handle = _parent_win.open(url, name, opt);

			if (!_win_handle) {
				return null;
			}

			return _win_handle;
		};


		nexacro.__createWindowHandle = function (_handleParent, target_win, name, left, top, width, height, resizable, layered, taskbar) {
			if (left == null) {
				left = Math.floor((nexacro._getScreenAvailWidth() - width) / 2);
			}

			if (top == null) {
				top = Math.floor((nexacro._getScreenAvailHeight() - height) / 2);
			}

			var dochandle = _handleParent ? _handleParent.ownerDocument : null;
			var _parent_win = dochandle ? (dochandle.defaultView || dochandle.parentWindow) : window;
			var _win_handle;
			if (false && _parent_win.showModelessDialog) {
				var opt = "dialogHeight:" + height + "px" + "; dialogLeft:" + left + "px" + "; dialogTop:" + top + "px" + "; dialogWidth:" + width + "px"
					 + "; center:no" + (resizable ? "; resizable:yes" : "")
					 + "; status:no";
				_win_handle = _parent_win.showModelessDialog(document.URL + "empty.html", {
					nexacro : _parent_win.nexacro, 
					parent : _parent_win
				}, opt);
			}
			else {
				var opt = "left=" + left + ",top=" + top + ",width=" + width + ",height=" + height + ","
					 + "toolbar=no,location=no,directories=no,status=yes,menubar=no,scrollbars=no,"
					 + "resizable=" + (resizable ? "yes" : "no");
				_win_handle = _parent_win.open("", name, opt);
			}

			if (!_win_handle) {
				return null;
			}

			_win_handle.nexacro = _parent_win.nexacro;
			_win_handle.system = _parent_win.system;
			_win_handle.application = _parent_win.application;

			_win_handle._linked_window = target_win;

			_win_handle.document.open();


			_win_handle.document.write(nexacro._doc_init_html);
			_win_handle.document.close();

			return _win_handle;
		};

		nexacro._createModalWindowHandle = function (parent_win, target_win, name, left, top, width, height, resizable, layered, lockmode, delayedCreate) {
		};

		nexacro._createModalAsyncWindowHandle = function (parent_win, target_win, name, left, top, width, height, resizable, layered, lockmode) {
			var parent_handle = null;
			if (parent_win) {
				parent_handle = parent_win._dest_handle;
			}
			var _win_handle = nexacro.__createModalAsyncWindowHandle(parent_handle, target_win, name, left, top, width, height, resizable, layered, lockmode);

			if (!_win_handle) {
				return;
			}

			_win_handle.document.body.style.overflow = "visible";
			_win_handle._linked_window = target_win;

			target_win.attachHandle(_win_handle);
			setTimeout(function () {
				nexacro.__fireHTMLEvent(_win_handle.document.body, 'load', 'onload');
			}, 10);
		};

		nexacro.__createModalAsyncWindowHandle = function (_handleParent, target_win, name, left, top, width, height, resizable, layered, lockmode) {
			if (left == null) {
				left = Math.floor((nexacro._getScreenAvailWidth() - width) / 2);
			}
			if (top == null) {
				top = Math.floor((nexacro._getScreenAvailHeight() - height) / 2);
			}

			var opt = "left=" + left + ",top=" + top + ",width=" + width + ",height=" + height + ","
				 + "toolbar=no,location=no,directories=no,status=yes,menubar=no,scrollbars=no,"
				 + "resizable=" + (resizable ? "yes" : "no");

			var dochandle = _handleParent ? _handleParent.ownerDocument : null;
			var _parent_win = dochandle ? (dochandle.defaultView || dochandle.parentWindow) : window;
			var _win_handle = _parent_win.open("", name, opt);

			if (!_win_handle) {
				return null;
			}


			if (_parent_win) {
				_win_handle.nexacro = _parent_win.nexacro;
				_win_handle.system = _parent_win.system;
				_win_handle.application = _parent_win.application;
			}

			_win_handle._linked_window = target_win;

			_win_handle.document.open();
			_win_handle.document.write(nexacro._doc_init_html);
			_win_handle.document.close();

			return _win_handle;
		};

		nexacro._createModalAsyncCallbackHandler = function (_win_handle, frame) {
			if (frame._window_type != 3) {
				return;
			}

			var main_handle = nexacro._getMainWindowHandle();

			var timer_handle = main_handle.setInterval(function () {
				if (_win_handle && _win_handle.closed) {
					frame._runCallback();

					nexacro._removeModalAsyncCallbackHandler(frame);
				}
			}, 100);

			application._closedmodalasync_list.push([frame, timer_handle]);
		};

		nexacro._removeModalAsyncCallbackHandler = function (frame) {
			var list = application._closedmodalasync_list;
			var list_length = list.length;
			for (var i = 0; i < list_length; i++) {
				var list_item = list[i];
				if (list_item[0] == frame) {
					var main_handle = nexacro._getMainWindowHandle();
					main_handle.clearInterval(list_item[1]);

					for (var j = i; j < list_length - 1; j++) {
						list[j] = list[j + 1];
					}
					list.pop();
					break;
				}
			}
		};

		nexacro._isWindowHandlePrepared = function (_win_handle, id) {
			var body = nexacro._is_attach_childframe ? _win_handle.document.getElementById(id) : _win_handle.document.body;
			return (body != null);
		};

		nexacro._closeWindowHandle = function (_win_handle) {
			if (_win_handle) {
				if (nexacro._getMainWindowHandle() != _win_handle) {
					_win_handle.open('', '_self');
					_win_handle.close();
				}

				if (nexacro._getMainWindowHandle() == _win_handle && (nexacro._isHybrid && nexacro._isHybrid())) {
					nexacro.Device.exit();
				}
			}
		};

		nexacro._refreshWindow = nexacro._emptyFn;

		nexacro._getMainWindowHandle = function () {
			if (application._mainwindow_handle) {
				return application._mainwindow_handle;
			}
			else {
				if (window._popup == true) {
					return window.opener | window.parent;
				}
				return window;
			}
		};

		nexacro._getWindowHandle = function (_win_handle, id) {
			var link_window = nexacro._is_attach_childframe ? _win_handle._linked_window[id] : _win_handle._linked_window;
			if (link_window && link_window._is_main) {
				return _win_handle;
			}
			return window;
		};

		nexacro._getWindowDocumentHandle = function (_win_handle) {
			return _win_handle.document;
		};

		nexacro._getWindowDestinationHandle = function (_win_handle, id) {
			return nexacro._is_attach_childframe ? _win_handle.document.getElementById(id) : _win_handle.document.body;
		};

		if (nexacro.Browser == "Gecko") {
			nexacro._getWindowHandlePosX = function (_win_handle, id) {
				return nexacro._is_attach_childframe ? _win_handle.document.getElementById(id).mozInnerScreenX : _win_handle.mozInnerScreenX;
			};
			nexacro._getWindowHandlePosY = function (_win_handle, id) {
				return nexacro._is_attach_childframe ? _win_handle.document.getElementById(id).mozInnerScreenY : _win_handle.mozInnerScreenY;
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._getWindowHandlePosX = function (_win_handle, id) {
				return nexacro._is_attach_childframe ? _win_handle.document.getElementById(id).screenLeft : _win_handle.screenLeft;
			};
			nexacro._getWindowHandlePosY = function (_win_handle, id) {
				return nexacro._is_attach_childframe ? _win_handle.document.getElementById(id).screenTop : _win_handle.screenTop;
			};
		}
		else {
			nexacro._getWindowHandlePosX = function (_win_handle) {
				return nexacro._gap_client_width;
			};
			nexacro._getWindowHandlePosY = function (_win_handle) {
				return nexacro._gap_client_height;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8) {
			nexacro._getWindowHandleOuterWidth = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).offsetWidth;
				}
				return _win_handle.document.documentElement.offsetWidth;
			};
			nexacro._getWindowHandleOuterHeight = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).offsetHeight;
				}
				return _win_handle.document.documentElement.offsetHeight;
			};
		}
		else if (nexacro.OS == "iOS" && parseFloat(nexacro.OSVersion) >= 8) {
			nexacro._getWindowHandleOuterWidth = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).offsetWidth;
				}
				return _win_handle.document.documentElement.offsetWidth;
			};
			nexacro._getWindowHandleOuterHeight = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).offsetHeight;
				}
				return _win_handle.document.documentElement.offsetHeight;
			};
		}
		else {
			nexacro._getWindowHandleOuterWidth = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientWidth;
				}
				return _win_handle.outerWidth;
			};
			nexacro._getWindowHandleOuterHeight = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientHeight;
				}
				return _win_handle.outerHeight;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 8) {
			nexacro._getWindowHandleClientWidth = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientWidth;
				}
				return _win_handle.document.documentElement.clientWidth;
			};
			nexacro._getWindowHandleClientHeight = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientHeight;
				}
				return _win_handle.document.documentElement.clientHeight;
			};
		}
		else if (nexacro.Browser == "IE" && nexacro.BrowserVersion < 8) {
			nexacro._getWindowHandleClientWidth = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).offsetWidth;
				}
				return _win_handle.document.documentElement.offsetWidth;
			};
			nexacro._getWindowHandleClientHeight = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).offsetHeight;
				}
				return _win_handle.document.documentElement.offsetHeight;
			};
		}
		else if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro._getWindowHandleClientWidth = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientWidth;
				}
				return _win_handle.innerWidth;
			};
			nexacro._getWindowHandleClientHeight = function (_win_handle, id) {
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientHeight;
				}
				return _win_handle.innerHeight;
			};
		}
		else {
			nexacro._getWindowHandleClientWidth = function (_win_handle, id) {
				if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari" && (nexacro._isHybrid && nexacro._isHybrid())) {
					if (nexacro._is_attach_childframe) {
						return _win_handle.document.getElementById(id).clientWidth;
					}
					return _win_handle.document.documentElement.clientWidth;
				}
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientWidth;
				}

				var _tester = nexacro._device_exception_tester;
				if (nexacro._allow_default_pinchzoom || (_tester && _tester.use_windowsize_as_bodysize)) {
					if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
						return _win_handle.document.documentElement.clientWidth;
					}
					else {
						return _win_handle.document.body.clientWidth;
					}
				}
				else {
					return _win_handle.innerWidth;
				}
			};
			nexacro._getWindowHandleClientHeight = function (_win_handle, id) {
				if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari" && (nexacro._isHybrid && nexacro._isHybrid())) {
					if (nexacro._is_attach_childframe) {
						return _win_handle.document.getElementById(id).clientHeight;
					}
					return _win_handle.document.documentElement.clientHeight;
				}
				if (nexacro._is_attach_childframe) {
					return _win_handle.document.getElementById(id).clientHeight;
				}

				var _tester = nexacro._device_exception_tester;
				if (nexacro._allow_default_pinchzoom || (_tester && _tester.use_windowsize_as_bodysize)) {
					if (nexacro.OS == "iOS" && nexacro.Browser == "MobileSafari") {
						return _win_handle.document.documentElement.clientHeight;
					}
					else {
						return _win_handle.document.body.clientHeight;
					}
				}
				else {
					var pyoffset = _win_handle.pageYOffset | 0;
					return _win_handle.innerHeight + pyoffset;
				}
			};
		}

		nexacro._setWindowHandleArea = function (_win_handle, x, y, w, h) {
			_win_handle.moveTo(x, y);
			_win_handle.resizeTo(w, h);
		};

		nexacro._setWindowHandlePos = function (_win_handle, x, y) {
			_win_handle.moveTo(x, y);
		};

		nexacro._setWindowHandleSize = function (_win_handle, w, h) {
			_win_handle.resizeTo(w, h);
		};

		nexacro._setWindowHandleZIndex = function (_win_handle, zindex) {
			if (_win_handle.style) {
				_win_handle.style.zIndex = zindex;
			}
		};

		nexacro._findWindow = function (_win_handle, id) {
			if (nexacro._is_attach_childframe) {
				return _win_handle._linked_window[id];
			}

			return _win_handle._linked_window;
		};

		nexacro._findDocumentWindow = function (_doc, id) {
			var _win_handle = (_doc.defaultView || _doc.parentWindow);
			if (nexacro._is_attach_childframe) {
				return _win_handle._linked_window[id];
			}
			return _win_handle._linked_window;
		};

		nexacro._flashWindow = function (_win_handle, type, count, interval) {
		};

		nexacro._setMouseHovertime = function (mousehovertime) {
		};

		nexacro._setWindowHandleText = function (_win_handle, titletext) {
			var doc = _win_handle.document;

			if (doc) {
				doc.title = titletext;
				return titletext;
			}
		};

		nexacro._setWindowHandleStatusText = function (_win_handle, statustext) {
			if (window) {
				window.status = statustext;
				return statustext;
			}
		};

		nexacro._setWindowHandleIcon = nexacro._emptyFn;
		nexacro._setWindowHandleTopmost = nexacro._emptyFn;

		if (!nexacro.isTouchInteraction) {
			nexacro._getMainWindowWidth = function (_win, id) {
				var doc = _win._doc;
				if (nexacro._is_attach_childframe && doc) {
					return doc.getElementById(id).clientWidth;
				}

				return _win.clientWidth;
			};
			nexacro._getMainWindowHeight = function (_win, id) {
				var doc = _win._doc;
				if (nexacro._is_attach_childframe && doc) {
					return doc.getElementById(id).clientHeight;
				}

				return _win.clientHeight;
			};
		}
		else {
			nexacro._getMainWindowWidth = function (_win, id) {
				var client_width = nexacro._getWindowHandleClientWidth(_win._handle, id);
				if (client_width != 0) {
					return client_width;
				}

				var doc = _win._doc;
				if (doc) {
					if (nexacro._is_attach_childframe) {
						return doc.getElementById(id).clientWidth;
					}

					var doc_elem = doc.documentElement;
					var width = 0;
					if (nexacro.OS == "iOS") {
						if (doc_elem.clientWidth) {
							width = doc_elem.clientWidth;
						}
						else if (_win.innerWidth) {
							width = doc.body.clientWidth;
						}
						else if (doc.body.clientWidth > 0) {
							width = _win.innerWidth;
						}
					}
					else {
						var w1 = _win.innerWidth ? _win.innerWidth : 0;
						var w2;
						var w3 = doc.body.clientWidth ? doc.body.clientWidth : 0;

						if (doc_elem && doc_elem.clientWidth) {
							w2 = doc_elem.clientWidth ? doc_elem.clientWidth : 0;
						}

						if (w1 < w2) {
							if (w2 < w3) {
								width = doc.body.clientWidth;
							}
							else {
								width = doc_elem.clientWidth;
							}
						}
						else {
							if (w1 < w3) {
								width = doc.body.clientWidth;
							}
							else {
								width = _win.innerWidth;
							}
						}
					}


					return width;
				}
				return _win.clientWidth;
			};

			nexacro._getMainWindowHeight = function (_win, id) {
				var client_height = nexacro._getWindowHandleClientHeight(_win._handle, id);
				if (client_height != 0) {
					return client_height;
				}

				var doc = _win._doc;
				if (doc) {
					if (nexacro._is_attach_childframe) {
						return doc.getElementById(id).clientHeight;
					}

					var doc_elem = doc.documentElement;
					var height = 0;
					if (nexacro.OS == "iOS") {
						if (doc_elem.clientHeight) {
							height = doc_elem.clientHeight;
						}
						else if (_win.innerHeight) {
							height = doc.body.clientHeight;
						}
						else if (doc.body.clientHeight > 0) {
							height = _win.innerHeight;
						}
					}
					else {
						var w1 = _win.innerWidth ? _win.innerWidth : 0;
						var w2;
						var w3 = doc.body.clientWidth ? doc.body.clientWidth : 0;

						if (doc_elem && doc_elem.clientWidth) {
							w2 = doc_elem.clientWidth ? doc_elem.clientWidth : 0;
						}

						if (w1 < w2) {
							if (w2 < w3) {
								height = doc.body.clientHeight;
							}
							else {
								height = doc_elem.clientHeight;
							}
						}
						else {
							if (w1 < w3) {
								height = doc.body.clientHeight;
							}
							else {
								height = _win.innerHeight;
							}
						}
					}
					return height;
				}
				return _win.clientHeight;
			};
		}

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 6) {
			nexacro._setPrivateProfile = nexacro._emptyFn;
		}
		else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 7) {
			nexacro._setPrivateProfile = function (key, varValue, global) {
				var localstoragekey;

				if (global) {
					localstoragekey = window.location.href;
				}
				else {
					localstoragekey = application.key + application.xadl;
				}

				var iframenode = nexacro._managerFrameNode;
				if (iframenode) {
					var value;
					var type = (typeof varValue);
					if (type == "object") {
						if (varValue instanceof nexacro.Date) {
							type = "nexacrodate";
						}
						else if (varValue instanceof Date) {
							type = "date";
						}
						else if (varValue instanceof nexacro.Decimal) {
							type = "decimal";
						}
					}
					value = type + ":" + varValue;

					iframenode.setAttribute(key, value);
					iframenode.save(localstoragekey);
					return true;
				}
				return false;
			};
		}
		else {
			nexacro._setPrivateProfile = function (key, varValue, global) {
				var localstorage = window.localStorage;
				if (localstorage) {
					var localstoragekey;

					if (global) {
						localstoragekey = window.location.href;
					}
					else {
						localstoragekey = application.key + application.xadl;
					}

					if (localstoragekey) {
						var localstoragedata = localstorage.getItem(localstoragekey);
						var jsondata = {
						};
						if (localstoragedata) {
							jsondata = JSON.parse(localstoragedata);
						}

						var findkey = jsondata[key];
						if (findkey) {
							var type = (typeof varValue);
							if (type == "object") {
								if (varValue instanceof nexacro.Date) {
									type = "nexacrodate";
								}
								else if (varValue instanceof Date) {
									type = "date";
								}
							}
							findkey.type = type;
							findkey.value = varValue + "";
						}
						else {
							var type = (typeof varValue);
							if (type == "object") {
								if (varValue instanceof nexacro.Date) {
									type = "nexacrodate";
								}
								else if (varValue instanceof Date) {
									type = "date";
								}
								else if (varValue instanceof nexacro.Decimal) {
									type = "decimal";
								}
							}

							jsondata[key] = {
								"type" : type, 
								"value" : varValue + ""
							};
						}

						if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
							nexacro._setPreferencesValue(localstoragekey, JSON.stringify(jsondata));
						}

						localstorage.setItem(localstoragekey, JSON.stringify(jsondata));
						return true;
					}
				}
				return false;
			};
		}
		if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 6) {
			nexacro._getPrivateProfile = nexacro._emptyFn;
		}
		else if (nexacro.Browser == "IE" && nexacro.BrowserVersion == 7) {
			nexacro._getPrivateProfile = function (key, global) {
				var localstoragekey;

				if (global) {
					localstoragekey = window.location.href;
				}
				else {
					localstoragekey = application.key + application.xadl;
				}

				var iframenode = nexacro._managerFrameNode;
				if (iframenode) {
					iframenode.load(localstoragekey);
					var attribute = iframenode.getAttribute(key);
					if (attribute) {
						var index = attribute.indexOf(":");
						var type = attribute.substring(0, index);
						var value = attribute.substring(index + 1);

						if (type && value) {
							if (type == "number") {
								return Number(value);
							}
							else if (type == "boolean") {
								return (value == "true") ? true : false;
							}
							else if (type == "nexacrodate") {
								var year = value.substring(0, 4);
								var month = value.substring(4, 6);
								var date = value.substring(6, 8);
								var hour = value.substring(8, 10);
								var minute = value.substring(10, 12);
								var second = value.substring(12, 14);
								var millisecond = value.substring(14, 16);
								return new nexacro.Date(year, month, date, hour, minute, second, millisecond);
							}
							else if (type == "date") {
								return new Date(value);
							}
							else if (type == "decimal") {
								return new nexacro.Decimal(value);
							}
							return value;
						}
					}
				}
			};
		}
		else {
			nexacro._getPrivateProfile = function (key, global) {
				var localstorage = window.localStorage;
				if (localstorage) {
					var localstoragekey;

					if (global) {
						localstoragekey = window.location.href;
					}
					else {
						localstoragekey = application.key + application.xadl;
					}

					if (localstoragekey) {
						var localstoragedata = localstorage.getItem(localstoragekey);
						var jsondata = {
						};
						if (localstoragedata) {
							if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
								nexacro._setPreferencesValue(localstoragekey, localstoragedata);
							}
							jsondata = JSON.parse(localstoragedata);
						}

						var findkey = jsondata[key];
						if (findkey) {
							var type = findkey.type;
							var value = findkey.value;
							if (value && type) {
								if (type == "number") {
									return Number(value);
								}
								else if (type == "boolean") {
									return (value == "true") ? true : false;
								}
								else if (type == "nexacrodate") {
									var year = value.substring(0, 4);
									var month = value.substring(4, 6);
									var date = value.substring(6, 8);
									var hour = value.substring(8, 10);
									var minute = value.substring(10, 12);
									var second = value.substring(12, 14);
									var millisecond = value.substring(14, 16);
									return new nexacro.Date(year, month, date, hour, minute, second, millisecond);
								}
								else if (type == "date") {
									return new Date(value);
								}
								else if (type == "decimal") {
									return new nexacro.Decimal(value);
								}
								return value;
							}
						}
					}
				}
			};
		}

		if (!window.postMessage || (nexacro.Browser == "IE" && nexacro.BrowserVersion <= 8)) {
			nexacro._postMessage = function (id, win, target_comp) {
				nexacro.OnceCallbackTimer.callonce(target_comp, function () {
					win._on_sys_message(id);
				}, 10);
			};
		}
		else {
			nexacro._postMessage = function (id, win, target_comp) {
				try {
					window.postMessage(id, "*");
				}
				catch (e) {
					nexacro.OnceCallbackTimer.callonce(target_comp, function () {
						win._on_sys_message(id);
					}, 10);
				}
			};
		}
		;

		nexacro._getGlobalValueData = function (key, url) {
			if (application._globalvalue) {
				return application._globalvalue;
			}

			if (window.name && key && url) {
				var globalvars = "";
				var items = window.name.split(',');
				if (items.length) {
					var fields = items[0].split(':');
					if (fields[0] == key && unescape(fields[1]) == url) {
						globalvars = items.splice(1, items.length - 1).join(',');
					}
				}
				application._globalvalue = globalvars;
				return globalvars;
			}
		};

		nexacro._createPopupWindowHandle = function (parent_win, target_win, name, left, top, width, height) {
			var _doc = parent_win._dest_doc;
			var _dest_handle = parent_win._dest_handle;

			var parent_width = parent_win.clientWidth;
			var parent_height = parent_win.clientHeight;

			var _handle = null;
			if (left == null) {
				left = Math.floor((parent_width - width) / 2);
			}
			if (top == null) {
				top = Math.floor((parent_height - height) / 2);
			}

			_handle = _doc.createElement("div");
			_handle.id = 'popupwindow_' + name;

			var layer_info;
			if (target_win.comp && target_win.comp instanceof nexacro.WaitComponent) {
				layer_info = {
				};
				layer_info.popup_zindex = nexacro._zindex_waitcursor;
			}
			else if (target_win.comp) {
				layer_info = target_win._getComponentLayerInfo(target_win.comp);
			}

			if (layer_info) {
				if (layer_info.is_modal) {
					var frame = layer_info.frame;
					var overlay_elem = frame._modal_overlay_elem;
					_dest_handle = overlay_elem._handle;
					_dest_handle.appendChild(_handle);
				}
				else {
					if (layer_info.ref_first_modal_frame) {
						var frame = layer_info.ref_first_modal_frame;
						_ref_handle = frame._modal_overlay_elem._handle;
						_dest_handle = nexacro._getPopupWindowDestinationHandle(_handle);
						_dest_handle.insertBefore(_handle, _ref_handle);
					}
					else {
						_dest_handle = nexacro._getPopupWindowDestinationHandle(_handle);
						_dest_handle.appendChild(_handle);
					}
				}
			}
			else {
				_dest_handle = nexacro._getPopupWindowDestinationHandle(_handle);
				_dest_handle.appendChild(_handle);
			}

			_handle._dest_handle = _dest_handle;
			_handle._linked_window = target_win;

			var handle_style = _handle.style;
			handle_style.position = "absolute";
			handle_style.overflow = "hidden";
			handle_style.margin = "0px";
			handle_style.border = "0px";

			handle_style.left = (left | 0) + "px";
			handle_style.top = (top | 0) + "px";
			handle_style.width = (width | 0) + "px";
			handle_style.height = (height | 0) + "px";

			handle_style.zIndex = layer_info ? layer_info.popup_zindex : nexacro._zindex_popup;

			target_win.attachHandle(_handle);
		};
		nexacro._closePopupWindowHandle = function (_handle) {
			if (_handle) {
				var _dest_handle = _handle._dest_handle;
				{

					nexacro.__removeDOMNode(_dest_handle, _handle);
				}
				_handle._linked_window = null;
			}
		};

		nexacro._getPopupWindowDocumentHandle = function (_handle) {
			var _doc = (_handle.ownerDocument || _handle.document);
			return _doc;
		};

		nexacro._getPopupWindowDestinationHandle = function (_handle) {
			var _doc = (_handle.ownerDocument || _handle.document);
			return _doc.body;
		};

		if (nexacro.BrowserType == "Edge" || nexacro.Browser == "IE") {
			nexacro.__getRootWindowHandleOfPopupWindow = function (_handle) {
				var _doc = (_handle.ownerDocument || _handle.document);
				return _doc.parentWindow;
			};
		}
		else if (nexacro.Browser == "Gecko") {
			nexacro.__getRootWindowHandleOfPopupWindow = function (_handle) {
				var _doc = (_handle.ownerDocument || _handle.document);
				return _doc.defaultView;
			};
		}
		else {
			nexacro.__getRootWindowHandleOfPopupWindow = function (_handle) {
				var _doc = (_handle.ownerDocument || _handle.document);
				return _doc.defaultView;
			};
		}

		nexacro._getPopupWindowHandlePosX = function (_handle) {
			var _win_handle = nexacro.__getRootWindowHandleOfPopupWindow(_handle);
			return nexacro._getWindowHandlePosX(_win_handle) + _handle.offsetLeft;
		};

		nexacro._getPopupWindowHandlePosY = function (_handle) {
			var _win_handle = nexacro.__getRootWindowHandleOfPopupWindow(_handle);
			return nexacro._getWindowHandlePosY(_win_handle) + _handle.offsetTop;
		};

		nexacro._getPopupWindowHandleOuterWidth = function (_handle) {
			return _handle.offsetWidth;
		};

		nexacro._getPopupWindowHandleOuterHeight = function (_handle) {
			return _handle.offsetHeight;
		};

		nexacro._getPopupWindowHandleClientWidth = function (_handle) {
			return _handle.clientWidth;
		};

		nexacro._getPopupWindowHandleClientHeight = function (_handle) {
			return _handle.clientHeight;
		};

		nexacro._setPopupWindowHandleArea = function (_handle, x, y, w, h) {
			if (_handle) {
				var _win_handle = nexacro.__getRootWindowHandleOfPopupWindow(_handle);
				x -= nexacro._getWindowHandlePosX(_win_handle);
				y -= nexacro._getWindowHandlePosY(_win_handle);

				var handle_style = _handle.style;
				handle_style.left = (x | 0) + "px";
				handle_style.top = (y | 0) + "px";
				handle_style.width = (w | 0) + "px";
				handle_style.height = (h | 0) + "px";
			}
		};
		nexacro._setPopupWindowHandlePos = function (_handle, x, y) {
			if (_handle) {
				var _win_handle = nexacro.__getRootWindowHandleOfPopupWindow(_handle);
				x -= nexacro._getWindowHandlePosX(_win_handle);
				y -= nexacro._getWindowHandlePosY(_win_handle);

				var handle_style = _handle.style;
				handle_style.left = (x | 0) + "px";
				handle_style.top = (y | 0) + "px";
			}
		};

		nexacro._setPopupWindowHandleSize = function (_handle, w, h) {
			if (_handle) {
				var handle_style = _handle.style;
				handle_style.width = (w | 0) + "px";
				handle_style.height = (h | 0) + "px";
			}
		};

		nexacro._createVirtualWindowHandle = function () {
		};

		nexacro._closeVirtualWindowHandle = function () {
		};

		nexacro._blockScript = function () {
		};

		nexacro._unblockScript = function () {
		};

		nexacro._setPopupWindowHandleVisible = function (_handle, visible_flag) {
			if (_handle) {
				var handle_style = _handle.style;
				if (handle_style) {
					handle_style.visibility = (visible_flag === true) ? "" : "hidden";
				}
			}
		};

		nexacro._showQuickviewMenu = function (comp, sx, sy) {
		};
		nexacro._setSystemMenuResizable = function (_handle, resizable) {
		};
		nexacro._procSysCommand = function (_handle, command) {
		};
		nexacro._setWindowHandleLock = function (_handle, is_lock, _except_handle, is_modal_async) {
			nexacro.__setWindowHandleLock(_handle, is_lock, _except_handle, is_modal_async);
		};

		nexacro.__setWindowHandleLock = function (_handle, is_lock, _except_handle, is_modal_async) {
			var __handle = _handle;
			if (__handle == null) {
				__handle = window;
			}

			var _window = __handle._linked_window;
			while (_window) {
				if (_window.parent) {
					_window = _window.parent;
				}
				else {
					break;
				}
			}

			if (_window == null) {
				return;
			}

			var _except_window = _except_handle ? _except_handle._linked_window : null;
			nexacro.__setWindowHandleEnableByRef(_window, !is_lock, _except_window, true, true);
		};

		nexacro.__setWindowHandleEnableByRef = function (_window, is_enable, _except_window, is_recursive, is_modal_async) {
			if (_window != _except_window) {
				if (is_enable) {
					_window._disable_ref--;
					if (_window._disable_ref == 0) {
						_window._coverUnlock(_except_window);
					}
				}
				else {
					if (_window._disable_ref == 0) {
						_window._coverLock(_except_window);
					}
					_window._disable_ref++;
				}
			}

			if (is_recursive) {
				var childlist = _window._child_list;
				for (var i = 0, n = childlist.length; i < n; i++) {
					var child = childlist[i];
					if (child.frame) {
						nexacro.__setWindowHandleEnableByRef(child, is_enable, _except_window, true, true);
					}
				}
			}
		};

		nexacro._requestAnimationFrame = function (_window, callback) {
			if (!_window) {
				return;
			}
			var win_handle = _window._handle;
			if (!win_handle) {
				return;
			}
			var requestAnimationFrame = win_handle.requestAnimationFrame || win_handle.mozRequestAnimationFrame || win_handle.webkitRequestAnimationFrame || win_handle.msRequestAnimationFrame;
			if (!requestAnimationFrame) {
				return;
			}
			var requestid = requestAnimationFrame.call(win_handle, callback);
			return requestid;
		};

		nexacro._cancelAnimationFrame = function (_window, requestid) {
			if (!_window) {
				return;
			}
			var win_handle = _window._handle;
			if (!win_handle) {
				return;
			}
			var cancelAnimationFrame = win_handle.cancelAnimationFrame || win_handle.mozCancelAnimationFrame || win_handle.webkitCancelAnimationFrame;
			if (cancelAnimationFrame) {
				cancelAnimationFrame.call(win_handle, requestid);
			}
		};

		nexacro.__setViewportScale = function () {
			var _tester = nexacro._device_exception_tester;
			if (_tester.screen_checked == false) {
				var orientation_str = nexacro._isPortrait() ? "portrait" : "landscape";
				_tester.init_screen_width = nexacro._getScreenWidth();
				_tester.is_init_screen_portrait = nexacro._isPortrait();
				_tester[orientation_str + "_screen_width"] = nexacro._getScreenWidth();
				_tester.screen_checked = true;
			}

			var use_autozoom = (nexacro._zoom_factor == 0 ? false : true);
			var ratio = (use_autozoom ? nexacro._zoom_factor / 100 : 1.0);
			var minimum_scale = nexacro._minimum_scale;
			var maximum_scale = nexacro._maximum_scale;
			var is_scalable = (minimum_scale < maximum_scale ? 1 : 0);
			if (minimum_scale == undefined && maximum_scale == undefined) {
				is_scalable = (use_autozoom ? false : true);
			}

			if (nexacro._isDesktop()) {
				use_autozoom = false;
				ratio = 1.0;
				is_scalable = false;
			}

			if (is_scalable) {
				nexacro._allow_default_pinchzoom = true;
			}
			else {
				if (minimum_scale == undefined) {
					minimum_scale = 1;
				}
				if (maximum_scale == undefined) {
					maximum_scale = 1;
				}
			}


			var elems = document.getElementsByName("viewport");
			var viewport;
			if (elems && elems[0]) {
				viewport = elems[0];
			}

			var contents = [];
			if (!viewport) {
				var head = document.getElementsByTagName("head")[0];
				viewport = document.createElement("meta");
				viewport.name = "viewport";
				head.appendChild(viewport);

				viewport.content = "initial-scale=1.0, user-scalable=" + is_scalable;
				contents = viewport.content.split(",");
			}
			else {
				contents = viewport.content.split(",");
			}

			function __remove_attribute (attr_name) {
				for (var i = 0, n = contents.length; i < n; i++) {
					var name = nexacro.trim(contents[i].split("=")[0]);
					if (name == attr_name) {
						contents.splice(i, 1);
						break;
					}
				}
			}
			function __set_attribute (attr_name, attr_value) {
				var content = attr_name + "=" + attr_value;
				var is_found = false;
				for (var i = 0, n = contents.length; i < n; i++) {
					var name = nexacro.trim(contents[i].split("=")[0]);
					if (name == attr_name) {
						is_found = true;
						contents[i] = content;
						break;
					}
				}
				if (!is_found) {
					contents.push(content);
				}
			}

			if (ratio == 1.0) {
				if (use_autozoom === false) {
					if (is_scalable) {
						if (nexacro.OS == "Android") {
							contents = ["user-scalable=1", "target-densitydpi=device-dpi"
							];
						}
						else {
							contents = ["user-scalable=1"
							];
						}

						if (minimum_scale != undefined) {
							__set_attribute("initial-scale", minimum_scale);
							__set_attribute("minimum-scale", minimum_scale);
						}
						if (maximum_scale != undefined) {
							__set_attribute("maximum-scale", maximum_scale);
						}

						if (nexacro.OS == "iOS") {
							__set_attribute("initial-scale", "1");

							var win_handle = window;
							var win = win_handle._linked_window;
							var old_window_width = nexacro._getWindowHandleClientWidth(win_handle);

							_tester._viewport_resize_observer = setInterval(function () {
								cur_window_width = nexacro._getWindowHandleClientWidth(win_handle);

								clearInterval(_tester._viewport_resize_observer);
								_tester._viewport_resize_observer = null;

								if (!win) {
									win = win_handle._linked_window;
								}
								if (win) {
									var clientWidth = nexacro._getWindowHandleClientWidth(win_handle);
									var clientHeight = nexacro._getWindowHandleClientHeight(win_handle);
									win.clientWidth = clientWidth;
									win.clientHeight = clientHeight;
									win.frame._setSize(clientWidth, clientHeight, 0);
								}
							}, 100);
						}
					}
					else {
						if (nexacro.OS == "Android") {
							contents = ["user-scalable=0", "target-densitydpi=device-dpi"
							];
						}
						else {
							contents = ["user-scalable=1"
							];
						}
						if (nexacro.OS == "iOS") {
							__set_attribute("initial-scale", "1");
						}
					}
				}
				else {
					if ((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion > 38) {
						if (nexacro.OS == "Android") {
							contents = ["intial-scale=1.0", "user-scalable=" + is_scalable, "width=device-width", "minimum-scale=" + minimum_scale, "maximum-scale=" + maximum_scale, "target-densitydpi=device-dpi"
							];
						}
						else {
							contents = ["intial-scale=1.0", "user-scalable=" + is_scalable, "width=device-width", "minimum-scale=" + minimum_scale, "maximum-scale=" + maximum_scale
							];
						}
					}
					else {
						var scrwidth = nexacro._getScreenWidth();
						if (nexacro.OS == "Android") {
							contents = ["intial-scale=1.0", "user-scalable=" + is_scalable, "width=" + scrwidth, "minimum-scale=" + minimum_scale, "maximum-scale=" + maximum_scale, "target-densitydpi=device-dpi"
							];
						}
						else {
							contents = ["intial-scale=1.0", "user-scalable=" + is_scalable, "width=" + scrwidth, "minimum-scale=" + minimum_scale, "maximum-scale=" + maximum_scale
							];
						}
					}
				}

				viewport.setAttribute('content', contents.toString());
				return;
			}

			__set_attribute("user-scalable", is_scalable);
			if (nexacro.OS == "iOS") {
				if (ratio > 1.0 && ratio < 1.1) {
					ratio = 1.0;
				}
			}
			__set_attribute("initial-scale", ratio);

			__set_attribute("minimum-scale", ratio * minimum_scale);
			__set_attribute("maximum-scale", ratio * maximum_scale);

			var screen_width = nexacro._getScreenWidth();
			if (nexacro.OS == "Android") {
				var cur_orientation = nexacro._getMobileOrientation();
				if (cur_orientation == 2 || cur_orientation == 3) {
					is_swap_screen = nexacro._searchDeviceExceptionValue("swap_screen");
					var force_swap = nexacro._searchDeviceExceptionValue("force_swap");
					if (is_swap_screen == false || force_swap) {
						screen_width = nexacro._getScreenHeight();
					}
				}
				__set_attribute("target-densitydpi", "device-dpi");
			}


			if (nexacro.OS == "iOS" && use_autozoom && (navigator.platform != "iPad" && navigator.platform != "iPhone")) {
				__set_attribute("width", "device-width");
			}
			else {
				__set_attribute("width", screen_width / ratio);
			}

			if (window._linked_window == undefined || (nexacro.OS == "iOS" && nexacro.OSVersion >= 11.3 && (minimum_scale != maximum_scale))) {
				var win_handle = window;
				var win = win_handle._linked_window;
				var old_window_width = nexacro._getWindowHandleClientWidth(win_handle);

				_tester._viewport_resize_observer = setInterval(function () {
					cur_window_width = nexacro._getWindowHandleClientWidth(win_handle);
					if (old_window_width != cur_window_width) {
						clearInterval(_tester._viewport_resize_observer);
						_tester._viewport_resize_observer = null;

						if (!win) {
							win = win_handle._linked_window;
						}
						if (win) {
							var clientWidth = nexacro._getWindowHandleClientWidth(win_handle);
							var clientHeight = nexacro._getWindowHandleClientHeight(win_handle);
							win.clientWidth = clientWidth;
							win.clientHeight = clientHeight;
							win.frame._setSize(clientWidth, clientHeight, 0);
						}
					}
				}, 100);

				var use_windowsize_as_bodysize = nexacro._searchDeviceExceptionValue("use_windowsize_as_bodysize");
				if (use_windowsize_as_bodysize) {
					_tester.use_windowsize_as_bodysize = true;
				}
			}

			var set_viewport_twice_ranged_scale = nexacro._searchDeviceExceptionValue("set_vp_twice_ranged_scale");

			if ((nexacro.OS == "iOS" && set_viewport_twice_ranged_scale) || (nexacro.OS == "Android" && set_viewport_twice_ranged_scale && minimum_scale < maximum_scale)) {
				var ranged_scale_viewport_delay = 500;
				if (nexacro.OS == "iOS") {
					ranged_scale_viewport_delay = 100;
				}



				var isSamsungBrowser = navigator.userAgent.match(/SamsungBrowser/i);
				if (nexacro.OS == "iOS" || nexacro.Browser != "Chrome" || (isSamsungBrowser && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion < 59) || (!isSamsungBrowser && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion < 61)) {
					setTimeout(function () {
						__set_attribute("maximum-scale", ratio);
						viewport.setAttribute('content', contents.toString());
					}, 1);
				}

				setTimeout(function () {
					__set_attribute("maximum-scale", maximum_scale * ratio);
					viewport.setAttribute('content', contents.toString());
				}, ranged_scale_viewport_delay);
			}
			else {
				viewport.setAttribute('content', contents.toString());
			}
		};

		nexacro._deleteTraceLogFile = nexacro._emptyFn;
		nexacro._writeTraceLog = function (msglevel, message, bsystemlog, loglevel) {
			var data;
			data = (bsystemlog == true) ? "S" : "U";

			if (msglevel == 0) {
				data += "F";
			}
			else if (msglevel == 1) {
				data += "E";
			}
			else if (msglevel == 2) {
				data += "W";
			}
			else if (msglevel == 3) {
				data += "I";
			}
			else {
				data += "D";
			}

			var curdate = new Date();
			data = data + " " + curdate.getHours() + ":" + curdate.getMinutes() + ":" + curdate.getSeconds() + ":" + curdate.getMilliseconds() + " ";
			data += message;

			if (window.console) {
				window.console.log(data);
			}
		};


		nexacro._applicationExit = function (is_close_window) {
			window.system = null;
			window.application = null;

			if (is_close_window === true) {
				window.open('', '_self');
				window.close();
			}

			if (nexacro.Device) {
				nexacro.Device.exit();
			}
		};

		nexacro._setUseHttpKeepAlive = nexacro._emptyFn;

		nexacro._setHttpTimeout = function (v) {
			var t = (nexacro._parseInt(v) > 0) ? nexacro._parseInt(v) : 0;
			application.httptimeout = t;
			nexacro._setLocalStorage("httptimeout", t, "int");
		};

		nexacro._setHttpRetry = function (v) {
			var httpretry = nexacro._parseInt(v);
			application.httpretry = (httpretry > 0) ? httpretry : 0;
			nexacro._setLocalStorage("httpretry", application.httpretry, "int");
		};

		nexacro.__getWindowHandleEnable = function (win_handle, id) {
			if (!win_handle) {
				return false;
			}

			var _window = nexacro._is_attach_childframe ? win_handle._linked_window[id] : win_handle._linked_window;
			if (!_window) {
				return false;
			}

			if (_window._disable_ref > 0) {
				return false;
			}

			return true;
		};

		nexacro._setWindowHandleFocus = function (win_handle) {
			if (!win_handle) {
				return;
			}

			if (win_handle.setActive) {
				win_handle.setActive();
			}
			else if (win_handle.focus) {
				win_handle.focus();
			}
		};

		nexacro.__getElementFromPoint = function (_win_handle, x, y) {
			if (x === undefined || y === undefined) {
				return null;
			}
			var doc = _win_handle.document;
			var elem_handle = doc.elementFromPoint(x, y);
			if (elem_handle) {
				return nexacro.__findParentElement(elem_handle);
			}

			return null;
		};

		nexacro._getHoverElement = function (_win) {
			if (!_win) {
				return null;
			}

			var pointX = _win._cur_client_pos.x;
			var pointY = _win._cur_client_pos.y;
			var elem = null;

			if (!((nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion > 42)) {
				if (window.pageXOffset > 0) {
					pointX -= window.pageXOffset;
				}
				if (window.pageYOffset > 0) {
					pointY -= window.pageYOffset;
				}
			}

			if (pointX && pointY) {
				elem = nexacro.__getElementFromPoint(_win._handle, pointX, pointY);
			}

			return elem;
		};

		nexacro._getEvtId = function (evt) {
			var id = null;
			if (evt) {
				var id = evt.id;
				if (!id) {
					id = evt.currentTarget ? evt.currentTarget.id : 0;
				}
			}

			return id ? id : 0;
		};

		nexacro._getHtmlSysEvent = function (event, id) {
			if (nexacro._is_attach_childframe) {
				return event ? event[id] : null;
			}

			return event;
		};

		nexacro._addExtensionModule = nexacro._emptyFn;
		nexacro._loadExtensionModules = nexacro._emptyFn;
		nexacro._deleteCacheDB = nexacro._emptyFn;




		nexacro._device_exception_tester = {
			init_screen_width : undefined, 
			is_init_screen_portrait : undefined, 
			screen_checked : false, 
			screen_swap_checked : false, 
			delayed_swap_screen_checked : false, 
			swap_screen : undefined, 
			delayed_swap_screen : undefined, 
			swap_screen_timer : null, 
			use_windowsize_as_bodysize : false
		};
		nexacro._device_exception_table = [{
			orientationchange_reset_viewport : (nexacro.OS == "Android") ? true : false, 
			swap_screen : (nexacro.OS == "Android") ? true : false, 
			delayed_reset_viewport : false, 
			delayed_swap_screen : false, 
			is_portrait_device : (nexacro.OS == "Android") ? (((nexacro.Browser == "Runtime" && nexacro.__isPhone && nexacro.__isPhone()) || (nexacro.Browser != "Runtime" && nexacro._isMobile())) ? (true) : (undefined)
)
				 : (undefined), 
			reset_viewport_delay : 0, 
			use_windowsize_as_bodysize : false, 
			set_vp_twice_ranged_scale : true, 
			force_swap : false
		}, {
			model : "SM-T800", 
			browser : "stock", 
			is_portrait_device : true, 
			force_swap : true
		}, {
			model : "SM-T800", 
			browser : "Chrome", 
			is_portrait_device : true, 
			force_swap : true
		}, {
			model : "SHW-M380S", 
			browser : "stock", 
			is_portrait_device : false
		}, {
			model : "SHW-M380S", 
			browser : "Chrome", 
			is_portrait_device : false
		}, {
			model : "LG-F320S", 
			browser : "stock", 
			swap_screen : false
		}, {
			model : "LG-F320S", 
			browser : "Chrome", 
			delayed_swap_screen : true
		}, {
			model : "LG-F320L", 
			browser : "Chrome", 
			delayed_swap_screen : true
		}, {
			model : "LG-F320K", 
			browser : "Chrome", 
			delayed_swap_screen : true
		}, {
			model : "SHW-M440S", 
			browser : "stock", 
			os_version : "4.3", 
			swap_screen : false
		}, {
			model : "SHV-E250S", 
			browser : "stock", 
			os_version : "4.4.2", 
			swap_screen : false, 
			use_windowsize_as_bodysize : true
		}, {
			model : "SAMSUNG SM-N900S", 
			browser : "Chrome", 
			os_version : "4.4.2", 
			swap_screen : false, 
			use_windowsize_as_bodysize : true
		}, {
			model : "LG-F400K", 
			browser : "Chrome", 
			delayed_swap_screen : true
		}, {
			model : "LG-F410S", 
			browser : "Chrome", 
			set_vp_twice_ranged_scale : false
		}, {
			model : "SAMSUNG SHV-E300S", 
			browser : "Chrome", 
			reset_viewport_delay : 0
		}, {
			model : "SHV-E300S", 
			browser : "Chrome", 
			reset_viewport_delay : 300, 
			is_portrait_device : true
		}, {
			model : "SHV-E300K", 
			browser : "Chrome", 
			reset_viewport_delay : 300, 
			is_portrait_device : true
		}, {
			model : "SHV-E300L", 
			browser : "Chrome", 
			reset_viewport_delay : 300, 
			is_portrait_device : true
		}, {
			model : "SAMSUNG SHV-E330S", 
			browser : "Chrome", 
			reset_viewport_delay : 0
		}, {
			model : "SHV-E330S", 
			browser : "Chrome", 
			reset_viewport_delay : 300, 
			is_portrait_device : true
		}, {
			model : "LG-F240L", 
			browser : "Chrome", 
			delayed_swap_screen : true
		}, {
			model : "IM-A910K", 
			browser : "Chrome", 
			delayed_swap_screen : true
		}, {
		}
		];

		nexacro._searchDeviceExceptionTable = function () {
			if (nexacro.OS != "Android") {
				return null;
			}

			var browser = (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) ? nexacro.Browser : "stock";

			var table = nexacro._device_exception_table;
			var len = table.length;
			for (var i = 0; i < len; i++) {
				if (table[i].model === undefined) {
					continue;
				}

				if (browser != table[i].browser) {
					continue;
				}

				if (table[i]["os_version"]) {
					if (table[i].os_version != nexacro.OSVersion) {
						continue;
					}
				}

				var userAgent = nexacro._getUserAgent();

				if (userAgent.indexOf(table[i].model) >= 0) {
					return table[i];
				}
			}

			return null;
		};

		nexacro._searchDeviceExceptionValue = function (exception_type) {
			var exception = nexacro._searchDeviceExceptionTable();
			if (exception && exception[exception_type] !== undefined) {
				return exception[exception_type];
			}

			exception = nexacro._device_exception_table[0];
			return exception[exception_type];
		};


		if (nexacro.isTouchInteraction && (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) && nexacro.BrowserVersion > 42) {
			nexacro.__adjustBoundingClientRect = function (_doc) {
				return [_doc.defaultView.pageXOffset, _doc.defaultView.pageYOffset];
			};
		}
		else {
			nexacro.__adjustBoundingClientRect = function (_doc) {
				return [0, 0];
			};
		}

		nexacro.__setWindowHandleBaseScrollOffset = nexacro._emptyFn;
		nexacro.__getWindowHandleBaseScrollPositionX = nexacro._emptyFn;
		nexacro.__getWindowHandleBaseScrollPositionY = nexacro._emptyFn;

		nexacro._createTrayHandle = nexacro._emptyFn;
		nexacro._removeTrayHandle = nexacro._emptyFn;
		nexacro._setTrayIconHandle = nexacro._emptyFn;
		nexacro._setTrayTooltipHandle = nexacro._emptyFn;
		nexacro._showTrayBalloonTipHandle = nexacro._emptyFn;
		nexacro._createTrayPopupMenuHandle = nexacro._emptyFn;
		nexacro._destroyTrayPopupMenuHandle = nexacro._emptyFn;
		nexacro._setTrayPopupMenuItemHandle = nexacro._emptyFn;
		nexacro._displayTrayPopupMenuHandle = nexacro._emptyFn;

		nexacro._syshandler_ontray_forward = nexacro._emptyFn;

		nexacro._set_application_rtldirection = nexacro._emptyFn;

		nexacro._updateWrapper = nexacro._emptyFn;

		nexacro._flushCommand = nexacro._emptyFn;

		if (nexacro.Browser == "IE" && nexacro.BrowserVersion >= 8) {
			nexacro._setPopupframeOption = function (id, child) {
				var option = application._popupframeoption[id];

				application._popupparentframe[id] = option._parentframe;
				application._popupparentargs[id] = option._args;
				application._popupparentopener[id] = option._opener;

				var optionjson = {
					"_openstyles" : option._openstyles, 
					"_formurl" : option._formurl, 
					"_left" : option._left, 
					"_top" : option._top, 
					"_width" : option._width, 
					"_height" : option._height
				};
				nexacro._setLocalStorage(id, optionjson, "json");
			};

			nexacro._setOpenInfo = function (child, name) {
				var option = nexacro._getLocalStorage(name, {
				});
				var left = option._left, top = option._top, width = option._width, height = option._height, openerid = option._openerid;
				var formurl = option._formurl, openstyles = option._openstyles;

				var parent_frame = application._popupparentframe[name];
				var arr_args = application._popupparentargs[name];
				child.opener = application._popupparentopener[name];

				nexacro._setOpenFrame(name, child, parent_frame, arr_args, left, top, width, height, formurl, openstyles);
			};
		}
		else {
			nexacro._setPopupframeOption = nexacro._emptyFn;

			nexacro._setOpenInfo = function (child, name) {
				var formurl, openstyles, parent_frame, left, top, width, height, arr_args, opener;
				var popupframeoption = application._popupframeoption[name];
				if (popupframeoption) {
					delete application._popupframeoption[name];

					formurl = popupframeoption._formurl;
					openstyles = popupframeoption._openstyles;
					parent_frame = popupframeoption._parentframe;
					left = popupframeoption._left;
					top = popupframeoption._top;
					width = popupframeoption._width;
					height = popupframeoption._height;
					arr_args = popupframeoption._args;
					child.opener = opener = popupframeoption._opener;
				}

				nexacro._setOpenFrame(name, child, parent_frame, arr_args, left, top, width, height, formurl, openstyles);
			};
		}
		nexacro._getEngineVersion = function () {
			return "2.0";
		};

		if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit") || nexacro.OS == "iOS") {
			nexacro._get_invisible_obj = function (obj) {
				var pThis = obj;
				var arr = [];

				while (pThis && !pThis._is_frame) {
					if (!pThis.visible) {
						arr.push(pThis);
					}

					pThis = pThis.parent;
				}

				return arr;
			};

			nexacro._reset_invisible_obj = function (arr, bVisible) {
				var obj = null, obj_control = null;
				if (arr.length > 0) {
					for (var i = 0; i < arr.length; i++) {
						obj = arr[i];
						if (obj) {
							obj_control = obj._control_element;
							if (obj_control) {
								obj_control.setElementVisible(bVisible);
							}
						}
					}
				}
			};
		}
		else {
			nexacro._get_invisible_obj = nexacro._emptyFn;
			nexacro._reset_invisible_obj = nexacro._emptyFn;
		}
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.Browser == "Runtime") {
	if (!nexacro._init_platform_runtime) {
		nexacro._init_platform_runtime = true;
		nexacro.isTouchInteraction = (nexacro._getOS() == "Android");
		nexacro.SupportTouch = nexacro.__getSupportTouch();
		nexacro._resize_popup_inbound = false;

		nexacro._syshandler_onmessage_forward = function (_window, id) {
			return _window._on_sys_message(id);
		};
		nexacro._syshandler_onlbuttondown_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			return _window._on_sys_lbuttondown(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onlbuttonup_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			var ret = false;
			var last_focused_elem = _window._last_focused_elem;
			var _is_focus_elem = true;

			ret = _window._on_sys_lbuttonup(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);

			var firecur_comp = _window._findComponentForEvent(elem);
			if (firecur_comp && firecur_comp instanceof nexacro.Static) {
				if (firecur_comp.usedecorate) {
					var elem_pos = nexacro._getElementXYInWindow(firecur_comp._control_element._handle);
					var canvasX = windowX - elem_pos[0];
					var canvasY = windowY - elem_pos[1];
					var clientXY = firecur_comp._getClientXY(canvasX, canvasY);

					ret = nexacro.__hitTestByDecorateText(elem._handle, clientXY[0], clientXY[1], function (v) {
						if (v) {
							if (v && (v.indexOf("tel") < 0 || !nexacro._isDesktop())) {
								nexacro._execBrowser(v);
							}
						}
					});
				}

				_is_focus_elem = false;
			}

			if (_is_focus_elem && last_focused_elem && (_window._last_focused_elem instanceof nexacro.InputElement) && last_focused_elem != elem) {
				var comp = null;
				if (last_focused_elem._parent_elem && last_focused_elem._parent_elem.linkedcontrol != null) {
					comp = last_focused_elem._parent_elem.linkedcontrol;
				}

				if (comp && comp._edit_base_api) {
					comp._edit_base_api._on_input_mouseup(last_focused_elem, altKey, ctrlKey, shiftKey, false);
				}


				if (last_focused_elem._event_stop) {
					last_focused_elem._event_stop = false;
				}
				comp = null;
			}
			last_focused_elem = null;
			return ret;
		};
		nexacro._syshandler_onrbuttondown_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			return _window._on_sys_rbuttondown(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onrbuttonup_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			return _window._on_sys_rbuttonup(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onmousedown_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			return _window._on_sys_mousedown(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onmouseup_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			return _window._on_sys_mouseup(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};

		nexacro._syshandler_onmousemove_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			_window._cur_client_pos.x = windowX;
			_window._cur_client_pos.y = windowY;

			elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
			return _window._on_sys_mousemove(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onmouseenter_forward = function (_window, elem, from_elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
			return _window._on_sys_mouseenter(elem, from_elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onmouseleave_forward = function (_window, elem, to_elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
			to_elem = (to_elem && to_elem.setSelectEventPassElement) ? to_elem.setSelectEventPassElement(windowX, windowY) : to_elem;
			return _window._on_sys_mouseleave(elem, to_elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_onmousewheel_forward = function (_window, elem, wheelDelta, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			return _window._on_sys_mousewheel(elem, 0, wheelDelta, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_ondragenter_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY, filelist) {
			_window._on_sys_dragenter(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY, filelist);
		};
		nexacro._syshandler_ondragover_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			_window._on_sys_dragover(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_ondragleave_forward = function (_window) {
			_window._on_sys_dragleave();
		};
		nexacro._syshandler_ondrop_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			_window._on_sys_drop(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
		};
		nexacro._syshandler_ontouchstart_forward = function (_window, elem, touchid, time, windowX, windowY, screenX, screenY, is_last_changedtouch) {
			return _window._on_sys_touchstart(elem, touchid, windowX, windowY, screenX, screenY, time, time, is_last_changedtouch);
		};
		nexacro._syshandler_ontouchmove_forward = function (_window, elem, touchid, time, windowX, windowY, screenX, screenY, is_last_changedtouch) {
			return _window._on_sys_touchmove(elem, touchid, windowX, windowY, screenX, screenY, time, time, is_last_changedtouch);
		};
		nexacro._syshandler_ontouchend_forward = function (_window, elem, touchid, time, windowX, windowY, screenX, screenY, is_last_changedtouch) {
			return _window._on_sys_touchend(elem, touchid, windowX, windowY, screenX, screenY, time, time, is_last_changedtouch);
		};
		nexacro._syshandler_onmousehover_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			if (elem && elem._handle) {
				var comp = _window.findComponent(elem);
				if (comp) {
					nexacro.__showElementHandleTooltip(elem._handle, windowX, windowY, comp._rtldirection);
				}
				else {
					nexacro.__showElementHandleTooltip(elem._handle, windowX, windowY, 0);
				}
			}
		};

		nexacro._syshandler_ondblclick_forward = function (_window, elem, strButton, altKey, ctrlKey, shiftKey, windowX, windowY, screenX, screenY) {
			var ret = _window._on_sys_dblclick(elem, strButton, altKey, ctrlKey, shiftKey, false, windowX, windowY, screenX, screenY);
			if (elem._event_stop) {
				elem._event_stop = false;
				return false;
			}
			return ret;
		};

		nexacro._syshandler_onkeydown_forward = function (_window, elem, keyCode, altKey, ctrlKey, shiftKey) {
			return _window._on_sys_keydown(elem, keyCode, altKey, ctrlKey, shiftKey);
		};
		nexacro._syshandler_onkeypress_forward = function (_window, elem, keyCode, altKey, ctrlKey, shiftKey) {
			return _window._on_sys_keypress(elem, keyCode, altKey, ctrlKey, shiftKey);
		};
		nexacro._syshandler_onkeyup_forward = function (_window, elem, keyCode, altKey, ctrlKey, shiftKey) {
			return _window._on_sys_keyup(elem, keyCode, altKey, ctrlKey, shiftKey);
		};

		nexacro._syshandler_oncontextmenu_forward = function (_window, elem) {
			return _window._on_sys_activate(elem);
		};
		nexacro._syshandler_onresize_forward = function (_window, width, height, wparam) {
			return _window._on_sys_resize(width, height, wparam);
		};
		nexacro._syshandler_onmove_forward = function (_window, left, top) {
			return _window._on_sys_move(left, top);
		};
		nexacro._syshandler_ongetminmaxinfo_forward = function (_window) {
			return _window._on_sys_getminmaxinfo();
		};
		nexacro._syshandler_onactivate_forward = function (_window) {
			return _window._on_sys_activate();
		};
		nexacro._syshandler_ondeactivate_forward = function (_window) {
			return _window._on_sys_deactivate();
		};
		nexacro._syshandler_onclose_forward = function (_window) {
			nexacro._stopWindowEventHandler(_window);
			return _window._on_sys_close();
		};
		nexacro._syshandler_onbeforeclose_forward = function (_window) {
			var confirm_message = _window._on_sys_beforeclose();
			if (confirm_message !== undefined && confirm_message != "") {
				return nexacro._confirm(_window.frame, confirm_message);
			}

			return true;
		};
		nexacro._syshandler_onapplicationexit_forward = function (_window) {
			application.exit();
		};


		nexacro._syshandler_onreload_forward = function (_window, elem) {
			return _window._on_sys_reload(elem);
		};

		nexacro._syshandler_onviewsource_forward = function (_window, elem) {
			if (elem) {
				var comp = _window.findComponent(elem);
				if (comp) {
					var formurl, ref_form = comp;

					while (ref_form._type_name != "Form" && !ref_form.url) {
						ref_form = ref_form.parent;
					}

					if (ref_form) {
						var owner = ref_form.parent;
						if (comp.url) {
							formurl = comp.url;
						}
						else if (owner._is_frame) {
							formurl = owner.formurl;
						}
						else {
							if (ref_form._url) {
								formurl = ref_form._url;
								formurl = formurl.substring(0, formurl.indexOf(".xfdl")) + ".xfdl";
								formurl = "./" + formurl.substr(application._project_uri.length);
							}
						}
						nexacro.__simulatorViewSource(formurl);
					}
				}
			}
		};

		nexacro._syshandler_onsyscommand_forward = function (_window, elem, command) {
			var ret = _window._on_sys_syscommand(command);
			if (_window._handle) {
				nexacro.__refreshDirtyWindow(_window._handle);
			}
			return ret;
		};

		nexacro._syshandler_onncmousedown_forward = function (_window, elem, command) {
			return nexacro._checkClosePopupComponent();
		};

		nexacro._syshandler_onload_forward = function (_window) {
			return _window._on_sys_load(_window);
		};

		nexacro._syshandler_onduplicateexecution_forward = function (_window, _globalvalue) {
			return application.on_fire_onduplicateexecution(_globalvalue);
		};


		nexacro._syshandler_onorientationchange_forward = function (_window, orientation) {
			return _window._on_sys_orientationchange(orientation);
		};

		nexacro._syshandler_onaccessibilitygesture_forward = function (_window, direction) {
			return _window._on_sys_accessibilitygesture(direction);
		};

		nexacro._syshandler_onaccessibilityhover_forward = function (_window, elem, windowX, windowY, screenX, screenY) {
			return _window._on_sys_accessibilityhover(elem, windowX, windowY, screenX, screenY);
		};

		nexacro._initWindowEventHandler = function (_window, _handle) {
			var win_handle = (_handle ? _handle : _window._handle);
			if (win_handle) {
				nexacro._observeSysEvent(win_handle, "message", "onmessage", nexacro._syshandler_onmessage_forward);
				nexacro._observeSysEvent(win_handle, "lbuttondown", "onlbuttondown", nexacro._syshandler_onlbuttondown_forward);
				nexacro._observeSysEvent(win_handle, "lbuttonup", "onlbuttonup", nexacro._syshandler_onlbuttonup_forward);
				nexacro._observeSysEvent(win_handle, "rbuttondown", "onrbuttondown", nexacro._syshandler_onrbuttondown_forward);
				nexacro._observeSysEvent(win_handle, "rbuttonup", "onrbuttonup", nexacro._syshandler_onrbuttonup_forward);
				nexacro._observeSysEvent(win_handle, "mousedown", "onmousedown", nexacro._syshandler_onmousedown_forward);
				nexacro._observeSysEvent(win_handle, "mouseup", "onmouseup", nexacro._syshandler_onmouseup_forward);

				nexacro._observeSysEvent(win_handle, "mousemove", "onmousemove", nexacro._syshandler_onmousemove_forward);
				nexacro._observeSysEvent(win_handle, "mouseenter", "onmouseenter", nexacro._syshandler_onmouseenter_forward);
				nexacro._observeSysEvent(win_handle, "mouseleave", "onmouseleave", nexacro._syshandler_onmouseleave_forward);
				nexacro._observeSysEvent(win_handle, "mousewheel", "onmousewheel", nexacro._syshandler_onmousewheel_forward);
				nexacro._observeSysEvent(win_handle, "mousehover", "onmousehover", nexacro._syshandler_onmousehover_forward);

				nexacro._observeSysEvent(win_handle, "dragenter", "ondragenter", nexacro._syshandler_ondragenter_forward);
				nexacro._observeSysEvent(win_handle, "dragover", "ondragover", nexacro._syshandler_ondragover_forward);
				nexacro._observeSysEvent(win_handle, "dragleave", "ondragleave", nexacro._syshandler_ondragleave_forward);
				nexacro._observeSysEvent(win_handle, "drop", "ondrop", nexacro._syshandler_ondrop_forward);

				if (nexacro.SupportTouch) {
					nexacro._observeSysEvent(win_handle, "touchstart", "ontouchstart", nexacro._syshandler_ontouchstart_forward);
					nexacro._observeSysEvent(win_handle, "touchmove", "ontouchmove", nexacro._syshandler_ontouchmove_forward);
					nexacro._observeSysEvent(win_handle, "touchend", "ontouchend", nexacro._syshandler_ontouchend_forward);
				}

				nexacro._observeSysEvent(win_handle, "dblclick", "ondblclick", nexacro._syshandler_ondblclick_forward);

				nexacro._observeSysEvent(win_handle, "keydown", "onkeydown", nexacro._syshandler_onkeydown_forward);
				nexacro._observeSysEvent(win_handle, "keypress", "onkeypress", nexacro._syshandler_onkeypress_forward);
				nexacro._observeSysEvent(win_handle, "keyup", "onkeyup", nexacro._syshandler_onkeyup_forward);

				nexacro._observeSysEvent(win_handle, "contextmenu", "oncontextmenu", nexacro._syshandler_oncontextmenu_forward);
				nexacro._observeSysEvent(win_handle, "resize", "onresize", nexacro._syshandler_onresize_forward);
				nexacro._observeSysEvent(win_handle, "move", "onmove", nexacro._syshandler_onmove_forward);
				nexacro._observeSysEvent(win_handle, "getminmaxinfo", "ongetminmaxinfo", nexacro._syshandler_ongetminmaxinfo_forward);

				nexacro._observeSysEvent(win_handle, "activate", "onactivate", nexacro._syshandler_onactivate_forward);
				nexacro._observeSysEvent(win_handle, "deactivate", "ondeactivate", nexacro._syshandler_ondeactivate_forward);
				nexacro._observeSysEvent(win_handle, "close", "onclose", nexacro._syshandler_onclose_forward);
				nexacro._observeSysEvent(win_handle, "beforeclose", "onbeforeclose", nexacro._syshandler_onbeforeclose_forward);
				nexacro._observeSysEvent(win_handle, "applicationexit", "onapplicationexit", nexacro._syshandler_onapplicationexit_forward);

				nexacro._observeSysEvent(win_handle, "tray", "ontray", nexacro._syshandler_ontray_forward);

				nexacro._observeSysEvent(win_handle, "reload", "onreload", nexacro._syshandler_onreload_forward);
				nexacro._observeSysEvent(win_handle, "viewsource", "onviewsource", nexacro._syshandler_onviewsource_forward);

				nexacro._observeSysEvent(win_handle, "syscommand", "onsyscommand", nexacro._syshandler_onsyscommand_forward);

				nexacro._observeSysEvent(win_handle, "ncmousedown", "onncmousedown", nexacro._syshandler_onncmousedown_forward);

				nexacro._observeSysEvent(win_handle, "duplicateexecution", "onduplicateexecution", nexacro._syshandler_onduplicateexecution_forward);

				nexacro._observeSysEvent(win_handle, "orientationchange", "onorientationchange", nexacro._syshandler_onorientationchange_forward);

				nexacro._observeSysEvent(win_handle, "accessibilitygesture", "onaccessibilitygesture", nexacro._syshandler_onaccessibilitygesture_forward);
				nexacro._observeSysEvent(win_handle, "accessibilityhover", "onaccessibilityhover", nexacro._syshandler_onaccessibilityhover_forward);

				nexacro.__refreshDirtyWindow(win_handle);
			}
		};

		nexacro._stopWindowEventHandler = function (_window) {
			var win_handle = _window._handle;
			if (win_handle) {
				nexacro._stopSysObserving(win_handle, "message", "onmessage", nexacro._syshandler_onmessage_forward);
				nexacro._stopSysObserving(win_handle, "lbuttondown", "onlbuttondown", nexacro._syshandler_onlbuttondown_forward);
				nexacro._stopSysObserving(win_handle, "lbuttonup", "onlbuttonup", nexacro._syshandler_onlbuttonup_forward);
				nexacro._stopSysObserving(win_handle, "rbuttondown", "onrbuttondown", nexacro._syshandler_onrbuttondown_forward);
				nexacro._stopSysObserving(win_handle, "rbuttonup", "onrbuttonup", nexacro._syshandler_onrbuttonup_forward);
				nexacro._stopSysObserving(win_handle, "mousedown", "onmousedown", nexacro._syshandler_onmousedown_forward);
				nexacro._stopSysObserving(win_handle, "mouseup", "onmouseup", nexacro._syshandler_onmouseup_forward);

				nexacro._stopSysObserving(win_handle, "mousemove", "onmousemove", nexacro._syshandler_onmousemove_forward);
				nexacro._stopSysObserving(win_handle, "mouseenter", "onmouseenter", nexacro._syshandler_onmouseenter_forward);
				nexacro._stopSysObserving(win_handle, "mouseleave", "onmouseleave", nexacro._syshandler_onmouseleave_forward);
				nexacro._stopSysObserving(win_handle, "mousewheel", "onmousewheel", nexacro._syshandler_onmousewheel_forward);
				nexacro._stopSysObserving(win_handle, "mousehover", "onmousehover", nexacro._syshandler_onmousehover_forward);

				nexacro._stopSysObserving(win_handle, "dragenter", "ondragenter", nexacro._syshandler_ondragenter_forward);
				nexacro._stopSysObserving(win_handle, "dragover", "ondragover", nexacro._syshandler_ondragover_forward);
				nexacro._stopSysObserving(win_handle, "dragleave", "ondragleave", nexacro._syshandler_ondragleave_forward);
				nexacro._stopSysObserving(win_handle, "drop", "ondrop", nexacro._syshandler_ondrop_forward);

				if (nexacro.SupportTouch) {
					nexacro._stopSysObserving(win_handle, "touchstart", "ontouchstart", nexacro._syshandler_ontouchstart_forward);
					nexacro._stopSysObserving(win_handle, "touchmove", "ontouchmove", nexacro._syshandler_ontouchmove_forward);
					nexacro._stopSysObserving(win_handle, "touchend", "ontouchend", nexacro._syshandler_ontouchend_forward);
				}

				nexacro._stopSysObserving(win_handle, "dblclick", "ondblclick", nexacro._syshandler_ondblclick_forward);

				nexacro._stopSysObserving(win_handle, "keydown", "onkeydown", nexacro._syshandler_onkeydown_forward);
				nexacro._stopSysObserving(win_handle, "keypress", "onkeypress", nexacro._syshandler_onkeypress_forward);
				nexacro._stopSysObserving(win_handle, "keyup", "onkeyup", nexacro._syshandler_onkeyup_forward);

				nexacro._stopSysObserving(win_handle, "contextmenu", "oncontextmenu", nexacro._syshandler_oncontextmenu_forward);
				nexacro._stopSysObserving(win_handle, "resize", "onresize", nexacro._syshandler_onresize_forward);
				nexacro._stopSysObserving(win_handle, "move", "onmove", nexacro._syshandler_onmove_forward);
				nexacro._stopSysObserving(win_handle, "getminmaxinfo", "ongetminmaxinfo", nexacro._syshandler_ongetminmaxinfo_forward);

				nexacro._stopSysObserving(win_handle, "activate", "onactivate", nexacro._syshandler_onactivate_forward);
				nexacro._stopSysObserving(win_handle, "deactivate", "ondeactivate", nexacro._syshandler_ondeactivate_forward);
				nexacro._stopSysObserving(win_handle, "close", "onclose", nexacro._syshandler_onclose_forward);
				nexacro._stopSysObserving(win_handle, "beforeclose", "onbeforeclose", nexacro._syshandler_onbeforeclose_forward);
				nexacro._stopSysObserving(win_handle, "applicationexit", "onapplicationexit", nexacro._syshandler_onapplicationexit_forward);

				nexacro._stopSysObserving(win_handle, "tray", "ontray", nexacro._syshandler_ontray_forward);

				nexacro._stopSysObserving(win_handle, "reload", "onreload", nexacro._syshandler_onreload_forward);
				nexacro._stopSysObserving(win_handle, "viewsource", "onviewsource", nexacro._syshandler_onviewsource_forward);

				nexacro._stopSysObserving(win_handle, "syscommand", "onsyscommand", nexacro._syshandler_onsyscommand_forward);

				nexacro._stopSysObserving(win_handle, "ncmousedown", "onncmousedown", nexacro._syshandler_onncmousedown_forward);

				nexacro._stopSysObserving(win_handle, "duplicateexecution", "onduplicateexecution", nexacro._syshandler_onduplicateexecution_forward);

				nexacro._stopSysObserving(win_handle, "orientationchange", "onorientationchange", nexacro._syshandler_onorientationchange_forward);

				nexacro._stopSysObserving(win_handle, "accessibilitygesture", "onaccessibilitygesture", nexacro._syshandler_onaccessibilitygesture_forward);
				nexacro._stopSysObserving(win_handle, "accessibilityhover", "onaccessibilityhover", nexacro._syshandler_onaccessibilityhover_forward);
			}
		};


		nexacro.__bindEventWindowLoadHandler = function (_window) {
			return function (v1, v2) {
				if (_window == null) {
					_window = v1;
				}
				if (_window) {
					if (!_window._handle) {
						var _handle = v2;
						_window.attachHandle(_handle);
					}
					nexacro._initWindowEventHandler(_window);
					if (nexacro.__mainwindow_handle) {
						nexacro._syshandler_onload_forward(_window);
					}

					var width = nexacro._getWindowHandleOuterWidth(_window._handle);
					var height = nexacro._getWindowHandleOuterHeight(_window._handle);
					if (width != undefined && height != undefined) {
						if (nexacro.OS == "Android" || _window.width != width || _window.height != height) {
							_window._on_default_sys_resize(width, height);
						}
					}
				}
			};
		};
		nexacro.__bindEventPopupWindowLoadHandler = function (_window) {
			return function (v1, v2) {
				if (_window == null) {
					_window = v1;
				}
				if (_window) {
					if (!_window._handle) {
						var _handle = v2;
						_window.attachHandle(_handle);
					}
					nexacro._initWindowEventHandler(_window);

					var childframe = new nexacro.ChildFrame(_window.id);
					childframe._showModeless(_window.id, _window);
				}
			};
		};
		nexacro.__bindEventModalWindowLoadHandler = function (_window, _handle) {
			return function (v1, v2) {
				if (_window == null) {
					_window = v1;
				}
				if (_handle == null) {
					_handle = v2;
				}
				if (_window) {
					_window.attachHandle(_handle);
					nexacro._initWindowEventHandler(_window);
					nexacro._syshandler_onload_forward(_window);
				}
			};
		};
		nexacro.__bindEventModalAsyncWindowLoadHandler = function (_window) {
			return function () {
				if (_window) {
					nexacro._initWindowEventHandler(_window);
					nexacro._syshandler_onload_forward(_window);
				}
			};
		};
		nexacro.__mainwindow_handle = null;
		nexacro._createWindowHandle = function (parent_win, _window, name, left, top, width, height, resizable, layered, taskbar, is_main) {
			var parent_handle = null;
			if (parent_win) {
				parent_handle = parent_win._handle;
			}

			if (left == null) {
				left = Math.floor((nexacro.System.availWidth - width) / 2);
			}
			if (top == null) {
				top = Math.floor((nexacro.System.availHeight - height) / 2);
			}

			var callback = nexacro.__bindEventWindowLoadHandler(_window);
			var _handle;
			if (!nexacro.isDesignMode) {
				_handle = nexacro.__createWindowHandle(parent_handle, _window, name, left, top, width, height, resizable, layered, taskbar, is_main, callback);
			}
			else {
				_handle = nexacro.__createDesignWindowHandle(parent_handle, _window, name, left, top, width, height, resizable, layered, taskbar, is_main, callback);
			}

			_window.attachHandle(_handle);
			callback = null;

			nexacro._setViewportScale(_window);

			if (is_main && _handle) {
				nexacro.__mainwindow_handle = _handle;
			}
		};

		nexacro._createModalWindowHandle = function (parent_win, _window, name, left, top, width, height, resizable, layered, lockmode, delayedCreate) {
			var parent_handle = null;
			if (parent_win) {
				parent_handle = parent_win._handle;
			}

			if (left == null) {
				left = Math.floor((nexacro.System.availWidth - width) / 2);
			}

			if (top == null) {
				top = Math.floor((nexacro.System.availHeight - height) / 2);
			}

			var window_list = [application.mainframe._getWindow()];
			var _popupframes = application.popupframes;
			var len = _popupframes.length;
			var _popup_win = null;
			var frame = _window.frame;

			if (len > 0) {
				for (var i = 0; i < len; i++) {
					_popup_win = _popupframes[i]._window;
					if (_popup_win == this || _popup_win == null) {
						continue;
					}

					window_list.push(_popup_win);
				}
			}

			var frame = _window.frame;
			for (var i = 0; i < window_list.length; i++) {
				nexacro._setWindowModalLock(window_list[i], true, null, frame);
			}

			var callback = nexacro.__bindEventModalWindowLoadHandler(_window, null);

			var _handle = nexacro.__createModalWindowHandle(parent_handle, _window, name, left, top, width, height, resizable, layered, lockmode, callback, delayedCreate);
			callback = null;

			for (var i = 0; i < window_list.length; i++) {
				nexacro._setWindowModalLock(window_list[i], false, _handle, frame);
			}
			nexacro.__setModalParentWindowFocusHandle(parent_handle, _window, name, left, top, width, height, resizable, layered, lockmode, callback);
			delete window_list;
			return _window.returnValue;
		};

		nexacro._setWindowModalLock = function (_window, is_lock, _except_handle, modal_frame) {
			var _handle = _window._handle;
			if (_handle != _except_handle) {
				if (is_lock) {
					if (_window._disable_ref == 0) {
						var overlaycolor = modal_frame.on_find_CurrentStyle_overlaycolor(modal_frame._pseudo);
						_window._setModalLock(modal_frame, overlaycolor);
					}
					_window._disable_ref++;
				}
				else {
					_window._disable_ref--;
					if (_window._disable_ref == 0) {
						_window._setModalUnlock();
					}
				}
			}

			nexacro.__setWindowHandleLock(_handle, is_lock, _except_handle, false);
		};

		nexacro._createModalAsyncWindowHandle = function (parent_win, _window, name, left, top, width, height, resizable, layered, lockmode) {
			var parent_handle = null;
			if (parent_win) {
				parent_handle = parent_win._handle;
			}

			if (left == null) {
				left = Math.floor((nexacro.System.availWidth - width) / 2);
			}
			if (top == null) {
				top = Math.floor((nexacro.System.availHeight - height) / 2);
			}

			var callback = nexacro.__bindEventModalAsyncWindowLoadHandler(_window);
			var _handle = nexacro.__createModalAsyncWindowHandle(parent_handle, _window, name, left, top, width, height, resizable, layered, lockmode, callback);
			_window.attachHandle(_handle);
			callback = null;

			return _handle;
		};

		nexacro._createModalAsyncCallbackHandler = function (_win_handle, frame) {
			if (frame._window_type != 3) {
				return;
			}

			var main_handle = nexacro._getMainWindowHandle();

			var timer_handle = nexacro._setSystemTimer(main_handle, function () {
				var is_prepared = nexacro.__isWindowHandlePrepared(_win_handle);
				if (_win_handle && is_prepared == false) {
					nexacro._removeModalAsyncCallbackHandler(frame);

					frame._runCallback();
				}
			}, 100);

			application._closedmodalasync_list.push([frame, timer_handle]);
		};

		nexacro._removeModalAsyncCallbackHandler = function (frame) {
			var list = application._closedmodalasync_list;
			var list_length = list.length;
			for (var i = 0; i < list_length; i++) {
				var list_item = list[i];
				if (list_item[0] == frame) {
					var main_handle = nexacro._getMainWindowHandle();
					nexacro._clearSystemTimer(main_handle, list_item[1]);

					for (var j = i; j < list_length - 1; j++) {
						list[j] = list[j + 1];
					}
					list.pop();
					break;
				}
			}
		};

		nexacro._createOpenWindowHandle = function (parent_win, name, formurl, left, top, width, height, resizable, layered, taskbar, is_main) {
			var parent_handle = null;
			if (parent_win) {
				parent_handle = parent_win._handle;
			}

			if (left == null) {
				left = Math.floor((nexacro.System.availWidth - width) / 2);
			}
			if (top == null) {
				top = Math.floor((nexacro.System.availHeight - height) / 2);
			}

			var _window = new nexacro.Window(name, parent_win, false);
			if (parent_win) {
				parent_win.addChild(_window);
			}

			var callback = nexacro.__bindEventPopupWindowLoadHandler(_window);
			var _handle = nexacro.__createWindowHandle(parent_handle, _window, name, left, top, width, height, resizable, layered, taskbar, false, callback);
			_window.attachHandle(_handle);
			callback = null;

			return _handle;
		};

		nexacro._refreshWindow = function (_handle) {
			nexacro.__refreshDirtyWindow(_handle);
		};

		nexacro._isWindowHandlePrepared = function (_handle) {
			return nexacro.__isWindowHandlePrepared(_handle);
		};
		nexacro._closeWindowHandle = function (_handle) {
			if (nexacro.__mainwindow_handle == _handle) {
				nexacro.__mainwindow_handle = null;
			}
			nexacro.__closeWindowHandle(_handle);
		};

		nexacro._setLinkedWindow = function (_handle, target_win) {
		};
		nexacro._getMainWindowHandle = function () {
			return nexacro.__mainwindow_handle;
		};

		nexacro._getWindowHandle = function (_handle) {
			return _handle;
		};

		nexacro._getWindowDocumentHandle = function (_handle) {
			return _handle;
		};
		nexacro._getWindowDestinationHandle = function (_handle) {
			return _handle;
		};

		nexacro._getWindowHwndHandle = function (_handle) {
			if (_handle) {
				return nexacro.__getWindowHwndHandle(_handle);
			}
			return _handle;
		};

		nexacro._getWindowHandlePosX = function (_handle) {
			return nexacro.__getWindowHandlePosX(_handle);
		};
		nexacro._getWindowHandlePosY = function (_handle) {
			return nexacro.__getWindowHandlePosY(_handle);
		};

		nexacro._getWindowHandleOuterWidth = function (_handle) {
			return nexacro.__getWindowHandleOuterWidth(_handle);
		};
		nexacro._getWindowHandleOuterHeight = function (_handle) {
			return nexacro.__getWindowHandleOuterHeight(_handle);
		};

		nexacro._getWindowHandleClientWidth = function (_handle) {
			return nexacro.__getWindowHandleClientWidth(_handle);
		};
		nexacro._getWindowHandleClientHeight = function (_handle) {
			return nexacro.__getWindowHandleClientHeight(_handle);
		};

		nexacro._setWindowHandleArea = function (_handle, x, y, w, h) {
			nexacro.__setWindowHandleArea(_handle, x, y, w, h);
		};
		nexacro._setWindowHandlePos = function (_handle, x, y) {
			nexacro.__setWindowHandlePos(_handle, x, y);
		};
		nexacro._setWindowHandleSize = function (_handle, w, h) {
			nexacro.__setWindowHandleSize(_handle, w, h);
		};
		nexacro._setWindowHandleZIndex = function (_win_handle, zindex) {
		};
		nexacro._findWindow = function (_win_handle) {
			return nexacro.__getWindowFromWindowHandle(_win_handle);
		};

		nexacro._flashWindow = function (hWnd, strType, nCount, nInterval) {
			return nexacro.__flashWindow(hWnd, strType, nCount, nInterval);
		};

		nexacro._setWindowHandleText = function (_win_handle, titletext) {
			return nexacro.__setWindowHandleText(_win_handle, titletext);
		};

		nexacro._setWindowHandleStatusText = nexacro._emptyFn;

		nexacro._setWindowHandleIcon = function (_win_handle, icon_url) {
			return nexacro.__setWindowHandleIcon(_win_handle, icon_url);
		};

		nexacro._setWindowHandleTopmost = function (_win_handle, btopmst) {
			return nexacro.__setWindowHandleTopmost(_win_handle, btopmst);
		};

		nexacro._getMainWindowWidth = function (_win) {
			var win_width = _win.clientWidth;
			if (_win._zoom_factor) {
				win_width = win_width * _win._zoom_factor / 100.0;
			}
			return win_width;
		};

		nexacro._getMainWindowHeight = function (_win) {
			var win_height = _win.clientHeight;
			if (_win._zoom_factor) {
				win_height = win_height * _win._zoom_factor / 100.0;
			}
			return win_height;
		};
		nexacro._createPopupWindowHandle = function (parent_win, target_win, name, left, top, width, height) {
			var parent_handle = parent_win._handle;

			if (left == null) {
				left = Math.floor((nexacro.System.availWidth - width) / 2);
			}
			if (top == null) {
				top = Math.floor((nexacro.System.availHeight - height) / 2);
			}

			var callback = nexacro.__bindEventWindowLoadHandler(target_win);
			var _handle = nexacro.__createPopupWindowHandle(parent_handle, target_win, name, left, top, width, height, callback);
			target_win.attachHandle(_handle);
			callback = null;
		};
		nexacro._closePopupWindowHandle = function (_handle) {
			nexacro.__closeWindowHandle(_handle);
		};

		nexacro._getPopupWindowDocumentHandle = function (_handle) {
			return _handle;
		};
		nexacro._getPopupWindowDestinationHandle = function (_handle) {
			return _handle;
		};

		nexacro._getPopupWindowHandlePosX = function (_handle) {
			return nexacro._getWindowHandlePosX(_handle);
		};
		nexacro._getPopupWindowHandlePosY = function (_handle) {
			return nexacro._getWindowHandlePosY(_handle);
		};

		nexacro._getPopupWindowHandleOuterWidth = function (_handle) {
			return nexacro._getWindowHandleOuterWidth(_handle);
		};
		nexacro._getPopupWindowHandleOuterHeight = function (_handle) {
			return nexacro._getWindowHandleOuterHeight(_handle);
		};

		nexacro._getPopupWindowHandleClientWidth = function (_handle) {
			return nexacro._getWindowHandleClientWidth(_handle);
		};
		nexacro._getPopupWindowHandleClientHeight = function (_handle) {
			return nexacro._getWindowHandleClientHeight(_handle);
		};

		nexacro._setPopupWindowHandleArea = function (_handle, x, y, w, h) {
			nexacro._setWindowHandleArea(_handle, x, y, w, h);
		};
		nexacro._setPopupWindowHandlePos = function (_handle, x, y) {
			nexacro._setWindowHandlePos(_handle, x, y);
		};

		nexacro._setPopupWindowHandleSize = function (_handle, w, h) {
			nexacro._setWindowHandleSize(_handle, w, h);
		};

		nexacro._setPopupWindowHandleVisible = function (_handle, visible_flag) {
			nexacro.__setWindowHandleVisible(_handle, visible_flag);
			nexacro.__refreshDirtyWindow(_handle);
		};

		nexacro._createVirtualWindowHandle = function (_handle) {
			return nexacro.__createVirtualWindowHandle(_handle);
		};
		nexacro._closeVirtualWindowHandle = function (_handle) {
			nexacro.__closeVirtualWindowHandle(_handle);
		};

		nexacro._blockScript = function (_handle, _virtual_handle) {
			nexacro.__blockScript(_handle, _virtual_handle);
		};

		nexacro._unblockScript = function (_handle, _virtual_handle) {
			nexacro.__unblockScript(_handle, _virtual_handle);
		};


		nexacro._setPrivateProfile = function (key, varValue, global) {
			var value;
			var type = (typeof varValue);
			if (type == "object") {
				if (varValue instanceof nexacro.Date) {
					type = "nexacrodate";
				}
				else if (varValue instanceof Date) {
					type = "date";
				}
				else if (varValue instanceof nexacro.Decimal) {
					type = "decimal";
				}
			}
			value = type + ":" + varValue;

			return nexacro.__setPrivateProfile(key, value, global);
		};


		nexacro._getPrivateProfile = function (key, global) {
			var retvalue = nexacro.__getPrivateProfile(key, global);
			if (retvalue) {
				var index = retvalue.indexOf(":");
				var type = retvalue.substring(0, index);
				var value = retvalue.substring(index + 1);

				if (type && value) {
					if (type == "number") {
						return Number(value);
					}
					else if (type == "boolean") {
						return (value == "true") ? true : false;
					}
					else if (type == "nexacrodate") {
						var year = value.substring(0, 4);
						var month = value.substring(4, 6);
						var date = value.substring(6, 8);
						var hour = value.substring(8, 10);
						var minute = value.substring(10, 12);
						var second = value.substring(12, 14);
						var millisecond = value.substring(14, 16);
						return new nexacro.Date(year, month, date, hour, minute, second, millisecond);
					}
					else if (type == "date") {
						return new Date(value);
					}
					else if (type == "decimal") {
						return new nexacro.Decimal(value);
					}
					return value;
				}
			}
		};

		nexacro._getGlobalValueData = function (key, url) {
			return application._globalvalue;
		};

		nexacro._showQuickviewMenu = function (comp, sx, sy) {
			var control_element = comp.getElement();
			if (control_element && control_element._handle) {
				var window = comp._getWindow();
				var _win_handle = (window ? window._handle : nexacro._getMainWindowHandle());
				var elem_handle = control_element._handle;
				return nexacro.__showQuickviewMenu(_win_handle, elem_handle, sx, sy);
			}
		};

		nexacro._setSystemMenuResizable = function (_handle, resizable) {
			nexacro.__setSystemMenuResizable(_handle, resizable);
		};

		nexacro._procSysCommand = function (_handle, command) {
			nexacro.__procSysCommand(_handle, command);
		};

		nexacro._setMouseHovertime = function (mousehovertime) {
			nexacro.__setMouseHovertime(mousehovertime);
		};

		nexacro._setWindowHandleBorder = function (_handle, border, bordertype) {
			var top_width, right_width, bottom_width, left_width, type, radiusx, radiusy;
			var left_top, right_top, right_bottom, left_bottom;

			if (border) {
				if (_handle) {
					if (border._linecnt == 1) {
						top_width = border.top_style ? border._top_width : 0;
						right_width = top_width;
						bottom_width = top_width;
						left_width = top_width;
					}
					else {
						if (border._linecnt == 2) {
							top_width = border.top_style ? border._top_width : 0;
							right_width = border.right_style ? border._right_width : 0;
							left_width = right_width;
							bottom_width = top_width;
						}
						else if (border._linecnt == 3) {
							top_width = border.top_style ? border._top_width : 0;
							bottom_width = border.bottom_style ? border._bottom_width : 0;
							right_width = border.right_style ? border._right_width : 0;
							left_width = right_width;
						}
						else {
							top_width = border.top_style ? border._top_width : 0;
							bottom_width = border.bottom_style ? border._bottom_width : 0;
							left_width = border.left_style ? border._left_width : 0;
							right_width = border.right_style ? border._right_width : 0;
						}
					}
				}

				inner_width = this.width - border._getBorderWidth();
				inner_height = this.height - border._getBorderHeight();
				if (inner_width < 0) {
					inner_width = 0;
				}
				if (inner_height < 0) {
					inner_height = 0;
				}
			}

			if (bordertype) {
				type = bordertype.type;
				radiusx = bordertype._radiusx;
				radiusy = bordertype._radiusy;
				left_top = bordertype._lefttop;
				right_top = bordertype._righttop;
				right_bottom = bordertype._rightbottom;
				left_bottom = bordertype._leftbottom;
			}

			if (_handle) {
				nexacro.__setWindowHandleBorder(_handle, top_width, right_width, bottom_width, left_width, type, radiusx, radiusy, left_top, right_top, left_bottom, right_bottom);
			}
		};
		nexacro._deleteTraceLogFile = function () {
			nexacro.__deleteTraceLogFile();
		};

		nexacro._writeTraceLog = function (msglevel, message, bsystemlog, loglevel) {
			var data;
			data = (bsystemlog == true) ? "S" : "U";

			if (msglevel == 0) {
				data += "F";
			}
			else if (msglevel == 1) {
				data += "E";
			}
			else if (msglevel == 2) {
				data += "W";
			}
			else if (msglevel == 3) {
				data += "I";
			}
			else {
				data += "D";
			}

			var curdate = new Date();
			data = data + " " + curdate.getHours() + ":" + curdate.getMinutes() + ":" + curdate.getSeconds() + ":" + curdate.getMilliseconds() + " ";
			var cnt = 16 - data.length;
			for (var i = 0; i < cnt; i++) {
				data += " ";
			}

			data += message;

			var traceduration = application.traceduration || -1;
			var tracemode = application.tracemode || "none";

			nexacro.__writeTraceLog(data, loglevel, tracemode, traceduration, msglevel);
		};

		nexacro._loadImageBase64 = function (source, target, handler) {
			return nexacro.__loadImageBase64(source, target, handler);
		};

		nexacro._setUseHttpKeepAlive = function (v) {
			var usehttpkeepalive = nexacro._toBoolean(v);
			application.usehttpkeepalive = (usehttpkeepalive == false) ? false : true;
			nexacro.__setUseHttpKeepAlive(application.usehttpkeepalive);
		};

		nexacro._setHttpTimeout = function (v) {
			var timeout = nexacro._parseInt(v);
			application.httptimeout = (timeout > 0) ? timeout : 0;
			nexacro.__setHttpTimeout(application.httptimeout);
		};

		nexacro._setHttpRetry = function (v) {
			var httpretry = nexacro._parseInt(v);
			application.httpretry = (httpretry > 0) ? httpretry : 0;
			nexacro.__setHttpRetry(application.httpretry);
		};

		nexacro._applicationExit = nexacro._emptyFn;

		nexacro._checkWindowActive = function (_window) {
			var is_active;
			var win_handle = _window._handle;
			if (win_handle) {
				is_active = nexacro.__checkWindowHandleActive(win_handle);
				_window._is_active_window = is_active;
			}

			return is_active;
		};

		nexacro._setWindowHandleFocus = function (win_handle) {
			nexacro.__setWindowHandleFocus(win_handle);
		};

		nexacro._getHoverElement = function (_win, clientX, clientY) {
			if (!_win) {
				return null;
			}

			var pointX = _win._cur_client_pos.x;
			var pointY = _win._cur_client_pos.y;

			var frame = _win.frame;
			if (!frame) {
				return null;
			}
			var frame_elem = frame._control_element;
			if (!frame_elem) {
				return null;
			}
			var _handle = frame_elem._handle;
			if (!_handle) {
				return null;
			}

			return nexacro.__HitTestByPoint(_handle, pointX, pointY);
		};

		nexacro._addExtensionModule = function (object, modulepath) {
			return nexacro.__addExtensionModule(object, modulepath);
		};

		nexacro._clearExtensionModule = function (modulepath) {
			nexacro.__clearExtensionModule(modulepath);
		};

		nexacro._deleteCacheDB = function () {
			nexacro.__deleteCacheDB();
		};

		nexacro._searchDeviceExceptionValue = function (exception_type) {
			if (exception_type == "swap_screen") {
				return true;
			}
			return undefined;
		};

		nexacro._setViewportScale = function (_window) {
			if (!_window) {
				return;
			}

			var _handle = _window._handle;

			var use_autozoom = (nexacro._zoom_factor == 0 ? false : true);
			var ratio = (use_autozoom ? nexacro._zoom_factor / 100 : 1.0);
			var minimum_scale = nexacro._minimum_scale;
			var maximum_scale = nexacro._maximum_scale;
			var is_scalable = (minimum_scale < maximum_scale ? 1 : 0);
			if (minimum_scale == undefined && maximum_scale == undefined) {
				is_scalable = (use_autozoom ? false : true);
			}

			if (nexacro._isDesktop()) {
				use_autozoom = false;
				ratio = 1.0;
				is_scalable = false;
			}

			if (is_scalable) {
				nexacro._allow_default_pinchzoom = true;
			}
			else {
				if (minimum_scale == undefined) {
					minimum_scale = 1;
				}
				if (maximum_scale == undefined) {
					maximum_scale = 1;
				}
			}

			nexacro.__setWindowHandleViewportScale(_handle, is_scalable, ratio, (minimum_scale !== undefined) ? (ratio * minimum_scale) : ratio, (maximum_scale !== undefined) ? (ratio * maximum_scale) : ratio, null);

			_window._zoom_factor = nexacro._zoom_factor;

			if (nexacro._zoom_factor != 0) {
				_window._zoom_factor = nexacro._zoom_factor;
				nexacro.__setWindowHandleZoom(_handle, nexacro._zoom_factor);
			}
		};

		nexacro._createTrayHandle = function (icon, tooltip) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__createTrayHandle(main_handle, icon, tooltip);
		};

		nexacro._removeTrayHandle = function (tray_handle) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__removeTrayHandle(main_handle, tray_handle);
		};

		nexacro._setTrayIconHandle = function (tray_handle, icon) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__setTrayIconHandle(main_handle, tray_handle, icon);
		};

		nexacro._setTrayTooltipHandle = function (tray_handle, tooltip) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__setTrayTooltipHandle(main_handle, tray_handle, tooltip);
		};

		nexacro._showTrayBalloonTipHandle = function (tray_handle, titleicon, title, text, timeout, nosound) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__showTrayBalloonTipHandle(main_handle, tray_handle, titleicon, title, text, timeout, nosound);
		};

		nexacro._createTrayPopupMenuHandle = function (tray_handle) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__createTrayPopupMenuHandle(main_handle, tray_handle);
		};

		nexacro._destroyTrayPopupMenuHandle = function (tray_handle, menu_handle) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__destroyTrayPopupMenuHandle(main_handle, tray_handle, menu_handle);
		};

		nexacro._setTrayPopupMenuItemHandle = function (tray_handle, menu_handle, flags, id, caption, icon) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__setTrayPopupMenuItemHandle(main_handle, tray_handle, menu_handle, flags, id, caption, icon);
		};

		nexacro._displayTrayPopupMenuHandle = function (tray_handle, menu_handle) {
			var main_handle = nexacro._getMainWindowHandle();
			return nexacro.__displayTrayPopupMenuHandle(main_handle, tray_handle, menu_handle);
		};


		nexacro._syshandler_ontray_forward = function (_window, type, id, button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY) {
			if (type == "lbuttonup") {
				var tray = application.trays[id];
				return tray.on_fire_onlbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY);
			}
			else if (type == "rbuttonup") {
				var tray = application.trays[id];
				return tray.on_fire_onrbuttonup(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY);
			}
			else if (type == "dblclick") {
				var tray = application.trays[id];
				return tray.on_fire_ondblclick(button, alt_key, ctrl_key, shift_key, meta_key, screenX, screenY);
			}
			else if (type == "menuclick") {
				var traypopup = application._current_tray_popup;
				return traypopup.on_fire_onmenuclick(id);
			}
			else {
				return;
			}
		};

		nexacro._setPopupframeOption = nexacro._emptyFn;

		nexacro._setOpenInfo = function (child, name) {
			var formurl;
			var openstyles;
			var parent_frame;
			var left, top, width, height;
			var arr_args;
			var opener;
			var popupframeoption = application._popupframeoption[name];
			if (popupframeoption) {
				delete application._popupframeoption[name];

				formurl = popupframeoption._formurl;
				openstyles = popupframeoption._openstyles;
				parent_frame = popupframeoption._parentframe;
				left = popupframeoption._left;
				top = popupframeoption._top;
				width = popupframeoption._width;
				height = popupframeoption._height;
				arr_args = popupframeoption._args;
				child.opener = opener = popupframeoption._opener;
			}

			nexacro._setOpenFrame(name, child, parent_frame, arr_args, left, top, width, height, formurl, openstyles);
		};

		nexacro._getEngineVersion = function () {
			if (nexacro.__getEngineVersion) {
				return nexacro.__getEngineVersion();
			}
			return "2.0";
		};


		nexacro._set_application_rtldirection = function (direction) {
			nexacro.__setApplicaiotnRtlDirection(direction);
		};

		nexacro._postMessage = function (id, _window, target_comp) {
			nexacro.__postMessage(_window._handle, id);
		};

		nexacro._flushCommand = function (_window) {
			if (nexacro.__flushCommand) {
				nexacro.__flushCommand(_window._handle);
			}
		};

		nexacro._updateWrapper = function (handle, brun) {
			nexacro.__updateWrapperBitmap(handle, brun);
		};

		nexacro._get_invisible_obj = nexacro._emptyFn;
		nexacro._reset_invisible_obj = nexacro._emptyFn;
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================


if (!nexacro._bInitPlatform) {
	nexacro._bInitPlatform = true;

	nexacro.isDesignMode = false;
	nexacro.isPluginMode = nexacro._isPluginMode();
	nexacro._initializeGlobalObjects = function (_jsContext) {
		_jsContext.emptyFn = nexacro._emptyFn;


		_jsContext.isNumber = nexacro._isNumber;
		_jsContext.isString = nexacro._isString;
		_jsContext.isUndefined = nexacro._isUndefined;
		_jsContext.isObject = nexacro._isObject;
		_jsContext.isArray = nexacro._isArray;
		_jsContext.isFunction = nexacro._isFunction;


		_jsContext.MainFrame = nexacro.MainFrame;
		_jsContext.ChildFrame = nexacro.ChildFrame;
		_jsContext.FrameSet = nexacro.FrameSet;
		_jsContext.VFrameSet = nexacro.VFrameSet;
		_jsContext.HFrameSet = nexacro.HFrameSet;
		_jsContext.TileFrameSet = nexacro.TileFrameSet;
		_jsContext.Form = nexacro.Form;
		_jsContext.Layout = nexacro.Layout;
		_jsContext.BindItem = nexacro.BindItem;
		_jsContext.ActiveX = nexacro.ActiveX;
		_jsContext.AppletComp = nexacro.AppletComp;
		_jsContext.FlashPlayer = nexacro.FlashPlayer;
		_jsContext.BindItem = nexacro.BindItem;
		_jsContext.Button = nexacro.Button;
		_jsContext.Calendar = nexacro.Calendar;
		_jsContext.Combo = nexacro.Combo;
		_jsContext.CheckBox = nexacro.CheckBox;
		_jsContext.Div = nexacro.Div;
		_jsContext.Dataset = nexacro.NormalDataset;
		_jsContext.Edit = nexacro.Edit;
		_jsContext.FileDownload = nexacro.FileDownload;
		_jsContext.FileUpload = nexacro.FileUpload;
		_jsContext.Grid = nexacro.Grid;
		_jsContext.GroupBox = nexacro.GroupBox;
		_jsContext.ImageViewer = nexacro.ImageViewer;
		_jsContext.ExcelImportObject = nexacro.ExcelImportObject;
		_jsContext.ListBox = nexacro.ListBox;
		_jsContext.MaskEdit = nexacro.MaskEdit;
		_jsContext.TextArea = nexacro.TextArea;
		_jsContext.Radio = nexacro.Radio;
		_jsContext.Spin = nexacro.Spin;
		_jsContext.Static = nexacro.Static;
		_jsContext.ExcelExportObject = nexacro.ExcelExportObject;
		_jsContext.ExportItem = nexacro.ExportItem;
		_jsContext.ExportProgress = nexacro.ExportProgress;
		_jsContext.Menu = nexacro.Menu;
		_jsContext.PopupMenu = nexacro.PopupMenu;
		_jsContext.Tab = nexacro.Tab;
		_jsContext.Tabpage = nexacro.Tabpage;
		_jsContext.TabComponent = nexacro.TabComponent;
		_jsContext.ProgressBar = nexacro.ProgressBar;
		_jsContext.PopupDiv = nexacro.PopupDiv;
		_jsContext.WebBrowser = nexacro.WebBrowser;

		_jsContext.DomParser = nexacro.DomParser;

		_jsContext.ColumnInfo = nexacro.DSColumnInfo;
		_jsContext.Plugin = nexacro.Plugin;
		_jsContext.Tray = nexacro.Tray;
		_jsContext.TrayPopupMenu = nexacro.TrayPopupMenu;

		_jsContext.DragDataFormats = nexacro.DragDataFormats;
		_jsContext.DragDataObject = nexacro.DragDataObject;

		_jsContext.TCPClientSocket = nexacro.TCPClientSocket;
	};

	nexacro._finalizeGlobalObjects = function (_jsContext) {
		_jsContext.emptyFn = null;


		_jsContext.isNumber = null;
		_jsContext.isString = null;
		_jsContext.isUndefined = null;
		_jsContext.isObject = null;
		_jsContext.isArray = null;
		_jsContext.isFunction = null;


		_jsContext.MainFrame = null;
		_jsContext.ChildFrame = null;
		_jsContext.FrameSet = null;
		_jsContext.VFrameSet = null;
		_jsContext.HFrameSet = null;
		_jsContext.TileFrameSet = null;
		_jsContext.Form = null;
		_jsContext.Layout = null;
		_jsContext.BindItem = null;
		_jsContext.ActiveX = null;
		_jsContext.AppletComp = null;
		_jsContext.FlashPlayer = null;
		_jsContext.BindItem = null;
		_jsContext.Button = null;
		_jsContext.Calendar = null;
		_jsContext.Combo = null;
		_jsContext.CheckBox = null;
		_jsContext.Div = null;
		_jsContext.Dataset = null;
		_jsContext.Edit = null;
		_jsContext.FileDownload = null;
		_jsContext.FileUpload = null;
		_jsContext.Grid = null;
		_jsContext.GroupBox = null;
		_jsContext.ImageViewer = null;
		_jsContext.ListBox = null;
		_jsContext.MaskEdit = null;
		_jsContext.TextArea = null;
		_jsContext.Radio = null;
		_jsContext.Spin = null;
		_jsContext.Static = null;
		_jsContext.ExcelExportObject = null;
		_jsContext.ExportItem = null;
		_jsContext.ExportProgress = null;
		_jsContext.Menu = null;
		_jsContext.PopupMenu = null;
		_jsContext.Tab = null;
		_jsContext.Tabpage = null;
		_jsContext.TabComponent = null;
		_jsContext.ProgressBar = null;
		_jsContext.PopupDiv = null;
		_jsContext.WebBrowser = null;

		_jsContext.DomParser = null;

		_jsContext.ColumnInfo = null;
		_jsContext.GridClickEventInfo = null;
		_jsContext.TextChangedEventInfo = null;
	};

	nexacro.System = {
	};

	nexacro.System.screenToClientX = function (comp, posX) {
		if (comp._control_element) {
			var p = nexacro._getElementScreenPosition(comp._control_element);
			return posX - p.x;
		}
	};
	nexacro.System.screenToClientY = function (comp, posY) {
		if (comp._control_element) {
			var p = nexacro._getElementScreenPosition(comp._control_element);
			return posY - p.y;
		}
	};
	nexacro.System.clientToScreenX = function (comp, posX) {
		if (comp._control_element) {
			var p = nexacro._getElementScreenPosition(comp._control_element);
			return posX + p.x;
		}
	};
	nexacro.System.clientToScreenY = function (comp, posY) {
		if (comp._control_element) {
			var p = nexacro._getElementScreenPosition(comp._control_element);
			return posY + p.y;
		}
	};

	nexacro.System.makeCall = function (phoneNumber, autoDialing) {
	};
	nexacro.System.play = function (filePath) {
	};
	nexacro.System.getPackageVersion = function () {
	};

	nexacro.System.convertRealPath = function (path) {
		return nexacro._convertRealPath(path);
	};

	nexacro.System.execBrowser = function (url, browserOption) {
		nexacro._execBrowser(url, browserOption);
	};

	nexacro.System.execShell = function (exeUrl) {
		nexacro._execShell(exeUrl);
	};

	nexacro.System.execNexacro = function (command) {
		nexacro._execNexacro(command);
	};

	nexacro.System.setClipboard = function (format, data) {
		return nexacro._setClipboard(format, data);
	};

	nexacro.System.getClipboard = function (format) {
		return nexacro._getClipboard(format);
	};

	nexacro.System.clearClipboard = function () {
		nexacro._clearClipboard();
	};

	nexacro.System.getScreenResolution = function (monitor_index) {
		var ret_val = "";
		if (monitor_index) {
			var screenwidth = nexacro._getScreenWidth(monitor_index);
			var screenheight = nexacro._getScreenHeight(monitor_index);
			ret_val = screenwidth + " " + screenheight;
			return ret_val;
		}
	};

	nexacro.System.getScreenRect = function (monitor_index) {
		var ret_val = "";
		if (monitor_index) {
			return nexacro._getScreenRect(monitor_index);
		}
	};

	nexacro.System.showModalSync = function (childframe, str_id, _parent_frame, arr_arg, opener) {
		return nexacro._showModalSync(childframe, str_id, _parent_frame, arr_arg, opener);
	};

	nexacro.System.showModalWindow = function (childframe, str_id, parent_frame, arr_arg, opener) {
		return nexacro._showModalWindow(childframe, str_id, parent_frame, arr_arg, opener);
	};

	nexacro.System.attachChildFrame = function (_cur_win, _doc, key, adl_url, div_id, fdl_url) {
		return nexacro._attachChildFrame(_cur_win, _doc, key, adl_url, div_id, fdl_url);
	};

	nexacro.System.isPrimaryMonitor = function (monitor_index) {
		if (monitor_index) {
			return nexacro._isPrimaryMonitor(monitor_index);
		}
	};

	nexacro.System.getMonitorIndex = function (cursorX, cursorY) {
		return nexacro._getMonitorIndex(cursorX, cursorY);
	};

	nexacro.System.getCursorX = function (e) {
		return nexacro._getCursorX(e);
	};

	nexacro.System.getCursorY = function (e) {
		return nexacro._getCursorY(e);
	};

	nexacro.System.getScreenHeight = function (monitor_index) {
		return nexacro._getScreenHeight(monitor_index);
	};

	nexacro.System.getScreenWidth = function (monitor_index) {
		return nexacro._getScreenWidth(monitor_index);
	};

	nexacro.System._getMobileOrientation = function () {
		var orientation = nexacro._getMobileOrientation();
		switch (orientation) {
			case 0:
				{

					return "Portrait";
				}
				break;
			case 1:
				{

					return "ReversePortrait";
				}
				break;
			case 2:
				{

					return "LandscapeLeft";
				}
				break;
			case 3:
				{

					return "LandscapeRight";
				}
				break;
			default:
				{

					return "resize";
				}
				break;
		}
	};

	nexacro.System.getUserAppPath = function () {
		return nexacro._getUserAppPath();
	};

	nexacro.System.checkDevicePermission = function (permission_types) {
		nexacro._checkDevicePermission(permission_types);
	};

	nexacro.System.requestDevicePermission = function (permission_types, description) {
		nexacro._requestDevicePermission(permission_types, description);
	};

	nexacro.System._os == nexacro.OS;
	nexacro.System.computername = nexacro._getComputerName();
	nexacro.System.cpuarchitecture = nexacro._getCPUArchitecture();
	nexacro.System.cpucount = nexacro._getCPUCount();
	nexacro.System.cputype = nexacro._getCPUType();
	nexacro.System.locale = nexacro._getLocale();
	nexacro.System.loginuser = nexacro._getLoginUser();
	nexacro.System.mobileorientation = nexacro._getMobileOrientation();
	nexacro.System.mobilephonenumber = nexacro._getMobilePhoneNumber();
	nexacro.System.mobileproducttype = nexacro._getMobileProductType();
	nexacro.System.mobileuniqueid = nexacro._getMobileUniqueID();
	nexacro.System.monitorcount = nexacro._getMonitorCount();
	nexacro.System.navigatorname = nexacro._getNavigatorName();
	nexacro.System.navigatorversion = nexacro.BrowserVersion;
	nexacro.System.osversion = nexacro._getOSVersion();
	nexacro.System.taskbarsize = nexacro._getTaskbarSize();
	nexacro.System._language = nexacro._getLanguage();
	nexacro.System.notificationtoken = null;
	nexacro.System._accessibilitytype = null;
	nexacro.System._accessibilitystatus = nexacro._getAccessibilityStatus();
	nexacro.System.displayscale = nexacro._getDisplayScale();

	nexacro.System.print = function (comp, defaultprint, valign, halign, fitonepage) {
		nexacro._beforePrintCheckPlugin(comp, comp._refform, defaultprint, valign, halign, fitonepage);
	};


	nexacro.System._setNotificationToken = function (notificationtoken) {
		nexacro.System.notificationtoken = notificationtoken;
	};

	nexacro.System.setAccessibilityType = function (v) {
		nexacro.System._accessibilitytype = v;
	};

	nexacro.System.getAccessibilityType = function () {
		return nexacro.System._accessibilitytype;
	};

	nexacro.System.releaseImage = nexacro._emptyFn;

	nexacro.TimerManager = function (context) {
		this.context = context;
		this.status = 0;
		this.timerList = [];
	};
	var _pTimerManager = nexacro._createPrototype(nexacro.Object, nexacro.TimerManager);
	nexacro.TimerManager.prototype = _pTimerManager;

	_pTimerManager.addTimer = function (timer) {
		var timers = this.timerList;
		var len = timers.length;
		for (var i = 0; i < len; i++) {
			var tmitem = timers[i];
			if (tmitem.id == timer.id) {
				tmitem.destroy();
				timers.splice(i, 1);
				break;
			}
		}
		timers.push(timer);
	};
	_pTimerManager.stopTimer = function (id) {
		var timers = this.timerList;
		var len = timers.length;
		for (var i = 0; i < len; i++) {
			var tmitem = timers[i];
			if (tmitem.id == id) {
				tmitem.stop();
				return true;
			}
		}
		return false;
	};
	_pTimerManager.startTimer = function (id) {
		var timers = this.timerList;
		var len = timers.length;
		for (var i = 0; i < len; i++) {
			var tm = timers[i];
			if (tm.id == id) {
				tm.start();
				return true;
			}
		}
		return false;
	};
	_pTimerManager.deleteTimer = function (id) {
		var timers = this.timerList;
		var len = timers.length;
		for (var i = 0; i < len; i++) {
			var tm = timers[i];
			if (tm.id == id) {
				tm.destroy();
				timers.splice(i, 1);
				return true;
			}
		}
		return false;
	};
	_pTimerManager.deleteTimerItem = function (item) {
		var timers = this.timerList;
		var len = timers.length;
		for (var i = 0; i < len; i++) {
			var tm = timers[i];
			if (tm == item) {
				tm.destroy();
				timers.splice(i, 1);
				return true;
			}
		}
		return false;
	};
	_pTimerManager.clearAll = function () {
		var timers = this.timerList;
		var len = timers.length;
		for (var i = 0; i < len; i++) {
			var tm = timers[i];
			tm.destroy();
		}
		timers.splice(0, len);
	};
	_pTimerManager.destroy = function () {
		this.clearAll();
		this.context = null;
	};
	delete _pTimerManager;


	nexacro._on_bindEventTimerHandler = function (pthis, timerid) {
		return function () {
			var context = pthis;
			if (context && context._is_alive && context.ontimer && context.ontimer._has_handlers) {
				var evt = new nexacro.TimerEventInfo(context, "ontimer", timerid);
				context.ontimer._fireEvent(context, evt);
			}
		};
	};
	nexacro.EventTimer = function (target, id, interval) {
		this.id = id;
		this.context = target._getReferenceContext();
		this.interval = (interval | 0);

		this._handle = null;
		this._ontimer = nexacro._on_bindEventTimerHandler(this.context, id);
		this.context._timerManager.addTimer(this);
	};

	var _pEventTimer = nexacro._createPrototype(nexacro.Object, nexacro.EventTimer);
	nexacro.EventTimer.prototype = _pEventTimer;

	_pEventTimer.setInterval = function (interval) {
		if (this._handle) {
			this.stop();
		}
		this.interval = interval;
	};
	_pEventTimer.start = function () {
		if (this._handle) {
			this.stop();
		}
		this._handle = nexacro._setSystemTimer(this.context._getWindowHandle(), this._ontimer, this.interval);
	};
	_pEventTimer.stop = function () {
		if (this._handle) {
			nexacro._clearSystemTimer(this.context._getWindowHandle(), this._handle);
			this._handle = null;
		}
	};
	_pEventTimer.destroy = function () {
		this.stop();
		this.context = null;
		this._ontimer = null;
	};

	delete _pEventTimer;



	nexacro.DelayTask = function (target, fn, interval) {
		this.context = target._getReferenceContext();
		this._handle = null;
		var handle_window = this.context._getWindowHandle();
		this._call = this.createDelayFunc(fn, interval, target, handle_window, this);
	};
	var _pDelayTask = nexacro._createPrototype(nexacro.Object, nexacro.DelayTask);
	nexacro.DelayTask.prototype = _pDelayTask;

	_pDelayTask.createDelayFunc = function (fn, interval, scope, win_handle, pthis) {
		var lastCallTime, elapsed, lastArgs, execute = function () {
			pthis.stop();
			fn.apply(scope, lastArgs);
			lastCallTime = new Date().getTime();
		};

		return function () {
			lastArgs = arguments;
			elapsed = new Date().getTime() - lastCallTime;
			if (pthis._handle) {
				nexacro._clearSystemTimer(win_handle, pthis._handle);
				pthis._handle = null;
			}
			if (!lastCallTime || (elapsed >= interval)) {
				execute();
			}
			else {
				pthis._handle = nexacro._setSystemTimer(win_handle, execute, interval - elapsed);
			}
		};
	};

	_pDelayTask.run = function () {
		this._call.apply(null, arguments);
	};

	_pDelayTask.stop = function () {
		if (this._handle) {
			nexacro._clearSystemTimer(this.context._getWindowHandle(), this._handle);
			this._handle = null;
		}
	};

	_pDelayTask.destroy = function () {
		this.stop();
		this.context = null;
		this._call = null;
	};

	delete _pDelayTask;

	nexacro._CallbackTimerIdNo = 1000;
	nexacro._on_bindCallbackTimerHandler = function (pthis) {
		return function () {
			var target = pthis.target;
			if (target && target._is_alive) {
				pthis.callback.call(target);
			}
		};
	};
	nexacro.CallbackTimer = function (target, callback, interval) {
		var id = nexacro._CallbackTimerIdNo;
		nexacro._CallbackTimerIdNo++;
		this.id = id;
		this.target = target;
		this.context = target._getReferenceContext();
		this.callback = callback;
		this.interval = (interval | 0);

		this._handle = null;
		this._ontimer = nexacro._on_bindCallbackTimerHandler(this, callback);
		this.context._timerManager.addTimer(this);
	};

	var _pCallbackTimer = nexacro._createPrototype(nexacro.Object, nexacro.CallbackTimer);
	nexacro.CallbackTimer.prototype = _pCallbackTimer;

	_pCallbackTimer.setInterval = function (interval) {
		if (this._handle) {
			this.stop();
		}
		this.interval = interval;
	};
	_pCallbackTimer.start = function () {
		if (this._handle) {
			this.stop();
		}
		this._handle = nexacro._setSystemTimer(this.context._getWindowHandle(), this._ontimer, this.interval);
	};
	_pCallbackTimer.stop = function () {
		if (this._handle) {
			nexacro._clearSystemTimer(this.context._getWindowHandle(), this._handle);
			this._handle = null;
		}
	};
	_pCallbackTimer.destroy = function () {
		this.stop();
		this.target = null;
		this.context = null;
		this._ontimer = null;
	};

	delete _pCallbackTimer;


	nexacro._on_bindOnceCallbackTimerHandler = function (pthis) {
		return function () {
			if (pthis) {
				var target = pthis.target;
				if (target && target._is_alive) {
					pthis.callback.call(target);
				}
				if (pthis.context && pthis.context._timerManager && !pthis.context._timerManager.deleteTimerItem(pthis)) {
					pthis.destroy();
				}
				pthis = null;
			}
		};
	};
	nexacro.OnceCallbackTimer = function (target, callback, interval) {
		var id = nexacro._CallbackTimerIdNo;
		nexacro._CallbackTimerIdNo++;
		this.id = id;
		this.target = target;
		this.context = target._getReferenceContext();
		this.callback = callback;
		this.interval = (interval | 0);

		this._handle = null;
		this._ontimer = nexacro._on_bindOnceCallbackTimerHandler(this);
		this.context._timerManager.addTimer(this);
	};

	var _pOnceCallbackTimer = nexacro._createPrototype(nexacro.Object, nexacro.OnceCallbackTimer);
	nexacro.OnceCallbackTimer.prototype = _pOnceCallbackTimer;


	_pOnceCallbackTimer.setInterval = function (interval) {
		if (this._handle) {
			this.stop();
		}
		this.interval = interval;
	};
	_pOnceCallbackTimer.start = function () {
		if (this._handle) {
			this.stop();
		}
		this._handle = nexacro._setSystemTimer(this.context._getWindowHandle(), this._ontimer, this.interval);
	};
	_pOnceCallbackTimer.stop = function () {
		if (this._handle) {
			nexacro._clearSystemTimer(this.context._getWindowHandle(), this._handle);
			this._handle = null;
		}
	};
	_pOnceCallbackTimer.destroy = function () {
		this.stop();
		this.target = null;
		this.context = null;
		this._ontimer = null;
	};

	nexacro.OnceCallbackTimer.callonce = function (target, callback, interval) {
		var timer = new nexacro.OnceCallbackTimer(target, callback, interval);
		timer.start();
		return timer;
	};

	delete _pOnceCallbackTimer;

	nexacro.AnimationFrame = function (comp, callback) {
		this._comp = comp;
		this._window = comp._getWindow();
		this.callback = callback;
		this._timer_interval = 15;
		this._timer = null;
	};

	var _pAnimationFrame = nexacro._createPrototype(nexacro.Object, nexacro.AnimationFrame);
	nexacro.AnimationFrame.prototype = _pAnimationFrame;


	_pAnimationFrame.start = function () {
		if (nexacro.SupportAnimationFrame) {
			this.id = nexacro._requestAnimationFrame(this._window, this.callback);
		}
		else {
			this._timer = new nexacro.OnceCallbackTimer(this._comp, this.callback, this._timer_interval);
			this._timer.start();
		}
	};

	_pAnimationFrame.stop = function () {
		if (nexacro.SupportAnimationFrame) {
			nexacro._cancelAnimationFrame(this._window, this.id);
		}
		else {
			if (this._timer) {
				this._timer.stop();
			}
		}
	};

	_pAnimationFrame.destroy = function () {
		this.stop();
		this._comp = null;
		this._window = null;
		this.callback = null;
	};

	delete _pAnimationFrame;

	nexacro.LoadItem = function (url, type) {
		this.url = url;
		this.type = type;
		this.errorcode = 0;
		this.module = null;
		this.data = null;
		this.targets = [];

		this._handle = null;
		this._bLoaded = false;
		this._context_callback = null;
		this._requrl = url;
		this._is_cancel = false;
		this._is_process = false;
	};
	var _pLoadItem = nexacro._createPrototype(nexacro.Object, nexacro.LoadItem);
	nexacro.LoadItem.prototype = _pLoadItem;

	_pLoadItem.addTarget = function (target) {
		var targets = this.targets;
		if (nexacro._indexOf(targets, target) < 0) {
			targets.push(target);
			return true;
		}
		return false;
	};
	_pLoadItem.deleteTarget = function (target) {
		var targets = this.targets;
		var idx = nexacro._indexOf(targets, target);
		if (idx >= 0) {
			targets.splice(idx, 1);
			return true;
		}
		return false;
	};
	_pLoadItem.destroy = function () {
		this.targets = null;
		this._handle = null;
		this._context_callback = null;
	};

	delete _pLoadItem;

	nexacro.LoadManager = function (context) {
		this.context = context;
		this.status = 0;
		this.main_url = "";
		this.globalCnt = 0;
		this.globalList = [];
		this.localCnt = 0;
		this.localList = [];
		this.preloadCnt = 0;
		this.preloadList = [];
		this.dataCnt = 0;
		this.dataList = [];
		this.updateList = [];
		this.updateCnt = 0;
		this.childlocalCnt = 0;
		this.transactionList = [];

		this._main_handle = null;
		this._is_mainloaded = false;
	};

	var _pLoadManager = nexacro._createPrototype(nexacro.Object, nexacro.LoadManager);
	nexacro.LoadManager.prototype = _pLoadManager;

	_pLoadManager.getGlobalItem = function (url) {
		var globals = this.globalList;
		var cnt = globals.length;
		for (var i = 0; i < cnt; i++) {
			var item = globals[i];
			if (item.url == url) {
				return item;
			}
		}
		return null;
	};
	_pLoadManager.getLocalItem = function (url) {
		var locals = this.localList;
		var cnt = locals.length;
		for (var i = 0; i < cnt; i++) {
			var item = locals[i];
			if (item.url == url) {
				return item;
			}
		}
		return null;
	};
	_pLoadManager.getDataItem = function (url) {
		var datas = this.dataList;
		var cnt = datas.length;
		for (var i = 0; i < cnt; i++) {
			var item = datas[i];
			if (item.url == url) {
				return item;
			}
		}
		return null;
	};
	_pLoadManager.getUpdateItem = function (url) {
		var updates = this.updateList;
		var cnt = updates.length;
		for (var i = 0; i < cnt; i++) {
			var item = updates[i];
			if (item.url == url) {
				return item;
			}
		}
		return null;
	};
	_pLoadManager.getTransactionItem = function (url) {
		var transactions = this.transactionList;
		var cnt = transactions.length;
		for (var i = 0; i < cnt; i++) {
			var item = transactions[i];
			if (item.path == url) {
				return item;
			}
		}
		return null;
	};
	_pLoadManager.removeTransactionItem = function (url) {
		var transactions = this.transactionList;
		var cnt = transactions.length;
		for (var i = 0; i < cnt; i++) {
			var item = transactions[i];
			if (item.svcid == url) {
				transactions.splice(i, 1);
				break;
			}
		}
	};
	_pLoadManager.removeDataItem = function (url) {
		var datas = this.dataList;
		var cnt = datas.length;
		for (var i = 0; i < cnt; i++) {
			var item = datas[i];
			if (item.url == url) {
				datas.splice(i, 1);
				break;
			}
		}
	};
	_pLoadManager.getPreloadItem = function (type, url) {
		var preloads = this.preloadList;
		var cnt = preloads.length;
		for (var i = 0; i < cnt; i++) {
			var item = preloads[i];
			if (item.type == type && item.url == url) {
				return item;
			}
		}
		return null;
	};

	_pLoadManager.addPreloadItem = function (type, url, target, args, service, async) {
		if (type == "data") {
			var svcid = "__preload_" + ((typeof target) == "string" ? target : target.id);
			this.loadPreloadDataModule(url, target, false, true, svcid, args, service);
		}
		else {
			this.loadPreloadJSModule(url, target, true, async, service);
		}
	};

	_pLoadManager.loadMainModule = function (url, cache, async, reload, service) {
		if (cache == null) {
			cache = false;
		}
		if (async == null) {
			async = true;
		}
		if (reload == null) {
			reload = false;
		}

		if (reload == true || this.main_url != url) {
			if (this._main_handle) {
				var _handle = this._main_handle;
				nexacro._cancelLoad(_handle);


				if (_handle.async && nexacro._CommunicationManager[_handle.path]) {
					delete nexacro._CommunicationManager[_handle.path];
				}
				_handle = null;
				this._main_handle = null;
			}
			this.main_url = url;
			this.status = 1;

			var parent_context = (this.context) ? this.context.getParentContext() : null;
			var ret = 0;
			while (parent_context) {
				ret = parent_context._load_manager.getPreloadJSModule(url, this.context);
				if (ret == 0) {
					parent_context = parent_context.getParentContext();
				}
				else {
					break;
				}
			}

			if (ret == 0) {
				this._main_handle = nexacro._loadJSModule(url, this, this.on_load_main, cache, service, async);
			}
			else {
				return ret;
			}
		}
	};

	_pLoadManager.loadGlobalModule = function (url, async, service) {
		if (async == null) {
			async = true;
		}
		if (this.status < 7) {
			var load_item = this.getGlobalItem(url);
			if (!load_item) {
				load_item = new nexacro.LoadItem(url, "globalmodule", null);
				this.globalList.push(load_item);
				this.globalCnt++;
				load_item._handle = nexacro._loadJSText(url, this, this.on_load_globalmodule, service, async);
			}
		}
	};

	_pLoadManager.loadUpdateModule = function (url, type, targetpath, ref, ver, failpass, service) {
		if (this.status < 7) {
			var load_item = this.getUpdateItem(url);
			if (!load_item) {
				load_item = new nexacro.LoadItem(url, type, null);
				load_item._targetpath = targetpath;
				load_item._ref = ref;
				load_item._ver = ver;
				load_item._failpass = failpass;
				this.updateList.push(load_item);
				this.updateCnt++;
				load_item._handle = nexacro._loadUpdateModule(url, this, this.on_load_updatemodule, service, true, type, targetpath, ref, ver, failpass);
			}
		}
	};

	_pLoadManager.loadIncludeModule = function (url, cache, async, service) {
		if (cache == null) {
			cache = true;
		}
		if (async == null) {
			async = true;
		}

		if (this.status < 7) {
			var load_item = this.getLocalItem(url);
			if (!load_item) {
				load_item = new nexacro.LoadItem(url, "include", this.context);
				this.localList.push(load_item);

				this.localCnt++;
				load_item._handle = nexacro._loadJSModule(url, this, this.on_load_localmodule, cache, service, async);

				if (!load_item._bLoaded) {
					var parent_context = this.context.getParentContext();
					while (parent_context && parent_context._load_manager.status != 7) {
						parent_context._load_manager.childlocalCnt++;
						parent_context._load_manager.preloadCnt++;

						parent_context = parent_context.getParentContext();
					}
				}
			}
		}
	};

	_pLoadManager.loadCssModule = function (url, cache, async, service) {
		if (cache == null) {
			cache = true;
		}
		if (async == null) {
			async = true;
		}

		if (this.status < 7) {
			var load_item = this.getLocalItem(url);
			if (!load_item) {
				load_item = new nexacro.LoadItem(url, "css", this.context);
				this.localList.push(load_item);

				this.localCnt++;

				load_item._handle = nexacro._loadJSModule(url, this, this.on_load_localmodule, cache, service, async);
			}
		}
	};

	_pLoadManager.loadPreloadJSModule = function (url, target, cache, async, service) {
		if (cache == null) {
			cache = false;
		}
		if (async == null) {
			async = true;
		}

		var increase = false;
		if (this.status < 6) {
			var load_item = this.getPreloadItem("fdl", url);
			if (load_item && target) {
				if (load_item.addTarget(target) && !load_item._bLoaded) {
					this.preloadCnt++;
					var parent_context = this.context.getParentContext();
					while (parent_context) {
						if (!parent_context._is_created) {
							parent_context._load_manager.preloadCnt++;
						}
						parent_context = parent_context.getParentContext();
					}
					increase = true;
				}
			}
			else {
				load_item = new nexacro.LoadItem(url, "fdl");

				if (target && load_item.addTarget(target)) {
					this.preloadCnt++;
					var parent_context = this.context.getParentContext();
					while (parent_context) {
						if (!parent_context._is_created) {
							parent_context._load_manager.preloadCnt++;
						}
						parent_context = parent_context.getParentContext();
					}
					increase = true;
					this.preloadList.push(load_item);
					load_item._handle = nexacro._loadJSModule(url, this, this.on_load_preloadjsmodule, cache, service, async);
				}
			}
		}
	};
	_pLoadManager.loadPreloadDataModule = function (url, target, cache, async, svcid, args, service) {
		if (nexacro.isDesignMode) {
			return;
		}

		var increase = false;
		if (this.status < 6) {
			var load_item = this.getPreloadItem("data", svcid);
			if (load_item && target) {
				if (load_item.addTarget(target)) {
				}
				{

					this.preloadCnt++;
					increase = true;
				}
			}
			else {
				var referer = "";
				if (this.context) {
					referer = this.context._url;
				}

				load_item = new nexacro.LoadItem(svcid, "data");
				load_item._requrl = url;

				if (target && load_item.addTarget(target)) {
				}
				{

					this.preloadCnt++;
					increase = true;

					this.preloadList.push(load_item);
					load_item._handle = nexacro._preloadData(url, this, this.on_load_preloaddatamodule, service, svcid, referer, args, true, 0, false);
				}
			}
		}
	};

	_pLoadManager.loadDataModule = function (url, svcid, indatasets, outdatasets, parameters, callback, async, datatype, compress, service, isbulk) {
		if (async == null) {
			async = true;
		}
		var load_item = this.getDataItem(svcid);
		if (!load_item) {
			load_item = new nexacro.LoadItem(svcid, "data", this.context);
			load_item._requrl = url;

			this.dataList.push(load_item);
			this.dataCnt++;
			load_item._context_callback = callback;
			load_item._handle = nexacro._loadData(url, this, this.on_load_datamodule, service, this.context, svcid, indatasets, outdatasets, parameters, async, datatype, compress, isbulk);
		}
		else {
			application._onHttpSystemError(this.context, true, this.context, "comm_fail_duplication_svcid", svcid, 499, url, null, nexacro.Communication_Error.DUPLICATIONSVCID);
		}
	};

	_pLoadManager.reloadCssModule = function (url, cache, async, service) {
		var local_Item = new nexacro.LoadItem(url, "css", this.context);
		this.localList.push(local_Item);

		if (this.status < 7) {
			local_Item._handle = nexacro._loadJSModule(url, this, this.on_load_localmodule, true, service, true);
		}
		else {
			local_Item._handle = nexacro._loadJSModule(url, this, this.on_reload_css, true, service, async);
		}
	};

	_pLoadManager.on_load_main = function (url, errstatus, module, fireerrorcode, returncode, requesturi, locationuri, reason) {
		if (url == this.main_url) {
			this.status = 2;
			this._main_handle = null;
			this._is_mainloaded = false;
			if (errstatus == 0 && module && typeof (module) == "function") {
				if (module.bcache) {
					var refs = module.refs | 0;
					module.refs = ++refs;
				}

				if (this.context.async === false) {
					this.context._addPreloadList = nexacro._emptyFn;
				}

				module.call(this.context);
				if (this.context && this.context != application && this.context.parent && this.context.parent._is_frame) {
					var child_frame = this.context.parent;
					child_frame._is_loadform_failed = false;
				}
			}
			else {
				if (this.context == application) {
					application._onHttpSystemError(this.context, true, this.context, "comm_fail_loadinvalidurl", url, returncode, requesturi, locationuri, nexacro.Communication_Error.INVALIDURL);
					return;
				}
				else {
					if (this.context && this.context.parent && this.context.parent._is_frame) {
						var child_frame = this.context.parent;
						child_frame._on_loadform_failed();
					}
					application._onHttpSystemError(this.context, true, this.context, fireerrorcode, url, returncode, requesturi, locationuri, reason);
				}
			}

			if (returncode != "404") {
				if (returncode != -1) {
					this._is_mainloaded = true;
					this._check_fire_oninit();
				}
			}
		}
	};

	_pLoadManager.on_load_globalmodule = function (url, errstatus, jstext, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getGlobalItem(url);
		if (load_Item) {
			load_Item._handle = null;
			if (errstatus == 0) {
				if (jstext != "") {
					load_Item.data = jstext;
				}
			}
			else {
				load_Item.errcode = errstatus;
				application._onHttpSystemError(this.context, true, this.context, fireerrorcode, url, returncode, requesturi, locationuri, reason);
			}
			this.globalCnt--;
			this._check_fire_oninit();
		}
	};
	_pLoadManager.on_load_updatemodule = function (url, errstatus, binarymodule, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getUpdateItem(url);
		if (load_Item) {
			load_Item._handle = null;

			if (errstatus != 0) {
				load_Item.errcode = errstatus;
				application._onHttpSystemError(this.context, true, this.context, fireerrorcode, url, returncode, requesturi, locationuri, reason);
			}
			this.updateCnt--;
			this._check_fire_oninit();
		}
	};

	_pLoadManager.on_load_localmodule = function (url, errstatus, module, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getLocalItem(url);
		if (load_Item) {
			var _handle = load_Item._handle;
			load_Item._handle = null;
			if (errstatus == 0 && module && typeof (module) == "function") {
				if (load_Item.type == "include") {
					load_Item._bLoaded = true;

					if (module.bcache) {
						var refs = module.refs | 0;
						module.refs = ++refs;
					}
					module.call(this.context, load_Item.url);
					load_Item.module = null;
				}
				else {
					load_Item.module = module;
				}
			}
			else {
				load_Item.errcode = errstatus;
				application._onHttpSystemError(this.context, true, this.context, fireerrorcode, url, returncode, requesturi, locationuri, reason);
			}

			this.localCnt--;
			this._check_fire_oninit();

			var parent_context = (this.context) ? this.context.getParentContext() : null;
			while (parent_context && parent_context._load_manager.childlocalCnt > 0) {
				parent_context._load_manager.childlocalCnt--;
				parent_context._load_manager.preloadCnt--;
				parent_context._load_manager._check_fire_onload();

				parent_context = parent_context.getParentContext();
			}
			return;
		}
	};

	_pLoadManager.on_load_preloadjsmodule = function (url, errstatus, module, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getPreloadItem("fdl", url);
		if (load_Item) {
			load_Item.errcode = errstatus;
			load_Item.module = module;
			load_Item._handle = null;
			load_Item._bLoaded = true;
			var targets = load_Item.targets;
			var target_len = targets.length;
			if (target_len > 0) {
				for (var i = 0; i < target_len; i++) {
					if (this.context.components) {
						var target = targets[i];
						if ((typeof target) == "string") {
							target = this.context.components[target];
						}
						if (target) {
							target._load_manager.on_load_main(url, errstatus, module, fireerrorcode, returncode, requesturi, locationuri, reason);
						}
					}
				}

				targets.splice(0, target_len);
				this.preloadCnt -= target_len;

				this._check_fire_onload();
				if (this.context) {
					var parent_context = this.context.getParentContext();
					while (parent_context && parent_context._load_manager.preloadCnt > 0) {
						parent_context._load_manager.preloadCnt -= target_len;
						parent_context._load_manager._check_fire_onload();
						parent_context = parent_context.getParentContext();
					}
				}
			}
		}
	};

	_pLoadManager.on_load_preloaddatamodule = function (url, errstatus, data, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getPreloadItem("data", url);
		if (load_Item) {
			load_Item.errcode = errstatus;
			load_Item.data = data;
			load_Item._handle = null;
			load_Item._bLoaded = true;
			var targets = load_Item.targets;
			var target_len = targets.length;

			if (target_len > 0) {
				for (var i = 0; i < target_len; i++) {
					if (this.context.all) {
						var target = targets[i];
						if ((typeof target) == "string") {
							target = this.context.all[target];
						}
						if (target && target.on_preload_data) {
							target.on_preload_data(load_Item._requrl, errstatus, data, fireerrorcode, returncode, requesturi, locationuri, reason);
						}
					}
				}

				targets.splice(0, target_len);
				this.preloadCnt -= target_len;
			}
			this._check_fire_onload();
		}
	};

	_pLoadManager.on_load_datamodule = function (svcid, errstatus, message, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getDataItem(svcid);
		if (load_Item) {
			var callback_id = load_Item._context_callback;
			var callback_func = this.context[callback_id];

			var ret = false;
			if (errstatus < 0 && fireerrorcode) {
				load_Item.errcode = errstatus;
				if (fireerrorcode != "comm_cancel_byuser" || fireerrorcode != "comm_stop_transaction_byesc" || 
					load_Item._is_cancel || !load_Item._handle || (load_Item._handle && !load_Item._handle._user_aborted && load_Item._handle._user_aborted !== undefined)) {
					ret = application._onHttpSystemError(this.context, true, this.context, fireerrorcode, requesturi, returncode, requesturi, locationuri, reason);
					if (fireerrorcode != "comm_cancel_byuser" && fireerrorcode != "comm_stop_transaction_byesc") {
						ret = false;
					}
					if (ret) {
						return true;
					}
				}
			}

			if (fireerrorcode == "comm_cancel_byuser" || fireerrorcode == "comm_stop_transaction_byesc") {
				if (ret && load_Item._handle && !load_Item._handle._user_aborted && load_Item._handle._user_aborted !== undefined) {
					return ret;
				}
				if (load_Item._is_cancel !== undefined && !load_Item._is_cancel) {
					return ret;
				}
			}

			this.removeDataItem(svcid);
			this.removeTransactionItem(svcid);
			this.dataCnt--;

			if (callback_func && typeof (callback_func) == "function") {
				try {
					callback_func.call(this.context, svcid, errstatus, message);
					if (errstatus == 0) {
						load_Item._handle = null;
					}
				}
				catch (e) {
					if (e.obj) {
						application._onSystemError(e.obj, e.name, e.message);
					}
					else {
						var msg = nexacro._getExceptionMessage(e);
						application._onSystemError(application, e.name, msg);
					}
				}
			}

			return ret;
		}
	};

	_pLoadManager.on_reload_css = function (url, errstatus, module, fireerrorcode, returncode, requesturi, locationuri, reason) {
		var load_Item = this.getLocalItem(url);
		if (load_Item) {
			var _handle = load_Item._handle;
			load_Item._handle = null;
			if (errstatus == 0 && module && typeof (module) == "function") {
				load_Item._bLoaded = true;

				if (module.bcache) {
					var refs = module.refs | 0;
					module.refs = ++refs;
				}
				module.call(this.context, load_Item.url);
				load_Item.module = null;
			}
			else {
				load_Item.errcode = errstatus;
				application._onHttpSystemError(this.context, true, this.context, fireerrorcode, url, returncode, requesturi, locationuri, reason);
			}

			return;
		}
	};

	_pLoadManager.getPreloadJSModule = function (url, child) {
		var load_Item = this.getPreloadItem("fdl", url);
		if (load_Item) {
			if (load_Item._bLoaded) {
				child._load_manager.on_load_main(url, load_Item.errcode, load_Item.module);
				return 2;
			}
			else {
				if (load_Item.addTarget(child)) {
					this.preloadCnt++;
					var parent_context = this.context.getParentContext();
					while (parent_context && parent_context._load_manager.status < 6) {
						parent_context._load_manager.preloadCnt++;
						parent_context = parent_context.getParentContext();
					}
				}
				return 1;
			}
		}
		return 0;
	};
	_pLoadManager.getPreloadDataModule = function (id) {
		var svcid = "__preload_" + id;
		var load_Item = this.getPreloadItem("data", svcid);
		if (load_Item && load_Item._bLoaded) {
			return load_Item.data;
		}
	};

	_pLoadManager.on_child_load_completed = function (url, child) {
		var load_Item = this.getPreloadItem("fdl", url);
		if (load_Item) {
			if (preloads.deleteTarget(child)) {
				this.preloadCnt--;
				this.context._check_fire_onload();
			}
		}
	};

	_pLoadManager._check_fire_oninit = function () {
		if (this.status < 2 || !this._is_mainloaded) {
			return false;
		}

		if (this.status == 2) {
			if (this.updateCnt > 0) {
				return false;
			}
			else {
				var cnt = this.updateList.length;
				for (var i = 0; i < cnt; i++) {
					var item = this.updateList[i];
					if (item._bLoaded == false) {
						item._bLoaded = true;
						if (item.errorcode >= 0) {
							nexacro._completedUpdateResource(item.data, item.url, item._type, item._targetpath, item._ref, item._failpass, i, cnt);
							item.data = null;
						}
					}
				}
				this.status = 3;
			}
		}

		if (this.status == 3) {
			if (this.globalCnt > 0) {
				return false;
			}
			else {
				var cnt = this.globalList.length;
				for (var i = 0; i < cnt; i++) {
					var item = this.globalList[i];
					if (item._bLoaded == false) {
						item._bLoaded = true;
						if (item.errorcode >= 0) {
							nexacro._executeScript(item.data, item.url);
							item.data = null;
						}
					}
				}
				this.status = 4;
			}
		}

		if (this.status == 4) {
			if (this.localCnt > 0) {
				return false;
			}
			else {
				var cnt = this.localList.length;
				for (var i = 0; i < cnt; i++) {
					var item = this.localList[i];
					if (item._bLoaded == false) {
						item._bLoaded = true;
						if (item.errorcode >= 0) {
							if (item.type != "include" && item.module) {
								if (item.module.bcache) {
									var refs = item.module.refs | 0;
									item.module.refs = ++refs;
								}
								item.module.call(this.context);
							}

							item.module = null;
						}
					}
				}
				this.status = 5;
			}
		}


		if (this.status == 5 && this.context) {
			this.context._on_init();
			this._check_fire_onload();
		}
	};

	_pLoadManager._check_fire_onload = function () {
		if (this.status < 5 || !this._is_mainloaded) {
			return;
		}

		if (this.status == 5) {
			if (this.preloadCnt > 0) {
				return false;
			}
			else {
				this.status = 6;
			}
		}

		if (this.status == 6) {
			if (this.childlocalCnt > 0) {
				return false;
			}
			else {
				this.status = 7;
			}
		}

		if (this.status == 7 && this.context) {
			var context = this.context;
			if (!context.parent || !context.parent._is_component) {
				context._on_load(context, this.main_url);
			}
			else {
				if (!context.parent._is_frame || context.parent._is_created) {
					context._on_load(context, this.main_url);
				}
			}

			this.clearPreload("data");
		}
	};

	_pLoadManager.clearAllLoad = function () {
		if (this._main_handle) {
			var _handle = this._main_handle;
			nexacro._cancelLoad(_handle);


			if (_handle.async && nexacro._CommunicationManager[_handle.path]) {
				delete nexacro._CommunicationManager[_handle.path];
			}
			_handle = null;
			this._main_handle = null;
		}



		this._is_mainloaded = false;

		var updates = this.updateList;
		var ucnt = updates.length;
		for (var i = 0; i < ucnt; i++) {
			var updateitem = updates[i];
			if (updateitem._handle) {
				nexacro._cancelLoad(updateitem._handle);
			}
			updateitem.destroy();
		}
		updates.splice(0, ucnt);

		var globals = this.globalList;
		var gcnt = globals.length;
		for (var i = 0; i < gcnt; i++) {
			var globalitem = globals[i];
			if (globalitem._handle) {
				nexacro._cancelLoad(globalitem._handle);
			}
			globalitem.destroy();
		}
		globals.splice(0, gcnt);

		var locals = this.localList;
		var lcnt = locals.length;
		for (var i = 0; i < lcnt; i++) {
			var localitem = locals[i];
			if (localitem._handle) {
				nexacro._cancelLoad(localitem._handle);
			}

			localitem.destroy();
		}
		locals.splice(0, lcnt);

		var preloads = this.preloadList;
		var pcnt = preloads.length;
		for (var i = 0; i < pcnt; i++) {
			var preloaditem = preloads[i];
			if (preloaditem._handle) {
				nexacro._cancelLoad(preloaditem._handle);
			}
			preloaditem.destroy();
		}
		preloads.splice(0, pcnt);

		var datas = this.dataList;
		var dcnt = datas.length;
		for (var i = 0; i < dcnt; i++) {
			var dataitem = datas[i];
			if (dataitem._handle) {
				nexacro._cancelLoad(dataitem._handle);
			}
			dataitem.destroy();
		}
		datas.splice(0, dcnt);

		var trs = this.transactionList;
		if (trs) {
			trs.splice(0, trs.length);
		}
	};

	_pLoadManager.clearPreload = function (type) {
		var preloads = this.preloadList;
		var pcnt = preloads.length;
		for (var i = pcnt - 1; i > 0; i--) {
			var preloaditem = preloads[i];
			if (preloaditem._handle && (!type || type == preloaditem.type)) {
				nexacro._cancelLoad(preloaditem._handle);
				if (type) {
					preloads.splice(i, 1);
				}
				preloaditem.destroy();
			}
		}

		if (!type) {
			preloads.splice(0, pcnt);
		}
	};

	_pLoadManager.destroy = function () {
		this.clearAllLoad();
		this.context = null;
	};


	delete _pLoadManager;


	nexacro.ServiceItem = function (prefixid, type, url, cachelevel, codepage, language, version, communicationversion) {
		this.prefixid = prefixid;
		this.type = type;
		this.url = url;
		this.cachelevel = cachelevel;
		this.codepage = codepage;
		this.language = language;
		this.version = version;

		if (nexacro.Browser == "Runtime") {
			if (version
				 && version != "0"
				 && this.version == "0") {
				this.version = version;
			}
		}

		this.communicationversion = communicationversion;
	};
	var _pServiceItem = nexacro._createPrototype(nexacro.Object, nexacro.ServiceItem);
	nexacro.ServiceItem.prototype = _pServiceItem;

	_pServiceItem.set_cachelevel = function (v) {
		if (v == "none" || v == "static" || v == "session" || v == "dynamic") {
			this.cachelevel = v;
		}
	};

	_pServiceItem.set_version = function (v) {
		if (this.version != v) {
			this.version = v;
		}
	};

	_pServiceItem.set_url = function (v) {
		if (this.url != v) {
			this.url = v;
		}
	};

	_pServiceItem.set_codepage = function (v) {
		if (this.codepage != v) {
			this.codepage = v;
		}
	};

	_pServiceItem.set_language = function (v) {
		if (this.language != v) {
			this.language = v;
		}
	};

	delete _pServiceItem;

	nexacro.ComponentItem = function (name, type, classname, moduleurl, version) {
		this.name = name;
		this.type = type;
		this.classname = classname;
		this.moduleurl = moduleurl;
		this.version = version | "0.0";
	};
	var _pComponentItem = nexacro._createPrototype(nexacro.Object, nexacro.ComponentItem);
	nexacro.ComponentItem.prototype = _pComponentItem;

	delete _pComponentItem;

	nexacro.UpdateItem = function (type, moduleurl, targetpath, ref, version, desc, failpass) {
		this.type = type;
		this.file = moduleurl;
		this.targetpath = targetpath;
		this.ref = ref;
		this.version = version;
		this.desc = desc;
		this.failpass = failpass;
	};
	var _pUpdateItem = nexacro._createPrototype(nexacro.Object, nexacro.UpdateItem);
	nexacro.UpdateItem.prototype = _pUpdateItem;

	delete _pUpdateItem;

	nexacro.TypeDefinition = function (url, component_uri, parent) {
		this.name = url;
		this._component_uri = component_uri;
		this.context = parent;
		this.services = new nexacro.Collection();
	};

	var _pTypeDefinition = nexacro._createPrototype(nexacro.Object, nexacro.TypeDefinition);
	nexacro.TypeDefinition.prototype = _pTypeDefinition;

	_pTypeDefinition.addService = function (prefixid, type, url, cachelevel, codepage, language, version, communication) {
		var serviceitem = new nexacro.ServiceItem(prefixid, type, url, cachelevel, codepage, language, version, communication);
		this.services.add(prefixid, serviceitem);
	};

	_pTypeDefinition.getService = function (prefixid) {
		return this.services[prefixid];
	};

	_pTypeDefinition.getServiceUrl = function (url) {
		var prefixpos = url.indexOf("::");
		if (prefixpos > 0) {
			var prefix = url.substring(0, prefixpos);
			var url2 = url.substring(prefixpos + 2);

			var service = this.services[prefix];
			if (service) {
				return service.url + url2;
			}
		}
		return url;
	};


	delete _pTypeDefinition;



	nexacro.Layout = function (name, screenid, w, h, obj, changefn) {
		this.name = name;
		this.screenid = screenid;
		this.width = w;
		this.height = h;
		this._form = obj;
		this.change_fn = changefn;
		this.stepcount = 0;
		this.stepindex = 0;
	};

	var _pLayout = nexacro._createPrototype(nexacro.Object, nexacro.Layout);
	nexacro.Layout.prototype = _pLayout;
	_pLayout._type_name = "Layout";

	_pLayout.destroy = function () {
		this.name = "";
		this.screenid = "";
		this.description = "";
		this.context = null;
		this.width = 0;
		this.height = 0;
		this._form = null;
		this.change_fn = null;
		this.stepcount = 0;
		this.stepindex = 0;
	};

	_pLayout.set_name = function (v) {
		this.name = v;
	};

	_pLayout.set_screenid = function (v) {
		this.screenid = v;
	};

	_pLayout.set_description = function (v) {
		this.description = v;
	};

	_pLayout.set_width = function (v) {
		this.width = v;
	};

	_pLayout.set_height = function (v) {
		this.height = v;
	};

	_pLayout.set_stepcount = function (v) {
		v = parseInt(v) | 0;
		if (v !== this.stepcount) {
			if (v == "" || (+v) != (+v)) {
				v = 0;
			}
			this.stepcount = v;
		}
	};

	_pLayout.set_stepindex = function (v) {
		v = parseInt(v) | 0;
		if (v != this.stepindex && v < this.stepcount) {
			this.stepindex = v;
		}
	};

	delete _pLayout;


	nexacro.TouchManager = function () {
		this._currentTouches = new nexacro.Collection;
		this._fling_list = new nexacro.Collection;

		this.on_fire_ontouch = this._set_on_fire_ontouch_event_handler();
	};

	var _pTouchManager = nexacro.TouchManager.prototype;

	_pTouchManager._tap_timer = null;
	_pTouchManager._dbltap_timer = null;
	_pTouchManager._hold_timer = null;
	_pTouchManager._fling_timer = null;

	_pTouchManager.hold_threshold = 1000;
	_pTouchManager.tap_threshold = 800;
	_pTouchManager.dbltap_threshold = 800;

	_pTouchManager.tap_bound = 5;
	_pTouchManager.dbltap_bound = 30;
	_pTouchManager.unintendedmove_threshold = 6;
	_pTouchManager.pinch_threshold = 6;
	_pTouchManager.slide_threshold = 9;
	_pTouchManager.slideangle_threshold = 10;
	_pTouchManager.fling_threshold = 100;

	_pTouchManager._current_time = -1;
	_pTouchManager._old_time = -1;
	_pTouchManager._start_win = null;
	_pTouchManager._start_elem = null;
	_pTouchManager._start_elem_status = "";
	_pTouchManager._start_elem_pseudo = "";
	_pTouchManager._start_point = null;
	_pTouchManager._first_tap_elem = null;
	_pTouchManager._first_tap_point = null;
	_pTouchManager._is_first_tap = true;
	_pTouchManager._center_point = null;
	_pTouchManager._first_pinch_range = undefined;
	_pTouchManager._is_longpressed = false;

	_pTouchManager._currentTouches = null;
	_pTouchManager._current_gesture = undefined;
	_pTouchManager._tap_blocked = false;
	_pTouchManager._slide_blocked = false;
	_pTouchManager._pinch_blocked = false;
	_pTouchManager._fling_blocked = false;

	_pTouchManager._slide_event_blocked = false;
	_pTouchManager._fired_slidestart = false;

	_pTouchManager._slide_history = [];
	_pTouchManager._slide_touchlen = 0;
	if ((nexacro._isMobile && nexacro._isMobile()) && (nexacro._isHybrid && nexacro._isHybrid()) && nexacro.OS == "iOS") {
		_pTouchManager._fling_minimum_speed = 0.6;
		_pTouchManager._fling_threshold = 40;
	}
	else {
		_pTouchManager._fling_minimum_speed = 0.15;
		_pTouchManager._fling_threshold = 5;
	}
	_pTouchManager._fling_friction = 0.998;

	_pTouchManager._fling_list = null;
	_pTouchManager._fling_uid = 0;

	_pTouchManager._scroll_comp = null;
	_pTouchManager._scroll_mode = -1;
	_pTouchManager._scroll_end = false;
	_pTouchManager._scroll_direction = 0;
	_pTouchManager._scroll_body = false;

	_pTouchManager._allow_default = false;
	_pTouchManager._slide_lock_horz = false;
	_pTouchManager._slide_lock_vert = false;



	_pTouchManager._set_on_fire_ontouch_event_handler = function () {
		if (nexacro.OS == "Windows" && nexacro.Browser == "Runtime") {
			return this._on_windows_fire_ontouch;
		}

		return this._on_default_fire_ontouch;
	};


	_pTouchManager.ontouchstart = function (win, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch, first_touchid) {
		if (first_touchid != undefined && this._currentTouches.length > 0) {
			var cur_touches = this._currentTouches;
			if (cur_touches[0].touchid != ("_" + first_touchid)) {
				for (var i = 0, n = cur_touches.length; i < n; i++) {
					var cur_touch = cur_touches[i];
					if (cur_touch) {
						var comp = null;
						var _touch_elem = cur_touch._elem;
						if (_touch_elem) {
							comp = win.findComponent(_touch_elem);
						}
						if (!(comp && comp._is_alive)) {
							var tid = cur_touch.touchid.slice(1);
							this.ontouchcancel(null, null, tid);
						}
					}
				}
			}
		}

		if (win._is_dbltap) {
			win._is_dbltap = false;
		}
		if (this._old_time != curtime) {
			this._old_time = this._current_time;
		}
		this._current_time = curtime;
		touchid = "_" + String(touchid);

		var x = clientX;
		var y = clientY;
		var is_first = (!this._currentTouches || this._currentTouches.length == 0 || (this._currentTouches.length == 1 && !!this._currentTouches.get_item(touchid)));
		if (is_first) {
			this._start_win = win;
			this._start_elem = elem;
			this._start_point = nexacro.Point.fromEvent(x, y);
			this._start_point.screenX = screenX;
			this._start_point.screenY = screenY;
			this._fling_blocked = false;
		}

		var touchinfo = new nexacro.TouchInputInfo(elem, "touchstart", touchid, curtime, is_first, screenX, screenY, x, y);
		this._currentTouches.add_item(touchid, touchinfo);

		if (is_first) {
			win._curWindowX = clientX;
			win._curWindowY = clientY;
		}

		if (is_last_changedtouch) {
			this.on_fire_ontouch(0);
		}

		if (is_first) {
			var fling_list = this._fling_list;
			for (var i = 0, n = fling_list.length; i < n; i++) {
				var fling_handler = fling_list[i];
				fling_handler.stop();
			}
		}

		if (is_first) {
			if (!this._tap_timer) {
				this._tap_timer = new nexacro.TouchTimer(win, this._on_tap_timer, this, this.tap_threshold);
			}
			else {
				this._tap_timer.start(this.tap_threshold);
			}

			if (!this._dbltap_timer) {
				this._dbltap_timer = new nexacro.TouchTimer(win, this._on_dbltap_timer, this, this.dbltap_threshold);
			}
			else {
				if (!this._dbltap_timer.isWait()) {
					this._is_first_tap = true;
					this._dbltap_timer.start(this.dbltap_threshold);
				}
				else {
					this._is_first_tap = false;
				}
			}


			if (nexacro.OS == "iOS" && elem instanceof nexacro.InputElement && elem._is_focused) {
				var hold_threshold = 600;
			}
			else {
				var hold_threshold = this.hold_threshold;
			}

			if (!this._hold_timer) {
				this._hold_timer = new nexacro.TouchTimer(win, this._on_hold_timer, this, hold_threshold);
			}
			else {
				this._hold_timer.start(hold_threshold);
			}

			if (!this.checkAvailableScrollableComp(elem)) {
				this._scroll_body = true;
			}
		}
		else {
			if (this._hold_timer && this._hold_timer.isWait()) {
				this._hold_timer.stop();
			}
			if (this._tap_timer && this._tap_timer.isWait()) {
				this._tap_timer.stop();
			}
			if (this._dbltap_timer && this._dbltap_timer.isWait()) {
				this._dbltap_timer.stop();
			}

			var touchlen = this._currentTouches.length;
			if (touchlen == 2) {
				var firsttouchinfo = this._currentTouches[0];
				this._center_point = new nexacro.Point((firsttouchinfo._x + x) / 2, (firsttouchinfo._y + y) / 2);

				if (nexacro._allow_default_pinchzoom) {
					this._allow_default = true;


					this._slide_blocked = true;
					this._pinch_blocked = true;
					this._fling_blocked = true;
					this._scroll_body = false;
				}
			}

			if (this._current_gesture == "slide") {
				this._current_gesture = "none";
				this._slide_blocked = true;
			}
		}

		var c = win.findComponent(this._start_elem);
		if (c) {
			if (c._is_subcontrol) {
				c = c.parent;
			}

			this._start_elem_status = c._status;
			this._start_elem_pseudo = c._pseudo;
		}

		if (is_last_changedtouch) {
			if (this.checkInputPreventDefault(elem, this._currentTouches.length == 1, 0)) {
				return false;
			}
		}

		if (this._scroll_end == true || this._allow_default) {
			return false;
		}

		return true;
	};

	_pTouchManager.checkValidScrollEnd = function (info) {
		var elem = this._start_elem;
		var compinfo = this._start_win.findComponent(elem, 0, 0);
		if (!compinfo || !compinfo[0]) {
			return;
		}
		var comp = compinfo[0];
		var dir = this._scroll_direction;
		var s;
		var sh, sv;
		var slideinfo = info;

		if (slideinfo) {
			if (Math.abs(slideinfo.xdelta) >= this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) < this.unintendedmove_threshold) {
				if (slideinfo.xdelta < 0) {
					dir = 10;
				}
				else {
					dir = -10;
				}
			}
			else if (Math.abs(slideinfo.xdelta) < this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) >= this.unintendedmove_threshold) {
				if (slideinfo.ydelta < 0) {
					dir = 1;
				}
				else {
					dir = -1;
				}
			}
			else {
				dir = this._scroll_direction;
			}
		}

		while (comp && !comp._is_application) {
			switch (dir) {
				case -10:
					s = comp.hscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "vert")) {
						if (s.pos > 0) {
							return false;
						}
					}
					break;
				case 10:
					s = comp.hscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "vert")) {
						if (s.pos < s.max) {
							return false;
						}
					}
					break;
				case -1:
					s = comp.vscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "horz")) {
						if (s.pos > 0) {
							return false;
						}
					}
					break;
				case 1:
					s = comp.vscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "horz")) {
						if (s.pos < s.max) {
							return false;
						}
					}
					break;
				case 0:
					sh = comp.hscrollbar;
					sv = comp.vscrollbar;
					if (slideinfo) {
						var slideinfo = info;
						if (Math.abs(slideinfo.xdelta) > this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) > this.unintendedmove_threshold) {
							return false;
						}
						else if (Math.abs(slideinfo.xdelta) >= this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) < this.unintendedmove_threshold) {
							if (sh && sh.min != sh.max) {
								if (slideinfo.xdelta > 0 && sh.pos > 0 || slideinfo.xdelta < 0 && sh.pos < sh.max) {
									return false;
								}
								if (slideinfo.xdelta > 0 && sh.pos == 0 || slideinfo.xdelta < 0 && sh.pos == sh.max) {
									return true;
								}
							}
						}
						else if (Math.abs(slideinfo.xdelta) < this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) >= this.unintendedmove_threshold) {
							if (sv && sv.min != sv.max) {
								if (slideinfo.ydelta > 0 && sv.pos == 0 || slideinfo.ydelta < 0 && sv.pos == sv.max) {
									return true;
								}
								else if (slideinfo.ydelta > 0 && sv.pos > 0 || slideinfo.ydelta < 0 && sv.pos < sv.max) {
									return false;
								}
							}
						}
					}
					break;
			}

			comp = comp.parent;
		}

		return;
	};

	_pTouchManager._is_ScrollEnd = function (info) {
		var elem = this._start_elem;
		var compinfo = this._start_win.findComponent(elem, 0, 0);
		if (!compinfo || !compinfo[0]) {
			return;
		}
		var comp = compinfo[0];
		var dir = this._scroll_direction;
		var s;
		var sh, sv;
		while (comp && !comp._is_application) {
			switch (dir) {
				case -10:
					s = comp.hscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "vert")) {
						if (s.pos == 0) {
							return true;
						}
					}
					break;
				case 10:
					s = comp.hscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "vert")) {
						if (s.pos == s.max) {
							return true;
						}
					}
					break;
				case -1:
					s = comp.vscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "horz")) {
						if (s.pos == 0) {
							return true;
						}
					}
					break;
				case 1:
					s = comp.vscrollbar;
					if (s && s.enable && (comp.dragscrolltype && comp.dragscrolltype != "none" && comp.dragscrolltype != "horz")) {
						if (s.pos == s.max) {
							return true;
						}
					}
					break;
				case 0:
					sh = comp.hscrollbar;
					sv = comp.vscrollbar;
					if (info) {
						var slideinfo = info;
						if (Math.abs(slideinfo.xdelta) <= this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) <= this.unintendedmove_threshold) {
							return true;
						}
						else if (Math.abs(slideinfo.xdelta) > this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) <= this.unintendedmove_threshold) {
							if (sh && sh.min != sh.max) {
								if (slideinfo.xdelta > 0 && sh.pos == 0 || slideinfo.xdelta < 0 && sh.pos == sh.max) {
									return true;
								}
								else if (slideinfo.xdelta > 0 && sh.pos > 0 || slideinfo.xdelta < 0 && sh.pos < sh.max) {
									return false;
								}
							}
						}
						else if (Math.abs(slideinfo.xdelta) <= this.unintendedmove_threshold && Math.abs(slideinfo.ydelta) > this.unintendedmove_threshold) {
							if (sv && sv.min != sv.max) {
								if (slideinfo.ydelta > 0 && sv.pos == 0 || slideinfo.ydelta < 0 && sv.pos == sv.max) {
									return true;
								}
								else if (slideinfo.ydelta > 0 && sv.pos > 0 || slideinfo.ydelta < 0 && sv.pos < sv.max) {
									return false;
								}
							}
						}
					}
					break;
			}
			comp = comp.parent;
		}
		return;
	};

	_pTouchManager.ontouchmove = function (win, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch) {
		if (this._old_time != curtime) {
			this._old_time = this._current_time;
		}

		this._current_time = curtime;
		touchid = "_" + String(touchid);

		var x = clientX;
		var y = clientY;
		var info = this._currentTouches[touchid];
		if (!info) {
			return;
		}

		if (Math.abs(info._x - x) <= this.unintendedmove_threshold && Math.abs(info._y - y) <= this.unintendedmove_threshold) {
			return;
		}

		var old_elem = info._elem;
		info._updateInfo(elem, "touchmove", curtime, screenX, screenY, x, y);


		var start_comp = win.findComponent(this._start_elem);
		var curr_comp = win.findComponent(elem);
		if (start_comp && curr_comp) {
			if (start_comp != curr_comp) {
				var root_comp = start_comp._getRootComponent(start_comp);
				if (root_comp.enable) {
					start_comp._stat_change("enable", "normal");
				}
			}
		}

		var touchlen = this._currentTouches.length;

		if (touchlen == 1) {
			var dragInfo = nexacro._cur_drag_info;
			var comp, dlgcode;
			var is_drag_return = false;
			if (dragInfo) {
				var windowX = clientX;
				var windowY = clientY;
				var xdeltavalue = windowX - dragInfo.startX;
				var ydeltavalue = windowY - dragInfo.startY;
				if (!dragInfo.isDragging) {
					elem = dragInfo.target_elem;
					comp = win.findComponent(elem, 0, 0);
					if (comp && comp[0]) {
						if (windowX != dragInfo.startX || windowY != dragInfo.startY) {
							var elem_pos = nexacro._getElementXYInWindow(elem._handle);
							var canvasX = windowX - elem_pos[0] + comp[1];
							var canvasY = windowY - elem_pos[1] + comp[2];
							var ret = comp[0]._on_drag(elem, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY);
							if (ret && ret[0] === true) {
								dragInfo.isDragging = true;
								dragInfo.target = ret[1];
								dragInfo.referTarget = ret[2];
								dragInfo.data = ret[3];
								dragInfo.userdata = ret[4];
								comp[0]._on_dragmove(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, xdeltavalue, ydeltavalue);

								return true;
							}
						}
						dlgcode = comp[0]._getDlgCode();
					}
					nexacro._cur_drag_info = null;
				}
				else {
					comp = win.findComponent(elem, 0, 0);
					if (comp && comp[0]) {
						if (old_elem == elem) {
							var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
							var canvasX = windowX - elem_pos[0] + comp[1];
							var canvasY = windowY - elem_pos[1] + comp[2];

							if (comp[0]._isRtl()) {
								var adjust_windowX = this.width - windowX;
								var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
								canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
							}

							comp[0]._on_dragmove(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, xdeltavalue, ydeltavalue);
						}
						else {
							if (old_elem && old_elem._handle) {
								var from_comp = win.findComponent(old_elem, 0, 0);
								var elem_pos = nexacro._getElementXYInWindow((from_comp.length != 3) ? old_elem._handle : from_comp[0]._control_element._handle);
								var canvasX = windowX - elem_pos[0] + from_comp[1];
								var canvasY = windowY - elem_pos[1] + from_comp[2];

								if (from_comp[0]._isRtl()) {
									var adjust_windowX = this.width - windowX;
									var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
									canvasX = adjust_windowX - adjust_elem_pos0 + from_comp[1];
								}

								from_comp[0]._on_dragleave(old_elem, comp[0], dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY);
							}
							if (elem && elem._handle) {
								var from_comp = win.findComponent(old_elem);
								var elem_pos = nexacro._getElementXYInWindow((comp.length != 3) ? elem._handle : comp[0]._control_element._handle);
								var canvasX = windowX - elem_pos[0] + comp[1];
								var canvasY = windowY - elem_pos[1] + comp[2];

								if (comp[0]._isRtl()) {
									var adjust_windowX = this.width - windowX;
									var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
									canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
								}

								comp[0]._on_dragenter(elem, from_comp, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY);
							}
						}
					}
					this._scroll_body = false;
				}

				is_drag_return = true;
			}
			else {
				comp = win.findComponent(elem, 0, 0);
				if (comp && comp[0]) {
					dlgcode = comp[0]._getDlgCode();
				}
			}

			if (nexacro.OS == "iOS" && 
				elem instanceof nexacro.InputElement) {
				this._tap_blocked = true;
				elem._tap_blocked = true;
			}

			if (application.enabletouchevent) {
				var trackInfo = nexacro._cur_track_info;
				var repeatInfo = nexacro._cur_repeat_info;
				if (repeatInfo) {
					repeatInfo.distX = clientX - repeatInfo.startX;
					repeatInfo.distY = clientY - repeatInfo.startY;
					repeatInfo.canvasX = repeatInfo.startCanvasX + repeatInfo.distX;
					repeatInfo.canvasY = repeatInfo.startCanvasY + repeatInfo.distY;
				}

				if (trackInfo) {
					trackInfo.distX = clientX - trackInfo.startX;
					trackInfo.distY = clientY - trackInfo.startY;
					trackInfo.target._on_movetrack(trackInfo.distX, trackInfo.distY, trackInfo.data);
				}
			}
		}

		if (is_last_changedtouch) {
			this.on_fire_ontouch(1);
		}

		var is_slide = false;
		var slideinfo = null;
		if (touchlen == 1) {
			if (this._current_gesture == undefined && !this._slide_blocked) {
				var is_intended = this.checkUnintendedMove(info);
				if (is_intended) {
					if (this._hold_timer && this._hold_timer.isWait()) {
						this._hold_timer.stop();
					}
					if (this._tap_timer && this._tap_timer.isWait()) {
						this._tap_timer.stop();
					}
					if (this._dbltap_timer && this._dbltap_timer.isWait()) {
						this._dbltap_timer.stop();
					}
				}

				slideinfo = this.checkSlide();
				if (slideinfo) {
					is_slide = true;
				}

				if (slideinfo._lock_horz) {
					this._slide_lock_horz = true;
				}
				if (slideinfo._lock_vert) {
					this._slide_lock_vert = true;
				}
			}
			else if (this._current_gesture == "slide") {
				is_slide = true;
				slideinfo = {
					x : info._x, 
					y : info._y, 
					xacc : info._x - info._startx, 
					yacc : info._y - info._starty, 
					xdelta : parseInt(info._x - info._oldx), 
					ydelta : parseInt(info._y - info._oldy)
				};

				if (this._slide_lock_horz) {
					slideinfo.xacc = 0;
					slideinfo.xdelta = 0;
				}
				if (this._slide_lock_vert) {
					slideinfo.yacc = 0;
					slideinfo.ydelta = 0;
				}
			}
		}
		else if (info == this._currentTouches[touchlen - 1]) {
			if (touchlen == 2 && !nexacro._allow_default_pinchzoom) {
				var is_pinch = false;
				var pinchinfo = null;
				if (!this._pinch_blocked) {
					pinchinfo = this.checkPinch(this._currentTouches[0], this._currentTouches[1]);
					if (pinchinfo !== null) {
						is_pinch = true;
					}
				}

				if (is_pinch) {
					var is_first_pinch = false;
					var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
					if (compinfo && this._current_gesture != "pinch") {
						is_first_pinch = true;
					}

					this._current_gesture = "pinch";
					this._slide_blocked = true;
					if (compinfo) {
						this.on_fire_onpinch(is_first_pinch ? 0 : 1, compinfo, pinchinfo.oldrange, pinchinfo.currange);
					}

					this._last_pinchinfo = pinchinfo;
				}
			}

			slideinfo = this.checkSlide();

			if ((nexacro.OS != "Android" || !this._last_pinchinfo) && slideinfo) {
				is_slide = true;
			}
		}

		if (!this._slide_blocked) {
			if (is_slide) {
				var is_first_slide = false;
				if (this._current_gesture != "slide") {
					is_first_slide = true;
				}

				var is_scrollend = this.checkValidScrollEnd(slideinfo);
				if (is_scrollend === false) {
					this._slide_event_blocked = false;
				}
				else {
					this._slide_event_blocked = true;
				}

				if (this._slide_history.length == 0) {
					this._slide_history.push({
						x : slideinfo.x - slideinfo.xacc, 
						y : slideinfo.y - slideinfo.yacc, 
						t : this._old_time
					});
				}

				if (application.enabletouchevent == false && is_first_slide) {
					var offset_x = info._x - info._oldx;
					var offset_y = info._y - info._oldy;
					var move_dir;
					if (Math.abs(offset_x) > Math.abs(offset_y)) {
						move_dir = (offset_x > 0) ? -10 : 10;
					}
					else {
						move_dir = (offset_y > 0) ? -1 : 1;
					}
					if (this._scroll_direction != move_dir) {
						this._scroll_end = false;
					}
					if (this._scroll_body || this._scroll_end) {
						if (this._scroll_body || this._scroll_direction == move_dir) {
							this._slide_blocked = true;
							this._tap_blocked = true;
							this._scroll_body = true;
							return false;
						}

						this._scroll_end = false;
					}
				}

				this._current_gesture = "slide";
				this._pinch_blocked = true;
				this._tap_blocked = true;
				var startcompinfo = win.findComponent(this._start_elem, 0, 0);
				if (startcompinfo) {
					this.on_fire_onslide(is_first_slide ? 0 : 1, startcompinfo, slideinfo.xacc, slideinfo.yacc, slideinfo.xdelta, slideinfo.ydelta, slideinfo.x, slideinfo.y, info.time);
				}

				this._last_slideinfo = slideinfo;
			}
			else {
				var comp = win.findComponent(elem, 0, 0);
				if (comp) {
					var form = comp[0] ? comp[0]._getRootForm() : null;
					if (form) {
						var step_idx = form.stepcontrol ? form.stepcontrol.getStepIndex() : 0;
						form._createStepChangeAnimation(step_idx, 400);
					}
				}
			}
		}

		if (is_last_changedtouch) {
			if (this.checkInputPreventDefault(elem, this._currentTouches.length, 1)) {
				return false;
			}
		}

		if (this._scroll_body == true) {
			return false;
		}

		if (this._scroll_end == true) {
			return false;
		}

		return true;
	};

	_pTouchManager.ontouchend = function (win, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch) {
		this._start_elem_status = "";
		this._start_elem_pseudo = "";

		if (this._old_time != curtime) {
			this._old_time = this._current_time;
		}
		this._current_time = curtime;
		touchid = "_" + String(touchid);

		var x = clientX;
		var y = clientY;
		var info = this._currentTouches[touchid];
		var repeatInfo = nexacro._cur_repeat_info;
		var trackInfo = nexacro._cur_track_info;

		if (!info) {
			if (repeatInfo) {
				if (repeatInfo._timer) {
					var _handle = nexacro._getWindowHandle(this._handle);
					nexacro._clearSystemTimer(_handle, repeatInfo._timer);
				}
				repeatInfo.distX = clientX - repeatInfo.startX;
				repeatInfo.distY = clientY - repeatInfo.startY;
				repeatInfo.target._on_endrepeat(repeatInfo.refer_comp, repeatInfo.distX, repeatInfo.distY, repeatInfo.data);
				nexacro._cur_repeat_info = null;
			}
			if (trackInfo) {
				trackInfo.distX = clientX - trackInfo.startX;
				trackInfo.distY = clientY - trackInfo.startY;
				trackInfo.target._on_endtrack(trackInfo.distX, trackInfo.distY, trackInfo.data);
				nexacro._cur_track_info = null;
			}
			nexacro._cur_drag_info = null;
			this._ignore_touchstart = true;
			return;
		}

		info._updateInfo(elem, "touchend", curtime, info.screenX, info.screenY, info._x, info._y);

		var dragInfo = nexacro._cur_drag_info;
		if (elem && dragInfo && dragInfo.isDragging) {
			var comp, elem_pos, canvasX, canvasY;
			comp = win.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				var windowX = clientX;
				var windowY = clientY;
				elem_pos = nexacro._getElementXYInWindow(elem._handle);
				canvasX = windowX - elem_pos[0] + comp[1];
				canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				comp[0]._on_drop(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, "touch", false, false, false, false, canvasX, canvasY, screenX, screenY);
				dragInfo.isDragging = false;
			}
		}

		var comp = win.findComponent(elem, 0, 0);
		var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
		if (is_last_changedtouch) {
			if (repeatInfo) {
				if (repeatInfo._timer) {
					var _handle = nexacro._getWindowHandle(win._handle);
					nexacro._clearSystemTimer(_handle, repeatInfo._timer);
				}
				repeatInfo.distX = clientX - repeatInfo.startX;
				repeatInfo.distY = clientY - repeatInfo.startY;
				repeatInfo.target._on_endrepeat(repeatInfo.refer_comp, repeatInfo.distX, repeatInfo.distY, repeatInfo.data);
				nexacro._cur_repeat_info = null;
			}

			if (trackInfo) {
				trackInfo.distX = clientX - trackInfo.startX;
				trackInfo.distY = clientY - trackInfo.startY;
				trackInfo.target._on_endtrack(trackInfo.distX, trackInfo.distY, trackInfo.data);
				nexacro._cur_track_info = null;
			}

			this.on_fire_ontouch(2);

			if (comp && comp[0] && comp[0]._is_alive) {
				comp[0]._on_last_lbuttonup();
			}
		}

		var isDblTap = false;
		var touchlen = this._currentTouches.size();
		if (touchlen == 1) {
			var startcompinfo = win.findComponent(this._start_elem, 0, 0);
			var start_comp = startcompinfo ? startcompinfo[0] : null;
			var elemcompinfo = win.findComponent(elem, 0, 0);
			var elem_comp = elemcompinfo ? elemcompinfo[0] : null;
			if (Math.abs(this._currentTouches[0]._startx - this._currentTouches[0]._x) > this._tap_bound || 
				Math.abs(this._currentTouches[0]._starty - this._currentTouches[0]._y) > this._tap_bound || (start_comp != elem_comp)) {
				this._tap_blocked = true;
			}

			if (this._hold_timer && this._hold_timer.isWait()) {
				this._hold_timer.stop();
			}

			if (this._tap_timer && this._tap_timer.isWait() && this._tap_blocked == false) {
				this._tap_timer.stop();

				if (startcompinfo) {
					if (nexacro.Browser == "Runtime") {
						application._lastTouchEndX = parseInt(screenX);
						application._lastTouchEndY = parseInt(screenY);
					}
					else {
						application._lastTouchEndX = parseInt(screenX + ((window && window.screenLeft) ? window.screenLeft : 0));
						application._lastTouchEndY = parseInt(screenY + ((window && window.screenTop) ? window.screenTop : 0));
					}

					this.on_fire_ontap(startcompinfo);
				}

				if (!this._is_first_tap) {
					if (this._first_tap_point) {
						var range = this.getRange(this._currentTouches[0]._x, this._currentTouches[0]._y, this._first_tap_point.x, this._first_tap_point.y);
						if (range < this.dbltap_bound) {
							var firsttapcompinfo = win.findComponent(this._first_tap_elem, 0, 0);
							if (startcompinfo && startcompinfo[0]) {
								if (firsttapcompinfo && startcompinfo[0] === firsttapcompinfo[0]) {
									win._is_dbltap = true;
									this.on_fire_ondbltap(startcompinfo);
									isDblTap = true;
								}
							}
						}
					}
				}
			}
			else if ((comp && compinfo && compinfo[0]) && (comp[0] != compinfo[0])) {
				var ret_info = this.getCurrentTouchInputInfo();
				var touchinfos = ret_info.touchinfos;
				var changedtouchinfos = ret_info.changedtouchinfos;
				var firsttouchinfo = ret_info.firsttouchinfo;

				compinfo[0]._control_pseudo = "";
				compinfo[0]._contents_pseudo = "";
				compinfo[0]._on_touchcancel(this, touchinfos, changedtouchinfos);
			}
		}
		else if (touchlen > 1 && !application.enabletouchevent) {
			var cur_touches = this._currentTouches;
			for (var i = 0; i < touchlen; i++) {
				var tid = cur_touches[i].touchid.slice(1);

				var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
				if (!compinfo || !compinfo[0]) {
					break;
				}

				var ret_info = this.getCurrentTouchInputInfo();
				var touchinfos = ret_info.touchinfos;
				var changedtouchinfos = ret_info.changedtouchinfos;
				var firsttouchinfo = ret_info.firsttouchinfo;

				compinfo[0]._on_touchcancel(this, touchinfos, changedtouchinfos);
			}
		}

		var ret = true;
		if (is_last_changedtouch) {
			if (this.checkInputPreventDefault(elem, touchlen, 2)) {
				ret = false;
			}

			for (var i = 0; i < touchlen; i++) {
				var info = this._currentTouches[i];
				if (info.time == this._current_time && info._current_state == "touchend") {
					this._currentTouches.delete_item(info.touchid);
					touchlen--;
					i--;

					if (this._currentTouches.size() == 0) {
						if (this._current_gesture == "slide" && (!this._slide_blocked || this._fired_slidestart)) {
							var slideinfo = this._last_slideinfo;

							var startcompinfo = win.findComponent(this._start_elem, 0, 0);
							if (startcompinfo) {
								this.on_fire_onslide(2, startcompinfo, slideinfo.xacc, slideinfo.yacc, slideinfo.xdelta, slideinfo.ydelta, slideinfo.x, slideinfo.y, info.time);
							}
						}

						if (!this._fling_blocked) {
							var flinginfo = this.checkFling();
							if (flinginfo) {
								var uid = "_fling" + this._fling_uid;
								var fling = new nexacro.FlingHandler(uid, this._start_win, this._start_elem, this._scroll_comp, this._scroll_mode, null, flinginfo.xstartvalue, flinginfo.ystartvalue, flinginfo.xspeed, flinginfo.yspeed, flinginfo.duration, this._slide_touchlen, this);
								if (fling._is_alive) {
									fling.start();

									this._fling_list.add_item(uid, fling);
									this._fling_uid++;
								}
								else {
									delete fling;
								}
							}
						}

						this._slide_history = [];

						this._current_gesture = undefined;
						this._tap_blocked = false;
						if (nexacro.OS == "iOS" && elem instanceof nexacro.InputElement) {
							elem._tap_blocked = false;
							elem._is_longpressed = false;
						}
						this._slide_blocked = false;
						this._pinch_blocked = false;
						this._fling_blocked = false;
						this._first_pinch_range = undefined;
						this._is_longpressed = false;
						this._scroll_comp = null;
						this._scroll_mode = -1;
						this._last_pinchinfo = null;
						this._last_slideinfo = null;
						this._allow_default = false;
						this._slide_lock_horz = false;
						this._slide_lock_vert = false;
						this._scroll_body = false;
						this._fired_slidestart = false;
					}
					else {
						if (this._current_gesture == "slide" && !this._slide_blocked) {
							if (!this._fling_timer) {
								this._fling_timer = new nexacro.TouchTimer(win, this._on_fling_timer, this, this.fling_threshold);
							}
							else {
								this._fling_timer.start(this.fling_threshold);
							}
						}

						if (this._current_gesture == "pinch" && !this._pinch_blocked) {
							var pinchinfo = this._last_pinchinfo;
							var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
							if (compinfo) {
								this.on_fire_onpinch(2, compinfo, pinchinfo.currange, pinchinfo.currange);
							}
						}

						this._pinch_blocked = true;
						this._slide_blocked = true;
						this._fired_slidestart = false;
					}
				}
			}
		}
		nexacro._cur_drag_info = null;
		return ret | isDblTap;
	};

	_pTouchManager.ontouchcancel = function (win, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch) {
		if (this._old_time != curtime) {
			this._old_time = this._current_time;
		}
		this._current_time = curtime;
		touchid = "_" + String(touchid);

		var info = this._currentTouches[touchid];
		if (!info) {
			return;
		}

		if (!nexacro._isDesktop() && nexacro.OS == "Android" && nexacro.Browser != "Runtime") {
			var repeatInfo = nexacro._cur_repeat_info;
			var trackInfo = nexacro._cur_track_info;

			info._updateInfo(elem, "touchcancel", curtime, info.screenX, info.screenY, info._x, info._y);

			if (is_last_changedtouch) {
				if (repeatInfo) {
					if (repeatInfo._timer) {
						var _handle = nexacro._getWindowHandle(win._handle);
						nexacro._clearSystemTimer(_handle, repeatInfo._timer);
					}
					repeatInfo.distX = clientX - repeatInfo.startX;
					repeatInfo.distY = clientY - repeatInfo.startY;
					repeatInfo.target._on_endrepeat(repeatInfo.refer_comp, repeatInfo.distX, repeatInfo.distY, repeatInfo.data);
					nexacro._cur_repeat_info = null;
				}

				if (trackInfo) {
					trackInfo.distX = clientX - trackInfo.startX;
					trackInfo.distY = clientY - trackInfo.startY;
					trackInfo.target._on_endtrack(trackInfo.distX, trackInfo.distY, trackInfo.data);
					nexacro._cur_track_info = null;
				}

				this.on_fire_ontouch(3);

				var comp = win.findComponent(elem, 0, 0);
				if (comp && comp[0] && comp[0]._is_alive) {
					comp[0]._on_last_lbuttonup();
				}
			}

			var touchlen = this._currentTouches.size();
			if (touchlen == 1) {
				if (Math.abs(this._currentTouches[0]._startx - this._currentTouches[0]._x) > this._tap_bound || 
					Math.abs(this._currentTouches[0]._starty - this._currentTouches[0]._y) > this._tap_bound || 
					this._start_elem != elem) {
					this._tap_blocked = true;
				}

				if (this._hold_timer && this._hold_timer.isWait()) {
					this._hold_timer.stop();
				}
				if (this._tap_timer && this._tap_timer.isWait() && this._tap_blocked == false) {
					this._tap_timer.stop();

					var startcompinfo = win.findComponent(this._start_elem, 0, 0);
					if (startcompinfo) {
						this.on_fire_ontap(startcompinfo);
					}

					if (!this._is_first_tap) {
						var range = this.getRange(this._currentTouches[0]._x, this._currentTouches[0]._y, this._first_tap_point.x, this._first_tap_point.y);
						if (range < this.dbltap_bound) {
							var firsttapcompinfo = win.findComponent(this._first_tap_elem, 0, 0);
							if (startcompinfo && startcompinfo[0]) {
								if (firsttapcompinfo && startcompinfo[0] === firsttapcompinfo[0]) {
									this.on_fire_ondbltap(startcompinfo);
								}
							}
						}
					}
				}
			}
		}

		this._currentTouches.delete_item(info.touchid);

		if (this._currentTouches.length > 0) {
			this._tap_blocked = true;
			this._slide_blocked = true;
			this._pinch_blocked = true;
			this._fling_blocked = true;
			this._scroll_comp = null;
			this._scroll_mode = -1;
			this._scroll_body = false;
		}
		else {
			this._slide_history = [];

			this._current_gesture = undefined;
			this._tap_blocked = false;
			if (nexacro.OS == "iOS" && elem instanceof nexacro.InputElement) {
				elem._tap_blocked = false;
				elem._is_longpressed = false;
			}
			this._slide_blocked = false;
			this._pinch_blocked = false;
			this._fling_blocked = false;
			this._first_pinch_range = undefined;
			this._is_longpressed = false;
			this._scroll_comp = null;
			this._scroll_mode = -1;
			this._last_pinchinfo = null;
			this._last_slideinfo = null;
			this._scroll_body = false;

			this._allow_default = false;
			this._slide_lock_horz = false;
			this._slide_lock_vert = false;
		}
	};

	_pTouchManager.checkUnintendedMove = function (info, threshold) {
		if (threshold === undefined) {
			threshold = this.unintendedmove_threshold;
		}

		var conversion_factor = 1;
		if (nexacro._zoom_factor < 100 && nexacro._zoom_factor > 0) {
			conversion_factor = 100 / nexacro._zoom_factor;
		}

		threshold = threshold * conversion_factor;

		var range1 = this.getRange(info._oldx, info._oldy, info._x, info._y);
		var range2 = this.getRange(info._x, info._y, info._startx, info._starty);
		if (range1 > threshold || range2 > threshold) {
			return true;
		}
		return false;
	};

	_pTouchManager.checkPinch = function (info1, info2) {
		var pinchinfo = null;
		if (!info1 || !info2) {
			return null;
		}

		var is_pinch = false;
		var offset1 = {
			x : info1._x - info1._oldx, 
			y : info1._y - info1._oldy
		};
		var offset2 = {
			x : info2._x - info2._oldx, 
			y : info2._y - info2._oldy
		};

		var pinch_threshold = this.pinch_threshold;
		if (this._current_gesture == "pinch") {
			pinch_threshold = 1;
		}

		var range11 = this.getRange(this._center_point.x, this._center_point.y, info1._oldx, info1._oldy);
		var range12 = this.getRange(this._center_point.x, this._center_point.y, info1._x, info1._y);
		var range21 = this.getRange(this._center_point.x, this._center_point.y, info2._oldx, info2._oldy);
		var range22 = this.getRange(this._center_point.x, this._center_point.y, info2._x, info2._y);

		if (this._current_gesture != "pinch") {
			if (range12 - range11 < -(pinch_threshold) && range22 - range21 < -(pinch_threshold)) {
				is_pinch = true;
			}
			else if (range12 - range11 > pinch_threshold && range22 - range21 > pinch_threshold) {
				is_pinch = true;
			}
		}
		else {
			if (range11 != range12 || range21 != range22) {
				is_pinch = true;
			}
		}

		if (is_pinch) {
			var oldrange = this.getRange(info1._oldx, info1._oldy, info2._oldx, info2._oldy);
			var currange = this.getRange(info1._x, info1._y, info2._x, info2._y);
			if (this._first_pinch_range === undefined) {
				this._first_pinch_range = oldrange;
			}
			pinchinfo = {
				oldrange : oldrange, 
				currange : currange
			};
		}
		return pinchinfo;
	};

	_pTouchManager.checkSlide = function () {
		var touchlen = this._currentTouches.length;
		if (touchlen < 1) {
			return false;
		}

		var is_first = (this._current_gesture != "slide");
		if (is_first) {
			var is_intended = false;
			for (var i = 0; i < touchlen; i++) {
				var info = this._currentTouches[i];
				if (this.checkUnintendedMove(info, this.slide_threshold)) {
					is_intended = true;
					break;
				}
			}

			if (!is_intended) {
				return false;
			}
		}

		var is_slide = false;
		var slideinfo = {
		};
		if (touchlen == 1) {
			slideinfo.x = info._x;
			slideinfo.y = info._y;
			slideinfo.xacc = info._x - info._startx;
			slideinfo.yacc = info._y - info._starty;
			slideinfo.xdelta = parseInt(info._x - info._oldx, 0);
			slideinfo.ydelta = parseInt(info._y - info._oldy, 0);

			if (is_first) {
				if (Math.abs(slideinfo.xacc) > Math.abs(slideinfo.yacc) * 2) {
					slideinfo._lock_vert = true;
					slideinfo.yacc = 0;
					slideinfo.ydelta = 0;
				}
				else if (Math.abs(slideinfo.xacc) * 2 < Math.abs(slideinfo.yacc)) {
					slideinfo._lock_horz = true;
					slideinfo.xacc = 0;
					slideinfo.xdelta = 0;
				}
			}
		}
		else {
			var centerpos = {
				x : 0, 
				y : 0
			};
			var acc = {
				x : 0, 
				y : 0
			};
			var offset = {
				x : 0, 
				y : 0
			};
			var angles = [];
			for (var i = 0; i < touchlen; i++) {
				var info = this._currentTouches[i];
				centerpos.x += info._x;
				centerpos.y += info._y;
				offset.x += info._x - info._oldx;
				offset.y += info._y - info._oldy;
				acc.x += info._x - info._startx;
				acc.y += info._y - info._starty;
				var angle = this.getAngle(info._oldx, info._oldy, info._x, info._y);
				angles.push(angle);
			}

			var average_angle = this.getAngle(0, 0, offset.x, offset.y);
			for (var i = 0; i < touchlen; i++) {
				var delta = Math.abs(average_angle - angles[i]);
				if (delta > this.slideangle_threshold) {
					return null;
				}
			}

			slideinfo.x = (centerpos.x / touchlen);
			slideinfo.y = (centerpos.y / touchlen);
			slideinfo.xacc = (acc.x / touchlen);
			slideinfo.yacc = (acc.y / touchlen);
			slideinfo.xdelta = (offset.x / touchlen);
			slideinfo.ydelta = (offset.y / touchlen);
		}
		return slideinfo;
	};

	_pTouchManager.checkFling = function () {
		var history = this._slide_history;
		var historylen = history.length;
		if (historylen <= 1) {
			return;
		}

		var lastpos = history[historylen - 1];
		var comparepos = history[historylen - 2];
		var lastpos_coord = Math.sqrt((lastpos.x ? (lastpos.x * lastpos.x) : 0) + (lastpos.y ? (lastpos.y * lastpos.y) : 0));
		var comparepos_coord = Math.sqrt((comparepos.x ? (comparepos.x * comparepos.x) : 0) + (comparepos.y ? (comparepos.y * comparepos.y) : 0));
		var speed = (lastpos_coord - comparepos_coord) / (lastpos.t - comparepos.t);

		if ((Math.abs(lastpos_coord - comparepos_coord)) <= this._fling_threshold || Math.abs(speed) < this._fling_minimum_speed) {
			return;
		}

		var flinginfo = {
			xstartvalue : 0, 
			ystartvalue : 0, 
			xspeed : 0, 
			yspeed : 0, 
			duration : 0
		};
		for (var axis in {
			x : 1, 
			y : 1
		}) {
			var flingduration = 0;
			var flingdistance = 0;
			var flingpos;

			comparepos = history[historylen - 2];
			for (var i = historylen - 3; i >= 0; i--) {
				if (lastpos.t - history[i].t > 100) {
					break;
				}
				comparepos = history[i];
			}

			speed = (lastpos[axis] - comparepos[axis]) / (lastpos.t - comparepos.t);
			if (Math.abs(speed) >= this._fling_minimum_speed) {
				flingduration = Math.log(this._fling_minimum_speed / Math.abs(speed)) / Math.log(this._fling_friction);
				flingdistance = speed * (1 - Math.pow(this._fling_friction, flingduration + 1)) / (1 - this._fling_friction);
			}

			flingpos = Math.floor(flingdistance);
			if (axis == "x") {
				flinginfo.xstartvalue = flingdistance;
				flinginfo.xspeed = speed;
			}
			if (axis == "y") {
				flinginfo.ystartvalue = flingdistance;
				flinginfo.yspeed = speed;
			}

			flinginfo.duration = Math.max(flinginfo.duration, flingduration);
		}

		return flinginfo;
	};

	_pTouchManager._on_default_fire_ontouch = function (eventtype) {
		var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
		if (!compinfo || !compinfo[0]) {
			return;
		}

		var touchlen = this._currentTouches.length;
		var ret_info = this.getCurrentTouchInputInfo();
		var touchinfos = ret_info.touchinfos;
		var changedtouchinfos = ret_info.changedtouchinfos;
		var firsttouchinfo = ret_info.firsttouchinfo;

		if (application.enabletouchevent) {
			var ret;
			switch (eventtype) {
				case 0:
					compinfo[0]._on_touchstart(this, touchinfos, changedtouchinfos);
					break;
				case 1:
					compinfo[0]._on_touchmove(this, touchinfos, changedtouchinfos);
					break;
				case 2:
					ret = compinfo[0]._on_touchend(this, touchinfos, changedtouchinfos);
					if (ret == true) {
						this._tap_blocked = true;
					}
					break;
				case 3:
					ret = compinfo[0]._on_touchcancel(this, touchinfos, changedtouchinfos);
					break;
			}
		}
		else if (firsttouchinfo) {
			switch (eventtype) {
				case 0:
					this._start_info = this._start_win._on_touch_to_lbuttondown(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY);
					break;
				case 1:
					if (this._tap_blocked && this._start_win._cur_ldown_elem == null) {
						this._start_win._on_sys_lbuttondown(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY);

						var trackInfo = nexacro._cur_track_info;
						if (trackInfo) {
							this._fling_blocked = true;
						}
					}

					this._start_win._on_sys_mousemove(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY);
					break;
				case 2:
					if (this._is_longpressed) {
						this._start_win._on_sys_rbuttonup(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY, undefined, undefined, undefined, firsttouchinfo._elem);
					}
					else if (this._tap_blocked) {
						this._start_win._on_sys_lbuttonup(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY, undefined, undefined, undefined, firsttouchinfo._elem);
					}
					break;
			}
		}
	};

	_pTouchManager._on_windows_fire_ontouch = function (eventtype) {
		var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
		if (!compinfo || !compinfo[0]) {
			return;
		}

		var touchlen = this._currentTouches.length;
		var ret_info = this.getCurrentTouchInputInfo();
		var touchinfos = ret_info.touchinfos;
		var changedtouchinfos = ret_info.changedtouchinfos;
		var firsttouchinfo = ret_info.firsttouchinfo;

		if (application.enabletouchevent) {
			var ret;
			switch (eventtype) {
				case 0:
					compinfo[0]._on_touchstart(this, touchinfos, changedtouchinfos);
					break;
				case 1:
					compinfo[0]._on_touchmove(this, touchinfos, changedtouchinfos);
					break;
				case 2:
					ret = compinfo[0]._on_touchend(this, touchinfos, changedtouchinfos);
					if (ret == true) {
						this._tap_blocked = true;
					}
					break;
				case 3:
					ret = compinfo[0]._on_touchcancel(this, touchinfos, changedtouchinfos);
					break;
			}
		}
	};

	_pTouchManager.on_fire_ontap = function (compinfo) {
		var info = this._currentTouches[0];
		if (this._is_first_tap) {
			this._first_tap_elem = this._start_elem;
			this._first_tap_point = this._start_point;
		}

		if (compinfo && compinfo[0]) {
			var start_point = this._start_point;
			var elem_pos = nexacro._getElementXYInWindow(this._start_elem._handle);
			var canvasX = start_point.x - elem_pos[0] + compinfo[1];
			var canvasY = start_point.y - elem_pos[1] + compinfo[2];

			if (application.enabletouchevent) {
				compinfo[0]._on_tap(this._start_elem, canvasX, canvasY, start_point.screenX, start_point.screenY);
			}
			else {
				var ret_info = this.getCurrentTouchInputInfo();
				var firsttouchinfo = ret_info.firsttouchinfo;

				var ret;
				this._start_win._on_sys_mousemove(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY);
				if (this._start_info && this._start_info.cp) {
					this._start_info.cp._on_touch_lbuttondown(firsttouchinfo._elem, "touch", false, false, false, false, this._start_info.cX, this._start_info.cY, firsttouchinfo.screenX, firsttouchinfo.screenY, undefined, undefined, undefined, true);

					delete this._start_info;
				}

				this._start_win._on_sys_lbuttonup(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo._x, firsttouchinfo._y, firsttouchinfo.screenX, firsttouchinfo.screenY, undefined, undefined, undefined, firsttouchinfo._elem);
			}
		}
	};

	_pTouchManager.on_fire_ondbltap = function (compinfo) {
		if (this._dbltap_timer && this._dbltap_timer.isWait()) {
			this._dbltap_timer.stop();
		}

		if (compinfo && compinfo[0]) {
			var start_point = this._first_tap_point;
			var elem_pos = nexacro._getElementXYInWindow(this._start_elem._handle);
			var canvasX = start_point.x - elem_pos[0] + compinfo[1];
			var canvasY = start_point.y - elem_pos[1] + compinfo[2];

			if (application.enabletouchevent) {
				compinfo[0]._on_dbltap(this._first_tap_elem, canvasX, canvasY, start_point.screenX, start_point.screenY);
			}
			else {
				compinfo[0]._on_dblclick(this._first_tap_elem, "lbutton", false, false, false, false, canvasX, canvasY, start_point.screenX, start_point.screenY);
			}
		}
	};

	_pTouchManager.on_fire_onlongpress = function (compinfo) {
		if (compinfo && compinfo[0]) {
			var ret_info = this.getCurrentTouchInputInfo();
			if (application.enabletouchevent) {
				var touchinfos = ret_info.touchinfos;
				compinfo[0]._on_longpress(this._start_elem, touchinfos);
			}
			else {
				var firsttouchinfo = ret_info.firsttouchinfo;
				if (firsttouchinfo) {
					compinfo[0]._on_rbuttondown(firsttouchinfo._elem, "touch", false, false, false, false, firsttouchinfo.canvasX, firsttouchinfo.canvasY, firsttouchinfo.screenX, firsttouchinfo.screenY);
				}
			}
		}
	};

	_pTouchManager.on_fire_onpinch = function (eventtype, compinfo, oldrange, currange) {
		if (compinfo && compinfo[0]) {
			var ret_info = this.getCurrentTouchInputInfo();
			var touchinfos = ret_info.touchinfos;

			var accvalue = currange - this._first_pinch_range;
			var deltavalue = currange - oldrange;
			var ret;
			switch (eventtype) {
				case 0:
					ret = compinfo[0]._on_pinchstart(this._start_elem, touchinfos, accvalue, deltavalue, this._first_pinch_range, currange);
					if (ret == true) {
						this._pinch_blocked = true;
						return;
					}
				case 1:
					ret = compinfo[0]._on_pinch(this._start_elem, touchinfos, accvalue, deltavalue, this._first_pinch_range, currange);
					if (ret == true) {
						this._pinch_blocked = true;
						compinfo[0]._on_pinchend(this._start_elem, touchinfos, accvalue, deltavalue, this._first_pinch_range, currange);
					}
					break;
				case 2:
					compinfo[0]._on_pinchend(this._start_elem, touchinfos, accvalue, deltavalue, this._first_pinch_range, currange);
					break;
			}
		}
	};

	_pTouchManager.on_fire_onslide = function (eventtype, compinfo, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue, x, y, time) {
		if (compinfo && compinfo[0]) {
			var ret_info = this.getCurrentTouchInputInfo();
			var touchinfos = ret_info.touchinfos;

			var ret;
			switch (eventtype) {
				case 0:
					ret = compinfo[0]._on_slidestart(this._start_elem, this, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue);
					if (ret == true) {
						this._slide_blocked = true;
						return;
					}
				case 1:
					this._scroll_end = false;

					if (xdeltavalue == 0 && ydeltavalue == 0) {
						break;
					}
					ret = compinfo[0]._on_slide(this._start_elem, this, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue);
					if (ret == true) {
						return;
					}

					this._slide_touchlen = touchinfos ? touchinfos.length : 1;
					if (this._slide_lock_horz) {
						x = this._slide_history[0].x;
					}
					if (this._slide_lock_vert) {
						y = this._slide_history[0].y;
					}
					this._slide_history.push({
						x : x, 
						y : y, 
						t : time
					});
					if (this._slide_history.length > 30) {
						this._slide_history.splice(0, 15);
					}
					break;
				case 2:
					compinfo[0]._on_slideend(this._start_elem, this, touchinfos, xaccvalue, yaccvalue, xdeltavalue, ydeltavalue);
					break;
			}
		}
	};

	_pTouchManager.on_fire_onflingstart = function (elem, compinfo, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen) {
		if (compinfo && compinfo[0]) {
			return compinfo[0]._on_flingstart(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen);
		}
	};

	_pTouchManager.on_fire_onfling = function (elem, compinfo, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen) {
		if (compinfo && compinfo[0]) {
			compinfo[0]._on_fling(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen);
		}
	};

	_pTouchManager.on_fire_onflingend = function (elem, compinfo, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen) {
		if (compinfo && compinfo[0]) {
			compinfo[0]._on_flingend(elem, fling_handler, xstartvalue, ystartvalue, xdeltavalue, ydeltavalue, touchlen);
		}
	};

	_pTouchManager.onflingend = function (fling_uid) {
		if (!fling_uid) {
			return;
		}

		this._fling_list.delete_item(fling_uid);
	};

	_pTouchManager.stopFling = function (comp) {
		var fling_list = this._fling_list;
		if (fling_list.length == 0) {
			return;
		}

		while (comp) {
			if (comp._is_application) {
				return;
			}

			for (var i = 0, n = fling_list.length; i < n; i++) {
				var fling_handler = fling_list[i];
				var is_stop = false;
				if (comp == fling_handler._target_comp) {
					is_stop = true;
				}

				if (comp == fling_handler._scroll_comp) {
					is_stop = true;
				}

				if (is_stop) {
					fling_handler.stop();
				}
			}

			comp = comp.parent;
		}
	};

	_pTouchManager._on_tap_timer = function () {
	};

	_pTouchManager._on_dbltap_timer = function () {
		this._first_tap_elem = null;
		this._is_first_tap = true;
	};

	_pTouchManager._on_hold_timer = function () {
		var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
		if (compinfo) {
			this.on_fire_onlongpress(compinfo);
		}

		this._slide_blocked = true;
		this._fling_blocked = true;
		this._is_longpressed = true;
		if (nexacro.OS == "iOS" && this._start_elem instanceof nexacro.InputElement) {
			this._start_elem._is_longpressed = true;
		}
	};

	_pTouchManager._on_fling_timer = function () {
		this._fling_blocked = true;
	};

	_pTouchManager.compareComponent = function (linkedcontrol, focused_comp) {
		if (linkedcontrol) {
			var post_focus_comp = linkedcontrol;
			while (post_focus_comp) {
				var c = post_focus_comp._getLastFocused();
				if (!c || (c && (!c.visible || !c.enable))) {
					c = post_focus_comp._getTabOrderFirst();
				}
				if (!c || !c.visible) {
					break;
				}
				post_focus_comp = c;
			}

			if (post_focus_comp && post_focus_comp._input_element) {
				if (focused_comp == post_focus_comp) {
					return true;
				}
				return false;
			}
		}
	};

	_pTouchManager.checkInputPreventDefault = function (elem, touchlen, type) {
		if (touchlen != 1) {
			return false;
		}

		var focused_comp;
		var linkedcontrol = elem ? elem.linkedcontrol : null;
		if (!linkedcontrol && elem && elem.parent) {
			linkedcontrol = elem.parent.linkedcontrol;
			if ((elem instanceof nexacro.InputElement) && linkedcontrol._is_subcontrol) {
				linkedcontrol = linkedcontrol._getRootComponent(linkedcontrol);
			}
		}
		while (linkedcontrol && !linkedcontrol._is_focus_accept) {
			linkedcontrol = linkedcontrol.parent;
		}

		if (linkedcontrol && linkedcontrol._refform) {
			if (linkedcontrol._refform.getFocus) {
				focused_comp = linkedcontrol._refform.getFocus();
			}
		}

		var is_focused_input = (focused_comp == linkedcontrol);
		var is_display_elem = (elem && elem._parent_elem) ? (elem._parent_elem instanceof nexacro.InputElement) : false;


		if (!elem || !(elem instanceof nexacro.InputElement) || is_display_elem) {
			if (elem) {
				if (nexacro.OS == "iOS") {
					if (nexacro.WebBrowser && linkedcontrol instanceof nexacro.WebBrowser) {
						return true;
					}

					if (linkedcontrol) {
						var dlgcode = linkedcontrol._getDlgCode();
						if (type == 0 && dlgcode && dlgcode.want_touchstart) {
							return false;
						}

						if (type == 1 && dlgcode && dlgcode.want_touchmove) {
							return false;
						}
					}

					if (this._scroll_end && (type == 0 || type == 1)) {
						return true;
					}

					if (is_display_elem && elem._parent_elem.enable) {
						if (nexacro.OS == "iOS" && nexacro._isHybrid && nexacro._isHybrid()) {
							return false;
						}
						return true;
					}
				}
				else if (nexacro.OS == "Android") {
					if (nexacro.WebBrowser && linkedcontrol instanceof nexacro.WebBrowser) {
						return true;
					}

					if (type == 0) {
						if (is_display_elem && elem._parent_elem.enable) {
							if ((/SHW-M500W/).test(nexacro._getUserAgent())) {
								return false;
							}

							return true;
						}

						var ret = this.compareComponent(linkedcontrol, focused_comp);
						if (ret !== undefined) {
							return !ret;
						}
					}
					else if (type == 2) {
						if (nexacro.Browser == "Chrome" || (nexacro.Browser == "Edge" && nexacro.BrowserType == "Webkit")) {
							return true;
						}
					}
				}
			}

			return false;
		}

		if (nexacro.OS == "iOS") {
			switch (type) {
				case 0:
					if (is_focused_input) {
						return true;
					}

					if (this._scroll_end) {
						return true;
					}

					var ret = this.compareComponent(linkedcontrol, focused_comp);
					if (ret !== undefined) {
						return !ret;
					}
					break;
				case 1:
					if (this._scroll_end) {
						return true;
					}
					break;
				case 2:
					if (is_focused_input) {
						return true;
					}

					break;
			}
		}
		else if (nexacro.OS == "Android") {
			switch (type) {
				case 0:
					if (is_focused_input) {
						return true;
					}



					if ((/SHW-M500W/).test(nexacro._getUserAgent())) {
						if (focused_comp instanceof nexacro.Grid && elem instanceof nexacro.InputElement) {
							return false;
						}
					}

					return true;
					break;
				case 1:
					if (this._scroll_end) {
						return true;
					}
					break;
				case 2:
					if (is_focused_input) {
						return true;
					}

					if (this._tap_timer && this._tap_timer.isWait() && !this._tap_blocked) {
						return true;
					}

					break;
			}
		}

		return false;
	};

	_pTouchManager.getCurrentTouchInputInfo = function () {
		if (!this._start_elem || !this._start_elem._handle) {
			return null;
		}

		var ret_info = {
		};
		ret_info.touchinfos = this._currentTouches;
		ret_info.firsttouchinfo = null;
		ret_info.changedtouchinfos = [];

		var compinfo = this._start_win.findComponent(this._start_elem, 0, 0);
		var elem_pos = nexacro._getElementXYInWindow(this._start_elem._handle);
		var infos = [];
		var curTouches = this._currentTouches;
		for (var i = 0, n = curTouches.length; i < n; i++) {
			var info = curTouches[i];
			info.canvasX = info._x - elem_pos[0] + compinfo[1];
			info.canvasY = info._y - elem_pos[1] + compinfo[2];

			var clientXY = compinfo[0]._getClientXY(info.canvasX, info.canvasY);
			info.clientX = clientXY[0];
			info.clientY = clientXY[1];

			if (info.isfirst) {
				ret_info.firsttouchinfo = info;
			}

			if (info.time == this._current_time) {
				ret_info.changedtouchinfos.push(info);
			}
		}

		return ret_info;
	};

	_pTouchManager.updateTouchInputInfosCanvasXY = function (touchinputinfos, offsetX, offsetY) {
		if (!touchinputinfos) {
			return;
		}

		var len = touchinputinfos.length;
		for (var i = 0; i < len; i++) {
			var touchinputinfo = touchinputinfos[i];
			touchinputinfo.canvasX += offsetX;
			touchinputinfo.canvasY += offsetY;
		}
		;
	};

	_pTouchManager.updateTouchInputInfosClientXY = function (touchinputinfos, comp) {
		if (!touchinputinfos) {
			return;
		}

		var len = touchinputinfos.length;
		for (var i = 0; i < len; i++) {
			var touchinputinfo = touchinputinfos[i];
			var clientXY = comp._getClientXY(touchinputinfo.canvasX, touchinputinfo.canvasY);
			touchinputinfo.clientX = clientXY[0];
			touchinputinfo.clientY = clientXY[1];
		}
		;
	};

	_pTouchManager.getFirstTouchInputInfo = function (touchinputinfos) {
		if (!touchinputinfos) {
			return;
		}

		var len = touchinputinfos.length;
		for (var i = 0; i < len; i++) {
			var touchinputinfo = touchinputinfos[i];
			if (touchinputinfo.isfirst) {
				return touchinputinfo;
			}
		}
		;

		return null;
	};

	_pTouchManager.getAngle = function (x1, y1, x2, y2) {
		if (x1 == x2 && y1 == y2) {
			return 0;
		}

		x2 -= x1;
		y2 -= y1;

		var dA = (x2 * x2) + (y2 * y2);

		var range = Math.sqrt(dA);
		var cosVal = x2 / range;
		var sinVal = y2 / range;

		var angle = Math.acos(cosVal);

		angle *= 180.0;
		angle /= Math.PI;

		if (sinVal < 0) {
			angle = 360 - angle;
		}

		while (angle > 360.0) {
			angle -= 360.0;
		}
		if (angle > 180.0) {
			angle = 360.0 - angle;
		}

		return angle;
	};

	_pTouchManager.getRange = function (x1, y1, x2, y2) {
		if (x1 == x2 && y1 == y2) {
			return 0;
		}

		x2 -= x1;
		y2 -= y1;
		return Math.sqrt((x2 * x2) + (y2 * y2));
	};

	_pTouchManager.checkAvailableScrollableComp = function (elem) {
		if (!elem) {
			return false;
		}

		var linkedcontrol = elem.linkedcontrol;
		if (!linkedcontrol && elem.parent) {
			linkedcontrol = elem.parent.linkedcontrol;
			if ((elem instanceof nexacro.InputElement) && linkedcontrol._is_subcontrol) {
				linkedcontrol = linkedcontrol._getRootComponent(linkedcontrol);
			}
		}

		if (!linkedcontrol) {
			while (elem && !linkedcontrol) {
				elem = elem.parent;
				if (elem) {
					linkedcontrol = elem.linkedcontrol;
				}
			}
			if (!linkedcontrol) {
				return false;
			}
		}

		var comp = linkedcontrol;
		var dlgcode = comp ? comp._getDlgCode() : null;
		if (dlgcode) {
			if (dlgcode.want_touchstart) {
				return true;
			}
			if (dlgcode.want_touchmove) {
				return true;
			}
		}

		while (comp && !comp._is_application) {
			var s;
			s = comp.hscrollbar;
			if (s && s.enable && s._isVisible() && (s.pos < s.max || s.pos > s.min)) {
				return true;
			}

			s = comp.vscrollbar;
			if (s && s.enable && s._isVisible() && (s.pos < s.max || s.pos > s.min)) {
				return true;
			}

			if (comp._is_form && comp.stepcontrol && comp.stepcontrol.stepcount > 1) {
				return true;
			}

			comp = comp.parent;
		}

		return false;
	};

	delete _pTouchManager;

	nexacro.LayoutManager = function (context) {
		this.context = context;

		this._layout_list = [];
	};
	var _pLayoutManager = nexacro._createPrototype(nexacro.Object, nexacro.LayoutManager);
	nexacro.LayoutManager.prototype = _pLayoutManager;
	_pLayoutManager._type_name = "LayoutManager";

	_pLayoutManager.checkValid = function (form, szContainer) {
		if (!form) {
			return -1;
		}



		var layout_list = form._layout_list;
		if (!layout_list) {
			return -1;
		}

		var layout_len = layout_list.length;
		if (layout_len == 0) {
			return -1;
		}

		if (layout_len >= 1 && layout_list[layout_len - 1].name != "default") {
			if (form._default_layout.screenid == "" || form._default_layout.screenid.indexOf(application._curscreen.name) >= 0) {
				layout_list.add_item("default", form._default_layout);
				layout_len++;
			}
		}

		if (layout_len <= 1) {
			return 0;
		}

		var pt_min_x = -1, pt_min_y = -1, correct = -1, layout = null, distance = -1, distance_y = -1, correct_org = -1, count = 0, over_layout_width = [], over_layout_height = [];
		var tmp_correct = -1;
		var tmp_width = 0;

		var cur_screenid = nexacro._getCurrentScreenID();

		tmp_correct = layout_len - 1;
		tmp_width = layout_list[tmp_correct].width;
		tmp_height = layout_list[tmp_correct].height;

		for (var i = 0; i < layout_len; i++) {
			if (i == (layout_len - 1)) {
				correct_org = correct;
			}
			layout = layout_list[i];

			if (layout.screenid.length > 0) {
				var layout_screenid_list = layout.screenid.split(",");
				if (layout_screenid_list.indexOf(cur_screenid) < 0) {
					continue;
				}
			}

			if (layout.width > szContainer.cx) {
				if (tmp_width > layout.width) {
					tmp_correct = i;
					tmp_width = layout.width;
				}
				continue;
			}

			if (tmp_width == layout.width && tmp_height > layout.height) {
				tmp_correct = i;
				tmp_height = layout.height;
				continue;
			}


			distance = szContainer.cx - layout.width;
			distance_y = szContainer.cy - layout.height;

			if (pt_min_x == -1 || pt_min_x >= distance) {
				if (pt_min_x == distance) {
					if (pt_min_y < 0) {
						if (distance_y < 0) {
							if (pt_min_y < distance_y) {
								pt_min_y = distance_y;
								correct = i;
							}
						}
						else {
							pt_min_y = distance_y;
							correct = i;
						}
					}
					else {
						if (distance_y < 0) {
						}
						else {
							if (pt_min_y > distance_y) {
								pt_min_y = distance_y;
								correct = i;
							}
						}
					}
				}
				else {
					if (distance >= 0) {
						pt_min_x = distance;
						pt_min_y = distance_y;
						correct = i;
					}
					else {
						over_layout_width.push({
							idx : i, 
							w : distance
						});
						over_layout_height.push({
							idx : i, 
							w : distance_y
						});
					}
				}
			}
		}


		if (correct == -1) {
			var len = over_layout_width.length;
			var index = 0;

			for (var i = 0; i < len; i++) {
				index = over_layout_width[i].idx;
				layout = form._layout_list[index];

				distance = Math.abs(over_layout_width[i].w);
				distance_y = Math.abs(over_layout_height[i].h);
				if (pt_min_x == -1 || pt_min_x >= distance) {
					if (pt_min_x == distance) {
						if (pt_min_y < 0) {
							if (distance_y < 0) {
								if (pt_min_y < distance_y) {
									pt_min_y = distance_y;
									correct = i;
								}
							}
							else {
								pt_min_y = distance_y;
								correct = i;
							}
						}
						else {
							if (distance_y < 0) {
							}
							else {
								if (pt_min_y > distance_y) {
									pt_min_y = distance_y;
									correct = i;
								}
							}
						}
					}
					else {
						pt_min_x = distance;
						pt_min_y = distance_y;
						correct = i;
					}
				}
			}
		}


		if (correct == -1) {
			if (tmp_correct > -1) {
				return tmp_correct;
			}

			return -1;
		}

		else if (correct == form._layout_list.length - 1) {
			if (correct > -1) {
				return correct;
			}
			else if (correct_org == -1) {
				return -1;
			}
		}


		var correct_layout = form._layout_list[correct];
		if (correct_layout == null) {
			return -1;
		}

		if (form._cur_real_layout == correct_layout.name) {
			return -2;
		}

		return correct;
	};

	_pLayoutManager.changeLayout = function (form, layout) {
		var current_layout = null, def_layout = null;


		if (form == null || layout == null) {
			return;
		}

		if (form._cur_real_layout == layout.name) {
			return;
		}

		if (form._current_layout_name == layout.name) {
			form._cur_real_layout = form._current_layout_name;
			return;
		}



		if (form._current_layout_name == "") {
			form._current_layout_name = "default";
		}


		if (form._current_layout_name == "default") {
			current_layout = form._default_layout;
		}
		else {
			current_layout = form._layout_list.get_item(form._current_layout_name);
			def_layout = form._default_layout;
		}

		if (current_layout == null) {
			return;
		}

		this.loadLayout(form, current_layout, layout, def_layout);

		form._current_layout_name = layout.name;
		form._cur_real_layout = layout.name;
	};

	_pLayoutManager.loadLayout = function (form, cur, target, def) {
		var old_stepindex = -1, old_stepcount = 0;
		var new_stepindex = -1, new_stepcount = 0;
		if (cur) {
			old_stepindex = cur.stepindex;
			old_stepcount = cur.stepcount;
		}
		if (target) {
			new_stepindex = target.stepindex;
			new_stepcount = target.stepcount;

			if (form._layout_list.length > 0) {
				form.on_fire_onbeforelayoutchange(form, "onbeforelayoutchange", cur, target.name);
			}
		}

		form._on_prepare_stepcontents(old_stepcount, old_stepindex, new_stepcount, new_stepindex);

		if (form._layout_list.length > 0) {
			if (def && def.change_fn) {
				def.change_fn.call(this, form);
			}
			if (target && target.change_fn) {
				target.change_fn.call(this, form);
			}
		}

		form._on_refresh_stepcontents(old_stepcount, old_stepindex, new_stepcount, new_stepindex);
	};

	_pLayoutManager.getNormalLayout = function (form) {
		var len = form._layout_list.size();
		for (var i = 0; i < len; i++) {
			if (this.GetLayoutName(form, i) == "default") {
				return form._layout_list.get_item(i);
			}
		}

		return undefined;
	};

	_pLayoutManager.getLayoutName = function (form, nIdx) {
		if (form == null) {
			return "";
		}

		return form._layout_list[nIdx].name;
	};

	_pLayoutManager.clearLayout = function (form) {
		if (form == null) {
			return;
		}
		var layout_list = form._layout_list;
		var len = layout_list.length;
		for (var i = 0; i < len; i++) {
			var layout = layout_list.get_item(i);
			layout.destroy();
		}
		form._layout_list.clear();
	};

	_pLayoutManager.getCurrentLayout = function (form) {
		var idx = this.checkValid(form, {
			cx : form._adjust_width, 
			cy : form._adjust_height
		});
		var layout = form._layout_list[form._current_layout_name];

		return layout || form._default_layout;
	};

	_pLayoutManager.getStepCount = function (form) {
		if (!form) {
			return 0;
		}

		var current_layout = this.getCurrentLayout(form);
		if (current_layout) {
			return current_layout.stepcount;
		}
		else {
			return 0;
		}
	};
	_pLayoutManager.getCurrStepIndex = function (form) {
		if (!form) {
			return 0;
		}

		var current_layout = this.getCurrentLayout(form);
		if (current_layout) {
			return current_layout.stepindex;
		}
		else {
			return 0;
		}
	};

	_pLayoutManager.setStepIndex = function (form, index) {
		if (!form) {
			return;
		}

		var current_layout = this.getCurrentLayout(form);
		var stepcount = this.getStepCount(form);

		if (index < 0) {
			index = current_layout.stepindex;
		}
		if (stepcount < 0) {
			return;
		}

		current_layout.stepindex = index;
	};

	_pLayoutManager.__onbeforelayoutchange = function (obj, e) {
		if (obj) {
			var current_layout = this.getCurrentLayout(obj);
			obj._updateStepManager(current_layout);
		}
	};

	_pLayoutManager.__onlayoutchanged = function (obj, e) {
		var stepmanager = obj._stepmanager;
		if (stepmanager) {
			stepmanager.initPositionStep();
		}
	};
	delete _pLayoutManager;

	nexacro.Window = function (id, parent, is_main) {
		this.id = this.name = id;
		this.parent = parent;
		this.frame = null;
		this.left = 0;
		this.top = 0;
		this.width = 0;
		this.height = 0;
		this.clientWidth = 0;
		this.clientHeight = 0;

		this._handle = null;
		this._doc = null;
		this._dest_doc = null;
		this._dest_handle = null;
		this._is_window = true;
		this._is_alive = true;
		this._is_main = (is_main || false);
		this._Init_sysevent_flag = false;
		this._prepared_flag = false;

		this._custom_node_left = 0;
		this._custom_node_top = 0;
		this._custom_node_id = null;
		this._custom_node = null;

		this._offset_client_width = -1;
		this._offset_client_height = -1;

		this._gap_client_width = 0;
		this._gap_client_height = 0;
		this._is_killfocusing = false;

		this._focus_list = null;
		this._child_list = new nexacro.Collection();
		this._lock_list = [];
		this._locker_list = [];
		this._disable_ref = 0;
		this._capture_complist = [];

		this._last_focused_elem = null;
		this._accessibility_last_focused_comp = null;

		this._cur_screen_pos = {
			"x" : undefined, 
			"y" : undefined
		};
		this._cur_client_pos = {
			"x" : undefined, 
			"y" : undefined
		};
		this._cur_touch_elem = null;
		this._cur_ldown_elem = null;
		this._cur_rdown_elem = null;
		this._cur_mdown_elem = null;
		this._curWindowX = null;
		this._curWindowY = null;
		this._currentTouchEvents = [];

		this._touched_elem = null;

		this._modal_frame_stack = [];
		this._ignore_close_confirm = false;
		this._postmsg_data_que = [];
		this._block_deactivate = false;

		this._on_sys_message = this._on_default_sys_message;
		this._on_sys_lbuttondown = this._on_default_sys_lbuttondown;
		this._on_sys_rbuttondown = this._on_default_sys_rbuttondown;
		this._on_sys_lbuttonup = this._on_default_sys_lbuttonup;
		this._on_sys_rbuttonup = this._on_default_sys_rbuttonup;
		this._on_sys_mouseup = this._on_default_sys_mouseup;
		this._on_sys_mousedown = this._on_default_sys_mousedown;
		this._on_sys_mouseenter = this._on_default_sys_mouseenter;
		this._on_sys_mouseleave = this._on_default_sys_mouseleave;
		this._on_sys_mousemove = this._on_default_sys_mousemove;
		this._on_sys_mousewheel = this._on_default_sys_mousewheel;
		this._on_sys_dragenter = this._on_default_sys_dragenter;
		this._on_sys_dragover = this._on_default_sys_dragover;
		this._on_sys_dragleave = this._on_default_sys_dragleave;
		this._on_sys_drop = this._on_default_sys_drop;
		this._on_sys_keydown = this._on_default_sys_keydown;
		this._on_sys_keypress = this._on_default_sys_keypress;
		this._on_sys_keyup = this._on_default_sys_keyup;
		this._on_sys_dblclick = this._on_default_sys_dblclick;
		this._on_sys_contextmenu = this._on_default_sys_contextmenu;

		this._on_sys_resize = this._on_default_sys_resize;
		this._on_sys_move = this._on_default_sys_move;
		this._on_sys_getminmaxinfo = this._on_default_sys_getminmaxinfo;
		this._on_sys_activate = this._on_default_sys_activate;
		this._on_sys_deactivate = this._on_default_sys_deactivate;
		this._on_sys_beforeclose = this._on_default_sys_beforeclose;
		this._on_sys_close = this._on_default_sys_close;

		this._on_sys_reload = this._on_default_sys_reload;
		this._on_sys_syscommand = this._on_default_sys_syscommand;

		this._on_sys_touchstart = this._on_default_sys_touchstart;
		this._on_sys_touchmove = this._on_default_sys_touchmove;
		this._on_sys_touchend = this._on_default_sys_touchend;
		this._on_sys_touchcancel = this._on_default_sys_touchcancel;

		this._on_sys_load = this._on_default_sys_load;
		this._on_sys_orientationchange = this._on_default_sys_orientationchange;

		this._on_sys_accessibilitygesture = this._on_default_sys_accessibilitygesture;
		this._on_sys_accessibilityhover = this._on_default_sys_accessibilityhover;
	};

	var _pWindow = nexacro._createPrototype(nexacro.Object, nexacro.Window);
	nexacro.Window.prototype = _pWindow;
	_pWindow._type_name = "Window";

	_pWindow.attachHandle = function (_handle) {
		if (!this._handle) {
			var custom_node = this._custom_node;
			this._handle = _handle;
			this._doc = this._dest_doc = nexacro._getWindowDocumentHandle(_handle);
			this._dest_handle = nexacro._getWindowDestinationHandle(_handle, this._custom_node_id);

			this.left = custom_node ? 0 : nexacro._getWindowHandlePosX(_handle);
			this.top = custom_node ? 0 : nexacro._getWindowHandlePosY(_handle);
			this.width = nexacro._getWindowHandleOuterWidth(_handle, this._custom_node_id);
			this.height = nexacro._getWindowHandleOuterHeight(_handle, this._custom_node_id);
			var clientWidth = nexacro._getWindowHandleClientWidth(_handle, this._custom_node_id);
			var clientHeight = nexacro._getWindowHandleClientHeight(_handle, this._custom_node_id);
			this.clientWidth = (clientWidth == 0) ? this.width : clientWidth;
			this.clientHeight = (clientHeight == 0) ? this.height : clientHeight;
			this._gap_client_width = this.width - this.clientWidth;
			this._gap_client_height = this.height - this.clientHeight;
		}
	};

	_pWindow.attachFrame = function (frame, refresh_flag) {
		this.frame = frame;
		if (refresh_flag) {
			this._onPrepareWindowHandle();
		}
	};

	_pWindow._setSystemMenuResizable = function (resizable) {
		nexacro._setSystemMenuResizable(this._handle, resizable);
	};

	_pWindow._procSysCommand = function (command) {
		nexacro._procSysCommand(this._handle, command);
	};

	_pWindow._postMessage = function (target_comp, id, func, userdata) {
		var data = {
			id : id, 
			userdata : userdata, 
			target : target_comp, 
			func : func
		};
		this._postmsg_data_que.push(data);
		nexacro._postMessage(id, this, target_comp);
	};

	_pWindow._onPrepareWindowHandle = function () {
		if (!this._prepared_flag) {
			this._prepared_flag = true;

			if (this.frame) {
				this.frame.on_created();
			}
		}
	};

	_pWindow.refresh = function () {
		if (this._handle && this._prepared_flag && this.frame) {
			this.frame.on_refresh();
		}
	};


	_pWindow.setLinkedWindow = function (_handle) {
		nexacro._setLinkedWindow(_handle, this);
		this.attachHandle(_handle);
	};

	_pWindow.addChild = function (childwin) {
		this._child_list.add_item(childwin.name, childwin);
	};

	_pWindow.create = function (_parent, name, width, height, left, top, resizable, layered, taskbar) {
		var _handle = null;
		if (_parent) {
			_handle = _parent._handle;
			_parent._child_list.add_item(name, this);
		}
		nexacro._createWindowHandle(_parent, this, name, left, top, width, height, resizable, layered, taskbar, this._is_main);
	};


	_pWindow.createModal = function (_parent, name, width, height, left, top, resizable, layered, lockmode) {
		var _handle = null;
		if (_parent) {
			_handle = _parent._handle;
			_parent._child_list.add_item(name, this);
		}
		return nexacro._createModalWindowHandle(_parent, this, name, left, top, width, height, resizable, layered, lockmode, this.frame ? this.frame._delayed_create_window : false);
	};

	_pWindow.createModalAsync = function (_parent, name, width, height, left, top, resizable, layered, lockmode) {
		var _handle = null;
		if (_parent) {
			_handle = _parent._handle;
			_parent._child_list.add_item(name, this);
		}

		var root_win = this;
		while (root_win.parent) {
			root_win = root_win.parent;
		}

		if (_parent) {
			this._lock_list[0] = root_win;
		}
		else {
			this._lock_list[0] = this.frame._runbase_window;
		}

		if (lockmode == 1) {
			var _popupframes = application.popupframes;
			var _popup_win = null;
			var _popup_root = null;

			for (var i = 0, n = _popupframes.length; i < n; i++) {
				popup_win = _popupframes[i]._window;
				if (popup_win == this) {
					continue;
				}

				_popup_root = popup_win;

				while (_popup_root.parent) {
					_popup_root = _popup_root.parent;
				}

				if (_popup_root == root_win) {
					continue;
				}

				if (nexacro._indexOf(this._lock_list, _popup_root) < 0) {
					this._lock_list.push(_popup_root);
				}
			}
		}

		nexacro._createModalAsyncWindowHandle(_parent, this, name, left, top, width, height, resizable, layered, lockmode);
	};

	_pWindow.destroy = function () {
		if (!this._is_alive) {
			return;
		}

		this._destroyVisiblePart();
		this._destroyInternalPart();
	};

	_pWindow._destroyVisiblePart = function () {
		if (!this._is_alive) {
			return;
		}

		this._is_alive = false;

		this._closeChildWindows();

		if (this._lock_list.length > 0) {
			var locklen = this._lock_list.length;
			for (var i = locklen - 1; i >= 0; i--) {
				var locked_window = this._lock_list[i];
				if (!locked_window || !locked_window.frame) {
					continue;
				}
				nexacro._setWindowHandleLock(locked_window._handle, false, this._handle, true);
			}
		}

		if (this._handle) {
			var repeatInfo = nexacro._cur_repeat_info;
			if (repeatInfo && repeatInfo.targetwin == this) {
				if (repeatInfo._timer) {
					nexacro._clearSystemTimer(this._handle, repeatInfo._timer);
				}
			}


			nexacro._closeWindowHandle(this._handle);
		}
	};

	_pWindow._destroyInternalPart = function () {
		if (this.parent) {
			this.parent._child_list.delete_item(this.id);
		}

		var modal_frame_stack = this._modal_frame_stack;
		var modal_frame_stack_len = modal_frame_stack.length;
		for (var i = modal_frame_stack_len - 1; i >= 0; i--) {
			var modal_frame_info = modal_frame_stack[i];
			var frame = modal_frame_info[0];
			if (frame._is_alive) {
				frame._destroy();
			}
		}

		if (this.frame) {
			nexacro._unregisterPopupFrame(this.frame.id);
			if (!this.frame._is_main) {
				this.frame._on_close();
			}

			if (this.frame._is_alive) {
				this.frame._destroy();
			}
		}

		if (!this.frame._is_popup_frame) {
			application._removeProtocols();
		}

		nexacro._destroyManagerFrame(this._handle);

		this._doc = this._dest_doc = null;
		this._dest_handle = null;
		this.parent = null;
		this._custom_node = null;
		this._postmsg_data_que = null;
		this._is_popup_window = false;

		this._on_sys_message = null;
		this._on_sys_lbuttondown = null;
		this._on_sys_rbuttondown = null;
		this._on_sys_lbuttonup = null;

		this._on_sys_drag_lbuttonup = null;

		this._on_sys_rbuttonup = null;
		this._on_sys_mouseup = null;
		this._on_sys_mousedown = null;
		this._on_sys_mouseenter = null;
		this._on_sys_mouseleave = null;
		this._on_sys_mousemove = null;

		this._on_sys_drag_mousemove = null;

		this._on_sys_mousewheel = null;

		this._on_sys_dragenter = null;
		this._on_sys_dragmove = null;
		this._on_sys_dragleave = null;
		this._on_sys_drop = null;

		this._on_sys_keydown = null;
		this._on_sys_keypress = null;
		this._on_sys_keyup = null;
		this._on_sys_click = null;
		this._on_sys_dblclick = null;
		this._on_sys_contextmenu = null;
		this._on_sys_resize = null;
		this._on_sys_move = null;
		this._on_sys_activate = null;
		this._on_sys_deactivate = null;

		this._on_sys_getminmaxinfo = null;
		this._on_sys_reload = null;
		this._on_sys_syscommand = null;
		this._on_sys_load = null;
		this._on_sys_orientationchange = null;

		this._on_sys_accessibilitygesture = null;
		this._on_sys_accessibilityhover = null;
	};

	_pWindow.moveBy = function (dx, dy) {
		if (this._handle && dx && dy) {
			var l = this.left + (dx | 0);
			var t = this.top + (dy | 0);
			nexacro._setWindowHandlePos(this._handle, l, t);
			this.left = nexacro._getWindowHandlePosX(this._handle, this._custom_node_id);
			this.top = nexacro._getWindowHandlePosY(this._handle, this._custom_node_id);
		}
	};

	_pWindow.moveTo = function (l, t) {
		if (this._handle) {
			if (l === undefined || l === null) {
				l = this.left;
			}
			if (t === undefined || t === null) {
				t = this.top;
			}
			nexacro._setWindowHandlePos(this._handle, l, t);
			this.left = nexacro._getWindowHandlePosX(this._handle, this._custom_node_id);
			this.top = nexacro._getWindowHandlePosY(this._handle, this._custom_node_id);
		}
	};

	_pWindow.setArea = function (l, t, w, h) {
		if (this._handle) {
			if (l === undefined || l === null) {
				l = this.left;
			}
			if (t === undefined || t === null) {
				t = this.top;
			}
			if (w === undefined || w === null) {
				w = this.width;
			}
			if (h === undefined || h === null) {
				h = this.height;
			}
			nexacro._setWindowHandleArea(this._handle, l, t, w, h);
			this.left = nexacro._getWindowHandlePosX(this._handle, this._custom_node_id);
			this.top = nexacro._getWindowHandlePosY(this._handle, this._custom_node_id);
			this.width = nexacro._getWindowHandleOuterWidth(this._handle, this._custom_node_id);
			this.height = nexacro._getWindowHandleOuterHeight(this._handle, this._custom_node_id);
			this.clientWidth = nexacro._getWindowHandleClientWidth(this._handle, this._custom_node_id);
			this.clientHeight = nexacro._getWindowHandleClientHeight(this._handle, this._custom_node_id);
			this._gap_client_width = this.width - this.clientWidth;
			this._gap_client_height = this.height - this.clientHeight;
		}
	};
	_pWindow.setSize = function (w, h) {
		if (this._handle) {
			if (w === undefined || w === null) {
				w = this.width;
			}
			if (h === undefined || h === null) {
				h = this.height;
			}
			nexacro._setWindowHandleSize(this._handle, w, h);
			this.width = nexacro._getWindowHandleOuterWidth(this._handle, this._custom_node_id);
			this.height = nexacro._getWindowHandleOuterHeight(this._handle, this._custom_node_id);
			this.clientWidth = nexacro._getWindowHandleClientWidth(this._handle, this._custom_node_id);
			this.clientHeight = nexacro._getWindowHandleClientHeight(this._handle, this._custom_node_id);
			this._gap_client_width = this.width - this.clientWidth;
			this._gap_client_height = this.height - this.clientHeight;
		}
	};

	_pWindow.setZIndex = function (zindex) {
		if (this.zindex != zindex) {
			this.zindex = zindex;
			var _handle = this._handle;
			if (_handle) {
				nexacro._setWindowHandleZIndex(_handle, zindex);
			}
		}
	};

	_pWindow.getLeft = function () {
		if (this._handle) {
			this.left = nexacro._getWindowHandlePosX(this._handle, this._custom_node_id);
		}
		return this.left;
	};
	_pWindow.getTop = function () {
		if (this._handle) {
			this.top = nexacro._getWindowHandlePosY(this._handle, this._custom_node_id);
		}
		return this.top;
	};
	_pWindow.getWidth = function () {
		return this.width;
	};
	_pWindow.getHeight = function () {
		return this.height;
	};

	_pWindow.getClientWidth = function () {
		return this.clientWidth;
	};
	_pWindow.getClientHeight = function () {
		return this.clientHeight;
	};

	_pWindow.setVisible = function (visible) {
	};


	_pWindow.getActiveFrame = function () {
		var frame = this._getLastModalFrame();
		if (frame) {
			return frame;
		}

		frame = this.frame;
		while (frame && frame.getActiveFrame) {
			frame = frame.getActiveFrame();
		}
		return frame;
	};

	_pWindow.getCurrentFocusPaths = function () {
		return this._focus_list;
	};

	_pWindow.addCurrentFocusPaths = function (obj) {
		if (this._focus_list == null) {
			this._focus_list = [];
		}
		this._focus_list.push(obj);
	};
	_pWindow.clearCurrentFocusPaths = function () {
		if (this._focus_list) {
			var obj = this._focus_list.pop();
			while (obj) {
				obj = null;
				obj = this._focus_list.pop();
			}
			this._focus_list.length = 0;
		}
	};

	_pWindow._removeFromCurrentFocusPath = function (obj, clear_last_focus, new_focus, new_refer_focus) {
		if (clear_last_focus === undefined) {
			clear_last_focus = true;
		}
		var idx = this._indexOfCurrentFocusPaths(obj);

		if (idx > -1 || (idx == -1 && obj === null)) {
			var min_idx = (idx > -1) ? idx : 0;
			var focuspath_len = this._getCurrentFocusPathsLength() - 1;

			for (var i = focuspath_len; i >= min_idx; i--) {
				var comp = this._focus_list[i];
				if (comp) {
					if (comp._is_alive && !comp._isSelected()) {
						if (comp._is_subcontrol) {
							var tmp_comp = comp;
							var alive = true;

							while (tmp_comp) {
								if (tmp_comp._is_alive == false) {
									alive = false;
									break;
								}
								tmp_comp = tmp_comp.parent;
							}

							if (alive) {
								comp._stat_change("notfocus", "normal");
							}
						}
						else {
							if (comp._is_alive) {
								comp._stat_change("notfocus", "normal");
							}
						}
					}
					if (idx > -1) {
						--this._focus_list.length;
					}

					if (comp._is_alive && comp._on_killfocus) {
						comp._on_killfocus(new_focus, new_refer_focus);
					}

					if (comp.parent && clear_last_focus === true) {
						if (i > min_idx || comp.parent._last_focused == comp) {
							comp.parent._last_focused = null;
						}
					}
				}
			}
		}
	};
	_pWindow._indexOfCurrentFocusPaths = function (obj) {
		if (this._focus_list) {
			return nexacro._indexOf(this._focus_list, obj);
		}

		return -1;
	};

	_pWindow._getCurrentFocusPathsLength = function () {
		if (this._focus_list) {
			return this._focus_list.length;
		}
		return 0;
	};

	_pWindow.findComponent = function (elem, x, y) {
		if (x === undefined && y === undefined) {
			var tmp = elem;
			while (tmp && !tmp._is_component) {
				tmp = tmp.parent;
			}
			return tmp;
		}
		else {
			if (!elem) {
				return [elem, x, y];
			}
			var tmp = elem;
			while (tmp && !tmp._is_component) {
				x += tmp.left;
				y += tmp.top;
				x -= tmp._scroll_left || 0;
				y -= tmp._scroll_top || 0;
				tmp = tmp.parent;
			}
			if (!tmp) {
				return [tmp, x, y];
			}

			var control_elem = tmp._control_element;
			if (control_elem) {
				if (elem instanceof nexacro.GridCellTextContainerElement) {
					x -= elem.left;
					y -= elem.top;
				}

				x -= control_elem.left;
				y -= control_elem.top;

				if ((elem instanceof nexacro.ControlElementBase) == false && (elem instanceof nexacro.GridCellTextContainerElement) == false) {
					x += control_elem.padding ? control_elem.padding.left : 0;
					y += control_elem.padding ? control_elem.padding.top : 0;

					x += control_elem.border ? control_elem.border._left_width : 0;
					y += control_elem.border ? control_elem.border._top_width : 0;
				}
			}
			if (tmp instanceof nexacro.Form) {
				x += elem._scroll_left ? elem._scroll_left : 0;
				y += elem._scroll_top ? elem._scroll_top : 0;
			}
			return [tmp, x, y];
		}
	};

	_pWindow._findComponentForEvent = function (elem, x, y) {
		if (x === undefined && y === undefined) {
			var tmp = elem;
			while (tmp) {
				if (tmp && tmp._is_component) {
					if (tmp.visible && tmp._isEnable() && tmp.enableevent) {
						break;
					}
				}
				tmp = tmp.parent;
			}
			return tmp;
		}
		else {
			if (!elem) {
				return [elem, x, y];
			}
			var tmp = elem;
			var is_passed = false;
			while (tmp) {
				if (!tmp._is_component) {
					x += tmp.left;
					y += tmp.top;
					x -= tmp._scroll_left || 0;
					y -= tmp._scroll_top || 0;

					tmp = tmp.parent;
				}
				else {
					if (tmp.visible && tmp._isEnable() && tmp.enableevent) {
						break;
					}
					else {
						is_passed = true;
					}
					x = y = 0;
					tmp = tmp._control_element._parent_elem;
				}
			}
			if (!tmp) {
				return [tmp, x, y];
			}
			var control_elem = tmp._control_element;
			if (control_elem) {
				x -= control_elem.left;
				y -= control_elem.top;

				if ((elem instanceof nexacro.ControlElementBase) == false) {
					x += control_elem.padding ? control_elem.padding.left : 0;
					y += control_elem.padding ? control_elem.padding.top : 0;
				}
			}
			if (is_passed) {
				return [tmp, x, y, true];
			}
			return [tmp, x, y];
		}
	};

	_pWindow._flashWindow = function (type, count, interval) {
		return nexacro._flashWindow(this._handle, type, count, interval);
	};

	_pWindow._setChildWindowFocus = function (win_handle) {
		if (win_handle) {
			win_handle.focus();
		}
	};

	_pWindow._closeChildWindows = function (is_close_all) {
		var child_win = null;
		var child_len = 0;

		if (is_close_all) {
			var _popupframes = application.popupframes;
			child_len = _popupframes.length;

			for (var i = child_len - 1; i >= 0; i--) {
				var child_win = _popupframes[i]._window;
				if (child_win && child_win.frame && child_win.frame._is_alive) {
					child_win._ignore_close_confirm = true;
					child_win.frame._destroy();
				}
			}
		}
		else {
			child_len = this._child_list.length;
			for (var i = child_len - 1; i >= 0; i--) {
				var child_win = this._child_list[i];
				if (!child_win || child_win.parent != this) {
					continue;
				}

				if (child_win.frame && child_win.frame._is_alive) {
					child_win._ignore_close_confirm = true;
					child_win.frame._destroy();
				}
			}
		}
	};

	_pWindow._setTitleText = function (titletext) {
		if (this._handle) {
			return nexacro._setWindowHandleText(this._handle, titletext);
		}
	};

	_pWindow._setStatusText = function (statustext) {
		if (this._handle) {
			return nexacro._setWindowHandleStatusText(this._handle, statustext);
		}
	};

	_pWindow._resetScroll = function (accessibilityFocusId) {
		var form = application.getActiveForm();
		if (form) {
			var focus_comp;
			if (accessibilityFocusId == undefined) {
				focus_comp = form.getFocus();
			}
			else {
				var _window = form._getWindow();
				focus_comp = _window._accessibility_last_focused_comp;
			}

			if (focus_comp) {
				focus_comp._resetScrollPos(focus_comp, focus_comp._adjust_left, focus_comp._adjust_top, focus_comp._adjust_left + focus_comp._adjust_width, focus_comp._adjust_top + focus_comp._adjust_height);

				if (nexacro._enableaccessibility) {
					if (nexacro._accessibilitytype == 5) {
						focus_comp._setAccessibilityNotifyEvent();
					}
				}
			}
		}
	};

	_pWindow._setCaptureLock = function (comp, capture_mouse, capture_key) {
		var ar = this._capture_complist;
		if (ar.length > 0) {
			var last_capture_info = ar[ar.length - 1];

			if (last_capture_info[0] instanceof nexacro.WaitComponent) {
				ar.length = ar.length + 1;
				ar[ar.length - 1] = ar[ar.length - 2];
				ar[ar.length - 2] = [comp, capture_mouse, capture_key];
				return;
			}
		}

		ar.push([comp, capture_mouse, capture_key]);
	};

	_pWindow._releaseCaptureLock = function (comp) {
		var ar = this._capture_complist;
		var len = ar.length;
		for (var i = len - 1; i >= 0; i--) {
			if (ar[i][0] == comp) {
				ar[i][0] = null;
				ar.splice(i, 1);
				break;
			}
		}
	};

	_pWindow._setModalLock = function (modal_frame, overlaycolor) {
		var frame = this.frame;
		if (frame) {
			var elem = frame._control_element;
			if (elem) {
				this._on_modalLock();

				var zindex = nexacro._zindex_firstmodal;
				var modal_stack = this._modal_frame_stack;
				if (modal_stack.length > 0) {
					zindex = modal_stack[modal_stack.length - 1][1] + 1;
				}

				var ref_dest_handle;
				if (frame._waitcomp) {
					var waitcomp = frame._waitcomp;
					if (waitcomp._control_element && waitcomp._control_element._handle) {
						ref_dest_handle = waitcomp._control_element._handle;
					}
				}

				var modal_overlay_elem = frame._modal_overlay_elem = new nexacro.ModalOverlayElement(elem);
				modal_overlay_elem.setLinkedControl(frame);
				modal_overlay_elem.create(zindex, overlaycolor, ref_dest_handle);

				this._modal_frame_stack.push([frame, zindex, null]);

				elem._refreshForeground(elem._handle);
				frame.on_apply_pseudo(frame._pseudo);
			}
		}
	};

	_pWindow._setModalUnlock = function () {
		var frame = this.frame;
		if (frame) {
			var elem = frame._control_element;
			if (elem) {
				var modal_stack = this._modal_frame_stack;
				var modal_stack_len = modal_stack.length;
				var modal_info;
				for (var i = 0; i < modal_stack_len; i++) {
					modal_info = modal_stack[i];
					if (modal_info[0] == frame) {
						for (var j = i; j < modal_stack_len - 1; j++) {
							modal_stack[j] = modal_stack[j + 1];
						}
						modal_stack.length = modal_stack_len - 1;
						break;
					}
				}

				if (frame._modal_overlay_elem) {
					frame._modal_overlay_elem.destroy();
					frame._modal_overlay_elem = null;
				}

				elem._refreshForeground(elem._handle);
			}
		}
	};

	_pWindow._getCaptureComp = function (capture_mouse, capture_key, event_target_comp) {
		var ar = this._capture_complist;
		var len = ar.length;
		var comp;
		for (var i = len - 1; i >= 0; i--) {
			var info = ar[i];
			if (capture_mouse == true && info[1] == true) {
				comp = info[0];
				break;
			}
			if (capture_key == true && info[2] == true) {
				comp = info[0];
				break;
			}
		}

		if (comp) {
			if (comp._contains(event_target_comp)) {
				return event_target_comp;
			}
			return comp;
		}

		return null;
	};

	_pWindow._getLastModalFrame = function () {
		if (this._modal_frame_stack.length > 0) {
			var modal_info = this._modal_frame_stack[this._modal_frame_stack.length - 1];
			return modal_info[0];
		}

		return null;
	};

	_pWindow._getComponentLayerInfo = function (comp) {
		var form = comp ? comp._refform : null;
		var frame = form ? form.getOwnerFrame() : null;
		if (!frame) {
			return null;
		}

		frame = frame._getRootLayerFrame();
		var is_modal = (frame._window_type == 1 || frame._window_type == 4);

		var layer_info = {
		};
		layer_info.frame = frame;
		layer_info.is_modal = is_modal;
		layer_info.popup_zindex = nexacro._zindex_popup;

		var win = this;
		if (win._getRootWindow) {
			win = win._getRootWindow();
		}

		var modal_frame_stack = win._modal_frame_stack;
		layer_info.ref_first_modal_frame = (modal_frame_stack.length > 0) ? modal_frame_stack[0][0] : null;
		if (is_modal) {
			for (var i = 0, n = modal_frame_stack.length; i < n; i++) {
				if (modal_frame_stack[i][0] == frame) {
					layer_info.popup_zindex = modal_frame_stack[i][1];
					break;
				}
			}
		}

		return layer_info;
	};

	_pWindow._isActiveLayerComponent = function (comp) {
		var form = comp ? comp._refform : null;
		var frame = form ? form.getOwnerFrame() : null;
		if (!frame) {
			return false;
		}

		var win = this;
		if (win._getRootWindow) {
			win = win._getRootWindow();
		}

		frame = frame._getRootLayerFrame();
		var is_modal = (frame._window_type == 1 || frame._window_type == 4);

		var modal_frame_stack = win._modal_frame_stack;
		if (modal_frame_stack.length == 0) {
			return true;
		}

		if (frame == win._getLastModalFrame()) {
			return true;
		}

		return false;
	};

	_pWindow._on_default_sys_message = function (id) {
		if (id) {
			var arr = id.split("--boundary--");
			if (arr.length > 1) {
				var comp = nexacro._findComponentForID(arr[0]);
				if (comp) {
					comp.on_after_load(arr[1]);
				}
			}
		}

		var data = this._postmsg_data_que.shift();
		if (data) {
			var e = {
				id : data.id, 
				data : data.userdata
			};
			data.func.call(data.target, e);
		}
	};

	_pWindow._lbuttondown_wx = 0;
	_pWindow._lbuttondown_wy = 0;
	_pWindow._click_cancel = false;
	_pWindow._last_touchid = -1;

	_pWindow._on_default_sys_lbuttondown = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		nexacro._gap_client_height = screenY - windowY;
		nexacro._gap_client_width = screenX - windowX;

		var is_runbase = nexacro._setRunBaseWindow(this);

		this._lbuttondown_wx = windowX;
		this._lbuttondown_wy = windowY;
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		this._cur_ldown_elem = elem;

		if (elem && elem._is_track) {
			if (nexacro._current_popups.length > 0) {
				var is_capture = nexacro._current_popups[0]._track_capture;
				var comp = this.findComponent(elem, 0, 0);
				nexacro._checkClosePopupComponent(comp[0], false);
				var cur_popup = nexacro._current_popups[0];
				if (!is_capture) {
					this._click_cancel = false;
				}
				else if (!cur_popup) {
					this._click_cancel = true;
					return;
				}
			}
			else {
				this._click_cancel = false;
			}

			nexacro._setTrackInfo(this, elem, windowX, windowY);
		}
		else {
			var comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				if (nexacro._current_popups.length > 0) {
					var is_capture = nexacro._current_popups[0]._track_capture;
					nexacro._checkClosePopupComponent(comp[0], true);
					var cur_popup = nexacro._current_popups[0];
					if (!is_capture) {
						this._click_cancel = false;
					}
					else if (!cur_popup) {
						this._click_cancel = true;
						return;
					}
				}
				else {
					this._click_cancel = false;
				}
				var _win = comp[0]._getWindow();
				_win._curWindowX = windowX;
				_win._curWindowY = windowY;

				var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
				var canvasX = windowX - elem_pos[0] + comp[1];
				var canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
				var capture_comp = this._getCaptureComp(true, false, comp[0]);

				if (capture_comp && capture_comp._track_capture) {
					var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
					if (root_comp1 != root_comp2) {
						comp[0] = capture_comp;
					}
				}

				comp[0]._on_lbuttondown(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);

				if (nexacro.Browser == "Runtime" && !_win._cur_ldown_elem) {
					if (comp[0]._on_input_mouseup) {
						comp[0]._on_input_mouseup(elem);
					}
					this._on_default_sys_lbuttonup(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY);
				}
			}
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_touch_to_lbuttondown = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		nexacro._gap_client_height = screenY - windowY;
		nexacro._gap_client_width = screenX - windowX;

		var is_runbase = nexacro._setRunBaseWindow(this);

		this._lbuttondown_wx = windowX;
		this._lbuttondown_wy = windowY;
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		this._cur_ldown_elem = elem;

		if (elem && elem._is_track) {
			if (nexacro._current_popups.length > 0) {
				var is_capture = nexacro._current_popups[0]._track_capture;
				var comp = this.findComponent(elem, 0, 0);
				nexacro._checkClosePopupComponent(comp[0], false);
				var cur_popup = nexacro._current_popups[0];
				if (!is_capture) {
					this._click_cancel = false;
				}
				else if (!cur_popup) {
					this._click_cancel = true;
					return;
				}
			}
			else {
				this._click_cancel = false;
			}

			nexacro._setTrackInfo(this, elem, windowX, windowY);
		}
		else {
			var comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				if (nexacro._current_popups.length > 0) {
					var is_capture = nexacro._current_popups[0]._track_capture;
					nexacro._checkClosePopupComponent(comp[0], true);
					var cur_popup = nexacro._current_popups[0];
					if (!is_capture) {
						this._click_cancel = false;
					}
					else if (!cur_popup) {
						this._click_cancel = true;
						return;
					}
				}
				else {
					this._click_cancel = false;
				}
				var _win = comp[0]._getWindow();
				_win._curWindowX = windowX;
				_win._curWindowY = windowY;

				var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
				var canvasX = windowX - elem_pos[0] + comp[1];
				var canvasY = windowY - elem_pos[1] + comp[2];

				var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
				var capture_comp = this._getCaptureComp(true, false, comp[0]);

				if (capture_comp && capture_comp._track_capture) {
					var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
					if (root_comp1 != root_comp2) {
						comp[0] = capture_comp;
					}
				}

				comp[0]._on_touch_lbuttondown(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, false);

				return {
					cp : comp[0], 
					cX : canvasX, 
					cY : canvasY
				};
			}
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_lbuttondown = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_rbuttondown = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		nexacro._gap_client_height = screenY - windowY;
		nexacro._gap_client_width = screenX - windowX;

		var is_runbase = nexacro._setRunBaseWindow(this);
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		this._cur_rdown_elem = elem;
		var comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			if (nexacro._current_popups.length > 0) {
				var is_capture = nexacro._current_popups[0]._track_capture;
				nexacro._checkClosePopupComponent(comp[0]);
				var cur_popup = nexacro._current_popups[0];
				if (!is_capture) {
					this._click_cancel = false;
				}
				else if (!cur_popup) {
					this._click_cancel = true;
					return;
				}
			}
			else {
				this._click_cancel = false;
			}

			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}

			comp[0]._on_rbuttondown(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_rbuttondown = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};


	_pWindow._on_default_sys_lbuttonup = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		if (this._click_cancel) {
			this._click_cancel = false;
			return;
		}

		var is_runbase = nexacro._setRunBaseWindow(this);
		var dragInfo = nexacro._cur_drag_info;
		var repeatInfo = nexacro._cur_repeat_info;
		var trackInfo = nexacro._cur_track_info;
		var extratrackInfo = nexacro._cur_extra_track_info;
		var comp, elem_pos, canvasX, canvasY;
		var _is_drag = false, _is_text, _is_select, _is_click, _is_input, _is_track = false;
		var down_rootcomp = this.findComponent(this._cur_ldown_elem, 0, 0);

		var down_flag = false;
		if (down_rootcomp[0]) {
			down_rootcomp = down_rootcomp[0]._getRootComponent(down_rootcomp[0]);
			down_flag = true;
		}

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		if (elem && dragInfo && dragInfo.isDragging && dragInfo.targetwin == this) {
			comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				elem_pos = nexacro._getElementXYInWindow(elem._handle, this._custom_node_id);
				canvasX = windowX - elem_pos[0] + comp[1];
				canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				comp[0]._on_drop(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
				_is_drag = true;
			}
			if (nexacro.OS == "Windows" && nexacro.BrowserType == "Edge") {
				if (this._touched_elem) {
					this._touched_elem = null;
				}
			}
		}

		if (repeatInfo && repeatInfo.targetwin == this) {
			if (repeatInfo._timer) {
				var _handle = nexacro._getWindowHandle(this._handle);
				nexacro._clearSystemTimer(_handle, repeatInfo._timer);
			}
			repeatInfo.distX = windowX - repeatInfo.startX;
			repeatInfo.distY = windowY - repeatInfo.startY;
			repeatInfo.target._on_endrepeat(repeatInfo.refer_comp, repeatInfo.distX, repeatInfo.distY, repeatInfo.data);
			nexacro._cur_repeat_info = null;
		}

		if (trackInfo && trackInfo.targetwin == this) {
			trackInfo.distX = windowX - trackInfo.startX;
			trackInfo.distY = windowY - trackInfo.startY;
			trackInfo.target._on_endtrack(trackInfo.distX, trackInfo.distY, trackInfo.data);
			nexacro._cur_track_info = null;

			if (!down_rootcomp._is_frame && !down_rootcomp._is_form) {
				_is_track = true;
			}
		}

		if (extratrackInfo) {
			extratrackInfo.distX = windowX - extratrackInfo.startX;
			extratrackInfo.distY = windowY - extratrackInfo.startY;
			extratrackInfo.target._on_end_extratrack(extratrackInfo.distX, extratrackInfo.distY, extratrackInfo.data);
			nexacro._cur_extra_track_info = null;
		}

		var upelem = elem;
		elem = this._cur_ldown_elem;
		comp = this.findComponent(elem, 0, 0);

		if (comp && comp[0]) {
			elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			canvasX = windowX - elem_pos[0] + comp[1];
			canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			var component = comp[0];
			if (component._is_subcontrol) {
				component = component._getFromComponent(component);
			}

			comp[0]._on_lbuttonup(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, upelem);

			if (!component.onlbuttonup || (component.onlbuttonup && !component.onlbuttonup.defaultprevented)) {
				var downcomp = comp;
				var upcomp = this.findComponent(upelem, 0, 0);
				if (upcomp[0] && upcomp[0]._is_main && downcomp != upcomp) {
					upcomp = comp;
				}

				if (downcomp && downcomp[0] && upcomp && upcomp[0] && (downcomp[0] == upcomp[0] || (downcomp[0] != upcomp[0] && (downcomp[0].parent == upcomp[0] || downcomp[0] == upcomp[0].parent)))) {
					elem_pos = nexacro._getElementXYInWindow((upcomp.length == 3) ? upelem._handle : upcomp[0]._control_element._handle);
					canvasX = windowX - elem_pos[0] + upcomp[1];
					canvasY = windowY - elem_pos[1] + upcomp[2];

					if (upcomp[0]._isRtl()) {
						var adjust_windowX = this.width - windowX;
						var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
						canvasX = adjust_windowX - adjust_elem_pos0 + upcomp[1];
					}

					_is_text = elem.getElementValue && !elem.getElementValue();
					_is_select = this._lbuttondown_wx != windowX || this._lbuttondown_wy != windowY;
					_is_input = elem instanceof nexacro.InputElement;
					_is_click = (!_is_input || !_is_select || _is_drag || (!_is_drag && _is_select && _is_text)) && !_is_track;


					if (nexacro.SupportTouch) {
						var manager = this._getTouchManager();
						if (manager && _is_click) {
							var gapX = this._lbuttondown_wx - windowX;
							var gapY = this._lbuttondown_wy - windowY;

							_is_click = Math.abs(gapX) <= manager.unintendedmove_threshold && Math.abs(gapY) <= manager.unintendedmove_threshold;
						}
					}

					if (_is_click) {
						upcomp[0]._on_click(upelem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
					}
				}
			}
			_is_drag = false;

			if (comp[0]._is_alive) {
				comp[0]._on_last_lbuttonup();
			}
		}
		else if (elem && !comp[0]) {
			if (down_rootcomp && down_flag) {
				down_rootcomp._cancelEvent();
			}
		}

		nexacro._cur_drag_info = null;
		this._cur_ldown_elem = null;
		this._lbuttondown_wx = null;
		this._lbuttondown_wy = null;
		this._curWindowX = null;
		this._curWindowY = null;

		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_default_sys_dragenter = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY, filelist) {
		nexacro._setDragInfo(this, elem, windowX, windowY, null, null);

		var dragdata = new nexacro.DragDataObject;

		dragdata.setData("filedrop", filelist);

		var dragInfo = nexacro._cur_drag_info;
		dragInfo.isDragging = true;
		dragInfo.target = null;
		dragInfo.referTarget = null;
		dragInfo.data = dragdata;
		dragInfo.userdata = null;

		dragInfo._cur_elem = elem;
	};

	_pWindow._on_default_sys_dragover = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var dragInfo = nexacro._cur_drag_info;
		if (dragInfo && dragInfo.targetwin == this) {
			var comp = this.findComponent(elem, 0, 0);
			if (dragInfo._cur_elem != elem) {
				var old_elem = dragInfo._cur_elem;
				var old_comp = this.findComponent(old_elem, 0, 0);
				if (old_comp && old_comp[0]) {
					if (old_comp[0] != comp[0]) {
						var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : old_comp[0]._control_element._handle);
						var canvasX = windowX - elem_pos[0] + old_comp[1];
						var canvasY = windowY - elem_pos[1] + old_comp[2];

						if (old_comp[0]._isRtl()) {
							var adjust_windowX = this.width - windowX;
							var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
							canvasX = adjust_windowX - adjust_elem_pos0 + old_comp[1];
						}

						old_comp[0]._on_dragleave(elem, comp, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);

						if (comp && comp[0]) {
							elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
							canvasX = windowX - elem_pos[0] + comp[1];
							canvasY = windowY - elem_pos[1] + comp[2];

							if (comp[0]._isRtl()) {
								var adjust_windowX = this.width - windowX;
								var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
								canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
							}

							comp[0]._on_dragenter(elem, old_comp, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
						}
					}
				}
			}

			dragInfo._cur_elem = elem;
			if (comp && comp[0]) {
				var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
				var canvasX = windowX - elem_pos[0] + comp[1];
				var canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				dragInfo.target = comp[0];
				comp[0]._on_dragmove(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
			}
		}
	};

	_pWindow._on_default_sys_dragleave = function () {
		nexacro._cur_drag_info = null;
	};

	_pWindow._on_default_sys_drop = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var dragInfo = nexacro._cur_drag_info;
		var _is_drag = false, _is_text, _is_select, _is_click, _is_input;

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		if (elem && dragInfo && dragInfo.isDragging && dragInfo.targetwin == this) {
			comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				elem_pos = nexacro._getElementXYInWindow(elem._handle, this._custom_node_id);
				canvasX = windowX - elem_pos[0] + comp[1];
				canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				comp[0]._on_drop(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
				_is_drag = true;
			}
		}

		nexacro._cur_drag_info = null;
	};

	_pWindow._cancelEvent = function () {
		var is_runbase = nexacro._setRunBaseWindow(this);
		var elem = this._cur_ldown_elem || this._keydown_element;
		var comp = this.findComponent(elem, 0, 0);
		var repeatInfo = nexacro._cur_repeat_info;

		if (comp && comp[0]) {
			var comp_org = comp[0]._getRootComponent(comp[0]);
			comp_org._cancelEvent(comp[0]);
		}

		if (repeatInfo && repeatInfo._timer) {
			var _handle = nexacro._getWindowHandle(this._handle);
			nexacro._clearSystemTimer(_handle, repeatInfo._timer);
		}

		nexacro._cur_drag_info = null;
		nexacro._cur_repeat_info = null;
		nexacro._cur_track_info = null;
		nexacro._cur_extra_track_info = null;

		this._cur_ldown_elem = null;
		this._lbuttondown_wx = null;
		this._lbuttondown_wy = null;
		this._curWindowX = null;
		this._curWindowY = null;
		this._keydown_element = null;

		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_touch_to_lbuttonup = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		if (this._click_cancel) {
			this._click_cancel = false;
			return;
		}

		var is_runbase = nexacro._setRunBaseWindow(this);
		var dragInfo = nexacro._cur_drag_info;
		var repeatInfo = nexacro._cur_repeat_info;
		var trackInfo = nexacro._cur_track_info;
		var comp, elem_pos, canvasX, canvasY;
		var _is_drag = false, _is_text, _is_select, _is_click, _is_input;

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		if (elem && dragInfo && dragInfo.isDragging && dragInfo.targetwin == this) {
			comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				elem_pos = nexacro._getElementXYInWindow(elem._handle);
				canvasX = windowX - elem_pos[0] + comp[1];
				canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				comp[0]._on_drop(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
				_is_drag = true;
			}
		}

		if (repeatInfo && repeatInfo.targetwin == this) {
			if (repeatInfo._timer) {
				var _handle = nexacro._getWindowHandle(this._handle);
				nexacro._clearSystemTimer(_handle, repeatInfo._timer);
			}
			repeatInfo.distX = windowX - repeatInfo.startX;
			repeatInfo.distY = windowY - repeatInfo.startY;
			repeatInfo.target._on_endrepeat(repeatInfo.refer_comp, repeatInfo.distX, repeatInfo.distY, repeatInfo.data);
			nexacro._cur_repeat_info = null;
		}

		if (trackInfo && trackInfo.targetwin == this) {
			trackInfo.distX = windowX - trackInfo.startX;
			trackInfo.distY = windowY - trackInfo.startY;
			trackInfo.target._on_endtrack(trackInfo.distX, trackInfo.distY, trackInfo.data);
			nexacro._cur_track_info = null;
		}


		var upelem = elem;
		elem = this._cur_ldown_elem;
		comp = this.findComponent(elem, 0, 0);

		if (comp && comp[0]) {
			elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			canvasX = windowX - elem_pos[0] + comp[1];
			canvasY = windowY - elem_pos[1] + comp[2];

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			var component = comp[0];
			if (component._is_subcontrol) {
				component = component._getFromComponent(component);
			}

			comp[0]._on_touch_lbuttonup(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, upelem);

			_is_drag = false;
		}
	};

	_pWindow._on_drop = function () {
		return true;
	};

	_pWindow._on_lbuttonup = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_rbuttonup = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		if (this._click_cancel) {
			this._click_cancel = false;


			if (nexacro.Browser == "IE" && nexacro.BrowserVersion > 8 && 
				this._last_focused_elem && this._last_focused_elem instanceof nexacro.InputElement) {
				var last_elem = this._last_focused_elem;
				last_elem._blur_bloked = true;
				last_elem.setElementBlur();
				last_elem._blur_bloked = false;
			}
			return;
		}

		var is_runbase = nexacro._setRunBaseWindow(this);
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		var comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			comp[0]._on_rbuttonup(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, elem);
		}

		this._cur_rdown_elem = null;

		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_rbuttonup = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_mouseup = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var is_runbase = nexacro._setRunBaseWindow(this);
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		var comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			comp[0]._on_mouseup(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, elem);
		}
		this._cur_mdown_elem = null;

		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_default_sys_mousedown = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var is_runbase = nexacro._setRunBaseWindow(this);
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		this._cur_mdown_elem = elem;

		var comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			comp[0]._on_mousedown(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_default_sys_mousemove = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		nexacro._gap_client_height = screenY - windowY;
		nexacro._gap_client_width = screenX - windowX;

		var dragInfo = nexacro._cur_drag_info;
		var repeatInfo = nexacro._cur_repeat_info;
		var trackInfo = nexacro._cur_track_info;
		var extratrackInfo = nexacro._cur_extra_track_info;
		var comp;
		if (dragInfo && dragInfo.targetwin == this) {
			var xdeltavalue = windowX - dragInfo.startX;
			var ydeltavalue = windowY - dragInfo.startY;
			if (!dragInfo.isDragging) {
				if (windowX != dragInfo.startX || windowY != dragInfo.startY) {
					elem = dragInfo.target_elem;
					comp = this.findComponent(elem, 0, 0);
					var elem_pos = elem._handle ? nexacro._getElementXYInWindow(elem._handle) : [0, 0];
					var canvasX = windowX - elem_pos[0] + comp[1];
					var canvasY = windowY - elem_pos[1] + comp[2];

					if (comp && comp[0]) {
						if (comp[0]._isRtl()) {
							var adjust_windowX = this.width - windowX;
							var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
							canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
						}

						var ret = comp[0]._on_drag(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
						if (ret && ret[0] === true && nexacro._cur_drag_info) {
							dragInfo.isDragging = true;
							dragInfo.target = ret[1];
							dragInfo.referTarget = ret[2];
							dragInfo.data = ret[3];
							dragInfo.userdata = ret[4];
							comp[0]._on_dragmove(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, xdeltavalue, ydeltavalue);
							var c = comp[0];
							var is_scroll = false;

							while (c) {
								if (c instanceof nexacro.ScrollBarCtrl) {
									is_scroll = true;
									break;
								}
								c = c.parent;
							}

							if (!is_scroll) {
								return;
							}
						}
					}
					nexacro._cur_drag_info = null;
				}
			}
			else {
				comp = this.findComponent(elem, 0, 0);
				if (comp && comp[0]) {
					if (nexacro.OS == "Windows" && nexacro.BrowserType == "Edge") {
						var hover_comp = null;
						var hover_elem = nexacro.__getElementFromPoint(this._handle, windowX, windowY);
						if (hover_elem) {
							hover_comp = this.findComponent(hover_elem, 0, 0);
						}

						if (hover_comp && hover_comp[0]) {
							var touched_comp = null;
							var touched_elem = this._touched_elem;
							if (touched_elem) {
								touched_comp = this.findComponent(touched_elem, 0, 0);
							}

							if (touched_comp && touched_comp[0] && (comp[0] != hover_comp[0]) && (hover_comp[0] != touched_comp[0])) {
								if (touched_elem && touched_elem._handle) {
									var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? touched_elem._handle : touched_comp[0]._control_element._handle);
									var canvasX = windowX - elem_pos[0] + touched_comp[1];
									var canvasY = windowY - elem_pos[1] + touched_comp[2];

									if (touched_comp[0]._isRtl()) {
										var adjust_windowX = this.width - windowX;
										var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
										canvasX = adjust_windowX - adjust_elem_pos0 + touched_comp[1];
									}

									touched_comp[0]._on_dragleave(touched_elem, hover_comp[0], dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
								}

								if (hover_elem && hover_elem._handle) {
									var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? hover_elem._handle : hover_comp[0]._control_element._handle);
									var canvasX = windowX - elem_pos[0] + hover_comp[1];
									var canvasY = windowY - elem_pos[1] + hover_comp[2];

									if (hover_comp[0]._isRtl()) {
										var adjust_windowX = this.width - windowX;
										var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
										canvasX = adjust_windowX - adjust_elem_pos0 + hover_comp[1];
									}

									hover_comp[0]._on_dragenter(hover_elem, touched_comp[0], dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
								}
							}
							else {
								var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : hover_comp[0]._control_element._handle);
								var canvasX = windowX - elem_pos[0] + hover_comp[1];
								var canvasY = windowY - elem_pos[1] + hover_comp[2];

								if (hover_comp[0]._isRtl()) {
									var adjust_windowX = this.width - windowX;
									var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
									canvasX = adjust_windowX - adjust_elem_pos0 + hover_comp[1];
								}

								hover_comp[0]._on_dragmove(hover_elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, xdeltavalue, ydeltavalue);
							}
							this._touched_elem = hover_elem;
						}
					}
					else {
						var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
						var canvasX = windowX - elem_pos[0] + comp[1];
						var canvasY = windowY - elem_pos[1] + comp[2];

						if (comp[0]._isRtl()) {
							var adjust_windowX = this.width - windowX;
							var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
							canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
						}

						comp[0]._on_dragmove(elem, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY, undefined, undefined, undefined, xdeltavalue, ydeltavalue);
					}
				}
			}
			return;
		}

		if (repeatInfo && repeatInfo.targetwin == this) {
			repeatInfo.distX = windowX - repeatInfo.startX;
			repeatInfo.distY = windowY - repeatInfo.startY;
			repeatInfo.canvasX = repeatInfo.startCanvasX + repeatInfo.distX;
			repeatInfo.canvasY = repeatInfo.startCanvasY + repeatInfo.distY;
		}

		comp = this.findComponent(elem, 0, 0);

		if (trackInfo && trackInfo.targetwin == this) {
			if (comp && comp[0] && comp[0]._isRtl()) {
				trackInfo.distX = trackInfo.startX - windowX;
				trackInfo.distY = windowY - trackInfo.startY;
			}
			else {
				trackInfo.distX = windowX - trackInfo.startX;
				trackInfo.distY = windowY - trackInfo.startY;
			}

			trackInfo.target._on_movetrack(trackInfo.distX, trackInfo.distY, trackInfo.data, windowX, windowY);
		}

		if (extratrackInfo) {
			if (comp && comp[0] && comp[0]._isRtl()) {
				extratrackInfo.distX = extratrackInfo.startX - windowX;
				extratrackInfo.distY = windowY - extratrackInfo.startY;
			}
			else {
				extratrackInfo.distX = windowX - extratrackInfo.startX;
				extratrackInfo.distY = windowY - extratrackInfo.startY;
			}

			extratrackInfo.target._on_move_extratrack(comp[0], windowX, windowY, extratrackInfo.distX, extratrackInfo.distY, screenX, screenY);
		}

		if (comp && comp[0] && comp[0]._is_alive) {
			var elem_pos = nexacro._getElementXYInWindow(elem._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			var form = comp[0].parent;
			while (form) {
				if (form._is_form) {
					break;
				}

				form = form._last_focused;
			}
			if (form) {
				form._obj_mousemove = comp[0];
			}

			comp[0]._on_mousemove(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);

			if (form) {
				form._obj_mousemove = null;
			}
		}
	};

	_pWindow._on_mousemove = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_dragmove = function () {
		return true;
	};

	_pWindow._on_sys_repeat = function () {
		var _handle = nexacro._getWindowHandle(this._handle);
		var repeatInfo = nexacro._cur_repeat_info;
		if (repeatInfo && repeatInfo.targetwin == this) {
			if (repeatInfo.step == "first") {
				if (repeatInfo._timer) {
					nexacro._clearSystemTimer(_handle, repeatInfo._timer);
				}
				repeatInfo.step = "";
				var refer_comp = repeatInfo.refer_comp;
				var comp = repeatInfo.target;
				if (refer_comp === comp || comp._contains(refer_comp)) {
					comp._on_repeat(refer_comp, repeatInfo.canvasX, repeatInfo.canvasY, repeatInfo.data);
				}
				repeatInfo._timer = nexacro._setSystemTimer(_handle, nexacro._cur_repeat_info._repeatfunc, 75);
			}
			else {
				var refer_comp = repeatInfo.refer_comp;
				var comp = repeatInfo.target;
				if (refer_comp === comp || comp._contains(refer_comp)) {
					comp._on_repeat(refer_comp, repeatInfo.canvasX, repeatInfo.canvasY, repeatInfo.data);
				}
			}
		}
	};

	_pWindow._on_click = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_dblclick = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		if (this._is_dbltap && nexacro.SupportTouch && strButton == "lbutton") {
			this._is_dbltap = false;
			elem._event_stop = true;
			return false;
		}

		var is_runbase = nexacro._setRunBaseWindow(this);
		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(windowX, windowY) : elem;
		var comp = this._findComponentForEvent(elem, 0, 0);
		if (comp && comp[0] && (strButton == "lbutton" || strButton == "none")) {
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			comp[0]._on_dblclick(elem, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_dblclick = function (elem, strButton, altKey, ctrlKey, shiftKey, metaKey, screenX, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_mouseenter = function (elem, from_elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var dragInfo = nexacro._cur_drag_info;
		var comp, from_comp;
		if (dragInfo && dragInfo.isDragging && dragInfo.targetwin == this) {
			if (nexacro.SupportTouch && nexacro.OS == "Windows" && (nexacro.Browser == "IE" || nexacro.Browser == "Runtime")) {
				var manager = this._getTouchManager();
				var touchLength = (manager && manager._currentTouches) ? manager._currentTouches.length : -1;
				if (touchLength > 0) {
					return;
				}
			}
			comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				from_comp = this.findComponent(from_elem);
				var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
				var canvasX = windowX - elem_pos[0] + comp[1];
				var canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				comp[0]._on_dragenter(elem, from_comp, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
			}
			return;
		}

		comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			var repeatInfo = nexacro._cur_repeat_info;
			if (repeatInfo && repeatInfo.targetwin == this) {
				repeatInfo.refer_comp = comp[0];
			}
			from_comp = this.findComponent(from_elem);
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			comp[0]._on_mouseenter(elem, from_comp, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
		}
	};

	_pWindow._on_mouseenter = function (elem, from_elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_dragenter = function () {
		return true;
	};

	_pWindow._on_default_sys_mouseleave = function (elem, to_elem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var dragInfo = nexacro._cur_drag_info;
		var comp, to_comp;
		if (dragInfo && dragInfo.isDragging && dragInfo.targetwin == this) {
			if (nexacro.SupportTouch && nexacro.OS == "Windows" && (nexacro.Browser == "IE" || nexacro.Browser == "Runtime")) {
				var manager = this._getTouchManager();
				var touchLength = (manager && manager._currentTouches) ? manager._currentTouches.length : -1;
				if (touchLength > 0) {
					return;
				}
			}
			comp = this.findComponent(elem, 0, 0);
			if (comp && comp[0]) {
				to_comp = this.findComponent(to_elem);
				var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
				var canvasX = windowX - elem_pos[0] + comp[1];
				var canvasY = windowY - elem_pos[1] + comp[2];

				if (comp[0]._isRtl()) {
					var adjust_windowX = this.width - windowX;
					var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
					canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
				}

				comp[0]._on_dragleave(elem, to_comp, dragInfo.target, dragInfo.referTarget, dragInfo.data, dragInfo.userdata, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
			}
			return;
		}

		comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			to_comp = this.findComponent(to_elem);
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}

			comp[0]._on_mouseleave(elem, to_comp, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
		}
	};

	_pWindow._on_dragleave = function () {
		return true;
	};

	_pWindow._on_mouseleave = function (elem, toelem, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, screenX, screenY) {
		var is_runbase = nexacro._setRunBaseWindow(this);
		var comp = this._findComponentForEvent(elem, 0, 0);
		if (comp && comp[0]) {
			var elem_pos = nexacro._getElementXYInWindow((comp.length == 3) ? elem._handle : comp[0]._control_element._handle);
			var canvasX = windowX - elem_pos[0] + comp[1];
			var canvasY = windowY - elem_pos[1] + comp[2];

			if (comp[0]._isRtl()) {
				var adjust_windowX = this.width - windowX;
				var adjust_elem_pos0 = this.width - elem_pos[0] - elem.width;
				canvasX = adjust_windowX - adjust_elem_pos0 + comp[1];
			}

			var root_comp1 = comp[0]._getRootWindowComponent(comp[0]);
			var capture_comp = this._getCaptureComp(true, false, comp[0]);

			if (capture_comp && capture_comp._track_capture) {
				var root_comp2 = capture_comp._getRootWindowComponent(capture_comp);
				if (root_comp1 != root_comp2) {
					comp[0] = capture_comp;
				}
			}


			return comp[0]._on_mousewheel(elem, wheelDeltaX, wheelDeltaY, strButton, altKey, ctrlKey, shiftKey, metaKey, canvasX, canvasY, screenX, screenY);
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};


	_pWindow._on_mousewheel = function (elem, wheelDeltaX, wheelDeltaY, strButton, altKey, ctrlKey, shiftKey, metaKey, windowX, windowY, eventBubbles) {
		return true;
	};

	_pWindow._keydown_element = null;
	_pWindow._is_hotkey = false;
	_pWindow._on_default_sys_keydown = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		var is_runbase = nexacro._setRunBaseWindow(this);

		var comp = this.findComponent(elem);

		var capture_comp;
		if (comp) {
			capture_comp = this._getCaptureComp(false, true, comp[0]);
		}

		if (capture_comp && capture_comp != comp) {
			comp = capture_comp;
		}

		if (nexacro._enableaccessibility) {
			var ret = application.on_fire_onaccessibilitykey(keycode, altKey, ctrlKey, shiftKey, comp, comp);
			if (ret) {
				if (is_runbase) {
					if (application) {
						application._runbase_window = null;
					}
				}
				elem._event_stop = true;
				return;
			}
			application._processHotkey(keycode, altKey, ctrlKey, shiftKey, comp);
		}

		if (comp) {
			var _form = comp._getForm();
			if (comp._processHotkey(keycode, altKey, ctrlKey, shiftKey)) {
				if (_form) {
					var cur_focus_comp = _form.getFocus();
					if (cur_focus_comp != comp) {
						if (cur_focus_comp == null) {
							return;
						}

						comp = cur_focus_comp;
						elem = cur_focus_comp._control_element;
					}
				}
				comp._is_hotkey = true;


				if (comp._input_element) {
					comp._input_element._event_stop = true;
				}
			}

			if (keycode == nexacro.Event.KEY_TAB) {
				if (comp._is_subcontrol) {
					comp = comp._getFromComponent(comp);
				}
				if (!comp._getDlgCode(keycode, altKey, ctrlKey, shiftKey).want_tab && _form) {
					comp = _form;
				}
			}
			else if (nexacro._enableaccessibility && (keycode == nexacro.Event.KEY_UP || keycode == nexacro.Event.KEY_DOWN) && !altKey && !ctrlKey && !shiftKey) {
				if (comp._is_subcontrol) {
					comp = comp._getFromComponent(comp);
				}
				if (!comp._getDlgCode(keycode, altKey, ctrlKey, shiftKey).want_arrows && _form) {
					comp = _form;
				}
			}
			this._keydown_element = elem;
			comp._on_keydown(elem, keycode, altKey, ctrlKey, shiftKey, metaKey);
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_keydown = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey, eventBubbles) {
		return true;
	};

	_pWindow._on_default_sys_keypress = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		var is_runbase = nexacro._setRunBaseWindow(this);
		var comp = this.findComponent(elem);

		var capture_comp = null;

		if (comp) {
			capture_comp = this._getCaptureComp(false, true, comp[0]);
		}

		if (capture_comp && capture_comp != comp) {
			comp = capture_comp;
		}

		if (comp) {
			comp._on_keypress(elem, keycode, altKey, ctrlKey, shiftKey, metaKey);
		}

		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};

	_pWindow._on_keypress = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		return true;
	};

	_pWindow._on_default_sys_keyup = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey) {
		var is_runbase = nexacro._setRunBaseWindow(this);
		if (this._keydown_element) {
			if (keycode !== nexacro.Event.KEY_TAB && keycode !== nexacro.Event.KEY_SHIFT && this._keydown_element._handle && this._keydown_element !== elem) {
				elem = this._keydown_element;
			}

			var comp = this.findComponent(elem);
			var capture_comp = null;

			if (comp) {
				capture_comp = this._getCaptureComp(false, true, comp[0]);
			}

			if (capture_comp && capture_comp != comp) {
				comp = capture_comp;
			}

			if (comp) {
				comp._on_keyup(elem, keycode, altKey, ctrlKey, shiftKey, metaKey);

				if (comp._is_alive) {
					comp._on_last_keyup();
				}
			}
		}
		if (is_runbase) {
			if (application) {
				application._runbase_window = null;
			}
		}
	};


	_pWindow._on_keyup = function (elem, keycode, altKey, ctrlKey, shiftKey, metaKey, fireComp) {
		return true;
	};

	_pWindow._on_default_sys_contextmenu = function (elem) {
		var comp = this.findComponent(elem);
		if (comp) {
			return comp._on_contextmenu(elem);
		}
	};


	_pWindow._on_contextmenu = function (elem) {
		return false;
	};

	_pWindow._on_default_sys_resize = function (width, height, wparam) {
		var _handle = this._handle;
		if (_handle) {
			var id = this._custom_node_id;
			this.width = nexacro._getWindowHandleOuterWidth(_handle, id);
			this.height = nexacro._getWindowHandleOuterHeight(_handle, id);
			this.left = nexacro._getWindowHandlePosX(_handle, id);
			this.top = nexacro._getWindowHandlePosY(_handle, id);

			var frame = this.frame;

			if (nexacro.Browser == "Runtime" && (nexacro.SystemType.toLowerCase() == "win32" || nexacro.SystemType.toLowerCase() == "win64")) {
				this.clientWidth = width || nexacro._getWindowHandleClientWidth(_handle, id);
				this.clientHeight = height || nexacro._getWindowHandleClientHeight(_handle, id);

				if (frame && (frame._window_type != 5 || frame._is_created) && frame._is_click_openstatus == false) {
					if (wparam == 0 && frame._state_openstatus == 3) {
						frame.on_syscommand(frame._control_element, "restore", undefined, frame);
					}
					else if (wparam == 2 && frame._state_openstatus == 0) {
						frame.on_syscommand(frame._control_element, "maximize", undefined, frame);
					}
				}
			}
			else {
				this.clientWidth = nexacro._getWindowHandleClientWidth(_handle, id) || width;
				this.clientHeight = nexacro._getWindowHandleClientHeight(_handle, id) || height;
			}
			var frame_width = this.clientWidth;
			var frame_height = this.clientHeight;

			if (frame) {
				frame._setSize(frame_width, frame_height);

				if (nexacro._resize_popup_inbound == true) {
					var len = nexacro._current_popups.length;
					var cur_popup_comp = null;

					for (var i = len - 1; i >= 0; i--) {
						cur_popup_comp = nexacro._current_popups[i];
						if (cur_popup_comp) {
							cur_popup_comp._resizePopupInbound(this.clientWidth, this.clientHeight);
						}
					}
				}
			}

			var modal_stack = this._modal_frame_stack;
			for (var i = 0, n = modal_stack.length; i < n; i++) {
				var modal_info = modal_stack[i];
				var modal_frame = modal_info[0];
				if (modal_frame._setModalOverlaySize) {
					modal_frame._setModalOverlaySize(frame_width, frame_height);
				}
			}
		}
	};

	_pWindow._on_default_sys_move = function (x, y) {
		var _handle = this._handle;
		if (_handle) {
			var id = this._custom_node_id;
			this.left = x;
			this.top = y;

			this.width = nexacro._getWindowHandleOuterWidth(_handle, id);
			this.height = nexacro._getWindowHandleOuterHeight(_handle, id);
			var clientWidth = nexacro._getWindowHandleClientWidth(_handle, this._custom_node_id);
			var clientHeight = nexacro._getWindowHandleClientHeight(_handle, this._custom_node_id);
			this.clientWidth = (clientWidth == 0) ? this.width : clientWidth;
			this.clientHeight = (clientHeight == 0) ? this.height : clientHeight;
		}

		var frame = this.frame;
		if (frame && frame._is_window) {
			frame._move(x, y);
		}
	};

	_pWindow._on_default_sys_activate = function () {
		if (this._is_active_window != true) {
			this._is_active_window = true;

			var cur_focus_paths = this.getCurrentFocusPaths();
			var cur_focus_paths_len = (cur_focus_paths ? cur_focus_paths.length : 0);
			for (var i = 0; i < cur_focus_paths_len; i++) {
				var _comp = cur_focus_paths[i];
				if (!_comp) {
					continue;
				}

				_comp._on_activate();
			}

			var frame = this._getLastModalFrame();
			if (!frame) {
				frame = this.getActiveFrame();
			}
			if (!frame) {
				frame = this.frame;
			}

			if (frame) {
				frame._stat_change("activate", "activate");

				var _last_elem = this._last_focused_elem;
				if (_last_elem && _last_elem._owner_elem && _last_elem._parent_elem) {
					var comp = this.findComponent(_last_elem);
					comp = comp._getRootComponent(comp);
					var idx = this._indexOfCurrentFocusPaths(comp);
					if (idx > -1) {
						_last_elem.setElementFocus();
					}
				}
			}
		}
	};

	_pWindow._on_default_sys_deactivate = function (overelem) {
		if (this._is_active_window != false) {
			nexacro._cur_drag_info = null;
			nexacro._cur_repeat_info = null;
			nexacro._cur_track_info = null;
			nexacro._cur_extra_track_info = null;


			if (nexacro.Browser == "Runtime" && this._keydown_element) {
				this._keydown_element = null;
			}

			var frame = this._getLastModalFrame();
			if (!frame) {
				frame = this.frame;
			}
			if (frame) {
				frame._stat_change("activate", "deactivate");

				this._is_active_window = false;
			}

			var cur_focus_paths = this.getCurrentFocusPaths();
			var cur_focus_paths_len = (cur_focus_paths ? cur_focus_paths.length : 0);
			for (var i = 0; i < cur_focus_paths_len; i++) {
				var _comp = cur_focus_paths[i];
				if (_comp) {
					_comp._on_deactivate();
				}
			}
		}

		if (this._is_alive && !this._block_deactivate) {
			nexacro._checkClosePopupComponent(null, false, overelem);
		}
		else {
			this._block_deactivate = false;
		}
	};

	_pWindow._on_default_sys_beforeclose = function () {
		if (!this._ignore_close_confirm) {
			var frame = this.frame;
			var confirm_message = frame._on_beforeclose();


			return confirm_message;
		}
	};

	_pWindow._on_default_sys_close = function () {
		if (this._is_alive) {
			nexacro._checkClosePopupComponent(null);
			nexacro._removePopupComponent(null);
		}

		if (this._is_main) {
			application.beforeExit();
			this._closeChildWindows(true);
		}
		else if (this._is_alive) {
			this.destroy();
		}


		if (!this._is_main && this.frame) {
			nexacro._createModalAsyncCallbackHandler(this._handle, this.frame);
		}

		if (this._is_main && nexacro.Browser != "Runtime") {
			application._exit(true);
		}
	};

	_pWindow._on_default_sys_load = function (win_handle) {
		if (!this._handle && win_handle) {
			this.attachHandle(win_handle);
		}

		if (this._handle) {
			var lock_list = this._lock_list;
			for (var i = 0, n = lock_list.length; i < n; i++) {
				nexacro._setWindowHandleLock(lock_list[i] ? lock_list[i]._handle : null, true, this._handle, true);
			}

			if (this.frame) {
				this.frame._on_window_loaded();
			}
		}
	};

	_pWindow._on_default_sys_reload = function (elem) {
		if (elem) {
			var comp = this.findComponent(elem);
			if (comp) {
				var ref_form = comp._getForm();
				if (ref_form) {
					var frame = ref_form.getOwnerFrame();
					if (frame && frame.form) {
						frame.form.reload();
					}
				}
			}
		}
	};

	_pWindow._on_default_sys_syscommand = function (command) {
		if (this.frame) {
			var f = this.frame;
			f.on_syscommand(f._control_element, command, true, f, null);
		}
	};

	_pWindow._on_default_sys_getminmaxinfo = function () {
		if (this.frame) {
			var minmaxinfo = this.frame._getMinMaxInfo();
			return [minmaxinfo.cx, minmaxinfo.cy];
		}

		return null;
	};

	_pWindow._on_default_sys_touchstart = function (elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch, first_touchid) {
		var manager = this._getTouchManager();
		if (!manager) {
			return;
		}

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(clientX, clientY) : elem;

		this._cur_touch_elem = elem;

		if (elem && elem._is_track) {
			if (nexacro._current_popups.length > 0) {
				var is_capture = nexacro._current_popups[0]._track_capture;
				var comp = this.findComponent(elem, 0, 0);
				nexacro._checkClosePopupComponent(comp[0], false);
				var cur_popup = nexacro._current_popups[0];
				if (!is_capture) {
					this._click_cancel = false;
				}
				else if (!cur_popup) {
					this._click_cancel = true;
					return;
				}
			}
			else {
				this._click_cancel = false;
			}

			nexacro._setTrackInfo(this, elem, windowX, windowY);
		}
		else {
			if (nexacro._current_popups.length > 0) {
				var is_capture = nexacro._current_popups[0]._track_capture;
				var comp = this.findComponent(elem, 0, 0);
				nexacro._checkClosePopupComponent(comp[0], true);
				var cur_popup = nexacro._current_popups[0];
				if (!is_capture) {
					this._click_cancel = false;
				}
				else if (!cur_popup) {
					this._click_cancel = true;
					return;
				}
			}
			else {
				this._click_cancel = false;
			}

			if (nexacro.OS == "iOS" && nexacro.OSVersion < 10) {
				var last_touchid = this._last_touchid;

				this._last_touchid = touchid;

				if (touchid == last_touchid) {
					this._click_cancel = true;
					return;
				}
			}


			var ret = manager.ontouchstart(this, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch, first_touchid);

			if (manager._slide_blocked) {
				var comp = this.findComponent(elem, 0, 0);
				if (comp) {
					var form = comp[0] ? comp[0]._getRootForm() : null;
					if (form && form.stepcontrol) {
						if (form.stepcontrol) {
							var step_idx = form.stepcontrol ? form.stepcontrol.getStepIndex() : 0;
							form._createStepChangeAnimation(step_idx, 400);
						}
					}
				}
			}

			if (nexacro._allow_default_pinchzoom && !nexacro.AccessibilityUtil.cancelTouchEvent(elem)) {
				return;
			}
		}

		if (elem instanceof nexacro.InputElement) {
			return;
		}

		if (elem.decoration) {
			return;
		}

		return ret;
	};

	_pWindow._on_default_sys_accessibilitygesture = function (direction) {
		var keycode = direction ? nexacro.Event.KEY_DOWN : nexacro.Event.KEY_UP;

		var comp = this._accessibility_last_focused_comp;

		if (comp) {
			if (!(comp._is_alive && comp._getForm())) {
				comp = null;
			}
		}

		if (!comp) {
			var cur_focus_paths = this.getCurrentFocusPaths();
			this._accessibility_last_focused_comp = comp = cur_focus_paths[cur_focus_paths.length - 1];
		}

		if (comp) {
			var _form = comp._getForm();

			if (comp._is_subcontrol) {
				comp = comp._getRootComponent(comp);
			}

			if (!comp._getDlgCode(keycode, false, false, false).want_arrows && _form) {
				comp = _form;
			}

			comp._on_accessibilitygesture(direction);
		}

		return;
	};

	_pWindow._on_default_sys_accessibilityhover = function (elem, clientX, clientY, screenX, screenY) {
		var comp = null;
		var control = null;
		var ret = false;
		var old_comp = this._accessibility_last_focused_comp;

		comp = this.findComponent(elem, 0, 0);
		if (comp && comp[0]) {
			comp = comp[0];

			if (comp._is_subcontrol) {
				control = comp;
				comp = comp._getRootComponent(comp);
			}

			if (!comp._is_form) {
				var ret = comp._setAccessibilityInfoByHover(control);
				if (ret) {
					if (old_comp) {
						old_comp._clearAccessibilityInfoByHover();
					}

					this._accessibility_last_focused_comp = comp._getRootComponent(comp);
				}
			}
			else {
				var my_tapstop_childs = comp._getSortedDecendants(comp, undefined, true);
				var my_tapstop_childs_cnt = my_tapstop_childs ? my_tapstop_childs.length : 0;
				if (my_tapstop_childs_cnt == 0) {
					var ret = comp._setAccessibilityInfoByHover(control);
				}
			}
		}
		return ret;
	};

	_pWindow._on_default_sys_touchmove = function (elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch) {
		var manager = this._getTouchManager();
		if (!manager) {
			return;
		}

		if (manager._allow_default) {
			return;
		}

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(clientX, clientY) : elem;

		var ret = manager.ontouchmove(this, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch);

		return ret;
	};

	_pWindow._on_default_sys_touchend = function (elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch) {
		nexacro._gap_client_height = screenY - clientY;
		nexacro._gap_client_width = screenX - clientX;

		var manager = this._getTouchManager();
		if (!manager) {
			return;
		}

		if (this._click_cancel) {
			manager._ignore_touchstart = true;
			this._click_cancel = false;
			return;
		}

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(clientX, clientY) : elem;

		this._cur_touch_elem = elem;
		var ret = manager.ontouchend(this, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch);

		if (manager._slide_blocked) {
			var comp = this.findComponent(elem, 0, 0);
			if (comp) {
				var form = comp[0] ? comp[0]._getRootForm() : null;
				if (form && form.stepcontrol) {
					if (form.stepcontrol) {
						var step_idx = form.stepcontrol ? form.stepcontrol.getStepIndex() : 0;
						form._createStepChangeAnimation(step_idx, 400);
					}
				}
			}
		}

		if (manager._allow_default) {
			return;
		}

		if (elem.decoration) {
			return;
		}


		return ret;
	};

	_pWindow._on_default_sys_touchcancel = function (elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch) {
		var manager = this._getTouchManager();
		if (!manager) {
			return;
		}

		elem = (elem && elem.setSelectEventPassElement) ? elem.setSelectEventPassElement(clientX, clientY) : elem;

		var ret = manager.ontouchcancel(this, elem, touchid, clientX, clientY, screenX, screenY, curtime, orgtime, is_last_changedtouch);



		return ret;
	};

	_pWindow._on_default_sys_orientationchange = function (orientation) {
		if (this.frame) {
			this.frame._on_orientationchange(orientation);
		}
	};

	_pWindow._getTouchManager = function () {
		var manager = application._touch_manager;
		if (!manager) {
			manager = application._touch_manager = new nexacro.TouchManager();
		}
		return manager;
	};

	_pWindow._setFocus = function () {
		nexacro._setWindowHandleFocus(this._handle);
	};

	_pWindow._on_modalLock = function () {
		nexacro._updateWindow(this._handle);
	};

	_pWindow._updateWrapper = function (brun) {
		nexacro._updateWrapper(this._handle, brun);
	};

	delete _pWindow;

	nexacro.PopupWindow = function (id, parent) {
		nexacro.Window.call(this, id, parent, false);

		this.comp = null;
		this._old_focused_comp = null;
	};

	var _pPopupWindow = nexacro._createPrototype(nexacro.Window, nexacro.PopupWindow);
	nexacro.PopupWindow.prototype = _pPopupWindow;
	_pPopupWindow._type_name = "PopupWindow";

	_pPopupWindow.attachHandle = function (_handle) {
		if (!this._handle) {
			this._handle = this._dest_handle = _handle;
			this._doc = this._dest_doc = nexacro._getPopupWindowDocumentHandle(_handle);

			this.left = nexacro._getPopupWindowHandlePosX(_handle);
			this.top = nexacro._getPopupWindowHandlePosY(_handle);
			this.width = nexacro._getPopupWindowHandleOuterWidth(_handle);
			this.height = nexacro._getPopupWindowHandleOuterHeight(_handle);
			this.clientWidth = nexacro._getPopupWindowHandleClientWidth(_handle);
			this.clientHeight = nexacro._getPopupWindowHandleClientHeight(_handle);
			this._gap_client_width = this.width - this.clientWidth;
			this._gap_client_height = this.height - this.clientHeight;
		}
	};
	_pPopupWindow.attachFrame = function (frame, refresh_flag) {
	};

	_pPopupWindow.attachComp = function (comp, refresh_flag) {
		this.comp = comp;
		if (refresh_flag) {
			this._onPrepareWindowHandle();
		}
	};

	_pPopupWindow.create = function (_parent, name, width, height, left, top, resizable) {
		nexacro._createPopupWindowHandle(_parent, this, name, left, top, width, height);
	};

	_pPopupWindow.destroy = function () {
		if (!this._is_alive) {
			return;
		}

		this._is_alive = false;

		var _handle = this._handle;
		if (_handle) {
			nexacro._closePopupWindowHandle(_handle);
			this._handle = null;
		}
		this.comp = null;
		nexacro.Window.prototype.destroy.call(this);
	};

	_pPopupWindow.moveBy = function (dx, dy) {
		var _handle = this._handle;
		if (_handle && dx && dy) {
			var l = this.left + (dx | 0);
			var t = this.top + (dy | 0);
			nexacro._setPopupWindowHandlePos(_handle, l, t);
			this.left = nexacro._getPopupWindowHandlePosX(_handle);
			this.top = nexacro._getPopupWindowHandlePosY(_handle);
		}
	};

	_pPopupWindow.moveTo = function (l, t) {
		var _handle = this._handle;
		if (_handle) {
			if (l === undefined || l === null) {
				l = this.left;
			}
			if (t === undefined || t === null) {
				t = this.top;
			}
			nexacro._setPopupWindowHandlePos(_handle, l, t);
			this.left = nexacro._getPopupWindowHandlePosX(_handle);
			this.top = nexacro._getPopupWindowHandlePosY(_handle);
		}
	};

	_pPopupWindow.setArea = function (l, t, w, h) {
		var _handle = this._handle;
		if (_handle) {
			if (l === undefined || l === null) {
				l = this.left;
			}
			if (t === undefined || t === null) {
				t = this.top;
			}
			if (w === undefined || w === null) {
				w = this.width;
			}
			if (h === undefined || h === null) {
				h = this.height;
			}
			nexacro._setPopupWindowHandleArea(_handle, l, t, w, h);
			this.left = nexacro._getPopupWindowHandlePosX(_handle);
			this.top = nexacro._getPopupWindowHandlePosY(_handle);
			this.width = nexacro._getPopupWindowHandleOuterWidth(_handle);
			this.height = nexacro._getPopupWindowHandleOuterHeight(_handle);
			this.clientWidth = nexacro._getPopupWindowHandleClientWidth(_handle);
			this.clientHeight = nexacro._getPopupWindowHandleClientHeight(_handle);
			this._gap_client_width = this.width - this.clientWidth;
			this._gap_client_height = this.height - this.clientHeight;
		}
	};
	_pPopupWindow.setSize = function (w, h) {
		var _handle = this._handle;
		if (_handle) {
			if (w === undefined || w === null) {
				w = this.width;
			}
			if (h === undefined || h === null) {
				h = this.height;
			}
			nexacro._setPopupWindowHandleSize(_handle, w, h);
			this.width = nexacro._getPopupWindowHandleOuterWidth(_handle);
			this.height = nexacro._getPopupWindowHandleOuterHeight(_handle);
			this.clientWidth = nexacro._getPopupWindowHandleClientWidth(_handle);
			this.clientHeight = nexacro._getPopupWindowHandleClientHeight(_handle);
			this._gap_client_width = this.width - this.clientWidth;
			this._gap_client_height = this.height - this.clientHeight;
		}
	};

	_pPopupWindow.setVisible = function (visible) {
		if (this.visible != visible) {
			this.visible = visible;

			var root_window = this._getRootWindow();
			if (visible) {
				var cur_focus_paths = root_window.getCurrentFocusPaths();
				if (cur_focus_paths && cur_focus_paths.length > 0) {
					var comp = cur_focus_paths[cur_focus_paths.length - 1];

					comp = comp._last_focused ? comp._last_focused : comp;

					if (comp._is_killfocusing) {
						comp = root_window._setfocusing_comp;
					}
					this._old_focused_comp = comp;
				}
				else {
					this._old_focused_comp = null;
				}
			}
			else {
				if (this._old_focused_comp) {
					this._old_focused_comp.setFocus();
				}
			}

			nexacro._setPopupWindowHandleVisible(this._handle, visible);
		}
	};

	_pPopupWindow.getTopComp = function () {
		return this.comp;
	};

	_pPopupWindow._setCaptureComp = function (comp) {
		var root_win = this._getRootWindow();
		if (root_win) {
			root_win._setCaptureLock(comp, true, false);
		}
	};

	_pPopupWindow._releaseCaptureComp = function (comp) {
		var root_win = this._getRootWindow();
		if (root_win) {
			root_win._releaseCaptureLock(comp);
		}
	};

	_pPopupWindow._on_default_sys_activate = nexacro._emptyFn;
	_pPopupWindow._on_default_sys_deactivate = nexacro._emptyFn;
	_pPopupWindow._getRootWindow = function () {
		var root_window = this;
		while (root_window) {
			if (root_window.frame) {
				return root_window;
			}
			root_window = root_window.parent;
		}
		return this;
	};

	_pPopupWindow.getCurrentFocusPaths = function () {
		return this._getRootWindow().getCurrentFocusPaths();
	};
	_pPopupWindow.addCurrentFocusPaths = function (obj) {
		this._getRootWindow().addCurrentFocusPaths(obj);
	};
	_pPopupWindow.clearCurrentFocusPaths = function () {
		this._getRootWindow().clearCurrentFocusPaths();
	};
	_pPopupWindow._removeFromCurrentFocusPath = function (obj, clear_last_focus, new_focus, new_refer_focus) {
		this._getRootWindow()._removeFromCurrentFocusPath(obj, clear_last_focus, new_focus, new_refer_focus);
	};
	_pPopupWindow._indexOfCurrentFocusPaths = function (obj) {
		return this._getRootWindow()._indexOfCurrentFocusPaths(obj);
	};

	delete _pPopupWindow;

	if (!this.application) {
		_pApplication = nexacro.Application = nexacro._createPrototype(nexacro.EventSinkObject);

		_pApplication._type_name = "Application";

		_pApplication.id = "application";
		_pApplication.name = "application";

		_pApplication.all = new nexacro.Collection();
		_pApplication.trays = new nexacro.Collection();
		_pApplication.widgets = new nexacro.Collection();

		_pApplication.popupframes = new nexacro.Collection();
		_pApplication.services = new nexacro.Collection();
		_pApplication.images = new nexacro.Collection();
		_pApplication.components = new nexacro.Collection();
		_pApplication.updates = new nexacro.Collection();

		_pApplication.onload = null;
		_pApplication.onerror = null;
		_pApplication.onbeforeexit = null;
		_pApplication.onexit = null;
		_pApplication.onusernotify = null;
		_pApplication.onloadtypedefinition = null;
		_pApplication.onloadingglobalvariables = null;
		_pApplication.ondownloadactivex = null;
		_pApplication.oncopydata = null;
		_pApplication.onquickviewmenuclick = null;
		_pApplication.onbeforeuserconfirm = null;
		_pApplication.onafteruserconfirm = null;
		_pApplication.onaddlog = null;
		_pApplication.oncommunication = null;
		_pApplication.oncduplicateexecution = null;

		_pApplication.mainframe = null;
		_pApplication.key = "";
		_pApplication.xadl = "";
		_pApplication.componentpath = "";
		_pApplication.commthreadcount = 3;
		_pApplication.commthreadwaittime = 0;
		_pApplication.cachedir = "";
		_pApplication.errorfile = "";
		_pApplication.onlyone = false;
		_pApplication.loginformurl = "";
		_pApplication.loginformstyle = "";
		_pApplication.codepage = "";
		_pApplication.language = "";
		_pApplication.version = "";
		_pApplication.tracemode = "none";
		_pApplication.traceduration = -1;
		_pApplication.usehttpkeepalive = true;
		_pApplication.useproxykeepalive = true;
		_pApplication.httptimeout = 30;
		_pApplication.proxytimeout = 30;
		_pApplication.httpretry = 3;
		_pApplication.proxyretry = 3;
		_pApplication.themeid = "";
		_pApplication.engineversion = nexacro._getEngineVersion();
		_pApplication.enginesetupkey = "";
		_pApplication.usewaitcursor = true;
		_pApplication.licenseurl = "";
		_pApplication.mousehovertime = 500;
		_pApplication.mousewheeltype = 0;
		_pApplication.imepastemode = 0;
		_pApplication.addcookietovariable = true;
		_pApplication.filesecurelevel = 1;
		_pApplication.networksecurelevel = 1;
		_pApplication.enablescreencapture = true;
		_pApplication.enablecookie = true;
		_pApplication.enablecache = true;
		_pApplication.enableclipboard = true;
		_pApplication.enabletouchevent = false;
		_pApplication.enableanimation = false;
		_pApplication.loglevel = "debug";
		_pApplication.errorlevel = 0;
		_pApplication.cookiecachetype = "cache";
		_pApplication.usecontextmenu = "all";
		_pApplication.loadingimage = "";
		_pApplication.usevml = true;
		_pApplication.tabkeycirculation = "form,cycle";

		_pApplication.checkversion = false;
		_pApplication._appversion = "";

		_pApplication.popuptype = "normal";

		_pApplication.rtldirection = "";
		_pApplication.locale = "";

		_pApplication.datasetloadtype = "onsuccess";

		_pApplication.enableaccessibility = false;
		_pApplication.accessibilityfirstovertext = "";
		_pApplication.accessibilitylastovertext = "";
		_pApplication.accessibilityreplayhotkey = "";
		_pApplication.accessibilitybackwardkey = "";
		_pApplication.accessibilityforwardkey = "";
		_pApplication.accessibilitywholereadhotkey = "";
		_pApplication.accessibilityhistorycount = 5;
		_pApplication.accessibilitytype = "standard";
		_pApplication.accessibilitydescreadtype = "label";
		_pApplication.accessibilitywholereadtype = "none";
		_pApplication.hithemeid = "";
		_pApplication.accessibilityheadingnexthotkey = "";
		_pApplication.accessibilityheadingprevhotkey = "";
		_pApplication.accessibilitycomponentnexthotkey = "";
		_pApplication.accessibilitycomponentprevhotkey = "";

		_pApplication._tabkeycirculation = 0;
		_pApplication._accessibilitywholereadtype = 0;
		_pApplication._accessibilityHistoryList = null;
		_pApplication._accessibilityHistoryCursor = -1;
		_pApplication.layoutautofittype = "none";

		_pApplication._hotkey_list = [];

		_pApplication._locale_info = nexacro.Locale.getLocaleInfo(nexacro._getLocale());
		_pApplication._locale = _pApplication._locale_info.name;
		_pApplication._rtldirection = _pApplication._locale_info.direction;
		_pApplication._is_application = true;

		_pApplication._need_init = true;

		_pApplication._project_uri = "";
		_pApplication._theme_uri = "./_theme_/default";
		_pApplication._resource_path = "";
		_pApplication._default_loadingimage = "./images/waitimage.gif";
		_pApplication._variables = [];
		_pApplication._cookie_variables = [];
		_pApplication._secure_cookie_variables = [];
		_pApplication._header_variables = [];
		_pApplication._datasets = [];
		_pApplication._protocols = {
		};

		_pApplication._active_window = null;
		_pApplication._global_context = this;

		_pApplication._is_loaded = false;
		_pApplication._is_hybrid = false;
		_pApplication._is_loadforms = false;

		_pApplication._local_path = "";
		_pApplication._loglevel = 4;
		_pApplication._cssurls = [];
		_pApplication._css_selectors = {
			_is_selector : true, 
			_has_items : false, 
			_has_attr_items : false
		};
		_pApplication._cssfinder_cache = {
		};


		_pApplication._load_manager = new nexacro.LoadManager(nexacro.Application);

		_pApplication._screeninfo = null;
		_pApplication._device_name = "";
		_pApplication._layout_manager = new nexacro.LayoutManager(nexacro.Application);
		_pApplication._curscreen = null;

		if (nexacro.SupportTouch) {
			_pApplication._touch_manager = new nexacro.TouchManager();
			_pApplication._lastTouchEndX = 0;
			_pApplication._lastTouchEndY = 0;
		}
		else {
			_pApplication._touch_manager = null;
		}

		_pApplication._com_waiting = false;
		_pApplication._comm_contextlist = [];

		_pApplication._current_popups = [];

		_pApplication._typedefinitions = [];
		_pApplication._aliaslist = [];
		_pApplication._registerclass = [];

		_pApplication._extensionmodules = [];

		_pApplication._typedefinition_url = "";
		_pApplication._globalvar_uri = "";
		_pApplication._includescriptlist = [];

		_pApplication._quickview_mode = false;

		_pApplication._localcache_path = "";
		_pApplication._localtheme_path = "";
		_pApplication._localcaches = {
		};
		_pApplication._localthemecaches = {
		};

		_pApplication._entered = null;
		_pApplication._load_callbacklist = [];

		_pApplication._closedmodalasync_list = [];
		_pApplication.services = new nexacro.Collection();
		_pApplication._defaultservice = null;
		_pApplication._rtldirection = undefined;

		_pApplication._skipDragEventAfterMsgBox = false;

		_pApplication._current_tray_popup = null;

		_pApplication._accessibilitytype = 1;

		_pApplication._is_on_alert = false;

		_pApplication._is_waitCursor = false;

		_pApplication._popupparentframe = [];
		_pApplication._popupparentargs = [];
		_pApplication._popupparentopener = [];

		_pApplication._event_list = {
			"onload" : 1, 
			"onerror" : 1, 
			"onbeforeexit" : 1, 
			"onexit" : 1, 
			"onusernotify" : 1, 
			"onloadtypedefinition" : 1, 
			"onloadingglobalvariables" : 1, 
			"ondownloadactivex" : 1, 
			"oncopydata" : 1, 
			"onquickviewmenuclick" : 1, 
			"onbeforeuserconfirm" : 1, 
			"onafteruserconfirm" : 1, 
			"onaddlog" : 1, 
			"oncommunication" : 1, 
			"onaccessibilitykey" : 1, 
			"onloadforms" : 1, 
			"onduplicateexecution" : 1, 
			"onnotification" : 1, 
			"ondevicepermission" : 1
		};

		_pApplication._isEnable = function () {
			return true;
		};

		_pApplication._isLoaded = function () {
			return this._is_loaded;
		};

		_pApplication.on_fire_onload = function (obj, url) {
			if (this.onload && this.onload._has_handlers) {
				var evt = new nexacro.LoadEventInfo(obj, "onload", url);
				return this.onload._fireEvent(this, evt);
			}
		};


		_pApplication._on_load = function (obj, url) {
			this.on_fire_onload(obj, url);

			var callbacklist = this._load_callbacklist;
			var n = callbacklist.length;
			if (n > 0) {
				for (var i = 0; i < n; i++) {
					var item = callbacklist[i];
					var target = item.target;
					var url = item.url;
					if (target._is_alive != false) {
						item.callback.call(target, target, url, true);
					}
				}
				callbacklist.splice(0, n);
			}


			return true;
		};


		_pApplication._addLoadCallbacklist = function (item) {
			if (!this._is_loaded) {
				application._load_callbacklist.push(item);
				return true;
			}
			return false;
		};

		_pApplication._registerLoadforms = function (obj) {
			if (this._is_loadforms) {
				return;
			}

			if (!application._loadforms) {
				application._loadforms = [];
			}
			application._loadforms.push(obj);
		};

		_pApplication._notifyLoadforms = function (obj) {
			if (this._is_loadforms) {
				return;
			}

			var loadforms = this._loadforms;
			if (!loadforms) {
				return false;
			}
			var n = loadforms.length;
			for (var i = 0; i < n; i++) {
				var item = loadforms[i];
				if (obj == item) {
					loadforms.splice(i, 1);
				}
			}

			if (loadforms.length == 0) {
				this._is_loadforms = true;
				this.on_fire_onloadforms(this, this.xadl);
			}

			return false;
		};


		_pApplication.on_fire_onloadforms = function (obj, url) {
			if (this.onloadforms && this.onloadforms._has_handlers) {
				var evt = new nexacro.LoadEventInfo(obj, "onloadforms", url);
				return this.onloadforms._fireEvent(this, evt);
			}
		};

		_pApplication.on_fire_onloadtypedefinition = function (obj, url) {
			if (this.onloadtypedefinition && this.onloadtypedefinition._has_handlers) {
				var evt = new nexacro.LoadEventInfo(obj, "onloadtypedefinition", url);
				return this.onloadtypedefinition._fireEvent(this, evt);
			}
			return true;
		};

		_pApplication.on_fire_onloadingglobalvariables = function (obj, url) {
			if (this.onloadingglobalvariables && this.onloadingglobalvariables._has_handlers) {
				var evt = new nexacro.LoadEventInfo(obj, "onloadingglobalvariables", url);
				return this.onloadingglobalvariables._fireEvent(this, evt);
			}
			return true;
		};

		_pApplication.on_fire_onerror = function (obj, errortype, errormsg, errorobj, statuscode, requesturi, locationuri, reason) {
			if (this.onerror && this.onerror._has_handlers) {
				var evt = new nexacro.ErrorEventInfo(obj, "onerror", errortype, errormsg, errorobj, statuscode, requesturi, locationuri, reason);
				if (nexacro._communicationStatusTable["stop"] == statuscode) {
					if (nexacro.Browser == "Runtime") {
						var ret = this.onerror._fireUserEvent(this, evt);
						this.onerror._fireSysEvent(this, evt);
						return ret;
					}
				}
				return this.onerror._fireEvent(this, evt);
			}
		};

		_pApplication.on_fire_onbeforeexit = function (obj) {
			if (this.onbeforeexit && this.onbeforeexit._has_handlers) {
				var evt = new nexacro.ExitEventInfo(obj, "onbeforeexit");
				return this.onbeforeexit._fireEvent(this, evt);
			}
		};

		_pApplication.on_fire_onexit = function (obj) {
			if (this.onexit && this.onexit._has_handlers) {
				var evt = new nexacro.ExitEventInfo(obj, "onexit");
				return this.onexit._fireEvent(this, evt);
			}
			return true;
		};

		_pApplication.on_fire_onusernotify = function (obj, notifyid, message) {
			if (this.onusernotify && this.onusernotify._has_handlers) {
				var evt = new nexacro.UserNotify(obj, "onusernotify", notifyid, message);
				return this.onusernotify._fireEvent(this, evt);
			}
			return true;
		};

		_pApplication.on_fire_onaddlog = function (obj, message) {
			if (this.onaddlog && this.onaddlog._has_handlers) {
				var evt = new nexacro.AddLog(obj, "onaddlog", message);
				return this.onaddlog._fireEvent(this, evt);
			}
			return true;
		};

		_pApplication.on_fire_oncommunication = function (obj, state) {
			if (this.oncommunication && this.oncommunication._has_handlers) {
				var evt = new nexacro.Communication(obj, "oncommunication", state);
				return this.oncommunication._fireEvent(this, evt);
			}
			return true;
		};

		_pApplication.on_fire_onaccessibilitykey = function (key_code, alt_key, ctrl_key, shift_key, from_comp, from_refer_comp) {
			if (this.onaccessibilitykey && this.onaccessibilitykey._has_handlers) {
				var evt = new nexacro.KeyEventInfo(this, "onaccessibilitykey", alt_key, ctrl_key, shift_key, key_code, from_comp, from_refer_comp);
				return this.onaccessibilitykey._fireEvent(this, evt);
			}
			return false;
		};

		_pApplication._on_callback_beforeuserconfirm = function () {
			return this.on_fire_onbeforeuserconfirm();
		};
		_pApplication._on_callback_afteruserconfirm = function () {
			return this.on_fire_onafteruserconfirm();
		};
		_pApplication.on_fire_onbeforeuserconfirm = function () {
			if (this.onbeforeuserconfirm && this.onbeforeuserconfirm._has_handlers) {
				var evt = new nexacro.EventInfo(this, "onbeforeuserconfirm");
				return this.onbeforeuserconfirm._fireEvent(this, evt);
			}
			return false;
		};

		_pApplication.on_fire_onafteruserconfirm = function () {
			if (this.onafteruserconfirm && this.onafteruserconfirm._has_handlers) {
				var evt = new nexacro.EventInfo(this, "onafteruserconfirm");
				return this.onafteruserconfirm._fireEvent(this, evt);
			}
			return false;
		};

		_pApplication.on_fire_onduplicateexecution = function (_globalvalue) {
			if (this.onduplicateexecution && this.onduplicateexecution._has_handlers) {
				var _arguments = [];

				var search_regexpr = /([a-z0-9_]*)(=|:[sgc]=)(([^,'"]+)|('[^']*')|("[^"]*"))(,|$)/ig;
				var matched;
				while (matched = search_regexpr.exec(_globalvalue)) {
					var globalvalue = matched[0];
					if (globalvalue.charAt(globalvalue.length - 1) == ',') {
						globalvalue = globalvalue.substr(0, globalvalue.length - 1);
					}

					var equal_idx = globalvalue.indexOf("=");
					var variable_name = globalvalue.substr(0, equal_idx);

					if (variable_name[0] >= '0' && variable_name.charAt(0) <= '9') {
						continue;
					}
					var variable_value = globalvalue.substr(equal_idx + 1, globalvalue.length - equal_idx);

					var variable_type = null;
					var colon_idx = variable_name.indexOf(":");
					if (colon_idx > 0) {
						variable_type = variable_name.substr(colon_idx + 1, 1);
						variable_name = variable_name.substr(0, colon_idx);
					}

					if (variable_value.length > 2 && ((variable_value.charAt(0) == '\'' && variable_value.charAt(variable_value.length - 1) == '\'') || (variable_value.charAt(0) == '\"' && variable_value.charAt(variable_value.length - 1) == '\"'))) {
						variable_value = variable_value.substr(1, variable_value.length - 2);
					}

					switch (variable_type) {
						case 's':
							_arguments.push({
								name : variable_name, 
								value : variable_value, 
								usecokie : true
							});
							break;
						case 'g':
						default:
							_arguments.push({
								name : variable_name, 
								value : variable_value, 
								usecokie : false
							});
							break;
					}
				}

				var evt = new nexacro.DuplicateExecutionEventInfo(this, "onduplicateexecution", _arguments);
				return this.onduplicateexecution._fireEvent(this, evt);
			}
			return false;
		};

		_pApplication.on_fire_onnotification = function (v) {
			var parameters = JSON.parse(v);

			if (parameters.token != undefined) {
				nexacro.System._setNotificationToken(parameters.token);
			}

			if (this.onnotification && this.onnotification._has_handlers) {
				var evt = new nexacro.NotificationEventInfo(this, "onnotification", parameters.reason, parameters.messages);
				return this.onnotification._fireEvent(this, evt);
			}

			return false;
		};

		_pApplication.on_fire_ondevicepermission = function (v) {
			var parameters = JSON.parse(v);

			if (this.ondevicepermission && this.ondevicepermission._has_handlers) {
				var evt = new nexacro.DevicePermissionEventInfo(this, "ondevicepermission", parameters.reason, parameters.status);
				return this.ondevicepermission._fireEvent(this, evt);
			}

			return false;
		};

		_pApplication._on_sys_focus = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_lbuttondown = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_lbuttonup = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_rbuttondown = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_rbuttonup = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_mouseup = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_mousedown = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_mouseenter = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_mouseleave = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_mousemove = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_mousewheel = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_keydown = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_keypress = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_keyup = function (node, e, bubble) {
			return false;
		};

		_pApplication._on_sys_dblclick = function (node, e, bubble) {
			return false;
		};
		_pApplication._on_sys_touch = function (node, e, bubble) {
			return false;
		};


		_pApplication._onSystemWarning = function (obj, errorcode) {
			var args = Array.prototype.slice.call(arguments, 2);
			var errormsg = this._getErrorMessge.apply(this, args);

			this._onFireSystemError(obj, false, errorcode, 2, errormsg, true);
		};

		_pApplication._onSystemError = function (obj, errortype, errormsg) {
			this._onFireSystemError(obj, true, errortype, 1, errormsg, true);
		};


		_pApplication._onHttpSystemError = function (obj, bfireevent, errorobj, errortype, url, returncode, requesturi, locationuri, reason) {
			var ret = false;
			var commerrorobj = nexacro.MakeCommunicationError(this, errortype, url, returncode, requesturi, locationuri, reason);
			if (bfireevent) {
				ret = this.on_fire_onerror(obj, commerrorobj.name, commerrorobj.message, errorobj, returncode, requesturi, locationuri, reason);
			}

			this._onFireSystemError(obj, false, commerrorobj.name, 1, commerrorobj.message, true);

			return ret;
		};


		_pApplication._onFireSystemError = function (errorobj, bfireevent, errortype, msglevel, message, bsystemlog) {
			if (bfireevent) {
				this.on_fire_onerror(application, errortype, message, errorobj);
			}

			if (message) {
				nexacro._writeTraceLog(msglevel, message, bsystemlog, this._loglevel);
			}
		};


		_pApplication._getMsg = function (errorcode) {
			if (nexacro._errortable) {
				var errmsg = nexacro._errortable[system._language][errorcode];

				if (!errmsg) {
					return "";
				}
				var arg = Array.prototype.slice.call(arguments, 1);
				var n = arg.length;

				for (var i = 0; i < n; i++) {
					var a = "%[" + i + "]";
					errmsg = errmsg.replace(a, arg[i]);
				}
				return errmsg;
			}
		};

		_pApplication._getErrorMessge = function (errorcode) {
			if (nexacro._errortable) {
				var lang = "en";
				if (nexacro._errortable[system._language]) {
					lang = system._language;
				}

				var errmsg = nexacro._errortable[lang][errorcode];

				if (!errmsg) {
					return "";
				}
				var args = Array.prototype.slice.call(arguments, 1);

				var result = "";
				var argnum = 0;
				var errormsgcount = errmsg.length;
				var argscount = args.length;
				for (var i = 0; i < errormsgcount; i++) {
					var str = errmsg[i];
					if (argscount > 0 && str.length == 2 && str.charCodeAt(0) == 0x25) {
						var argnum = (str.charCodeAt(1) - 0x30) >>> 0;
						if (argnum < errormsgcount) {
							str = args[argnum];
						}
					}
					result += str;
				}
				return result;
			}
		};

		_pApplication.addErrorMessage = function (lang, code, msg) {
			if (!nexacro._errortable) {
				nexacro._errortable = {
				};
			}
			var args_len = arguments.length;
			if (args_len == 1) {
				var errortable = lang;
				for (var locale in errortable) {
					var errortable_locale = errortable[locale];
					for (code in errortable_locale) {
						message = errortable_locale[code];
						if (!nexacro._errortable[locale]) {
							nexacro._errortable[locale] = {
							};
						}
						nexacro._errortable[locale][code] = message;
					}
				}
			}
			else {
				if (nexacro._errortable[lang] == null) {
					nexacro._errortable[lang] = nexacro._errortable["en"];
				}

				if (nexacro._errortable[lang]) {
					nexacro._errortable[lang][code] = msg;
				}
			}
		};


		_pApplication._loadGlobalValueData = function (key, url) {
		};

		_pApplication._addGlobalVariableFromGlobalValue = function () {
			var globalvalues = nexacro._getGlobalValueData(this.key, this.xadl);
			if (!globalvalues) {
				return;
			}


			var search_regexpr = /([a-z0-9_]*)(=|:[sgc]=)(([^,'"]+)|('[^']*')|("[^"]*"))(,|$)/ig;
			var matched;
			while (matched = search_regexpr.exec(this._globalvalue)) {
				var globalvalue = matched[0];
				if (globalvalue.charAt(globalvalue.length - 1) == ',') {
					globalvalue = globalvalue.substr(0, globalvalue.length - 1);
				}

				var equal_idx = globalvalue.indexOf("=");
				var variable_name = globalvalue.substr(0, equal_idx);

				if (variable_name[0] >= '0' && variable_name.charAt(0) <= '9') {
					continue;
				}
				var variable_value = globalvalue.substr(equal_idx + 1, globalvalue.length - equal_idx);

				var variable_type = null;
				var colon_idx = variable_name.indexOf(":");
				if (colon_idx > 0) {
					variable_type = variable_name.substr(colon_idx + 1, 1);
					variable_name = variable_name.substr(0, colon_idx);
				}

				if (variable_value.length > 2 && ((variable_value.charAt(0) == '\'' && variable_value.charAt(variable_value.length - 1) == '\'') || (variable_value.charAt(0) == '\"' && variable_value.charAt(variable_value.length - 1) == '\"'))) {
					variable_value = variable_value.substr(1, variable_value.length - 2);
				}

				switch (variable_type) {
					case 's':
						var expire;
						this.setVariable(variable_name, variable_value, "share", expire);
						break;
					case 'g':
					default:
						this.setVariable(variable_name, variable_value);
						break;
				}
			}
		};

		_pApplication.quickView = function (url, project_path, archive_path) {
			if (project_path) {
				this._project_uri = project_path;
				nexacro._setLocalStorage("_project_uri", project_path, "string");
				var base_url = nexacro._getProjectBaseURL(url);

				if (project_path != base_url) {
					this._localcache_path = base_url;
					nexacro._setLocalStorage("_localcache_path", base_url, "string");
				}
			}

			this.loadADL(url);
		};

		_pApplication.load = function (key, url, project_path, archive_path) {
			if (project_path) {
				var _url = project_path ? project_path.substr(project_path.length - 1) == "/" ? project_path : project_path + "/" : project_path;
				this._project_uri = _url;
				nexacro._setLocalStorage("_project_uri", _url, "string");

				var base_url = nexacro._getProjectBaseURL(url);

				if (project_path != base_url) {
					this._localcache_path = base_url;
					nexacro._setLocalStorage("_localcache_path", base_url, "string");
				}
			}

			this.loadADL(url, key);
		};


		_pApplication.loadADL = function (url, key) {
			var ver = url.split("?version=");
			if (ver.length > 1) {
				this._appversion = ver[1];
				nexacro._setLocalStorage("appversion", ver[1], "string");
			}

			this.key = key;

			var request_url = url;
			var _project_uri = this._project_uri;

			if (request_url.length > 5 && request_url.substring(request_url.length - 5) == ".xadl") {
				request_url = request_url + ".js" + this._addcachequerystring(request_url, "appversion");
			}

			var server_url = request_url;
			if (nexacro._isAbsolutePath(request_url)) {
				if (!_project_uri) {
					this._project_uri = nexacro._getBaseUrl(request_url);
					nexacro._setLocalStorage("_project_uri", nexacro._getBaseUrl(request_url), "string");
				}
			}
			else {
				if (!_project_uri) {
					this._project_uri = nexacro._getProjectBaseURL(request_url);
					nexacro._setLocalStorage("_project_uri", nexacro._getProjectBaseURL(request_url), "string");
				}
				server_url = request_url = nexacro._transfullurl(this._project_uri, request_url);

				if (this._localcache_path) {
					var cache_url = url;
					if (cache_url.substring(cache_url.length - 3) == ".js") {
						cache_url = cache_url.substring(0, cache_url.length - 3);
					}
					if (nexacro._hasLocalCacheUrl(cache_url)) {
						request_url = nexacro._transfullurl(this._localcache_path, url);
					}
				}
			}

			this.xadl = server_url;
			var service = nexacro._getServiceObject(server_url);

			this._load_manager.loadMainModule(request_url, false, true, false, service);
		};

		_pApplication._addcachequerystring = function (url, type) {
			var qrystr = "?version=";
			if (type == "appversion") {
				var _appversion = nexacro._getLocalStorage("appversion", "");
				qrystr += (application.version || _appversion);
			}
			else {
				qrystr += nexacro._getServiceObject(url) ? nexacro._getServiceObject(url).version : 0;
			}

			return qrystr;
		};

		_pApplication._addTypedefintion = function (typedefintion) {
			var typedefinition_url;
			typedefinition_url = nexacro._getServiceLocation(typedefintion.name);

			if (typedefintion && typedefintion.context == this) {
				this._typedefinition_url = typedefinition_url;
				nexacro._setLocalStorage("_typedefinition_url", typedefinition_url, "string");

				this.services = typedefintion.services;
			}
			this._typedefinitions.push({
				id : typedefinition_url, 
				obj : typedefintion
			});
			this._typedeflen = this._typedefinitions.length;
			nexacro._setLocalStorage("_typedeflen", this._typedeflen, "int");
		};


		_pApplication._findTypedefintion = function (typedefintion_url) {
			var _typedef = this._typedefinitions;

			for (var i = 0, n = _typedef.length; i < n; i++) {
				if (_typedef[i].id == typedefintion_url) {
					return 0;
				}
			}
			return -1;
		};

		_pApplication._addService = function (typedefinition, prefixid, type, url, cachelevel, codepage, language, version, communication) {
			if (typedefinition) {
				if (typeof typedefinition == "string") {
					var service = new nexacro.ServiceItem(prefixid, type, url, cachelevel, codepage, language, version, communication);
					this.services.add(prefixid, service);

					var typedefinition_url = nexacro._getServiceLocation(typedefinition);
					if (typedefinition_url) {
						this._typedefinition_url = typedefinition_url;
						nexacro._setLocalStorage("_typedefinition_url", typedefinition_url, "string");
					}
				}
				else {
					typedefinition.addService(prefixid, type, url, cachelevel, codepage, language, version, communication);
					this.services = typedefinition.services;
				}
			}
		};


		_pApplication._loadModules = function (modules) {
			var base_url;
			if (this._localcache_path) {
				base_url = this._localcache_path;
			}

			this._component_uri = nexacro._getServiceLocation(this._component_uri, base_url);

			if (nexacro.Component) {
				return;
			}

			var cnt = modules.length;
			for (var i = 0; i < cnt; i++) {
				if (modules[i]) {
					var realmoudlueurl = nexacro._getServiceLocation(modules[i], this._component_uri);
					var service = nexacro._getServiceObject(modules[i]);
					this._load_manager.loadGlobalModule(realmoudlueurl, true, service);
				}
			}
		};


		_pApplication._addClasses = function (registerclass) {
			this._registerclass = this._registerclass.concat(registerclass);
			nexacro._setLocalStorage("_registerclass", this._registerclass, "json");
		};


		_pApplication._addRegisterClass = function (registername, classname) {
			var registerclass = nexacro._getLocalStorage("_registerclass", []);
			registerclass.push({
				id : registername, 
				classname : classname
			});

			this._registerclass = this._registerclass.concat(registerclass);
			nexacro._setLocalStorage("_registerclass", registerclass, "json");
		};

		_pApplication._registerClass = function (_jsContext) {
			var registerclass = this._registerclass;
			var len = registerclass.length;

			for (var i = 0; i < len; i++) {
				var item = registerclass[i];
				if (item) {
					if (!_jsContext[item.id]) {
						_jsContext[item.id] = _jsContext.eval(item.classname);
					}
				}
			}
		};

		_pApplication._setAliasForJSContext = function (_jsContext) {
			var aliases = this._aliaslist;
			var len = aliases.length;
			for (var i = 0; i < len; i++) {
				var item = this.components[aliases[i].name];
				if (item) {
					_jsContext[item.name] = eval(item.classname);
				}
			}
		};

		_pApplication._addExtensionModules = function (modules) {
			this._extensionmodules = modules;
			var extensionmodules = this._extensionmodules;
			if (extensionmodules) {
				var len = extensionmodules.length;
				if (len > 0) {
					for (var i = 0; i < len; i++) {
						var item = extensionmodules[i];
						if (item) {
							nexacro._addExtensionModule(item);
						}
					}
				}
			}
		};

		_pApplication._addUpdateResource = function (type, updateurl, file, targetpath, ref, version, desc, failpass) {
			var real_url = nexacro._getServiceLocation(file, updateurl);
			var service = nexacro._getServiceObject(file);
			this._load_manager.loadUpdateModule(real_url, type, targetpath, ref, version, desc, failpass, service);
		};


		_pApplication._updateResources = function (updateresources) {
			if (updateresources) {
				var cur_osversion = nexacro._getOSVersion();
				var cur_osversion_str = (cur_osversion ? cur_osversion.toLowerCase().replace(/ /g, "_") : "default");

				var cur_systype_str = nexacro.SystemType.toLowerCase();
				if (cur_systype_str.indexOf("win64") >= 0) {
					cur_systype_str = "win32";
				}
				else if (cur_systype_str.indexOf("ipad") >= 0) {
					cur_systype_str = "iphone";
				}

				if (cur_systype_str.indexOf("android") >= 0) {
					return;
				}

				var selectsystemtype = updateresources[cur_systype_str];
				var updateurl;
				if (selectsystemtype) {
					updateurl = selectsystemtype.updateurl;
					this._addUpdateOS(selectsystemtype, cur_osversion_str, updateurl, true);
					this._addUpdateOS(selectsystemtype, "all", updateurl, false);
				}
			}
		};


		_pApplication._addUpdateOS = function (systemtype, cur_osversion, url, bfindos) {
			var selectsystemtype = systemtype;
			var updateurl = url;
			var cur_device = nexacro.DEVICE;
			var cur_device_str = cur_device ? cur_device.toLowerCase() : "default";


			var selectosversion = selectsystemtype[cur_osversion];

			if (!selectosversion && bfindos) {
				var cur_os = nexacro._getOS();
				var cur_os_str = (cur_os ? cur_os.toLowerCase().replace(/ /g, "_") : "");
				selectosversion = selectsystemtype[cur_os_str];

				if (!selectosversion) {
					selectosversion = selectsystemtype["default"];
				}
			}

			if (selectosversion) {
				if (selectosversion.updateurl) {
					updateurl = selectosversion.updateurl;
				}

				var selectdevice = selectosversion[cur_device_str];
				if (!selectdevice) {
					selectdevice = selectosversion["default"];
				}

				if (selectdevice && selectdevice.resources) {
					this._addUpdateDeviceResources(selectdevice, updateurl);
				}

				selectdevice = selectosversion["all"];
				if (selectdevice && selectdevice.resources) {
					this._addUpdateDeviceResources(selectdevice, updateurl);
				}
			}
		};

		_pApplication._addUpdateDeviceResources = function (device, url) {
			var updateurl = url;
			var selectdevice = device;
			if (selectdevice.updateurl) {
				updateurl = selectdevice.updateurl;
			}

			var realupdateurl = nexacro._getServiceLocation(updateurl);
			var resources = selectdevice.resources;
			var len = resources.length;

			for (var i = 0; i < len; i++) {
				var realurl = resources[i].file;
				if (nexacro._isAbsolutePath(realurl) != true) {
					realurl = nexacro._getServiceLocation(resources[i].file, realupdateurl);
				}


				var service = nexacro._getServiceObject(resources[i].file);
				this._load_manager.loadUpdateModule(realurl, resources[i].type, resources[i].targetpath, resources[i].ref, resources[i].version, resources[i].failpass, service);
			}
		};

		_pApplication._loadInclude = function (mainurl, url, asyncmode) {
			var service = nexacro._getServiceObject(url);
			url = nexacro._makeurl(url);
			this._load_manager.loadIncludeModule(url, null, asyncmode, service);
		};

		_pApplication.loadCss = function (url) {
			var cssurl = [];
			cssurl.push(nexacro._getServiceLocation(url));

			var checkversion = nexacro._getLocalStorage("checkversion", false);
			var _appversion = nexacro._getLocalStorage("appversion", "");
			if (!checkversion && !_appversion) {
				cssurl.push(".js");
			}

			this._typedeflen = this._typedefinitions.length;
			nexacro._setLocalStorage("_typedeflen", this._typedeflen, "int");

			var service = nexacro._getServiceObject(url);

			this._cssurls.push(url);
			nexacro._setLocalStorage("_cssurls", this._cssurls, "array");

			this._load_manager.loadCssModule(cssurl.join(""), null, null, service);
		};


		_pApplication.loadTheme = function (themeid, hithemeid) {
			if (this._curscreen) {
				if (this._curscreen.themeid) {
					themeid = this._curscreen.themeid;
				}
				if (this._curscreen.hithemeid) {
					hithemeid = this._curscreen.hithemeid;
				}
			}

			var curthemeid = themeid;
			if (nexacro._checkHighContrast() && hithemeid) {
				curthemeid = hithemeid;
			}

			if (curthemeid) {
				var themename;
				var idx = curthemeid.indexOf(".xtheme");
				if (idx < 0) {
					themename = curthemeid;
				}
				else if (idx > 0) {
					themename = curthemeid.substring(0, idx);
				}

				var cssurl, base_url;
				if (themename) {
					nexacro._clearLocalThemeCache();

					var idx = themename.indexOf("::");
					if (idx > 0) {
						var prefixurl = themename.substring(0, idx);
						themename = themename.substring(idx + 2);

						this._theme_uri = "./_theme_/" + prefixurl + "/" + themename;
						nexacro._setLocalStorage("_theme_uri", this._theme_uri, "string");
					}
					else {
						this._theme_uri = "./_theme_/" + themename;
						nexacro._setLocalStorage("_theme_uri", this._theme_uri, "string");
					}

					var bLocalCacheType = false;


					if (this._localcache_path && nexacro._hasLocalCacheUrl(curthemeid)) {
						cssurl = nexacro._getLocalCacheUrl(curthemeid);
						if (cssurl) {
							var service = nexacro._getServiceObject(curthemeid);
							this._load_manager.loadCssModule(cssurl, null, null, service);
							return;
						}

						bLocalCacheType = true;
						base_url = this._localcache_path;
					}

					cssurl = this._theme_uri + "/theme.css";
					cssurl = nexacro._getServiceLocation(cssurl, base_url);

					var checkversion = nexacro._getLocalStorage("checkversion", false);
					var _appversion = nexacro._getLocalStorage("appversion", "");
					if (!checkversion && !_appversion) {
						cssurl += ".js";
					}
					if (bLocalCacheType) {
						nexacro._addLocalCacheUrl(curthemeid, cssurl);
					}

					var service = nexacro._getServiceObject(cssurl);
					this._load_manager.loadCssModule(cssurl, null, null, service);
				}
			}
		};

		_pApplication.createMainFrame = function (id, position, left, top, width, height, right, bottom, parent) {
			var mainframe = new nexacro.MainFrame(id, position, left, top, width, height, right, bottom, parent);
			this[id] = this.mainframe = mainframe;
			this.all.add_item(id, mainframe);

			return mainframe;
		};

		_pApplication.createWidget = function (id, position, left, top, width, height, right, bottom, parent) {
			var widget;
			return widget;
		};

		_pApplication.createTray = function (id, parent) {
			var tray = new nexacro.Tray(id, parent);
			this.trays.add_item(id, tray);
			this.all.add_item(id, tray);

			return tray;
		};

		_pApplication.addTray = function (id, obj) {
			if (obj._type_name != "Tray") {
				return -1;
			}

			if (this.trays.indexOf(id) > -1) {
				return -1;
			}

			var idx = this.trays.add_item(id, obj);
			this.all.add_item(id, obj);

			return idx;
		};

		_pApplication.removeTray = function (id) {
			if (typeof (id) == "string") {
				if (this.trays[id]) {
					this.trays[id]._destroy();
				}
			}
			else {
				var cnt = this.trays.length;
				for (var i = cnt - 1; i >= 0; i--) {
					if (this.trays[i]) {
						this.trays[i]._destroy();
					}
				}
			}
		};

		_pApplication.removeDatasets = function () {
			var len = this._datasets ? this._datasets.length : 0;
			for (var i = 0; i < len; i++) {
				this._datasets[i].destroy();
			}
			this._datasets = null;
		};
		_pApplication._addPreloadList = function (type, url, id, args) {
			if (!url) {
				return;
			}

			var fullurl = nexacro._getServiceLocation(url);
			var service = nexacro._getServiceObject(url);

			if (type == "data") {
				service = this._getServiceObject(url, true);
				this._load_manager.addPreloadItem(type, fullurl, id, args, service);
			}
			else {
				service = this._getServiceObject(url);
				this._load_manager.addPreloadItem(type, url, (id ? id : this), null, service);
			}
		};

		_pApplication._loadScreenInfo = function (screeninfo) {
			this._screeninfo = screeninfo;

			var arg_screenid = nexacro._getCurrentScreenID();

			var curscreen = this._curscreen = this._searchScrInfo(arg_screenid);
			if (curscreen) {
				if (!curscreen.zoommin) {
					curscreen._zoommin = undefined;
				}
				else {
					var zoommin = curscreen.zoommin;
					if (typeof zoommin == "string" && zoommin.charAt(zoommin.length - 1) == "%") {
						curscreen._zoommin = parseFloat(zoommin.slice(0, zoommin.length - 1)) / 100.0;
					}
					else {
						curscreen._zoommin = parseFloat(zoommin);
					}

					if (curscreen._zoommin >= 1) {
						curscreen._zoommin = 1;
					}
					nexacro._minimum_scale = curscreen._zoommin;
				}

				if (!curscreen.zoommax) {
					curscreen._zoommax = undefined;
				}
				else {
					var zoommax = curscreen.zoommax;
					if (typeof zoommax == "string" && zoommax.charAt(zoommax.length - 1) == "%") {
						curscreen._zoommax = parseFloat(zoommax.slice(0, zoommax.length - 1)) / 100.0;
					}
					else {
						curscreen._zoommax = parseFloat(zoommax);
					}

					if (curscreen._zoommax <= 1) {
						curscreen._zoommax = 1;
					}
					nexacro._maximum_scale = curscreen._zoommax;
				}
			}

			nexacro._applyScreenAutozoom();
		};

		_pApplication.getParentContext = function () {
			return null;
		};

		_pApplication._addCss = function (objtype, styleProp, styleobj, pseudoarr) {
			var type_arr = objtype.split(">");
			var cnt = type_arr.length;

			var css = this._css_selectors;
			css._has_items = true;
			var type_id = "";
			var ref_id = "";
			var cls_name = "";

			for (var i = 0; i < cnt; i++) {
				var type_name = type_arr[i];

				if (type_name == "*") {
					continue;
				}
				if (type_name.substr(0, 1) == "#") {
					ref_id += type_name;
				}
				else if (type_name.substr(0, 1) == ".") {
					if (ref_id == "") {
						cls_name = type_name;
					}
				}
				else {
					if (type_name.substr(0, 2) == "*.") {
						type_name = type_name.substring(1);
					}

					if (ref_id == "") {
						type_id = type_name;
					}
				}
			}
			if (type_id != "") {
				var css2 = css[type_id];
				if (!css2) {
					css[type_id] = css2 = {
						_is_selector : true
					};
				}
				css = css2;
			}
			else if (cls_name != "") {
				var css2 = css[cls_name];
				if (!css2) {
					css[cls_name] = css2 = {
						_is_selector : true
					};
				}
				css = css2;
			}

			if (ref_id != "") {
				var css2 = css[ref_id];
				if (!css2) {
					css[ref_id] = css2 = {
						_is_selector : true
					};
				}
				css = css2;
			}

			css._has_attr_items = true;
			var css_item = css[styleProp];
			if (!css_item) {
				css[styleProp] = css_item = {
				};
			}
			var i = 0;
			var pseudo_cnt = pseudoarr.length;
			var cur_pseudo;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
			if (i >= pseudo_cnt) {
				return;
			}
			cur_pseudo = pseudoarr[i++];
			css_item[cur_pseudo] = styleobj;
		};

		_pApplication._make_find_csslist = function () {
			var css_list = this._find_csslist;
			if (!css_list) {
				css_list = [];
				var pThis = this;
				var css;
				while (pThis) {
					css = pThis._css_selectors;
					if (css && css._has_items) {
						css_list.push(css);
					}

					if (pThis.parent == null && !pThis._is_application) {
						pThis = application;
					}
					else if (pThis._is_frame && pThis._is_popup_frame) {
						break;
					}
					else {
						pThis = pThis.parent;
					}
				}
				this._find_csslist = css_list;
			}
			return css_list;
		};

		_pApplication._addProtocol = function (name, protocoladp) {
			this._protocols[name] = protocoladp;
		};

		_pApplication._isProtocol = function (name) {
			var registerclass = nexacro._getLocalStorage("_registerclass", []);
			var len = registerclass.length;
			for (var i = 0; i < len; i++) {
				var item = registerclass[i];
				if (item && item.id == name && nexacro._isRuntimeProtocol(name) == false) {
					return true;
				}
			}
			return false;
		};

		_pApplication._getProtocol = function (name) {
			return this._protocols[name];
		};

		_pApplication._removeProtocols = function () {
			var item;
			var protocols = this._protocols;
			for (item in protocols) {
				if (protocols[item].finalize) {
					protocols[item].finalize();
				}
			}

			this._protocols = {
			};
		};

		_pApplication._getProtocolLocation = function (str) {
			if (!str) {
				return "";
			}

			if (str.indexOf("://") >= 0) {
				var strA = str.split("://");
				var name = strA[0];
				var url = strA[1];

				if (name == "http" || name == "https" || name == "file") {
					return str;
				}

				var protocolUrl = nexacro._getProtocol(name);
				if (protocolUrl != null) {
					return nexacro._mergeUrl(protocolUrl, url);
				}
			}
			return str;
		};

		_pApplication.setProtocolVar = function (name, key, val) {
			nexacro._setProtocolVar(name, key, val);
		};
		_pApplication._getNamedImage = function (id) {
			return nexacro._getLocalStorage("images")[id];
		};

		_pApplication._addLocalCacheUrl = function (url, localurl) {
			if (localurl) {
				localurl = localurl.replace(/\\/g, "/");
			}
			this._localcaches[url] = localurl;
		};

		_pApplication._hasLocalCacheUrl = function (url) {
			return (url in this._localcaches);
		};

		_pApplication._getLocalCacheUrl = function (url) {
			return this._localcaches[url];
		};

		_pApplication._addLocalThemeCacheUrl = function (url, localurl) {
			nexacro._addlocalthemecacheurl = true;
			if (localurl) {
				localurl = localurl.replace(/\\/g, "/");
			}
			this._localthemecaches[url] = localurl;
		};

		_pApplication._hasLocalThemeCacheUrl = function (url) {
			return (url in this._localthemecaches);
		};

		_pApplication._getLocalThemeCacheUrl = function (url) {
			return this._localthemecaches[url];
		};

		_pApplication._clearLocalThemeCache = function () {
			this._localthemecaches = {
			};
		};

		_pApplication._getService = function (prefix, typedefintion_url) {
			if (typedefintion_url) {
				var cnt = this._typedefinitions.length;
				var i = 0;
				for (i = 0; i < cnt; i++) {
					if (this._typedefinitions[i].id == typedefintion_url) {
						return this._typedefinitions[i].obj.services[prefix];
					}
				}
			}

			return this.services[prefix];
		};


		_pApplication._addVariable = function (id, val, usecookie, usesecure, defaultval, expire, unset) {
			if (arguments.length >= 3 && val == null) {
				val = "";
			}

			this[id] = val;
			usecookie = !!(usecookie == true || usecookie == "true");
			usesecure = !!(usesecure == true || usesecure == "true");

			if (!usecookie) {
				this._variables.push(id);
			}
			else {
				if (!usesecure) {
					this._cookie_variables.push(id);
					nexacro._setLocalStorage("_cookie_variables", this._cookie_variables, "array");
					if (!unset) {
						nexacro._setCookie(id, val, expire);
					}
				}
				else {
					this._secure_cookie_variables.push(id);
					nexacro._setLocalStorage("_secure_cookie_variables", this._secure_cookie_variables, "array");
					if (!unset) {
						nexacro._setCookie(id, val, expire, true);
					}
				}
			}

			this.all.add_item(id, val);

			return true;
		};

		_pApplication._getVariable = function (id) {
			return this[id];
		};

		_pApplication._existVariable = function (id) {
			var vars = this._variables;
			var len = vars.length;
			for (var i = 0; i < len; i++) {
				if (vars[i] == id) {
					return true;
				}
			}

			var cookies = nexacro._getLocalStorage("_cookie_variables", []);
			len = cookies.length;
			for (var i = 0; i < len; i++) {
				if (cookies[i] == id) {
					return true;
				}
			}
			return false;
		};


		_pApplication._addImage = function (id, url) {
			url = url.replace(/\\/g, "/");
			this.images.add(id, url);
			nexacro._setLocalStorage("images", this.images, "string");
		};

		_pApplication._addDataset = function (id, obj) {
			this._addObject(id, obj);
			this._datasets.push(obj);
		};

		_pApplication._addObject = function (id, obj) {
			this[id] = obj;
			this.all.add_item(id, obj);
		};

		_pApplication._getDatasetObject = function (datasetid) {
			return this[datasetid];
		};

		_pApplication._waitCursor = function (wait_flag, context) {
			var mainframe = this.mainframe;
			if (mainframe) {
				mainframe._waitCursor(wait_flag, context);
			}
		};


		_pApplication._transfullurl = function (baseurl, url) {
			if (nexacro._isAbsolutePath(url) == true) {
				return url;
			}

			baseurl = nexacro._getBaseUrl(baseurl);

			var fullurl = null;

			if (baseurl.indexOf("?") >= 0) {
				fullurl = baseurl + url;
			}
			else {
				fullurl = nexacro._mergeUrl(baseurl, url);
			}

			var urlarr = fullurl.split("/");

			var n = urlarr.length;

			var realpath = [];

			var i = 0;
			while (i < n) {
				if (urlarr[i] != "." && urlarr[i] != "..") {
					break;
				}
				realpath.push(urlarr[i]);
				i++;
			}

			while (i < n) {
				if (urlarr[i] != ".") {
					if (urlarr[i] == "..") {
						realpath.pop();
					}
					else {
						realpath.push(urlarr[i]);
					}
				}
				i++;
			}

			return realpath.join("/");
		};

		_pApplication._transurl = function (baseurl, typedefintionurl, url) {
			var exturl = url;

			if (exturl.indexOf("theme://") >= 0) {
				var bLocalCacheType = false;
				if (this._hasLocalCacheUrl(url)) {
					var local_url = this._getLocalCacheUrl(url);
					if (local_url) {
						return local_url;
					}

					bLocalCacheType = true;
				}

				var strA = exturl.split("://");
				var name = strA[0];
				var suburl = strA[1];

				var realpath = [];
				var separator = "/";

				var theme_uri = this._theme_uri;
				realpath.push(theme_uri);

				if (theme_uri.charAt(theme_uri.length - 1) == "/") {
					separator = "";
				}
				realpath.push(suburl);

				exturl = realpath.join(separator).replace(/\\/g, "/");
				if (nexacro._isAbsolutePath(exturl) != true) {
					if (bLocalCacheType) {
						exturl = this._transfullurl(this._localcache_path, exturl);
					}
					else {
						exturl = this._transfullurl(this._project_uri, exturl);
					}
				}

				if (bLocalCacheType) {
					this._addLocalCacheUrl(url, exturl);
				}
			}
			else {
				var bLocalCacheType = false;
				if (this._hasLocalCacheUrl(url)) {
					var local_url = this._getLocalCacheUrl(url);
					if (local_url) {
						return local_url;
					}

					bLocalCacheType = true;
				}

				if (exturl.indexOf("::") < 0) {
					if (bLocalCacheType) {
						baseurl = this._localcache_path;
					}
					exturl = this._transfullurl(baseurl, exturl);
				}
				else {
					var strA = exturl.split("::");
					var prefix = strA[0];
					var suburl = strA[1];
					var service = this._getService(prefix, typedefintionurl);
					if (service != null) {
						var serviceurl = service.url;
						if (serviceurl.charAt(serviceurl.length - 1) != "/") {
							serviceurl = serviceurl + "/";
						}

						if (suburl.charAt(0) == "/") {
							suburl = suburl.substring(1);
						}

						if (nexacro._isAbsolutePath(serviceurl) == true) {
							exturl = this._transfullurl(serviceurl, suburl);
						}
						else {
							var basepath;
							if (bLocalCacheType) {
								basepath = this._transfullurl(this._localcache_path, serviceurl);
							}
							else {
								basepath = this._transfullurl(typedefintionurl, serviceurl);
							}
							exturl = this._transfullurl(basepath, suburl);
						}
					}
					else {
						exturl = exturl.replace(/\\/g, "/");
					}
				}

				if (bLocalCacheType) {
					this._addLocalCacheUrl(url, exturl);
				}
			}

			var checkversion = nexacro._getLocalStorage("checkversion", false);
			var _appversion = nexacro._getLocalStorage("appversion", "");
			if (checkversion) {
				var type = "appversion";
				if (exturl.match('.xfdl') || exturl.match('.xjs') || exturl.match('.css')) {
					exturl += ".js";
					if (!exturl.match('.css')) {
						type = "serviceversion";
					}
				}
				exturl += this._addcachequerystring(url, type);
			}
			else if (_appversion) {
				exturl += ".js?version=" + _appversion;
			}

			return exturl;
		};


		_pApplication._getServiceLocation = function (url, baseurl, typedefinition_url) {
			if (!typedefinition_url) {
				typedefinition_url = this._typedefinition_url;
			}

			if (!baseurl) {
				baseurl = this._project_uri;
			}

			return this._transurl(baseurl, typedefinition_url, url);
		};

		_pApplication._getFDLLocation = function (fdlurl, baseurl) {
			if (!fdlurl || fdlurl.length <= 0) {
				return fdlurl;
			}

			var url = this._getServiceLocation(fdlurl, baseurl);
			if (url.length > 5) {
				if (url.substring(url.length - 5) == ".xfdl") {
					var checkversion = nexacro._getLocalStorage("checkversion", false);
					url = url + ".js" + (checkversion ? this._addcachequerystring(url, "serviceversion") : "");
				}
			}
			return url;
		};

		_pApplication._getServiceObject = function (url, bDefaultNone) {
			var serviceprefix = url.split("::");

			if (serviceprefix.length >= 2) {
				var service = this._getService(serviceprefix[0]);
				if (service) {
					return service;
				}
			}

			if (!this._defaultservice) {
				this._defaultservice = new nexacro.ServiceItem();
				this._defaultservice.cachelevel = "session";
				this._defaultservice.version = "0.0";
			}

			if (url.toLowerCase().indexOf("file://") >= 0 || bDefaultNone) {
				this._defaultservice.cachelevel = "none";
			}
			else {
				this._defaultservice.cachelevel = "session";
			}

			return this._defaultservice;
		};

		_pApplication.flashWindow = function (strType, nCount, nInterval) {
			return this.mainframe._window._flashWindow(strType, nCount, nInterval);
		};

		_pApplication.getActiveFrame = function () {
			var frame = this.mainframe;
			if (!frame) {
				return null;
			}

			var _window = frame._getWindow();
			if (_window && _window._is_active_window) {
				return _window.getActiveFrame();
			}

			var popupframes = this.popupframes;
			var popupframes_len = popupframes ? popupframes.length : 0;

			var len = popupframes ? popupframes.length : 0;

			for (var i = 0; i < len; i++) {
				_window = popupframes[i]._getWindow();
				if (_window && _window._is_active_window) {
					return _window.getActiveFrame();
				}
			}
			return null;
		};
		_pApplication.getActiveForm = function () {
			var frame = this.getActiveFrame();
			if (frame) {
				return frame.form;
			}
			else {
				return null;
			}
		};

		_pApplication.userNotify = function (notifyid, message) {
			return this.on_fire_onusernotify(this, notifyid, message);
		};

		_pApplication.callscript = function (expr) {
			var start = expr.indexOf('(');
			var end = expr.indexOf(')', start + 1);

			if (start == -1 || end == -1) {
				return;
			}

			var name = expr.substring(0, start).trim();
			var args = expr.substring(start + 1, end).trim();

			var call_fn = this[name];
			if (typeof call_fn == "function") {
				var thisp = this;
				return eval("call_fn.call(thisp, " + args + ");");
			}
		};

		_pApplication.trace = function (log, level) {
			if (level) {
				trace(level);
			}
			else {
				trace(log);
			}
		};

		_pApplication.addVariable = function (id, value, type, expire) {
			if (this[id] || ((typeof (this[id]) != "object") && this[id] == "")) {
				return -1;
			}

			var use_cookie = false, use_secure = false;
			if (type) {
				if (type == "share") {
					use_cookie = true;
				}
				else if (type == "secure") {
					use_cookie = true;
					use_secure = true;
				}
				else if (type == "header") {
					this._header_variables.push(id);
					nexacro._setLocalStorage("_header_variables", this._header_variables, "array");
				}
			}

			return this._addVariable(id, value, use_cookie, use_secure, null, expire) == true ? 1 : 0;
		};

		_pApplication.setVariable = function (id, value, type, expire) {
			var vars = this._variables;
			var len = vars.length;
			for (var i = 0; i < len; i++) {
				if (vars[i] == id) {
					this[id] = value;
					this.all.set_item(id, value);
					return -1;
				}
			}

			var header_vars = this._header_variables;

			len = header_vars.length;
			for (var i = 0; i < len; i++) {
				if (header_vars[i] == id) {
					this[id] = value;
					this.all.set_item(id, value);
					return -1;
				}
			}

			var cookies = this._cookie_variables;
			len = cookies.length;
			for (var i = 0; i < len; i++) {
				if (cookies[i] == id) {
					nexacro._setCookie(id, value, expire);
					this[id] = value;
					this.all.set_item(id, value);
					return -1;
				}
			}

			var securecookies = this._secure_cookie_variables;
			len = securecookies.length;
			for (var i = 0; i < len; i++) {
				if (securecookies[i] == id) {
					nexacro._setCookie(id, value, expire, true);
					this[id] = value;
					this.all.set_item(id, value);
					return -1;
				}
			}

			return this.addVariable(id, value, type, expire);
		};

		_pApplication.getVariable = function (id) {
			var vars = this._variables;
			var len = vars.length;
			for (var i = 0; i < len; i++) {
				if (vars[i] == id) {
					return this[id];
				}
			}
			var cookies = this._cookie_variables;
			len = cookies.length;
			for (var i = 0; i < len; i++) {
				if (cookies[i] == id) {
					var ret = nexacro._getCookie(id);
					if (ret == undefined) {
						cookies.splice(i, 1);
						this[id] = null;
					}
					return ret;
				}
			}
			var securecookies = this._secure_cookie_variables;
			len = securecookies.length;
			for (var i = 0; i < len; i++) {
				if (securecookies[i] == id) {
					var ret = nexacro._getCookie(id);
					if (ret == undefined) {
						securecookies.splice(i, 1);
						this[id] = null;
					}
					return ret;
				}
			}

			return null;
		};

		_pApplication.isExistVariable = function (id, type) {
			var vars = [{
				"key" : "global", 
				"value" : this._variables
			}, {
				"key" : "share", 
				"value" : this._cookie_variables
			}, {
				"key" : "secure", 
				"value" : this._secure_cookie_variables
			}];

			var key, value;

			for (var i = 0, varslen = vars.length; i < varslen; i++) {
				key = vars[i].key;
				value = vars[i].value;

				if (type && type != key || value.length == 0) {
					continue;
				}

				for (var j = 0, valuelen = value.length; j < valuelen; j++) {
					if (value[j] == id) {
						return true;
					}
				}
			}
			return false;
		};


		_pApplication.removeVariable = function (id) {
			var vars = this._variables;
			if (vars) {
				var len = vars.length;
				for (var i = 0; i < len; i++) {
					if (vars[i] == id) {
						vars.splice(i, 1);
						this[id] = null;
						this.all.delete_item(id);
						return;
					}
				}
			}
			var cookies = this._cookie_variables;
			if (cookies) {
				len = cookies.length;
				for (var i = 0; i < len; i++) {
					if (cookies[i] == id) {
						cookies.splice(i, 1);
						this[id] = null;
						return;
					}
				}
			}
			var securecookies = this._seucre_cookie_variables;
			if (securecookies) {
				len = securecookies.length;
				for (var i = 0; i < len; i++) {
					if (securecookies[i] == id) {
						securecookies.splice(i, 1);
						this[id] = null;
						return;
					}
				}
			}
		};

		_pApplication.isNumeric = function (v) {
			if (!v) {
				return false;
			}
			if (typeof v == "string") {
				var len = v.length;
				for (var i = 0; i < len; i++) {
					var ch = v.charAt(i);
					if (ch < "0" || ch > "9") {
						return false;
					}
				}
				return true;
			}
			return false;
		};

		_pApplication.lookup = function (name) {
			if (name in this) {
				return this[name];
			}
			return this._global_context[name];
		};

		_pApplication.lookupSetter = function (name, fnname) {
			if (!fnname) {
				fnname = "set_" + name;
			}

			var fn = this[fnname];
			if (fn) {
				return new nexacro.SetterBinder(this, name, fn);
			}
			if (name in this) {
				return new nexacro.PropBinder(this, name);
			}
			return new nexacro.PropBinder(this._global_context, name);
		};

		_pApplication.lookupFunc = function (name) {
			var fn = this[name];
			if (fn && fn instanceof Function) {
				return new nexacro.FuncBinder(this, fn);
			}
			fn = this._global_context[name];
			if (fn && fn instanceof Function) {
				return new nexacro.FuncBinder(this._global_context, fn);
			}
			return null;
		};


		_pApplication.findAccessibility = function (comp, startcomp, value, type, dir, depth) {
			if (!comp || !value) {
				return null;
			}

			if (comp._findAccessibility) {
				return comp._findAccessibility(comp, startcomp, value, type, dir, depth);
			}

			if (depth == "child") {
				depth = 2;
			}
			else {
				depth = -1;
			}

			return this._findAccessibility(comp, startcomp, value, type, dir, depth);
		};
		_pApplication._findAccessibility = function (comp, startcomp, value, type, dir, depth, findfrom) {
			var _validation = function (obj, startcomp) {
				if (!obj._isVisible()) {
					return 0;
				}
				if (obj == startcomp) {
					return -1;
				}
				var accessibility = obj.on_find_CurrentStyle_accessibility(obj._pseudo);
				if (!accessibility) {
					return 0;
				}
				var label = accessibility.label;
				var desc = accessibility.description;
				if ((type == undefined || type == "all") && (label.toLowerCase().match(value) || desc.toLowerCase().match(value))) {
					return 1;
				}
				else if ((type == "label") && label.toLowerCase().match(value)) {
					return 1;
				}
				else if ((type == "desc") && desc.toLowerCase().match(value)) {
					return 1;
				}
				return 0;
			};

			if (depth == 0) {
				return null;
			}
			depth = depth - 1;

			if (!findfrom) {
				findfrom = comp;
			}

			value = value.toLowerCase();

			var ret;
			if (comp instanceof nexacro.MainFrame) {
				ret = _validation(comp.frame, startcomp);
				if (ret == 1) {
					return comp.frame;
				}
				if (ret == -1) {
					startcomp = null;
				}

				return this._findAccessibility(comp.frame, startcomp, value, type, dir, depth);
			}
			else if (comp instanceof nexacro.FrameSet) {
				var child_list = comp.frames;
				var child_length = child_list.length;
				var i = 0;
				if (startcomp) {
					var index = nexacro._indexOf(child_list, startcomp) + 1;
					if (index > 0) {
						i = index;
					}
				}
				for (; i < child_length; i++) {
					var child = (dir == "prev") ? child = child_list[child_length - 1 - i] : child_list[i];
					ret = _validation(child, startcomp);
					if (ret == 1) {
						return child;
					}
					if (ret == -1) {
						startcomp = null;
					}

					if (depth != 1) {
						ret = this._findAccessibility(child, startcomp, value, type, dir, depth);
						if (ret) {
							return ret;
						}
					}
				}
			}
			else if (comp instanceof nexacro.ChildFrame) {
				ret = _validation(comp.form, startcomp);
				if (ret == 1) {
					return comp.form;
				}
				if (ret == -1) {
					startcomp = null;
				}

				return this._findAccessibility(comp.form, startcomp, value, type, dir, depth, findfrom);
			}
			else if (comp instanceof nexacro.Tab) {
				var active_tabpage = comp._child_list[comp.tabindex];
				ret = _validation(active_tabpage, startcomp);
				if (ret == 1) {
					return active_tabpage;
				}
				if (ret == -1) {
					startcomp = null;
				}

				return this._findAccessibility(active_tabpage, startcomp, value, type, dir, depth, findfrom);
			}
			else if (comp instanceof nexacro.Form) {
				var child_list = comp._getSortedDecendants(comp);
				var child_length = child_list.length;
				var i = 0;
				if (startcomp) {
					var index = nexacro._indexOf(child_list, startcomp) + 1;
					if (index > 0) {
						i = index;
					}
				}
				for (; i < child_length; i++) {
					var child = (dir == "prev") ? child = child_list[child_length - 1 - i] : child_list[i];
					ret = _validation(child, startcomp);
					if (ret == 1) {
						return child;
					}

					if (depth != 1 && child instanceof nexacro.Form) {
						ret = this._findAccessibility(child, startcomp, value, type, dir, depth, findfrom);
						if (ret) {
							return ret;
						}
					}
				}
			}
			else if (findfrom == comp) {
			}

			return null;
		};

		_pApplication.open = function (id, formurl, parent_frame, arr_arg, openstyles, left, top, width, height, opener) {
			var parentframe = parent_frame;
			if (parent_frame instanceof nexacro.Form) {
				parentframe = parent_frame.getOwnerFrame();
			}
			if (parentframe && parentframe[id]) {
				throw nexacro.MakeNativeError(this, "native_exist_id", id);
			}

			if (nexacro._isPopupFrame(id)) {
				throw nexacro.MakeNativeError(this, "native_exist_id", id);
			}

			var parent_window = parentframe ? parentframe._getWindow() : null;
			var resizable = false, layered = false, location = false, showontaskbar = false;

			if (!parent_window) {
				showontaskbar = true;
			}

			if (openstyles) {
				var openstyle = openstyles.split(" "), _style, _val;
				for (var i = 0, n = openstyle.length; i < n; i++) {
					_style = openstyle[i].split("=");
					_val = nexacro._toBoolean(_style[1]);
					switch (_style[0]) {
						case "resizable":
							resizable = _val;
							break;
						case "layered":
							layered = _val;
							break;
						case "showontaskbar":
							showontaskbar = _val;
							break;
						case "location":
							location = _val;
							break;
					}
				}
			}

			var option;
			var frameopener = opener;
			if (opener == null || opener == undefined) {
				var _focus_obj = null;
				if (parentframe && parentframe._focusManager) {
					_focus_obj = parentframe._focusManager[0];
				}
				if (_focus_obj) {
					if (_focus_obj.parent._is_form) {
						frameopener = _focus_obj.parent;
					}
					else {
						frameopener = parentframe ? parentframe.form : null;
					}
				}
				else {
					frameopener = parentframe ? parentframe.form : null;
				}
			}

			if (!this._popupframeoption) {
				this._popupframeoption = {
				};
			}

			if (width == undefined || width < 0) {
				width = 0;
			}
			if (height == undefined || height < 0) {
				height = 0;
			}

			this._popupframeoption[id] = {
				"_openstyles" : openstyles, 
				"_formurl" : formurl, 
				"_parentwindow" : parent_window, 
				"_opener" : frameopener, 
				"_args" : arr_arg, 
				"_parentframe" : parentframe, 
				"_left" : left, 
				"_top" : top, 
				"_width" : width, 
				"_height" : height
			};
			nexacro._setPopupframeOption(id, this);

			if (parent_window) {
				parent_window._cancelEvent();
			}

			var _handle = nexacro._createOpenWindowHandle(parent_window, id, formurl, left, top, width, height, resizable, layered, showontaskbar, location);


			if (_handle) {
				return true;
			}
			return false;
		};


		_pApplication.set_useajaximagefilter = function (v) {
		};

		_pApplication.set_datasetloadtype = function (v) {
			var type_enum = ["onsuccess", "errorallow"];

			if (v) {
				v = v.toString().toLowerCase();
			}

			if (type_enum.indexOf(v) >= 0) {
				this.datasetloadtype = v;
				nexacro._setLocalStorage("datasetloadtype", this.datasetloadtype, "string");
			}
		};

		_pApplication.set_version = function (v) {
			this.version = v;
		};

		_pApplication.set_checkversion = function (v) {
			if (nexacro.Browser == "Runtime" || (nexacro.OS == "iOS" && nexacro._isHybrid())) {
				return;
			}

			var val = nexacro._toBoolean(v);
			if (this.checkversion != val) {
				this.checkversion = val;
				this._appversion = "";
				nexacro.__setCheckVersion(val);
				nexacro._setLocalStorage("checkversion", val, "boolean");
				nexacro._setLocalStorage("appversion", "", "string");
			}
		};

		_pApplication.set_tracemode = function (v) {
			var tracemode = this.tracemode;

			if (tracemode != v) {
				this.tracemode = v;
				if (this.tracemode != "append") {
					nexacro._deleteTraceLogFile();
				}
			}
		};

		_pApplication.set_traceduration = function (v) {
			var traceduration = this.traceduration;
			var val = nexacro._parseInt(v);

			if (traceduration != val) {
				this.traceduration = val;
				if (this.tracemode == "append" && val < 1) {
					nexacro._deleteTraceLogFile();
				}
			}
		};
		_pApplication.set_usehttpkeepalive = function (v) {
			nexacro._setUseHttpKeepAlive(v);
		};

		_pApplication.set_useproxykeepalive = function (v) {
			this.useproxykeepalive = nexacro._toBoolean(v);
		};

		_pApplication.set_httptimeout = function (v) {
			nexacro._setHttpTimeout(v);
		};

		_pApplication.set_proxytimeout = function (v) {
			this.proxytimeout = nexacro._parseInt(v);
		};

		_pApplication.set_httpretry = function (v) {
			nexacro._setHttpRetry(v);
		};

		_pApplication.set_proxyretry = function (v) {
			this.proxyretry = nexacro._parseInt(v);
		};

		_pApplication.set_themeid = function (v) {
			this.themeid = v;
		};

		_pApplication.set_usewaitcursor = function (v) {
			this.usewaitcursor = nexacro._toBoolean(v);
		};

		_pApplication.set_licenseurl = function (v) {
			this.licenseurl = v;
		};

		_pApplication.set_mousewheeltype = function (v) {
			this.mousewheeltype = v;
		};

		_pApplication.set_imepastemode = function (v) {
			this.imepastemode = v;
		};

		_pApplication.set_addcookietovariable = function (v) {
			this.addcookietovariable = nexacro._toBoolean(v);
		};

		_pApplication.set_filesecurelevel = function (v) {
			nexacro._setFileSecureLevel(v);
			this.filesecurelevel = nexacro._parseInt(v);
		};

		_pApplication.set_networksecurelevel = function (v) {
			if (this.networksecurelevel != v) {
				nexacro._setNetworkSecureLevel(v);
			}
		};

		_pApplication.set_enablescreencapture = function (v) {
			nexacro._setEnableScreenCapture(v);
		};

		_pApplication.set_enablecookie = function (v) {
			nexacro._setEnableCookie(v);
		};

		_pApplication.set_enablecache = function (v) {
			nexacro._setEnableCache(v);
		};

		_pApplication.set_enableclipboard = function (v) {
			nexacro._setEnableClipboard(v);
		};

		_pApplication.set_locale = function (v) {
			if (this.locale != v) {
				this.locale = v;
				this._setLocale(v);
			}
		};

		_pApplication._setLocale = function (v) {
			var mainframe = this.mainframe;
			this._locale = v;
			if (this._locale_info) {
				delete this._locale_info;
				this._locale_info = null;
			}
			this._locale_info = nexacro.Locale.getLocaleInfo(v);

			if (!this.rtldirection) {
				this._rtldirection = this._locale_info.direction;
				if (this._is_loaded) {
					this._setRtlDirection(this._rtldirection);
				}
			}

			if (mainframe) {
				mainframe._setLocale(v);
			}
		};

		_pApplication.set_enabletouchevent = function (v) {
			this.enabletouchevent = nexacro._toBoolean(v);
		};

		_pApplication.set_tabkeycirculation = function (v) {
			if (this.tabkeycirculation != v) {
				var _v;
				switch (v) {
					case "form,nocycle":
						this._tabkeycirculation = 1;
						this.tabkeycirculation = v;
						break;
					case "frame,cycle":
						this._tabkeycirculation = 2;
						this.tabkeycirculation = v;
						break;
					case "frame,nocycle":
						this._tabkeycirculation = 3;
						this.tabkeycirculation = v;
						break;
					default:
						this._tabkeycirculation = 0;
						this.tabkeycirculation = "form,cycle";
						break;
				}
			}
		};

		_pApplication.set_enableaccessibility = function (v) {
			if (this._is_loaded != true && this._enableaccessibility === undefined) {
				this.enableaccessibility = nexacro._toBoolean(v);
				this._enableaccessibility = nexacro._toBoolean(v);
				if (this.enableaccessibility == true) {
					if (this._accessibilityHistoryList == null) {
						this._accessibilityHistoryList = [];
					}

					nexacro._attachAccessibilityComponentFunctions();
				}
			}
		};

		_pApplication.set_accessibilityfirstovertext = function (v) {
			this.accessibilityfirstovertext = v;
		};

		_pApplication.set_accessibilitylastovertext = function (v) {
			this.accessibilitylastovertext = v;
		};

		_pApplication.set_accessibilityreplayhotkey = function (v) {
			var cur_accessibilityreplayhotkey = this._accessibilityreplayhotkey;
			if (cur_accessibilityreplayhotkey) {
				this._unregisterHotkey(cur_accessibilityreplayhotkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilityreplayhotkey = "";
				this._accessibilityreplayhotkey = null;
				delete hotkey;
			}
			else {
				this.accessibilityreplayhotkey = hotkey._toString();
				this._accessibilityreplayhotkey = hotkey;

				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilitywholereadhotkey = function (v) {
			var cur_accessibilitywholereadhotkey = this._accessibilitywholereadhotkey;
			if (cur_accessibilitywholereadhotkey) {
				this._unregisterHotkey(cur_accessibilitywholereadhotkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilitywholereadhotkey = "";
				this._accessibilitywholereadhotkey = null;
				delete hotkey;
			}
			else {
				this.accessibilitywholereadhotkey = hotkey._toString();
				this._accessibilitywholereadhotkey = hotkey;

				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilityheadingnexthotkey = function (v) {
			var cur_accessibilityheadingnexthotkey = this._accessibilityheadingnexthotkey;
			if (cur_accessibilityheadingnexthotkey) {
				this._unregisterHotkey(cur_accessibilityheadingnexthotkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilityheadingnexthotkey = "";
				this._accessibilityheadingnexthotkey = null;
				delete hotkey;
			}
			else {
				this.accessibilityheadingnexthotkey = hotkey._toString();
				this._accessibilityheadingnexthotkey = hotkey;
				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilityheadingprevhotkey = function (v) {
			var cur_accessibilityheadingprevhotkey = this._accessibilityheadingprevhotkey;
			if (cur_accessibilityheadingprevhotkey) {
				this._unregisterHotkey(cur_accessibilityheadingprevhotkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilityheadingprevhotkey = "";
				this._accessibilityheadingprevhotkey = null;
				delete hotkey;
			}
			else {
				this.accessibilityheadingprevhotkey = hotkey._toString();
				this._accessibilityheadingprevhotkey = hotkey;
				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilitycomponentnexthotkey = function (v) {
			var cur_accessibilitycomponentnexthotkey = this._accessibilitycomponentnexthotkey;
			if (cur_accessibilitycomponentnexthotkey) {
				this._unregisterHotkey(cur_accessibilitycomponentnexthotkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilitycomponentnexthotkey = "";
				this._accessibilitycomponentnexthotkey = null;
				delete hotkey;
			}
			else {
				this.accessibilitycomponentnexthotkey = hotkey._toString();
				this._accessibilitycomponentnexthotkey = hotkey;
				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilitycomponentprevhotkey = function (v) {
			var cur_accessibilitycomponentprevhotkey = this._accessibilitycomponentprevhotkey;
			if (cur_accessibilitycomponentprevhotkey) {
				this._unregisterHotkey(cur_accessibilitycomponentprevhotkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilitycomponentprevhotkey = "";
				this._accessibilitycomponentprevhotkey = null;
				delete hotkey;
			}
			else {
				this.accessibilitycomponentprevhotkey = hotkey._toString();
				this._accessibilitycomponentprevhotkey = hotkey;
				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_popuptype = function (v) {
			if (v != this.popuptype) {
				this.popuptype = v;
			}
		};

		_pApplication._registerHotkey = function (v) {
			if (!v || v._is_registered) {
				return;
			}

			nexacro._registerHotkeyComp(this, this, v);
		};

		_pApplication._unregisterHotkey = function (v) {
			if (!v || !v._is_registered) {
				return;
			}
			nexacro._unregisterHotkeyComp(this, this, v);
		};

		_pApplication._processHotkey = function (keycode, altKey, ctrlKey, shiftKey, comp) {
			var hotkeylist = this._hotkey_list;
			for (var i = 0, n = hotkeylist.length; i < n; i++) {
				var hotkeyinfo = hotkeylist[i];
				if (hotkeyinfo[1] == keycode && 
					hotkeyinfo[2] == altKey && 
					hotkeyinfo[3] == ctrlKey && 
					hotkeyinfo[4] == shiftKey) {
					this._on_hotkey(keycode, altKey, ctrlKey, shiftKey, comp);
					return true;
				}
			}
		};

		_pApplication._on_hotkey = function (keycode, altKey, ctrlKey, shiftKey, curcomp) {
			if (nexacro._enableaccessibility) {
				var forwardkey = this._accessibilityforwardkey;
				var backwardkey = this._accessibilitybackwardkey;
				var replayhotkey = this._accessibilityreplayhotkey;
				var wholereadhotkey = this._accessibilitywholereadhotkey;
				var headingnexthotkey = this._accessibilityheadingnexthotkey;
				var headingprevhotkey = this._accessibilityheadingprevhotkey;
				var componentnexthotkey = this._accessibilitycomponentnexthotkey;
				var componentprevhotkey = this._accessibilitycomponentprevhotkey;

				var comp;
				if (forwardkey && keycode == forwardkey._keycode && 
					altKey == ((forwardkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((forwardkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((forwardkey._modifierkey & 0x04) == 0x04)) {
					if (this._accessibilityHistoryCursor <= this._accessibilityHistoryList.length - 2 && this._accessibilityHistoryCursor <= this.accessibilityhistorycount - 1) {
						if (this._accessibilityHistoryCursor == -1) {
							this._accessibilityHistoryCursor = 0;
						}
						comp = this._get_accessibility_history(++this._accessibilityHistoryCursor);
						if (comp) {
							this.playAccessibility(comp);
						}
					}
				}
				else if (backwardkey && keycode == backwardkey._keycode && 
					altKey == ((backwardkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((backwardkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((backwardkey._modifierkey & 0x04) == 0x04)) {
					if (this._accessibilityHistoryCursor > 0) {
						if (this._accessibilityHistoryCursor > this.accessibilityhistorycount) {
							this._accessibilityHistoryCursor--;
						}
						comp = this._get_accessibility_history(--this._accessibilityHistoryCursor);
						if (comp) {
							this.playAccessibility(comp);
						}
					}
				}
				else if (replayhotkey && keycode == replayhotkey._keycode && 
					altKey == ((replayhotkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((replayhotkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((replayhotkey._modifierkey & 0x04) == 0x04)) {
					comp = this._get_accessibility_history(this._accessibilityHistoryCursor);
					if (comp) {
						this.playAccessibility(comp);
					}
				}
				else if (wholereadhotkey && keycode == wholereadhotkey._keycode && 
					altKey == ((wholereadhotkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((wholereadhotkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((wholereadhotkey._modifierkey & 0x04) == 0x04)) {
					if (nexacro._accessibilitywholereadtype != 0) {
						var ar = this._accessibilityHistoryList;
						var lastfocusedcomp = this._get_accessibility_history(this._accessibilityHistoryList.length - 1);
						var form = lastfocusedcomp._getForm();
						form._playAccessibilityWholeReadLabel("wholeread");
					}
				}
				else if (headingnexthotkey && keycode == headingnexthotkey._keycode && 
					altKey == ((headingnexthotkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((headingnexthotkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((headingnexthotkey._modifierkey & 0x04) == 0x04)) {
					var form = this.getActiveForm();
					var last_comp = form._getLastFocused();
					var comp = form._getNextHeadingComponent(last_comp ? last_comp : form);
					if (comp) {
						comp._setFocus(true, 0, true);
					}
				}
				else if (headingprevhotkey && keycode == headingprevhotkey._keycode && 
					altKey == ((headingprevhotkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((headingprevhotkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((headingprevhotkey._modifierkey & 0x04) == 0x04)) {
					var form = this.getActiveForm();
					var last_comp = form._getLastFocused();
					var comp = this.getActiveForm()._getPrevHeadingComponent(last_comp ? last_comp : form);
					if (comp) {
						comp._setFocus(true, 1, true);
					}
				}
				else if (componentnexthotkey && keycode == componentnexthotkey._keycode && 
					altKey == ((componentnexthotkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((componentnexthotkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((componentnexthotkey._modifierkey & 0x04) == 0x04)) {
					var form = curcomp._getForm();
					if (form instanceof nexacro.Tab) {
						form = form._getForm();
					}
					var last_comp = form._getLastFocused();
					var comp = form._searchNextTabFocus(last_comp ? last_comp : form, undefined, undefined, true, true);
					if (comp && comp[0]) {
						form._processArrowKey(true, comp);
					}
				}
				else if (componentprevhotkey && keycode == componentprevhotkey._keycode && 
					altKey == ((componentprevhotkey._modifierkey & 0x02) == 0x02) && 
					ctrlKey == ((componentprevhotkey._modifierkey & 0x01) == 0x01) && 
					shiftKey == ((componentprevhotkey._modifierkey & 0x04) == 0x04)) {
					var form = curcomp._getForm();
					if (form instanceof nexacro.Tab) {
						form = form._getForm();
					}
					var last_comp = form._getLastFocused();
					var comp = form._searchPrevTabFocus(last_comp ? last_comp : form, undefined, undefined, true, true);
					if (comp && comp[0]) {
						form._processArrowKey(false, comp);
					}
				}
			}
		};

		_pApplication.set_accessibilitybackwardkey = function (v) {
			var cur_accessibilitybackwardkey = this._accessibilitybackwardkey;
			if (cur_accessibilitybackwardkey) {
				this._unregisterHotkey(cur_accessibilitybackwardkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilitybackwardkey = null;
				this._accessibilitybackwardkey = null;
				delete hotkey;
			}
			else {
				this.accessibilitybackwardkey = hotkey._toString();
				this._accessibilitybackwardkey = hotkey;

				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilityforwardkey = function (v) {
			var cur_accessibilityforwardkey = this._accessibilityforwardkey;
			if (cur_accessibilityforwardkey) {
				this._unregisterHotkey(cur_accessibilityforwardkey);
			}
			var hotkey = new nexacro.HotKey(v);
			if (hotkey._isEmpty()) {
				this.accessibilityforwardkey = null;
				this._accessibilityforwardkey = null;
				delete hotkey;
			}
			else {
				this.accessibilityforwardkey = hotkey._toString();
				this._accessibilityforwardkey = hotkey;
				this._registerHotkey(hotkey);
			}
		};

		_pApplication.set_accessibilityhistorycount = function (v) {
			this.accessibilityhistorycount = parseInt(v);
		};

		_pApplication._set_accessibility_history = function (comp) {
			var historyList = this._accessibilityHistoryList;
			if (historyList) {
				var historyCount = this.accessibilityhistorycount;
				var currentCount = historyList.length;

				if (currentCount > 0) {
					var lasthistorycomp = historyList[currentCount - 1];
					if (lasthistorycomp == comp) {
						return;
					}
				}
				if (currentCount < historyCount + 1) {
					historyList.push(comp);
					currentCount++;
				}
				else if (currentCount == historyCount + 1) {
					historyList.splice(0, 1);
					historyList.push(comp);
				}
				this._accessibilityHistoryCursor = currentCount - 1;
			}
		};

		_pApplication._get_accessibility_history = function (n, replay) {
			var historyList = this._accessibilityHistoryList;
			if (historyList) {
				var historyCount = this.accessibilityhistorycount;
				if (n > -1 && n <= historyCount) {
					return historyList[n];
				}
				else if (replay) {
					return historyList[n];
				}
			}
		};

		_pApplication._remove_accessibility_history = function (comp) {
			var historyList = this._accessibilityHistoryList;
			for (var i = 0, n = historyList.length; i < n; i++) {
				if (historyList[i] == comp) {
					historyList.splice(i, 1);
					if (i <= this._accessibilityHistoryCursor) {
						this._accessibilityHistoryCursor--;
					}
				}
			}
		};



		_pApplication.set_accessibilitytype = function (v) {
			this.accessibilitytype = v;
			nexacro._setAccessibilityType(v);
		};

		_pApplication.set_accessibilitydescreadtype = function (v) {
			this.accessibilitydescreadtype = v;
			nexacro._setAccessibilityDescReadType(v);
		};

		_pApplication.set_accessibilitywholereadtype = function (v) {
			this.accessibilitywholereadtype = v;
			nexacro._setAccessibilityWholeReadType(v);
		};


		_pApplication.set_hithemeid = function (v) {
			this.hithemeid = v;
		};

		_pApplication.set_enableevent = function (v) {
			this.enableevent = nexacro._toBoolean(v);
		};

		_pApplication.set_enableanimation = function (v) {
			this.enableanimation = nexacro._toBoolean(v);
		};

		_pApplication.set_enginesetupkey = function (v) {
			this.enginesetupkey = v;
		};

		_pApplication.set_engineurl = function (v) {
			this.engineurl = v;
		};

		_pApplication.set_engineversion = function (v) {
			this.engineversion = v;
		};

		_pApplication.set_usevml = function (v) {
			this.usevml = nexacro._toBoolean(v);
		};


		_pApplication._updateEngine = function (updateengine) {
			var enginesetupkey = "", engineversion = "", engineurl = "";
			if (updateengine) {
				var cur_device_str = nexacro.DEVICE.toLowerCase();
				var cur_osversion = nexacro._getOSVersion();
				var cur_os_str = (cur_osversion ? cur_osversion.toLowerCase().replace(/ /g, "_") : "");

				var cur_systype_str = nexacro.SystemType.toLowerCase();
				if (cur_systype_str.indexOf("win") >= 0) {
					cur_systype_str = "windows";
				}
				else if (cur_systype_str.indexOf("ipad") >= 0) {
					cur_systype_str = "iphone";
				}

				var selectos = updateengine[cur_systype_str];
				if (cur_device_str.length <= 0) {
					cur_device_str = "default";
				}

				if (updateengine[cur_os_str]) {
					selectos = updateengine[cur_os_str];
				}
				else {
					if (selectos[cur_os_str]) {
						selectos = selectos[cur_os_str];
					}
				}

				if (selectos) {
					var selectitem = selectos[cur_device_str];
					if (selectitem) {
						enginesetupkey = selectitem.enginesetupkey;
						engineversion = selectitem.engineversion;
						engineurl = selectitem.engineurl;
					}
				}
			}

			if (enginesetupkey.length > 0 && engineurl.length > 0 && engineversion.length > 0) {
				var requesturl = nexacro._transfullurl(this._project_uri, engineurl);
				nexacro._updateEngine(enginesetupkey, requesturl, engineversion);
			}
		};


		_pApplication.set_loglevel = function (v) {
			if (v == "fatal") {
				this._loglevel = 0;
			}
			else if (v == "error") {
				this._loglevel = 1;
			}
			else if (v == "warn") {
				this._loglevel = 2;
			}
			else if (v == "info") {
				this._loglevel = 3;
			}
			else {
				this._loglevel = 4;
			}

			this.loglevel = v;
		};

		_pApplication.set_errorlevel = function (v) {
			this.errorlevel = v;
		};


		_pApplication.set_cookiecachetype = function (v) {
		};

		_pApplication.set_fullscreen = function (v) {
			this.fullscreen = nexacro._toBoolean(v);
		};

		_pApplication.set_layoutselecttype = function (v) {
			this.layoutselecttype = v;
		};

		_pApplication.set_modallockmode = function (v) {
			this.modallockmode = v;
		};

		_pApplication.set_mousehovertime = function (v) {
			this.mousehovertime = v;
			nexacro._setMouseHovertime(this.mousehovertime);
		};

		_pApplication.set_okclosebutton = function (v) {
			this.okclosebutton = v;
		};

		_pApplication.set_usecontextmenu = function (v) {
			this.usecontextmenu = v;
		};

		_pApplication._on_loadwaitimage = function (imgurl, w, h) {
		};
		_pApplication.set_loadingimage = function (v) {
			this.loadingimage = v;
			if (this._is_loaded) {
				var imagesize = nexacro._getImageSize(v, this._on_loadwaitimage, this, undefined, v);
			}
		};

		_pApplication.set_rtldirection = function (v) {
			if (this.rtldirection != v) {
				this.rtldirection = v;

				nexacro._set_application_rtldirection(v);

				this._setRtlDirection(v);
			}
		};

		_pApplication._setRtlDirection = function (v) {
			var mainframe = this.mainframe;
			this._rtldirection = v;

			if (mainframe) {
				mainframe._setRtlDirection(v);
			}
		};

		_pApplication.set_layoutautofittype = function (v) {
			return;
		};

		_pApplication._getLoadingImageUrl = function () {
			if (this.loadingimage) {
				return this.loadingimage;
			}
			return nexacro._transfullurl(this._resource_path, this._default_loadingimage);
		};
		_pApplication.reload_theme = function (form, url) {
		};

		_pApplication.reload = function () {
			window.location.reload();
		};

		_pApplication._isPopupFrame = function (id) {
			if (this.popupframes.get_item(id) != null) {
				return true;
			}
			return false;
		};

		_pApplication._registerPopupFrame = function (id, frame) {
			if (this.popupframes.get_item(id) != null) {
				return -1;
			}

			return this.popupframes.add_item(id, frame);
		};

		_pApplication._unregisterPopupFrame = function (id) {
			this.popupframes.delete_item(id);

			this._activeform = null;
		};

		_pApplication.getLayoutManager = function () {
			return this._layout_manager;
		};


		_pApplication._getFileCache = function (fName) {
			var app = application;
			if (app.files && (app.files[fName])) {
				return app.files[fName];
			}

			if (fName.trim().indexOf("theme://") >= 0) {
				return app.theme[fName];
			}
			return null;
		};


		_pApplication._removeLastPopupComponent = function () {
			nexacro._current_popups.pop();
		};
		_pApplication._removePopupComponent = function (popup_comp) {
			if (!popup_comp || !popup_comp._is_popup_control) {
				nexacro._current_popups = [];
			}
			else {
				var popups = nexacro._current_popups;
				var cnt = popups.length;
				if (cnt > 0) {
					var cur_popup = null;
					var last_popup = null;
					var root_comp = popup_comp._getRootComponent(popup_comp);
					for (var i = cnt; i > 0; i--) {
						cur_popup = popups[i - 1];
						if (!cur_popup) {
							break;
						}
						if (cur_popup == popup_comp) {
							nexacro._current_popups = popups.slice(0, i - 1);
							break;
						}

						last_popup = cur_popup;
						cur_popup = null;
					}
				}
			}
		};

		_pApplication._appendPopupComponent = function (popup_comp) {
			if (!popup_comp || !popup_comp._is_popup_control) {
				cur_popup = nexacro._current_popups[0];
				if (cur_popup) {
					cur_popup._closePopup();
				}
				nexacro._current_popups = [];
			}
			else {
				var root_comp = popup_comp._getRootComponent(popup_comp);
				var popups = nexacro._current_popups;
				var cnt = popups.length;
				if (cnt > 0) {
					var is_contain = false;
					var cur_popup = null;
					var last_popup = null;
					for (var i = cnt; i > 0; i--) {
						cur_popup = popups[i - 1];
						if (!cur_popup) {
							break;
						}
						if (cur_popup._contains(popup_comp)) {
							is_contain = true;
							if (last_popup) {
								last_popup._closePopup();
							}
							nexacro._current_popups = popups.slice(0, i);
							break;
						}

						last_popup = cur_popup;
					}
					if (!is_contain) {
						var len = nexacro._current_popups.length;
						for (var i = len - 1; i >= 0; i--) {
							last_popup = nexacro._current_popups[i];
							if (last_popup) {
								last_popup._closePopup();
							}
						}
						nexacro._current_popups = [];
					}
				}
				nexacro._current_popups.push(popup_comp);
			}
		};
		_pApplication._checkClosePopupComponent = function (target_comp, bCheckSameParent) {
			if (!target_comp) {
				var len = nexacro._current_popups.length;
				for (var i = len - 1; i >= 0; i--) {
					cur_popup = nexacro._current_popups[i];
					if (cur_popup) {
						cur_popup._closePopup();
					}
				}

				nexacro._current_popups = [];
			}
			else {
				var popups = nexacro._current_popups;
				var cnt = popups.length;
				if (cnt > 0) {
					var is_contain = false;
					var cur_popup = null;
					var last_popup = null;
					var child_popups = [];
					for (var i = cnt; i > 0; i--) {
						cur_popup = popups[i - 1];
						if (!cur_popup) {
							break;
						}
						if (bCheckSameParent) {
							if (cur_popup._contains(target_comp)) {
								is_contain = true;

								for (var j = cnt; j >= i; j--) {
									var popup = popups[j - 1];
									if (cur_popup != popup && cur_popup._contains(popup)) {
										child_popups.push(popups[j - 1]);
										popups.splice(j - 1);
									}
								}
							}
							else {
								var root_comp = cur_popup._getPopupRootComponent(cur_popup);
								is_contain = root_comp._contains(target_comp);
							}
						}
						else {
							is_contain = cur_popup._contains(target_comp);
						}

						if (is_contain) {
							break;
						}
					}

					if (!is_contain) {
						var len = nexacro._current_popups.length;
						for (var i = len - 1; i >= 0; i--) {
							last_popup = nexacro._current_popups[i];
							if (last_popup) {
								last_popup._closePopup();
							}
						}
						nexacro._current_popups = [];
					}
					else if (child_popups.length > 0) {
						while (child_popups.length > 0) {
							var popup = child_popups.shift();
							if (popup) {
								popup._closePopup();
							}
						}
					}
				}
			}
		};

		_pApplication._appendCommContext = function (context) {
			if (!context) {
				return;
			}
			this._comm_contextlist.push(context);
		};

		_pApplication._removeCommContext = function (context) {
			if (!context) {
				return;
			}
			var contexts = this._comm_contextlist;
			var cnt = contexts.length;
			for (var i = 0; i < cnt; i++) {
				var cur_context = contexts[i];
				if (cur_context == context) {
					for (var j = i; j < cnt - 1; j++) {
						contexts[j] = contexts[j + 1];
					}
					contexts[cnt - 1] = null;
					contexts.length = contexts.length - 1;
					break;
				}
			}
		};


		_pApplication.init = function () {
			nexacro._setBrowserErrorMsg();
			return;
		};

		_pApplication._checkLicense = function (strlicenseurl) {
			if (strlicenseurl == undefined || strlicenseurl.length <= 0) {
				return;
			}

			var real_url = this._getServiceLocation(strlicenseurl);
			return nexacro._checkLicense(real_url, this.xadl);
		};

		_pApplication._searchScrInfo = function (simulator_screenid) {
			var _scrinfo = this._screeninfo;
			if (!_scrinfo) {
				return null;
			}

			var scr_info_list = _scrinfo;
			var scr_len = scr_info_list.length;

			var matched_scrinfo = null;

			var cur_type = "desktop";
			switch (nexacro.SystemType.toLowerCase()) {
				case "win32":
				case "win64":
				case "mac":
				case "linux":
					cur_type = "desktop";
					break;
				case "ipad":
					cur_type = "tablet";
					break;
				case "iphone":
				case "winphone":
					cur_type = "phone";
					break;
				case "android":
					if (nexacro.Browser == "Runtime") {
						cur_type = "tablet";
						if (nexacro.__isPhone && nexacro.__isPhone()) {
							cur_type = "phone";
						}
					}
					else {
						cur_type = "tablet";

						if (nexacro._isMobile()) {
							cur_type = "phone";
						}
					}
					break;
			}

			var cur_os;
			switch (nexacro.SystemType) {
				case "win32":
				case "win64":
				case "winphone":
					cur_os = "windows";
					break;
				case "ipad":
				case "iphone":
					cur_os = "ios";
					break;
				case "android":
					cur_os = "android";
					break;
			}


			var cur_locale = nexacro._getLocale();



			var monitor_cnt = nexacro._getMonitorCount();
			var monitor_idx = 1;
			for (var i = 0; i < monitor_cnt; i++) {
				if (nexacro._isPrimaryMonitor(i)) {
					monitor_idx = i;
				}
			}

			var cur_width = nexacro._getScreenWidth(monitor_idx);
			var cur_height = nexacro._getScreenHeight(monitor_idx);
			var cur_orientation = nexacro._getMobileOrientation();
			var is_landscape = false;


			if ((cur_width > cur_height) || cur_orientation == 2 || cur_orientation == 3) {
				is_landscape = true;
			}

			if (is_landscape && nexacro.OS == "Android") {
				var is_swap_screen = nexacro._searchDeviceExceptionValue("swap_screen");
				if (is_swap_screen) {
					var temp = cur_width;
					cur_width = cur_height;
					cur_height = temp;
				}
			}


			for (var i = 0; i < scr_len; i++) {
				var scr_info = scr_info_list[i];
				scr_info._priority = 0;

				if (simulator_screenid) {
					if (scr_info.name != simulator_screenid) {
						continue;
					}

					matched_scrinfo = scr_info;
				}

				var type = scr_info.type;
				if (!simulator_screenid && cur_type && type) {
					scr_info._priority = -100;

					var type_list = type.toLowerCase().split(",");
					var type_cnt = type_list.length;
					var type_found = false;
					for (var j = 0; j < type_cnt; j++) {
						if (type_list[j] === cur_type) {
							scr_info._priority = 100;
							type_found = true;
							break;
						}
					}

					if (!type_found) {
						continue;
					}
				}

				var os = scr_info.systemos;
				if (!simulator_screenid && cur_os && os) {
					var os_list = os.toLowerCase().split(",");
					var os_cnt = os_list.length;
					var os_found = false;
					for (var j = 0; j < os_cnt; j++) {
						if (os_list[j] == cur_os) {
							scr_info._priority += 10;
							os_found = true;
							break;
						}
					}


					if (!os_found && (os_list.indexOf("windows") >= 0 || os_list.indexOf("ios") >= 0 || os_list.indexOf("android") >= 0)) {
						continue;
					}
				}

				var locale = scr_info.systemlocale;
				if (!simulator_screenid && cur_locale && locale) {
					cur_locale = cur_locale.toLowerCase();
					cur_locale = cur_locale.substr(0, 2);
					var locale_list = locale.toLowerCase().split(",");
					var locale_cnt = locale_list.length;
					var locale_found = false;
					for (var j = 0; j < locale_cnt; j++) {
						if (locale_list[j].indexOf(cur_locale) > -1) {
							scr_info._priority += 1;
							locale_found = true;
							break;
						}
					}

					if (!locale_found) {
						continue;
					}
				}

				var width = scr_info.screenwidth || 0;
				var height = scr_info.screenheight || 0;
				var sizeorientation = scr_info.sizeorientation;
				if (sizeorientation === undefined) {
					if (cur_type == "phone") {
						sizeorientation = "portrait";
					}
					else if (cur_type == "tablet") {
						sizeorientation = "landscape";
					}
				}

				var swap_device_resolution = false;

				if (sizeorientation == "landscape") {
					if (nexacro.OS == "iOS" && os && os.match("ios")) {
						if (cur_width > cur_height && cur_width == scr_info.screenwidth) {
							cur_width += 1;
						}
						else if (cur_width < cur_height && cur_height == scr_info.screenwidth) {
							cur_height += 1;
						}
					}
					cur_width = cur_width + cur_height;
					cur_height = cur_width - cur_height;
					cur_width = cur_width - cur_height;
					swap_device_resolution = true;
				}

				scr_info._device_width = cur_width;
				scr_info._width = cur_width - parseInt(width);
				scr_info._height = cur_height - parseInt(height);

				if (!simulator_screenid && scr_info._priority >= 0) {
					if (!matched_scrinfo) {
						matched_scrinfo = scr_info;
					}
					else {
						var check_height = false;
						if (matched_scrinfo._width >= 0) {
							if (scr_info._width >= 0 && matched_scrinfo._width > scr_info._width) {
								matched_scrinfo = scr_info;
							}
							else if (matched_scrinfo._width == scr_info._width) {
								check_height = true;
							}
						}
						else if (matched_scrinfo._width < 0) {
							matched_scrinfo = scr_info;
						}

						if (check_height) {
							if (matched_scrinfo.screenheight === undefined && scr_info.screenheight === undefined) {
								if (is_landscape && scr_info.sizeorientation == "landscape") {
									matched_scrinfo = scr_info;
								}
							}
							else if (matched_scrinfo._height >= 0) {
								if (scr_info._height >= 0) {
									if (matched_scrinfo._height > scr_info._height || (matched_scrinfo._height == scr_info._height && is_landscape && scr_info.sizeorientation == "landscape")) {
										matched_scrinfo = scr_info;
									}
								}
							}
							else if (matched_scrinfo._height < 0) {
								if (scr_info._height > 0) {
									matched_scrinfo = scr_info;
								}
								else if (matched_scrinfo._height <= scr_info._height) {
									matched_scrinfo = scr_info;
								}
							}
						}
					}
				}

				if (swap_device_resolution) {
					cur_width = cur_width + cur_height;
					cur_height = cur_width - cur_height;
					cur_width = cur_width - cur_height;
				}
			}

			if (matched_scrinfo) {
				matched_scrinfo._cur_type = cur_type;
			}

			return matched_scrinfo;
		};

		_pApplication._applyScreenAutozoom = function () {
			var curscreen = this._curscreen;
			if (!curscreen) {
				return;
			}

			if (curscreen._cur_type != "phone" && curscreen._cur_type != "tablet") {
				return;
			}

			if (curscreen.screenwidth !== undefined && nexacro._toBoolean(curscreen.autozoom) == true) {
				if (parseInt(curscreen.screenwidth) <= 320 && 
					nexacro.OS == "Android" && nexacro.Browser != "Chrome" && nexacro.BrowserType != "Edg") {
					curscreen.screenwidth = "321";
				}

				var zoom_fitting_width = Math.abs(parseInt(curscreen.screenwidth));

				nexacro._zoom_factor = curscreen._device_width * 100 / zoom_fitting_width;
			}
		};

		_pApplication.transaction = function (id, url, inDatasetsParam, outDatasetsParam, argsParam, callbackFn, isAsync, datatype, isCompress, isbulk) {
			var real_url = nexacro._getServiceLocation(url);

			var service = nexacro._getServiceObject(url, true);
			this._load_manager.loadDataModule(real_url, id, inDatasetsParam, outDatasetsParam, argsParam, callbackFn, isAsync, datatype, isCompress, service, isbulk);
		};

		_pApplication.cancelTransaction = function (id) {
			if (!this._load_manager) {
				return -1;
			}
			var datalist = this._load_manager.dataList;
			if (!datalist) {
				return -1;
			}
			var canceledCnt = 0;

			if (id != undefined) {
				var datalistid = (typeof id == "string") ? id.split(",") : id;
				if (datalistid.length > 0) {
					var datalistfilter = [];
					var datalist_len = datalist.length;
					for (var k = 0; k < datalist_len; k++) {
						datalistfilter[k] = datalist[k].url;
					}

					var datalistfiltered = [];
					var datalistfilter_len = datalistfilter.length;
					for (var j = 0; datalistfilter_len > j; j++) {
						var datalistfound = false;
						var datalistid_len = datalistid.length;
						for (var i = 0; datalistid_len > i; i++) {
							if (datalistid[i] == datalistfilter[j]) {
								datalistfound = true;
								break;
							}
						}
						if (!datalistfound) {
							datalistfiltered.push(datalistfilter[j]);
						}
					}

					var datalistfiltered_len = datalistfiltered.length;
					for (var j = datalistfiltered_len - 1; j >= 0; j--) {
						var datalist_len = datalist.length;
						for (var i = datalist_len - 1; i >= 0; i--) {
							if (datalist[i].url == datalistfiltered[j]) {
								datalist = nexacro._removedatalist(datalist, i);
							}
						}
					}
				}
			}

			var datalen = datalist.length;
			for (var j = 0; j < datalen; j++) {
				var dataitem = datalist[j];
				var dataitem_handle = dataitem._handle;
				dataitem_handle._user_aborted = true;
				dataitem._is_cancel = true;
				nexacro._cancelLoad(dataitem_handle);
				canceledCnt++;
			}
		};


		_pApplication.beforeExit = function () {
			return false;
		};


		_pApplication._exit = function (skip) {
			this.removeTray();

			var mainframe = this.mainframe;

			if (!skip) {
				var msg = mainframe._on_beforeclose();
				if (mainframe._checkAndConfirmClose(msg) == false) {
					return false;
				}
			}

			var _popupframes = this.popupframes;
			var child_len = _popupframes.length;
			var _frame_win = null;

			for (var i = child_len - 1; i >= 0; i--) {
				_frame_win = _popupframes[i]._window;
				if (_frame_win) {
					_frame_win._ignore_close_confirm = true;
				}
			}

			mainframe._on_close();

			this.on_fire_onexit();

			this._removeProtocols();

			_popuframes = this.popupframes;
			var popup_frame_len = _popuframes.length;
			for (var i = popup_frame_len - 1; i >= 0; i--) {
				var chframe = _popuframes[i];
				if (chframe && chframe.form) {
					chframe.form.close();
				}
			}

			if (nexacro.Browser == "IE" && !skip) {
				if (window.parent === window) {
					this.mainframe._skip_destroy = true;
				}
				else {
					this.mainframe._skip_destroy = false;
				}
			}

			this.mainframe._destroy();
			this.mainframe._skip_destroy = false;

			this.removeDatasets();
			this.destroy();

			this._global_context = null;
			nexacro._applicationExit();
		};

		_pApplication.exit = function () {
			if (nexacro.Browser != "Runtime") {
				if (window.parent !== window && window.NEXACROWEBBROWSER) {
					window.NEXACROWEBBROWSER._exit();
					return;
				}
			}

			if (this._exit() == false) {
				return;
			}

			nexacro._applicationExit(true);
		};


		_pApplication.getRealPath = function (strbaseurl, strtargeturl, strtypdefinitionurl) {
			var real_path = "";
			return real_path;
		};




		_pApplication.alert = function (strText, strCaption, strType) {
			this._is_on_alert = true;
			nexacro._skipDragEventAfterMsgBox = true;
			nexacro._alert(this, strText, strCaption, strType);
			this._is_on_alert = false;
		};


		_pApplication.confirm = function (strText, strCaption, strType) {
			nexacro._skipDragEventAfterMsgBox = true;
			return nexacro._confirm(this, strText, strCaption, strType);
		};


		_pApplication.userconfirm = function (strCaption, strText, strType) {
			return true;
		};

		_pApplication.setPrivateProfile = function (key, varValue, common_flag) {
			return nexacro._setPrivateProfile(key, varValue, common_flag);
		};

		_pApplication.getPrivateProfile = function (key, common_flag) {
			return nexacro._getPrivateProfile(key, common_flag);
		};

		_pApplication.checkLicense = function (licenseurl) {
			this._checkLicense(licenseurl);
		};

		_pApplication.loadTypedefition = nexacro._emptyFn;

		_pApplication.on_initApplication = nexacro._emptyFn;
		_pApplication.on_loadGlobalVariables = nexacro._emptyFn;
		_pApplication.on_initEvent = nexacro._emptyFn;
		_pApplication.on_createBodyFrame = nexacro._emptyFn;

		_pApplication.initApplication = function () {
			this.on_initApplication();

			if (this._component_uri) {
				this._resource_path = nexacro._transfullurl(this._component_uri, "../resources/");
			}

			var _cur_scr = this._curscreen;
			if (_cur_scr) {
				var props = ["name", "type", "screenwidth", "screenheight", "sizeorientation", "themeid", "hithemeid", "autozoom", "description", "zoommin", "zoommax", "systemos", "systemlocale"];
				for (var prop in _cur_scr) {
					if (props.indexOf(prop) < 0 && this["set_" + prop]) {
						this["set_" + prop](_cur_scr[prop]);
					}
				}
			}
		};

		_pApplication.loadGlobalVariables = function () {
			this.on_loadGlobalVariables();

			this._addGlobalVariableFromGlobalValue();
		};
		_pApplication.initEvent = function () {
			this.on_initEvent();
		};
		_pApplication.createBodyFrame = function (mainframe) {
			this.on_createBodyFrame(mainframe);
		};


		_pApplication.executeScript = function (url, scriptstr, exports) {
			var suburl = nexacro._makeurl(url);

			if (scriptstr) {
				var module = nexacro._executeScript(scriptstr);

				if (module) {
					var async = this._async;
					this._async = false;
					module.call(this, suburl, exports);
					this._executeScript(this);
					this._async = async;
				}
			}
			else {
				var scriptlist = this._includescriptlist;
				var item, dep, _url;

				for (var i = 0, len = scriptlist.length; i < len; i++) {
					item = scriptlist[i];
					_url = nexacro._makeurl(item.url);

					if ((_url == suburl || _url == url) && !item.isexecute) {
						if (!item.isloadonly) {
							for (var j = 0, deplen = item.deps.length; j < deplen; j++) {
								dep = item.deps[j];
								this.executeScript(dep, scriptstr, exports);
							}
						}
						item.isexecute = true;
						item.fn.call(this);
						break;
					}
				}
			}
		};

		_pApplication.executeIncludeScript = _pApplication.executeScript;

		_pApplication._executeScript = function (context) {
			if (context && context._registerscriptfn) {
				context._registerscriptfn.call(context);
			}
			context._registerscriptfn = null;
			context._includescriptlist.length = 0;
		};


		_pApplication.registerScript = function (filename, fn) {
			var scriptlist = this._includescriptlist;
			var len = scriptlist.length, _url;

			for (var i = 0; i < len; i++) {
				_url = nexacro._makeurl(scriptlist[i].url);
				if (_url == filename) {
					scriptlist[i].fn = fn;
					return;
				}
			}

			this._registerscriptfn = fn;
		};

		_pApplication.addIncludeScript = function (mainurl, url) {
			if (url && !this._is_loaded) {
				var deps = [], depslen;

				var includescript, _url;
				var list = this._includescriptlist;

				for (var i = 0, len = list.length; i < len; i++) {
					includescript = list[i];
					_url = nexacro._makeurl(includescript.url);

					if (!includescript.isloadonly) {
						if (_url.match(mainurl)) {
							depslen = includescript.deps.length;
							for (var j = 0; j < depslen; j++) {
								if (includescript.deps[j] == url) {
									continue;
								}
							}
							includescript.deps.push(url);
						}
					}

					if (_url == url) {
						return;
					}
				}

				this._includescriptlist.push({
					url : url, 
					deps : deps, 
					isloadonly : false, 
					fn : nexacro._emptyFn, 
					isload : false, 
					isexecute : false
				});
			}
		};

		_pApplication.loadIncludeScript = function (mainurl, isloadonly) {
			var includescript;
			var list = this._includescriptlist;

			for (var i = 0, len = list.length; i < len; i++) {
				includescript = list[i];
				includescript.isloadonly = isloadonly;

				if (includescript.isload == false) {
					includescript.isload = true;

					this._loadInclude.call(this, mainurl, includescript.url, true);
				}
			}
		};


		var _global_context = this;



		_pApplication._on_init = function () {
			nexacro._setLocalStorage("_typedefinition_url", this._typedefinition_url, "string");
			nexacro._setLocalStorage("_globalvar_uri", this._globalvar_uri, "string");

			nexacro._initializeGlobalObjects(_global_context);
			nexacro._registerClass(_global_context);

			nexacro._observeGlobalEvent(null, "beforeuserconfirm", "onbeforeuserconfirm", this._on_callback_beforeuserconfirm);
			nexacro._observeGlobalEvent(null, "afteruserconfirm", "onafteruserconfirm", this._on_callback_afteruserconfirm);

			nexacro._initApplication();
			this.initApplication();

			if (this.mainframe) {
				this.mainframe.createBodyFrame();
			}

			var url = this._url, item = null;

			var scriptlist = this._includescriptlist;

			for (var i = 0, len = scriptlist.length; i < len; i++) {
				item = scriptlist[i];
				if (item && !item.isloadonly) {
					this.executeScript(item.url, null, this);
				}
			}

			this._executeScript(this);
			this.initEvent();

			this.on_fire_onloadtypedefinition(this, this._typedefinition_url);
			this.loadGlobalVariables();
			this.on_fire_onloadingglobalvariables(this, this._globalvar_uri);

			var cnt = this._datasets.length;
			for (var i = 0; i < cnt; i++) {
				this._datasets[i].on_created();
			}

			if (this.mainframe) {
				this.mainframe.createComponent();
				this.mainframe._setRtlDirection(this._rtldirection);
				this.mainframe._setLocale(this._locale);
				this.mainframe.on_created();
			}

			cnt = this.widgets.length;
			for (var i = 0; i < cnt; i++) {
				this.widgets[i].createComponent();
				this.widgets[i].on_created();
			}

			cnt = this.trays.length;
			for (var i = 0; i < cnt; i++) {
				this.trays[i].on_created();
			}

			if (!this.loadingimage) {
				var loadingimage = this._getLoadingImageUrl();
				loadingimage = nexacro._getImageLocation(loadingimage);
				nexacro._getImageSize(loadingimage, this._on_loadwaitimage, this, undefined, this.loadingimage);
			}

			this._is_loaded = true;
		};

		_pApplication._beginCommProgress = function () {
			var mainframe = this.mainframe;
			var statusbar = mainframe ? mainframe.statusbar : null;
			if (statusbar) {
				statusbar._beginCommProgress();
			}
		};

		_pApplication._stepCommProgress = function (current, overall) {
			var mainframe = this.mainframe;
			var statusbar = mainframe ? mainframe.statusbar : null;
			if (statusbar) {
				statusbar._stepCommProgress(current, overall);
			}
		};

		_pApplication._endCommProgress = function () {
			var mainframe = this.mainframe;
			var statusbar = mainframe ? mainframe.statusbar : null;
			if (statusbar) {
				statusbar._endCommProgress();
			}
		};

		_pApplication.playAccessibility = function (comp) {
			if (comp) {
				comp._notifyAccessibility();
				return true;
			}
			return false;
		};

		_pApplication.deleteCacheDB = function () {
			return nexacro._deleteCacheDB();
		};


		_pApplication.enableAutoUpdate = function () {
			this._id = nexacro.Device.makeID();
			nexacro.Device._userCreatedObj[this._id] = this;

			var jsonstr = '{"id":' + this._id + ', "div":"Update",  "method":"enableAutoUpdate"}';
			nexacro.Device.exec(jsonstr);
		};
	}


	nexacro.FlingHandler = function (id, win, elem, scroll_comp, scroll_mode, touchinfos, totalx, totaly, speedx, speedy, duration, touchlen, touch_manager) {
		this._id = id;
		this._touch_manager = touch_manager;

		var compinfo = win.findComponent(elem, 0, 0);
		if (compinfo && compinfo[0] && (totalx || totaly)) {
			this._target_comp = compinfo[0];
			this.totalx = totalx;
			this.totaly = totaly;
			this.speedx = speedx;
			this.speedy = speedy;
			this.duration = duration;
			this.touchlen = touchlen;

			this._target_window = win;
			this._target_elem = elem;
			this._starttime = Date.now();
			this._compinfo = compinfo;
			this._scroll_comp = scroll_comp;
			this._scroll_mode = scroll_mode;
			this._oldspeedx = this._oldspeedy = this._oldcurvevalue = 0.0;

			this._is_alive = true;
		}
		else {
			this._is_alive = false;
		}

		if (!nexacro.FlingHandler.prototype._fling_bezier) {
			nexacro.FlingHandler.prototype._fling_bezier = new nexacro.CubicBezier(0.1, 0.4, 0.3, 1);
		}
	};

	var _pFlingHandler = nexacro.FlingHandler.prototype;
	_pFlingHandler._fling_interval = 20;
	_pFlingHandler._fling_bezier = null;

	_pFlingHandler.start = function () {
		var touch_manager = this._touch_manager;
		var ret = touch_manager.on_fire_onflingstart(this._target_elem, this._compinfo, this, this.speedx, this.speedy, this.speedx, this.speedy, this.touchlen);
		if (ret == true) {
			this._touch_manager.onflingend(this._id);
			return;
		}

		this._flingend_timer = new nexacro.TouchTimer(this._target_window, this._on_flingend_timer, this, this.duration);

		var pThis = this;
		this._fling_timer = new nexacro.AnimationFrame(this._target_comp, function () {
			pThis._on_fling_frame();
		});
		this._fling_timer.start();
	};

	_pFlingHandler.stop = function () {
		if (this._flingend_timer && this._flingend_timer.isWait()) {
			this._fling_timer.stop();
			this._flingend_timer.stop();

			this.on_fire_onflingend();

			this._touch_manager.onflingend(this._id);
		}
	};

	_pFlingHandler._on_fling_timer = function () {
		var t = Date.now() - this._starttime;
		if (!this._is_alive) {
			return t;
		}

		var fling_bezier = this._fling_bezier;
		var epsilon = 1.0 / (200.0 * this.duration);
		var solvedX = fling_bezier._getTForCoordinate(t / this.duration, fling_bezier._p1.x, fling_bezier._p2.x, epsilon);
		var c = fling_bezier._getCoordinateForT(solvedX, fling_bezier._p1.y, fling_bezier._p2.y);

		var offset_c = c - this._oldcurvevalue;
		var xdelta = (offset_c * this.speedx);
		var ydelta = (offset_c * this.speedy);

		this._proc_scroll = false;
		this._touch_manager.on_fire_onfling(this._target_elem, this._compinfo, this, this.speedx, this.speedy, xdelta, ydelta, this.touchlen);

		var scroll_comp = this._scroll_comp;
		if (scroll_comp && this._proc_scroll) {
			var scrolldeltax = (offset_c * this.totalx);
			var scrolldeltay = (offset_c * this.totaly);

			var scroll_mode = this._scroll_mode;
			var scrollbar = scroll_comp.hscrollbar;
			if ((scroll_mode == 3 || scroll_mode == 2) && scrolldeltax && scrollbar && scrollbar.enable) {
				scrollbar._setPos(scrollbar.pos - scrolldeltax, "fling");
			}

			scrollbar = scroll_comp.vscrollbar;
			if ((scroll_mode == 3 || scroll_mode == 1) && scrolldeltay && scrollbar && scrollbar.enable) {
				scrollbar._setPos(scrollbar.pos - scrolldeltay, "fling");
			}
		}

		this._oldcurvevalue = c;
		return (t / this.duration);
	};

	_pFlingHandler._on_fling_frame = function () {
		var ret = this._on_fling_timer();
		if (ret < 1.0) {
			this._fling_timer.start();
		}
	};

	_pFlingHandler.on_fire_onflingend = function () {
		this._touch_manager.on_fire_onflingend(this._target_elem, this._compinfo, this, this.speedx, this.speedy, 0, 0, this.touchlen);
		this._is_alive = false;
	};

	_pFlingHandler._setScrollComp = function (comp) {
		if (this._scroll_comp || !comp) {
			return;
		}
		this._scroll_comp = comp;
	};

	_pFlingHandler._on_flingend_timer = function () {
		if (this._fling_timer) {
			this._fling_timer.stop();
			this._fling_timer.destroy();
		}
		this._flingend_timer.destroy();

		this.on_fire_onflingend();

		this._touch_manager.onflingend(this._id);
	};


	delete _pFlingHandler;

	nexacro.TouchTimer = function (target, callbackfunc, scope, interval) {
		var pThis = this;
		this._callbackfunc = function () {
			pThis.stop();
			callbackfunc.call(scope);
		};
		if (target._getReferenceContext) {
			this.context = target._getReferenceContext();
			this._win_handle = this.context._getWindowHandle();
		}
		else {
			this._win_handle = target._handle;
		}

		this._handle = null;

		if (interval != undefined) {
			this.start(interval);
		}
	};
	var _pTouchTimer = nexacro.TouchTimer.prototype;

	_pTouchTimer.start = function (interval) {
		if (this._handle) {
			this.stop();
		}
		this._handle = nexacro._setSystemTimer(this._win_handle, this._callbackfunc, interval);
	};

	_pTouchTimer.stop = function () {
		if (this._handle) {
			nexacro._clearSystemTimer(this._win_handle, this._handle);
			this._handle = null;
		}
	};

	_pTouchTimer.isWait = function () {
		return !!this._handle;
	};

	_pTouchTimer.destroy = function () {
		this.stop();
		this.context = null;
		this._callbackfunc = null;
		this.scope = null;
	};
	delete _pTouchTimer;

	nexacro.CubicBezier = function (p1x, p1y, p2x, p2y) {
		this._p1 = {
			x : p1x, 
			y : p1y
		};
		this._p2 = {
			x : p2x, 
			y : p2y
		};
	};

	var _pCubicBezier = nexacro.CubicBezier.prototype;
	_pCubicBezier._getCoordinateForT = function (t, p1, p2) {
		var c = 3 * p1, b = 3 * (p2 - p1) - c, a = 1 - c - b;
		return ((a * t + b) * t + c) * t;
	};

	_pCubicBezier._getCoordinateDerivateForT = function (t, p1, p2) {
		var c = 3 * p1, b = 3 * (p2 - p1) - c, a = 1 - c - b;
		return (3 * a * t + 2 * b) * t + c;
	};

	_pCubicBezier._getTForCoordinate = function (c, p1, p2, epsilon) {
		if (!isFinite(epsilon) || epsilon <= 0) {
			throw new RangeError('"epsilon" must be a number greater than 0.');
		}
		var t2, i, c2, d2;

		for (t2 = c, i = 0; i < 8; i = i + 1) {
			c2 = this._getCoordinateForT(t2, p1, p2) - c;
			if (Math.abs(c2) < epsilon) {
				return t2;
			}
			d2 = this._getCoordinateDerivateForT(t2, p1, p2);
			if (Math.abs(d2) < 1e-6) {
				break;
			}
			t2 = t2 - c2 / d2;
		}

		t2 = c;
		var t0 = 0, t1 = 1;
		if (t2 < t0) {
			return t0;
		}
		if (t2 > t1) {
			return t1;
		}

		while (t0 < t1) {
			c2 = this._getCoordinateForT(t2, p1, p2);
			if (Math.abs(c2 - c) < epsilon) {
				return t2;
			}
			if (c > c2) {
				t0 = t2;
			}
			else {
				t1 = t2;
			}
			t2 = (t1 - t0) * 0.5 + t0;
		}

		return t2;
	};

	_pCubicBezier.getPointForT = function (t) {
		if (t === 0 || t === 1) {
			return {
				x : t, 
				y : t
			};
		}

		if (t < 0 || t > 1) {
			throw new RangeError('"t" must be a number between 0 and 1' + 'Got ' + t + ' instead.');
		}

		return {
			x : this._getCoordinateForT(t, this._p1.x, this._p2.x), 
			y : this._getCoordinateForT(t, this._p1.y, this._p2.y)
		};
	};

	_pCubicBezier.getTForX = function (x, epsilon) {
		return this._getTForCoordinate(x, this._p1.x, this._p2.x, epsilon);
	};

	_pCubicBezier.getTForY = function (y, epsilon) {
		return this._getTForCoordinate(y, this._p1.y, this._p2.y, epsilon);
	};

	_pCubicBezier._getAuxPoints = function (t) {
		if (t <= 0 || t >= 1) {
			throw new RangeError('"t" must be greater than 0 and lower than 1');
		}

		var i0 = {
			x : t * this._p1.x, 
			y : t * this._p1.y
		}, i1 = {
			x : this._p1.x + t * (this._p2.x - this._p1.x), 
			y : this._p1.y + t * (this._p2.y - this._p1.y)
		}, i2 = {
			x : this._p2.x + t * (1 - this._p2.x), 
			y : this._p2.y + t * (1 - this._p2.y)
		};

		var j0 = {
			x : i0.x + t * (i1.x - i0.x), 
			y : i0.y + t * (i1.y - i0.y)
		}, j1 = {
			x : i1.x + t * (i2.x - i1.x), 
			y : i1.y + t * (i2.y - i1.y)
		};

		var k = {
			x : j0.x + t * (j1.x - j0.x), 
			y : j0.y + t * (j1.y - j0.y)
		};

		return {
			i0 : i0, 
			i1 : i1, 
			i2 : i2, 
			j0 : j0, 
			j1 : j1, 
			k : k
		};
	};

	_pCubicBezier.divideAtT = function (t) {
		if (t < 0 || t > 1) {
			throw new RangeError('"t" must be a number between 0 and 1. ' + 'Got ' + t + ' instead.');
		}

		if (t === 0 || t === 1) {
			var curves = [];
			curves[t] = CubicBezier.linear();
			curves[1 - t] = this.clone();
			return curves;
		}

		var left = {
		}, right = {
		}, points = this._getAuxPoints(t);
		var i0 = points.i0, i2 = points.i2, j0 = points.j0, j1 = points.j1, k = points.k;

		var factorX = k.x, factorY = k.y;
		left.p1 = {
			x : i0.x / factorX, 
			y : i0.y / factorY
		};
		left.p2 = {
			x : j0.x / factorX, 
			y : j0.y / factorY
		};
		right.p1 = {
			x : (j1.x - factorX) / (1 - factorX), 
			y : (j1.y - factorY) / (1 - factorY)
		};
		right.p2 = {
			x : (i2.x - factorX) / (1 - factorX), 
			y : (i2.y - factorY) / (1 - factorY)
		};

		return [new nexacro.CubicBezier(left.p1.x, left.p1.y, left.p2.x, left.p2.y), new nexacro.CubicBezier(right.p1.x, right.p1.y, right.p2.x, right.p2.y)
		];
	};

	_pCubicBezier.divideAtX = function (x, epsilon) {
		if (x < 0 || x > 1) {
			throw new RangeError('"x" must be a number between 0 and 1. ' + 'Got ' + x + ' instead.');
		}

		var t = this.getTForX(x, epsilon);
		return this.divideAtT(t);
	};

	_pCubicBezier.divideAtY = function (y, epsilon) {
		if (y < 0 || y > 1) {
			throw new RangeError('"y" must be a number between 0 and 1. ' + 'Got ' + y + ' instead.');
		}

		var t = this.getTForY(y, epsilon);
		return this.divideAtT(t);
	};

	_pCubicBezier.clone = function () {
		return new nexacro.CubicBezier(this._p1.x, this._p1.y, this._p2.x, this._p2.y);
	};

	_pCubicBezier.toString = function () {
		return "cubic-bezier(" + [this._p1.x, this._p1.y, this._p2.x, this._p2.y].join(", ") + ")";
	};

	_pCubicBezier.linear = function () {
		return new nexacro.CubicBezier();
	};

	_pCubicBezier.ease = function () {
		return new nexacro.CubicBezier(0.25, 0.1, 0.25, 1.0);
	};
	_pCubicBezier.linear = function () {
		return new nexacro.CubicBezier(0.0, 0.0, 1.0, 1.0);
	};
	_pCubicBezier.easeIn = function () {
		return new nexacro.CubicBezier(0.42, 0, 1.0, 1.0);
	};
	_pCubicBezier.easeOut = function () {
		return new nexacro.CubicBezier(0, 0, 0.58, 1.0);
	};
	_pCubicBezier.easeInOut = function () {
		return new nexacro.CubicBezier(0.42, 0, 0.58, 1.0);
	};

	delete _pCubicBezier;


	if (!this.system) {
		this.system = nexacro.System;
	}

	if (!this.application) {
		this.application = nexacro.Application;
		application.init();
	}
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro._bInitCssObjects) {
	nexacro.Style_value = function (v) {
		this.value = "";

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";

		if (v) {
			if (typeof (v) == "string") {
				var val = v.trim();
				if (val) {
					this._parseInfo(val);
					var str = this._getValueStr();
					this._is_empty = (str == "");
					this._value = str;
				}
			}
			else {
				this.value = v;
				var str = v + "";
				this._is_empty = (str == "");
				this._value = str;
			}
		}
		else if (v === false || v === 0) {
			this.value = v;
			var str = v + "";
			this._is_empty = (str == "");
			this._value = str;
		}
	};

	var _pStyleValue = nexacro._createPrototype(nexacro.Object, nexacro.Style_value);
	nexacro.Style_value.prototype = _pStyleValue;
	_pStyleValue._type_name = "Value";

	_pStyleValue.valueOf = function () {
		return this.value;
	};
	_pStyleValue.toString = function () {
		return this._value + "";
	};

	_pStyleValue.clone = function () {
		var newobj = new nexacro.Style_value();
		newobj.value = this.value;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleValue.isEmpty = function () {
		return (this._bindtype = 0 && this._value != "");
	};

	_pStyleValue._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				return this.value + "";
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};
	_pStyleValue._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this.value = "";
		}
		else {
			this._bindtype = 0;
			this._bindexpr = "";
			this.value = val;
		}
	};
	_pStyleValue._parseEnumInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this.value = "";
		}
		else {
			this._bindtype = 0;
			this._bindexpr = "";
			var len = enumvals.length;
			for (var i = 0; i < len; i++) {
				if (v == enumvals[i]) {
					this.value = v;
					return;
				}
			}
			this.value = "";
		}
	};
	_pStyleValue._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._value = "";
			this._bindtype = 0;
			this._bindexpr = "";
			this.value = "";
			return true;
		}
		return false;
	};
	_pStyleValue._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleValue._setValue = function (v) {
		if (v) {
			if ((typeof v) == "string") {
				var val = v.trim();
				if (val != this._value) {
					if (val) {
						this._parseInfo(val);
						return this._updateValue();
					}
					else {
						return this._empty();
					}
				}
				return false;
			}
			else {
				if (v != this._value) {
					this._bindtype = 0;
					this._bindexpr = "";
					this.value = v;
					return this._updateValue();
				}
				return false;
			}
		}
		return this._empty();
	};
	_pStyleValue._setEnumValue = function (v, enumvals) {
		if (v) {
			if ((typeof v) == "string") {
				var val = v.trim();
				if (val != this._value) {
					if (val) {
						this._parseEnumInfo(val, enumvals);
						return this._updateValue();
					}
					else {
						return this._empty();
					}
				}
				return false;
			}
			else {
				if (v != this._value) {
					this._bindtype = 0;
					this._bindexpr = "";
					var len = enumvals.length;
					for (var i = 0; i < len; i++) {
						if (v == enumvals[i]) {
							this.value = v;
							return this._updateValue();
						}
					}
					return this._empty();
				}
				return false;
			}
		}
		return this._empty();
	};

	delete _pStyleValue;


	nexacro.getStyleValueFloat = function (v, def) {
		if (!v || v.isEmpty()) {
			return def;
		}
		var val = (v.value - 0);
		return isNaN(val) ? def : val;
	};
	nexacro.getStyleValueInt = function (v, def) {
		if (!v || v.isEmpty()) {
			return def;
		}
		var val = (v.value | 0);
		return isNaN(val) ? def : val;
	};
	nexacro.getStyleValueText = function (v, def) {
		if (!v || v.isEmpty()) {
			return def;
		}
		return v.value;
	};
	nexacro.getStyleValueText2 = function (v, chkval, def) {
		if (!v || v.isEmpty() || v._value == chkval) {
			return def;
		}
		return v.value;
	};
	nexacro.getStyleValueBoolean = function (v, def) {
		if (!v || v.isEmpty()) {
			return def;
		}
		return (!!v.value);
	};

	nexacro._createValueAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if ((v != null && v != undefined) || v === false) {\n"
			 + "		var styleobj = nexacro._getCachedValueObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};
	nexacro._createEnumValueAttributeEvalStr = function (ptype_id, attr_id, enumvals_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = new nexacro.Style_value();\n"
			 + "		styleobj._setEnumValue(v, $ENUM$);\n"
			 + "        if (!oldobj || oldobj._value != styleobj._value) {\n"
			 + "            if (styleobj._bindtype != 0) {\n"
			 + "                this.$ATTR$ = styleobj;\n"
			 + "			    if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "            }\n"
			 + "            else {\n"
			 + "                styleobj = nexacro._registerCachedValueObj(styleobj);\n"
			 + "                this.$ATTR$ = styleobj;\n"
			 + "			    if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "            }\n"
			 + "		}\n"
			 + "	}\n"
			 + "	else if (styleobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id).replace(/\$ENUM\$/g, enumvals_id);
	};

	nexacro.Style_color = function (v) {
		this.value = "";

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";
		this._syscolor = "";
		this._sysalpha = 255;

		if (v) {
			var val = v.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this.value = val;
				this._value = str;
			}
		}
	};

	var _pStyleColor = nexacro._createPrototype(nexacro.Object, nexacro.Style_color);
	nexacro.Style_color.prototype = _pStyleColor;
	_pStyleColor._type_name = "Color";

	_pStyleColor.valueOf = function () {
		return this.value;
	};

	_pStyleColor.toString = function () {
		return this.value;
	};

	_pStyleColor.clone = function () {
		var newobj = new nexacro.Style_color();
		newobj.value = this.value;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		newobj._syscolor = this._syscolor;
		newobj._sysalpha = this._sysalpha;
		return newobj;
	};

	_pStyleColor._getValueStr = function (val) {
		switch (this._bindtype) {
			case 0:
				return this._value;
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};
	_pStyleColor._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this.value = "";
		}
		else {
			this._bindtype = 0;
			this._bindexpr = "";
			this.value = val;
			this._syscolor = nexacro._getWebColorFromXreColor(val);
			this._sysalpha = nexacro._getXreColorAlpha(val);
			var str = val + "";
			this._is_empty = (str == "");
			this._value = str;
		}
	};
	_pStyleColor._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._value = "";
			this._bindtype = 0;
			this._bindexpr = "";
			this.value = "";
			this._syscolor = "";
			this._sysalpha = 255;
			return true;
		}
		return false;
	};

	_pStyleColor._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			if (this._bindtype != 0) {
				this._syscolor = "";
				this._sysalpha = 255;
			}
			else {
				this._syscolor = nexacro._getWebColorFromXreColor(this.value);
				this._sysalpha = nexacro._getXreColorAlpha(this.value);
			}
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleColor._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	nexacro._createColorAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedColorObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_align = function (v1, v2) {
		this.halign = "";
		this.valign = "";
		this._halign = "";
		this._valign = "";

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";

		if (v2 != null) {
			this._bindtype = 0;
			this.valign = v1;
			this.halign = v2;
			var str;
			if (this.halign && this.valign) {
				str = this.halign + " " + this.valign;
			}
			else {
				str = this.halign + this.valign;
			}
			this._is_empty = (str == "");
			this._value = str;
		}
		else if (v1 && (typeof (v1) == "string")) {
			var val = v1.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = str;
			}
		}
	};
	var _pStyleAlign = nexacro._createPrototype(nexacro.Object, nexacro.Style_align);
	nexacro.Style_align.prototype = _pStyleAlign;
	_pStyleAlign._type_name = "Align";

	_pStyleAlign.valueOf = function () {
		return this._value;
	};
	_pStyleAlign.toString = function () {
		return this._value;
	};

	_pStyleAlign.clone = function () {
		var newobj = new nexacro.Style_align();
		newobj.halign = this.halign;
		newobj.valign = this.valign;
		newobj._halign = this._halign;
		newobj._valign = this._valign;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleAlign._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				if (this.halign && this.valign) {
					return this.halign + " " + this.valign;
				}
				else {
					return this.halign + this.valign;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};
	_pStyleAlign._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this.halign = "";
			this.valign = "";
			this._halign = "";
			this._valign = "";
		}
		else {
			this._bindtype = 0;
			var valarr = val.split(/\s+/);
			this.halign = "";
			this.valign = "";
			this._halign = "";
			this._valign = "";
			var checked = 0;

			switch (valarr[0]) {
				case "left":
					this.halign = "left";
					this._halign = "left";
					checked = 1;
					break;
				case "center":
					this.halign = "center";
					this._halign = "center";
					checked = 1;
					break;
				case "right":
					this.halign = "right";
					this._halign = "right";
					checked = 1;
					break;
				case "lefttext":
					this.halign = "lefttext";
					this._halign = "left";
					checked = 1;
					break;
				case "righttext":
					this.halign = "righttext";
					this._halign = "right";
					checked = 1;
					break;
				case "top":
					this.valign = "top";
					this._valign = "top";
					checked = 2;
					break;
				case "middle":
					this.valign = "middle";
					this._valign = "middle";
					checked = 2;
					break;
				case "bottom":
					this.valign = "bottom";
					this._valign = "bottom";
					checked = 2;
					break;
				case "toptext":
					this.valign = "toptext";
					this._valign = "top";
					checked = 2;
					break;
				case "bottomtext":
					this.valign = "bottomtext";
					this._valign = "bottom";
					checked = 2;
					break;
			}

			if (valarr.length > 1) {
				if (checked == 1) {
					switch (valarr[1]) {
						case "top":
							this.valign = "top";
							this._valign = "top";
							break;
						case "middle":
							this.valign = "middle";
							this._valign = "middle";
							break;
						case "bottom":
							this.valign = "bottom";
							this._valign = "bottom";
							break;
						case "toptext":
							this.valign = "toptext";
							this._valign = "top";
							break;
						case "bottomtext":
							this.valign = "bottomtext";
							this._valign = "bottom";
							break;
					}
				}
				else if (checked == 2) {
					switch (valarr[1]) {
						case "left":
							this.halign = "left";
							this._halign = "left";
							break;
						case "center":
							this.halign = "center";
							this._halign = "center";
							break;
						case "right":
							this.halign = "right";
							this._halign = "right";
							break;
						case "lefttext":
							this.halign = "lefttext";
							this._halign = "left";
							break;
						case "righttext":
							this.halign = "righttext";
							this._halign = "right";
							break;
					}
				}
				else {
					switch (valarr[1]) {
						case "left":
							this.halign = "left";
							this._halign = "left";
							break;
						case "center":
							this.halign = "center";
							this._halign = "center";
							break;
						case "right":
							this.halign = "right";
							this._halign = "right";
							break;
						case "lefttext":
							this.halign = "lefttext";
							this._halign = "left";
							break;
						case "righttext":
							this.halign = "righttext";
							this._halign = "right";
							break;
						case "top":
							this.valign = "top";
							this._valign = "top";
							break;
						case "middle":
							this.valign = "middle";
							this._valign = "middle";
							break;
						case "bottom":
							this.valign = "bottom";
							this._valign = "bottom";
							break;
						case "toptext":
							this.valign = "toptext";
							this._valign = "top";
							break;
						case "bottomtext":
							this.valign = "bottomtext";
							this._valign = "bottom";
							break;
					}
				}
			}
		}
	};
	_pStyleAlign._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._value = "";
			this._bindtype = 0;
			this._bindexpr = "";
			this.valign = "";
			this.halign = "";
			this._valign = "";
			this._halign = "";
			return true;
		}
		return false;
	};
	_pStyleAlign._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};
	_pStyleAlign._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleAlign.set_halign = function (v) {
		if (v != this.halign) {
			this._bindtype = 0;
			this.halign = "";
			this._halign = "";
			switch (v) {
				case "left":
					this.halign = "left";
					this._halign = "left";
					break;
				case "center":
					this.halign = "center";
					this._halign = "center";
					break;
				case "right":
					this.halign = "right";
					this._halign = "right";
					break;
				case "lefttext":
					this.halign = "lefttext";
					this._halign = "left";
					break;
				case "righttext":
					this.halign = "righttext";
					this._halign = "right";
					break;
				default:
					this.halign = "left";
					this._halign = "left";
					break;
			}
			return this._updateValue();
		}
	};
	_pStyleAlign.set_valign = function (v) {
		if (v != this.valign) {
			this._bindtype = 0;
			this.valign = "";
			this._valign = "";
			switch (v) {
				case "top":
					this.valign = "top";
					this._valign = "top";
					break;
				case "middle":
					this.valign = "middle";
					this._valign = "middle";
					break;
				case "bottom":
					this.valign = "bottom";
					this._valign = "bottom";
					break;
				case "toptext":
					this.valign = "toptext";
					this._valign = "toptext";
					break;
				case "bottomtext":
					this.valign = "bottomtext";
					this._valign = "bottomtext";
					break;
				default:
					this.valign = "top";
					this._valign = "top";
					break;
			}
			return this._updateValue();
		}
	};

	_pStyleAlign._createRtlValue = function () {
		if (!this._rtlvalue) {
			var strValue;
			if (this.halign == "left") {
				strValue = "right " + this.valign;
			}
			else if (this.halign == "right") {
				strValue = "left " + this.valign;
			}

			this._rtlvalue = strValue;
		}
	};

	_pStyleAlign._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedAlignObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	nexacro._createAlignAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedAlignObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_halign = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_align());\n"
			 + "	newobj.set_halign(v);\n"
			 + "    newobj = nexacro._registerCachedAlignObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_valign = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_align());\n"
			 + "	newobj.set_valign(v);\n"
			 + "    newobj = nexacro._registerCachedAlignObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_background = function (v1, v2, v3, v4, v5, v6, v7) {
		this.color = "";
		this.image = "";
		this.repeat = "";
		this.imageedge = "";
		this.imageedge_x = 0;
		this.imageedge_y = 0;
		this.position = "";
		this.position_x = 0;
		this.position_y = 0;

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";

		this._syscolor = "";
		this._sysopacity = 100;
		this._sysopacityfilter = "";

		if (v7 != null) {
			this._is_empty = false;
			this._bindtype = 0;
			if (v1 == "transparent") {
				this.color = "";
			}
			else {
				this.color = v1;
			}

			this.image = v2;
			if (v2) {
				this.image = v2;
			}

			this.repeat = v3;

			this.imageedge_x = (v4 | 0);
			this.imageedge_y = (v5 | 0);
			if (this.imageedge_x || this.imageedge_y) {
				this.imageedge = this.imageedge_x + "," + this.imageedge_y;
			}

			this.__load_position1(v6);
			this.__load_position2(v7);
			this._updateValue();
		}
		else if (v1 && (typeof (v1) == "string")) {
			var val = v1.trim();
			if (val) {
				this._parseInfo(val);
				this._updateValue();
			}
		}
	};
	var _pStyleBackground = nexacro._createPrototype(nexacro.Object, nexacro.Style_background);
	nexacro.Style_background.prototype = _pStyleBackground;
	_pStyleBackground._type_name = "Background";

	_pStyleBackground.valueOf = function () {
		return this._value;
	};
	_pStyleBackground.toString = function () {
		return this._value;
	};

	_pStyleBackground.clone = function () {
		var newobj = new nexacro.Style_background();
		newobj.color = this.color;
		newobj.image = this.image;
		newobj.repeat = this.repeat;
		newobj.imageedge = this.imageedge;
		newobj.imageedge_x = this.imageedge_x;
		newobj.imageedge_y = this.imageedge_y;
		newobj.position = this.position;
		newobj.position_x = this.position_x;
		newobj.position_y = this.position_y;
		newobj.clientonly = this.clientonly;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleBackground.isEdgeType = function () {
		return (this.image && (this.imageedge_x > 0 || this.imageedge_y > 0));
	};

	_pStyleBackground._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var val;
					if (this.color) {
						val = this.color;
					}
					else {
						val = "transparent";
					}

					if (this.image) {
						val += " URL('" + this.image + "')";
					}

					if (this.repeat) {
						val += ' ' + this.repeat;
					}
					if (this.imageedge) {
						val += ' ' + this.imageedge;
					}
					if (this.position) {
						val += ' ' + this.position;
					}

					return val;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleBackground.__load_color = function (str) {
		str = str.replace(/^'/, "").replace(/'$/, "");

		if (str.substring(1) == "gradation") {
			this.color = "@gradation";
			return true;
		}

		if (str == "transparent") {
			this.color = "transparent";
			return true;
		}

		if (nexacro._xreNamedColorList) {
			if (str in nexacro._xreNamedColorList) {
				this.color = str;
				return true;
			}
		}

		if (str.charAt(0) == "#" && (str.length == 7 || str.length == 9)) {
			this.color = str;
			return true;
		}
		return false;
	};
	_pStyleBackground.__load_repeat = function (str) {
		if (str == "repeat" || str == "repeat-x" || str == "repeat-y" || 
			str == "no-repeat" || str == "stretch" || str == "quad") {
			this.repeat = str;
			return true;
		}
		else {
			this.repeat = "";
			return false;
		}
	};
	_pStyleBackground.__load_imageedge = function (str) {
		if (str.indexOf(",") >= 0) {
			var valarr = str.split(',');
			this.imageedge_x = (valarr[0] | 0);
			this.imageedge_y = (valarr[1] | 0);
			if (this.imageedge_x < 0) {
				this.imageedge_x = 0;
			}
			if (this.imageedge_y < 0) {
				this.imageedge_y = 0;
			}
			this.imageedge = this.imageedge_x + "," + this.imageedge_y;
			return true;
		}


		return false;
	};
	_pStyleBackground.__load_position1 = function (str) {
		if (str == "left") {
			this.position_x = 0;
			this.position = "left";
			return true;
		}
		else if (str == "center") {
			this.position_x = 50;
			this.position = "center";
			return true;
		}
		else if (str == "right") {
			this.position_x = 100;
			this.position = "right";
			return true;
		}
		else {
			var v = parseInt(str) | 0;
			if (isFinite(v)) {
				this.position_x = v;
				if (v == 0) {
					this.position = "left";
				}
				else if (v == 50) {
					this.position = "center";
				}
				else if (v == 100) {
					this.position = "right";
				}
				else {
					this.position = v + "%";
				}
				return true;
			}
			return false;
		}
	};
	_pStyleBackground.__load_position2 = function (str) {
		if (str == "top") {
			this.position_y = 0;
			this.position += " top";
			return true;
		}
		else if (str == "middle") {
			this.position_y = 50;
			this.position += " middle";
			return true;
		}
		else if (str == "bottom") {
			this.position_y = 100;
			this.position += " bottom";
			return true;
		}
		else {
			var v = parseInt(str) | 0;
			if (isFinite(v)) {
				this.position_y = v;
				if (v == 0) {
					this.position += " top";
				}
				else if (v == 50) {
					this.position += " middle";
				}
				else if (v == 100) {
					this.position += " bottom";
				}
				else {
					this.position += " " + v + "%";
				}
				return true;
			}
			return false;
		}
	};
	_pStyleBackground._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this.color = "";
			this.image = "";
			this.repeat = "";
			this.imageedge = "";
			this.imageedge_x = 0;
			this.imageedge_y = 0;
			this.position = "";
			this.position_x = 0;
			this.position_y = 0;

			this._syscolor = "";
			this._sysopacity = 100;
			this._sysopacityfilter = "";
		}
		else {
			var bLoadColor = true;
			var bLoadImage = true;
			var bLoadRepeat = true;
			var bLoadClientOnly = true;
			var bLoadImageEdge = true;
			var bLoadPosition1 = true;
			var bLoadPosition2 = true;
			var part;
			var valarr = val.split(/\s+/);
			var cnt = valarr.length;
			for (var i = 0; i < cnt; i++) {
				part = valarr[i];
				if (part) {
					if (bLoadColor && this.__load_color(part)) {
						bLoadColor = false;
						continue;
					}
					else if (bLoadImage && part.length >= 5 && part.substring(0, 3).toLowerCase() == "url") {
						var image_uri;
						var ch = part.charAt(4);
						if (ch == '\'' || ch == '\"') {
							image_uri = part.substring(5, part.length - 2);
						}
						else {
							image_uri = part.substring(4, part.length - 1);
						}

						this.image = image_uri;
						bLoadImage = false;
						continue;
					}
					else if (bLoadRepeat && this.__load_repeat(part)) {
						bLoadRepeat = false;
						continue;
					}
					else if (bLoadImageEdge && this.__load_imageedge(part)) {
						bLoadImageEdge = false;
						continue;
					}
					else if (bLoadPosition1 && this.__load_position1(part)) {
						bLoadPosition1 = false;
						continue;
					}
					else if (bLoadPosition2 && this.__load_position2(part)) {
						bLoadPosition2 = false;
						continue;
					}
				}
			}
		}
	};

	_pStyleBackground._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._value = "";
			this._bindtype = 0;
			this._bindexpr = "";
			this.color = "";
			this.image = "";
			this.repeat = "";
			this.imageedge_x = 0;
			this.imageedge_y = 0;
			this.position_x = 0;
			this.position_y = 0;
			this.clientonly = true;
			this._image_url = "";

			this._syscolor = "";
			this._sysopacity = 100;
			this._sysopacityfilter = "";
			return true;
		}
		return false;
	};
	_pStyleBackground._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			if (this.color && this.color != "@gradation") {
				if (this.color == "transparent") {
					this._syscolor = "";
					this._sysopacity = 0;
				}
				else {
					this._syscolor = nexacro._getWebColorFromXreColor(this.color);
					this._sysopacity = nexacro._getXreColorOpacity(this.color);
				}
				if (this._sysopacity != 100) {
					this._sysopacityfilter = nexacro._getOpacityFilterFromXreColor(this.color);
				}
				else {
					this._sysopacityfilter = "";
				}
			}
			else {
				this._syscolor = "";
				this._sysopacity = 100;
				this._sysopacityfilter = "";
			}
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};
	_pStyleBackground._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleBackground.set_color = function (v) {
		v = v.trim();
		if (v != this.color) {
			this._bindtype = 0;
			this._bindexpr = "";
			this.color = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleBackground.set_image = function (v) {
		var str = v.toString().trim();
		if (str.length >= 5 && str.substring(0, 3).toLowerCase() == "url") {
			var ch = str.charAt(4);
			if (ch == '\'' || ch == '\"') {
				str = str.substring(5, v.length - 2);
			}
			else {
				str = str.substring(4, str.length - 1);
			}
		}

		if (str != this.image) {
			this._bindtype = 0;
			this._bindexpr = "";
			this.image = str;
			return this._updateValue();
		}
		return false;
	};
	_pStyleBackground.set_repeat = function (v) {
		if (v != "no-repeat" && v != "repeat" && v != "repeat-x" && 
			v != "repeat-y" && v != "stretch" && v != "quad") {
			v = "";
		}
		if (v != this.repeat) {
			this._bindtype = 0;
			this._bindexpr = "";
			this.repeat = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleBackground.set_imageedge = function (v) {
		var str = v.toString().trim();
		var valarr = str.split(',');
		var valx = 0;
		var valy = 0;
		switch (valarr.length) {
			case 0:
				break;
			case 1:
				valx = valy = ((valarr[0].trim()) | 0);
				break;
			default:
				valx = ((valarr[0].trim()) | 0);
				valy = ((valarr[1].trim()) | 0);
				break;
		}
		if (valx < 0) {
			valx = 0;
		}
		if (valy < 0) {
			valy = 0;
		}
		str = valx + "," + valy;
		if (str != this.imageedge) {
			this._bindtype = 0;
			this._bindexpr = "";
			this.imageedge = str;
			this.imageedge_x = valx;
			this.imageedge_y = valy;
			return this._updateValue();
		}
		return false;
	};

	_pStyleBackground.set_clientonly = nexacro._emptyFn;

	_pStyleBackground.set_position = function (v) {
		var valarr = v.trim().split(/\s+/);
		var cnt = valarr.length;
		if (cnt == 0) {
			if (this.position != "") {
				this._is_empty = false;
				this._bindtype = 0;
				this._bindexpr = "";
				this.position = "";
				this.position_x = 0;
				this.position_y = 0;
				return this._updateValue();
			}
			return false;
		}
		else if (cnt == 2) {
			var _old_position = this.position;
			this.__load_position1(valarr[0]);
			this.__load_position2(valarr[1]);
			if (_old_position != this.position) {
				this._is_empty = false;
				this._bindtype = 0;
				this._bindexpr = "";
				return this._updateValue();
			}
			return false;
		}
		return false;
	};

	_pStyleBackground._createRtlValue = function () {
		if (!this._rtlvalue) {
			var strValue;
			if (this.position_x == 0) {
				strValue = this._value.replace("left", "right");
			}
			if (this.position_x == 100) {
				strValue = this._value.replace("right", "left");
			}
			this._rtlvalue = strValue;
		}
	};

	_pStyleBackground._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedBackgroundObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	delete _pStyleBackground;
	nexacro._createBackgroundAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedBackgroundObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_background());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedBackgroundObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_image = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_background());\n"
			 + "	newobj.set_image(v);\n"
			 + "    newobj = nexacro._registerCachedBackgroundObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_repeat = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_background());\n"
			 + "	newobj.set_repeat(v);\n"
			 + "    newobj = nexacro._registerCachedBackgroundObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_position = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_background());\n"
			 + "	newobj.set_position(v);\n"
			 + "    newobj = nexacro._registerCachedBackgroundObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_imageedge = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_background());\n"
			 + "	newobj.set_imageedge(v);\n"
			 + "    newobj = nexacro._registerCachedBackgroundObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_clientonly = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_background());\n"
			 + "	newobj.set_clientonly(v);\n"
			 + "    newobj = nexacro._registerCachedBackgroundObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_line = function (v1, v2, v3, v4) {
		this.width = "";
		this.style = "";
		this.color = "";

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";
		this._width = 0;
		this._syscolor = "";
		this._sysalpha = 255;

		if (v3 != null) {
			this._is_empty = false;
			this.width = v1;
			this._width = (parseInt(v1) | 0);
			this.style = v2;
			this.color = (v3 && v3 != "transparent") ? v3 : "";

			this._syscolor = (this.color) ? nexacro._getWebColorFromXreColor(this.color) : "";
			this._sysalpha = (this.color) ? nexacro._getXreColorAlpha(this.color) : "";
		}
		else if (v1 && (typeof (v1) == "string")) {
			if (v1 != "none") {
				var val = v1.trim();
				if (val) {
					this._parseInfo(val);
					var str = this._getValueStr();
					this._is_empty = (str == "");

					this._syscolor = (this.color) ? nexacro._getWebColorFromXreColor(this.color) : "";
					this._sysalpha = (this.color) ? nexacro._getXreColorAlpha(this.color) : "";

					this._value = str;
				}
			}
		}
	};
	var _pStyleLine = nexacro._createPrototype(nexacro.Object, nexacro.Style_line);
	nexacro.Style_line.prototype = _pStyleLine;
	_pStyleLine._type_name = "Line";

	_pStyleLine.valueOf = function () {
		return this._value;
	};
	_pStyleLine.toString = function () {
		return this._value;
	};

	_pStyleLine.clone = function () {
		var newobj = new nexacro.Style_line();
		newobj.width = this.width;
		newobj.style = this.style;
		newobj.color = this.color;
		newobj._width = this._width;
		newobj._syscolor = this._syscolor;
		newobj._sysalpha = this._sysalpha;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleLine._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				return this._width + "px " + ((this.style) ? this.style : "none") + " " + ((this.color) ? this.color : "transparent");
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleLine._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this.width = "";
			this.style = "";
			this.color = "";
			this._width = 0;
			this._syscolor = "";
			this._sysalpha = 255;
		}
		else {
			var valarr = val.trim().split(/\s+/);
			if (valarr.length < 3) {
				return;
			}
			this.width = valarr[0];
			this._width = (parseInt(valarr[0]) | 0);
			switch (valarr[1]) {
				case "solid":
				case "double":
				case "dotted":
				case "dashed":
					this.style = valarr[1];
					break;
				default:
					this.style = "";
					break;
			}
			this.color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
		}
	};


	_pStyleLine._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._value = "";
			this._bindtype = 0;
			this._bindexpr = "";
			this.width = "";
			this._width = 0;
			this.style = "";
			this.color = "";
			this._syscolor = "";
			this._sysalpha = 255;
			return true;
		}
		return false;
	};
	_pStyleLine._copyInfo = function (from) {
		this._is_empty = from._is_empty;
		this._value = from_value;
		this._bindtype = from.binetype;
		this._bindexpr = from.bineexpr;
		this.width = from.width;
		this.style = from.style;
		this.color = from.color;
		this._width = from._width;
		this._syscolor = from._syscolor;
		this._sysalpha = from._sysalpha;
	};

	_pStyleLine._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			if (this.color) {
				this._syscolor = nexacro._getWebColorFromXreColor(this.color);
				this._sysalpha = nexacro._getXreColorAlpha(this.value);
			}
			else {
				this._syscolor = "";
				this._sysalpha = 255;
			}
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleLine._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleLine.set_width = function (v) {
		if (v != this.width) {
			this._is_empty = false;
			this.width = v;
			this._width = (parseInt(v) | 0);
			return this._updateValue();
		}
		return false;
	};
	_pStyleLine.set_style = function (v) {
		var val = "";
		switch (v) {
			case "solid":
			case "double":
			case "dotted":
			case "dashed":
				val = v;
				break;
		}
		if (val != this.style) {
			this._bindtype = 0;
			this._bindexpr = "";
			this.style = val;
			return this._updateValue();
		}
		return false;
	};
	_pStyleLine.set_color = function (v) {
		if (v != this.color) {
			this._bindtype = 0;
			this._bindexpr = "";
			this.color = (v && v != "transparent") ? v : "";
			return this._updateValue();
		}
		return false;
	};

	_pStyleLine._isValid = function () {
		return (!this._is_empty && this._width && this.style && this.color);
	};

	delete _pStyleLine;


	nexacro._createLineAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedLineObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_line());\n"
			 + "	newobj.set_width(v);\n"
			 + "    newobj = nexacro._registerCachedLineObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_style = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_line());\n"
			 + "	newobj.set_style(v);\n"
			 + "    newobj = nexacro._registerCachedLineObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_line());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedLineObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_border = function (tw, ts, tc, tc2, rw, rs, rc, rc2, bw, bs, bc, bc2, lw, ls, lc, lc2) {
		this.top = "";
		this.top_width = "";
		this.top_style = "";
		this.top_color = "";
		this.top_color2 = "";

		this.right = "";
		this.right_width = "";
		this.right_style = "";
		this.right_color = "";
		this.right_color2 = "";

		this.bottom = "";
		this.bottom_width = "";
		this.bottom_style = "";
		this.bottom_color = "";
		this.bottom_color2 = "";

		this.left = "";
		this.left_width = "";
		this.left_style = "";
		this.left_color = "";
		this.left_color2 = "";

		this.width = "";
		this.color = "";
		this.color2 = "";
		this.style = "";

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";
		this._linecnt = 1;

		this._left_width = 0;
		this._top_width = 0;
		this._right_width = 0;
		this._bottom_width = 0;

		this._left_syscolor = "";
		this._top_syscolor = "";
		this._right_syscolor = "";
		this._bottom_syscolor = "";

		this._systop = "";
		this._sysright = "";
		this._sysbottom = "";
		this._sysleft = "";

		this.top = this.left = this.right = this.bottom = "";

		if ((arguments.length == 1) && ((typeof (tw) == "string"))) {
			var val = tw.trim();
			if (val) {
				this._parseInfo(val);
				this._updateValue();
			}
		}
		else {
			var argcnt = (rw == null) ? 4 : ((bw == null) ? 8 : ((lw == null) ? 12 : 16));
			if (argcnt == 4 || argcnt == 8 || argcnt == 12 || argcnt == 16) {
				this._is_empty = false;
				switch (argcnt) {
					case 16:
						this.left = lw + " " + ls + " " + lc;
						this._left_width = (parseInt(lw) | 0);
						this.left_width = this._left_width ? (this._left_width + "px") : "";
						this.left_style = (ls && ls != "none") ? ls : "none";
						this.left_color = (lc && lc != "transparent") ? lc : "";
						this._left_syscolor = (this.left_color) ? nexacro._getWebColorFromXreColor(this.left_color) : "";
						this._sysleft = (this._left_width) ? (this._left_width + "px " + ((this._left_syscolor) ? (this.left_style + " " + this._left_syscolor) : "solid transparent")) : "";
					case 12:
						this.bottom = bw + " " + bs + " " + bc;
						this.bottom_width = bw;
						this._bottom_width = (parseInt(bw) | 0);
						this.bottom_style = (bs && bs != "none") ? bs : "none";
						this.bottom_color = (bc && bc != "transparent") ? bc : "";
						this._bottom_syscolor = (this.bottom_color) ? nexacro._getWebColorFromXreColor(this.bottom_color) : "";
						this._sysbottom = (this._bottom_width) ? (this._bottom_width + "px " + ((this._bottom_syscolor) ? (this.bottom_style + " " + this._bottom_syscolor) : "solid transparent")) : "";
					case 8:
						this.right = rw + " " + rs + " " + rc;
						this.right_width = rw;
						this._right_width = (parseInt(rw) | 0);
						this.right_style = (rs && rs != "none") ? rs : "none";
						this.right_color = (rc && rc != "transparent") ? rc : "";
						this._right_syscolor = (this.right_color) ? nexacro._getWebColorFromXreColor(this.right_color) : "";
						this._sysright = (this._right_width) ? (this._right_width + "px " + ((this._right_syscolor) ? (this.right_style + " " + this._right_syscolor) : "solid transparent")) : "";
					case 4:
						this.top = tw + " " + ts + " " + tc;
						this.width = this.top_width = tw;
						this._top_width = (parseInt(tw) | 0);
						this.style = this.top_style = (ts && ts != "none") ? ts : "none";
						this.color = this.top_color = (tc && tc != "transparent") ? tc : tc;
						this._top_syscolor = (this.top_color) ? nexacro._getWebColorFromXreColor(this.top_color) : "";
						this._systop = (this._top_width) ? (this._top_width + "px " + ((this._top_syscolor) ? (this.top_style + " " + this._top_syscolor) : "solid transparent")) : "";
				}
				this._linecnt = ((argcnt / 4) | 0);
				this._copytoSubObjects();
				this._updateValue();
			}
		}
	};

	var _pStyleBorder = nexacro._createPrototype(nexacro.Style_line, nexacro.Style_border);
	nexacro.Style_border.prototype = _pStyleBorder;
	_pStyleBorder._type_name = "Border";

	_pStyleBorder.valueOf = function () {
		return this._value;
	};
	_pStyleBorder.toString = function () {
		return this._value;
	};

	_pStyleBorder.clone = function () {
		var newobj = new nexacro.Style_border();
		newobj.style = this.style;
		newobj.width = this.width;
		newobj.color = this.color;
		newobj.color2 = this.color2;
		newobj.style = this.style;

		newobj.top = this.top;
		newobj.top_width = this.top_width;
		newobj.top_style = this.top_style;
		newobj.top_color = this.top_color;
		newobj.top_color2 = this.top_color2;

		newobj.right = this.right;
		newobj.right_width = this.right_width;
		newobj.right_style = this.right_style;
		newobj.right_color = this.right_color;
		newobj.right_color2 = this.right_color2;

		newobj.bottom = this.bottom;
		newobj.bottom_width = this.bottom_width;
		newobj.bottom_style = this.bottom_style;
		newobj.bottom_color = this.bottom_color;
		newobj.bottom_color2 = this.bottom_color2;

		newobj.left = this.left;
		newobj.left_width = this.left_width;
		newobj.left_style = this.left_style;
		newobj.left_color = this.left_color;
		newobj.left_color2 = this.left_color2;

		newobj._linecnt = this._linecnt;

		newobj._left_width = this._left_width;
		newobj._top_width = this._top_width;
		newobj._right_width = this._right_width;
		newobj._bottom_width = this._bottom_width;

		newobj._left_syscolor = this._left_syscolor;
		newobj._top_syscolor = this._top_syscolor;
		newobj._right_syscolor = this._right_syscolor;
		newobj._bottom_syscolor = this._bottom_syscolor;

		newobj._systop = this._systop;
		newobj._sysright = this._sysright;
		newobj._sysbottom = this._sysbottom;
		newobj._sysleft = this._sysleft;

		newobj._is_empty = this._is_empty;
		newobj._value = this._value;

		return newobj;
	};

	_pStyleBorder._emptySubObjects = function () {
		if (this._linecnt) {
			this.top_width = "";
			this.top_style = "";
			this.top_color = "";
			this._top_width = 0;
			this._top_syscolor = "";
			this._systop = "";
			this.top = "";

			this.right_width = "";
			this.right_style = "";
			this.right_color = "";
			this._right_width = 0;
			this._right_syscolor = "";
			this._sysright = "";
			this.right = "";

			this.bottom_width = "";
			this.bottom_style = "";
			this.bottom_color = "";
			this._bottom_width = 0;
			this._bottom_syscolor = "";
			this._sysbottom = "";
			this.bottom = "";

			this.left_width = "";
			this.left_style = "";
			this.left_color = "";
			this._left_width = 0;
			this._left_syscolor = "";
			this._sysleft = "";
			this.left = "";
		}
	};

	_pStyleBorder._is_real_empty = function () {
		if (this._top_width != 0 || this._left_width != 0 || this._bottom_width != 0 || this._right_width != 0) {
			return false;
		}
		return true;
	};

	_pStyleBorder._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._value = "";
			this._bindtype = 0;
			this._bindexpr = "";
			this._emptySubObjects();
			this._linecnt = 0;
			return true;
		}
		return false;
	};

	_pStyleBorder._copytoSubObjects = function () {
		switch (this._linecnt) {
			case 1:
				this._right_width = this._top_width;
				this.right_width = this.top_width;
				this.right_style = this.top_style;
				this.right_color = this.top_color;
				this.right = this.top;
			case 2:
				this._bottom_width = this._top_width;
				this.bottom_width = this.top_width;
				this.bottom_style = this.top_style;
				this.bottom_color = this.top_color;
				this.bottom = this.top;
			case 3:
				this._left_width = this._right_width;
				this.left_width = this.right_width;
				this.left_style = this.right_style;
				this.left_color = this.right_color;
				this.left = this.right;
		}
	};

	_pStyleBorder._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			if (val.charAt(4) == '(') {
				this._bindexpr = val.substr(5, val.length - 6);
			}
			else {
				this._bindexpr = val.substring(5);
			}
			this._emptySubObjects();
			this._linecnt = 0;
		}
		else {
			var linearr = val.split(',');
			this._linecnt = linearr.length;
			if (this._linecnt > 4) {
				this._linecnt = 4;
			}
			switch (this._linecnt) {
				case 4:
					this.left = linearr[3];
					var valarr = linearr[3].trim().split(/\s+/);
					if (valarr.length >= 3) {
						this._left_width = (parseInt(valarr[0]) | 0);
						this.left_width = this._left_width >= 0 ? (this._left_width + "px") : "";
						switch (valarr[1]) {
							case "solid":
							case "double":
							case "dotted":
							case "dashed":
							case "none":
								this.left_style = valarr[1];
								break;
							default:
								this.left_style = "solid";
								break;
						}
						this.left_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
					}
				case 3:
					this.bottom = linearr[2];
					var valarr = linearr[2].trim().split(/\s+/);
					if (valarr.length >= 3) {
						this._bottom_width = (parseInt(valarr[0]) | 0);
						this.bottom_width = this._bottom_width ? (this._bottom_width + "px") : "";
						switch (valarr[1]) {
							case "solid":
							case "double":
							case "dotted":
							case "dashed":
							case "none":
								this.bottom_style = valarr[1];
								break;
							default:
								this.bottom_style = "solid";
								break;
						}
						this.bottom_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
					}
				case 2:
					this.right = linearr[1];
					valarr = linearr[1].trim().split(/\s+/);
					if (valarr.length >= 3) {
						this._right_width = (parseInt(valarr[0]) | 0);
						this.right_width = this._right_width ? (this._right_width + "px") : "";
						switch (valarr[1]) {
							case "solid":
							case "double":
							case "dotted":
							case "dashed":
							case "none":
								this.right_style = valarr[1];
								break;
							default:
								this.right_style = "solid";
								break;
						}
						this.right_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
					}
				case 1:
					this.top = linearr[0];
					var valarr = linearr[0].trim().split(/\s+/);
					if (valarr.length < 3) {
						return;
					}
					this._top_width = (parseInt(valarr[0]) | 0);

					this.top_width = this._top_width >= 0 ? (this._top_width + "px") : "";
					this.top_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";

					switch (valarr[1]) {
						case "solid":
						case "double":
						case "dotted":
						case "dashed":
						case "none":
							this.top_style = valarr[1];
							break;
						default:
							this.top_style = "solid";
							break;
					}

					if (this._linecnt == 1) {
						this.width = this.top_width;
						this.style = this.top_style;
						this.color = this.top_color;
					}
			}
			this._copytoSubObjects();
		}
	};

	_pStyleBorder._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var str = "";
					str += this._top_width + "px " + (this.top_color ? ((this.top_style ? this.top_style : "") + ' ' + this.top_color) : this.top_style + " transparent");

					switch (this._linecnt) {
						case 1:
							break;
						case 2:
							str += ", " + this._right_width + "px " + (this.right_color ? ((this.right_style ? this.right_style : "") + ' ' + this.right_color) : this.right_style + " transparent");
							break;
						case 3:
							str += ", " + this._right_width + "px " + (this.right_color ? ((this.right_style ? this.right_style : "") + ' ' + this.right_color) : this.right_style + " transparent");
							str += ", " + this._bottom_width + "px " + (this.bottom_color ? ((this.bottom_style ? this.bottom_style : "") + ' ' + this.bottom_color) : this.bottom_style + " transparent");
							break;
						case 4:
							str += ", " + this._right_width + "px " + (this.right_color ? ((this.right_style ? this.right_style : "") + ' ' + this.right_color) : this.right_style + " transparent");
							str += ", " + this._bottom_width + "px " + (this.bottom_color ? ((this.bottom_style ? this.bottom_style : "") + ' ' + this.bottom_color) : this.bottom_style + " transparent");
							str += ", " + this._left_width + "px " + (this.left_color ? ((this.left_style ? this.left_style : "") + ' ' + this.left_color) : this.left_style + " transparent");
							break;
						default:
							if (this._bindtype == 0) {
								return "";
							}
					}
					return (str != "none" && str != "none, none" && str != "none, none, none" && str != "none, none, none, none") ? str : "";
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
	};

	_pStyleBorder._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			switch (this._linecnt) {
				case 1:
					this._top_syscolor = (this.top_color) ? nexacro._getWebColorFromXreColor(this.top_color) : "";
					this._systop = (this._top_width) ? (this._top_width + "px " + ((this._top_syscolor) ? (this.top_style + " " + this._top_syscolor) : this.top_style + " " + "transparent")) : "";
					this._right_syscolor = this._bottom_syscolor = this._left_syscolor = this._top_syscolor;
					this._right_width = this._bottom_width = this._left_width = this._top_width;
					this.right_style = this.bottom_style = this.left_style = this.top_style;
					this.right_color = this.bottom_color = this.left_color = this.top_color;
					this._sysright = this._sysbottom = this._sysleft = this._systop;

					this.top = this.top_width + " " + this.top_style + " " + this.top_color;
					this.right = this.bottom = this.left = this.top;
					break;
				case 2:
					this._top_syscolor = (this.top_color) ? nexacro._getWebColorFromXreColor(this.top_color) : "";
					this._systop = (this._top_width) ? (this._top_width + "px " + ((this._top_syscolor) ? (this.top_style + " " + this._top_syscolor) : this.top_style + " " + "transparent")) : "";
					this._right_syscolor = (this.right_color) ? nexacro._getWebColorFromXreColor(this.right_color) : "";
					this._sysright = (this._right_width) ? (this._right_width + "px " + ((this._right_syscolor) ? (this.right_style + " " + this._right_syscolor) : this.right_style + " " + "transparent")) : "";
					this._bottom_syscolor = this._top_syscolor;
					this._left_syscolor = this._right_syscolor;
					this._sysbottom = this._systop;
					this._sysleft = this._sysright;
					this._left_width = this._right_width;
					this._bottom_width = this._top_width;

					this.top = this.top_width + " " + this.top_style + " " + this.top_color;
					this.right = this.right_width + " " + this.right_style + " " + this.right_color;
					this.bottom = this.top;
					this.left = this.right;
					break;
				case 3:
					this._top_syscolor = (this.top_color) ? nexacro._getWebColorFromXreColor(this.top_color) : "";
					this._systop = (this._top_width) ? (this._top_width + "px " + ((this._top_syscolor) ? (this.top_style + " " + this._top_syscolor) : this.top_style + " " + "transparent")) : "";
					this._right_syscolor = (this.right_color) ? nexacro._getWebColorFromXreColor(this.right_color) : "";
					this._sysright = (this._right_width) ? (this._right_width + "px " + ((this._right_syscolor) ? (this.right_style + " " + this._right_syscolor) : this.right_style + " " + "transparent")) : "";
					this._bottom_syscolor = (this.bottom_color) ? nexacro._getWebColorFromXreColor(this.bottom_color) : "";
					this._sysbottom = (this._bottom_width) ? (this._bottom_width + "px " + ((this._bottom_syscolor) ? (this.bottom_style + " " + this._bottom_syscolor) : this.bottom_style + " " + "transparent")) : "";
					this._left_syscolor = this._right_syscolor;
					this._left_width = this._right_width;
					this._sysleft = this._sysright;

					this.top = this.top_width + " " + this.top_style + " " + this.top_color;
					this.right = this.right_width + " " + this.right_style + " " + this.right_color;
					this.bottom = this.bottom_width + " " + this.bottom_style + " " + this.bottom_color;
					this.left = this.right;
					break;
				case 4:
					this._top_syscolor = (this.top_color) ? nexacro._getWebColorFromXreColor(this.top_color) : "";
					this._systop = (this._top_width) ? (this._top_width + "px " + ((this._top_syscolor) ? (this.top_style + " " + this._top_syscolor) : this.top_style + " " + "transparent")) : "";
					this._right_syscolor = (this.right_color) ? nexacro._getWebColorFromXreColor(this.right_color) : "";
					this._sysright = (this._right_width) ? (this._right_width + "px " + ((this._right_syscolor) ? (this.right_style + " " + this._right_syscolor) : this.right_style + " " + "transparent")) : "";
					this._bottom_syscolor = (this.bottom_color) ? nexacro._getWebColorFromXreColor(this.bottom_color) : "";
					this._sysbottom = (this._bottom_width) ? (this._bottom_width + "px " + ((this._bottom_syscolor) ? (this.bottom_style + " " + this._bottom_syscolor) : this.bottom_style + " " + "transparent")) : "";
					this._left_syscolor = (this.left_color) ? nexacro._getWebColorFromXreColor(this.left_color) : "";
					this._sysleft = (this._left_width) ? (this._left_width + "px " + ((this._left_syscolor) ? (this.left_style + " " + this._left_syscolor) : this.left_style + " " + "transparent")) : "";

					this.top = this.top_width + " " + this.top_style + " " + this.top_color;
					this.right = this.right_width + " " + this.right_style + " " + this.right_color;
					this.bottom = this.bottom_width + " " + this.bottom_style + " " + this.bottom_color;
					this.left = this.left_width + " " + this.left_style + " " + this.left_color;
					break;
			}
			this._updateSubProp();
			return true;
		}
		return false;
	};

	_pStyleBorder._updateSubProp = function () {
		if (this.top) {
			this.top = this._top_width + "px " + (this.top_color ? ((this.top_style ? this.top_style : "") + ' ' + this.top_color) : this.top_style + " transparent");
		}
		if (this.right) {
			this.right = this._right_width + "px " + (this.right_color ? ((this.right_style ? this.right_style : "") + ' ' + this.right_color) : this.right_style + " transparent");
		}
		if (this.bottom) {
			this.bottom = this._bottom_width + "px " + (this.bottom_color ? ((this.bottom_style ? this.bottom_style : "") + ' ' + this.bottom_color) : this.bottom_style + " transparent");
		}
		if (this.left) {
			this.left = this._left_width + "px " + (this.left_color ? ((this.left_style ? this.left_style : "") + ' ' + this.left_color) : this.left_style + " transparent");
		}
	};

	_pStyleBorder._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleBorder._isValid = function () {
		return (!this._is_empty);
	};

	_pStyleBorder._getBorderLeftWidth = function () {
		if (this._is_empty) {
			return 0;
		}

		return (this.left_style && this.left_style != "none") ? this._left_width : 0;
	};

	_pStyleBorder._getBorderTopWidth = function () {
		if (this._is_empty) {
			return 0;
		}

		return (this.top_style && this.top_style != "none") ? this._top_width : 0;
	};

	_pStyleBorder._getBorderRightWidth = function () {
		if (this._is_empty) {
			return 0;
		}

		return (this.right_style && this.right_style != "none") ? this._right_width : 0;
	};

	_pStyleBorder._getBorderBottomWidth = function () {
		if (this._is_empty) {
			return 0;
		}

		return (this.bottom_style && this.bottom_style != "none") ? this._bottom_width : 0;
	};

	_pStyleBorder._getBorderWidth = function () {
		if (this._is_empty) {
			return 0;
		}
		if (this._linecnt > 1) {
			var left_width = (this.left_style && this.left_style != "none") ? this._left_width : 0;
			var right_width = (this.right_style && this.right_style != "none") ? this._right_width : 0;
		}
		else {
			var left_width = (this.top_style && this.top_style != "none") ? this._left_width : 0;
			var right_width = left_width;
		}
		return left_width + right_width;
	};

	_pStyleBorder._getBorderHeight = function () {
		if (this._is_empty) {
			return 0;
		}

		if (this._linecnt > 1) {
			var top_width = (this.top_style && this.top_style != "none") ? this._top_width : 0;
			var bottom_width = (this.bottom_style && this.bottom_style != "none") ? this._bottom_width : 0;
		}
		else {
			var top_width = (this.top_style && this.top_style != "none") ? this._top_width : 0;
			var bottom_width = top_width;
		}
		return top_width + bottom_width;
	};

	_pStyleBorder.set_width = function (v) {
		if (!this.width || v !== this.width) {
			this._is_empty = false;
			this._bindtype = 0;
			var _v = (parseInt(v) | 0);
			if (this._linecnt > 1) {
				this.top_width = v;
				this._top_width = _v;
				this.right_width = v;
				this._right_width = _v;
				this.bottom_width = v;
				this._bottom_width = _v;
				this.left_width = v;
				this._left_width = _v;
			}
			else {
				this.top_width = v;
				this._top_width = _v;
			}
			this.width = v;
			this._width = _v;

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_style = function (v) {
		if (v != this.style) {
			this._is_empty = false;
			this._bindtype = 0;
			switch (v) {
				case "none":
				case "solid":
				case "double":
				case "dotted":
				case "dashed":
					break;
				default:
					v = "solid";
					break;
			}
			this.style = v;

			if (this._linecnt > 1) {
				this.top_style = this.right_style = this.bottom_style = this.left_style = v;
			}
			else {
				this.top_style = v;
			}
			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder.set_color = function (v) {
		if (v != this.color) {
			v = (v && v != "transparent") ? v : "";
			this._is_empty = false;
			this._bindtype = 0;
			this.color = v;

			if (this._linecnt > 1) {
				this.top_color = this.right_color = this.bottom_color = this.left_color = v;
			}
			else {
				this.top_color = v;
			}
			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder.set_color2 = function (v) {
		if (v != this.color2) {
			v = (v && v != "transparent") ? v : "";
			this._is_empty = false;
			this._bindtype = 0;
			this.color2 = v;

			if (this._linecnt > 1) {
				this.top_color2 = this.right_color2 = this.bottom_color2 = this.left_color2 = v;
			}
			else {
				this.top_color2 = v;
			}
			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder.set_top = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._linecnt = 4;
		}
		if (v != this._systop) {
			var valarr = v.trim().split(/\s+/);
			if (valarr.length >= 3) {
				this.top_width = valarr[0];
				this._top_width = parseInt(valarr[0]);
				switch (valarr[1]) {
					case "none":
					case "solid":
					case "double":
					case "dotted":
					case "dashed":
						this.top_style = valarr[1];
						break;
					default:
						this.top_style = "solid";
						break;
				}
				this.top_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
				this.top_color2 = (valarr[3] && valarr[3] != "transparent") ? valarr[3] : "";
				this.top = v;
			}
			else {
				this.top_width = "";
				this._top_width = 0;
				this.top_style = "";
				this.top_color = "";
				this.top_color2 = "";
				this.top = "";
			}

			if (this._linecnt < 1) {
				this._linecnt = 1;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_top_width = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.top_width) {
			this.top_width = v;
			this._top_width = (parseInt(v) | 0);

			if (this._linecnt < 1) {
				this._linecnt = 1;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_top_style = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.top_style) {
			switch (v) {
				case "none":
				case "solid":
				case "double":
				case "dotted":
				case "dashed":
					this.top_style = v;
					break;
				default:
					this.top_style = "solid";
					break;
			}

			if (this._linecnt < 1) {
				this._linecnt = 1;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_top_color = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.top_color) {
			this.top_color = (v && v != "transparent") ? v : "";

			if (this._linecnt < 1) {
				this._linecnt = 1;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_top_color2 = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.top_color2) {
			this.top_color2 = (v && v != "transparent") ? v : "";

			if (this._linecnt < 1) {
				this._linecnt = 1;
			}

			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder.set_right = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._linecnt = 4;
		}
		if (v != this._sysright) {
			var valarr = v.trim().split(/\s+/);
			if (valarr.length >= 3) {
				this.right_width = valarr[0];
				this._right_width = parseInt(valarr[0]);
				switch (valarr[1]) {
					case "none":
					case "solid":
					case "double":
					case "dotted":
					case "dashed":
						this.right_style = valarr[1];
						break;
					default:
						this.right_style = "solid";
						break;
				}
				this.right_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
				this.right_color2 = (valarr[3] && valarr[3] != "transparent") ? valarr[3] : "";
				this.right = v;
			}
			else {
				this.right_width = "";
				this._right_width = 0;
				this.right_style = "";
				this.right_color = "";
				this.right_color2 = "";
				this.right = "";
			}

			if (this._linecnt < 2) {
				this._linecnt = 2;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_right_width = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.right_width) {
			this.right_width = v;
			this._right_width = (parseInt(v) | 0);
			return this._updateValue();
		}

		if (this._linecnt < 2) {
			this._linecnt = 2;
		}

		return false;
	};
	_pStyleBorder.set_right_style = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.right_style) {
			switch (v) {
				case "none":
				case "solid":
				case "double":
				case "dotted":
				case "dashed":
					this.right_style = v;
					break;
				default:
					this.right_style = "solid";
					break;
			}

			if (this._linecnt < 2) {
				this._linecnt = 2;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_right_color = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.right_color) {
			this.right_color = (v && v != "transparent") ? v : "";

			if (this._linecnt < 2) {
				this._linecnt = 2;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_right_color2 = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.right_color2) {
			if (this._linecnt > 1) {
				this._emptySubObjects();
			}

			if (this._linecnt < 2) {
				this._linecnt = 2;
			}

			this.right_color2 = (v && v != "transparent") ? v : "";
			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder.set_bottom = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._linecnt = 4;
		}
		if (v != this._sysbottom) {
			var valarr = v.trim().split(/\s+/);
			if (valarr.length >= 3) {
				this.bottom_width = valarr[0];
				this._bottom_width = (parseInt(valarr[0]) | 0);
				switch (valarr[1]) {
					case "none":
					case "solid":
					case "double":
					case "dotted":
					case "dashed":
						this.bottom_style = valarr[1];
						break;
					default:
						this.bottom_style = "solid";
						break;
				}
				this.bottom_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
				this.bottom_color2 = (valarr[3] && valarr[3] != "transparent") ? valarr[3] : "";
				this.bottom = v;
			}
			else {
				this.bottom_width = "";
				this._bottom_width = 0;
				this.bottom_style = "";
				this.bottom_color = "";
				this.bottom_color2 = "";
				this.bottom = "";
			}

			if (this._linecnt < 3) {
				this._linecnt = 3;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_bottom_width = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.bottom_width) {
			this.bottom_width = v;
			this._bottom_width = (parseInt(v) | 0);

			if (this._linecnt < 3) {
				this._linecnt = 3;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_bottom_style = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.right_style) {
			switch (v) {
				case "none":
				case "solid":
				case "double":
				case "dotted":
				case "dashed":
					this.bottom_style = v;
					break;
				default:
					this.bottom_style = "solid";
					break;
			}

			if (this._linecnt < 3) {
				this._linecnt = 3;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_bottom_color = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.bottom_color) {
			this.bottom_color = (v && v != "transparent") ? v : "";

			if (this._linecnt < 3) {
				this._linecnt = 3;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_bottom_color2 = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.right_color2) {
			this.bottom_color2 = (v && v != "transparent") ? v : "";

			if (this._linecnt < 3) {
				this._linecnt = 3;
			}

			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder.set_left = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._linecnt = 4;
		}
		if (v != this._sysleft) {
			var valarr = v.trim().split(/\s+/);
			if (valarr.length >= 3) {
				this.left_width = valarr[0];
				this._left_width = (parseInt(valarr[0]) | 0);
				switch (valarr[1]) {
					case "none":
					case "solid":
					case "double":
					case "dotted":
					case "dashed":
						this.left_style = valarr[1];
						break;
					default:
						this.left_style = "solid";
						break;
				}
				this.left_color = (valarr[2] && valarr[2] != "transparent") ? valarr[2] : "";
				this.left_color2 = (valarr[3] && valarr[3] != "transparent") ? valarr[3] : "";
				this.left = v;
			}
			else {
				this.left_width = "";
				this._left_width = 0;
				this.left_style = "";
				this.left_color = "";
				this.left_color2 = "";
				this.left = "";
			}

			if (this._linecnt < 4) {
				this._linecnt = 4;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_left_width = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.left_width) {
			this.left_width = v;
			this._left_width = (parseInt(v) | 0);

			if (this._linecnt < 4) {
				this._linecnt = 4;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_left_style = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.left_style) {
			switch (v) {
				case "none":
				case "solid":
				case "double":
				case "dotted":
				case "dashed":
					this.left_style = v;
					break;
				default:
					this.left_style = "solid";
					break;
			}

			if (this._linecnt < 4) {
				this._linecnt = 4;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_left_color = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.left_color) {
			this.left_color = (v && v != "transparent") ? v : "";

			if (this._linecnt < 4) {
				this._linecnt = 4;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleBorder.set_left_color2 = function (v) {
		this._is_empty = false;
		this._bindtype = 0;
		if (this._linecnt <= 1) {
			this._copytoSubObjects();
		}
		if (v != this.left_color2) {
			this.left_color2 = (v && v != "transparent") ? v : "";

			if (this._linecnt < 4) {
				this._linecnt = 4;
			}

			return this._updateValue();
		}
		return false;
	};

	_pStyleBorder._createRtlValue = function () {
		if (!this._rtlvalue) {
			if (this._sysleft != this._sysright) {
				var arrValue = this._value.split(",");
				var strValue;
				if (arrValue.length == 4) {
					strValue = arrValue[0] + ", " + arrValue[3] + ", " + arrValue[2] + ", " + arrValue[1];
					this._rtlvalue = strValue;
				}
			}
		}
	};

	_pStyleBorder._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedBorderObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	delete _pStyleBorder;

	nexacro._createBorderAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedBorderObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_width(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_style = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_style(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target  && this._target._control_element) \n"
			 + "            this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color2 = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_color2(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_top = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_top(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_top_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_top_width(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target  && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_top_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_top_color(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_top_color2 = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_top_color2(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			
			 + "$PTYPE$.set_$ATTR$_right = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_right(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_right_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_right_width(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_right_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_right_color(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_right_color2 = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_right_color2(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_bottom = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_bottom(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_bottom_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_bottom_width(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_bottom_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_bottom_color(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_bottom_color2 = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_bottom_color2(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_left = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_left(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_left_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_left_width(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_left_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_left_color(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_left_color2 = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_border());\n"
			 + "	newobj.set_left_color2(v);\n"
			 + "    newobj = nexacro._registerCachedBorderObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_bordertype = function (type, radiusx, radiusy, lefttop, righttop, leftbottom, rightbottom) {
		this.type = "";
		this.radiusx = "";
		this.radiusy = "";
		this.lefttop = undefined;
		this._lefttop = false;
		this.righttop = undefined;
		this._righttop = false;
		this.leftbottom = undefined;
		this._leftbottom = false;
		this.rightbottom = undefined;
		this._rightbottom = false;

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";
		this._sysvalue = "";
		this._radiusx = 0;
		this._radiusy = 0;

		if (radiusx != null) {
			this._is_empty = false;
			this._bindtype = 0;
			this.type = type;

			if (radiusx != undefined && radiusy != undefined) {
				this.radiusx = radiusx;
				this.radiusy = radiusy;
				this._radiusx = (parseInt(radiusx) | 0);
				this._radiusy = (parseInt(radiusy) | 0);
			}

			this.lefttop = this._lefttop = nexacro._toBoolean(lefttop);
			this.righttop = this._righttop = nexacro._toBoolean(righttop);
			this.leftbottom = this._leftbottom = nexacro._toBoolean(leftbottom);
			this.rightbottom = this._rightbottom = nexacro._toBoolean(rightbottom);

			var strobj = this._getValueStr();
			this._is_empty = (strobj.value == "");
			this._value = strobj.value;
			this._sysvalue = strobj.sysvalue;
		}
		else if (type && (typeof (type) == "string")) {
			var val = type.trim();
			if (val) {
				this._parseInfo(val);
				this._updateValue();
			}
		}
	};
	var _pStyleBordertype = nexacro._createPrototype(nexacro.Object, nexacro.Style_bordertype);
	nexacro.Style_bordertype.prototype = _pStyleBordertype;
	_pStyleBordertype._type_name = "Bordertype";


	_pStyleBordertype.valueOf = function () {
		return this._value;
	};
	_pStyleBordertype.toString = function () {
		return this._value;
	};

	_pStyleBordertype.clone = function () {
		var newobj = new nexacro.Style_bordertype();
		newobj.type = this.type;
		newobj.radiusx = this.radiusx;
		newobj.radiusy = this.radiusy;
		newobj.lefttop = this.lefttop;
		newobj._lefttop = this._lefttop;
		newobj.righttop = this.righttop;
		newobj._righttop = this._righttop;
		newobj.leftbottom = this.leftbottom;
		newobj._leftbottom = this._leftbottom;
		newobj.rightbottom = this.rightbottom;
		newobj._rightbottom = this._rightbottom;

		newobj._radiusx = this._radiusx;
		newobj._radiusy = this._radiusy;

		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		newobj._sysvalue = this._sysvalue;
		return newobj;
	};

	_pStyleBordertype._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.type = "";
			this.radiusx = "";
			this.radiusy = "";
			this._radiusx = 0;
			this._radiusy = 0;
			this.lefttop = undefined;
			this.righttop = undefined;
			this.leftbottom = undefined;
			this.rightbottom = undefined;
			this._lefttop = false;
			this._righttop = false;
			this._leftbottom = false;
			this._rightbottom = false;
			this._value = "";
			this._sysvalue = "";
			return true;
		}
		return false;
	};

	_pStyleBordertype._isRound = function () {
		return (this.type == "round" && this._radiusx > 0 && this._radiusy > 0);
	};

	_pStyleBordertype._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var val = this.type;
					var sysval;
					if (val == "round") {
						if (this._radiusx >= 0 && this._radiusy >= 0) {
							val += " " + this.radiusx + " " + this.radiusy;
							sysval = val;
							if (this.lefttop) {
								val += " lefttop";
								sysval += " true";
							}
							else if (this.lefttop == false) {
								sysval += " false";
							}
							else {
								sysval += " undefined";
							}

							if (this.righttop) {
								val += " righttop";
								sysval += " true";
							}
							else if (this.righttop == false) {
								sysval += " false";
							}
							else {
								sysval += " undefined";
							}

							if (this.leftbottom) {
								val += " leftbottom";
								sysval += " true";
							}
							else if (this.leftbottom == false) {
								sysval += " false";
							}
							else {
								sysval += " undefined";
							}

							if (this.rightbottom) {
								val += " rightbottom";
								sysval += " true";
							}
							else if (this.rightbottom == false) {
								sysval += " false";
							}
							else {
								sysval += " undefined";
							}
						}
						else {
							val = "normal " + this.radiusx + " " + this.radiusy;
							sysval = val;
						}
					}
					else {
						val = "normal " + this.radiusx + " " + this.radiusy;
						sysval = val;
						if (this.lefttop) {
							val += " lefttop";
							sysval += " true";
						}
						else if (this.lefttop == false) {
							sysval += " false";
						}
						else {
							sysval += " undefined";
						}

						if (this.righttop) {
							val += " righttop";
							sysval += " true";
						}
						else if (this.righttop == false) {
							sysval += " false";
						}
						else {
							sysval += " undefined";
						}

						if (this.leftbottom) {
							val += " leftbottom";
							sysval += " true";
						}
						else if (this.leftbottom == false) {
							sysval += " false";
						}
						else {
							sysval += " undefined";
						}

						if (this.rightbottom) {
							val += " rightbottom";
							sysval += " true";
						}
						else if (this.rightbottom == false) {
							sysval += " false";
						}
						else {
							sysval += " undefined";
						}
					}
					return {
						value : val, 
						sysvalue : sysval
					};
				}
			case 1:
				var val = "bind:" + this._bindexpr;
				return {
					value : val, 
					sysvalue : val
				};
			case 2:
				var val = "expr:" + this._bindexpr;
				return {
					value : val, 
					sysvalue : val
				};
		}
		return "";
	};

	_pStyleBordertype._updateValue = function () {
		var strobj = this._getValueStr();
		if (strobj.sysvalue != this._sysvalue) {
			this._resetValue();
			this._is_empty = (strobj.value == "");
			this._sysvalue = strobj.sysvalue;
			this._value = strobj.value;
			return true;
		}
		return false;
	};

	_pStyleBordertype._resetValue = function () {
		var lt = this.lefttop, rt = this.righttop, lb = this.leftbottom, rb = this.rightbottom;

		if (lt == undefined && rt == undefined && lb == undefined && rb == undefined) {
			this._lefttop = true;
			this._righttop = true;
			this._leftbottom = true;
			this._rightbottom = true;
		}
		else {
			if (lt == undefined) {
				this._lefttop = false;
			}
			if (rt == undefined) {
				this._righttop = false;
			}
			if (lb == undefined) {
				this._leftbottom = false;
			}
			if (rb == undefined) {
				this._rightbottom = false;
			}
		}
	};

	_pStyleBordertype._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var parts = val.split(/\s+/);
			var part;
			this.type = parts[0];
			if (parts[1] != undefined && parts[2] != undefined) {
				this.radiusx = parts[1];
				this.radiusy = parts[2];
				this._radiusx = (parseInt(parts[1]) | 0);
				this._radiusy = (parseInt(parts[2]) | 0);
			}
			if (parts.length > 3) {
				this._lefttop = false;
				this._righttop = false;
				this._leftbottom = false;
				this._rightbottom = false;
				for (var i = 3, n = parts.length; i < n; i++) {
					part = parts[i];
					switch (part) {
						case "lefttop":
							this.lefttop = true;
							this._lefttop = true;
							break;
						case "righttop":
							this.righttop = true;
							this._righttop = true;
							break;
						case "leftbottom":
							this.leftbottom = true;
							this._leftbottom = true;
							break;
						case "rightbottom":
							this.rightbottom = true;
							this._rightbottom = true;
							break;
					}
				}
			}
			else {
				this._lefttop = true;
				this._righttop = true;
				this._leftbottom = true;
				this._rightbottom = true;
			}
		}
	};

	_pStyleBordertype._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._sysvalue) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleBordertype.set_type = function (v) {
		if (v != this.type) {
			this._is_empty = false;
			this._bindtype = 0;
			this.type = v;
			return this._updateValue(true);
		}
		return false;
	};
	_pStyleBordertype.set_radiusx = function (v) {
		if (v != this.radiusx) {
			this._is_empty = false;
			this._bindtype = 0;
			this.radiusx = v;
			this._radiusx = (parseInt(v) | 0);
			return this._updateValue(true);
		}
		return false;
	};
	_pStyleBordertype.set_radiusy = function (v) {
		if (v != this.radiusy) {
			this._is_empty = false;
			this._bindtype = 0;
			this.radiusy = v;
			this._radiusy = (parseInt(v) | 0);
			return this._updateValue(true);
		}
		return false;
	};
	_pStyleBordertype.set_lefttop = function (v) {
		if (typeof v == "string") {
			v = (v == "true");
		}
		if (v != this.lefttop) {
			this._is_empty = false;
			this._bindtype = 0;
			this._lefttop = this.lefttop = (v ? true : false);
			return this._updateValue(true);
		}
		return false;
	};
	_pStyleBordertype.set_leftbottom = function (v) {
		if (typeof v == "string") {
			v = (v == "true");
		}
		if (v != this.leftbottom) {
			this._is_empty = false;
			this._bindtype = 0;
			this._leftbottom = this.leftbottom = (v ? true : false);
			return this._updateValue(true);
		}
		return false;
	};
	_pStyleBordertype.set_righttop = function (v) {
		if (typeof v == "string") {
			v = (v == "true");
		}
		if (v != this.righttop) {
			this._is_empty = false;
			this._bindtype = 0;
			this._righttop = this.righttop = (v ? true : false);
			return this._updateValue(true);
		}
		return false;
	};
	_pStyleBordertype.set_rightbottom = function (v) {
		if (typeof v == "string") {
			v = (v == "true");
		}
		if (v != this.rightbottom) {
			this._is_empty = false;
			this._bindtype = 0;
			this._rightbottom = this.rightbottom = (v ? true : false);
			return this._updateValue(true);
		}
		return false;
	};

	_pStyleBordertype._createRtlValue = function () {
		if (!this._rtlvalue) {
			if (this.lefttop != this.righttop || this.leftbottom != this.rightbottom) {
				var strValue;
				strValue = this.type + " " + this.radiusx + " " + this.radiusy;

				if (this.lefttop) {
					strValue = strValue + " righttop";
				}
				if (this.righttop) {
					strValue = strValue + " lefttop";
				}
				if (this.leftbottom) {
					strValue = strValue + " rightbottom";
				}
				if (this.rightbottom) {
					strValue = strValue + " leftbottom";
				}

				this._rtlvalue = strValue;
			}
		}
	};

	_pStyleBordertype._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedBordertypeObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	nexacro._createBordertypeAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedBordertypeObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_type = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_type(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_radiusx = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_radiusx(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_radiusy = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_radiusy(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_lefttop = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_lefttop(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_leftbottom = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_leftbottom(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_righttop = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_righttop(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_rightbottom = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_bordertype());\n"
			 + "	newobj.set_rightbottom(v);\n"
			 + "    newobj = nexacro._registerCachedBordertypeObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/gi, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_pointColor = function (v1, v2) {
		this.point = "";
		this.color = "";

		this._is_empty = true;
		this._target = null;
		this._itemidx = 0;
		this._value = "";
		this._x = 0;
		this._y = 0;
		this._syscolor = "";
		this._sysalpha = 255;

		if (v2 != null) {
			this._is_empty = false;
			this.point = v1;
			if (v2 == "transparent") {
				this.color = "";
			}
			else {
				this.color = v2;
			}
		}
		else if (v1 && (typeof (v1) == "string")) {
			var val = v.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				if (this.color) {
					this._syscolor = nexacro._getWebColorFromXreColor(this.color);
					this._sysalpha = nexacro._getXreColorAlpha(this.color);
				}
				else {
					this._syscolor = "";
					this._sysalpha = 255;
				}
				this._value = str;
			}
		}
	};
	var _pStylePointColor = nexacro._createPrototype(nexacro.Object, nexacro.Style_pointColor);
	nexacro.Style_pointColor.prototype = _pStylePointColor;
	_pStylePointColor._type_name = "PointColor";

	_pStylePointColor.valueOf = function () {
		return this._value;
	};

	_pStylePointColor.toString = function () {
		return this._value;
	};

	_pStylePointColor._empty = function () {
		if (!this._is_empty) {
			this._value = "";
			this.point = "";
			this.color = "";
			this._syscolor = "";
			this._sysalpha = 255;
			this._x = 0;
			this._y = 0;
			this._is_empty = true;
			return true;
		}
		return false;
	};

	_pStylePointColor._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var val = "";
					if (!this._is_empty) {
						val = this.point + " " + this.color;
					}
					return val;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStylePointColor._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			if (this.color) {
				this._syscolor = nexacro._getWebColorFromXreColor(this.color);
				this._sysalpha = nexacro._getXreColorAlpha(this.color);
			}
			return true;
		}
		return false;
	};

	_pStylePointColor._parseInfo = function (val) {
		this._is_empty = false;
		var parts = val.split(/\s+/);
		this.point = parts[0];
		var ptarr = this.point.split(',');
		this._x = (parseInt(ptarr[0]) | 0);
		this._y = (parseInt(ptarr[1]) | 0);
		this.color = parts[1];
	};

	_pStylePointColor._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStylePointColor.update = function (_apply_) {
		if (this._updateValue() && _apply_) {
			if (this._target) {
				this._target.on_update_style_pointcolor();
			}
		}
	};

	_pStylePointColor.set_point = function (v) {
		if (v != this.point) {
			this._is_empty = false;
			this.point = v;
			var ptarr = this.point.split(',');
			this._x = (parseInt(ptarr[0]) | 0);
			this._y = (parseInt(ptarr[1]) | 0);
			this.update(true);
		}
	};
	_pStylePointColor.set_color = function (v) {
		if (v != this.color) {
			this._is_empty = false;
			this.color = v;
			this.update(true);
		}
	};


	nexacro.Style_gradation = function (style, sX, sY, sColor, eX, eY, eColor, peglist) {
		this.style = "";
		this.peglist = "";
		this.start = null;
		this.end = null;

		this.start_point = "";
		this.start_color = "";

		this.end_point = "";
		this.end_color = "";

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		this._sysvalue = "";
		this._sysvalue2 = "";

		this._start_x = 0;
		this._start_y = 0;
		this._start_syscolor = "";
		this._start_vmlcolor = "";

		this._end_x = 100;
		this._end_y = 100;
		this._end_syscolor = "";
		this._end_vmlcolor = "";

		if (sX != null) {
			this._is_empty = false;
			this._bindtype = 0;
			this.style = style;
			this._start_x = sX;
			this._start_y = sY;
			this.start_point = sX + "," + sY;
			this.start_color = sColor;
			this._end_x = eX;
			this._end_y = eY;
			this.end_point = sX + "," + sY;
			this.end_color = eColor;
			this.peglist = peglist;
			nexacro._makeGradationSysValue(this);
		}
		else if (style && (typeof style) == "string") {
			var val = style.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = val;
				nexacro._makeGradationSysValue(this);
			}
		}
	};
	var _pStyleGradation = nexacro._createPrototype(nexacro.Object, nexacro.Style_gradation);
	nexacro.Style_gradation.prototype = _pStyleGradation;
	_pStyleGradation._type_name = "Gradation";

	_pStyleGradation.valueOf = function () {
		return this._value;
	};
	_pStyleGradation.toString = function () {
		return this._value;
	};

	_pStyleGradation.clone = function () {
		var newobj = new nexacro.Style_gradation();

		newobj.style = this.style;
		newobj.peglist = this.peglist;
		newobj.start = this.start;
		newobj.end = this.end;

		newobj.start_point = this.start_point;
		newobj.start_color = this.start_color;

		newobj.end_point = this.end_point;
		newobj.end_color = this.end_color;

		newobj._sysvalue = this._sysvalue;
		newobj._sysvalue2 = this._sysvalue2;

		newobj._start_x = this._start_x;
		newobj._start_y = this._start_y;
		newobj._start_syscolor = this._start_syscolor;
		newobj._start_vmlcolor = this._start_vmlcolor;

		newobj._end_x = this._end_x;
		newobj._end_y = this._end_y;
		newobj._end_syscolor = this._end_syscolor;
		newobj._end_vmlcolor = this._end_vmlcolor;

		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleGradation._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.style = "";
			this.peglist = "";
			this.start_point = "";
			this.start_color = "";
			this._start_x = 0;
			this._start_y = 0;
			this.end_point = "";
			this.end_color = "";
			this._end_x = 100;
			this._end_y = 100;
			this._sysvalue = "";
			this._sysvalue2 = "";
			return true;
		}
		return false;
	};

	_pStyleGradation._parsePegList = function (peglist) {
		var arr = [];
		var str = peglist;
		var spos, len, valarr, peg;
		spos = 0;
		spos = str.indexOf("[", spos);
		while (spos >= 0) {
			spos += 1;
			len = str.indexOf("]", spos);
			if (len < 0) {
				break;
			}
			peg = str.substring(spos, len);
			spos = len + 1;
			valarr = peg.trim().split(/\s+/);
			if (valarr.length >= 2) {
				pos = (parseInt(valarr[0]) | 0);
				if (pos > 0 && pos < 100) {
					arr.push([pos, valarr[valarr.length - 1]]);
				}
			}
			spos = str.indexOf("[", spos);
		}
		return arr;
	};

	_pStyleGradation._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var val = this.style + " " + this.start_point + " " + this.start_color + " " + this.end_point + " " + this.end_color;
					val += " " + this.peglist;
					return val;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleGradation._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			nexacro._makeGradationSysValue(this);
			return true;
		}
		return false;
	};

	_pStyleGradation._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}

			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
		}
		else {
			if (val.indexOf("linear-gradient") >= 0) {
				this.style = "linear";

				var idx = val.indexOf("(");
				var all_prop = val.substring(idx + 1, val.length - 1);
				var split_prop = all_prop.split(",");
				var prop_len = split_prop.length;

				var first_prop = split_prop[1].trim().split(" ");
				var first_pos = first_prop[1] && parseInt(first_prop[1]) > 0 ? parseInt(first_prop[1]) : 0;
				var last_prop = split_prop[prop_len - 1].trim().split(" ");
				var last_pos = last_prop[1] && parseInt(last_prop[1]) < 100 ? parseInt(last_prop[1]) : 100;

				if (prop_len == 2) {
					this._start_x = this._start_y = first_pos;
					this._end_x = this._end_y = last_pos;

					this.start_point = this._start_x + "," + this._start_y;
					this.start_color = first_prop[0];

					this.end_point = this._end_x + "," + this._end_y;
					this.end_color = last_prop[0];
				}
				else if (prop_len >= 3) {
					var str = split_prop[0].trim();

					if ((/left|top|right|bottom/).test(str)) {
						if (str.indexOf("top") >= 0) {
							if (str.indexOf("right") >= 0) {
								this._setPosition("top right", first_pos, last_pos);
							}
							else if (str.indexOf("left") >= 0) {
								this._setPosition("top left", first_pos, last_pos);
							}
							else {
								this._setPosition("top", first_pos, last_pos);
							}
						}
						else if (str.indexOf("bottom") >= 0) {
							if (str.indexOf("right") >= 0) {
								this._setPosition("bottom right", first_pos, last_pos);
							}
							else if (str.indexOf("left") >= 0) {
								this._setPosition("bottom left", first_pos, last_pos);
							}
							else {
								this._setPosition("bottom", first_pos, last_pos);
							}
						}
						else if (str.indexOf("left") >= 0) {
							this._setPosition("left", first_pos, last_pos);
						}
						else if (str.indexOf("right") >= 0) {
							this._setPosition("right", first_pos, last_pos);
						}

						if (prop_len > 3) {
							var peg_arr = split_prop.slice(2, prop_len - 1);
							var peglist = "", pegstr = "", newstr = "", pegarr = [];
							for (var i = 0, n = peg_arr.length; i < n; i++) {
								pegstr = peg_arr[i].trim();
								pegarr = pegstr.split(" ");
								newstr = "[" + pegarr[1] + " " + pegarr[0] + "]";
								peglist += newstr;
							}
							this.peglist = peglist;
						}
					}
					else if (str.indexOf("to") >= 0) {
						var strarr = str.split(" ");

						this._start_x = (parseInt(strarr[0]) | 0);
						this._start_y = (parseInt(strarr[1]) | 0);
						this._end_x = (parseInt(strarr[3]) | 0);
						this._end_y = (parseInt(strarr[4]) | 0);

						if (prop_len > 3) {
							var peg_arr = split_prop.slice(2, prop_len - 1);
							var peglist = "", pegstr = "", newstr = "", pegarr = [];
							for (var i = 0, n = peg_arr.length; i < n; i++) {
								pegstr = peg_arr[i].trim();
								pegarr = pegstr.split(" ");
								newstr = "[" + pegarr[1] + " " + pegarr[0] + "]";
								peglist += newstr;
							}
							this.peglist = peglist;
						}
					}
					else if (str.indexOf("deg") >= 0) {
						var deg = (parseInt(str) | 0);
						if (deg < 0) {
							while (deg < 0) {
								deg += 360;
							}
						}
						else if (deg >= 360) {
							while (deg >= 360) {
								deg -= 360;
							}
						}

						switch (Math.floor(deg / 45)) {
							case 0:
								this._setPosition("top", first_pos, last_pos);
								break;
							case 1:
								this._setPosition("top right", first_pos, last_pos);
								break;
							case 2:
								this._setPosition("right", first_pos, last_pos);
								break;
							case 3:
								this._setPosition("bottom right", first_pos, last_pos);
								break;
							case 4:
								this._setPosition("bottom", first_pos, last_pos);
								break;
							case 5:
								this._setPosition("bottom left", first_pos, last_pos);
								break;
							case 6:
								this._setPosition("left", first_pos, last_pos);
								break;
							case 7:
								this._setPosition("top left", first_pos, last_pos);
								break;
						}

						if (prop_len > 3) {
							var peg_arr = split_prop.slice(2, prop_len - 1);
							var peglist = "", pegstr = "", newstr = "", pegarr = [];
							for (var i = 0, n = peg_arr.length; i < n; i++) {
								pegstr = peg_arr[i].trim();
								pegarr = pegstr.split(" ");
								newstr = "[" + pegarr[1] + " " + pegarr[0] + "]";
								peglist += newstr;
							}
							this.peglist = peglist;
						}
					}
					else {
						this._start_x = this._start_y = first_pos;
						this._end_x = this._end_y = last_pos;

						var peg_arr = split_prop.slice(1, prop_len - 1);
						var peglist = "", pegstr = "", newstr = "", pegarr = [];
						for (var i = 0, n = peg_arr.length; i < n; i++) {
							pegstr = peg_arr[i].trim();
							pegarr = pegstr.split(" ");
							newstr = "[" + pegarr[1] + " " + pegarr[0] + "]";
							peglist += newstr;
						}
						this.peglist = peglist;
					}
					this.start_point = this._start_x + "," + this._start_y;
					this.start_color = first_prop[0];

					this.end_point = this._end_x + "," + this._end_y;
					this.end_color = last_prop[0];
				}
			}
			else if (val.indexOf("radial-gradient") >= 0) {
				this.style = "radial";
			}
			else {
				var valarr = val.split(/\s+/);
				if (valarr.length > 4) {
					switch (valarr[0]) {
						case "none":
						case "linear":
						case "radial":
							this.style = valarr[0];
							break;
						default:
							this.style = "";
							break;
					}
					var ptarr = valarr[1].split(',');
					this._start_x = (parseInt(ptarr[0]) | 0);
					this._start_y = (parseInt(ptarr[1]) | 0);
					this.start_point = this._start_x + "," + this._start_y;
					this.start_color = valarr[2];
					var ptarr = valarr[3].split(',');
					this._end_x = (parseInt(ptarr[0]) | 0);
					this._end_y = (parseInt(ptarr[1]) | 0);
					this.end_point = this._end_x + "," + this._end_y;
					this.end_color = valarr[4];
					if (valarr.length > 5) {
						var tmppeg = [];
						for (var i = 5, n = valarr.length; i < n; i++) {
							tmppeg.push(valarr[i]);
						}
						this.peglist = tmppeg.join(" ");
					}
					else {
						this.peglist = "";
					}
				}
			}
		}
	};

	_pStyleGradation._setPosition = function (pos, first, last) {
		switch (pos) {
			case "top":
				this._start_x = this._end_x = 0;
				this._start_y = 100 - first;
				this._end_y = 100 - last;
				break;
			case "top right":
				this._start_x = first;
				this._start_y = 100 - first;
				this._end_x = last;
				this._end_y = 100 - last;
				break;
			case "top left":
				this._start_x = this._start_y = 100 - first;
				this._end_x = this._end_y = 100 - last;
				break;
			case "bottom":
				this._start_x = this._end_x = 0;
				this._start_y = first;
				this._end_y = last;
				break;
			case "bottom right":
				this._start_x = this._start_y = first;
				this._end_x = this._end_y = last;
				break;
			case "bottom left":
				this._start_x = 100 - first;
				this._start_y = first;
				this._end_x = 100 - last;
				this._end_y = last;
				break;
			case "left":
				this._start_x = 100 - first;
				this._start_y = this._end_y = 0;
				this._end_x = 100 - last;
				break;
			case "right":
				this._start_x = first;
				this._start_y = this._end_y = 0;
				this._end_x = last;
				break;
		}
	};

	_pStyleGradation._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleGradation.set_style = function (v) {
		if (v != this.style) {
			this._is_empty = false;
			this._bindtype = 0;
			switch (v) {
				case "none":
				case "linear":
				case "radial":
					this.style = v;
					break;
				default:
					this.style = "";
					break;
			}
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_start = function (v) {
		if (v != (this.start_point + " " + this.start_color)) {
			this._is_empty = false;
			this._bindtype = 0;
			var val = (v) ? v.toString().trim() : "";
			var parts = val.split(/\s+/);
			var ptarr = parts[0].split(',');
			this._start_x = (parseInt(ptarr[0]) | 0);
			this._start_y = (parseInt(ptarr[1]) | 0);
			this.start_point = this._start_x + "," + this._start_y;
			this.start_color = parts[1];
			this.start = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_start_point = function (v) {
		if (v != this.start_point) {
			this._is_empty = false;
			this._bindtype = 0;
			var val = (v) ? v.toString().trim() : "";
			var ptarr = val.split(',');
			this._start_x = (parseInt(ptarr[0]) | 0);
			this._start_y = (parseInt(ptarr[1]) | 0);
			this.start_point = this._start_x + "," + this._start_y;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_start_color = function (v) {
		if (v != this.start_color) {
			this._is_empty = false;
			this._bindtype = 0;
			this.start_color = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_end = function (v) {
		if (v != (this.end_point + " " + this.end_color)) {
			this._is_empty = false;
			this._bindtype = 0;
			var val = (v) ? v.toString().trim() : "";
			var parts = val.split(/\s+/);
			var ptarr = parts[0].split(',');
			this._end_x = (parseInt(ptarr[0]) | 0);
			this._end_y = (parseInt(ptarr[1]) | 0);
			this.end_point = this._end_x + "," + this._end_y;
			this.end_color = parts[1];
			this.end = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_end_point = function (v) {
		if (v != this.end_point) {
			this._is_empty = false;
			this._bindtype = 0;
			var val = (v) ? v.toString().trim() : "";
			var ptarr = val.split(',');
			this._end_x = (parseInt(ptarr[0]) | 0);
			this._end_y = (parseInt(ptarr[1]) | 0);
			this.end_point = this._end_x + "," + this._end_y;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_end_color = function (v) {
		if (v != this.end_color) {
			this._is_empty = false;
			this._bindtype = 0;
			this.end_color = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGradation.set_peglist = function (v) {
		if (v != this.peglist) {
			this._is_empty = false;
			this._bindtype = 0;
			this.peglist = v;
			return this._updateValue();
		}
		return false;
	};

	_pStyleGradation._createRtlValue = function () {
		if (!this._rtlvalue) {
			if (this._start_x != this._end_x) {
				var strValue;
				strValue = this.style + " " + this._end_x + "," + this._start_y + " " + this.start_color + " " + this._start_x + "," + this._end_y + " " + this.end_color + " " + this.peglist;
				this._rtlvalue = strValue;
			}
		}
	};

	_pStyleGradation._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedGradationObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	nexacro._createGradationAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedGradationObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_style = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_style(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_peglist = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_peglist(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_start = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_start(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_start_point = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_start_point(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_start_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_start_color(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_end = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_end(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_end_point = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_end_point(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_end_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_gradation());\n"
			 + "	newobj.set_end_color(v);\n"
			 + "    newobj = nexacro._registerCachedGradationObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_font = function (face, size, bold, italic, underline, strikeout, antialias) {
		this.face = "";
		this.size = 0;
		this.type = "";

		this._default_face = "굴림";
		this._default_size = "9";
		this._default_type = "normal";

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		this._bold = false;
		this._italic = false;
		this._underline = false;
		this._strikeout = false;
		this._antialias = false;


		this._sysvalue = "";
		this._sysdecoration = "";

		if (size != null) {
			this._is_empty = false;
			this._bindtype = 0;
			this.face = face;
			this.size = (parseInt(size) | 0);
			if (bold) {
				this._bold = true;
			}
			if (italic) {
				this._italic = true;
			}
			if (underline) {
				this._underline = true;
			}
			if (strikeout) {
				this._strikeout = true;
			}
			if (antialias) {
				this._antialias = true;
			}
		}
		else if (size == null && (typeof (face) == "string")) {
			var val = face.trim();
			if (val) {
				this._parseInfo(val);
				this._updateValue();
			}
		}
	};
	var _pStyleFont = nexacro._createPrototype(nexacro.Object, nexacro.Style_font);
	nexacro.Style_font.prototype = _pStyleFont;
	_pStyleFont._type_name = "Font";


	_pStyleFont.valueOf = function () {
		return this._value;
	};
	_pStyleFont.toString = function () {
		return this._value;
	};

	_pStyleFont.clone = function () {
		var newobj = new nexacro.Style_font();
		newobj.face = this.face;
		newobj.size = this.size;
		newobj.type = this.type;

		newobj._bold = this._bold;
		newobj._italic = this._italic;
		newobj._underline = this._underline;
		newobj._strikeout = this._strikeout;
		newobj._antialias = this._antialias;

		newobj._sysvalue = this._sysvalue;
		newobj._sysdecoration = this._sysdecoration;

		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleFont._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.face = "";
			this.size = 0;
			this.type = "";
			this._bold = false;
			this._italic = false;
			this._underline = false;
			this._strikeout = false;
			this._antialias = false;

			this._sysvalue = "";
			this._sysdecoration = "";

			return true;
		}
		return false;
	};

	_pStyleFont._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var parts = val.split(/\s+/);
			var part;
			var faces = [], size = 0;
			var webfont_style = true;
			for (var i = 0, n = parts.length; i < n && webfont_style; i++) {
				part = parts[i];
				switch (part) {
					case "bold":
						this._bold = true;
						break;
					case "italic":
						this._italic = true;
						break;
					case "underline":
						this._underline = true;
						break;
					case "strikeout":
						this._strikeout = true;
						break;
					case "antialias":
						this._antialias = true;
						break;
					case "normal":
						break;
					default:
						{

							var intpart = parseInt(part);
							if (intpart != intpart) {
								if (size == 0) {
									webfont_style = false;
								}
								else {
									faces.push(part);
								}
							}
							else {
								size = intpart;
							}
						}
						break;
				}
			}

			if (webfont_style) {
				this.face = (faces.length > 0) ? faces.join(" ") : this._default_face;
				this.size = (size > 0) ? size : this._default_size;
			}
			else {
				this.size = this._default_size;

				var parts = val.split(',');
				if (parts.length >= 2) {
					this.face = parts[0];
					this.size = (parseInt(parts[1]) | 0);
					if (parts[2]) {
						var parts0 = parts[2].split(/\s+/);
						var part;
						for (var i = 0, n = parts0.length; i < n; i++) {
							part = parts0[i];
							switch (part) {
								case "bold":
									this._bold = true;
									break;
								case "italic":
									this._italic = true;
									break;
								case "underline":
									this._underline = true;
									break;
								case "strikeout":
									this._strikeout = true;
									break;
								case "antialias":
									this._antialias = true;
									break;
							}
						}
					}
				}
			}
		}
	};

	_pStyleFont._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var arr_type = [];
					if (this._bold) {
						arr_type.push("bold");
						this._bold = true;
					}
					if (this._italic) {
						arr_type.push("italic");
						this._italic = true;
					}
					if (this._underline) {
						arr_type.push("underline");
						this._underline = true;
					}
					if (this._strikeout) {
						arr_type.push("strikeout");
						this._strikeout = true;
					}
					if (this._antialias) {
						arr_type.push("antialias");
						this._antialias = true;
					}

					if (arr_type.length > 0) {
						this.type = arr_type.join(" ");
					}
					else {
						this.type = "";
					}

					arr_type.push(this.size);
					arr_type.push(this.face);

					return arr_type.join(' ');
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleFont._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			if (this._italic || this._bold || this._underline || this._strikeout || this.size) {
				this._sysvalue = (this._italic == true ? "italic " : "") + (this._bold == true ? "bold " : "") + (this.size >= 0 ? this.size + "pt " : Math.abs(this.size) + "px ") + this.face;

				if (this._underline == true) {
					if (this._strikeout == true) {
						this._sysdecoration = "underline line-through";
					}
					else {
						this._sysdecoration = "underline";
					}
				}
				else {
					if (this._strikeout == true) {
						this._sysdecoration = "line-through";
					}
					else {
						this._sysdecoration = "";
					}
				}
			}
			else {
				this._sysvalue = "";
				this._sysdecoration = "";
			}
			this._is_empty = (str == "" || str == 0);
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleFont._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleFont.set_face = function (v) {
		if (v != this.face) {
			this._is_empty = false;
			this._bindtype = 0;
			this.face = v;
			if (!this.size) {
				this.size = this._default_size;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleFont.set_size = function (v) {
		var iv = (parseInt(v) | 0);
		if (iv != this.size) {
			this._is_empty = false;
			this._bindtype = 0;
			this.size = iv;
			if (!this.face) {
				this.face = this._default_face;
			}

			return this._updateValue();
		}
		return false;
	};
	_pStyleFont.set_type = function (v) {
		if (v != this.type) {
			this._is_empty = false;
			this._bindtype = 0;
			var parts0 = v.split(/\s+/);
			var part;
			this._bold = false;
			this._italic = false;
			this._underline = false;
			this._strikeout = false;
			this._antialias = false;

			for (var i = 0, n = parts0.length; i < n; i++) {
				part = parts0[i];
				switch (part) {
					case "bold":
						this._bold = true;
						break;
					case "italic":
						this._italic = true;
						break;
					case "underline":
						this._underline = true;
						break;
					case "strikeout":
						this._strikeout = true;
						break;
					case "antialias":
						this._antialias = true;
						break;
				}
			}

			if (!this.size) {
				this.size = this._default_size;
			}
			if (!this.face) {
				this.face = this._default_face;
			}

			return this._updateValue();
		}
		return false;
	};

	nexacro._createFontAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedFontObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_face = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_font());\n"
			 + "	newobj.set_face(v);\n"
			 + "    newobj = nexacro._registerCachedFontObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_size = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_font());\n"
			 + "	newobj.set_size(v);\n"
			 + "    newobj = nexacro._registerCachedFontObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_type = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_font());\n"
			 + "	newobj.set_type(v);\n"
			 + "    newobj = nexacro._registerCachedFontObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};


	nexacro.Style_padding = function (t, r, b, l) {
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
		this.left = 0;

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";
		this._sysvalue = "";

		if (r != null) {
			this._is_empty = false;
			this._bindtype = 0;
			this.top = (parseInt(t) | 0);
			this.right = (parseInt(r) | 0);
			this.bottom = (parseInt(b) | 0);
			this.left = (parseInt(l) | 0);
		}
		else if (t && (typeof (t) == "string")) {
			var val = t.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = val;
				this._sysvalue = str;
			}
		}
	};
	var _pStylePadding = nexacro._createPrototype(nexacro.Object, nexacro.Style_padding);
	nexacro.Style_padding.prototype = _pStylePadding;
	_pStylePadding._type_name = "Padding";


	_pStylePadding.valueOf = function () {
		return this._value;
	};
	_pStylePadding.toString = function () {
		return this._value;
	};

	_pStylePadding.clone = function () {
		var newobj = new nexacro.Style_padding();
		newobj.top = this.top;
		newobj.right = this.right;
		newobj.bottom = this.bottom;
		newobj.left = this.left;
		newobj._is_empty = this._is_empty;
		newobj._sysvalue = this._sysvalue;
		newobj._value = this._value;
		return newobj;
	};

	_pStylePadding._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.top = 0;
			this.right = 0;
			this.bottom = 0;
			this.left = 0;
			this._value = "";
			this._sysvalue = "";
			return true;
		}
		return false;
	};

	_pStylePadding._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				return this.top + " " + this.right + " " + this.bottom + " " + this.left;
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStylePadding._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/\s+/);
			switch (valarr.length) {
				case 1:
					val = (parseInt(valarr[0]) | 0);
					this.top = this.right = this.bottom = this.left = val;
					break;
				case 2:
					val = (parseInt(valarr[0]) | 0);
					this.top = this.bottom = val;
					val = (parseInt(valarr[1]) | 0);
					this.right = this.left = val;
					break;
				case 3:
					val = (parseInt(valarr[0]) | 0);
					this.top = val;
					val = (parseInt(valarr[1]) | 0);
					this.right = this.left = val;
					val = (parseInt(valarr[2]) | 0);
					this.bottom = val;
					break;
				default:
					val = (parseInt(valarr[0]) | 0);
					this.top = val;
					val = (parseInt(valarr[1]) | 0);
					this.right = val;
					val = (parseInt(valarr[2]) | 0);
					this.bottom = val;
					val = (parseInt(valarr[3]) | 0);
					this.left = val;
					break;
			}
		}
	};

	_pStylePadding._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStylePadding._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._sysvalue) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStylePadding._set_value = function () {
		this._value = this.left + " " + this.top + " " + this.right + " " + this.bottom;
	};

	_pStylePadding.set_top = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.top && v >= 0) {
			this._is_empty = false;
			this._bindtype = 0;
			this.top = v;
			this._set_value();
			return this._updateValue();
		}
		return false;
	};
	_pStylePadding.set_right = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.right && v >= 0) {
			this._is_empty = false;
			this._bindtype = 0;
			this.right = v;
			this._set_value();
			return this._updateValue();
		}
		return false;
	};
	_pStylePadding.set_bottom = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.bottom && v >= 0) {
			this._is_empty = false;
			this._bindtype = 0;
			this.bottom = v;
			this._set_value();
			return this._updateValue();
		}
		return false;
	};
	_pStylePadding.set_left = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.left && v >= 0) {
			this._is_empty = false;
			this._bindtype = 0;
			this.left = v;
			this._set_value();
			return this._updateValue();
		}
		return false;
	};

	_pStylePadding._getPaddingWidth = function () {
		return (this._is_empty) ? 0 : (this.left + this.right);
	};
	_pStylePadding._getPaddingHeight = function () {
		return (this._is_empty) ? 0 : (this.top + this.bottom);
	};

	_pStylePadding._createRtlValue = function () {
		if (!this._rtlvalue) {
			if (this.left != this.right) {
				var strValue;
				strValue = this.top + " " + this.left + " " + this.bottom + " " + this.right;

				this._rtlvalue = strValue;
			}
		}
	};

	_pStylePadding._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedPaddingObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	nexacro._createPaddingAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedPaddingObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_top = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_padding());\n"
			 + "	newobj.set_top(v);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_right = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_padding());\n"
			 + "	newobj.set_right(v);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_bottom = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_padding());\n"
			 + "	newobj.set_bottom(v);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_left = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_padding());\n"
			 + "	newobj.set_left(v);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_margin = function (t, r, b, l) {
		this.top = 0;
		this.right = 0;
		this.bottom = 0;
		this.left = 0;

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._sysvalue = "";
		this._value = "";

		if (r != null) {
			this._is_empty = true;
			this._bindtype = 0;
			this.top = t;
			this.right = r;
			this.bottom = b;
			this.left = l;
		}
		else if (t && (typeof (t) == "string")) {
			var val = t.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._sysvalue = str;
				this._value = val;
			}
		}
	};
	var _pStyleMargin = nexacro._createPrototype(nexacro.Object, nexacro.Style_margin);
	nexacro.Style_margin.prototype = _pStyleMargin;
	_pStyleMargin._type_name = "Margin";

	_pStyleMargin.valueOf = function () {
		return this._value;
	};
	_pStyleMargin.toString = function () {
		return this._value;
	};

	_pStyleMargin.clone = function () {
		var newobj = new nexacro.Style_margin();
		newobj.top = this.top;
		newobj.right = this.right;
		newobj.bottom = this.bottom;
		newobj.left = this.left;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		newobj._sysvalue = this._sysvalue;
		return newobj;
	};

	_pStyleMargin._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.top = 0;
			this.right = 0;
			this.bottom = 0;
			this.left = 0;
			this._value = "";
			this._sysvalue = "";
			return true;
		}
		return false;
	};

	_pStyleMargin._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				return this.top + " " + this.right + " " + this.bottom + " " + this.left;
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};
	_pStyleMargin._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/\s+/);
			switch (valarr.length) {
				case 1:
					val = (parseInt(valarr[0]) | 0);
					this.top = this.right = this.bottom = this.left = val;
					break;
				case 2:
					val = (parseInt(valarr[0]) | 0);
					this.top = this.bottom = val;
					val = (parseInt(valarr[1]) | 0);
					this.right = this.left = val;
					break;
				case 3:
					val = (parseInt(valarr[0]) | 0);
					this.top = val;
					val = (parseInt(valarr[1]) | 0);
					this.right = this.left = val;
					val = (parseInt(valarr[2]) | 0);
					this.bottom = val;
					break;
				default:
					val = (parseInt(valarr[0]) | 0);
					this.top = val;
					val = (parseInt(valarr[1]) | 0);
					this.right = val;
					val = (parseInt(valarr[2]) | 0);
					this.bottom = val;
					val = (parseInt(valarr[3]) | 0);
					this.left = val;
					break;
			}
		}
	};

	_pStyleMargin._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._sysvalue) {
			this._is_empty = (str == "");
			this._sysvalue = str;
			return true;
		}
		return false;
	};

	_pStyleMargin._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._sysvalue) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleMargin._getMarginWidth = function () {
		return (this.left + this.right);
	};
	_pStyleMargin._getMarginHeight = function () {
		return (this.top + this.bottom);
	};

	_pStyleMargin.set_top = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.top) {
			this._is_empty = false;
			this._bindtype = 0;
			this.top = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleMargin.set_right = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.right) {
			this._is_empty = false;
			this._bindtype = 0;
			this.right = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleMargin.set_bottom = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.bottom) {
			this._is_empty = false;
			this._bindtype = 0;
			this.bottom = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleMargin.set_left = function (v) {
		v = (parseInt(v) | 0);
		if (v != this.left) {
			this._is_empty = false;
			this._bindtype = 0;
			this.left = v;
			return this._updateValue();
		}
		return false;
	};

	nexacro._createMarginAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedMarginObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_top = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_margin());\n"
			 + "	newobj.set_top(v);\n"
			 + "    newobj = nexacro._registerCachedMarginObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_right = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_margin());\n"
			 + "	newobj.set_right(v);\n"
			 + "    newobj = nexacro._registerCachedMarginObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_bottom = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_margin());\n"
			 + "	newobj.set_bottom(v);\n"
			 + "    newobj = nexacro._registerCachedMarginObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_left = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_margin());\n"
			 + "	newobj.set_left(v);\n"
			 + "    newobj = nexacro._registerCachedMarginObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_shadow = function (type, color, offsetx, offsety, f) {
		this.type = "";
		this.color = "";
		this.offset = "";
		this.factor = 0;

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";
		this._sysvalue = "";
		this._syscolor = "";

		if (color != null) {
			this._is_empty = true;
			this._bindtype = 0;
			this.type = type;
			this.color = color;
			this._offset_x = offsetx;
			this._offset_y = offsety;
			this.offset = this._offset_x + "," + this._offset_y;
			this.factor = f;
		}
		else if (type && (typeof (type) == "string")) {
			var val = type.trim();
			if (val) {
				this._parseInfo(val);
				this._updateValue();
			}
		}
	};
	var _pStyleShadow = nexacro._createPrototype(nexacro.Object, nexacro.Style_shadow);
	nexacro.Style_shadow.prototype = _pStyleShadow;
	_pStyleShadow._type_name = "Shadow";


	_pStyleShadow.valueOf = function () {
		return this._value;
	};
	_pStyleShadow.toString = function () {
		return this._value;
	};

	_pStyleShadow.clone = function () {
		var newobj = new nexacro.Style_shadow();
		newobj.type = this.type;
		newobj.color = this.color;
		newobj.offset = this.offset;
		newobj._offset_x = this._offset_x;
		newobj._offset_y = this._offset_y;
		newobj.factor = this.factor;
		newobj._sysvalue = this._sysvalue;
		newobj._syscolor = this._syscolor;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleShadow._empty = function () {
		if (!this._is_empty) {
			this.type = "";
			this.color = "";
			this.offset = "";
			this._offset_x = 0;
			this._offset_y = 0;
			this.factor = 0;
			this._value = "";
			this._is_empty = true;
			this._bindtype = 0;
			this._sysvalue = "";
			this._syscolor = "";
			return true;
		}
		return false;
	};


	_pStyleShadow._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var str = "";
					str += this.type;
					str += " ";
					this.offset = this._offset_x + "," + this._offset_y;
					str += this.offset;
					str += " ";
					str += this.factor;
					str += " ";
					str += this.color;
					return str;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleShadow._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/\s+/);
			if (valarr.length == 4) {
				if (valarr[0] == "outer") {
					this.type = valarr[0];
				}
				var vals = valarr[1].split(',');
				val = (parseInt(vals[0]) | 0);
				this._offset_x = val;
				if (vals.length > 1) {
					val = (parseInt(vals[1]) | 0);
					this._offset_y = val;
				}
				else {
					this._offset_y = this._offset_x;
				}
				val = (parseInt(valarr[2]) | 0);
				this.factor = val;
				this.color = valarr[3];
			}
		}
	};

	_pStyleShadow._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			if (this.color) {
				var _syscolor = nexacro._getWebColorFromXreColor(this.color);
				this._syscolor = _syscolor;

				this._sysvalue = this._offset_x + "px "
					 + this._offset_y + "px "
					 + this.factor + "px "
					 + _syscolor;
			}
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleShadow._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleShadow.set_type = function (v) {
		if (v != this.type) {
			this._is_empty = false;
			this._bindtype = 0;
			if (v == "outer") {
				this.type = v;
			}
			return this._updateValue();
		}
		return false;
	};
	_pStyleShadow.set_offset = function (v) {
		if (v != this.offset) {
			if (this._is_empty) {
				this.type = "outer";
				this.factor = 0;
				this.color = "gray";
			}
			this._is_empty = false;
			this._bindtype = 0;
			var vals = v.split(',');
			var val = (parseInt(vals[0]) | 0);
			this._offset_x = val;
			if (vals.length > 1) {
				val = (parseInt(vals[1]) | 0);
				this._offset_y = val;
			}
			else {
				this._offset_y = this._offset_x;
			}
			return this._updateValue();
		}
		return false;
	};
	_pStyleShadow.set_factor = function (v) {
		if (v != this.factor) {
			if (this._is_empty) {
				this.type = "outer";
				this._offset_x = this._offset_y = 0;
				this.color = "gray";
			}
			this._is_empty = false;
			this._bindtype = 0;
			var val = (parseInt(v) | 0);
			this.factor = val;
			return this._updateValue();
		}
		return false;
	};
	_pStyleShadow.set_color = function (v) {
		if (v != this.color) {
			if (this._is_empty) {
				this.type = "outer";
				this._offset_x = this._offset_y = 0;
				this.factor = 0;
			}
			this._is_empty = false;
			this._bindtype = 0;
			this.color = v;
			return this._updateValue();
		}
		return false;
	};

	_pStyleShadow._createRtlValue = function () {
		if (!this._rtlvalue) {
			if (this._offset_x != 0) {
				var strValue;
				strValue = this.type + " " + this._offset_x * (-1) + "," + this._offset_y + " " + this.factor + " " + this.color;

				this._rtlvalue = strValue;
			}
		}
	};

	_pStyleShadow._getStyleObject = function (bRtl) {
		this._createRtlValue();
		if (bRtl && this._rtlvalue) {
			return nexacro._getCachedShadowObj(this._rtlvalue);
		}
		else {
			return this;
		}
	};

	nexacro._createShadowAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedShadowObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_type = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_shadow());\n"
			 + "	newobj.set_type(v);\n"
			 + "    newobj = nexacro._registerCachedShadowObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_offset = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_shadow());\n"
			 + "	newobj.set_offset(v);\n"
			 + "    newobj = nexacro._registerCachedShadowObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_factor = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_shadow());\n"
			 + "	newobj.set_factor(v);\n"
			 + "    newobj = nexacro._registerCachedShadowObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_shadow());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedShadowObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};


	nexacro.Style_blur = function (f) {
		this.factor = 0;

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		if (f) {
			this._is_empty = true;
			this._bindtype = 0;
			f = (parseInt(f) | 0);
			this.factor = f;
		}
	};
	var _pStyleBlur = nexacro._createPrototype(nexacro.Object, nexacro.Style_blur);
	nexacro.Style_blur.prototype = _pStyleBlur;
	_pStyleBlur._type_name = "Blur";

	_pStyleBlur.valueOf = function () {
		return this._value;
	};
	_pStyleBlur.toString = function () {
		return this._value;
	};

	_pStyleBlur.clone = function () {
		var newobj = new nexacro.Style_blur();
		newobj.factor = this.factor;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleBlur._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.factor = 0;
			this._value = "";
			return true;
		}
		return false;
	};

	_pStyleBlur._setValueStr = function () {
		var str = "";
		if (this.factor > 0) {
			str = "" + this.factor;
		}
		else {
			str = "";
		}
		return str;
	};

	_pStyleBlur._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var val = (parseInt(v) | 0);
			this.factor = val;
		}
	};

	_pStyleBlur._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleBlur._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleBlur.set_factor = function (v) {
		if (v != this.factor) {
			this._is_empty = false;
			this._bindtype = 0;
			var val = (parseInt(v) | 0);
			this.factor = val;
			return this._updateValue();
		}
		return false;
	};

	nexacro._createBlurAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedBlurObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_factor = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_blur());\n"
			 + "	newobj.set_factor(v);\n"
			 + "    newobj = nexacro._registerCachedBlurObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_glow = function (color, f) {
		this.color = "";
		this.factor = 0;

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		if (f != null) {
			this._is_empty = false;
			this._bindtype = 0;
			this.color = color;
			this.factor = f;
		}
		else if (color && (typeof (color) == "string")) {
			var val = color.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = str;
			}
		}
	};
	var _pStyleGlow = nexacro._createPrototype(nexacro.Object, nexacro.Style_glow);
	nexacro.Style_glow.prototype = _pStyleGlow;
	_pStyleGlow._type_name = "Glow";

	_pStyleGlow.valueOf = function () {
		return this._value;
	};
	_pStyleGlow.toString = function () {
		return this._value;
	};

	_pStyleGlow.clone = function () {
		var newobj = new nexacro.Style_glow();
		newobj.color = this.factor;
		newobj.factor = this.factor;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleGlow._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.color = "";
			this.factor = 0;
			this._value = "";
			return true;
		}
		return false;
	};

	_pStyleGlow._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var str = "";
					if (this.factor > 0) {
						str += this.factor + " " + this.color;
					}
					return str;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleGlow._parseInfo = function (val) {
		var tag = val.substring(0, 4).toUpperCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/\s+/);
			if (valarr.length == 1) {
				val = (parseInt(valarr[0]) | 0);
				this.factor = val;
				this.color = "yellow";
			}
			else {
				val = (parseInt(valarr[0]) | 0);
				this.factor = val;
				this.color = valarr[1];
			}
		}
	};

	_pStyleGlow._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleGlow._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleGlow.set_factor = function (v) {
		if (v != this.factor) {
			if (this._is_empty) {
				this.color = "yellow";
			}
			this._is_empty = false;
			this._bindtype = 0;
			var val = (parseInt(v) | 0);
			this.factor = val;
			return this._updateValue();
		}
		return false;
	};
	_pStyleGlow.set_color = function (v) {
		if (v != this.color._value) {
			if (this._is_empty) {
				this.factor = 0;
			}
			this._is_empty = false;
			this._bindtype = 0;
			this.color = v;
			return this._updateValue();
		}
		return false;
	};

	nexacro._createGlowAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedGlowObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "		    if (this._is_empty)  this._is_empty = false;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_factor = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_glow());\n"
			 + "	newobj.set_factor(v);\n"
			 + "    newobj = nexacro._registerCachedGlowObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_glow());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedGlowObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};


	nexacro.Style_accessibility = function (role, bflag, desclevel, lab, des, act) {
		this.role = "";
		this.enable = true;
		this.label = "";
		this.description = "";
		this.action = "";
		this.desclevel = "all";

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		if (lab != null) {
			this._is_empty = false;
			this._bindtype = 0;
			this.role = role;
			this.enable = nexacro._toBoolean(bflag);
			this.label = lab;
			this.description = des;
			this.action = act;
			this.desclevel = desclevel;
		}
		else if (role && (typeof (role) == "string")) {
			var val = role.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = str;
			}
		}
	};
	var _pStyleAccessibility = nexacro._createPrototype(nexacro.Object, nexacro.Style_accessibility);
	nexacro.Style_accessibility.prototype = _pStyleAccessibility;
	_pStyleAccessibility._type_name = "Accessibility";

	_pStyleAccessibility.clone = function () {
		var newobj = new nexacro.Style_accessibility();
		newobj.role = this.role;
		newobj.label = this.label;
		newobj.desclevel = this.desclevel;
		newobj.enable = this.enable;
		newobj.description = this.description;
		newobj.action = this.action;

		newobj._role = this._role;
		newobj._label = this._label;
		newobj._description = this._description;
		newobj._action = this._action;
		newobj._value = this._value;
		newobj._convertedValue = this._convertedValue;
		return newobj;
	};

	_pStyleAccessibility.valueOf = function () {
		return this._value;
	};
	_pStyleAccessibility.toString = function () {
		return this._value;
	};

	_pStyleAccessibility._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.role = "";
			this.enable = true;
			this.label = "";
			this.description = "";
			this.action = "";
			this.desclevel = "";
			this._value = "";
			return true;
		}
		return false;
	};

	_pStyleAccessibility._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var str = "";
					if (this.role) {
						str += this.role + " ";
					}
					if (this.enable) {
						str += "enable ";
					}
					else {
						str += "disable ";
					}
					str += this.desclevel + " '" + this.label + "' '" + this.description + "' '" + this.action + "'";
					return str;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleAccessibility._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}

			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/ +/);
			if (valarr.length >= 3) {
				var j = 0;
				var role = valarr[j];
				var isRole = true;
				var n = 0;
				if (role == "enable" || role == "disable") {
					this.role = "";
					isRole = false;
				}
				else {
					this.role = role;
					j++;
					n = 1;
				}
				if (valarr[j++] == "disable") {
					this.enable = false;
				}
				else {
					this.enable = true;
				}
				switch (valarr[j]) {
					case "none":
					case "self":
					case "child":
						this.desclevel = valarr[j];
						break;
					default:
						this.desclevel = "all";
						break;
				}

				if (valarr.length > 2 + n) {
					j++;
					for (var i = j; valarr[i + 1] && (!(valarr[i + 1][0] == "'") || !(valarr[i][valarr[i].length - 1] == "'")); ) {
						valarr[i] = valarr[i].concat(" " + valarr[i + 1]);
						valarr.splice(i + 1, 1);
					}
					if (valarr[i] == valarr[i + 1] && valarr[i] == "'") {
						valarr.splice(i + 1, 1);
						this.label = " ";
					}
					else {
						var len = valarr[j].length - 2;
						this.label = valarr[j].substr(1, len);
					}
				}
				else {
					this.label = "";
				}

				if (valarr.length > 3 + n) {
					j++;
					for (var i = j; valarr[i + 1] && (!(valarr[i + 1][0] == "'") || !(valarr[i][valarr[i].length - 1] == "'")); ) {
						valarr[i] = valarr[i].concat(" " + valarr[i + 1]);
						valarr.splice(i + 1, 1);
					}
					if (valarr[i] == valarr[i + 1] && valarr[i] == "'") {
						valarr.splice(i + 1, 1);
						this.description = " ";
					}
					else {
						var len = valarr[j].length - 2;
						this.description = valarr[j].substr(1, len);
					}
				}
				else if (valarr.length == 4 && !isRole) {
					this.description = valarr[j];
				}
				else {
					this.description = "";
				}

				if (valarr.length > 4 + n) {
					j++;
					for (var i = j; valarr[i + 1] && (!(valarr[i + 1][0] == "'") || !(valarr[i][valarr[i].length - 1] == "'")); ) {
						valarr[i] = valarr[i].concat(" " + valarr[i + 1]);
						valarr.splice(i + 1, 1);
					}
					if (valarr[i] == valarr[i + 1] && valarr[i] == "'") {
						valarr.splice(i + 1, 1);
						this.action = " ";
					}
					else {
						var len = valarr[j].length - 2;
						this.action = valarr[j].substr(1, len);
					}
				}
				else if (valarr.length == 5 && !isRole) {
					this.action = valarr[j];
				}
				else {
					this.action = "";
				}
			}
		}
	};

	_pStyleAccessibility._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._is_empty = (str == "");
			this._value = str;
			return true;
		}
		return false;
	};

	_pStyleAccessibility._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleAccessibility.set_role = function (v) {
		if (this.role != v) {
			this._is_empty = false;
			this._bindtype = 0;
			this.role = v;
			return this._updateValue();
		}
	};
	_pStyleAccessibility.set_enable = function (v) {
		v = (v ? true : false);
		if (v != this.enable) {
			if (this._is_empty) {
				this.desclevel = "all";
			}
			this._is_empty = false;
			this._bindtype = 0;
			this.enable = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleAccessibility.set_desclevel = function (v) {
		if (v != this.desclevel) {
			this._is_empty = false;
			this._bindtype = 0;
			switch (v) {
				case "none":
				case "self":
				case "child":
					this.desclevel = v;
					break;
				default:
					this.desclevel = "all";
					break;
			}
			return this._updateValue();
		}
		return false;
	};
	_pStyleAccessibility.set_label = function (v) {
		if (v != this.label) {
			this._is_empty = false;
			this._bindtype = 0;
			this.label = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleAccessibility.set_description = function (v) {
		if (v != this.description) {
			this._is_empty = false;
			this._bindtype = 0;
			this.description = v;
			return this._updateValue();
		}
		return false;
	};

	_pStyleAccessibility.set_action = function (v) {
		if (v != this.action) {
			this._is_empty = false;
			this._bindtype = 0;
			this.action = v;
			return this._updateValue();
		}
		return false;
	};

	_pStyleAccessibility.apply = function () {
		return false;
	};

	nexacro._createAccessibilityAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "		if (styleobj._setValue(v) && this._target && this._target._control_element)\n"
			 + "			this._target.$CALL$();\n"
			 + "	}\n"
			 + "	else if (styleobj) {\n"
			 + "		this[attr] = null;\n"
			 + "		if (this._target)\n"
			 + "			this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_role = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "	if (styleobj.set_role(v) && this._target && this._target._control_element);\n"
			 + "		this._target.$CALL$();\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_enable = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "	if (styleobj.set_enable(v) && this._target && this._target._control_element);\n"
			 + "		this._target.$CALL$();\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_desclevel = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "	if (styleobj.set_desclevel(v) && this._target && this._target._control_element);\n"
			 + "		this._target.$CALL$();\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_label = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "	if (styleobj.set_label(v) && this._target && this._target._control_element);\n"
			 + "		this._target.$CALL$();\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_description = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "	if (styleobj.set_description(v) && this._target && this._target._control_element);\n"
			 + "		this._target.$CALL$();\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_action = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	if (!styleobj) this.$ATTR$ = styleobj = new nexacro.Style_accessibility();\n"
			 + "	if (styleobj.set_action(v) && this._target && this._target._control_element);\n"
			 + "		this._target.$CALL$();\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};


	nexacro.Style_fillbrush = function (s, color, antialiasing) {
		this.style = "";
		this.color = "";
		this.antialiasing = "";

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		if (color != null) {
			this._is_empty = true;
			this._bindtype = 0;
			this.color = color;
			this.style = s;
			this.antialiasing = antialiasing;
		}
		else if (s && (typeof (s) == "string")) {
			var val = s.trim();
			if (val) {
				this._parseInfo(val);
				var str = this._getValueStr();
				this._is_empty = (str == "");
				if (this.color.length > 0) {
					this._syscolor = nexacro._getWebColorFromXreColor(this.color);
				}
				else {
					this._syscolor = "";
				}
				this._value = str;
			}
		}
	};
	var _pStyleFillbrush = nexacro.Style_fillbrush.prototype = nexacro._createPrototype(nexacro.Object, nexacro.Style_fillbrush);
	_pStyleFillbrush._type_name = "Fillbrush";

	_pStyleFillbrush.valueOf = function () {
		return this._value;
	};
	_pStyleFillbrush.toString = function () {
		return this._value;
	};

	_pStyleFillbrush.clone = function () {
		var newobj = new nexacro.Style_fillbrush();
		newobj.style = this.style;
		newobj.color = this.color;
		newobj.antialiasing = this.antialiasing;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleFillbrush._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.color = "";
			this.style = "";
			this.antialiasing = "";
			this._value = "";
			return true;
		}
		return false;
	};

	_pStyleFillbrush._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var val = "";
					if (this.style) {
						val += this.style + " ";
					}
					if (this.color) {
						val += this.color;
					}
					return val;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleFillbrush._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var linearr = val.trim().split(",");
			if (linearr.length == 0) {
				return;
			}
			if (linearr.length == 1) {
				var valarr = val.trim().split(/\s+/);
				switch (valarr[0]) {
					case "none":
					case "solid":
					case "hatch":
					case "gradation":
						this.style = valarr[0];
				}
				valarr[1] && (this.color = valarr[1]);
				valarr[2] && (this.antialiasing = valarr[2]);
			}
		}
	};
	_pStyleFillbrush._updateValue = function () {
		var str = this._getValueStr();
		if (str != this._value) {
			this._value = str;
			this._is_empty = (str == "");
			if (this.color.length > 0) {
				this._syscolor = nexacro._getWebColorFromXreColor(this.color);
			}
			else {
				this._syscolor = "";
			}
			return true;
		}
		return false;
	};

	_pStyleFillbrush._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};
	_pStyleFillbrush._isValid = function () {
		return (!this._is_empty && this.style && this.style != "none" && this.color && this.color != "transparent");
	};

	_pStyleFillbrush.set_style = function (v) {
		var val = "";
		switch (v) {
			case "none":
			case "solid":
			case "hatch":
			case "gradation":
				val = v;
				break;
		}
		if (val != this.style) {
			this._is_empty = false;
			this._bindtype = 0;
			this.style = val;
			return this._updateValue();
		}
		return false;
	};
	_pStyleFillbrush.set_color = function (v) {
		if (v == "transparent") {
			v = "";
		}
		if (v != this.color) {
			this._is_empty = false;
			this._bindtype = 0;
			this.color = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleFillbrush.set_antialiasing = function (v) {
		if (v != this.antialiasing._value) {
			this._is_empty = false;
			this._bindtype = 0;
			this.antialiasing = v;
			return this._updateValue();
		}
		return false;
	};

	nexacro._createFillbrushAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedFillbrushObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_style = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_fillbrush());\n"
			 + "	newobj.set_style(v);\n"
			 + "    newobj = nexacro._registerCachedFillbrushObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_fillbrush());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedFillbrushObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_antialiasing = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_fillbrush());\n"
			 + "	newobj.set_antialiasing(v);\n"
			 + "    newobj = nexacro._registerCachedFillbrushObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_strokepen = function (w, s, color, antialiasing) {
		this.width = "";
		this.style = "";
		this.color = "";
		this.antialiasing = "";

		this._is_empty = true;
		this._bindtype = 0;
		this._bindexpr = "";
		this._value = "";

		if (s != null) {
			this.width = w;
			this.style = s;
			if (color == "transparent") {
				this.color = "";
			}
			else {
				this.color = color;
			}
			this.antialiasing = antialiasing;
		}
		else if (w && (typeof (w) == "string")) {
			var val = w.trim();
			if (val) {
				this._parseInfo(val);
				if (this.color.length > 0) {
					this._syscolor = nexacro._getWebColorFromXreColor(this.color);
				}
				else {
					this._syscolor = "";
				}
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = str;
			}
		}
	};
	var _pStyleStrokepen = nexacro.Style_strokepen.prototype = nexacro._createPrototype(nexacro.Object, nexacro.Style_strokepen);
	_pStyleStrokepen._type_name = "Strokepen";


	_pStyleStrokepen.valueOf = function () {
		return this._value;
	};
	_pStyleStrokepen.toString = function () {
		return this._value;
	};

	_pStyleStrokepen.clone = function () {
		var newobj = new nexacro.Style_strokepen();
		newobj.width = this.width;
		newobj.style = this.style;
		newobj.color = this.color;
		newobj.antialiasing = this.antialiasing;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleStrokepen._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this._bindtype = 0;
			this.width = "";
			this.style = "";
			this.color = "";
			this.antialiasing = "";
			this._value = "";
			return true;
		}
		return false;
	};
	_pStyleStrokepen._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					var val = "";
					if (this.width) {
						val += this.width + " ";
					}
					if (this.style) {
						val += this.style + " ";
					}
					if (this.color) {
						val += this.color;
					}
					return val;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
	};

	_pStyleStrokepen._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/\s+/);
			var w = (parseInt(valarr[0]) | 0);
			this.width = w;
			this.style = valarr[1];
			this.color = valarr[2];
			this.antialiasing = valarr[3];
		}
	};

	_pStyleStrokepen._updateValue = function () {
		var val = this._getValueStr();
		if (val != this._value) {
			this._value = val;
			if (this.color.length > 0) {
				this._syscolor = nexacro._getWebColorFromXreColor(this.color);
			}
			else {
				this._syscolor = "";
			}
			return true;
		}
		return false;
	};

	_pStyleStrokepen._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleStrokepen._isValid = function () {
		return (!this._is_empty && this.style && this.style != "none" && this.color && this.color != "transparent");
	};


	_pStyleStrokepen.set_width = function (v) {
		var val = (parseInt(v) | 0);
		if (val != this.width) {
			this._is_empty = false;
			this.width = val;
			return this._updateValue();
		}
		return false;
	};

	_pStyleStrokepen.set_style = function (v) {
		var val = "";
		switch (v) {
			case "none":
			case "solid":
			case "dashdot":
			case "dotted":
			case "dashdotdot":
			case "dashed":
				val = v;
				break;
		}
		if (val != this.style) {
			this._is_empty = false;
			this._bindtype = 0;
			this.style = val;
			return this._updateValue();
		}
		return false;
	};

	_pStyleStrokepen.set_color = function (v) {
		if (v == "transparent") {
			v = "";
		}
		if (v != this.color) {
			this._is_empty = false;
			this._bindtype = 0;
			this.color = v;
			return this._updateValue();
		}
		return false;
	};

	_pStyleStrokepen.set_antialiasing = function (v) {
		if (v != this.antialiasing._value) {
			this._is_empty = false;
			this._bindtype = 0;
			this.antialiasing = v;
			return this._updateValue();
		}
		return false;
	};

	nexacro._createStrokepenAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedStrokepenObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_width = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_strokepen());\n"
			 + "	newobj.set_width(v);\n"
			 + "    newobj = nexacro._registerCachedStrokepenObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_style = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_strokepen());\n"
			 + "	newobj.set_style(v);\n"
			 + "    newobj = nexacro._registerCachedStrokepenObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_strokepen());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedStrokepenObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_antialiasing = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_strokepen());\n"
			 + "	newobj.set_antialiasing(v);\n"
			 + "    newobj = nexacro._registerCachedStrokepenObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro.Style_hatch = function (s, color) {
		this.color = "";
		this.style = "";

		this._is_empty = true;
		this._value = "";
		this._bindtype = 0;
		this._bindexpr = "";

		if (color != null) {
			this._is_empty = false;
			this._bindtype = 0;
			if (color == "transparent") {
				this.color = "";
			}
			else {
				this.color = color;
			}
			this.style = s;
		}
		else if (s && (typeof (s) == "string")) {
			var val = s.trim();
			if (val) {
				this._parseInfo(val);
				if (this.color.length > 0) {
					this._syscolor = nexacro._getWebColorFromXreColor(this.color);
				}
				else {
					this._syscolor = "";
				}
				var str = this._getValueStr();
				this._is_empty = (str == "");
				this._value = str;
			}
		}
	};
	var _pStyleHatch = nexacro.Style_hatch.prototype = nexacro._createPrototype(nexacro.Object, nexacro.Style_hatch);
	_pStyleHatch._type_name = "Hatch";

	_pStyleHatch.valueOf = function () {
		return this._value;
	};
	_pStyleHatch.toString = function () {
		return this._value;
	};

	_pStyleHatch.clone = function () {
		var newobj = new nexacro.Style_hatch();
		newobj.color = this.color;
		newobj.style = this.style;
		newobj._is_empty = this._is_empty;
		newobj._value = this._value;
		return newobj;
	};

	_pStyleHatch._empty = function () {
		if (!this._is_empty) {
			this.color = "";
			this.style = "";
			this._value = "";
			this._is_empty = true;
			this._bindtype = 0;
			return true;
		}
		return false;
	};

	_pStyleHatch._getValueStr = function () {
		switch (this._bindtype) {
			case 0:
				{

					if (this.style) {
						val += this.style + " ";
						if (this.color) {
							val += this.color;
						}
					}
					return val;
				}
			case 1:
				return "bind:" + this._bindexpr;
			case 2:
				return "expr:" + this._bindexpr;
		}
		return "";
		var val = "";
	};

	_pStyleHatch._parseInfo = function (val) {
		var tag = val.substring(0, 4).toLowerCase();
		if (tag == "expr" || tag == "bind") {
			if (tag == "bind") {
				this._bindtype = 1;
			}
			else {
				this._bindtype = 2;
			}
			var expr = val.substring(4).trim();
			if (expr.charAt(0) == '(') {
				this._bindexpr = expr.substr(1, expr.length - 2);
			}
			else {
				this._bindexpr = expr.substring(1);
			}
		}
		else {
			var valarr = val.split(/\s+/);
			switch (valarr[0]) {
				case "none":
				case "horizontal":
				case "vertical":
				case "leftrightdiagonal":
				case "rightleftdiagonal":
				case "cross":
				case "xcross":
				case "lightdense":
				case "heavydense":
					this.style = valarr[0];
					break;
				default:
					this.style = "";
					break;
			}
			this.color = valarr[1];
		}
	};
	_pStyleHatch._updateValue = function () {
		var val = this._getValueStr();

		if (val != this._value) {
			this._value = val;
			if (this.color.length > 0) {
				this._syscolor = nexacro._getWebColorFromXreColor(this.color);
			}
			else {
				this._syscolor = "";
			}
			return true;
		}
		return false;
	};

	_pStyleHatch._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyleHatch.set_color = function (v) {
		if (v == "transparent") {
			v = "";
		}
		if (v != this.color) {
			this._is_empty = false;
			this._bindtype = 0;
			this.color = v;
			return this._updateValue();
		}
		return false;
	};
	_pStyleHatch.set_style = function (v) {
		var val = "";
		switch (v) {
			case "horizontal":
			case "vertical":
			case "leftrightdiagonal":
			case "rightleftdiagonal":
			case "cross":
			case "xcross":
			case "lightdense":
			case "heavydense":
				val = v;
				break;
			default:
				val = "horizontal";
				break;
		}
		if (val != this.style) {
			this._is_empty = false;
			this._bindtype = 0;
			this.style = val;
			return this._updateValue();
		}
		return false;
	};

	nexacro._createHatchAttributeEvalStr = function (ptype_id, attr_id) {
		var callback_id = "on_update_style_" + attr_id;
		var str = "$PTYPE$.set_$ATTR$ = function (v) {\n"
			 + "	var oldobj = this.$ATTR$;\n"
			 + "	if (v) {\n"
			 + "		var styleobj = nexacro._getCachedHatchObj(v);\n"
			 + "        if (oldobj != styleobj) {\n"
			 + "		    this.$ATTR$ = styleobj;\n"
			 + "            if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	    }\n"
			 + "	}\n"
			 + "	else if (oldobj) {\n"
			 + "		this.$ATTR$ = null;\n"
			 + "		if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "	}\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_style = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_hatch());\n"
			 + "	newobj.set_style(v);\n"
			 + "    newobj = nexacro._registerCachedHatchObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n"
			 + "$PTYPE$.set_$ATTR$_color = function (v) {\n"
			 + "	var styleobj = this.$ATTR$;\n"
			 + "	var newobj = styleobj ? styleobj.clone() : (new nexacro.Style_hatch());\n"
			 + "	newobj.set_color(v);\n"
			 + "    newobj = nexacro._registerCachedHatchObj(newobj);\n"
			 + "    if (newobj != styleobj) {\n"
			 + "		this.$ATTR$ = newobj;\n"
			 + "        if (this._target && this._target._control_element) this._target.$CALL$();\n"
			 + "    }\n"
			 + "};\n";
		return str.replace(/\$PTYPE\$/g, ptype_id).replace(/\$ATTR\$/g, attr_id).replace(/\$CALL\$/g, callback_id);
	};

	nexacro._style_caches = {
	};
	nexacro._getCachedStyleObj = function (type, val) {
		var type_cache = nexacro._style_caches[type];
		if (!type_cache) {
			nexacro._style_caches[type] = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			switch (type) {
				case "background":
					obj = new nexacro.Style_background(val);
					break;
				case "border":
					obj = new nexacro.Style_border(val);
					break;
				case "bordertype":
					obj = new nexacro.Style_bordertype(val);
					break;
				case "gradation":
					obj = new nexacro.Style_gradation(val);
					break;
				case "font":
					obj = new nexacro.Style_font(val);
					break;
				case "color":
					obj = new nexacro.Style_color(val);
					break;
				case "align":
					obj = new nexacro.Style_align(val);
					break;
				case "margin":
					obj = new nexacro.Style_margin(val);
					break;
				case "padding":
					obj = new nexacro.Style_padding(val);
					break;
				case "line":
					obj = new nexacro.Style_line(val);
					break;
				case "fillbrush":
					obj = new nexacro.Style_fillbrush(val);
					break;
				case "strokepen":
					obj = new nexacro.Style_strokepen(val);
					break;
				case "hatch":
					obj = new nexacro.Style_hatch(val);
					break;
				case "pointcolor":
					obj = new nexacro.Style_pointColor(val);
					break;
				case "shadow":
					obj = new nexacro.Style_shadow(val);
					break;
				case "blur":
					obj = new nexacro.Style_blur(val);
					break;
				case "glow":
					obj = new nexacro.Style_glow(val);
					break;
				case "accessibility":
					obj = new nexacro.Style_accessibility(val);
					return obj;
					break;
				default:
					obj = new nexacro.Style_value(val);
			}

			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};

	nexacro._getCachedBackgroundObj = function (val) {
		var type_cache = nexacro._style_caches.background;
		if (!type_cache) {
			nexacro._style_caches.background = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_background(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedBackgroundObj = function (obj) {
		var type_cache = nexacro._style_caches.background;
		if (!type_cache) {
			nexacro._style_caches.background = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedBorderObj = function (val) {
		var type_cache = nexacro._style_caches.border;
		if (!type_cache) {
			nexacro._style_caches.border = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_border(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedBorderObj = function (obj) {
		var type_cache = nexacro._style_caches.border;
		if (!type_cache) {
			nexacro._style_caches.border = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedBordertypeObj = function (val) {
		var type_cache = nexacro._style_caches.bordertype;
		if (!type_cache) {
			nexacro._style_caches.bordertype = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_bordertype(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._sysvalue];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._sysvalue] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedBordertypeObj = function (obj) {
		var type_cache = nexacro._style_caches.bordertype;
		if (!type_cache) {
			nexacro._style_caches.bordertype = type_cache = {
			};
			type_cache[obj._sysvalue] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._sysvalue];
		if (!cacheobj) {
			type_cache[obj._sysvalue] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedGradationObj = function (val) {
		var type_cache = nexacro._style_caches.gradation;
		if (!type_cache) {
			nexacro._style_caches.gradation = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_gradation(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedGradationObj = function (obj) {
		var type_cache = nexacro._style_caches.gradation;
		if (!type_cache) {
			nexacro._style_caches.gradation = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedFontObj = function (val) {
		var type_cache = nexacro._style_caches.font;
		if (!type_cache) {
			nexacro._style_caches.font = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_font(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedFontObj = function (obj) {
		var type_cache = nexacro._style_caches.font;
		if (!type_cache) {
			nexacro._style_caches.font = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedColorObj = function (val) {
		var type_cache = nexacro._style_caches.color;
		if (!type_cache) {
			nexacro._style_caches.color = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_color(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedColorObj = function (obj) {
		var type_cache = nexacro._style_caches.color;
		if (!type_cache) {
			nexacro._style_caches.color = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedAlignObj = function (val) {
		var type_cache = nexacro._style_caches.align;
		if (!type_cache) {
			nexacro._style_caches.align = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_align(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedAlignObj = function (obj) {
		var type_cache = nexacro._style_caches.align;
		if (!type_cache) {
			nexacro._style_caches.align = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedMarginObj = function (val) {
		var type_cache = nexacro._style_caches.margin;
		if (!type_cache) {
			nexacro._style_caches.margin = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_margin(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedMarginObj = function (obj) {
		var type_cache = nexacro._style_caches.margin;
		if (!type_cache) {
			nexacro._style_caches.margin = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedPaddingObj = function (val) {
		var type_cache = nexacro._style_caches.padding;
		if (!type_cache) {
			nexacro._style_caches.padding = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_padding(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedPaddingObj = function (obj) {
		var type_cache = nexacro._style_caches.padding;
		if (!type_cache) {
			nexacro._style_caches.padding = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedLineObj = function (val) {
		var type_cache = nexacro._style_caches.line;
		if (!type_cache) {
			nexacro._style_caches.line = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_line(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedLineObj = function (obj) {
		var type_cache = nexacro._style_caches.line;
		if (!type_cache) {
			nexacro._style_caches.line = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedGlowObj = function (val) {
		var type_cache = nexacro._style_caches.glow;
		if (!type_cache) {
			nexacro._style_caches.glow = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_glow(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedGlowObj = function (obj) {
		var type_cache = nexacro._style_caches.glow;
		if (!type_cache) {
			nexacro._style_caches.glow = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedBlurObj = function (val) {
		var type_cache = nexacro._style_caches.blur;
		if (!type_cache) {
			nexacro._style_caches.blur = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_blur(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedBlurObj = function (obj) {
		var type_cache = nexacro._style_caches.blur;
		if (!type_cache) {
			nexacro._style_caches.blur = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedShadowObj = function (val) {
		var type_cache = nexacro._style_caches.shadow;
		if (!type_cache) {
			nexacro._style_caches.shadow = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_shadow(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._sysvalue != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedShadowObj = function (obj) {
		var type_cache = nexacro._style_caches.shadow;
		if (!type_cache) {
			nexacro._style_caches.shadow = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedFillbrushObj = function (val) {
		var type_cache = nexacro._style_caches.fillbrush;
		if (!type_cache) {
			nexacro._style_caches.fillbrush = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_fillbrush(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedFillbrushObj = function (obj) {
		var type_cache = nexacro._style_caches.fillbrush;
		if (!type_cache) {
			nexacro._style_caches.fillbrush = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedStrokepenObj = function (val) {
		var type_cache = nexacro._style_caches.stroke;
		if (!type_cache) {
			nexacro._style_caches.stroke = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_strokepen(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedStrokepenObj = function (obj) {
		var type_cache = nexacro._style_caches.stroke;
		if (!type_cache) {
			nexacro._style_caches.stroke = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedHatchObj = function (val) {
		var type_cache = nexacro._style_caches.hatch;
		if (!type_cache) {
			nexacro._style_caches.hatch = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_hatch(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedHatchObj = function (obj) {
		var type_cache = nexacro._style_caches.hatch;
		if (!type_cache) {
			nexacro._style_caches.hatch = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedAccessibilityObj = function (val) {
		var type_cache = nexacro._style_caches.accessibility;
		if (!type_cache) {
			nexacro._style_caches.accessibility = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_accessibility(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedAccessibilityObj = function (obj) {
		var type_cache = nexacro._style_caches.accessibility;
		if (!type_cache) {
			nexacro._style_caches.accessibility = type_cache = {
			};
			type_cache[obj._value] = obj;
			return obj;
		}
		var cacheobj = type_cache[obj._value];
		if (!cacheobj) {
			type_cache[obj._value] = obj;
			return obj;
		}
		return cacheobj;
	};

	nexacro._getCachedValueObj = function (val) {
		var type_cache = nexacro._style_caches.value;
		if (!type_cache) {
			nexacro._style_caches.value = type_cache = {
			};
		}
		var obj = type_cache[val];
		if (!obj) {
			obj = new nexacro.Style_value(val);
			if (obj._bindtype != 0) {
				return obj;
			}

			if (obj._value != val) {
				var cacheobj = type_cache[obj._value];
				if (cacheobj) {
					type_cache[val] = cacheobj;
					return cacheobj;
				}
				type_cache[obj._value] = obj;
				type_cache[val] = obj;
				return obj;
			}
			else {
				type_cache[val] = obj;
				return obj;
			}
		}
		return obj;
	};
	nexacro._registerCachedValueObj = function (v, obj) {
		var type_cache = nexacro._style_caches.value;
		if (!type_cache) {
			nexacro._style_caches.value = type_cache = {
			};
			type_cache[v] = obj;
			if (v != obj._value) {
				type_cache[obj._value] = obj;
			}
			return obj;
		}
		var cacheobj = type_cache[v];
		if (!cacheobj) {
			if (v == obj._value) {
				type_cache[obj._value] = obj;
				return obj;
			}
			cacheobj = type_cache[obj._value];
			if (!cacheobj) {
				type_cache[v] = obj;
				type_cache[obj._value] = obj;
				return obj;
			}
			type_cache[v] = cacheobj;
			return cacheobj;
		}
		return cacheobj;
	};

	nexacro.Style = function (target) {
		this._target = target || null;
	};
	var _pStyle = nexacro._createPrototype(nexacro.Object, nexacro.Style);
	nexacro.Style.prototype = _pStyle;

	nexacro.Style._pseudo_table = {
		"normal" : "1", 
		"disabled" : "1", 
		"focused" : "1", 
		"mouseover" : "1", 
		"selected" : "1", 
		"pushed" : "1", 
		"readonly" : "1"
	};

	_pStyle.accessibility = null;
	_pStyle.bordertype = null;
	_pStyle.border = null;
	_pStyle.background = null;
	_pStyle.gradation = null;
	_pStyle.margin = null;
	_pStyle.padding = null;
	_pStyle.cursor = null;
	_pStyle.opacity = null;
	_pStyle.shadow = null;
	_pStyle.align = null;
	_pStyle.font = null;
	_pStyle.color = null;
	_pStyle.letterspace = null;
	_pStyle._value = "";
	_pStyle.rtlimagemirroring = null;
	_pStyle._rtlvalue = "";

	eval(nexacro._createAccessibilityAttributeEvalStr("_pStyle", "accessibility"));
	eval(nexacro._createBordertypeAttributeEvalStr("_pStyle", "bordertype"));
	eval(nexacro._createBorderAttributeEvalStr("_pStyle", "border"));
	eval(nexacro._createBackgroundAttributeEvalStr("_pStyle", "background"));
	eval(nexacro._createGradationAttributeEvalStr("_pStyle", "gradation"));
	eval(nexacro._createMarginAttributeEvalStr("_pStyle", "margin"));
	eval(nexacro._createPaddingAttributeEvalStr("_pStyle", "padding"));
	eval(nexacro._createValueAttributeEvalStr("_pStyle", "cursor"));
	eval(nexacro._createValueAttributeEvalStr("_pStyle", "opacity"));
	eval(nexacro._createShadowAttributeEvalStr("_pStyle", "shadow"));
	eval(nexacro._createAlignAttributeEvalStr("_pStyle", "align"));
	eval(nexacro._createFontAttributeEvalStr("_pStyle", "font"));
	eval(nexacro._createColorAttributeEvalStr("_pStyle", "color"));
	eval(nexacro._createValueAttributeEvalStr("_pStyle", "rtlimagemirroring"));
	eval(nexacro._createValueAttributeEvalStr("_pStyle", "letterspace"));

	_pStyle._use_NC_border = true;
	_pStyle._use_NC_padding = true;




	_pStyle.__custom_emptyObject = function () {
	};
	_pStyle._empty = function () {
		if (!this._is_empty) {
			this._is_empty = true;
			this.accessibility = null;
			this.bordertype = null;
			this.border = null;
			this.background = null;
			this.gradation = null;
			this.margin = null;
			this.padding = null;
			this.cursor = null;
			this.opacity = null;
			this.shadow = null;
			this.align = null;
			this.font = null;
			this.color = null;
			this.letterspace = null;
			this.__custom_emptyObject();
			return true;
		}
		return false;
	};

	_pStyle.destroy = function () {
		this._empty();
		this._target = null;
	};

	_pStyle.__get_custom_style_value = function () {
		return "";
	};

	_pStyle._getValueStr = function () {
		var val = "";
		if (!this._is_empty) {
			if (this.bordertype && !this.bordertype._is_empty) {
				val += "bordertype:" + this.bordertype._value + "; ";
			}
			if (this.border && !this.border._is_empty) {
				val += "border:" + this.border._value + "; ";
			}
			if (this.background && !this.background._is_empty) {
				val += "background:" + this.background._value + "; ";
			}
			if (this.gradation && !this.gradation._is_empty) {
				val += "gradation:" + this.gradation._value + "; ";
			}
			if (this.margin && !this.margin._is_empty) {
				val += "margin:" + this.margin._value + "; ";
			}
			if (this.padding && !this.padding._is_empty) {
				val += "padding:" + this.padding._value + "; ";
			}
			if (this.cursor && !this.cursor._is_empty) {
				val += "cursor:" + this.cursor._value + "; ";
			}
			if (this.opacity && !this.opacity._is_empty) {
				val += "opacity:" + this.opacity._value + "; ";
			}
			if (this.shadow && !this.shadow._is_empty) {
				val += "shadow:" + this.shadow._value + "; ";
			}
			if (this.align && !this.align._is_empty) {
				val += "align:" + this.align._value + "; ";
			}
			if (this.font && !this.font._is_empty) {
				val += "font:" + this.font._value + "; ";
			}
			if (this.color && !this.color._is_empty) {
				val += "color:" + this.color._value + "; ";
			}
			if (this.accessibility && !this.accessibility._is_empty) {
				val += "accessibility:" + this.accessibility._value + "; ";
			}
			if (this.rtlimagemirroring && !this.rtlimagemirroring._is_empty) {
				val += "rtlimagemirroring:" + this.rtlimagemirroring._value + "; ";
			}
			if (this.letterspace && !this.letterspace._is_empty) {
				val += "letterspace:" + this.letterspace._value + "; ";
			}
			val += this.__get_custom_style_value();
			val = val.trim();
		}
		return val;
	};

	_pStyle._parseInfo = function (val) {
		var linearr = val.split(";");
		var propname1, propval1;
		for (var i = 0, n = linearr.length; i < n; i++) {
			var tmpstr = linearr[i];
			var idx = tmpstr.indexOf(":");
			propname = tmpstr.substring(0, idx).trim();
			propval = tmpstr.substring(idx + 1).trim();

			if (propname && propval) {
				var getFn = this["set_" + propname];
				if (getFn) {
					getFn.call(this, propval);
				}
			}
		}
	};

	_pStyle._updateValue = function () {
		var val = this._getValueStr();
		if (val != this._value) {
			this._is_empty = (val == "");
			this._value = val;
		}
		return this._value;
	};

	_pStyle._setValue = function (v) {
		if (v && typeof (v) == "string") {
			var val = v.trim();
			if (val != this._value) {
				if (val) {
					this._parseInfo(val);
					return this._updateValue();
				}
				else {
					return this._empty();
				}
			}
			return false;
		}
		return this._empty();
	};

	_pStyle.getStyleValue = function (stylePropID, pseudo) {
		var obj;
		pseudo = pseudo == "enabled" ? "normal" : pseudo;

		if (nexacro.Style._pseudo_table[pseudo]) {
			if (pseudo == "normal") {
				obj = this._target.style[stylePropID];
			}
			else {
				obj = this._target._styles[pseudo] ? this._target._styles[pseudo][stylePropID] : undefined;
			}
		}
		else {
			return undefined;
		}

		return obj ? obj._value : undefined;
	};


	_pStyle.setStyleValue = function (stylePropID, pseudo, value) {
		var retval = false, style_str = "this._target.on_update_style";

		pseudo = pseudo == "enabled" ? "normal" : pseudo;

		if (!stylePropID || !pseudo || !value) {
			return false;
		}

		if (!nexacro.Style._pseudo_table[pseudo]) {
			return false;
		}

		if (pseudo == "normal") {
			var fn = this["set_" + stylePropID];
			if (fn) {
				eval("this.set_" + stylePropID + "(value)");
				retval = true;
			}
		}
		else {
			var styleType = this._find_styleType(stylePropID);
			switch (styleType) {
				case 0:
					retval = this._setAlignPseudoStyle(stylePropID, pseudo, value);
					style_str += "_align();";
					break;
				case 1:
					retval = this._setBackgroundPseudoStyle(stylePropID, pseudo, value);
					style_str += "_background();";
					break;
				case 2:
					retval = this._setBorderPseudoStyle(stylePropID, pseudo, value);
					style_str += "_border();";
					break;
				case 3:
					retval = this._setBordertypePseudoStyle(stylePropID, pseudo, value);
					style_str += "_bordertype();";
					break;
				case 4:
					retval = this._setColorPseudoStyle(stylePropID, pseudo, value);
					style_str += "_color();";
					break;
				case 5:
					retval = this._setCursorPseudoStyle(stylePropID, pseudo, value);
					style_str += "_cursor();";
					break;
				case 6:
					retval = this._setFontPseudoStyle(stylePropID, pseudo, value);
					style_str += "_font();";
					break;
				case 7:
					retval = this._setGlowPseudoStyle(stylePropID, pseudo, value);
					style_str += "_glow();";
					break;
				case 8:
					retval = this._setGradationPseudoStyle(stylePropID, pseudo, value);
					style_str += "_gradation();";
					break;
				case 9:
					retval = this._setMarginPseudoStyle(stylePropID, pseudo, value);
					style_str += "_margin();";
					break;
				case 10:
					retval = this._setOpacityPseudoStyle(stylePropID, pseudo, value);
					style_str += "_opacity();";
					break;
				case 11:
					retval = this._setPaddingPseudoStyle(stylePropID, pseudo, value);
					style_str += "_padding();";
					break;
				case 12:
					retval = this._setShadowPseudoStyle(stylePropID, pseudo, value);
					style_str += "_shadow();";
					break;
				case 13:
					retval = this._setAccessibilityPseudoStyle(stylePropID, pseudo, value);
					style_str += "_accessibility();";
					break;
			}
			if (this._target._pseudo == pseudo) {
				eval(style_str);
			}
		}

		return retval;
	};


	_pStyle._find_styleType = function (stylePropID) {
		var retval = -1;

		if (stylePropID.indexOf("align") >= 0) {
			retval = 0;
		}
		else if (stylePropID.indexOf("background") >= 0) {
			retval = 1;
		}
		else if (stylePropID.indexOf("bordertype") >= 0) {
			retval = 3;
		}
		else if (stylePropID.indexOf("border") >= 0) {
			retval = 2;
		}
		else if (stylePropID.indexOf("color") >= 0) {
			retval = 4;
		}
		else if (stylePropID.indexOf("cursor") >= 0) {
			retval = 5;
		}
		else if (stylePropID.indexOf("font") >= 0) {
			retval = 6;
		}
		else if (stylePropID.indexOf("glow") >= 0) {
			retval = 7;
		}
		else if (stylePropID.indexOf("gradation") >= 0) {
			retval = 8;
		}
		else if (stylePropID.indexOf("margin") >= 0) {
			retval = 9;
		}
		else if (stylePropID.indexOf("opacity") >= 0) {
			retval = 10;
		}
		else if (stylePropID.indexOf("padding") >= 0) {
			retval = 11;
		}
		else if (stylePropID.indexOf("shadow") >= 0) {
			retval = 12;
		}
		else if (stylePropID.indexOf("accessibility") >= 0) {
			retval = 13;
		}

		return retval;
	};
	_pStyle._setAlignPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}

		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedAlignObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedAlignObj(value);
			comp._styles[pseudo] = newStyle;
		}
		if (!obj) {
			return false;
		}
		return true;
	};
	_pStyle._setBackgroundPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedBackgroundObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedBackgroundObj(value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setBorderPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedBorderObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedBorderObj(value);
			comp._styles[pseudo] = newStyle;
		}
		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setBordertypePseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}

		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedBordertypeObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedBordertypeObj(value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setColorPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedColorObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedColorObj(value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setCursorPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedStyleObj("cursor", value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedStyleObj("cursor", value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setFontPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedFontObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedFontObj(value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setGlowPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedGlowObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedGlowObj(value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setGradationPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedGradationObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedGradationObj(value);
			comp._styles[pseudo] = newStyle;
		}
		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setMarginPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedMarginObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedMarginObj(value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setOpacityPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedStyleObj("opacity", value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedStyleObj("opacity", value);
			comp._styles[pseudo] = newStyle;
		}

		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setPaddingPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedPaddingObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedPaddingObj(value);
			comp._styles[pseudo] = newStyle;
		}
		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setShadowPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedShadowObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedShadowObj(value);
			comp._styles[pseudo] = newStyle;
		}
		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle._setAccessibilityPseudoStyle = function (stylePropID, pseudo, value) {
		var obj = null;
		var comp = this._target;
		if (!comp) {
			return false;
		}
		if (comp._styles[pseudo]) {
			obj = comp._styles[pseudo][stylePropID] = nexacro._getCachedAccessibilityObj(value);
		}
		else {
			var newStyle = comp.on_create_custom_style();
			obj = newStyle[stylePropID] = nexacro._getCachedAccessibilityObj(value);
			comp._styles[pseudo] = newStyle;
		}
		if (!obj) {
			return false;
		}
		return true;
	};

	_pStyle.set_glow = function (v) {
	};
	_pStyle.set_blur = function (v) {
	};

	delete _pStyle;

	nexacro.CurrentStyle = function () {
	};
	var _pCurrentStyle = nexacro._createPrototype(nexacro.Object, nexacro.CurrentStyle);
	nexacro.CurrentStyle.prototype = _pCurrentStyle;

	_pCurrentStyle.accessibility = null;
	_pCurrentStyle.bordertype = null;
	_pCurrentStyle.border = null;
	_pCurrentStyle.background = null;
	_pCurrentStyle.gradation = null;
	_pCurrentStyle.margin = null;
	_pCurrentStyle.padding = null;
	_pCurrentStyle.cursor = null;
	_pCurrentStyle.opacity = null;
	_pCurrentStyle.shadow = null;
	_pCurrentStyle.align = null;
	_pCurrentStyle.font = null;
	_pCurrentStyle.color = null;
	_pCurrentStyle.rtlimagemirroring = null;
	_pCurrentStyle.letterspace = null;
	_pCurrentStyle._value = "";
	_pCurrentStyle._rtlvalue = "";

	_pCurrentStyle.__get_custom_style_value = function () {
		return "";
	};


	_pCurrentStyle.getStyleValue = function (stylePropID) {
		return this[stylePropID] ? this[stylePropID]._value : undefined;
	};
	_pCurrentStyle.__custom_emptyObject = function () {
	};

	_pCurrentStyle._empty = function () {
		this._is_empty = true;
		this.accessibility = null;
		this.bordertype = null;
		this.border = null;
		this.background = null;
		this.gradation = null;
		this.margin = null;
		this.padding = null;
		this.cursor = null;
		this.opacity = null;
		this.shadow = null;
		this.align = null;
		this.font = null;
		this.letterspace = null;
		this.color = null;
		this.__custom_emptyObject();

		return true;
	};

	nexacro._cloneStyleObject = function (oldObject) {
		var tempClone = {
		}, prop;

		if (typeof (oldObject) == "object") {
			for (prop in oldObject) {
				if (prop != "_target") {
					var propVal = oldObject[prop];
					if (propVal == null) {
						tempClone[prop] = null;
					}
					else {
						if (typeof (propVal) == "object") {
							if (propVal._is_array) {
								tempClone[prop] = nexacro._cloneStyleArray(oldObject[prop]);
							}
							else if (propVal.__is_selector) {
								tempClone[prop] = nexacro._cloneStyleObject(propVal);
							}
							else {
								tempClone[prop] = propVal;
							}
						}
						else {
							tempClone[prop] = propVal;
						}
					}
				}
			}
		}
		return tempClone;
	};
	nexacro._cloneStyleArray = function (oldArray) {
		var tempClone = [];
		for (var idx = 0, cnt = oldArray.length; idx <= cnt; idx++) {
			var propVal = oldArray[idx];
			if (typeof (propVal) == "object") {
				if (propVal._is_array) {
					tempClone.push(nexacro._cloneStyleArray(oldObject[prop]));
				}
				else if (propVal._is_selector) {
					tempClone.push(nexacro._cloneStyleObject(propVal));
				}
				else {
					tempClone.push(propVal);
				}
			}
			else {
				tempClone.push(propVal);
			}
		}
		return tempClone;
	};

	nexacro._bInitCssObjects = true;
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (!nexacro.DeviceI) {
	nexacro.DeviceI = function () {
		this.setup();
	};

	var _pDeviceI = nexacro.DeviceI.prototype = nexacro._createPrototype(nexacro.EventSinkObject, nexacro.DeviceI);
	_pDeviceI._type_name = "Device";

	_pDeviceI.apkversion = {
	};
	_pDeviceI.libraryversion = {
	};

	_pDeviceI.setup = function () {
	};

	_pDeviceI.execiOS = function () {
	};

	_pDeviceI.keyEvent = function (keytype, keyaction) {
		var _keyKind = 1;

		var MENUKEY = 82;
		var BACKKEY = 4;

		if (keytype == MENUKEY) {
			_keyKind = 1;
		}
		else if (keytype == BACKKEY) {
			_keyKind = 2;
		}
		return application.getActiveForm()._on_devicebuttonup({
			button : _keyKind
		});
	};

	_pDeviceI.uniqueID = 0;
	_pDeviceI.makeID = function () {
		this.uniqueID++;

		var curtime = new Date();
		var strMakeID = this.uniqueID.toString()
			 + Math.floor((Math.random() * (1000 - 100 + 1)) + 100).toString();
		return parseInt(strMakeID);
	};

	_pDeviceI.runCallback = function (sid, sfunc, params) {
		var obj;

		if (nexacro.Device.curDevice == 0) {
			obj = eval("(" + params + ")");
		}
		else {
			obj = params;
		}

		var willrunfunc = this._userCreatedObj[sid];

		if ((willrunfunc != undefined) && (typeof willrunfunc[sfunc] == "function")) {
			return willrunfunc[sfunc](obj);
		}
	};

	_pDeviceI.on_created = function () {
	};

	_pDeviceI.print = function (strPrint) {
		var element = document.getElementById('DeviceAPI_status');
		element.innerHTML = element.innerHTML + strPrint + '<br />';
	};
	_pDeviceI.publicNumCheck = function (v) {
		if (v == null || v == undefined) {
			return false;
		}
		if (typeof (v) == "string" && v.length <= 0) {
			return false;
		}
		if (typeof (v) == "number") {
			return true;
		}
		return isFinite(Number(v));
	};


	_pDeviceI.pramck_makeCall = function (strPhoneNumber, bAutoDialing) {
		if (strPhoneNumber == null || typeof (strPhoneNumber) == "undefined") {
			return false;
		}
		else {
			strPhoneNumber = strPhoneNumber.toString();
		}

		var number = "";
		try {
			number = strPhoneNumber.split("+").join("");
			number = number.split("-").join("");
		}
		catch (e) {
			return false;
		}

		var normalize = /[^0-9+-]/gi;
		if (normalize.test(strPhoneNumber) == true) {
			normalize.lastIndex = 0;
			return false;
		}

		if (typeof (bAutoDialing) != "boolean") {
			return false;
		}
		return true;
	};

	_pDeviceI.paramck_play = function (strFilePath) {
		if (strFilePath == null || typeof (strFilePath) == "undefined" || typeof (strFilePath) != "string") {
			return false;
		}
		var strlength = strFilePath.split(" ").join("");
		if (strlength.length == 0) {
			return false;
		}
		return true;
	};



	_pDeviceI.pramck_contactString = function (strProperty) {
		if (strProperty == null || typeof (strProperty) == "undefined" || typeof (strProperty) != "string") {
			return false;
		}
		return true;
	};



	_pDeviceI.isConvertDateToString = function (dateString) {
		var dateStringSplit;
		var date = new Date();

		try {
			dateStringSplit = dateString.split('/');

			date.setYear(parseInt(dateStringSplit[0]) | 0);
			date.setMonth(parseInt(dateStringSplit[1]) | 0 - 1);
			date.setDate(parseInt(dateStringSplit[2]) | 0);
		}
		catch (e) {
			return date;
		}
		return date;
	};

	_pDeviceI.parseDateToInt = function (strDate) {
		if (strDate < 10) {
			strDate = "0" + strDate;
		}
		return strDate;
	};


	_pDeviceI.encodeString = function (source) {
		if (source === undefined || source === null) {
			return source;
		}
		if (typeof (source) != 'string') {
			return source;
		}
		var value = source;
		value = value.replace(/\&/g, "&amp;");
		value = value.replace(/\</g, "&lt;");
		value = value.replace(/\>/g, "&gt;");
		value = value.replace(/\"/g, "&quot;");
		value = value.replace(/\'/g, "&apos;");
		value = value.replace(/\ /g, "&#32;");
		value = value.replace(/\r/g, "&#13;");
		value = value.replace(/\n/g, "&#10;");
		value = value.replace(/\t/g, "&#9;");
		value = value.replace(/\\/g, "&#92;");
		value = value.replace(/\x1d/g, "&#029;");
		value = value.replace(/\x1e/g, "&#30;");
		value = value.replace(/\x1f/g, "&#31;");
		value = value.replace(/\x03/g, "&#3;");
		return value;
	};

	_pDeviceI.decodeString = function (source) {
		if (source === undefined || source === null) {
			return source;
		}
		if (typeof (source) != 'string') {
			return source;
		}
		var value = source;
		value = value.replace(/\&lt\;/g, "<");
		value = value.replace(/\&gt\;/g, ">");
		value = value.replace(/\&quot\;/g, "\"");
		value = value.replace(/\&apos\;/g, "'");
		value = value.replace(/\&\#32\;/g, " ");
		value = value.replace(/\&\#13\;/g, "\r");
		value = value.replace(/\&\#10\;/g, "\n");
		value = value.replace(/\&\#9\;/g, "\t");
		value = value.replace(/\&\#92\;/g, "\\");
		value = value.replace(/\&\#29\;/g, String.fromCharCode(29));
		value = value.replace(/\&\#30\;/g, String.fromCharCode(30));
		value = value.replace(/\&\#31\;/g, String.fromCharCode(31));
		value = value.replace(/\&\#3\;/g, String.fromCharCode(3));
		value = value.replace(/\&amp\;/g, "&");
		return value;
	};



	_pDeviceI.DatasetToJSONString = function (dataset) {
		if (dataset == undefined) {
			return '{"columnInfos":[], "rows":[]}';
		}

		var colSize = dataset.getColCount();
		var rowSize = dataset.getRowCount();

		var started = false;
		var jsonString = '{"columnInfos":[';
		for (var i = 0; i < colSize; i++) {
			var colInfo = dataset.getColumnInfo(i);
			if (started) {
				jsonString += (',{"name":"' + colInfo.name + '", "type":' + colInfo.ntype + '}');
			}
			else {
				jsonString += ('{"name":"' + colInfo.name + '", "type":' + colInfo.ntype + '}');
			}
			started = true;
		}

		started = false;
		jsonString += '],"rows":[';
		for (var i = 0; i < rowSize; i++) {
			if (started) {
				jsonString += ',[';
			}
			else {
				jsonString += '[';
			}
			started = true;

			var colStarted = false;
			for (var j = 0; j < colSize; j++) {
				var colInfo = dataset.getColumnInfo(j);
				var value = dataset.getColumn(i, colInfo.name);

				if (colStarted) {
					jsonString += ',';
				}
				colStarted = true;

				var valueString;
				if (value === null || value === undefined) {
					valueString = 'null';
				}
				else {
					switch (colInfo.ntype) {
						case 2:
						case 3:
							valueString = nexacro.DataUtils.toTextFromDecimal(value);
							break;
						case 4:
							valueString = '"' + nexacro.DataUtils.toTextFromDecimal(value) + '"';
							break;
						case 5:
							valueString = '"' + nexacro.DataUtils.toTextFromDate(value) + '"';
							break;
						case 6:
							valueString = '"' + nexacro.DataUtils.toTextFromTime(value) + '"';
							break;
						case 7:
							if (value.dateObj == undefined) {
								valueString = '"' + nexacro.DataUtils.toTextFromDateTime(value) + '"';
							}
							else {
								valueString = '"' + nexacro.DataUtils.toTextFromDateTime(value.dateObj) + '"';
							}
							break;
						case 1:
							valueString = '"' + nexacro.Device.encodeString(value) + '"';
							break;
						case 0:
						case 8:
						case 9:
						default:
							valueString = '"' + value + '"';
							break;
					}
				}
				jsonString += valueString;
			}
			jsonString += ']';
		}
		jsonString += ']}';

		return jsonString;
	};
	_pDeviceI.DatasetToJSONObject = function (dataset) {
		return eval('(' + DatasetToJSONString(dataset) + ')');
	};
	_pDeviceI.JSONObjectToDataset = function (jsonObject, dataset) {
		if (jsonObject == undefined) {
			return dataset;
		}
		if (dataset == undefined) {
			dataset = new nexacro.Dataset();
		}
		var colInfos = jsonObject.columnInfos;

		for (var i = 0; i < colInfos.length; i++) {
			dataset.addColumn(colInfos[i].name, nexacro.DataUtils.toTypeName(colInfos[i].type));
		}
		var rows = jsonObject.rows;
		for (var i = 0; i < rows.length; i++) {
			var ridx = dataset.addRow();
			for (var j = 0; j < colInfos.length; j++) {
				switch (colInfos[j].type) {
					case 1:
						dataset.setColumn(ridx, colInfos[j].name, nexacro.Device.decodeString(rows[i][j]));
						break;
					case 4:
						dataset.setColumn(ridx, colInfos[j].name, rows[i][j]);
						break;
					case 2:
					case 3:
					case 5:
					case 6:
					case 7:
					case 0:
					case 8:
					case 9:
					default:
						dataset.setColumn(ridx, colInfos[j].name, rows[i][j]);
						break;
				}
			}
		}
		return dataset;
	};
	_pDeviceI.JSONStringToDataset = function (jsonString, dataset) {
		if (dataset == undefined) {
			dataset = new nexacro.Dataset();
		}
		return nexacro.Device.JSONObjectToDataset(eval('(' + jsonString + ')'));
	};



	_pDeviceI.DatasetToJSONString2 = function (dataset) {
		if (dataset == undefined) {
			return '{"columnInfos":[], "rows":[]}';
		}

		var colSize = dataset.getColCount();
		var rowSize = dataset.getRowCount();

		var started = false;
		var jsonString = '{"columnInfos":[';
		for (var i = 0; i < colSize; i++) {
			var colInfo = dataset.getColumnInfo(i);
			if (started) {
				jsonString += (',{"name":"' + colInfo.name + '", "type":' + colInfo.ntype + '}');
			}
			else {
				jsonString += ('{"name":"' + colInfo.name + '", "type":' + colInfo.ntype + '}');
			}
			started = true;
		}

		started = false;
		jsonString += '],"rows":[';
		for (var i = 0; i < rowSize; i++) {
			if (started) {
				jsonString += ',{';
			}
			else {
				jsonString += '{';
			}
			started = true;

			var colStarted = false;
			for (var j = 0; j < colSize; j++) {
				var colInfo = dataset.getColumnInfo(j);
				var value = dataset.getColumn(i, colInfo.name);

				if (colStarted) {
					jsonString += ',';
				}
				colStarted = true;

				jsonString += '"' + colInfo.name + '":';

				var valueString;
				if (value === null || value === undefined) {
					valueString = 'null';
				}
				else {
					switch (colInfo.ntype) {
						case 2:
						case 3:
							valueString = nexacro.DataUtils.toTextFromDecimal(value);
							break;
						case 4:
							valueString = '"' + nexacro.DataUtils.toTextFromDecimal(value) + '"';
							break;
						case 5:
							valueString = '"' + nexacro.DataUtils.toTextFromDate(value) + '"';
							break;
						case 6:
							valueString = '"' + nexacro.DataUtils.toTextFromTime(value) + '"';
							break;
						case 7:
							if (value.dateObj == undefined) {
								valueString = '"' + nexacro.DataUtils.toTextFromDateTime(value) + '"';
							}
							else {
								valueString = '"' + nexacro.DataUtils.toTextFromDateTime(value.dateObj) + '"';
							}
							break;
						case 1:
							valueString = '"' + nexacro.Device.encodeString(value) + '"';
							break;
						case 0:
						case 8:
						case 9:
						default:
							valueString = '"' + value + '"';
							break;
					}
				}
				jsonString += valueString;
			}
			jsonString += '}';
		}
		jsonString += ']}';

		return jsonString;
	};
	_pDeviceI.DatasetToJSONObject2 = function (dataset) {
		return eval('(' + nexacro.Device.DatasetToJSONString2(dataset) + ')');
	};

	_pDeviceI.JSONObjectToDataset2 = function (jsonObject, dataset) {
		if (jsonObject == undefined) {
			return dataset;
		}
		if (dataset == undefined) {
			dataset = new nexacro.Dataset();
		}

		var colInfos = jsonObject.columnInfos;
		for (var i = 0; i < colInfos.length; i++) {
			dataset.addColumn(colInfos[i].name, nexacro.DataUtils.toTypeName(colInfos[i].type));
		}

		var rows = jsonObject.rows;
		for (var i = 0; i < rows.length; i++) {
			var ridx = dataset.addRow();
			for (var j = 0; j < colInfos.length; j++) {
				switch (colInfos[j].type) {
					case 1:
						dataset.setColumn(ridx, colInfos[j].name, nexacro.Device.decodeString(rows[i][colInfos[j].name]));
						break;
					case 4:
						dataset.setColumn(ridx, colInfos[j].name, rows[i][colInfos[j].name]);
						break;
					case 2:
					case 3:
					case 5:
					case 6:
					case 7:
					case 0:
					case 8:
					case 9:
					default:
						dataset.setColumn(ridx, colInfos[j].name, rows[i][colInfos[j].name]);
						break;
				}
			}
		}
		return dataset;
	};
	_pDeviceI.JSONStringToDataset2 = function (jsonString, dataset) {
		if (dataset == undefined) {
			dataset = new nexacro.Dataset();
		}

		return nexacro.Device.JSONObjectToDataset2(eval('(' + jsonString + ')'), dataset);
	};

	_pDeviceI.isHybrid = function () {
		return this._is_hybrid;
	};

	_pDeviceI.useFakeXHR = function () {
		return this._use_fakexhr;
	};

	_pDeviceI.exit = function (useCache) {
		var _useCache = false;

		if (arguments.length == 0) {
			_bUseCache = "false";
		}
		else {
			if (useCache == true || (typeof (useCache) == "string" && useCache == "true")) {
				_useCache = "true";
			}
			else if (useCache == false || (typeof (useCache) == "string" && useCache == "false")) {
				_useCache = "false";
			}
			else {
				return false;
			}
		}

		if (nexacro.Device.curDevice == 1) {
			var jsonstr = "";
			jsonstr = "EXIT" + _useCache;
			nexacro.Device.exec(jsonstr);
		}
	};

	_pDeviceI = null;
}


if (nexacro.System) {
	nexacro.System.prototype = function () {
		this._id = nexacro.Device.makeID();
		nexacro.Device._userCreatedObj[this._id] = this;

		this.enableevent = true;
		if (nexacro.Device.curDevice == 1) {
			var osname = "iOS";
			var devicename, version;
			var iphone = navigator.userAgent.match(/(iPhone\sOS)\s([\d_]+)/);
			var ipad = navigator.userAgent.match(/(iPad).*OS\s([\d_]+)/);
			if (iphone) {
				devicename = "iphone";
				version = iphone[2].replace(/_/g, '.');
			}
			if (ipad) {
				devicename = "ipad";
				version = ipad[2].replace(/_/g, '.');
			}

			this.osversion = osname + " " + version;
			this.navigatorname = "nexacro";
			this.navigatorversion = "14";
			this.mobilephonenumber = "";
			this.mobileproducttype = devicename;
			this.mobileuniqueid = "";
			this.mobileorientation = "";
			this.taskbarsize = "20";
			this.userapppath = "";
		}
	};

	nexacro.System.prototype.set_osversion = function () {
	};
	nexacro.System.prototype.set_navigatorname = function () {
	};
	nexacro.System.prototype.set_navigatorversion = function () {
	};
	nexacro.System.prototype.set_mobilephonenumber = function () {
	};
	nexacro.System.prototype.set_mobileproducttype = function () {
	};
	nexacro.System.prototype.set_mobileuniqueid = function () {
	};
	nexacro.System.prototype.set_mobileorientation = function () {
	};
	nexacro.System.prototype.set_taskbarsize = function () {
	};
	nexacro.System.prototype.set_userapppath = function () {
	};
	nexacro.System.prototype.set_sdcardpath = function () {
	};

	nexacro.System.prototype.destroy = function () {
		delete nexacro.Device._userCreatedObj[this._id];
		return true;
	};



	nexacro.System.makeCall = function (strPhoneNumber, bAutoDialing) {
		if (bAutoDialing == "undefined" || bAutoDialing == null) {
			this.bAutoDialing = false;
		}
		else {
			this.bAutoDialing = bAutoDialing;
		}

		var pcheck = nexacro.Device.pramck_makeCall(strPhoneNumber, this.bAutoDialing);
		if (pcheck == true) {
			var renamephonNumber = strPhoneNumber;
			renamephonNumber = renamephonNumber.split("-").join("");

			var tempPhoneNumber = renamephonNumber.split("+").join("");
			if (tempPhoneNumber.length < 3) {
				return false;
			}

			if (nexacro.Device.curDevice == 0) {
				var params = '{"telNo":"' + renamephonNumber + '", "bAuto":"' + this.bAutoDialing + '"}';
				var jsonstr = '{"id":' + this._id + ', "div":"Call", "method":"sendCall", "params":' + params + '}';
				nexacro.Device.exec(jsonstr);
			}
			else {
				if ((typeof nexacro.Device.isHybrid() == "undefined") || nexacro.Device.isHybrid() == false) {
					return true;
				}

				nexacro.Device.bridge.src = 'tel:' + renamephonNumber;
			}
			return true;
		}
		else {
			return false;
		}
	};

	nexacro.System.getPackageVersion = function () {
		return nexacro._getPackageVersion();
	};



	nexacro.System._setAccessibilityStatus = function (v) {
		if (v.accessibilitystatus == 1) {
			nexacro.System._accessibilitystatus = true;
		}
		else {
			nexacro.System._accessibilitystatus = false;
		}
	};

	nexacro.System.getAccessibilityStatus = function () {
		if (nexacro.Device.curDevice == 0) {
			nexacro.System._accessibilitystatus = nexacro._getAccessibilityStatus();
		}
		return nexacro.System._accessibilitystatus;
	};

	nexacro.System.play = function (strFilePath) {
		var pcheck = nexacro.Device.paramck_play(strFilePath);
		if (pcheck == true) {
			if (nexacro.Device.curDevice == 0) {
				var EnvironmentPath = "";
				var androidFilePath = "";
				var rootPathCheck = strFilePath.substring(0, 9);

				if (rootPathCheck.toLowerCase() == "%userapp%") {
					EnvironmentPath = 1;
					androidFilePath = strFilePath.substring(9, strFilePath.length);
				}
				else if (rootPathCheck.toLowerCase() == "%sd_card%") {
					EnvironmentPath = 2;
					androidFilePath = strFilePath.substring(9, strFilePath.length);
				}
				else if (rootPathCheck.substring(0, 7) == "http://") {
					androidFilePath = strFilePath;
				}
				else {
					var _filecache = application._getFileCache(strFilePath);
					if (null != _filecache) {
						EnvironmentPath = 3;
						androidFilePath = _filecache;
					}
					else {
						return false;
					}
				}

				var params = '{"filePath":"' + androidFilePath + '", "EnvironmentPath":"' + EnvironmentPath + '"}';
			}
			else {
				var iosfilepath = "";
				var rootPathCheck = strFilePath.substring(0, 9);

				if (rootPathCheck.toLowerCase() == "%userapp%") {
					iosfilepath = "_userapp_" + strFilePath.substring(9, strFilePath.length);
				}
				else if (rootPathCheck.substring(0, 7) == "http://") {
					iosfilepath = strFilePath;
				}
				else {
					var _filecache = application._getFileCache(strFilePath);
					if (null != _filecache) {
						iosfilepath = "_userapp_" + _filecache;
					}
					else {
						return false;
					}
				}

				var params = '{"filePath":"' + iosfilepath + '"}';
			}
			var jsonstr = '{"id":' + this._id + ', "div":"Sound", "method":"shotplay", "params":' + params + '}';
			nexacro.Device.exec(jsonstr);
			return true;
		}
		else {
			return false;
		}
	};

	nexacro.System.stop = function () {
		var params = '""';
		var jsonstr = '{"id":' + this._id + ', "div":"Sound", "method":"shotstop", "params":' + params + '}';
		nexacro.Device.exec(jsonstr);
		return true;
	};

	nexacro.System.getSystemInfo = function () {
		this._id = nexacro.Device.makeID();
		nexacro.Device._userCreatedObj[this._id] = this;
		nexacro.Device.exec('{"id":' + this._id + ', "div":"PhoneInfo","method":"getAll"}');
	};

	nexacro.System.recvPhoneInfo = function (params) {
		nexacro.System.osversion = params.osversion;
		nexacro.System.mobilephonenumber = params.mobilephonenumber;
		nexacro.System.mobileproducttype = params.mobileproducttype;
		nexacro.System.mobileuniqueid = params.mobileuniqueid;
		nexacro.System.mobileorientation = params.mobileorientation;
		this.userapppath = params.userapppath;
		this.sdcardpath = "";

		if (nexacro.Device.curDevice == 1) {
			nexacro.Device.isphone = params.isIPhone;
			nexacro.System.computername = params.computername;
			nexacro.System.cpuarchitecture = params.cpuarchitecture;
			nexacro.System.cputype = params.cputype;
			nexacro.System.cpucount = params.cpucount;
			nexacro.Device.libraryversion[0] = params.libraryversion;
			if (params.accessibility == 1) {
				nexacro.System._accessibilitystatus = true;
			}
			else {
				nexacro.System._accessibilitystatus = false;
			}

			if (params.preferences) {
				var localstorage = window.localStorage;
				if (localstorage) {
					var preferences = JSON.parse(params.preferences);
					for (var key in preferences) {
						var value = nexacro.Device.decodeString(preferences[key]);
						if (!localstorage[key]) {
							localstorage.setItem(key, value);
						}
						else {
							if (value != localstorage[key]) {
								nexacro._setPreferencesValue(key, localstorage[key]);
							}
						}
					}
				}
			}
		}
	};

	nexacro.System.setOrientation = function (nOrientation) {
		if ((nOrientation == null || typeof (nOrientation) == "undefined")) {
			return false;
		}

		if (typeof (nOrientation) == "string") {
			nOrientation = Number(nOrientation);
		}

		if (nOrientation < -1 || nOrientation > 3) {
			return false;
		}

		if (nexacro.Device.curDevice == 0) {
			nexacro._setOrientation(nOrientation);
		}
		else {
			var jsonstr = "";
			jsonstr = "ORIENTATION:" + nOrientation;
			nexacro.Device.exec(jsonstr);
		}
		return true;
	};

	nexacro.System._setOrientation = function (nOrientation) {
		this.mobileorientation = nOrientation;
		if (nexacro.Device.curDevice == 1) {
			nexacro.System.mobileorientation = nOrientation;
		}
	};
}


nexacro._initDeviceAPI = function () {
	nexacro.Device = new nexacro.DeviceI();
	if (nexacro.Device.isHybrid()) {
		if (window.system) {
			if (nexacro.Device.curDevice == 1) {
				nexacro.System.prototype();
				nexacro.System.getSystemInfo();
			}
		}
	}
};

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.OS == "Android" && nexacro.Browser == "Runtime") {
	nexacro.DeviceI.prototype.setup = function () {
		nexacro.__initDevice(this, this.runCallback, this.keyEvent, application, system, nexacro);

		if (nexacro.__getLibVersion) {
			this.libraryversion = nexacro.__getLibVersion();
		}

		this._userCreatedObj = {
		};
		this.curDevice = 0;
		this.isphone = 0;
		this._use_fakexhr = false;
	};

	nexacro.DeviceI.prototype.exec = function (method) {
		nexacro.__execMobileAPI(method);
	};

	nexacro.Application._callscript = function (script) {
		eval(script);
	};

	nexacro._initDeviceAPI();
}

//==============================================================================
//
//  TOBESOFT Co., Ltd.
//  Copyright 2014 TOBESOFT Co., Ltd.
//  All Rights Reserved.
//
//  NOTICE: TOBESOFT permits you to use, modify, and distribute this file 
//          in accordance with the terms of the license agreement accompanying it.
//
//  Readme URL: http://www.nexacro.co.kr/legal/nexacro-public-license-readme-1.1.html	
//
//==============================================================================

if (nexacro.OS == "iOS" && window.location.pathname.split('/').pop() == "Run.html") {
	nexacro.DeviceI.prototype.setup = function () {
		this._userCreatedObj = {
		};
		this.curDevice = 0;
		this.isphone = 0;
		this._is_hybrid = true;
		this._protocolparameters = {
		};
		this._use_fakexhr = false;

		var queries = location.search.substring(1).split('&');
		for (var i = 0; i < queries.length; i++) {
			var query = queries[i].split('=');
			if (decodeURIComponent(query[0]) == "fake-xhr") {
				this._use_fakexhr = nexacro._toBoolean(decodeURIComponent(query[1]));
				break;
			}
		}

		if (nexacro.OS == "iOS") {
			this.curDevice = 1;
		}
	};

	nexacro.DeviceI.prototype.execiOS = function (method) {
		if (this.msgqueue.length > 0 && this.curDevice == 1) {
			this.msgqueue.reverse();
			this.bridge.src = "nexacro://?" + encodeURI(this.msgqueue.pop());
			this.msgqueue.reverse();
		}
	};

	nexacro.DeviceI.prototype.exec = function (method, sync) {
		if (this.isHybrid() == false) {
			return;
		}

		if (!sync) {
			window.webkit.messageHandlers.nexacro.postMessage(method);
		}
		else {
			return prompt("nexacro", method);
		}
	};

	nexacro.DeviceI.prototype._setCookie = function (name, value, days, bsecure) {
		if (this.isHybrid() == false) {
			return;
		}

		if (!this.channel_frame) {
			this.channel_frame = document.createElement("IFRAME");
			this.channel_frame.setAttribute("height", "0px");
			this.channel_frame.setAttribute("width", "0px");
			this.channel_frame.setAttribute("frameborder", "0");
			this.channel_frame.style.display = "none";
			this.channel_frame.onload = function () {
				nexacro.Device._setCookie(name, value, days, bsecure);
			};
			this.channel_frame.src = nexacro._transfullurl(nexacro._getLocalStorage("_project_uri", ""), "comm.html");
			document.documentElement.appendChild(this.channel_frame);
			return;
		}

		var doc = this.channel_frame.contentWindow.document;

		var expires = "";
		if (days) {
			if (typeof (days) == "string") {
				expires = "; expires=" + days;
			}
			else if ((typeof days) == "object" && (days instanceof Date)) {
				expires = "; expires=" + days.toGMTString();
			}
		}
		else {
			expires = "";
		}

		var cookiestr = name + "=" + value + expires + "; path=/";
		if (bsecure) {
			cookiestr += "; secure";
		}

		doc.cookie = cookiestr;
	};

	nexacro.DeviceI.prototype._getCookie = function (name) {
		if (this.isHybrid() == false) {
			return;
		}

		if (!this.channel_frame) {
			this.channel_frame = document.createElement("IFRAME");
			this.channel_frame.setAttribute("height", "0px");
			this.channel_frame.setAttribute("width", "0px");
			this.channel_frame.setAttribute("frameborder", "0");
			this.channel_frame.style.display = "none";
			this.channel_frame.src = nexacro._transfullurl(nexacro._getLocalStorage("_project_uri", ""), "comm.html");
			document.documentElement.appendChild(this.channel_frame);
		}

		var doc = this.channel_frame.contentWindow.document;

		var nameEQ = name + "=";
		var ca = doc.cookie.split(';');

		for (var i = 0, n = ca.length; i < n; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') {
				c = c.substring(1);
			}
			if (c.indexOf(nameEQ) == 0) {
				return c.substring(nameEQ.length);
			}
		}
		return null;
	};

	nexacro._convertRealPath = function (strAlias) {
		if (nexacro.Device.isHybrid() == undefined || !nexacro.Device.isHybrid()) {
			return strAlias;
		}

		if (strAlias === undefined || strAlias === null) {
			return "";
		}
		var rootPathCheck = strAlias.substring(0, 9);
		var iosFilePath = "";
		if (rootPathCheck.toLowerCase() == "%userapp%") {
			iosFilePath = strAlias.substring(9, strAlias.length);
			return nexacro.System.userapppath + iosFilePath;
		}
		else {
			return strAlias;
		}
	};

	nexacro._isHybrid = function () {
		return nexacro.Device.isHybrid();
	};

	nexacro._useFakeXHR = function () {
		return nexacro.Device.useFakeXHR();
	};

	nexacro._checkDevicePermission = function (permission_types) {
		if (permission_types === undefined || permission_types === null) {
			return;
		}

		var params = '{"permissions":' + JSON.stringify(permission_types) + '}';
		var jsonstr = '{"id":null, "div":"Permission", "method":"checkDevicePermission", "params":' + params + '}';
		nexacro.Device.exec(jsonstr);
	};

	nexacro._requestDevicePermission = function (permission_types, description) {
		if (permission_types === undefined || permission_types === null) {
			return;
		}

		var params;
		if (description === undefined || description === null) {
			params = '{"permissions":' + JSON.stringify(permission_types) + ',"description":null}';
		}
		else {
			params = '{"permissions":' + JSON.stringify(permission_types) + ',"description":"' + description + '"}';
		}
		var jsonstr = '{"id":null, "div":"Permission", "method":"requestDevicePermission", "params":' + params + '}';
		nexacro.Device.exec(jsonstr);
	};

	nexacro._convertDatasetSSVToBIN = function (ssvdata) {
		return ssvdata;
	};
	nexacro._convertDatasetBINToSSV = function (bindata) {
		return bindata;
	};

	nexacro._convertStreamSSVToBIN = function (ssvdata) {
		return ssvdata;
	};
	nexacro._convertStreamBINToSSV = function (bindata) {
		return bindata;
	};

	nexacro._setProtocolVar = function (name, key, val) {
		var protocol = nexacro.Device._protocolparameters[name];

		if (protocol == undefined) {
			nexacro.Device._protocolparameters[name] = {
			};
			protocol = nexacro.Device._protocolparameters[name];
		}

		protocol[key] = val;

		return true;
	};

	nexacro._execBrowser = function (strUrl) {
		this._id = nexacro.Device.makeID();

		if (strUrl == null || strUrl == undefined) {
			return false;
		}

		var params = '{"url":"' + strUrl + '"}';
		var jsonstr = '{"id":' + this._id + ', "div":"Browser", "method":"execBrowser", "params":' + params + '}';

		nexacro.Device.exec(jsonstr);

		return true;
	};

	nexacro._setPreferencesValue = function (key, value) {
		if (!key) {
			return false;
		}

		var params = '{}';

		if (value) {
			params = '{"key":"' + key + '","value":"' + nexacro.Device.encodeString(value) + '"}';
		}
		else {
			params = '{"key":"' + key + '","value":undefined}';
		}

		var jsonstr = '{"id":0, "div":"Preferences", "method":"setPreferencesValue", "params":' + params + '}';

		nexacro.Device.exec(jsonstr);

		return true;
	};

	nexacro._initDeviceAPI();
}

